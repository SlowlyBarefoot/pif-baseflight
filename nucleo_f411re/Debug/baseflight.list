
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000254f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f68  08025690  08025690  00035690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080295f8  080295f8  000401c8  2**0
                  CONTENTS
  4 .ARM          00000008  080295f8  080295f8  000395f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029600  08029600  000401c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029600  08029600  00039600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029604  08029604  00039604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08029608  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb4  200001c8  080297d0  000401c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  080297d0  00041d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044e15  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a6c  00000000  00000000  0008500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002700  00000000  00000000  0008ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023d0  00000000  00000000  00091180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020afc  00000000  00000000  00093550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f95  00000000  00000000  000b404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9c3c  00000000  00000000  000e9fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad38  00000000  00000000  00193c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c8 	.word	0x200001c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08025678 	.word	0x08025678

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001cc 	.word	0x200001cc
 80001d4:	08025678 	.word	0x08025678

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01a f9f9 	bl	801b588 <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001e4 	.word	0x200001e4
 80011a4:	200004cc 	.word	0x200004cc

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001e4 	.word	0x200001e4

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001e4 	.word	0x200001e4
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001e4 	.word	0x200001e4
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Config config;

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <gy86Detect+0x108>)
 8001250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    memset(&config, 0, sizeof(PifGy86Config));
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2214      	movs	r2, #20
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f021 fb41 	bl	80228e4 <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001262:	2301      	movs	r3, #1
 8001264:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001266:	2303      	movs	r3, #3
 8001268:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d102      	bne.n	800127a <gy86Detect+0x42>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e029      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 188)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001280:	2bbb      	cmp	r3, #187	; 0xbb
 8001282:	d902      	bls.n	800128a <gy86Detect+0x52>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e021      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 98)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001290:	2b61      	cmp	r3, #97	; 0x61
 8001292:	d902      	bls.n	800129a <gy86Detect+0x62>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 8001294:	2302      	movs	r3, #2
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e019      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 42)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012a0:	2b29      	cmp	r3, #41	; 0x29
 80012a2:	d902      	bls.n	80012aa <gy86Detect+0x72>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012a4:	2303      	movs	r3, #3
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e011      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012b0:	2b13      	cmp	r3, #19
 80012b2:	d902      	bls.n	80012ba <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012b4:	2304      	movs	r3, #4
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e009      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d902      	bls.n	80012ca <gy86Detect+0x92>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c4:	2305      	movs	r3, #5
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <gy86Detect+0x96>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ca:	2306      	movs	r3, #6
 80012cc:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012ce:	2303      	movs	r3, #3
 80012d0:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d2:	2302      	movs	r3, #2
 80012d4:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012d6:	230d      	movs	r3, #13
 80012d8:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012da:	2301      	movs	r3, #1
 80012dc:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012de:	2303      	movs	r3, #3
 80012e0:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e2:	2306      	movs	r3, #6
 80012e4:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012e6:	2300      	movs	r3, #0
 80012e8:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ea:	2308      	movs	r3, #8
 80012ec:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012ee:	2319      	movs	r3, #25
 80012f0:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = p_sensor_set->baro.evt_read;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &config)) return false;
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f821 	bl	8001348 <mpu6050Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <gy86Detect+0xd8>
 800130c:	2300      	movs	r3, #0
 800130e:	e013      	b.n	8001338 <gy86Detect+0x100>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <gy86Detect+0x10c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->acc.hardware = hw_Names[0];
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <gy86Detect+0x10c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->mag.hardware = hw_Names[1];
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <gy86Detect+0x10c>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->baro.hardware = hw_Names[2];
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <gy86Detect+0x10c>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    return true;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	31924418 	.word	0x31924418
 8001344:	20000000 	.word	0x20000000

08001348 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Config* p_config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &p_sensor_set->imu_sensor, p_config)) return FALSE;
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <mpu6050Init+0x6c>)
 800135c:	2100      	movs	r1, #0
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <mpu6050Init+0x70>)
 8001360:	f017 f874 	bl	801844c <pifGy86_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <mpu6050Init+0x26>
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <mpu6050Init+0x62>
    s_gy86._mpu6050.gyro_scale = 4;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <mpu6050Init+0x70>)
 8001370:	2204      	movs	r2, #4
 8001372:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <mpu6050Init+0x70>)
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <mpu6050Init+0x74>)
 800137e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->acc.read = mpuAccRead;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <mpu6050Init+0x78>)
 8001386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_sensor_set->gyro.init = mpuGyroInit;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <mpu6050Init+0x7c>)
 800138e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->gyro.read = mpuGyroRead;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x80>)
 8001394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    p_sensor_set->mag.init = hmc5883lInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <mpu6050Init+0x84>)
 800139c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_sensor_set->mag.read = hmc5883lRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <mpu6050Init+0x88>)
 80013a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return TRUE;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200014a0 	.word	0x200014a0
 80013b8:	200001f4 	.word	0x200001f4
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013f7 	.word	0x080013f7
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001461 	.word	0x08001461
 80013cc:	080014a9 	.word	0x080014a9
 80013d0:	080017f9 	.word	0x080017f9

080013d4 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f018 f851 	bl	801948e <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, int16_t *accData)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f018 f853 	bl	80194b4 <pifImuSensor_ReadAccel2>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <mpuAccRead+0x22>
 8001414:	2300      	movs	r3, #0
 8001416:	e00e      	b.n	8001436 <mpuAccRead+0x40>
    accData[0] = data[0];
 8001418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001428:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001432:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f017 ffe3 	bl	801941c <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, int16_t *gyroData)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro2(&p_sensor_set->imu_sensor, data)) return FALSE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f017 ffe4 	bl	8019440 <pifImuSensor_ReadGyro2>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <mpuGyroRead+0x22>
 800147e:	2300      	movs	r3, #0
 8001480:	e00e      	b.n	80014a0 <mpuGyroRead+0x40>
	gyroData[0] = data[0];
 8001482:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3302      	adds	r3, #2
 800148e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001492:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800149c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f018 f818 	bl	8019504 <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014d4:	4ba4      	ldr	r3, [pc, #656]	; (8001768 <hmc5883lInit+0x2c0>)
 80014d6:	68d8      	ldr	r0, [r3, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	f240 5201 	movw	r2, #1281	; 0x501
 80014de:	216a      	movs	r1, #106	; 0x6a
 80014e0:	f011 f862 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <hmc5883lInit+0x46>
 80014ea:	2300      	movs	r3, #0
 80014ec:	e17b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014ee:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <hmc5883lInit+0x2c0>)
 80014f0:	68d8      	ldr	r0, [r3, #12]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f240 1201 	movw	r2, #257	; 0x101
 80014f8:	2137      	movs	r1, #55	; 0x37
 80014fa:	f011 f855 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <hmc5883lInit+0x60>
 8001504:	2300      	movs	r3, #0
 8001506:	e16e      	b.n	80017e6 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f362 0301 	bfi	r3, r2, #0, #2
 8001514:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2204      	movs	r2, #4
 800151a:	f362 0384 	bfi	r3, r2, #2, #3
 800151e:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001520:	4b91      	ldr	r3, [pc, #580]	; (8001768 <hmc5883lInit+0x2c0>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	7b3a      	ldrb	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 f827 	bl	801257c <pifI2cDevice_WriteRegByte>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <hmc5883lInit+0x90>
 8001534:	2300      	movs	r3, #0
 8001536:	e156      	b.n	80017e6 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001538:	2103      	movs	r1, #3
 800153a:	488c      	ldr	r0, [pc, #560]	; (800176c <hmc5883lInit+0x2c4>)
 800153c:	f017 fc3e 	bl	8018dbc <pifHmc5883_SetGain>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <hmc5883lInit+0xa2>
 8001546:	2300      	movs	r3, #0
 8001548:	e14d      	b.n	80017e6 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f013 fc22 	bl	8014d94 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4885      	ldr	r0, [pc, #532]	; (800176c <hmc5883lInit+0x2c4>)
 8001558:	f017 fc4f 	bl	8018dfa <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
 8001560:	e03d      	b.n	80015de <hmc5883lInit+0x136>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <hmc5883lInit+0x2c0>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f011 f806 	bl	801257c <pifI2cDevice_WriteRegByte>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <hmc5883lInit+0xd2>
 8001576:	2300      	movs	r3, #0
 8001578:	e135      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f013 fc0a 	bl	8014d94 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4879      	ldr	r0, [pc, #484]	; (800176c <hmc5883lInit+0x2c4>)
 8001588:	f017 fc37 	bl	8018dfa <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	bfa8      	it	ge
 80015b6:	4613      	movge	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfa8      	it	ge
 80015c2:	4613      	movge	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015ca:	dc03      	bgt.n	80015d4 <hmc5883lInit+0x12c>
            bret = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015d2:	e007      	b.n	80015e4 <hmc5883lInit+0x13c>
        }
        actLed1Toggle();
 80015d4:	f000 fd94 	bl	8002100 <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	ddbe      	ble.n	8001562 <hmc5883lInit+0xba>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f362 0301 	bfi	r3, r2, #0, #2
 80015ec:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <hmc5883lInit+0x2c0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	7b3a      	ldrb	r2, [r7, #12]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f010 ffc0 	bl	801257c <pifI2cDevice_WriteRegByte>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <hmc5883lInit+0x15e>
 8001602:	2300      	movs	r3, #0
 8001604:	e0ef      	b.n	80017e6 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e03d      	b.n	8001688 <hmc5883lInit+0x1e0>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <hmc5883lInit+0x2c0>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f010 ffb1 	bl	801257c <pifI2cDevice_WriteRegByte>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <hmc5883lInit+0x17c>
 8001620:	2300      	movs	r3, #0
 8001622:	e0e0      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f013 fbb5 	bl	8014d94 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <hmc5883lInit+0x2c4>)
 8001632:	f017 fbe2 	bl	8018dfa <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800165c:	4293      	cmp	r3, r2
 800165e:	bfa8      	it	ge
 8001660:	4613      	movge	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001668:	4293      	cmp	r3, r2
 800166a:	bfa8      	it	ge
 800166c:	4613      	movge	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001674:	dc03      	bgt.n	800167e <hmc5883lInit+0x1d6>
            bret = false;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 800167c:	e007      	b.n	800168e <hmc5883lInit+0x1e6>
        }
        actLed1Toggle();
 800167e:	f000 fd3f 	bl	8002100 <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2b09      	cmp	r3, #9
 800168c:	ddbe      	ble.n	800160c <hmc5883lInit+0x164>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001770 <hmc5883lInit+0x2c8>
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	eef0 7ae7 	vabs.f32	s15, s15
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <hmc5883lInit+0x2c0>)
 80016a6:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001770 <hmc5883lInit+0x2c8>
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	eef0 7ae7 	vabs.f32	s15, s15
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <hmc5883lInit+0x2c0>)
 80016c2:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001774 <hmc5883lInit+0x2cc>
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eef0 7ae7 	vabs.f32	s15, s15
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <hmc5883lInit+0x2c0>)
 80016de:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	f36f 0301 	bfc	r3, #0, #2
 80016e8:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f0:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <hmc5883lInit+0x2c0>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	7b3a      	ldrb	r2, [r7, #12]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f010 ff3e 	bl	801257c <pifI2cDevice_WriteRegByte>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <hmc5883lInit+0x262>
 8001706:	2300      	movs	r3, #0
 8001708:	e06d      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 800170a:	2101      	movs	r1, #1
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <hmc5883lInit+0x2c4>)
 800170e:	f017 fb55 	bl	8018dbc <pifHmc5883_SetGain>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <hmc5883lInit+0x274>
 8001718:	2300      	movs	r3, #0
 800171a:	e064      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <hmc5883lInit+0x2c0>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f010 ff29 	bl	801257c <pifI2cDevice_WriteRegByte>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <hmc5883lInit+0x28c>
 8001730:	2300      	movs	r3, #0
 8001732:	e058      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <hmc5883lInit+0x2c0>)
 8001736:	68d8      	ldr	r0, [r3, #12]
 8001738:	2300      	movs	r3, #0
 800173a:	f240 1201 	movw	r2, #257	; 0x101
 800173e:	2137      	movs	r1, #55	; 0x37
 8001740:	f010 ff32 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <hmc5883lInit+0x2a6>
 800174a:	2300      	movs	r3, #0
 800174c:	e04b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <hmc5883lInit+0x2c0>)
 8001750:	68d8      	ldr	r0, [r3, #12]
 8001752:	2301      	movs	r3, #1
 8001754:	f240 5201 	movw	r2, #1281	; 0x501
 8001758:	216a      	movs	r1, #106	; 0x6a
 800175a:	f010 ff25 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <hmc5883lInit+0x2d0>
 8001764:	2300      	movs	r3, #0
 8001766:	e03e      	b.n	80017e6 <hmc5883lInit+0x33e>
 8001768:	200001f4 	.word	0x200001f4
 800176c:	20000208 	.word	0x20000208
 8001770:	466f4000 	.word	0x466f4000
 8001774:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <hmc5883lInit+0x348>)
 8001788:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800178c:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <hmc5883lInit+0x348>)
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <hmc5883lInit+0x348>)
 8001798:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800179c:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <hmc5883lInit+0x348>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <hmc5883lInit+0x348>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe80 	bl	80004b0 <__aeabi_f2d>
 80017b0:	4680      	mov	r8, r0
 80017b2:	4689      	mov	r9, r1
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <hmc5883lInit+0x348>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe79 	bl	80004b0 <__aeabi_f2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <hmc5883lInit+0x348>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe72 	bl	80004b0 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d4:	e9cd 4500 	strd	r4, r5, [sp]
 80017d8:	4642      	mov	r2, r8
 80017da:	464b      	mov	r3, r9
 80017dc:	4905      	ldr	r1, [pc, #20]	; (80017f4 <hmc5883lInit+0x34c>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f011 fe8e 	bl	8013500 <pifLog_Printf>
    return TRUE;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	200001f4 	.word	0x200001f4
 80017f4:	080256a8 	.word	0x080256a8

080017f8 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, int16_t *magData)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f017 fe8d 	bl	801952a <pifImuSensor_ReadMag2>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <hmc5883lRead+0x22>
 8001816:	2300      	movs	r3, #0
 8001818:	e00e      	b.n	8001838 <hmc5883lRead+0x40>
	magData[0] = data[0];
 800181a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800182a:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001834:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <_actHcSr04Trigger+0x24>)
 8001852:	f01b fa1f 	bl	801cc94 <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <_actHcSr04Trigger+0x28>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	20000278 	.word	0x20000278

0800186c <hcsr04Echo>:

void hcsr04Echo()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <hcsr04Echo+0x24>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <hcsr04Echo+0x24>)
 800187c:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <hcsr04Echo+0x24>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <hcsr04Echo+0x28>)
 8001886:	f017 f935 	bl	8018af4 <pifHcSr04_sigReceiveEcho>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000278 	.word	0x20000278
 8001894:	20000258 	.word	0x20000258

08001898 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <_evtHcSr04Distance+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d007      	beq.n	80018d0 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <_evtHcSr04Distance+0x48>)
 80018c6:	f017 f8ed 	bl	8018aa4 <pifHcSr04_SetTemperature>
        pretemp = temp;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
    }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000027c 	.word	0x2000027c
 80018dc:	20000280 	.word	0x20000280
 80018e0:	20000258 	.word	0x20000258

080018e4 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 80018f0:	2100      	movs	r1, #0
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <hcsr04Init+0x50>)
 80018f4:	f017 f84a 	bl	801898c <pifHcSr04_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <hcsr04Init+0x1e>
 80018fe:	2300      	movs	r3, #0
 8001900:	e013      	b.n	800192a <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <hcsr04Init+0x50>)
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <hcsr04Init+0x54>)
 8001906:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <hcsr04Init+0x50>)
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <hcsr04Init+0x58>)
 800190c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4619      	mov	r1, r3
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <hcsr04Init+0x50>)
 8001914:	f017 f8a2 	bl	8018a5c <pifHcSr04_StartTrigger>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <hcsr04Init+0x3e>
 800191e:	2300      	movs	r3, #0
 8001920:	e003      	b.n	800192a <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <hcsr04Init+0x5c>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6013      	str	r3, [r2, #0]
    return TRUE;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000258 	.word	0x20000258
 8001938:	08001841 	.word	0x08001841
 800193c:	08001899 	.word	0x08001899
 8001940:	2000027c 	.word	0x2000027c

08001944 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4613      	mov	r3, r2
 8001954:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b21b      	sxth	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	b299      	uxth	r1, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	b29a      	uxth	r2, r3
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	b298      	uxth	r0, r3
 8001972:	8b3b      	ldrh	r3, [r7, #24]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <actI2cRead+0x78>)
 800197e:	f01b fec3 	bl	801d708 <HAL_I2C_Mem_Read_DMA>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <actI2cRead+0x48>
 8001988:	2300      	movs	r3, #0
 800198a:	e013      	b.n	80019b4 <actI2cRead+0x70>
 800198c:	2302      	movs	r3, #2
 800198e:	e011      	b.n	80019b4 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b21b      	sxth	r3, r3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	b21b      	sxth	r3, r3
 800199c:	b299      	uxth	r1, r3
 800199e:	8b3b      	ldrh	r3, [r7, #24]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <actI2cRead+0x78>)
 80019a4:	f01b fc1c 	bl	801d1e0 <HAL_I2C_Master_Receive_DMA>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <actI2cRead+0x6e>
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <actI2cRead+0x70>
 80019b2:	2302      	movs	r3, #2
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000574 	.word	0x20000574

080019c0 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	4613      	mov	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d016      	beq.n	8001a06 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	b299      	uxth	r1, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	8b3b      	ldrh	r3, [r7, #24]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <actI2cWrite+0x6c>)
 80019f4:	f01b fd24 	bl	801d440 <HAL_I2C_Mem_Write_DMA>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <actI2cWrite+0x42>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e010      	b.n	8001a24 <actI2cWrite+0x64>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <actI2cWrite+0x6c>)
 8001a14:	f01b fab4 	bl	801cf80 <HAL_I2C_Master_Transmit_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <actI2cWrite+0x62>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <actI2cWrite+0x64>
 8001a22:	2302      	movs	r3, #2
	}
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000574 	.word	0x20000574

08001a30 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a46:	f010 fe11 	bl	801266c <pifI2cPort_sigEndTransfer>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	200014a0 	.word	0x200014a0

08001a5c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d103      	bne.n	8001a76 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a72:	f010 fdfb 	bl	801266c <pifI2cPort_sigEndTransfer>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	200014a0 	.word	0x200014a0

08001a88 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_I2C_MemTxCpltCallback+0x24>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001a9e:	f010 fde5 	bl	801266c <pifI2cPort_sigEndTransfer>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	200014a0 	.word	0x200014a0

08001ab4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aca:	f010 fdcf 	bl	801266c <pifI2cPort_sigEndTransfer>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	200014a0 	.word	0x200014a0

08001ae0 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <i2cInit+0x2c>)
 8001aec:	f010 fadc 	bl	80120a8 <pifI2cPort_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <i2cInit+0x1a>
 8001af6:	2300      	movs	r3, #0
 8001af8:	e006      	b.n	8001b08 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <i2cInit+0x2c>)
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <i2cInit+0x30>)
 8001afe:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <i2cInit+0x2c>)
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <i2cInit+0x34>)
 8001b04:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200014a0 	.word	0x200014a0
 8001b10:	08001945 	.word	0x08001945
 8001b14:	080019c1 	.word	0x080019c1

08001b18 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d811      	bhi.n	8001b52 <failsafeCheck+0x3a>
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <failsafeCheck+0x78>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90c      	bls.n	8001b52 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <failsafeCheck+0x7c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <failsafeCheck+0x7c>)
 8001b50:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <failsafeCheck+0x7c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d114      	bne.n	8001b84 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <failsafeCheck+0x7c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <failsafeCheck+0x80>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b14      	cmp	r3, #20
 8001b68:	dd09      	ble.n	8001b7e <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <failsafeCheck+0x80>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b14      	subs	r3, #20
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <failsafeCheck+0x80>)
 8001b7a:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b7c:	e002      	b.n	8001b84 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <failsafeCheck+0x80>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000389 	.word	0x20000389
 8001b98:	200016ce 	.word	0x200016ce

08001b9c <pwmReadRc>:

void pwmReadRc()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <pwmReadRc+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <pwmReadRc+0x40>)
 8001bae:	f016 fb64 	bl	801827a <pifRcPpm_sigTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <pwmReadRc+0x40>)
 8001bbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ffa5 	bl	8001b18 <failsafeCheck>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001bdc 	.word	0x20001bdc
 8001bdc:	20000284 	.word	0x20000284

08001be0 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00b      	b.n	8001c0e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <_evtRcReceive+0x48>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	461a      	mov	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4293      	cmp	r3, r2
 8001c18:	dbed      	blt.n	8001bf6 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 8001c1a:	6938      	ldr	r0, [r7, #16]
 8001c1c:	f012 fd0c 	bl	8014638 <pifTask_SetTrigger>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000310 	.word	0x20000310

08001c2c <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <pwmWriteStandard+0x8c>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d830      	bhi.n	8001cac <pwmWriteStandard+0x80>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <pwmWriteStandard+0x24>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001cad 	.word	0x08001cad
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001cad 	.word	0x08001cad
 8001c60:	08001c8f 	.word	0x08001c8f
 8001c64:	08001cad 	.word	0x08001cad
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cad 	.word	0x08001cad
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001ca3 	.word	0x08001ca3
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8c:	e00e      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	88ba      	ldrh	r2, [r7, #4]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
 8001c96:	e009      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	88ba      	ldrh	r2, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ca0:	e004      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <pwmWriteStandard+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	bf00      	nop
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000330 	.word	0x20000330
 8001cbc:	200006d0 	.word	0x200006d0

08001cc0 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8a5a      	ldrh	r2, [r3, #18]
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <pwmInit+0x244>)
 8001cd2:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	79da      	ldrb	r2, [r3, #7]
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <pwmInit+0x248>)
 8001cda:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7d1a      	ldrb	r2, [r3, #20]
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <pwmInit+0x24c>)
 8001ce2:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001cec:	2302      	movs	r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <pwmInit+0x3e>
        i++; // next index is for PPM
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cfe:	4a84      	ldr	r2, [pc, #528]	; (8001f10 <pwmInit+0x250>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e0ae      	b.n	8001e6c <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	f000 809f 	beq.w	8001e76 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001d38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <pwmInit+0x98>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <pwmInit+0x98>
        	type = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <pwmInit+0x254>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <pwmInit+0x258>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e077      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 8001d76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d171      	bne.n	8001e66 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001d82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04e      	beq.n	8001e2c <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	895b      	ldrh	r3, [r3, #10]
 8001d92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d96:	d803      	bhi.n	8001da0 <pwmInit+0xe0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7d5b      	ldrb	r3, [r3, #21]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001da0:	2308      	movs	r3, #8
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e001      	b.n	8001daa <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <pwmInit+0x25c>)
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7d5b      	ldrb	r3, [r3, #21]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <pwmInit+0x10a>
                period = hz / 4000;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <pwmInit+0x260>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dc8:	e006      	b.n	8001dd8 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	895b      	ldrh	r3, [r3, #10]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd6:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	494e      	ldr	r1, [pc, #312]	; (8001f14 <pwmInit+0x254>)
 8001ddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dde:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	441a      	add	r2, r3
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	7891      	ldrb	r1, [r2, #2]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <pwmInit+0x254>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <pwmInit+0x254>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4846      	ldr	r0, [pc, #280]	; (8001f24 <pwmInit+0x264>)
 8001e0a:	f01e fbdb 	bl	80205c4 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e0e:	7dfa      	ldrb	r2, [r7, #23]
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <pwmInit+0x268>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	b2c8      	uxtb	r0, r1
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <pwmInit+0x268>)
 8001e1a:	7008      	strb	r0, [r1, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	0093      	lsls	r3, r2, #2
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <pwmInit+0x254>)
 8001e22:	4413      	add	r3, r2
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <pwmInit+0x26c>)
 8001e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e2a:	e01c      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001e2c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da18      	bge.n	8001e66 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <pwmInit+0x25c>)
 8001e3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	b291      	uxth	r1, r2
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <pwmInit+0x254>)
 8001e46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001e4a:	7dfa      	ldrb	r2, [r7, #23]
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <pwmInit+0x270>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	b2c8      	uxtb	r0, r1
 8001e54:	4936      	ldr	r1, [pc, #216]	; (8001f30 <pwmInit+0x270>)
 8001e56:	7008      	strb	r0, [r1, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	0093      	lsls	r3, r2, #2
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <pwmInit+0x254>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <pwmInit+0x274>)
 8001e62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b0d      	cmp	r3, #13
 8001e70:	f77f af4d 	ble.w	8001d0e <pwmInit+0x4e>
 8001e74:	e000      	b.n	8001e78 <pwmInit+0x1b8>
            break;
 8001e76:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d035      	beq.n	8001eec <pwmInit+0x22c>
		if (init->usePPM) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <pwmInit+0x258>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001e90:	2100      	movs	r1, #0
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <pwmInit+0x278>)
 8001e94:	f016 f97e 	bl	8018194 <pifRcPpm_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d026      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001e9e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ea2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <pwmInit+0x278>)
 8001ea8:	f016 f9c6 	bl	8018238 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <pwmInit+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4923      	ldr	r1, [pc, #140]	; (8001f40 <pwmInit+0x280>)
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <pwmInit+0x278>)
 8001eb6:	f016 f891 	bl	8017fdc <pifRc_AttachEvtReceive>
 8001eba:	e017      	b.n	8001eec <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <pwmInit+0x258>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <pwmInit+0x278>)
 8001ec6:	f016 fa25 	bl	8018314 <pifRcPwm_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001ed0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ed4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <pwmInit+0x278>)
 8001eda:	f016 fa95 	bl	8018408 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <pwmInit+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <pwmInit+0x280>)
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <pwmInit+0x278>)
 8001ee8:	f016 f878 	bl	8017fdc <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <pwmInit+0x284>)
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <pwmInit+0x288>)
 8001ef0:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <pwmInit+0x270>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	759a      	strb	r2, [r3, #22]

    return false;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000387 	.word	0x20000387
 8001f0c:	20000388 	.word	0x20000388
 8001f10:	08027794 	.word	0x08027794
 8001f14:	200002d8 	.word	0x200002d8
 8001f18:	20000386 	.word	0x20000386
 8001f1c:	000f4240 	.word	0x000f4240
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	200006d0 	.word	0x200006d0
 8001f28:	20000384 	.word	0x20000384
 8001f2c:	20000330 	.word	0x20000330
 8001f30:	20000385 	.word	0x20000385
 8001f34:	20000360 	.word	0x20000360
 8001f38:	20000284 	.word	0x20000284
 8001f3c:	200014f8 	.word	0x200014f8
 8001f40:	08001be1 	.word	0x08001be1
 8001f44:	20000380 	.word	0x20000380
 8001f48:	08001c2d 	.word	0x08001c2d

08001f4c <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <actPwmWriteMotor+0x30>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d205      	bcs.n	8001f72 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <actPwmWriteMotor+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	88b9      	ldrh	r1, [r7, #4]
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4798      	blx	r3
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000384 	.word	0x20000384
 8001f80:	20000380 	.word	0x20000380

08001f84 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <actPwmRead+0x20>)
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000310 	.word	0x20000310

08001fc4 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f8ad 	bl	800212c <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f852 	bl	800207c <actLed0State>
    actLed1State(OFF);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 f87b 	bl	80020d4 <actLed1State>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <failureMode>:

void failureMode(uint8_t mode)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
#ifndef __PIF_NO_LOG__
    pifLog_SendAndExit();
 8001fec:	f011 fb50 	bl	8013690 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f000 f86f 	bl	80020d4 <actLed1State>
    actLed0State(ON);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 f840 	bl	800207c <actLed0State>
    while (1) {
        actLed1Toggle();
 8001ffc:	f000 f880 	bl	8002100 <actLed1Toggle>
        actLed0Toggle();
 8002000:	f000 f852 	bl	80020a8 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	441a      	add	r2, r3
 800200e:	0152      	lsls	r2, r2, #5
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	461a      	mov	r2, r3
 8002014:	0091      	lsls	r1, r2, #2
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	4413      	add	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b02      	subs	r3, #2
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f00f f8e2 	bl	80111ec <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8002028:	2101      	movs	r1, #1
 800202a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800202e:	f000 f87d 	bl	800212c <actBuzzerAction>
        pif_Delay1ms(25);
 8002032:	2019      	movs	r0, #25
 8002034:	f00f f8da 	bl	80111ec <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002038:	2100      	movs	r1, #0
 800203a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800203e:	f000 f875 	bl	800212c <actBuzzerAction>
        actLed1Toggle();
 8002042:	e7db      	b.n	8001ffc <failureMode+0x1a>

08002044 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	461a      	mov	r2, r3
 8002052:	4907      	ldr	r1, [pc, #28]	; (8002070 <systemReset+0x2c>)
 8002054:	2002      	movs	r0, #2
 8002056:	f011 fa53 	bl	8013500 <pifLog_Printf>
	pif_Delay1ms(2000);
 800205a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800205e:	f00f f8c5 	bl	80111ec <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <systemReset+0x30>)
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <systemReset+0x34>)
 8002066:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	080256bc 	.word	0x080256bc
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	05fa0004 	.word	0x05fa0004

0800207c <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	461a      	mov	r2, r3
 800208a:	2110      	movs	r1, #16
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <actLed0State+0x24>)
 800208e:	f01a fe01 	bl	801cc94 <HAL_GPIO_WritePin>
    len0_state = state;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <actLed0State+0x28>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020800 	.word	0x40020800
 80020a4:	200003d4 	.word	0x200003d4

080020a8 <actLed0Toggle>:

void actLed0Toggle()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <actLed0Toggle+0x24>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <actLed0Toggle+0x24>)
 80020b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <actLed0Toggle+0x24>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	2110      	movs	r1, #16
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <actLed0Toggle+0x28>)
 80020c4:	f01a fde6 	bl	801cc94 <HAL_GPIO_WritePin>
#endif
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200003d4 	.word	0x200003d4
 80020d0:	40020800 	.word	0x40020800

080020d4 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	461a      	mov	r2, r3
 80020e2:	2104      	movs	r1, #4
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <actLed1State+0x24>)
 80020e6:	f01a fdd5 	bl	801cc94 <HAL_GPIO_WritePin>
    len1_state = state;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <actLed1State+0x28>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40020400 	.word	0x40020400
 80020fc:	200003d5 	.word	0x200003d5

08002100 <actLed1Toggle>:

void actLed1Toggle()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <actLed1Toggle+0x24>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <actLed1Toggle+0x24>)
 8002110:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <actLed1Toggle+0x24>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	2104      	movs	r1, #4
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <actLed1Toggle+0x28>)
 800211c:	f01a fdba 	bl	801cc94 <HAL_GPIO_WritePin>
#endif
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200003d5 	.word	0x200003d5
 8002128:	40020400 	.word	0x40020400

0800212c <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	460a      	mov	r2, r1
 8002136:	80fb      	strh	r3, [r7, #6]
 8002138:	4613      	mov	r3, r2
 800213a:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	461a      	mov	r2, r3
 8002140:	2120      	movs	r1, #32
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <actBuzzerAction+0x24>)
 8002144:	f01a fda6 	bl	801cc94 <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020800 	.word	0x40020800

08002154 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_EXTI_Callback+0x1c>
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d105      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800216a:	f7ff fd17 	bl	8001b9c <pwmReadRc>
		break;
 800216e:	e002      	b.n	8002176 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002170:	f7ff fb7c 	bl	800186c <hcsr04Echo>
    	break;
 8002174:	bf00      	nop
    }
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002186:	2100      	movs	r1, #0
 8002188:	4822      	ldr	r0, [pc, #136]	; (8002214 <storageInit+0x94>)
 800218a:	f018 fc87 	bl	801aa9c <pifStorageVar_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <storageInit+0x18>
 8002194:	2300      	movs	r3, #0
 8002196:	e039      	b.n	800220c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002198:	230a      	movs	r3, #10
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2302      	movs	r3, #2
 800219e:	2250      	movs	r2, #80	; 0x50
 80021a0:	491d      	ldr	r1, [pc, #116]	; (8002218 <storageInit+0x98>)
 80021a2:	481c      	ldr	r0, [pc, #112]	; (8002214 <storageInit+0x94>)
 80021a4:	f018 fdc2 	bl	801ad2c <pifStorageVar_AttachI2c>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d027      	beq.n	80021fe <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021ae:	2308      	movs	r3, #8
 80021b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	4817      	ldr	r0, [pc, #92]	; (8002214 <storageInit+0x94>)
 80021b8:	f018 fce6 	bl	801ab88 <pifStorageVar_SetMedia>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01f      	beq.n	8002202 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 80021c2:	4814      	ldr	r0, [pc, #80]	; (8002214 <storageInit+0x94>)
 80021c4:	f018 fdcb 	bl	801ad5e <pifStorageVar_IsFormat>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <storageInit+0x9c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4912      	ldr	r1, [pc, #72]	; (8002220 <storageInit+0xa0>)
 80021d6:	2002      	movs	r0, #2
 80021d8:	f011 f992 	bl	8013500 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <storageInit+0x94>)
 80021de:	f018 fb7a 	bl	801a8d6 <pifStorage_Format>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <storageInit+0xa4>)
 80021ea:	2002      	movs	r0, #2
 80021ec:	f011 f988 	bl	8013500 <pifLog_Printf>
			goto fail;
 80021f0:	e008      	b.n	8002204 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 80021f2:	490d      	ldr	r1, [pc, #52]	; (8002228 <storageInit+0xa8>)
 80021f4:	2002      	movs	r0, #2
 80021f6:	f011 f983 	bl	8013500 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <storageInit+0x94>)
 80021fc:	e006      	b.n	800220c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 80021fe:	bf00      	nop
 8002200:	e000      	b.n	8002204 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8002202:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <storageInit+0x94>)
 8002206:	f018 fc95 	bl	801ab34 <pifStorageVar_Clear>
#endif
	return NULL;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000038c 	.word	0x2000038c
 8002218:	200014a0 	.word	0x200014a0
 800221c:	20001bb5 	.word	0x20001bb5
 8002220:	080256d4 	.word	0x080256d4
 8002224:	080256ec 	.word	0x080256ec
 8002228:	08025704 	.word	0x08025704

0800222c <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8a1b      	ldrh	r3, [r3, #16]
 800223a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	4a11      	ldr	r2, [pc, #68]	; (8002288 <actUartSetBaudRate+0x5c>)
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <actUartSetBaudRate+0x2a>
 8002252:	2301      	movs	r3, #1
 8002254:	e013      	b.n	800227e <actUartSetBaudRate+0x52>

	HAL_UART_DeInit(p_uart->p_huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	4618      	mov	r0, r3
 800225c:	f01f f9db 	bl	8021616 <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	4618      	mov	r0, r3
 800226e:	f01f f985 	bl	802157c <HAL_UART_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <actUartSetBaudRate+0x50>
		return FALSE;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <actUartSetBaudRate+0x52>
	}
	return TRUE;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000040c 	.word	0x2000040c

0800228c <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8a1b      	ldrh	r3, [r3, #16]
 8002298:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <actUartStartTransfer+0x5c>)
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2208      	movs	r2, #8
 80022a8:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f00f fe30 	bl	8011f1c <pifComm_StartGetTxData>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <actUartStartTransfer+0x52>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022d4:	461a      	mov	r2, r3
 80022d6:	f01f f9cd 	bl	8021674 <HAL_UART_Transmit_IT>
		return TRUE;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <actUartStartTransfer+0x54>
	}
	return FALSE;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000040c 	.word	0x2000040c

080022ec <actLogStartTransfer>:

#ifndef __PIF_NO_LOG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <actLogStartTransfer+0x48>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <actLogStartTransfer+0x48>)
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f00f fe0a 	bl	8011f1c <pifComm_StartGetTxData>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <actLogStartTransfer+0x48>)
 800231a:	8812      	ldrh	r2, [r2, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <actLogStartTransfer+0x4c>)
 8002320:	f01f f9a8 	bl	8021674 <HAL_UART_Transmit_IT>
		return TRUE;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <actLogStartTransfer+0x3e>
	}
	return FALSE;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000408 	.word	0x20000408
 8002338:	2000075c 	.word	0x2000075c

0800233c <logOpen>:

BOOL logOpen()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af02      	add	r7, sp, #8
	pifLog_Init();
 8002342:	f010 fff1 	bl	8013328 <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8002346:	2100      	movs	r1, #0
 8002348:	4816      	ldr	r0, [pc, #88]	; (80023a4 <logOpen+0x68>)
 800234a:	f00f fcd1 	bl	8011cf0 <pifComm_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <logOpen+0x1c>
 8002354:	2300      	movs	r3, #0
 8002356:	e022      	b.n	800239e <logOpen+0x62>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE, "C-Log")) return FALSE;			// 1ms
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <logOpen+0x6c>)
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2301      	movs	r3, #1
 800235e:	2201      	movs	r2, #1
 8002360:	2102      	movs	r1, #2
 8002362:	4810      	ldr	r0, [pc, #64]	; (80023a4 <logOpen+0x68>)
 8002364:	f00f fe6e 	bl	8012044 <pifComm_AttachTask>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <logOpen+0x36>
 800236e:	2300      	movs	r3, #0
 8002370:	e015      	b.n	800239e <logOpen+0x62>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 8002372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <logOpen+0x68>)
 8002378:	f00f fd4e 	bl	8011e18 <pifComm_AllocTxBuffer>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <logOpen+0x4a>
 8002382:	2300      	movs	r3, #0
 8002384:	e00b      	b.n	800239e <logOpen+0x62>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <logOpen+0x68>)
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <logOpen+0x70>)
 800238a:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <logOpen+0x68>)
 800238e:	f011 f945 	bl	801361c <pifLog_AttachComm>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <logOpen+0x60>
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <logOpen+0x62>
	return TRUE;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200003d8 	.word	0x200003d8
 80023a8:	0802572c 	.word	0x0802572c
 80023ac:	080022ed 	.word	0x080022ed

080023b0 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	4613      	mov	r3, r2
 80023c4:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16;
 80023ca:	2310      	movs	r3, #16
 80023cc:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 80023ce:	4a47      	ldr	r2, [pc, #284]	; (80024ec <uartOpen+0x13c>)
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <uartOpen+0x3c>
        s = &uartPort[0];
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <uartOpen+0x140>)
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <uartOpen+0x144>)
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
 80023ea:	e00a      	b.n	8002402 <uartOpen+0x52>
    else if (port == UART_PORT_2) {
        s = &uartPort[1];
        s->p_huart = &huart2;
    }
#endif
    else if (port == UART_PORT_3) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d105      	bne.n	80023fe <uartOpen+0x4e>
        s = &uartPort[2];
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <uartOpen+0x148>)
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	4a40      	ldr	r2, [pc, #256]	; (80024fc <uartOpen+0x14c>)
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
 80023fc:	e001      	b.n	8002402 <uartOpen+0x52>
    }
    else return NULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	e06f      	b.n	80024e2 <uartOpen+0x132>

    tmp = period * 115200 / 10000;
 8002402:	79bb      	ldrb	r3, [r7, #6]
 8002404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	4a3c      	ldr	r2, [pc, #240]	; (8002500 <uartOpen+0x150>)
 800240e:	fb82 1203 	smull	r1, r2, r2, r3
 8002412:	1312      	asrs	r2, r2, #12
 8002414:	17db      	asrs	r3, r3, #31
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	843b      	strh	r3, [r7, #32]
    while (tmp >= rx_size) rx_size <<= 1;
 800241a:	e002      	b.n	8002422 <uartOpen+0x72>
 800241c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	847b      	strh	r3, [r7, #34]	; 0x22
 8002422:	8c3a      	ldrh	r2, [r7, #32]
 8002424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002426:	429a      	cmp	r2, r3
 8002428:	d2f8      	bcs.n	800241c <uartOpen+0x6c>
	s->init = TRUE;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	b29b      	uxth	r3, r3
 800243a:	33ff      	adds	r3, #255	; 0xff
 800243c:	b29b      	uxth	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f00f fc55 	bl	8011cf0 <pifComm_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <uartOpen+0xa0>
 800244c:	2300      	movs	r3, #0
 800244e:	e048      	b.n	80024e2 <uartOpen+0x132>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	1d18      	adds	r0, r3, #4
 8002454:	79bb      	ldrb	r3, [r7, #6]
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3b01      	subs	r3, #1
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3328      	adds	r3, #40	; 0x28
 8002460:	443b      	add	r3, r7
 8002462:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	2102      	movs	r1, #2
 800246c:	f00f fdea 	bl	8012044 <pifComm_AttachTask>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <uartOpen+0xca>
 8002476:	2300      	movs	r3, #0
 8002478:	e033      	b.n	80024e2 <uartOpen+0x132>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, rx_size / 2)) return FALSE;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1d18      	adds	r0, r3, #4
 800247e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	b2da      	uxtb	r2, r3
 8002486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002488:	4619      	mov	r1, r3
 800248a:	f00f fc81 	bl	8011d90 <pifComm_AllocRxBuffer>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <uartOpen+0xe8>
 8002494:	2300      	movs	r3, #0
 8002496:	e024      	b.n	80024e2 <uartOpen+0x132>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	3304      	adds	r3, #4
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	4618      	mov	r0, r3
 80024a0:	f00f fcba 	bl	8011e18 <pifComm_AllocTxBuffer>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <uartOpen+0xfe>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e019      	b.n	80024e2 <uartOpen+0x132>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <uartOpen+0x154>)
 80024b2:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <uartOpen+0x158>)
 80024b8:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f8f0 	bl	80026a4 <serialSetBaudRate>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <uartOpen+0x128>
    	pifComm_Clear(&s->port.comm);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00f fc38 	bl	8011d44 <pifComm_Clear>
    	return FALSE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e004      	b.n	80024e2 <uartOpen+0x132>
    }

	s->init = FALSE;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    return (serialPort_t *)s;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	08025734 	.word	0x08025734
 80024f0:	2000040c 	.word	0x2000040c
 80024f4:	20000718 	.word	0x20000718
 80024f8:	2000048c 	.word	0x2000048c
 80024fc:	200007a0 	.word	0x200007a0
 8002500:	68db8bad 	.word	0x68db8bad
 8002504:	0800222d 	.word	0x0800222d
 8002508:	0800228d 	.word	0x0800228d

0800250c <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a39      	ldr	r2, [pc, #228]	; (8002600 <HAL_UART_TxCpltCallback+0xf4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d102      	bne.n	8002524 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_UART_TxCpltCallback+0xf8>)
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e035      	b.n	8002590 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_UART_TxCpltCallback+0xfc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d129      	bne.n	8002582 <HAL_UART_TxCpltCallback+0x76>
#ifndef __PIF_NO_LOG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_UART_TxCpltCallback+0x100>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4836      	ldr	r0, [pc, #216]	; (8002610 <HAL_UART_TxCpltCallback+0x104>)
 8002536:	f00f fd29 	bl	8011f8c <pifComm_EndGetTxData>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 8002548:	4831      	ldr	r0, [pc, #196]	; (8002610 <HAL_UART_TxCpltCallback+0x104>)
 800254a:	f00f fd38 	bl	8011fbe <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 800254e:	e050      	b.n	80025f2 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_UART_TxCpltCallback+0x100>)
 8002552:	2200      	movs	r2, #0
 8002554:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	4a2c      	ldr	r2, [pc, #176]	; (800260c <HAL_UART_TxCpltCallback+0x100>)
 800255c:	4619      	mov	r1, r3
 800255e:	482c      	ldr	r0, [pc, #176]	; (8002610 <HAL_UART_TxCpltCallback+0x104>)
 8002560:	f00f fcdc 	bl	8011f1c <pifComm_StartGetTxData>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03f      	beq.n	80025f2 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_UART_TxCpltCallback+0x100>)
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f01f f87a 	bl	8021674 <HAL_UART_Transmit_IT>
		return;
 8002580:	e037      	b.n	80025f2 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a23      	ldr	r2, [pc, #140]	; (8002614 <HAL_UART_TxCpltCallback+0x108>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d134      	bne.n	80025f6 <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_UART_TxCpltCallback+0x10c>)
 800258e:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f00f fcf6 	bl	8011f8c <pifComm_EndGetTxData>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4618      	mov	r0, r3
 80025b4:	f00f fd03 	bl	8011fbe <pifComm_FinishTransfer>
 80025b8:	e01e      	b.n	80025f8 <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2208      	movs	r2, #8
 80025be:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1d18      	adds	r0, r3, #4
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	4619      	mov	r1, r3
 80025d0:	f00f fca4 	bl	8011f1c <pifComm_StartGetTxData>
 80025d4:	4603      	mov	r3, r0
 80025d6:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80025e8:	461a      	mov	r2, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f01f f842 	bl	8021674 <HAL_UART_Transmit_IT>
 80025f0:	e002      	b.n	80025f8 <HAL_UART_TxCpltCallback+0xec>
		return;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_UART_TxCpltCallback+0xec>
	else return;
 80025f6:	bf00      	nop
		}
	}
}
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40011000 	.word	0x40011000
 8002604:	2000040c 	.word	0x2000040c
 8002608:	40004400 	.word	0x40004400
 800260c:	20000408 	.word	0x20000408
 8002610:	200003d8 	.word	0x200003d8
 8002614:	40011400 	.word	0x40011400
 8002618:	2000048c 	.word	0x2000048c

0800261c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_UART_RxCpltCallback+0x70>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d102      	bne.n	8002634 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_UART_RxCpltCallback+0x74>)
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e00e      	b.n	8002652 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_UART_RxCpltCallback+0x78>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d102      	bne.n	8002644 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_UART_RxCpltCallback+0x7c>)
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e006      	b.n	8002652 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_UART_RxCpltCallback+0x80>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d117      	bne.n	800267e <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_UART_RxCpltCallback+0x84>)
 8002650:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002658:	2b00      	cmp	r3, #0
 800265a:	d112      	bne.n	8002682 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f00f fc2a 	bl	8011ec2 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	333e      	adds	r3, #62	; 0x3e
 8002672:	2201      	movs	r2, #1
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f01f f841 	bl	80216fe <HAL_UART_Receive_IT>
 800267c:	e002      	b.n	8002684 <HAL_UART_RxCpltCallback+0x68>
	else return;
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002682:	bf00      	nop
}
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40011000 	.word	0x40011000
 8002690:	2000040c 	.word	0x2000040c
 8002694:	40004400 	.word	0x40004400
 8002698:	2000044c 	.word	0x2000044c
 800269c:	40011400 	.word	0x40011400
 80026a0:	2000048c 	.word	0x2000048c

080026a4 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	3204      	adds	r2, #4
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8a1b      	ldrh	r3, [r3, #16]
 80026d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <serialStartReceiveFunc+0x3c>)
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	333e      	adds	r3, #62	; 0x3e
 80026e8:	2201      	movs	r2, #1
 80026ea:	4619      	mov	r1, r3
 80026ec:	f01f f807 	bl	80216fe <HAL_UART_Receive_IT>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <serialStartReceiveFunc+0x32>
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <serialStartReceiveFunc+0x34>
	return TRUE;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000040c 	.word	0x2000040c

08002708 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8a1b      	ldrh	r3, [r3, #16]
 8002714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	4a06      	ldr	r2, [pc, #24]	; (8002734 <serialStopReceiveFunc+0x2c>)
 800271c:	4413      	add	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	4618      	mov	r0, r3
 8002726:	f01f f81b 	bl	8021760 <HAL_UART_Abort_IT>
	return TRUE;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000040c 	.word	0x2000040c

08002738 <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <micros+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	20000688 	.word	0x20000688

08002750 <featureDefault>:

static void featureDefault(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002754:	2002      	movs	r0, #2
 8002756:	f004 fc75 	bl	8007044 <featureSet>
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <actTaskSignal>:

#ifndef __PIF_NO_LOG__

void actTaskSignal(BOOL state)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, state);
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	461a      	mov	r2, r3
 800276e:	2120      	movs	r1, #32
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <actTaskSignal+0x20>)
 8002772:	f01a fa8f 	bl	801cc94 <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40020000 	.word	0x40020000

08002784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08f      	sub	sp, #60	; 0x3c
 8002788:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002790:	f018 fe44 	bl	801b41c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002794:	f000 fb34 	bl	8002e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002798:	f000 fdec 	bl	8003374 <MX_GPIO_Init>
  MX_DMA_Init();
 800279c:	f000 fdac 	bl	80032f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027a0:	f000 fd56 	bl	8003250 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80027a4:	f000 fc12 	bl	8002fcc <MX_I2C1_Init>
  MX_TIM3_Init();
 80027a8:	f000 fc8a 	bl	80030c0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80027ac:	f000 fd26 	bl	80031fc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80027b0:	f000 fd78 	bl	80032a4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80027b4:	f000 fb8e 	bl	8002ed4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80027b8:	f000 fc36 	bl	8003028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027bc:	2100      	movs	r1, #0
 80027be:	4896      	ldr	r0, [pc, #600]	; (8002a18 <main+0x294>)
 80027c0:	f01d ffb0 	bl	8020724 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 80027c4:	4895      	ldr	r0, [pc, #596]	; (8002a1c <main+0x298>)
 80027c6:	f00e fc3d 	bl	8011044 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 80027ca:	2014      	movs	r0, #20
 80027cc:	f011 ff94 	bl	80146f8 <pifTaskManager_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <main+0x58>
 80027d6:	23ac      	movs	r3, #172	; 0xac
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	e2f7      	b.n	8002dcc <main+0x648>

#ifndef __PIF_NO_LOG__
    pif_act_task_signal = actTaskSignal;
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <main+0x29c>)
 80027de:	4a91      	ldr	r2, [pc, #580]	; (8002a24 <main+0x2a0>)
 80027e0:	601a      	str	r2, [r3, #0]

    logOpen();
 80027e2:	f7ff fdab 	bl	800233c <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80027e6:	2303      	movs	r3, #3
 80027e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ec:	2100      	movs	r1, #0
 80027ee:	488e      	ldr	r0, [pc, #568]	; (8002a28 <main+0x2a4>)
 80027f0:	f012 fbb8 	bl	8014f64 <pifTimerManager_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <main+0x7c>
 80027fa:	23b4      	movs	r3, #180	; 0xb4
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fe:	e2e5      	b.n	8002dcc <main+0x648>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 8002800:	f240 526c 	movw	r2, #1388	; 0x56c
 8002804:	4989      	ldr	r1, [pc, #548]	; (8002a2c <main+0x2a8>)
 8002806:	2002      	movs	r0, #2
 8002808:	f010 fe7a 	bl	8013500 <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 800280c:	f001 fc16 	bl	800403c <buzzerInit>
 8002810:	4603      	mov	r3, r0
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <main+0x9e>
 800281c:	23ba      	movs	r3, #186	; 0xba
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002820:	e2d4      	b.n	8002dcc <main+0x648>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 8002822:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <main+0x2ac>)
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <main+0x2b0>)
 8002826:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 8002828:	f7ff f95a 	bl	8001ae0 <i2cInit>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <main+0xb4>
 8002832:	23c1      	movs	r3, #193	; 0xc1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	e2c9      	b.n	8002dcc <main+0x648>

    if (!initEEPROM(storageInit())) FAIL;
 8002838:	f7ff fca2 	bl	8002180 <storageInit>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fe48 	bl	80064d4 <initEEPROM>
 8002844:	4603      	mov	r3, r0
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <main+0xd2>
 8002850:	23c3      	movs	r3, #195	; 0xc3
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
 8002854:	e2ba      	b.n	8002dcc <main+0x648>
    if (!checkFirstTime(false)) FAIL;
 8002856:	2000      	movs	r0, #0
 8002858:	f004 f87e 	bl	8006958 <checkFirstTime>
 800285c:	4603      	mov	r3, r0
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <main+0xea>
 8002868:	23c4      	movs	r3, #196	; 0xc4
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
 800286c:	e2ae      	b.n	8002dcc <main+0x648>
    readEEPROM();
 800286e:	f003 fedd 	bl	800662c <readEEPROM>

    systemInit();
 8002872:	f7ff fba7 	bl	8001fc4 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002876:	2064      	movs	r0, #100	; 0x64
 8002878:	f00e fcb8 	bl	80111ec <pif_Delay1ms>

    activateConfig();
 800287c:	f003 ff20 	bl	80066c0 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002880:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <main+0x2b4>)
 8002882:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01b      	beq.n	80028c2 <main+0x13e>
 800288a:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <main+0x2b4>)
 800288c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002890:	2b01      	cmp	r3, #1
 8002892:	d009      	beq.n	80028a8 <main+0x124>
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <main+0x2b4>)
 8002896:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800289a:	2b09      	cmp	r3, #9
 800289c:	d004      	beq.n	80028a8 <main+0x124>
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <main+0x2b4>)
 80028a0:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d10c      	bne.n	80028c2 <main+0x13e>
 80028a8:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <main+0x2b4>)
 80028aa:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <main+0x2b4>)
 80028b0:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d004      	beq.n	80028c2 <main+0x13e>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 80028b8:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <main+0x2b4>)
 80028ba:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028be:	717b      	strb	r3, [r7, #5]
 80028c0:	e005      	b.n	80028ce <main+0x14a>
    else {
        adc_params.rssiAdcChannel = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <main+0x2b4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fc57 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 80028d6:	2002      	movs	r0, #2
 80028d8:	f004 fb9e 	bl	8007018 <feature>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <main+0x162>
        batteryInit();
 80028e2:	f00b ff1b 	bl	800e71c <batteryInit>
    initBoardAlignment();
 80028e6:	f001 fa4f 	bl	8003d88 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <main+0x2b8>)
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <main+0x2bc>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <main+0x2c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4854      	ldr	r0, [pc, #336]	; (8002a48 <main+0x2c4>)
 80028f8:	f00b fdae 	bl	800e458 <sensorsAutodetect>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 8002902:	f004 fb7d 	bl	8007000 <sensorsMask>
 8002906:	4602      	mov	r2, r0
 8002908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290c:	494f      	ldr	r1, [pc, #316]	; (8002a4c <main+0x2c8>)
 800290e:	2002      	movs	r0, #2
 8002910:	f010 fdf6 	bl	8013500 <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 8002914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <main+0x1a4>
        failureMode(3);
 8002922:	2003      	movs	r0, #3
 8002924:	f7ff fb5d 	bl	8001fe2 <failureMode>

    actLed1State(ON);
 8002928:	2001      	movs	r0, #1
 800292a:	f7ff fbd3 	bl	80020d4 <actLed1State>
    actLed0State(OFF);
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff fba4 	bl	800207c <actLed0State>
    for (i = 0; i < 10; i++) {
 8002934:	2300      	movs	r3, #0
 8002936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800293a:	e018      	b.n	800296e <main+0x1ea>
        actLed1Toggle();
 800293c:	f7ff fbe0 	bl	8002100 <actLed1Toggle>
        actLed0Toggle();
 8002940:	f7ff fbb2 	bl	80020a8 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 8002944:	2019      	movs	r0, #25
 8002946:	f012 fa25 	bl	8014d94 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 800294a:	2101      	movs	r1, #1
 800294c:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002950:	f7ff fbec 	bl	800212c <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 8002954:	2019      	movs	r0, #25
 8002956:	f012 fa1d 	bl	8014d94 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 800295a:	2100      	movs	r1, #0
 800295c:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002960:	f7ff fbe4 	bl	800212c <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 8002964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002968:	3301      	adds	r3, #1
 800296a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800296e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002972:	2b09      	cmp	r3, #9
 8002974:	d9e2      	bls.n	800293c <main+0x1b8>
    }
    actLed0State(OFF);
 8002976:	2000      	movs	r0, #0
 8002978:	f7ff fb80 	bl	800207c <actLed0State>
    actLed1State(OFF);
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fba9 	bl	80020d4 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002982:	f007 f805 	bl	8009990 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 8002986:	f008 fae3 	bl	800af50 <mixerInit>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <main+0x2b4>)
 800298c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002990:	461a      	mov	r2, r3
 8002992:	492f      	ldr	r1, [pc, #188]	; (8002a50 <main+0x2cc>)
 8002994:	2002      	movs	r0, #2
 8002996:	f010 fdb3 	bl	8013500 <pifLog_Printf>
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <main+0x2b4>)
 800299c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80029a0:	2200      	movs	r2, #0
 80029a2:	4619      	mov	r1, r3
 80029a4:	2001      	movs	r0, #1
 80029a6:	f00c fd0d 	bl	800f3c4 <serialInit>
#else
    serialInit(UART_PORT_1, mcfg.serial_baudrate, feature(FEATURE_SERIALRX) ? UART_PORT_NONE : UART_PORT_2);
#endif

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <main+0x2d0>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	2007      	movs	r0, #7
 80029b6:	f011 fec5 	bl	8014744 <pifTaskManager_Add>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <main+0x2d4>)
 80029be:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <main+0x2d4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <main+0x24a>
 80029c8:	23fe      	movs	r3, #254	; 0xfe
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80029cc:	e1fe      	b.n	8002dcc <main+0x648>
    g_task_compute_rc->name = "RC";
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <main+0x2d4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <main+0x2d8>)
 80029d4:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <main+0x2b4>)
 80029d8:	795b      	ldrb	r3, [r3, #5]
 80029da:	2b0e      	cmp	r3, #14
 80029dc:	d007      	beq.n	80029ee <main+0x26a>
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <main+0x2b4>)
 80029e0:	795b      	ldrb	r3, [r3, #5]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d003      	beq.n	80029ee <main+0x26a>
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <main+0x2b4>)
 80029e8:	795b      	ldrb	r3, [r3, #5]
 80029ea:	2b18      	cmp	r3, #24
 80029ec:	d102      	bne.n	80029f4 <main+0x270>
        pwm_params.airplane = true;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73bb      	strb	r3, [r7, #14]
 80029f2:	e001      	b.n	80029f8 <main+0x274>
    else
        pwm_params.airplane = false;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 80029f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029fc:	f004 fb0c 	bl	8007018 <feature>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <main+0x28e>
 8002a06:	2008      	movs	r0, #8
 8002a08:	f004 fb06 	bl	8007018 <feature>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d026      	beq.n	8002a60 <main+0x2dc>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e025      	b.n	8002a62 <main+0x2de>
 8002a16:	bf00      	nop
 8002a18:	20000688 	.word	0x20000688
 8002a1c:	08002739 	.word	0x08002739
 8002a20:	20001c60 	.word	0x20001c60
 8002a24:	08002761 	.word	0x08002761
 8002a28:	200014d0 	.word	0x200014d0
 8002a2c:	08025740 	.word	0x08025740
 8002a30:	20001684 	.word	0x20001684
 8002a34:	08002751 	.word	0x08002751
 8002a38:	2000089c 	.word	0x2000089c
 8002a3c:	200007fc 	.word	0x200007fc
 8002a40:	20000800 	.word	0x20000800
 8002a44:	20000804 	.word	0x20000804
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	08025758 	.word	0x08025758
 8002a50:	0802576c 	.word	0x0802576c
 8002a54:	0800d235 	.word	0x0800d235
 8002a58:	200014f8 	.word	0x200014f8
 8002a5c:	08025778 	.word	0x08025778
 8002a60:	2300      	movs	r3, #0
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f004 fad2 	bl	8007018 <feature>
 8002a74:	4603      	mov	r3, r0
 8002a76:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 8002a78:	2008      	movs	r0, #8
 8002a7a:	f004 facd 	bl	8007018 <feature>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f083 0301 	eor.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 8002a98:	4baa      	ldr	r3, [pc, #680]	; (8002d44 <main+0x5c0>)
 8002a9a:	7d5b      	ldrb	r3, [r3, #21]
 8002a9c:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 8002a9e:	4baa      	ldr	r3, [pc, #680]	; (8002d48 <main+0x5c4>)
 8002aa0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002ab4:	4ba5      	ldr	r3, [pc, #660]	; (8002d4c <main+0x5c8>)
 8002ab6:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002aba:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002abc:	4ba3      	ldr	r3, [pc, #652]	; (8002d4c <main+0x5c8>)
 8002abe:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002ac2:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002ac4:	4ba1      	ldr	r3, [pc, #644]	; (8002d4c <main+0x5c8>)
 8002ac6:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002aca:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad0:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 8002ad2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ad6:	f004 fa9f 	bl	8007018 <feature>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <main+0x364>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <main+0x5c8>)
 8002ae2:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002ae6:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 8002ae8:	8a7b      	ldrh	r3, [r7, #18]
 8002aea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002aee:	d901      	bls.n	8002af4 <main+0x370>
        pwm_params.idlePulse = 0; // brushed motors
 8002af0:	2300      	movs	r3, #0
 8002af2:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002af4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002af8:	f004 fa8e 	bl	8007018 <feature>
 8002afc:	4603      	mov	r3, r0
 8002afe:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002b00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b04:	f004 fa88 	bl	8007018 <feature>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002b0c:	4b8f      	ldr	r3, [pc, #572]	; (8002d4c <main+0x5c8>)
 8002b0e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002b12:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002b14:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <main+0x5c4>)
 8002b16:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002b1a:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 8002b1c:	4b8b      	ldr	r3, [pc, #556]	; (8002d4c <main+0x5c8>)
 8002b1e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <main+0x3a8>
 8002b26:	2b09      	cmp	r3, #9
 8002b28:	d003      	beq.n	8002b32 <main+0x3ae>
 8002b2a:	e005      	b.n	8002b38 <main+0x3b4>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	743b      	strb	r3, [r7, #16]
            break;
 8002b30:	e005      	b.n	8002b3e <main+0x3ba>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002b32:	2307      	movs	r3, #7
 8002b34:	743b      	strb	r3, [r7, #16]
            break;
 8002b36:	e002      	b.n	8002b3e <main+0x3ba>
        default:
            pwm_params.adcChannel = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	743b      	strb	r3, [r7, #16]
            break;
 8002b3c:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002b3e:	f107 0308 	add.w	r3, r7, #8
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f8bc 	bl	8001cc0 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002b48:	7fba      	ldrb	r2, [r7, #30]
 8002b4a:	4b7e      	ldr	r3, [pc, #504]	; (8002d44 <main+0x5c0>)
 8002b4c:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b54:	e00b      	b.n	8002b6e <main+0x3ea>
        rcData[i] = 1502;
 8002b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b5a:	4a7d      	ldr	r2, [pc, #500]	; (8002d50 <main+0x5cc>)
 8002b5c:	f240 51de 	movw	r1, #1502	; 0x5de
 8002b60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b72:	2b11      	cmp	r3, #17
 8002b74:	d9ef      	bls.n	8002b56 <main+0x3d2>
    rcReadRawFunc = pwmReadRawRC;
 8002b76:	4b77      	ldr	r3, [pc, #476]	; (8002d54 <main+0x5d0>)
 8002b78:	4a77      	ldr	r2, [pc, #476]	; (8002d58 <main+0x5d4>)
 8002b7a:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002b7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b80:	f004 fa4a 	bl	8007018 <feature>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <main+0x416>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002b8a:	4b70      	ldr	r3, [pc, #448]	; (8002d4c <main+0x5c8>)
 8002b8c:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4619      	mov	r1, r3
 8002b94:	2003      	movs	r0, #3
 8002b96:	f005 fa6f 	bl	8008078 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002b9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b9e:	f004 fa3b 	bl	8007018 <feature>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <main+0x42c>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002ba8:	2102      	movs	r1, #2
 8002baa:	486c      	ldr	r0, [pc, #432]	; (8002d5c <main+0x5d8>)
 8002bac:	f00c fb74 	bl	800f298 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <main+0x5c8>)
 8002bb2:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	2208      	movs	r2, #8
 8002bba:	2104      	movs	r1, #4
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f8c9 	bl	8003d54 <constrain>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <main+0x5c0>)
 8002bc8:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002bca:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <main+0x5c8>)
 8002bcc:	795b      	ldrb	r3, [r3, #5]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d103      	bne.n	8002bda <main+0x456>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <main+0x5dc>)
 8002bd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bd8:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <main+0x5e0>)
 8002bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be0:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <main+0x5e4>)
 8002be4:	22c8      	movs	r2, #200	; 0xc8
 8002be6:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002be8:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <main+0x5e8>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 10, taskLoop, NULL, TRUE);         								// 1ms
 8002bee:	2301      	movs	r3, #1
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4a5e      	ldr	r2, [pc, #376]	; (8002d70 <main+0x5ec>)
 8002bf6:	210a      	movs	r1, #10
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f011 fda3 	bl	8014744 <pifTaskManager_Add>
 8002bfe:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <main+0x48a>
 8002c06:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0c:	e0de      	b.n	8002dcc <main+0x648>
    p_task->name = "Loop";
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <main+0x5f0>)
 8002c12:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <main+0x5c8>)
 8002c16:	899b      	ldrh	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <main+0x4b2>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <main+0x5c8>)
 8002c1e:	8999      	ldrh	r1, [r3, #12]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <main+0x5f4>)
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f011 fd8b 	bl	8014744 <pifTaskManager_Add>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <main+0x5f8>)
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e00a      	b.n	8002c4c <main+0x4c8>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002c36:	2301      	movs	r3, #1
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <main+0x5f4>)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2001      	movs	r0, #1
 8002c42:	f011 fd7f 	bl	8014744 <pifTaskManager_Add>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <main+0x5f8>)
 8002c4a:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002c4c:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <main+0x5f8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <main+0x4d8>
 8002c54:	f240 136b 	movw	r3, #363	; 0x16b
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	e0b7      	b.n	8002dcc <main+0x648>
    g_task_compute_imu->name = "IMU";
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <main+0x5f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a47      	ldr	r2, [pc, #284]	; (8002d80 <main+0x5fc>)
 8002c62:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c64:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <main+0x5f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002c6c:	2008      	movs	r0, #8
 8002c6e:	f004 f98b 	bl	8006f88 <sensors>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01e      	beq.n	8002cb6 <main+0x532>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <main+0x600>)
 8002c80:	2164      	movs	r1, #100	; 0x64
 8002c82:	2002      	movs	r0, #2
 8002c84:	f011 fd5e 	bl	8014744 <pifTaskManager_Add>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <main+0x604>)
 8002c8c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        if (!sensor_set.mag.p_task) FAIL;
 8002c90:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <main+0x604>)
 8002c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <main+0x51e>
 8002c9a:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca0:	e094      	b.n	8002dcc <main+0x648>
        sensor_set.mag.p_task->name = "Mag";
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <main+0x604>)
 8002ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ca8:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <main+0x608>)
 8002caa:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <main+0x604>)
 8002cae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002cb6:	2004      	movs	r0, #4
 8002cb8:	f004 f966 	bl	8006f88 <sensors>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <main+0x572>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <main+0x60c>)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2007      	movs	r0, #7
 8002cce:	f011 fd39 	bl	8014744 <pifTaskManager_Add>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <main+0x604>)
 8002cd6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        if (!sensor_set.baro.p_task) FAIL;
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <main+0x604>)
 8002cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <main+0x568>
 8002ce4:	f240 137b 	movw	r3, #379	; 0x17b
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cea:	e06f      	b.n	8002dcc <main+0x648>
        sensor_set.baro.p_task->name = "Baro";
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <main+0x604>)
 8002cee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <main+0x610>)
 8002cf4:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <main+0x614>)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2007      	movs	r0, #7
 8002d02:	f011 fd1f 	bl	8014744 <pifTaskManager_Add>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <main+0x618>)
 8002d0a:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <main+0x618>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <main+0x598>
 8002d14:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1a:	e057      	b.n	8002dcc <main+0x648>
    g_task_gps->name = "GPS";
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <main+0x618>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <main+0x61c>)
 8002d22:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 8002d24:	2301      	movs	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <main+0x620>)
 8002d2c:	2132      	movs	r1, #50	; 0x32
 8002d2e:	2002      	movs	r0, #2
 8002d30:	f011 fd08 	bl	8014744 <pifTaskManager_Add>
 8002d34:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d135      	bne.n	8002da8 <main+0x624>
 8002d3c:	f240 1387 	movw	r3, #391	; 0x187
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	e043      	b.n	8002dcc <main+0x648>
 8002d44:	200007e4 	.word	0x200007e4
 8002d48:	20000e08 	.word	0x20000e08
 8002d4c:	2000089c 	.word	0x2000089c
 8002d50:	200016d4 	.word	0x200016d4
 8002d54:	2000172c 	.word	0x2000172c
 8002d58:	0800ca0d 	.word	0x0800ca0d
 8002d5c:	080018e5 	.word	0x080018e5
 8002d60:	20001962 	.word	0x20001962
 8002d64:	20001966 	.word	0x20001966
 8002d68:	20001964 	.word	0x20001964
 8002d6c:	2000169c 	.word	0x2000169c
 8002d70:	0800de05 	.word	0x0800de05
 8002d74:	0802577c 	.word	0x0802577c
 8002d78:	0800de6d 	.word	0x0800de6d
 8002d7c:	200014f4 	.word	0x200014f4
 8002d80:	08025784 	.word	0x08025784
 8002d84:	0800f009 	.word	0x0800f009
 8002d88:	20000060 	.word	0x20000060
 8002d8c:	08025788 	.word	0x08025788
 8002d90:	0800a7d1 	.word	0x0800a7d1
 8002d94:	0802578c 	.word	0x0802578c
 8002d98:	080089c5 	.word	0x080089c5
 8002d9c:	200014fc 	.word	0x200014fc
 8002da0:	08025794 	.word	0x08025794
 8002da4:	0800c751 	.word	0x0800c751
    p_task->name = "Loop";
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <main+0x668>)
 8002dac:	601a      	str	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002dae:	f011 fd69 	bl	8014884 <pifTaskManager_Count>
 8002db2:	4604      	mov	r4, r0
 8002db4:	480e      	ldr	r0, [pc, #56]	; (8002df0 <main+0x66c>)
 8002db6:	f012 f972 	bl	801509e <pifTimerManager_Count>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <main+0x670>)
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f010 fb9d 	bl	8013500 <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002dc6:	f011 fd67 	bl	8014898 <pifTaskManager_Loop>
 8002dca:	e7fc      	b.n	8002dc6 <main+0x642>
  }
  return 0;

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <main+0x674>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	4909      	ldr	r1, [pc, #36]	; (8002dfc <main+0x678>)
 8002dd6:	2004      	movs	r0, #4
 8002dd8:	f010 fb92 	bl	8013500 <pifLog_Printf>
	pifLog_SendAndExit();
 8002ddc:	f010 fc58 	bl	8013690 <pifLog_SendAndExit>
#endif
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3734      	adds	r7, #52	; 0x34
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	0802577c 	.word	0x0802577c
 8002df0:	200014d0 	.word	0x200014d0
 8002df4:	08025798 	.word	0x08025798
 8002df8:	20001bb5 	.word	0x20001bb5
 8002dfc:	080257b0 	.word	0x080257b0

08002e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b094      	sub	sp, #80	; 0x50
 8002e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e06:	f107 0320 	add.w	r3, r7, #32
 8002e0a:	2230      	movs	r2, #48	; 0x30
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f01f fd68 	bl	80228e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <SystemClock_Config+0xcc>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <SystemClock_Config+0xcc>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	; 0x40
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <SystemClock_Config+0xcc>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e40:	2300      	movs	r3, #0
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <SystemClock_Config+0xd0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <SystemClock_Config+0xd0>)
 8002e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <SystemClock_Config+0xd0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002e64:	230d      	movs	r3, #13
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002e70:	2310      	movs	r3, #16
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	4618      	mov	r0, r3
 8002e88:	f01c fe5c 	bl	801fb44 <HAL_RCC_OscConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e92:	f000 fb31 	bl	80034f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e96:	230f      	movs	r3, #15
 8002e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f01d f8be 	bl	8020034 <HAL_RCC_ClockConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ebe:	f000 fb1b 	bl	80034f8 <Error_Handler>
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3750      	adds	r7, #80	; 0x50
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000

08002ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eda:	463b      	mov	r3, r7
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002ee8:	4a36      	ldr	r2, [pc, #216]	; (8002fc4 <MX_ADC1_Init+0xf0>)
 8002eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ef4:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f00:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f16:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <MX_ADC1_Init+0xf4>)
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f22:	2204      	movs	r2, #4
 8002f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f34:	4822      	ldr	r0, [pc, #136]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f36:	f018 fae3 	bl	801b500 <HAL_ADC_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f40:	f000 fada 	bl	80034f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f44:	2306      	movs	r3, #6
 8002f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f50:	463b      	mov	r3, r7
 8002f52:	4619      	mov	r1, r3
 8002f54:	481a      	ldr	r0, [pc, #104]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f56:	f018 fc25 	bl	801b7a4 <HAL_ADC_ConfigChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002f60:	f000 faca 	bl	80034f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f64:	2309      	movs	r3, #9
 8002f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4813      	ldr	r0, [pc, #76]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f72:	f018 fc17 	bl	801b7a4 <HAL_ADC_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002f7c:	f000 fabc 	bl	80034f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f80:	2307      	movs	r3, #7
 8002f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f84:	2303      	movs	r3, #3
 8002f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480c      	ldr	r0, [pc, #48]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002f8e:	f018 fc09 	bl	801b7a4 <HAL_ADC_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f98:	f000 faae 	bl	80034f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_ADC1_Init+0xec>)
 8002faa:	f018 fbfb 	bl	801b7a4 <HAL_ADC_ConfigChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002fb4:	f000 faa0 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200004cc 	.word	0x200004cc
 8002fc4:	40012000 	.word	0x40012000
 8002fc8:	0f000001 	.word	0x0f000001

08002fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <MX_I2C1_Init+0x50>)
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <MX_I2C1_Init+0x54>)
 8002fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_I2C1_Init+0x50>)
 8002fd8:	4a12      	ldr	r2, [pc, #72]	; (8003024 <MX_I2C1_Init+0x58>)
 8002fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <MX_I2C1_Init+0x50>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_I2C1_Init+0x50>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_I2C1_Init+0x50>)
 8002fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <MX_I2C1_Init+0x50>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_I2C1_Init+0x50>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <MX_I2C1_Init+0x50>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_I2C1_Init+0x50>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003008:	4804      	ldr	r0, [pc, #16]	; (800301c <MX_I2C1_Init+0x50>)
 800300a:	f019 fe75 	bl	801ccf8 <HAL_I2C_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003014:	f000 fa70 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000574 	.word	0x20000574
 8003020:	40005400 	.word	0x40005400
 8003024:	00061a80 	.word	0x00061a80

08003028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303c:	463b      	mov	r3, r7
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <MX_TIM2_Init+0x94>)
 8003046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800304a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <MX_TIM2_Init+0x94>)
 800304e:	2253      	movs	r2, #83	; 0x53
 8003050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <MX_TIM2_Init+0x94>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <MX_TIM2_Init+0x94>)
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <MX_TIM2_Init+0x94>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <MX_TIM2_Init+0x94>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800306c:	4813      	ldr	r0, [pc, #76]	; (80030bc <MX_TIM2_Init+0x94>)
 800306e:	f01d fa01 	bl	8020474 <HAL_TIM_Base_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003078:	f000 fa3e 	bl	80034f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	4619      	mov	r1, r3
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <MX_TIM2_Init+0x94>)
 800308a:	f01d fe2f 	bl	8020cec <HAL_TIM_ConfigClockSource>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003094:	f000 fa30 	bl	80034f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003098:	2300      	movs	r3, #0
 800309a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030a0:	463b      	mov	r3, r7
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <MX_TIM2_Init+0x94>)
 80030a6:	f01e f9e7 	bl	8021478 <HAL_TIMEx_MasterConfigSynchronization>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030b0:	f000 fa22 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000688 	.word	0x20000688

080030c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d4:	f107 0320 	add.w	r3, r7, #32
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
 80030ec:	615a      	str	r2, [r3, #20]
 80030ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <MX_TIM3_Init+0x134>)
 80030f2:	4a41      	ldr	r2, [pc, #260]	; (80031f8 <MX_TIM3_Init+0x138>)
 80030f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <MX_TIM3_Init+0x134>)
 80030f8:	2253      	movs	r2, #83	; 0x53
 80030fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <MX_TIM3_Init+0x134>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003104:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003108:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <MX_TIM3_Init+0x134>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003116:	4837      	ldr	r0, [pc, #220]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003118:	f01d f9ac 	bl	8020474 <HAL_TIM_Base_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003122:	f000 f9e9 	bl	80034f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800312c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003130:	4619      	mov	r1, r3
 8003132:	4830      	ldr	r0, [pc, #192]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003134:	f01d fdda 	bl	8020cec <HAL_TIM_ConfigClockSource>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800313e:	f000 f9db 	bl	80034f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003142:	482c      	ldr	r0, [pc, #176]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003144:	f01d f9e5 	bl	8020512 <HAL_TIM_PWM_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800314e:	f000 f9d3 	bl	80034f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800315a:	f107 0320 	add.w	r3, r7, #32
 800315e:	4619      	mov	r1, r3
 8003160:	4824      	ldr	r0, [pc, #144]	; (80031f4 <MX_TIM3_Init+0x134>)
 8003162:	f01e f989 	bl	8021478 <HAL_TIMEx_MasterConfigSynchronization>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800316c:	f000 f9c4 	bl	80034f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003170:	2360      	movs	r3, #96	; 0x60
 8003172:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	2200      	movs	r2, #0
 8003186:	4619      	mov	r1, r3
 8003188:	481a      	ldr	r0, [pc, #104]	; (80031f4 <MX_TIM3_Init+0x134>)
 800318a:	f01d fced 	bl	8020b68 <HAL_TIM_PWM_ConfigChannel>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003194:	f000 f9b0 	bl	80034f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	2204      	movs	r2, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4815      	ldr	r0, [pc, #84]	; (80031f4 <MX_TIM3_Init+0x134>)
 80031a0:	f01d fce2 	bl	8020b68 <HAL_TIM_PWM_ConfigChannel>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80031aa:	f000 f9a5 	bl	80034f8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2208      	movs	r2, #8
 80031b6:	4619      	mov	r1, r3
 80031b8:	480e      	ldr	r0, [pc, #56]	; (80031f4 <MX_TIM3_Init+0x134>)
 80031ba:	f01d fcd5 	bl	8020b68 <HAL_TIM_PWM_ConfigChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80031c4:	f000 f998 	bl	80034f8 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80031c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	220c      	movs	r2, #12
 80031d2:	4619      	mov	r1, r3
 80031d4:	4807      	ldr	r0, [pc, #28]	; (80031f4 <MX_TIM3_Init+0x134>)
 80031d6:	f01d fcc7 	bl	8020b68 <HAL_TIM_PWM_ConfigChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 80031e0:	f000 f98a 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <MX_TIM3_Init+0x134>)
 80031e6:	f000 fb5d 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 80031ea:	bf00      	nop
 80031ec:	3738      	adds	r7, #56	; 0x38
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200006d0 	.word	0x200006d0
 80031f8:	40000400 	.word	0x40000400

080031fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <MX_USART1_UART_Init+0x50>)
 8003204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800320c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_USART1_UART_Init+0x4c>)
 8003234:	f01e f9a2 	bl	802157c <HAL_UART_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800323e:	f000 f95b 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000718 	.word	0x20000718
 800324c:	40011000 	.word	0x40011000

08003250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <MX_USART2_UART_Init+0x50>)
 8003258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800325c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003288:	f01e f978 	bl	802157c <HAL_UART_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003292:	f000 f931 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000075c 	.word	0x2000075c
 80032a0:	40004400 	.word	0x40004400

080032a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <MX_USART6_UART_Init+0x50>)
 80032ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_USART6_UART_Init+0x4c>)
 80032dc:	f01e f94e 	bl	802157c <HAL_UART_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80032e6:	f000 f907 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200007a0 	.word	0x200007a0
 80032f4:	40011400 	.word	0x40011400

080032f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <MX_DMA_Init+0x78>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <MX_DMA_Init+0x78>)
 8003308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <MX_DMA_Init+0x78>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <MX_DMA_Init+0x78>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a13      	ldr	r2, [pc, #76]	; (8003370 <MX_DMA_Init+0x78>)
 8003324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <MX_DMA_Init+0x78>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	200b      	movs	r0, #11
 800333c:	f018 fde1 	bl	801bf02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003340:	200b      	movs	r0, #11
 8003342:	f018 fdfa 	bl	801bf3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	200c      	movs	r0, #12
 800334c:	f018 fdd9 	bl	801bf02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003350:	200c      	movs	r0, #12
 8003352:	f018 fdf2 	bl	801bf3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2100      	movs	r1, #0
 800335a:	2038      	movs	r0, #56	; 0x38
 800335c:	f018 fdd1 	bl	801bf02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003360:	2038      	movs	r0, #56	; 0x38
 8003362:	f018 fdea 	bl	801bf3a <HAL_NVIC_EnableIRQ>

}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <MX_GPIO_Init+0x174>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <MX_GPIO_Init+0x174>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <MX_GPIO_Init+0x174>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <MX_GPIO_Init+0x174>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2131      	movs	r1, #49	; 0x31
 80033fe:	483b      	ldr	r0, [pc, #236]	; (80034ec <MX_GPIO_Init+0x178>)
 8003400:	f019 fc48 	bl	801cc94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003404:	2200      	movs	r2, #0
 8003406:	2120      	movs	r1, #32
 8003408:	4839      	ldr	r0, [pc, #228]	; (80034f0 <MX_GPIO_Init+0x17c>)
 800340a:	f019 fc43 	bl	801cc94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800340e:	2200      	movs	r2, #0
 8003410:	2104      	movs	r1, #4
 8003412:	4838      	ldr	r0, [pc, #224]	; (80034f4 <MX_GPIO_Init+0x180>)
 8003414:	f019 fc3e 	bl	801cc94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800341e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	482f      	ldr	r0, [pc, #188]	; (80034ec <MX_GPIO_Init+0x178>)
 8003430:	f019 f9c8 	bl	801c7c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 8003434:	2331      	movs	r3, #49	; 0x31
 8003436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	2301      	movs	r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4828      	ldr	r0, [pc, #160]	; (80034ec <MX_GPIO_Init+0x178>)
 800344c:	f019 f9ba 	bl	801c7c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 8003450:	2302      	movs	r3, #2
 8003452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003454:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4821      	ldr	r0, [pc, #132]	; (80034ec <MX_GPIO_Init+0x178>)
 8003466:	f019 f9ad 	bl	801c7c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800346a:	2320      	movs	r3, #32
 800346c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	4619      	mov	r1, r3
 8003480:	481b      	ldr	r0, [pc, #108]	; (80034f0 <MX_GPIO_Init+0x17c>)
 8003482:	f019 f99f 	bl	801c7c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003486:	2304      	movs	r3, #4
 8003488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348a:	2301      	movs	r3, #1
 800348c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	4815      	ldr	r0, [pc, #84]	; (80034f4 <MX_GPIO_Init+0x180>)
 800349e:	f019 f991 	bl	801c7c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 80034a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	480c      	ldr	r0, [pc, #48]	; (80034ec <MX_GPIO_Init+0x178>)
 80034ba:	f019 f983 	bl	801c7c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2007      	movs	r0, #7
 80034c4:	f018 fd1d 	bl	801bf02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80034c8:	2007      	movs	r0, #7
 80034ca:	f018 fd36 	bl	801bf3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	2028      	movs	r0, #40	; 0x28
 80034d4:	f018 fd15 	bl	801bf02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034d8:	2028      	movs	r0, #40	; 0x28
 80034da:	f018 fd2e 	bl	801bf3a <HAL_NVIC_EnableIRQ>

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400

080034f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034fc:	b672      	cpsid	i
}
 80034fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003500:	e7fe      	b.n	8003500 <Error_Handler+0x8>
	...

08003504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_MspInit+0x4c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_MspInit+0x4c>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_MspInit+0x4c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_MspInit+0x4c>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <HAL_MspInit+0x4c>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_MspInit+0x4c>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003542:	2007      	movs	r0, #7
 8003544:	f018 fcd2 	bl	801beec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800

08003554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 031c 	add.w	r3, r7, #28
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_ADC_MspInit+0x144>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f040 808c 	bne.w	8003690 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_ADC_MspInit+0x148>)
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	4a46      	ldr	r2, [pc, #280]	; (800369c <HAL_ADC_MspInit+0x148>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6453      	str	r3, [r2, #68]	; 0x44
 8003588:	4b44      	ldr	r3, [pc, #272]	; (800369c <HAL_ADC_MspInit+0x148>)
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_ADC_MspInit+0x148>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	4a3f      	ldr	r2, [pc, #252]	; (800369c <HAL_ADC_MspInit+0x148>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6313      	str	r3, [r2, #48]	; 0x30
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4a31      	ldr	r2, [pc, #196]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	6313      	str	r3, [r2, #48]	; 0x30
 80035dc:	4b2f      	ldr	r3, [pc, #188]	; (800369c <HAL_ADC_MspInit+0x148>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 80035e8:	2304      	movs	r3, #4
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ec:	2303      	movs	r3, #3
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 031c 	add.w	r3, r7, #28
 80035f8:	4619      	mov	r1, r3
 80035fa:	4829      	ldr	r0, [pc, #164]	; (80036a0 <HAL_ADC_MspInit+0x14c>)
 80035fc:	f019 f8e2 	bl	801c7c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 8003600:	23c0      	movs	r3, #192	; 0xc0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003604:	2303      	movs	r3, #3
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4619      	mov	r1, r3
 8003612:	4824      	ldr	r0, [pc, #144]	; (80036a4 <HAL_ADC_MspInit+0x150>)
 8003614:	f019 f8d6 	bl	801c7c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 8003618:	2302      	movs	r3, #2
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800361c:	2303      	movs	r3, #3
 800361e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	481f      	ldr	r0, [pc, #124]	; (80036a8 <HAL_ADC_MspInit+0x154>)
 800362c:	f019 f8ca 	bl	801c7c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003632:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <HAL_ADC_MspInit+0x15c>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003638:	2200      	movs	r2, #0
 800363a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_ADC_MspInit+0x158>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_ADC_MspInit+0x158>)
 800364a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003656:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_ADC_MspInit+0x158>)
 800365a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_ADC_MspInit+0x158>)
 800366a:	2200      	movs	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003674:	480d      	ldr	r0, [pc, #52]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003676:	f018 fc89 	bl	801bf8c <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003680:	f7ff ff3a 	bl	80034f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_ADC_MspInit+0x158>)
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <HAL_ADC_MspInit+0x158>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003690:	bf00      	nop
 8003692:	3730      	adds	r7, #48	; 0x30
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012000 	.word	0x40012000
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	20000514 	.word	0x20000514
 80036b0:	40026410 	.word	0x40026410

080036b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_I2C_MspInit+0x15c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f040 8097 	bne.w	8003806 <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <HAL_I2C_MspInit+0x160>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_I2C_MspInit+0x160>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <HAL_I2C_MspInit+0x160>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f8:	2312      	movs	r3, #18
 80036fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003704:	2304      	movs	r3, #4
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	4842      	ldr	r0, [pc, #264]	; (8003818 <HAL_I2C_MspInit+0x164>)
 8003710:	f019 f858 	bl	801c7c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <HAL_I2C_MspInit+0x160>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <HAL_I2C_MspInit+0x160>)
 800371e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_I2C_MspInit+0x160>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003730:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_I2C_MspInit+0x16c>)
 8003734:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003744:	4b35      	ldr	r3, [pc, #212]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_I2C_MspInit+0x168>)
 800374c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003750:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003752:	4b32      	ldr	r3, [pc, #200]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003758:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_I2C_MspInit+0x168>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003760:	2200      	movs	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_I2C_MspInit+0x168>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003770:	482a      	ldr	r0, [pc, #168]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003772:	f018 fc0b 	bl	801bf8c <HAL_DMA_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800377c:	f7ff febc 	bl	80034f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_I2C_MspInit+0x168>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_I2C_MspInit+0x170>)
 800378e:	4a26      	ldr	r2, [pc, #152]	; (8003828 <HAL_I2C_MspInit+0x174>)
 8003790:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_I2C_MspInit+0x170>)
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_I2C_MspInit+0x170>)
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80037ca:	4816      	ldr	r0, [pc, #88]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037cc:	f018 fbde 	bl	801bf8c <HAL_DMA_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80037d6:	f7ff fe8f 	bl	80034f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
 80037e0:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_I2C_MspInit+0x170>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2100      	movs	r1, #0
 80037ea:	201f      	movs	r0, #31
 80037ec:	f018 fb89 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037f0:	201f      	movs	r0, #31
 80037f2:	f018 fba2 	bl	801bf3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	2020      	movs	r0, #32
 80037fc:	f018 fb81 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003800:	2020      	movs	r0, #32
 8003802:	f018 fb9a 	bl	801bf3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40005400 	.word	0x40005400
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400
 800381c:	200005c8 	.word	0x200005c8
 8003820:	40026010 	.word	0x40026010
 8003824:	20000628 	.word	0x20000628
 8003828:	40026028 	.word	0x40026028

0800382c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d10e      	bne.n	800385c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800385a:	e01a      	b.n	8003892 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <HAL_TIM_Base_MspInit+0x74>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a0b      	ldr	r2, [pc, #44]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_TIM_Base_MspInit+0x70>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	201d      	movs	r0, #29
 8003888:	f018 fb3b 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800388c:	201d      	movs	r0, #29
 800388e:	f018 fb54 	bl	801bf3a <HAL_NVIC_EnableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40000400 	.word	0x40000400

080038a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIM_MspPostInit+0xa4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d13c      	bne.n	8003940 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a1f      	ldr	r2, [pc, #124]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_TIM_MspPostInit+0xa8>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800390e:	2302      	movs	r3, #2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	4619      	mov	r1, r3
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <HAL_TIM_MspPostInit+0xac>)
 800391a:	f018 ff53 	bl	801c7c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800391e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003930:	2302      	movs	r3, #2
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4619      	mov	r1, r3
 800393a:	4806      	ldr	r0, [pc, #24]	; (8003954 <HAL_TIM_MspPostInit+0xb0>)
 800393c:	f018 ff42 	bl	801c7c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40000400 	.word	0x40000400
 800394c:	40023800 	.word	0x40023800
 8003950:	40020400 	.word	0x40020400
 8003954:	40020800 	.word	0x40020800

08003958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_UART_MspInit+0x180>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d135      	bne.n	80039e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	4b57      	ldr	r3, [pc, #348]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	4a56      	ldr	r2, [pc, #344]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003984:	f043 0310 	orr.w	r3, r3, #16
 8003988:	6453      	str	r3, [r2, #68]	; 0x44
 800398a:	4b54      	ldr	r3, [pc, #336]	; (8003adc <HAL_UART_MspInit+0x184>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_UART_MspInit+0x184>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a4f      	ldr	r2, [pc, #316]	; (8003adc <HAL_UART_MspInit+0x184>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_UART_MspInit+0x184>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039c4:	2307      	movs	r3, #7
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039cc:	4619      	mov	r1, r3
 80039ce:	4844      	ldr	r0, [pc, #272]	; (8003ae0 <HAL_UART_MspInit+0x188>)
 80039d0:	f018 fef8 	bl	801c7c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2025      	movs	r0, #37	; 0x25
 80039da:	f018 fa92 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039de:	2025      	movs	r0, #37	; 0x25
 80039e0:	f018 faab 	bl	801bf3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80039e4:	e073      	b.n	8003ace <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3e      	ldr	r2, [pc, #248]	; (8003ae4 <HAL_UART_MspInit+0x18c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d134      	bne.n	8003a5a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <HAL_UART_MspInit+0x184>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	4a38      	ldr	r2, [pc, #224]	; (8003adc <HAL_UART_MspInit+0x184>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	4b32      	ldr	r3, [pc, #200]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a34:	2303      	movs	r3, #3
 8003a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a40:	4619      	mov	r1, r3
 8003a42:	4827      	ldr	r0, [pc, #156]	; (8003ae0 <HAL_UART_MspInit+0x188>)
 8003a44:	f018 febe 	bl	801c7c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	2026      	movs	r0, #38	; 0x26
 8003a4e:	f018 fa58 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a52:	2026      	movs	r0, #38	; 0x26
 8003a54:	f018 fa71 	bl	801bf3a <HAL_NVIC_EnableIRQ>
}
 8003a58:	e039      	b.n	8003ace <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_UART_MspInit+0x190>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d134      	bne.n	8003ace <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a6e:	f043 0320 	orr.w	r3, r3, #32
 8003a72:	6453      	str	r3, [r2, #68]	; 0x44
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_UART_MspInit+0x184>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <HAL_UART_MspInit+0x188>)
 8003aba:	f018 fe83 	bl	801c7c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2047      	movs	r0, #71	; 0x47
 8003ac4:	f018 fa1d 	bl	801bf02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ac8:	2047      	movs	r0, #71	; 0x47
 8003aca:	f018 fa36 	bl	801bf3a <HAL_NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3738      	adds	r7, #56	; 0x38
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40004400 	.word	0x40004400
 8003ae8:	40011400 	.word	0x40011400

08003aec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_UART_MspDeInit+0x84>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10e      	bne.n	8003b1c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b04:	f023 0310 	bic.w	r3, r3, #16
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003b0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b0e:	481a      	ldr	r0, [pc, #104]	; (8003b78 <HAL_UART_MspDeInit+0x8c>)
 8003b10:	f018 ffdc 	bl	801cacc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003b14:	2025      	movs	r0, #37	; 0x25
 8003b16:	f018 fa1e 	bl	801bf56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003b1a:	e025      	b.n	8003b68 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_UART_MspDeInit+0x90>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003b32:	210c      	movs	r1, #12
 8003b34:	4810      	ldr	r0, [pc, #64]	; (8003b78 <HAL_UART_MspDeInit+0x8c>)
 8003b36:	f018 ffc9 	bl	801cacc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003b3a:	2026      	movs	r0, #38	; 0x26
 8003b3c:	f018 fa0b 	bl	801bf56 <HAL_NVIC_DisableIRQ>
}
 8003b40:	e012      	b.n	8003b68 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <HAL_UART_MspDeInit+0x94>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10d      	bne.n	8003b68 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_UART_MspDeInit+0x88>)
 8003b52:	f023 0320 	bic.w	r3, r3, #32
 8003b56:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003b58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b5c:	4806      	ldr	r0, [pc, #24]	; (8003b78 <HAL_UART_MspDeInit+0x8c>)
 8003b5e:	f018 ffb5 	bl	801cacc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003b62:	2047      	movs	r0, #71	; 0x47
 8003b64:	f018 f9f7 	bl	801bf56 <HAL_NVIC_DisableIRQ>
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40011400 	.word	0x40011400

08003b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <NMI_Handler+0x4>

08003b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <HardFault_Handler+0x4>

08003b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <MemManage_Handler+0x4>

08003b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <BusFault_Handler+0x4>

08003b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <UsageFault_Handler+0x4>

08003ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003bd0:	f00d fa50 	bl	8011074 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003bd4:	4803      	ldr	r0, [pc, #12]	; (8003be4 <SysTick_Handler+0x18>)
 8003bd6:	f011 fac6 	bl	8015166 <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bda:	f017 fc71 	bl	801b4c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200014d0 	.word	0x200014d0

08003be8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003bec:	2002      	movs	r0, #2
 8003bee:	f019 f86b 	bl	801ccc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <DMA1_Stream0_IRQHandler+0x10>)
 8003bfe:	f018 fb5d 	bl	801c2bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200005c8 	.word	0x200005c8

08003c0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <DMA1_Stream1_IRQHandler+0x10>)
 8003c12:	f018 fb53 	bl	801c2bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000628 	.word	0x20000628

08003c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM3_IRQHandler+0x10>)
 8003c26:	f01c fe97 	bl	8020958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200006d0 	.word	0x200006d0

08003c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <I2C1_EV_IRQHandler+0x10>)
 8003c3a:	f019 fef9 	bl	801da30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000574 	.word	0x20000574

08003c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <I2C1_ER_IRQHandler+0x10>)
 8003c4e:	f01a f860 	bl	801dd12 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000574 	.word	0x20000574

08003c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <USART1_IRQHandler+0x10>)
 8003c62:	f01d fe91 	bl	8021988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000718 	.word	0x20000718

08003c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <USART2_IRQHandler+0x10>)
 8003c76:	f01d fe87 	bl	8021988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000075c 	.word	0x2000075c

08003c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003c88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c8c:	f019 f81c 	bl	801ccc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c94:	f019 f818 	bl	801ccc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <DMA2_Stream0_IRQHandler+0x10>)
 8003ca2:	f018 fb0b 	bl	801c2bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000514 	.word	0x20000514

08003cb0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <USART6_IRQHandler+0x10>)
 8003cb6:	f01d fe67 	bl	8021988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200007a0 	.word	0x200007a0

08003cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <_sbrk+0x5c>)
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <_sbrk+0x60>)
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <_sbrk+0x64>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <_sbrk+0x64>)
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <_sbrk+0x68>)
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <_sbrk+0x64>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d207      	bcs.n	8003d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf4:	f01e fdae 	bl	8022854 <__errno>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	e009      	b.n	8003d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <_sbrk+0x64>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <_sbrk+0x64>)
 8003d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20020000 	.word	0x20020000
 8003d24:	00000400 	.word	0x00000400
 8003d28:	20000808 	.word	0x20000808
 8003d2c:	20001d80 	.word	0x20001d80

08003d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <SystemInit+0x20>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <SystemInit+0x20>)
 8003d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	da01      	bge.n	8003d6c <constrain+0x18>
        return low;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	e006      	b.n	8003d7a <constrain+0x26>
    else if (amt > high)
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	dd01      	ble.n	8003d78 <constrain+0x24>
        return high;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	e000      	b.n	8003d7a <constrain+0x26>
    else
        return amt;
 8003d78:	68fb      	ldr	r3, [r7, #12]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	; 0x38
 8003d8c:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003d8e:	4b8a      	ldr	r3, [pc, #552]	; (8003fb8 <initBoardAlignment+0x230>)
 8003d90:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <initBoardAlignment+0x26>
 8003d98:	4b87      	ldr	r3, [pc, #540]	; (8003fb8 <initBoardAlignment+0x230>)
 8003d9a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <initBoardAlignment+0x26>
 8003da2:	4b85      	ldr	r3, [pc, #532]	; (8003fb8 <initBoardAlignment+0x230>)
 8003da4:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80fd 	beq.w	8003fa8 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003dae:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <initBoardAlignment+0x234>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003db4:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <initBoardAlignment+0x230>)
 8003db6:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fb66 	bl	800048c <__aeabi_i2d>
 8003dc0:	a37b      	add	r3, pc, #492	; (adr r3, 8003fb0 <initBoardAlignment+0x228>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fbcb 	bl	8000560 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	4b7a      	ldr	r3, [pc, #488]	; (8003fc0 <initBoardAlignment+0x238>)
 8003dd8:	f7fc fcec 	bl	80007b4 <__aeabi_ddiv>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f7fc fe9e 	bl	8000b24 <__aeabi_d2f>
 8003de8:	4603      	mov	r3, r0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003dec:	4b72      	ldr	r3, [pc, #456]	; (8003fb8 <initBoardAlignment+0x230>)
 8003dee:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fb4a 	bl	800048c <__aeabi_i2d>
 8003df8:	a36d      	add	r3, pc, #436	; (adr r3, 8003fb0 <initBoardAlignment+0x228>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fbaf 	bl	8000560 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <initBoardAlignment+0x238>)
 8003e10:	f7fc fcd0 	bl	80007b4 <__aeabi_ddiv>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7fc fe82 	bl	8000b24 <__aeabi_d2f>
 8003e20:	4603      	mov	r3, r0
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003e24:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <initBoardAlignment+0x230>)
 8003e26:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc fb2e 	bl	800048c <__aeabi_i2d>
 8003e30:	a35f      	add	r3, pc, #380	; (adr r3, 8003fb0 <initBoardAlignment+0x228>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f7fc fb93 	bl	8000560 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b5e      	ldr	r3, [pc, #376]	; (8003fc0 <initBoardAlignment+0x238>)
 8003e48:	f7fc fcb4 	bl	80007b4 <__aeabi_ddiv>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fe66 	bl	8000b24 <__aeabi_d2f>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003e5c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003e60:	f01f f81e 	bl	8022ea0 <cosf>
 8003e64:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003e68:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003e6c:	f01f f89c 	bl	8022fa8 <sinf>
 8003e70:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003e74:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e78:	f01f f812 	bl	8022ea0 <cosf>
 8003e7c:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003e80:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e84:	f01f f890 	bl	8022fa8 <sinf>
 8003e88:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003e8c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e90:	f01f f806 	bl	8022ea0 <cosf>
 8003e94:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003e98:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e9c:	f01f f884 	bl	8022fa8 <sinf>
 8003ea0:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003ea4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ea8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb0:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003eb4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003eb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003ec4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed0:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003ed4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee0:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003ee4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003ef4:	4a33      	ldr	r2, [pc, #204]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003efa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003efe:	eeb1 7a67 	vneg.f32	s14, s15
 8003f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f0c:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003f16:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f2c:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003f30:	ed97 7a00 	vldr	s14, [r7]
 8003f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f46:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003f4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f4e:	eeb1 7a67 	vneg.f32	s14, s15
 8003f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f5c:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003f60:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f64:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	ed97 7a00 	vldr	s14, [r7]
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f76:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003f7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003f90:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003f94:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <initBoardAlignment+0x23c>)
 8003fa2:	edc3 7a08 	vstr	s15, [r3, #32]
 8003fa6:	e000      	b.n	8003faa <initBoardAlignment+0x222>
        return;
 8003fa8:	bf00      	nop
}
 8003faa:	3738      	adds	r7, #56	; 0x38
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	54442d18 	.word	0x54442d18
 8003fb4:	400921fb 	.word	0x400921fb
 8003fb8:	2000089c 	.word	0x2000089c
 8003fbc:	20000024 	.word	0x20000024
 8003fc0:	40668000 	.word	0x40668000
 8003fc4:	2000080c 	.word	0x2000080c

08003fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fcc:	480d      	ldr	r0, [pc, #52]	; (8004004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fce:	490e      	ldr	r1, [pc, #56]	; (8004008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fd4:	e002      	b.n	8003fdc <LoopCopyDataInit>

08003fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fda:	3304      	adds	r3, #4

08003fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe0:	d3f9      	bcc.n	8003fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fe4:	4c0b      	ldr	r4, [pc, #44]	; (8004014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe8:	e001      	b.n	8003fee <LoopFillZerobss>

08003fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fec:	3204      	adds	r2, #4

08003fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff0:	d3fb      	bcc.n	8003fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ff2:	f7ff fe9d 	bl	8003d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ff6:	f01e fc33 	bl	8022860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ffa:	f7fe fbc3 	bl	8002784 <main>
  bx  lr    
 8003ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004008:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 800400c:	08029608 	.word	0x08029608
  ldr r2, =_sbss
 8004010:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8004014:	20001d7c 	.word	0x20001d7c

08004018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004018:	e7fe      	b.n	8004018 <ADC_IRQHandler>
	...

0800401c <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <_evtBuzzerFinish+0x1c>)
 8004028:	220d      	movs	r2, #13
 800402a:	701a      	strb	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000025 	.word	0x20000025

0800403c <buzzerInit>:

bool buzzerInit()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <buzzerInit+0x28>)
 8004042:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004046:	4808      	ldr	r0, [pc, #32]	; (8004068 <buzzerInit+0x2c>)
 8004048:	f016 faa6 	bl	801a598 <pifBuzzer_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <buzzerInit+0x1a>
 8004052:	2300      	movs	r3, #0
 8004054:	e003      	b.n	800405e <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <buzzerInit+0x2c>)
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <buzzerInit+0x30>)
 800405a:	601a      	str	r2, [r3, #0]
    return true;
 800405c:	2301      	movs	r3, #1
}
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	0800212d 	.word	0x0800212d
 8004068:	20000848 	.word	0x20000848
 800406c:	0800401d 	.word	0x0800401d

08004070 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 800407e:	4b62      	ldr	r3, [pc, #392]	; (8004208 <buzzer+0x198>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	79fa      	ldrb	r2, [r7, #7]
 8004084:	429a      	cmp	r2, r3
 8004086:	f080 80b7 	bcs.w	80041f8 <buzzer+0x188>
        return;

    switch (mode) {
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	f200 80b5 	bhi.w	80041fc <buzzer+0x18c>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <buzzer+0x28>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040cd 	.word	0x080040cd
 800409c:	0800414b 	.word	0x0800414b
 80040a0:	0800413b 	.word	0x0800413b
 80040a4:	0800412b 	.word	0x0800412b
 80040a8:	0800415b 	.word	0x0800415b
 80040ac:	080040fb 	.word	0x080040fb
 80040b0:	080040fb 	.word	0x080040fb
 80040b4:	0800416b 	.word	0x0800416b
 80040b8:	0800417b 	.word	0x0800417b
 80040bc:	0800415b 	.word	0x0800415b
 80040c0:	0800410b 	.word	0x0800410b
 80040c4:	0800411b 	.word	0x0800411b
 80040c8:	080040db 	.word	0x080040db
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 80040cc:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <buzzer+0x198>)
 80040ce:	220d      	movs	r2, #13
 80040d0:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 80040d2:	484e      	ldr	r0, [pc, #312]	; (800420c <buzzer+0x19c>)
 80040d4:	f016 facc 	bl	801a670 <pifBuzzer_Stop>
            break;
 80040d8:	e093      	b.n	8004202 <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 80040da:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <buzzer+0x1a0>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 808e 	bne.w	8004200 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 80040e4:	494b      	ldr	r1, [pc, #300]	; (8004214 <buzzer+0x1a4>)
 80040e6:	4849      	ldr	r0, [pc, #292]	; (800420c <buzzer+0x19c>)
 80040e8:	f016 faa0 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 80040ec:	4a46      	ldr	r2, [pc, #280]	; (8004208 <buzzer+0x198>)
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <buzzer+0x1a0>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
            break;
 80040f8:	e083      	b.n	8004202 <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 80040fa:	4947      	ldr	r1, [pc, #284]	; (8004218 <buzzer+0x1a8>)
 80040fc:	4843      	ldr	r0, [pc, #268]	; (800420c <buzzer+0x19c>)
 80040fe:	f016 fa95 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004102:	4a41      	ldr	r2, [pc, #260]	; (8004208 <buzzer+0x198>)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	7013      	strb	r3, [r2, #0]
            break;
 8004108:	e07b      	b.n	8004202 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 800410a:	4944      	ldr	r1, [pc, #272]	; (800421c <buzzer+0x1ac>)
 800410c:	483f      	ldr	r0, [pc, #252]	; (800420c <buzzer+0x19c>)
 800410e:	f016 fa8d 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004112:	4a3d      	ldr	r2, [pc, #244]	; (8004208 <buzzer+0x198>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	7013      	strb	r3, [r2, #0]
            break;
 8004118:	e073      	b.n	8004202 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 800411a:	4941      	ldr	r1, [pc, #260]	; (8004220 <buzzer+0x1b0>)
 800411c:	483b      	ldr	r0, [pc, #236]	; (800420c <buzzer+0x19c>)
 800411e:	f016 fa85 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004122:	4a39      	ldr	r2, [pc, #228]	; (8004208 <buzzer+0x198>)
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	7013      	strb	r3, [r2, #0]
            break;
 8004128:	e06b      	b.n	8004202 <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 800412a:	493e      	ldr	r1, [pc, #248]	; (8004224 <buzzer+0x1b4>)
 800412c:	4837      	ldr	r0, [pc, #220]	; (800420c <buzzer+0x19c>)
 800412e:	f016 fa7d 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004132:	4a35      	ldr	r2, [pc, #212]	; (8004208 <buzzer+0x198>)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	7013      	strb	r3, [r2, #0]
            break;
 8004138:	e063      	b.n	8004202 <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 800413a:	493b      	ldr	r1, [pc, #236]	; (8004228 <buzzer+0x1b8>)
 800413c:	4833      	ldr	r0, [pc, #204]	; (800420c <buzzer+0x19c>)
 800413e:	f016 fa75 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004142:	4a31      	ldr	r2, [pc, #196]	; (8004208 <buzzer+0x198>)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	7013      	strb	r3, [r2, #0]
            break;
 8004148:	e05b      	b.n	8004202 <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 800414a:	4938      	ldr	r1, [pc, #224]	; (800422c <buzzer+0x1bc>)
 800414c:	482f      	ldr	r0, [pc, #188]	; (800420c <buzzer+0x19c>)
 800414e:	f016 fa6d 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <buzzer+0x198>)
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	7013      	strb	r3, [r2, #0]
            break;
 8004158:	e053      	b.n	8004202 <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 800415a:	4935      	ldr	r1, [pc, #212]	; (8004230 <buzzer+0x1c0>)
 800415c:	482b      	ldr	r0, [pc, #172]	; (800420c <buzzer+0x19c>)
 800415e:	f016 fa65 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <buzzer+0x198>)
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	7013      	strb	r3, [r2, #0]
            break;
 8004168:	e04b      	b.n	8004202 <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 800416a:	4932      	ldr	r1, [pc, #200]	; (8004234 <buzzer+0x1c4>)
 800416c:	4827      	ldr	r0, [pc, #156]	; (800420c <buzzer+0x19c>)
 800416e:	f016 fa5d 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 8004172:	4a25      	ldr	r2, [pc, #148]	; (8004208 <buzzer+0x198>)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	7013      	strb	r3, [r2, #0]
            break;
 8004178:	e043      	b.n	8004202 <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 800417a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800417e:	f002 ff4b 	bl	8007018 <feature>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02f      	beq.n	80041e8 <buzzer+0x178>
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <buzzer+0x1c8>)
 800418a:	7adb      	ldrb	r3, [r3, #11]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02b      	beq.n	80041e8 <buzzer+0x178>
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <buzzer+0x1cc>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d927      	bls.n	80041e8 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4a29      	ldr	r2, [pc, #164]	; (8004240 <buzzer+0x1d0>)
 800419c:	2105      	movs	r1, #5
 800419e:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	3301      	adds	r3, #1
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <buzzer+0x1d0>)
 80041a6:	210f      	movs	r1, #15
 80041a8:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	3302      	adds	r3, #2
 80041ae:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b13      	cmp	r3, #19
 80041b4:	d806      	bhi.n	80041c4 <buzzer+0x154>
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <buzzer+0x1cc>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d3e9      	bcc.n	8004198 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <buzzer+0x1d0>)
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	3302      	adds	r3, #2
 80041d2:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <buzzer+0x1d0>)
 80041d4:	21f0      	movs	r1, #240	; 0xf0
 80041d6:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 80041d8:	4919      	ldr	r1, [pc, #100]	; (8004240 <buzzer+0x1d0>)
 80041da:	480c      	ldr	r0, [pc, #48]	; (800420c <buzzer+0x19c>)
 80041dc:	f016 fa26 	bl	801a62c <pifBuzzer_Start>
                buzzerMode = mode;
 80041e0:	4a09      	ldr	r2, [pc, #36]	; (8004208 <buzzer+0x198>)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	7013      	strb	r3, [r2, #0]
                break;
 80041e6:	e00c      	b.n	8004202 <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 80041e8:	4916      	ldr	r1, [pc, #88]	; (8004244 <buzzer+0x1d4>)
 80041ea:	4808      	ldr	r0, [pc, #32]	; (800420c <buzzer+0x19c>)
 80041ec:	f016 fa1e 	bl	801a62c <pifBuzzer_Start>
            buzzerMode = mode;
 80041f0:	4a05      	ldr	r2, [pc, #20]	; (8004208 <buzzer+0x198>)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	7013      	strb	r3, [r2, #0]
            break;
 80041f6:	e004      	b.n	8004202 <buzzer+0x192>
        return;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <buzzer+0x192>

        default:
            return;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <buzzer+0x192>
                return;
 8004200:	bf00      	nop
    }
}
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000025 	.word	0x20000025
 800420c:	20000848 	.word	0x20000848
 8004210:	20000846 	.word	0x20000846
 8004214:	08027800 	.word	0x08027800
 8004218:	080277d4 	.word	0x080277d4
 800421c:	08027810 	.word	0x08027810
 8004220:	08027818 	.word	0x08027818
 8004224:	080277e0 	.word	0x080277e0
 8004228:	080277dc 	.word	0x080277dc
 800422c:	080277d0 	.word	0x080277d0
 8004230:	080277d8 	.word	0x080277d8
 8004234:	080277f4 	.word	0x080277f4
 8004238:	2000169c 	.word	0x2000169c
 800423c:	20001780 	.word	0x20001780
 8004240:	20000830 	.word	0x20000830
 8004244:	080277cc 	.word	0x080277cc

08004248 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <buzzerUpdate+0x20>)
 800424e:	7b5b      	ldrb	r3, [r3, #13]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <buzzerUpdate+0x24>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d902      	bls.n	8004262 <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 800425c:	2008      	movs	r0, #8
 800425e:	f7ff ff07 	bl	8004070 <buzzer>
    }
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2000173c 	.word	0x2000173c
 800426c:	20000025 	.word	0x20000025

08004270 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d309      	bcc.n	8004298 <i2a+0x28>
        a = i2a(i / r, a, r);
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ffed 	bl	8004270 <i2a>
 8004296:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	fbb3 f2f2 	udiv	r2, r3, r2
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	fb01 f202 	mul.w	r2, r1, r2
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <i2a+0x4c>)
 80042aa:	5cd2      	ldrb	r2, [r2, r3]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	701a      	strb	r2, [r3, #0]
    return a + 1;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	3301      	adds	r3, #1
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	080264b8 	.word	0x080264b8

080042c0 <itoa>:

char *itoa(int i, char *a, int r)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	dd02      	ble.n	80042d8 <itoa+0x18>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b24      	cmp	r3, #36	; 0x24
 80042d6:	dd01      	ble.n	80042dc <itoa+0x1c>
        r = 10;
 80042d8:	230a      	movs	r3, #10
 80042da:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0e      	bge.n	8004300 <itoa+0x40>
        *a = '-';
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	222d      	movs	r2, #45	; 0x2d
 80042e6:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4258      	negs	r0, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3301      	adds	r3, #1
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4619      	mov	r1, r3
 80042f4:	f7ff ffbc 	bl	8004270 <i2a>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e008      	b.n	8004312 <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ffb2 	bl	8004270 <i2a>
 800430c:	4603      	mov	r3, r0
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
    return a;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    int frac = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 8004328:	e002      	b.n	8004330 <_atof+0x14>
        p += 1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3301      	adds	r3, #1
 800432e:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b20      	cmp	r3, #32
 8004336:	d0f8      	beq.n	800432a <_atof+0xe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b09      	cmp	r3, #9
 800433e:	d0f4      	beq.n	800432a <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 8004340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004344:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b2d      	cmp	r3, #45	; 0x2d
 800434c:	d105      	bne.n	800435a <_atof+0x3e>
        sign = -1.0f;
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <_atof+0x1dc>)
 8004350:	61bb      	str	r3, [r7, #24]
        p += 1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3301      	adds	r3, #1
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	e006      	b.n	8004368 <_atof+0x4c>

    } else if (*p == '+') {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b2b      	cmp	r3, #43	; 0x2b
 8004360:	d102      	bne.n	8004368 <_atof+0x4c>
        p += 1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3301      	adds	r3, #1
 8004366:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 800436e:	e013      	b.n	8004398 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004370:	edd7 7a05 	vldr	s15, [r7, #20]
 8004374:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3b30      	subs	r3, #48	; 0x30
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438e:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3301      	adds	r3, #1
 8004396:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b2f      	cmp	r3, #47	; 0x2f
 800439e:	d903      	bls.n	80043a8 <_atof+0x8c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b39      	cmp	r3, #57	; 0x39
 80043a6:	d9e3      	bls.n	8004370 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b2e      	cmp	r3, #46	; 0x2e
 80043ae:	d129      	bne.n	8004404 <_atof+0xe8>
        float pow10 = 10.0f;
 80043b0:	4b52      	ldr	r3, [pc, #328]	; (80044fc <_atof+0x1e0>)
 80043b2:	60fb      	str	r3, [r7, #12]
        p += 1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 80043ba:	e01b      	b.n	80043f4 <_atof+0xd8>
            value += (*p - '0') / pow10;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	3b30      	subs	r3, #48	; 0x30
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80043ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80043d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043da:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 80043de:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ea:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3301      	adds	r3, #1
 80043f2:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b2f      	cmp	r3, #47	; 0x2f
 80043fa:	d903      	bls.n	8004404 <_atof+0xe8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b39      	cmp	r3, #57	; 0x39
 8004402:	d9db      	bls.n	80043bc <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 8004404:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004408:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b65      	cmp	r3, #101	; 0x65
 8004410:	d003      	beq.n	800441a <_atof+0xfe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b45      	cmp	r3, #69	; 0x45
 8004418:	d153      	bne.n	80044c2 <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3301      	adds	r3, #1
 800441e:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b2d      	cmp	r3, #45	; 0x2d
 800442a:	d105      	bne.n	8004438 <_atof+0x11c>
            frac = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
            p += 1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	e006      	b.n	8004446 <_atof+0x12a>

        } else if (*p == '+') {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b2b      	cmp	r3, #43	; 0x2b
 800443e:	d102      	bne.n	8004446 <_atof+0x12a>
            p += 1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3301      	adds	r3, #1
 8004444:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 800444a:	e00d      	b.n	8004468 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	4413      	add	r3, r2
 800445e:	3b30      	subs	r3, #48	; 0x30
 8004460:	60bb      	str	r3, [r7, #8]
            p += 1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3301      	adds	r3, #1
 8004466:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b2f      	cmp	r3, #47	; 0x2f
 800446e:	d903      	bls.n	8004478 <_atof+0x15c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b39      	cmp	r3, #57	; 0x39
 8004476:	d9e9      	bls.n	800444c <_atof+0x130>
        }
        if (expon > 308)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800447e:	d90e      	bls.n	800449e <_atof+0x182>
            expon = 308;
 8004480:	f44f 739a 	mov.w	r3, #308	; 0x134
 8004484:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 8004486:	e00a      	b.n	800449e <_atof+0x182>
            scale *= 1E8f;
 8004488:	edd7 7a04 	vldr	s15, [r7, #16]
 800448c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004500 <_atof+0x1e4>
 8004490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004494:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3b08      	subs	r3, #8
 800449c:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d8f1      	bhi.n	8004488 <_atof+0x16c>
        }
        while (expon >   0) {
 80044a4:	e00a      	b.n	80044bc <_atof+0x1a0>
            scale *= 10.0f;
 80044a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b2:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f1      	bne.n	80044a6 <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <_atof+0x1ba>
 80044c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80044cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80044d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d4:	e005      	b.n	80044e2 <_atof+0x1c6>
 80044d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80044da:	edd7 7a04 	vldr	s15, [r7, #16]
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80044e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80044ea:	eeb0 0a67 	vmov.f32	s0, s15
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	bf800000 	.word	0xbf800000
 80044fc:	41200000 	.word	0x41200000
 8004500:	4cbebc20 	.word	0x4cbebc20

08004504 <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	ed87 0a01 	vstr	s0, [r7, #4]
 800450e:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 800451e:	4b54      	ldr	r3, [pc, #336]	; (8004670 <ftoa+0x16c>)
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 8004522:	edd7 7a01 	vldr	s15, [r7, #4]
 8004526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	dd08      	ble.n	8004542 <ftoa+0x3e>
        x += 0.0005f;
 8004530:	edd7 7a01 	vldr	s15, [r7, #4]
 8004534:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004674 <ftoa+0x170>
 8004538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800453c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004540:	e007      	b.n	8004552 <ftoa+0x4e>
    else
        x -= 0.0005f;
 8004542:	edd7 7a01 	vldr	s15, [r7, #4]
 8004546:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004674 <ftoa+0x170>
 800454a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800454e:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 8004552:	edd7 7a01 	vldr	s15, [r7, #4]
 8004556:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004678 <ftoa+0x174>
 800455a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800455e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004562:	ee17 3a90 	vmov	r3, s15
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfb8      	it	lt
 800456e:	425b      	neglt	r3, r3
 8004570:	f107 0118 	add.w	r1, r7, #24
 8004574:	220a      	movs	r2, #10
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fea2 	bl	80042c0 <itoa>

    if (value >= 0)
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	db02      	blt.n	8004588 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 8004582:	2320      	movs	r3, #32
 8004584:	733b      	strb	r3, [r7, #12]
 8004586:	e001      	b.n	800458c <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004588:	232d      	movs	r3, #45	; 0x2d
 800458a:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 800458c:	f107 0318 	add.w	r3, r7, #24
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb fe21 	bl	80001d8 <strlen>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10e      	bne.n	80045ba <ftoa+0xb6>
        intString2[1] = '0';
 800459c:	2330      	movs	r3, #48	; 0x30
 800459e:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 80045a0:	2330      	movs	r3, #48	; 0x30
 80045a2:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 80045a4:	2330      	movs	r3, #48	; 0x30
 80045a6:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 80045a8:	f107 0218 	add.w	r2, r7, #24
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f01e fabe 	bl	8022b34 <strcat>
 80045b8:	e02f      	b.n	800461a <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 80045ba:	f107 0318 	add.w	r3, r7, #24
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fb fe0a 	bl	80001d8 <strlen>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d10c      	bne.n	80045e4 <ftoa+0xe0>
        intString2[1] = '0';
 80045ca:	2330      	movs	r3, #48	; 0x30
 80045cc:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 80045ce:	2330      	movs	r3, #48	; 0x30
 80045d0:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 80045d2:	f107 0218 	add.w	r2, r7, #24
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f01e faa9 	bl	8022b34 <strcat>
 80045e2:	e01a      	b.n	800461a <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 80045e4:	f107 0318 	add.w	r3, r7, #24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fb fdf5 	bl	80001d8 <strlen>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d10a      	bne.n	800460a <ftoa+0x106>
        intString2[1] = '0';
 80045f4:	2330      	movs	r3, #48	; 0x30
 80045f6:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 80045f8:	f107 0218 	add.w	r2, r7, #24
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f01e fa96 	bl	8022b34 <strcat>
 8004608:	e007      	b.n	800461a <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 800460a:	f107 0218 	add.w	r2, r7, #24
 800460e:	f107 030c 	add.w	r3, r7, #12
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f01e fa8d 	bl	8022b34 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb fdda 	bl	80001d8 <strlen>
 8004624:	4603      	mov	r3, r0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3b03      	subs	r3, #3
 800462a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 800462e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	4619      	mov	r1, r3
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f01e fac1 	bl	8022bc0 <strncpy>
    floatString[dpLocation] = '\0';
 800463e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4413      	add	r3, r2
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 800464a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	f01e fa71 	bl	8022b34 <strcat>
    strcat(floatString, intString2 + dpLocation);
 8004652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004656:	f107 020c 	add.w	r2, r7, #12
 800465a:	4413      	add	r3, r2
 800465c:	4619      	mov	r1, r3
 800465e:	6838      	ldr	r0, [r7, #0]
 8004660:	f01e fa68 	bl	8022b34 <strcat>

    return floatString;
 8004664:	683b      	ldr	r3, [r7, #0]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	; 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	080264e0 	.word	0x080264e0
 8004674:	3a03126f 	.word	0x3a03126f
 8004678:	447a0000 	.word	0x447a0000

0800467c <cliAux>:

static int cliAux(int argc, char *argv[])
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d114      	bne.n	80046ba <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e00d      	b.n	80046b2 <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <cliAux+0x90>)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3312      	adds	r3, #18
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	491a      	ldr	r1, [pc, #104]	; (8004710 <cliAux+0x94>)
 80046a6:	2000      	movs	r0, #0
 80046a8:	f00e ff2a 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b18      	cmp	r3, #24
 80046b6:	ddee      	ble.n	8004696 <cliAux+0x1a>
 80046b8:	e023      	b.n	8004702 <cliAux+0x86>
    } else if (argc > 1) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	dd1d      	ble.n	80046fc <cliAux+0x80>
        i = atoi(argv[0]);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f01e f8b9 	bl	802283c <atoi>
 80046ca:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b18      	cmp	r3, #24
 80046d0:	dc0e      	bgt.n	80046f0 <cliAux+0x74>
            val = atoi(argv[1]);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f01e f8af 	bl	802283c <atoi>
 80046de:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <cliAux+0x90>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3312      	adds	r3, #18
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	e008      	b.n	8004702 <cliAux+0x86>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 80046f0:	2219      	movs	r2, #25
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <cliAux+0x98>)
 80046f4:	2000      	movs	r0, #0
 80046f6:	f00e ff03 	bl	8013500 <pifLog_Printf>
 80046fa:	e002      	b.n	8004702 <cliAux+0x86>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80046fc:	f06f 0302 	mvn.w	r3, #2
 8004700:	e000      	b.n	8004704 <cliAux+0x88>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000e08 	.word	0x20000e08
 8004710:	080264e4 	.word	0x080264e4
 8004714:	080264f0 	.word	0x080264f0

08004718 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	; 0x30
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 0) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 80d8 	bne.w	80048e2 <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 8004732:	4999      	ldr	r1, [pc, #612]	; (8004998 <cliCMix+0x280>)
 8004734:	2000      	movs	r0, #0
 8004736:	f00e fe55 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 800473a:	2300      	movs	r3, #0
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	e069      	b.n	8004814 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8004740:	4a96      	ldr	r2, [pc, #600]	; (800499c <cliCMix+0x284>)
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	3301      	adds	r3, #1
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	edd3 7a00 	vldr	s15, [r3]
 800474e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	d061      	beq.n	800481c <cliCMix+0x104>
                break;
            num_motors++;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	3301      	adds	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	3301      	adds	r3, #1
 8004762:	461a      	mov	r2, r3
 8004764:	498e      	ldr	r1, [pc, #568]	; (80049a0 <cliCMix+0x288>)
 8004766:	2000      	movs	r0, #0
 8004768:	f00e feca 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 800476c:	4a8b      	ldr	r2, [pc, #556]	; (800499c <cliCMix+0x284>)
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	3301      	adds	r3, #1
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4413      	add	r3, r2
 8004776:	edd3 7a00 	vldr	s15, [r3]
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	4618      	mov	r0, r3
 8004780:	eeb0 0a67 	vmov.f32	s0, s15
 8004784:	f7ff febe 	bl	8004504 <ftoa>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	4985      	ldr	r1, [pc, #532]	; (80049a4 <cliCMix+0x28c>)
 800478e:	2000      	movs	r0, #0
 8004790:	f00e feb6 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 8004794:	4a81      	ldr	r2, [pc, #516]	; (800499c <cliCMix+0x284>)
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	3301      	adds	r3, #1
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	4618      	mov	r0, r3
 80047aa:	eeb0 0a67 	vmov.f32	s0, s15
 80047ae:	f7ff fea9 	bl	8004504 <ftoa>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	497b      	ldr	r1, [pc, #492]	; (80049a4 <cliCMix+0x28c>)
 80047b8:	2000      	movs	r0, #0
 80047ba:	f00e fea1 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 80047be:	4a77      	ldr	r2, [pc, #476]	; (800499c <cliCMix+0x284>)
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	4413      	add	r3, r2
 80047c6:	3318      	adds	r3, #24
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4618      	mov	r0, r3
 80047d2:	eeb0 0a67 	vmov.f32	s0, s15
 80047d6:	f7ff fe95 	bl	8004504 <ftoa>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	4971      	ldr	r1, [pc, #452]	; (80049a4 <cliCMix+0x28c>)
 80047e0:	2000      	movs	r0, #0
 80047e2:	f00e fe8d 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 80047e6:	4a6d      	ldr	r2, [pc, #436]	; (800499c <cliCMix+0x284>)
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	331c      	adds	r3, #28
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4618      	mov	r0, r3
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	f7ff fe81 	bl	8004504 <ftoa>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	4968      	ldr	r1, [pc, #416]	; (80049a8 <cliCMix+0x290>)
 8004808:	2000      	movs	r0, #0
 800480a:	f00e fe79 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	3301      	adds	r3, #1
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	2b0b      	cmp	r3, #11
 8004818:	dd92      	ble.n	8004740 <cliCMix+0x28>
 800481a:	e000      	b.n	800481e <cliCMix+0x106>
                break;
 800481c:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004830:	e02a      	b.n	8004888 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 8004832:	ed97 7a02 	vldr	s14, [r7, #8]
 8004836:	4a59      	ldr	r2, [pc, #356]	; (800499c <cliCMix+0x284>)
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	3301      	adds	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	4413      	add	r3, r2
 8004840:	3304      	adds	r3, #4
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484a:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 800484e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004852:	4a52      	ldr	r2, [pc, #328]	; (800499c <cliCMix+0x284>)
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	4413      	add	r3, r2
 800485a:	3318      	adds	r3, #24
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004864:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 8004868:	ed97 7a04 	vldr	s14, [r7, #16]
 800486c:	4a4b      	ldr	r2, [pc, #300]	; (800499c <cliCMix+0x284>)
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	4413      	add	r3, r2
 8004874:	331c      	adds	r3, #28
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800487e:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	3301      	adds	r3, #1
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	429a      	cmp	r2, r3
 800488e:	dbd0      	blt.n	8004832 <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004890:	4946      	ldr	r1, [pc, #280]	; (80049ac <cliCMix+0x294>)
 8004892:	2000      	movs	r0, #0
 8004894:	f00e fda6 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489c:	e019      	b.n	80048d2 <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	3330      	adds	r3, #48	; 0x30
 80048a4:	443b      	add	r3, r7
 80048a6:	3b28      	subs	r3, #40	; 0x28
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	eef0 7ae7 	vabs.f32	s15, s15
 80048b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80049b0 <cliCMix+0x298>
 80048b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048bc:	dd01      	ble.n	80048c2 <cliCMix+0x1aa>
 80048be:	4b3d      	ldr	r3, [pc, #244]	; (80049b4 <cliCMix+0x29c>)
 80048c0:	e000      	b.n	80048c4 <cliCMix+0x1ac>
 80048c2:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <cliCMix+0x2a0>)
 80048c4:	4619      	mov	r1, r3
 80048c6:	2000      	movs	r0, #0
 80048c8:	f00e fd8c 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < 3; i++)
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	3301      	adds	r3, #1
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	dde2      	ble.n	800489e <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 80048d8:	4938      	ldr	r1, [pc, #224]	; (80049bc <cliCMix+0x2a4>)
 80048da:	2000      	movs	r0, #0
 80048dc:	f00e fd82 	bl	80133e4 <pifLog_Print>
 80048e0:	e0eb      	b.n	8004aba <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4936      	ldr	r1, [pc, #216]	; (80049c0 <cliCMix+0x2a8>)
 80048e8:	4618      	mov	r0, r3
 80048ea:	f01e f909 	bl	8022b00 <strcasecmp>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d111      	bne.n	8004918 <cliCMix+0x200>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f8:	e00a      	b.n	8004910 <cliCMix+0x1f8>
            mcfg.customMixer[i].throttle = 0.0f;
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <cliCMix+0x284>)
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	3301      	adds	r3, #1
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4413      	add	r3, r2
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	3301      	adds	r3, #1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	2b0b      	cmp	r3, #11
 8004914:	ddf1      	ble.n	80048fa <cliCMix+0x1e2>
 8004916:	e0d0      	b.n	8004aba <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4929      	ldr	r1, [pc, #164]	; (80049c4 <cliCMix+0x2ac>)
 800491e:	4618      	mov	r0, r3
 8004920:	f01e f8ee 	bl	8022b00 <strcasecmp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d154      	bne.n	80049d4 <cliCMix+0x2bc>
        if (argc > 1) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b01      	cmp	r3, #1
 800492e:	dd2f      	ble.n	8004990 <cliCMix+0x278>
            for (i = 0; ; i++) {
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <cliCMix+0x2b0>)
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <cliCMix+0x232>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004940:	4922      	ldr	r1, [pc, #136]	; (80049cc <cliCMix+0x2b4>)
 8004942:	2000      	movs	r0, #0
 8004944:	f00e fd4e 	bl	80133e4 <pifLog_Print>
                    break;
 8004948:	e0b7      	b.n	8004aba <cliCMix+0x3a2>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3304      	adds	r3, #4
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	491d      	ldr	r1, [pc, #116]	; (80049c8 <cliCMix+0x2b0>)
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f01e f8d0 	bl	8022b00 <strcasecmp>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d110      	bne.n	8004988 <cliCMix+0x270>
                    mixerLoadMix(i);
 8004966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004968:	f006 fcc0 	bl	800b2ec <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 800496c:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <cliCMix+0x2b0>)
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004974:	461a      	mov	r2, r3
 8004976:	4916      	ldr	r1, [pc, #88]	; (80049d0 <cliCMix+0x2b8>)
 8004978:	2000      	movs	r0, #0
 800497a:	f00e fdc1 	bl	8013500 <pifLog_Printf>
                    cliCMix(1, NULL);
 800497e:	2100      	movs	r1, #0
 8004980:	2001      	movs	r0, #1
 8004982:	f7ff fec9 	bl	8004718 <cliCMix>
                    break;
 8004986:	e098      	b.n	8004aba <cliCMix+0x3a2>
            for (i = 0; ; i++) {
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	3301      	adds	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 800498e:	e7d1      	b.n	8004934 <cliCMix+0x21c>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004990:	f06f 0302 	mvn.w	r3, #2
 8004994:	e092      	b.n	8004abc <cliCMix+0x3a4>
 8004996:	bf00      	nop
 8004998:	08026518 	.word	0x08026518
 800499c:	2000089c 	.word	0x2000089c
 80049a0:	08026544 	.word	0x08026544
 80049a4:	0802654c 	.word	0x0802654c
 80049a8:	08026550 	.word	0x08026550
 80049ac:	08026558 	.word	0x08026558
 80049b0:	3c23d70a 	.word	0x3c23d70a
 80049b4:	08026568 	.word	0x08026568
 80049b8:	0802656c 	.word	0x0802656c
 80049bc:	08026570 	.word	0x08026570
 80049c0:	08026574 	.word	0x08026574
 80049c4:	0802657c 	.word	0x0802657c
 80049c8:	08027820 	.word	0x08027820
 80049cc:	08026584 	.word	0x08026584
 80049d0:	0802659c 	.word	0x0802659c
        }
    } else {
        i = atoi(argv[0]); // get motor number
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f01d ff2f 	bl	802283c <atoi>
 80049de:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	3b01      	subs	r3, #1
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	2b0b      	cmp	r3, #11
 80049ea:	dc61      	bgt.n	8004ab0 <cliCMix+0x398>
            if (argc > 1) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	dd11      	ble.n	8004a16 <cliCMix+0x2fe>
                mcfg.customMixer[i].throttle = _atof(argv[1]);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fc8f 	bl	800431c <_atof>
 80049fe:	eef0 7a40 	vmov.f32	s15, s0
 8004a02:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <cliCMix+0x3ac>)
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	3301      	adds	r3, #1
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	4413      	add	r3, r2
 8004a0c:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	3301      	adds	r3, #1
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 2) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	dd12      	ble.n	8004a42 <cliCMix+0x32a>
                mcfg.customMixer[i].roll = _atof(argv[2]);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fc7a 	bl	800431c <_atof>
 8004a28:	eef0 7a40 	vmov.f32	s15, s0
 8004a2c:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <cliCMix+0x3ac>)
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	3301      	adds	r3, #1
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	3301      	adds	r3, #1
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	dd11      	ble.n	8004a6c <cliCMix+0x354>
                mcfg.customMixer[i].pitch = _atof(argv[3]);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fc64 	bl	800431c <_atof>
 8004a54:	eef0 7a40 	vmov.f32	s15, s0
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <cliCMix+0x3ac>)
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	4413      	add	r3, r2
 8004a60:	3318      	adds	r3, #24
 8004a62:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	3301      	adds	r3, #1
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	dd11      	ble.n	8004a96 <cliCMix+0x37e>
                mcfg.customMixer[i].yaw = _atof(argv[4]);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	3310      	adds	r3, #16
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fc4f 	bl	800431c <_atof>
 8004a7e:	eef0 7a40 	vmov.f32	s15, s0
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <cliCMix+0x3ac>)
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	4413      	add	r3, r2
 8004a8a:	331c      	adds	r3, #28
 8004a8c:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	3301      	adds	r3, #1
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d004      	beq.n	8004aa6 <cliCMix+0x38e>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004a9c:	490a      	ldr	r1, [pc, #40]	; (8004ac8 <cliCMix+0x3b0>)
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f00e fca0 	bl	80133e4 <pifLog_Print>
 8004aa4:	e009      	b.n	8004aba <cliCMix+0x3a2>
            } else {
                cliCMix(1, NULL);
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7ff fe35 	bl	8004718 <cliCMix>
 8004aae:	e004      	b.n	8004aba <cliCMix+0x3a2>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004ab0:	220c      	movs	r2, #12
 8004ab2:	4906      	ldr	r1, [pc, #24]	; (8004acc <cliCMix+0x3b4>)
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f00e fd23 	bl	8013500 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3730      	adds	r7, #48	; 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000089c 	.word	0x2000089c
 8004ac8:	080265b0 	.word	0x080265b0
 8004acc:	080265ec 	.word	0x080265ec

08004ad0 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004ada:	4aa0      	ldr	r2, [pc, #640]	; (8004d5c <cliServo+0x28c>)
 8004adc:	f107 0320 	add.w	r3, r7, #32
 8004ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae4:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 0) {
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d15c      	bne.n	8004ba8 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 8004aee:	499c      	ldr	r1, [pc, #624]	; (8004d60 <cliServo+0x290>)
 8004af0:	2000      	movs	r0, #0
 8004af2:	f00e fc77 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004af6:	2300      	movs	r3, #0
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afa:	e049      	b.n	8004b90 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	3301      	adds	r3, #1
 8004b00:	461a      	mov	r2, r3
 8004b02:	4998      	ldr	r1, [pc, #608]	; (8004d64 <cliServo+0x294>)
 8004b04:	2000      	movs	r0, #0
 8004b06:	f00e fcfb 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004b0a:	4997      	ldr	r1, [pc, #604]	; (8004d68 <cliServo+0x298>)
 8004b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	440b      	add	r3, r1
 8004b18:	33b8      	adds	r3, #184	; 0xb8
 8004b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4992      	ldr	r1, [pc, #584]	; (8004d6c <cliServo+0x29c>)
 8004b22:	2000      	movs	r0, #0
 8004b24:	f00e fcec 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004b28:	498f      	ldr	r1, [pc, #572]	; (8004d68 <cliServo+0x298>)
 8004b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	440b      	add	r3, r1
 8004b36:	33bc      	adds	r3, #188	; 0xbc
 8004b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	498b      	ldr	r1, [pc, #556]	; (8004d6c <cliServo+0x29c>)
 8004b40:	2000      	movs	r0, #0
 8004b42:	f00e fcdd 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004b46:	4988      	ldr	r1, [pc, #544]	; (8004d68 <cliServo+0x298>)
 8004b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	440b      	add	r3, r1
 8004b54:	33ba      	adds	r3, #186	; 0xba
 8004b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4983      	ldr	r1, [pc, #524]	; (8004d6c <cliServo+0x29c>)
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f00e fcce 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004b64:	4980      	ldr	r1, [pc, #512]	; (8004d68 <cliServo+0x298>)
 8004b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	440b      	add	r3, r1
 8004b72:	33be      	adds	r3, #190	; 0xbe
 8004b74:	f993 3000 	ldrsb.w	r3, [r3]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	497c      	ldr	r1, [pc, #496]	; (8004d6c <cliServo+0x29c>)
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f00e fcbf 	bl	8013500 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004b82:	497b      	ldr	r1, [pc, #492]	; (8004d70 <cliServo+0x2a0>)
 8004b84:	2000      	movs	r0, #0
 8004b86:	f00e fc2d 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	ddb2      	ble.n	8004afc <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004b96:	4976      	ldr	r1, [pc, #472]	; (8004d70 <cliServo+0x2a0>)
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f00e fc23 	bl	80133e4 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004b9e:	4975      	ldr	r1, [pc, #468]	; (8004d74 <cliServo+0x2a4>)
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f00e fc1f 	bl	80133e4 <pifLog_Print>
 8004ba6:	e0d4      	b.n	8004d52 <cliServo+0x282>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4972      	ldr	r1, [pc, #456]	; (8004d78 <cliServo+0x2a8>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f01d ffa6 	bl	8022b00 <strcasecmp>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d13a      	bne.n	8004c30 <cliServo+0x160>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbe:	e033      	b.n	8004c28 <cliServo+0x158>
            cfg.servoConf[i].min = 1020;
 8004bc0:	4969      	ldr	r1, [pc, #420]	; (8004d68 <cliServo+0x298>)
 8004bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	440b      	add	r3, r1
 8004bce:	33b8      	adds	r3, #184	; 0xb8
 8004bd0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004bd4:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004bd6:	4964      	ldr	r1, [pc, #400]	; (8004d68 <cliServo+0x298>)
 8004bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	440b      	add	r3, r1
 8004be4:	33ba      	adds	r3, #186	; 0xba
 8004be6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bea:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004bec:	495e      	ldr	r1, [pc, #376]	; (8004d68 <cliServo+0x298>)
 8004bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	440b      	add	r3, r1
 8004bfa:	33bc      	adds	r3, #188	; 0xbc
 8004bfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c00:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004c02:	f107 0220 	add.w	r2, r7, #32
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	4413      	add	r3, r2
 8004c0a:	f993 0000 	ldrsb.w	r0, [r3]
 8004c0e:	4956      	ldr	r1, [pc, #344]	; (8004d68 <cliServo+0x298>)
 8004c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	440b      	add	r3, r1
 8004c1c:	33be      	adds	r3, #190	; 0xbe
 8004c1e:	4602      	mov	r2, r0
 8004c20:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	3301      	adds	r3, #1
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b07      	cmp	r3, #7
 8004c2c:	ddc8      	ble.n	8004bc0 <cliServo+0xf0>
 8004c2e:	e090      	b.n	8004d52 <cliServo+0x282>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check < argc && check < ARGS_COUNT) {
 8004c34:	e011      	b.n	8004c5a <cliServo+0x18a>
            args[check] = atoi(argv[check]);
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f01d fdfb 	bl	802283c <atoi>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3330      	adds	r3, #48	; 0x30
 8004c4e:	443b      	add	r3, r7
 8004c50:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	3301      	adds	r3, #1
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check < argc && check < ARGS_COUNT) {
 8004c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	da02      	bge.n	8004c68 <cliServo+0x198>
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	dde6      	ble.n	8004c36 <cliServo+0x166>
        }

        if (check != ARGS_COUNT) {
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d005      	beq.n	8004c7a <cliServo+0x1aa>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004c6e:	4943      	ldr	r1, [pc, #268]	; (8004d7c <cliServo+0x2ac>)
 8004c70:	2000      	movs	r0, #0
 8004c72:	f00e fbb7 	bl	80133e4 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e06c      	b.n	8004d54 <cliServo+0x284>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd60      	ble.n	8004d42 <cliServo+0x272>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	dc5d      	bgt.n	8004d42 <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c86:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c88:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c8c:	db59      	blt.n	8004d42 <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f640 0234 	movw	r2, #2100	; 0x834
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dc54      	bgt.n	8004d42 <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c98:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c9e:	db50      	blt.n	8004d42 <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f640 0234 	movw	r2, #2100	; 0x834
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	dc4b      	bgt.n	8004d42 <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004caa:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004cac:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004cb0:	db47      	blt.n	8004d42 <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f640 0234 	movw	r2, #2100	; 0x834
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	dc42      	bgt.n	8004d42 <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004cbc:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004cbe:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004cc2:	db3e      	blt.n	8004d42 <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	dc3b      	bgt.n	8004d42 <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	dc37      	bgt.n	8004d42 <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	dc33      	bgt.n	8004d42 <cliServo+0x272>
            args[SERVO]--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	b218      	sxth	r0, r3
 8004ce6:	4920      	ldr	r1, [pc, #128]	; (8004d68 <cliServo+0x298>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	440b      	add	r3, r1
 8004cf2:	33b8      	adds	r3, #184	; 0xb8
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	b218      	sxth	r0, r3
 8004cfe:	491a      	ldr	r1, [pc, #104]	; (8004d68 <cliServo+0x298>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	440b      	add	r3, r1
 8004d0a:	33ba      	adds	r3, #186	; 0xba
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	b218      	sxth	r0, r3
 8004d16:	4914      	ldr	r1, [pc, #80]	; (8004d68 <cliServo+0x298>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	440b      	add	r3, r1
 8004d22:	33bc      	adds	r3, #188	; 0xbc
 8004d24:	4602      	mov	r2, r0
 8004d26:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	b258      	sxtb	r0, r3
 8004d2e:	490e      	ldr	r1, [pc, #56]	; (8004d68 <cliServo+0x298>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	440b      	add	r3, r1
 8004d3a:	33be      	adds	r3, #190	; 0xbe
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e003      	b.n	8004d4a <cliServo+0x27a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004d42:	490f      	ldr	r1, [pc, #60]	; (8004d80 <cliServo+0x2b0>)
 8004d44:	2000      	movs	r0, #0
 8004d46:	f00e fb4d 	bl	80133e4 <pifLog_Print>
        cliServo(1, NULL);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7ff febf 	bl	8004ad0 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	; 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	08026728 	.word	0x08026728
 8004d60:	08026614 	.word	0x08026614
 8004d64:	08026544 	.word	0x08026544
 8004d68:	20000e08 	.word	0x20000e08
 8004d6c:	08026640 	.word	0x08026640
 8004d70:	08026570 	.word	0x08026570
 8004d74:	08026644 	.word	0x08026644
 8004d78:	08026574 	.word	0x08026574
 8004d7c:	08026660 	.word	0x08026660
 8004d80:	080266ac 	.word	0x080266ac

08004d84 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b090      	sub	sp, #64	; 0x40
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 0) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 808a 	bne.w	8004eae <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004d9a:	49aa      	ldr	r1, [pc, #680]	; (8005044 <cliServoMix+0x2c0>)
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f00e fb21 	bl	80133e4 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004da2:	49a9      	ldr	r1, [pc, #676]	; (8005048 <cliServoMix+0x2c4>)
 8004da4:	2000      	movs	r0, #0
 8004da6:	f00e fb1d 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dae:	e074      	b.n	8004e9a <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004db0:	49a6      	ldr	r1, [pc, #664]	; (800504c <cliServoMix+0x2c8>)
 8004db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	33d2      	adds	r3, #210	; 0xd2
 8004dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d06d      	beq.n	8004ea2 <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	3301      	adds	r3, #1
 8004dca:	461a      	mov	r2, r3
 8004dcc:	49a0      	ldr	r1, [pc, #640]	; (8005050 <cliServoMix+0x2cc>)
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f00e fb96 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004dd4:	499d      	ldr	r1, [pc, #628]	; (800504c <cliServoMix+0x2c8>)
 8004dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	33d0      	adds	r3, #208	; 0xd0
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	461a      	mov	r2, r3
 8004de8:	499a      	ldr	r1, [pc, #616]	; (8005054 <cliServoMix+0x2d0>)
 8004dea:	2000      	movs	r0, #0
 8004dec:	f00e fb88 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004df0:	4996      	ldr	r1, [pc, #600]	; (800504c <cliServoMix+0x2c8>)
 8004df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	33d1      	adds	r3, #209	; 0xd1
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	461a      	mov	r2, r3
 8004e04:	4993      	ldr	r1, [pc, #588]	; (8005054 <cliServoMix+0x2d0>)
 8004e06:	2000      	movs	r0, #0
 8004e08:	f00e fb7a 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004e0c:	498f      	ldr	r1, [pc, #572]	; (800504c <cliServoMix+0x2c8>)
 8004e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	440b      	add	r3, r1
 8004e18:	33d2      	adds	r3, #210	; 0xd2
 8004e1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	498c      	ldr	r1, [pc, #560]	; (8005054 <cliServoMix+0x2d0>)
 8004e22:	2000      	movs	r0, #0
 8004e24:	f00e fb6c 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004e28:	4988      	ldr	r1, [pc, #544]	; (800504c <cliServoMix+0x2c8>)
 8004e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	440b      	add	r3, r1
 8004e34:	33d3      	adds	r3, #211	; 0xd3
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4986      	ldr	r1, [pc, #536]	; (8005054 <cliServoMix+0x2d0>)
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f00e fb5f 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004e42:	4982      	ldr	r1, [pc, #520]	; (800504c <cliServoMix+0x2c8>)
 8004e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	33d4      	adds	r3, #212	; 0xd4
 8004e50:	f993 3000 	ldrsb.w	r3, [r3]
 8004e54:	461a      	mov	r2, r3
 8004e56:	497f      	ldr	r1, [pc, #508]	; (8005054 <cliServoMix+0x2d0>)
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f00e fb51 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004e5e:	497b      	ldr	r1, [pc, #492]	; (800504c <cliServoMix+0x2c8>)
 8004e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	440b      	add	r3, r1
 8004e6a:	33d5      	adds	r3, #213	; 0xd5
 8004e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004e70:	461a      	mov	r2, r3
 8004e72:	4978      	ldr	r1, [pc, #480]	; (8005054 <cliServoMix+0x2d0>)
 8004e74:	2000      	movs	r0, #0
 8004e76:	f00e fb43 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004e7a:	4974      	ldr	r1, [pc, #464]	; (800504c <cliServoMix+0x2c8>)
 8004e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	440b      	add	r3, r1
 8004e86:	33d6      	adds	r3, #214	; 0xd6
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4972      	ldr	r1, [pc, #456]	; (8005058 <cliServoMix+0x2d4>)
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f00e fb36 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	3301      	adds	r3, #1
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	dd87      	ble.n	8004db0 <cliServoMix+0x2c>
 8004ea0:	e000      	b.n	8004ea4 <cliServoMix+0x120>
                break;
 8004ea2:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004ea4:	496d      	ldr	r1, [pc, #436]	; (800505c <cliServoMix+0x2d8>)
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f00e fa9c 	bl	80133e4 <pifLog_Print>
 8004eac:	e235      	b.n	800531a <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	496b      	ldr	r1, [pc, #428]	; (8005060 <cliServoMix+0x2dc>)
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f01d fe23 	bl	8022b00 <strcasecmp>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d118      	bne.n	8004ef2 <cliServoMix+0x16e>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004ec0:	2270      	movs	r2, #112	; 0x70
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4867      	ldr	r0, [pc, #412]	; (8005064 <cliServoMix+0x2e0>)
 8004ec6:	f01d fd0d 	bl	80228e4 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ece:	e00c      	b.n	8004eea <cliServoMix+0x166>
            cfg.servoConf[i].direction = 0;
 8004ed0:	4965      	ldr	r1, [pc, #404]	; (8005068 <cliServoMix+0x2e4>)
 8004ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	440b      	add	r3, r1
 8004ede:	33c0      	adds	r3, #192	; 0xc0
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	2b07      	cmp	r3, #7
 8004eee:	ddef      	ble.n	8004ed0 <cliServoMix+0x14c>
 8004ef0:	e213      	b.n	800531a <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	495d      	ldr	r1, [pc, #372]	; (800506c <cliServoMix+0x2e8>)
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f01d fe01 	bl	8022b00 <strcasecmp>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d135      	bne.n	8004f70 <cliServoMix+0x1ec>
        if (argc > 1) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	dd2f      	ble.n	8004f6a <cliServoMix+0x1e6>
            for (i = 0; ; i++) {
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004f0e:	4a58      	ldr	r2, [pc, #352]	; (8005070 <cliServoMix+0x2ec>)
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <cliServoMix+0x1a0>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004f1a:	4956      	ldr	r1, [pc, #344]	; (8005074 <cliServoMix+0x2f0>)
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f00e fa61 	bl	80133e4 <pifLog_Print>
                    break;
 8004f22:	e1fa      	b.n	800531a <cliServoMix+0x596>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3304      	adds	r3, #4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4951      	ldr	r1, [pc, #324]	; (8005070 <cliServoMix+0x2ec>)
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f01d fde3 	bl	8022b00 <strcasecmp>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d110      	bne.n	8004f62 <cliServoMix+0x1de>
                    servoMixerLoadMix(i);
 8004f40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f42:	f006 f95b 	bl	800b1fc <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004f46:	4a4a      	ldr	r2, [pc, #296]	; (8005070 <cliServoMix+0x2ec>)
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4949      	ldr	r1, [pc, #292]	; (8005078 <cliServoMix+0x2f4>)
 8004f52:	2000      	movs	r0, #0
 8004f54:	f00e fad4 	bl	8013500 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f7ff ff12 	bl	8004d84 <cliServoMix>
                    break;
 8004f60:	e1db      	b.n	800531a <cliServoMix+0x596>
            for (i = 0; ; i++) {
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	3301      	adds	r3, #1
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004f68:	e7d1      	b.n	8004f0e <cliServoMix+0x18a>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004f6a:	f06f 0302 	mvn.w	r3, #2
 8004f6e:	e1d5      	b.n	800531c <cliServoMix+0x598>
        }
    } else if (strcasecmp(argv[0], "direction") == 0) {
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4941      	ldr	r1, [pc, #260]	; (800507c <cliServoMix+0x2f8>)
 8004f76:	4618      	mov	r0, r3
 8004f78:	f01d fdc2 	bl	8022b00 <strcasecmp>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 8126 	bne.w	80051d0 <cliServoMix+0x44c>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004f84:	4a3e      	ldr	r2, [pc, #248]	; (8005080 <cliServoMix+0x2fc>)
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f8e:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 1) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 8095 	bne.w	80050c4 <cliServoMix+0x340>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004f9a:	493a      	ldr	r1, [pc, #232]	; (8005084 <cliServoMix+0x300>)
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f00e fa21 	bl	80133e4 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004fa2:	4939      	ldr	r1, [pc, #228]	; (8005088 <cliServoMix+0x304>)
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f00e fa1d 	bl	80133e4 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	e009      	b.n	8004fc4 <cliServoMix+0x240>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4935      	ldr	r1, [pc, #212]	; (800508c <cliServoMix+0x308>)
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f00e faa1 	bl	8013500 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2b0b      	cmp	r3, #11
 8004fc8:	ddf2      	ble.n	8004fb0 <cliServoMix+0x22c>
            pifLog_Print(LT_NONE, "\r\n");
 8004fca:	4924      	ldr	r1, [pc, #144]	; (800505c <cliServoMix+0x2d8>)
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f00e fa09 	bl	80133e4 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	e02f      	b.n	8005038 <cliServoMix+0x2b4>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fda:	3301      	adds	r3, #1
 8004fdc:	461a      	mov	r2, r3
 8004fde:	492c      	ldr	r1, [pc, #176]	; (8005090 <cliServoMix+0x30c>)
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f00e fa8d 	bl	8013500 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fea:	e01b      	b.n	8005024 <cliServoMix+0x2a0>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004fec:	491e      	ldr	r1, [pc, #120]	; (8005068 <cliServoMix+0x2e4>)
 8004fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	440b      	add	r3, r1
 8004ffa:	33c0      	adds	r3, #192	; 0xc0
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	fa42 f303 	asr.w	r3, r2, r3
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <cliServoMix+0x28e>
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <cliServoMix+0x310>)
 8005010:	e000      	b.n	8005014 <cliServoMix+0x290>
 8005012:	4b21      	ldr	r3, [pc, #132]	; (8005098 <cliServoMix+0x314>)
 8005014:	461a      	mov	r2, r3
 8005016:	4921      	ldr	r1, [pc, #132]	; (800509c <cliServoMix+0x318>)
 8005018:	2000      	movs	r0, #0
 800501a:	f00e fa71 	bl	8013500 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	3301      	adds	r3, #1
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2b0b      	cmp	r3, #11
 8005028:	dde0      	ble.n	8004fec <cliServoMix+0x268>
                pifLog_Print(LT_NONE, "\r\n");
 800502a:	490c      	ldr	r1, [pc, #48]	; (800505c <cliServoMix+0x2d8>)
 800502c:	2000      	movs	r0, #0
 800502e:	f00e f9d9 	bl	80133e4 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	3301      	adds	r3, #1
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	2b07      	cmp	r3, #7
 800503c:	ddcc      	ble.n	8004fd8 <cliServoMix+0x254>
            }
            return PIF_LOG_CMD_NO_ERROR;
 800503e:	2300      	movs	r3, #0
 8005040:	e16c      	b.n	800531c <cliServoMix+0x598>
 8005042:	bf00      	nop
 8005044:	08026730 	.word	0x08026730
 8005048:	08026798 	.word	0x08026798
 800504c:	2000089c 	.word	0x2000089c
 8005050:	08026544 	.word	0x08026544
 8005054:	08026640 	.word	0x08026640
 8005058:	080267f8 	.word	0x080267f8
 800505c:	08026570 	.word	0x08026570
 8005060:	08026574 	.word	0x08026574
 8005064:	2000096c 	.word	0x2000096c
 8005068:	20000e08 	.word	0x20000e08
 800506c:	0802657c 	.word	0x0802657c
 8005070:	08027820 	.word	0x08027820
 8005074:	08026584 	.word	0x08026584
 8005078:	0802659c 	.word	0x0802659c
 800507c:	080257cc 	.word	0x080257cc
 8005080:	08026934 	.word	0x08026934
 8005084:	08026800 	.word	0x08026800
 8005088:	08026850 	.word	0x08026850
 800508c:	08026854 	.word	0x08026854
 8005090:	0802685c 	.word	0x0802685c
 8005094:	08026860 	.word	0x08026860
 8005098:	08026864 	.word	0x08026864
 800509c:	08026868 	.word	0x08026868
        }

        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	4413      	add	r3, r2
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f01d fbc6 	bl	802283c <atoi>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	3340      	adds	r3, #64	; 0x40
 80050b8:	443b      	add	r3, r7
 80050ba:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	3301      	adds	r3, #1
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 80050c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	da02      	bge.n	80050d2 <cliServoMix+0x34e>
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	dde6      	ble.n	80050a0 <cliServoMix+0x31c>
        }

        if (check != ARGS_COUNT) {
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d005      	beq.n	80050e4 <cliServoMix+0x360>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 80050d8:	4992      	ldr	r1, [pc, #584]	; (8005324 <cliServoMix+0x5a0>)
 80050da:	2000      	movs	r0, #0
 80050dc:	f00e f982 	bl	80133e4 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e11b      	b.n	800531c <cliServoMix+0x598>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dd55      	ble.n	8005196 <cliServoMix+0x412>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	dc52      	bgt.n	8005196 <cliServoMix+0x412>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dd4f      	ble.n	8005196 <cliServoMix+0x412>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	dc4c      	bgt.n	8005196 <cliServoMix+0x412>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d002      	beq.n	800510a <cliServoMix+0x386>
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d145      	bne.n	8005196 <cliServoMix+0x412>
            args[SERVO] -= 1;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3b01      	subs	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3b01      	subs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d11c      	bne.n	8005158 <cliServoMix+0x3d4>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4981      	ldr	r1, [pc, #516]	; (8005328 <cliServoMix+0x5a4>)
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	440b      	add	r3, r1
 800512c:	33c0      	adds	r3, #192	; 0xc0
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b21a      	sxth	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	b21b      	sxth	r3, r3
 800513c:	4313      	orrs	r3, r2
 800513e:	b21b      	sxth	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	b298      	uxth	r0, r3
 8005144:	4978      	ldr	r1, [pc, #480]	; (8005328 <cliServoMix+0x5a4>)
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	440b      	add	r3, r1
 8005150:	33c0      	adds	r3, #192	; 0xc0
 8005152:	4602      	mov	r2, r0
 8005154:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005156:	e022      	b.n	800519e <cliServoMix+0x41a>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4973      	ldr	r1, [pc, #460]	; (8005328 <cliServoMix+0x5a4>)
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	440b      	add	r3, r1
 8005166:	33c0      	adds	r3, #192	; 0xc0
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b21a      	sxth	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2101      	movs	r1, #1
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	b21b      	sxth	r3, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	b21b      	sxth	r3, r3
 800517a:	4013      	ands	r3, r2
 800517c:	b21b      	sxth	r3, r3
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	b298      	uxth	r0, r3
 8005182:	4969      	ldr	r1, [pc, #420]	; (8005328 <cliServoMix+0x5a4>)
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	440b      	add	r3, r1
 800518e:	33c0      	adds	r3, #192	; 0xc0
 8005190:	4602      	mov	r2, r0
 8005192:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005194:	e003      	b.n	800519e <cliServoMix+0x41a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8005196:	4965      	ldr	r1, [pc, #404]	; (800532c <cliServoMix+0x5a8>)
 8005198:	2000      	movs	r0, #0
 800519a:	f00e f923 	bl	80133e4 <pifLog_Print>

        cliServoMix(2, smix_dir);
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4619      	mov	r1, r3
 80051a4:	2002      	movs	r0, #2
 80051a6:	f7ff fded 	bl	8004d84 <cliServoMix>
 80051aa:	e0b6      	b.n	800531a <cliServoMix+0x596>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f01d fb40 	bl	802283c <atoi>
 80051bc:	4602      	mov	r2, r0
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3340      	adds	r3, #64	; 0x40
 80051c4:	443b      	add	r3, r7
 80051c6:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	3301      	adds	r3, #1
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 80051d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	da02      	bge.n	80051de <cliServoMix+0x45a>
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	2b07      	cmp	r3, #7
 80051dc:	dde6      	ble.n	80051ac <cliServoMix+0x428>
        }

        if (check != ARGS_COUNT) {
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d005      	beq.n	80051f0 <cliServoMix+0x46c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 80051e4:	4952      	ldr	r1, [pc, #328]	; (8005330 <cliServoMix+0x5ac>)
 80051e6:	2000      	movs	r0, #0
 80051e8:	f00e f8fc 	bl	80133e4 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e095      	b.n	800531c <cliServoMix+0x598>
        }

        i = args[RULE] - 1;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f2c0 808a 	blt.w	8005312 <cliServoMix+0x58e>
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	2b0f      	cmp	r3, #15
 8005202:	f300 8086 	bgt.w	8005312 <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005206:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8005208:	2b00      	cmp	r3, #0
 800520a:	f340 8082 	ble.w	8005312 <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b08      	cmp	r3, #8
 8005212:	dc7e      	bgt.n	8005312 <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8005214:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005216:	2b00      	cmp	r3, #0
 8005218:	dd7b      	ble.n	8005312 <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	dc78      	bgt.n	8005312 <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005220:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8005222:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8005226:	db74      	blt.n	8005312 <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	dc71      	bgt.n	8005312 <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 800522e:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005230:	2b00      	cmp	r3, #0
 8005232:	db6e      	blt.n	8005312 <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2bff      	cmp	r3, #255	; 0xff
 8005238:	dc6b      	bgt.n	8005312 <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 800523c:	2b00      	cmp	r3, #0
 800523e:	db68      	blt.n	8005312 <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	dc65      	bgt.n	8005312 <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005248:	2b00      	cmp	r3, #0
 800524a:	db62      	blt.n	8005312 <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b64      	cmp	r3, #100	; 0x64
 8005250:	dc5f      	bgt.n	8005312 <cliServoMix+0x58e>
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	429a      	cmp	r2, r3
 8005258:	da5b      	bge.n	8005312 <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 800525c:	2b00      	cmp	r3, #0
 800525e:	db58      	blt.n	8005312 <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	2b03      	cmp	r3, #3
 8005264:	dc55      	bgt.n	8005312 <cliServoMix+0x58e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b2d8      	uxtb	r0, r3
 800526e:	4931      	ldr	r1, [pc, #196]	; (8005334 <cliServoMix+0x5b0>)
 8005270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	440b      	add	r3, r1
 800527a:	33d0      	adds	r3, #208	; 0xd0
 800527c:	4602      	mov	r2, r0
 800527e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b2d8      	uxtb	r0, r3
 8005288:	492a      	ldr	r1, [pc, #168]	; (8005334 <cliServoMix+0x5b0>)
 800528a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	440b      	add	r3, r1
 8005294:	33d1      	adds	r3, #209	; 0xd1
 8005296:	4602      	mov	r2, r0
 8005298:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	b258      	sxtb	r0, r3
 800529e:	4925      	ldr	r1, [pc, #148]	; (8005334 <cliServoMix+0x5b0>)
 80052a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	33d2      	adds	r3, #210	; 0xd2
 80052ac:	4602      	mov	r2, r0
 80052ae:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	b2d8      	uxtb	r0, r3
 80052b4:	491f      	ldr	r1, [pc, #124]	; (8005334 <cliServoMix+0x5b0>)
 80052b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	440b      	add	r3, r1
 80052c0:	33d3      	adds	r3, #211	; 0xd3
 80052c2:	4602      	mov	r2, r0
 80052c4:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	b258      	sxtb	r0, r3
 80052ca:	491a      	ldr	r1, [pc, #104]	; (8005334 <cliServoMix+0x5b0>)
 80052cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	440b      	add	r3, r1
 80052d6:	33d4      	adds	r3, #212	; 0xd4
 80052d8:	4602      	mov	r2, r0
 80052da:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	b258      	sxtb	r0, r3
 80052e0:	4914      	ldr	r1, [pc, #80]	; (8005334 <cliServoMix+0x5b0>)
 80052e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	440b      	add	r3, r1
 80052ec:	33d5      	adds	r3, #213	; 0xd5
 80052ee:	4602      	mov	r2, r0
 80052f0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	b2d8      	uxtb	r0, r3
 80052f6:	490f      	ldr	r1, [pc, #60]	; (8005334 <cliServoMix+0x5b0>)
 80052f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	440b      	add	r3, r1
 8005302:	33d6      	adds	r3, #214	; 0xd6
 8005304:	4602      	mov	r2, r0
 8005306:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 8005308:	2100      	movs	r1, #0
 800530a:	2001      	movs	r0, #1
 800530c:	f7ff fd3a 	bl	8004d84 <cliServoMix>
 8005310:	e003      	b.n	800531a <cliServoMix+0x596>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8005312:	4906      	ldr	r1, [pc, #24]	; (800532c <cliServoMix+0x5a8>)
 8005314:	2000      	movs	r0, #0
 8005316:	f00e f865 	bl	80133e4 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3740      	adds	r7, #64	; 0x40
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	08026870 	.word	0x08026870
 8005328:	20000e08 	.word	0x20000e08
 800532c:	080268ac 	.word	0x080268ac
 8005330:	080268d0 	.word	0x080268d0
 8005334:	2000089c 	.word	0x2000089c

08005338 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 8005342:	490b      	ldr	r1, [pc, #44]	; (8005370 <cliDefaults+0x38>)
 8005344:	2000      	movs	r0, #0
 8005346:	f00e f84d 	bl	80133e4 <pifLog_Print>
    checkFirstTime(true);
 800534a:	2001      	movs	r0, #1
 800534c:	f001 fb04 	bl	8006958 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005350:	4908      	ldr	r1, [pc, #32]	; (8005374 <cliDefaults+0x3c>)
 8005352:	2000      	movs	r0, #0
 8005354:	f00e f846 	bl	80133e4 <pifLog_Print>
    pif_Delay1ms(10);
 8005358:	200a      	movs	r0, #10
 800535a:	f00b ff47 	bl	80111ec <pif_Delay1ms>
    systemReset(false);
 800535e:	2000      	movs	r0, #0
 8005360:	f7fc fe70 	bl	8002044 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	0802693c 	.word	0x0802693c
 8005374:	08026958 	.word	0x08026958

08005378 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b093      	sub	sp, #76	; 0x4c
 800537c:	af04      	add	r7, sp, #16
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 8005382:	2100      	movs	r1, #0
 8005384:	2001      	movs	r0, #1
 8005386:	f001 f85d 	bl	8006444 <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 800538a:	49bc      	ldr	r1, [pc, #752]	; (800567c <cliDump+0x304>)
 800538c:	2000      	movs	r0, #0
 800538e:	f00e f829 	bl	80133e4 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 8005392:	2100      	movs	r1, #0
 8005394:	2001      	movs	r0, #1
 8005396:	f7ff f971 	bl	800467c <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 800539a:	4bb9      	ldr	r3, [pc, #740]	; (8005680 <cliDump+0x308>)
 800539c:	795b      	ldrb	r3, [r3, #5]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4ab8      	ldr	r2, [pc, #736]	; (8005684 <cliDump+0x30c>)
 80053a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a6:	461a      	mov	r2, r3
 80053a8:	49b7      	ldr	r1, [pc, #732]	; (8005688 <cliDump+0x310>)
 80053aa:	2000      	movs	r0, #0
 80053ac:	f00e f8a8 	bl	8013500 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 80053b0:	4bb3      	ldr	r3, [pc, #716]	; (8005680 <cliDump+0x308>)
 80053b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80053b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	f000 80a4 	beq.w	800550a <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 80053c2:	2300      	movs	r3, #0
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
 80053c6:	e093      	b.n	80054f0 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80053c8:	4aad      	ldr	r2, [pc, #692]	; (8005680 <cliDump+0x308>)
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	3301      	adds	r3, #1
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	4413      	add	r3, r2
 80053d2:	edd3 7a00 	vldr	s15, [r3]
 80053d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	f000 808c 	beq.w	80054fa <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 80053e2:	4aa7      	ldr	r2, [pc, #668]	; (8005680 <cliDump+0x308>)
 80053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e6:	3301      	adds	r3, #1
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4413      	add	r3, r2
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80053f0:	4aa3      	ldr	r2, [pc, #652]	; (8005680 <cliDump+0x308>)
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	3301      	adds	r3, #1
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4413      	add	r3, r2
 80053fa:	3304      	adds	r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 8005400:	4a9f      	ldr	r2, [pc, #636]	; (8005680 <cliDump+0x308>)
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	4413      	add	r3, r2
 8005408:	3318      	adds	r3, #24
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 800540e:	4a9c      	ldr	r2, [pc, #624]	; (8005680 <cliDump+0x308>)
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	4413      	add	r3, r2
 8005416:	331c      	adds	r3, #28
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	3301      	adds	r3, #1
 8005420:	461a      	mov	r2, r3
 8005422:	499a      	ldr	r1, [pc, #616]	; (800568c <cliDump+0x314>)
 8005424:	2000      	movs	r0, #0
 8005426:	f00e f86b 	bl	8013500 <pifLog_Printf>
            if (thr < 0)
 800542a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800542e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005436:	d503      	bpl.n	8005440 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 8005438:	4995      	ldr	r1, [pc, #596]	; (8005690 <cliDump+0x318>)
 800543a:	2000      	movs	r0, #0
 800543c:	f00d ffd2 	bl	80133e4 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 8005440:	f107 0308 	add.w	r3, r7, #8
 8005444:	4618      	mov	r0, r3
 8005446:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800544a:	f7ff f85b 	bl	8004504 <ftoa>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	4990      	ldr	r1, [pc, #576]	; (8005694 <cliDump+0x31c>)
 8005454:	2000      	movs	r0, #0
 8005456:	f00e f853 	bl	8013500 <pifLog_Printf>
            if (roll < 0)
 800545a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800545e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d503      	bpl.n	8005470 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 8005468:	4989      	ldr	r1, [pc, #548]	; (8005690 <cliDump+0x318>)
 800546a:	2000      	movs	r0, #0
 800546c:	f00d ffba 	bl	80133e4 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005470:	f107 0308 	add.w	r3, r7, #8
 8005474:	4618      	mov	r0, r3
 8005476:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800547a:	f7ff f843 	bl	8004504 <ftoa>
 800547e:	4603      	mov	r3, r0
 8005480:	461a      	mov	r2, r3
 8005482:	4984      	ldr	r1, [pc, #528]	; (8005694 <cliDump+0x31c>)
 8005484:	2000      	movs	r0, #0
 8005486:	f00e f83b 	bl	8013500 <pifLog_Printf>
            if (pitch < 0)
 800548a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800548e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005496:	d503      	bpl.n	80054a0 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005498:	497d      	ldr	r1, [pc, #500]	; (8005690 <cliDump+0x318>)
 800549a:	2000      	movs	r0, #0
 800549c:	f00d ffa2 	bl	80133e4 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	4618      	mov	r0, r3
 80054a6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80054aa:	f7ff f82b 	bl	8004504 <ftoa>
 80054ae:	4603      	mov	r3, r0
 80054b0:	461a      	mov	r2, r3
 80054b2:	4978      	ldr	r1, [pc, #480]	; (8005694 <cliDump+0x31c>)
 80054b4:	2000      	movs	r0, #0
 80054b6:	f00e f823 	bl	8013500 <pifLog_Printf>
            if (yaw < 0)
 80054ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80054be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d503      	bpl.n	80054d0 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 80054c8:	4971      	ldr	r1, [pc, #452]	; (8005690 <cliDump+0x318>)
 80054ca:	2000      	movs	r0, #0
 80054cc:	f00d ff8a 	bl	80133e4 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	4618      	mov	r0, r3
 80054d6:	ed97 0a08 	vldr	s0, [r7, #32]
 80054da:	f7ff f813 	bl	8004504 <ftoa>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	496d      	ldr	r1, [pc, #436]	; (8005698 <cliDump+0x320>)
 80054e4:	2000      	movs	r0, #0
 80054e6:	f00e f80b 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	3301      	adds	r3, #1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	2b0b      	cmp	r3, #11
 80054f4:	f67f af68 	bls.w	80053c8 <cliDump+0x50>
 80054f8:	e000      	b.n	80054fc <cliDump+0x184>
                break;
 80054fa:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	3301      	adds	r3, #1
 8005500:	461a      	mov	r2, r3
 8005502:	4966      	ldr	r1, [pc, #408]	; (800569c <cliDump+0x324>)
 8005504:	2000      	movs	r0, #0
 8005506:	f00d fffb 	bl	8013500 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 800550a:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <cliDump+0x308>)
 800550c:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8084 	beq.w	800561e <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	e074      	b.n	8005606 <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 800551c:	4958      	ldr	r1, [pc, #352]	; (8005680 <cliDump+0x308>)
 800551e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	440b      	add	r3, r1
 8005528:	33d2      	adds	r3, #210	; 0xd2
 800552a:	f993 3000 	ldrsb.w	r3, [r3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d06d      	beq.n	800560e <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	3301      	adds	r3, #1
 8005536:	461a      	mov	r2, r3
 8005538:	4959      	ldr	r1, [pc, #356]	; (80056a0 <cliDump+0x328>)
 800553a:	2000      	movs	r0, #0
 800553c:	f00d ffe0 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 8005540:	494f      	ldr	r1, [pc, #316]	; (8005680 <cliDump+0x308>)
 8005542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	440b      	add	r3, r1
 800554c:	33d0      	adds	r3, #208	; 0xd0
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	3301      	adds	r3, #1
 8005552:	461a      	mov	r2, r3
 8005554:	4953      	ldr	r1, [pc, #332]	; (80056a4 <cliDump+0x32c>)
 8005556:	2000      	movs	r0, #0
 8005558:	f00d ffd2 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 800555c:	4948      	ldr	r1, [pc, #288]	; (8005680 <cliDump+0x308>)
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	440b      	add	r3, r1
 8005568:	33d1      	adds	r3, #209	; 0xd1
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	461a      	mov	r2, r3
 8005570:	494c      	ldr	r1, [pc, #304]	; (80056a4 <cliDump+0x32c>)
 8005572:	2000      	movs	r0, #0
 8005574:	f00d ffc4 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005578:	4941      	ldr	r1, [pc, #260]	; (8005680 <cliDump+0x308>)
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	4613      	mov	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	440b      	add	r3, r1
 8005584:	33d2      	adds	r3, #210	; 0xd2
 8005586:	f993 3000 	ldrsb.w	r3, [r3]
 800558a:	461a      	mov	r2, r3
 800558c:	4945      	ldr	r1, [pc, #276]	; (80056a4 <cliDump+0x32c>)
 800558e:	2000      	movs	r0, #0
 8005590:	f00d ffb6 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 8005594:	493a      	ldr	r1, [pc, #232]	; (8005680 <cliDump+0x308>)
 8005596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	440b      	add	r3, r1
 80055a0:	33d3      	adds	r3, #211	; 0xd3
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <cliDump+0x32c>)
 80055a8:	2000      	movs	r0, #0
 80055aa:	f00d ffa9 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 80055ae:	4934      	ldr	r1, [pc, #208]	; (8005680 <cliDump+0x308>)
 80055b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b2:	4613      	mov	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	440b      	add	r3, r1
 80055ba:	33d4      	adds	r3, #212	; 0xd4
 80055bc:	f993 3000 	ldrsb.w	r3, [r3]
 80055c0:	461a      	mov	r2, r3
 80055c2:	4938      	ldr	r1, [pc, #224]	; (80056a4 <cliDump+0x32c>)
 80055c4:	2000      	movs	r0, #0
 80055c6:	f00d ff9b 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 80055ca:	492d      	ldr	r1, [pc, #180]	; (8005680 <cliDump+0x308>)
 80055cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	440b      	add	r3, r1
 80055d6:	33d5      	adds	r3, #213	; 0xd5
 80055d8:	f993 3000 	ldrsb.w	r3, [r3]
 80055dc:	461a      	mov	r2, r3
 80055de:	4931      	ldr	r1, [pc, #196]	; (80056a4 <cliDump+0x32c>)
 80055e0:	2000      	movs	r0, #0
 80055e2:	f00d ff8d 	bl	8013500 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 80055e6:	4926      	ldr	r1, [pc, #152]	; (8005680 <cliDump+0x308>)
 80055e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	440b      	add	r3, r1
 80055f2:	33d6      	adds	r3, #214	; 0xd6
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	492b      	ldr	r1, [pc, #172]	; (80056a8 <cliDump+0x330>)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f00d ff80 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	3301      	adds	r3, #1
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d987      	bls.n	800551c <cliDump+0x1a4>
 800560c:	e000      	b.n	8005610 <cliDump+0x298>
                break;
 800560e:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	3301      	adds	r3, #1
 8005614:	461a      	mov	r2, r3
 8005616:	4925      	ldr	r1, [pc, #148]	; (80056ac <cliDump+0x334>)
 8005618:	2000      	movs	r0, #0
 800561a:	f00d ff71 	bl	8013500 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	e024      	b.n	800566e <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005624:	2300      	movs	r3, #0
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
 8005628:	e01b      	b.n	8005662 <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 800562a:	4921      	ldr	r1, [pc, #132]	; (80056b0 <cliDump+0x338>)
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	440b      	add	r3, r1
 8005638:	33c0      	adds	r3, #192	; 0xc0
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	fa42 f303 	asr.w	r3, r2, r3
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	3301      	adds	r3, #1
 8005654:	4917      	ldr	r1, [pc, #92]	; (80056b4 <cliDump+0x33c>)
 8005656:	2000      	movs	r0, #0
 8005658:	f00d ff52 	bl	8013500 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	3301      	adds	r3, #1
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2b0b      	cmp	r3, #11
 8005666:	d9e0      	bls.n	800562a <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	3301      	adds	r3, #1
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	2b07      	cmp	r3, #7
 8005672:	d9d7      	bls.n	8005624 <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	e057      	b.n	800572a <cliDump+0x3b2>
 800567a:	bf00      	nop
 800567c:	08026968 	.word	0x08026968
 8005680:	2000089c 	.word	0x2000089c
 8005684:	08027820 	.word	0x08027820
 8005688:	08026998 	.word	0x08026998
 800568c:	080269a4 	.word	0x080269a4
 8005690:	080269ac 	.word	0x080269ac
 8005694:	080269b0 	.word	0x080269b0
 8005698:	08026550 	.word	0x08026550
 800569c:	080269b4 	.word	0x080269b4
 80056a0:	080269c8 	.word	0x080269c8
 80056a4:	080269d4 	.word	0x080269d4
 80056a8:	080267f8 	.word	0x080267f8
 80056ac:	080269d8 	.word	0x080269d8
 80056b0:	20000e08 	.word	0x20000e08
 80056b4:	080269ec 	.word	0x080269ec
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	4863      	ldr	r0, [pc, #396]	; (800584c <cliDump+0x4d4>)
 80056be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4403      	add	r3, r0
 80056ca:	33b8      	adds	r3, #184	; 0xb8
 80056cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d0:	461e      	mov	r6, r3
 80056d2:	485e      	ldr	r0, [pc, #376]	; (800584c <cliDump+0x4d4>)
 80056d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4403      	add	r3, r0
 80056e0:	33bc      	adds	r3, #188	; 0xbc
 80056e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e6:	461c      	mov	r4, r3
 80056e8:	4858      	ldr	r0, [pc, #352]	; (800584c <cliDump+0x4d4>)
 80056ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4403      	add	r3, r0
 80056f6:	33ba      	adds	r3, #186	; 0xba
 80056f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056fc:	461d      	mov	r5, r3
 80056fe:	4853      	ldr	r0, [pc, #332]	; (800584c <cliDump+0x4d4>)
 8005700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4403      	add	r3, r0
 800570c:	33be      	adds	r3, #190	; 0xbe
 800570e:	f993 3000 	ldrsb.w	r3, [r3]
 8005712:	9302      	str	r3, [sp, #8]
 8005714:	9501      	str	r5, [sp, #4]
 8005716:	9400      	str	r4, [sp, #0]
 8005718:	4633      	mov	r3, r6
 800571a:	460a      	mov	r2, r1
 800571c:	494c      	ldr	r1, [pc, #304]	; (8005850 <cliDump+0x4d8>)
 800571e:	2000      	movs	r0, #0
 8005720:	f00d feee 	bl	8013500 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	3301      	adds	r3, #1
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	2b07      	cmp	r3, #7
 800572e:	d9c3      	bls.n	80056b8 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 8005730:	f001 fcba 	bl	80070a8 <featureMask>
 8005734:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 8005736:	2300      	movs	r3, #0
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800573a:	4a46      	ldr	r2, [pc, #280]	; (8005854 <cliDump+0x4dc>)
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 8005746:	4a43      	ldr	r2, [pc, #268]	; (8005854 <cliDump+0x4dc>)
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574e:	461a      	mov	r2, r3
 8005750:	4941      	ldr	r1, [pc, #260]	; (8005858 <cliDump+0x4e0>)
 8005752:	2000      	movs	r0, #0
 8005754:	f00d fed4 	bl	8013500 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	3301      	adds	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800575e:	e7ec      	b.n	800573a <cliDump+0x3c2>
            break;
 8005760:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 8005762:	2300      	movs	r3, #0
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005766:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <cliDump+0x4dc>)
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d015      	beq.n	800579e <cliDump+0x426>
            break;
        if (mask & (1 << i))
 8005772:	2201      	movs	r2, #1
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	461a      	mov	r2, r3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 8005784:	4a33      	ldr	r2, [pc, #204]	; (8005854 <cliDump+0x4dc>)
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	461a      	mov	r2, r3
 800578e:	4933      	ldr	r1, [pc, #204]	; (800585c <cliDump+0x4e4>)
 8005790:	2000      	movs	r0, #0
 8005792:	f00d feb5 	bl	8013500 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	3301      	adds	r3, #1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800579c:	e7e3      	b.n	8005766 <cliDump+0x3ee>
            break;
 800579e:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 80057a0:	2300      	movs	r3, #0
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
 80057a4:	e012      	b.n	80057cc <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 80057a6:	4a2e      	ldr	r2, [pc, #184]	; (8005860 <cliDump+0x4e8>)
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <cliDump+0x4ec>)
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	4413      	add	r3, r2
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	f101 0338 	add.w	r3, r1, #56	; 0x38
 80057c0:	443b      	add	r3, r7
 80057c2:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	3301      	adds	r3, #1
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	4b24      	ldr	r3, [pc, #144]	; (8005860 <cliDump+0x4e8>)
 80057ce:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80057d2:	461a      	mov	r2, r3
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d3e5      	bcc.n	80057a6 <cliDump+0x42e>
    buf[i] = '\0';
 80057da:	f107 0208 	add.w	r2, r7, #8
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	4413      	add	r3, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	461a      	mov	r2, r3
 80057ec:	491e      	ldr	r1, [pc, #120]	; (8005868 <cliDump+0x4f0>)
 80057ee:	2000      	movs	r0, #0
 80057f0:	f00d fe86 	bl	8013500 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80057f4:	2300      	movs	r3, #0
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	e01f      	b.n	800583a <cliDump+0x4c2>
        setval = &valueTable[i];
 80057fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <cliDump+0x4f4>)
 8005806:	4413      	add	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 800580a:	4918      	ldr	r1, [pc, #96]	; (800586c <cliDump+0x4f4>)
 800580c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	4914      	ldr	r1, [pc, #80]	; (8005870 <cliDump+0x4f8>)
 800581e:	2000      	movs	r0, #0
 8005820:	f00d fe6e 	bl	8013500 <pifLog_Printf>
        cliPrintVar(setval, 0);
 8005824:	2100      	movs	r1, #0
 8005826:	69b8      	ldr	r0, [r7, #24]
 8005828:	f000 fb4a 	bl	8005ec0 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 800582c:	4911      	ldr	r1, [pc, #68]	; (8005874 <cliDump+0x4fc>)
 800582e:	2000      	movs	r0, #0
 8005830:	f00d fdd8 	bl	80133e4 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	3301      	adds	r3, #1
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	2b8e      	cmp	r3, #142	; 0x8e
 800583e:	d9dc      	bls.n	80057fa <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	373c      	adds	r7, #60	; 0x3c
 8005846:	46bd      	mov	sp, r7
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584a:	bf00      	nop
 800584c:	20000e08 	.word	0x20000e08
 8005850:	08026a08 	.word	0x08026a08
 8005854:	08027884 	.word	0x08027884
 8005858:	08026a20 	.word	0x08026a20
 800585c:	08026a30 	.word	0x08026a30
 8005860:	2000089c 	.word	0x2000089c
 8005864:	0802857c 	.word	0x0802857c
 8005868:	08026a40 	.word	0x08026a40
 800586c:	08027a50 	.word	0x08027a50
 8005870:	08026a4c 	.word	0x08026a4c
 8005874:	08026570 	.word	0x08026570

08005878 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 8005882:	490c      	ldr	r1, [pc, #48]	; (80058b4 <cliExit+0x3c>)
 8005884:	2000      	movs	r0, #0
 8005886:	f00d fdad 	bl	80133e4 <pifLog_Print>
    *cliBuffer = '\0';
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <cliExit+0x40>)
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <cliExit+0x44>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <cliExit+0x48>)
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 800589c:	f005 fc84 	bl	800b1a8 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 faec 	bl	8005e80 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	08026a58 	.word	0x08026a58
 80058b8:	20000868 	.word	0x20000868
 80058bc:	20000898 	.word	0x20000898
 80058c0:	20000864 	.word	0x20000864

080058c4 <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 80058ce:	f001 fbeb 	bl	80070a8 <featureMask>
 80058d2:	60f8      	str	r0, [r7, #12]

    if (argc == 0) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d127      	bne.n	800592a <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 80058da:	4950      	ldr	r1, [pc, #320]	; (8005a1c <cliFeature+0x158>)
 80058dc:	2000      	movs	r0, #0
 80058de:	f00d fd81 	bl	80133e4 <pifLog_Print>
        for (i = 0; ; i++) {
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058e6:	4a4e      	ldr	r2, [pc, #312]	; (8005a20 <cliFeature+0x15c>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d015      	beq.n	800591e <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80058f2:	2201      	movs	r2, #1
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 8005904:	4a46      	ldr	r2, [pc, #280]	; (8005a20 <cliFeature+0x15c>)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	461a      	mov	r2, r3
 800590e:	4945      	ldr	r1, [pc, #276]	; (8005a24 <cliFeature+0x160>)
 8005910:	2000      	movs	r0, #0
 8005912:	f00d fdf5 	bl	8013500 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	3301      	adds	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800591c:	e7e3      	b.n	80058e6 <cliFeature+0x22>
                break;
 800591e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005920:	4941      	ldr	r1, [pc, #260]	; (8005a28 <cliFeature+0x164>)
 8005922:	2000      	movs	r0, #0
 8005924:	f00d fd5e 	bl	80133e4 <pifLog_Print>
 8005928:	e073      	b.n	8005a12 <cliFeature+0x14e>
    } else if (strcasecmp(argv[0], "list") == 0) {
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	493f      	ldr	r1, [pc, #252]	; (8005a2c <cliFeature+0x168>)
 8005930:	4618      	mov	r0, r3
 8005932:	f01d f8e5 	bl	8022b00 <strcasecmp>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11e      	bne.n	800597a <cliFeature+0xb6>
        pifLog_Print(LT_NONE, "Available features: ");
 800593c:	493c      	ldr	r1, [pc, #240]	; (8005a30 <cliFeature+0x16c>)
 800593e:	2000      	movs	r0, #0
 8005940:	f00d fd50 	bl	80133e4 <pifLog_Print>
        for (i = 0; ; i++) {
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005948:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <cliFeature+0x15c>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <cliFeature+0xaa>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 8005954:	4a32      	ldr	r2, [pc, #200]	; (8005a20 <cliFeature+0x15c>)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595c:	461a      	mov	r2, r3
 800595e:	4931      	ldr	r1, [pc, #196]	; (8005a24 <cliFeature+0x160>)
 8005960:	2000      	movs	r0, #0
 8005962:	f00d fdcd 	bl	8013500 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3301      	adds	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800596c:	e7ec      	b.n	8005948 <cliFeature+0x84>
                break;
 800596e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005970:	492d      	ldr	r1, [pc, #180]	; (8005a28 <cliFeature+0x164>)
 8005972:	2000      	movs	r0, #0
 8005974:	f00d fd36 	bl	80133e4 <pifLog_Print>
 8005978:	e04b      	b.n	8005a12 <cliFeature+0x14e>
    } else {
        bool remove = false;
 800597a:	2300      	movs	r3, #0
 800597c:	74fb      	strb	r3, [r7, #19]
        if (argv[0][0] == '-') {
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b2d      	cmp	r3, #45	; 0x2d
 8005986:	d101      	bne.n	800598c <cliFeature+0xc8>
            // remove feature
            remove = true;
 8005988:	2301      	movs	r3, #1
 800598a:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005990:	4a23      	ldr	r2, [pc, #140]	; (8005a20 <cliFeature+0x15c>)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <cliFeature+0xe2>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 800599c:	4925      	ldr	r1, [pc, #148]	; (8005a34 <cliFeature+0x170>)
 800599e:	2000      	movs	r0, #0
 80059a0:	f00d fd20 	bl	80133e4 <pifLog_Print>
                break;
 80059a4:	e035      	b.n	8005a12 <cliFeature+0x14e>
            }
            if (strcasecmp(argv[0] + 1, featureNames[i]) == 0) {
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	491c      	ldr	r1, [pc, #112]	; (8005a20 <cliFeature+0x15c>)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f01d f8a2 	bl	8022b00 <strcasecmp>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d123      	bne.n	8005a0a <cliFeature+0x146>
                if (remove) {
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <cliFeature+0x11c>
                    featureClear(1 << i);
 80059c8:	2201      	movs	r2, #1
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fb49 	bl	8007068 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 80059d6:	4918      	ldr	r1, [pc, #96]	; (8005a38 <cliFeature+0x174>)
 80059d8:	2000      	movs	r0, #0
 80059da:	f00d fd03 	bl	80133e4 <pifLog_Print>
 80059de:	e00a      	b.n	80059f6 <cliFeature+0x132>
                } else {
                    featureSet(1 << i);
 80059e0:	2201      	movs	r2, #1
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fb2b 	bl	8007044 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80059ee:	4913      	ldr	r1, [pc, #76]	; (8005a3c <cliFeature+0x178>)
 80059f0:	2000      	movs	r0, #0
 80059f2:	f00d fcf7 	bl	80133e4 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80059f6:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <cliFeature+0x15c>)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fe:	461a      	mov	r2, r3
 8005a00:	490f      	ldr	r1, [pc, #60]	; (8005a40 <cliFeature+0x17c>)
 8005a02:	2000      	movs	r0, #0
 8005a04:	f00d fd7c 	bl	8013500 <pifLog_Printf>
                break;
 8005a08:	e003      	b.n	8005a12 <cliFeature+0x14e>
        for (i = 0; ; i++) {
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005a10:	e7be      	b.n	8005990 <cliFeature+0xcc>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08026a70 	.word	0x08026a70
 8005a20:	08027884 	.word	0x08027884
 8005a24:	08026a84 	.word	0x08026a84
 8005a28:	08026570 	.word	0x08026570
 8005a2c:	08026a88 	.word	0x08026a88
 8005a30:	08026a90 	.word	0x08026a90
 8005a34:	08026aa8 	.word	0x08026aa8
 8005a38:	08026ac4 	.word	0x08026ac4
 8005a3c:	08026ad0 	.word	0x08026ad0
 8005a40:	08026550 	.word	0x08026550

08005a44 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005a4e:	f003 fafd 	bl	800904c <gpsSetPassthrough>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <cliGpsPassthrough+0x1a>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d005      	beq.n	8005a68 <cliGpsPassthrough+0x24>
 8005a5c:	e009      	b.n	8005a72 <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005a5e:	490a      	ldr	r1, [pc, #40]	; (8005a88 <cliGpsPassthrough+0x44>)
 8005a60:	2000      	movs	r0, #0
 8005a62:	f00d fcbf 	bl	80133e4 <pifLog_Print>
        break;
 8005a66:	e009      	b.n	8005a7c <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005a68:	4908      	ldr	r1, [pc, #32]	; (8005a8c <cliGpsPassthrough+0x48>)
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f00d fcba 	bl	80133e4 <pifLog_Print>
        break;
 8005a70:	e004      	b.n	8005a7c <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 8005a72:	4907      	ldr	r1, [pc, #28]	; (8005a90 <cliGpsPassthrough+0x4c>)
 8005a74:	2000      	movs	r0, #0
 8005a76:	f00d fcb5 	bl	80133e4 <pifLog_Print>
        break;
 8005a7a:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	08026adc 	.word	0x08026adc
 8005a8c:	08026afc 	.word	0x08026afc
 8005a90:	08026b1c 	.word	0x08026b1c

08005a94 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 1) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dc02      	bgt.n	8005aaa <cliMap+0x16>
 8005aa4:	f06f 0302 	mvn.w	r3, #2
 8005aa8:	e096      	b.n	8005bd8 <cliMap+0x144>

    len = strlen(argv[0]);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fa fb92 	bl	80001d8 <strlen>
 8005ab4:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005ab6:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <cliMap+0x14c>)
 8005ab8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005abc:	461a      	mov	r2, r3
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d15a      	bne.n	8005b7a <cliMap+0xe6>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e01b      	b.n	8005b02 <cliMap+0x6e>
            argv[0][i] = toupper((unsigned char)argv[0][i]);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	75fb      	strb	r3, [r7, #23]
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4a42      	ldr	r2, [pc, #264]	; (8005be4 <cliMap+0x150>)
 8005adc:	4413      	add	r3, r2
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d102      	bne.n	8005aee <cliMap+0x5a>
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	3b20      	subs	r3, #32
 8005aec:	e000      	b.n	8005af0 <cliMap+0x5c>
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	6811      	ldr	r1, [r2, #0]
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <cliMap+0x14c>)
 8005b04:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b08:	461a      	mov	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d3dc      	bcc.n	8005aca <cliMap+0x36>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e025      	b.n	8005b62 <cliMap+0xce>
            if (strchr(rcChannelLetters, argv[0][i]) && !strchr(argv[0] + i + 1, argv[0][i]))
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	4619      	mov	r1, r3
 8005b22:	4831      	ldr	r0, [pc, #196]	; (8005be8 <cliMap+0x154>)
 8005b24:	f01d f815 	bl	8022b52 <strchr>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <cliMap+0xc2>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3301      	adds	r3, #1
 8005b36:	18d0      	adds	r0, r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	f01d f805 	bl	8022b52 <strchr>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <cliMap+0xc2>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e005      	b.n	8005b62 <cliMap+0xce>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005b56:	4925      	ldr	r1, [pc, #148]	; (8005bec <cliMap+0x158>)
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f00d fc43 	bl	80133e4 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e03a      	b.n	8005bd8 <cliMap+0x144>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b62:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <cliMap+0x14c>)
 8005b64:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b68:	461a      	mov	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d3d2      	bcc.n	8005b16 <cliMap+0x82>
        }
        parseRcChannels(argv[0]);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fcc3 	bl	8006500 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005b7a:	491d      	ldr	r1, [pc, #116]	; (8005bf0 <cliMap+0x15c>)
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f00d fc31 	bl	80133e4 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	e012      	b.n	8005bae <cliMap+0x11a>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005b88:	4a15      	ldr	r2, [pc, #84]	; (8005be0 <cliMap+0x14c>)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <cliMap+0x154>)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	f101 0320 	add.w	r3, r1, #32
 8005ba2:	443b      	add	r3, r7
 8005ba4:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <cliMap+0x14c>)
 8005bb0:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d3e5      	bcc.n	8005b88 <cliMap+0xf4>
    out[i] = '\0';
 8005bbc:	f107 020c 	add.w	r2, r7, #12
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4909      	ldr	r1, [pc, #36]	; (8005bf4 <cliMap+0x160>)
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f00d fc95 	bl	8013500 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2000089c 	.word	0x2000089c
 8005be4:	08028eec 	.word	0x08028eec
 8005be8:	0802857c 	.word	0x0802857c
 8005bec:	08026b44 	.word	0x08026b44
 8005bf0:	08026b64 	.word	0x08026b64
 8005bf4:	08026550 	.word	0x08026550

08005bf8 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005c08:	4b46      	ldr	r3, [pc, #280]	; (8005d24 <cliMixer+0x12c>)
 8005c0a:	795b      	ldrb	r3, [r3, #5]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4a46      	ldr	r2, [pc, #280]	; (8005d28 <cliMixer+0x130>)
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4945      	ldr	r1, [pc, #276]	; (8005d2c <cliMixer+0x134>)
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f00d fc71 	bl	8013500 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e07b      	b.n	8005d1a <cliMixer+0x122>
    } else if (strcasecmp(argv[0], "list") == 0) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4942      	ldr	r1, [pc, #264]	; (8005d30 <cliMixer+0x138>)
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f01c ff69 	bl	8022b00 <strcasecmp>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11f      	bne.n	8005c74 <cliMixer+0x7c>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005c34:	493f      	ldr	r1, [pc, #252]	; (8005d34 <cliMixer+0x13c>)
 8005c36:	2000      	movs	r0, #0
 8005c38:	f00d fbd4 	bl	80133e4 <pifLog_Print>
        for (i = 0; ; i++) {
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c40:	4a39      	ldr	r2, [pc, #228]	; (8005d28 <cliMixer+0x130>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <cliMixer+0x6e>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005c4c:	4a36      	ldr	r2, [pc, #216]	; (8005d28 <cliMixer+0x130>)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4938      	ldr	r1, [pc, #224]	; (8005d38 <cliMixer+0x140>)
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f00d fc51 	bl	8013500 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c64:	e7ec      	b.n	8005c40 <cliMixer+0x48>
                break;
 8005c66:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005c68:	4934      	ldr	r1, [pc, #208]	; (8005d3c <cliMixer+0x144>)
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f00d fbba 	bl	80133e4 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e052      	b.n	8005d1a <cliMixer+0x122>
    }

    for (i = 0; ; i++) {
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <cliMixer+0x130>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <cliMixer+0x98>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005c84:	492e      	ldr	r1, [pc, #184]	; (8005d40 <cliMixer+0x148>)
 8005c86:	2000      	movs	r0, #0
 8005c88:	f00d fbac 	bl	80133e4 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e044      	b.n	8005d1a <cliMixer+0x122>
        }
        if (strcasecmp(argv[0], mixerNames[i]) == 0) {
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4924      	ldr	r1, [pc, #144]	; (8005d28 <cliMixer+0x130>)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f01c ff2e 	bl	8022b00 <strcasecmp>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d131      	bne.n	8005d0e <cliMixer+0x116>
            mcfg.mixerConfiguration = i + 1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <cliMixer+0x12c>)
 8005cb4:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <cliMixer+0x130>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4920      	ldr	r1, [pc, #128]	; (8005d44 <cliMixer+0x14c>)
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f00d fc1c 	bl	8013500 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <cliMixer+0x12c>)
 8005cca:	795b      	ldrb	r3, [r3, #5]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d003      	beq.n	8005cd8 <cliMixer+0xe0>
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <cliMixer+0x12c>)
 8005cd2:	795b      	ldrb	r3, [r3, #5]
 8005cd4:	2b0e      	cmp	r3, #14
 8005cd6:	d11e      	bne.n	8005d16 <cliMixer+0x11e>
                cfg.dynThrPID = 90;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <cliMixer+0x150>)
 8005cda:	225a      	movs	r2, #90	; 0x5a
 8005cdc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <cliMixer+0x150>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <cliMixer+0x150>)
 8005cea:	221e      	movs	r2, #30
 8005cec:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005cee:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <cliMixer+0x150>)
 8005cf0:	2214      	movs	r2, #20
 8005cf2:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005cf4:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <cliMixer+0x150>)
 8005cf6:	222d      	movs	r2, #45	; 0x2d
 8005cf8:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <cliMixer+0x150>)
 8005cfc:	221e      	movs	r2, #30
 8005cfe:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <cliMixer+0x150>)
 8005d02:	2214      	movs	r2, #20
 8005d04:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <cliMixer+0x150>)
 8005d08:	222d      	movs	r2, #45	; 0x2d
 8005d0a:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005d0c:	e003      	b.n	8005d16 <cliMixer+0x11e>
    for (i = 0; ; i++) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005d14:	e7b0      	b.n	8005c78 <cliMixer+0x80>
            break;
 8005d16:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000089c 	.word	0x2000089c
 8005d28:	08027820 	.word	0x08027820
 8005d2c:	08026b7c 	.word	0x08026b7c
 8005d30:	08026a88 	.word	0x08026a88
 8005d34:	08026b90 	.word	0x08026b90
 8005d38:	08026a84 	.word	0x08026a84
 8005d3c:	08026570 	.word	0x08026570
 8005d40:	08026584 	.word	0x08026584
 8005d44:	08026ba4 	.word	0x08026ba4
 8005d48:	20000e08 	.word	0x20000e08

08005d4c <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005d64:	4926      	ldr	r1, [pc, #152]	; (8005e00 <cliMotor+0xb4>)
 8005d66:	2000      	movs	r0, #0
 8005d68:	f00d fb3c 	bl	80133e4 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e042      	b.n	8005df6 <cliMotor+0xaa>
    }

    if (argc < 2) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	dc0a      	bgt.n	8005d8c <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005d76:	4a23      	ldr	r2, [pc, #140]	; (8005e04 <cliMotor+0xb8>)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4921      	ldr	r1, [pc, #132]	; (8005e08 <cliMotor+0xbc>)
 8005d82:	2000      	movs	r0, #0
 8005d84:	f00d fbbc 	bl	8013500 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e034      	b.n	8005df6 <cliMotor+0xaa>
    }

    motor_index = atoi(argv[0]);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f01c fd53 	bl	802283c <atoi>
 8005d96:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[1]);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f01c fd4c 	bl	802283c <atoi>
 8005da4:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db02      	blt.n	8005db2 <cliMotor+0x66>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b0b      	cmp	r3, #11
 8005db0:	dd06      	ble.n	8005dc0 <cliMotor+0x74>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005db2:	220c      	movs	r2, #12
 8005db4:	4915      	ldr	r1, [pc, #84]	; (8005e0c <cliMotor+0xc0>)
 8005db6:	2000      	movs	r0, #0
 8005db8:	f00d fba2 	bl	8013500 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e01a      	b.n	8005df6 <cliMotor+0xaa>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc6:	db03      	blt.n	8005dd0 <cliMotor+0x84>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005dce:	dd05      	ble.n	8005ddc <cliMotor+0x90>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005dd0:	490f      	ldr	r1, [pc, #60]	; (8005e10 <cliMotor+0xc4>)
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f00d fb06 	bl	80133e4 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e00c      	b.n	8005df6 <cliMotor+0xaa>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	490c      	ldr	r1, [pc, #48]	; (8005e14 <cliMotor+0xc8>)
 8005de2:	2000      	movs	r0, #0
 8005de4:	f00d fb8c 	bl	8013500 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	b219      	sxth	r1, r3
 8005dec:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <cliMotor+0xb8>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	08026bb8 	.word	0x08026bb8
 8005e04:	2000151c 	.word	0x2000151c
 8005e08:	08026bf4 	.word	0x08026bf4
 8005e0c:	08026c0c 	.word	0x08026c0c
 8005e10:	08026c34 	.word	0x08026c34
 8005e14:	08026c58 	.word	0x08026c58

08005e18 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <cliProfile+0x60>)
 8005e2a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4912      	ldr	r1, [pc, #72]	; (8005e7c <cliProfile+0x64>)
 8005e32:	2000      	movs	r0, #0
 8005e34:	f00d fb64 	bl	8013500 <pifLog_Printf>
 8005e38:	e018      	b.n	8005e6c <cliProfile+0x54>
    } else {
        i = atoi(argv[0]);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f01c fcfc 	bl	802283c <atoi>
 8005e44:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0f      	blt.n	8005e6c <cliProfile+0x54>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dc0c      	bgt.n	8005e6c <cliProfile+0x54>
            mcfg.current_profile = i;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <cliProfile+0x60>)
 8005e58:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f000 fcf8 	bl	8006854 <writeEEPROM>
            cliProfile(1, NULL);
 8005e64:	2100      	movs	r1, #0
 8005e66:	2001      	movs	r0, #1
 8005e68:	f7ff ffd6 	bl	8005e18 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	2000089c 	.word	0x2000089c
 8005e7c:	08026c74 	.word	0x08026c74

08005e80 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005e8a:	490b      	ldr	r1, [pc, #44]	; (8005eb8 <cliSave+0x38>)
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f00d faa9 	bl	80133e4 <pifLog_Print>
    writeEEPROM(0, true);
 8005e92:	2101      	movs	r1, #1
 8005e94:	2000      	movs	r0, #0
 8005e96:	f000 fcdd 	bl	8006854 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <cliSave+0x3c>)
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f00d faa1 	bl	80133e4 <pifLog_Print>
    pif_Delay1ms(10);
 8005ea2:	200a      	movs	r0, #10
 8005ea4:	f00b f9a2 	bl	80111ec <pif_Delay1ms>
    systemReset(false);
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f7fc f8cb 	bl	8002044 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	08026c8c 	.word	0x08026c8c
 8005ebc:	08026c98 	.word	0x08026c98

08005ec0 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d864      	bhi.n	8005fa0 <cliPrintVar+0xe0>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <cliPrintVar+0x1c>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005eff 	.word	0x08005eff
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f2b 	.word	0x08005f2b
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
            break;
 8005efc:	e050      	b.n	8005fa0 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f993 3000 	ldrsb.w	r3, [r3]
 8005f06:	617b      	str	r3, [r7, #20]
            break;
 8005f08:	e04a      	b.n	8005fa0 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
            break;
 8005f12:	e045      	b.n	8005fa0 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f1c:	617b      	str	r3, [r7, #20]
            break;
 8005f1e:	e03f      	b.n	8005fa0 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	617b      	str	r3, [r7, #20]
            break;
 8005f28:	e03a      	b.n	8005fa0 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3c:	f7fe fae2 	bl	8004504 <ftoa>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	4921      	ldr	r1, [pc, #132]	; (8005fcc <cliPrintVar+0x10c>)
 8005f46:	2000      	movs	r0, #0
 8005f48:	f00d fada 	bl	8013500 <pifLog_Printf>
            if (full) {
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d037      	beq.n	8005fc2 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	4618      	mov	r0, r3
 8005f64:	eeb0 0a67 	vmov.f32	s0, s15
 8005f68:	f7fe facc 	bl	8004504 <ftoa>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4917      	ldr	r1, [pc, #92]	; (8005fd0 <cliPrintVar+0x110>)
 8005f72:	2000      	movs	r0, #0
 8005f74:	f00d fac4 	bl	8013500 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	4618      	mov	r0, r3
 8005f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f8e:	f7fe fab9 	bl	8004504 <ftoa>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	490e      	ldr	r1, [pc, #56]	; (8005fd0 <cliPrintVar+0x110>)
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f00d fab1 	bl	8013500 <pifLog_Printf>
 8005f9e:	e011      	b.n	8005fc4 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	490c      	ldr	r1, [pc, #48]	; (8005fd4 <cliPrintVar+0x114>)
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	f00d faab 	bl	8013500 <pifLog_Printf>
    if (full)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <cliPrintVar+0x118>)
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f00d faa0 	bl	8013500 <pifLog_Printf>
 8005fc0:	e000      	b.n	8005fc4 <cliPrintVar+0x104>
            return; // return from case for float only
 8005fc2:	bf00      	nop
}
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	080269b0 	.word	0x080269b0
 8005fd0:	08026ca8 	.word	0x08026ca8
 8005fd4:	0802685c 	.word	0x0802685c
 8005fd8:	08026cac 	.word	0x08026cac

08005fdc <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	791b      	ldrb	r3, [r3, #4]
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d824      	bhi.n	8006038 <cliSetVar+0x5c>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <cliSetVar+0x18>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	0800600d 	.word	0x0800600d
 8005ffc:	08006019 	.word	0x08006019
 8006000:	08006019 	.word	0x08006019
 8006004:	08006025 	.word	0x08006025
 8006008:	0800602f 	.word	0x0800602f
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
            break;
 8006016:	e00f      	b.n	8006038 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	b212      	sxth	r2, r2
 8006020:	801a      	strh	r2, [r3, #0]
            break;
 8006022:	e009      	b.n	8006038 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	601a      	str	r2, [r3, #0]
            break;
 800602c:	e004      	b.n	8006038 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	601a      	str	r2, [r3, #0]
            break;
 8006036:	bf00      	nop
    }
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <cliSet+0x2e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d135      	bne.n	80060d4 <cliSet+0x90>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d130      	bne.n	80060d4 <cliSet+0x90>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8006072:	4987      	ldr	r1, [pc, #540]	; (8006290 <cliSet+0x24c>)
 8006074:	2000      	movs	r0, #0
 8006076:	f00d f9b5 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e025      	b.n	80060cc <cliSet+0x88>
            val = &valueTable[i];
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4a82      	ldr	r2, [pc, #520]	; (8006294 <cliSet+0x250>)
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006090:	4980      	ldr	r1, [pc, #512]	; (8006294 <cliSet+0x250>)
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	497d      	ldr	r1, [pc, #500]	; (8006298 <cliSet+0x254>)
 80060a4:	2000      	movs	r0, #0
 80060a6:	f00d fa2b 	bl	8013500 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[0])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa f892 	bl	80001d8 <strlen>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff01 	bl	8005ec0 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 80060be:	4977      	ldr	r1, [pc, #476]	; (800629c <cliSet+0x258>)
 80060c0:	2000      	movs	r0, #0
 80060c2:	f00d f98f 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b8e      	cmp	r3, #142	; 0x8e
 80060d0:	d9d6      	bls.n	8006080 <cliSet+0x3c>
    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 80060d2:	e0d7      	b.n	8006284 <cliSet+0x240>
        }
    } else if ((eqptr = strstr(argv[0], "=")) != NULL) {
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	213d      	movs	r1, #61	; 0x3d
 80060da:	4618      	mov	r0, r3
 80060dc:	f01c fd39 	bl	8022b52 <strchr>
 80060e0:	61b8      	str	r0, [r7, #24]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8096 	beq.w	8006216 <cliSet+0x1d2>
        // has equal, set var
        eqptr++;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	3301      	adds	r3, #1
 80060ee:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 80060f0:	69b8      	ldr	r0, [r7, #24]
 80060f2:	f01c fba3 	bl	802283c <atoi>
 80060f6:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 80060f8:	69b8      	ldr	r0, [r7, #24]
 80060fa:	f7fe f90f 	bl	800431c <_atof>
 80060fe:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e07c      	b.n	8006202 <cliSet+0x1be>
            val = &valueTable[i];
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4a60      	ldr	r2, [pc, #384]	; (8006294 <cliSet+0x250>)
 8006114:	4413      	add	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[0], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681c      	ldr	r4, [r3, #0]
 800611c:	495d      	ldr	r1, [pc, #372]	; (8006294 <cliSet+0x250>)
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	681d      	ldr	r5, [r3, #0]
 800612c:	4959      	ldr	r1, [pc, #356]	; (8006294 <cliSet+0x250>)
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa f84b 	bl	80001d8 <strlen>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	4629      	mov	r1, r5
 8006148:	4620      	mov	r0, r4
 800614a:	f01c fd17 	bl	8022b7c <strncasecmp>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d153      	bne.n	80061fc <cliSet+0x1b8>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8006154:	494f      	ldr	r1, [pc, #316]	; (8006294 <cliSet+0x250>)
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	330c      	adds	r3, #12
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617a:	db39      	blt.n	80061f0 <cliSet+0x1ac>
 800617c:	4945      	ldr	r1, [pc, #276]	; (8006294 <cliSet+0x250>)
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3310      	adds	r3, #16
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006196:	ed97 7a04 	vldr	s14, [r7, #16]
 800619a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	d825      	bhi.n	80061f0 <cliSet+0x1ac>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 80061a4:	493b      	ldr	r1, [pc, #236]	; (8006294 <cliSet+0x250>)
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	3304      	adds	r3, #4
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d102      	bne.n	80061c0 <cliSet+0x17c>
                        tmp.float_value = valuef;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	e001      	b.n	80061c4 <cliSet+0x180>
                    else
                        tmp.int_value = value;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff ff08 	bl	8005fdc <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 80061cc:	4931      	ldr	r1, [pc, #196]	; (8006294 <cliSet+0x250>)
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	4930      	ldr	r1, [pc, #192]	; (80062a0 <cliSet+0x25c>)
 80061e0:	2000      	movs	r0, #0
 80061e2:	f00d f98d 	bl	8013500 <pifLog_Printf>
                    cliPrintVar(val, 0);
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff fe69 	bl	8005ec0 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80061ee:	e003      	b.n	80061f8 <cliSet+0x1b4>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 80061f0:	492c      	ldr	r1, [pc, #176]	; (80062a4 <cliSet+0x260>)
 80061f2:	2000      	movs	r0, #0
 80061f4:	f00d f8f6 	bl	80133e4 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e044      	b.n	8006286 <cliSet+0x242>
        for (i = 0; i < VALUE_COUNT; i++) {
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b8e      	cmp	r3, #142	; 0x8e
 8006206:	f67f af7f 	bls.w	8006108 <cliSet+0xc4>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 800620a:	4927      	ldr	r1, [pc, #156]	; (80062a8 <cliSet+0x264>)
 800620c:	2000      	movs	r0, #0
 800620e:	f00d f8e9 	bl	80133e4 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8006212:	2300      	movs	r3, #0
 8006214:	e037      	b.n	8006286 <cliSet+0x242>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	e030      	b.n	800627e <cliSet+0x23a>
            if (strstr(valueTable[i].name, argv[0])) {
 800621c:	491d      	ldr	r1, [pc, #116]	; (8006294 <cliSet+0x250>)
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f01c fcd7 	bl	8022be6 <strstr>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01c      	beq.n	8006278 <cliSet+0x234>
                val = &valueTable[i];
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4a12      	ldr	r2, [pc, #72]	; (8006294 <cliSet+0x250>)
 800624a:	4413      	add	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 800624e:	4911      	ldr	r1, [pc, #68]	; (8006294 <cliSet+0x250>)
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	490d      	ldr	r1, [pc, #52]	; (8006298 <cliSet+0x254>)
 8006262:	2000      	movs	r0, #0
 8006264:	f00d f94c 	bl	8013500 <pifLog_Printf>
                cliPrintVar(val, 0);
 8006268:	2100      	movs	r1, #0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fe28 	bl	8005ec0 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 8006270:	490a      	ldr	r1, [pc, #40]	; (800629c <cliSet+0x258>)
 8006272:	2000      	movs	r0, #0
 8006274:	f00d f8b6 	bl	80133e4 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b8e      	cmp	r3, #142	; 0x8e
 8006282:	d9cb      	bls.n	800621c <cliSet+0x1d8>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bdb0      	pop	{r4, r5, r7, pc}
 800628e:	bf00      	nop
 8006290:	08026cb4 	.word	0x08026cb4
 8006294:	08027a50 	.word	0x08027a50
 8006298:	08026ccc 	.word	0x08026ccc
 800629c:	08026570 	.word	0x08026570
 80062a0:	08026cd4 	.word	0x08026cd4
 80062a4:	08026ce0 	.word	0x08026ce0
 80062a8:	08026d08 	.word	0x08026d08

080062ac <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 80062b6:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <cliStatus+0x140>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4d      	ldr	r2, [pc, #308]	; (80063f0 <cliStatus+0x144>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	099a      	lsrs	r2, r3, #6
 80062c2:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <cliStatus+0x148>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <cliStatus+0x14c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	460b      	mov	r3, r1
 80062d0:	494a      	ldr	r1, [pc, #296]	; (80063fc <cliStatus+0x150>)
 80062d2:	2000      	movs	r0, #0
 80062d4:	f00d f914 	bl	8013500 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 80062d8:	f000 fe92 	bl	8007000 <sensorsMask>
 80062dc:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 80062de:	4b48      	ldr	r3, [pc, #288]	; (8006400 <cliStatus+0x154>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a48      	ldr	r2, [pc, #288]	; (8006404 <cliStatus+0x158>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	0c9b      	lsrs	r3, r3, #18
 80062ea:	4a47      	ldr	r2, [pc, #284]	; (8006408 <cliStatus+0x15c>)
 80062ec:	4947      	ldr	r1, [pc, #284]	; (800640c <cliStatus+0x160>)
 80062ee:	2000      	movs	r0, #0
 80062f0:	f00d f906 	bl	8013500 <pifLog_Printf>
    for (i = 0; ; i++) {
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	4a45      	ldr	r2, [pc, #276]	; (8006410 <cliStatus+0x164>)
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d015      	beq.n	8006330 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2201      	movs	r2, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d008      	beq.n	8006328 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	4a3d      	ldr	r2, [pc, #244]	; (8006410 <cliStatus+0x164>)
 800631a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631e:	461a      	mov	r2, r3
 8006320:	493c      	ldr	r1, [pc, #240]	; (8006414 <cliStatus+0x168>)
 8006322:	2000      	movs	r0, #0
 8006324:	f00d f8ec 	bl	8013500 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	3301      	adds	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 800632e:	e7e3      	b.n	80062f8 <cliStatus+0x4c>
            break;
 8006330:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 8006332:	4939      	ldr	r1, [pc, #228]	; (8006418 <cliStatus+0x16c>)
 8006334:	2000      	movs	r0, #0
 8006336:	f00d f855 	bl	80133e4 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 800633a:	2001      	movs	r0, #1
 800633c:	f000 fe24 	bl	8006f88 <sensors>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <cliStatus+0x170>)
 8006348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800634a:	461a      	mov	r2, r3
 800634c:	4934      	ldr	r1, [pc, #208]	; (8006420 <cliStatus+0x174>)
 800634e:	2000      	movs	r0, #0
 8006350:	f00d f8d6 	bl	8013500 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 8006354:	2002      	movs	r0, #2
 8006356:	f000 fe17 	bl	8006f88 <sensors>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 8006360:	4b2e      	ldr	r3, [pc, #184]	; (800641c <cliStatus+0x170>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	461a      	mov	r2, r3
 8006368:	492e      	ldr	r1, [pc, #184]	; (8006424 <cliStatus+0x178>)
 800636a:	2000      	movs	r0, #0
 800636c:	f00d f8c8 	bl	8013500 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 8006370:	2008      	movs	r0, #8
 8006372:	f000 fe09 	bl	8006f88 <sensors>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 800637c:	4b27      	ldr	r3, [pc, #156]	; (800641c <cliStatus+0x170>)
 800637e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006382:	461a      	mov	r2, r3
 8006384:	4928      	ldr	r1, [pc, #160]	; (8006428 <cliStatus+0x17c>)
 8006386:	2000      	movs	r0, #0
 8006388:	f00d f8ba 	bl	8013500 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 800638c:	2004      	movs	r0, #4
 800638e:	f000 fdfb 	bl	8006f88 <sensors>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006398:	4b20      	ldr	r3, [pc, #128]	; (800641c <cliStatus+0x170>)
 800639a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800639e:	461a      	mov	r2, r3
 80063a0:	4922      	ldr	r1, [pc, #136]	; (800642c <cliStatus+0x180>)
 80063a2:	2000      	movs	r0, #0
 80063a4:	f00d f8ac 	bl	8013500 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 80063a8:	491b      	ldr	r1, [pc, #108]	; (8006418 <cliStatus+0x16c>)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f00d f81a 	bl	80133e4 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <cliStatus+0x184>)
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b1f      	ldr	r3, [pc, #124]	; (8006434 <cliStatus+0x188>)
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	f240 536c 	movw	r3, #1388	; 0x56c
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	460b      	mov	r3, r1
 80063c4:	491c      	ldr	r1, [pc, #112]	; (8006438 <cliStatus+0x18c>)
 80063c6:	2000      	movs	r0, #0
 80063c8:	f00d f89a 	bl	8013500 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 80063cc:	481b      	ldr	r0, [pc, #108]	; (800643c <cliStatus+0x190>)
 80063ce:	f00e fe66 	bl	801509e <pifTimerManager_Count>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	491a      	ldr	r1, [pc, #104]	; (8006440 <cliStatus+0x194>)
 80063d8:	2000      	movs	r0, #0
 80063da:	f00d f891 	bl	8013500 <pifLog_Printf>

    cliStatusCallback();
 80063de:	f000 f871 	bl	80064c4 <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20001bcc 	.word	0x20001bcc
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	200016c0 	.word	0x200016c0
 80063f8:	20000054 	.word	0x20000054
 80063fc:	08026d28 	.word	0x08026d28
 8006400:	2000168c 	.word	0x2000168c
 8006404:	431bde83 	.word	0x431bde83
 8006408:	080277a4 	.word	0x080277a4
 800640c:	08026d68 	.word	0x08026d68
 8006410:	080278d0 	.word	0x080278d0
 8006414:	08026a84 	.word	0x08026a84
 8006418:	08026570 	.word	0x08026570
 800641c:	20000060 	.word	0x20000060
 8006420:	08026d94 	.word	0x08026d94
 8006424:	08026da4 	.word	0x08026da4
 8006428:	08026db0 	.word	0x08026db0
 800642c:	08026dc0 	.word	0x08026dc0
 8006430:	200016bc 	.word	0x200016bc
 8006434:	200014a0 	.word	0x200014a0
 8006438:	08026dd0 	.word	0x08026dd0
 800643c:	200014d0 	.word	0x200014d0
 8006440:	08026e04 	.word	0x08026e04

08006444 <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 800644e:	4904      	ldr	r1, [pc, #16]	; (8006460 <cliVersion+0x1c>)
 8006450:	2000      	movs	r0, #0
 8006452:	f00d f855 	bl	8013500 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	08026e1c 	.word	0x08026e1c

08006464 <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <cliInit+0x50>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d119      	bne.n	80064a8 <cliInit+0x44>
        cliMode = 1;
 8006474:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <cliInit+0x50>)
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 800647a:	f00d f8f5 	bl	8013668 <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f00d f8cc 	bl	801361c <pifLog_AttachComm>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <cliInit+0x2a>
 800648a:	2300      	movs	r3, #0
 800648c:	e00d      	b.n	80064aa <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 800648e:	490a      	ldr	r1, [pc, #40]	; (80064b8 <cliInit+0x54>)
 8006490:	480a      	ldr	r0, [pc, #40]	; (80064bc <cliInit+0x58>)
 8006492:	f00c ff73 	bl	801337c <pifLog_UseCommand>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <cliInit+0x3c>
 800649c:	2300      	movs	r3, #0
 800649e:	e004      	b.n	80064aa <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <cliInit+0x5c>)
 80064a2:	2000      	movs	r0, #0
 80064a4:	f00c ff9e 	bl	80133e4 <pifLog_Print>
    }
    return TRUE;
 80064a8:	2301      	movs	r3, #1
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000864 	.word	0x20000864
 80064b8:	08026e4c 	.word	0x08026e4c
 80064bc:	080278f0 	.word	0x080278f0
 80064c0:	08026e54 	.word	0x08026e54

080064c4 <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0

}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <initEEPROM+0x18>
		p_storage = p_sto;
 80064e2:	4a06      	ldr	r2, [pc, #24]	; (80064fc <initEEPROM+0x28>)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6013      	str	r3, [r2, #0]
		return TRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <initEEPROM+0x1a>
	}
	return FALSE;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000f44 	.word	0x20000f44

08006500 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e018      	b.n	8006540 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	480f      	ldr	r0, [pc, #60]	; (8006554 <parseRcChannels+0x54>)
 8006516:	f01c fb1c 	bl	8022b52 <strchr>
 800651a:	60b8      	str	r0, [r7, #8]
        if (s)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1ad1      	subs	r1, r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <parseRcChannels+0x54>)
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	b2c9      	uxtb	r1, r1
 8006530:	4a09      	ldr	r2, [pc, #36]	; (8006558 <parseRcChannels+0x58>)
 8006532:	4413      	add	r3, r2
 8006534:	460a      	mov	r2, r1
 8006536:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e2      	bne.n	800650e <parseRcChannels+0xe>
    }
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	0802857c 	.word	0x0802857c
 8006558:	2000089c 	.word	0x2000089c

0800655c <validEEPROM>:

static uint8_t validEEPROM(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 800656a:	f240 506c 	movw	r0, #1388	; 0x56c
 800656e:	f01c f99b 	bl	80228a8 <malloc>
 8006572:	4603      	mov	r3, r0
 8006574:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <validEEPROM+0x24>
 800657c:	2300      	movs	r3, #0
 800657e:	e04e      	b.n	800661e <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006580:	4b29      	ldr	r3, [pc, #164]	; (8006628 <validEEPROM+0xcc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	214c      	movs	r1, #76	; 0x4c
 8006586:	4618      	mov	r0, r3
 8006588:	f014 f9c5 	bl	801a916 <pifStorage_Open>
 800658c:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d037      	beq.n	8006604 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006594:	4b24      	ldr	r3, [pc, #144]	; (8006628 <validEEPROM+0xcc>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	f240 536c 	movw	r3, #1388	; 0x56c
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	f014 f9ca 	bl	801a938 <pifStorage_Read>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d02e      	beq.n	8006608 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	224c      	movs	r2, #76	; 0x4c
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d12b      	bne.n	800660c <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	885b      	ldrh	r3, [r3, #2]
 80065b8:	f240 526c 	movw	r2, #1388	; 0x56c
 80065bc:	4293      	cmp	r3, r2
 80065be:	d127      	bne.n	8006610 <validEEPROM+0xb4>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	791b      	ldrb	r3, [r3, #4]
 80065c4:	2bbe      	cmp	r3, #190	; 0xbe
 80065c6:	d123      	bne.n	8006610 <validEEPROM+0xb4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 80065ce:	2bef      	cmp	r3, #239	; 0xef
 80065d0:	d11e      	bne.n	8006610 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e007      	b.n	80065e8 <validEEPROM+0x8c>
        chk ^= *p;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	4053      	eors	r3, r2
 80065e0:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d3f1      	bcc.n	80065d8 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f01c f95c 	bl	80228b8 <free>

    // looks good, let's roll!
    return 1;
 8006600:	2301      	movs	r3, #1
 8006602:	e00c      	b.n	800661e <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 8006604:	bf00      	nop
 8006606:	e006      	b.n	8006616 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006608:	bf00      	nop
 800660a:	e004      	b.n	8006616 <validEEPROM+0xba>
        goto fail;
 800660c:	bf00      	nop
 800660e:	e002      	b.n	8006616 <validEEPROM+0xba>
        goto fail;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <validEEPROM+0xba>
        goto fail;
 8006614:	bf00      	nop

fail:
    free(temp);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f01c f94e 	bl	80228b8 <free>
    return 0;    
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000f44 	.word	0x20000f44

0800662c <readEEPROM>:

void readEEPROM(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 8006632:	f7ff ff93 	bl	800655c <validEEPROM>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d030      	beq.n	800669e <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <readEEPROM+0x88>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	214c      	movs	r1, #76	; 0x4c
 8006642:	4618      	mov	r0, r3
 8006644:	f014 f967 	bl	801a916 <pifStorage_Open>
 8006648:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d028      	beq.n	80066a2 <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006650:	4b18      	ldr	r3, [pc, #96]	; (80066b4 <readEEPROM+0x88>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f240 536c 	movw	r3, #1388	; 0x56c
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4917      	ldr	r1, [pc, #92]	; (80066b8 <readEEPROM+0x8c>)
 800665c:	f014 f96c 	bl	801a938 <pifStorage_Read>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01f      	beq.n	80066a6 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <readEEPROM+0x8c>)
 8006668:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800666c:	2b02      	cmp	r3, #2
 800666e:	d903      	bls.n	8006678 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 8006670:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <readEEPROM+0x8c>)
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <readEEPROM+0x8c>)
 800667a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800667e:	461a      	mov	r2, r3
 8006680:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800668c:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <readEEPROM+0x8c>)
 800668e:	4413      	add	r3, r2
 8006690:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006694:	4619      	mov	r1, r3
 8006696:	4809      	ldr	r0, [pc, #36]	; (80066bc <readEEPROM+0x90>)
 8006698:	f01c f916 	bl	80228c8 <memcpy>
    return;
 800669c:	e007      	b.n	80066ae <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80066a6:	bf00      	nop

fail:    
    failureMode(10);
 80066a8:	200a      	movs	r0, #10
 80066aa:	f7fb fc9a 	bl	8001fe2 <failureMode>
}
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000f44 	.word	0x20000f44
 80066b8:	2000089c 	.word	0x2000089c
 80066bc:	20000e08 	.word	0x20000e08

080066c0 <activateConfig>:

void activateConfig(void)
{
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	71fb      	strb	r3, [r7, #7]
 80066ca:	e021      	b.n	8006710 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 80066cc:	4b56      	ldr	r3, [pc, #344]	; (8006828 <activateConfig+0x168>)
 80066ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066d2:	4619      	mov	r1, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	79fa      	ldrb	r2, [r7, #7]
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	3b19      	subs	r3, #25
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80066e6:	79fa      	ldrb	r2, [r7, #7]
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	4a4e      	ldr	r2, [pc, #312]	; (8006828 <activateConfig+0x168>)
 80066ee:	7fd2      	ldrb	r2, [r2, #31]
 80066f0:	fb02 f303 	mul.w	r3, r2, r3
 80066f4:	4a4d      	ldr	r2, [pc, #308]	; (800682c <activateConfig+0x16c>)
 80066f6:	fb82 1203 	smull	r1, r2, r2, r3
 80066fa:	1292      	asrs	r2, r2, #10
 80066fc:	17db      	asrs	r3, r3, #31
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	b211      	sxth	r1, r2
 8006704:	4a4a      	ldr	r2, [pc, #296]	; (8006830 <activateConfig+0x170>)
 8006706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	3301      	adds	r3, #1
 800670e:	71fb      	strb	r3, [r7, #7]
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b06      	cmp	r3, #6
 8006714:	d9da      	bls.n	80066cc <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006716:	2300      	movs	r3, #0
 8006718:	71fb      	strb	r3, [r7, #7]
 800671a:	e076      	b.n	800680a <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	4413      	add	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <activateConfig+0x168>)
 800672c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006730:	b29b      	uxth	r3, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
 8006736:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 8006738:	2301      	movs	r3, #1
 800673a:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 800673c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	dd05      	ble.n	8006750 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 8006744:	4b38      	ldr	r3, [pc, #224]	; (8006828 <activateConfig+0x168>)
 8006746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800674a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800674e:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 8006750:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	da03      	bge.n	8006760 <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006758:	4b33      	ldr	r3, [pc, #204]	; (8006828 <activateConfig+0x168>)
 800675a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800675e:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 8006760:	4b31      	ldr	r3, [pc, #196]	; (8006828 <activateConfig+0x168>)
 8006762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	4413      	add	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006776:	492c      	ldr	r1, [pc, #176]	; (8006828 <activateConfig+0x168>)
 8006778:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800677c:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006780:	4929      	ldr	r1, [pc, #164]	; (8006828 <activateConfig+0x168>)
 8006782:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006786:	460d      	mov	r5, r1
 8006788:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800678c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006790:	fb04 f101 	mul.w	r1, r4, r1
 8006794:	fb01 f405 	mul.w	r4, r1, r5
 8006798:	79b9      	ldrb	r1, [r7, #6]
 800679a:	79bd      	ldrb	r5, [r7, #6]
 800679c:	fb05 f101 	mul.w	r1, r5, r1
 80067a0:	fb94 f1f1 	sdiv	r1, r4, r1
 80067a4:	4401      	add	r1, r0
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4922      	ldr	r1, [pc, #136]	; (8006834 <activateConfig+0x174>)
 80067ac:	fb81 0103 	smull	r0, r1, r1, r3
 80067b0:	1089      	asrs	r1, r1, #2
 80067b2:	17db      	asrs	r3, r3, #31
 80067b4:	1acb      	subs	r3, r1, r3
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	b211      	sxth	r1, r2
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <activateConfig+0x178>)
 80067c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 80067c6:	4b1d      	ldr	r3, [pc, #116]	; (800683c <activateConfig+0x17c>)
 80067c8:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 80067cc:	4b1b      	ldr	r3, [pc, #108]	; (800683c <activateConfig+0x17c>)
 80067ce:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80067d2:	4619      	mov	r1, r3
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <activateConfig+0x17c>)
 80067d6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80067da:	1acb      	subs	r3, r1, r3
 80067dc:	79f9      	ldrb	r1, [r7, #7]
 80067de:	4816      	ldr	r0, [pc, #88]	; (8006838 <activateConfig+0x178>)
 80067e0:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4915      	ldr	r1, [pc, #84]	; (8006840 <activateConfig+0x180>)
 80067ea:	fb81 0103 	smull	r0, r1, r1, r3
 80067ee:	1189      	asrs	r1, r1, #6
 80067f0:	17db      	asrs	r3, r3, #31
 80067f2:	1acb      	subs	r3, r1, r3
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4413      	add	r3, r2
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	b211      	sxth	r1, r2
 80067fe:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <activateConfig+0x178>)
 8006800:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	3301      	adds	r3, #1
 8006808:	71fb      	strb	r3, [r7, #7]
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	2b0b      	cmp	r3, #11
 800680e:	d985      	bls.n	800671c <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <activateConfig+0x168>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f006 fcf1 	bl	800d1fc <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 800681a:	f002 fb4f 	bl	8008ebc <gpsSetPIDs>
#endif
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bdb0      	pop	{r4, r5, r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e08 	.word	0x20000e08
 800682c:	68db8bad 	.word	0x68db8bad
 8006830:	20001700 	.word	0x20001700
 8006834:	66666667 	.word	0x66666667
 8006838:	20001710 	.word	0x20001710
 800683c:	2000089c 	.word	0x2000089c
 8006840:	10624dd3 	.word	0x10624dd3

08006844 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
    readEEPROM();
 8006848:	f7ff fef0 	bl	800662c <readEEPROM>
    activateConfig();
 800684c:	f7ff ff38 	bl	80066c0 <activateConfig>
}
 8006850:	bf00      	nop
 8006852:	bd80      	pop	{r7, pc}

08006854 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	460a      	mov	r2, r1
 800685e:	71fb      	strb	r3, [r7, #7]
 8006860:	4613      	mov	r3, r2
 8006862:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 800686c:	224c      	movs	r2, #76	; 0x4c
 800686e:	4b36      	ldr	r3, [pc, #216]	; (8006948 <writeEEPROM+0xf4>)
 8006870:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 8006872:	4b35      	ldr	r3, [pc, #212]	; (8006948 <writeEEPROM+0xf4>)
 8006874:	f240 526c 	movw	r2, #1388	; 0x56c
 8006878:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 800687a:	4b33      	ldr	r3, [pc, #204]	; (8006948 <writeEEPROM+0xf4>)
 800687c:	22be      	movs	r2, #190	; 0xbe
 800687e:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <writeEEPROM+0xf4>)
 8006882:	22ef      	movs	r2, #239	; 0xef
 8006884:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006888:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <writeEEPROM+0xf4>)
 800688a:	2200      	movs	r2, #0
 800688c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006890:	79bb      	ldrb	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d011      	beq.n	80068ba <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006896:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <writeEEPROM+0xf4>)
 8006898:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800689c:	461a      	mov	r2, r3
 800689e:	f44f 739c 	mov.w	r3, #312	; 0x138
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80068aa:	4a27      	ldr	r2, [pc, #156]	; (8006948 <writeEEPROM+0xf4>)
 80068ac:	4413      	add	r3, r2
 80068ae:	f44f 729c 	mov.w	r2, #312	; 0x138
 80068b2:	4926      	ldr	r1, [pc, #152]	; (800694c <writeEEPROM+0xf8>)
 80068b4:	4618      	mov	r0, r3
 80068b6:	f01c f807 	bl	80228c8 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 80068ba:	4b23      	ldr	r3, [pc, #140]	; (8006948 <writeEEPROM+0xf4>)
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	e007      	b.n	80068d0 <writeEEPROM+0x7c>
        chk ^= *p;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	7dbb      	ldrb	r3, [r7, #22]
 80068c6:	4053      	eors	r3, r2
 80068c8:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <writeEEPROM+0xfc>)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d3f3      	bcc.n	80068c0 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <writeEEPROM+0xf4>)
 80068da:	7dbb      	ldrb	r3, [r7, #22]
 80068dc:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80068e0:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <writeEEPROM+0x100>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	214c      	movs	r1, #76	; 0x4c
 80068e6:	4618      	mov	r0, r3
 80068e8:	f014 f815 	bl	801a916 <pifStorage_Open>
 80068ec:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80068f4:	4b17      	ldr	r3, [pc, #92]	; (8006954 <writeEEPROM+0x100>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f240 536c 	movw	r3, #1388	; 0x56c
 80068fc:	4a12      	ldr	r2, [pc, #72]	; (8006948 <writeEEPROM+0xf4>)
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	f014 f82d 	bl	801a95e <pifStorage_Write>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <writeEEPROM+0xba>
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	f083 0301 	eor.w	r3, r3, #1
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d104      	bne.n	8006924 <writeEEPROM+0xd0>
 800691a:	f7ff fe1f 	bl	800655c <validEEPROM>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <writeEEPROM+0xd6>
        failureMode(10);
 8006924:	200a      	movs	r0, #10
 8006926:	f7fb fb5c 	bl	8001fe2 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 800692a:	f7ff ff8b 	bl	8006844 <loadAndActivateConfig>
    if (b)
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 8006934:	2201      	movs	r2, #1
 8006936:	2114      	movs	r1, #20
 8006938:	200f      	movs	r0, #15
 800693a:	f005 fc2b 	bl	800c194 <blinkLED>
}
 800693e:	bf00      	nop
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	2000089c 	.word	0x2000089c
 800694c:	20000e08 	.word	0x20000e08
 8006950:	20000e08 	.word	0x20000e08
 8006954:	20000f44 	.word	0x20000f44

08006958 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <checkFirstTime+0xa0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f013 ffa6 	bl	801a8bc <pifStorage_IsFormat>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <checkFirstTime+0xa0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f013 ffab 	bl	801a8d6 <pifStorage_Format>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <checkFirstTime+0x32>
 8006986:	2300      	movs	r3, #0
 8006988:	e032      	b.n	80069f0 <checkFirstTime+0x98>
        alloc = false;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	e00b      	b.n	80069a8 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <checkFirstTime+0xa0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	214c      	movs	r1, #76	; 0x4c
 8006996:	4618      	mov	r0, r3
 8006998:	f013 ffbd 	bl	801a916 <pifStorage_Open>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	f083 0301 	eor.w	r3, r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <checkFirstTime+0xa0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f240 526c 	movw	r2, #1388	; 0x56c
 80069bc:	214c      	movs	r1, #76	; 0x4c
 80069be:	4618      	mov	r0, r3
 80069c0:	f013 ff96 	bl	801a8f0 <pifStorage_Create>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <checkFirstTime+0x76>
 80069ca:	2300      	movs	r3, #0
 80069cc:	e010      	b.n	80069f0 <checkFirstTime+0x98>
        reset = true;
 80069ce:	2301      	movs	r3, #1
 80069d0:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 80069d2:	f7ff fdc3 	bl	800655c <validEEPROM>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <checkFirstTime+0x8a>
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <checkFirstTime+0x96>
        resetConf();
 80069e2:	f000 f80b 	bl	80069fc <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 80069e6:	2100      	movs	r1, #0
 80069e8:	2000      	movs	r0, #0
 80069ea:	f7ff ff33 	bl	8006854 <writeEEPROM>
    }
    return true;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000f44 	.word	0x20000f44

080069fc <resetConf>:

// Default settings
static void resetConf(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8006a02:	4ac7      	ldr	r2, [pc, #796]	; (8006d20 <resetConf+0x324>)
 8006a04:	1d3b      	adds	r3, r7, #4
 8006a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a0a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 8006a0e:	f240 526c 	movw	r2, #1388	; 0x56c
 8006a12:	2100      	movs	r1, #0
 8006a14:	48c3      	ldr	r0, [pc, #780]	; (8006d24 <resetConf+0x328>)
 8006a16:	f01b ff65 	bl	80228e4 <memset>
    memset(&cfg, 0, sizeof(config_t));
 8006a1a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006a1e:	2100      	movs	r1, #0
 8006a20:	48c1      	ldr	r0, [pc, #772]	; (8006d28 <resetConf+0x32c>)
 8006a22:	f01b ff5f 	bl	80228e4 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 8006a26:	224c      	movs	r2, #76	; 0x4c
 8006a28:	4bbe      	ldr	r3, [pc, #760]	; (8006d24 <resetConf+0x328>)
 8006a2a:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 8006a2c:	4bbd      	ldr	r3, [pc, #756]	; (8006d24 <resetConf+0x328>)
 8006a2e:	2203      	movs	r2, #3
 8006a30:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 8006a32:	f000 fb2d 	bl	8007090 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 8006a36:	4bbd      	ldr	r3, [pc, #756]	; (8006d2c <resetConf+0x330>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <resetConf+0x48>
 8006a3e:	4bbb      	ldr	r3, [pc, #748]	; (8006d2c <resetConf+0x330>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 8006a44:	4bb7      	ldr	r3, [pc, #732]	; (8006d24 <resetConf+0x328>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006a4c:	4bb5      	ldr	r3, [pc, #724]	; (8006d24 <resetConf+0x328>)
 8006a4e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a52:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 8006a56:	4bb3      	ldr	r3, [pc, #716]	; (8006d24 <resetConf+0x328>)
 8006a58:	22fa      	movs	r2, #250	; 0xfa
 8006a5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006a5e:	4bb1      	ldr	r3, [pc, #708]	; (8006d24 <resetConf+0x328>)
 8006a60:	222a      	movs	r2, #42	; 0x2a
 8006a62:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 8006a66:	4baf      	ldr	r3, [pc, #700]	; (8006d24 <resetConf+0x328>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006a6e:	4bad      	ldr	r3, [pc, #692]	; (8006d24 <resetConf+0x328>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006a76:	4bab      	ldr	r3, [pc, #684]	; (8006d24 <resetConf+0x328>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006a7e:	4ba9      	ldr	r3, [pc, #676]	; (8006d24 <resetConf+0x328>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006a86:	4ba7      	ldr	r3, [pc, #668]	; (8006d24 <resetConf+0x328>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006a8e:	4ba5      	ldr	r3, [pc, #660]	; (8006d24 <resetConf+0x328>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006a96:	4ba3      	ldr	r3, [pc, #652]	; (8006d24 <resetConf+0x328>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006a9e:	4ba1      	ldr	r3, [pc, #644]	; (8006d24 <resetConf+0x328>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006aa6:	4b9f      	ldr	r3, [pc, #636]	; (8006d24 <resetConf+0x328>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006aae:	4b9d      	ldr	r3, [pc, #628]	; (8006d24 <resetConf+0x328>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006ab6:	4b9b      	ldr	r3, [pc, #620]	; (8006d24 <resetConf+0x328>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006abe:	4b99      	ldr	r3, [pc, #612]	; (8006d24 <resetConf+0x328>)
 8006ac0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006ac4:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006ac8:	4b96      	ldr	r3, [pc, #600]	; (8006d24 <resetConf+0x328>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006ad0:	4b94      	ldr	r3, [pc, #592]	; (8006d24 <resetConf+0x328>)
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006ad8:	4b92      	ldr	r3, [pc, #584]	; (8006d24 <resetConf+0x328>)
 8006ada:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ade:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006ae2:	4b90      	ldr	r3, [pc, #576]	; (8006d24 <resetConf+0x328>)
 8006ae4:	226e      	movs	r2, #110	; 0x6e
 8006ae6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006aea:	4b8e      	ldr	r3, [pc, #568]	; (8006d24 <resetConf+0x328>)
 8006aec:	222b      	movs	r2, #43	; 0x2b
 8006aee:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006af2:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <resetConf+0x328>)
 8006af4:	2221      	movs	r2, #33	; 0x21
 8006af6:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006afa:	4b8a      	ldr	r3, [pc, #552]	; (8006d24 <resetConf+0x328>)
 8006afc:	2223      	movs	r2, #35	; 0x23
 8006afe:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006b02:	4b88      	ldr	r3, [pc, #544]	; (8006d24 <resetConf+0x328>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006b0a:	4b86      	ldr	r3, [pc, #536]	; (8006d24 <resetConf+0x328>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006b12:	4b84      	ldr	r3, [pc, #528]	; (8006d24 <resetConf+0x328>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006b1a:	4b82      	ldr	r3, [pc, #520]	; (8006d24 <resetConf+0x328>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006b22:	4b80      	ldr	r3, [pc, #512]	; (8006d24 <resetConf+0x328>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006b2a:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <resetConf+0x328>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006b32:	4b7c      	ldr	r3, [pc, #496]	; (8006d24 <resetConf+0x328>)
 8006b34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b38:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006b3c:	4b79      	ldr	r3, [pc, #484]	; (8006d24 <resetConf+0x328>)
 8006b3e:	f240 424c 	movw	r2, #1100	; 0x44c
 8006b42:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006b46:	4b77      	ldr	r3, [pc, #476]	; (8006d24 <resetConf+0x328>)
 8006b48:	f240 726c 	movw	r2, #1900	; 0x76c
 8006b4c:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006b50:	4b74      	ldr	r3, [pc, #464]	; (8006d24 <resetConf+0x328>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006b58:	4b72      	ldr	r3, [pc, #456]	; (8006d24 <resetConf+0x328>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006b60:	4b70      	ldr	r3, [pc, #448]	; (8006d24 <resetConf+0x328>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006b68:	4b6e      	ldr	r3, [pc, #440]	; (8006d24 <resetConf+0x328>)
 8006b6a:	f240 427e 	movw	r2, #1150	; 0x47e
 8006b6e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006b72:	4b6c      	ldr	r3, [pc, #432]	; (8006d24 <resetConf+0x328>)
 8006b74:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b78:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006b7c:	4b69      	ldr	r3, [pc, #420]	; (8006d24 <resetConf+0x328>)
 8006b7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b82:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006b86:	4b67      	ldr	r3, [pc, #412]	; (8006d24 <resetConf+0x328>)
 8006b88:	f240 527e 	movw	r2, #1406	; 0x57e
 8006b8c:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006b90:	4b64      	ldr	r3, [pc, #400]	; (8006d24 <resetConf+0x328>)
 8006b92:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006b96:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006b9a:	4b62      	ldr	r3, [pc, #392]	; (8006d24 <resetConf+0x328>)
 8006b9c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006ba0:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006ba4:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <resetConf+0x328>)
 8006ba6:	2232      	movs	r2, #50	; 0x32
 8006ba8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006bac:	4b5d      	ldr	r3, [pc, #372]	; (8006d24 <resetConf+0x328>)
 8006bae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006bb2:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	; (8006d24 <resetConf+0x328>)
 8006bb8:	2232      	movs	r2, #50	; 0x32
 8006bba:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006bbe:	4b59      	ldr	r3, [pc, #356]	; (8006d24 <resetConf+0x328>)
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006bc6:	4b57      	ldr	r3, [pc, #348]	; (8006d24 <resetConf+0x328>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006bce:	4b55      	ldr	r3, [pc, #340]	; (8006d24 <resetConf+0x328>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006bd6:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <resetConf+0x328>)
 8006bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bdc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006be0:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <resetConf+0x328>)
 8006be2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006be6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006bea:	4b4e      	ldr	r3, [pc, #312]	; (8006d24 <resetConf+0x328>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006bf2:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <resetConf+0x328>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006bfa:	4b4a      	ldr	r3, [pc, #296]	; (8006d24 <resetConf+0x328>)
 8006bfc:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006c00:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006c02:	4b48      	ldr	r3, [pc, #288]	; (8006d24 <resetConf+0x328>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006c08:	4b46      	ldr	r3, [pc, #280]	; (8006d24 <resetConf+0x328>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006c10:	4b44      	ldr	r3, [pc, #272]	; (8006d24 <resetConf+0x328>)
 8006c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c16:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006c1a:	4b42      	ldr	r3, [pc, #264]	; (8006d24 <resetConf+0x328>)
 8006c1c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006c20:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006c24:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <resetConf+0x328>)
 8006c26:	2208      	movs	r2, #8
 8006c28:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006c2c:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <resetConf+0x32c>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006c32:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <resetConf+0x32c>)
 8006c34:	2228      	movs	r2, #40	; 0x28
 8006c36:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006c38:	4b3b      	ldr	r3, [pc, #236]	; (8006d28 <resetConf+0x32c>)
 8006c3a:	221e      	movs	r2, #30
 8006c3c:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006c3e:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <resetConf+0x32c>)
 8006c40:	2217      	movs	r2, #23
 8006c42:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006c44:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <resetConf+0x32c>)
 8006c46:	2228      	movs	r2, #40	; 0x28
 8006c48:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <resetConf+0x32c>)
 8006c4c:	221e      	movs	r2, #30
 8006c4e:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006c50:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <resetConf+0x32c>)
 8006c52:	2217      	movs	r2, #23
 8006c54:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <resetConf+0x32c>)
 8006c58:	2255      	movs	r2, #85	; 0x55
 8006c5a:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006c5c:	4b32      	ldr	r3, [pc, #200]	; (8006d28 <resetConf+0x32c>)
 8006c5e:	222d      	movs	r2, #45	; 0x2d
 8006c60:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <resetConf+0x32c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006c68:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <resetConf+0x32c>)
 8006c6a:	2232      	movs	r2, #50	; 0x32
 8006c6c:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <resetConf+0x32c>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006c74:	4b2c      	ldr	r3, [pc, #176]	; (8006d28 <resetConf+0x32c>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006c7a:	4b2b      	ldr	r3, [pc, #172]	; (8006d28 <resetConf+0x32c>)
 8006c7c:	220b      	movs	r2, #11
 8006c7e:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006c80:	4b29      	ldr	r3, [pc, #164]	; (8006d28 <resetConf+0x32c>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006c86:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <resetConf+0x32c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006c8c:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <resetConf+0x32c>)
 8006c8e:	2214      	movs	r2, #20
 8006c90:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006c92:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <resetConf+0x32c>)
 8006c94:	2208      	movs	r2, #8
 8006c96:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006c98:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <resetConf+0x32c>)
 8006c9a:	222d      	movs	r2, #45	; 0x2d
 8006c9c:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <resetConf+0x32c>)
 8006ca0:	220e      	movs	r2, #14
 8006ca2:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006ca4:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <resetConf+0x32c>)
 8006ca6:	2214      	movs	r2, #20
 8006ca8:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006caa:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <resetConf+0x32c>)
 8006cac:	2250      	movs	r2, #80	; 0x50
 8006cae:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <resetConf+0x32c>)
 8006cb2:	225a      	movs	r2, #90	; 0x5a
 8006cb4:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <resetConf+0x32c>)
 8006cb8:	220a      	movs	r2, #10
 8006cba:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <resetConf+0x32c>)
 8006cbe:	2264      	movs	r2, #100	; 0x64
 8006cc0:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <resetConf+0x32c>)
 8006cc4:	2228      	movs	r2, #40	; 0x28
 8006cc6:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006cc8:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <resetConf+0x32c>)
 8006cca:	2278      	movs	r2, #120	; 0x78
 8006ccc:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <resetConf+0x32c>)
 8006cd0:	222d      	movs	r2, #45	; 0x2d
 8006cd2:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <resetConf+0x32c>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <resetConf+0x32c>)
 8006cdc:	225a      	movs	r2, #90	; 0x5a
 8006cde:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <resetConf+0x32c>)
 8006ce2:	2241      	movs	r2, #65	; 0x41
 8006ce4:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006ce8:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <resetConf+0x32c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006cf0:	4b0d      	ldr	r3, [pc, #52]	; (8006d28 <resetConf+0x32c>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <resetConf+0x32c>)
 8006cfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <resetConf+0x32c>)
 8006d02:	2232      	movs	r2, #50	; 0x32
 8006d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <resetConf+0x32c>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <resetConf+0x32c>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006d16:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <resetConf+0x32c>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006d1c:	e008      	b.n	8006d30 <resetConf+0x334>
 8006d1e:	bf00      	nop
 8006d20:	08026ea0 	.word	0x08026ea0
 8006d24:	2000089c 	.word	0x2000089c
 8006d28:	20000e08 	.word	0x20000e08
 8006d2c:	20001684 	.word	0x20001684
    cfg.locked_in = 0;
 8006d30:	4b8e      	ldr	r3, [pc, #568]	; (8006f6c <resetConf+0x570>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006d38:	4b8c      	ldr	r3, [pc, #560]	; (8006f6c <resetConf+0x570>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006d3e:	4b8b      	ldr	r3, [pc, #556]	; (8006f6c <resetConf+0x570>)
 8006d40:	2204      	movs	r2, #4
 8006d42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006d46:	4b89      	ldr	r3, [pc, #548]	; (8006f6c <resetConf+0x570>)
 8006d48:	2228      	movs	r2, #40	; 0x28
 8006d4a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006d4e:	4b87      	ldr	r3, [pc, #540]	; (8006f6c <resetConf+0x570>)
 8006d50:	2228      	movs	r2, #40	; 0x28
 8006d52:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006d56:	4b85      	ldr	r3, [pc, #532]	; (8006f6c <resetConf+0x570>)
 8006d58:	2215      	movs	r2, #21
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006d5e:	4b83      	ldr	r3, [pc, #524]	; (8006f6c <resetConf+0x570>)
 8006d60:	4a83      	ldr	r2, [pc, #524]	; (8006f70 <resetConf+0x574>)
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006d64:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <resetConf+0x570>)
 8006d66:	4a83      	ldr	r2, [pc, #524]	; (8006f74 <resetConf+0x578>)
 8006d68:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006d6a:	4b80      	ldr	r3, [pc, #512]	; (8006f6c <resetConf+0x570>)
 8006d6c:	4a82      	ldr	r2, [pc, #520]	; (8006f78 <resetConf+0x57c>)
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006d70:	4b7e      	ldr	r3, [pc, #504]	; (8006f6c <resetConf+0x570>)
 8006d72:	4a82      	ldr	r2, [pc, #520]	; (8006f7c <resetConf+0x580>)
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006d76:	4b7d      	ldr	r3, [pc, #500]	; (8006f6c <resetConf+0x570>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006d7e:	4b7b      	ldr	r3, [pc, #492]	; (8006f6c <resetConf+0x570>)
 8006d80:	2219      	movs	r2, #25
 8006d82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006d86:	487e      	ldr	r0, [pc, #504]	; (8006f80 <resetConf+0x584>)
 8006d88:	f7ff fbba 	bl	8006500 <parseRcChannels>
    cfg.deadband = 0;
 8006d8c:	4b77      	ldr	r3, [pc, #476]	; (8006f6c <resetConf+0x570>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006d94:	4b75      	ldr	r3, [pc, #468]	; (8006f6c <resetConf+0x570>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006d9c:	4b73      	ldr	r3, [pc, #460]	; (8006f6c <resetConf+0x570>)
 8006d9e:	2228      	movs	r2, #40	; 0x28
 8006da0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006da4:	4b71      	ldr	r3, [pc, #452]	; (8006f6c <resetConf+0x570>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006dac:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <resetConf+0x570>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006db4:	4b6d      	ldr	r3, [pc, #436]	; (8006f6c <resetConf+0x570>)
 8006db6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006dba:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006dbe:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <resetConf+0x570>)
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006dc6:	4b69      	ldr	r3, [pc, #420]	; (8006f6c <resetConf+0x570>)
 8006dc8:	22c8      	movs	r2, #200	; 0xc8
 8006dca:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006dce:	4b67      	ldr	r3, [pc, #412]	; (8006f6c <resetConf+0x570>)
 8006dd0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006dd4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006dd8:	4b64      	ldr	r3, [pc, #400]	; (8006f6c <resetConf+0x570>)
 8006dda:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006dde:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e032      	b.n	8006e4e <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006de8:	4960      	ldr	r1, [pc, #384]	; (8006f6c <resetConf+0x570>)
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	440b      	add	r3, r1
 8006df6:	33b8      	adds	r3, #184	; 0xb8
 8006df8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006dfc:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006dfe:	495b      	ldr	r1, [pc, #364]	; (8006f6c <resetConf+0x570>)
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	440b      	add	r3, r1
 8006e0c:	33ba      	adds	r3, #186	; 0xba
 8006e0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e12:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006e14:	4955      	ldr	r1, [pc, #340]	; (8006f6c <resetConf+0x570>)
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	440b      	add	r3, r1
 8006e22:	33bc      	adds	r3, #188	; 0xbc
 8006e24:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e28:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006e2a:	1d3a      	adds	r2, r7, #4
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f993 0000 	ldrsb.w	r0, [r3]
 8006e34:	494d      	ldr	r1, [pc, #308]	; (8006f6c <resetConf+0x570>)
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	440b      	add	r3, r1
 8006e42:	33be      	adds	r3, #190	; 0xbe
 8006e44:	4602      	mov	r2, r0
 8006e46:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	ddc9      	ble.n	8006de8 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006e54:	4b45      	ldr	r3, [pc, #276]	; (8006f6c <resetConf+0x570>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006e5c:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <resetConf+0x570>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006e64:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <resetConf+0x570>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006e6c:	4b3f      	ldr	r3, [pc, #252]	; (8006f6c <resetConf+0x570>)
 8006e6e:	22c8      	movs	r2, #200	; 0xc8
 8006e70:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006e74:	4b3d      	ldr	r3, [pc, #244]	; (8006f6c <resetConf+0x570>)
 8006e76:	2214      	movs	r2, #20
 8006e78:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006e7c:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <resetConf+0x570>)
 8006e7e:	221e      	movs	r2, #30
 8006e80:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006e84:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <resetConf+0x570>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006e8c:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <resetConf+0x570>)
 8006e8e:	2264      	movs	r2, #100	; 0x64
 8006e90:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006e94:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <resetConf+0x570>)
 8006e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e9a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006e9e:	4b33      	ldr	r3, [pc, #204]	; (8006f6c <resetConf+0x570>)
 8006ea0:	2228      	movs	r2, #40	; 0x28
 8006ea2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006ea6:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <resetConf+0x570>)
 8006ea8:	2214      	movs	r2, #20
 8006eaa:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <resetConf+0x570>)
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <resetConf+0x570>)
 8006eb8:	220f      	movs	r2, #15
 8006eba:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <resetConf+0x570>)
 8006ec0:	220f      	movs	r2, #15
 8006ec2:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006ec6:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <resetConf+0x570>)
 8006ec8:	f240 726c 	movw	r2, #1900	; 0x76c
 8006ecc:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006ed0:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <resetConf+0x570>)
 8006ed2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ed6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <resetConf+0x570>)
 8006edc:	f240 5214 	movw	r2, #1300	; 0x514
 8006ee0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006ee4:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <resetConf+0x570>)
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006eec:	4b1f      	ldr	r3, [pc, #124]	; (8006f6c <resetConf+0x570>)
 8006eee:	2264      	movs	r2, #100	; 0x64
 8006ef0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <resetConf+0x570>)
 8006ef6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006efa:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006efe:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <resetConf+0x570>)
 8006f00:	2232      	movs	r2, #50	; 0x32
 8006f02:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006f06:	4b1f      	ldr	r3, [pc, #124]	; (8006f84 <resetConf+0x588>)
 8006f08:	2252      	movs	r2, #82	; 0x52
 8006f0a:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e00a      	b.n	8006f2a <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006f14:	4a1b      	ldr	r2, [pc, #108]	; (8006f84 <resetConf+0x588>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b0b      	cmp	r3, #11
 8006f2e:	ddf1      	ble.n	8006f14 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e011      	b.n	8006f5a <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006f44:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <resetConf+0x588>)
 8006f46:	4413      	add	r3, r2
 8006f48:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f4c:	4907      	ldr	r1, [pc, #28]	; (8006f6c <resetConf+0x570>)
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f01b fcba 	bl	80228c8 <memcpy>
    for (i = 0; i < 3; i++)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	ddea      	ble.n	8006f36 <resetConf+0x53a>
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000e08 	.word	0x20000e08
 8006f70:	3f19999a 	.word	0x3f19999a
 8006f74:	3f7c28f6 	.word	0x3f7c28f6
 8006f78:	3f770a3d 	.word	0x3f770a3d
 8006f7c:	40a00000 	.word	0x40a00000
 8006f80:	08026e8c 	.word	0x08026e8c
 8006f84:	2000089c 	.word	0x2000089c

08006f88 <sensors>:

bool sensors(uint32_t mask)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <sensors+0x28>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000f40 	.word	0x20000f40

08006fb4 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <sensorsSet+0x20>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	4a03      	ldr	r2, [pc, #12]	; (8006fd4 <sensorsSet+0x20>)
 8006fc6:	6013      	str	r3, [r2, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000f40 	.word	0x20000f40

08006fd8 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	43da      	mvns	r2, r3
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <sensorsClear+0x24>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <sensorsClear+0x24>)
 8006fec:	6013      	str	r3, [r2, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000f40 	.word	0x20000f40

08007000 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
    return enabledSensors;
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <sensorsMask+0x14>)
 8007006:	681b      	ldr	r3, [r3, #0]
}
 8007008:	4618      	mov	r0, r3
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000f40 	.word	0x20000f40

08007018 <feature>:

bool feature(uint32_t mask)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <feature+0x28>)
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4013      	ands	r3, r2
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	2000089c 	.word	0x2000089c

08007044 <featureSet>:

void featureSet(uint32_t mask)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <featureSet+0x20>)
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4313      	orrs	r3, r2
 8007054:	4a03      	ldr	r2, [pc, #12]	; (8007064 <featureSet+0x20>)
 8007056:	6093      	str	r3, [r2, #8]
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	2000089c 	.word	0x2000089c

08007068 <featureClear>:

void featureClear(uint32_t mask)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <featureClear+0x24>)
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	43db      	mvns	r3, r3
 8007078:	4013      	ands	r3, r2
 800707a:	4a04      	ldr	r2, [pc, #16]	; (800708c <featureClear+0x24>)
 800707c:	6093      	str	r3, [r2, #8]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	2000089c 	.word	0x2000089c

08007090 <featureClearAll>:

void featureClearAll()
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <featureClearAll+0x14>)
 8007096:	2200      	movs	r2, #0
 8007098:	609a      	str	r2, [r3, #8]
}
 800709a:	bf00      	nop
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	2000089c 	.word	0x2000089c

080070a8 <featureMask>:

uint32_t featureMask(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <featureMask+0x14>)
 80070ae:	689b      	ldr	r3, [r3, #8]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	2000089c 	.word	0x2000089c

080070c0 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <fw_nav_reset+0x5c>)
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 80070ce:	4b14      	ldr	r3, [pc, #80]	; (8007120 <fw_nav_reset+0x60>)
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <fw_nav_reset+0x64>)
 80070d8:	2200      	movs	r2, #0
 80070da:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 80070dc:	4b12      	ldr	r3, [pc, #72]	; (8007128 <fw_nav_reset+0x68>)
 80070de:	2200      	movs	r2, #0
 80070e0:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <fw_nav_reset+0x6c>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 80070e8:	2300      	movs	r3, #0
 80070ea:	71fb      	strb	r3, [r7, #7]
 80070ec:	e00c      	b.n	8007108 <fw_nav_reset+0x48>
        altHist[i] = 0;
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	4a0f      	ldr	r2, [pc, #60]	; (8007130 <fw_nav_reset+0x70>)
 80070f2:	2100      	movs	r1, #0
 80070f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	4a0e      	ldr	r2, [pc, #56]	; (8007134 <fw_nav_reset+0x74>)
 80070fc:	2100      	movs	r1, #0
 80070fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	3301      	adds	r3, #1
 8007106:	71fb      	strb	r3, [r7, #7]
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b04      	cmp	r3, #4
 800710c:	d9ef      	bls.n	80070ee <fw_nav_reset+0x2e>
    }
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20000f48 	.word	0x20000f48
 8007120:	20000f4c 	.word	0x20000f4c
 8007124:	20000f50 	.word	0x20000f50
 8007128:	20000f52 	.word	0x20000f52
 800712c:	20000f54 	.word	0x20000f54
 8007130:	20000f58 	.word	0x20000f58
 8007134:	20000f64 	.word	0x20000f64

08007138 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8007138:	b5b0      	push	{r4, r5, r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 800713e:	4b48      	ldr	r3, [pc, #288]	; (8007260 <fw_FlyTo+0x128>)
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	4a48      	ldr	r2, [pc, #288]	; (8007264 <fw_FlyTo+0x12c>)
 8007144:	fba2 2303 	umull	r2, r3, r2, r3
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	b29b      	uxth	r3, r3
 800714c:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2bb4      	cmp	r3, #180	; 0xb4
 8007152:	dd03      	ble.n	800715c <fw_FlyTo+0x24>
        holdHeading -= 360;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800715a:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <fw_FlyTo+0x130>)
 800715e:	edd3 7a00 	vldr	s15, [r3]
 8007162:	eddf 6a42 	vldr	s13, [pc, #264]	; 800726c <fw_FlyTo+0x134>
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b41      	ldr	r3, [pc, #260]	; (8007270 <fw_FlyTo+0x138>)
 800716c:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8007170:	ee07 3a90 	vmov	s15, r3
 8007174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007274 <fw_FlyTo+0x13c>
 800718e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007192:	ee17 0a90 	vmov	r0, s15
 8007196:	f7f9 f98b 	bl	80004b0 <__aeabi_f2d>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	ec43 2b10 	vmov	d0, r2, r3
 80071a2:	f01b fdd1 	bl	8022d48 <cos>
 80071a6:	ec53 2b10 	vmov	r2, r3, d0
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	f7f9 fcb9 	bl	8000b24 <__aeabi_d2f>
 80071b2:	4603      	mov	r3, r0
 80071b4:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007274 <fw_FlyTo+0x13c>
 80071c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c8:	ee17 0a90 	vmov	r0, s15
 80071cc:	f7f9 f970 	bl	80004b0 <__aeabi_f2d>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	ec43 2b10 	vmov	d0, r2, r3
 80071d8:	f01b fe0a 	bl	8022df0 <sin>
 80071dc:	ec55 4b10 	vmov	r4, r5, d0
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <fw_FlyTo+0x130>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f9 f963 	bl	80004b0 <__aeabi_f2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f9 f9b5 	bl	8000560 <__aeabi_dmul>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f7f9 fc91 	bl	8000b24 <__aeabi_d2f>
 8007202:	4603      	mov	r3, r0
 8007204:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 8007206:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <fw_FlyTo+0x140>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007212:	edd7 6a01 	vldr	s13, [r7, #4]
 8007216:	edd7 7a02 	vldr	s15, [r7, #8]
 800721a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800721e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007226:	ee17 2a90 	vmov	r2, s15
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <fw_FlyTo+0x140>)
 800722c:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <fw_FlyTo+0x140>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800723a:	edd7 6a00 	vldr	s13, [r7]
 800723e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800724a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <fw_FlyTo+0x140>)
 8007254:	605a      	str	r2, [r3, #4]
}
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bdb0      	pop	{r4, r5, r7, pc}
 800725e:	bf00      	nop
 8007260:	20001792 	.word	0x20001792
 8007264:	cccccccd 	.word	0xcccccccd
 8007268:	20000028 	.word	0x20000028
 800726c:	42b3a9fc 	.word	0x42b3a9fc
 8007270:	20000e08 	.word	0x20000e08
 8007274:	3c8efa35 	.word	0x3c8efa35
 8007278:	20001338 	.word	0x20001338

0800727c <fw_nav>:

void fw_nav(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 8007282:	4b56      	ldr	r3, [pc, #344]	; (80073dc <fw_nav+0x160>)
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 800728c:	4b54      	ldr	r3, [pc, #336]	; (80073e0 <fw_nav+0x164>)
 800728e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007292:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007294:	2300      	movs	r3, #0
 8007296:	80bb      	strh	r3, [r7, #4]
 8007298:	2300      	movs	r3, #0
 800729a:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 800729c:	4b51      	ldr	r3, [pc, #324]	; (80073e4 <fw_nav+0x168>)
 800729e:	88db      	ldrh	r3, [r3, #6]
 80072a0:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 80072a2:	4b51      	ldr	r3, [pc, #324]	; (80073e8 <fw_nav+0x16c>)
 80072a4:	881a      	ldrh	r2, [r3, #0]
 80072a6:	4b51      	ldr	r3, [pc, #324]	; (80073ec <fw_nav+0x170>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 80072b2:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <fw_nav+0x174>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	4b4c      	ldr	r3, [pc, #304]	; (80073ec <fw_nav+0x170>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 80072c4:	4b4b      	ldr	r3, [pc, #300]	; (80073f4 <fw_nav+0x178>)
 80072c6:	7cdb      	ldrb	r3, [r3, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <fw_nav+0x66>
 80072cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80072d0:	7f7b      	ldrb	r3, [r7, #29]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	da05      	bge.n	80072e2 <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 80072d6:	4b45      	ldr	r3, [pc, #276]	; (80073ec <fw_nav+0x170>)
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	7f7b      	ldrb	r3, [r7, #29]
 80072dc:	4413      	add	r3, r2
 80072de:	4a44      	ldr	r2, [pc, #272]	; (80073f0 <fw_nav+0x174>)
 80072e0:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 80072e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 fb10 	bl	8009914 <wrap_18000>
 80072f4:	4603      	mov	r3, r0
 80072f6:	4a40      	ldr	r2, [pc, #256]	; (80073f8 <fw_nav+0x17c>)
 80072f8:	fb82 1203 	smull	r1, r2, r2, r3
 80072fc:	1092      	asrs	r2, r2, #2
 80072fe:	17db      	asrs	r3, r3, #31
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 8007304:	2008      	movs	r0, #8
 8007306:	f7ff fe3f 	bl	8006f88 <sensors>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d024      	beq.n	800735a <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 8007310:	4b3a      	ldr	r3, [pc, #232]	; (80073fc <fw_nav+0x180>)
 8007312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007316:	4619      	mov	r1, r3
 8007318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800731c:	4a36      	ldr	r2, [pc, #216]	; (80073f8 <fw_nav+0x17c>)
 800731e:	fb82 0203 	smull	r0, r2, r2, r3
 8007322:	1092      	asrs	r2, r2, #2
 8007324:	17db      	asrs	r3, r3, #31
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	b21b      	sxth	r3, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	bfb8      	it	lt
 8007330:	425b      	neglt	r3, r3
 8007332:	2b0a      	cmp	r3, #10
 8007334:	dd0d      	ble.n	8007352 <fw_nav+0xd6>
 8007336:	4b32      	ldr	r3, [pc, #200]	; (8007400 <fw_nav+0x184>)
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	2bc8      	cmp	r3, #200	; 0xc8
 800733c:	d909      	bls.n	8007352 <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 800733e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007342:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <fw_nav+0x17c>)
 8007344:	fb82 1203 	smull	r1, r2, r2, r3
 8007348:	1092      	asrs	r2, r2, #2
 800734a:	17db      	asrs	r3, r3, #31
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007350:	e00c      	b.n	800736c <fw_nav+0xf0>
        else
            Current_Heading = heading;
 8007352:	4b2a      	ldr	r3, [pc, #168]	; (80073fc <fw_nav+0x180>)
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007358:	e008      	b.n	800736c <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 800735a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800735e:	4a26      	ldr	r2, [pc, #152]	; (80073f8 <fw_nav+0x17c>)
 8007360:	fb82 1203 	smull	r1, r2, r2, r3
 8007364:	1092      	asrs	r2, r2, #2
 8007366:	17db      	asrs	r3, r3, #31
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <fw_nav+0x188>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a25      	ldr	r2, [pc, #148]	; (8007408 <fw_nav+0x18c>)
 8007372:	fb82 1203 	smull	r1, r2, r2, r3
 8007376:	1152      	asrs	r2, r2, #5
 8007378:	17db      	asrs	r3, r3, #31
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b21a      	sxth	r2, r3
 800737e:	4b23      	ldr	r3, [pc, #140]	; (800740c <fw_nav+0x190>)
 8007380:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 8007382:	4b22      	ldr	r3, [pc, #136]	; (800740c <fw_nav+0x190>)
 8007384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007388:	b29a      	uxth	r2, r3
 800738a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	b29b      	uxth	r3, r3
 8007390:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 8007392:	8b3a      	ldrh	r2, [r7, #24]
 8007394:	8afb      	ldrh	r3, [r7, #22]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	b21a      	sxth	r2, r3
 800739c:	4b1c      	ldr	r3, [pc, #112]	; (8007410 <fw_nav+0x194>)
 800739e:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 80073a0:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <fw_nav+0x198>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <fw_nav+0x19c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	4a1c      	ldr	r2, [pc, #112]	; (800741c <fw_nav+0x1a0>)
 80073ac:	8812      	ldrh	r2, [r2, #0]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	f0c0 83e9 	bcc.w	8007b86 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <fw_nav+0x198>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a17      	ldr	r2, [pc, #92]	; (8007418 <fw_nav+0x19c>)
 80073ba:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 80073bc:	4b14      	ldr	r3, [pc, #80]	; (8007410 <fw_nav+0x194>)
 80073be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bfb8      	it	lt
 80073c6:	425b      	neglt	r3, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12a      	bne.n	8007424 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <fw_nav+0x164>)
 80073d0:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073d4:	b21a      	sxth	r2, r3
 80073d6:	4b12      	ldr	r3, [pc, #72]	; (8007420 <fw_nav+0x1a4>)
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e03f      	b.n	800745c <fw_nav+0x1e0>
 80073dc:	20001792 	.word	0x20001792
 80073e0:	20000e08 	.word	0x20000e08
 80073e4:	200016d4 	.word	0x200016d4
 80073e8:	20001786 	.word	0x20001786
 80073ec:	20001768 	.word	0x20001768
 80073f0:	20001774 	.word	0x20001774
 80073f4:	2000169c 	.word	0x2000169c
 80073f8:	66666667 	.word	0x66666667
 80073fc:	20001968 	.word	0x20001968
 8007400:	20001788 	.word	0x20001788
 8007404:	200013a0 	.word	0x200013a0
 8007408:	51eb851f 	.word	0x51eb851f
 800740c:	20000f70 	.word	0x20000f70
 8007410:	20000f72 	.word	0x20000f72
 8007414:	20001bcc 	.word	0x20001bcc
 8007418:	20000f74 	.word	0x20000f74
 800741c:	20000026 	.word	0x20000026
 8007420:	20000f78 	.word	0x20000f78
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007424:	4b99      	ldr	r3, [pc, #612]	; (800768c <fw_nav+0x410>)
 8007426:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800742a:	461a      	mov	r2, r3
 800742c:	4b98      	ldr	r3, [pc, #608]	; (8007690 <fw_nav+0x414>)
 800742e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007432:	4619      	mov	r1, r3
 8007434:	4b95      	ldr	r3, [pc, #596]	; (800768c <fw_nav+0x410>)
 8007436:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	4a92      	ldr	r2, [pc, #584]	; (800768c <fw_nav+0x410>)
 8007442:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 8007446:	4611      	mov	r1, r2
 8007448:	4a90      	ldr	r2, [pc, #576]	; (800768c <fw_nav+0x410>)
 800744a:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 800744e:	4618      	mov	r0, r3
 8007450:	f7fc fc80 	bl	8003d54 <constrain>
 8007454:	4603      	mov	r3, r0
 8007456:	b21a      	sxth	r2, r3
 8007458:	4b8e      	ldr	r3, [pc, #568]	; (8007694 <fw_nav+0x418>)
 800745a:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 800745c:	4b8e      	ldr	r3, [pc, #568]	; (8007698 <fw_nav+0x41c>)
 800745e:	7cdb      	ldrb	r3, [r3, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <fw_nav+0x1f8>
 8007464:	4b8a      	ldr	r3, [pc, #552]	; (8007690 <fw_nav+0x414>)
 8007466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800746a:	2b00      	cmp	r3, #0
 800746c:	db02      	blt.n	8007474 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 800746e:	4b8a      	ldr	r3, [pc, #552]	; (8007698 <fw_nav+0x41c>)
 8007470:	2200      	movs	r2, #0
 8007472:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 8007474:	4b88      	ldr	r3, [pc, #544]	; (8007698 <fw_nav+0x41c>)
 8007476:	79db      	ldrb	r3, [r3, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02c      	beq.n	80074d6 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 800747c:	4b86      	ldr	r3, [pc, #536]	; (8007698 <fw_nav+0x41c>)
 800747e:	7cdb      	ldrb	r3, [r3, #19]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d019      	beq.n	80074b8 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 8007484:	4b81      	ldr	r3, [pc, #516]	; (800768c <fw_nav+0x410>)
 8007486:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	0352      	lsls	r2, r2, #13
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	b29b      	uxth	r3, r3
 800749a:	b21a      	sxth	r2, r3
 800749c:	4b7c      	ldr	r3, [pc, #496]	; (8007690 <fw_nav+0x414>)
 800749e:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 80074a0:	4b7a      	ldr	r3, [pc, #488]	; (800768c <fw_nav+0x410>)
 80074a2:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80074a6:	b21a      	sxth	r2, r3
 80074a8:	4b7a      	ldr	r3, [pc, #488]	; (8007694 <fw_nav+0x418>)
 80074aa:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 80074ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80074b0:	2b18      	cmp	r3, #24
 80074b2:	dc01      	bgt.n	80074b8 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 80074b4:	2300      	movs	r3, #0
 80074b6:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 80074b8:	4b78      	ldr	r3, [pc, #480]	; (800769c <fw_nav+0x420>)
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	2b31      	cmp	r3, #49	; 0x31
 80074be:	d80a      	bhi.n	80074d6 <fw_nav+0x25a>
 80074c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80074c4:	7f7b      	ldrb	r3, [r7, #29]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	dd05      	ble.n	80074d6 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 80074ca:	4b75      	ldr	r3, [pc, #468]	; (80076a0 <fw_nav+0x424>)
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	7f7b      	ldrb	r3, [r7, #29]
 80074d0:	4413      	add	r3, r2
 80074d2:	4a74      	ldr	r2, [pc, #464]	; (80076a4 <fw_nav+0x428>)
 80074d4:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 80074d6:	4b70      	ldr	r3, [pc, #448]	; (8007698 <fw_nav+0x41c>)
 80074d8:	7c9b      	ldrb	r3, [r3, #18]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00e      	beq.n	80074fc <fw_nav+0x280>
 80074de:	4b6f      	ldr	r3, [pc, #444]	; (800769c <fw_nav+0x420>)
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	2b09      	cmp	r3, #9
 80074e4:	d80a      	bhi.n	80074fc <fw_nav+0x280>
            f.ARMED = 0;
 80074e6:	4b6c      	ldr	r3, [pc, #432]	; (8007698 <fw_nav+0x41c>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80074ec:	4b6a      	ldr	r3, [pc, #424]	; (8007698 <fw_nav+0x41c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <fw_nav+0x424>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	3305      	adds	r3, #5
 80074f8:	4a6a      	ldr	r2, [pc, #424]	; (80076a4 <fw_nav+0x428>)
 80074fa:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80074fc:	4b67      	ldr	r3, [pc, #412]	; (800769c <fw_nav+0x420>)
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b09      	cmp	r3, #9
 8007502:	d80e      	bhi.n	8007522 <fw_nav+0x2a6>
            navDiff *= 0.1f;
 8007504:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007510:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80076a8 <fw_nav+0x42c>
 8007514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800751c:	ee17 3a90 	vmov	r3, s15
 8007520:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 8007522:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007526:	2264      	movs	r2, #100	; 0x64
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	4618      	mov	r0, r3
 800752e:	f002 f9f1 	bl	8009914 <wrap_18000>
 8007532:	4603      	mov	r3, r0
 8007534:	4a5d      	ldr	r2, [pc, #372]	; (80076ac <fw_nav+0x430>)
 8007536:	fb82 1203 	smull	r1, r2, r2, r3
 800753a:	1152      	asrs	r2, r2, #5
 800753c:	17db      	asrs	r3, r3, #31
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 8007542:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfb8      	it	lt
 800754a:	425b      	neglt	r3, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	2baa      	cmp	r3, #170	; 0xaa
 8007550:	d901      	bls.n	8007556 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 8007552:	23af      	movs	r3, #175	; 0xaf
 8007554:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 8007556:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <fw_nav+0x434>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b56      	ldr	r3, [pc, #344]	; (80076b4 <fw_nav+0x438>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007568:	eddf 6a53 	vldr	s13, [pc, #332]	; 80076b8 <fw_nav+0x43c>
 800756c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007570:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 8007574:	4b4e      	ldr	r3, [pc, #312]	; (80076b0 <fw_nav+0x434>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a4e      	ldr	r2, [pc, #312]	; (80076b4 <fw_nav+0x438>)
 800757a:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 800757c:	4b44      	ldr	r3, [pc, #272]	; (8007690 <fw_nav+0x414>)
 800757e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfb8      	it	lt
 8007586:	425b      	neglt	r3, r3
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d809      	bhi.n	80075a2 <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 800758e:	4b4b      	ldr	r3, [pc, #300]	; (80076bc <fw_nav+0x440>)
 8007590:	ed93 7a00 	vldr	s14, [r3]
 8007594:	edd7 7a04 	vldr	s15, [r7, #16]
 8007598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759c:	4b47      	ldr	r3, [pc, #284]	; (80076bc <fw_nav+0x440>)
 800759e:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 80075a2:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <fw_nav+0x414>)
 80075a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	0092      	lsls	r2, r2, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	b21a      	sxth	r2, r3
 80075b6:	4b36      	ldr	r3, [pc, #216]	; (8007690 <fw_nav+0x414>)
 80075b8:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 80075ba:	4b35      	ldr	r3, [pc, #212]	; (8007690 <fw_nav+0x414>)
 80075bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075c8:	4b3d      	ldr	r3, [pc, #244]	; (80076c0 <fw_nav+0x444>)
 80075ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80075ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80075d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075da:	4b38      	ldr	r3, [pc, #224]	; (80076bc <fw_nav+0x440>)
 80075dc:	edd3 7a00 	vldr	s15, [r3]
 80075e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e4:	4b35      	ldr	r3, [pc, #212]	; (80076bc <fw_nav+0x440>)
 80075e6:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80075ea:	4b34      	ldr	r3, [pc, #208]	; (80076bc <fw_nav+0x440>)
 80075ec:	edd3 7a00 	vldr	s15, [r3]
 80075f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80075f8:	4932      	ldr	r1, [pc, #200]	; (80076c4 <fw_nav+0x448>)
 80075fa:	ee17 0a90 	vmov	r0, s15
 80075fe:	f7fc fba9 	bl	8003d54 <constrain>
 8007602:	ee07 0a90 	vmov	s15, r0
 8007606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800760a:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <fw_nav+0x440>)
 800760c:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 8007610:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <fw_nav+0x414>)
 8007612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007616:	b29a      	uxth	r2, r3
 8007618:	4b2b      	ldr	r3, [pc, #172]	; (80076c8 <fw_nav+0x44c>)
 800761a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800761e:	b29b      	uxth	r3, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	b29b      	uxth	r3, r3
 8007624:	b21b      	sxth	r3, r3
 8007626:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <fw_nav+0x414>)
 800762a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800762e:	4b26      	ldr	r3, [pc, #152]	; (80076c8 <fw_nav+0x44c>)
 8007630:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 8007632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	425b      	neglt	r3, r3
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b64      	cmp	r3, #100	; 0x64
 8007640:	d901      	bls.n	8007646 <fw_nav+0x3ca>
            delta[0] = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764c:	e00f      	b.n	800766e <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 800764e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007658:	491c      	ldr	r1, [pc, #112]	; (80076cc <fw_nav+0x450>)
 800765a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800765e:	4a1b      	ldr	r2, [pc, #108]	; (80076cc <fw_nav+0x450>)
 8007660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007668:	3301      	adds	r3, #1
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007672:	2b04      	cmp	r3, #4
 8007674:	d9eb      	bls.n	800764e <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 8007676:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800767a:	4b14      	ldr	r3, [pc, #80]	; (80076cc <fw_nav+0x450>)
 800767c:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <fw_nav+0x454>)
 8007680:	2200      	movs	r2, #0
 8007682:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768a:	e037      	b.n	80076fc <fw_nav+0x480>
 800768c:	20000e08 	.word	0x20000e08
 8007690:	20000f72 	.word	0x20000f72
 8007694:	20000f78 	.word	0x20000f78
 8007698:	2000169c 	.word	0x2000169c
 800769c:	20001782 	.word	0x20001782
 80076a0:	20001768 	.word	0x20001768
 80076a4:	20001774 	.word	0x20001774
 80076a8:	3dcccccd 	.word	0x3dcccccd
 80076ac:	51eb851f 	.word	0x51eb851f
 80076b0:	20001bcc 	.word	0x20001bcc
 80076b4:	20000f7c 	.word	0x20000f7c
 80076b8:	447a0000 	.word	0x447a0000
 80076bc:	20000f4c 	.word	0x20000f4c
 80076c0:	2000129c 	.word	0x2000129c
 80076c4:	fffffe0c 	.word	0xfffffe0c
 80076c8:	20000f50 	.word	0x20000f50
 80076cc:	20000f58 	.word	0x20000f58
 80076d0:	20000f80 	.word	0x20000f80
            ALT_deltaSum += altHist[i];
 80076d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d8:	4a64      	ldr	r2, [pc, #400]	; (800786c <fw_nav+0x5f0>)
 80076da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	4b63      	ldr	r3, [pc, #396]	; (8007870 <fw_nav+0x5f4>)
 80076e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	b21a      	sxth	r2, r3
 80076ee:	4b60      	ldr	r3, [pc, #384]	; (8007870 <fw_nav+0x5f4>)
 80076f0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f6:	3301      	adds	r3, #1
 80076f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007700:	2b04      	cmp	r3, #4
 8007702:	d9e7      	bls.n	80076d4 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 8007704:	4b5a      	ldr	r3, [pc, #360]	; (8007870 <fw_nav+0x5f4>)
 8007706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007712:	4b58      	ldr	r3, [pc, #352]	; (8007874 <fw_nav+0x5f8>)
 8007714:	edd3 7a02 	vldr	s15, [r3, #8]
 8007718:	ee67 6a27 	vmul.f32	s13, s14, s15
 800771c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	ee17 3a90 	vmov	r3, s15
 800772c:	b21a      	sxth	r2, r3
 800772e:	4b50      	ldr	r3, [pc, #320]	; (8007870 <fw_nav+0x5f4>)
 8007730:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 8007732:	4b51      	ldr	r3, [pc, #324]	; (8007878 <fw_nav+0x5fc>)
 8007734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007740:	4b4c      	ldr	r3, [pc, #304]	; (8007874 <fw_nav+0x5f8>)
 8007742:	edd3 7a00 	vldr	s15, [r3]
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800774e:	ee17 3a90 	vmov	r3, s15
 8007752:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 8007754:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007760:	4b46      	ldr	r3, [pc, #280]	; (800787c <fw_nav+0x600>)
 8007762:	edd3 7a00 	vldr	s15, [r3]
 8007766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800776a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800776e:	ee17 3a90 	vmov	r3, s15
 8007772:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 8007774:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfb8      	it	lt
 800777c:	425b      	neglt	r3, r3
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b03      	cmp	r3, #3
 8007782:	d809      	bhi.n	8007798 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 8007784:	4b3e      	ldr	r3, [pc, #248]	; (8007880 <fw_nav+0x604>)
 8007786:	ed93 7a00 	vldr	s14, [r3]
 800778a:	edd7 7a04 	vldr	s15, [r7, #16]
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	4b3b      	ldr	r3, [pc, #236]	; (8007880 <fw_nav+0x604>)
 8007794:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800779a:	461a      	mov	r2, r3
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	4413      	add	r3, r2
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 80077a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077b2:	4b34      	ldr	r3, [pc, #208]	; (8007884 <fw_nav+0x608>)
 80077b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80077b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80077c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077c4:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <fw_nav+0x604>)
 80077c6:	edd3 7a00 	vldr	s15, [r3]
 80077ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077ce:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <fw_nav+0x604>)
 80077d0:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 80077d4:	4b2a      	ldr	r3, [pc, #168]	; (8007880 <fw_nav+0x604>)
 80077d6:	edd3 7a00 	vldr	s15, [r3]
 80077da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80077e2:	4929      	ldr	r1, [pc, #164]	; (8007888 <fw_nav+0x60c>)
 80077e4:	ee17 0a90 	vmov	r0, s15
 80077e8:	f7fc fab4 	bl	8003d54 <constrain>
 80077ec:	ee07 0a90 	vmov	s15, r0
 80077f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <fw_nav+0x604>)
 80077f6:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80077fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077fc:	4b23      	ldr	r3, [pc, #140]	; (800788c <fw_nav+0x610>)
 80077fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	b29b      	uxth	r3, r3
 8007808:	b21b      	sxth	r3, r3
 800780a:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 800780c:	4a1f      	ldr	r2, [pc, #124]	; (800788c <fw_nav+0x610>)
 800780e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007810:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 8007812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	425b      	neglt	r3, r3
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <fw_nav+0x5aa>
            delta[1] = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007826:	2300      	movs	r3, #0
 8007828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782c:	e00f      	b.n	800784e <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 800782e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007838:	4915      	ldr	r1, [pc, #84]	; (8007890 <fw_nav+0x614>)
 800783a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <fw_nav+0x614>)
 8007840:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007848:	3301      	adds	r3, #1
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007852:	2b04      	cmp	r3, #4
 8007854:	d9eb      	bls.n	800782e <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 8007856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <fw_nav+0x614>)
 800785c:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <fw_nav+0x618>)
 8007860:	2200      	movs	r2, #0
 8007862:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007864:	2300      	movs	r3, #0
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786a:	e029      	b.n	80078c0 <fw_nav+0x644>
 800786c:	20000f58 	.word	0x20000f58
 8007870:	20000f80 	.word	0x20000f80
 8007874:	2000129c 	.word	0x2000129c
 8007878:	20000f72 	.word	0x20000f72
 800787c:	20000f4c 	.word	0x20000f4c
 8007880:	20000f48 	.word	0x20000f48
 8007884:	2000128c 	.word	0x2000128c
 8007888:	fffffe0c 	.word	0xfffffe0c
 800788c:	20000f52 	.word	0x20000f52
 8007890:	20000f64 	.word	0x20000f64
 8007894:	20000f82 	.word	0x20000f82
            NAV_deltaSum += navDif[i];
 8007898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800789c:	4abc      	ldr	r2, [pc, #752]	; (8007b90 <fw_nav+0x914>)
 800789e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	4bbb      	ldr	r3, [pc, #748]	; (8007b94 <fw_nav+0x918>)
 80078a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4413      	add	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	b21a      	sxth	r2, r3
 80078b2:	4bb8      	ldr	r3, [pc, #736]	; (8007b94 <fw_nav+0x918>)
 80078b4:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80078b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ba:	3301      	adds	r3, #1
 80078bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d9e7      	bls.n	8007898 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 80078c8:	4bb2      	ldr	r3, [pc, #712]	; (8007b94 <fw_nav+0x918>)
 80078ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078d6:	4bb0      	ldr	r3, [pc, #704]	; (8007b98 <fw_nav+0x91c>)
 80078d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80078dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80078e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80078e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078ec:	ee17 3a90 	vmov	r3, s15
 80078f0:	b21a      	sxth	r2, r3
 80078f2:	4ba8      	ldr	r3, [pc, #672]	; (8007b94 <fw_nav+0x918>)
 80078f4:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80078f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007902:	4ba5      	ldr	r3, [pc, #660]	; (8007b98 <fw_nav+0x91c>)
 8007904:	edd3 7a00 	vldr	s15, [r3]
 8007908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007910:	ee17 3a90 	vmov	r3, s15
 8007914:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 8007916:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007922:	4b9e      	ldr	r3, [pc, #632]	; (8007b9c <fw_nav+0x920>)
 8007924:	edd3 7a00 	vldr	s15, [r3]
 8007928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800792c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007930:	ee17 3a90 	vmov	r3, s15
 8007934:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 8007936:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800793a:	4a99      	ldr	r2, [pc, #612]	; (8007ba0 <fw_nav+0x924>)
 800793c:	fb82 1203 	smull	r1, r2, r2, r3
 8007940:	1092      	asrs	r2, r2, #2
 8007942:	17db      	asrs	r3, r3, #31
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b21b      	sxth	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	4b96      	ldr	r3, [pc, #600]	; (8007ba4 <fw_nav+0x928>)
 800794c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007950:	461a      	mov	r2, r3
 8007952:	f06f 0309 	mvn.w	r3, #9
 8007956:	fb03 f102 	mul.w	r1, r3, r2
 800795a:	4b92      	ldr	r3, [pc, #584]	; (8007ba4 <fw_nav+0x928>)
 800795c:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007960:	461a      	mov	r2, r3
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	461a      	mov	r2, r3
 800796c:	f7fc f9f2 	bl	8003d54 <constrain>
 8007970:	4603      	mov	r3, r0
 8007972:	b29a      	uxth	r2, r3
 8007974:	4b8c      	ldr	r3, [pc, #560]	; (8007ba8 <fw_nav+0x92c>)
 8007976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800797a:	b29b      	uxth	r3, r3
 800797c:	4413      	add	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	b21a      	sxth	r2, r3
 8007982:	4b8a      	ldr	r3, [pc, #552]	; (8007bac <fw_nav+0x930>)
 8007984:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007986:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800798a:	4a85      	ldr	r2, [pc, #532]	; (8007ba0 <fw_nav+0x924>)
 800798c:	fb82 1203 	smull	r1, r2, r2, r3
 8007990:	1092      	asrs	r2, r2, #2
 8007992:	17db      	asrs	r3, r3, #31
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	b21b      	sxth	r3, r3
 8007998:	4618      	mov	r0, r3
 800799a:	4b82      	ldr	r3, [pc, #520]	; (8007ba4 <fw_nav+0x928>)
 800799c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 80079a0:	461a      	mov	r2, r3
 80079a2:	f06f 0309 	mvn.w	r3, #9
 80079a6:	fb03 f102 	mul.w	r1, r3, r2
 80079aa:	4b7e      	ldr	r3, [pc, #504]	; (8007ba4 <fw_nav+0x928>)
 80079ac:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 80079b0:	461a      	mov	r2, r3
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	461a      	mov	r2, r3
 80079bc:	f7fc f9ca 	bl	8003d54 <constrain>
 80079c0:	4603      	mov	r3, r0
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	4b73      	ldr	r3, [pc, #460]	; (8007b94 <fw_nav+0x918>)
 80079c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	b21a      	sxth	r2, r3
 80079d2:	4b76      	ldr	r3, [pc, #472]	; (8007bac <fw_nav+0x930>)
 80079d4:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 80079d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079da:	4a71      	ldr	r2, [pc, #452]	; (8007ba0 <fw_nav+0x924>)
 80079dc:	fb82 1203 	smull	r1, r2, r2, r3
 80079e0:	1092      	asrs	r2, r2, #2
 80079e2:	17db      	asrs	r3, r3, #31
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	4618      	mov	r0, r3
 80079ea:	4b6e      	ldr	r3, [pc, #440]	; (8007ba4 <fw_nav+0x928>)
 80079ec:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80079f0:	461a      	mov	r2, r3
 80079f2:	f06f 0309 	mvn.w	r3, #9
 80079f6:	fb03 f102 	mul.w	r1, r3, r2
 80079fa:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <fw_nav+0x928>)
 80079fc:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007a00:	461a      	mov	r2, r3
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f7fc f9a2 	bl	8003d54 <constrain>
 8007a10:	4603      	mov	r3, r0
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	4b5f      	ldr	r3, [pc, #380]	; (8007b94 <fw_nav+0x918>)
 8007a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	b21a      	sxth	r2, r3
 8007a22:	4b62      	ldr	r3, [pc, #392]	; (8007bac <fw_nav+0x930>)
 8007a24:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 8007a26:	4b62      	ldr	r3, [pc, #392]	; (8007bb0 <fw_nav+0x934>)
 8007a28:	7c5b      	ldrb	r3, [r3, #17]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d016      	beq.n	8007a5c <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 8007a2e:	4b5f      	ldr	r3, [pc, #380]	; (8007bac <fw_nav+0x930>)
 8007a30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a34:	4618      	mov	r0, r3
 8007a36:	4b5b      	ldr	r3, [pc, #364]	; (8007ba4 <fw_nav+0x928>)
 8007a38:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007a3c:	4259      	negs	r1, r3
 8007a3e:	4b59      	ldr	r3, [pc, #356]	; (8007ba4 <fw_nav+0x928>)
 8007a40:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007a44:	461a      	mov	r2, r3
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7fc f980 	bl	8003d54 <constrain>
 8007a54:	4603      	mov	r3, r0
 8007a56:	b21a      	sxth	r2, r3
 8007a58:	4b54      	ldr	r3, [pc, #336]	; (8007bac <fw_nav+0x930>)
 8007a5a:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007a5c:	4b54      	ldr	r3, [pc, #336]	; (8007bb0 <fw_nav+0x934>)
 8007a5e:	7cdb      	ldrb	r3, [r3, #19]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11b      	bne.n	8007a9c <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 8007a64:	4b51      	ldr	r3, [pc, #324]	; (8007bac <fw_nav+0x930>)
 8007a66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	4b51      	ldr	r3, [pc, #324]	; (8007bb4 <fw_nav+0x938>)
 8007a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfb8      	it	lt
 8007a76:	425b      	neglt	r3, r3
 8007a78:	b299      	uxth	r1, r3
 8007a7a:	4b4a      	ldr	r3, [pc, #296]	; (8007ba4 <fw_nav+0x928>)
 8007a7c:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007a80:	484d      	ldr	r0, [pc, #308]	; (8007bb8 <fw_nav+0x93c>)
 8007a82:	fba0 0303 	umull	r0, r3, r0, r3
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	fb11 f303 	smulbb	r3, r1, r3
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	4b44      	ldr	r3, [pc, #272]	; (8007bac <fw_nav+0x930>)
 8007a9a:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <fw_nav+0x938>)
 8007a9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ab6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007aba:	2100      	movs	r1, #0
 8007abc:	ee17 0a90 	vmov	r0, s15
 8007ac0:	f7fc f948 	bl	8003d54 <constrain>
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <fw_nav+0x940>)
 8007ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	b28b      	uxth	r3, r1
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	b21a      	sxth	r2, r3
 8007ad6:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <fw_nav+0x940>)
 8007ad8:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007ada:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <fw_nav+0x944>)
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ae4:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007af0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007bc4 <fw_nav+0x948>
 8007af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007afc:	ee17 3a90 	vmov	r3, s15
 8007b00:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007b02:	4b2f      	ldr	r3, [pc, #188]	; (8007bc0 <fw_nav+0x944>)
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007b0a:	d305      	bcc.n	8007b18 <fw_nav+0x89c>
 8007b0c:	4b2c      	ldr	r3, [pc, #176]	; (8007bc0 <fw_nav+0x944>)
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	f240 2226 	movw	r2, #550	; 0x226
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d90a      	bls.n	8007b2e <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <fw_nav+0x94c>)
 8007b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4413      	add	r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	b21a      	sxth	r2, r3
 8007b2a:	4b27      	ldr	r3, [pc, #156]	; (8007bc8 <fw_nav+0x94c>)
 8007b2c:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007b2e:	4b26      	ldr	r3, [pc, #152]	; (8007bc8 <fw_nav+0x94c>)
 8007b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc f90a 	bl	8003d54 <constrain>
 8007b40:	4603      	mov	r3, r0
 8007b42:	b21a      	sxth	r2, r3
 8007b44:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <fw_nav+0x94c>)
 8007b46:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007b48:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <fw_nav+0x940>)
 8007b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	4b1d      	ldr	r3, [pc, #116]	; (8007bc8 <fw_nav+0x94c>)
 8007b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4413      	add	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	b21a      	sxth	r2, r3
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <fw_nav+0x940>)
 8007b60:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007b62:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <fw_nav+0x940>)
 8007b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <fw_nav+0x928>)
 8007b6c:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007b70:	4619      	mov	r1, r3
 8007b72:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <fw_nav+0x928>)
 8007b74:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f7fc f8eb 	bl	8003d54 <constrain>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	b21a      	sxth	r2, r3
 8007b82:	4b0e      	ldr	r3, [pc, #56]	; (8007bbc <fw_nav+0x940>)
 8007b84:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007b86:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <fw_nav+0x934>)
 8007b88:	78db      	ldrb	r3, [r3, #3]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d122      	bne.n	8007bd4 <fw_nav+0x958>
 8007b8e:	e01d      	b.n	8007bcc <fw_nav+0x950>
 8007b90:	20000f64 	.word	0x20000f64
 8007b94:	20000f82 	.word	0x20000f82
 8007b98:	2000128c 	.word	0x2000128c
 8007b9c:	20000f48 	.word	0x20000f48
 8007ba0:	66666667 	.word	0x66666667
 8007ba4:	20000e08 	.word	0x20000e08
 8007ba8:	20000f80 	.word	0x20000f80
 8007bac:	2000178c 	.word	0x2000178c
 8007bb0:	2000169c 	.word	0x2000169c
 8007bb4:	20001444 	.word	0x20001444
 8007bb8:	51eb851f 	.word	0x51eb851f
 8007bbc:	20000f78 	.word	0x20000f78
 8007bc0:	20001788 	.word	0x20001788
 8007bc4:	3dcccccd 	.word	0x3dcccccd
 8007bc8:	20000f54 	.word	0x20000f54
 8007bcc:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <fw_nav+0x9ac>)
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <fw_nav+0x968>
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <fw_nav+0x9ac>)
 8007bd6:	7a9b      	ldrb	r3, [r3, #10]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00f      	beq.n	8007bfc <fw_nav+0x980>
 8007bdc:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <fw_nav+0x9ac>)
 8007bde:	7c9b      	ldrb	r3, [r3, #18]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007be4:	4a11      	ldr	r2, [pc, #68]	; (8007c2c <fw_nav+0x9b0>)
 8007be6:	8b7b      	ldrh	r3, [r7, #26]
 8007be8:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <fw_nav+0x9b4>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007bf0:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <fw_nav+0x9b4>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007bf6:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <fw_nav+0x9b4>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <fw_nav+0x9b0>)
 8007bfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <fw_nav+0x9b8>)
 8007c04:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <fw_nav+0x9b8>)
 8007c08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <fw_nav+0x9b4>)
 8007c10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	b21a      	sxth	r2, r3
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <fw_nav+0x9b8>)
 8007c1e:	809a      	strh	r2, [r3, #4]
}
 8007c20:	bf00      	nop
 8007c22:	3728      	adds	r7, #40	; 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	2000169c 	.word	0x2000169c
 8007c2c:	20000f78 	.word	0x20000f78
 8007c30:	2000178c 	.word	0x2000178c
 8007c34:	200016f8 	.word	0x200016f8

08007c38 <gpsSetState>:
static PifGpsUblox gps_ublox;
static uint8_t gps_receive = 0;


static void gpsSetState(uint8_t state)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007c42:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <gpsSetState+0x38>)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <gpsSetState+0x38>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007c4e:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <gpsSetState+0x3c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a07      	ldr	r2, [pc, #28]	; (8007c70 <gpsSetState+0x38>)
 8007c54:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <gpsSetState+0x38>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <gpsSetState+0x38>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	761a      	strb	r2, [r3, #24]
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000f84 	.word	0x20000f84
 8007c74:	20001bcc 	.word	0x20001bcc

08007c78 <_evtGpsNmeaReceive>:

static BOOL _evtGpsNmeaReceive(PifGps *p_owner, PifGpsNmeaMsgId msg_id)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
	switch (msg_id) {
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d002      	beq.n	8007c90 <_evtGpsNmeaReceive+0x18>
 8007c8a:	2b0a      	cmp	r3, #10
 8007c8c:	d047      	beq.n	8007d1e <_evtGpsNmeaReceive+0xa6>
 8007c8e:	e072      	b.n	8007d76 <_evtGpsNmeaReceive+0xfe>
	case PIF_GPS_NMEA_MSG_ID_GGA:
	    f.GPS_FIX = p_owner->_fix;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4b40      	ldr	r3, [pc, #256]	; (8007da0 <_evtGpsNmeaReceive+0x128>)
 8007ca0:	72da      	strb	r2, [r3, #11]
	    if (f.GPS_FIX) {
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <_evtGpsNmeaReceive+0x128>)
 8007ca4:	7adb      	ldrb	r3, [r3, #11]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d031      	beq.n	8007d0e <_evtGpsNmeaReceive+0x96>
	        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007cb0:	a339      	add	r3, pc, #228	; (adr r3, 8007d98 <_evtGpsNmeaReceive+0x120>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f7f8 fc53 	bl	8000560 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7f8 fee7 	bl	8000a94 <__aeabi_d2iz>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4a36      	ldr	r2, [pc, #216]	; (8007da4 <_evtGpsNmeaReceive+0x12c>)
 8007cca:	6013      	str	r3, [r2, #0]
	        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007cd2:	a331      	add	r3, pc, #196	; (adr r3, 8007d98 <_evtGpsNmeaReceive+0x120>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fc42 	bl	8000560 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f7f8 fed6 	bl	8000a94 <__aeabi_d2iz>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4a2e      	ldr	r2, [pc, #184]	; (8007da4 <_evtGpsNmeaReceive+0x12c>)
 8007cec:	6053      	str	r3, [r2, #4]
	        GPS_numSat = p_owner->_num_sat;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007cf4:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <_evtGpsNmeaReceive+0x130>)
 8007cf6:	701a      	strb	r2, [r3, #0]
	        GPS_altitude = p_owner->_altitude;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	f7f8 feef 	bl	8000ae4 <__aeabi_d2uiz>
 8007d06:	4603      	mov	r3, r0
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	4b28      	ldr	r3, [pc, #160]	; (8007dac <_evtGpsNmeaReceive+0x134>)
 8007d0c:	801a      	strh	r2, [r3, #0]
	    }
	    gps_receive |= 1;
 8007d0e:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d1a:	701a      	strb	r2, [r3, #0]
		break;
 8007d1c:	e02b      	b.n	8007d76 <_evtGpsNmeaReceive+0xfe>

	case PIF_GPS_NMEA_MSG_ID_RMC:
	    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <_evtGpsNmeaReceive+0x13c>)
 8007d2a:	f7f8 fd43 	bl	80007b4 <__aeabi_ddiv>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4610      	mov	r0, r2
 8007d34:	4619      	mov	r1, r3
 8007d36:	f7f8 fed5 	bl	8000ae4 <__aeabi_d2uiz>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <_evtGpsNmeaReceive+0x140>)
 8007d40:	801a      	strh	r2, [r3, #0]
	    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <_evtGpsNmeaReceive+0x13c>)
 8007d4e:	f7f8 fc07 	bl	8000560 <__aeabi_dmul>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4610      	mov	r0, r2
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7f8 fec3 	bl	8000ae4 <__aeabi_d2uiz>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <_evtGpsNmeaReceive+0x144>)
 8007d64:	801a      	strh	r2, [r3, #0]
	    gps_receive |= 2;
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d72:	701a      	strb	r2, [r3, #0]
		break;
 8007d74:	bf00      	nop
	}
	if (gps_receive != 3) return FALSE;
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d001      	beq.n	8007d82 <_evtGpsNmeaReceive+0x10a>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e003      	b.n	8007d8a <_evtGpsNmeaReceive+0x112>

	gps_receive = 0;
 8007d82:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <_evtGpsNmeaReceive+0x138>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007d88:	2301      	movs	r3, #1
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	f3af 8000 	nop.w
 8007d98:	00000000 	.word	0x00000000
 8007d9c:	416312d0 	.word	0x416312d0
 8007da0:	2000169c 	.word	0x2000169c
 8007da4:	20001760 	.word	0x20001760
 8007da8:	20001780 	.word	0x20001780
 8007dac:	20001786 	.word	0x20001786
 8007db0:	20001268 	.word	0x20001268
 8007db4:	40240000 	.word	0x40240000
 8007db8:	20001788 	.word	0x20001788
 8007dbc:	20001792 	.word	0x20001792

08007dc0 <_evtGpsUbxReceive>:

static BOOL _evtGpsUbxReceive(PifGpsUblox* p_owner, PifGpsUbxPacket* p_packet)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	PifGps* p_parent = &p_owner->_gps;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	60fb      	str	r3, [r7, #12]

    switch (p_packet->class_id) {
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d00e      	beq.n	8007df6 <_evtGpsUbxReceive+0x36>
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	f040 8090 	bne.w	8007efe <_evtGpsUbxReceive+0x13e>
	case GUCI_ACK:
		switch (p_packet->msg_id) {
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	f200 808a 	bhi.w	8007efc <_evtGpsUbxReceive+0x13c>
		case GUMI_ACK_ACK:
		case GUMI_ACK_NAK:
			gpsData.cfg_result = p_packet->msg_id;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	461a      	mov	r2, r3
 8007dee:	4b4e      	ldr	r3, [pc, #312]	; (8007f28 <_evtGpsUbxReceive+0x168>)
 8007df0:	61da      	str	r2, [r3, #28]
			return FALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e08d      	b.n	8007f12 <_evtGpsUbxReceive+0x152>
		}
		break;

    case GUCI_NAV:
		switch (p_packet->msg_id) {
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d002      	beq.n	8007e04 <_evtGpsUbxReceive+0x44>
 8007dfe:	2b12      	cmp	r3, #18
 8007e00:	d04f      	beq.n	8007ea2 <_evtGpsUbxReceive+0xe2>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
				gps_receive |= 2;
				break;
		}
		break;
 8007e02:	e07c      	b.n	8007efe <_evtGpsUbxReceive+0x13e>
				f.GPS_FIX = p_parent->_fix;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b46      	ldr	r3, [pc, #280]	; (8007f2c <_evtGpsUbxReceive+0x16c>)
 8007e14:	72da      	strb	r2, [r3, #11]
				if (f.GPS_FIX) {
 8007e16:	4b45      	ldr	r3, [pc, #276]	; (8007f2c <_evtGpsUbxReceive+0x16c>)
 8007e18:	7adb      	ldrb	r3, [r3, #11]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d031      	beq.n	8007e82 <_evtGpsUbxReceive+0xc2>
					GPS_coord[LAT] = p_parent->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007e24:	a33e      	add	r3, pc, #248	; (adr r3, 8007f20 <_evtGpsUbxReceive+0x160>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fb99 	bl	8000560 <__aeabi_dmul>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	f7f8 fe2d 	bl	8000a94 <__aeabi_d2iz>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4a3c      	ldr	r2, [pc, #240]	; (8007f30 <_evtGpsUbxReceive+0x170>)
 8007e3e:	6013      	str	r3, [r2, #0]
					GPS_coord[LON] = p_parent->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007e46:	a336      	add	r3, pc, #216	; (adr r3, 8007f20 <_evtGpsUbxReceive+0x160>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 fb88 	bl	8000560 <__aeabi_dmul>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	f7f8 fe1c 	bl	8000a94 <__aeabi_d2iz>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4a34      	ldr	r2, [pc, #208]	; (8007f30 <_evtGpsUbxReceive+0x170>)
 8007e60:	6053      	str	r3, [r2, #4]
					GPS_numSat = p_parent->_num_sat;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007e68:	4b32      	ldr	r3, [pc, #200]	; (8007f34 <_evtGpsUbxReceive+0x174>)
 8007e6a:	701a      	strb	r2, [r3, #0]
					GPS_altitude = p_parent->_altitude;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	f7f8 fe35 	bl	8000ae4 <__aeabi_d2uiz>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	4b2e      	ldr	r3, [pc, #184]	; (8007f38 <_evtGpsUbxReceive+0x178>)
 8007e80:	801a      	strh	r2, [r3, #0]
				GPS_HorizontalAcc = p_parent->_horizontal_acc;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	4a2d      	ldr	r2, [pc, #180]	; (8007f3c <_evtGpsUbxReceive+0x17c>)
 8007e88:	6013      	str	r3, [r2, #0]
				GPS_VerticalAcc = p_parent->_vertical_acc;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	4a2c      	ldr	r2, [pc, #176]	; (8007f40 <_evtGpsUbxReceive+0x180>)
 8007e90:	6013      	str	r3, [r2, #0]
				gps_receive |= 1;
 8007e92:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007e9e:	701a      	strb	r2, [r3, #0]
				break;
 8007ea0:	e02b      	b.n	8007efa <_evtGpsUbxReceive+0x13a>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <_evtGpsUbxReceive+0x188>)
 8007eae:	f7f8 fc81 	bl	80007b4 <__aeabi_ddiv>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7f8 fe13 	bl	8000ae4 <__aeabi_d2uiz>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <_evtGpsUbxReceive+0x18c>)
 8007ec4:	801a      	strh	r2, [r3, #0]
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <_evtGpsUbxReceive+0x188>)
 8007ed2:	f7f8 fb45 	bl	8000560 <__aeabi_dmul>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7f8 fe01 	bl	8000ae4 <__aeabi_d2uiz>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <_evtGpsUbxReceive+0x190>)
 8007ee8:	801a      	strh	r2, [r3, #0]
				gps_receive |= 2;
 8007eea:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f043 0302 	orr.w	r3, r3, #2
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007ef6:	701a      	strb	r2, [r3, #0]
				break;
 8007ef8:	bf00      	nop
		break;
 8007efa:	e000      	b.n	8007efe <_evtGpsUbxReceive+0x13e>
		break;
 8007efc:	bf00      	nop
    }
	if (gps_receive != 3) return FALSE;
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d001      	beq.n	8007f0a <_evtGpsUbxReceive+0x14a>
 8007f06:	2300      	movs	r3, #0
 8007f08:	e003      	b.n	8007f12 <_evtGpsUbxReceive+0x152>

	gps_receive = 0;
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <_evtGpsUbxReceive+0x184>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007f10:	2301      	movs	r3, #1
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w
 8007f20:	00000000 	.word	0x00000000
 8007f24:	416312d0 	.word	0x416312d0
 8007f28:	20000f84 	.word	0x20000f84
 8007f2c:	2000169c 	.word	0x2000169c
 8007f30:	20001760 	.word	0x20001760
 8007f34:	20001780 	.word	0x20001780
 8007f38:	20001786 	.word	0x20001786
 8007f3c:	20001830 	.word	0x20001830
 8007f40:	20001834 	.word	0x20001834
 8007f44:	20001268 	.word	0x20001268
 8007f48:	40240000 	.word	0x40240000
 8007f4c:	20001788 	.word	0x20001788
 8007f50:	20001792 	.word	0x20001792

08007f54 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	(void)p_owner;

    if (f.GPS_FIX) {
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <_evtGpsReceive+0xb0>)
 8007f5e:	7adb      	ldrb	r3, [r3, #11]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d017      	beq.n	8007f94 <_evtGpsReceive+0x40>
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007f64:	2004      	movs	r0, #4
 8007f66:	f7ff f80f 	bl	8006f88 <sensors>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f083 0301 	eor.w	r3, r3, #1
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00e      	beq.n	8007f94 <_evtGpsReceive+0x40>
 8007f76:	4b23      	ldr	r3, [pc, #140]	; (8008004 <_evtGpsReceive+0xb0>)
 8007f78:	7c1b      	ldrb	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <_evtGpsReceive+0x40>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007f7e:	4b22      	ldr	r3, [pc, #136]	; (8008008 <_evtGpsReceive+0xb4>)
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	4b21      	ldr	r3, [pc, #132]	; (800800c <_evtGpsReceive+0xb8>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2264      	movs	r2, #100	; 0x64
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <_evtGpsReceive+0xbc>)
 8007f92:	6013      	str	r3, [r2, #0]
    }

    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007f94:	2008      	movs	r0, #8
 8007f96:	f7fe fff7 	bl	8006f88 <sensors>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f083 0301 	eor.w	r3, r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d021      	beq.n	8007fea <_evtGpsReceive+0x96>
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <_evtGpsReceive+0xc0>)
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	2b64      	cmp	r3, #100	; 0x64
 8007fac:	d91d      	bls.n	8007fea <_evtGpsReceive+0x96>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007fae:	4b1a      	ldr	r3, [pc, #104]	; (8008018 <_evtGpsReceive+0xc4>)
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fca9 	bl	8009914 <wrap_18000>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <_evtGpsReceive+0xc8>)
 8007fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8007fca:	1092      	asrs	r2, r2, #2
 8007fcc:	17db      	asrs	r3, r3, #31
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <_evtGpsReceive+0xc4>)
 8007fd4:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <_evtGpsReceive+0xc4>)
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	4a11      	ldr	r2, [pc, #68]	; (8008020 <_evtGpsReceive+0xcc>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	08db      	lsrs	r3, r3, #3
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	b21a      	sxth	r2, r3
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <_evtGpsReceive+0xd0>)
 8007fe8:	801a      	strh	r2, [r3, #0]
    }

    pifTask_SetTrigger(g_task_gps);
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <_evtGpsReceive+0xd4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f00c fb22 	bl	8014638 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <_evtGpsReceive+0xd8>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	761a      	strb	r2, [r3, #24]
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	2000169c 	.word	0x2000169c
 8008008:	20001786 	.word	0x20001786
 800800c:	20001768 	.word	0x20001768
 8008010:	20001408 	.word	0x20001408
 8008014:	20001788 	.word	0x20001788
 8008018:	20001792 	.word	0x20001792
 800801c:	66666667 	.word	0x66666667
 8008020:	cccccccd 	.word	0xcccccccd
 8008024:	20001968 	.word	0x20001968
 8008028:	200014fc 	.word	0x200014fc
 800802c:	20000f84 	.word	0x20000f84

08008030 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    serialStopReceiveFunc(&core.gpsport->comm);
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <_evtGpsTimeout+0x3c>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	3304      	adds	r3, #4
 800803e:	4618      	mov	r0, r3
 8008040:	f7fa fb62 	bl	8002708 <serialStopReceiveFunc>
    gps_ublox._gps.evt_nmea_receive = NULL;
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <_evtGpsTimeout+0x40>)
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
    gps_ublox.evt_ubx_receive = NULL;
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <_evtGpsTimeout+0x40>)
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
    sensorsClear(SENSOR_GPS);
 8008050:	2020      	movs	r0, #32
 8008052:	f7fe ffc1 	bl	8006fd8 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8008056:	2006      	movs	r0, #6
 8008058:	f7ff fdee 	bl	8007c38 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 800805c:	4905      	ldr	r1, [pc, #20]	; (8008074 <_evtGpsTimeout+0x44>)
 800805e:	2002      	movs	r0, #2
 8008060:	f00b f9c0 	bl	80133e4 <pifLog_Print>
#endif
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200007e4 	.word	0x200007e4
 8008070:	20000fa8 	.word	0x20000fa8
 8008074:	08026ea8 	.word	0x08026ea8

08008078 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	460a      	mov	r2, r1
 8008082:	71fb      	strb	r3, [r7, #7]
 8008084:	4613      	mov	r3, r2
 8008086:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8008088:	2000      	movs	r0, #0
 800808a:	f7ff fdd5 	bl	8007c38 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 800808e:	4a21      	ldr	r2, [pc, #132]	; (8008114 <gpsInit+0x9c>)
 8008090:	79bb      	ldrb	r3, [r7, #6]
 8008092:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8008094:	4b20      	ldr	r3, [pc, #128]	; (8008118 <gpsInit+0xa0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <gpsInit+0x9c>)
 800809a:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 800809c:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <gpsInit+0x9c>)
 800809e:	2200      	movs	r2, #0
 80080a0:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 80080a2:	f000 ff0b 	bl	8008ebc <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 10);    // signal GPS "thread" to initialize when it gets to it, 5ms
 80080a6:	79f8      	ldrb	r0, [r7, #7]
 80080a8:	230a      	movs	r3, #10
 80080aa:	2203      	movs	r2, #3
 80080ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80080b0:	f7fa f97e 	bl	80023b0 <uartOpen>
 80080b4:	4603      	mov	r3, r0
 80080b6:	4a19      	ldr	r2, [pc, #100]	; (800811c <gpsInit+0xa4>)
 80080b8:	6093      	str	r3, [r2, #8]
    if (!core.gpsport) goto fail;
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <gpsInit+0xa4>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01d      	beq.n	80080fe <gpsInit+0x86>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 80080c2:	2100      	movs	r1, #0
 80080c4:	4816      	ldr	r0, [pc, #88]	; (8008120 <gpsInit+0xa8>)
 80080c6:	f00f f983 	bl	80173d0 <pifGpsUblox_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d018      	beq.n	8008102 <gpsInit+0x8a>
    pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 80080d0:	4b12      	ldr	r3, [pc, #72]	; (800811c <gpsInit+0xa4>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4811      	ldr	r0, [pc, #68]	; (8008120 <gpsInit+0xa8>)
 80080da:	f00f f9d3 	bl	8017484 <pifGpsUblox_AttachComm>
    gps_ublox._gps.evt_receive = _evtGpsReceive;
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <gpsInit+0xa8>)
 80080e0:	4a10      	ldr	r2, [pc, #64]	; (8008124 <gpsInit+0xac>)
 80080e2:	60da      	str	r2, [r3, #12]

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_INITIALIZING);
 80080e4:	2001      	movs	r0, #1
 80080e6:	f7ff fda7 	bl	8007c38 <gpsSetState>

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 80080ea:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <gpsInit+0xb0>)
 80080ec:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	dd0b      	ble.n	800810c <gpsInit+0x94>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <gpsInit+0xb0>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

    return;
 80080fc:	e006      	b.n	800810c <gpsInit+0x94>
    if (!core.gpsport) goto fail;
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <gpsInit+0x8c>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8008102:	bf00      	nop

fail:    
    sensorsClear(SENSOR_GPS);
 8008104:	2020      	movs	r0, #32
 8008106:	f7fe ff67 	bl	8006fd8 <sensorsClear>
 800810a:	e000      	b.n	800810e <gpsInit+0x96>
    return;
 800810c:	bf00      	nop
}
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000f84 	.word	0x20000f84
 8008118:	20001bcc 	.word	0x20001bcc
 800811c:	200007e4 	.word	0x200007e4
 8008120:	20000fa8 	.word	0x20000fa8
 8008124:	08007f55 	.word	0x08007f55
 8008128:	2000089c 	.word	0x2000089c

0800812c <gpsInitNmea>:

static void gpsInitNmea(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
    gps_ublox._gps.evt_nmea_receive = _evtGpsNmeaReceive;
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <gpsInitNmea+0x24>)
 8008132:	4a08      	ldr	r2, [pc, #32]	; (8008154 <gpsInitNmea+0x28>)
 8008134:	609a      	str	r2, [r3, #8]
    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008136:	4b08      	ldr	r3, [pc, #32]	; (8008158 <gpsInitNmea+0x2c>)
 8008138:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800813c:	4907      	ldr	r1, [pc, #28]	; (800815c <gpsInitNmea+0x30>)
 800813e:	4808      	ldr	r0, [pc, #32]	; (8008160 <gpsInitNmea+0x34>)
 8008140:	f00d fdaa 	bl	8015c98 <pifGps_SetTimeout>
    gpsSetState(GPS_RECEIVINGDATA);
 8008144:	2005      	movs	r0, #5
 8008146:	f7ff fd77 	bl	8007c38 <gpsSetState>
}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000fa8 	.word	0x20000fa8
 8008154:	08007c79 	.word	0x08007c79
 8008158:	08008031 	.word	0x08008031
 800815c:	200014d0 	.word	0x200014d0
 8008160:	20000fb0 	.word	0x20000fb0

08008164 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af02      	add	r7, sp, #8
    uint8_t i;
    int line = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 50) {
 800816e:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <gpsInitUblox+0x254>)
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b31      	cmp	r3, #49	; 0x31
 8008174:	dd45      	ble.n	8008202 <gpsInitUblox+0x9e>
		if (gpsData.cfg_result == GUMI_ACK_ACK) {
 8008176:	4b90      	ldr	r3, [pc, #576]	; (80083b8 <gpsInitUblox+0x254>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d118      	bne.n	80081b0 <gpsInitUblox+0x4c>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "GPS(%u) ACK:%u T=%lu", __LINE__, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 800817e:	4b8e      	ldr	r3, [pc, #568]	; (80083b8 <gpsInitUblox+0x254>)
 8008180:	68d9      	ldr	r1, [r3, #12]
 8008182:	4b8e      	ldr	r3, [pc, #568]	; (80083bc <gpsInitUblox+0x258>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b8c      	ldr	r3, [pc, #560]	; (80083b8 <gpsInitUblox+0x254>)
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	460b      	mov	r3, r1
 8008190:	f240 1227 	movw	r2, #295	; 0x127
 8008194:	498a      	ldr	r1, [pc, #552]	; (80083c0 <gpsInitUblox+0x25c>)
 8008196:	2002      	movs	r0, #2
 8008198:	f00b f9b2 	bl	8013500 <pifLog_Printf>
#endif
	  		gpsData.step = (gpsData.step - 50) + 1;
 800819c:	4b86      	ldr	r3, [pc, #536]	; (80083b8 <gpsInitUblox+0x254>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	3b31      	subs	r3, #49	; 0x31
 80081a2:	4a85      	ldr	r2, [pc, #532]	; (80083b8 <gpsInitUblox+0x254>)
 80081a4:	60d3      	str	r3, [r2, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 80081a6:	4b85      	ldr	r3, [pc, #532]	; (80083bc <gpsInitUblox+0x258>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a83      	ldr	r2, [pc, #524]	; (80083b8 <gpsInitUblox+0x254>)
 80081ac:	6153      	str	r3, [r2, #20]
 80081ae:	e164      	b.n	800847a <gpsInitUblox+0x316>
		}
		else if (gpsData.cfg_result == GUMI_ACK_NAK) {
 80081b0:	4b81      	ldr	r3, [pc, #516]	; (80083b8 <gpsInitUblox+0x254>)
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d114      	bne.n	80081e2 <gpsInitUblox+0x7e>
			pif_error = E_RECEIVE_NACK;
 80081b8:	4b82      	ldr	r3, [pc, #520]	; (80083c4 <gpsInitUblox+0x260>)
 80081ba:	2210      	movs	r2, #16
 80081bc:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 80081be:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80081c2:	607b      	str	r3, [r7, #4]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "GPS(%u) NAK:%u T=%lu", line, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 80081c4:	4b7c      	ldr	r3, [pc, #496]	; (80083b8 <gpsInitUblox+0x254>)
 80081c6:	68d9      	ldr	r1, [r3, #12]
 80081c8:	4b7c      	ldr	r3, [pc, #496]	; (80083bc <gpsInitUblox+0x258>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b7a      	ldr	r3, [pc, #488]	; (80083b8 <gpsInitUblox+0x254>)
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	460b      	mov	r3, r1
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	497b      	ldr	r1, [pc, #492]	; (80083c8 <gpsInitUblox+0x264>)
 80081da:	2002      	movs	r0, #2
 80081dc:	f00b f990 	bl	8013500 <pifLog_Printf>
 80081e0:	e14b      	b.n	800847a <gpsInitUblox+0x316>
#endif
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 500) {
 80081e2:	4b76      	ldr	r3, [pc, #472]	; (80083bc <gpsInitUblox+0x258>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b74      	ldr	r3, [pc, #464]	; (80083b8 <gpsInitUblox+0x254>)
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80081f0:	f0c0 8143 	bcc.w	800847a <gpsInitUblox+0x316>
				pif_error = E_TIMEOUT;
 80081f4:	4b73      	ldr	r3, [pc, #460]	; (80083c4 <gpsInitUblox+0x260>)
 80081f6:	2207      	movs	r2, #7
 80081f8:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081fa:	f44f 739b 	mov.w	r3, #310	; 0x136
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	e13b      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
	}
	else {
		if (gpsData.step < 10) {
 8008202:	4b6d      	ldr	r3, [pc, #436]	; (80083b8 <gpsInitUblox+0x254>)
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b09      	cmp	r3, #9
 8008208:	dc0a      	bgt.n	8008220 <gpsInitUblox+0xbc>
			gpsData.state_ts = pif_cumulative_timer1ms;
 800820a:	4b6c      	ldr	r3, [pc, #432]	; (80083bc <gpsInitUblox+0x258>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a6a      	ldr	r2, [pc, #424]	; (80083b8 <gpsInitUblox+0x254>)
 8008210:	6153      	str	r3, [r2, #20]
			gps_ublox.evt_ubx_receive = _evtGpsUbxReceive;
 8008212:	4b6e      	ldr	r3, [pc, #440]	; (80083cc <gpsInitUblox+0x268>)
 8008214:	4a6e      	ldr	r2, [pc, #440]	; (80083d0 <gpsInitUblox+0x26c>)
 8008216:	601a      	str	r2, [r3, #0]
			gpsData.step = 10;
 8008218:	4b67      	ldr	r3, [pc, #412]	; (80083b8 <gpsInitUblox+0x254>)
 800821a:	220a      	movs	r2, #10
 800821c:	60da      	str	r2, [r3, #12]
 800821e:	e12c      	b.n	800847a <gpsInitUblox+0x316>
		}
		else if (gpsData.step < 10 + kCfgMsgNmeaSize) {
 8008220:	2306      	movs	r3, #6
 8008222:	f103 0209 	add.w	r2, r3, #9
 8008226:	4b64      	ldr	r3, [pc, #400]	; (80083b8 <gpsInitUblox+0x254>)
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	429a      	cmp	r2, r3
 800822c:	db29      	blt.n	8008282 <gpsInitUblox+0x11e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNmea[gpsData.step - 10]), (uint8_t*)kCfgMsgNmea[gpsData.step - 10], FALSE)) {
 800822e:	4b62      	ldr	r3, [pc, #392]	; (80083b8 <gpsInitUblox+0x254>)
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f1a3 020a 	sub.w	r2, r3, #10
 8008236:	4613      	mov	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	4413      	add	r3, r2
 800823c:	4a65      	ldr	r2, [pc, #404]	; (80083d4 <gpsInitUblox+0x270>)
 800823e:	4413      	add	r3, r2
 8008240:	2200      	movs	r2, #0
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2303      	movs	r3, #3
 8008248:	2201      	movs	r2, #1
 800824a:	2106      	movs	r1, #6
 800824c:	485f      	ldr	r0, [pc, #380]	; (80083cc <gpsInitUblox+0x268>)
 800824e:	f00f f967 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <gpsInitUblox+0x110>
                gpsData.cfg_result = -1;
 8008258:	4b57      	ldr	r3, [pc, #348]	; (80083b8 <gpsInitUblox+0x254>)
 800825a:	f04f 32ff 	mov.w	r2, #4294967295
 800825e:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008260:	4b55      	ldr	r3, [pc, #340]	; (80083b8 <gpsInitUblox+0x254>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	3332      	adds	r3, #50	; 0x32
 8008266:	4a54      	ldr	r2, [pc, #336]	; (80083b8 <gpsInitUblox+0x254>)
 8008268:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800826a:	4b54      	ldr	r3, [pc, #336]	; (80083bc <gpsInitUblox+0x258>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a52      	ldr	r2, [pc, #328]	; (80083b8 <gpsInitUblox+0x254>)
 8008270:	6153      	str	r3, [r2, #20]
 8008272:	e102      	b.n	800847a <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008274:	4b53      	ldr	r3, [pc, #332]	; (80083c4 <gpsInitUblox+0x260>)
 8008276:	220a      	movs	r2, #10
 8008278:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800827a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	e0fb      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step < 20) {
 8008282:	4b4d      	ldr	r3, [pc, #308]	; (80083b8 <gpsInitUblox+0x254>)
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	2b13      	cmp	r3, #19
 8008288:	dc03      	bgt.n	8008292 <gpsInitUblox+0x12e>
			gpsData.step = 20;
 800828a:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <gpsInitUblox+0x254>)
 800828c:	2214      	movs	r2, #20
 800828e:	60da      	str	r2, [r3, #12]
 8008290:	e0f3      	b.n	800847a <gpsInitUblox+0x316>
		}
		else if (gpsData.step < 20 + kCfgMsgNavSize) {
 8008292:	2305      	movs	r3, #5
 8008294:	f103 0213 	add.w	r2, r3, #19
 8008298:	4b47      	ldr	r3, [pc, #284]	; (80083b8 <gpsInitUblox+0x254>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	429a      	cmp	r2, r3
 800829e:	db29      	blt.n	80082f4 <gpsInitUblox+0x190>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNav[gpsData.step - 20]), (uint8_t*)kCfgMsgNav[gpsData.step - 20], FALSE)) {
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <gpsInitUblox+0x254>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f1a3 0214 	sub.w	r2, r3, #20
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	4a4a      	ldr	r2, [pc, #296]	; (80083d8 <gpsInitUblox+0x274>)
 80082b0:	4413      	add	r3, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	9201      	str	r2, [sp, #4]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2303      	movs	r3, #3
 80082ba:	2201      	movs	r2, #1
 80082bc:	2106      	movs	r1, #6
 80082be:	4843      	ldr	r0, [pc, #268]	; (80083cc <gpsInitUblox+0x268>)
 80082c0:	f00f f92e 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00d      	beq.n	80082e6 <gpsInitUblox+0x182>
                gpsData.cfg_result = -1;
 80082ca:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <gpsInitUblox+0x254>)
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 80082d2:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <gpsInitUblox+0x254>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	3332      	adds	r3, #50	; 0x32
 80082d8:	4a37      	ldr	r2, [pc, #220]	; (80083b8 <gpsInitUblox+0x254>)
 80082da:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80082dc:	4b37      	ldr	r3, [pc, #220]	; (80083bc <gpsInitUblox+0x258>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a35      	ldr	r2, [pc, #212]	; (80083b8 <gpsInitUblox+0x254>)
 80082e2:	6153      	str	r3, [r2, #20]
 80082e4:	e0c9      	b.n	800847a <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80082e6:	4b37      	ldr	r3, [pc, #220]	; (80083c4 <gpsInitUblox+0x260>)
 80082e8:	220a      	movs	r2, #10
 80082ea:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80082ec:	f44f 73ab 	mov.w	r3, #342	; 0x156
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	e0c2      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step < 30) {
 80082f4:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <gpsInitUblox+0x254>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b1d      	cmp	r3, #29
 80082fa:	dc03      	bgt.n	8008304 <gpsInitUblox+0x1a0>
			gpsData.step = 30;
 80082fc:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <gpsInitUblox+0x254>)
 80082fe:	221e      	movs	r2, #30
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	e0ba      	b.n	800847a <gpsInitUblox+0x316>
		}
		else if (gpsData.step == 30) {
 8008304:	4b2c      	ldr	r3, [pc, #176]	; (80083b8 <gpsInitUblox+0x254>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b1e      	cmp	r3, #30
 800830a:	d121      	bne.n	8008350 <gpsInitUblox+0x1ec>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 800830c:	2300      	movs	r3, #0
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	4b32      	ldr	r3, [pc, #200]	; (80083dc <gpsInitUblox+0x278>)
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	2306      	movs	r3, #6
 8008316:	2208      	movs	r2, #8
 8008318:	2106      	movs	r1, #6
 800831a:	482c      	ldr	r0, [pc, #176]	; (80083cc <gpsInitUblox+0x268>)
 800831c:	f00f f900 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00d      	beq.n	8008342 <gpsInitUblox+0x1de>
                gpsData.cfg_result = -1;
 8008326:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <gpsInitUblox+0x254>)
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 800832e:	4b22      	ldr	r3, [pc, #136]	; (80083b8 <gpsInitUblox+0x254>)
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	3332      	adds	r3, #50	; 0x32
 8008334:	4a20      	ldr	r2, [pc, #128]	; (80083b8 <gpsInitUblox+0x254>)
 8008336:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008338:	4b20      	ldr	r3, [pc, #128]	; (80083bc <gpsInitUblox+0x258>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <gpsInitUblox+0x254>)
 800833e:	6153      	str	r3, [r2, #20]
 8008340:	e09b      	b.n	800847a <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008342:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <gpsInitUblox+0x260>)
 8008344:	220a      	movs	r2, #10
 8008346:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008348:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800834c:	607b      	str	r3, [r7, #4]
 800834e:	e094      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 31) {
 8008350:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <gpsInitUblox+0x254>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b1f      	cmp	r3, #31
 8008356:	d121      	bne.n	800839c <gpsInitUblox+0x238>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8008358:	2300      	movs	r3, #0
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	4b20      	ldr	r3, [pc, #128]	; (80083e0 <gpsInitUblox+0x27c>)
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2324      	movs	r3, #36	; 0x24
 8008362:	2224      	movs	r2, #36	; 0x24
 8008364:	2106      	movs	r1, #6
 8008366:	4819      	ldr	r0, [pc, #100]	; (80083cc <gpsInitUblox+0x268>)
 8008368:	f00f f8da 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <gpsInitUblox+0x22a>
                gpsData.cfg_result = -1;
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <gpsInitUblox+0x254>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <gpsInitUblox+0x254>)
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	3332      	adds	r3, #50	; 0x32
 8008380:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <gpsInitUblox+0x254>)
 8008382:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008384:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <gpsInitUblox+0x258>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <gpsInitUblox+0x254>)
 800838a:	6153      	str	r3, [r2, #20]
 800838c:	e075      	b.n	800847a <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <gpsInitUblox+0x260>)
 8008390:	220a      	movs	r2, #10
 8008392:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008394:	f240 136f 	movw	r3, #367	; 0x16f
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	e06e      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 32) {
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <gpsInitUblox+0x254>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d148      	bne.n	8008436 <gpsInitUblox+0x2d2>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <gpsInitUblox+0x280>)
 80083a6:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	db1c      	blt.n	80083e8 <gpsInitUblox+0x284>
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <gpsInitUblox+0x280>)
 80083b0:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e018      	b.n	80083ea <gpsInitUblox+0x286>
 80083b8:	20000f84 	.word	0x20000f84
 80083bc:	20001bcc 	.word	0x20001bcc
 80083c0:	08026eb8 	.word	0x08026eb8
 80083c4:	20001bb5 	.word	0x20001bb5
 80083c8:	08026ed0 	.word	0x08026ed0
 80083cc:	20000fa8 	.word	0x20000fa8
 80083d0:	08007dc1 	.word	0x08007dc1
 80083d4:	080285b8 	.word	0x080285b8
 80083d8:	080285cc 	.word	0x080285cc
 80083dc:	080285dc 	.word	0x080285dc
 80083e0:	080285e4 	.word	0x080285e4
 80083e4:	2000089c 	.word	0x2000089c
 80083e8:	2305      	movs	r3, #5
 80083ea:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <gpsInitUblox+0x340>)
 80083f2:	4413      	add	r3, r2
 80083f4:	2200      	movs	r2, #0
 80083f6:	9201      	str	r2, [sp, #4]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2308      	movs	r3, #8
 80083fc:	2216      	movs	r2, #22
 80083fe:	2106      	movs	r1, #6
 8008400:	4829      	ldr	r0, [pc, #164]	; (80084a8 <gpsInitUblox+0x344>)
 8008402:	f00f f88d 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00d      	beq.n	8008428 <gpsInitUblox+0x2c4>
                gpsData.cfg_result = -1;
 800840c:	4b27      	ldr	r3, [pc, #156]	; (80084ac <gpsInitUblox+0x348>)
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <gpsInitUblox+0x348>)
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	3332      	adds	r3, #50	; 0x32
 800841a:	4a24      	ldr	r2, [pc, #144]	; (80084ac <gpsInitUblox+0x348>)
 800841c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800841e:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <gpsInitUblox+0x34c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a22      	ldr	r2, [pc, #136]	; (80084ac <gpsInitUblox+0x348>)
 8008424:	6153      	str	r3, [r2, #20]
 8008426:	e028      	b.n	800847a <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008428:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <gpsInitUblox+0x350>)
 800842a:	220a      	movs	r2, #10
 800842c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800842e:	f240 137b 	movw	r3, #379	; 0x17b
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	e021      	b.n	800847a <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 33) {
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <gpsInitUblox+0x348>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b21      	cmp	r3, #33	; 0x21
 800843c:	d11d      	bne.n	800847a <gpsInitUblox+0x316>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 800843e:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <gpsInitUblox+0x34c>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <gpsInitUblox+0x348>)
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f242 720f 	movw	r2, #9999	; 0x270f
 800844c:	4293      	cmp	r3, r2
 800844e:	d80e      	bhi.n	800846e <gpsInitUblox+0x30a>
				if (gpsData.receive) {
 8008450:	4b16      	ldr	r3, [pc, #88]	; (80084ac <gpsInitUblox+0x348>)
 8008452:	7e1b      	ldrb	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <gpsInitUblox+0x316>
					// ublox should be init'd, time to try receiving some junk
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008458:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <gpsInitUblox+0x354>)
 800845a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800845e:	4917      	ldr	r1, [pc, #92]	; (80084bc <gpsInitUblox+0x358>)
 8008460:	4817      	ldr	r0, [pc, #92]	; (80084c0 <gpsInitUblox+0x35c>)
 8008462:	f00d fc19 	bl	8015c98 <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 8008466:	2005      	movs	r0, #5
 8008468:	f7ff fbe6 	bl	8007c38 <gpsSetState>
 800846c:	e005      	b.n	800847a <gpsInitUblox+0x316>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <gpsInitUblox+0x350>)
 8008470:	2207      	movs	r2, #7
 8008472:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008474:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8008478:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <gpsInitUblox+0x336>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) S:%u E:%u", line, gpsData.step, pif_error);
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <gpsInitUblox+0x348>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <gpsInitUblox+0x350>)
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	9200      	str	r2, [sp, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	490d      	ldr	r1, [pc, #52]	; (80084c4 <gpsInitUblox+0x360>)
 800848e:	2004      	movs	r0, #4
 8008490:	f00b f836 	bl	8013500 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008494:	480a      	ldr	r0, [pc, #40]	; (80084c0 <gpsInitUblox+0x35c>)
 8008496:	f7ff fdcb 	bl	8008030 <_evtGpsTimeout>
	}
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	08028608 	.word	0x08028608
 80084a8:	20000fa8 	.word	0x20000fa8
 80084ac:	20000f84 	.word	0x20000f84
 80084b0:	20001bcc 	.word	0x20001bcc
 80084b4:	20001bb5 	.word	0x20001bb5
 80084b8:	08008031 	.word	0x08008031
 80084bc:	200014d0 	.word	0x200014d0
 80084c0:	20000fb0 	.word	0x20000fb0
 80084c4:	08026ee8 	.word	0x08026ee8

080084c8 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <gpsInitHardware+0x34>)
 80084ce:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	dc0d      	bgt.n	80084f2 <gpsInitHardware+0x2a>
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	da0a      	bge.n	80084f0 <gpsInitHardware+0x28>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <gpsInitHardware+0x1c>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d003      	beq.n	80084ea <gpsInitHardware+0x22>
 80084e2:	e006      	b.n	80084f2 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80084e4:	f7ff fe22 	bl	800812c <gpsInitNmea>
            break;
 80084e8:	e003      	b.n	80084f2 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80084ea:	f7ff fe3b 	bl	8008164 <gpsInitUblox>
            break;
 80084ee:	e000      	b.n	80084f2 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80084f0:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <gpsInitHardware+0x38>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	605a      	str	r2, [r3, #4]
}
 80084f8:	bf00      	nop
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	2000089c 	.word	0x2000089c
 8008500:	20000f84 	.word	0x20000f84

08008504 <gpsThread>:

void gpsThread(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 800850a:	4b66      	ldr	r3, [pc, #408]	; (80086a4 <gpsThread+0x1a0>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b06      	cmp	r3, #6
 8008510:	f200 80c4 	bhi.w	800869c <gpsThread+0x198>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <gpsThread+0x18>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	0800869d 	.word	0x0800869d
 8008520:	08008539 	.word	0x08008539
 8008524:	08008595 	.word	0x08008595
 8008528:	080085eb 	.word	0x080085eb
 800852c:	0800862b 	.word	0x0800862b
 8008530:	0800869d 	.word	0x0800869d
 8008534:	08008631 	.word	0x08008631
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 8008538:	4b5b      	ldr	r3, [pc, #364]	; (80086a8 <gpsThread+0x1a4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <gpsThread+0x1a0>)
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	4a57      	ldr	r2, [pc, #348]	; (80086a4 <gpsThread+0x1a0>)
 8008548:	6912      	ldr	r2, [r2, #16]
 800854a:	2a00      	cmp	r2, #0
 800854c:	d002      	beq.n	8008554 <gpsThread+0x50>
 800854e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008552:	e001      	b.n	8008558 <gpsThread+0x54>
 8008554:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008558:	429a      	cmp	r2, r3
 800855a:	f200 809a 	bhi.w	8008692 <gpsThread+0x18e>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 800855e:	4b51      	ldr	r3, [pc, #324]	; (80086a4 <gpsThread+0x1a0>)
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b04      	cmp	r3, #4
 8008564:	dc12      	bgt.n	800858c <gpsThread+0x88>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008566:	4b51      	ldr	r3, [pc, #324]	; (80086ac <gpsThread+0x1a8>)
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	4b4e      	ldr	r3, [pc, #312]	; (80086a4 <gpsThread+0x1a0>)
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	4950      	ldr	r1, [pc, #320]	; (80086b0 <gpsThread+0x1ac>)
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	440b      	add	r3, r1
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f7fa f893 	bl	80026a4 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 800857e:	4b49      	ldr	r3, [pc, #292]	; (80086a4 <gpsThread+0x1a0>)
 8008580:	2202      	movs	r2, #2
 8008582:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008584:	4a47      	ldr	r2, [pc, #284]	; (80086a4 <gpsThread+0x1a0>)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 800858a:	e087      	b.n	800869c <gpsThread+0x198>
                gpsSetState(GPS_SETBAUD);
 800858c:	2003      	movs	r0, #3
 800858e:	f7ff fb53 	bl	8007c38 <gpsSetState>
            break;
 8008592:	e083      	b.n	800869c <gpsThread+0x198>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 8008594:	4b44      	ldr	r3, [pc, #272]	; (80086a8 <gpsThread+0x1a4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 800859a:	4b42      	ldr	r3, [pc, #264]	; (80086a4 <gpsThread+0x1a0>)
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2bc7      	cmp	r3, #199	; 0xc7
 80085a4:	d977      	bls.n	8008696 <gpsThread+0x192>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 80085a6:	4b3f      	ldr	r3, [pc, #252]	; (80086a4 <gpsThread+0x1a0>)
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	4a41      	ldr	r2, [pc, #260]	; (80086b0 <gpsThread+0x1ac>)
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	4413      	add	r3, r2
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2303      	movs	r3, #3
 80085ba:	2207      	movs	r2, #7
 80085bc:	2101      	movs	r1, #1
 80085be:	483d      	ldr	r0, [pc, #244]	; (80086b4 <gpsThread+0x1b0>)
 80085c0:	f00e ff78 	bl	80174b4 <pifGpsUblox_SetPubxConfig>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <gpsThread+0xde>
                gpsData.state_position++;
 80085ca:	4b36      	ldr	r3, [pc, #216]	; (80086a4 <gpsThread+0x1a0>)
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	3301      	adds	r3, #1
 80085d0:	4a34      	ldr	r2, [pc, #208]	; (80086a4 <gpsThread+0x1a0>)
 80085d2:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 80085d4:	4b33      	ldr	r3, [pc, #204]	; (80086a4 <gpsThread+0x1a0>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80085da:	4a32      	ldr	r2, [pc, #200]	; (80086a4 <gpsThread+0x1a0>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80085e0:	e05c      	b.n	800869c <gpsThread+0x198>
        		gpsSetState(GPS_INITIALIZING);
 80085e2:	2001      	movs	r0, #1
 80085e4:	f7ff fb28 	bl	8007c38 <gpsSetState>
            break;
 80085e8:	e058      	b.n	800869c <gpsThread+0x198>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80085ea:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <gpsThread+0x1a4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80085f0:	4b2c      	ldr	r3, [pc, #176]	; (80086a4 <gpsThread+0x1a0>)
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80085fc:	d34d      	bcc.n	800869a <gpsThread+0x196>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80085fe:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <gpsThread+0x1a8>)
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <gpsThread+0x1a0>)
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	492a      	ldr	r1, [pc, #168]	; (80086b0 <gpsThread+0x1ac>)
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	440b      	add	r3, r1
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fa f847 	bl	80026a4 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008616:	4b25      	ldr	r3, [pc, #148]	; (80086ac <gpsThread+0x1a8>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	3304      	adds	r3, #4
 800861c:	4618      	mov	r0, r3
 800861e:	f7fa f853 	bl	80026c8 <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 8008622:	2004      	movs	r0, #4
 8008624:	f7ff fb08 	bl	8007c38 <gpsSetState>
            break;
 8008628:	e038      	b.n	800869c <gpsThread+0x198>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 800862a:	f7ff ff4d 	bl	80084c8 <gpsInitHardware>
            break;
 800862e:	e035      	b.n	800869c <gpsThread+0x198>

        case GPS_LOSTCOMMS:
            pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 8008630:	2300      	movs	r3, #0
 8008632:	2200      	movs	r2, #0
 8008634:	4920      	ldr	r1, [pc, #128]	; (80086b8 <gpsThread+0x1b4>)
 8008636:	4821      	ldr	r0, [pc, #132]	; (80086bc <gpsThread+0x1b8>)
 8008638:	f00d fb2e 	bl	8015c98 <pifGps_SetTimeout>
            gpsData.errors++;
 800863c:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <gpsThread+0x1a0>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	3301      	adds	r3, #1
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <gpsThread+0x1a0>)
 8008644:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 8008646:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <gpsThread+0x1bc>)
 8008648:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 800864c:	2b00      	cmp	r3, #0
 800864e:	d012      	beq.n	8008676 <gpsThread+0x172>
                gpsData.baudrateIndex++;
 8008650:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <gpsThread+0x1a0>)
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	3301      	adds	r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <gpsThread+0x1a0>)
 800865a:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 800865c:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <gpsThread+0x1a0>)
 800865e:	785a      	ldrb	r2, [r3, #1]
 8008660:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <gpsThread+0x1c0>)
 8008662:	fba3 1302 	umull	r1, r3, r3, r2
 8008666:	0899      	lsrs	r1, r3, #2
 8008668:	460b      	mov	r3, r1
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <gpsThread+0x1a0>)
 8008674:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <gpsThread+0x1a4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a0a      	ldr	r2, [pc, #40]	; (80086a4 <gpsThread+0x1a0>)
 800867c:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <gpsThread+0x1c4>)
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008684:	4b11      	ldr	r3, [pc, #68]	; (80086cc <gpsThread+0x1c8>)
 8008686:	2200      	movs	r2, #0
 8008688:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 800868a:	2001      	movs	r0, #1
 800868c:	f7ff fad4 	bl	8007c38 <gpsSetState>
            break;
 8008690:	e004      	b.n	800869c <gpsThread+0x198>
                return;
 8008692:	bf00      	nop
 8008694:	e002      	b.n	800869c <gpsThread+0x198>
                return;
 8008696:	bf00      	nop
 8008698:	e000      	b.n	800869c <gpsThread+0x198>
                return;
 800869a:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000f84 	.word	0x20000f84
 80086a8:	20001bcc 	.word	0x20001bcc
 80086ac:	200007e4 	.word	0x200007e4
 80086b0:	08028590 	.word	0x08028590
 80086b4:	20000fa8 	.word	0x20000fa8
 80086b8:	200014d0 	.word	0x200014d0
 80086bc:	20000fb0 	.word	0x20000fb0
 80086c0:	2000089c 	.word	0x2000089c
 80086c4:	cccccccd 	.word	0xcccccccd
 80086c8:	20001780 	.word	0x20001780
 80086cc:	2000169c 	.word	0x2000169c

080086d0 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80086d6:	4b2b      	ldr	r3, [pc, #172]	; (8008784 <gpsPollSvinfo+0xb4>)
 80086d8:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d14d      	bne.n	800877c <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80086e0:	4b29      	ldr	r3, [pc, #164]	; (8008788 <gpsPollSvinfo+0xb8>)
 80086e2:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <gpsPollSvinfo+0xbc>)
 80086e8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	e02a      	b.n	8008746 <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 80086f0:	4a25      	ldr	r2, [pc, #148]	; (8008788 <gpsPollSvinfo+0xb8>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	33b9      	adds	r3, #185	; 0xb9
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	4a25      	ldr	r2, [pc, #148]	; (8008790 <gpsPollSvinfo+0xc0>)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	460a      	mov	r2, r1
 8008702:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 8008704:	4a20      	ldr	r2, [pc, #128]	; (8008788 <gpsPollSvinfo+0xb8>)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	33c9      	adds	r3, #201	; 0xc9
 800870c:	7819      	ldrb	r1, [r3, #0]
 800870e:	4a21      	ldr	r2, [pc, #132]	; (8008794 <gpsPollSvinfo+0xc4>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4413      	add	r3, r2
 8008714:	460a      	mov	r2, r1
 8008716:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <gpsPollSvinfo+0xb8>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	33d9      	adds	r3, #217	; 0xd9
 8008720:	7819      	ldrb	r1, [r3, #0]
 8008722:	4a1d      	ldr	r2, [pc, #116]	; (8008798 <gpsPollSvinfo+0xc8>)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4413      	add	r3, r2
 8008728:	460a      	mov	r2, r1
 800872a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 800872c:	4a16      	ldr	r2, [pc, #88]	; (8008788 <gpsPollSvinfo+0xb8>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	33e9      	adds	r3, #233	; 0xe9
 8008734:	7819      	ldrb	r1, [r3, #0]
 8008736:	4a19      	ldr	r2, [pc, #100]	; (800879c <gpsPollSvinfo+0xcc>)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4413      	add	r3, r2
 800873c:	460a      	mov	r2, r1
 800873e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3301      	adds	r3, #1
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <gpsPollSvinfo+0xbc>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4293      	cmp	r3, r2
 8008750:	dbce      	blt.n	80086f0 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <gpsPollSvinfo+0xb8>)
 8008754:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008758:	4a11      	ldr	r2, [pc, #68]	; (80087a0 <gpsPollSvinfo+0xd0>)
 800875a:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <gpsPollSvinfo+0xb8>)
 800875e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008762:	4a0f      	ldr	r2, [pc, #60]	; (80087a0 <gpsPollSvinfo+0xd0>)
 8008764:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 8008766:	2300      	movs	r3, #0
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	2300      	movs	r3, #0
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2300      	movs	r3, #0
 8008770:	2230      	movs	r2, #48	; 0x30
 8008772:	2101      	movs	r1, #1
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <gpsPollSvinfo+0xb8>)
 8008776:	f00e fed3 	bl	8017520 <pifGpsUblox_SendUbxMsg>
 800877a:	e000      	b.n	800877e <gpsPollSvinfo+0xae>
        return;
 800877c:	bf00      	nop
}
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	2000089c 	.word	0x2000089c
 8008788:	20000fa8 	.word	0x20000fa8
 800878c:	2000179d 	.word	0x2000179d
 8008790:	200017a0 	.word	0x200017a0
 8008794:	200017c0 	.word	0x200017c0
 8008798:	200017e0 	.word	0x200017e0
 800879c:	20001800 	.word	0x20001800
 80087a0:	20001828 	.word	0x20001828

080087a4 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	edd3 7a00 	vldr	s15, [r3]
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087c6:	ee17 3a90 	vmov	r3, s15
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	ed93 7a00 	vldr	s14, [r3]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80087fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	edd3 7a00 	vldr	s15, [r3]
 8008804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	edd3 7a00 	vldr	s15, [r3]
 8008818:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008822:	eef1 7a67 	vneg.f32	s15, s15
 8008826:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008834:	ee17 2a90 	vmov	r2, s15
 8008838:	ee16 1a90 	vmov	r1, s13
 800883c:	ee17 0a10 	vmov	r0, s14
 8008840:	f7fb fa88 	bl	8003d54 <constrain>
 8008844:	ee07 0a90 	vmov	s15, r0
 8008848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	edd3 7a00 	vldr	s15, [r3]
 8008858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800885c:	ee17 3a90 	vmov	r3, s15
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	ed93 7a00 	vldr	s14, [r3]
 800888e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	4618      	mov	r0, r3
 800889e:	f7f7 fe07 	bl	80004b0 <__aeabi_f2d>
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f7 fe00 	bl	80004b0 <__aeabi_f2d>
 80088b0:	4680      	mov	r8, r0
 80088b2:	4689      	mov	r9, r1
 80088b4:	4b36      	ldr	r3, [pc, #216]	; (8008990 <get_D+0x128>)
 80088b6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	ee17 0a90 	vmov	r0, s15
 80088c6:	f7f7 fdf3 	bl	80004b0 <__aeabi_f2d>
 80088ca:	a32f      	add	r3, pc, #188	; (adr r3, 8008988 <get_D+0x120>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fe46 	bl	8000560 <__aeabi_dmul>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	f04f 0000 	mov.w	r0, #0
 80088dc:	492d      	ldr	r1, [pc, #180]	; (8008994 <get_D+0x12c>)
 80088de:	f7f7 ff69 	bl	80007b4 <__aeabi_ddiv>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4692      	mov	sl, r2
 80088e8:	469b      	mov	fp, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7f7 fdde 	bl	80004b0 <__aeabi_f2d>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f7 fc7a 	bl	80001f4 <__adddf3>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f7 ff54 	bl	80007b4 <__aeabi_ddiv>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4690      	mov	r8, r2
 8008912:	4699      	mov	r9, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	ed93 7a04 	vldr	s14, [r3, #16]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008924:	ee17 0a90 	vmov	r0, s15
 8008928:	f7f7 fdc2 	bl	80004b0 <__aeabi_f2d>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	f7f7 fe14 	bl	8000560 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fc58 	bl	80001f4 <__adddf3>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4610      	mov	r0, r2
 800894a:	4619      	mov	r1, r3
 800894c:	f7f8 f8ea 	bl	8000b24 <__aeabi_d2f>
 8008950:	4602      	mov	r2, r0
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	ed93 7a02 	vldr	s14, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008978:	ee17 3a90 	vmov	r3, s15
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008986:	bf00      	nop
 8008988:	54442d18 	.word	0x54442d18
 800898c:	401921fb 	.word	0x401921fb
 8008990:	20000e08 	.word	0x20000e08
 8008994:	3ff00000 	.word	0x3ff00000

08008998 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	609a      	str	r2, [r3, #8]
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b089      	sub	sp, #36	; 0x24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80089cc:	4b84      	ldr	r3, [pc, #528]	; (8008be0 <taskGpsNewData+0x21c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a84      	ldr	r2, [pc, #528]	; (8008be4 <taskGpsNewData+0x220>)
 80089d2:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 80089d4:	2020      	movs	r0, #32
 80089d6:	f7fe faed 	bl	8006fb4 <sensorsSet>
        if (GPS_update == 1)
 80089da:	4b83      	ldr	r3, [pc, #524]	; (8008be8 <taskGpsNewData+0x224>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d103      	bne.n	80089ea <taskGpsNewData+0x26>
            GPS_update = 0;
 80089e2:	4b81      	ldr	r3, [pc, #516]	; (8008be8 <taskGpsNewData+0x224>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e002      	b.n	80089f0 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 80089ea:	4b7f      	ldr	r3, [pc, #508]	; (8008be8 <taskGpsNewData+0x224>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 80089f0:	4b7e      	ldr	r3, [pc, #504]	; (8008bec <taskGpsNewData+0x228>)
 80089f2:	7adb      	ldrb	r3, [r3, #11]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 81ae 	beq.w	8008d56 <taskGpsNewData+0x392>
 80089fa:	4b7d      	ldr	r3, [pc, #500]	; (8008bf0 <taskGpsNewData+0x22c>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	f240 81a9 	bls.w	8008d56 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008a04:	4b79      	ldr	r3, [pc, #484]	; (8008bec <taskGpsNewData+0x228>)
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <taskGpsNewData+0x56>
 8008a0c:	4b77      	ldr	r3, [pc, #476]	; (8008bec <taskGpsNewData+0x228>)
 8008a0e:	7c1b      	ldrb	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008a14:	4b75      	ldr	r3, [pc, #468]	; (8008bec <taskGpsNewData+0x228>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 8008a1a:	4b74      	ldr	r3, [pc, #464]	; (8008bec <taskGpsNewData+0x228>)
 8008a1c:	7b1b      	ldrb	r3, [r3, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d105      	bne.n	8008a2e <taskGpsNewData+0x6a>
 8008a22:	4b72      	ldr	r3, [pc, #456]	; (8008bec <taskGpsNewData+0x228>)
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 8008a2a:	f000 f9c1 	bl	8008db0 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 8008a2e:	4b71      	ldr	r3, [pc, #452]	; (8008bf4 <taskGpsNewData+0x230>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	4b70      	ldr	r3, [pc, #448]	; (8008bf8 <taskGpsNewData+0x234>)
 8008a36:	fb83 1302 	smull	r1, r3, r3, r2
 8008a3a:	1059      	asrs	r1, r3, #1
 8008a3c:	17d3      	asrs	r3, r2, #31
 8008a3e:	1ac9      	subs	r1, r1, r3
 8008a40:	460b      	mov	r3, r1
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	1ad1      	subs	r1, r2, r3
 8008a48:	b2ca      	uxtb	r2, r1
 8008a4a:	4b6a      	ldr	r3, [pc, #424]	; (8008bf4 <taskGpsNewData+0x230>)
 8008a4c:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	e09f      	b.n	8008b94 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 8008a54:	4a69      	ldr	r2, [pc, #420]	; (8008bfc <taskGpsNewData+0x238>)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a5c:	4968      	ldr	r1, [pc, #416]	; (8008c00 <taskGpsNewData+0x23c>)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 8008a64:	4a66      	ldr	r2, [pc, #408]	; (8008c00 <taskGpsNewData+0x23c>)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a6c:	4a65      	ldr	r2, [pc, #404]	; (8008c04 <taskGpsNewData+0x240>)
 8008a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8008a72:	1592      	asrs	r2, r2, #22
 8008a74:	17db      	asrs	r3, r3, #31
 8008a76:	1ad2      	subs	r2, r2, r3
 8008a78:	4963      	ldr	r1, [pc, #396]	; (8008c08 <taskGpsNewData+0x244>)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008a80:	4a5f      	ldr	r2, [pc, #380]	; (8008c00 <taskGpsNewData+0x23c>)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a88:	495f      	ldr	r1, [pc, #380]	; (8008c08 <taskGpsNewData+0x244>)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a90:	495e      	ldr	r1, [pc, #376]	; (8008c0c <taskGpsNewData+0x248>)
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	4a5d      	ldr	r2, [pc, #372]	; (8008c10 <taskGpsNewData+0x24c>)
 8008a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8008a9e:	1312      	asrs	r2, r2, #12
 8008aa0:	17db      	asrs	r3, r3, #31
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	b299      	uxth	r1, r3
 8008aa6:	4a5b      	ldr	r2, [pc, #364]	; (8008c14 <taskGpsNewData+0x250>)
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 8008aae:	4a5a      	ldr	r2, [pc, #360]	; (8008c18 <taskGpsNewData+0x254>)
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ab6:	4b4f      	ldr	r3, [pc, #316]	; (8008bf4 <taskGpsNewData+0x230>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	461c      	mov	r4, r3
 8008abc:	4857      	ldr	r0, [pc, #348]	; (8008c1c <taskGpsNewData+0x258>)
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4423      	add	r3, r4
 8008ac8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008acc:	1aca      	subs	r2, r1, r3
 8008ace:	4952      	ldr	r1, [pc, #328]	; (8008c18 <taskGpsNewData+0x254>)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008ad6:	4a4a      	ldr	r2, [pc, #296]	; (8008c00 <taskGpsNewData+0x23c>)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ade:	494a      	ldr	r1, [pc, #296]	; (8008c08 <taskGpsNewData+0x244>)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ae6:	4949      	ldr	r1, [pc, #292]	; (8008c0c <taskGpsNewData+0x248>)
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	4941      	ldr	r1, [pc, #260]	; (8008bf4 <taskGpsNewData+0x230>)
 8008aee:	7809      	ldrb	r1, [r1, #0]
 8008af0:	460c      	mov	r4, r1
 8008af2:	18d1      	adds	r1, r2, r3
 8008af4:	4849      	ldr	r0, [pc, #292]	; (8008c1c <taskGpsNewData+0x258>)
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	4423      	add	r3, r4
 8008b00:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008b04:	4a44      	ldr	r2, [pc, #272]	; (8008c18 <taskGpsNewData+0x254>)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b0c:	4b39      	ldr	r3, [pc, #228]	; (8008bf4 <taskGpsNewData+0x230>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	461c      	mov	r4, r3
 8008b12:	4842      	ldr	r0, [pc, #264]	; (8008c1c <taskGpsNewData+0x258>)
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	4423      	add	r3, r4
 8008b1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008b22:	18ca      	adds	r2, r1, r3
 8008b24:	493c      	ldr	r1, [pc, #240]	; (8008c18 <taskGpsNewData+0x254>)
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 8008b2c:	4a3a      	ldr	r2, [pc, #232]	; (8008c18 <taskGpsNewData+0x254>)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b34:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <taskGpsNewData+0x234>)
 8008b36:	fb82 1203 	smull	r1, r2, r2, r3
 8008b3a:	1052      	asrs	r2, r2, #1
 8008b3c:	17db      	asrs	r3, r3, #31
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	4931      	ldr	r1, [pc, #196]	; (8008c08 <taskGpsNewData+0x244>)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b48:	4935      	ldr	r1, [pc, #212]	; (8008c20 <taskGpsNewData+0x25c>)
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	441a      	add	r2, r3
 8008b50:	4934      	ldr	r1, [pc, #208]	; (8008c24 <taskGpsNewData+0x260>)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008b58:	4b33      	ldr	r3, [pc, #204]	; (8008c28 <taskGpsNewData+0x264>)
 8008b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d115      	bne.n	8008b8e <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 8008b62:	4a2c      	ldr	r2, [pc, #176]	; (8008c14 <taskGpsNewData+0x250>)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d90f      	bls.n	8008b8e <taskGpsNewData+0x1ca>
 8008b6e:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <taskGpsNewData+0x250>)
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b76:	f240 32e6 	movw	r2, #998	; 0x3e6
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d807      	bhi.n	8008b8e <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 8008b7e:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <taskGpsNewData+0x260>)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b86:	491d      	ldr	r1, [pc, #116]	; (8008bfc <taskGpsNewData+0x238>)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	f77f af5c 	ble.w	8008a54 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <taskGpsNewData+0x21c>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <taskGpsNewData+0x268>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bae:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008c30 <taskGpsNewData+0x26c>
 8008bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bb6:	4b1f      	ldr	r3, [pc, #124]	; (8008c34 <taskGpsNewData+0x270>)
 8008bb8:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 8008bbc:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <taskGpsNewData+0x21c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <taskGpsNewData+0x268>)
 8008bc2:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 8008bc4:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <taskGpsNewData+0x270>)
 8008bc6:	edd3 7a00 	vldr	s15, [r3]
 8008bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	d52f      	bpl.n	8008c38 <taskGpsNewData+0x274>
 8008bd8:	4b16      	ldr	r3, [pc, #88]	; (8008c34 <taskGpsNewData+0x270>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	e02e      	b.n	8008c3c <taskGpsNewData+0x278>
 8008bde:	bf00      	nop
 8008be0:	20001bcc 	.word	0x20001bcc
 8008be4:	20000f84 	.word	0x20000f84
 8008be8:	2000178a 	.word	0x2000178a
 8008bec:	2000169c 	.word	0x2000169c
 8008bf0:	20001780 	.word	0x20001780
 8008bf4:	20001352 	.word	0x20001352
 8008bf8:	66666667 	.word	0x66666667
 8008bfc:	20001760 	.word	0x20001760
 8008c00:	20001384 	.word	0x20001384
 8008c04:	6b5fca6b 	.word	0x6b5fca6b
 8008c08:	20001394 	.word	0x20001394
 8008c0c:	ff676980 	.word	0xff676980
 8008c10:	68db8bad 	.word	0x68db8bad
 8008c14:	2000139c 	.word	0x2000139c
 8008c18:	2000137c 	.word	0x2000137c
 8008c1c:	20001354 	.word	0x20001354
 8008c20:	00989680 	.word	0x00989680
 8008c24:	2000138c 	.word	0x2000138c
 8008c28:	2000179c 	.word	0x2000179c
 8008c2c:	200013a8 	.word	0x200013a8
 8008c30:	447a0000 	.word	0x447a0000
 8008c34:	20001324 	.word	0x20001324
 8008c38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008c3c:	4a4a      	ldr	r2, [pc, #296]	; (8008d68 <taskGpsNewData+0x3a4>)
 8008c3e:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008c40:	f107 0308 	add.w	r3, r7, #8
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f107 030c 	add.w	r3, r7, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4b47      	ldr	r3, [pc, #284]	; (8008d6c <taskGpsNewData+0x3a8>)
 8008c4e:	4a48      	ldr	r2, [pc, #288]	; (8008d70 <taskGpsNewData+0x3ac>)
 8008c50:	4948      	ldr	r1, [pc, #288]	; (8008d74 <taskGpsNewData+0x3b0>)
 8008c52:	4849      	ldr	r0, [pc, #292]	; (8008d78 <taskGpsNewData+0x3b4>)
 8008c54:	f000 fad8 	bl	8009208 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a48      	ldr	r2, [pc, #288]	; (8008d7c <taskGpsNewData+0x3b8>)
 8008c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8008c60:	1152      	asrs	r2, r2, #5
 8008c62:	17db      	asrs	r3, r3, #31
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	4b45      	ldr	r3, [pc, #276]	; (8008d80 <taskGpsNewData+0x3bc>)
 8008c6a:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4a43      	ldr	r2, [pc, #268]	; (8008d7c <taskGpsNewData+0x3b8>)
 8008c70:	fb82 1203 	smull	r1, r2, r2, r3
 8008c74:	1152      	asrs	r2, r2, #5
 8008c76:	17db      	asrs	r3, r3, #31
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	b21a      	sxth	r2, r3
 8008c7c:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <taskGpsNewData+0x3c0>)
 8008c7e:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008c80:	4b41      	ldr	r3, [pc, #260]	; (8008d88 <taskGpsNewData+0x3c4>)
 8008c82:	7b1b      	ldrb	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d105      	bne.n	8008c94 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008c88:	4b3d      	ldr	r3, [pc, #244]	; (8008d80 <taskGpsNewData+0x3bc>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	; (8008d84 <taskGpsNewData+0x3c0>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008c94:	f000 fb26 	bl	80092e4 <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008c98:	4b3b      	ldr	r3, [pc, #236]	; (8008d88 <taskGpsNewData+0x3c4>)
 8008c9a:	7a1b      	ldrb	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <taskGpsNewData+0x2e4>
 8008ca0:	4b39      	ldr	r3, [pc, #228]	; (8008d88 <taskGpsNewData+0x3c4>)
 8008ca2:	79db      	ldrb	r3, [r3, #7]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d056      	beq.n	8008d56 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008ca8:	4b38      	ldr	r3, [pc, #224]	; (8008d8c <taskGpsNewData+0x3c8>)
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	4b38      	ldr	r3, [pc, #224]	; (8008d90 <taskGpsNewData+0x3cc>)
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4b38      	ldr	r3, [pc, #224]	; (8008d94 <taskGpsNewData+0x3d0>)
 8008cb2:	4a39      	ldr	r2, [pc, #228]	; (8008d98 <taskGpsNewData+0x3d4>)
 8008cb4:	492f      	ldr	r1, [pc, #188]	; (8008d74 <taskGpsNewData+0x3b0>)
 8008cb6:	4830      	ldr	r0, [pc, #192]	; (8008d78 <taskGpsNewData+0x3b4>)
 8008cb8:	f000 faa6 	bl	8009208 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008cbc:	4b2d      	ldr	r3, [pc, #180]	; (8008d74 <taskGpsNewData+0x3b0>)
 8008cbe:	4a2e      	ldr	r2, [pc, #184]	; (8008d78 <taskGpsNewData+0x3b4>)
 8008cc0:	4934      	ldr	r1, [pc, #208]	; (8008d94 <taskGpsNewData+0x3d0>)
 8008cc2:	4835      	ldr	r0, [pc, #212]	; (8008d98 <taskGpsNewData+0x3d4>)
 8008cc4:	f000 fb90 	bl	80093e8 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008cc8:	4b2f      	ldr	r3, [pc, #188]	; (8008d88 <taskGpsNewData+0x3c4>)
 8008cca:	7c1b      	ldrb	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008cd0:	4b32      	ldr	r3, [pc, #200]	; (8008d9c <taskGpsNewData+0x3d8>)
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008cd6:	4b31      	ldr	r3, [pc, #196]	; (8008d9c <taskGpsNewData+0x3d8>)
 8008cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d002      	beq.n	8008ce6 <taskGpsNewData+0x322>
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d003      	beq.n	8008cec <taskGpsNewData+0x328>
 8008ce4:	e03a      	b.n	8008d5c <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008ce6:	f000 fbab 	bl	8009440 <GPS_calc_poshold>
                        break;
 8008cea:	e037      	b.n	8008d5c <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008cec:	4b2c      	ldr	r3, [pc, #176]	; (8008da0 <taskGpsNewData+0x3dc>)
 8008cee:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fdb0 	bl	800985c <GPS_calc_desired_speed>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008d00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fc53 	bl	80095b0 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008d0a:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <taskGpsNewData+0x3dc>)
 8008d0c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008d14:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <taskGpsNewData+0x3e0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <taskGpsNewData+0x3b8>)
 8008d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8008d1e:	1152      	asrs	r2, r2, #5
 8008d20:	17db      	asrs	r3, r3, #31
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	b21a      	sxth	r2, r3
 8008d26:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <taskGpsNewData+0x3e4>)
 8008d28:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <taskGpsNewData+0x3dc>)
 8008d2c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008d30:	461a      	mov	r2, r3
 8008d32:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <taskGpsNewData+0x3cc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	da04      	bge.n	8008d44 <taskGpsNewData+0x380>
 8008d3a:	f000 fa45 	bl	80091c8 <check_missed_wp>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00a      	beq.n	8008d5a <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008d44:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <taskGpsNewData+0x3d8>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008d4a:	4b18      	ldr	r3, [pc, #96]	; (8008dac <taskGpsNewData+0x3e8>)
 8008d4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008d50:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <taskGpsNewData+0x3e4>)
 8008d52:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008d54:	e001      	b.n	8008d5a <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008d56:	bf00      	nop
 8008d58:	e000      	b.n	8008d5c <taskGpsNewData+0x398>
                        break;
 8008d5a:	bf00      	nop
        }

    return 0;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd90      	pop	{r4, r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20001324 	.word	0x20001324
 8008d6c:	2000176c 	.word	0x2000176c
 8008d70:	20001768 	.word	0x20001768
 8008d74:	20001764 	.word	0x20001764
 8008d78:	20001760 	.word	0x20001760
 8008d7c:	51eb851f 	.word	0x51eb851f
 8008d80:	20001782 	.word	0x20001782
 8008d84:	20001784 	.word	0x20001784
 8008d88:	2000169c 	.word	0x2000169c
 8008d8c:	20001340 	.word	0x20001340
 8008d90:	2000134c 	.word	0x2000134c
 8008d94:	2000133c 	.word	0x2000133c
 8008d98:	20001338 	.word	0x20001338
 8008d9c:	2000179c 	.word	0x2000179c
 8008da0:	20000e08 	.word	0x20000e08
 8008da4:	200013a0 	.word	0x200013a0
 8008da8:	2000196a 	.word	0x2000196a
 8008dac:	200013a4 	.word	0x200013a4

08008db0 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008db4:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <GPS_reset_home_position+0x4c>)
 8008db6:	7adb      	ldrb	r3, [r3, #11]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01d      	beq.n	8008df8 <GPS_reset_home_position+0x48>
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <GPS_reset_home_position+0x50>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d919      	bls.n	8008df8 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <GPS_reset_home_position+0x54>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	; (8008e08 <GPS_reset_home_position+0x58>)
 8008dca:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <GPS_reset_home_position+0x54>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <GPS_reset_home_position+0x58>)
 8008dd2:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <GPS_reset_home_position+0x54>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f96d 	bl	80090b8 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008dde:	4b0b      	ldr	r3, [pc, #44]	; (8008e0c <GPS_reset_home_position+0x5c>)
 8008de0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <GPS_reset_home_position+0x60>)
 8008de6:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <GPS_reset_home_position+0x64>)
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <GPS_reset_home_position+0x58>)
 8008df0:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008df2:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <GPS_reset_home_position+0x4c>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	731a      	strb	r2, [r3, #12]
    }
}
 8008df8:	bf00      	nop
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	2000169c 	.word	0x2000169c
 8008e00:	20001780 	.word	0x20001780
 8008e04:	20001760 	.word	0x20001760
 8008e08:	20001768 	.word	0x20001768
 8008e0c:	20001968 	.word	0x20001968
 8008e10:	200013a4 	.word	0x200013a4
 8008e14:	20001786 	.word	0x20001786

08008e18 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	e02f      	b.n	8008e84 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008e24:	4a1e      	ldr	r2, [pc, #120]	; (8008ea0 <GPS_reset_nav+0x88>)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008e2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <GPS_reset_nav+0x8c>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2100      	movs	r1, #0
 8008e34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008e38:	4a1b      	ldr	r2, [pc, #108]	; (8008ea8 <GPS_reset_nav+0x90>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a17      	ldr	r2, [pc, #92]	; (8008eac <GPS_reset_nav+0x94>)
 8008e4e:	4413      	add	r3, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fda1 	bl	8008998 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4a13      	ldr	r2, [pc, #76]	; (8008eb0 <GPS_reset_nav+0x98>)
 8008e62:	4413      	add	r3, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fd97 	bl	8008998 <reset_PID>
        reset_PID(&navPID[i]);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <GPS_reset_nav+0x9c>)
 8008e76:	4413      	add	r3, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff fd8d 	bl	8008998 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3301      	adds	r3, #1
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	ddcc      	ble.n	8008e24 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <GPS_reset_nav+0xa0>)
 8008e8c:	7c1b      	ldrb	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008e92:	f7fe f915 	bl	80070c0 <fw_nav_reset>

}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	2000178c 	.word	0x2000178c
 8008ea4:	20001798 	.word	0x20001798
 8008ea8:	20001794 	.word	0x20001794
 8008eac:	200012ac 	.word	0x200012ac
 8008eb0:	200012d4 	.word	0x200012d4
 8008eb4:	200012fc 	.word	0x200012fc
 8008eb8:	2000169c 	.word	0x2000169c

08008ebc <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008ec0:	4b50      	ldr	r3, [pc, #320]	; (8009004 <gpsSetPIDs+0x148>)
 8008ec2:	795b      	ldrb	r3, [r3, #5]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ecc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009008 <gpsSetPIDs+0x14c>
 8008ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	; (800900c <gpsSetPIDs+0x150>)
 8008ed6:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008eda:	4b4a      	ldr	r3, [pc, #296]	; (8009004 <gpsSetPIDs+0x148>)
 8008edc:	7bdb      	ldrb	r3, [r3, #15]
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009008 <gpsSetPIDs+0x14c>
 8008eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008eee:	4b47      	ldr	r3, [pc, #284]	; (800900c <gpsSetPIDs+0x150>)
 8008ef0:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008ef4:	4b45      	ldr	r3, [pc, #276]	; (800900c <gpsSetPIDs+0x150>)
 8008ef6:	4a46      	ldr	r2, [pc, #280]	; (8009010 <gpsSetPIDs+0x154>)
 8008ef8:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008efa:	4b42      	ldr	r3, [pc, #264]	; (8009004 <gpsSetPIDs+0x148>)
 8008efc:	799b      	ldrb	r3, [r3, #6]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f06:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f0e:	4b41      	ldr	r3, [pc, #260]	; (8009014 <gpsSetPIDs+0x158>)
 8008f10:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008f14:	4b3b      	ldr	r3, [pc, #236]	; (8009004 <gpsSetPIDs+0x148>)
 8008f16:	7c1b      	ldrb	r3, [r3, #16]
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f20:	eddf 6a39 	vldr	s13, [pc, #228]	; 8009008 <gpsSetPIDs+0x14c>
 8008f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f28:	4b3a      	ldr	r3, [pc, #232]	; (8009014 <gpsSetPIDs+0x158>)
 8008f2a:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008f2e:	4b35      	ldr	r3, [pc, #212]	; (8009004 <gpsSetPIDs+0x148>)
 8008f30:	7e9b      	ldrb	r3, [r3, #26]
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009018 <gpsSetPIDs+0x15c>
 8008f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f42:	4b34      	ldr	r3, [pc, #208]	; (8009014 <gpsSetPIDs+0x158>)
 8008f44:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008f48:	4b32      	ldr	r3, [pc, #200]	; (8009014 <gpsSetPIDs+0x158>)
 8008f4a:	4a31      	ldr	r2, [pc, #196]	; (8009010 <gpsSetPIDs+0x154>)
 8008f4c:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008f4e:	4b2d      	ldr	r3, [pc, #180]	; (8009004 <gpsSetPIDs+0x148>)
 8008f50:	79db      	ldrb	r3, [r3, #7]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f62:	4b2e      	ldr	r3, [pc, #184]	; (800901c <gpsSetPIDs+0x160>)
 8008f64:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008f68:	4b26      	ldr	r3, [pc, #152]	; (8009004 <gpsSetPIDs+0x148>)
 8008f6a:	7c5b      	ldrb	r3, [r3, #17]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f74:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009008 <gpsSetPIDs+0x14c>
 8008f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f7c:	4b27      	ldr	r3, [pc, #156]	; (800901c <gpsSetPIDs+0x160>)
 8008f7e:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008f82:	4b20      	ldr	r3, [pc, #128]	; (8009004 <gpsSetPIDs+0x148>)
 8008f84:	7edb      	ldrb	r3, [r3, #27]
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f8e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8009018 <gpsSetPIDs+0x15c>
 8008f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f96:	4b21      	ldr	r3, [pc, #132]	; (800901c <gpsSetPIDs+0x160>)
 8008f98:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008f9c:	4b1f      	ldr	r3, [pc, #124]	; (800901c <gpsSetPIDs+0x160>)
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <gpsSetPIDs+0x154>)
 8008fa0:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008fa2:	4b1f      	ldr	r3, [pc, #124]	; (8009020 <gpsSetPIDs+0x164>)
 8008fa4:	7c1b      	ldrb	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d026      	beq.n	8008ff8 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008faa:	4b16      	ldr	r3, [pc, #88]	; (8009004 <gpsSetPIDs+0x148>)
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fb6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fbe:	4b19      	ldr	r3, [pc, #100]	; (8009024 <gpsSetPIDs+0x168>)
 8008fc0:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008fc4:	4b0f      	ldr	r3, [pc, #60]	; (8009004 <gpsSetPIDs+0x148>)
 8008fc6:	7b9b      	ldrb	r3, [r3, #14]
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fd0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8009008 <gpsSetPIDs+0x14c>
 8008fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fd8:	4b12      	ldr	r3, [pc, #72]	; (8009024 <gpsSetPIDs+0x168>)
 8008fda:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <gpsSetPIDs+0x148>)
 8008fe0:	7e1b      	ldrb	r3, [r3, #24]
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fea:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009018 <gpsSetPIDs+0x15c>
 8008fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <gpsSetPIDs+0x168>)
 8008ff4:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008ff8:	bf00      	nop
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000e08 	.word	0x20000e08
 8009008:	42c80000 	.word	0x42c80000
 800900c:	2000126c 	.word	0x2000126c
 8009010:	44fa0000 	.word	0x44fa0000
 8009014:	2000127c 	.word	0x2000127c
 8009018:	447a0000 	.word	0x447a0000
 800901c:	2000128c 	.word	0x2000128c
 8009020:	2000169c 	.word	0x2000169c
 8009024:	2000129c 	.word	0x2000129c

08009028 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8009030:	2001      	movs	r0, #1
 8009032:	f7f9 f823 	bl	800207c <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	2000      	movs	r0, #0
 800903a:	f00a f9d3 	bl	80133e4 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 800903e:	2000      	movs	r0, #0
 8009040:	f7f9 f81c 	bl	800207c <actLed0State>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
    static bool state = false;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8009050:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <gpsSetPassthrough+0x58>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b05      	cmp	r3, #5
 8009056:	d002      	beq.n	800905e <gpsSetPassthrough+0x12>
        return -1;
 8009058:	f04f 33ff 	mov.w	r3, #4294967295
 800905c:	e020      	b.n	80090a0 <gpsSetPassthrough+0x54>

    actLed0State(OFF);
 800905e:	2000      	movs	r0, #0
 8009060:	f7f9 f80c 	bl	800207c <actLed0State>
    actLed1State(OFF);
 8009064:	2000      	movs	r0, #0
 8009066:	f7f9 f835 	bl	80020d4 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 800906a:	4b0f      	ldr	r3, [pc, #60]	; (80090a8 <gpsSetPassthrough+0x5c>)
 800906c:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8009070:	2b00      	cmp	r3, #0
 8009072:	d113      	bne.n	800909c <gpsSetPassthrough+0x50>
        if (state) {
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <gpsSetPassthrough+0x60>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <gpsSetPassthrough+0x40>
            gps_ublox._gps.evt_frame = NULL;
 800907c:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <gpsSetPassthrough+0x64>)
 800907e:	2200      	movs	r2, #0
 8009080:	611a      	str	r2, [r3, #16]
            state = false;
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <gpsSetPassthrough+0x60>)
 8009084:	2200      	movs	r2, #0
 8009086:	701a      	strb	r2, [r3, #0]
            return 0;
 8009088:	2300      	movs	r3, #0
 800908a:	e009      	b.n	80090a0 <gpsSetPassthrough+0x54>
        }
        else {
            gps_ublox._gps.evt_frame = _EvtPrintFrame;
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <gpsSetPassthrough+0x64>)
 800908e:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <gpsSetPassthrough+0x68>)
 8009090:	611a      	str	r2, [r3, #16]
            state = true;
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <gpsSetPassthrough+0x60>)
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
            return 1;
 8009098:	2301      	movs	r3, #1
 800909a:	e001      	b.n	80090a0 <gpsSetPassthrough+0x54>
        }
    }
    return -1;
 800909c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000f84 	.word	0x20000f84
 80090a8:	2000089c 	.word	0x2000089c
 80090ac:	200013ac 	.word	0x200013ac
 80090b0:	20000fa8 	.word	0x20000fa8
 80090b4:	08009029 	.word	0x08009029

080090b8 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d2:	dd05      	ble.n	80090e0 <GPS_calc_longitude_scaling+0x28>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090de:	e006      	b.n	80090ee <GPS_calc_longitude_scaling+0x36>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ea:	eef1 7a67 	vneg.f32	s15, s15
 80090ee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800911c <GPS_calc_longitude_scaling+0x64>
 80090f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80090f6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009120 <GPS_calc_longitude_scaling+0x68>
 80090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fe:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8009102:	ed97 0a03 	vldr	s0, [r7, #12]
 8009106:	f019 fecb 	bl	8022ea0 <cosf>
 800910a:	eef0 7a40 	vmov.f32	s15, s0
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <GPS_calc_longitude_scaling+0x6c>)
 8009110:	edc3 7a00 	vstr	s15, [r3]
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	4b189680 	.word	0x4b189680
 8009120:	3c8efa35 	.word	0x3c8efa35
 8009124:	20000028 	.word	0x20000028

08009128 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a19      	ldr	r2, [pc, #100]	; (800919c <GPS_set_next_wp+0x74>)
 8009138:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <GPS_set_next_wp+0x74>)
 8009140:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff ffb6 	bl	80090b8 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 800914c:	4b14      	ldr	r3, [pc, #80]	; (80091a0 <GPS_set_next_wp+0x78>)
 800914e:	7d1b      	ldrb	r3, [r3, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8009154:	f7fd fff0 	bl	8007138 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8009158:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <GPS_set_next_wp+0x7c>)
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	4b12      	ldr	r3, [pc, #72]	; (80091a8 <GPS_set_next_wp+0x80>)
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <GPS_set_next_wp+0x84>)
 8009162:	4a0e      	ldr	r2, [pc, #56]	; (800919c <GPS_set_next_wp+0x74>)
 8009164:	4912      	ldr	r1, [pc, #72]	; (80091b0 <GPS_set_next_wp+0x88>)
 8009166:	4813      	ldr	r0, [pc, #76]	; (80091b4 <GPS_set_next_wp+0x8c>)
 8009168:	f000 f84e 	bl	8009208 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <GPS_set_next_wp+0x7c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a11      	ldr	r2, [pc, #68]	; (80091b8 <GPS_set_next_wp+0x90>)
 8009172:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <GPS_set_next_wp+0x88>)
 8009176:	4a0f      	ldr	r2, [pc, #60]	; (80091b4 <GPS_set_next_wp+0x8c>)
 8009178:	490c      	ldr	r1, [pc, #48]	; (80091ac <GPS_set_next_wp+0x84>)
 800917a:	4808      	ldr	r0, [pc, #32]	; (800919c <GPS_set_next_wp+0x74>)
 800917c:	f000 f934 	bl	80093e8 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <GPS_set_next_wp+0x7c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a0d      	ldr	r2, [pc, #52]	; (80091bc <GPS_set_next_wp+0x94>)
 8009186:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <GPS_set_next_wp+0x98>)
 800918a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800918e:	b21a      	sxth	r2, r3
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <GPS_set_next_wp+0x9c>)
 8009192:	801a      	strh	r2, [r3, #0]
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20001338 	.word	0x20001338
 80091a0:	2000169c 	.word	0x2000169c
 80091a4:	20001340 	.word	0x20001340
 80091a8:	2000134c 	.word	0x2000134c
 80091ac:	2000133c 	.word	0x2000133c
 80091b0:	20001764 	.word	0x20001764
 80091b4:	20001760 	.word	0x20001760
 80091b8:	200013a0 	.word	0x200013a0
 80091bc:	20001344 	.word	0x20001344
 80091c0:	20000e08 	.word	0x20000e08
 80091c4:	20001350 	.word	0x20001350

080091c8 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <check_missed_wp+0x38>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <check_missed_wp+0x3c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb9a 	bl	8009914 <wrap_18000>
 80091e0:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bfb8      	it	lt
 80091e8:	425b      	neglt	r3, r3
 80091ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80091ee:	4293      	cmp	r3, r2
 80091f0:	bfcc      	ite	gt
 80091f2:	2301      	movgt	r3, #1
 80091f4:	2300      	movle	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20001340 	.word	0x20001340
 8009204:	20001344 	.word	0x20001344

08009208 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	ee07 3a90 	vmov	s15, r3
 8009224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009228:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800923e:	4b25      	ldr	r3, [pc, #148]	; (80092d4 <GPS_distance_cm_bearing+0xcc>)
 8009240:	edd3 7a00 	vldr	s15, [r3]
 8009244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009248:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 800924c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009250:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009254:	edd7 7a04 	vldr	s15, [r7, #16]
 8009258:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800925c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009260:	eeb0 0a67 	vmov.f32	s0, s15
 8009264:	f019 ff6c 	bl	8023140 <sqrtf>
 8009268:	eef0 7a40 	vmov.f32	s15, s0
 800926c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80092d8 <GPS_distance_cm_bearing+0xd0>
 8009270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009278:	ee17 2a90 	vmov	r2, s15
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8009280:	edd7 7a05 	vldr	s15, [r7, #20]
 8009284:	eef1 7a67 	vneg.f32	s15, s15
 8009288:	edd7 0a04 	vldr	s1, [r7, #16]
 800928c:	eeb0 0a67 	vmov.f32	s0, s15
 8009290:	f019 fefc 	bl	802308c <atan2f>
 8009294:	eef0 7a40 	vmov.f32	s15, s0
 8009298:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80092dc <GPS_distance_cm_bearing+0xd4>
 800929c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80092e0 <GPS_distance_cm_bearing+0xd8>
 80092a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092ac:	ee17 2a90 	vmov	r2, s15
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da06      	bge.n	80092ca <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80092c4:	33a0      	adds	r3, #160	; 0xa0
 80092c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c8:	6013      	str	r3, [r2, #0]
}
 80092ca:	bf00      	nop
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20000028 	.word	0x20000028
 80092d8:	3f8e7d2c 	.word	0x3f8e7d2c
 80092dc:	45b30ca0 	.word	0x45b30ca0
 80092e0:	460ca000 	.word	0x460ca000

080092e4 <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 80092ea:	4b38      	ldr	r3, [pc, #224]	; (80093cc <GPS_calc_velocity+0xe8>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05b      	beq.n	80093aa <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 80092f2:	4b37      	ldr	r3, [pc, #220]	; (80093d0 <GPS_calc_velocity+0xec>)
 80092f4:	ed93 7a00 	vldr	s14, [r3]
 80092f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009300:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8009304:	4b33      	ldr	r3, [pc, #204]	; (80093d4 <GPS_calc_velocity+0xf0>)
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	4b33      	ldr	r3, [pc, #204]	; (80093d8 <GPS_calc_velocity+0xf4>)
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009316:	4b31      	ldr	r3, [pc, #196]	; (80093dc <GPS_calc_velocity+0xf8>)
 8009318:	edd3 7a00 	vldr	s15, [r3]
 800931c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009320:	edd7 7a01 	vldr	s15, [r7, #4]
 8009324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800932c:	ee17 3a90 	vmov	r3, s15
 8009330:	b21a      	sxth	r2, r3
 8009332:	4b2b      	ldr	r3, [pc, #172]	; (80093e0 <GPS_calc_velocity+0xfc>)
 8009334:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 8009336:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <GPS_calc_velocity+0xf0>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <GPS_calc_velocity+0xf4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009348:	edd7 7a01 	vldr	s15, [r7, #4]
 800934c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009354:	ee17 3a90 	vmov	r3, s15
 8009358:	b21a      	sxth	r2, r3
 800935a:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <GPS_calc_velocity+0xfc>)
 800935c:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 800935e:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <GPS_calc_velocity+0xfc>)
 8009360:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009364:	461a      	mov	r2, r3
 8009366:	4b1f      	ldr	r3, [pc, #124]	; (80093e4 <GPS_calc_velocity+0x100>)
 8009368:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800936c:	4413      	add	r3, r2
 800936e:	0fda      	lsrs	r2, r3, #31
 8009370:	4413      	add	r3, r2
 8009372:	105b      	asrs	r3, r3, #1
 8009374:	b21a      	sxth	r2, r3
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <GPS_calc_velocity+0xfc>)
 8009378:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <GPS_calc_velocity+0xfc>)
 800937c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009380:	461a      	mov	r2, r3
 8009382:	4b18      	ldr	r3, [pc, #96]	; (80093e4 <GPS_calc_velocity+0x100>)
 8009384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009388:	4413      	add	r3, r2
 800938a:	0fda      	lsrs	r2, r3, #31
 800938c:	4413      	add	r3, r2
 800938e:	105b      	asrs	r3, r3, #1
 8009390:	b21a      	sxth	r2, r3
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <GPS_calc_velocity+0xfc>)
 8009394:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 8009396:	4b12      	ldr	r3, [pc, #72]	; (80093e0 <GPS_calc_velocity+0xfc>)
 8009398:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800939c:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <GPS_calc_velocity+0x100>)
 800939e:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <GPS_calc_velocity+0xfc>)
 80093a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80093a6:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <GPS_calc_velocity+0x100>)
 80093a8:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 80093aa:	4b08      	ldr	r3, [pc, #32]	; (80093cc <GPS_calc_velocity+0xe8>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <GPS_calc_velocity+0xf0>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <GPS_calc_velocity+0xf4>)
 80093b6:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <GPS_calc_velocity+0xf0>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a06      	ldr	r2, [pc, #24]	; (80093d8 <GPS_calc_velocity+0xf4>)
 80093be:	6013      	str	r3, [r2, #0]
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	200013ad 	.word	0x200013ad
 80093d0:	20001324 	.word	0x20001324
 80093d4:	20001760 	.word	0x20001760
 80093d8:	200013b0 	.word	0x200013b0
 80093dc:	20000028 	.word	0x20000028
 80093e0:	20001328 	.word	0x20001328
 80093e4:	200013b8 	.word	0x200013b8

080093e8 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <GPS_calc_location_error+0x50>)
 800940a:	edd3 7a00 	vldr	s15, [r3]
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009416:	ee17 2a90 	vmov	r2, s15
 800941a:	4b08      	ldr	r3, [pc, #32]	; (800943c <GPS_calc_location_error+0x54>)
 800941c:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	4a04      	ldr	r2, [pc, #16]	; (800943c <GPS_calc_location_error+0x54>)
 800942a:	6013      	str	r3, [r2, #0]
}
 800942c:	bf00      	nop
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	20000028 	.word	0x20000028
 800943c:	20001330 	.word	0x20001330

08009440 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 8009446:	2300      	movs	r3, #0
 8009448:	60bb      	str	r3, [r7, #8]
 800944a:	e092      	b.n	8009572 <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 800944c:	4a4d      	ldr	r2, [pc, #308]	; (8009584 <GPS_calc_poshold+0x144>)
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009454:	494c      	ldr	r1, [pc, #304]	; (8009588 <GPS_calc_poshold+0x148>)
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff f9a4 	bl	80087a4 <get_P>
 800945c:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	b29a      	uxth	r2, r3
 8009462:	494a      	ldr	r1, [pc, #296]	; (800958c <GPS_calc_poshold+0x14c>)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800946a:	b29b      	uxth	r3, r3
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	b219      	sxth	r1, r3
 8009472:	4a47      	ldr	r2, [pc, #284]	; (8009590 <GPS_calc_poshold+0x150>)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 800947a:	4a45      	ldr	r2, [pc, #276]	; (8009590 <GPS_calc_poshold+0x150>)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009482:	4944      	ldr	r1, [pc, #272]	; (8009594 <GPS_calc_poshold+0x154>)
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff f98d 	bl	80087a4 <get_P>
 800948a:	4603      	mov	r3, r0
 800948c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800948e:	4a40      	ldr	r2, [pc, #256]	; (8009590 <GPS_calc_poshold+0x150>)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009496:	4619      	mov	r1, r3
 8009498:	4a3a      	ldr	r2, [pc, #232]	; (8009584 <GPS_calc_poshold+0x144>)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a0:	18c8      	adds	r0, r1, r3
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4a3a      	ldr	r2, [pc, #232]	; (8009598 <GPS_calc_poshold+0x158>)
 80094ae:	441a      	add	r2, r3
 80094b0:	4b38      	ldr	r3, [pc, #224]	; (8009594 <GPS_calc_poshold+0x154>)
 80094b2:	493a      	ldr	r1, [pc, #232]	; (800959c <GPS_calc_poshold+0x15c>)
 80094b4:	f7ff f98f 	bl	80087d6 <get_I>
 80094b8:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	4423      	add	r3, r4
 80094be:	b29b      	uxth	r3, r3
 80094c0:	b219      	sxth	r1, r3
 80094c2:	4a37      	ldr	r2, [pc, #220]	; (80095a0 <GPS_calc_poshold+0x160>)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80094ca:	4a2e      	ldr	r2, [pc, #184]	; (8009584 <GPS_calc_poshold+0x144>)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4a2e      	ldr	r2, [pc, #184]	; (8009598 <GPS_calc_poshold+0x158>)
 80094de:	441a      	add	r2, r3
 80094e0:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <GPS_calc_poshold+0x154>)
 80094e2:	492e      	ldr	r1, [pc, #184]	; (800959c <GPS_calc_poshold+0x15c>)
 80094e4:	f7ff f9c0 	bl	8008868 <get_D>
 80094e8:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 80094ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80094ee:	492d      	ldr	r1, [pc, #180]	; (80095a4 <GPS_calc_poshold+0x164>)
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7fa fc2f 	bl	8003d54 <constrain>
 80094f6:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 80094f8:	4a24      	ldr	r2, [pc, #144]	; (800958c <GPS_calc_poshold+0x14c>)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfb8      	it	lt
 8009504:	425b      	neglt	r3, r3
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b31      	cmp	r3, #49	; 0x31
 800950a:	d801      	bhi.n	8009510 <GPS_calc_poshold+0xd0>
            d = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009510:	4a23      	ldr	r2, [pc, #140]	; (80095a0 <GPS_calc_poshold+0x160>)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	b29b      	uxth	r3, r3
 800951e:	4413      	add	r3, r2
 8009520:	b29b      	uxth	r3, r3
 8009522:	b219      	sxth	r1, r3
 8009524:	4a1e      	ldr	r2, [pc, #120]	; (80095a0 <GPS_calc_poshold+0x160>)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 800952c:	4a1c      	ldr	r2, [pc, #112]	; (80095a0 <GPS_calc_poshold+0x160>)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009534:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009538:	491b      	ldr	r1, [pc, #108]	; (80095a8 <GPS_calc_poshold+0x168>)
 800953a:	4618      	mov	r0, r3
 800953c:	f7fa fc0a 	bl	8003d54 <constrain>
 8009540:	4603      	mov	r3, r0
 8009542:	b219      	sxth	r1, r3
 8009544:	4a16      	ldr	r2, [pc, #88]	; (80095a0 <GPS_calc_poshold+0x160>)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 800954c:	4912      	ldr	r1, [pc, #72]	; (8009598 <GPS_calc_poshold+0x158>)
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	6819      	ldr	r1, [r3, #0]
 800955c:	4813      	ldr	r0, [pc, #76]	; (80095ac <GPS_calc_poshold+0x16c>)
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4403      	add	r3, r0
 800956a:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	3301      	adds	r3, #1
 8009570:	60bb      	str	r3, [r7, #8]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b01      	cmp	r3, #1
 8009576:	f77f af69 	ble.w	800944c <GPS_calc_poshold+0xc>
    }
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	bd90      	pop	{r4, r7, pc}
 8009584:	20001330 	.word	0x20001330
 8009588:	2000126c 	.word	0x2000126c
 800958c:	20001328 	.word	0x20001328
 8009590:	2000132c 	.word	0x2000132c
 8009594:	2000127c 	.word	0x2000127c
 8009598:	200012d4 	.word	0x200012d4
 800959c:	20001324 	.word	0x20001324
 80095a0:	20001794 	.word	0x20001794
 80095a4:	fffff830 	.word	0xfffff830
 80095a8:	fffff448 	.word	0xfffff448
 80095ac:	200012fc 	.word	0x200012fc

080095b0 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80095b8:	f000 f8cc 	bl	8009754 <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80095bc:	4b5a      	ldr	r3, [pc, #360]	; (8009728 <GPS_calc_nav_rate+0x178>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80095c4:	3328      	adds	r3, #40	; 0x28
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095ce:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800972c <GPS_calc_nav_rate+0x17c>
 80095d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095d6:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 80095da:	ed97 0a04 	vldr	s0, [r7, #16]
 80095de:	f019 fc5f 	bl	8022ea0 <cosf>
 80095e2:	eef0 7a40 	vmov.f32	s15, s0
 80095e6:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 80095ea:	ed97 0a04 	vldr	s0, [r7, #16]
 80095ee:	f019 fcdb 	bl	8022fa8 <sinf>
 80095f2:	eef0 7a40 	vmov.f32	s15, s0
 80095f6:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	e08a      	b.n	8009716 <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	3318      	adds	r3, #24
 8009606:	443b      	add	r3, r7
 8009608:	3b10      	subs	r3, #16
 800960a:	ed93 7a00 	vldr	s14, [r3]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800961c:	4a44      	ldr	r2, [pc, #272]	; (8009730 <GPS_calc_nav_rate+0x180>)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800962c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009634:	ee17 3a90 	vmov	r3, s15
 8009638:	b219      	sxth	r1, r3
 800963a:	4a3e      	ldr	r2, [pc, #248]	; (8009734 <GPS_calc_nav_rate+0x184>)
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 8009642:	4a3c      	ldr	r2, [pc, #240]	; (8009734 <GPS_calc_nav_rate+0x184>)
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800964a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800964e:	493a      	ldr	r1, [pc, #232]	; (8009738 <GPS_calc_nav_rate+0x188>)
 8009650:	4618      	mov	r0, r3
 8009652:	f7fa fb7f 	bl	8003d54 <constrain>
 8009656:	4603      	mov	r3, r0
 8009658:	b219      	sxth	r1, r3
 800965a:	4a36      	ldr	r2, [pc, #216]	; (8009734 <GPS_calc_nav_rate+0x184>)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009662:	4a34      	ldr	r2, [pc, #208]	; (8009734 <GPS_calc_nav_rate+0x184>)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800966a:	4934      	ldr	r1, [pc, #208]	; (800973c <GPS_calc_nav_rate+0x18c>)
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff f899 	bl	80087a4 <get_P>
 8009672:	4603      	mov	r3, r0
 8009674:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009676:	4a2f      	ldr	r2, [pc, #188]	; (8009734 <GPS_calc_nav_rate+0x184>)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800967e:	4618      	mov	r0, r3
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a2d      	ldr	r2, [pc, #180]	; (8009740 <GPS_calc_nav_rate+0x190>)
 800968c:	441a      	add	r2, r3
 800968e:	4b2b      	ldr	r3, [pc, #172]	; (800973c <GPS_calc_nav_rate+0x18c>)
 8009690:	492c      	ldr	r1, [pc, #176]	; (8009744 <GPS_calc_nav_rate+0x194>)
 8009692:	f7ff f8a0 	bl	80087d6 <get_I>
 8009696:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009698:	b29b      	uxth	r3, r3
 800969a:	4423      	add	r3, r4
 800969c:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 800969e:	4a25      	ldr	r2, [pc, #148]	; (8009734 <GPS_calc_nav_rate+0x184>)
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80096a6:	4618      	mov	r0, r3
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4a23      	ldr	r2, [pc, #140]	; (8009740 <GPS_calc_nav_rate+0x190>)
 80096b4:	441a      	add	r2, r3
 80096b6:	4b21      	ldr	r3, [pc, #132]	; (800973c <GPS_calc_nav_rate+0x18c>)
 80096b8:	4922      	ldr	r1, [pc, #136]	; (8009744 <GPS_calc_nav_rate+0x194>)
 80096ba:	f7ff f8d5 	bl	8008868 <get_D>
 80096be:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	4423      	add	r3, r4
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <GPS_calc_nav_rate+0x198>)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80096d0:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <GPS_calc_nav_rate+0x198>)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80096d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80096dc:	491b      	ldr	r1, [pc, #108]	; (800974c <GPS_calc_nav_rate+0x19c>)
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fa fb38 	bl	8003d54 <constrain>
 80096e4:	4603      	mov	r3, r0
 80096e6:	b219      	sxth	r1, r3
 80096e8:	4a17      	ldr	r2, [pc, #92]	; (8009748 <GPS_calc_nav_rate+0x198>)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 80096f0:	4913      	ldr	r1, [pc, #76]	; (8009740 <GPS_calc_nav_rate+0x190>)
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	4813      	ldr	r0, [pc, #76]	; (8009750 <GPS_calc_nav_rate+0x1a0>)
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4403      	add	r3, r0
 800970e:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	3301      	adds	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	f77f af71 	ble.w	8009600 <GPS_calc_nav_rate+0x50>
    }
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	bd90      	pop	{r4, r7, pc}
 8009728:	200013a0 	.word	0x200013a0
 800972c:	393702d3 	.word	0x393702d3
 8009730:	20001328 	.word	0x20001328
 8009734:	2000132c 	.word	0x2000132c
 8009738:	fffffc18 	.word	0xfffffc18
 800973c:	2000128c 	.word	0x2000128c
 8009740:	200012fc 	.word	0x200012fc
 8009744:	20001324 	.word	0x20001324
 8009748:	20001794 	.word	0x20001794
 800974c:	fffff448 	.word	0xfffff448
 8009750:	200012d4 	.word	0x200012d4

08009754 <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 800975a:	4b38      	ldr	r3, [pc, #224]	; (800983c <GPS_update_crosstrack+0xe8>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4b38      	ldr	r3, [pc, #224]	; (8009840 <GPS_update_crosstrack+0xec>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f8d5 	bl	8009914 <wrap_18000>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd10      	ble.n	8009792 <GPS_update_crosstrack+0x3e>
 8009770:	4b32      	ldr	r3, [pc, #200]	; (800983c <GPS_update_crosstrack+0xe8>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b32      	ldr	r3, [pc, #200]	; (8009840 <GPS_update_crosstrack+0xec>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f8ca 	bl	8009914 <wrap_18000>
 8009780:	4603      	mov	r3, r0
 8009782:	f241 1293 	movw	r2, #4499	; 0x1193
 8009786:	4293      	cmp	r3, r2
 8009788:	bfd4      	ite	le
 800978a:	2301      	movle	r3, #1
 800978c:	2300      	movgt	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	e00e      	b.n	80097b0 <GPS_update_crosstrack+0x5c>
 8009792:	4b2a      	ldr	r3, [pc, #168]	; (800983c <GPS_update_crosstrack+0xe8>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <GPS_update_crosstrack+0xec>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f8b9 	bl	8009914 <wrap_18000>
 80097a2:	4603      	mov	r3, r0
 80097a4:	4a27      	ldr	r2, [pc, #156]	; (8009844 <GPS_update_crosstrack+0xf0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	bfac      	ite	ge
 80097aa:	2301      	movge	r3, #1
 80097ac:	2300      	movlt	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d03b      	beq.n	800982c <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80097b4:	4b21      	ldr	r3, [pc, #132]	; (800983c <GPS_update_crosstrack+0xe8>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <GPS_update_crosstrack+0xec>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009848 <GPS_update_crosstrack+0xf4>
 80097ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ce:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 80097d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80097d6:	f019 fbe7 	bl	8022fa8 <sinf>
 80097da:	eeb0 7a40 	vmov.f32	s14, s0
 80097de:	4b1b      	ldr	r3, [pc, #108]	; (800984c <GPS_update_crosstrack+0xf8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097f2:	ee17 3a90 	vmov	r3, s15
 80097f6:	b21a      	sxth	r2, r3
 80097f8:	4b15      	ldr	r3, [pc, #84]	; (8009850 <GPS_update_crosstrack+0xfc>)
 80097fa:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 80097fc:	4b14      	ldr	r3, [pc, #80]	; (8009850 <GPS_update_crosstrack+0xfc>)
 80097fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009802:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009806:	4913      	ldr	r1, [pc, #76]	; (8009854 <GPS_update_crosstrack+0x100>)
 8009808:	4618      	mov	r0, r3
 800980a:	f7fa faa3 	bl	8003d54 <constrain>
 800980e:	4602      	mov	r2, r0
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <GPS_update_crosstrack+0xe8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4413      	add	r3, r2
 8009816:	4a10      	ldr	r2, [pc, #64]	; (8009858 <GPS_update_crosstrack+0x104>)
 8009818:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <GPS_update_crosstrack+0x104>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f898 	bl	8009954 <wrap_36000>
 8009824:	4603      	mov	r3, r0
 8009826:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <GPS_update_crosstrack+0x104>)
 8009828:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 800982a:	e003      	b.n	8009834 <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 800982c:	4b03      	ldr	r3, [pc, #12]	; (800983c <GPS_update_crosstrack+0xe8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a09      	ldr	r2, [pc, #36]	; (8009858 <GPS_update_crosstrack+0x104>)
 8009832:	6013      	str	r3, [r2, #0]
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20001340 	.word	0x20001340
 8009840:	20001344 	.word	0x20001344
 8009844:	ffffee6d 	.word	0xffffee6d
 8009848:	393702d3 	.word	0x393702d3
 800984c:	2000134c 	.word	0x2000134c
 8009850:	20001348 	.word	0x20001348
 8009854:	fffff448 	.word	0xfffff448
 8009858:	200013a0 	.word	0x200013a0

0800985c <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	460a      	mov	r2, r1
 8009866:	80fb      	strh	r3, [r7, #6]
 8009868:	4613      	mov	r3, r2
 800986a:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 800986c:	797b      	ldrb	r3, [r7, #5]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 8009872:	4b23      	ldr	r3, [pc, #140]	; (8009900 <GPS_calc_desired_speed+0xa4>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	0fda      	lsrs	r2, r3, #31
 8009878:	4413      	add	r3, r2
 800987a:	105b      	asrs	r3, r3, #1
 800987c:	461a      	mov	r2, r3
 800987e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009882:	4293      	cmp	r3, r2
 8009884:	bfa8      	it	ge
 8009886:	4613      	movge	r3, r2
 8009888:	80fb      	strh	r3, [r7, #6]
 800988a:	e011      	b.n	80098b0 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 800988c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009890:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <GPS_calc_desired_speed+0xa4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4293      	cmp	r3, r2
 8009896:	bfa8      	it	ge
 8009898:	4613      	movge	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 800989c:	4b19      	ldr	r3, [pc, #100]	; (8009904 <GPS_calc_desired_speed+0xa8>)
 800989e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80098a2:	461a      	mov	r2, r3
 80098a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	bfb8      	it	lt
 80098ac:	4613      	movlt	r3, r2
 80098ae:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80098b0:	4b15      	ldr	r3, [pc, #84]	; (8009908 <GPS_calc_desired_speed+0xac>)
 80098b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	dd17      	ble.n	80098ee <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80098be:	4b13      	ldr	r3, [pc, #76]	; (800990c <GPS_calc_desired_speed+0xb0>)
 80098c0:	edd3 7a00 	vldr	s15, [r3]
 80098c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009910 <GPS_calc_desired_speed+0xb4>
 80098c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098d0:	ee17 3a90 	vmov	r3, s15
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <GPS_calc_desired_speed+0xac>)
 80098d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4413      	add	r3, r2
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	b21a      	sxth	r2, r3
 80098e4:	4b08      	ldr	r3, [pc, #32]	; (8009908 <GPS_calc_desired_speed+0xac>)
 80098e6:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <GPS_calc_desired_speed+0xac>)
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 80098ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	2000134c 	.word	0x2000134c
 8009904:	20000e08 	.word	0x20000e08
 8009908:	20001350 	.word	0x20001350
 800990c:	20001324 	.word	0x20001324
 8009910:	42c80000 	.word	0x42c80000

08009914 <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f244 6250 	movw	r2, #18000	; 0x4650
 8009922:	4293      	cmp	r3, r2
 8009924:	dd04      	ble.n	8009930 <wrap_18000+0x1c>
        err -= 36000;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 800992c:	3ba0      	subs	r3, #160	; 0xa0
 800992e:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a07      	ldr	r2, [pc, #28]	; (8009950 <wrap_18000+0x3c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	da04      	bge.n	8009942 <wrap_18000+0x2e>
        err += 36000;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800993e:	33a0      	adds	r3, #160	; 0xa0
 8009940:	607b      	str	r3, [r7, #4]
    return err;
 8009942:	687b      	ldr	r3, [r7, #4]
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	ffffb9b0 	.word	0xffffb9b0

08009954 <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8009962:	4293      	cmp	r3, r2
 8009964:	dd04      	ble.n	8009970 <wrap_36000+0x1c>
        deg -= 36000;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 800996c:	3ba0      	subs	r3, #160	; 0xa0
 800996e:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	da04      	bge.n	8009980 <wrap_36000+0x2c>
        deg += 36000;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800997c:	33a0      	adds	r3, #160	; 0xa0
 800997e:	607b      	str	r3, [r7, #4]
    return deg;
 8009980:	687b      	ldr	r3, [r7, #4]
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	ed2d 8b02 	vpush	{d8}
 8009996:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009998:	4b45      	ldr	r3, [pc, #276]	; (8009ab0 <imuInit+0x120>)
 800999a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80099a6:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <imuInit+0x124>)
 80099a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f6 fd6d 	bl	800048c <__aeabi_i2d>
 80099b2:	a339      	add	r3, pc, #228	; (adr r3, 8009a98 <imuInit+0x108>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fdd2 	bl	8000560 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4610      	mov	r0, r2
 80099c2:	4619      	mov	r1, r3
 80099c4:	f7f7 f8ae 	bl	8000b24 <__aeabi_d2f>
 80099c8:	4603      	mov	r3, r0
 80099ca:	ee00 3a10 	vmov	s0, r3
 80099ce:	f019 fa67 	bl	8022ea0 <cosf>
 80099d2:	eef0 7a40 	vmov.f32	s15, s0
 80099d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80099da:	eeb0 0a67 	vmov.f32	s0, s15
 80099de:	f019 faa3 	bl	8022f28 <lrintf>
 80099e2:	4603      	mov	r3, r0
 80099e4:	b21a      	sxth	r2, r3
 80099e6:	4b34      	ldr	r3, [pc, #208]	; (8009ab8 <imuInit+0x128>)
 80099e8:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 80099ea:	4b31      	ldr	r3, [pc, #196]	; (8009ab0 <imuInit+0x120>)
 80099ec:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009abc <imuInit+0x12c>
 80099fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a00:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009ac0 <imuInit+0x130>
 8009a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a08:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <imuInit+0x134>)
 8009a0a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009a0e:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <imuInit+0x124>)
 8009a10:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009ac8 <imuInit+0x138>
 8009a20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a24:	ee16 0a90 	vmov	r0, s13
 8009a28:	f7f6 fd42 	bl	80004b0 <__aeabi_f2d>
 8009a2c:	a31c      	add	r3, pc, #112	; (adr r3, 8009aa0 <imuInit+0x110>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fd95 	bl	8000560 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f7f7 f871 	bl	8000b24 <__aeabi_d2f>
 8009a42:	4603      	mov	r3, r0
 8009a44:	4a21      	ldr	r2, [pc, #132]	; (8009acc <imuInit+0x13c>)
 8009a46:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 8009a48:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <imuInit+0x124>)
 8009a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f6 fd2f 	bl	80004b0 <__aeabi_f2d>
 8009a52:	a315      	add	r3, pc, #84	; (adr r3, 8009aa8 <imuInit+0x118>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fd82 	bl	8000560 <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	f04f 0000 	mov.w	r0, #0
 8009a64:	491a      	ldr	r1, [pc, #104]	; (8009ad0 <imuInit+0x140>)
 8009a66:	f7f6 fea5 	bl	80007b4 <__aeabi_ddiv>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4610      	mov	r0, r2
 8009a70:	4619      	mov	r1, r3
 8009a72:	f7f7 f857 	bl	8000b24 <__aeabi_d2f>
 8009a76:	4603      	mov	r3, r0
 8009a78:	4a16      	ldr	r2, [pc, #88]	; (8009ad4 <imuInit+0x144>)
 8009a7a:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 8009a7c:	2008      	movs	r0, #8
 8009a7e:	f7fd fa83 	bl	8006f88 <sensors>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <imuInit+0xfc>
        Mag_init();
 8009a88:	f005 fa94 	bl	800efb4 <Mag_init>
#endif
}
 8009a8c:	bf00      	nop
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	ecbd 8b02 	vpop	{d8}
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	a2529d39 	.word	0xa2529d39
 8009a9c:	3f91df46 	.word	0x3f91df46
 8009aa0:	907e593b 	.word	0x907e593b
 8009aa4:	4081e7a9 	.word	0x4081e7a9
 8009aa8:	54442d18 	.word	0x54442d18
 8009aac:	400921fb 	.word	0x400921fb
 8009ab0:	20000060 	.word	0x20000060
 8009ab4:	20000e08 	.word	0x20000e08
 8009ab8:	200013f0 	.word	0x200013f0
 8009abc:	411ce80a 	.word	0x411ce80a
 8009ac0:	461c4000 	.word	0x461c4000
 8009ac4:	20001428 	.word	0x20001428
 8009ac8:	44610000 	.word	0x44610000
 8009acc:	2000142c 	.word	0x2000142c
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	20001430 	.word	0x20001430

08009ad8 <computeIMU>:

int computeIMU(int step)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d02c      	beq.n	8009b40 <computeIMU+0x68>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	dc2d      	bgt.n	8009b48 <computeIMU+0x70>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <computeIMU+0x22>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d01a      	beq.n	8009b2e <computeIMU+0x56>
 8009af8:	e026      	b.n	8009b48 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009afa:	f005 fa45 	bl	800ef88 <Gyro_getADC>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d012      	beq.n	8009b2a <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 8009b04:	2002      	movs	r0, #2
 8009b06:	f7fd fa3f 	bl	8006f88 <sensors>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <computeIMU+0x3c>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e043      	b.n	8009b9c <computeIMU+0xc4>

			accADC[X] = 0;
 8009b14:	4b23      	ldr	r3, [pc, #140]	; (8009ba4 <computeIMU+0xcc>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009b1a:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <computeIMU+0xcc>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009b20:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <computeIMU+0xcc>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	809a      	strh	r2, [r3, #4]
			return 3;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e038      	b.n	8009b9c <computeIMU+0xc4>
		}
		return step;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	e036      	b.n	8009b9c <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009b2e:	f005 f803 	bl	800eb38 <ACC_getADC>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <computeIMU+0x64>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	e02f      	b.n	8009b9c <computeIMU+0xc4>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e02d      	b.n	8009b9c <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009b40:	f000 fbba 	bl	800a2b8 <getEstimatedAttitude>
		return 3;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e029      	b.n	8009b9c <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 8009b48:	4b17      	ldr	r3, [pc, #92]	; (8009ba8 <computeIMU+0xd0>)
 8009b4a:	795b      	ldrb	r3, [r3, #5]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d115      	bne.n	8009b7c <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 8009b50:	4b16      	ldr	r3, [pc, #88]	; (8009bac <computeIMU+0xd4>)
 8009b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <computeIMU+0xd8>)
 8009b5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009b5e:	4413      	add	r3, r2
 8009b60:	4a14      	ldr	r2, [pc, #80]	; (8009bb4 <computeIMU+0xdc>)
 8009b62:	fb82 1203 	smull	r1, r2, r2, r3
 8009b66:	17db      	asrs	r3, r3, #31
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	b21a      	sxth	r2, r3
 8009b6c:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <computeIMU+0xe0>)
 8009b6e:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <computeIMU+0xe0>)
 8009b72:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009b76:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <computeIMU+0xd4>)
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	e004      	b.n	8009b86 <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009b7c:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <computeIMU+0xd8>)
 8009b7e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <computeIMU+0xe0>)
 8009b84:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009b86:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <computeIMU+0xd8>)
 8009b88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <computeIMU+0xe0>)
 8009b8e:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 8009b90:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <computeIMU+0xd8>)
 8009b92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009b96:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <computeIMU+0xe0>)
 8009b98:	805a      	strh	r2, [r3, #2]
	return 4;
 8009b9a:	2304      	movs	r3, #4
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200013c4 	.word	0x200013c4
 8009ba8:	2000089c 	.word	0x2000089c
 8009bac:	2000145c 	.word	0x2000145c
 8009bb0:	200013bc 	.word	0x200013bc
 8009bb4:	55555556 	.word	0x55555556
 8009bb8:	20001434 	.word	0x20001434

08009bbc <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	ed93 7a00 	vldr	s14, [r3]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	edd3 7a00 	vldr	s15, [r3]
 8009bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	edd3 6a01 	vldr	s13, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8009be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	edd3 6a02 	vldr	s13, [r3, #8]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8009bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8009c02:	f019 fa9d 	bl	8023140 <sqrtf>
 8009c06:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	d01d      	beq.n	8009c54 <normalizeV+0x98>
        dest->X = src->X / length;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	edd3 6a00 	vldr	s13, [r3]
 8009c1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009c32:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	edd3 6a02 	vldr	s13, [r3, #8]
 8009c46:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b098      	sub	sp, #96	; 0x60
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	edd3 7a00 	vldr	s15, [r3]
 8009c78:	eeb0 0a67 	vmov.f32	s0, s15
 8009c7c:	f019 f910 	bl	8022ea0 <cosf>
 8009c80:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	edd3 7a00 	vldr	s15, [r3]
 8009c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c8e:	f019 f98b 	bl	8022fa8 <sinf>
 8009c92:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	edd3 7a00 	vldr	s15, [r3]
 8009c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca2:	f019 f8fd 	bl	8022ea0 <cosf>
 8009ca6:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	3304      	adds	r3, #4
 8009cae:	edd3 7a00 	vldr	s15, [r3]
 8009cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb6:	f019 f977 	bl	8022fa8 <sinf>
 8009cba:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	3308      	adds	r3, #8
 8009cc2:	edd3 7a00 	vldr	s15, [r3]
 8009cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8009cca:	f019 f8e9 	bl	8022ea0 <cosf>
 8009cce:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	edd3 7a00 	vldr	s15, [r3]
 8009cda:	eeb0 0a67 	vmov.f32	s0, s15
 8009cde:	f019 f963 	bl	8022fa8 <sinf>
 8009ce2:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009ce6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009cea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009cf6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009cfa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d02:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009d06:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009d0a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009d16:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009d1a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009d26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009d2a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d32:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009d36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d3a:	eeb1 7a67 	vneg.f32	s14, s15
 8009d3e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4c:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009d4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009d52:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d62:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009d66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d72:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7a:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009d7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009d82:	eeb1 7a67 	vneg.f32	s14, s15
 8009d86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8e:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009d92:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009d96:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da6:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009daa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009dae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009db6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009dc2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009dc6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009dd2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8009dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dde:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009de2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dee:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009df2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009e04:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e10:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e20:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009e24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009e36:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e42:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009e46:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e52:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009e56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	3760      	adds	r7, #96	; 0x60
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfb8      	it	lt
 8009e80:	425b      	neglt	r3, r3
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	dd02      	ble.n	8009e8e <applyDeadband+0x1e>
        value = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	e00e      	b.n	8009eac <applyDeadband+0x3c>
    } else if (value > 0) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dd04      	ble.n	8009e9e <applyDeadband+0x2e>
        value -= deadband;
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	607b      	str	r3, [r7, #4]
 8009e9c:	e006      	b.n	8009eac <applyDeadband+0x3c>
    } else if (value < 0) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da03      	bge.n	8009eac <applyDeadband+0x3c>
        value += deadband;
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009eac:	687b      	ldr	r3, [r7, #4]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	0000      	movs	r0, r0
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800a0e0 <acc_calc+0x220>
 8009edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ee0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009ee4:	4b7f      	ldr	r3, [pc, #508]	; (800a0e4 <acc_calc+0x224>)
 8009ee6:	edd3 7a00 	vldr	s15, [r3]
 8009eea:	eef1 7a67 	vneg.f32	s15, s15
 8009eee:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009ef2:	4b7c      	ldr	r3, [pc, #496]	; (800a0e4 <acc_calc+0x224>)
 8009ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ef8:	eef1 7a67 	vneg.f32	s15, s15
 8009efc:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009f00:	4b79      	ldr	r3, [pc, #484]	; (800a0e8 <acc_calc+0x228>)
 8009f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f0e:	eef1 7a67 	vneg.f32	s15, s15
 8009f12:	ee17 3a90 	vmov	r3, s15
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f6 faca 	bl	80004b0 <__aeabi_f2d>
 8009f1c:	a36e      	add	r3, pc, #440	; (adr r3, 800a0d8 <acc_calc+0x218>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 fb1d 	bl	8000560 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	f7f6 fdf9 	bl	8000b24 <__aeabi_d2f>
 8009f32:	4603      	mov	r3, r0
 8009f34:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009f36:	4b6d      	ldr	r3, [pc, #436]	; (800a0ec <acc_calc+0x22c>)
 8009f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f3c:	ee07 3a90 	vmov	s15, r3
 8009f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f44:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009f48:	4b68      	ldr	r3, [pc, #416]	; (800a0ec <acc_calc+0x22c>)
 8009f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f56:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009f5a:	4b64      	ldr	r3, [pc, #400]	; (800a0ec <acc_calc+0x22c>)
 8009f5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009f60:	ee07 3a90 	vmov	s15, r3
 8009f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f68:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009f6c:	f107 0218 	add.w	r2, r7, #24
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fe70 	bl	8009c5c <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009f7c:	4b5c      	ldr	r3, [pc, #368]	; (800a0f0 <acc_calc+0x230>)
 8009f7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d131      	bne.n	8009fea <acc_calc+0x12a>
        if (!f.ARMED) {
 8009f86:	4b5b      	ldr	r3, [pc, #364]	; (800a0f4 <acc_calc+0x234>)
 8009f88:	785b      	ldrb	r3, [r3, #1]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d11c      	bne.n	8009fc8 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009f8e:	4b5a      	ldr	r3, [pc, #360]	; (800a0f8 <acc_calc+0x238>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	da00      	bge.n	8009f98 <acc_calc+0xd8>
 8009f96:	333f      	adds	r3, #63	; 0x3f
 8009f98:	119b      	asrs	r3, r3, #6
 8009f9a:	425b      	negs	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4b56      	ldr	r3, [pc, #344]	; (800a0f8 <acc_calc+0x238>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	4a54      	ldr	r2, [pc, #336]	; (800a0f8 <acc_calc+0x238>)
 8009fa6:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009fa8:	4b53      	ldr	r3, [pc, #332]	; (800a0f8 <acc_calc+0x238>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fc0:	ee17 2a90 	vmov	r2, s15
 8009fc4:	4b4c      	ldr	r3, [pc, #304]	; (800a0f8 <acc_calc+0x238>)
 8009fc6:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8009fcc:	4b4a      	ldr	r3, [pc, #296]	; (800a0f8 <acc_calc+0x238>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da00      	bge.n	8009fd6 <acc_calc+0x116>
 8009fd4:	333f      	adds	r3, #63	; 0x3f
 8009fd6:	119b      	asrs	r3, r3, #6
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe4:	edc7 7a05 	vstr	s15, [r7, #20]
 8009fe8:	e00c      	b.n	800a004 <acc_calc+0x144>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 8009fea:	ed97 7a05 	vldr	s14, [r7, #20]
 8009fee:	4b43      	ldr	r3, [pc, #268]	; (800a0fc <acc_calc+0x23c>)
 8009ff0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a000:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 800a004:	4b3e      	ldr	r3, [pc, #248]	; (800a100 <acc_calc+0x240>)
 800a006:	ed93 7a00 	vldr	s14, [r3]
 800a00a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a00e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a012:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01a:	edd7 6a05 	vldr	s13, [r7, #20]
 800a01e:	4b39      	ldr	r3, [pc, #228]	; (800a104 <acc_calc+0x244>)
 800a020:	edd3 7a00 	vldr	s15, [r3]
 800a024:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a02c:	4b35      	ldr	r3, [pc, #212]	; (800a104 <acc_calc+0x244>)
 800a02e:	edd3 7a00 	vldr	s15, [r3]
 800a032:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a036:	4b33      	ldr	r3, [pc, #204]	; (800a104 <acc_calc+0x244>)
 800a038:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 800a03c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a040:	eeb0 0a67 	vmov.f32	s0, s15
 800a044:	f018 ff70 	bl	8022f28 <lrintf>
 800a048:	4603      	mov	r3, r0
 800a04a:	4a29      	ldr	r2, [pc, #164]	; (800a0f0 <acc_calc+0x230>)
 800a04c:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff ff0c 	bl	8009e70 <applyDeadband>
 800a058:	4602      	mov	r2, r0
 800a05a:	4b2b      	ldr	r3, [pc, #172]	; (800a108 <acc_calc+0x248>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4413      	add	r3, r2
 800a060:	4a29      	ldr	r2, [pc, #164]	; (800a108 <acc_calc+0x248>)
 800a062:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 800a064:	edd7 7a04 	vldr	s15, [r7, #16]
 800a068:	eeb0 0a67 	vmov.f32	s0, s15
 800a06c:	f018 ff5c 	bl	8022f28 <lrintf>
 800a070:	4603      	mov	r3, r0
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <acc_calc+0x230>)
 800a074:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff fef8 	bl	8009e70 <applyDeadband>
 800a080:	4602      	mov	r2, r0
 800a082:	4b21      	ldr	r3, [pc, #132]	; (800a108 <acc_calc+0x248>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	4413      	add	r3, r2
 800a088:	4a1f      	ldr	r2, [pc, #124]	; (800a108 <acc_calc+0x248>)
 800a08a:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 800a08c:	4b1d      	ldr	r3, [pc, #116]	; (800a104 <acc_calc+0x244>)
 800a08e:	edd3 7a00 	vldr	s15, [r3]
 800a092:	eeb0 0a67 	vmov.f32	s0, s15
 800a096:	f018 ff47 	bl	8022f28 <lrintf>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4a14      	ldr	r2, [pc, #80]	; (800a0f0 <acc_calc+0x230>)
 800a09e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fee3 	bl	8009e70 <applyDeadband>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <acc_calc+0x248>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	4a15      	ldr	r2, [pc, #84]	; (800a108 <acc_calc+0x248>)
 800a0b4:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 800a0b6:	4b15      	ldr	r3, [pc, #84]	; (800a10c <acc_calc+0x24c>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	4a13      	ldr	r2, [pc, #76]	; (800a10c <acc_calc+0x24c>)
 800a0c0:	6013      	str	r3, [r2, #0]
    accSumCount++;
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <acc_calc+0x250>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	4a11      	ldr	r2, [pc, #68]	; (800a110 <acc_calc+0x250>)
 800a0ca:	6013      	str	r3, [r2, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	3728      	adds	r7, #40	; 0x28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	f3af 8000 	nop.w
 800a0d8:	a2529d39 	.word	0xa2529d39
 800a0dc:	3f91df46 	.word	0x3f91df46
 800a0e0:	358637bd 	.word	0x358637bd
 800a0e4:	20001448 	.word	0x20001448
 800a0e8:	20001968 	.word	0x20001968
 800a0ec:	200013cc 	.word	0x200013cc
 800a0f0:	20000e08 	.word	0x20000e08
 800a0f4:	2000169c 	.word	0x2000169c
 800a0f8:	20001460 	.word	0x20001460
 800a0fc:	20000060 	.word	0x20000060
 800a100:	20001430 	.word	0x20001430
 800a104:	20001464 	.word	0x20001464
 800a108:	200013dc 	.word	0x200013dc
 800a10c:	200013e8 	.word	0x200013e8
 800a110:	200013ec 	.word	0x200013ec

0800a114 <accSum_reset>:

void accSum_reset(void)
{
 800a114:	b480      	push	{r7}
 800a116:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 800a118:	4b09      	ldr	r3, [pc, #36]	; (800a140 <accSum_reset+0x2c>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <accSum_reset+0x2c>)
 800a120:	2200      	movs	r2, #0
 800a122:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <accSum_reset+0x2c>)
 800a126:	2200      	movs	r2, #0
 800a128:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <accSum_reset+0x30>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 800a130:	4b05      	ldr	r3, [pc, #20]	; (800a148 <accSum_reset+0x34>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
}
 800a136:	bf00      	nop
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	200013dc 	.word	0x200013dc
 800a144:	200013ec 	.word	0x200013ec
 800a148:	200013e8 	.word	0x200013e8
 800a14c:	00000000 	.word	0x00000000

0800a150 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 800a150:	b5b0      	push	{r4, r5, r7, lr}
 800a152:	b08a      	sub	sp, #40	; 0x28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 800a158:	4b53      	ldr	r3, [pc, #332]	; (800a2a8 <calculateHeading+0x158>)
 800a15a:	edd3 7a00 	vldr	s15, [r3]
 800a15e:	eeb0 0a67 	vmov.f32	s0, s15
 800a162:	f018 fe9d 	bl	8022ea0 <cosf>
 800a166:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 800a16a:	4b4f      	ldr	r3, [pc, #316]	; (800a2a8 <calculateHeading+0x158>)
 800a16c:	edd3 7a00 	vldr	s15, [r3]
 800a170:	eeb0 0a67 	vmov.f32	s0, s15
 800a174:	f018 ff18 	bl	8022fa8 <sinf>
 800a178:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 800a17c:	4b4a      	ldr	r3, [pc, #296]	; (800a2a8 <calculateHeading+0x158>)
 800a17e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a182:	eeb0 0a67 	vmov.f32	s0, s15
 800a186:	f018 fe8b 	bl	8022ea0 <cosf>
 800a18a:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 800a18e:	4b46      	ldr	r3, [pc, #280]	; (800a2a8 <calculateHeading+0x158>)
 800a190:	edd3 7a01 	vldr	s15, [r3, #4]
 800a194:	eeb0 0a67 	vmov.f32	s0, s15
 800a198:	f018 ff06 	bl	8022fa8 <sinf>
 800a19c:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	ed93 7a00 	vldr	s14, [r3]
 800a1a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800a1b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1bc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	edd3 6a02 	vldr	s13, [r3, #8]
 800a1ce:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1d6:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e2:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a1ec:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a1fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a206:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a20a:	edd7 0a04 	vldr	s1, [r7, #16]
 800a20e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a212:	f018 ff3b 	bl	802308c <atan2f>
 800a216:	eef0 7a40 	vmov.f32	s15, s0
 800a21a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a2ac <calculateHeading+0x15c>
 800a21e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a222:	ee17 0a90 	vmov	r0, s15
 800a226:	f7f6 f943 	bl	80004b0 <__aeabi_f2d>
 800a22a:	a31d      	add	r3, pc, #116	; (adr r3, 800a2a0 <calculateHeading+0x150>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f7f6 fac0 	bl	80007b4 <__aeabi_ddiv>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4614      	mov	r4, r2
 800a23a:	461d      	mov	r5, r3
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <calculateHeading+0x160>)
 800a23e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a242:	4618      	mov	r0, r3
 800a244:	f7f6 f934 	bl	80004b0 <__aeabi_f2d>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f5 ffd0 	bl	80001f4 <__adddf3>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	f04f 0200 	mov.w	r2, #0
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <calculateHeading+0x164>)
 800a262:	f7f6 faa7 	bl	80007b4 <__aeabi_ddiv>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4610      	mov	r0, r2
 800a26c:	4619      	mov	r1, r3
 800a26e:	f7f6 fc59 	bl	8000b24 <__aeabi_d2f>
 800a272:	4603      	mov	r3, r0
 800a274:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a276:	ed97 0a02 	vldr	s0, [r7, #8]
 800a27a:	f018 fe55 	bl	8022f28 <lrintf>
 800a27e:	4603      	mov	r3, r0
 800a280:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a282:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a286:	2b00      	cmp	r3, #0
 800a288:	da04      	bge.n	800a294 <calculateHeading+0x144>
        head += 360;
 800a28a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a28c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a290:	b29b      	uxth	r3, r3
 800a292:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a294:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3728      	adds	r7, #40	; 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bdb0      	pop	{r4, r5, r7, pc}
 800a2a0:	54442d18 	.word	0x54442d18
 800a2a4:	400921fb 	.word	0x400921fb
 800a2a8:	20001448 	.word	0x20001448
 800a2ac:	44e10000 	.word	0x44e10000
 800a2b0:	20000060 	.word	0x20000060
 800a2b4:	40240000 	.word	0x40240000

0800a2b8 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	ed2d 8b02 	vpush	{d8}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a2c6:	4bbe      	ldr	r3, [pc, #760]	; (800a5c0 <getEstimatedAttitude+0x308>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4798      	blx	r3
 800a2cc:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a2ce:	4bbd      	ldr	r3, [pc, #756]	; (800a5c4 <getEstimatedAttitude+0x30c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2e2:	4bb9      	ldr	r3, [pc, #740]	; (800a5c8 <getEstimatedAttitude+0x310>)
 800a2e4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800a2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ec:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a2f0:	4ab4      	ldr	r2, [pc, #720]	; (800a5c4 <getEstimatedAttitude+0x30c>)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fa:	e074      	b.n	800a3e6 <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a2fc:	4ab3      	ldr	r2, [pc, #716]	; (800a5cc <getEstimatedAttitude+0x314>)
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a304:	ee07 3a90 	vmov	s15, r3
 800a308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a30c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	3328      	adds	r3, #40	; 0x28
 800a31a:	443b      	add	r3, r7
 800a31c:	3b28      	subs	r3, #40	; 0x28
 800a31e:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a322:	4bab      	ldr	r3, [pc, #684]	; (800a5d0 <getEstimatedAttitude+0x318>)
 800a324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d043      	beq.n	800a3b4 <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a32c:	4aa9      	ldr	r2, [pc, #676]	; (800a5d4 <getEstimatedAttitude+0x31c>)
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	ed93 7a00 	vldr	s14, [r3]
 800a338:	4ba5      	ldr	r3, [pc, #660]	; (800a5d0 <getEstimatedAttitude+0x318>)
 800a33a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a346:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a34a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a352:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a35a:	4a9f      	ldr	r2, [pc, #636]	; (800a5d8 <getEstimatedAttitude+0x320>)
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a36a:	4b99      	ldr	r3, [pc, #612]	; (800a5d0 <getEstimatedAttitude+0x318>)
 800a36c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a370:	ee07 3a90 	vmov	s15, r3
 800a374:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a378:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a37c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a388:	4a92      	ldr	r2, [pc, #584]	; (800a5d4 <getEstimatedAttitude+0x31c>)
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a394:	4a8f      	ldr	r2, [pc, #572]	; (800a5d4 <getEstimatedAttitude+0x31c>)
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	edd3 7a00 	vldr	s15, [r3]
 800a3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3a4:	ee17 3a90 	vmov	r3, s15
 800a3a8:	b219      	sxth	r1, r3
 800a3aa:	4a8c      	ldr	r2, [pc, #560]	; (800a5dc <getEstimatedAttitude+0x324>)
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a3b2:	e007      	b.n	800a3c4 <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a3b4:	4a88      	ldr	r2, [pc, #544]	; (800a5d8 <getEstimatedAttitude+0x320>)
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a3bc:	4a87      	ldr	r2, [pc, #540]	; (800a5dc <getEstimatedAttitude+0x324>)
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a3c4:	4a85      	ldr	r2, [pc, #532]	; (800a5dc <getEstimatedAttitude+0x324>)
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4a83      	ldr	r2, [pc, #524]	; (800a5dc <getEstimatedAttitude+0x324>)
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	6a3a      	ldr	r2, [r7, #32]
 800a3dc:	4413      	add	r3, r2
 800a3de:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	dd87      	ble.n	800a2fc <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	2264      	movs	r2, #100	; 0x64
 800a3f0:	fb03 f202 	mul.w	r2, r3, r2
 800a3f4:	4b74      	ldr	r3, [pc, #464]	; (800a5c8 <getEstimatedAttitude+0x310>)
 800a3f6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4b72      	ldr	r3, [pc, #456]	; (800a5c8 <getEstimatedAttitude+0x310>)
 800a3fe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	fb92 f3f3 	sdiv	r3, r2, r3
 800a40a:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a40c:	463b      	mov	r3, r7
 800a40e:	4619      	mov	r1, r3
 800a410:	4873      	ldr	r0, [pc, #460]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a412:	f7ff fc23 	bl	8009c5c <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b48      	cmp	r3, #72	; 0x48
 800a41c:	d93c      	bls.n	800a498 <getEstimatedAttitude+0x1e0>
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b84      	cmp	r3, #132	; 0x84
 800a424:	d838      	bhi.n	800a498 <getEstimatedAttitude+0x1e0>
        for (axis = 0; axis < 3; axis++)
 800a426:	2300      	movs	r3, #0
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
 800a42a:	e032      	b.n	800a492 <getEstimatedAttitude+0x1da>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a42c:	4a6c      	ldr	r2, [pc, #432]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	ed93 7a00 	vldr	s14, [r3]
 800a438:	4b6a      	ldr	r3, [pc, #424]	; (800a5e4 <getEstimatedAttitude+0x32c>)
 800a43a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a44a:	4a64      	ldr	r2, [pc, #400]	; (800a5dc <getEstimatedAttitude+0x324>)
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a45a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a45e:	4b61      	ldr	r3, [pc, #388]	; (800a5e4 <getEstimatedAttitude+0x32c>)
 800a460:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a470:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a478:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a480:	4a57      	ldr	r2, [pc, #348]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	3301      	adds	r3, #1
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	2b02      	cmp	r3, #2
 800a496:	ddc9      	ble.n	800a42c <getEstimatedAttitude+0x174>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a498:	4b51      	ldr	r3, [pc, #324]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a49a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a49e:	4b52      	ldr	r3, [pc, #328]	; (800a5e8 <getEstimatedAttitude+0x330>)
 800a4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b4:	bfcc      	ite	gt
 800a4b6:	2301      	movgt	r3, #1
 800a4b8:	2300      	movle	r3, #0
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4b4b      	ldr	r3, [pc, #300]	; (800a5ec <getEstimatedAttitude+0x334>)
 800a4c0:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a4c2:	4b47      	ldr	r3, [pc, #284]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a4c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4c8:	4b45      	ldr	r3, [pc, #276]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a4ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800a4ce:	eef0 0a47 	vmov.f32	s1, s14
 800a4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d6:	f018 fdd9 	bl	802308c <atan2f>
 800a4da:	eef0 7a40 	vmov.f32	s15, s0
 800a4de:	4b44      	ldr	r3, [pc, #272]	; (800a5f0 <getEstimatedAttitude+0x338>)
 800a4e0:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a4e4:	4b3e      	ldr	r3, [pc, #248]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a4e6:	edd3 7a00 	vldr	s15, [r3]
 800a4ea:	eeb1 8a67 	vneg.f32	s16, s15
 800a4ee:	4b3c      	ldr	r3, [pc, #240]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a4f0:	ed93 7a01 	vldr	s14, [r3, #4]
 800a4f4:	4b3a      	ldr	r3, [pc, #232]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a4f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4fe:	4b38      	ldr	r3, [pc, #224]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a500:	edd3 6a02 	vldr	s13, [r3, #8]
 800a504:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <getEstimatedAttitude+0x328>)
 800a506:	edd3 7a02 	vldr	s15, [r3, #8]
 800a50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a512:	eeb0 0a67 	vmov.f32	s0, s15
 800a516:	f018 fe13 	bl	8023140 <sqrtf>
 800a51a:	eef0 7a40 	vmov.f32	s15, s0
 800a51e:	eef0 0a67 	vmov.f32	s1, s15
 800a522:	eeb0 0a48 	vmov.f32	s0, s16
 800a526:	f018 fdb1 	bl	802308c <atan2f>
 800a52a:	eef0 7a40 	vmov.f32	s15, s0
 800a52e:	4b30      	ldr	r3, [pc, #192]	; (800a5f0 <getEstimatedAttitude+0x338>)
 800a530:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a534:	4b2e      	ldr	r3, [pc, #184]	; (800a5f0 <getEstimatedAttitude+0x338>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7f5 ffb9 	bl	80004b0 <__aeabi_f2d>
 800a53e:	a31e      	add	r3, pc, #120	; (adr r3, 800a5b8 <getEstimatedAttitude+0x300>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f7f6 f80c 	bl	8000560 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4610      	mov	r0, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	f7f6 fae8 	bl	8000b24 <__aeabi_d2f>
 800a554:	4603      	mov	r3, r0
 800a556:	ee00 3a10 	vmov	s0, r3
 800a55a:	f018 fce5 	bl	8022f28 <lrintf>
 800a55e:	4603      	mov	r3, r0
 800a560:	b21a      	sxth	r2, r3
 800a562:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <getEstimatedAttitude+0x33c>)
 800a564:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a566:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <getEstimatedAttitude+0x338>)
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7f5 ffa0 	bl	80004b0 <__aeabi_f2d>
 800a570:	a311      	add	r3, pc, #68	; (adr r3, 800a5b8 <getEstimatedAttitude+0x300>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f5 fff3 	bl	8000560 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4610      	mov	r0, r2
 800a580:	4619      	mov	r1, r3
 800a582:	f7f6 facf 	bl	8000b24 <__aeabi_d2f>
 800a586:	4603      	mov	r3, r0
 800a588:	ee00 3a10 	vmov	s0, r3
 800a58c:	f018 fccc 	bl	8022f28 <lrintf>
 800a590:	4603      	mov	r3, r0
 800a592:	b21a      	sxth	r2, r3
 800a594:	4b17      	ldr	r3, [pc, #92]	; (800a5f4 <getEstimatedAttitude+0x33c>)
 800a596:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a598:	2008      	movs	r0, #8
 800a59a:	f7fc fcf5 	bl	8006f88 <sensors>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d069      	beq.n	800a678 <getEstimatedAttitude+0x3c0>
        rotateV(&EstM.V, deltaGyroAngle);
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4813      	ldr	r0, [pc, #76]	; (800a5f8 <getEstimatedAttitude+0x340>)
 800a5aa:	f7ff fb57 	bl	8009c5c <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b2:	e056      	b.n	800a662 <getEstimatedAttitude+0x3aa>
 800a5b4:	f3af 8000 	nop.w
 800a5b8:	907e593b 	.word	0x907e593b
 800a5bc:	4081e7a9 	.word	0x4081e7a9
 800a5c0:	20001bdc 	.word	0x20001bdc
 800a5c4:	20001468 	.word	0x20001468
 800a5c8:	20000060 	.word	0x20000060
 800a5cc:	200013bc 	.word	0x200013bc
 800a5d0:	20000e08 	.word	0x20000e08
 800a5d4:	2000146c 	.word	0x2000146c
 800a5d8:	200013c4 	.word	0x200013c4
 800a5dc:	200013cc 	.word	0x200013cc
 800a5e0:	20001450 	.word	0x20001450
 800a5e4:	2000089c 	.word	0x2000089c
 800a5e8:	200013f0 	.word	0x200013f0
 800a5ec:	2000169c 	.word	0x2000169c
 800a5f0:	20001448 	.word	0x20001448
 800a5f4:	20001444 	.word	0x20001444
 800a5f8:	20001478 	.word	0x20001478
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a5fc:	4a6a      	ldr	r2, [pc, #424]	; (800a7a8 <getEstimatedAttitude+0x4f0>)
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	ed93 7a00 	vldr	s14, [r3]
 800a608:	4b68      	ldr	r3, [pc, #416]	; (800a7ac <getEstimatedAttitude+0x4f4>)
 800a60a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a60e:	ee07 3a90 	vmov	s15, r3
 800a612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a61a:	4a65      	ldr	r2, [pc, #404]	; (800a7b0 <getEstimatedAttitude+0x4f8>)
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a62a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a62e:	4b5f      	ldr	r3, [pc, #380]	; (800a7ac <getEstimatedAttitude+0x4f4>)
 800a630:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a634:	ee07 3a90 	vmov	s15, r3
 800a638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a640:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a644:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a648:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a64c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a650:	4a55      	ldr	r2, [pc, #340]	; (800a7a8 <getEstimatedAttitude+0x4f0>)
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	3301      	adds	r3, #1
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	2b02      	cmp	r3, #2
 800a666:	ddc9      	ble.n	800a5fc <getEstimatedAttitude+0x344>
        heading = calculateHeading(&EstM);
 800a668:	484f      	ldr	r0, [pc, #316]	; (800a7a8 <getEstimatedAttitude+0x4f0>)
 800a66a:	f7ff fd71 	bl	800a150 <calculateHeading>
 800a66e:	4603      	mov	r3, r0
 800a670:	461a      	mov	r2, r3
 800a672:	4b50      	ldr	r3, [pc, #320]	; (800a7b4 <getEstimatedAttitude+0x4fc>)
 800a674:	801a      	strh	r2, [r3, #0]
 800a676:	e00f      	b.n	800a698 <getEstimatedAttitude+0x3e0>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a678:	463b      	mov	r3, r7
 800a67a:	4619      	mov	r1, r3
 800a67c:	484e      	ldr	r0, [pc, #312]	; (800a7b8 <getEstimatedAttitude+0x500>)
 800a67e:	f7ff faed 	bl	8009c5c <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a682:	494d      	ldr	r1, [pc, #308]	; (800a7b8 <getEstimatedAttitude+0x500>)
 800a684:	484c      	ldr	r0, [pc, #304]	; (800a7b8 <getEstimatedAttitude+0x500>)
 800a686:	f7ff fa99 	bl	8009bbc <normalizeV>
        heading = calculateHeading(&EstN);
 800a68a:	484b      	ldr	r0, [pc, #300]	; (800a7b8 <getEstimatedAttitude+0x500>)
 800a68c:	f7ff fd60 	bl	800a150 <calculateHeading>
 800a690:	4603      	mov	r3, r0
 800a692:	461a      	mov	r2, r3
 800a694:	4b47      	ldr	r3, [pc, #284]	; (800a7b4 <getEstimatedAttitude+0x4fc>)
 800a696:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f7ff fc11 	bl	8009ec0 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a69e:	4b47      	ldr	r3, [pc, #284]	; (800a7bc <getEstimatedAttitude+0x504>)
 800a6a0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d072      	beq.n	800a78e <getEstimatedAttitude+0x4d6>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a6a8:	4b45      	ldr	r3, [pc, #276]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6aa:	ed93 8a02 	vldr	s16, [r3, #8]
 800a6ae:	4b44      	ldr	r3, [pc, #272]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6b0:	ed93 7a00 	vldr	s14, [r3]
 800a6b4:	4b42      	ldr	r3, [pc, #264]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6b6:	edd3 7a00 	vldr	s15, [r3]
 800a6ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6be:	4b40      	ldr	r3, [pc, #256]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6c0:	edd3 6a01 	vldr	s13, [r3, #4]
 800a6c4:	4b3e      	ldr	r3, [pc, #248]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6c6:	edd3 7a01 	vldr	s15, [r3, #4]
 800a6ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6d2:	4b3b      	ldr	r3, [pc, #236]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6d4:	edd3 6a02 	vldr	s13, [r3, #8]
 800a6d8:	4b39      	ldr	r3, [pc, #228]	; (800a7c0 <getEstimatedAttitude+0x508>)
 800a6da:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ea:	f018 fd29 	bl	8023140 <sqrtf>
 800a6ee:	eeb0 7a40 	vmov.f32	s14, s0
 800a6f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a6f6:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a6fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6fe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a7c4 <getEstimatedAttitude+0x50c>
 800a702:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	d803      	bhi.n	800a714 <getEstimatedAttitude+0x45c>
            throttleAngleCorrection = 0;
 800a70c:	4b2e      	ldr	r3, [pc, #184]	; (800a7c8 <getEstimatedAttitude+0x510>)
 800a70e:	2200      	movs	r2, #0
 800a710:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a712:	e03c      	b.n	800a78e <getEstimatedAttitude+0x4d6>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a714:	ed97 0a03 	vldr	s0, [r7, #12]
 800a718:	f018 fc8c 	bl	8023034 <acosf>
 800a71c:	eeb0 7a40 	vmov.f32	s14, s0
 800a720:	4b2a      	ldr	r3, [pc, #168]	; (800a7cc <getEstimatedAttitude+0x514>)
 800a722:	edd3 7a00 	vldr	s15, [r3]
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	eeb0 0a67 	vmov.f32	s0, s15
 800a72e:	f018 fbfb 	bl	8022f28 <lrintf>
 800a732:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a73a:	dd02      	ble.n	800a742 <getEstimatedAttitude+0x48a>
                deg = 900;
 800a73c:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a740:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a742:	4b1e      	ldr	r3, [pc, #120]	; (800a7bc <getEstimatedAttitude+0x504>)
 800a744:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a750:	69f8      	ldr	r0, [r7, #28]
 800a752:	f7f5 fe9b 	bl	800048c <__aeabi_i2d>
 800a756:	a312      	add	r3, pc, #72	; (adr r3, 800a7a0 <getEstimatedAttitude+0x4e8>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f6 f82a 	bl	80007b4 <__aeabi_ddiv>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4610      	mov	r0, r2
 800a766:	4619      	mov	r1, r3
 800a768:	f7f6 f9dc 	bl	8000b24 <__aeabi_d2f>
 800a76c:	4603      	mov	r3, r0
 800a76e:	ee00 3a10 	vmov	s0, r3
 800a772:	f018 fc19 	bl	8022fa8 <sinf>
 800a776:	eef0 7a40 	vmov.f32	s15, s0
 800a77a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a77e:	eeb0 0a67 	vmov.f32	s0, s15
 800a782:	f018 fbd1 	bl	8022f28 <lrintf>
 800a786:	4603      	mov	r3, r0
 800a788:	b21a      	sxth	r2, r3
 800a78a:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <getEstimatedAttitude+0x510>)
 800a78c:	801a      	strh	r2, [r3, #0]
}
 800a78e:	bf00      	nop
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	ecbd 8b02 	vpop	{d8}
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	f3af 8000 	nop.w
 800a7a0:	e50feba2 	.word	0xe50feba2
 800a7a4:	409616dd 	.word	0x409616dd
 800a7a8:	20001478 	.word	0x20001478
 800a7ac:	2000089c 	.word	0x2000089c
 800a7b0:	200013d4 	.word	0x200013d4
 800a7b4:	20001968 	.word	0x20001968
 800a7b8:	20000034 	.word	0x20000034
 800a7bc:	20000e08 	.word	0x20000e08
 800a7c0:	20001450 	.word	0x20001450
 800a7c4:	3c75c28f 	.word	0x3c75c28f
 800a7c8:	20001424 	.word	0x20001424
 800a7cc:	2000142c 	.word	0x2000142c

0800a7d0 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	; 0x38
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a7d8:	4b84      	ldr	r3, [pc, #528]	; (800a9ec <taskGetEstimatedAltitude+0x21c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4798      	blx	r3
 800a7de:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a7e0:	4b83      	ldr	r3, [pc, #524]	; (800a9f0 <taskGetEstimatedAltitude+0x220>)
 800a7e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfb8      	it	lt
 800a7ea:	425b      	neglt	r3, r3
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	4b80      	ldr	r3, [pc, #512]	; (800a9f0 <taskGetEstimatedAltitude+0x220>)
 800a7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb8      	it	lt
 800a7f8:	425b      	neglt	r3, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	bf38      	it	cc
 800a800:	4613      	movcc	r3, r2
 800a802:	b29b      	uxth	r3, r3
 800a804:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a806:	4b7b      	ldr	r3, [pc, #492]	; (800a9f4 <taskGetEstimatedAltitude+0x224>)
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a80c:	4b7a      	ldr	r3, [pc, #488]	; (800a9f8 <taskGetEstimatedAltitude+0x228>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a816:	4a78      	ldr	r2, [pc, #480]	; (800a9f8 <taskGetEstimatedAltitude+0x228>)
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a81c:	4b77      	ldr	r3, [pc, #476]	; (800a9fc <taskGetEstimatedAltitude+0x22c>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d058      	beq.n	800a8d6 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a824:	4b76      	ldr	r3, [pc, #472]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	da00      	bge.n	800a82e <taskGetEstimatedAltitude+0x5e>
 800a82c:	3307      	adds	r3, #7
 800a82e:	10db      	asrs	r3, r3, #3
 800a830:	425b      	negs	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	4b72      	ldr	r3, [pc, #456]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4413      	add	r3, r2
 800a83a:	4a71      	ldr	r2, [pc, #452]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a83c:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a83e:	4b71      	ldr	r3, [pc, #452]	; (800aa04 <taskGetEstimatedAltitude+0x234>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a71      	ldr	r2, [pc, #452]	; (800aa08 <taskGetEstimatedAltitude+0x238>)
 800a844:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a848:	3a01      	subs	r2, #1
 800a84a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84e:	4a6c      	ldr	r2, [pc, #432]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	4413      	add	r3, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4b6a      	ldr	r3, [pc, #424]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a858:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a85a:	4b69      	ldr	r3, [pc, #420]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da00      	bge.n	800a864 <taskGetEstimatedAltitude+0x94>
 800a862:	3307      	adds	r3, #7
 800a864:	10db      	asrs	r3, r3, #3
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a86e:	eddf 6a67 	vldr	s13, [pc, #412]	; 800aa0c <taskGetEstimatedAltitude+0x23c>
 800a872:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a876:	eddf 0a66 	vldr	s1, [pc, #408]	; 800aa10 <taskGetEstimatedAltitude+0x240>
 800a87a:	eeb0 0a47 	vmov.f32	s0, s14
 800a87e:	f018 fc07 	bl	8023090 <powf>
 800a882:	eef0 7a40 	vmov.f32	s15, s0
 800a886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a88a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a88e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800aa14 <taskGetEstimatedAltitude+0x244>
 800a892:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a89a:	ee17 2a90 	vmov	r2, s15
 800a89e:	4b5e      	ldr	r3, [pc, #376]	; (800aa18 <taskGetEstimatedAltitude+0x248>)
 800a8a0:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a8a2:	4b5e      	ldr	r3, [pc, #376]	; (800aa1c <taskGetEstimatedAltitude+0x24c>)
 800a8a4:	f04f 0200 	mov.w	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a8aa:	4b5d      	ldr	r3, [pc, #372]	; (800aa20 <taskGetEstimatedAltitude+0x250>)
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a8b2:	4b52      	ldr	r3, [pc, #328]	; (800a9fc <taskGetEstimatedAltitude+0x22c>)
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	4b50      	ldr	r3, [pc, #320]	; (800a9fc <taskGetEstimatedAltitude+0x22c>)
 800a8bc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a8be:	4b4f      	ldr	r3, [pc, #316]	; (800a9fc <taskGetEstimatedAltitude+0x22c>)
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d107      	bne.n	800a8d6 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a8c6:	4b4e      	ldr	r3, [pc, #312]	; (800aa00 <taskGetEstimatedAltitude+0x230>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4b53      	ldr	r3, [pc, #332]	; (800aa18 <taskGetEstimatedAltitude+0x248>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4955      	ldr	r1, [pc, #340]	; (800aa24 <taskGetEstimatedAltitude+0x254>)
 800a8d0:	2002      	movs	r0, #2
 800a8d2:	f008 fe15 	bl	8013500 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a8d6:	4b4b      	ldr	r3, [pc, #300]	; (800aa04 <taskGetEstimatedAltitude+0x234>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a4b      	ldr	r2, [pc, #300]	; (800aa08 <taskGetEstimatedAltitude+0x238>)
 800a8dc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a8e0:	3a01      	subs	r2, #1
 800a8e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	eddf 6a47 	vldr	s13, [pc, #284]	; 800aa0c <taskGetEstimatedAltitude+0x23c>
 800a8f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a8f6:	eddf 0a46 	vldr	s1, [pc, #280]	; 800aa10 <taskGetEstimatedAltitude+0x240>
 800a8fa:	eeb0 0a47 	vmov.f32	s0, s14
 800a8fe:	f018 fbc7 	bl	8023090 <powf>
 800a902:	eef0 7a40 	vmov.f32	s15, s0
 800a906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a90a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a90e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800aa14 <taskGetEstimatedAltitude+0x244>
 800a912:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a916:	eeb0 0a67 	vmov.f32	s0, s15
 800a91a:	f018 fb05 	bl	8022f28 <lrintf>
 800a91e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a920:	4b3d      	ldr	r3, [pc, #244]	; (800aa18 <taskGetEstimatedAltitude+0x248>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a92a:	4b3f      	ldr	r3, [pc, #252]	; (800aa28 <taskGetEstimatedAltitude+0x258>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a936:	4b34      	ldr	r3, [pc, #208]	; (800aa08 <taskGetEstimatedAltitude+0x238>)
 800a938:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a93c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a94a:	4b2f      	ldr	r3, [pc, #188]	; (800aa08 <taskGetEstimatedAltitude+0x238>)
 800a94c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a950:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a954:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a95c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a960:	eeb0 0a67 	vmov.f32	s0, s15
 800a964:	f018 fae0 	bl	8022f28 <lrintf>
 800a968:	4603      	mov	r3, r0
 800a96a:	4a2f      	ldr	r2, [pc, #188]	; (800aa28 <taskGetEstimatedAltitude+0x258>)
 800a96c:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a96e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a972:	2bfa      	cmp	r3, #250	; 0xfa
 800a974:	dc04      	bgt.n	800a980 <taskGetEstimatedAltitude+0x1b0>
 800a976:	4b2d      	ldr	r3, [pc, #180]	; (800aa2c <taskGetEstimatedAltitude+0x25c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97e:	d104      	bne.n	800a98a <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a980:	4b2b      	ldr	r3, [pc, #172]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a982:	f04f 32ff 	mov.w	r2, #4294967295
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e01b      	b.n	800a9c2 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a98a:	4b28      	ldr	r3, [pc, #160]	; (800aa2c <taskGetEstimatedAltitude+0x25c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a996:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a99a:	ee07 3a90 	vmov	s15, r3
 800a99e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9a2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800aa34 <taskGetEstimatedAltitude+0x264>
 800a9a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ae:	eddf 6a21 	vldr	s13, [pc, #132]	; 800aa34 <taskGetEstimatedAltitude+0x264>
 800a9b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9ba:	ee17 2a90 	vmov	r2, s15
 800a9be:	4b1c      	ldr	r3, [pc, #112]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a9c0:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd38      	ble.n	800aa3c <taskGetEstimatedAltitude+0x26c>
 800a9ca:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2bc7      	cmp	r3, #199	; 0xc7
 800a9d0:	dc34      	bgt.n	800aa3c <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a9d2:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <taskGetEstimatedAltitude+0x258>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	4a16      	ldr	r2, [pc, #88]	; (800aa38 <taskGetEstimatedAltitude+0x268>)
 800a9de:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a9e0:	4b13      	ldr	r3, [pc, #76]	; (800aa30 <taskGetEstimatedAltitude+0x260>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a10      	ldr	r2, [pc, #64]	; (800aa28 <taskGetEstimatedAltitude+0x258>)
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	e064      	b.n	800aab4 <taskGetEstimatedAltitude+0x2e4>
 800a9ea:	bf00      	nop
 800a9ec:	20001bdc 	.word	0x20001bdc
 800a9f0:	20001444 	.word	0x20001444
 800a9f4:	200013fc 	.word	0x200013fc
 800a9f8:	20001484 	.word	0x20001484
 800a9fc:	20001964 	.word	0x20001964
 800aa00:	20001488 	.word	0x20001488
 800aa04:	200013f4 	.word	0x200013f4
 800aa08:	20000e08 	.word	0x20000e08
 800aa0c:	47c5e680 	.word	0x47c5e680
 800aa10:	3e42dcb1 	.word	0x3e42dcb1
 800aa14:	4a8748d0 	.word	0x4a8748d0
 800aa18:	2000148c 	.word	0x2000148c
 800aa1c:	20001490 	.word	0x20001490
 800aa20:	20001494 	.word	0x20001494
 800aa24:	08026efc 	.word	0x08026efc
 800aa28:	200013f8 	.word	0x200013f8
 800aa2c:	2000002c 	.word	0x2000002c
 800aa30:	20000030 	.word	0x20000030
 800aa34:	44610000 	.word	0x44610000
 800aa38:	20001404 	.word	0x20001404
    } else {
        BaroAlt -= baroAlt_offset;
 800aa3c:	4ba0      	ldr	r3, [pc, #640]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	4ba0      	ldr	r3, [pc, #640]	; (800acc4 <taskGetEstimatedAltitude+0x4f4>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	4a9e      	ldr	r2, [pc, #632]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800aa48:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800aa4a:	4b9f      	ldr	r3, [pc, #636]	; (800acc8 <taskGetEstimatedAltitude+0x4f8>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd30      	ble.n	800aab4 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800aa52:	4b9d      	ldr	r3, [pc, #628]	; (800acc8 <taskGetEstimatedAltitude+0x4f8>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa62:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800accc <taskGetEstimatedAltitude+0x4fc>
 800aa66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa6a:	4b99      	ldr	r3, [pc, #612]	; (800acd0 <taskGetEstimatedAltitude+0x500>)
 800aa6c:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800aa70:	4b95      	ldr	r3, [pc, #596]	; (800acc8 <taskGetEstimatedAltitude+0x4f8>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa7c:	4b94      	ldr	r3, [pc, #592]	; (800acd0 <taskGetEstimatedAltitude+0x500>)
 800aa7e:	edd3 7a00 	vldr	s15, [r3]
 800aa82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa86:	4b8e      	ldr	r3, [pc, #568]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa92:	4b8f      	ldr	r3, [pc, #572]	; (800acd0 <taskGetEstimatedAltitude+0x500>)
 800aa94:	edd3 7a00 	vldr	s15, [r3]
 800aa98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aaa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aaac:	ee17 2a90 	vmov	r2, s15
 800aab0:	4b83      	ldr	r3, [pc, #524]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800aab2:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800aab4:	4b87      	ldr	r3, [pc, #540]	; (800acd4 <taskGetEstimatedAltitude+0x504>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800acd8 <taskGetEstimatedAltitude+0x508>
 800aac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aac8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800aacc:	4b83      	ldr	r3, [pc, #524]	; (800acdc <taskGetEstimatedAltitude+0x50c>)
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	ee07 3a90 	vmov	s15, r3
 800aad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aad8:	4b81      	ldr	r3, [pc, #516]	; (800ace0 <taskGetEstimatedAltitude+0x510>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	ee07 3a90 	vmov	s15, r3
 800aae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aae8:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800aaec:	4b7d      	ldr	r3, [pc, #500]	; (800ace4 <taskGetEstimatedAltitude+0x514>)
 800aaee:	ed93 7a00 	vldr	s14, [r3]
 800aaf2:	edd7 7a07 	vldr	s15, [r7, #28]
 800aaf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aafa:	4b76      	ldr	r3, [pc, #472]	; (800acd4 <taskGetEstimatedAltitude+0x504>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800ab0e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ab16:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab1a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab22:	4b71      	ldr	r3, [pc, #452]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800ab24:	edd3 6a00 	vldr	s13, [r3]
 800ab28:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab34:	4b6d      	ldr	r3, [pc, #436]	; (800acec <taskGetEstimatedAltitude+0x51c>)
 800ab36:	edd3 7a00 	vldr	s15, [r3]
 800ab3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab3e:	4b6b      	ldr	r3, [pc, #428]	; (800acec <taskGetEstimatedAltitude+0x51c>)
 800ab40:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800ab44:	4b6a      	ldr	r3, [pc, #424]	; (800acf0 <taskGetEstimatedAltitude+0x520>)
 800ab46:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800ab4a:	4b68      	ldr	r3, [pc, #416]	; (800acec <taskGetEstimatedAltitude+0x51c>)
 800ab4c:	edd3 7a00 	vldr	s15, [r3]
 800ab50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab54:	4b5a      	ldr	r3, [pc, #360]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ab60:	4b63      	ldr	r3, [pc, #396]	; (800acf0 <taskGetEstimatedAltitude+0x520>)
 800ab62:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800ab66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ab6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab76:	4b5d      	ldr	r3, [pc, #372]	; (800acec <taskGetEstimatedAltitude+0x51c>)
 800ab78:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800ab7c:	4b52      	ldr	r3, [pc, #328]	; (800acc8 <taskGetEstimatedAltitude+0x4f8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dd08      	ble.n	800ab96 <taskGetEstimatedAltitude+0x3c6>
 800ab84:	4b50      	ldr	r3, [pc, #320]	; (800acc8 <taskGetEstimatedAltitude+0x4f8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2bc7      	cmp	r3, #199	; 0xc7
 800ab8a:	dc04      	bgt.n	800ab96 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a58      	ldr	r2, [pc, #352]	; (800acf4 <taskGetEstimatedAltitude+0x524>)
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	e008      	b.n	800aba8 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800ab96:	4b55      	ldr	r3, [pc, #340]	; (800acec <taskGetEstimatedAltitude+0x51c>)
 800ab98:	edd3 7a00 	vldr	s15, [r3]
 800ab9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aba0:	ee17 2a90 	vmov	r2, s15
 800aba4:	4b53      	ldr	r3, [pc, #332]	; (800acf4 <taskGetEstimatedAltitude+0x524>)
 800aba6:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800aba8:	4b4f      	ldr	r3, [pc, #316]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800abaa:	ed93 7a00 	vldr	s14, [r3]
 800abae:	edd7 7a06 	vldr	s15, [r7, #24]
 800abb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb6:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800abb8:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800abbc:	f7ff faaa 	bl	800a114 <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800abc0:	4b3f      	ldr	r3, [pc, #252]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	4b4c      	ldr	r3, [pc, #304]	; (800acf8 <taskGetEstimatedAltitude+0x528>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800acfc <taskGetEstimatedAltitude+0x52c>
 800abd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abec:	ee17 3a90 	vmov	r3, s15
 800abf0:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800abf2:	4b33      	ldr	r3, [pc, #204]	; (800acc0 <taskGetEstimatedAltitude+0x4f0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a40      	ldr	r2, [pc, #256]	; (800acf8 <taskGetEstimatedAltitude+0x528>)
 800abf8:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800abfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800abfe:	4940      	ldr	r1, [pc, #256]	; (800ad00 <taskGetEstimatedAltitude+0x530>)
 800ac00:	6978      	ldr	r0, [r7, #20]
 800ac02:	f7f9 f8a7 	bl	8003d54 <constrain>
 800ac06:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800ac08:	210a      	movs	r1, #10
 800ac0a:	6978      	ldr	r0, [r7, #20]
 800ac0c:	f7ff f930 	bl	8009e70 <applyDeadband>
 800ac10:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800ac12:	4b37      	ldr	r3, [pc, #220]	; (800acf0 <taskGetEstimatedAltitude+0x520>)
 800ac14:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800ac18:	4b33      	ldr	r3, [pc, #204]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800ac1a:	edd3 7a00 	vldr	s15, [r3]
 800ac1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	ee07 3a90 	vmov	s15, r3
 800ac28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ac2c:	4b30      	ldr	r3, [pc, #192]	; (800acf0 <taskGetEstimatedAltitude+0x520>)
 800ac2e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ac32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ac36:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ac3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac42:	4b29      	ldr	r3, [pc, #164]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800ac44:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800ac48:	4b27      	ldr	r3, [pc, #156]	; (800ace8 <taskGetEstimatedAltitude+0x518>)
 800ac4a:	edd3 7a00 	vldr	s15, [r3]
 800ac4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac52:	f018 f969 	bl	8022f28 <lrintf>
 800ac56:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800ac58:	2105      	movs	r1, #5
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f7ff f908 	bl	8009e70 <applyDeadband>
 800ac60:	4603      	mov	r3, r0
 800ac62:	4a28      	ldr	r2, [pc, #160]	; (800ad04 <taskGetEstimatedAltitude+0x534>)
 800ac64:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800ac66:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800ac6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ac6e:	f280 80b2 	bge.w	800add6 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800ac72:	4b25      	ldr	r3, [pc, #148]	; (800ad08 <taskGetEstimatedAltitude+0x538>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d14e      	bne.n	800ad18 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800ac7a:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <taskGetEstimatedAltitude+0x53c>)
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <taskGetEstimatedAltitude+0x524>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ac88:	4921      	ldr	r1, [pc, #132]	; (800ad10 <taskGetEstimatedAltitude+0x540>)
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f9 f862 	bl	8003d54 <constrain>
 800ac90:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800ac92:	210a      	movs	r1, #10
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f7ff f8eb 	bl	8009e70 <applyDeadband>
 800ac9a:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800ac9c:	4b14      	ldr	r3, [pc, #80]	; (800acf0 <taskGetEstimatedAltitude+0x520>)
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	461a      	mov	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da00      	bge.n	800acae <taskGetEstimatedAltitude+0x4de>
 800acac:	337f      	adds	r3, #127	; 0x7f
 800acae:	11db      	asrs	r3, r3, #7
 800acb0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800acb4:	4917      	ldr	r1, [pc, #92]	; (800ad14 <taskGetEstimatedAltitude+0x544>)
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f9 f84c 	bl	8003d54 <constrain>
 800acbc:	6378      	str	r0, [r7, #52]	; 0x34
 800acbe:	e02e      	b.n	800ad1e <taskGetEstimatedAltitude+0x54e>
 800acc0:	200013f8 	.word	0x200013f8
 800acc4:	20001404 	.word	0x20001404
 800acc8:	20000030 	.word	0x20000030
 800accc:	42c80000 	.word	0x42c80000
 800acd0:	20001400 	.word	0x20001400
 800acd4:	200013e8 	.word	0x200013e8
 800acd8:	358637bd 	.word	0x358637bd
 800acdc:	200013dc 	.word	0x200013dc
 800ace0:	200013ec 	.word	0x200013ec
 800ace4:	20001428 	.word	0x20001428
 800ace8:	20001490 	.word	0x20001490
 800acec:	20001494 	.word	0x20001494
 800acf0:	20000e08 	.word	0x20000e08
 800acf4:	20001408 	.word	0x20001408
 800acf8:	20001498 	.word	0x20001498
 800acfc:	49742400 	.word	0x49742400
 800ad00:	fffffa24 	.word	0xfffffa24
 800ad04:	20001420 	.word	0x20001420
 800ad08:	20001418 	.word	0x20001418
 800ad0c:	20001410 	.word	0x20001410
 800ad10:	fffffe0c 	.word	0xfffffe0c
 800ad14:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ad18:	4b34      	ldr	r3, [pc, #208]	; (800adec <taskGetEstimatedAltitude+0x61c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ad1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ad26:	4b32      	ldr	r3, [pc, #200]	; (800adf0 <taskGetEstimatedAltitude+0x620>)
 800ad28:	7a9b      	ldrb	r3, [r3, #10]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	fb02 f303 	mul.w	r3, r2, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	da00      	bge.n	800ad38 <taskGetEstimatedAltitude+0x568>
 800ad36:	331f      	adds	r3, #31
 800ad38:	115b      	asrs	r3, r3, #5
 800ad3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad3e:	492d      	ldr	r1, [pc, #180]	; (800adf4 <taskGetEstimatedAltitude+0x624>)
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f9 f807 	bl	8003d54 <constrain>
 800ad46:	4603      	mov	r3, r0
 800ad48:	4a2b      	ldr	r2, [pc, #172]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800ad4a:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800ad4c:	4b28      	ldr	r3, [pc, #160]	; (800adf0 <taskGetEstimatedAltitude+0x620>)
 800ad4e:	7d1b      	ldrb	r3, [r3, #20]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	fb03 f202 	mul.w	r2, r3, r2
 800ad58:	4b28      	ldr	r3, [pc, #160]	; (800adfc <taskGetEstimatedAltitude+0x62c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	4a27      	ldr	r2, [pc, #156]	; (800adfc <taskGetEstimatedAltitude+0x62c>)
 800ad60:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800ad62:	4b26      	ldr	r3, [pc, #152]	; (800adfc <taskGetEstimatedAltitude+0x62c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a26      	ldr	r2, [pc, #152]	; (800ae00 <taskGetEstimatedAltitude+0x630>)
 800ad68:	4926      	ldr	r1, [pc, #152]	; (800ae04 <taskGetEstimatedAltitude+0x634>)
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7f8 fff2 	bl	8003d54 <constrain>
 800ad70:	4603      	mov	r3, r0
 800ad72:	4a22      	ldr	r2, [pc, #136]	; (800adfc <taskGetEstimatedAltitude+0x62c>)
 800ad74:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800ad76:	4b21      	ldr	r3, [pc, #132]	; (800adfc <taskGetEstimatedAltitude+0x62c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <taskGetEstimatedAltitude+0x638>)
 800ad7c:	fb82 1203 	smull	r1, r2, r2, r3
 800ad80:	10d2      	asrs	r2, r2, #3
 800ad82:	17db      	asrs	r3, r3, #31
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	4a1a      	ldr	r2, [pc, #104]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800ad8e:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800ad90:	4b17      	ldr	r3, [pc, #92]	; (800adf0 <taskGetEstimatedAltitude+0x620>)
 800ad92:	7f9b      	ldrb	r3, [r3, #30]
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad9c:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <taskGetEstimatedAltitude+0x63c>)
 800ad9e:	edd3 6a00 	vldr	s13, [r3]
 800ada2:	edd7 7a07 	vldr	s15, [r7, #28]
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adae:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ae10 <taskGetEstimatedAltitude+0x640>
 800adb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adba:	2296      	movs	r2, #150	; 0x96
 800adbc:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800adc0:	ee17 0a90 	vmov	r0, s15
 800adc4:	f7f8 ffc6 	bl	8003d54 <constrain>
 800adc8:	4602      	mov	r2, r0
 800adca:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	4a09      	ldr	r2, [pc, #36]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	e002      	b.n	800addc <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800add6:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <taskGetEstimatedAltitude+0x628>)
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800addc:	4a0b      	ldr	r2, [pc, #44]	; (800ae0c <taskGetEstimatedAltitude+0x63c>)
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	6013      	str	r3, [r2, #0]

    return 1;
 800ade2:	2301      	movs	r3, #1
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3738      	adds	r7, #56	; 0x38
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20001414 	.word	0x20001414
 800adf0:	20000e08 	.word	0x20000e08
 800adf4:	fffffed4 	.word	0xfffffed4
 800adf8:	2000140c 	.word	0x2000140c
 800adfc:	2000141c 	.word	0x2000141c
 800ae00:	00190320 	.word	0x00190320
 800ae04:	ffe6fce0 	.word	0xffe6fce0
 800ae08:	003ff801 	.word	0x003ff801
 800ae0c:	2000149c 	.word	0x2000149c
 800ae10:	44000000 	.word	0x44000000

0800ae14 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ae1c:	4916      	ldr	r1, [pc, #88]	; (800ae78 <servoMiddle+0x64>)
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	440b      	add	r3, r1
 800ae2a:	33bc      	adds	r3, #188	; 0xbc
 800ae2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae30:	2b11      	cmp	r3, #17
 800ae32:	dc11      	bgt.n	800ae58 <servoMiddle+0x44>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b07      	cmp	r3, #7
 800ae38:	dc0e      	bgt.n	800ae58 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ae3a:	490f      	ldr	r1, [pc, #60]	; (800ae78 <servoMiddle+0x64>)
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	440b      	add	r3, r1
 800ae48:	33bc      	adds	r3, #188	; 0xbc
 800ae4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <servoMiddle+0x68>)
 800ae52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ae56:	e009      	b.n	800ae6c <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800ae58:	4907      	ldr	r1, [pc, #28]	; (800ae78 <servoMiddle+0x64>)
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	440b      	add	r3, r1
 800ae66:	33bc      	adds	r3, #188	; 0xbc
 800ae68:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	20000e08 	.word	0x20000e08
 800ae7c:	200016d4 	.word	0x200016d4

0800ae80 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800ae8a:	490d      	ldr	r1, [pc, #52]	; (800aec0 <servoDirection+0x40>)
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	440b      	add	r3, r1
 800ae98:	33c0      	adds	r3, #192	; 0xc0
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	fa42 f303 	asr.w	r3, r2, r3
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <servoDirection+0x32>
        return -1;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	e000      	b.n	800aeb4 <servoDirection+0x34>
    else
        return 1;
 800aeb2:	2301      	movs	r3, #1
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	20000e08 	.word	0x20000e08

0800aec4 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800aeca:	4b1e      	ldr	r3, [pc, #120]	; (800af44 <loadCustomServoMixer+0x80>)
 800aecc:	2200      	movs	r2, #0
 800aece:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800aed0:	2270      	movs	r2, #112	; 0x70
 800aed2:	2100      	movs	r1, #0
 800aed4:	481c      	ldr	r0, [pc, #112]	; (800af48 <loadCustomServoMixer+0x84>)
 800aed6:	f017 fd05 	bl	80228e4 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800aeda:	2300      	movs	r3, #0
 800aedc:	71fb      	strb	r3, [r7, #7]
 800aede:	e028      	b.n	800af32 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	491a      	ldr	r1, [pc, #104]	; (800af4c <loadCustomServoMixer+0x88>)
 800aee4:	4613      	mov	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	440b      	add	r3, r1
 800aeec:	33d2      	adds	r3, #210	; 0xd2
 800aeee:	f993 3000 	ldrsb.w	r3, [r3]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d021      	beq.n	800af3a <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800aef6:	79fa      	ldrb	r2, [r7, #7]
 800aef8:	79f9      	ldrb	r1, [r7, #7]
 800aefa:	4813      	ldr	r0, [pc, #76]	; (800af48 <loadCustomServoMixer+0x84>)
 800aefc:	460b      	mov	r3, r1
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	1a5b      	subs	r3, r3, r1
 800af02:	4418      	add	r0, r3
 800af04:	4911      	ldr	r1, [pc, #68]	; (800af4c <loadCustomServoMixer+0x88>)
 800af06:	4613      	mov	r3, r2
 800af08:	00db      	lsls	r3, r3, #3
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	440b      	add	r3, r1
 800af0e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800af12:	4603      	mov	r3, r0
 800af14:	6811      	ldr	r1, [r2, #0]
 800af16:	6019      	str	r1, [r3, #0]
 800af18:	8891      	ldrh	r1, [r2, #4]
 800af1a:	7992      	ldrb	r2, [r2, #6]
 800af1c:	8099      	strh	r1, [r3, #4]
 800af1e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800af20:	4b08      	ldr	r3, [pc, #32]	; (800af44 <loadCustomServoMixer+0x80>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	4b06      	ldr	r3, [pc, #24]	; (800af44 <loadCustomServoMixer+0x80>)
 800af2a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	3301      	adds	r3, #1
 800af30:	71fb      	strb	r3, [r7, #7]
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	2b0f      	cmp	r3, #15
 800af36:	d9d3      	bls.n	800aee0 <loadCustomServoMixer+0x1c>
    }
}
 800af38:	e000      	b.n	800af3c <loadCustomServoMixer+0x78>
            break;
 800af3a:	bf00      	nop
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20001501 	.word	0x20001501
 800af48:	200015f4 	.word	0x200015f4
 800af4c:	2000089c 	.word	0x2000089c

0800af50 <mixerInit>:

void mixerInit(void)
{
 800af50:	b590      	push	{r4, r7, lr}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800af56:	4b8b      	ldr	r3, [pc, #556]	; (800b184 <mixerInit+0x234>)
 800af58:	795b      	ldrb	r3, [r3, #5]
 800af5a:	4a8b      	ldr	r2, [pc, #556]	; (800b188 <mixerInit+0x238>)
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4413      	add	r3, r2
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	2b00      	cmp	r3, #0
 800af64:	bf14      	ite	ne
 800af66:	2301      	movne	r3, #1
 800af68:	2300      	moveq	r3, #0
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	4b87      	ldr	r3, [pc, #540]	; (800b18c <mixerInit+0x23c>)
 800af6e:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800af70:	2020      	movs	r0, #32
 800af72:	f7fc f851 	bl	8007018 <feature>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <mixerInit+0x32>
        core.useServo = 1;
 800af7c:	4b83      	ldr	r3, [pc, #524]	; (800b18c <mixerInit+0x23c>)
 800af7e:	2201      	movs	r2, #1
 800af80:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800af82:	4b80      	ldr	r3, [pc, #512]	; (800b184 <mixerInit+0x234>)
 800af84:	795b      	ldrb	r3, [r3, #5]
 800af86:	2b17      	cmp	r3, #23
 800af88:	d128      	bne.n	800afdc <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800af8a:	2300      	movs	r3, #0
 800af8c:	607b      	str	r3, [r7, #4]
 800af8e:	e021      	b.n	800afd4 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800af90:	4a7c      	ldr	r2, [pc, #496]	; (800b184 <mixerInit+0x234>)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3301      	adds	r3, #1
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	4413      	add	r3, r2
 800af9a:	edd3 7a00 	vldr	s15, [r3]
 800af9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800afa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa6:	d048      	beq.n	800b03a <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800afa8:	4a79      	ldr	r2, [pc, #484]	; (800b190 <mixerInit+0x240>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	18d1      	adds	r1, r2, r3
 800afb0:	4a74      	ldr	r2, [pc, #464]	; (800b184 <mixerInit+0x234>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3301      	adds	r3, #1
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	4413      	add	r3, r2
 800afba:	460c      	mov	r4, r1
 800afbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800afbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800afc2:	4b74      	ldr	r3, [pc, #464]	; (800b194 <mixerInit+0x244>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b72      	ldr	r3, [pc, #456]	; (800b194 <mixerInit+0x244>)
 800afcc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3301      	adds	r3, #1
 800afd2:	607b      	str	r3, [r7, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b0b      	cmp	r3, #11
 800afd8:	ddda      	ble.n	800af90 <mixerInit+0x40>
 800afda:	e02f      	b.n	800b03c <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800afdc:	4b69      	ldr	r3, [pc, #420]	; (800b184 <mixerInit+0x234>)
 800afde:	795b      	ldrb	r3, [r3, #5]
 800afe0:	461a      	mov	r2, r3
 800afe2:	4b69      	ldr	r3, [pc, #420]	; (800b188 <mixerInit+0x238>)
 800afe4:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800afe8:	4b6a      	ldr	r3, [pc, #424]	; (800b194 <mixerInit+0x244>)
 800afea:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800afec:	4b65      	ldr	r3, [pc, #404]	; (800b184 <mixerInit+0x234>)
 800afee:	795b      	ldrb	r3, [r3, #5]
 800aff0:	4a65      	ldr	r2, [pc, #404]	; (800b188 <mixerInit+0x238>)
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	4413      	add	r3, r2
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01f      	beq.n	800b03c <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800affc:	2300      	movs	r3, #0
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e014      	b.n	800b02c <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800b002:	4b60      	ldr	r3, [pc, #384]	; (800b184 <mixerInit+0x234>)
 800b004:	795b      	ldrb	r3, [r3, #5]
 800b006:	4a60      	ldr	r2, [pc, #384]	; (800b188 <mixerInit+0x238>)
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	4413      	add	r3, r2
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	18d1      	adds	r1, r2, r3
 800b014:	4a5e      	ldr	r2, [pc, #376]	; (800b190 <mixerInit+0x240>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	4413      	add	r3, r2
 800b01c:	461c      	mov	r4, r3
 800b01e:	460b      	mov	r3, r1
 800b020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3301      	adds	r3, #1
 800b02a:	607b      	str	r3, [r7, #4]
 800b02c:	4b59      	ldr	r3, [pc, #356]	; (800b194 <mixerInit+0x244>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4293      	cmp	r3, r2
 800b036:	dbe4      	blt.n	800b002 <mixerInit+0xb2>
 800b038:	e000      	b.n	800b03c <mixerInit+0xec>
                break;
 800b03a:	bf00      	nop
        }
    }

    if (core.useServo) {
 800b03c:	4b53      	ldr	r3, [pc, #332]	; (800b18c <mixerInit+0x23c>)
 800b03e:	7d5b      	ldrb	r3, [r3, #21]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d033      	beq.n	800b0ac <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800b044:	4b4f      	ldr	r3, [pc, #316]	; (800b184 <mixerInit+0x234>)
 800b046:	795b      	ldrb	r3, [r3, #5]
 800b048:	461a      	mov	r2, r3
 800b04a:	4b53      	ldr	r3, [pc, #332]	; (800b198 <mixerInit+0x248>)
 800b04c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b050:	4b52      	ldr	r3, [pc, #328]	; (800b19c <mixerInit+0x24c>)
 800b052:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800b054:	4b4b      	ldr	r3, [pc, #300]	; (800b184 <mixerInit+0x234>)
 800b056:	795b      	ldrb	r3, [r3, #5]
 800b058:	4a4f      	ldr	r2, [pc, #316]	; (800b198 <mixerInit+0x248>)
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	4413      	add	r3, r2
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d023      	beq.n	800b0ac <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800b064:	2300      	movs	r3, #0
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	e01a      	b.n	800b0a0 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800b06a:	4b46      	ldr	r3, [pc, #280]	; (800b184 <mixerInit+0x234>)
 800b06c:	795b      	ldrb	r3, [r3, #5]
 800b06e:	4a4a      	ldr	r2, [pc, #296]	; (800b198 <mixerInit+0x248>)
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	4413      	add	r3, r2
 800b074:	6859      	ldr	r1, [r3, #4]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	1a9b      	subs	r3, r3, r2
 800b07e:	18c8      	adds	r0, r1, r3
 800b080:	4947      	ldr	r1, [pc, #284]	; (800b1a0 <mixerInit+0x250>)
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	4613      	mov	r3, r2
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	1a9b      	subs	r3, r3, r2
 800b08a:	440b      	add	r3, r1
 800b08c:	4602      	mov	r2, r0
 800b08e:	6811      	ldr	r1, [r2, #0]
 800b090:	6019      	str	r1, [r3, #0]
 800b092:	8891      	ldrh	r1, [r2, #4]
 800b094:	7992      	ldrb	r2, [r2, #6]
 800b096:	8099      	strh	r1, [r3, #4]
 800b098:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3301      	adds	r3, #1
 800b09e:	607b      	str	r3, [r7, #4]
 800b0a0:	4b3e      	ldr	r3, [pc, #248]	; (800b19c <mixerInit+0x24c>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	dbde      	blt.n	800b06a <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800b0ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b0b0:	f7fb ffb2 	bl	8007018 <feature>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d045      	beq.n	800b146 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800b0ba:	4b36      	ldr	r3, [pc, #216]	; (800b194 <mixerInit+0x244>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d941      	bls.n	800b146 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
 800b0c6:	e038      	b.n	800b13a <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800b0c8:	4a31      	ldr	r2, [pc, #196]	; (800b190 <mixerInit+0x240>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	011b      	lsls	r3, r3, #4
 800b0ce:	4413      	add	r3, r2
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	edd3 7a00 	vldr	s15, [r3]
 800b0d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b0da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0de:	4a2c      	ldr	r2, [pc, #176]	; (800b190 <mixerInit+0x240>)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	4413      	add	r3, r2
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800b0ec:	4a28      	ldr	r2, [pc, #160]	; (800b190 <mixerInit+0x240>)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	4413      	add	r3, r2
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	edd3 7a00 	vldr	s15, [r3]
 800b0fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b0fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b102:	4a23      	ldr	r2, [pc, #140]	; (800b190 <mixerInit+0x240>)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	4413      	add	r3, r2
 800b10a:	3304      	adds	r3, #4
 800b10c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800b110:	4a1f      	ldr	r2, [pc, #124]	; (800b190 <mixerInit+0x240>)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	4413      	add	r3, r2
 800b118:	330c      	adds	r3, #12
 800b11a:	edd3 7a00 	vldr	s15, [r3]
 800b11e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b122:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b126:	4a1a      	ldr	r2, [pc, #104]	; (800b190 <mixerInit+0x240>)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	4413      	add	r3, r2
 800b12e:	330c      	adds	r3, #12
 800b130:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3301      	adds	r3, #1
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	4b16      	ldr	r3, [pc, #88]	; (800b194 <mixerInit+0x244>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4293      	cmp	r3, r2
 800b144:	dbc0      	blt.n	800b0c8 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800b146:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <mixerInit+0x234>)
 800b148:	795b      	ldrb	r3, [r3, #5]
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d007      	beq.n	800b15e <mixerInit+0x20e>
 800b14e:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <mixerInit+0x234>)
 800b150:	795b      	ldrb	r3, [r3, #5]
 800b152:	2b0e      	cmp	r3, #14
 800b154:	d003      	beq.n	800b15e <mixerInit+0x20e>
 800b156:	4b0b      	ldr	r3, [pc, #44]	; (800b184 <mixerInit+0x234>)
 800b158:	795b      	ldrb	r3, [r3, #5]
 800b15a:	2b18      	cmp	r3, #24
 800b15c:	d109      	bne.n	800b172 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <mixerInit+0x254>)
 800b160:	2201      	movs	r2, #1
 800b162:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800b164:	4b07      	ldr	r3, [pc, #28]	; (800b184 <mixerInit+0x234>)
 800b166:	795b      	ldrb	r3, [r3, #5]
 800b168:	2b18      	cmp	r3, #24
 800b16a:	d105      	bne.n	800b178 <mixerInit+0x228>
            loadCustomServoMixer();
 800b16c:	f7ff feaa 	bl	800aec4 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800b170:	e002      	b.n	800b178 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <mixerInit+0x254>)
 800b174:	2200      	movs	r2, #0
 800b176:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800b178:	f000 f816 	bl	800b1a8 <mixerResetMotors>
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	bd90      	pop	{r4, r7, pc}
 800b184:	2000089c 	.word	0x2000089c
 800b188:	08028b08 	.word	0x08028b08
 800b18c:	200007e4 	.word	0x200007e4
 800b190:	20001534 	.word	0x20001534
 800b194:	20001500 	.word	0x20001500
 800b198:	08028c74 	.word	0x08028c74
 800b19c:	20001501 	.word	0x20001501
 800b1a0:	200015f4 	.word	0x200015f4
 800b1a4:	2000169c 	.word	0x2000169c

0800b1a8 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]
 800b1b2:	e016      	b.n	800b1e2 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b1b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b1b8:	f7fb ff2e 	bl	8007018 <feature>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <mixerResetMotors+0x24>
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	; (800b1f4 <mixerResetMotors+0x4c>)
 800b1c4:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b1c8:	b21b      	sxth	r3, r3
 800b1ca:	e003      	b.n	800b1d4 <mixerResetMotors+0x2c>
 800b1cc:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <mixerResetMotors+0x4c>)
 800b1ce:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b1d2:	b21b      	sxth	r3, r3
 800b1d4:	4908      	ldr	r1, [pc, #32]	; (800b1f8 <mixerResetMotors+0x50>)
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b0b      	cmp	r3, #11
 800b1e6:	dde5      	ble.n	800b1b4 <mixerResetMotors+0xc>
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2000089c 	.word	0x2000089c
 800b1f8:	2000151c 	.word	0x2000151c

0800b1fc <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3301      	adds	r3, #1
 800b208:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	e038      	b.n	800b282 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b210:	4934      	ldr	r1, [pc, #208]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4613      	mov	r3, r2
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	1a9b      	subs	r3, r3, r2
 800b21a:	440b      	add	r3, r1
 800b21c:	33d6      	adds	r3, #214	; 0xd6
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	4930      	ldr	r1, [pc, #192]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4613      	mov	r3, r2
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	1a9b      	subs	r3, r3, r2
 800b22c:	440b      	add	r3, r1
 800b22e:	33d2      	adds	r3, #210	; 0xd2
 800b230:	2200      	movs	r2, #0
 800b232:	701a      	strb	r2, [r3, #0]
 800b234:	492b      	ldr	r1, [pc, #172]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4613      	mov	r3, r2
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	440b      	add	r3, r1
 800b240:	33d2      	adds	r3, #210	; 0xd2
 800b242:	f993 3000 	ldrsb.w	r3, [r3]
 800b246:	b2d8      	uxtb	r0, r3
 800b248:	4926      	ldr	r1, [pc, #152]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4613      	mov	r3, r2
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	1a9b      	subs	r3, r3, r2
 800b252:	440b      	add	r3, r1
 800b254:	33d1      	adds	r3, #209	; 0xd1
 800b256:	4602      	mov	r2, r0
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	4922      	ldr	r1, [pc, #136]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4613      	mov	r3, r2
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	1a9b      	subs	r3, r3, r2
 800b264:	440b      	add	r3, r1
 800b266:	33d1      	adds	r3, #209	; 0xd1
 800b268:	7818      	ldrb	r0, [r3, #0]
 800b26a:	491e      	ldr	r1, [pc, #120]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4613      	mov	r3, r2
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	440b      	add	r3, r1
 800b276:	33d0      	adds	r3, #208	; 0xd0
 800b278:	4602      	mov	r2, r0
 800b27a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b0f      	cmp	r3, #15
 800b286:	ddc3      	ble.n	800b210 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b288:	2300      	movs	r3, #0
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	e01a      	b.n	800b2c4 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b28e:	4a16      	ldr	r2, [pc, #88]	; (800b2e8 <servoMixerLoadMix+0xec>)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	4413      	add	r3, r2
 800b296:	6859      	ldr	r1, [r3, #4]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4613      	mov	r3, r2
 800b29c:	00db      	lsls	r3, r3, #3
 800b29e:	1a9b      	subs	r3, r3, r2
 800b2a0:	18c8      	adds	r0, r1, r3
 800b2a2:	4910      	ldr	r1, [pc, #64]	; (800b2e4 <servoMixerLoadMix+0xe8>)
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	440b      	add	r3, r1
 800b2ae:	33d0      	adds	r3, #208	; 0xd0
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	6811      	ldr	r1, [r2, #0]
 800b2b4:	6019      	str	r1, [r3, #0]
 800b2b6:	8891      	ldrh	r1, [r2, #4]
 800b2b8:	7992      	ldrb	r2, [r2, #6]
 800b2ba:	8099      	strh	r1, [r3, #4]
 800b2bc:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	4a08      	ldr	r2, [pc, #32]	; (800b2e8 <servoMixerLoadMix+0xec>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	dbdc      	blt.n	800b28e <servoMixerLoadMix+0x92>
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	2000089c 	.word	0x2000089c
 800b2e8:	08028c74 	.word	0x08028c74

0800b2ec <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b2ec:	b490      	push	{r4, r7}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e00a      	b.n	800b316 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b300:	4a1c      	ldr	r2, [pc, #112]	; (800b374 <mixerLoadMix+0x88>)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3301      	adds	r3, #1
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	4413      	add	r3, r2
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b0b      	cmp	r3, #11
 800b31a:	ddf1      	ble.n	800b300 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b31c:	4a16      	ldr	r2, [pc, #88]	; (800b378 <mixerLoadMix+0x8c>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	4413      	add	r3, r2
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d01f      	beq.n	800b36a <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	e014      	b.n	800b35a <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b330:	4a11      	ldr	r2, [pc, #68]	; (800b378 <mixerLoadMix+0x8c>)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	4413      	add	r3, r2
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	18d1      	adds	r1, r2, r3
 800b340:	4a0c      	ldr	r2, [pc, #48]	; (800b374 <mixerLoadMix+0x88>)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	4413      	add	r3, r2
 800b34a:	461c      	mov	r4, r3
 800b34c:	460b      	mov	r3, r1
 800b34e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	60fb      	str	r3, [r7, #12]
 800b35a:	4a07      	ldr	r2, [pc, #28]	; (800b378 <mixerLoadMix+0x8c>)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b362:	461a      	mov	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4293      	cmp	r3, r2
 800b368:	dbe2      	blt.n	800b330 <mixerLoadMix+0x44>
    }
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bc90      	pop	{r4, r7}
 800b372:	4770      	bx	lr
 800b374:	2000089c 	.word	0x2000089c
 800b378:	08028b08 	.word	0x08028b08

0800b37c <writeServos>:

void writeServos(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b380:	4b95      	ldr	r3, [pc, #596]	; (800b5d8 <writeServos+0x25c>)
 800b382:	7d5b      	ldrb	r3, [r3, #21]
 800b384:	f083 0301 	eor.w	r3, r3, #1
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f040 811d 	bne.w	800b5ca <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b390:	4b92      	ldr	r3, [pc, #584]	; (800b5dc <writeServos+0x260>)
 800b392:	795b      	ldrb	r3, [r3, #5]
 800b394:	3b01      	subs	r3, #1
 800b396:	2b17      	cmp	r3, #23
 800b398:	f200 8100 	bhi.w	800b59c <writeServos+0x220>
 800b39c:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <writeServos+0x28>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b427 	.word	0x0800b427
 800b3a8:	0800b59d 	.word	0x0800b59d
 800b3ac:	0800b59d 	.word	0x0800b59d
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b467 	.word	0x0800b467
 800b3b8:	0800b59d 	.word	0x0800b59d
 800b3bc:	0800b59d 	.word	0x0800b59d
 800b3c0:	0800b4ab 	.word	0x0800b4ab
 800b3c4:	0800b59d 	.word	0x0800b59d
 800b3c8:	0800b59d 	.word	0x0800b59d
 800b3cc:	0800b59d 	.word	0x0800b59d
 800b3d0:	0800b59d 	.word	0x0800b59d
 800b3d4:	0800b59d 	.word	0x0800b59d
 800b3d8:	0800b4cd 	.word	0x0800b4cd
 800b3dc:	0800b59d 	.word	0x0800b59d
 800b3e0:	0800b59d 	.word	0x0800b59d
 800b3e4:	0800b59d 	.word	0x0800b59d
 800b3e8:	0800b59d 	.word	0x0800b59d
 800b3ec:	0800b59d 	.word	0x0800b59d
 800b3f0:	0800b489 	.word	0x0800b489
 800b3f4:	0800b4cd 	.word	0x0800b4cd
 800b3f8:	0800b59d 	.word	0x0800b59d
 800b3fc:	0800b59d 	.word	0x0800b59d
 800b400:	0800b50f 	.word	0x0800b50f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b404:	4b76      	ldr	r3, [pc, #472]	; (800b5e0 <writeServos+0x264>)
 800b406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	2000      	movs	r0, #0
 800b410:	f7f6 fdb8 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b414:	4b72      	ldr	r3, [pc, #456]	; (800b5e0 <writeServos+0x264>)
 800b416:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4619      	mov	r1, r3
 800b41e:	2001      	movs	r0, #1
 800b420:	f7f6 fdb0 	bl	8001f84 <actPwmWriteServo>
            break;
 800b424:	e0d6      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b426:	4b6f      	ldr	r3, [pc, #444]	; (800b5e4 <writeServos+0x268>)
 800b428:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b430:	4b6b      	ldr	r3, [pc, #428]	; (800b5e0 <writeServos+0x264>)
 800b432:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b436:	b29b      	uxth	r3, r3
 800b438:	4619      	mov	r1, r3
 800b43a:	2000      	movs	r0, #0
 800b43c:	f7f6 fda2 	bl	8001f84 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b440:	e0c8      	b.n	800b5d4 <writeServos+0x258>
                if (f.ARMED)
 800b442:	4b69      	ldr	r3, [pc, #420]	; (800b5e8 <writeServos+0x26c>)
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b44a:	4b65      	ldr	r3, [pc, #404]	; (800b5e0 <writeServos+0x264>)
 800b44c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b450:	b29b      	uxth	r3, r3
 800b452:	4619      	mov	r1, r3
 800b454:	2000      	movs	r0, #0
 800b456:	f7f6 fd95 	bl	8001f84 <actPwmWriteServo>
            break;
 800b45a:	e0bb      	b.n	800b5d4 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b45c:	2100      	movs	r1, #0
 800b45e:	2000      	movs	r0, #0
 800b460:	f7f6 fd90 	bl	8001f84 <actPwmWriteServo>
            break;
 800b464:	e0b6      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b466:	4b5e      	ldr	r3, [pc, #376]	; (800b5e0 <writeServos+0x264>)
 800b468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	4619      	mov	r1, r3
 800b470:	2000      	movs	r0, #0
 800b472:	f7f6 fd87 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b476:	4b5a      	ldr	r3, [pc, #360]	; (800b5e0 <writeServos+0x264>)
 800b478:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	4619      	mov	r1, r3
 800b480:	2001      	movs	r0, #1
 800b482:	f7f6 fd7f 	bl	8001f84 <actPwmWriteServo>
            break;
 800b486:	e0a5      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b488:	4b55      	ldr	r3, [pc, #340]	; (800b5e0 <writeServos+0x264>)
 800b48a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	4619      	mov	r1, r3
 800b492:	2000      	movs	r0, #0
 800b494:	f7f6 fd76 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b498:	4b51      	ldr	r3, [pc, #324]	; (800b5e0 <writeServos+0x264>)
 800b49a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7f6 fd6e 	bl	8001f84 <actPwmWriteServo>
            break;
 800b4a8:	e094      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b4aa:	4b4d      	ldr	r3, [pc, #308]	; (800b5e0 <writeServos+0x264>)
 800b4ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f7f6 fd65 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b4ba:	4b49      	ldr	r3, [pc, #292]	; (800b5e0 <writeServos+0x264>)
 800b4bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	f7f6 fd5d 	bl	8001f84 <actPwmWriteServo>
            break;
 800b4ca:	e083      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b4cc:	4b44      	ldr	r3, [pc, #272]	; (800b5e0 <writeServos+0x264>)
 800b4ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f7f6 fd54 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b4dc:	4b40      	ldr	r3, [pc, #256]	; (800b5e0 <writeServos+0x264>)
 800b4de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	f7f6 fd4c 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b4ec:	4b3c      	ldr	r3, [pc, #240]	; (800b5e0 <writeServos+0x264>)
 800b4ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	2002      	movs	r0, #2
 800b4f8:	f7f6 fd44 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b4fc:	4b38      	ldr	r3, [pc, #224]	; (800b5e0 <writeServos+0x264>)
 800b4fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b502:	b29b      	uxth	r3, r3
 800b504:	4619      	mov	r1, r3
 800b506:	2003      	movs	r0, #3
 800b508:	f7f6 fd3c 	bl	8001f84 <actPwmWriteServo>
            break;
 800b50c:	e062      	b.n	800b5d4 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b50e:	4b34      	ldr	r3, [pc, #208]	; (800b5e0 <writeServos+0x264>)
 800b510:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b514:	b29b      	uxth	r3, r3
 800b516:	4619      	mov	r1, r3
 800b518:	2000      	movs	r0, #0
 800b51a:	f7f6 fd33 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b51e:	4b30      	ldr	r3, [pc, #192]	; (800b5e0 <writeServos+0x264>)
 800b520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b524:	b29b      	uxth	r3, r3
 800b526:	4619      	mov	r1, r3
 800b528:	2001      	movs	r0, #1
 800b52a:	f7f6 fd2b 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b52e:	4b2c      	ldr	r3, [pc, #176]	; (800b5e0 <writeServos+0x264>)
 800b530:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b534:	b29b      	uxth	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	2002      	movs	r0, #2
 800b53a:	f7f6 fd23 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b53e:	4b28      	ldr	r3, [pc, #160]	; (800b5e0 <writeServos+0x264>)
 800b540:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b544:	b29b      	uxth	r3, r3
 800b546:	4619      	mov	r1, r3
 800b548:	2003      	movs	r0, #3
 800b54a:	f7f6 fd1b 	bl	8001f84 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b54e:	2001      	movs	r0, #1
 800b550:	f7fb fd62 	bl	8007018 <feature>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d039      	beq.n	800b5ce <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b55a:	4b21      	ldr	r3, [pc, #132]	; (800b5e0 <writeServos+0x264>)
 800b55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b560:	b29b      	uxth	r3, r3
 800b562:	4619      	mov	r1, r3
 800b564:	2004      	movs	r0, #4
 800b566:	f7f6 fd0d 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <writeServos+0x264>)
 800b56c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b570:	b29b      	uxth	r3, r3
 800b572:	4619      	mov	r1, r3
 800b574:	2005      	movs	r0, #5
 800b576:	f7f6 fd05 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b57a:	4b19      	ldr	r3, [pc, #100]	; (800b5e0 <writeServos+0x264>)
 800b57c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b580:	b29b      	uxth	r3, r3
 800b582:	4619      	mov	r1, r3
 800b584:	2006      	movs	r0, #6
 800b586:	f7f6 fcfd 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b58a:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <writeServos+0x264>)
 800b58c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b590:	b29b      	uxth	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	2007      	movs	r0, #7
 800b596:	f7f6 fcf5 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b59a:	e018      	b.n	800b5ce <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b59c:	2020      	movs	r0, #32
 800b59e:	f7fb fd3b 	bl	8007018 <feature>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d014      	beq.n	800b5d2 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <writeServos+0x264>)
 800b5aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7f6 fce6 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b5b8:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <writeServos+0x264>)
 800b5ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	f7f6 fcde 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b5c8:	e003      	b.n	800b5d2 <writeServos+0x256>
        return;
 800b5ca:	bf00      	nop
 800b5cc:	e002      	b.n	800b5d4 <writeServos+0x258>
            break;
 800b5ce:	bf00      	nop
 800b5d0:	e000      	b.n	800b5d4 <writeServos+0x258>
            break;
 800b5d2:	bf00      	nop
    }
}
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200007e4 	.word	0x200007e4
 800b5dc:	2000089c 	.word	0x2000089c
 800b5e0:	20000040 	.word	0x20000040
 800b5e4:	20000e08 	.word	0x20000e08
 800b5e8:	2000169c 	.word	0x2000169c

0800b5ec <writeMotors>:

void writeMotors(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	71fb      	strb	r3, [r7, #7]
 800b5f6:	e00c      	b.n	800b612 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	4a0b      	ldr	r2, [pc, #44]	; (800b628 <writeMotors+0x3c>)
 800b5fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b600:	b29a      	uxth	r2, r3
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f7f6 fca0 	bl	8001f4c <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	3301      	adds	r3, #1
 800b610:	71fb      	strb	r3, [r7, #7]
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <writeMotors+0x40>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	79fa      	ldrb	r2, [r7, #7]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d3ed      	bcc.n	800b5f8 <writeMotors+0xc>
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20001504 	.word	0x20001504
 800b62c:	20001500 	.word	0x20001500

0800b630 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b08b      	sub	sp, #44	; 0x2c
 800b634:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b636:	4bae      	ldr	r3, [pc, #696]	; (800b8f0 <servoMixer+0x2c0>)
 800b638:	7a9b      	ldrb	r3, [r3, #10]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00c      	beq.n	800b658 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b63e:	4bad      	ldr	r3, [pc, #692]	; (800b8f4 <servoMixer+0x2c4>)
 800b640:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b644:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b646:	4bab      	ldr	r3, [pc, #684]	; (800b8f4 <servoMixer+0x2c4>)
 800b648:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b64c:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b64e:	4ba9      	ldr	r3, [pc, #676]	; (800b8f4 <servoMixer+0x2c4>)
 800b650:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b654:	813b      	strh	r3, [r7, #8]
 800b656:	e00b      	b.n	800b670 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b658:	4ba7      	ldr	r3, [pc, #668]	; (800b8f8 <servoMixer+0x2c8>)
 800b65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b65e:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b660:	4ba5      	ldr	r3, [pc, #660]	; (800b8f8 <servoMixer+0x2c8>)
 800b662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b666:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b668:	4ba3      	ldr	r3, [pc, #652]	; (800b8f8 <servoMixer+0x2c8>)
 800b66a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b66e:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b670:	4ba2      	ldr	r3, [pc, #648]	; (800b8fc <servoMixer+0x2cc>)
 800b672:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b676:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b678:	4ba1      	ldr	r3, [pc, #644]	; (800b900 <servoMixer+0x2d0>)
 800b67a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	4ba0      	ldr	r3, [pc, #640]	; (800b904 <servoMixer+0x2d4>)
 800b682:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	b29b      	uxth	r3, r3
 800b68a:	b21b      	sxth	r3, r3
 800b68c:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b68e:	4b9c      	ldr	r3, [pc, #624]	; (800b900 <servoMixer+0x2d0>)
 800b690:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b694:	b29a      	uxth	r2, r3
 800b696:	4b9b      	ldr	r3, [pc, #620]	; (800b904 <servoMixer+0x2d4>)
 800b698:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	b21b      	sxth	r3, r3
 800b6a2:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b6a4:	4b96      	ldr	r3, [pc, #600]	; (800b900 <servoMixer+0x2d0>)
 800b6a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	4b95      	ldr	r3, [pc, #596]	; (800b904 <servoMixer+0x2d4>)
 800b6ae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b6ba:	4b91      	ldr	r3, [pc, #580]	; (800b900 <servoMixer+0x2d0>)
 800b6bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	4b90      	ldr	r3, [pc, #576]	; (800b904 <servoMixer+0x2d4>)
 800b6c4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	b21b      	sxth	r3, r3
 800b6ce:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b6d0:	4b8b      	ldr	r3, [pc, #556]	; (800b900 <servoMixer+0x2d0>)
 800b6d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	4b8a      	ldr	r3, [pc, #552]	; (800b904 <servoMixer+0x2d4>)
 800b6da:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	b21b      	sxth	r3, r3
 800b6e4:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b6e6:	4b86      	ldr	r3, [pc, #536]	; (800b900 <servoMixer+0x2d0>)
 800b6e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	4b85      	ldr	r3, [pc, #532]	; (800b904 <servoMixer+0x2d4>)
 800b6f0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	b21b      	sxth	r3, r3
 800b6fa:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b6fc:	4b80      	ldr	r3, [pc, #512]	; (800b900 <servoMixer+0x2d0>)
 800b6fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b702:	b29a      	uxth	r2, r3
 800b704:	4b7f      	ldr	r3, [pc, #508]	; (800b904 <servoMixer+0x2d4>)
 800b706:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	b21b      	sxth	r3, r3
 800b710:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b712:	4b7b      	ldr	r3, [pc, #492]	; (800b900 <servoMixer+0x2d0>)
 800b714:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	4b7a      	ldr	r3, [pc, #488]	; (800b904 <servoMixer+0x2d4>)
 800b71c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	b29b      	uxth	r3, r3
 800b724:	b21b      	sxth	r3, r3
 800b726:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b72e:	e00a      	b.n	800b746 <servoMixer+0x116>
        servo[i] = 0;
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b734:	4a74      	ldr	r2, [pc, #464]	; (800b908 <servoMixer+0x2d8>)
 800b736:	2100      	movs	r1, #0
 800b738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b740:	3301      	adds	r3, #1
 800b742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b74a:	2b07      	cmp	r3, #7
 800b74c:	d9f0      	bls.n	800b730 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b74e:	2300      	movs	r3, #0
 800b750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b754:	e15f      	b.n	800ba16 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b756:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b75a:	496c      	ldr	r1, [pc, #432]	; (800b90c <servoMixer+0x2dc>)
 800b75c:	4613      	mov	r3, r2
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	1a9b      	subs	r3, r3, r2
 800b762:	440b      	add	r3, r1
 800b764:	3306      	adds	r3, #6
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00e      	beq.n	800b78a <servoMixer+0x15a>
 800b76c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b770:	4966      	ldr	r1, [pc, #408]	; (800b90c <servoMixer+0x2dc>)
 800b772:	4613      	mov	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	1a9b      	subs	r3, r3, r2
 800b778:	440b      	add	r3, r1
 800b77a:	3306      	adds	r3, #6
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	3314      	adds	r3, #20
 800b780:	4a63      	ldr	r2, [pc, #396]	; (800b910 <servoMixer+0x2e0>)
 800b782:	5cd3      	ldrb	r3, [r2, r3]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 813b 	beq.w	800ba00 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b78a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b78e:	495f      	ldr	r1, [pc, #380]	; (800b90c <servoMixer+0x2dc>)
 800b790:	4613      	mov	r3, r2
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	1a9b      	subs	r3, r3, r2
 800b796:	440b      	add	r3, r1
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b79e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7a2:	495a      	ldr	r1, [pc, #360]	; (800b90c <servoMixer+0x2dc>)
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	1a9b      	subs	r3, r3, r2
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b7b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b7b8:	4956      	ldr	r1, [pc, #344]	; (800b914 <servoMixer+0x2e4>)
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	440b      	add	r3, r1
 800b7c4:	33ba      	adds	r3, #186	; 0xba
 800b7c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7ca:	b299      	uxth	r1, r3
 800b7cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b7d0:	4850      	ldr	r0, [pc, #320]	; (800b914 <servoMixer+0x2e4>)
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4403      	add	r3, r0
 800b7dc:	33b8      	adds	r3, #184	; 0xb8
 800b7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	1acb      	subs	r3, r1, r3
 800b7e6:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b7e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7ec:	4947      	ldr	r1, [pc, #284]	; (800b90c <servoMixer+0x2dc>)
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	1a9b      	subs	r3, r3, r2
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	f993 3000 	ldrsb.w	r3, [r3]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b800:	fb02 f303 	mul.w	r3, r2, r3
 800b804:	4a44      	ldr	r2, [pc, #272]	; (800b918 <servoMixer+0x2e8>)
 800b806:	fb82 1203 	smull	r1, r2, r2, r3
 800b80a:	1152      	asrs	r2, r2, #5
 800b80c:	17db      	asrs	r3, r3, #31
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	b29a      	uxth	r2, r3
 800b812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	b29b      	uxth	r3, r3
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b81e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b822:	493a      	ldr	r1, [pc, #232]	; (800b90c <servoMixer+0x2dc>)
 800b824:	4613      	mov	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	440b      	add	r3, r1
 800b82c:	3305      	adds	r3, #5
 800b82e:	f993 3000 	ldrsb.w	r3, [r3]
 800b832:	461a      	mov	r2, r3
 800b834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b836:	fb02 f303 	mul.w	r3, r2, r3
 800b83a:	4a37      	ldr	r2, [pc, #220]	; (800b918 <servoMixer+0x2e8>)
 800b83c:	fb82 1203 	smull	r1, r2, r2, r3
 800b840:	1152      	asrs	r2, r2, #5
 800b842:	17db      	asrs	r3, r3, #31
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	b29a      	uxth	r2, r3
 800b848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b84a:	085b      	lsrs	r3, r3, #1
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	b29b      	uxth	r3, r3
 800b852:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b854:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b858:	492c      	ldr	r1, [pc, #176]	; (800b90c <servoMixer+0x2dc>)
 800b85a:	4613      	mov	r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	440b      	add	r3, r1
 800b862:	3303      	adds	r3, #3
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10c      	bne.n	800b884 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b86a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b86e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	3328      	adds	r3, #40	; 0x28
 800b876:	443b      	add	r3, r7
 800b878:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b87c:	4b27      	ldr	r3, [pc, #156]	; (800b91c <servoMixer+0x2ec>)
 800b87e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b882:	e082      	b.n	800b98a <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b888:	4a24      	ldr	r2, [pc, #144]	; (800b91c <servoMixer+0x2ec>)
 800b88a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b88e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	3328      	adds	r3, #40	; 0x28
 800b896:	443b      	add	r3, r7
 800b898:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	da3f      	bge.n	800b920 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a4:	4a1d      	ldr	r2, [pc, #116]	; (800b91c <servoMixer+0x2ec>)
 800b8a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8b0:	4916      	ldr	r1, [pc, #88]	; (800b90c <servoMixer+0x2dc>)
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	440b      	add	r3, r1
 800b8ba:	3303      	adds	r3, #3
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	4418      	add	r0, r3
 800b8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c4:	4a15      	ldr	r2, [pc, #84]	; (800b91c <servoMixer+0x2ec>)
 800b8c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	3328      	adds	r3, #40	; 0x28
 800b8d4:	443b      	add	r3, r7
 800b8d6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f8 fa3a 	bl	8003d54 <constrain>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e6:	b211      	sxth	r1, r2
 800b8e8:	4a0c      	ldr	r2, [pc, #48]	; (800b91c <servoMixer+0x2ec>)
 800b8ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b8ee:	e04c      	b.n	800b98a <servoMixer+0x35a>
 800b8f0:	2000169c 	.word	0x2000169c
 800b8f4:	200016f8 	.word	0x200016f8
 800b8f8:	20001758 	.word	0x20001758
 800b8fc:	20001504 	.word	0x20001504
 800b900:	200016d4 	.word	0x200016d4
 800b904:	2000089c 	.word	0x2000089c
 800b908:	20000040 	.word	0x20000040
 800b90c:	200015f4 	.word	0x200015f4
 800b910:	2000173c 	.word	0x2000173c
 800b914:	20000e08 	.word	0x20000e08
 800b918:	51eb851f 	.word	0x51eb851f
 800b91c:	20001664 	.word	0x20001664
                else if (currentOutput[i] > input[from])
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b924:	4a63      	ldr	r2, [pc, #396]	; (800bab4 <servoMixer+0x484>)
 800b926:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b92a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	3328      	adds	r3, #40	; 0x28
 800b932:	443b      	add	r3, r7
 800b934:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b938:	429a      	cmp	r2, r3
 800b93a:	dd26      	ble.n	800b98a <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b940:	4a5c      	ldr	r2, [pc, #368]	; (800bab4 <servoMixer+0x484>)
 800b942:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b946:	4618      	mov	r0, r3
 800b948:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b94c:	495a      	ldr	r1, [pc, #360]	; (800bab8 <servoMixer+0x488>)
 800b94e:	4613      	mov	r3, r2
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	440b      	add	r3, r1
 800b956:	3303      	adds	r3, #3
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	1ac0      	subs	r0, r0, r3
 800b95c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	3328      	adds	r3, #40	; 0x28
 800b964:	443b      	add	r3, r7
 800b966:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b96a:	4619      	mov	r1, r3
 800b96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b970:	4a50      	ldr	r2, [pc, #320]	; (800bab4 <servoMixer+0x484>)
 800b972:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b976:	461a      	mov	r2, r3
 800b978:	f7f8 f9ec 	bl	8003d54 <constrain>
 800b97c:	4602      	mov	r2, r0
 800b97e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b982:	b211      	sxth	r1, r2
 800b984:	4a4b      	ldr	r2, [pc, #300]	; (800bab4 <servoMixer+0x484>)
 800b986:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b98a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b98e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b992:	4611      	mov	r1, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fa73 	bl	800ae80 <servoDirection>
 800b99a:	4604      	mov	r4, r0
 800b99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a0:	4a44      	ldr	r2, [pc, #272]	; (800bab4 <servoMixer+0x484>)
 800b9a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9ac:	4942      	ldr	r1, [pc, #264]	; (800bab8 <servoMixer+0x488>)
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	440b      	add	r3, r1
 800b9b6:	3302      	adds	r3, #2
 800b9b8:	f993 3000 	ldrsb.w	r3, [r3]
 800b9bc:	fb00 f303 	mul.w	r3, r0, r3
 800b9c0:	4a3e      	ldr	r2, [pc, #248]	; (800babc <servoMixer+0x48c>)
 800b9c2:	fb82 1203 	smull	r1, r2, r2, r3
 800b9c6:	1152      	asrs	r2, r2, #5
 800b9c8:	17db      	asrs	r3, r3, #31
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b9d0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f8 f9bd 	bl	8003d54 <constrain>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	fb03 f104 	mul.w	r1, r3, r4
 800b9e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9e4:	4a36      	ldr	r2, [pc, #216]	; (800bac0 <servoMixer+0x490>)
 800b9e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	b28b      	uxth	r3, r1
 800b9ee:	4413      	add	r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9f6:	b211      	sxth	r1, r2
 800b9f8:	4a31      	ldr	r2, [pc, #196]	; (800bac0 <servoMixer+0x490>)
 800b9fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b9fe:	e005      	b.n	800ba0c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800ba00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba04:	4a2b      	ldr	r2, [pc, #172]	; (800bab4 <servoMixer+0x484>)
 800ba06:	2100      	movs	r1, #0
 800ba08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800ba0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba10:	3301      	adds	r3, #1
 800ba12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba16:	4b2b      	ldr	r3, [pc, #172]	; (800bac4 <servoMixer+0x494>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	f4ff ae99 	bcc.w	800b756 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba2a:	e039      	b.n	800baa0 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800ba2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba30:	4925      	ldr	r1, [pc, #148]	; (800bac8 <servoMixer+0x498>)
 800ba32:	4613      	mov	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	440b      	add	r3, r1
 800ba3c:	33be      	adds	r3, #190	; 0xbe
 800ba3e:	f993 3000 	ldrsb.w	r3, [r3]
 800ba42:	4619      	mov	r1, r3
 800ba44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba48:	4a1d      	ldr	r2, [pc, #116]	; (800bac0 <servoMixer+0x490>)
 800ba4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ba4e:	fb01 f303 	mul.w	r3, r1, r3
 800ba52:	4a1a      	ldr	r2, [pc, #104]	; (800babc <servoMixer+0x48c>)
 800ba54:	fb82 1203 	smull	r1, r2, r2, r3
 800ba58:	1152      	asrs	r2, r2, #5
 800ba5a:	17db      	asrs	r3, r3, #31
 800ba5c:	1ad2      	subs	r2, r2, r3
 800ba5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba62:	b211      	sxth	r1, r2
 800ba64:	4a16      	ldr	r2, [pc, #88]	; (800bac0 <servoMixer+0x490>)
 800ba66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800ba6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff f9d0 	bl	800ae14 <servoMiddle>
 800ba74:	4603      	mov	r3, r0
 800ba76:	4619      	mov	r1, r3
 800ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba7c:	4a10      	ldr	r2, [pc, #64]	; (800bac0 <servoMixer+0x490>)
 800ba7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	b28b      	uxth	r3, r1
 800ba86:	4413      	add	r3, r2
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8e:	b211      	sxth	r1, r2
 800ba90:	4a0b      	ldr	r2, [pc, #44]	; (800bac0 <servoMixer+0x490>)
 800ba92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800ba96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800baa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	d9c1      	bls.n	800ba2c <servoMixer+0x3fc>
    }
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	372c      	adds	r7, #44	; 0x2c
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd90      	pop	{r4, r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20001664 	.word	0x20001664
 800bab8:	200015f4 	.word	0x200015f4
 800babc:	51eb851f 	.word	0x51eb851f
 800bac0:	20000040 	.word	0x20000040
 800bac4:	20001501 	.word	0x20001501
 800bac8:	20000e08 	.word	0x20000e08

0800bacc <mixTable>:

void mixTable(void)
{
 800bacc:	b590      	push	{r4, r7, lr}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800bad2:	4b7e      	ldr	r3, [pc, #504]	; (800bccc <mixTable+0x200>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d91d      	bls.n	800bb16 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800bada:	4b7d      	ldr	r3, [pc, #500]	; (800bcd0 <mixTable+0x204>)
 800badc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bae0:	4618      	mov	r0, r3
 800bae2:	4b7c      	ldr	r3, [pc, #496]	; (800bcd4 <mixTable+0x208>)
 800bae4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	bfb8      	it	lt
 800baec:	425b      	neglt	r3, r3
 800baee:	b29b      	uxth	r3, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	4a76      	ldr	r2, [pc, #472]	; (800bcd4 <mixTable+0x208>)
 800bafa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	bfb8      	it	lt
 800bb02:	4252      	neglt	r2, r2
 800bb04:	b292      	uxth	r2, r2
 800bb06:	3264      	adds	r2, #100	; 0x64
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f7f8 f923 	bl	8003d54 <constrain>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	b21a      	sxth	r2, r3
 800bb12:	4b6f      	ldr	r3, [pc, #444]	; (800bcd0 <mixTable+0x204>)
 800bb14:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800bb16:	4b6d      	ldr	r3, [pc, #436]	; (800bccc <mixTable+0x200>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	f240 809a 	bls.w	800bc54 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800bb20:	2300      	movs	r3, #0
 800bb22:	60bb      	str	r3, [r7, #8]
 800bb24:	e08f      	b.n	800bc46 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800bb26:	4b6b      	ldr	r3, [pc, #428]	; (800bcd4 <mixTable+0x208>)
 800bb28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb34:	4a68      	ldr	r2, [pc, #416]	; (800bcd8 <mixTable+0x20c>)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	4413      	add	r3, r2
 800bb3c:	edd3 7a00 	vldr	s15, [r3]
 800bb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb44:	4b62      	ldr	r3, [pc, #392]	; (800bcd0 <mixTable+0x204>)
 800bb46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bb52:	4a61      	ldr	r2, [pc, #388]	; (800bcd8 <mixTable+0x20c>)
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	4413      	add	r3, r2
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	edd3 7a00 	vldr	s15, [r3]
 800bb60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb64:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb68:	4b59      	ldr	r3, [pc, #356]	; (800bcd0 <mixTable+0x204>)
 800bb6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb6e:	ee07 3a90 	vmov	s15, r3
 800bb72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bb76:	4a58      	ldr	r2, [pc, #352]	; (800bcd8 <mixTable+0x20c>)
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	4413      	add	r3, r2
 800bb7e:	3304      	adds	r3, #4
 800bb80:	edd3 7a00 	vldr	s15, [r3]
 800bb84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb8c:	4b53      	ldr	r3, [pc, #332]	; (800bcdc <mixTable+0x210>)
 800bb8e:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800bb92:	425b      	negs	r3, r3
 800bb94:	4a4e      	ldr	r2, [pc, #312]	; (800bcd0 <mixTable+0x204>)
 800bb96:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bb9a:	fb02 f303 	mul.w	r3, r2, r3
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bba6:	4a4c      	ldr	r2, [pc, #304]	; (800bcd8 <mixTable+0x20c>)
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	011b      	lsls	r3, r3, #4
 800bbac:	4413      	add	r3, r2
 800bbae:	330c      	adds	r3, #12
 800bbb0:	edd3 7a00 	vldr	s15, [r3]
 800bbb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbc0:	ee17 3a90 	vmov	r3, s15
 800bbc4:	b219      	sxth	r1, r3
 800bbc6:	4a46      	ldr	r2, [pc, #280]	; (800bce0 <mixTable+0x214>)
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800bbce:	4b45      	ldr	r3, [pc, #276]	; (800bce4 <mixTable+0x218>)
 800bbd0:	7c1b      	ldrb	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d034      	beq.n	800bc40 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800bbd6:	4b41      	ldr	r3, [pc, #260]	; (800bcdc <mixTable+0x210>)
 800bbd8:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d028      	beq.n	800bc32 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800bbe0:	4b40      	ldr	r3, [pc, #256]	; (800bce4 <mixTable+0x218>)
 800bbe2:	7a9b      	ldrb	r3, [r3, #10]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d02b      	beq.n	800bc40 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800bbe8:	4b3a      	ldr	r3, [pc, #232]	; (800bcd4 <mixTable+0x208>)
 800bbea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbf6:	4b37      	ldr	r3, [pc, #220]	; (800bcd4 <mixTable+0x208>)
 800bbf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bc12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bc16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc22:	ee17 3a90 	vmov	r3, s15
 800bc26:	b219      	sxth	r1, r3
 800bc28:	4a2d      	ldr	r2, [pc, #180]	; (800bce0 <mixTable+0x214>)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bc30:	e006      	b.n	800bc40 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800bc32:	4b28      	ldr	r3, [pc, #160]	; (800bcd4 <mixTable+0x208>)
 800bc34:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800bc38:	4a29      	ldr	r2, [pc, #164]	; (800bce0 <mixTable+0x214>)
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60bb      	str	r3, [r7, #8]
 800bc46:	4b21      	ldr	r3, [pc, #132]	; (800bccc <mixTable+0x200>)
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	f4ff af69 	bcc.w	800bb26 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800bc54:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <mixTable+0x21c>)
 800bc56:	795b      	ldrb	r3, [r3, #5]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	2b17      	cmp	r3, #23
 800bc5c:	d87b      	bhi.n	800bd56 <mixTable+0x28a>
 800bc5e:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <mixTable+0x198>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	0800bd57 	.word	0x0800bd57
 800bc6c:	0800bd57 	.word	0x0800bd57
 800bc70:	0800bcc5 	.word	0x0800bcc5
 800bc74:	0800bced 	.word	0x0800bced
 800bc78:	0800bd57 	.word	0x0800bd57
 800bc7c:	0800bd57 	.word	0x0800bd57
 800bc80:	0800bcc5 	.word	0x0800bcc5
 800bc84:	0800bd57 	.word	0x0800bd57
 800bc88:	0800bd57 	.word	0x0800bd57
 800bc8c:	0800bd57 	.word	0x0800bd57
 800bc90:	0800bd57 	.word	0x0800bd57
 800bc94:	0800bd57 	.word	0x0800bd57
 800bc98:	0800bcc5 	.word	0x0800bcc5
 800bc9c:	0800bd57 	.word	0x0800bd57
 800bca0:	0800bd57 	.word	0x0800bd57
 800bca4:	0800bd57 	.word	0x0800bd57
 800bca8:	0800bd57 	.word	0x0800bd57
 800bcac:	0800bd57 	.word	0x0800bd57
 800bcb0:	0800bcc5 	.word	0x0800bcc5
 800bcb4:	0800bcc5 	.word	0x0800bcc5
 800bcb8:	0800bd57 	.word	0x0800bd57
 800bcbc:	0800bd57 	.word	0x0800bd57
 800bcc0:	0800bcc5 	.word	0x0800bcc5
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bcc4:	f7ff fcb4 	bl	800b630 <servoMixer>
            break;
 800bcc8:	e045      	b.n	800bd56 <mixTable+0x28a>
 800bcca:	bf00      	nop
 800bccc:	20001500 	.word	0x20001500
 800bcd0:	20001758 	.word	0x20001758
 800bcd4:	200016f8 	.word	0x200016f8
 800bcd8:	20001534 	.word	0x20001534
 800bcdc:	20000e08 	.word	0x20000e08
 800bce0:	20001504 	.word	0x20001504
 800bce4:	2000169c 	.word	0x2000169c
 800bce8:	2000089c 	.word	0x2000089c
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bcec:	4ba7      	ldr	r3, [pc, #668]	; (800bf8c <mixTable+0x4c0>)
 800bcee:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	4ba6      	ldr	r3, [pc, #664]	; (800bf90 <mixTable+0x4c4>)
 800bcf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcfa:	fb02 f303 	mul.w	r3, r2, r3
 800bcfe:	4aa5      	ldr	r2, [pc, #660]	; (800bf94 <mixTable+0x4c8>)
 800bd00:	fb82 1203 	smull	r1, r2, r2, r3
 800bd04:	1112      	asrs	r2, r2, #4
 800bd06:	17db      	asrs	r3, r3, #31
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	b29c      	uxth	r4, r3
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	f7ff f881 	bl	800ae14 <servoMiddle>
 800bd12:	4603      	mov	r3, r0
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4423      	add	r3, r4
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	b21a      	sxth	r2, r3
 800bd1c:	4b9e      	ldr	r3, [pc, #632]	; (800bf98 <mixTable+0x4cc>)
 800bd1e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bd20:	4b9a      	ldr	r3, [pc, #616]	; (800bf8c <mixTable+0x4c0>)
 800bd22:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bd26:	461a      	mov	r2, r3
 800bd28:	4b99      	ldr	r3, [pc, #612]	; (800bf90 <mixTable+0x4c4>)
 800bd2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd2e:	fb02 f303 	mul.w	r3, r2, r3
 800bd32:	4a98      	ldr	r2, [pc, #608]	; (800bf94 <mixTable+0x4c8>)
 800bd34:	fb82 1203 	smull	r1, r2, r2, r3
 800bd38:	1112      	asrs	r2, r2, #4
 800bd3a:	17db      	asrs	r3, r3, #31
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	b29c      	uxth	r4, r3
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7ff f867 	bl	800ae14 <servoMiddle>
 800bd46:	4603      	mov	r3, r0
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4423      	add	r3, r4
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	b21a      	sxth	r2, r3
 800bd50:	4b91      	ldr	r3, [pc, #580]	; (800bf98 <mixTable+0x4cc>)
 800bd52:	805a      	strh	r2, [r3, #2]
            break;
 800bd54:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bd56:	2020      	movs	r0, #32
 800bd58:	f7fb f95e 	bl	8007018 <feature>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 80a3 	beq.w	800beaa <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bd64:	2000      	movs	r0, #0
 800bd66:	f7ff f855 	bl	800ae14 <servoMiddle>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b8a      	ldr	r3, [pc, #552]	; (800bf98 <mixTable+0x4cc>)
 800bd70:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bd72:	2001      	movs	r0, #1
 800bd74:	f7ff f84e 	bl	800ae14 <servoMiddle>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	4b86      	ldr	r3, [pc, #536]	; (800bf98 <mixTable+0x4cc>)
 800bd7e:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bd80:	4b86      	ldr	r3, [pc, #536]	; (800bf9c <mixTable+0x4d0>)
 800bd82:	7a1b      	ldrb	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 8090 	beq.w	800beaa <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bd8a:	4b80      	ldr	r3, [pc, #512]	; (800bf8c <mixTable+0x4c0>)
 800bd8c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d056      	beq.n	800be46 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bd98:	4b7f      	ldr	r3, [pc, #508]	; (800bf98 <mixTable+0x4cc>)
 800bd9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	4b7a      	ldr	r3, [pc, #488]	; (800bf8c <mixTable+0x4c0>)
 800bda2:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bda6:	425b      	negs	r3, r3
 800bda8:	4979      	ldr	r1, [pc, #484]	; (800bf90 <mixTable+0x4c4>)
 800bdaa:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bdae:	fb01 f303 	mul.w	r3, r1, r3
 800bdb2:	4978      	ldr	r1, [pc, #480]	; (800bf94 <mixTable+0x4c8>)
 800bdb4:	fb81 0103 	smull	r0, r1, r1, r3
 800bdb8:	1109      	asrs	r1, r1, #4
 800bdba:	17db      	asrs	r3, r3, #31
 800bdbc:	1acb      	subs	r3, r1, r3
 800bdbe:	b299      	uxth	r1, r3
 800bdc0:	4b72      	ldr	r3, [pc, #456]	; (800bf8c <mixTable+0x4c0>)
 800bdc2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	4b71      	ldr	r3, [pc, #452]	; (800bf90 <mixTable+0x4c4>)
 800bdca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdce:	fb00 f303 	mul.w	r3, r0, r3
 800bdd2:	4870      	ldr	r0, [pc, #448]	; (800bf94 <mixTable+0x4c8>)
 800bdd4:	fb80 4003 	smull	r4, r0, r0, r3
 800bdd8:	1100      	asrs	r0, r0, #4
 800bdda:	17db      	asrs	r3, r3, #31
 800bddc:	1a1b      	subs	r3, r3, r0
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	440b      	add	r3, r1
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	b21a      	sxth	r2, r3
 800bdea:	4b6b      	ldr	r3, [pc, #428]	; (800bf98 <mixTable+0x4cc>)
 800bdec:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bdee:	4b6a      	ldr	r3, [pc, #424]	; (800bf98 <mixTable+0x4cc>)
 800bdf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	4b65      	ldr	r3, [pc, #404]	; (800bf8c <mixTable+0x4c0>)
 800bdf8:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bdfc:	425b      	negs	r3, r3
 800bdfe:	4964      	ldr	r1, [pc, #400]	; (800bf90 <mixTable+0x4c4>)
 800be00:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800be04:	fb01 f303 	mul.w	r3, r1, r3
 800be08:	4962      	ldr	r1, [pc, #392]	; (800bf94 <mixTable+0x4c8>)
 800be0a:	fb81 0103 	smull	r0, r1, r1, r3
 800be0e:	1109      	asrs	r1, r1, #4
 800be10:	17db      	asrs	r3, r3, #31
 800be12:	1acb      	subs	r3, r1, r3
 800be14:	b299      	uxth	r1, r3
 800be16:	4b5d      	ldr	r3, [pc, #372]	; (800bf8c <mixTable+0x4c0>)
 800be18:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800be1c:	4618      	mov	r0, r3
 800be1e:	4b5c      	ldr	r3, [pc, #368]	; (800bf90 <mixTable+0x4c4>)
 800be20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be24:	fb00 f303 	mul.w	r3, r0, r3
 800be28:	485a      	ldr	r0, [pc, #360]	; (800bf94 <mixTable+0x4c8>)
 800be2a:	fb80 4003 	smull	r4, r0, r0, r3
 800be2e:	1100      	asrs	r0, r0, #4
 800be30:	17db      	asrs	r3, r3, #31
 800be32:	1ac3      	subs	r3, r0, r3
 800be34:	b29b      	uxth	r3, r3
 800be36:	440b      	add	r3, r1
 800be38:	b29b      	uxth	r3, r3
 800be3a:	4413      	add	r3, r2
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	b21a      	sxth	r2, r3
 800be40:	4b55      	ldr	r3, [pc, #340]	; (800bf98 <mixTable+0x4cc>)
 800be42:	805a      	strh	r2, [r3, #2]
 800be44:	e031      	b.n	800beaa <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800be46:	4b54      	ldr	r3, [pc, #336]	; (800bf98 <mixTable+0x4cc>)
 800be48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	4b4f      	ldr	r3, [pc, #316]	; (800bf8c <mixTable+0x4c0>)
 800be50:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800be54:	4619      	mov	r1, r3
 800be56:	4b4e      	ldr	r3, [pc, #312]	; (800bf90 <mixTable+0x4c4>)
 800be58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be5c:	fb01 f303 	mul.w	r3, r1, r3
 800be60:	494c      	ldr	r1, [pc, #304]	; (800bf94 <mixTable+0x4c8>)
 800be62:	fb81 0103 	smull	r0, r1, r1, r3
 800be66:	1109      	asrs	r1, r1, #4
 800be68:	17db      	asrs	r3, r3, #31
 800be6a:	1acb      	subs	r3, r1, r3
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4413      	add	r3, r2
 800be70:	b29b      	uxth	r3, r3
 800be72:	b21a      	sxth	r2, r3
 800be74:	4b48      	ldr	r3, [pc, #288]	; (800bf98 <mixTable+0x4cc>)
 800be76:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800be78:	4b47      	ldr	r3, [pc, #284]	; (800bf98 <mixTable+0x4cc>)
 800be7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be7e:	b29a      	uxth	r2, r3
 800be80:	4b42      	ldr	r3, [pc, #264]	; (800bf8c <mixTable+0x4c0>)
 800be82:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800be86:	4619      	mov	r1, r3
 800be88:	4b41      	ldr	r3, [pc, #260]	; (800bf90 <mixTable+0x4c4>)
 800be8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be8e:	fb01 f303 	mul.w	r3, r1, r3
 800be92:	4940      	ldr	r1, [pc, #256]	; (800bf94 <mixTable+0x4c8>)
 800be94:	fb81 0103 	smull	r0, r1, r1, r3
 800be98:	1109      	asrs	r1, r1, #4
 800be9a:	17db      	asrs	r3, r3, #31
 800be9c:	1acb      	subs	r3, r1, r3
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	4413      	add	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	b21a      	sxth	r2, r3
 800bea6:	4b3c      	ldr	r3, [pc, #240]	; (800bf98 <mixTable+0x4cc>)
 800bea8:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800beaa:	2300      	movs	r3, #0
 800beac:	60bb      	str	r3, [r7, #8]
 800beae:	e026      	b.n	800befe <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800beb0:	4a39      	ldr	r2, [pc, #228]	; (800bf98 <mixTable+0x4cc>)
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800beb8:	4618      	mov	r0, r3
 800beba:	4934      	ldr	r1, [pc, #208]	; (800bf8c <mixTable+0x4c0>)
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	440b      	add	r3, r1
 800bec8:	33b8      	adds	r3, #184	; 0xb8
 800beca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bece:	461c      	mov	r4, r3
 800bed0:	492e      	ldr	r1, [pc, #184]	; (800bf8c <mixTable+0x4c0>)
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	440b      	add	r3, r1
 800bede:	33ba      	adds	r3, #186	; 0xba
 800bee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bee4:	461a      	mov	r2, r3
 800bee6:	4621      	mov	r1, r4
 800bee8:	f7f7 ff34 	bl	8003d54 <constrain>
 800beec:	4603      	mov	r3, r0
 800beee:	b219      	sxth	r1, r3
 800bef0:	4a29      	ldr	r2, [pc, #164]	; (800bf98 <mixTable+0x4cc>)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	3301      	adds	r3, #1
 800befc:	60bb      	str	r3, [r7, #8]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b07      	cmp	r3, #7
 800bf02:	d9d5      	bls.n	800beb0 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bf04:	4b21      	ldr	r3, [pc, #132]	; (800bf8c <mixTable+0x4c0>)
 800bf06:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bf0a:	f003 0304 	and.w	r3, r3, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d01c      	beq.n	800bf4c <mixTable+0x480>
        int offset = core.numServos - 4;
 800bf12:	4b23      	ldr	r3, [pc, #140]	; (800bfa0 <mixTable+0x4d4>)
 800bf14:	7d9b      	ldrb	r3, [r3, #22]
 800bf16:	3b04      	subs	r3, #4
 800bf18:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	e012      	b.n	800bf46 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	4413      	add	r3, r2
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	491c      	ldr	r1, [pc, #112]	; (800bfa4 <mixTable+0x4d8>)
 800bf32:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f7f6 f822 	bl	8001f84 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60bb      	str	r3, [r7, #8]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d9e9      	bls.n	800bf20 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bf4c:	4b16      	ldr	r3, [pc, #88]	; (800bfa8 <mixTable+0x4dc>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bf52:	2301      	movs	r3, #1
 800bf54:	60bb      	str	r3, [r7, #8]
 800bf56:	e00f      	b.n	800bf78 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bf58:	4a13      	ldr	r2, [pc, #76]	; (800bfa8 <mixTable+0x4dc>)
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	da04      	bge.n	800bf72 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bf68:	4a0f      	ldr	r2, [pc, #60]	; (800bfa8 <mixTable+0x4dc>)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf70:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	3301      	adds	r3, #1
 800bf76:	60bb      	str	r3, [r7, #8]
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <mixTable+0x4e0>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d3e9      	bcc.n	800bf58 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bf84:	2300      	movs	r3, #0
 800bf86:	60bb      	str	r3, [r7, #8]
 800bf88:	e0e8      	b.n	800c15c <mixTable+0x690>
 800bf8a:	bf00      	nop
 800bf8c:	20000e08 	.word	0x20000e08
 800bf90:	20001444 	.word	0x20001444
 800bf94:	51eb851f 	.word	0x51eb851f
 800bf98:	20000040 	.word	0x20000040
 800bf9c:	2000173c 	.word	0x2000173c
 800bfa0:	200007e4 	.word	0x200007e4
 800bfa4:	200016d4 	.word	0x200016d4
 800bfa8:	20001504 	.word	0x20001504
 800bfac:	20001500 	.word	0x20001500
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800bfb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bfb4:	4a6f      	ldr	r2, [pc, #444]	; (800c174 <mixTable+0x6a8>)
 800bfb6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	dd15      	ble.n	800bfea <mixTable+0x51e>
 800bfbe:	4b6e      	ldr	r3, [pc, #440]	; (800c178 <mixTable+0x6ac>)
 800bfc0:	7c1b      	ldrb	r3, [r3, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d111      	bne.n	800bfea <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800bfc6:	4a6d      	ldr	r2, [pc, #436]	; (800c17c <mixTable+0x6b0>)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	4b68      	ldr	r3, [pc, #416]	; (800c174 <mixTable+0x6a8>)
 800bfd2:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800bfd6:	89fb      	ldrh	r3, [r7, #14]
 800bfd8:	1acb      	subs	r3, r1, r3
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4413      	add	r3, r2
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	b219      	sxth	r1, r3
 800bfe2:	4a66      	ldr	r2, [pc, #408]	; (800c17c <mixTable+0x6b0>)
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800bfea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bfee:	f7fb f813 	bl	8007018 <feature>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d060      	beq.n	800c0ba <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800bff8:	4b61      	ldr	r3, [pc, #388]	; (800c180 <mixTable+0x6b4>)
 800bffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bffe:	461a      	mov	r2, r3
 800c000:	4b5c      	ldr	r3, [pc, #368]	; (800c174 <mixTable+0x6a8>)
 800c002:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c006:	429a      	cmp	r2, r3
 800c008:	dd2b      	ble.n	800c062 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800c00a:	4a5c      	ldr	r2, [pc, #368]	; (800c17c <mixTable+0x6b0>)
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c012:	4618      	mov	r0, r3
 800c014:	4b57      	ldr	r3, [pc, #348]	; (800c174 <mixTable+0x6a8>)
 800c016:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800c01a:	4619      	mov	r1, r3
 800c01c:	4b55      	ldr	r3, [pc, #340]	; (800c174 <mixTable+0x6a8>)
 800c01e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800c022:	461a      	mov	r2, r3
 800c024:	f7f7 fe96 	bl	8003d54 <constrain>
 800c028:	4603      	mov	r3, r0
 800c02a:	b219      	sxth	r1, r3
 800c02c:	4a53      	ldr	r2, [pc, #332]	; (800c17c <mixTable+0x6b0>)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800c034:	4b4f      	ldr	r3, [pc, #316]	; (800c174 <mixTable+0x6a8>)
 800c036:	795b      	ldrb	r3, [r3, #5]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d17d      	bne.n	800c138 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800c03c:	4b51      	ldr	r3, [pc, #324]	; (800c184 <mixTable+0x6b8>)
 800c03e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c042:	4618      	mov	r0, r3
 800c044:	4b50      	ldr	r3, [pc, #320]	; (800c188 <mixTable+0x6bc>)
 800c046:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800c04a:	4619      	mov	r1, r3
 800c04c:	4b4e      	ldr	r3, [pc, #312]	; (800c188 <mixTable+0x6bc>)
 800c04e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800c052:	461a      	mov	r2, r3
 800c054:	f7f7 fe7e 	bl	8003d54 <constrain>
 800c058:	4603      	mov	r3, r0
 800c05a:	b21a      	sxth	r2, r3
 800c05c:	4b49      	ldr	r3, [pc, #292]	; (800c184 <mixTable+0x6b8>)
 800c05e:	815a      	strh	r2, [r3, #10]
 800c060:	e06a      	b.n	800c138 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800c062:	4a46      	ldr	r2, [pc, #280]	; (800c17c <mixTable+0x6b0>)
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c06a:	4618      	mov	r0, r3
 800c06c:	4b41      	ldr	r3, [pc, #260]	; (800c174 <mixTable+0x6a8>)
 800c06e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c072:	4619      	mov	r1, r3
 800c074:	4b3f      	ldr	r3, [pc, #252]	; (800c174 <mixTable+0x6a8>)
 800c076:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800c07a:	461a      	mov	r2, r3
 800c07c:	f7f7 fe6a 	bl	8003d54 <constrain>
 800c080:	4603      	mov	r3, r0
 800c082:	b219      	sxth	r1, r3
 800c084:	4a3d      	ldr	r2, [pc, #244]	; (800c17c <mixTable+0x6b0>)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800c08c:	4b39      	ldr	r3, [pc, #228]	; (800c174 <mixTable+0x6a8>)
 800c08e:	795b      	ldrb	r3, [r3, #5]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d151      	bne.n	800c138 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800c094:	4b3b      	ldr	r3, [pc, #236]	; (800c184 <mixTable+0x6b8>)
 800c096:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c09a:	4618      	mov	r0, r3
 800c09c:	4b3a      	ldr	r3, [pc, #232]	; (800c188 <mixTable+0x6bc>)
 800c09e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4b38      	ldr	r3, [pc, #224]	; (800c188 <mixTable+0x6bc>)
 800c0a6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f7f7 fe52 	bl	8003d54 <constrain>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	b21a      	sxth	r2, r3
 800c0b4:	4b33      	ldr	r3, [pc, #204]	; (800c184 <mixTable+0x6b8>)
 800c0b6:	815a      	strh	r2, [r3, #10]
 800c0b8:	e03e      	b.n	800c138 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800c0ba:	4a30      	ldr	r2, [pc, #192]	; (800c17c <mixTable+0x6b0>)
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	4b2b      	ldr	r3, [pc, #172]	; (800c174 <mixTable+0x6a8>)
 800c0c6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4b29      	ldr	r3, [pc, #164]	; (800c174 <mixTable+0x6a8>)
 800c0ce:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f7f7 fe3e 	bl	8003d54 <constrain>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	b219      	sxth	r1, r3
 800c0dc:	4a27      	ldr	r2, [pc, #156]	; (800c17c <mixTable+0x6b0>)
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800c0e4:	4b26      	ldr	r3, [pc, #152]	; (800c180 <mixTable+0x6b4>)
 800c0e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4b21      	ldr	r3, [pc, #132]	; (800c174 <mixTable+0x6a8>)
 800c0ee:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	da1d      	bge.n	800c132 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800c0f6:	2010      	movs	r0, #16
 800c0f8:	f7fa ff8e 	bl	8007018 <feature>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f083 0301 	eor.w	r3, r3, #1
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800c108:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <mixTable+0x6a8>)
 800c10a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800c10e:	b219      	sxth	r1, r3
 800c110:	4a1a      	ldr	r2, [pc, #104]	; (800c17c <mixTable+0x6b0>)
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800c118:	e00e      	b.n	800c138 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800c11a:	4b16      	ldr	r3, [pc, #88]	; (800c174 <mixTable+0x6a8>)
 800c11c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c120:	b219      	sxth	r1, r3
 800c122:	4a16      	ldr	r2, [pc, #88]	; (800c17c <mixTable+0x6b0>)
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <mixTable+0x6ac>)
 800c12c:	2201      	movs	r2, #1
 800c12e:	745a      	strb	r2, [r3, #17]
 800c130:	e002      	b.n	800c138 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800c132:	4b11      	ldr	r3, [pc, #68]	; (800c178 <mixTable+0x6ac>)
 800c134:	2200      	movs	r2, #0
 800c136:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800c138:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <mixTable+0x6ac>)
 800c13a:	785b      	ldrb	r3, [r3, #1]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800c140:	4a12      	ldr	r2, [pc, #72]	; (800c18c <mixTable+0x6c0>)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800c148:	4a0c      	ldr	r2, [pc, #48]	; (800c17c <mixTable+0x6b0>)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <mixTable+0x6ac>)
 800c152:	2201      	movs	r2, #1
 800c154:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	3301      	adds	r3, #1
 800c15a:	60bb      	str	r3, [r7, #8]
 800c15c:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <mixTable+0x6c4>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	4293      	cmp	r3, r2
 800c166:	f4ff af23 	bcc.w	800bfb0 <mixTable+0x4e4>
        }
    }
}
 800c16a:	bf00      	nop
 800c16c:	bf00      	nop
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	bd90      	pop	{r4, r7, pc}
 800c174:	2000089c 	.word	0x2000089c
 800c178:	2000169c 	.word	0x2000169c
 800c17c:	20001504 	.word	0x20001504
 800c180:	200016d4 	.word	0x200016d4
 800c184:	20000040 	.word	0x20000040
 800c188:	20000e08 	.word	0x20000e08
 800c18c:	2000151c 	.word	0x2000151c
 800c190:	20001500 	.word	0x20001500

0800c194 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	71fb      	strb	r3, [r7, #7]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	71bb      	strb	r3, [r7, #6]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73bb      	strb	r3, [r7, #14]
 800c1aa:	e020      	b.n	800c1ee <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
 800c1b0:	e013      	b.n	800c1da <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c1b2:	f7f5 ff79 	bl	80020a8 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c1bc:	f7f5 ffb6 	bl	800212c <actBuzzerAction>
            pif_Delay1ms(wait);
 800c1c0:	79bb      	ldrb	r3, [r7, #6]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f005 f811 	bl	80111ec <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c1d0:	f7f5 ffac 	bl	800212c <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	73fb      	strb	r3, [r7, #15]
 800c1da:	7bfa      	ldrb	r2, [r7, #15]
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d3e7      	bcc.n	800c1b2 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c1e2:	203c      	movs	r0, #60	; 0x3c
 800c1e4:	f005 f802 	bl	80111ec <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	73bb      	strb	r3, [r7, #14]
 800c1ee:	7bba      	ldrb	r2, [r7, #14]
 800c1f0:	797b      	ldrb	r3, [r7, #5]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d3da      	bcc.n	800c1ac <blinkLED+0x18>
    }
}
 800c1f6:	bf00      	nop
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <annexCode>:

void annexCode(void)
{
 800c200:	b590      	push	{r4, r7, lr}
 800c202:	b08b      	sub	sp, #44	; 0x2c
 800c204:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c206:	4b98      	ldr	r3, [pc, #608]	; (800c468 <annexCode+0x268>)
 800c208:	7c1b      	ldrb	r3, [r3, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d12e      	bne.n	800c26c <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c20e:	4b97      	ldr	r3, [pc, #604]	; (800c46c <annexCode+0x26c>)
 800c210:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c214:	461a      	mov	r2, r3
 800c216:	4b96      	ldr	r3, [pc, #600]	; (800c470 <annexCode+0x270>)
 800c218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c21a:	429a      	cmp	r2, r3
 800c21c:	da02      	bge.n	800c224 <annexCode+0x24>
            prop2 = 100;
 800c21e:	2364      	movs	r3, #100	; 0x64
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e07b      	b.n	800c31c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c224:	4b91      	ldr	r3, [pc, #580]	; (800c46c <annexCode+0x26c>)
 800c226:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c22a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c22e:	da16      	bge.n	800c25e <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c230:	4b8f      	ldr	r3, [pc, #572]	; (800c470 <annexCode+0x270>)
 800c232:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c236:	461a      	mov	r2, r3
 800c238:	4b8c      	ldr	r3, [pc, #560]	; (800c46c <annexCode+0x26c>)
 800c23a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c23e:	4619      	mov	r1, r3
 800c240:	4b8b      	ldr	r3, [pc, #556]	; (800c470 <annexCode+0x270>)
 800c242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	fb03 f202 	mul.w	r2, r3, r2
 800c24a:	4b89      	ldr	r3, [pc, #548]	; (800c470 <annexCode+0x270>)
 800c24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c24e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c252:	fb92 f3f3 	sdiv	r3, r2, r3
 800c256:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	e05e      	b.n	800c31c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c25e:	4b84      	ldr	r3, [pc, #528]	; (800c470 <annexCode+0x270>)
 800c260:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c264:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c268:	61bb      	str	r3, [r7, #24]
 800c26a:	e057      	b.n	800c31c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c26c:	2380      	movs	r3, #128	; 0x80
 800c26e:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c270:	4b7e      	ldr	r3, [pc, #504]	; (800c46c <annexCode+0x26c>)
 800c272:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c276:	461a      	mov	r2, r3
 800c278:	4b7d      	ldr	r3, [pc, #500]	; (800c470 <annexCode+0x270>)
 800c27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c27c:	429a      	cmp	r2, r3
 800c27e:	da02      	bge.n	800c286 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	61bb      	str	r3, [r7, #24]
 800c284:	e028      	b.n	800c2d8 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c286:	4b7b      	ldr	r3, [pc, #492]	; (800c474 <annexCode+0x274>)
 800c288:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c28c:	461a      	mov	r2, r3
 800c28e:	4b78      	ldr	r3, [pc, #480]	; (800c470 <annexCode+0x270>)
 800c290:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c294:	429a      	cmp	r2, r3
 800c296:	dd1f      	ble.n	800c2d8 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c298:	4b76      	ldr	r3, [pc, #472]	; (800c474 <annexCode+0x274>)
 800c29a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c29e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c2a2:	da12      	bge.n	800c2ca <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c2a4:	4b72      	ldr	r3, [pc, #456]	; (800c470 <annexCode+0x270>)
 800c2a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4b71      	ldr	r3, [pc, #452]	; (800c474 <annexCode+0x274>)
 800c2ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4b6e      	ldr	r3, [pc, #440]	; (800c470 <annexCode+0x270>)
 800c2b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c2ba:	1acb      	subs	r3, r1, r3
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	125b      	asrs	r3, r3, #9
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	e006      	b.n	800c2d8 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c2ca:	4b69      	ldr	r3, [pc, #420]	; (800c470 <annexCode+0x270>)
 800c2cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	1a9b      	subs	r3, r3, r2
 800c2d6:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c2d8:	4b67      	ldr	r3, [pc, #412]	; (800c478 <annexCode+0x278>)
 800c2da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2de:	2b14      	cmp	r3, #20
 800c2e0:	dd12      	ble.n	800c308 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c2e2:	4b63      	ldr	r3, [pc, #396]	; (800c470 <annexCode+0x270>)
 800c2e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4b64      	ldr	r3, [pc, #400]	; (800c47c <annexCode+0x27c>)
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4b61      	ldr	r3, [pc, #388]	; (800c478 <annexCode+0x278>)
 800c2f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2f6:	428b      	cmp	r3, r1
 800c2f8:	bfa8      	it	ge
 800c2fa:	460b      	movge	r3, r1
 800c2fc:	fb02 f303 	mul.w	r3, r2, r3
 800c300:	121b      	asrs	r3, r3, #8
 800c302:	69ba      	ldr	r2, [r7, #24]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c308:	4b59      	ldr	r3, [pc, #356]	; (800c470 <annexCode+0x270>)
 800c30a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c30e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	4293      	cmp	r3, r2
 800c316:	bfb8      	it	lt
 800c318:	4613      	movlt	r3, r2
 800c31a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c31c:	2300      	movs	r3, #0
 800c31e:	623b      	str	r3, [r7, #32]
 800c320:	e131      	b.n	800c586 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c322:	4a52      	ldr	r2, [pc, #328]	; (800c46c <annexCode+0x26c>)
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c32a:	461a      	mov	r2, r3
 800c32c:	4b54      	ldr	r3, [pc, #336]	; (800c480 <annexCode+0x280>)
 800c32e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c338:	dd18      	ble.n	800c36c <annexCode+0x16c>
 800c33a:	4a4c      	ldr	r2, [pc, #304]	; (800c46c <annexCode+0x26c>)
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c342:	461a      	mov	r2, r3
 800c344:	4b4e      	ldr	r3, [pc, #312]	; (800c480 <annexCode+0x280>)
 800c346:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c350:	da0c      	bge.n	800c36c <annexCode+0x16c>
 800c352:	4a46      	ldr	r2, [pc, #280]	; (800c46c <annexCode+0x26c>)
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c35a:	461a      	mov	r2, r3
 800c35c:	4b48      	ldr	r3, [pc, #288]	; (800c480 <annexCode+0x280>)
 800c35e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfb8      	it	lt
 800c368:	425b      	neglt	r3, r3
 800c36a:	e001      	b.n	800c370 <annexCode+0x170>
 800c36c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d063      	beq.n	800c440 <annexCode+0x240>
            if (cfg.deadband) {
 800c378:	4b3d      	ldr	r3, [pc, #244]	; (800c470 <annexCode+0x270>)
 800c37a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d010      	beq.n	800c3a4 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c382:	4b3b      	ldr	r3, [pc, #236]	; (800c470 <annexCode+0x270>)
 800c384:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c388:	461a      	mov	r2, r3
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	4293      	cmp	r3, r2
 800c38e:	dd07      	ble.n	800c3a0 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c390:	4b37      	ldr	r3, [pc, #220]	; (800c470 <annexCode+0x270>)
 800c392:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c396:	461a      	mov	r2, r3
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	627b      	str	r3, [r7, #36]	; 0x24
 800c39e:	e001      	b.n	800c3a4 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	4a37      	ldr	r2, [pc, #220]	; (800c484 <annexCode+0x284>)
 800c3a8:	fb82 1203 	smull	r1, r2, r2, r3
 800c3ac:	1152      	asrs	r2, r2, #5
 800c3ae:	17db      	asrs	r3, r3, #31
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c3b4:	4a34      	ldr	r2, [pc, #208]	; (800c488 <annexCode+0x288>)
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c3c4:	fb03 f101 	mul.w	r1, r3, r1
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	440b      	add	r3, r1
 800c3cc:	6979      	ldr	r1, [r7, #20]
 800c3ce:	3101      	adds	r1, #1
 800c3d0:	482d      	ldr	r0, [pc, #180]	; (800c488 <annexCode+0x288>)
 800c3d2:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	482b      	ldr	r0, [pc, #172]	; (800c488 <annexCode+0x288>)
 800c3da:	6979      	ldr	r1, [r7, #20]
 800c3dc:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c3e0:	1a61      	subs	r1, r4, r1
 800c3e2:	fb01 f303 	mul.w	r3, r1, r3
 800c3e6:	4927      	ldr	r1, [pc, #156]	; (800c484 <annexCode+0x284>)
 800c3e8:	fb81 0103 	smull	r0, r1, r1, r3
 800c3ec:	1149      	asrs	r1, r1, #5
 800c3ee:	17db      	asrs	r3, r3, #31
 800c3f0:	1acb      	subs	r3, r1, r3
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	b219      	sxth	r1, r3
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <annexCode+0x274>)
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c402:	4a1b      	ldr	r2, [pc, #108]	; (800c470 <annexCode+0x270>)
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	4413      	add	r3, r2
 800c408:	3323      	adds	r3, #35	; 0x23
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	fb02 f303 	mul.w	r3, r2, r3
 800c414:	4a1d      	ldr	r2, [pc, #116]	; (800c48c <annexCode+0x28c>)
 800c416:	fb82 1203 	smull	r1, r2, r2, r3
 800c41a:	1152      	asrs	r2, r2, #5
 800c41c:	17db      	asrs	r3, r3, #31
 800c41e:	1a9b      	subs	r3, r3, r2
 800c420:	3364      	adds	r3, #100	; 0x64
 800c422:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	b29b      	uxth	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	fb02 f303 	mul.w	r3, r2, r3
 800c430:	4a14      	ldr	r2, [pc, #80]	; (800c484 <annexCode+0x284>)
 800c432:	fb82 1203 	smull	r1, r2, r2, r3
 800c436:	1152      	asrs	r2, r2, #5
 800c438:	17db      	asrs	r3, r3, #31
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	61fb      	str	r3, [r7, #28]
 800c43e:	e04a      	b.n	800c4d6 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <annexCode+0x270>)
 800c442:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d024      	beq.n	800c494 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <annexCode+0x270>)
 800c44c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c450:	461a      	mov	r2, r3
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	4293      	cmp	r3, r2
 800c456:	dd1b      	ble.n	800c490 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <annexCode+0x270>)
 800c45a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c45e:	461a      	mov	r2, r3
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
 800c466:	e015      	b.n	800c494 <annexCode+0x294>
 800c468:	2000169c 	.word	0x2000169c
 800c46c:	200016d4 	.word	0x200016d4
 800c470:	20000e08 	.word	0x20000e08
 800c474:	200016f8 	.word	0x200016f8
 800c478:	20001444 	.word	0x20001444
 800c47c:	20000056 	.word	0x20000056
 800c480:	2000089c 	.word	0x2000089c
 800c484:	51eb851f 	.word	0x51eb851f
 800c488:	20001700 	.word	0x20001700
 800c48c:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c490:	2300      	movs	r3, #0
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c494:	4ba0      	ldr	r3, [pc, #640]	; (800c718 <annexCode+0x518>)
 800c496:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c49a:	425b      	negs	r3, r3
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	fb12 f303 	smulbb	r3, r2, r3
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	b219      	sxth	r1, r3
 800c4aa:	4a9c      	ldr	r2, [pc, #624]	; (800c71c <annexCode+0x51c>)
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c4b2:	4b9b      	ldr	r3, [pc, #620]	; (800c720 <annexCode+0x520>)
 800c4b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	bfb8      	it	lt
 800c4c0:	425b      	neglt	r3, r3
 800c4c2:	fb02 f303 	mul.w	r3, r2, r3
 800c4c6:	4a97      	ldr	r2, [pc, #604]	; (800c724 <annexCode+0x524>)
 800c4c8:	fb82 1203 	smull	r1, r2, r2, r3
 800c4cc:	1152      	asrs	r2, r2, #5
 800c4ce:	17db      	asrs	r3, r3, #31
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	3364      	adds	r3, #100	; 0x64
 800c4d4:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c4d6:	4a92      	ldr	r2, [pc, #584]	; (800c720 <annexCode+0x520>)
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	4413      	add	r3, r2
 800c4dc:	3301      	adds	r3, #1
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
 800c4e8:	4a8f      	ldr	r2, [pc, #572]	; (800c728 <annexCode+0x528>)
 800c4ea:	fb82 1203 	smull	r1, r2, r2, r3
 800c4ee:	1152      	asrs	r2, r2, #5
 800c4f0:	17db      	asrs	r3, r3, #31
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	b2d9      	uxtb	r1, r3
 800c4f6:	4a8d      	ldr	r2, [pc, #564]	; (800c72c <annexCode+0x52c>)
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c500:	4a87      	ldr	r2, [pc, #540]	; (800c720 <annexCode+0x520>)
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	4413      	add	r3, r2
 800c506:	330b      	adds	r3, #11
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
 800c512:	4a85      	ldr	r2, [pc, #532]	; (800c728 <annexCode+0x528>)
 800c514:	fb82 1203 	smull	r1, r2, r2, r3
 800c518:	1152      	asrs	r2, r2, #5
 800c51a:	17db      	asrs	r3, r3, #31
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	b2d9      	uxtb	r1, r3
 800c520:	4a83      	ldr	r2, [pc, #524]	; (800c730 <annexCode+0x530>)
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	4413      	add	r3, r2
 800c526:	460a      	mov	r2, r1
 800c528:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c52a:	4a7d      	ldr	r2, [pc, #500]	; (800c720 <annexCode+0x520>)
 800c52c:	6a3b      	ldr	r3, [r7, #32]
 800c52e:	4413      	add	r3, r2
 800c530:	3315      	adds	r3, #21
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	fb02 f303 	mul.w	r3, r2, r3
 800c53c:	4a7a      	ldr	r2, [pc, #488]	; (800c728 <annexCode+0x528>)
 800c53e:	fb82 1203 	smull	r1, r2, r2, r3
 800c542:	1152      	asrs	r2, r2, #5
 800c544:	17db      	asrs	r3, r3, #31
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	b2d9      	uxtb	r1, r3
 800c54a:	4a7a      	ldr	r2, [pc, #488]	; (800c734 <annexCode+0x534>)
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	4413      	add	r3, r2
 800c550:	460a      	mov	r2, r1
 800c552:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c554:	4a78      	ldr	r2, [pc, #480]	; (800c738 <annexCode+0x538>)
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c55c:	461a      	mov	r2, r3
 800c55e:	4b6e      	ldr	r3, [pc, #440]	; (800c718 <annexCode+0x518>)
 800c560:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c564:	429a      	cmp	r2, r3
 800c566:	da0b      	bge.n	800c580 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c568:	4a6c      	ldr	r2, [pc, #432]	; (800c71c <annexCode+0x51c>)
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c570:	b29b      	uxth	r3, r3
 800c572:	425b      	negs	r3, r3
 800c574:	b29b      	uxth	r3, r3
 800c576:	b219      	sxth	r1, r3
 800c578:	4a68      	ldr	r2, [pc, #416]	; (800c71c <annexCode+0x51c>)
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	3301      	adds	r3, #1
 800c584:	623b      	str	r3, [r7, #32]
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	f77f aeca 	ble.w	800c322 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c58e:	4b6a      	ldr	r3, [pc, #424]	; (800c738 <annexCode+0x538>)
 800c590:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c594:	4618      	mov	r0, r3
 800c596:	4b60      	ldr	r3, [pc, #384]	; (800c718 <annexCode+0x518>)
 800c598:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c59c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7f7 fbd7 	bl	8003d54 <constrain>
 800c5a6:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c5a8:	4b5b      	ldr	r3, [pc, #364]	; (800c718 <annexCode+0x518>)
 800c5aa:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5ba:	fb02 f303 	mul.w	r3, r2, r3
 800c5be:	4a56      	ldr	r2, [pc, #344]	; (800c718 <annexCode+0x518>)
 800c5c0:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c5c4:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c5c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	4a55      	ldr	r2, [pc, #340]	; (800c728 <annexCode+0x528>)
 800c5d2:	fb82 1203 	smull	r1, r2, r2, r3
 800c5d6:	1152      	asrs	r2, r2, #5
 800c5d8:	17db      	asrs	r3, r3, #31
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c5de:	4a57      	ldr	r2, [pc, #348]	; (800c73c <annexCode+0x53c>)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c5ee:	fb03 f101 	mul.w	r1, r3, r1
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	440b      	add	r3, r1
 800c5f6:	6979      	ldr	r1, [r7, #20]
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	4850      	ldr	r0, [pc, #320]	; (800c73c <annexCode+0x53c>)
 800c5fc:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c600:	460c      	mov	r4, r1
 800c602:	484e      	ldr	r0, [pc, #312]	; (800c73c <annexCode+0x53c>)
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c60a:	1a61      	subs	r1, r4, r1
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
 800c610:	4945      	ldr	r1, [pc, #276]	; (800c728 <annexCode+0x528>)
 800c612:	fb81 0103 	smull	r0, r1, r1, r3
 800c616:	1149      	asrs	r1, r1, #5
 800c618:	17db      	asrs	r3, r3, #31
 800c61a:	1acb      	subs	r3, r1, r3
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	4413      	add	r3, r2
 800c620:	b29b      	uxth	r3, r3
 800c622:	b21a      	sxth	r2, r3
 800c624:	4b3d      	ldr	r3, [pc, #244]	; (800c71c <annexCode+0x51c>)
 800c626:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c628:	4b45      	ldr	r3, [pc, #276]	; (800c740 <annexCode+0x540>)
 800c62a:	7a5b      	ldrb	r3, [r3, #9]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d06b      	beq.n	800c708 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c630:	4b44      	ldr	r3, [pc, #272]	; (800c744 <annexCode+0x544>)
 800c632:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c636:	461a      	mov	r2, r3
 800c638:	4b43      	ldr	r3, [pc, #268]	; (800c748 <annexCode+0x548>)
 800c63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	4618      	mov	r0, r3
 800c642:	f7f3 ff23 	bl	800048c <__aeabi_i2d>
 800c646:	a332      	add	r3, pc, #200	; (adr r3, 800c710 <annexCode+0x510>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 ff88 	bl	8000560 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4610      	mov	r0, r2
 800c656:	4619      	mov	r1, r3
 800c658:	f04f 0200 	mov.w	r2, #0
 800c65c:	4b3b      	ldr	r3, [pc, #236]	; (800c74c <annexCode+0x54c>)
 800c65e:	f7f4 f8a9 	bl	80007b4 <__aeabi_ddiv>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4610      	mov	r0, r2
 800c668:	4619      	mov	r1, r3
 800c66a:	f7f4 fa5b 	bl	8000b24 <__aeabi_d2f>
 800c66e:	4603      	mov	r3, r0
 800c670:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c672:	ed97 0a04 	vldr	s0, [r7, #16]
 800c676:	f016 fc13 	bl	8022ea0 <cosf>
 800c67a:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c67e:	ed97 0a04 	vldr	s0, [r7, #16]
 800c682:	f016 fc91 	bl	8022fa8 <sinf>
 800c686:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c68a:	4b24      	ldr	r3, [pc, #144]	; (800c71c <annexCode+0x51c>)
 800c68c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c690:	ee07 3a90 	vmov	s15, r3
 800c694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c698:	edd7 7a03 	vldr	s15, [r7, #12]
 800c69c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a0:	4b1e      	ldr	r3, [pc, #120]	; (800c71c <annexCode+0x51c>)
 800c6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c6ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6be:	ee17 3a90 	vmov	r3, s15
 800c6c2:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c6c4:	4b15      	ldr	r3, [pc, #84]	; (800c71c <annexCode+0x51c>)
 800c6c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <annexCode+0x51c>)
 800c6dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6e0:	ee07 3a90 	vmov	s15, r3
 800c6e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c6e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6f8:	ee17 3a90 	vmov	r3, s15
 800c6fc:	b21a      	sxth	r2, r3
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <annexCode+0x51c>)
 800c700:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c702:	4a06      	ldr	r2, [pc, #24]	; (800c71c <annexCode+0x51c>)
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	8053      	strh	r3, [r2, #2]
    }
}
 800c708:	bf00      	nop
 800c70a:	372c      	adds	r7, #44	; 0x2c
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd90      	pop	{r4, r7, pc}
 800c710:	54442d18 	.word	0x54442d18
 800c714:	400921fb 	.word	0x400921fb
 800c718:	2000089c 	.word	0x2000089c
 800c71c:	200016f8 	.word	0x200016f8
 800c720:	20000e08 	.word	0x20000e08
 800c724:	10624dd3 	.word	0x10624dd3
 800c728:	51eb851f 	.word	0x51eb851f
 800c72c:	20001730 	.word	0x20001730
 800c730:	20001734 	.word	0x20001734
 800c734:	20001738 	.word	0x20001738
 800c738:	200016d4 	.word	0x200016d4
 800c73c:	20001710 	.word	0x20001710
 800c740:	2000169c 	.word	0x2000169c
 800c744:	20001968 	.word	0x20001968
 800c748:	200016be 	.word	0x200016be
 800c74c:	40668000 	.word	0x40668000

0800c750 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c75a:	2002      	movs	r0, #2
 800c75c:	f7fa fc5c 	bl	8007018 <feature>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80bb 	beq.w	800c8de <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c768:	4b91      	ldr	r3, [pc, #580]	; (800c9b0 <taskLedState+0x260>)
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	461a      	mov	r2, r3
 800c76e:	4b91      	ldr	r3, [pc, #580]	; (800c9b4 <taskLedState+0x264>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4413      	add	r3, r2
 800c774:	4a8f      	ldr	r2, [pc, #572]	; (800c9b4 <taskLedState+0x264>)
 800c776:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c778:	4b8f      	ldr	r3, [pc, #572]	; (800c9b8 <taskLedState+0x268>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	4b8d      	ldr	r3, [pc, #564]	; (800c9b8 <taskLedState+0x268>)
 800c782:	701a      	strb	r2, [r3, #0]
 800c784:	4b8c      	ldr	r3, [pc, #560]	; (800c9b8 <taskLedState+0x268>)
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	4b8c      	ldr	r3, [pc, #560]	; (800c9bc <taskLedState+0x26c>)
 800c78a:	fba3 1302 	umull	r1, r3, r3, r2
 800c78e:	0899      	lsrs	r1, r3, #2
 800c790:	460b      	mov	r3, r1
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	440b      	add	r3, r1
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f040 808b 	bne.w	800c8b8 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c7a2:	4b87      	ldr	r3, [pc, #540]	; (800c9c0 <taskLedState+0x270>)
 800c7a4:	ed93 7a00 	vldr	s14, [r3]
 800c7a8:	4b85      	ldr	r3, [pc, #532]	; (800c9c0 <taskLedState+0x270>)
 800c7aa:	edd3 6a00 	vldr	s13, [r3]
 800c7ae:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c7b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c7b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ba:	4b81      	ldr	r3, [pc, #516]	; (800c9c0 <taskLedState+0x270>)
 800c7bc:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c7c0:	f7f4 fd04 	bl	80011cc <actGetBatteryVoltage>
 800c7c4:	eeb0 7a40 	vmov.f32	s14, s0
 800c7c8:	4b7e      	ldr	r3, [pc, #504]	; (800c9c4 <taskLedState+0x274>)
 800c7ca:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7da:	4b79      	ldr	r3, [pc, #484]	; (800c9c0 <taskLedState+0x270>)
 800c7dc:	edd3 7a00 	vldr	s15, [r3]
 800c7e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7e4:	4b76      	ldr	r3, [pc, #472]	; (800c9c0 <taskLedState+0x270>)
 800c7e6:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c7ea:	4b75      	ldr	r3, [pc, #468]	; (800c9c0 <taskLedState+0x270>)
 800c7ec:	ed93 7a00 	vldr	s14, [r3]
 800c7f0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c7f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fc:	ee17 3a90 	vmov	r3, s15
 800c800:	b29a      	uxth	r2, r3
 800c802:	4b71      	ldr	r3, [pc, #452]	; (800c9c8 <taskLedState+0x278>)
 800c804:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c806:	4b6f      	ldr	r3, [pc, #444]	; (800c9c4 <taskLedState+0x274>)
 800c808:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d053      	beq.n	800c8b8 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c810:	4b6e      	ldr	r3, [pc, #440]	; (800c9cc <taskLedState+0x27c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	da00      	bge.n	800c81a <taskLedState+0xca>
 800c818:	3307      	adds	r3, #7
 800c81a:	10db      	asrs	r3, r3, #3
 800c81c:	425b      	negs	r3, r3
 800c81e:	461a      	mov	r2, r3
 800c820:	4b6a      	ldr	r3, [pc, #424]	; (800c9cc <taskLedState+0x27c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4413      	add	r3, r2
 800c826:	4a69      	ldr	r2, [pc, #420]	; (800c9cc <taskLedState+0x27c>)
 800c828:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c82a:	f7f4 fced 	bl	8001208 <actGetBatteryCurrent>
 800c82e:	4603      	mov	r3, r0
 800c830:	4a64      	ldr	r2, [pc, #400]	; (800c9c4 <taskLedState+0x274>)
 800c832:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c83c:	fb02 f303 	mul.w	r3, r2, r3
 800c840:	4a60      	ldr	r2, [pc, #384]	; (800c9c4 <taskLedState+0x274>)
 800c842:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c846:	fbb3 f3f2 	udiv	r3, r3, r2
 800c84a:	4a60      	ldr	r2, [pc, #384]	; (800c9cc <taskLedState+0x27c>)
 800c84c:	6812      	ldr	r2, [r2, #0]
 800c84e:	4413      	add	r3, r2
 800c850:	461a      	mov	r2, r3
 800c852:	4b5e      	ldr	r3, [pc, #376]	; (800c9cc <taskLedState+0x27c>)
 800c854:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c856:	4b5d      	ldr	r3, [pc, #372]	; (800c9cc <taskLedState+0x27c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	da00      	bge.n	800c860 <taskLedState+0x110>
 800c85e:	3307      	adds	r3, #7
 800c860:	10db      	asrs	r3, r3, #3
 800c862:	461a      	mov	r2, r3
 800c864:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <taskLedState+0x280>)
 800c866:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c868:	4b59      	ldr	r3, [pc, #356]	; (800c9d0 <taskLedState+0x280>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a51      	ldr	r2, [pc, #324]	; (800c9b4 <taskLedState+0x264>)
 800c86e:	6812      	ldr	r2, [r2, #0]
 800c870:	fb02 f303 	mul.w	r3, r2, r3
 800c874:	4a57      	ldr	r2, [pc, #348]	; (800c9d4 <taskLedState+0x284>)
 800c876:	fb82 1203 	smull	r1, r2, r2, r3
 800c87a:	1192      	asrs	r2, r2, #6
 800c87c:	17db      	asrs	r3, r3, #31
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	17da      	asrs	r2, r3, #31
 800c882:	461c      	mov	r4, r3
 800c884:	4615      	mov	r5, r2
 800c886:	4b54      	ldr	r3, [pc, #336]	; (800c9d8 <taskLedState+0x288>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	eb14 0802 	adds.w	r8, r4, r2
 800c890:	eb45 0903 	adc.w	r9, r5, r3
 800c894:	4b50      	ldr	r3, [pc, #320]	; (800c9d8 <taskLedState+0x288>)
 800c896:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c89a:	4b4f      	ldr	r3, [pc, #316]	; (800c9d8 <taskLedState+0x288>)
 800c89c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8a0:	4a4e      	ldr	r2, [pc, #312]	; (800c9dc <taskLedState+0x28c>)
 800c8a2:	f04f 0300 	mov.w	r3, #0
 800c8a6:	f7f4 fa9b 	bl	8000de0 <__aeabi_ldivmod>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4b4c      	ldr	r3, [pc, #304]	; (800c9e0 <taskLedState+0x290>)
 800c8b0:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c8b2:	4b40      	ldr	r3, [pc, #256]	; (800c9b4 <taskLedState+0x264>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c8b8:	4b43      	ldr	r3, [pc, #268]	; (800c9c8 <taskLedState+0x278>)
 800c8ba:	881a      	ldrh	r2, [r3, #0]
 800c8bc:	4b49      	ldr	r3, [pc, #292]	; (800c9e4 <taskLedState+0x294>)
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d803      	bhi.n	800c8cc <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	f7f7 fbd3 	bl	8004070 <buzzer>
 800c8ca:	e008      	b.n	800c8de <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c8cc:	4b3e      	ldr	r3, [pc, #248]	; (800c9c8 <taskLedState+0x278>)
 800c8ce:	881a      	ldrh	r2, [r3, #0]
 800c8d0:	4b45      	ldr	r3, [pc, #276]	; (800c9e8 <taskLedState+0x298>)
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d802      	bhi.n	800c8de <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c8d8:	2002      	movs	r0, #2
 800c8da:	f7f7 fbc9 	bl	8004070 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c8de:	f7f7 fcb3 	bl	8004248 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c8e2:	f004 fb8b 	bl	8010ffc <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c8e6:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <taskLedState+0x29c>)
 800c8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800c8f0:	4b3e      	ldr	r3, [pc, #248]	; (800c9ec <taskLedState+0x29c>)
 800c8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f6:	493e      	ldr	r1, [pc, #248]	; (800c9f0 <taskLedState+0x2a0>)
 800c8f8:	483c      	ldr	r0, [pc, #240]	; (800c9ec <taskLedState+0x29c>)
 800c8fa:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c8fc:	4b3d      	ldr	r3, [pc, #244]	; (800c9f4 <taskLedState+0x2a4>)
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d005      	beq.n	800c910 <taskLedState+0x1c0>
 800c904:	2002      	movs	r0, #2
 800c906:	f7fa fb3f 	bl	8006f88 <sensors>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <taskLedState+0x1c8>
 800c910:	4b39      	ldr	r3, [pc, #228]	; (800c9f8 <taskLedState+0x2a8>)
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <taskLedState+0x1ce>
        actLed0Toggle();
 800c918:	f7f5 fbc6 	bl	80020a8 <actLed0Toggle>
 800c91c:	e00d      	b.n	800c93a <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800c91e:	4b37      	ldr	r3, [pc, #220]	; (800c9fc <taskLedState+0x2ac>)
 800c920:	789b      	ldrb	r3, [r3, #2]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <taskLedState+0x1dc>
            actLed0State(OFF);
 800c926:	2000      	movs	r0, #0
 800c928:	f7f5 fba8 	bl	800207c <actLed0State>
        if (f.ARMED)
 800c92c:	4b33      	ldr	r3, [pc, #204]	; (800c9fc <taskLedState+0x2ac>)
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <taskLedState+0x1ea>
            actLed0State(ON);
 800c934:	2001      	movs	r0, #1
 800c936:	f7f5 fba1 	bl	800207c <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c93a:	4b31      	ldr	r3, [pc, #196]	; (800ca00 <taskLedState+0x2b0>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d006      	beq.n	800c950 <taskLedState+0x200>
 800c942:	4b2f      	ldr	r3, [pc, #188]	; (800ca00 <taskLedState+0x2b0>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	3b01      	subs	r3, #1
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	4b2d      	ldr	r3, [pc, #180]	; (800ca00 <taskLedState+0x2b0>)
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	e00f      	b.n	800c970 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800c950:	4b2a      	ldr	r3, [pc, #168]	; (800c9fc <taskLedState+0x2ac>)
 800c952:	7b5b      	ldrb	r3, [r3, #13]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d105      	bne.n	800c964 <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c958:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <taskLedState+0x2ac>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c95e:	f7f5 fba3 	bl	80020a8 <actLed0Toggle>
 800c962:	e002      	b.n	800c96a <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <taskLedState+0x2ac>)
 800c966:	2201      	movs	r2, #1
 800c968:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c96a:	4b25      	ldr	r3, [pc, #148]	; (800ca00 <taskLedState+0x2b0>)
 800c96c:	2209      	movs	r2, #9
 800c96e:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c970:	2020      	movs	r0, #32
 800c972:	f7fa fb09 	bl	8006f88 <sensors>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c97c:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <taskLedState+0x2b4>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d006      	beq.n	800c992 <taskLedState+0x242>
 800c984:	4b1f      	ldr	r3, [pc, #124]	; (800ca04 <taskLedState+0x2b4>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	3b01      	subs	r3, #1
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	4b1d      	ldr	r3, [pc, #116]	; (800ca04 <taskLedState+0x2b4>)
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	e008      	b.n	800c9a4 <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c992:	4b1d      	ldr	r3, [pc, #116]	; (800ca08 <taskLedState+0x2b8>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b04      	cmp	r3, #4
 800c998:	d901      	bls.n	800c99e <taskLedState+0x24e>
 800c99a:	f7f5 fbb1 	bl	8002100 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c99e:	4b19      	ldr	r3, [pc, #100]	; (800ca04 <taskLedState+0x2b4>)
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c9b0:	200016bc 	.word	0x200016bc
 800c9b4:	20001860 	.word	0x20001860
 800c9b8:	20001864 	.word	0x20001864
 800c9bc:	aaaaaaab 	.word	0xaaaaaaab
 800c9c0:	20001868 	.word	0x20001868
 800c9c4:	2000089c 	.word	0x2000089c
 800c9c8:	200016c0 	.word	0x200016c0
 800c9cc:	2000186c 	.word	0x2000186c
 800c9d0:	200016c4 	.word	0x200016c4
 800c9d4:	10624dd3 	.word	0x10624dd3
 800c9d8:	20001870 	.word	0x20001870
 800c9dc:	00057e40 	.word	0x00057e40
 800c9e0:	200016c8 	.word	0x200016c8
 800c9e4:	20001840 	.word	0x20001840
 800c9e8:	2000183e 	.word	0x2000183e
 800c9ec:	20000060 	.word	0x20000060
 800c9f0:	200016cc 	.word	0x200016cc
 800c9f4:	20001962 	.word	0x20001962
 800c9f8:	20001966 	.word	0x20001966
 800c9fc:	2000169c 	.word	0x2000169c
 800ca00:	20001878 	.word	0x20001878
 800ca04:	20001879 	.word	0x20001879
 800ca08:	20001780 	.word	0x20001780

0800ca0c <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	4a05      	ldr	r2, [pc, #20]	; (800ca30 <pwmReadRawRC+0x24>)
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f5 fabd 	bl	8001fa0 <actPwmRead>
 800ca26:	4603      	mov	r3, r0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	2000089c 	.word	0x2000089c

0800ca34 <computeRC>:

void computeRC(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800ca3a:	2008      	movs	r0, #8
 800ca3c:	f7fa faec 	bl	8007018 <feature>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d019      	beq.n	800ca7a <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
 800ca4a:	e00e      	b.n	800ca6a <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800ca4c:	4b41      	ldr	r3, [pc, #260]	; (800cb54 <computeRC+0x120>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	4610      	mov	r0, r2
 800ca56:	4798      	blx	r3
 800ca58:	4603      	mov	r3, r0
 800ca5a:	b219      	sxth	r1, r3
 800ca5c:	4a3e      	ldr	r2, [pc, #248]	; (800cb58 <computeRC+0x124>)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3301      	adds	r3, #1
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	4b3c      	ldr	r3, [pc, #240]	; (800cb5c <computeRC+0x128>)
 800ca6c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800ca70:	461a      	mov	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4293      	cmp	r3, r2
 800ca76:	dbe9      	blt.n	800ca4c <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800ca78:	e068      	b.n	800cb4c <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	607b      	str	r3, [r7, #4]
 800ca7e:	e059      	b.n	800cb34 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800ca80:	4b34      	ldr	r3, [pc, #208]	; (800cb54 <computeRC+0x120>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	b2d2      	uxtb	r2, r2
 800ca88:	4610      	mov	r0, r2
 800ca8a:	4798      	blx	r3
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800ca90:	89fb      	ldrh	r3, [r7, #14]
 800ca92:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d904      	bls.n	800caa4 <computeRC+0x70>
 800ca9a:	89fb      	ldrh	r3, [r7, #14]
 800ca9c:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d903      	bls.n	800caac <computeRC+0x78>
                capture = mcfg.midrc;
 800caa4:	4b2d      	ldr	r3, [pc, #180]	; (800cb5c <computeRC+0x128>)
 800caa6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800caaa:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800caac:	4b2c      	ldr	r3, [pc, #176]	; (800cb60 <computeRC+0x12c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	425a      	negs	r2, r3
 800cab2:	f003 0303 	and.w	r3, r3, #3
 800cab6:	f002 0203 	and.w	r2, r2, #3
 800caba:	bf58      	it	pl
 800cabc:	4253      	negpl	r3, r2
 800cabe:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800cac2:	4928      	ldr	r1, [pc, #160]	; (800cb64 <computeRC+0x130>)
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	0092      	lsls	r2, r2, #2
 800cac8:	4413      	add	r3, r2
 800caca:	4602      	mov	r2, r0
 800cacc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800cad0:	4a21      	ldr	r2, [pc, #132]	; (800cb58 <computeRC+0x124>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2100      	movs	r1, #0
 800cad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800cada:	2300      	movs	r3, #0
 800cadc:	60bb      	str	r3, [r7, #8]
 800cade:	e016      	b.n	800cb0e <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800cae0:	4a1d      	ldr	r2, [pc, #116]	; (800cb58 <computeRC+0x124>)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cae8:	b29a      	uxth	r2, r3
 800caea:	481e      	ldr	r0, [pc, #120]	; (800cb64 <computeRC+0x130>)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	0099      	lsls	r1, r3, #2
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	440b      	add	r3, r1
 800caf4:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	4413      	add	r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	b219      	sxth	r1, r3
 800cb00:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <computeRC+0x124>)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60bb      	str	r3, [r7, #8]
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b03      	cmp	r3, #3
 800cb12:	dde5      	ble.n	800cae0 <computeRC+0xac>
            rcData[chan] /= 4;
 800cb14:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <computeRC+0x124>)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da00      	bge.n	800cb22 <computeRC+0xee>
 800cb20:	3303      	adds	r3, #3
 800cb22:	109b      	asrs	r3, r3, #2
 800cb24:	b219      	sxth	r1, r3
 800cb26:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <computeRC+0x124>)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3301      	adds	r3, #1
 800cb32:	607b      	str	r3, [r7, #4]
 800cb34:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <computeRC+0x128>)
 800cb36:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	db9e      	blt.n	800ca80 <computeRC+0x4c>
        rcAverageIndex++;
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <computeRC+0x12c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3301      	adds	r3, #1
 800cb48:	4a05      	ldr	r2, [pc, #20]	; (800cb60 <computeRC+0x12c>)
 800cb4a:	6013      	str	r3, [r2, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	2000172c 	.word	0x2000172c
 800cb58:	200016d4 	.word	0x200016d4
 800cb5c:	2000089c 	.word	0x2000089c
 800cb60:	2000187c 	.word	0x2000187c
 800cb64:	20001880 	.word	0x20001880

0800cb68 <mwArm>:

static void mwArm(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800cb6c:	4b1b      	ldr	r3, [pc, #108]	; (800cbdc <mwArm+0x74>)
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d126      	bne.n	800cbc2 <mwArm+0x5a>
 800cb74:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <mwArm+0x78>)
 800cb76:	789b      	ldrb	r3, [r3, #2]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d022      	beq.n	800cbc2 <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800cb7c:	4b18      	ldr	r3, [pc, #96]	; (800cbe0 <mwArm+0x78>)
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d128      	bne.n	800cbd6 <mwArm+0x6e>
            f.ARMED = 1;
 800cb84:	4b16      	ldr	r3, [pc, #88]	; (800cbe0 <mwArm+0x78>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800cb8a:	4b16      	ldr	r3, [pc, #88]	; (800cbe4 <mwArm+0x7c>)
 800cb8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cb90:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <mwArm+0x80>)
 800cb92:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800cb94:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb98:	f7fa fa3e 	bl	8007018 <feature>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <mwArm+0x52>
 800cba2:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <mwArm+0x78>)
 800cba4:	7adb      	ldrb	r3, [r3, #11]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d007      	beq.n	800cbba <mwArm+0x52>
 800cbaa:	4b10      	ldr	r3, [pc, #64]	; (800cbec <mwArm+0x84>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d903      	bls.n	800cbba <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800cbb2:	2007      	movs	r0, #7
 800cbb4:	f7f7 fa5c 	bl	8004070 <buzzer>
        if (!f.ARMED) {         // arm now!
 800cbb8:	e00d      	b.n	800cbd6 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800cbba:	2006      	movs	r0, #6
 800cbbc:	f7f7 fa58 	bl	8004070 <buzzer>
        if (!f.ARMED) {         // arm now!
 800cbc0:	e009      	b.n	800cbd6 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800cbc2:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <mwArm+0x78>)
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d105      	bne.n	800cbd6 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800cbca:	2201      	movs	r2, #1
 800cbcc:	21ff      	movs	r1, #255	; 0xff
 800cbce:	2002      	movs	r0, #2
 800cbd0:	f7ff fae0 	bl	800c194 <blinkLED>
    }
}
 800cbd4:	e7ff      	b.n	800cbd6 <mwArm+0x6e>
 800cbd6:	bf00      	nop
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20001966 	.word	0x20001966
 800cbe0:	2000169c 	.word	0x2000169c
 800cbe4:	20001968 	.word	0x20001968
 800cbe8:	200016be 	.word	0x200016be
 800cbec:	20001780 	.word	0x20001780

0800cbf0 <mwDisarm>:

static void mwDisarm(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <mwDisarm+0x2c>)
 800cbf6:	785b      	ldrb	r3, [r3, #1]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00c      	beq.n	800cc16 <mwDisarm+0x26>
        f.ARMED = 0;
 800cbfc:	4b07      	ldr	r3, [pc, #28]	; (800cc1c <mwDisarm+0x2c>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800cc02:	2005      	movs	r0, #5
 800cc04:	f7f7 fa34 	bl	8004070 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800cc08:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <mwDisarm+0x30>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <mwDisarm+0x26>
            disarmTime = 0;
 800cc10:	4b03      	ldr	r3, [pc, #12]	; (800cc20 <mwDisarm+0x30>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]
    }
}
 800cc16:	bf00      	nop
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	2000169c 	.word	0x2000169c
 800cc20:	20001844 	.word	0x20001844

0800cc24 <mwVario>:

static void mwVario(void)
{
 800cc24:	b480      	push	{r7}
 800cc26:	af00      	add	r7, sp, #0

}
 800cc28:	bf00      	nop
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
	...

0800cc34 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08e      	sub	sp, #56	; 0x38
 800cc38:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc3e:	2300      	movs	r3, #0
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
 800cc42:	2300      	movs	r3, #0
 800cc44:	623b      	str	r3, [r7, #32]
 800cc46:	2300      	movs	r3, #0
 800cc48:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800cc4a:	4b91      	ldr	r3, [pc, #580]	; (800ce90 <pidMultiWii+0x25c>)
 800cc4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bfb8      	it	lt
 800cc54:	425b      	neglt	r3, r3
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	4b8d      	ldr	r3, [pc, #564]	; (800ce90 <pidMultiWii+0x25c>)
 800cc5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bfb8      	it	lt
 800cc62:	425b      	neglt	r3, r3
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4293      	cmp	r3, r2
 800cc68:	bf38      	it	cc
 800cc6a:	4613      	movcc	r3, r2
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cc70:	2300      	movs	r3, #0
 800cc72:	637b      	str	r3, [r7, #52]	; 0x34
 800cc74:	e189      	b.n	800cf8a <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800cc76:	4b87      	ldr	r3, [pc, #540]	; (800ce94 <pidMultiWii+0x260>)
 800cc78:	78db      	ldrb	r3, [r3, #3]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d103      	bne.n	800cc86 <pidMultiWii+0x52>
 800cc7e:	4b85      	ldr	r3, [pc, #532]	; (800ce94 <pidMultiWii+0x260>)
 800cc80:	791b      	ldrb	r3, [r3, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d060      	beq.n	800cd48 <pidMultiWii+0x114>
 800cc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	dc5d      	bgt.n	800cd48 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cc8c:	4a80      	ldr	r2, [pc, #512]	; (800ce90 <pidMultiWii+0x25c>)
 800cc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc90:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4980      	ldr	r1, [pc, #512]	; (800ce98 <pidMultiWii+0x264>)
 800cc98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc9a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cc9e:	4413      	add	r3, r2
 800cca0:	4a7e      	ldr	r2, [pc, #504]	; (800ce9c <pidMultiWii+0x268>)
 800cca2:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cca6:	4251      	negs	r1, r2
 800cca8:	4a7c      	ldr	r2, [pc, #496]	; (800ce9c <pidMultiWii+0x268>)
 800ccaa:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f7 f850 	bl	8003d54 <constrain>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	497a      	ldr	r1, [pc, #488]	; (800cea0 <pidMultiWii+0x26c>)
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	4978      	ldr	r1, [pc, #480]	; (800cea4 <pidMultiWii+0x270>)
 800ccc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc4:	3314      	adds	r3, #20
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	440b      	add	r3, r1
 800ccca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ccce:	4413      	add	r3, r2
 800ccd0:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800ccd2:	4b74      	ldr	r3, [pc, #464]	; (800cea4 <pidMultiWii+0x270>)
 800ccd4:	7a1b      	ldrb	r3, [r3, #8]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	fb02 f303 	mul.w	r3, r2, r3
 800ccde:	4a72      	ldr	r2, [pc, #456]	; (800cea8 <pidMultiWii+0x274>)
 800cce0:	fb82 1203 	smull	r1, r2, r2, r3
 800cce4:	1152      	asrs	r2, r2, #5
 800cce6:	17db      	asrs	r3, r3, #31
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800ccec:	4b6d      	ldr	r3, [pc, #436]	; (800cea4 <pidMultiWii+0x270>)
 800ccee:	7f1b      	ldrb	r3, [r3, #28]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	079b      	lsls	r3, r3, #30
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	1a99      	subs	r1, r3, r2
 800ccfc:	4b69      	ldr	r3, [pc, #420]	; (800cea4 <pidMultiWii+0x270>)
 800ccfe:	7f1b      	ldrb	r3, [r3, #28]
 800cd00:	461a      	mov	r2, r3
 800cd02:	4613      	mov	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	461a      	mov	r2, r3
 800cd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd0c:	f7f7 f822 	bl	8003d54 <constrain>
 800cd10:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cd12:	4a66      	ldr	r2, [pc, #408]	; (800ceac <pidMultiWii+0x278>)
 800cd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd22:	4963      	ldr	r1, [pc, #396]	; (800ceb0 <pidMultiWii+0x27c>)
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f7 f815 	bl	8003d54 <constrain>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	495f      	ldr	r1, [pc, #380]	; (800ceac <pidMultiWii+0x278>)
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cd34:	4a5d      	ldr	r2, [pc, #372]	; (800ceac <pidMultiWii+0x278>)
 800cd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3c:	4a59      	ldr	r2, [pc, #356]	; (800cea4 <pidMultiWii+0x270>)
 800cd3e:	7c92      	ldrb	r2, [r2, #18]
 800cd40:	fb02 f303 	mul.w	r3, r2, r3
 800cd44:	131b      	asrs	r3, r3, #12
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cd48:	4b52      	ldr	r3, [pc, #328]	; (800ce94 <pidMultiWii+0x260>)
 800cd4a:	78db      	ldrb	r3, [r3, #3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d006      	beq.n	800cd5e <pidMultiWii+0x12a>
 800cd50:	4b50      	ldr	r3, [pc, #320]	; (800ce94 <pidMultiWii+0x260>)
 800cd52:	791b      	ldrb	r3, [r3, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <pidMultiWii+0x12a>
 800cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d15f      	bne.n	800ce1e <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cd5e:	4a4c      	ldr	r2, [pc, #304]	; (800ce90 <pidMultiWii+0x25c>)
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd66:	461a      	mov	r2, r3
 800cd68:	4613      	mov	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	011b      	lsls	r3, r3, #4
 800cd70:	4619      	mov	r1, r3
 800cd72:	4a4c      	ldr	r2, [pc, #304]	; (800cea4 <pidMultiWii+0x270>)
 800cd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd76:	4413      	add	r3, r2
 800cd78:	3301      	adds	r3, #1
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	fb91 f3f3 	sdiv	r3, r1, r3
 800cd80:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cd82:	4a4c      	ldr	r2, [pc, #304]	; (800ceb4 <pidMultiWii+0x280>)
 800cd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd86:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cd92:	4a3f      	ldr	r2, [pc, #252]	; (800ce90 <pidMultiWii+0x25c>)
 800cd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd96:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd9a:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cd9c:	4a46      	ldr	r2, [pc, #280]	; (800ceb8 <pidMultiWii+0x284>)
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	4413      	add	r3, r2
 800cda8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cdac:	4943      	ldr	r1, [pc, #268]	; (800cebc <pidMultiWii+0x288>)
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f6 ffd0 	bl	8003d54 <constrain>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4940      	ldr	r1, [pc, #256]	; (800ceb8 <pidMultiWii+0x284>)
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cdbe:	4a3d      	ldr	r2, [pc, #244]	; (800ceb4 <pidMultiWii+0x280>)
 800cdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfb8      	it	lt
 800cdca:	425b      	neglt	r3, r3
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cdd2:	d80c      	bhi.n	800cdee <pidMultiWii+0x1ba>
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d10e      	bne.n	800cdf8 <pidMultiWii+0x1c4>
 800cdda:	4a2d      	ldr	r2, [pc, #180]	; (800ce90 <pidMultiWii+0x25c>)
 800cddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdde:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	bfb8      	it	lt
 800cde6:	425b      	neglt	r3, r3
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	2b64      	cmp	r3, #100	; 0x64
 800cdec:	d904      	bls.n	800cdf8 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cdee:	4a32      	ldr	r2, [pc, #200]	; (800ceb8 <pidMultiWii+0x284>)
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cdf8:	4a2f      	ldr	r2, [pc, #188]	; (800ceb8 <pidMultiWii+0x284>)
 800cdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce00:	4a2f      	ldr	r2, [pc, #188]	; (800cec0 <pidMultiWii+0x28c>)
 800ce02:	fb82 1203 	smull	r1, r2, r2, r3
 800ce06:	10d2      	asrs	r2, r2, #3
 800ce08:	17db      	asrs	r3, r3, #31
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	4925      	ldr	r1, [pc, #148]	; (800cea4 <pidMultiWii+0x270>)
 800ce0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce10:	440a      	add	r2, r1
 800ce12:	320b      	adds	r2, #11
 800ce14:	7812      	ldrb	r2, [r2, #0]
 800ce16:	fb02 f303 	mul.w	r3, r2, r3
 800ce1a:	119b      	asrs	r3, r3, #6
 800ce1c:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800ce1e:	4b1d      	ldr	r3, [pc, #116]	; (800ce94 <pidMultiWii+0x260>)
 800ce20:	791b      	ldrb	r3, [r3, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d027      	beq.n	800ce76 <pidMultiWii+0x242>
 800ce26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	dc24      	bgt.n	800ce76 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800ce32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce34:	fb03 f202 	mul.w	r2, r3, r2
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	69b9      	ldr	r1, [r7, #24]
 800ce3c:	fb01 f303 	mul.w	r3, r1, r3
 800ce40:	4413      	add	r3, r2
 800ce42:	4a1f      	ldr	r2, [pc, #124]	; (800cec0 <pidMultiWii+0x28c>)
 800ce44:	fb82 1203 	smull	r1, r2, r2, r3
 800ce48:	1152      	asrs	r2, r2, #5
 800ce4a:	17db      	asrs	r3, r3, #31
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800ce56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce58:	fb03 f202 	mul.w	r2, r3, r2
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	69b9      	ldr	r1, [r7, #24]
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	4413      	add	r3, r2
 800ce66:	4a16      	ldr	r2, [pc, #88]	; (800cec0 <pidMultiWii+0x28c>)
 800ce68:	fb82 1203 	smull	r1, r2, r2, r3
 800ce6c:	1152      	asrs	r2, r2, #5
 800ce6e:	17db      	asrs	r3, r3, #31
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce74:	e02a      	b.n	800cecc <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800ce76:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <pidMultiWii+0x260>)
 800ce78:	78db      	ldrb	r3, [r3, #3]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d022      	beq.n	800cec4 <pidMultiWii+0x290>
 800ce7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	dc1f      	bgt.n	800cec4 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce8c:	e01e      	b.n	800cecc <pidMultiWii+0x298>
 800ce8e:	bf00      	nop
 800ce90:	200016f8 	.word	0x200016f8
 800ce94:	2000169c 	.word	0x2000169c
 800ce98:	2000178c 	.word	0x2000178c
 800ce9c:	2000089c 	.word	0x2000089c
 800cea0:	20001444 	.word	0x20001444
 800cea4:	20000e08 	.word	0x20000e08
 800cea8:	51eb851f 	.word	0x51eb851f
 800ceac:	20001854 	.word	0x20001854
 800ceb0:	ffffd8f0 	.word	0xffffd8f0
 800ceb4:	20001434 	.word	0x20001434
 800ceb8:	20001848 	.word	0x20001848
 800cebc:	ffffc180 	.word	0xffffc180
 800cec0:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cecc:	4a33      	ldr	r2, [pc, #204]	; (800cf9c <pidMultiWii+0x368>)
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ced4:	4619      	mov	r1, r3
 800ced6:	4a32      	ldr	r2, [pc, #200]	; (800cfa0 <pidMultiWii+0x36c>)
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	4413      	add	r3, r2
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	fb01 f303 	mul.w	r3, r1, r3
 800cee2:	4a30      	ldr	r2, [pc, #192]	; (800cfa4 <pidMultiWii+0x370>)
 800cee4:	fb82 1203 	smull	r1, r2, r2, r3
 800cee8:	1152      	asrs	r2, r2, #5
 800ceea:	17db      	asrs	r3, r3, #31
 800ceec:	1a9b      	subs	r3, r3, r2
 800ceee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cef0:	4413      	add	r3, r2
 800cef2:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cef4:	4a29      	ldr	r2, [pc, #164]	; (800cf9c <pidMultiWii+0x368>)
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cefc:	4619      	mov	r1, r3
 800cefe:	4a2a      	ldr	r2, [pc, #168]	; (800cfa8 <pidMultiWii+0x374>)
 800cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf02:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cf06:	1acb      	subs	r3, r1, r3
 800cf08:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cf0a:	4a24      	ldr	r2, [pc, #144]	; (800cf9c <pidMultiWii+0x368>)
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cf12:	4a25      	ldr	r2, [pc, #148]	; (800cfa8 <pidMultiWii+0x374>)
 800cf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cf1a:	4a24      	ldr	r2, [pc, #144]	; (800cfac <pidMultiWii+0x378>)
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf22:	4923      	ldr	r1, [pc, #140]	; (800cfb0 <pidMultiWii+0x37c>)
 800cf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cf32:	4a1e      	ldr	r2, [pc, #120]	; (800cfac <pidMultiWii+0x378>)
 800cf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf3a:	491d      	ldr	r1, [pc, #116]	; (800cfb0 <pidMultiWii+0x37c>)
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cf42:	491a      	ldr	r1, [pc, #104]	; (800cfac <pidMultiWii+0x378>)
 800cf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cf4c:	4a19      	ldr	r2, [pc, #100]	; (800cfb4 <pidMultiWii+0x380>)
 800cf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf50:	4413      	add	r3, r2
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	fb02 f303 	mul.w	r3, r2, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da00      	bge.n	800cf62 <pidMultiWii+0x32e>
 800cf60:	331f      	adds	r3, #31
 800cf62:	115b      	asrs	r3, r3, #5
 800cf64:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4413      	add	r3, r2
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	b219      	sxth	r1, r3
 800cf7c:	4a0e      	ldr	r2, [pc, #56]	; (800cfb8 <pidMultiWii+0x384>)
 800cf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf86:	3301      	adds	r3, #1
 800cf88:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	f77f ae72 	ble.w	800cc76 <pidMultiWii+0x42>
    }
}
 800cf92:	bf00      	nop
 800cf94:	bf00      	nop
 800cf96:	3738      	adds	r7, #56	; 0x38
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20001434 	.word	0x20001434
 800cfa0:	20001730 	.word	0x20001730
 800cfa4:	66666667 	.word	0x66666667
 800cfa8:	20001910 	.word	0x20001910
 800cfac:	20001918 	.word	0x20001918
 800cfb0:	20001924 	.word	0x20001924
 800cfb4:	20001738 	.word	0x20001738
 800cfb8:	20001758 	.word	0x20001758

0800cfbc <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800cfca:	e0f2      	b.n	800d1b2 <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d10b      	bne.n	800cfea <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800cfd2:	4b7c      	ldr	r3, [pc, #496]	; (800d1c4 <pidRewrite+0x208>)
 800cfd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cfd8:	331b      	adds	r3, #27
 800cfda:	4a7b      	ldr	r2, [pc, #492]	; (800d1c8 <pidRewrite+0x20c>)
 800cfdc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cfe0:	fb02 f303 	mul.w	r3, r2, r3
 800cfe4:	115b      	asrs	r3, r3, #5
 800cfe6:	623b      	str	r3, [r7, #32]
 800cfe8:	e053      	b.n	800d092 <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800cfea:	4a77      	ldr	r2, [pc, #476]	; (800d1c8 <pidRewrite+0x20c>)
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cff2:	4619      	mov	r1, r3
 800cff4:	4a75      	ldr	r2, [pc, #468]	; (800d1cc <pidRewrite+0x210>)
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cffc:	440b      	add	r3, r1
 800cffe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d002:	4973      	ldr	r1, [pc, #460]	; (800d1d0 <pidRewrite+0x214>)
 800d004:	4618      	mov	r0, r3
 800d006:	f7f6 fea5 	bl	8003d54 <constrain>
 800d00a:	4602      	mov	r2, r0
 800d00c:	4971      	ldr	r1, [pc, #452]	; (800d1d4 <pidRewrite+0x218>)
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800d014:	1ad2      	subs	r2, r2, r3
 800d016:	496b      	ldr	r1, [pc, #428]	; (800d1c4 <pidRewrite+0x208>)
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	3314      	adds	r3, #20
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	440b      	add	r3, r1
 800d020:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d024:	4413      	add	r3, r2
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d02e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800d032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d03a:	ee17 3a90 	vmov	r3, s15
 800d03e:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800d040:	4b65      	ldr	r3, [pc, #404]	; (800d1d8 <pidRewrite+0x21c>)
 800d042:	78db      	ldrb	r3, [r3, #3]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11c      	bne.n	800d082 <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800d048:	4a5e      	ldr	r2, [pc, #376]	; (800d1c4 <pidRewrite+0x208>)
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	4413      	add	r3, r2
 800d04e:	3323      	adds	r3, #35	; 0x23
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	331b      	adds	r3, #27
 800d054:	495c      	ldr	r1, [pc, #368]	; (800d1c8 <pidRewrite+0x20c>)
 800d056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d058:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d05c:	fb02 f303 	mul.w	r3, r2, r3
 800d060:	111b      	asrs	r3, r3, #4
 800d062:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800d064:	4b5c      	ldr	r3, [pc, #368]	; (800d1d8 <pidRewrite+0x21c>)
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d012      	beq.n	800d092 <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800d06c:	4b55      	ldr	r3, [pc, #340]	; (800d1c4 <pidRewrite+0x208>)
 800d06e:	7c9b      	ldrb	r3, [r3, #18]
 800d070:	461a      	mov	r2, r3
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	fb02 f303 	mul.w	r3, r2, r3
 800d078:	121b      	asrs	r3, r3, #8
 800d07a:	6a3a      	ldr	r2, [r7, #32]
 800d07c:	4413      	add	r3, r2
 800d07e:	623b      	str	r3, [r7, #32]
 800d080:	e007      	b.n	800d092 <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800d082:	4b50      	ldr	r3, [pc, #320]	; (800d1c4 <pidRewrite+0x208>)
 800d084:	7a1b      	ldrb	r3, [r3, #8]
 800d086:	461a      	mov	r2, r3
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	fb02 f303 	mul.w	r3, r2, r3
 800d08e:	111b      	asrs	r3, r3, #4
 800d090:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800d092:	4a52      	ldr	r2, [pc, #328]	; (800d1dc <pidRewrite+0x220>)
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d09a:	461a      	mov	r2, r3
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	1a9b      	subs	r3, r3, r2
 800d0a0:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800d0a2:	4a48      	ldr	r2, [pc, #288]	; (800d1c4 <pidRewrite+0x208>)
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	4413      	add	r3, r2
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	11db      	asrs	r3, r3, #7
 800d0b6:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800d0b8:	4a49      	ldr	r2, [pc, #292]	; (800d1e0 <pidRewrite+0x224>)
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d0c0:	4b48      	ldr	r3, [pc, #288]	; (800d1e4 <pidRewrite+0x228>)
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	fb01 f303 	mul.w	r3, r1, r3
 800d0cc:	12db      	asrs	r3, r3, #11
 800d0ce:	483d      	ldr	r0, [pc, #244]	; (800d1c4 <pidRewrite+0x208>)
 800d0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0d2:	4401      	add	r1, r0
 800d0d4:	310b      	adds	r1, #11
 800d0d6:	7809      	ldrb	r1, [r1, #0]
 800d0d8:	fb01 f303 	mul.w	r3, r1, r3
 800d0dc:	441a      	add	r2, r3
 800d0de:	4940      	ldr	r1, [pc, #256]	; (800d1e0 <pidRewrite+0x224>)
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800d0e6:	4a3e      	ldr	r2, [pc, #248]	; (800d1e0 <pidRewrite+0x224>)
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d0f2:	493d      	ldr	r1, [pc, #244]	; (800d1e8 <pidRewrite+0x22c>)
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7f6 fe2d 	bl	8003d54 <constrain>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	4938      	ldr	r1, [pc, #224]	; (800d1e0 <pidRewrite+0x224>)
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800d104:	4a36      	ldr	r2, [pc, #216]	; (800d1e0 <pidRewrite+0x224>)
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d10c:	135b      	asrs	r3, r3, #13
 800d10e:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800d110:	4a36      	ldr	r2, [pc, #216]	; (800d1ec <pidRewrite+0x230>)
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800d11e:	4933      	ldr	r1, [pc, #204]	; (800d1ec <pidRewrite+0x230>)
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	69ba      	ldr	r2, [r7, #24]
 800d124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800d128:	4b2e      	ldr	r3, [pc, #184]	; (800d1e4 <pidRewrite+0x228>)
 800d12a:	881b      	ldrh	r3, [r3, #0]
 800d12c:	091b      	lsrs	r3, r3, #4
 800d12e:	b29b      	uxth	r3, r3
 800d130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d134:	fbb2 f3f3 	udiv	r3, r2, r3
 800d138:	b29b      	uxth	r3, r3
 800d13a:	461a      	mov	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
 800d142:	119b      	asrs	r3, r3, #6
 800d144:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800d146:	4a2a      	ldr	r2, [pc, #168]	; (800d1f0 <pidRewrite+0x234>)
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d14e:	4929      	ldr	r1, [pc, #164]	; (800d1f4 <pidRewrite+0x238>)
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d156:	4413      	add	r3, r2
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	4413      	add	r3, r2
 800d15c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800d15e:	4a24      	ldr	r2, [pc, #144]	; (800d1f0 <pidRewrite+0x234>)
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d166:	4923      	ldr	r1, [pc, #140]	; (800d1f4 <pidRewrite+0x238>)
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800d16e:	4920      	ldr	r1, [pc, #128]	; (800d1f0 <pidRewrite+0x234>)
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800d178:	4a12      	ldr	r2, [pc, #72]	; (800d1c4 <pidRewrite+0x208>)
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	4413      	add	r3, r2
 800d17e:	3315      	adds	r3, #21
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	fb02 f303 	mul.w	r3, r2, r3
 800d18a:	121b      	asrs	r3, r3, #8
 800d18c:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	b29a      	uxth	r2, r3
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	b29b      	uxth	r3, r3
 800d196:	4413      	add	r3, r2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	4413      	add	r3, r2
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	b219      	sxth	r1, r3
 800d1a4:	4a14      	ldr	r2, [pc, #80]	; (800d1f8 <pidRewrite+0x23c>)
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	f77f af09 	ble.w	800cfcc <pidRewrite+0x10>
    }
}
 800d1ba:	bf00      	nop
 800d1bc:	bf00      	nop
 800d1be:	3728      	adds	r7, #40	; 0x28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	20000e08 	.word	0x20000e08
 800d1c8:	200016f8 	.word	0x200016f8
 800d1cc:	2000178c 	.word	0x2000178c
 800d1d0:	fffffe0c 	.word	0xfffffe0c
 800d1d4:	20001444 	.word	0x20001444
 800d1d8:	2000169c 	.word	0x2000169c
 800d1dc:	20001434 	.word	0x20001434
 800d1e0:	20001848 	.word	0x20001848
 800d1e4:	200016bc 	.word	0x200016bc
 800d1e8:	ffe00000 	.word	0xffe00000
 800d1ec:	20001930 	.word	0x20001930
 800d1f0:	2000193c 	.word	0x2000193c
 800d1f4:	20001948 	.word	0x20001948
 800d1f8:	20001758 	.word	0x20001758

0800d1fc <setPIDController>:

void setPIDController(int type)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d003      	beq.n	800d212 <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d20a:	4b07      	ldr	r3, [pc, #28]	; (800d228 <setPIDController+0x2c>)
 800d20c:	4a07      	ldr	r2, [pc, #28]	; (800d22c <setPIDController+0x30>)
 800d20e:	601a      	str	r2, [r3, #0]
            break;
 800d210:	e003      	b.n	800d21a <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d212:	4b05      	ldr	r3, [pc, #20]	; (800d228 <setPIDController+0x2c>)
 800d214:	4a06      	ldr	r2, [pc, #24]	; (800d230 <setPIDController+0x34>)
 800d216:	601a      	str	r2, [r3, #0]
            break;
 800d218:	bf00      	nop
    }
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	20000050 	.word	0x20000050
 800d22c:	0800cc35 	.word	0x0800cc35
 800d230:	0800cfbd 	.word	0x0800cfbd

0800d234 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d244:	2300      	movs	r3, #0
 800d246:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d248:	f7ff fbf4 	bl	800ca34 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d24c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d250:	f7f9 fee2 	bl	8007018 <feature>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d25a:	4b9d      	ldr	r3, [pc, #628]	; (800d4d0 <taskComputeRc+0x29c>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <taskComputeRc+0x32>
                mwDisarm();
 800d262:	f7ff fcc5 	bl	800cbf0 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d266:	f001 f9f9 	bl	800e65c <RSSI_getValue>
 800d26a:	4603      	mov	r3, r0
 800d26c:	461a      	mov	r2, r3
 800d26e:	4b99      	ldr	r3, [pc, #612]	; (800d4d4 <taskComputeRc+0x2a0>)
 800d270:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d272:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d276:	f7f9 fecf 	bl	8007018 <feature>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d106      	bne.n	800d28e <taskComputeRc+0x5a>
 800d280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d284:	f7f9 fec8 	bl	8007018 <feature>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d072      	beq.n	800d374 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d28e:	4b92      	ldr	r3, [pc, #584]	; (800d4d8 <taskComputeRc+0x2a4>)
 800d290:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d294:	4619      	mov	r1, r3
 800d296:	4b91      	ldr	r3, [pc, #580]	; (800d4dc <taskComputeRc+0x2a8>)
 800d298:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d29c:	461a      	mov	r2, r3
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	dd43      	ble.n	800d330 <taskComputeRc+0xfc>
 800d2a8:	4b8d      	ldr	r3, [pc, #564]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d03f      	beq.n	800d330 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	613b      	str	r3, [r7, #16]
 800d2b4:	e00a      	b.n	800d2cc <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d2b6:	4b8b      	ldr	r3, [pc, #556]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d2b8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d2bc:	b219      	sxth	r1, r3
 800d2be:	4a8a      	ldr	r2, [pc, #552]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	613b      	str	r3, [r7, #16]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	ddf1      	ble.n	800d2b6 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d2d2:	4b82      	ldr	r3, [pc, #520]	; (800d4dc <taskComputeRc+0x2a8>)
 800d2d4:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d2d8:	b21a      	sxth	r2, r3
 800d2da:	4b83      	ldr	r3, [pc, #524]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d2dc:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d2de:	2003      	movs	r0, #3
 800d2e0:	f7f6 fec6 	bl	8004070 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d2e4:	4b7c      	ldr	r3, [pc, #496]	; (800d4d8 <taskComputeRc+0x2a4>)
 800d2e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4b7b      	ldr	r3, [pc, #492]	; (800d4dc <taskComputeRc+0x2a8>)
 800d2ee:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	4b79      	ldr	r3, [pc, #484]	; (800d4dc <taskComputeRc+0x2a8>)
 800d2f6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d2fa:	441a      	add	r2, r3
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	4299      	cmp	r1, r3
 800d304:	dd0b      	ble.n	800d31e <taskComputeRc+0xea>
 800d306:	4b76      	ldr	r3, [pc, #472]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d308:	7c9b      	ldrb	r3, [r3, #18]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d107      	bne.n	800d31e <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d30e:	f7ff fc6f 	bl	800cbf0 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d312:	4b73      	ldr	r3, [pc, #460]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d314:	2200      	movs	r2, #0
 800d316:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d318:	2004      	movs	r0, #4
 800d31a:	f7f6 fea9 	bl	8004070 <buzzer>
                }
                failsafeEvents++;
 800d31e:	4b73      	ldr	r3, [pc, #460]	; (800d4ec <taskComputeRc+0x2b8>)
 800d320:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d324:	b29b      	uxth	r3, r3
 800d326:	3301      	adds	r3, #1
 800d328:	b29b      	uxth	r3, r3
 800d32a:	b21a      	sxth	r2, r3
 800d32c:	4b6f      	ldr	r3, [pc, #444]	; (800d4ec <taskComputeRc+0x2b8>)
 800d32e:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d330:	4b69      	ldr	r3, [pc, #420]	; (800d4d8 <taskComputeRc+0x2a4>)
 800d332:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d336:	4619      	mov	r1, r3
 800d338:	4b68      	ldr	r3, [pc, #416]	; (800d4dc <taskComputeRc+0x2a8>)
 800d33a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d33e:	461a      	mov	r2, r3
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	4299      	cmp	r1, r3
 800d348:	dd0b      	ble.n	800d362 <taskComputeRc+0x12e>
 800d34a:	4b65      	ldr	r3, [pc, #404]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d107      	bne.n	800d362 <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d352:	f7ff fc4d 	bl	800cbf0 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d356:	4b62      	ldr	r3, [pc, #392]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d35c:	2004      	movs	r0, #4
 800d35e:	f7f6 fe87 	bl	8004070 <buzzer>
            }
            failsafeCnt++;
 800d362:	4b5d      	ldr	r3, [pc, #372]	; (800d4d8 <taskComputeRc+0x2a4>)
 800d364:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	3301      	adds	r3, #1
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	b21a      	sxth	r2, r3
 800d370:	4b59      	ldr	r3, [pc, #356]	; (800d4d8 <taskComputeRc+0x2a4>)
 800d372:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d374:	2300      	movs	r3, #0
 800d376:	613b      	str	r3, [r7, #16]
 800d378:	e021      	b.n	800d3be <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	089b      	lsrs	r3, r3, #2
 800d37e:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d380:	4a59      	ldr	r2, [pc, #356]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d388:	461a      	mov	r2, r3
 800d38a:	4b56      	ldr	r3, [pc, #344]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d38c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d390:	429a      	cmp	r2, r3
 800d392:	dd03      	ble.n	800d39c <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d39a:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d39c:	4a52      	ldr	r2, [pc, #328]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b4f      	ldr	r3, [pc, #316]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d3a8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	da03      	bge.n	800d3b8 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
 800d3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b6:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	613b      	str	r3, [r7, #16]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b03      	cmp	r3, #3
 800d3c2:	ddda      	ble.n	800d37a <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d3c4:	4b4a      	ldr	r3, [pc, #296]	; (800d4f0 <taskComputeRc+0x2bc>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	7dfa      	ldrb	r2, [r7, #23]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d10a      	bne.n	800d3e4 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d3ce:	4b49      	ldr	r3, [pc, #292]	; (800d4f4 <taskComputeRc+0x2c0>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2bf9      	cmp	r3, #249	; 0xf9
 800d3d4:	d809      	bhi.n	800d3ea <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d3d6:	4b47      	ldr	r3, [pc, #284]	; (800d4f4 <taskComputeRc+0x2c0>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	4b45      	ldr	r3, [pc, #276]	; (800d4f4 <taskComputeRc+0x2c0>)
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	e002      	b.n	800d3ea <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d3e4:	4b43      	ldr	r3, [pc, #268]	; (800d4f4 <taskComputeRc+0x2c0>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d3ea:	4a41      	ldr	r2, [pc, #260]	; (800d4f0 <taskComputeRc+0x2bc>)
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
 800d3ee:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d3f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d3f4:	f7f9 fe10 	bl	8007018 <feature>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d01e      	beq.n	800d43c <taskComputeRc+0x208>
 800d3fe:	4b3a      	ldr	r3, [pc, #232]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d400:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d404:	461a      	mov	r2, r3
 800d406:	4b37      	ldr	r3, [pc, #220]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d408:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d40c:	4619      	mov	r1, r3
 800d40e:	4b35      	ldr	r3, [pc, #212]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d410:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d414:	1acb      	subs	r3, r1, r3
 800d416:	429a      	cmp	r2, r3
 800d418:	dd10      	ble.n	800d43c <taskComputeRc+0x208>
 800d41a:	4b33      	ldr	r3, [pc, #204]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d41c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d420:	461a      	mov	r2, r3
 800d422:	4b30      	ldr	r3, [pc, #192]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d424:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d428:	4619      	mov	r1, r3
 800d42a:	4b2e      	ldr	r3, [pc, #184]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d42c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d430:	440b      	add	r3, r1
 800d432:	429a      	cmp	r2, r3
 800d434:	da02      	bge.n	800d43c <taskComputeRc+0x208>
            isThrottleLow = true;
 800d436:	2301      	movs	r3, #1
 800d438:	72fb      	strb	r3, [r7, #11]
 800d43a:	e014      	b.n	800d466 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d43c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d440:	f7f9 fdea 	bl	8007018 <feature>
 800d444:	4603      	mov	r3, r0
 800d446:	f083 0301 	eor.w	r3, r3, #1
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00a      	beq.n	800d466 <taskComputeRc+0x232>
 800d450:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <taskComputeRc+0x2b4>)
 800d452:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d456:	461a      	mov	r2, r3
 800d458:	4b22      	ldr	r3, [pc, #136]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d45a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d45e:	429a      	cmp	r2, r3
 800d460:	da01      	bge.n	800d466 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d462:	2301      	movs	r3, #1
 800d464:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d01c      	beq.n	800d4a6 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d46c:	4b22      	ldr	r3, [pc, #136]	; (800d4f8 <taskComputeRc+0x2c4>)
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d472:	4b21      	ldr	r3, [pc, #132]	; (800d4f8 <taskComputeRc+0x2c4>)
 800d474:	2200      	movs	r2, #0
 800d476:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d478:	4b1f      	ldr	r3, [pc, #124]	; (800d4f8 <taskComputeRc+0x2c4>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d47e:	4b1f      	ldr	r3, [pc, #124]	; (800d4fc <taskComputeRc+0x2c8>)
 800d480:	2200      	movs	r2, #0
 800d482:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d484:	4b1d      	ldr	r3, [pc, #116]	; (800d4fc <taskComputeRc+0x2c8>)
 800d486:	2200      	movs	r2, #0
 800d488:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d48a:	4b14      	ldr	r3, [pc, #80]	; (800d4dc <taskComputeRc+0x2a8>)
 800d48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d009      	beq.n	800d4a6 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d492:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <taskComputeRc+0x29c>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d005      	beq.n	800d4a6 <taskComputeRc+0x272>
 800d49a:	4b11      	ldr	r3, [pc, #68]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <taskComputeRc+0x272>
                    mwArm();
 800d4a2:	f7ff fb61 	bl	800cb68 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <taskComputeRc+0x2a8>)
 800d4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d02d      	beq.n	800d50a <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d4ae:	4b08      	ldr	r3, [pc, #32]	; (800d4d0 <taskComputeRc+0x29c>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d129      	bne.n	800d50a <taskComputeRc+0x2d6>
 800d4b6:	4b0a      	ldr	r3, [pc, #40]	; (800d4e0 <taskComputeRc+0x2ac>)
 800d4b8:	785b      	ldrb	r3, [r3, #1]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d025      	beq.n	800d50a <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d4be:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <taskComputeRc+0x2b0>)
 800d4c0:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01b      	beq.n	800d500 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d4c8:	f7ff fb92 	bl	800cbf0 <mwDisarm>
 800d4cc:	e01d      	b.n	800d50a <taskComputeRc+0x2d6>
 800d4ce:	bf00      	nop
 800d4d0:	2000173c 	.word	0x2000173c
 800d4d4:	20001728 	.word	0x20001728
 800d4d8:	200016ce 	.word	0x200016ce
 800d4dc:	20000e08 	.word	0x20000e08
 800d4e0:	2000169c 	.word	0x2000169c
 800d4e4:	2000089c 	.word	0x2000089c
 800d4e8:	200016d4 	.word	0x200016d4
 800d4ec:	200016d0 	.word	0x200016d0
 800d4f0:	20001954 	.word	0x20001954
 800d4f4:	20001955 	.word	0x20001955
 800d4f8:	20001848 	.word	0x20001848
 800d4fc:	20001854 	.word	0x20001854
                } else if (isThrottleLow) {
 800d500:	7afb      	ldrb	r3, [r7, #11]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <taskComputeRc+0x2d6>
                    mwDisarm();
 800d506:	f7ff fb73 	bl	800cbf0 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d50a:	4b82      	ldr	r3, [pc, #520]	; (800d714 <taskComputeRc+0x4e0>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	2b14      	cmp	r3, #20
 800d510:	f040 8131 	bne.w	800d776 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d514:	4b80      	ldr	r3, [pc, #512]	; (800d718 <taskComputeRc+0x4e4>)
 800d516:	785b      	ldrb	r3, [r3, #1]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01c      	beq.n	800d556 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d51c:	4b7f      	ldr	r3, [pc, #508]	; (800d71c <taskComputeRc+0x4e8>)
 800d51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d105      	bne.n	800d530 <taskComputeRc+0x2fc>
 800d524:	4b7e      	ldr	r3, [pc, #504]	; (800d720 <taskComputeRc+0x4ec>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b5f      	cmp	r3, #95	; 0x5f
 800d52a:	d101      	bne.n	800d530 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d52c:	f7ff fb60 	bl	800cbf0 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d530:	4b7c      	ldr	r3, [pc, #496]	; (800d724 <taskComputeRc+0x4f0>)
 800d532:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 811d 	beq.w	800d776 <taskComputeRc+0x542>
 800d53c:	4b77      	ldr	r3, [pc, #476]	; (800d71c <taskComputeRc+0x4e8>)
 800d53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d540:	2b00      	cmp	r3, #0
 800d542:	f040 8118 	bne.w	800d776 <taskComputeRc+0x542>
 800d546:	4b76      	ldr	r3, [pc, #472]	; (800d720 <taskComputeRc+0x4ec>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	2b7d      	cmp	r3, #125	; 0x7d
 800d54c:	f040 8113 	bne.w	800d776 <taskComputeRc+0x542>
                    mwDisarm();
 800d550:	f7ff fb4e 	bl	800cbf0 <mwDisarm>
 800d554:	e10f      	b.n	800d776 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d55a:	4b71      	ldr	r3, [pc, #452]	; (800d720 <taskComputeRc+0x4ec>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b57      	cmp	r3, #87	; 0x57
 800d560:	d122      	bne.n	800d5a8 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d562:	4b71      	ldr	r3, [pc, #452]	; (800d728 <taskComputeRc+0x4f4>)
 800d564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d568:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d56a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d56e:	f7f9 fd53 	bl	8007018 <feature>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d578:	f7fb fc1a 	bl	8008db0 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d57c:	2004      	movs	r0, #4
 800d57e:	f7f9 fd03 	bl	8006f88 <sensors>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d588:	4b68      	ldr	r3, [pc, #416]	; (800d72c <taskComputeRc+0x4f8>)
 800d58a:	220a      	movs	r2, #10
 800d58c:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d58e:	2008      	movs	r0, #8
 800d590:	f7f9 fcfa 	bl	8006f88 <sensors>
 800d594:	4603      	mov	r3, r0
 800d596:	f083 0301 	eor.w	r3, r3, #1
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d032      	beq.n	800d606 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d5a0:	4b63      	ldr	r3, [pc, #396]	; (800d730 <taskComputeRc+0x4fc>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	801a      	strh	r2, [r3, #0]
 800d5a6:	e02e      	b.n	800d606 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d5a8:	2004      	movs	r0, #4
 800d5aa:	f7f9 fd35 	bl	8007018 <feature>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d028      	beq.n	800d606 <taskComputeRc+0x3d2>
 800d5b4:	4b5a      	ldr	r3, [pc, #360]	; (800d720 <taskComputeRc+0x4ec>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b5a      	cmp	r3, #90	; 0x5a
 800d5ba:	d124      	bne.n	800d606 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d5bc:	4b5d      	ldr	r3, [pc, #372]	; (800d734 <taskComputeRc+0x500>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d5c4:	4b5b      	ldr	r3, [pc, #364]	; (800d734 <taskComputeRc+0x500>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d5ca:	4b5b      	ldr	r3, [pc, #364]	; (800d738 <taskComputeRc+0x504>)
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	e019      	b.n	800d606 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d5d2:	4b5a      	ldr	r3, [pc, #360]	; (800d73c <taskComputeRc+0x508>)
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	bf14      	ite	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	2300      	moveq	r3, #0
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	f083 0301 	eor.w	r3, r3, #1
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	4b53      	ldr	r3, [pc, #332]	; (800d73c <taskComputeRc+0x508>)
 800d5ee:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d5f0:	4b52      	ldr	r3, [pc, #328]	; (800d73c <taskComputeRc+0x508>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d5f8:	200a      	movs	r0, #10
 800d5fa:	f7f6 fd39 	bl	8004070 <buzzer>
 800d5fe:	e002      	b.n	800d606 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d600:	200b      	movs	r0, #11
 800d602:	f7f6 fd35 	bl	8004070 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d606:	4b46      	ldr	r3, [pc, #280]	; (800d720 <taskComputeRc+0x4ec>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b5d      	cmp	r3, #93	; 0x5d
 800d60c:	d102      	bne.n	800d614 <taskComputeRc+0x3e0>
                    i = 1;
 800d60e:	2301      	movs	r3, #1
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	e00c      	b.n	800d62e <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d614:	4b42      	ldr	r3, [pc, #264]	; (800d720 <taskComputeRc+0x4ec>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	2b5b      	cmp	r3, #91	; 0x5b
 800d61a:	d102      	bne.n	800d622 <taskComputeRc+0x3ee>
                    i = 2;
 800d61c:	2302      	movs	r3, #2
 800d61e:	613b      	str	r3, [r7, #16]
 800d620:	e005      	b.n	800d62e <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d622:	4b3f      	ldr	r3, [pc, #252]	; (800d720 <taskComputeRc+0x4ec>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b5e      	cmp	r3, #94	; 0x5e
 800d628:	d101      	bne.n	800d62e <taskComputeRc+0x3fa>
                    i = 3;
 800d62a:	2303      	movs	r3, #3
 800d62c:	613b      	str	r3, [r7, #16]
                if (i) {
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d011      	beq.n	800d658 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	b2db      	uxtb	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	4b39      	ldr	r3, [pc, #228]	; (800d724 <taskComputeRc+0x4f0>)
 800d63e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d642:	2100      	movs	r1, #0
 800d644:	2000      	movs	r0, #0
 800d646:	f7f9 f905 	bl	8006854 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	461a      	mov	r2, r3
 800d650:	2128      	movs	r1, #40	; 0x28
 800d652:	2002      	movs	r0, #2
 800d654:	f7fe fd9e 	bl	800c194 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d658:	4b30      	ldr	r3, [pc, #192]	; (800d71c <taskComputeRc+0x4e8>)
 800d65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <taskComputeRc+0x43a>
 800d660:	4b2f      	ldr	r3, [pc, #188]	; (800d720 <taskComputeRc+0x4ec>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	2b6f      	cmp	r3, #111	; 0x6f
 800d666:	d102      	bne.n	800d66e <taskComputeRc+0x43a>
                    mwArm();
 800d668:	f7ff fa7e 	bl	800cb68 <mwArm>
 800d66c:	e01f      	b.n	800d6ae <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d66e:	4b2d      	ldr	r3, [pc, #180]	; (800d724 <taskComputeRc+0x4f0>)
 800d670:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <taskComputeRc+0x45a>
 800d678:	4b28      	ldr	r3, [pc, #160]	; (800d71c <taskComputeRc+0x4e8>)
 800d67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d106      	bne.n	800d68e <taskComputeRc+0x45a>
 800d680:	4b27      	ldr	r3, [pc, #156]	; (800d720 <taskComputeRc+0x4ec>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b7e      	cmp	r3, #126	; 0x7e
 800d686:	d102      	bne.n	800d68e <taskComputeRc+0x45a>
                    mwArm();
 800d688:	f7ff fa6e 	bl	800cb68 <mwArm>
 800d68c:	e00f      	b.n	800d6ae <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d68e:	4b24      	ldr	r3, [pc, #144]	; (800d720 <taskComputeRc+0x4ec>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b97      	cmp	r3, #151	; 0x97
 800d694:	d104      	bne.n	800d6a0 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d696:	4b2a      	ldr	r3, [pc, #168]	; (800d740 <taskComputeRc+0x50c>)
 800d698:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d69c:	801a      	strh	r2, [r3, #0]
 800d69e:	e006      	b.n	800d6ae <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d6a0:	4b1f      	ldr	r3, [pc, #124]	; (800d720 <taskComputeRc+0x4ec>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2ba7      	cmp	r3, #167	; 0xa7
 800d6a6:	d102      	bne.n	800d6ae <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d6a8:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <taskComputeRc+0x4e4>)
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d6b2:	4b1b      	ldr	r3, [pc, #108]	; (800d720 <taskComputeRc+0x4ec>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2bbb      	cmp	r3, #187	; 0xbb
 800d6b8:	d10b      	bne.n	800d6d2 <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <taskComputeRc+0x4e8>)
 800d6bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	3302      	adds	r3, #2
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	b21a      	sxth	r2, r3
 800d6c8:	4b14      	ldr	r3, [pc, #80]	; (800d71c <taskComputeRc+0x4e8>)
 800d6ca:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	613b      	str	r3, [r7, #16]
 800d6d0:	e047      	b.n	800d762 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d6d2:	4b13      	ldr	r3, [pc, #76]	; (800d720 <taskComputeRc+0x4ec>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	2bb7      	cmp	r3, #183	; 0xb7
 800d6d8:	d10b      	bne.n	800d6f2 <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d6da:	4b10      	ldr	r3, [pc, #64]	; (800d71c <taskComputeRc+0x4e8>)
 800d6dc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3b02      	subs	r3, #2
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	b21a      	sxth	r2, r3
 800d6e8:	4b0c      	ldr	r3, [pc, #48]	; (800d71c <taskComputeRc+0x4e8>)
 800d6ea:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	613b      	str	r3, [r7, #16]
 800d6f0:	e037      	b.n	800d762 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d6f2:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <taskComputeRc+0x4ec>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2bbe      	cmp	r3, #190	; 0xbe
 800d6f8:	d124      	bne.n	800d744 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d6fa:	4b08      	ldr	r3, [pc, #32]	; (800d71c <taskComputeRc+0x4e8>)
 800d6fc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d700:	b29b      	uxth	r3, r3
 800d702:	3302      	adds	r3, #2
 800d704:	b29b      	uxth	r3, r3
 800d706:	b21a      	sxth	r2, r3
 800d708:	4b04      	ldr	r3, [pc, #16]	; (800d71c <taskComputeRc+0x4e8>)
 800d70a:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d70c:	2301      	movs	r3, #1
 800d70e:	613b      	str	r3, [r7, #16]
 800d710:	e027      	b.n	800d762 <taskComputeRc+0x52e>
 800d712:	bf00      	nop
 800d714:	20001955 	.word	0x20001955
 800d718:	2000169c 	.word	0x2000169c
 800d71c:	20000e08 	.word	0x20000e08
 800d720:	20001954 	.word	0x20001954
 800d724:	2000089c 	.word	0x2000089c
 800d728:	20001966 	.word	0x20001966
 800d72c:	20001964 	.word	0x20001964
 800d730:	20001968 	.word	0x20001968
 800d734:	20001839 	.word	0x20001839
 800d738:	2000183a 	.word	0x2000183a
 800d73c:	20001838 	.word	0x20001838
 800d740:	20001962 	.word	0x20001962
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d744:	4b9e      	ldr	r3, [pc, #632]	; (800d9c0 <taskComputeRc+0x78c>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2bbd      	cmp	r3, #189	; 0xbd
 800d74a:	d10a      	bne.n	800d762 <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d74c:	4b9d      	ldr	r3, [pc, #628]	; (800d9c4 <taskComputeRc+0x790>)
 800d74e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d752:	b29b      	uxth	r3, r3
 800d754:	3b02      	subs	r3, #2
 800d756:	b29b      	uxth	r3, r3
 800d758:	b21a      	sxth	r2, r3
 800d75a:	4b9a      	ldr	r3, [pc, #616]	; (800d9c4 <taskComputeRc+0x790>)
 800d75c:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d006      	beq.n	800d776 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d768:	2101      	movs	r1, #1
 800d76a:	2001      	movs	r0, #1
 800d76c:	f7f9 f872 	bl	8006854 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d770:	4b95      	ldr	r3, [pc, #596]	; (800d9c8 <taskComputeRc+0x794>)
 800d772:	2200      	movs	r2, #0
 800d774:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d776:	2004      	movs	r0, #4
 800d778:	f7f9 fc4e 	bl	8007018 <feature>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d041      	beq.n	800d806 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d782:	4b92      	ldr	r3, [pc, #584]	; (800d9cc <taskComputeRc+0x798>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d016      	beq.n	800d7b8 <taskComputeRc+0x584>
 800d78a:	4b91      	ldr	r3, [pc, #580]	; (800d9d0 <taskComputeRc+0x79c>)
 800d78c:	785b      	ldrb	r3, [r3, #1]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d012      	beq.n	800d7b8 <taskComputeRc+0x584>
 800d792:	4b90      	ldr	r3, [pc, #576]	; (800d9d4 <taskComputeRc+0x7a0>)
 800d794:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d798:	461a      	mov	r2, r3
 800d79a:	4b8f      	ldr	r3, [pc, #572]	; (800d9d8 <taskComputeRc+0x7a4>)
 800d79c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	dd09      	ble.n	800d7b8 <taskComputeRc+0x584>
 800d7a4:	4b8d      	ldr	r3, [pc, #564]	; (800d9dc <taskComputeRc+0x7a8>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d7ac:	4b8c      	ldr	r3, [pc, #560]	; (800d9e0 <taskComputeRc+0x7ac>)
 800d7ae:	2232      	movs	r2, #50	; 0x32
 800d7b0:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d7b2:	4b86      	ldr	r3, [pc, #536]	; (800d9cc <taskComputeRc+0x798>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d7b8:	4b88      	ldr	r3, [pc, #544]	; (800d9dc <taskComputeRc+0x7a8>)
 800d7ba:	7c5b      	ldrb	r3, [r3, #17]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d014      	beq.n	800d7ea <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d7c0:	4b88      	ldr	r3, [pc, #544]	; (800d9e4 <taskComputeRc+0x7b0>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	f083 0301 	eor.w	r3, r3, #1
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d009      	beq.n	800d7e2 <taskComputeRc+0x5ae>
 800d7ce:	4b86      	ldr	r3, [pc, #536]	; (800d9e8 <taskComputeRc+0x7b4>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	f083 0301 	eor.w	r3, r3, #1
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d7dc:	4b80      	ldr	r3, [pc, #512]	; (800d9e0 <taskComputeRc+0x7ac>)
 800d7de:	2232      	movs	r2, #50	; 0x32
 800d7e0:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d7e2:	4b80      	ldr	r3, [pc, #512]	; (800d9e4 <taskComputeRc+0x7b0>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	701a      	strb	r2, [r3, #0]
 800d7e8:	e00d      	b.n	800d806 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d7ea:	4b7f      	ldr	r3, [pc, #508]	; (800d9e8 <taskComputeRc+0x7b4>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d009      	beq.n	800d806 <taskComputeRc+0x5d2>
 800d7f2:	4b77      	ldr	r3, [pc, #476]	; (800d9d0 <taskComputeRc+0x79c>)
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d7fa:	4b7b      	ldr	r3, [pc, #492]	; (800d9e8 <taskComputeRc+0x7b4>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d800:	4b7a      	ldr	r3, [pc, #488]	; (800d9ec <taskComputeRc+0x7b8>)
 800d802:	2201      	movs	r2, #1
 800d804:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d806:	2300      	movs	r3, #0
 800d808:	613b      	str	r3, [r7, #16]
 800d80a:	e04a      	b.n	800d8a2 <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	3304      	adds	r3, #4
 800d810:	4a70      	ldr	r2, [pc, #448]	; (800d9d4 <taskComputeRc+0x7a0>)
 800d812:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d816:	f240 5213 	movw	r2, #1299	; 0x513
 800d81a:	4293      	cmp	r3, r2
 800d81c:	bfd4      	ite	le
 800d81e:	2301      	movle	r3, #1
 800d820:	2300      	movgt	r3, #0
 800d822:	b2db      	uxtb	r3, r3
 800d824:	4619      	mov	r1, r3
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	4613      	mov	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	4099      	lsls	r1, r3
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	3304      	adds	r3, #4
 800d834:	4a67      	ldr	r2, [pc, #412]	; (800d9d4 <taskComputeRc+0x7a0>)
 800d836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d83a:	f240 5214 	movw	r2, #1300	; 0x514
 800d83e:	4293      	cmp	r3, r2
 800d840:	dd0a      	ble.n	800d858 <taskComputeRc+0x624>
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	3304      	adds	r3, #4
 800d846:	4a63      	ldr	r2, [pc, #396]	; (800d9d4 <taskComputeRc+0x7a0>)
 800d848:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d84c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d850:	4293      	cmp	r3, r2
 800d852:	dc01      	bgt.n	800d858 <taskComputeRc+0x624>
 800d854:	2001      	movs	r0, #1
 800d856:	e000      	b.n	800d85a <taskComputeRc+0x626>
 800d858:	2000      	movs	r0, #0
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	4613      	mov	r3, r2
 800d85e:	005b      	lsls	r3, r3, #1
 800d860:	4413      	add	r3, r2
 800d862:	3301      	adds	r3, #1
 800d864:	fa00 f303 	lsl.w	r3, r0, r3
 800d868:	4319      	orrs	r1, r3
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	3304      	adds	r3, #4
 800d86e:	4a59      	ldr	r2, [pc, #356]	; (800d9d4 <taskComputeRc+0x7a0>)
 800d870:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d874:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d878:	4293      	cmp	r3, r2
 800d87a:	bfcc      	ite	gt
 800d87c:	2301      	movgt	r3, #1
 800d87e:	2300      	movle	r3, #0
 800d880:	b2db      	uxtb	r3, r3
 800d882:	4618      	mov	r0, r3
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4613      	mov	r3, r2
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	4413      	add	r3, r2
 800d88c:	3302      	adds	r3, #2
 800d88e:	fa00 f303 	lsl.w	r3, r0, r3
 800d892:	430b      	orrs	r3, r1
 800d894:	461a      	mov	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	613b      	str	r3, [r7, #16]
 800d8a2:	4b53      	ldr	r3, [pc, #332]	; (800d9f0 <taskComputeRc+0x7bc>)
 800d8a4:	7d1b      	ldrb	r3, [r3, #20]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	dbae      	blt.n	800d80c <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	613b      	str	r3, [r7, #16]
 800d8b2:	e015      	b.n	800d8e0 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d8b4:	4a43      	ldr	r2, [pc, #268]	; (800d9c4 <taskComputeRc+0x790>)
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	3312      	adds	r3, #18
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4413      	add	r3, r2
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bf14      	ite	ne
 800d8c8:	2301      	movne	r3, #1
 800d8ca:	2300      	moveq	r3, #0
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4a42      	ldr	r2, [pc, #264]	; (800d9dc <taskComputeRc+0x7a8>)
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	613b      	str	r3, [r7, #16]
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b18      	cmp	r3, #24
 800d8e4:	dde6      	ble.n	800d8b4 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d8e6:	4b3d      	ldr	r3, [pc, #244]	; (800d9dc <taskComputeRc+0x7a8>)
 800d8e8:	7e1a      	ldrb	r2, [r3, #24]
 800d8ea:	4b39      	ldr	r3, [pc, #228]	; (800d9d0 <taskComputeRc+0x79c>)
 800d8ec:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d8ee:	4b38      	ldr	r3, [pc, #224]	; (800d9d0 <taskComputeRc+0x79c>)
 800d8f0:	7d1b      	ldrb	r3, [r3, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d005      	beq.n	800d902 <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d8f6:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <taskComputeRc+0x7a8>)
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d8fc:	4b37      	ldr	r3, [pc, #220]	; (800d9dc <taskComputeRc+0x7a8>)
 800d8fe:	2201      	movs	r2, #1
 800d900:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d902:	4b36      	ldr	r3, [pc, #216]	; (800d9dc <taskComputeRc+0x7a8>)
 800d904:	785b      	ldrb	r3, [r3, #1]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10c      	bne.n	800d924 <taskComputeRc+0x6f0>
 800d90a:	4b3a      	ldr	r3, [pc, #232]	; (800d9f4 <taskComputeRc+0x7c0>)
 800d90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d910:	4619      	mov	r1, r3
 800d912:	4b2c      	ldr	r3, [pc, #176]	; (800d9c4 <taskComputeRc+0x790>)
 800d914:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d918:	461a      	mov	r2, r3
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	4299      	cmp	r1, r3
 800d922:	dd30      	ble.n	800d986 <taskComputeRc+0x752>
 800d924:	2002      	movs	r0, #2
 800d926:	f7f9 fb2f 	bl	8006f88 <sensors>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d02a      	beq.n	800d986 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d930:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <taskComputeRc+0x79c>)
 800d932:	78db      	ldrb	r3, [r3, #3]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d108      	bne.n	800d94a <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d938:	4b2f      	ldr	r3, [pc, #188]	; (800d9f8 <taskComputeRc+0x7c4>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d93e:	4b2e      	ldr	r3, [pc, #184]	; (800d9f8 <taskComputeRc+0x7c4>)
 800d940:	2200      	movs	r2, #0
 800d942:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d944:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <taskComputeRc+0x79c>)
 800d946:	2201      	movs	r2, #1
 800d948:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d94a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d94e:	f7f9 fb63 	bl	8007018 <feature>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01d      	beq.n	800d994 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d958:	4b26      	ldr	r3, [pc, #152]	; (800d9f4 <taskComputeRc+0x7c0>)
 800d95a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d95e:	4619      	mov	r1, r3
 800d960:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <taskComputeRc+0x790>)
 800d962:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d966:	461a      	mov	r2, r3
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	4299      	cmp	r1, r3
 800d970:	dd10      	ble.n	800d994 <taskComputeRc+0x760>
 800d972:	2020      	movs	r0, #32
 800d974:	f7f9 fb08 	bl	8006f88 <sensors>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00a      	beq.n	800d994 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d97e:	4b14      	ldr	r3, [pc, #80]	; (800d9d0 <taskComputeRc+0x79c>)
 800d980:	2201      	movs	r2, #1
 800d982:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d984:	e006      	b.n	800d994 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <taskComputeRc+0x79c>)
 800d988:	2200      	movs	r2, #0
 800d98a:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d98c:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <taskComputeRc+0x79c>)
 800d98e:	2200      	movs	r2, #0
 800d990:	749a      	strb	r2, [r3, #18]
 800d992:	e000      	b.n	800d996 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d994:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d996:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <taskComputeRc+0x7a8>)
 800d998:	789b      	ldrb	r3, [r3, #2]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02e      	beq.n	800d9fc <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d99e:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <taskComputeRc+0x79c>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	; (800d9d0 <taskComputeRc+0x79c>)
 800d9a6:	791b      	ldrb	r3, [r3, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d12a      	bne.n	800da02 <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d9ac:	4b12      	ldr	r3, [pc, #72]	; (800d9f8 <taskComputeRc+0x7c4>)
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d9b2:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <taskComputeRc+0x7c4>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d9b8:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <taskComputeRc+0x79c>)
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	711a      	strb	r2, [r3, #4]
 800d9be:	e020      	b.n	800da02 <taskComputeRc+0x7ce>
 800d9c0:	20001954 	.word	0x20001954
 800d9c4:	20000e08 	.word	0x20000e08
 800d9c8:	20001955 	.word	0x20001955
 800d9cc:	20001838 	.word	0x20001838
 800d9d0:	2000169c 	.word	0x2000169c
 800d9d4:	200016d4 	.word	0x200016d4
 800d9d8:	2000089c 	.word	0x2000089c
 800d9dc:	2000173c 	.word	0x2000173c
 800d9e0:	2000183c 	.word	0x2000183c
 800d9e4:	2000183b 	.word	0x2000183b
 800d9e8:	20001839 	.word	0x20001839
 800d9ec:	2000183a 	.word	0x2000183a
 800d9f0:	200007e4 	.word	0x200007e4
 800d9f4:	200016ce 	.word	0x200016ce
 800d9f8:	20001854 	.word	0x20001854
            }
        } else {
            f.HORIZON_MODE = 0;
 800d9fc:	4b9c      	ldr	r3, [pc, #624]	; (800dc70 <taskComputeRc+0xa3c>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800da02:	4b9c      	ldr	r3, [pc, #624]	; (800dc74 <taskComputeRc+0xa40>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800da0a:	4b99      	ldr	r3, [pc, #612]	; (800dc70 <taskComputeRc+0xa3c>)
 800da0c:	2201      	movs	r2, #1
 800da0e:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800da10:	4b97      	ldr	r3, [pc, #604]	; (800dc70 <taskComputeRc+0xa3c>)
 800da12:	78db      	ldrb	r3, [r3, #3]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <taskComputeRc+0x7ec>
 800da18:	4b95      	ldr	r3, [pc, #596]	; (800dc70 <taskComputeRc+0xa3c>)
 800da1a:	791b      	ldrb	r3, [r3, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800da20:	2001      	movs	r0, #1
 800da22:	f7f4 fb57 	bl	80020d4 <actLed1State>
 800da26:	e002      	b.n	800da2e <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800da28:	2000      	movs	r0, #0
 800da2a:	f7f4 fb53 	bl	80020d4 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800da2e:	2004      	movs	r0, #4
 800da30:	f7f9 faaa 	bl	8006f88 <sensors>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d033      	beq.n	800daa2 <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800da3a:	4b8e      	ldr	r3, [pc, #568]	; (800dc74 <taskComputeRc+0xa40>)
 800da3c:	78db      	ldrb	r3, [r3, #3]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d016      	beq.n	800da70 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800da42:	4b8b      	ldr	r3, [pc, #556]	; (800dc70 <taskComputeRc+0xa3c>)
 800da44:	799b      	ldrb	r3, [r3, #6]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d115      	bne.n	800da76 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800da4a:	4b89      	ldr	r3, [pc, #548]	; (800dc70 <taskComputeRc+0xa3c>)
 800da4c:	2201      	movs	r2, #1
 800da4e:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800da50:	4b89      	ldr	r3, [pc, #548]	; (800dc78 <taskComputeRc+0xa44>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a89      	ldr	r2, [pc, #548]	; (800dc7c <taskComputeRc+0xa48>)
 800da56:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800da58:	4b89      	ldr	r3, [pc, #548]	; (800dc80 <taskComputeRc+0xa4c>)
 800da5a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800da5e:	4b89      	ldr	r3, [pc, #548]	; (800dc84 <taskComputeRc+0xa50>)
 800da60:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800da62:	4b89      	ldr	r3, [pc, #548]	; (800dc88 <taskComputeRc+0xa54>)
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800da68:	4b88      	ldr	r3, [pc, #544]	; (800dc8c <taskComputeRc+0xa58>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	e002      	b.n	800da76 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800da70:	4b7f      	ldr	r3, [pc, #508]	; (800dc70 <taskComputeRc+0xa3c>)
 800da72:	2200      	movs	r2, #0
 800da74:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800da76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800da7a:	f7f9 facd 	bl	8007018 <feature>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00e      	beq.n	800daa2 <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800da84:	4b7b      	ldr	r3, [pc, #492]	; (800dc74 <taskComputeRc+0xa40>)
 800da86:	791b      	ldrb	r3, [r3, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800da8c:	4b78      	ldr	r3, [pc, #480]	; (800dc70 <taskComputeRc+0xa3c>)
 800da8e:	7bdb      	ldrb	r3, [r3, #15]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d106      	bne.n	800daa2 <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800da94:	4b76      	ldr	r3, [pc, #472]	; (800dc70 <taskComputeRc+0xa3c>)
 800da96:	2201      	movs	r2, #1
 800da98:	73da      	strb	r2, [r3, #15]
 800da9a:	e002      	b.n	800daa2 <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800da9c:	4b74      	ldr	r3, [pc, #464]	; (800dc70 <taskComputeRc+0xa3c>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800daa2:	2002      	movs	r0, #2
 800daa4:	f7f9 fa70 	bl	8006f88 <sensors>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d105      	bne.n	800daba <taskComputeRc+0x886>
 800daae:	2008      	movs	r0, #8
 800dab0:	f7f9 fa6a 	bl	8006f88 <sensors>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d02b      	beq.n	800db12 <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800daba:	4b6e      	ldr	r3, [pc, #440]	; (800dc74 <taskComputeRc+0xa40>)
 800dabc:	795b      	ldrb	r3, [r3, #5]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00c      	beq.n	800dadc <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800dac2:	4b6b      	ldr	r3, [pc, #428]	; (800dc70 <taskComputeRc+0xa3c>)
 800dac4:	795b      	ldrb	r3, [r3, #5]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800daca:	4b69      	ldr	r3, [pc, #420]	; (800dc70 <taskComputeRc+0xa3c>)
 800dacc:	2201      	movs	r2, #1
 800dace:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800dad0:	4b6f      	ldr	r3, [pc, #444]	; (800dc90 <taskComputeRc+0xa5c>)
 800dad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dad6:	4b6f      	ldr	r3, [pc, #444]	; (800dc94 <taskComputeRc+0xa60>)
 800dad8:	801a      	strh	r2, [r3, #0]
 800dada:	e002      	b.n	800dae2 <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800dadc:	4b64      	ldr	r3, [pc, #400]	; (800dc70 <taskComputeRc+0xa3c>)
 800dade:	2200      	movs	r2, #0
 800dae0:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800dae2:	4b64      	ldr	r3, [pc, #400]	; (800dc74 <taskComputeRc+0xa40>)
 800dae4:	799b      	ldrb	r3, [r3, #6]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800daea:	4b61      	ldr	r3, [pc, #388]	; (800dc70 <taskComputeRc+0xa3c>)
 800daec:	7a5b      	ldrb	r3, [r3, #9]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800daf2:	4b5f      	ldr	r3, [pc, #380]	; (800dc70 <taskComputeRc+0xa3c>)
 800daf4:	2201      	movs	r2, #1
 800daf6:	725a      	strb	r2, [r3, #9]
 800daf8:	e002      	b.n	800db00 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800dafa:	4b5d      	ldr	r3, [pc, #372]	; (800dc70 <taskComputeRc+0xa3c>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800db00:	4b5c      	ldr	r3, [pc, #368]	; (800dc74 <taskComputeRc+0xa40>)
 800db02:	79db      	ldrb	r3, [r3, #7]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d004      	beq.n	800db12 <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800db08:	4b61      	ldr	r3, [pc, #388]	; (800dc90 <taskComputeRc+0xa5c>)
 800db0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db0e:	4b62      	ldr	r3, [pc, #392]	; (800dc98 <taskComputeRc+0xa64>)
 800db10:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800db12:	2020      	movs	r0, #32
 800db14:	f7f9 fa38 	bl	8006f88 <sensors>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f000 809c 	beq.w	800dc58 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800db20:	4b53      	ldr	r3, [pc, #332]	; (800dc70 <taskComputeRc+0xa3c>)
 800db22:	7adb      	ldrb	r3, [r3, #11]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 808e 	beq.w	800dc46 <taskComputeRc+0xa12>
 800db2a:	4b5c      	ldr	r3, [pc, #368]	; (800dc9c <taskComputeRc+0xa68>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b04      	cmp	r3, #4
 800db30:	f240 8089 	bls.w	800dc46 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800db34:	4b5a      	ldr	r3, [pc, #360]	; (800dca0 <taskComputeRc+0xa6c>)
 800db36:	f993 3000 	ldrsb.w	r3, [r3]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <taskComputeRc+0x920>
 800db3e:	4b4c      	ldr	r3, [pc, #304]	; (800dc70 <taskComputeRc+0xa3c>)
 800db40:	791b      	ldrb	r3, [r3, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <taskComputeRc+0x920>
 800db46:	4b4a      	ldr	r3, [pc, #296]	; (800dc70 <taskComputeRc+0xa3c>)
 800db48:	78db      	ldrb	r3, [r3, #3]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d102      	bne.n	800db54 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800db4e:	4b48      	ldr	r3, [pc, #288]	; (800dc70 <taskComputeRc+0xa3c>)
 800db50:	2201      	movs	r2, #1
 800db52:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800db54:	4b47      	ldr	r3, [pc, #284]	; (800dc74 <taskComputeRc+0xa40>)
 800db56:	7a9b      	ldrb	r3, [r3, #10]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d103      	bne.n	800db64 <taskComputeRc+0x930>
 800db5c:	4b44      	ldr	r3, [pc, #272]	; (800dc70 <taskComputeRc+0xa3c>)
 800db5e:	7c9b      	ldrb	r3, [r3, #18]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d01c      	beq.n	800db9e <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800db64:	4b42      	ldr	r3, [pc, #264]	; (800dc70 <taskComputeRc+0xa3c>)
 800db66:	79db      	ldrb	r3, [r3, #7]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d168      	bne.n	800dc3e <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800db6c:	4b40      	ldr	r3, [pc, #256]	; (800dc70 <taskComputeRc+0xa3c>)
 800db6e:	2201      	movs	r2, #1
 800db70:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800db72:	4b3f      	ldr	r3, [pc, #252]	; (800dc70 <taskComputeRc+0xa3c>)
 800db74:	2200      	movs	r2, #0
 800db76:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800db78:	4b4a      	ldr	r3, [pc, #296]	; (800dca4 <taskComputeRc+0xa70>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800db7e:	494a      	ldr	r1, [pc, #296]	; (800dca8 <taskComputeRc+0xa74>)
 800db80:	484a      	ldr	r0, [pc, #296]	; (800dcac <taskComputeRc+0xa78>)
 800db82:	f7fb fad1 	bl	8009128 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800db86:	4b46      	ldr	r3, [pc, #280]	; (800dca0 <taskComputeRc+0xa6c>)
 800db88:	2202      	movs	r2, #2
 800db8a:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800db8c:	4b48      	ldr	r3, [pc, #288]	; (800dcb0 <taskComputeRc+0xa7c>)
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	461a      	mov	r2, r3
 800db92:	4b48      	ldr	r3, [pc, #288]	; (800dcb4 <taskComputeRc+0xa80>)
 800db94:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800db96:	4b36      	ldr	r3, [pc, #216]	; (800dc70 <taskComputeRc+0xa3c>)
 800db98:	2201      	movs	r2, #1
 800db9a:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800db9c:	e04f      	b.n	800dc3e <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800db9e:	4b34      	ldr	r3, [pc, #208]	; (800dc70 <taskComputeRc+0xa3c>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800dba4:	4b33      	ldr	r3, [pc, #204]	; (800dc74 <taskComputeRc+0xa40>)
 800dba6:	7adb      	ldrb	r3, [r3, #11]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d039      	beq.n	800dc20 <taskComputeRc+0x9ec>
 800dbac:	4b34      	ldr	r3, [pc, #208]	; (800dc80 <taskComputeRc+0xa4c>)
 800dbae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	bfb8      	it	lt
 800dbb6:	425b      	neglt	r3, r3
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	4b3f      	ldr	r3, [pc, #252]	; (800dcb8 <taskComputeRc+0xa84>)
 800dbbc:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d22d      	bcs.n	800dc20 <taskComputeRc+0x9ec>
 800dbc4:	4b2e      	ldr	r3, [pc, #184]	; (800dc80 <taskComputeRc+0xa4c>)
 800dbc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bfb8      	it	lt
 800dbce:	425b      	neglt	r3, r3
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	4b39      	ldr	r3, [pc, #228]	; (800dcb8 <taskComputeRc+0xa84>)
 800dbd4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d221      	bcs.n	800dc20 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800dbdc:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <taskComputeRc+0xa3c>)
 800dbde:	7a1b      	ldrb	r3, [r3, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d12c      	bne.n	800dc3e <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800dbe4:	4b22      	ldr	r3, [pc, #136]	; (800dc70 <taskComputeRc+0xa3c>)
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800dbea:	4b2e      	ldr	r3, [pc, #184]	; (800dca4 <taskComputeRc+0xa70>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800dbf0:	4b32      	ldr	r3, [pc, #200]	; (800dcbc <taskComputeRc+0xa88>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a2f      	ldr	r2, [pc, #188]	; (800dcb4 <taskComputeRc+0xa80>)
 800dbf6:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800dbf8:	4b30      	ldr	r3, [pc, #192]	; (800dcbc <taskComputeRc+0xa88>)
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <taskComputeRc+0xa80>)
 800dbfe:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800dc00:	492f      	ldr	r1, [pc, #188]	; (800dcc0 <taskComputeRc+0xa8c>)
 800dc02:	482c      	ldr	r0, [pc, #176]	; (800dcb4 <taskComputeRc+0xa80>)
 800dc04:	f7fb fa90 	bl	8009128 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800dc08:	4b25      	ldr	r3, [pc, #148]	; (800dca0 <taskComputeRc+0xa6c>)
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800dc0e:	4b28      	ldr	r3, [pc, #160]	; (800dcb0 <taskComputeRc+0xa7c>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	4b27      	ldr	r3, [pc, #156]	; (800dcb4 <taskComputeRc+0xa80>)
 800dc16:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800dc1e:	e00e      	b.n	800dc3e <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800dc20:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800dc26:	4b1f      	ldr	r3, [pc, #124]	; (800dca4 <taskComputeRc+0xa70>)
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d107      	bne.n	800dc3e <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800dc2e:	4b1d      	ldr	r3, [pc, #116]	; (800dca4 <taskComputeRc+0xa70>)
 800dc30:	2201      	movs	r2, #1
 800dc32:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800dc34:	f7fb f8f0 	bl	8008e18 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800dc38:	4b0d      	ldr	r3, [pc, #52]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800dc3e:	200c      	movs	r0, #12
 800dc40:	f7f6 fa16 	bl	8004070 <buzzer>
 800dc44:	e008      	b.n	800dc58 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800dc46:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800dc4c:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800dc52:	4b13      	ldr	r3, [pc, #76]	; (800dca0 <taskComputeRc+0xa6c>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800dc58:	4b06      	ldr	r3, [pc, #24]	; (800dc74 <taskComputeRc+0xa40>)
 800dc5a:	7b1b      	ldrb	r3, [r3, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d031      	beq.n	800dcc4 <taskComputeRc+0xa90>
 800dc60:	4b03      	ldr	r3, [pc, #12]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc62:	7c9b      	ldrb	r3, [r3, #18]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d12d      	bne.n	800dcc4 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800dc68:	4b01      	ldr	r3, [pc, #4]	; (800dc70 <taskComputeRc+0xa3c>)
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	729a      	strb	r2, [r3, #10]
 800dc6e:	e02c      	b.n	800dcca <taskComputeRc+0xa96>
 800dc70:	2000169c 	.word	0x2000169c
 800dc74:	2000173c 	.word	0x2000173c
 800dc78:	20001408 	.word	0x20001408
 800dc7c:	20001410 	.word	0x20001410
 800dc80:	200016f8 	.word	0x200016f8
 800dc84:	2000185c 	.word	0x2000185c
 800dc88:	2000141c 	.word	0x2000141c
 800dc8c:	2000140c 	.word	0x2000140c
 800dc90:	20001968 	.word	0x20001968
 800dc94:	2000196a 	.word	0x2000196a
 800dc98:	200016be 	.word	0x200016be
 800dc9c:	20001780 	.word	0x20001780
 800dca0:	2000179c 	.word	0x2000179c
 800dca4:	20000058 	.word	0x20000058
 800dca8:	2000176c 	.word	0x2000176c
 800dcac:	20001768 	.word	0x20001768
 800dcb0:	20001786 	.word	0x20001786
 800dcb4:	20001774 	.word	0x20001774
 800dcb8:	20000e08 	.word	0x20000e08
 800dcbc:	20001760 	.word	0x20001760
 800dcc0:	20001778 	.word	0x20001778
        } else {
            f.PASSTHRU_MODE = 0;
 800dcc4:	4b47      	ldr	r3, [pc, #284]	; (800dde4 <taskComputeRc+0xbb0>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800dcca:	4b46      	ldr	r3, [pc, #280]	; (800dde4 <taskComputeRc+0xbb0>)
 800dccc:	7c1b      	ldrb	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d047      	beq.n	800dd62 <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800dcd2:	4b44      	ldr	r3, [pc, #272]	; (800dde4 <taskComputeRc+0xbb0>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800dcd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dcdc:	f7f9 f99c 	bl	8007018 <feature>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d03d      	beq.n	800dd62 <taskComputeRc+0xb2e>
 800dce6:	4b40      	ldr	r3, [pc, #256]	; (800dde8 <taskComputeRc+0xbb4>)
 800dce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcec:	4619      	mov	r1, r3
 800dcee:	4b3f      	ldr	r3, [pc, #252]	; (800ddec <taskComputeRc+0xbb8>)
 800dcf0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4413      	add	r3, r2
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	4299      	cmp	r1, r3
 800dd00:	dd2f      	ble.n	800dd62 <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800dd02:	4b38      	ldr	r3, [pc, #224]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800dd08:	4b36      	ldr	r3, [pc, #216]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	613b      	str	r3, [r7, #16]
 800dd12:	e00a      	b.n	800dd2a <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800dd14:	4b36      	ldr	r3, [pc, #216]	; (800ddf0 <taskComputeRc+0xbbc>)
 800dd16:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dd1a:	b219      	sxth	r1, r3
 800dd1c:	4a35      	ldr	r2, [pc, #212]	; (800ddf4 <taskComputeRc+0xbc0>)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	3301      	adds	r3, #1
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	ddf1      	ble.n	800dd14 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800dd30:	4b2e      	ldr	r3, [pc, #184]	; (800ddec <taskComputeRc+0xbb8>)
 800dd32:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800dd36:	b21a      	sxth	r2, r3
 800dd38:	4b2e      	ldr	r3, [pc, #184]	; (800ddf4 <taskComputeRc+0xbc0>)
 800dd3a:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800dd3c:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd3e:	7adb      	ldrb	r3, [r3, #11]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10e      	bne.n	800dd62 <taskComputeRc+0xb2e>
 800dd44:	4b2c      	ldr	r3, [pc, #176]	; (800ddf8 <taskComputeRc+0xbc4>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b05      	cmp	r3, #5
 800dd4a:	d80a      	bhi.n	800dd62 <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dd4c:	4b25      	ldr	r3, [pc, #148]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800dd52:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <taskComputeRc+0xbbc>)
 800dd54:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dd58:	3b32      	subs	r3, #50	; 0x32
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	b21a      	sxth	r2, r3
 800dd5e:	4b25      	ldr	r3, [pc, #148]	; (800ddf4 <taskComputeRc+0xbc0>)
 800dd60:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dd62:	2010      	movs	r0, #16
 800dd64:	f7f9 f958 	bl	8007018 <feature>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d035      	beq.n	800ddda <taskComputeRc+0xba6>
 800dd6e:	4b1d      	ldr	r3, [pc, #116]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d031      	beq.n	800ddda <taskComputeRc+0xba6>
 800dd76:	4b1b      	ldr	r3, [pc, #108]	; (800dde4 <taskComputeRc+0xbb0>)
 800dd78:	7c1b      	ldrb	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d12d      	bne.n	800ddda <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dd7e:	7afb      	ldrb	r3, [r7, #11]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d023      	beq.n	800ddcc <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dd84:	4b1d      	ldr	r3, [pc, #116]	; (800ddfc <taskComputeRc+0xbc8>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10e      	bne.n	800ddaa <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dd8c:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <taskComputeRc+0xbbc>)
 800dd8e:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dd92:	461a      	mov	r2, r3
 800dd94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd98:	fb02 f303 	mul.w	r3, r2, r3
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	4b18      	ldr	r3, [pc, #96]	; (800de00 <taskComputeRc+0xbcc>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4413      	add	r3, r2
 800dda4:	4a15      	ldr	r2, [pc, #84]	; (800ddfc <taskComputeRc+0xbc8>)
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	e00c      	b.n	800ddc4 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800ddaa:	4b14      	ldr	r3, [pc, #80]	; (800ddfc <taskComputeRc+0xbc8>)
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	4b14      	ldr	r3, [pc, #80]	; (800de00 <taskComputeRc+0xbcc>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d206      	bcs.n	800ddc4 <taskComputeRc+0xb90>
 800ddb6:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <taskComputeRc+0xbbc>)
 800ddb8:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <taskComputeRc+0xb90>
                    mwDisarm();
 800ddc0:	f7fe ff16 	bl	800cbf0 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800ddc4:	2009      	movs	r0, #9
 800ddc6:	f7f6 f953 	bl	8004070 <buzzer>
 800ddca:	e006      	b.n	800ddda <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <taskComputeRc+0xbc8>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <taskComputeRc+0xba6>
                disarmTime = 0;
 800ddd4:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <taskComputeRc+0xbc8>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	2000169c 	.word	0x2000169c
 800dde8:	200016ce 	.word	0x200016ce
 800ddec:	20000e08 	.word	0x20000e08
 800ddf0:	2000089c 	.word	0x2000089c
 800ddf4:	200016d4 	.word	0x200016d4
 800ddf8:	20001780 	.word	0x20001780
 800ddfc:	20001844 	.word	0x20001844
 800de00:	20001bcc 	.word	0x20001bcc

0800de04 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800de0c:	4b15      	ldr	r3, [pc, #84]	; (800de64 <taskLoop+0x60>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <taskLoop+0x16>
 800de14:	2b01      	cmp	r3, #1
 800de16:	d00f      	beq.n	800de38 <taskLoop+0x34>
 800de18:	e01f      	b.n	800de5a <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800de1a:	4b12      	ldr	r3, [pc, #72]	; (800de64 <taskLoop+0x60>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3301      	adds	r3, #1
 800de20:	4a10      	ldr	r2, [pc, #64]	; (800de64 <taskLoop+0x60>)
 800de22:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800de24:	f44f 7080 	mov.w	r0, #256	; 0x100
 800de28:	f7f9 f8f6 	bl	8007018 <feature>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <taskLoop+0x34>
				gpsThread();
 800de32:	f7fa fb67 	bl	8008504 <gpsThread>
				break;
 800de36:	e010      	b.n	800de5a <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800de38:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <taskLoop+0x60>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800de3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800de42:	f7f9 f8e9 	bl	8007018 <feature>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d005      	beq.n	800de58 <taskLoop+0x54>
 800de4c:	4b06      	ldr	r3, [pc, #24]	; (800de68 <taskLoop+0x64>)
 800de4e:	7bdb      	ldrb	r3, [r3, #15]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <taskLoop+0x54>
				mwVario();
 800de54:	f7fe fee6 	bl	800cc24 <mwVario>
			break;
 800de58:	bf00      	nop
	}
    return 0;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20001958 	.word	0x20001958
 800de68:	2000169c 	.word	0x2000169c

0800de6c <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800de74:	4ba1      	ldr	r3, [pc, #644]	; (800e0fc <taskComputeImu+0x290>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b06      	cmp	r3, #6
 800de7a:	f200 82be 	bhi.w	800e3fa <taskComputeImu+0x58e>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <taskComputeImu+0x18>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800dea1 	.word	0x0800dea1
 800de88:	0800deb1 	.word	0x0800deb1
 800de8c:	0800deb1 	.word	0x0800deb1
 800de90:	0800deb1 	.word	0x0800deb1
 800de94:	0800dec9 	.word	0x0800dec9
 800de98:	0800dedb 	.word	0x0800dedb
 800de9c:	0800e3e1 	.word	0x0800e3e1
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dea0:	2101      	movs	r1, #1
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f006 fbee 	bl	8014684 <pifTask_GetDeltaTime>
 800dea8:	4603      	mov	r3, r0
 800deaa:	b29a      	uxth	r2, r3
 800deac:	4b94      	ldr	r3, [pc, #592]	; (800e100 <taskComputeImu+0x294>)
 800deae:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800deb0:	4b92      	ldr	r3, [pc, #584]	; (800e0fc <taskComputeImu+0x290>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fb fe0f 	bl	8009ad8 <computeIMU>
 800deba:	4603      	mov	r3, r0
 800debc:	4a8f      	ldr	r2, [pc, #572]	; (800e0fc <taskComputeImu+0x290>)
 800debe:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f006 fbb9 	bl	8014638 <pifTask_SetTrigger>
		break;
 800dec6:	e298      	b.n	800e3fa <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dec8:	f7fe f99a 	bl	800c200 <annexCode>
        step = 5;
 800decc:	4b8b      	ldr	r3, [pc, #556]	; (800e0fc <taskComputeImu+0x290>)
 800dece:	2205      	movs	r2, #5
 800ded0:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f006 fbb0 	bl	8014638 <pifTask_SetTrigger>
    	break;
 800ded8:	e28f      	b.n	800e3fa <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800deda:	2008      	movs	r0, #8
 800dedc:	f7f9 f854 	bl	8006f88 <sensors>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d057      	beq.n	800df96 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dee6:	4b87      	ldr	r3, [pc, #540]	; (800e104 <taskComputeImu+0x298>)
 800dee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	bfb8      	it	lt
 800def0:	425b      	neglt	r3, r3
 800def2:	b29b      	uxth	r3, r3
 800def4:	2b45      	cmp	r3, #69	; 0x45
 800def6:	d847      	bhi.n	800df88 <taskComputeImu+0x11c>
 800def8:	4b83      	ldr	r3, [pc, #524]	; (800e108 <taskComputeImu+0x29c>)
 800defa:	795b      	ldrb	r3, [r3, #5]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d043      	beq.n	800df88 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800df00:	4b82      	ldr	r3, [pc, #520]	; (800e10c <taskComputeImu+0x2a0>)
 800df02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df06:	b29a      	uxth	r2, r3
 800df08:	4b81      	ldr	r3, [pc, #516]	; (800e110 <taskComputeImu+0x2a4>)
 800df0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	b29b      	uxth	r3, r3
 800df14:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800df16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df1a:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800df1e:	da04      	bge.n	800df2a <taskComputeImu+0xbe>
                    dif += 360;
 800df20:	8afb      	ldrh	r3, [r7, #22]
 800df22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800df26:	b29b      	uxth	r3, r3
 800df28:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800df2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df2e:	2bb3      	cmp	r3, #179	; 0xb3
 800df30:	dd04      	ble.n	800df3c <taskComputeImu+0xd0>
                    dif -= 360;
 800df32:	8afb      	ldrh	r3, [r7, #22]
 800df34:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800df38:	b29b      	uxth	r3, r3
 800df3a:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800df3c:	4b75      	ldr	r3, [pc, #468]	; (800e114 <taskComputeImu+0x2a8>)
 800df3e:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800df42:	425b      	negs	r3, r3
 800df44:	b29a      	uxth	r2, r3
 800df46:	8afb      	ldrh	r3, [r7, #22]
 800df48:	fb12 f303 	smulbb	r3, r2, r3
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800df50:	4b6d      	ldr	r3, [pc, #436]	; (800e108 <taskComputeImu+0x29c>)
 800df52:	7b5b      	ldrb	r3, [r3, #13]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01d      	beq.n	800df94 <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800df58:	4b6a      	ldr	r3, [pc, #424]	; (800e104 <taskComputeImu+0x298>)
 800df5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800df5e:	b29a      	uxth	r2, r3
 800df60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df64:	496c      	ldr	r1, [pc, #432]	; (800e118 <taskComputeImu+0x2ac>)
 800df66:	7a49      	ldrb	r1, [r1, #9]
 800df68:	fb01 f303 	mul.w	r3, r1, r3
 800df6c:	496b      	ldr	r1, [pc, #428]	; (800e11c <taskComputeImu+0x2b0>)
 800df6e:	fb81 0103 	smull	r0, r1, r1, r3
 800df72:	4419      	add	r1, r3
 800df74:	1109      	asrs	r1, r1, #4
 800df76:	17db      	asrs	r3, r3, #31
 800df78:	1a5b      	subs	r3, r3, r1
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	4413      	add	r3, r2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	b21a      	sxth	r2, r3
 800df82:	4b60      	ldr	r3, [pc, #384]	; (800e104 <taskComputeImu+0x298>)
 800df84:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800df86:	e005      	b.n	800df94 <taskComputeImu+0x128>
            } else
                magHold = heading;
 800df88:	4b60      	ldr	r3, [pc, #384]	; (800e10c <taskComputeImu+0x2a0>)
 800df8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800df8e:	4b60      	ldr	r3, [pc, #384]	; (800e110 <taskComputeImu+0x2a4>)
 800df90:	801a      	strh	r2, [r3, #0]
 800df92:	e000      	b.n	800df96 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800df94:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800df96:	2004      	movs	r0, #4
 800df98:	f7f8 fff6 	bl	8006f88 <sensors>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 80e1 	beq.w	800e166 <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800dfa4:	4b58      	ldr	r3, [pc, #352]	; (800e108 <taskComputeImu+0x29c>)
 800dfa6:	799b      	ldrb	r3, [r3, #6]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 80dc 	beq.w	800e166 <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800dfae:	4b56      	ldr	r3, [pc, #344]	; (800e108 <taskComputeImu+0x29c>)
 800dfb0:	7c1b      	ldrb	r3, [r3, #16]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f040 80c4 	bne.w	800e140 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800dfb8:	4b57      	ldr	r3, [pc, #348]	; (800e118 <taskComputeImu+0x2ac>)
 800dfba:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d053      	beq.n	800e06a <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800dfc2:	4b50      	ldr	r3, [pc, #320]	; (800e104 <taskComputeImu+0x298>)
 800dfc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	4b55      	ldr	r3, [pc, #340]	; (800e120 <taskComputeImu+0x2b4>)
 800dfcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	bfb8      	it	lt
 800dfd6:	425b      	neglt	r3, r3
 800dfd8:	4a4f      	ldr	r2, [pc, #316]	; (800e118 <taskComputeImu+0x2ac>)
 800dfda:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dd22      	ble.n	800e028 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800dfe2:	4b50      	ldr	r3, [pc, #320]	; (800e124 <taskComputeImu+0x2b8>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800dfe8:	4b4f      	ldr	r3, [pc, #316]	; (800e128 <taskComputeImu+0x2bc>)
 800dfea:	2201      	movs	r2, #1
 800dfec:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800dfee:	4b45      	ldr	r3, [pc, #276]	; (800e104 <taskComputeImu+0x298>)
 800dff0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	4b43      	ldr	r3, [pc, #268]	; (800e104 <taskComputeImu+0x298>)
 800dff8:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800dffc:	4b48      	ldr	r3, [pc, #288]	; (800e120 <taskComputeImu+0x2b4>)
 800dffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e002:	4299      	cmp	r1, r3
 800e004:	dd06      	ble.n	800e014 <taskComputeImu+0x1a8>
 800e006:	4b44      	ldr	r3, [pc, #272]	; (800e118 <taskComputeImu+0x2ac>)
 800e008:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	425b      	negs	r3, r3
 800e010:	b29b      	uxth	r3, r3
 800e012:	e003      	b.n	800e01c <taskComputeImu+0x1b0>
 800e014:	4b40      	ldr	r3, [pc, #256]	; (800e118 <taskComputeImu+0x2ac>)
 800e016:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4413      	add	r3, r2
 800e01e:	b29b      	uxth	r3, r3
 800e020:	b21a      	sxth	r2, r3
 800e022:	4b38      	ldr	r3, [pc, #224]	; (800e104 <taskComputeImu+0x298>)
 800e024:	80da      	strh	r2, [r3, #6]
 800e026:	e09e      	b.n	800e166 <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800e028:	4b3f      	ldr	r3, [pc, #252]	; (800e128 <taskComputeImu+0x2bc>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d006      	beq.n	800e03e <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800e030:	4b3e      	ldr	r3, [pc, #248]	; (800e12c <taskComputeImu+0x2c0>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a3e      	ldr	r2, [pc, #248]	; (800e130 <taskComputeImu+0x2c4>)
 800e036:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800e038:	4b3b      	ldr	r3, [pc, #236]	; (800e128 <taskComputeImu+0x2bc>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800e03e:	4b38      	ldr	r3, [pc, #224]	; (800e120 <taskComputeImu+0x2b4>)
 800e040:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e044:	461a      	mov	r2, r3
 800e046:	4b3b      	ldr	r3, [pc, #236]	; (800e134 <taskComputeImu+0x2c8>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4413      	add	r3, r2
 800e04c:	4a31      	ldr	r2, [pc, #196]	; (800e114 <taskComputeImu+0x2a8>)
 800e04e:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800e052:	4611      	mov	r1, r2
 800e054:	4a2f      	ldr	r2, [pc, #188]	; (800e114 <taskComputeImu+0x2a8>)
 800e056:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7f5 fe7a 	bl	8003d54 <constrain>
 800e060:	4603      	mov	r3, r0
 800e062:	b21a      	sxth	r2, r3
 800e064:	4b27      	ldr	r3, [pc, #156]	; (800e104 <taskComputeImu+0x298>)
 800e066:	80da      	strh	r2, [r3, #6]
 800e068:	e07d      	b.n	800e166 <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800e06a:	4b26      	ldr	r3, [pc, #152]	; (800e104 <taskComputeImu+0x298>)
 800e06c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e070:	461a      	mov	r2, r3
 800e072:	4b2b      	ldr	r3, [pc, #172]	; (800e120 <taskComputeImu+0x2b4>)
 800e074:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bfb8      	it	lt
 800e07e:	425b      	neglt	r3, r3
 800e080:	4a25      	ldr	r2, [pc, #148]	; (800e118 <taskComputeImu+0x2ac>)
 800e082:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800e086:	4293      	cmp	r3, r2
 800e088:	dd14      	ble.n	800e0b4 <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800e08a:	4b1e      	ldr	r3, [pc, #120]	; (800e104 <taskComputeImu+0x298>)
 800e08c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e090:	461a      	mov	r2, r3
 800e092:	4b23      	ldr	r3, [pc, #140]	; (800e120 <taskComputeImu+0x2b4>)
 800e094:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e098:	1ad3      	subs	r3, r2, r3
 800e09a:	0fda      	lsrs	r2, r3, #31
 800e09c:	4413      	add	r3, r2
 800e09e:	105b      	asrs	r3, r3, #1
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	4b25      	ldr	r3, [pc, #148]	; (800e138 <taskComputeImu+0x2cc>)
 800e0a4:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800e0a6:	4b25      	ldr	r3, [pc, #148]	; (800e13c <taskComputeImu+0x2d0>)
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800e0ac:	4b1e      	ldr	r3, [pc, #120]	; (800e128 <taskComputeImu+0x2bc>)
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	701a      	strb	r2, [r3, #0]
 800e0b2:	e00d      	b.n	800e0d0 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800e0b4:	4b1c      	ldr	r3, [pc, #112]	; (800e128 <taskComputeImu+0x2bc>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d009      	beq.n	800e0d0 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800e0bc:	4b1b      	ldr	r3, [pc, #108]	; (800e12c <taskComputeImu+0x2c0>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a1b      	ldr	r2, [pc, #108]	; (800e130 <taskComputeImu+0x2c4>)
 800e0c2:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800e0c4:	4b1d      	ldr	r3, [pc, #116]	; (800e13c <taskComputeImu+0x2d0>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800e0ca:	4b17      	ldr	r3, [pc, #92]	; (800e128 <taskComputeImu+0x2bc>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800e0d0:	4b13      	ldr	r3, [pc, #76]	; (800e120 <taskComputeImu+0x2b4>)
 800e0d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4b16      	ldr	r3, [pc, #88]	; (800e134 <taskComputeImu+0x2c8>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4413      	add	r3, r2
 800e0de:	4a0d      	ldr	r2, [pc, #52]	; (800e114 <taskComputeImu+0x2a8>)
 800e0e0:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800e0e4:	4611      	mov	r1, r2
 800e0e6:	4a0b      	ldr	r2, [pc, #44]	; (800e114 <taskComputeImu+0x2a8>)
 800e0e8:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f5 fe31 	bl	8003d54 <constrain>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	b21a      	sxth	r2, r3
 800e0f6:	4b03      	ldr	r3, [pc, #12]	; (800e104 <taskComputeImu+0x298>)
 800e0f8:	80da      	strh	r2, [r3, #6]
 800e0fa:	e034      	b.n	800e166 <taskComputeImu+0x2fa>
 800e0fc:	2000195c 	.word	0x2000195c
 800e100:	200016bc 	.word	0x200016bc
 800e104:	200016f8 	.word	0x200016f8
 800e108:	2000169c 	.word	0x2000169c
 800e10c:	20001968 	.word	0x20001968
 800e110:	2000196a 	.word	0x2000196a
 800e114:	2000089c 	.word	0x2000089c
 800e118:	20000e08 	.word	0x20000e08
 800e11c:	88888889 	.word	0x88888889
 800e120:	2000185c 	.word	0x2000185c
 800e124:	2000141c 	.word	0x2000141c
 800e128:	20001960 	.word	0x20001960
 800e12c:	20001408 	.word	0x20001408
 800e130:	20001410 	.word	0x20001410
 800e134:	2000140c 	.word	0x2000140c
 800e138:	20001414 	.word	0x20001414
 800e13c:	20001418 	.word	0x20001418
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800e140:	4bb0      	ldr	r3, [pc, #704]	; (800e404 <taskComputeImu+0x598>)
 800e142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e146:	b29a      	uxth	r2, r3
 800e148:	4baf      	ldr	r3, [pc, #700]	; (800e408 <taskComputeImu+0x59c>)
 800e14a:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800e14e:	b299      	uxth	r1, r3
 800e150:	4bae      	ldr	r3, [pc, #696]	; (800e40c <taskComputeImu+0x5a0>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	b29b      	uxth	r3, r3
 800e156:	fb11 f303 	smulbb	r3, r1, r3
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	4413      	add	r3, r2
 800e15e:	b29b      	uxth	r3, r3
 800e160:	b21a      	sxth	r2, r3
 800e162:	4ba8      	ldr	r3, [pc, #672]	; (800e404 <taskComputeImu+0x598>)
 800e164:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800e166:	4baa      	ldr	r3, [pc, #680]	; (800e410 <taskComputeImu+0x5a4>)
 800e168:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d014      	beq.n	800e19a <taskComputeImu+0x32e>
 800e170:	4ba8      	ldr	r3, [pc, #672]	; (800e414 <taskComputeImu+0x5a8>)
 800e172:	78db      	ldrb	r3, [r3, #3]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d103      	bne.n	800e180 <taskComputeImu+0x314>
 800e178:	4ba6      	ldr	r3, [pc, #664]	; (800e414 <taskComputeImu+0x5a8>)
 800e17a:	791b      	ldrb	r3, [r3, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00c      	beq.n	800e19a <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800e180:	4ba0      	ldr	r3, [pc, #640]	; (800e404 <taskComputeImu+0x598>)
 800e182:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e186:	b29a      	uxth	r2, r3
 800e188:	4ba3      	ldr	r3, [pc, #652]	; (800e418 <taskComputeImu+0x5ac>)
 800e18a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4413      	add	r3, r2
 800e192:	b29b      	uxth	r3, r3
 800e194:	b21a      	sxth	r2, r3
 800e196:	4b9b      	ldr	r3, [pc, #620]	; (800e404 <taskComputeImu+0x598>)
 800e198:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800e19a:	2020      	movs	r0, #32
 800e19c:	f7f8 fef4 	bl	8006f88 <sensors>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 8115 	beq.w	800e3d2 <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1a8:	4b9a      	ldr	r3, [pc, #616]	; (800e414 <taskComputeImu+0x5a8>)
 800e1aa:	79db      	ldrb	r3, [r3, #7]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d104      	bne.n	800e1ba <taskComputeImu+0x34e>
 800e1b0:	4b98      	ldr	r3, [pc, #608]	; (800e414 <taskComputeImu+0x5a8>)
 800e1b2:	7a1b      	ldrb	r3, [r3, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 8103 	beq.w	800e3c0 <taskComputeImu+0x554>
 800e1ba:	4b96      	ldr	r3, [pc, #600]	; (800e414 <taskComputeImu+0x5a8>)
 800e1bc:	7b1b      	ldrb	r3, [r3, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 80fe 	beq.w	800e3c0 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800e1c4:	4b95      	ldr	r3, [pc, #596]	; (800e41c <taskComputeImu+0x5b0>)
 800e1c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1ca:	ee07 3a90 	vmov	s15, r3
 800e1ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1d2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e420 <taskComputeImu+0x5b4>
 800e1d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1da:	eeb0 0a67 	vmov.f32	s0, s15
 800e1de:	f014 fee3 	bl	8022fa8 <sinf>
 800e1e2:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e1e6:	4b8d      	ldr	r3, [pc, #564]	; (800e41c <taskComputeImu+0x5b0>)
 800e1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1ec:	ee07 3a90 	vmov	s15, r3
 800e1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1f4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e420 <taskComputeImu+0x5b4>
 800e1f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1fc:	eeb0 0a67 	vmov.f32	s0, s15
 800e200:	f014 fe4e 	bl	8022ea0 <cosf>
 800e204:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e208:	4b82      	ldr	r3, [pc, #520]	; (800e414 <taskComputeImu+0x5a8>)
 800e20a:	7c1b      	ldrb	r3, [r3, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f040 80d4 	bne.w	800e3ba <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800e212:	4b7f      	ldr	r3, [pc, #508]	; (800e410 <taskComputeImu+0x5a4>)
 800e214:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 8087 	beq.w	800e32c <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e21e:	4b81      	ldr	r3, [pc, #516]	; (800e424 <taskComputeImu+0x5b8>)
 800e220:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e224:	461a      	mov	r2, r3
 800e226:	4b80      	ldr	r3, [pc, #512]	; (800e428 <taskComputeImu+0x5bc>)
 800e228:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fb fb70 	bl	8009914 <wrap_18000>
 800e234:	4b76      	ldr	r3, [pc, #472]	; (800e410 <taskComputeImu+0x5a4>)
 800e236:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e23a:	425b      	negs	r3, r3
 800e23c:	4a74      	ldr	r2, [pc, #464]	; (800e410 <taskComputeImu+0x5a4>)
 800e23e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e242:	4619      	mov	r1, r3
 800e244:	f7f5 fd86 	bl	8003d54 <constrain>
 800e248:	4601      	mov	r1, r0
 800e24a:	4b77      	ldr	r3, [pc, #476]	; (800e428 <taskComputeImu+0x5bc>)
 800e24c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e250:	b29a      	uxth	r2, r3
 800e252:	b28b      	uxth	r3, r1
 800e254:	4413      	add	r3, r2
 800e256:	b29b      	uxth	r3, r3
 800e258:	b21a      	sxth	r2, r3
 800e25a:	4b73      	ldr	r3, [pc, #460]	; (800e428 <taskComputeImu+0x5bc>)
 800e25c:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e25e:	4b71      	ldr	r3, [pc, #452]	; (800e424 <taskComputeImu+0x5b8>)
 800e260:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e264:	461a      	mov	r2, r3
 800e266:	4b70      	ldr	r3, [pc, #448]	; (800e428 <taskComputeImu+0x5bc>)
 800e268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fb fb50 	bl	8009914 <wrap_18000>
 800e274:	4b66      	ldr	r3, [pc, #408]	; (800e410 <taskComputeImu+0x5a4>)
 800e276:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e27a:	425b      	negs	r3, r3
 800e27c:	4a64      	ldr	r2, [pc, #400]	; (800e410 <taskComputeImu+0x5a4>)
 800e27e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e282:	4619      	mov	r1, r3
 800e284:	f7f5 fd66 	bl	8003d54 <constrain>
 800e288:	4601      	mov	r1, r0
 800e28a:	4b67      	ldr	r3, [pc, #412]	; (800e428 <taskComputeImu+0x5bc>)
 800e28c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e290:	b29a      	uxth	r2, r3
 800e292:	b28b      	uxth	r3, r1
 800e294:	4413      	add	r3, r2
 800e296:	b29b      	uxth	r3, r3
 800e298:	b21a      	sxth	r2, r3
 800e29a:	4b63      	ldr	r3, [pc, #396]	; (800e428 <taskComputeImu+0x5bc>)
 800e29c:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e29e:	4b62      	ldr	r3, [pc, #392]	; (800e428 <taskComputeImu+0x5bc>)
 800e2a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2a4:	ee07 3a90 	vmov	s15, r3
 800e2a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e2ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800e2b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2b4:	4b5c      	ldr	r3, [pc, #368]	; (800e428 <taskComputeImu+0x5bc>)
 800e2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2ba:	ee07 3a90 	vmov	s15, r3
 800e2be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e2c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2ce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2da:	ee17 3a90 	vmov	r3, s15
 800e2de:	b21a      	sxth	r2, r3
 800e2e0:	4b52      	ldr	r3, [pc, #328]	; (800e42c <taskComputeImu+0x5c0>)
 800e2e2:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e2e4:	4b50      	ldr	r3, [pc, #320]	; (800e428 <taskComputeImu+0x5bc>)
 800e2e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2ea:	ee07 3a90 	vmov	s15, r3
 800e2ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e2f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e2f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2fa:	4b4b      	ldr	r3, [pc, #300]	; (800e428 <taskComputeImu+0x5bc>)
 800e2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e300:	ee07 3a90 	vmov	s15, r3
 800e304:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e308:	edd7 7a03 	vldr	s15, [r7, #12]
 800e30c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e310:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e314:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e31c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e320:	ee17 3a90 	vmov	r3, s15
 800e324:	b21a      	sxth	r2, r3
 800e326:	4b41      	ldr	r3, [pc, #260]	; (800e42c <taskComputeImu+0x5c0>)
 800e328:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e32a:	e052      	b.n	800e3d2 <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e32c:	4b3d      	ldr	r3, [pc, #244]	; (800e424 <taskComputeImu+0x5b8>)
 800e32e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e332:	ee07 3a90 	vmov	s15, r3
 800e336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e33a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e342:	4b38      	ldr	r3, [pc, #224]	; (800e424 <taskComputeImu+0x5b8>)
 800e344:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e348:	ee07 3a90 	vmov	s15, r3
 800e34c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e350:	edd7 7a04 	vldr	s15, [r7, #16]
 800e354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e35c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e368:	ee17 3a90 	vmov	r3, s15
 800e36c:	b21a      	sxth	r2, r3
 800e36e:	4b2f      	ldr	r3, [pc, #188]	; (800e42c <taskComputeImu+0x5c0>)
 800e370:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e372:	4b2c      	ldr	r3, [pc, #176]	; (800e424 <taskComputeImu+0x5b8>)
 800e374:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e378:	ee07 3a90 	vmov	s15, r3
 800e37c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e380:	edd7 7a04 	vldr	s15, [r7, #16]
 800e384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e388:	4b26      	ldr	r3, [pc, #152]	; (800e424 <taskComputeImu+0x5b8>)
 800e38a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e38e:	ee07 3a90 	vmov	s15, r3
 800e392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e396:	edd7 7a03 	vldr	s15, [r7, #12]
 800e39a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e39e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e3a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3ae:	ee17 3a90 	vmov	r3, s15
 800e3b2:	b21a      	sxth	r2, r3
 800e3b4:	4b1d      	ldr	r3, [pc, #116]	; (800e42c <taskComputeImu+0x5c0>)
 800e3b6:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e3b8:	e00b      	b.n	800e3d2 <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e3ba:	f7f8 ff5f 	bl	800727c <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e3be:	e008      	b.n	800e3d2 <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e3c0:	4b1a      	ldr	r3, [pc, #104]	; (800e42c <taskComputeImu+0x5c0>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e3c6:	4b19      	ldr	r3, [pc, #100]	; (800e42c <taskComputeImu+0x5c0>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e3cc:	4b17      	ldr	r3, [pc, #92]	; (800e42c <taskComputeImu+0x5c0>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e3d2:	4b17      	ldr	r3, [pc, #92]	; (800e430 <taskComputeImu+0x5c4>)
 800e3d4:	2206      	movs	r2, #6
 800e3d6:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f006 f92d 	bl	8014638 <pifTask_SetTrigger>
    	break;
 800e3de:	e00c      	b.n	800e3fa <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e3e0:	4b14      	ldr	r3, [pc, #80]	; (800e434 <taskComputeImu+0x5c8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4798      	blx	r3

        mixTable();
 800e3e6:	f7fd fb71 	bl	800bacc <mixTable>
        writeServos();
 800e3ea:	f7fc ffc7 	bl	800b37c <writeServos>
        writeMotors();
 800e3ee:	f7fd f8fd 	bl	800b5ec <writeMotors>
        step = 0;
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <taskComputeImu+0x5c4>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]
    	break;
 800e3f8:	bf00      	nop
	}

    return 0;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	200016f8 	.word	0x200016f8
 800e408:	2000089c 	.word	0x2000089c
 800e40c:	2000140c 	.word	0x2000140c
 800e410:	20000e08 	.word	0x20000e08
 800e414:	2000169c 	.word	0x2000169c
 800e418:	20001424 	.word	0x20001424
 800e41c:	20001968 	.word	0x20001968
 800e420:	3c8efa35 	.word	0x3c8efa35
 800e424:	20001794 	.word	0x20001794
 800e428:	20001798 	.word	0x20001798
 800e42c:	2000178c 	.word	0x2000178c
 800e430:	2000195c 	.word	0x2000195c
 800e434:	20000050 	.word	0x20000050

0800e438 <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e43c:	4b04      	ldr	r3, [pc, #16]	; (800e450 <mspFrameRecieve+0x18>)
 800e43e:	2200      	movs	r2, #0
 800e440:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e442:	4b04      	ldr	r3, [pc, #16]	; (800e454 <mspFrameRecieve+0x1c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4618      	mov	r0, r3
 800e448:	f006 f8f6 	bl	8014638 <pifTask_SetTrigger>
}
 800e44c:	bf00      	nop
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	200016ce 	.word	0x200016ce
 800e454:	200014f8 	.word	0x200014f8

0800e458 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e466:	4878      	ldr	r0, [pc, #480]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e468:	f00a fece 	bl	8019208 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e46c:	4b77      	ldr	r3, [pc, #476]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e46e:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e472:	4b76      	ldr	r3, [pc, #472]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e474:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e478:	4b74      	ldr	r3, [pc, #464]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e47a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e47e:	4872      	ldr	r0, [pc, #456]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e480:	f00a fed0 	bl	8019224 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e484:	4b71      	ldr	r3, [pc, #452]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e486:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e48a:	4b6f      	ldr	r3, [pc, #444]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e48c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e490:	e010      	b.n	800e4b4 <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	6852      	ldr	r2, [r2, #4]
 800e49a:	4611      	mov	r1, r2
 800e49c:	486a      	ldr	r0, [pc, #424]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e49e:	4798      	blx	r3
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e4a6:	2001      	movs	r0, #1
 800e4a8:	f7f8 fd84 	bl	8006fb4 <sensorsSet>
    		break;
 800e4ac:	e006      	b.n	800e4bc <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1ea      	bne.n	800e492 <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e4bc:	4b62      	ldr	r3, [pc, #392]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e4be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <sensorsAutodetect+0x70>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e0ba      	b.n	800e63e <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e4c8:	4b5f      	ldr	r3, [pc, #380]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e4d2:	2002      	movs	r0, #2
 800e4d4:	f7f8 fd6e 	bl	8006fb4 <sensorsSet>
 800e4d8:	e018      	b.n	800e50c <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d015      	beq.n	800e50c <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e4e0:	e010      	b.n	800e504 <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	6852      	ldr	r2, [r2, #4]
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	4856      	ldr	r0, [pc, #344]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e4ee:	4798      	blx	r3
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d003      	beq.n	800e4fe <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e4f6:	2002      	movs	r0, #2
 800e4f8:	f7f8 fd5c 	bl	8006fb4 <sensorsSet>
        		break;
 800e4fc:	e006      	b.n	800e50c <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	3308      	adds	r3, #8
 800e502:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1ea      	bne.n	800e4e2 <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e50c:	4b4e      	ldr	r3, [pc, #312]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e50e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e516:	2004      	movs	r0, #4
 800e518:	f7f8 fd4c 	bl	8006fb4 <sensorsSet>
 800e51c:	e018      	b.n	800e550 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d015      	beq.n	800e550 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e524:	e010      	b.n	800e548 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6852      	ldr	r2, [r2, #4]
 800e52e:	4611      	mov	r1, r2
 800e530:	4845      	ldr	r0, [pc, #276]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e532:	4798      	blx	r3
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e53a:	2004      	movs	r0, #4
 800e53c:	f7f8 fd3a 	bl	8006fb4 <sensorsSet>
				break;
 800e540:	e006      	b.n	800e550 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3308      	adds	r3, #8
 800e546:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1ea      	bne.n	800e526 <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e550:	2002      	movs	r0, #2
 800e552:	f7f8 fd19 	bl	8006f88 <sensors>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d008      	beq.n	800e56e <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e55c:	4b3a      	ldr	r3, [pc, #232]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e55e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e562:	4a3a      	ldr	r2, [pc, #232]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e564:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e568:	4611      	mov	r1, r2
 800e56a:	4837      	ldr	r0, [pc, #220]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e56c:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e56e:	4b36      	ldr	r3, [pc, #216]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e572:	4a36      	ldr	r2, [pc, #216]	; (800e64c <sensorsAutodetect+0x1f4>)
 800e574:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e578:	4611      	mov	r1, r2
 800e57a:	4833      	ldr	r0, [pc, #204]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e57c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e57e:	4b32      	ldr	r3, [pc, #200]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e588:	2008      	movs	r0, #8
 800e58a:	f7f8 fd13 	bl	8006fb4 <sensorsSet>
 800e58e:	e018      	b.n	800e5c2 <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d015      	beq.n	800e5c2 <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e596:	e010      	b.n	800e5ba <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	6852      	ldr	r2, [r2, #4]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4829      	ldr	r0, [pc, #164]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e5a4:	4798      	blx	r3
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e5ac:	2008      	movs	r0, #8
 800e5ae:	f7f8 fd01 	bl	8006fb4 <sensorsSet>
				break;
 800e5b2:	e006      	b.n	800e5c2 <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1ea      	bne.n	800e598 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e5c2:	4b23      	ldr	r3, [pc, #140]	; (800e650 <sensorsAutodetect+0x1f8>)
 800e5c4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5c8:	4a22      	ldr	r2, [pc, #136]	; (800e654 <sensorsAutodetect+0x1fc>)
 800e5ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e5ce:	1152      	asrs	r2, r2, #5
 800e5d0:	17db      	asrs	r3, r3, #31
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e5d6:	4b1e      	ldr	r3, [pc, #120]	; (800e650 <sensorsAutodetect+0x1f8>)
 800e5d8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5dc:	4a1d      	ldr	r2, [pc, #116]	; (800e654 <sensorsAutodetect+0x1fc>)
 800e5de:	fb82 1203 	smull	r1, r2, r2, r3
 800e5e2:	1151      	asrs	r1, r2, #5
 800e5e4:	17da      	asrs	r2, r3, #31
 800e5e6:	1a8a      	subs	r2, r1, r2
 800e5e8:	2164      	movs	r1, #100	; 0x64
 800e5ea:	fb01 f202 	mul.w	r2, r1, r2
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e5f2:	2008      	movs	r0, #8
 800e5f4:	f7f8 fcc8 	bl	8006f88 <sensors>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d019      	beq.n	800e632 <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e5fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e60a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e60e:	ee07 3a90 	vmov	s15, r3
 800e612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e616:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e658 <sensorsAutodetect+0x200>
 800e61a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e61e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e622:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e62a:	4b07      	ldr	r3, [pc, #28]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e62c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800e630:	e004      	b.n	800e63c <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800e632:	4b05      	ldr	r3, [pc, #20]	; (800e648 <sensorsAutodetect+0x1f0>)
 800e634:	f04f 0200 	mov.w	r2, #0
 800e638:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800e63c:	2301      	movs	r3, #1
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	20000060 	.word	0x20000060
 800e64c:	2000089c 	.word	0x2000089c
 800e650:	20000e08 	.word	0x20000e08
 800e654:	51eb851f 	.word	0x51eb851f
 800e658:	3c888889 	.word	0x3c888889

0800e65c <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e666:	4b2a      	ldr	r3, [pc, #168]	; (800e710 <RSSI_getValue+0xb4>)
 800e668:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d029      	beq.n	800e6c4 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <RSSI_getValue+0xb4>)
 800e672:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e676:	3303      	adds	r3, #3
 800e678:	4a26      	ldr	r2, [pc, #152]	; (800e714 <RSSI_getValue+0xb8>)
 800e67a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e67e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e680:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e684:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e688:	4a21      	ldr	r2, [pc, #132]	; (800e710 <RSSI_getValue+0xb4>)
 800e68a:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e68e:	2100      	movs	r1, #0
 800e690:	4618      	mov	r0, r3
 800e692:	f7f5 fb5f 	bl	8003d54 <constrain>
 800e696:	ee07 0a90 	vmov	s15, r0
 800e69a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e69e:	4b1c      	ldr	r3, [pc, #112]	; (800e710 <RSSI_getValue+0xb4>)
 800e6a0:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e6a4:	ee07 3a90 	vmov	s15, r3
 800e6a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6b0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e718 <RSSI_getValue+0xbc>
 800e6b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6bc:	ee17 3a90 	vmov	r3, s15
 800e6c0:	80fb      	strh	r3, [r7, #6]
 800e6c2:	e020      	b.n	800e706 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e6c4:	4b12      	ldr	r3, [pc, #72]	; (800e710 <RSSI_getValue+0xb4>)
 800e6c6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d01b      	beq.n	800e706 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e6ce:	2003      	movs	r0, #3
 800e6d0:	f7f2 fd6a 	bl	80011a8 <actGetAdcChannel>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <RSSI_getValue+0xb4>)
 800e6da:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e6de:	1ad2      	subs	r2, r2, r3
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	029b      	lsls	r3, r3, #10
 800e6e4:	1a9b      	subs	r3, r3, r2
 800e6e6:	4a0a      	ldr	r2, [pc, #40]	; (800e710 <RSSI_getValue+0xb4>)
 800e6e8:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6f0:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e6f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e6f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f5 fb29 	bl	8003d54 <constrain>
 800e702:	4603      	mov	r3, r0
 800e704:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e706:	88fb      	ldrh	r3, [r7, #6]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	2000089c 	.word	0x2000089c
 800e714:	200016d4 	.word	0x200016d4
 800e718:	447fc000 	.word	0x447fc000

0800e71c <batteryInit>:

void batteryInit(void)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e722:	f04f 0300 	mov.w	r3, #0
 800e726:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e728:	2300      	movs	r3, #0
 800e72a:	607b      	str	r3, [r7, #4]
 800e72c:	e018      	b.n	800e760 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e72e:	f7f2 fd4d 	bl	80011cc <actGetBatteryVoltage>
 800e732:	eeb0 7a40 	vmov.f32	s14, s0
 800e736:	4b35      	ldr	r3, [pc, #212]	; (800e80c <batteryInit+0xf0>)
 800e738:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e73c:	ee07 3a90 	vmov	s15, r3
 800e740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e744:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e748:	ed97 7a00 	vldr	s14, [r7]
 800e74c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e750:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e754:	200a      	movs	r0, #10
 800e756:	f002 fd49 	bl	80111ec <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	3301      	adds	r3, #1
 800e75e:	607b      	str	r3, [r7, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b1f      	cmp	r3, #31
 800e764:	d9e3      	bls.n	800e72e <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e766:	ed97 7a00 	vldr	s14, [r7]
 800e76a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e810 <batteryInit+0xf4>
 800e76e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e772:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e776:	edd7 7a00 	vldr	s15, [r7]
 800e77a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e77e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e782:	ee16 0a90 	vmov	r0, s13
 800e786:	f7f1 fe93 	bl	80004b0 <__aeabi_f2d>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4921      	ldr	r1, [pc, #132]	; (800e814 <batteryInit+0xf8>)
 800e790:	2002      	movs	r0, #2
 800e792:	f004 feb5 	bl	8013500 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e796:	2301      	movs	r3, #1
 800e798:	607b      	str	r3, [r7, #4]
 800e79a:	e014      	b.n	800e7c6 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e79c:	4b1b      	ldr	r3, [pc, #108]	; (800e80c <batteryInit+0xf0>)
 800e79e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	fb02 f303 	mul.w	r3, r2, r3
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	ed97 7a00 	vldr	s14, [r7]
 800e7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	d406      	bmi.n	800e7ce <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	607b      	str	r3, [r7, #4]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b07      	cmp	r3, #7
 800e7ca:	d9e7      	bls.n	800e79c <batteryInit+0x80>
 800e7cc:	e000      	b.n	800e7d0 <batteryInit+0xb4>
            break;
 800e7ce:	bf00      	nop
    }
    batteryCellCount = i;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	4b10      	ldr	r3, [pc, #64]	; (800e818 <batteryInit+0xfc>)
 800e7d6:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	; (800e80c <batteryInit+0xf0>)
 800e7da:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	fb12 f303 	smulbb	r3, r2, r3
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	4b0c      	ldr	r3, [pc, #48]	; (800e81c <batteryInit+0x100>)
 800e7ec:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e7ee:	4b07      	ldr	r3, [pc, #28]	; (800e80c <batteryInit+0xf0>)
 800e7f0:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	fb12 f303 	smulbb	r3, r2, r3
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	4b07      	ldr	r3, [pc, #28]	; (800e820 <batteryInit+0x104>)
 800e802:	801a      	strh	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	2000089c 	.word	0x2000089c
 800e810:	42000000 	.word	0x42000000
 800e814:	08026f14 	.word	0x08026f14
 800e818:	20000054 	.word	0x20000054
 800e81c:	2000183e 	.word	0x2000183e
 800e820:	20001840 	.word	0x20001840

0800e824 <ACC_Common>:

static void ACC_Common(void)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e82a:	4b4e      	ldr	r3, [pc, #312]	; (800e964 <ACC_Common+0x140>)
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d06c      	beq.n	800e90c <ACC_Common+0xe8>
        for (axis = 0; axis < 3; axis++) {
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
 800e836:	e025      	b.n	800e884 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e838:	4b4a      	ldr	r3, [pc, #296]	; (800e964 <ACC_Common+0x140>)
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e840:	d104      	bne.n	800e84c <ACC_Common+0x28>
                a[axis] = 0;
 800e842:	4a49      	ldr	r2, [pc, #292]	; (800e968 <ACC_Common+0x144>)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2100      	movs	r1, #0
 800e848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e84c:	4a46      	ldr	r2, [pc, #280]	; (800e968 <ACC_Common+0x144>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e854:	4945      	ldr	r1, [pc, #276]	; (800e96c <ACC_Common+0x148>)
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e85c:	441a      	add	r2, r3
 800e85e:	4942      	ldr	r1, [pc, #264]	; (800e968 <ACC_Common+0x144>)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e866:	4a41      	ldr	r2, [pc, #260]	; (800e96c <ACC_Common+0x148>)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2100      	movs	r1, #0
 800e86c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e870:	4a3f      	ldr	r2, [pc, #252]	; (800e970 <ACC_Common+0x14c>)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	33b4      	adds	r3, #180	; 0xb4
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	4413      	add	r3, r2
 800e87a:	2200      	movs	r2, #0
 800e87c:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	3301      	adds	r3, #1
 800e882:	607b      	str	r3, [r7, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b02      	cmp	r3, #2
 800e888:	ddd6      	ble.n	800e838 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e88a:	4b36      	ldr	r3, [pc, #216]	; (800e964 <ACC_Common+0x140>)
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d136      	bne.n	800e900 <ACC_Common+0xdc>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e892:	4b35      	ldr	r3, [pc, #212]	; (800e968 <ACC_Common+0x144>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	33c8      	adds	r3, #200	; 0xc8
 800e898:	4a36      	ldr	r2, [pc, #216]	; (800e974 <ACC_Common+0x150>)
 800e89a:	fb82 1203 	smull	r1, r2, r2, r3
 800e89e:	11d2      	asrs	r2, r2, #7
 800e8a0:	17db      	asrs	r3, r3, #31
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	b21a      	sxth	r2, r3
 800e8a6:	4b32      	ldr	r3, [pc, #200]	; (800e970 <ACC_Common+0x14c>)
 800e8a8:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e8ac:	4b2e      	ldr	r3, [pc, #184]	; (800e968 <ACC_Common+0x144>)
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	33c8      	adds	r3, #200	; 0xc8
 800e8b2:	4a30      	ldr	r2, [pc, #192]	; (800e974 <ACC_Common+0x150>)
 800e8b4:	fb82 1203 	smull	r1, r2, r2, r3
 800e8b8:	11d2      	asrs	r2, r2, #7
 800e8ba:	17db      	asrs	r3, r3, #31
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	4b2b      	ldr	r3, [pc, #172]	; (800e970 <ACC_Common+0x14c>)
 800e8c2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800e8c6:	4b28      	ldr	r3, [pc, #160]	; (800e968 <ACC_Common+0x144>)
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	33c8      	adds	r3, #200	; 0xc8
 800e8cc:	4a29      	ldr	r2, [pc, #164]	; (800e974 <ACC_Common+0x150>)
 800e8ce:	fb82 1203 	smull	r1, r2, r2, r3
 800e8d2:	11d2      	asrs	r2, r2, #7
 800e8d4:	17db      	asrs	r3, r3, #31
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	4b27      	ldr	r3, [pc, #156]	; (800e978 <ACC_Common+0x154>)
 800e8dc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	b21a      	sxth	r2, r3
 800e8e6:	4b22      	ldr	r3, [pc, #136]	; (800e970 <ACC_Common+0x14c>)
 800e8e8:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e8ec:	4b23      	ldr	r3, [pc, #140]	; (800e97c <ACC_Common+0x158>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8f2:	4b22      	ldr	r3, [pc, #136]	; (800e97c <ACC_Common+0x158>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	f7f7 ffaa 	bl	8006854 <writeEEPROM>
        }
        calibratingA--;
 800e900:	4b18      	ldr	r3, [pc, #96]	; (800e964 <ACC_Common+0x140>)
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	3b01      	subs	r3, #1
 800e906:	b29a      	uxth	r2, r3
 800e908:	4b16      	ldr	r3, [pc, #88]	; (800e964 <ACC_Common+0x140>)
 800e90a:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e90c:	2004      	movs	r0, #4
 800e90e:	f7f8 fb83 	bl	8007018 <feature>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 80cb 	beq.w	800eab0 <ACC_Common+0x28c>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e91a:	4b19      	ldr	r3, [pc, #100]	; (800e980 <ACC_Common+0x15c>)
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	2b32      	cmp	r3, #50	; 0x32
 800e920:	d118      	bne.n	800e954 <ACC_Common+0x130>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e922:	4b13      	ldr	r3, [pc, #76]	; (800e970 <ACC_Common+0x14c>)
 800e924:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e928:	4b16      	ldr	r3, [pc, #88]	; (800e984 <ACC_Common+0x160>)
 800e92a:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e92c:	4b10      	ldr	r3, [pc, #64]	; (800e970 <ACC_Common+0x14c>)
 800e92e:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e932:	4b14      	ldr	r3, [pc, #80]	; (800e984 <ACC_Common+0x160>)
 800e934:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e936:	4b0e      	ldr	r3, [pc, #56]	; (800e970 <ACC_Common+0x14c>)
 800e938:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e93c:	4b11      	ldr	r3, [pc, #68]	; (800e984 <ACC_Common+0x160>)
 800e93e:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e940:	4b0e      	ldr	r3, [pc, #56]	; (800e97c <ACC_Common+0x158>)
 800e942:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e946:	4b10      	ldr	r3, [pc, #64]	; (800e988 <ACC_Common+0x164>)
 800e948:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e94a:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <ACC_Common+0x158>)
 800e94c:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e950:	4b0d      	ldr	r3, [pc, #52]	; (800e988 <ACC_Common+0x164>)
 800e952:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <ACC_Common+0x15c>)
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d06e      	beq.n	800ea3a <ACC_Common+0x216>
            for (axis = 0; axis < 3; axis++) {
 800e95c:	2300      	movs	r3, #0
 800e95e:	607b      	str	r3, [r7, #4]
 800e960:	e039      	b.n	800e9d6 <ACC_Common+0x1b2>
 800e962:	bf00      	nop
 800e964:	20001962 	.word	0x20001962
 800e968:	2000197c 	.word	0x2000197c
 800e96c:	200013c4 	.word	0x200013c4
 800e970:	2000089c 	.word	0x2000089c
 800e974:	51eb851f 	.word	0x51eb851f
 800e978:	20000060 	.word	0x20000060
 800e97c:	20000e08 	.word	0x20000e08
 800e980:	2000183c 	.word	0x2000183c
 800e984:	20001988 	.word	0x20001988
 800e988:	20001990 	.word	0x20001990
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e98c:	4b5e      	ldr	r3, [pc, #376]	; (800eb08 <ACC_Common+0x2e4>)
 800e98e:	881b      	ldrh	r3, [r3, #0]
 800e990:	2b32      	cmp	r3, #50	; 0x32
 800e992:	d104      	bne.n	800e99e <ACC_Common+0x17a>
                    b[axis] = 0;
 800e994:	4a5d      	ldr	r2, [pc, #372]	; (800eb0c <ACC_Common+0x2e8>)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2100      	movs	r1, #0
 800e99a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e99e:	4a5b      	ldr	r2, [pc, #364]	; (800eb0c <ACC_Common+0x2e8>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9a6:	495a      	ldr	r1, [pc, #360]	; (800eb10 <ACC_Common+0x2ec>)
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e9ae:	441a      	add	r2, r3
 800e9b0:	4956      	ldr	r1, [pc, #344]	; (800eb0c <ACC_Common+0x2e8>)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e9b8:	4a55      	ldr	r2, [pc, #340]	; (800eb10 <ACC_Common+0x2ec>)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e9c2:	4a54      	ldr	r2, [pc, #336]	; (800eb14 <ACC_Common+0x2f0>)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	33b4      	adds	r3, #180	; 0xb4
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	607b      	str	r3, [r7, #4]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	ddd7      	ble.n	800e98c <ACC_Common+0x168>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e9dc:	4b4a      	ldr	r3, [pc, #296]	; (800eb08 <ACC_Common+0x2e4>)
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d124      	bne.n	800ea2e <ACC_Common+0x20a>
                AccInflightCalibrationActive = false;
 800e9e4:	4b4c      	ldr	r3, [pc, #304]	; (800eb18 <ACC_Common+0x2f4>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e9ea:	4b4c      	ldr	r3, [pc, #304]	; (800eb1c <ACC_Common+0x2f8>)
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e9f0:	200a      	movs	r0, #10
 800e9f2:	f7f5 fb3d 	bl	8004070 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e9f6:	4b4a      	ldr	r3, [pc, #296]	; (800eb20 <ACC_Common+0x2fc>)
 800e9f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9fc:	4b45      	ldr	r3, [pc, #276]	; (800eb14 <ACC_Common+0x2f0>)
 800e9fe:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800ea02:	4b47      	ldr	r3, [pc, #284]	; (800eb20 <ACC_Common+0x2fc>)
 800ea04:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea08:	4b42      	ldr	r3, [pc, #264]	; (800eb14 <ACC_Common+0x2f0>)
 800ea0a:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800ea0e:	4b44      	ldr	r3, [pc, #272]	; (800eb20 <ACC_Common+0x2fc>)
 800ea10:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ea14:	4b3f      	ldr	r3, [pc, #252]	; (800eb14 <ACC_Common+0x2f0>)
 800ea16:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800ea1a:	4b42      	ldr	r3, [pc, #264]	; (800eb24 <ACC_Common+0x300>)
 800ea1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ea20:	4b41      	ldr	r3, [pc, #260]	; (800eb28 <ACC_Common+0x304>)
 800ea22:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800ea24:	4b3f      	ldr	r3, [pc, #252]	; (800eb24 <ACC_Common+0x300>)
 800ea26:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea2a:	4b3f      	ldr	r3, [pc, #252]	; (800eb28 <ACC_Common+0x304>)
 800ea2c:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800ea2e:	4b36      	ldr	r3, [pc, #216]	; (800eb08 <ACC_Common+0x2e4>)
 800ea30:	881b      	ldrh	r3, [r3, #0]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	4b34      	ldr	r3, [pc, #208]	; (800eb08 <ACC_Common+0x2e4>)
 800ea38:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800ea3a:	4b3c      	ldr	r3, [pc, #240]	; (800eb2c <ACC_Common+0x308>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d036      	beq.n	800eab0 <ACC_Common+0x28c>
            AccInflightCalibrationSavetoEEProm = false;
 800ea42:	4b3a      	ldr	r3, [pc, #232]	; (800eb2c <ACC_Common+0x308>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800ea48:	4b30      	ldr	r3, [pc, #192]	; (800eb0c <ACC_Common+0x2e8>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4a38      	ldr	r2, [pc, #224]	; (800eb30 <ACC_Common+0x30c>)
 800ea4e:	fb82 1203 	smull	r1, r2, r2, r3
 800ea52:	1112      	asrs	r2, r2, #4
 800ea54:	17db      	asrs	r3, r3, #31
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	b21a      	sxth	r2, r3
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	; (800eb14 <ACC_Common+0x2f0>)
 800ea5c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800ea60:	4b2a      	ldr	r3, [pc, #168]	; (800eb0c <ACC_Common+0x2e8>)
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	4a32      	ldr	r2, [pc, #200]	; (800eb30 <ACC_Common+0x30c>)
 800ea66:	fb82 1203 	smull	r1, r2, r2, r3
 800ea6a:	1112      	asrs	r2, r2, #4
 800ea6c:	17db      	asrs	r3, r3, #31
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	b21a      	sxth	r2, r3
 800ea72:	4b28      	ldr	r3, [pc, #160]	; (800eb14 <ACC_Common+0x2f0>)
 800ea74:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800ea78:	4b24      	ldr	r3, [pc, #144]	; (800eb0c <ACC_Common+0x2e8>)
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	4a2c      	ldr	r2, [pc, #176]	; (800eb30 <ACC_Common+0x30c>)
 800ea7e:	fb82 1203 	smull	r1, r2, r2, r3
 800ea82:	1112      	asrs	r2, r2, #4
 800ea84:	17db      	asrs	r3, r3, #31
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	4b2a      	ldr	r3, [pc, #168]	; (800eb34 <ACC_Common+0x310>)
 800ea8c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	b21a      	sxth	r2, r3
 800ea96:	4b1f      	ldr	r3, [pc, #124]	; (800eb14 <ACC_Common+0x2f0>)
 800ea98:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800ea9c:	4b22      	ldr	r3, [pc, #136]	; (800eb28 <ACC_Common+0x304>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800eaa2:	4b21      	ldr	r3, [pc, #132]	; (800eb28 <ACC_Common+0x304>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	2001      	movs	r0, #1
 800eaac:	f7f7 fed2 	bl	8006854 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800eab0:	4b17      	ldr	r3, [pc, #92]	; (800eb10 <ACC_Common+0x2ec>)
 800eab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	4b16      	ldr	r3, [pc, #88]	; (800eb14 <ACC_Common+0x2f0>)
 800eaba:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	b21a      	sxth	r2, r3
 800eac6:	4b12      	ldr	r3, [pc, #72]	; (800eb10 <ACC_Common+0x2ec>)
 800eac8:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800eaca:	4b11      	ldr	r3, [pc, #68]	; (800eb10 <ACC_Common+0x2ec>)
 800eacc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <ACC_Common+0x2f0>)
 800ead4:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800ead8:	b29b      	uxth	r3, r3
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	b29b      	uxth	r3, r3
 800eade:	b21a      	sxth	r2, r3
 800eae0:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <ACC_Common+0x2ec>)
 800eae2:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800eae4:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <ACC_Common+0x2ec>)
 800eae6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <ACC_Common+0x2f0>)
 800eaee:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	b21a      	sxth	r2, r3
 800eafa:	4b05      	ldr	r3, [pc, #20]	; (800eb10 <ACC_Common+0x2ec>)
 800eafc:	809a      	strh	r2, [r3, #4]
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	2000183c 	.word	0x2000183c
 800eb0c:	20001994 	.word	0x20001994
 800eb10:	200013c4 	.word	0x200013c4
 800eb14:	2000089c 	.word	0x2000089c
 800eb18:	2000183b 	.word	0x2000183b
 800eb1c:	20001839 	.word	0x20001839
 800eb20:	20001988 	.word	0x20001988
 800eb24:	20001990 	.word	0x20001990
 800eb28:	20000e08 	.word	0x20000e08
 800eb2c:	2000183a 	.word	0x2000183a
 800eb30:	51eb851f 	.word	0x51eb851f
 800eb34:	20000060 	.word	0x20000060

0800eb38 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800eb3c:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <ACC_getADC+0x24>)
 800eb3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb42:	4907      	ldr	r1, [pc, #28]	; (800eb60 <ACC_getADC+0x28>)
 800eb44:	4805      	ldr	r0, [pc, #20]	; (800eb5c <ACC_getADC+0x24>)
 800eb46:	4798      	blx	r3
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <ACC_getADC+0x1e>
    	ACC_Common();
 800eb4e:	f7ff fe69 	bl	800e824 <ACC_Common>
    	return TRUE;
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <ACC_getADC+0x20>
    }
	return FALSE;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	20000060 	.word	0x20000060
 800eb60:	200013c4 	.word	0x200013c4

0800eb64 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800eb6a:	4b18      	ldr	r3, [pc, #96]	; (800ebcc <Baro_Common+0x68>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800eb72:	4b17      	ldr	r3, [pc, #92]	; (800ebd0 <Baro_Common+0x6c>)
 800eb74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	db01      	blt.n	800eb84 <Baro_Common+0x20>
        indexplus1 = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800eb84:	4b11      	ldr	r3, [pc, #68]	; (800ebcc <Baro_Common+0x68>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a12      	ldr	r2, [pc, #72]	; (800ebd4 <Baro_Common+0x70>)
 800eb8a:	6812      	ldr	r2, [r2, #0]
 800eb8c:	4912      	ldr	r1, [pc, #72]	; (800ebd8 <Baro_Common+0x74>)
 800eb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800eb92:	4b0e      	ldr	r3, [pc, #56]	; (800ebcc <Baro_Common+0x68>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a10      	ldr	r2, [pc, #64]	; (800ebd8 <Baro_Common+0x74>)
 800eb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <Baro_Common+0x78>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4413      	add	r3, r2
 800eba4:	4a0d      	ldr	r2, [pc, #52]	; (800ebdc <Baro_Common+0x78>)
 800eba6:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800eba8:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <Baro_Common+0x78>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	490a      	ldr	r1, [pc, #40]	; (800ebd8 <Baro_Common+0x74>)
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ebb4:	1a9b      	subs	r3, r3, r2
 800ebb6:	4a09      	ldr	r2, [pc, #36]	; (800ebdc <Baro_Common+0x78>)
 800ebb8:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800ebba:	4a04      	ldr	r2, [pc, #16]	; (800ebcc <Baro_Common+0x68>)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6013      	str	r3, [r2, #0]
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	200019a0 	.word	0x200019a0
 800ebd0:	20000e08 	.word	0x20000e08
 800ebd4:	2000196c 	.word	0x2000196c
 800ebd8:	200019a4 	.word	0x200019a4
 800ebdc:	200013f4 	.word	0x200013f4

0800ebe0 <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	ed87 0a01 	vstr	s0, [r7, #4]
 800ebea:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800ebee:	edd7 7a01 	vldr	s15, [r7, #4]
 800ebf2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ec38 <evtBaroRead+0x58>
 800ebf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebfe:	ee17 2a90 	vmov	r2, s15
 800ec02:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <evtBaroRead+0x5c>)
 800ec04:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800ec06:	edd7 7a00 	vldr	s15, [r7]
 800ec0a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ec38 <evtBaroRead+0x58>
 800ec0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec16:	ee17 2a90 	vmov	r2, s15
 800ec1a:	4b09      	ldr	r3, [pc, #36]	; (800ec40 <evtBaroRead+0x60>)
 800ec1c:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ec1e:	f7ff ffa1 	bl	800eb64 <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800ec22:	4b08      	ldr	r3, [pc, #32]	; (800ec44 <evtBaroRead+0x64>)
 800ec24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f005 fd05 	bl	8014638 <pifTask_SetTrigger>
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	42c80000 	.word	0x42c80000
 800ec3c:	2000196c 	.word	0x2000196c
 800ec40:	20001970 	.word	0x20001970
 800ec44:	20000060 	.word	0x20000060

0800ec48 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	611a      	str	r2, [r3, #16]
}
 800ec56:	bf00      	nop
 800ec58:	370c      	adds	r7, #12
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d10b      	bne.n	800ec98 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	605a      	str	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685a      	ldr	r2, [r3, #4]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f04f 0200 	mov.w	r2, #0
 800ec94:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ec96:	e036      	b.n	800ed06 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	ed93 7a00 	vldr	s14, [r3]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	edd3 7a00 	vldr	s15, [r3]
 800eca4:	edd7 6a00 	vldr	s13, [r7]
 800eca8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ecb8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ecbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	ed93 7a02 	vldr	s14, [r3, #8]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	edd3 7a00 	vldr	s15, [r3]
 800ecd2:	edd7 6a00 	vldr	s13, [r7]
 800ecd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	edd3 7a01 	vldr	s15, [r3, #4]
 800ece0:	ed97 6a00 	vldr	s12, [r7]
 800ece4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ece8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	685a      	ldr	r2, [r3, #4]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	609a      	str	r2, [r3, #8]
}
 800ed06:	bf00      	nop
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
	...

0800ed14 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	dd0c      	ble.n	800ed3e <devVariance+0x2a>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	ed93 7a03 	vldr	s14, [r3, #12]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	ee07 3a90 	vmov	s15, r3
 800ed34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ed3c:	e001      	b.n	800ed42 <devVariance+0x2e>
 800ed3e:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ed54 <devVariance+0x40>
 800ed42:	eef0 7a66 	vmov.f32	s15, s13
}
 800ed46:	eeb0 0a67 	vmov.f32	s0, s15
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	00000000 	.word	0x00000000

0800ed58 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff ffd7 	bl	800ed14 <devVariance>
 800ed66:	eef0 7a40 	vmov.f32	s15, s0
 800ed6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ed6e:	f014 f9e7 	bl	8023140 <sqrtf>
 800ed72:	eef0 7a40 	vmov.f32	s15, s0
}
 800ed76:	eeb0 0a67 	vmov.f32	s0, s15
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <GYRO_Common>:

static void GYRO_Common(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800ed86:	4b75      	ldr	r3, [pc, #468]	; (800ef5c <GYRO_Common+0x1dc>)
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 80c6 	beq.w	800ef1c <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800ed90:	2300      	movs	r3, #0
 800ed92:	607b      	str	r3, [r7, #4]
 800ed94:	e0a3      	b.n	800eede <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800ed96:	4b71      	ldr	r3, [pc, #452]	; (800ef5c <GYRO_Common+0x1dc>)
 800ed98:	881b      	ldrh	r3, [r3, #0]
 800ed9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed9e:	d10e      	bne.n	800edbe <GYRO_Common+0x3e>
                g[axis] = 0;
 800eda0:	4a6f      	ldr	r2, [pc, #444]	; (800ef60 <GYRO_Common+0x1e0>)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2100      	movs	r1, #0
 800eda6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4613      	mov	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4a6b      	ldr	r2, [pc, #428]	; (800ef64 <GYRO_Common+0x1e4>)
 800edb6:	4413      	add	r3, r2
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff ff45 	bl	800ec48 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800edbe:	4a68      	ldr	r2, [pc, #416]	; (800ef60 <GYRO_Common+0x1e0>)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edc6:	4968      	ldr	r1, [pc, #416]	; (800ef68 <GYRO_Common+0x1e8>)
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800edce:	441a      	add	r2, r3
 800edd0:	4963      	ldr	r1, [pc, #396]	; (800ef60 <GYRO_Common+0x1e0>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	4613      	mov	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4a60      	ldr	r2, [pc, #384]	; (800ef64 <GYRO_Common+0x1e4>)
 800ede4:	441a      	add	r2, r3
 800ede6:	4960      	ldr	r1, [pc, #384]	; (800ef68 <GYRO_Common+0x1e8>)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800edee:	ee07 3a90 	vmov	s15, r3
 800edf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edf6:	eeb0 0a67 	vmov.f32	s0, s15
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7ff ff31 	bl	800ec62 <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ee00:	4a59      	ldr	r2, [pc, #356]	; (800ef68 <GYRO_Common+0x1e8>)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2100      	movs	r1, #0
 800ee06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ee0a:	4a58      	ldr	r2, [pc, #352]	; (800ef6c <GYRO_Common+0x1ec>)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ee14:	4b51      	ldr	r3, [pc, #324]	; (800ef5c <GYRO_Common+0x1dc>)
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d15d      	bne.n	800eed8 <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4413      	add	r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	4a4f      	ldr	r2, [pc, #316]	; (800ef64 <GYRO_Common+0x1e4>)
 800ee28:	4413      	add	r3, r2
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff ff94 	bl	800ed58 <devStandardDeviation>
 800ee30:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ee34:	4b4e      	ldr	r3, [pc, #312]	; (800ef70 <GYRO_Common+0x1f0>)
 800ee36:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d036      	beq.n	800eeac <GYRO_Common+0x12c>
 800ee3e:	4b4c      	ldr	r3, [pc, #304]	; (800ef70 <GYRO_Common+0x1f0>)
 800ee40:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee44:	ee07 3a90 	vmov	s15, r3
 800ee48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee4c:	ed97 7a00 	vldr	s14, [r7]
 800ee50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee58:	dd28      	ble.n	800eeac <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ee5a:	6838      	ldr	r0, [r7, #0]
 800ee5c:	f7f1 fb28 	bl	80004b0 <__aeabi_f2d>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4942      	ldr	r1, [pc, #264]	; (800ef70 <GYRO_Common+0x1f0>)
 800ee66:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ee6a:	9102      	str	r1, [sp, #8]
 800ee6c:	e9cd 2300 	strd	r2, r3, [sp]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	4940      	ldr	r1, [pc, #256]	; (800ef74 <GYRO_Common+0x1f4>)
 800ee74:	2002      	movs	r0, #2
 800ee76:	f004 fb43 	bl	8013500 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ee7a:	4b38      	ldr	r3, [pc, #224]	; (800ef5c <GYRO_Common+0x1dc>)
 800ee7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee80:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ee82:	4838      	ldr	r0, [pc, #224]	; (800ef64 <GYRO_Common+0x1e4>)
 800ee84:	f7ff fee0 	bl	800ec48 <devClear>
                    devClear(&var[1]);
 800ee88:	483b      	ldr	r0, [pc, #236]	; (800ef78 <GYRO_Common+0x1f8>)
 800ee8a:	f7ff fedd 	bl	800ec48 <devClear>
                    devClear(&var[2]);
 800ee8e:	483b      	ldr	r0, [pc, #236]	; (800ef7c <GYRO_Common+0x1fc>)
 800ee90:	f7ff feda 	bl	800ec48 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ee94:	4b32      	ldr	r3, [pc, #200]	; (800ef60 <GYRO_Common+0x1e0>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	609a      	str	r2, [r3, #8]
 800ee9a:	4b31      	ldr	r3, [pc, #196]	; (800ef60 <GYRO_Common+0x1e0>)
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	4a30      	ldr	r2, [pc, #192]	; (800ef60 <GYRO_Common+0x1e0>)
 800eea0:	6053      	str	r3, [r2, #4]
 800eea2:	4b2f      	ldr	r3, [pc, #188]	; (800ef60 <GYRO_Common+0x1e0>)
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	4a2e      	ldr	r2, [pc, #184]	; (800ef60 <GYRO_Common+0x1e0>)
 800eea8:	6013      	str	r3, [r2, #0]
                    continue;
 800eeaa:	e015      	b.n	800eed8 <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800eeac:	4a2c      	ldr	r2, [pc, #176]	; (800ef60 <GYRO_Common+0x1e0>)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eeb8:	4a31      	ldr	r2, [pc, #196]	; (800ef80 <GYRO_Common+0x200>)
 800eeba:	fb82 1203 	smull	r1, r2, r2, r3
 800eebe:	1192      	asrs	r2, r2, #6
 800eec0:	17db      	asrs	r3, r3, #31
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	b219      	sxth	r1, r3
 800eec6:	4a29      	ldr	r2, [pc, #164]	; (800ef6c <GYRO_Common+0x1ec>)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800eece:	2201      	movs	r2, #1
 800eed0:	210f      	movs	r1, #15
 800eed2:	200a      	movs	r0, #10
 800eed4:	f7fd f95e 	bl	800c194 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3301      	adds	r3, #1
 800eedc:	607b      	str	r3, [r7, #4]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	f77f af58 	ble.w	800ed96 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800eee6:	4b1d      	ldr	r3, [pc, #116]	; (800ef5c <GYRO_Common+0x1dc>)
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	3b01      	subs	r3, #1
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <GYRO_Common+0x1dc>)
 800eef0:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800eef2:	4b1a      	ldr	r3, [pc, #104]	; (800ef5c <GYRO_Common+0x1dc>)
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d110      	bne.n	800ef1c <GYRO_Common+0x19c>
 800eefa:	4b1c      	ldr	r3, [pc, #112]	; (800ef6c <GYRO_Common+0x1ec>)
 800eefc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef00:	461a      	mov	r2, r3
 800ef02:	4b1a      	ldr	r3, [pc, #104]	; (800ef6c <GYRO_Common+0x1ec>)
 800ef04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4b18      	ldr	r3, [pc, #96]	; (800ef6c <GYRO_Common+0x1ec>)
 800ef0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef10:	9300      	str	r3, [sp, #0]
 800ef12:	460b      	mov	r3, r1
 800ef14:	491b      	ldr	r1, [pc, #108]	; (800ef84 <GYRO_Common+0x204>)
 800ef16:	2002      	movs	r0, #2
 800ef18:	f004 faf2 	bl	8013500 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	607b      	str	r3, [r7, #4]
 800ef20:	e013      	b.n	800ef4a <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800ef22:	4a11      	ldr	r2, [pc, #68]	; (800ef68 <GYRO_Common+0x1e8>)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	490f      	ldr	r1, [pc, #60]	; (800ef6c <GYRO_Common+0x1ec>)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	1ad3      	subs	r3, r2, r3
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	b219      	sxth	r1, r3
 800ef3c:	4a0a      	ldr	r2, [pc, #40]	; (800ef68 <GYRO_Common+0x1e8>)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3301      	adds	r3, #1
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	dde8      	ble.n	800ef22 <GYRO_Common+0x1a2>
}
 800ef50:	bf00      	nop
 800ef52:	bf00      	nop
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20001966 	.word	0x20001966
 800ef60:	20001a64 	.word	0x20001a64
 800ef64:	20001a70 	.word	0x20001a70
 800ef68:	200013bc 	.word	0x200013bc
 800ef6c:	2000143c 	.word	0x2000143c
 800ef70:	2000089c 	.word	0x2000089c
 800ef74:	08026f24 	.word	0x08026f24
 800ef78:	20001a84 	.word	0x20001a84
 800ef7c:	20001a98 	.word	0x20001a98
 800ef80:	10624dd3 	.word	0x10624dd3
 800ef84:	08026f3c 	.word	0x08026f3c

0800ef88 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800ef8c:	4b07      	ldr	r3, [pc, #28]	; (800efac <Gyro_getADC+0x24>)
 800ef8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef92:	4907      	ldr	r1, [pc, #28]	; (800efb0 <Gyro_getADC+0x28>)
 800ef94:	4805      	ldr	r0, [pc, #20]	; (800efac <Gyro_getADC+0x24>)
 800ef96:	4798      	blx	r3
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <Gyro_getADC+0x1e>
    	GYRO_Common();
 800ef9e:	f7ff feef 	bl	800ed80 <GYRO_Common>
    	return TRUE;
 800efa2:	2301      	movs	r3, #1
 800efa4:	e000      	b.n	800efa8 <Gyro_getADC+0x20>
    }
    return FALSE;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	20000060 	.word	0x20000060
 800efb0:	200013bc 	.word	0x200013bc

0800efb4 <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800efb8:	2001      	movs	r0, #1
 800efba:	f7f3 f88b 	bl	80020d4 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800efbe:	4b0d      	ldr	r3, [pc, #52]	; (800eff4 <Mag_init+0x40>)
 800efc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800efc4:	4a0c      	ldr	r2, [pc, #48]	; (800eff8 <Mag_init+0x44>)
 800efc6:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800efca:	4611      	mov	r1, r2
 800efcc:	4809      	ldr	r0, [pc, #36]	; (800eff4 <Mag_init+0x40>)
 800efce:	4798      	blx	r3
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <Mag_init+0x30>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800efd6:	4b09      	ldr	r3, [pc, #36]	; (800effc <Mag_init+0x48>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	461a      	mov	r2, r3
 800efdc:	4908      	ldr	r1, [pc, #32]	; (800f000 <Mag_init+0x4c>)
 800efde:	2002      	movs	r0, #2
 800efe0:	f004 fa8e 	bl	8013500 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800efe4:	2000      	movs	r0, #0
 800efe6:	f7f3 f875 	bl	80020d4 <actLed1State>
    magInit = 1;
 800efea:	4b06      	ldr	r3, [pc, #24]	; (800f004 <Mag_init+0x50>)
 800efec:	2201      	movs	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
}
 800eff0:	bf00      	nop
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20000060 	.word	0x20000060
 800eff8:	2000089c 	.word	0x2000089c
 800effc:	20001bb5 	.word	0x20001bb5
 800f000:	08026f50 	.word	0x08026f50
 800f004:	20001974 	.word	0x20001974

0800f008 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800f010:	4b65      	ldr	r3, [pc, #404]	; (800f1a8 <taskMagGetAdc+0x1a0>)
 800f012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f016:	4965      	ldr	r1, [pc, #404]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f018:	4863      	ldr	r0, [pc, #396]	; (800f1a8 <taskMagGetAdc+0x1a0>)
 800f01a:	4798      	blx	r3
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d104      	bne.n	800f02c <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f005 fb08 	bl	8014638 <pifTask_SetTrigger>
    	return 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	e0b8      	b.n	800f19e <taskMagGetAdc+0x196>
    }

    if (f.CALIBRATE_MAG) {
 800f02c:	4b60      	ldr	r3, [pc, #384]	; (800f1b0 <taskMagGetAdc+0x1a8>)
 800f02e:	7b9b      	ldrb	r3, [r3, #14]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d027      	beq.n	800f084 <taskMagGetAdc+0x7c>
        tCal = (*pif_act_timer1us)();
 800f034:	4b5f      	ldr	r3, [pc, #380]	; (800f1b4 <taskMagGetAdc+0x1ac>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4798      	blx	r3
 800f03a:	4603      	mov	r3, r0
 800f03c:	4a5e      	ldr	r2, [pc, #376]	; (800f1b8 <taskMagGetAdc+0x1b0>)
 800f03e:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800f040:	2300      	movs	r3, #0
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	e018      	b.n	800f078 <taskMagGetAdc+0x70>
            mcfg.magZero[axis] = 0;
 800f046:	4a5d      	ldr	r2, [pc, #372]	; (800f1bc <taskMagGetAdc+0x1b4>)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	33b8      	adds	r3, #184	; 0xb8
 800f04c:	2100      	movs	r1, #0
 800f04e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800f052:	4a56      	ldr	r2, [pc, #344]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f05a:	4a59      	ldr	r2, [pc, #356]	; (800f1c0 <taskMagGetAdc+0x1b8>)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800f062:	4a52      	ldr	r2, [pc, #328]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f06a:	4a56      	ldr	r2, [pc, #344]	; (800f1c4 <taskMagGetAdc+0x1bc>)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3301      	adds	r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d9e3      	bls.n	800f046 <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800f07e:	4b4c      	ldr	r3, [pc, #304]	; (800f1b0 <taskMagGetAdc+0x1a8>)
 800f080:	2200      	movs	r2, #0
 800f082:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800f084:	4b50      	ldr	r3, [pc, #320]	; (800f1c8 <taskMagGetAdc+0x1c0>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d026      	beq.n	800f0da <taskMagGetAdc+0xd2>
        magADC[X] -= mcfg.magZero[X];
 800f08c:	4b47      	ldr	r3, [pc, #284]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f08e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f092:	b29a      	uxth	r2, r3
 800f094:	4b49      	ldr	r3, [pc, #292]	; (800f1bc <taskMagGetAdc+0x1b4>)
 800f096:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	b21a      	sxth	r2, r3
 800f0a2:	4b42      	ldr	r3, [pc, #264]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f0a4:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800f0a6:	4b41      	ldr	r3, [pc, #260]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f0a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	4b43      	ldr	r3, [pc, #268]	; (800f1bc <taskMagGetAdc+0x1b4>)
 800f0b0:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	b21a      	sxth	r2, r3
 800f0bc:	4b3b      	ldr	r3, [pc, #236]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f0be:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800f0c0:	4b3a      	ldr	r3, [pc, #232]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f0c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	4b3c      	ldr	r3, [pc, #240]	; (800f1bc <taskMagGetAdc+0x1b4>)
 800f0ca:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	b21a      	sxth	r2, r3
 800f0d6:	4b35      	ldr	r3, [pc, #212]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f0d8:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800f0da:	4b37      	ldr	r3, [pc, #220]	; (800f1b8 <taskMagGetAdc+0x1b0>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d05c      	beq.n	800f19c <taskMagGetAdc+0x194>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800f0e2:	4b34      	ldr	r3, [pc, #208]	; (800f1b4 <taskMagGetAdc+0x1ac>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4798      	blx	r3
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	4b33      	ldr	r3, [pc, #204]	; (800f1b8 <taskMagGetAdc+0x1b0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	4a36      	ldr	r2, [pc, #216]	; (800f1cc <taskMagGetAdc+0x1c4>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d82f      	bhi.n	800f156 <taskMagGetAdc+0x14e>
            actLed0Toggle();
 800f0f6:	f7f2 ffd7 	bl	80020a8 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60fb      	str	r3, [r7, #12]
 800f0fe:	e026      	b.n	800f14e <taskMagGetAdc+0x146>
                if (magADC[axis] < magZeroTempMin[axis])
 800f100:	4a2a      	ldr	r2, [pc, #168]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f108:	492d      	ldr	r1, [pc, #180]	; (800f1c0 <taskMagGetAdc+0x1b8>)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f110:	429a      	cmp	r2, r3
 800f112:	da07      	bge.n	800f124 <taskMagGetAdc+0x11c>
                    magZeroTempMin[axis] = magADC[axis];
 800f114:	4a25      	ldr	r2, [pc, #148]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f11c:	4a28      	ldr	r2, [pc, #160]	; (800f1c0 <taskMagGetAdc+0x1b8>)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800f124:	4a21      	ldr	r2, [pc, #132]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f12c:	4925      	ldr	r1, [pc, #148]	; (800f1c4 <taskMagGetAdc+0x1bc>)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f134:	429a      	cmp	r2, r3
 800f136:	dd07      	ble.n	800f148 <taskMagGetAdc+0x140>
                    magZeroTempMax[axis] = magADC[axis];
 800f138:	4a1c      	ldr	r2, [pc, #112]	; (800f1ac <taskMagGetAdc+0x1a4>)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f140:	4a20      	ldr	r2, [pc, #128]	; (800f1c4 <taskMagGetAdc+0x1bc>)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	3301      	adds	r3, #1
 800f14c:	60fb      	str	r3, [r7, #12]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d9d5      	bls.n	800f100 <taskMagGetAdc+0xf8>
 800f154:	e022      	b.n	800f19c <taskMagGetAdc+0x194>
            }
        } else {
            tCal = 0;
 800f156:	4b18      	ldr	r3, [pc, #96]	; (800f1b8 <taskMagGetAdc+0x1b0>)
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800f15c:	2300      	movs	r3, #0
 800f15e:	60fb      	str	r3, [r7, #12]
 800f160:	e015      	b.n	800f18e <taskMagGetAdc+0x186>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800f162:	4a17      	ldr	r2, [pc, #92]	; (800f1c0 <taskMagGetAdc+0x1b8>)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f16a:	4619      	mov	r1, r3
 800f16c:	4a15      	ldr	r2, [pc, #84]	; (800f1c4 <taskMagGetAdc+0x1bc>)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f174:	440b      	add	r3, r1
 800f176:	0fda      	lsrs	r2, r3, #31
 800f178:	4413      	add	r3, r2
 800f17a:	105b      	asrs	r3, r3, #1
 800f17c:	b219      	sxth	r1, r3
 800f17e:	4a0f      	ldr	r2, [pc, #60]	; (800f1bc <taskMagGetAdc+0x1b4>)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	33b8      	adds	r3, #184	; 0xb8
 800f184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	3301      	adds	r3, #1
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d9e6      	bls.n	800f162 <taskMagGetAdc+0x15a>
            writeEEPROM(1, true);
 800f194:	2101      	movs	r1, #1
 800f196:	2001      	movs	r0, #1
 800f198:	f7f7 fb5c 	bl	8006854 <writeEEPROM>
        }
    }
    return 0;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000060 	.word	0x20000060
 800f1ac:	200013d4 	.word	0x200013d4
 800f1b0:	2000169c 	.word	0x2000169c
 800f1b4:	20001bdc 	.word	0x20001bdc
 800f1b8:	20001aac 	.word	0x20001aac
 800f1bc:	2000089c 	.word	0x2000089c
 800f1c0:	20001ab0 	.word	0x20001ab0
 800f1c4:	20001ab8 	.word	0x20001ab8
 800f1c8:	20001974 	.word	0x20001974
 800f1cc:	01c9c37f 	.word	0x01c9c37f

0800f1d0 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f1de:	dd02      	ble.n	800f1e6 <getSonarDistance+0x16>
		distance = -1;
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f1e6:	4a0d      	ldr	r2, [pc, #52]	; (800f21c <getSonarDistance+0x4c>)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f1ec:	4b0c      	ldr	r3, [pc, #48]	; (800f220 <getSonarDistance+0x50>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7f1 f94b 	bl	800048c <__aeabi_i2d>
 800f1f6:	f04f 0200 	mov.w	r2, #0
 800f1fa:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <getSonarDistance+0x54>)
 800f1fc:	f7f1 fada 	bl	80007b4 <__aeabi_ddiv>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4610      	mov	r0, r2
 800f206:	4619      	mov	r1, r3
 800f208:	f7f1 fc8c 	bl	8000b24 <__aeabi_d2f>
 800f20c:	4603      	mov	r3, r0
 800f20e:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f212:	eeb0 0a67 	vmov.f32	s0, s15
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	2000002c 	.word	0x2000002c
 800f220:	20001970 	.word	0x20001970
 800f224:	40590000 	.word	0x40590000

0800f228 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f230:	4b15      	ldr	r3, [pc, #84]	; (800f288 <getSonarDistanceFilter+0x60>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	1d3a      	adds	r2, r7, #4
 800f236:	4611      	mov	r1, r2
 800f238:	4618      	mov	r0, r3
 800f23a:	f006 f865 	bl	8015308 <pifNoiseFilter_Process>
 800f23e:	4603      	mov	r3, r0
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f24a:	dd02      	ble.n	800f252 <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f24c:	f04f 33ff 	mov.w	r3, #4294967295
 800f250:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4a0d      	ldr	r2, [pc, #52]	; (800f28c <getSonarDistanceFilter+0x64>)
 800f256:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f258:	4b0d      	ldr	r3, [pc, #52]	; (800f290 <getSonarDistanceFilter+0x68>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f1 f915 	bl	800048c <__aeabi_i2d>
 800f262:	f04f 0200 	mov.w	r2, #0
 800f266:	4b0b      	ldr	r3, [pc, #44]	; (800f294 <getSonarDistanceFilter+0x6c>)
 800f268:	f7f1 faa4 	bl	80007b4 <__aeabi_ddiv>
 800f26c:	4602      	mov	r2, r0
 800f26e:	460b      	mov	r3, r1
 800f270:	4610      	mov	r0, r2
 800f272:	4619      	mov	r1, r3
 800f274:	f7f1 fc56 	bl	8000b24 <__aeabi_d2f>
 800f278:	4603      	mov	r3, r0
 800f27a:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f27e:	eeb0 0a67 	vmov.f32	s0, s15
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	20001978 	.word	0x20001978
 800f28c:	2000002c 	.word	0x2000002c
 800f290:	20001970 	.word	0x20001970
 800f294:	40590000 	.word	0x40590000

0800f298 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f2a4:	78fb      	ldrb	r3, [r7, #3]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d002      	beq.n	800f2b0 <Sonar_init+0x18>
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	d00b      	beq.n	800f2c6 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f2ae:	e01e      	b.n	800f2ee <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f2b0:	2105      	movs	r1, #5
 800f2b2:	4820      	ldr	r0, [pc, #128]	; (800f334 <Sonar_init+0x9c>)
 800f2b4:	f006 f9d8 	bl	8015668 <pifNoiseFilterInt32_Init>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d014      	beq.n	800f2e8 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f2be:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <Sonar_init+0xa0>)
 800f2c0:	4a1c      	ldr	r2, [pc, #112]	; (800f334 <Sonar_init+0x9c>)
 800f2c2:	601a      	str	r2, [r3, #0]
		break;
 800f2c4:	e010      	b.n	800f2e8 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f2c6:	2107      	movs	r1, #7
 800f2c8:	481a      	ldr	r0, [pc, #104]	; (800f334 <Sonar_init+0x9c>)
 800f2ca:	f006 f9cd 	bl	8015668 <pifNoiseFilterInt32_Init>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00b      	beq.n	800f2ec <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f2d4:	4817      	ldr	r0, [pc, #92]	; (800f334 <Sonar_init+0x9c>)
 800f2d6:	f006 fa07 	bl	80156e8 <pifNoiseFilterInt32_SetNoiseCancel>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d005      	beq.n	800f2ec <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f2e0:	4b15      	ldr	r3, [pc, #84]	; (800f338 <Sonar_init+0xa0>)
 800f2e2:	4a14      	ldr	r2, [pc, #80]	; (800f334 <Sonar_init+0x9c>)
 800f2e4:	601a      	str	r2, [r3, #0]
		break;
 800f2e6:	e001      	b.n	800f2ec <Sonar_init+0x54>
		break;
 800f2e8:	bf00      	nop
 800f2ea:	e000      	b.n	800f2ee <Sonar_init+0x56>
		break;
 800f2ec:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f2ee:	4b12      	ldr	r3, [pc, #72]	; (800f338 <Sonar_init+0xa0>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d007      	beq.n	800f306 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4910      	ldr	r1, [pc, #64]	; (800f33c <Sonar_init+0xa4>)
 800f2fa:	203c      	movs	r0, #60	; 0x3c
 800f2fc:	4798      	blx	r3
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d107      	bne.n	800f314 <Sonar_init+0x7c>
 800f304:	e013      	b.n	800f32e <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	490d      	ldr	r1, [pc, #52]	; (800f340 <Sonar_init+0xa8>)
 800f30a:	203c      	movs	r0, #60	; 0x3c
 800f30c:	4798      	blx	r3
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00b      	beq.n	800f32c <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f314:	2010      	movs	r0, #16
 800f316:	f7f7 fe4d 	bl	8006fb4 <sensorsSet>
    sonarDistance = -1;
 800f31a:	4b0a      	ldr	r3, [pc, #40]	; (800f344 <Sonar_init+0xac>)
 800f31c:	f04f 32ff 	mov.w	r2, #4294967295
 800f320:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f322:	4909      	ldr	r1, [pc, #36]	; (800f348 <Sonar_init+0xb0>)
 800f324:	2002      	movs	r0, #2
 800f326:	f004 f85d 	bl	80133e4 <pifLog_Print>
 800f32a:	e000      	b.n	800f32e <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f32c:	bf00      	nop
#endif
}
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20001ac0 	.word	0x20001ac0
 800f338:	20001978 	.word	0x20001978
 800f33c:	0800f229 	.word	0x0800f229
 800f340:	0800f1d1 	.word	0x0800f1d1
 800f344:	2000002c 	.word	0x2000002c
 800f348:	08026f60 	.word	0x08026f60

0800f34c <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f34c:	b590      	push	{r4, r7, lr}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f354:	2300      	movs	r3, #0
 800f356:	60fb      	str	r3, [r7, #12]
 800f358:	e023      	b.n	800f3a2 <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f35a:	4a17      	ldr	r2, [pc, #92]	; (800f3b8 <_SerializeBoxNamesReply+0x6c>)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	4413      	add	r3, r2
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f364:	4915      	ldr	r1, [pc, #84]	; (800f3bc <_SerializeBoxNamesReply+0x70>)
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	4613      	mov	r3, r2
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	4413      	add	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	440b      	add	r3, r1
 800f372:	3304      	adds	r3, #4
 800f374:	681c      	ldr	r4, [r3, #0]
 800f376:	4911      	ldr	r1, [pc, #68]	; (800f3bc <_SerializeBoxNamesReply+0x70>)
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	4613      	mov	r3, r2
 800f37c:	005b      	lsls	r3, r3, #1
 800f37e:	4413      	add	r3, r2
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	440b      	add	r3, r1
 800f384:	3304      	adds	r3, #4
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7f0 ff25 	bl	80001d8 <strlen>
 800f38e:	4603      	mov	r3, r0
 800f390:	b29b      	uxth	r3, r3
 800f392:	461a      	mov	r2, r3
 800f394:	4621      	mov	r1, r4
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f008 fd22 	bl	8017de0 <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <_SerializeBoxNamesReply+0x74>)
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	dbd5      	blt.n	800f35a <_SerializeBoxNamesReply+0xe>
    }
}
 800f3ae:	bf00      	nop
 800f3b0:	bf00      	nop
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd90      	pop	{r4, r7, pc}
 800f3b8:	20001ae0 	.word	0x20001ae0
 800f3bc:	08028d3c 	.word	0x08028d3c
 800f3c0:	20001af9 	.word	0x20001af9

0800f3c4 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	6039      	str	r1, [r7, #0]
 800f3ce:	71fb      	strb	r3, [r7, #7]
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f3d4:	79f8      	ldrb	r0, [r7, #7]
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	2203      	movs	r2, #3
 800f3da:	6839      	ldr	r1, [r7, #0]
 800f3dc:	f7f2 ffe8 	bl	80023b0 <uartOpen>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	4a92      	ldr	r2, [pc, #584]	; (800f62c <serialInit+0x268>)
 800f3e4:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f3e6:	4b91      	ldr	r3, [pc, #580]	; (800f62c <serialInit+0x268>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4a91      	ldr	r2, [pc, #580]	; (800f630 <serialInit+0x26c>)
 800f3ec:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f3ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f3f2:	4990      	ldr	r1, [pc, #576]	; (800f634 <serialInit+0x270>)
 800f3f4:	4890      	ldr	r0, [pc, #576]	; (800f638 <serialInit+0x274>)
 800f3f6:	f008 faa1 	bl	801793c <pifMsp_Init>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f000 810e 	beq.w	800f61e <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f402:	4b8a      	ldr	r3, [pc, #552]	; (800f62c <serialInit+0x268>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a8d      	ldr	r2, [pc, #564]	; (800f63c <serialInit+0x278>)
 800f408:	498d      	ldr	r1, [pc, #564]	; (800f640 <serialInit+0x27c>)
 800f40a:	488b      	ldr	r0, [pc, #556]	; (800f638 <serialInit+0x274>)
 800f40c:	f008 fb4a 	bl	8017aa4 <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f410:	4b86      	ldr	r3, [pc, #536]	; (800f62c <serialInit+0x268>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	4887      	ldr	r0, [pc, #540]	; (800f638 <serialInit+0x274>)
 800f41a:	f008 fb1d 	bl	8017a58 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f41e:	4b83      	ldr	r3, [pc, #524]	; (800f62c <serialInit+0x268>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	3304      	adds	r3, #4
 800f424:	4618      	mov	r0, r3
 800f426:	f7f3 f94f 	bl	80026c8 <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f42a:	79bb      	ldrb	r3, [r7, #6]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d02a      	beq.n	800f486 <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f430:	79b8      	ldrb	r0, [r7, #6]
 800f432:	230a      	movs	r3, #10
 800f434:	2203      	movs	r2, #3
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	f7f2 ffba 	bl	80023b0 <uartOpen>
 800f43c:	4603      	mov	r3, r0
 800f43e:	4a7b      	ldr	r2, [pc, #492]	; (800f62c <serialInit+0x268>)
 800f440:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f442:	4b7a      	ldr	r3, [pc, #488]	; (800f62c <serialInit+0x268>)
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	4a7a      	ldr	r2, [pc, #488]	; (800f630 <serialInit+0x26c>)
 800f448:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f44a:	f240 1211 	movw	r2, #273	; 0x111
 800f44e:	4979      	ldr	r1, [pc, #484]	; (800f634 <serialInit+0x270>)
 800f450:	487c      	ldr	r0, [pc, #496]	; (800f644 <serialInit+0x280>)
 800f452:	f008 fa73 	bl	801793c <pifMsp_Init>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f000 80e2 	beq.w	800f622 <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f45e:	4b73      	ldr	r3, [pc, #460]	; (800f62c <serialInit+0x268>)
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	4a76      	ldr	r2, [pc, #472]	; (800f63c <serialInit+0x278>)
 800f464:	4976      	ldr	r1, [pc, #472]	; (800f640 <serialInit+0x27c>)
 800f466:	4877      	ldr	r0, [pc, #476]	; (800f644 <serialInit+0x280>)
 800f468:	f008 fb1c 	bl	8017aa4 <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f46c:	4b6f      	ldr	r3, [pc, #444]	; (800f62c <serialInit+0x268>)
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	3304      	adds	r3, #4
 800f472:	4619      	mov	r1, r3
 800f474:	4873      	ldr	r0, [pc, #460]	; (800f644 <serialInit+0x280>)
 800f476:	f008 faef 	bl	8017a58 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f47a:	4b6c      	ldr	r3, [pc, #432]	; (800f62c <serialInit+0x268>)
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	3304      	adds	r3, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f7f3 f921 	bl	80026c8 <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f486:	2219      	movs	r2, #25
 800f488:	21ff      	movs	r1, #255	; 0xff
 800f48a:	486f      	ldr	r0, [pc, #444]	; (800f648 <serialInit+0x284>)
 800f48c:	f013 fa2a 	bl	80228e4 <memset>

    idx = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	60fa      	str	r2, [r7, #12]
 800f49a:	4a6b      	ldr	r2, [pc, #428]	; (800f648 <serialInit+0x284>)
 800f49c:	2100      	movs	r1, #0
 800f49e:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f4a0:	2002      	movs	r0, #2
 800f4a2:	f7f7 fd71 	bl	8006f88 <sensors>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00b      	beq.n	800f4c4 <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	60fa      	str	r2, [r7, #12]
 800f4b2:	4a65      	ldr	r2, [pc, #404]	; (800f648 <serialInit+0x284>)
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	60fa      	str	r2, [r7, #12]
 800f4be:	4a62      	ldr	r2, [pc, #392]	; (800f648 <serialInit+0x284>)
 800f4c0:	2102      	movs	r1, #2
 800f4c2:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f4c4:	2004      	movs	r0, #4
 800f4c6:	f7f7 fd5f 	bl	8006f88 <sensors>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d012      	beq.n	800f4f6 <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	60fa      	str	r2, [r7, #12]
 800f4d6:	4a5c      	ldr	r2, [pc, #368]	; (800f648 <serialInit+0x284>)
 800f4d8:	2103      	movs	r1, #3
 800f4da:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f4dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f4e0:	f7f7 fd9a 	bl	8007018 <feature>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d005      	beq.n	800f4f6 <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	1c5a      	adds	r2, r3, #1
 800f4ee:	60fa      	str	r2, [r7, #12]
 800f4f0:	4a55      	ldr	r2, [pc, #340]	; (800f648 <serialInit+0x284>)
 800f4f2:	2104      	movs	r1, #4
 800f4f4:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f4f6:	2002      	movs	r0, #2
 800f4f8:	f7f7 fd46 	bl	8006f88 <sensors>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <serialInit+0x14a>
 800f502:	2008      	movs	r0, #8
 800f504:	f7f7 fd40 	bl	8006f88 <sensors>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d011      	beq.n	800f532 <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	60fa      	str	r2, [r7, #12]
 800f514:	4a4c      	ldr	r2, [pc, #304]	; (800f648 <serialInit+0x284>)
 800f516:	2105      	movs	r1, #5
 800f518:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	60fa      	str	r2, [r7, #12]
 800f520:	4a49      	ldr	r2, [pc, #292]	; (800f648 <serialInit+0x284>)
 800f522:	2106      	movs	r1, #6
 800f524:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	60fa      	str	r2, [r7, #12]
 800f52c:	4a46      	ldr	r2, [pc, #280]	; (800f648 <serialInit+0x284>)
 800f52e:	2107      	movs	r1, #7
 800f530:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f532:	2020      	movs	r0, #32
 800f534:	f7f7 fd70 	bl	8007018 <feature>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d005      	beq.n	800f54a <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	60fa      	str	r2, [r7, #12]
 800f544:	4a40      	ldr	r2, [pc, #256]	; (800f648 <serialInit+0x284>)
 800f546:	2108      	movs	r1, #8
 800f548:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f54a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f54e:	f7f7 fd63 	bl	8007018 <feature>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00b      	beq.n	800f570 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	60fa      	str	r2, [r7, #12]
 800f55e:	4a3a      	ldr	r2, [pc, #232]	; (800f648 <serialInit+0x284>)
 800f560:	210a      	movs	r1, #10
 800f562:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	60fa      	str	r2, [r7, #12]
 800f56a:	4a37      	ldr	r2, [pc, #220]	; (800f648 <serialInit+0x284>)
 800f56c:	210b      	movs	r1, #11
 800f56e:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f570:	4b36      	ldr	r3, [pc, #216]	; (800f64c <serialInit+0x288>)
 800f572:	7c1b      	ldrb	r3, [r3, #16]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	1c5a      	adds	r2, r3, #1
 800f57c:	60fa      	str	r2, [r7, #12]
 800f57e:	4a32      	ldr	r2, [pc, #200]	; (800f648 <serialInit+0x284>)
 800f580:	210c      	movs	r1, #12
 800f582:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	1c5a      	adds	r2, r3, #1
 800f588:	60fa      	str	r2, [r7, #12]
 800f58a:	4a2f      	ldr	r2, [pc, #188]	; (800f648 <serialInit+0x284>)
 800f58c:	2118      	movs	r1, #24
 800f58e:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	60fa      	str	r2, [r7, #12]
 800f596:	4a2c      	ldr	r2, [pc, #176]	; (800f648 <serialInit+0x284>)
 800f598:	210d      	movs	r1, #13
 800f59a:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f59c:	2004      	movs	r0, #4
 800f59e:	f7f7 fd3b 	bl	8007018 <feature>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	60fa      	str	r2, [r7, #12]
 800f5ae:	4a26      	ldr	r2, [pc, #152]	; (800f648 <serialInit+0x284>)
 800f5b0:	2111      	movs	r1, #17
 800f5b2:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	60fa      	str	r2, [r7, #12]
 800f5ba:	4a23      	ldr	r2, [pc, #140]	; (800f648 <serialInit+0x284>)
 800f5bc:	2113      	movs	r1, #19
 800f5be:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f5c0:	4b23      	ldr	r3, [pc, #140]	; (800f650 <serialInit+0x28c>)
 800f5c2:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bf14      	ite	ne
 800f5ca:	2301      	movne	r3, #1
 800f5cc:	2300      	moveq	r3, #0
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7f7 fd21 	bl	8007018 <feature>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d005      	beq.n	800f5e8 <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	60fa      	str	r2, [r7, #12]
 800f5e2:	4a19      	ldr	r2, [pc, #100]	; (800f648 <serialInit+0x284>)
 800f5e4:	2114      	movs	r1, #20
 800f5e6:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f5e8:	4b19      	ldr	r3, [pc, #100]	; (800f650 <serialInit+0x28c>)
 800f5ea:	795b      	ldrb	r3, [r3, #5]
 800f5ec:	2b18      	cmp	r3, #24
 800f5ee:	d111      	bne.n	800f614 <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	1c5a      	adds	r2, r3, #1
 800f5f4:	60fa      	str	r2, [r7, #12]
 800f5f6:	4a14      	ldr	r2, [pc, #80]	; (800f648 <serialInit+0x284>)
 800f5f8:	2115      	movs	r1, #21
 800f5fa:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	60fa      	str	r2, [r7, #12]
 800f602:	4a11      	ldr	r2, [pc, #68]	; (800f648 <serialInit+0x284>)
 800f604:	2116      	movs	r1, #22
 800f606:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	60fa      	str	r2, [r7, #12]
 800f60e:	4a0e      	ldr	r2, [pc, #56]	; (800f648 <serialInit+0x284>)
 800f610:	2117      	movs	r1, #23
 800f612:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b0e      	ldr	r3, [pc, #56]	; (800f654 <serialInit+0x290>)
 800f61a:	701a      	strb	r2, [r3, #0]
 800f61c:	e002      	b.n	800f624 <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f61e:	bf00      	nop
 800f620:	e000      	b.n	800f624 <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f622:	bf00      	nop
}
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	200007e4 	.word	0x200007e4
 800f630:	20001afc 	.word	0x20001afc
 800f634:	200014d0 	.word	0x200014d0
 800f638:	20001b00 	.word	0x20001b00
 800f63c:	08010fb1 	.word	0x08010fb1
 800f640:	0800f659 	.word	0x0800f659
 800f644:	20001b5c 	.word	0x20001b5c
 800f648:	20001ae0 	.word	0x20001ae0
 800f64c:	2000169c 	.word	0x2000169c
 800f650:	2000089c 	.word	0x2000089c
 800f654:	20001af9 	.word	0x20001af9

0800f658 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800f658:	b590      	push	{r4, r7, lr}
 800f65a:	b091      	sub	sp, #68	; 0x44
 800f65c:	af02      	add	r7, sp, #8
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	62bb      	str	r3, [r7, #40]	; 0x28
 800f668:	2300      	movs	r3, #0
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
 800f66c:	2300      	movs	r3, #0
 800f66e:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f670:	4bd9      	ldr	r3, [pc, #868]	; (800f9d8 <evtMspReceive+0x380>)
 800f672:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800f674:	68b9      	ldr	r1, [r7, #8]
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f008 fa82 	bl	8017b80 <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	3b40      	subs	r3, #64	; 0x40
 800f682:	2bbe      	cmp	r3, #190	; 0xbe
 800f684:	f201 8477 	bhi.w	8010f76 <evtMspReceive+0x191e>
 800f688:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <evtMspReceive+0x38>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	08010ee7 	.word	0x08010ee7
 800f694:	08010f0f 	.word	0x08010f0f
 800f698:	08010e11 	.word	0x08010e11
 800f69c:	08010c7d 	.word	0x08010c7d
 800f6a0:	08010f3b 	.word	0x08010f3b
 800f6a4:	08010f43 	.word	0x08010f43
 800f6a8:	08010f77 	.word	0x08010f77
 800f6ac:	08010f77 	.word	0x08010f77
 800f6b0:	08010f77 	.word	0x08010f77
 800f6b4:	08010f77 	.word	0x08010f77
 800f6b8:	08010f77 	.word	0x08010f77
 800f6bc:	08010f77 	.word	0x08010f77
 800f6c0:	08010f77 	.word	0x08010f77
 800f6c4:	08010f77 	.word	0x08010f77
 800f6c8:	08010f77 	.word	0x08010f77
 800f6cc:	08010f77 	.word	0x08010f77
 800f6d0:	08010f77 	.word	0x08010f77
 800f6d4:	08010f77 	.word	0x08010f77
 800f6d8:	08010f77 	.word	0x08010f77
 800f6dc:	08010f77 	.word	0x08010f77
 800f6e0:	08010f77 	.word	0x08010f77
 800f6e4:	08010f77 	.word	0x08010f77
 800f6e8:	08010f77 	.word	0x08010f77
 800f6ec:	08010f77 	.word	0x08010f77
 800f6f0:	08010f77 	.word	0x08010f77
 800f6f4:	08010f77 	.word	0x08010f77
 800f6f8:	08010f77 	.word	0x08010f77
 800f6fc:	08010f77 	.word	0x08010f77
 800f700:	08010f77 	.word	0x08010f77
 800f704:	08010f77 	.word	0x08010f77
 800f708:	08010f77 	.word	0x08010f77
 800f70c:	08010f77 	.word	0x08010f77
 800f710:	08010f77 	.word	0x08010f77
 800f714:	08010f77 	.word	0x08010f77
 800f718:	08010f77 	.word	0x08010f77
 800f71c:	08010f77 	.word	0x08010f77
 800f720:	0800fd2f 	.word	0x0800fd2f
 800f724:	0800fd57 	.word	0x0800fd57
 800f728:	0800fee3 	.word	0x0800fee3
 800f72c:	0800ffc5 	.word	0x0800ffc5
 800f730:	08010467 	.word	0x08010467
 800f734:	08010475 	.word	0x08010475
 800f738:	0801049d 	.word	0x0801049d
 800f73c:	0801051d 	.word	0x0801051d
 800f740:	0801054f 	.word	0x0801054f
 800f744:	08010587 	.word	0x08010587
 800f748:	080105a5 	.word	0x080105a5
 800f74c:	08010649 	.word	0x08010649
 800f750:	080106ad 	.word	0x080106ad
 800f754:	08010739 	.word	0x08010739
 800f758:	08010829 	.word	0x08010829
 800f75c:	08010919 	.word	0x08010919
 800f760:	08010771 	.word	0x08010771
 800f764:	0801072b 	.word	0x0801072b
 800f768:	0801093d 	.word	0x0801093d
 800f76c:	0801077b 	.word	0x0801077b
 800f770:	0800ffd3 	.word	0x0800ffd3
 800f774:	08010f77 	.word	0x08010f77
 800f778:	08010f77 	.word	0x08010f77
 800f77c:	080102dd 	.word	0x080102dd
 800f780:	08010f77 	.word	0x08010f77
 800f784:	08010f77 	.word	0x08010f77
 800f788:	08010f77 	.word	0x08010f77
 800f78c:	08010f77 	.word	0x08010f77
 800f790:	08010f77 	.word	0x08010f77
 800f794:	08010f77 	.word	0x08010f77
 800f798:	08010f77 	.word	0x08010f77
 800f79c:	08010f77 	.word	0x08010f77
 800f7a0:	08010f77 	.word	0x08010f77
 800f7a4:	08010f77 	.word	0x08010f77
 800f7a8:	08010f77 	.word	0x08010f77
 800f7ac:	08010f77 	.word	0x08010f77
 800f7b0:	08010f77 	.word	0x08010f77
 800f7b4:	08010f77 	.word	0x08010f77
 800f7b8:	08010f77 	.word	0x08010f77
 800f7bc:	08010f77 	.word	0x08010f77
 800f7c0:	08010f77 	.word	0x08010f77
 800f7c4:	08010f77 	.word	0x08010f77
 800f7c8:	08010f77 	.word	0x08010f77
 800f7cc:	08010f77 	.word	0x08010f77
 800f7d0:	08010f77 	.word	0x08010f77
 800f7d4:	08010f77 	.word	0x08010f77
 800f7d8:	08010f77 	.word	0x08010f77
 800f7dc:	08010f77 	.word	0x08010f77
 800f7e0:	08010f77 	.word	0x08010f77
 800f7e4:	08010f77 	.word	0x08010f77
 800f7e8:	08010f77 	.word	0x08010f77
 800f7ec:	08010f77 	.word	0x08010f77
 800f7f0:	08010f77 	.word	0x08010f77
 800f7f4:	08010f77 	.word	0x08010f77
 800f7f8:	08010f77 	.word	0x08010f77
 800f7fc:	08010f77 	.word	0x08010f77
 800f800:	08010f77 	.word	0x08010f77
 800f804:	08010f77 	.word	0x08010f77
 800f808:	08010f77 	.word	0x08010f77
 800f80c:	08010f77 	.word	0x08010f77
 800f810:	08010b91 	.word	0x08010b91
 800f814:	08010f77 	.word	0x08010f77
 800f818:	08010f77 	.word	0x08010f77
 800f81c:	08010f77 	.word	0x08010f77
 800f820:	08010bb7 	.word	0x08010bb7
 800f824:	08010f77 	.word	0x08010f77
 800f828:	08010c21 	.word	0x08010c21
 800f82c:	08010f77 	.word	0x08010f77
 800f830:	08010f77 	.word	0x08010f77
 800f834:	08010f77 	.word	0x08010f77
 800f838:	08010f77 	.word	0x08010f77
 800f83c:	08010f77 	.word	0x08010f77
 800f840:	08010f77 	.word	0x08010f77
 800f844:	08010f77 	.word	0x08010f77
 800f848:	08010f77 	.word	0x08010f77
 800f84c:	08010f77 	.word	0x08010f77
 800f850:	08010f77 	.word	0x08010f77
 800f854:	08010f77 	.word	0x08010f77
 800f858:	08010f77 	.word	0x08010f77
 800f85c:	08010f77 	.word	0x08010f77
 800f860:	08010f77 	.word	0x08010f77
 800f864:	08010f77 	.word	0x08010f77
 800f868:	08010f77 	.word	0x08010f77
 800f86c:	08010f77 	.word	0x08010f77
 800f870:	08010f77 	.word	0x08010f77
 800f874:	08010f77 	.word	0x08010f77
 800f878:	08010f77 	.word	0x08010f77
 800f87c:	08010f77 	.word	0x08010f77
 800f880:	08010f77 	.word	0x08010f77
 800f884:	08010f77 	.word	0x08010f77
 800f888:	08010f77 	.word	0x08010f77
 800f88c:	08010f77 	.word	0x08010f77
 800f890:	08010f77 	.word	0x08010f77
 800f894:	08010f77 	.word	0x08010f77
 800f898:	08010f77 	.word	0x08010f77
 800f89c:	08010f77 	.word	0x08010f77
 800f8a0:	08010f77 	.word	0x08010f77
 800f8a4:	08010f77 	.word	0x08010f77
 800f8a8:	08010f77 	.word	0x08010f77
 800f8ac:	08010f77 	.word	0x08010f77
 800f8b0:	0800f98d 	.word	0x0800f98d
 800f8b4:	0800f9e5 	.word	0x0800f9e5
 800f8b8:	0800fa4b 	.word	0x0800fa4b
 800f8bc:	0800fad5 	.word	0x0800fad5
 800f8c0:	0800fb0d 	.word	0x0800fb0d
 800f8c4:	08010a5b 	.word	0x08010a5b
 800f8c8:	08010a6f 	.word	0x08010a6f
 800f8cc:	0800fb75 	.word	0x0800fb75
 800f8d0:	08010a49 	.word	0x08010a49
 800f8d4:	080109b1 	.word	0x080109b1
 800f8d8:	0800fce5 	.word	0x0800fce5
 800f8dc:	0800fd1d 	.word	0x0800fd1d
 800f8e0:	0801007b 	.word	0x0801007b
 800f8e4:	08010f77 	.word	0x08010f77
 800f8e8:	0800fc8b 	.word	0x0800fc8b
 800f8ec:	08010f77 	.word	0x08010f77
 800f8f0:	080103a5 	.word	0x080103a5
 800f8f4:	08010f77 	.word	0x08010f77
 800f8f8:	08010f77 	.word	0x08010f77
 800f8fc:	08010f77 	.word	0x08010f77
 800f900:	08010f77 	.word	0x08010f77
 800f904:	08010f77 	.word	0x08010f77
 800f908:	08010f77 	.word	0x08010f77
 800f90c:	08010f77 	.word	0x08010f77
 800f910:	08010f77 	.word	0x08010f77
 800f914:	08010f77 	.word	0x08010f77
 800f918:	08010f77 	.word	0x08010f77
 800f91c:	08010f77 	.word	0x08010f77
 800f920:	08010f77 	.word	0x08010f77
 800f924:	08010f77 	.word	0x08010f77
 800f928:	08010f77 	.word	0x08010f77
 800f92c:	08010f77 	.word	0x08010f77
 800f930:	08010f77 	.word	0x08010f77
 800f934:	08010f77 	.word	0x08010f77
 800f938:	08010f77 	.word	0x08010f77
 800f93c:	08010f77 	.word	0x08010f77
 800f940:	08010f77 	.word	0x08010f77
 800f944:	08010f77 	.word	0x08010f77
 800f948:	08010f77 	.word	0x08010f77
 800f94c:	0800f9b9 	.word	0x0800f9b9
 800f950:	08010b6f 	.word	0x08010b6f
 800f954:	08010127 	.word	0x08010127
 800f958:	080101f1 	.word	0x080101f1
 800f95c:	08010f77 	.word	0x08010f77
 800f960:	08010f77 	.word	0x08010f77
 800f964:	08010f77 	.word	0x08010f77
 800f968:	08010f77 	.word	0x08010f77
 800f96c:	08010f77 	.word	0x08010f77
 800f970:	08010f77 	.word	0x08010f77
 800f974:	08010f77 	.word	0x08010f77
 800f978:	08010a81 	.word	0x08010a81
 800f97c:	08010f77 	.word	0x08010f77
 800f980:	08010f77 	.word	0x08010f77
 800f984:	08010f77 	.word	0x08010f77
 800f988:	08010a9d 	.word	0x08010a9d
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f98c:	2300      	movs	r3, #0
 800f98e:	637b      	str	r3, [r7, #52]	; 0x34
 800f990:	e00b      	b.n	800f9aa <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800f992:	68b8      	ldr	r0, [r7, #8]
 800f994:	f008 f8b0 	bl	8017af8 <pifMsp_ReadData16>
 800f998:	4603      	mov	r3, r0
 800f99a:	b219      	sxth	r1, r3
 800f99c:	4a0f      	ldr	r2, [pc, #60]	; (800f9dc <evtMspReceive+0x384>)
 800f99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	2b07      	cmp	r3, #7
 800f9ae:	d9f0      	bls.n	800f992 <evtMspReceive+0x33a>
        mspFrameRecieve();
 800f9b0:	f7fe fd42 	bl	800e438 <mspFrameRecieve>
        break;
 800f9b4:	f001 baed 	b.w	8010f92 <evtMspReceive+0x193a>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800f9b8:	68b8      	ldr	r0, [r7, #8]
 800f9ba:	f008 f89d 	bl	8017af8 <pifMsp_ReadData16>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	b21a      	sxth	r2, r3
 800f9c2:	4b07      	ldr	r3, [pc, #28]	; (800f9e0 <evtMspReceive+0x388>)
 800f9c4:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800f9c6:	68b8      	ldr	r0, [r7, #8]
 800f9c8:	f008 f896 	bl	8017af8 <pifMsp_ReadData16>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	b21a      	sxth	r2, r3
 800f9d0:	4b03      	ldr	r3, [pc, #12]	; (800f9e0 <evtMspReceive+0x388>)
 800f9d2:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800f9d4:	f001 badd 	b.w	8010f92 <evtMspReceive+0x193a>
 800f9d8:	0802706c 	.word	0x0802706c
 800f9dc:	200016d4 	.word	0x200016d4
 800f9e0:	20000e08 	.word	0x20000e08

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f008 f873 	bl	8017ad0 <pifMsp_ReadData8>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4bb1      	ldr	r3, [pc, #708]	; (800fcb4 <evtMspReceive+0x65c>)
 800f9f0:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800f9f2:	68b8      	ldr	r0, [r7, #8]
 800f9f4:	f008 f86c 	bl	8017ad0 <pifMsp_ReadData8>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	4bae      	ldr	r3, [pc, #696]	; (800fcb8 <evtMspReceive+0x660>)
 800f9fe:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800fa00:	68b8      	ldr	r0, [r7, #8]
 800fa02:	f008 f896 	bl	8017b32 <pifMsp_ReadData32>
 800fa06:	4603      	mov	r3, r0
 800fa08:	461a      	mov	r2, r3
 800fa0a:	4bac      	ldr	r3, [pc, #688]	; (800fcbc <evtMspReceive+0x664>)
 800fa0c:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800fa0e:	68b8      	ldr	r0, [r7, #8]
 800fa10:	f008 f88f 	bl	8017b32 <pifMsp_ReadData32>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	4ba8      	ldr	r3, [pc, #672]	; (800fcbc <evtMspReceive+0x664>)
 800fa1a:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800fa1c:	68b8      	ldr	r0, [r7, #8]
 800fa1e:	f008 f86b 	bl	8017af8 <pifMsp_ReadData16>
 800fa22:	4603      	mov	r3, r0
 800fa24:	461a      	mov	r2, r3
 800fa26:	4ba6      	ldr	r3, [pc, #664]	; (800fcc0 <evtMspReceive+0x668>)
 800fa28:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800fa2a:	68b8      	ldr	r0, [r7, #8]
 800fa2c:	f008 f864 	bl	8017af8 <pifMsp_ReadData16>
 800fa30:	4603      	mov	r3, r0
 800fa32:	461a      	mov	r2, r3
 800fa34:	4ba3      	ldr	r3, [pc, #652]	; (800fcc4 <evtMspReceive+0x66c>)
 800fa36:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800fa38:	4ba3      	ldr	r3, [pc, #652]	; (800fcc8 <evtMspReceive+0x670>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	f043 0302 	orr.w	r3, r3, #2
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	4ba1      	ldr	r3, [pc, #644]	; (800fcc8 <evtMspReceive+0x670>)
 800fa44:	701a      	strb	r2, [r3, #0]
        break;
 800fa46:	f001 baa4 	b.w	8010f92 <evtMspReceive+0x193a>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4e:	e03c      	b.n	800faca <evtMspReceive+0x472>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800fa50:	68b8      	ldr	r0, [r7, #8]
 800fa52:	f008 f83d 	bl	8017ad0 <pifMsp_ReadData8>
 800fa56:	4603      	mov	r3, r0
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4a9c      	ldr	r2, [pc, #624]	; (800fccc <evtMspReceive+0x674>)
 800fa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5e:	4413      	add	r3, r2
 800fa60:	3301      	adds	r3, #1
 800fa62:	460a      	mov	r2, r1
 800fa64:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800fa66:	68b8      	ldr	r0, [r7, #8]
 800fa68:	f008 f832 	bl	8017ad0 <pifMsp_ReadData8>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4a96      	ldr	r2, [pc, #600]	; (800fccc <evtMspReceive+0x674>)
 800fa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa74:	4413      	add	r3, r2
 800fa76:	330b      	adds	r3, #11
 800fa78:	460a      	mov	r2, r1
 800fa7a:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800fa7c:	68b8      	ldr	r0, [r7, #8]
 800fa7e:	f008 f827 	bl	8017ad0 <pifMsp_ReadData8>
 800fa82:	4603      	mov	r3, r0
 800fa84:	4619      	mov	r1, r3
 800fa86:	4a91      	ldr	r2, [pc, #580]	; (800fccc <evtMspReceive+0x674>)
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	4413      	add	r3, r2
 800fa8c:	3315      	adds	r3, #21
 800fa8e:	460a      	mov	r2, r1
 800fa90:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fa92:	4a8e      	ldr	r2, [pc, #568]	; (800fccc <evtMspReceive+0x674>)
 800fa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa96:	4413      	add	r3, r2
 800fa98:	3301      	adds	r3, #1
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	4a8b      	ldr	r2, [pc, #556]	; (800fccc <evtMspReceive+0x674>)
 800faa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa2:	4413      	add	r3, r2
 800faa4:	330b      	adds	r3, #11
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	4619      	mov	r1, r3
 800faaa:	4a88      	ldr	r2, [pc, #544]	; (800fccc <evtMspReceive+0x674>)
 800faac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faae:	4413      	add	r3, r2
 800fab0:	3315      	adds	r3, #21
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	9100      	str	r1, [sp, #0]
 800fab8:	4603      	mov	r3, r0
 800faba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fabc:	4984      	ldr	r1, [pc, #528]	; (800fcd0 <evtMspReceive+0x678>)
 800fabe:	2002      	movs	r0, #2
 800fac0:	f003 fd1e 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac6:	3301      	adds	r3, #1
 800fac8:	637b      	str	r3, [r7, #52]	; 0x34
 800faca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800facc:	2b09      	cmp	r3, #9
 800face:	d9bf      	bls.n	800fa50 <evtMspReceive+0x3f8>
#endif
        }
        break;
 800fad0:	f001 ba5f 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fad4:	2300      	movs	r3, #0
 800fad6:	637b      	str	r3, [r7, #52]	; 0x34
 800fad8:	e010      	b.n	800fafc <evtMspReceive+0x4a4>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800fada:	68b8      	ldr	r0, [r7, #8]
 800fadc:	f008 f80c 	bl	8017af8 <pifMsp_ReadData16>
 800fae0:	4603      	mov	r3, r0
 800fae2:	4619      	mov	r1, r3
 800fae4:	4a7b      	ldr	r2, [pc, #492]	; (800fcd4 <evtMspReceive+0x67c>)
 800fae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae8:	4413      	add	r3, r2
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	4a77      	ldr	r2, [pc, #476]	; (800fccc <evtMspReceive+0x674>)
 800faee:	3312      	adds	r3, #18
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	4413      	add	r3, r2
 800faf4:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800faf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf8:	3301      	adds	r3, #1
 800fafa:	637b      	str	r3, [r7, #52]	; 0x34
 800fafc:	4b76      	ldr	r3, [pc, #472]	; (800fcd8 <evtMspReceive+0x680>)
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	461a      	mov	r2, r3
 800fb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d3e8      	bcc.n	800fada <evtMspReceive+0x482>
        break;
 800fb08:	f001 ba43 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800fb0c:	68b8      	ldr	r0, [r7, #8]
 800fb0e:	f007 ffdf 	bl	8017ad0 <pifMsp_ReadData8>
 800fb12:	4603      	mov	r3, r0
 800fb14:	461a      	mov	r2, r3
 800fb16:	4b6d      	ldr	r3, [pc, #436]	; (800fccc <evtMspReceive+0x674>)
 800fb18:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800fb1a:	68b8      	ldr	r0, [r7, #8]
 800fb1c:	f007 ffd8 	bl	8017ad0 <pifMsp_ReadData8>
 800fb20:	4603      	mov	r3, r0
 800fb22:	461a      	mov	r2, r3
 800fb24:	4b69      	ldr	r3, [pc, #420]	; (800fccc <evtMspReceive+0x674>)
 800fb26:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800fb2a:	68b8      	ldr	r0, [r7, #8]
 800fb2c:	f007 ffd0 	bl	8017ad0 <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800fb30:	68b8      	ldr	r0, [r7, #8]
 800fb32:	f007 ffcd 	bl	8017ad0 <pifMsp_ReadData8>
 800fb36:	4603      	mov	r3, r0
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4b64      	ldr	r3, [pc, #400]	; (800fccc <evtMspReceive+0x674>)
 800fb3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800fb40:	68b8      	ldr	r0, [r7, #8]
 800fb42:	f007 ffc5 	bl	8017ad0 <pifMsp_ReadData8>
 800fb46:	4603      	mov	r3, r0
 800fb48:	461a      	mov	r2, r3
 800fb4a:	4b60      	ldr	r3, [pc, #384]	; (800fccc <evtMspReceive+0x674>)
 800fb4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800fb50:	68b8      	ldr	r0, [r7, #8]
 800fb52:	f007 ffbd 	bl	8017ad0 <pifMsp_ReadData8>
 800fb56:	4603      	mov	r3, r0
 800fb58:	461a      	mov	r2, r3
 800fb5a:	4b5c      	ldr	r3, [pc, #368]	; (800fccc <evtMspReceive+0x674>)
 800fb5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800fb60:	68b8      	ldr	r0, [r7, #8]
 800fb62:	f007 ffb5 	bl	8017ad0 <pifMsp_ReadData8>
 800fb66:	4603      	mov	r3, r0
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4b58      	ldr	r3, [pc, #352]	; (800fccc <evtMspReceive+0x674>)
 800fb6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800fb70:	f001 ba0f 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800fb74:	68b8      	ldr	r0, [r7, #8]
 800fb76:	f007 ffbf 	bl	8017af8 <pifMsp_ReadData16>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb84:	d208      	bcs.n	800fb98 <evtMspReceive+0x540>
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fb8c:	d904      	bls.n	800fb98 <evtMspReceive+0x540>
            mcfg.midrc = tmp;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	4b52      	ldr	r3, [pc, #328]	; (800fcdc <evtMspReceive+0x684>)
 800fb94:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800fb98:	68b8      	ldr	r0, [r7, #8]
 800fb9a:	f007 ffad 	bl	8017af8 <pifMsp_ReadData16>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	461a      	mov	r2, r3
 800fba2:	4b4e      	ldr	r3, [pc, #312]	; (800fcdc <evtMspReceive+0x684>)
 800fba4:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800fba8:	68b8      	ldr	r0, [r7, #8]
 800fbaa:	f007 ffa5 	bl	8017af8 <pifMsp_ReadData16>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4b4a      	ldr	r3, [pc, #296]	; (800fcdc <evtMspReceive+0x684>)
 800fbb4:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800fbb8:	68b8      	ldr	r0, [r7, #8]
 800fbba:	f007 ff9d 	bl	8017af8 <pifMsp_ReadData16>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	4b46      	ldr	r3, [pc, #280]	; (800fcdc <evtMspReceive+0x684>)
 800fbc4:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f007 ff95 	bl	8017af8 <pifMsp_ReadData16>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b3e      	ldr	r3, [pc, #248]	; (800fccc <evtMspReceive+0x674>)
 800fbd4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800fbd8:	68b8      	ldr	r0, [r7, #8]
 800fbda:	f007 ff79 	bl	8017ad0 <pifMsp_ReadData8>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4b3e      	ldr	r3, [pc, #248]	; (800fcdc <evtMspReceive+0x684>)
 800fbe4:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800fbe8:	68b8      	ldr	r0, [r7, #8]
 800fbea:	f007 ff71 	bl	8017ad0 <pifMsp_ReadData8>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	b25a      	sxtb	r2, r3
 800fbf2:	4b3a      	ldr	r3, [pc, #232]	; (800fcdc <evtMspReceive+0x684>)
 800fbf4:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800fbf8:	68b8      	ldr	r0, [r7, #8]
 800fbfa:	f007 ff69 	bl	8017ad0 <pifMsp_ReadData8>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	b25a      	sxtb	r2, r3
 800fc02:	4b36      	ldr	r3, [pc, #216]	; (800fcdc <evtMspReceive+0x684>)
 800fc04:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fc08:	68b8      	ldr	r0, [r7, #8]
 800fc0a:	f007 ff61 	bl	8017ad0 <pifMsp_ReadData8>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
 800fc12:	4b32      	ldr	r3, [pc, #200]	; (800fcdc <evtMspReceive+0x684>)
 800fc14:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 800fc18:	68b8      	ldr	r0, [r7, #8]
 800fc1a:	f007 ff59 	bl	8017ad0 <pifMsp_ReadData8>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	461a      	mov	r2, r3
 800fc22:	4b2e      	ldr	r3, [pc, #184]	; (800fcdc <evtMspReceive+0x684>)
 800fc24:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 800fc28:	68b8      	ldr	r0, [r7, #8]
 800fc2a:	f007 ff51 	bl	8017ad0 <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 800fc2e:	68b8      	ldr	r0, [r7, #8]
 800fc30:	f007 ff62 	bl	8017af8 <pifMsp_ReadData16>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
 800fc38:	0092      	lsls	r2, r2, #2
 800fc3a:	4413      	add	r3, r2
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	b21a      	sxth	r2, r3
 800fc42:	4b22      	ldr	r3, [pc, #136]	; (800fccc <evtMspReceive+0x674>)
 800fc44:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	f007 ff42 	bl	8017ad0 <pifMsp_ReadData8>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4b22      	ldr	r3, [pc, #136]	; (800fcdc <evtMspReceive+0x684>)
 800fc52:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 800fc56:	68b8      	ldr	r0, [r7, #8]
 800fc58:	f007 ff3a 	bl	8017ad0 <pifMsp_ReadData8>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	461a      	mov	r2, r3
 800fc60:	4b1e      	ldr	r3, [pc, #120]	; (800fcdc <evtMspReceive+0x684>)
 800fc62:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 800fc66:	68b8      	ldr	r0, [r7, #8]
 800fc68:	f007 ff32 	bl	8017ad0 <pifMsp_ReadData8>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	461a      	mov	r2, r3
 800fc70:	4b1a      	ldr	r3, [pc, #104]	; (800fcdc <evtMspReceive+0x684>)
 800fc72:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 800fc76:	68b8      	ldr	r0, [r7, #8]
 800fc78:	f007 ff2a 	bl	8017ad0 <pifMsp_ReadData8>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	461a      	mov	r2, r3
 800fc80:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <evtMspReceive+0x684>)
 800fc82:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 800fc86:	f001 b984 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc8e:	e00b      	b.n	800fca8 <evtMspReceive+0x650>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 800fc90:	68b8      	ldr	r0, [r7, #8]
 800fc92:	f007 ff31 	bl	8017af8 <pifMsp_ReadData16>
 800fc96:	4603      	mov	r3, r0
 800fc98:	b219      	sxth	r1, r3
 800fc9a:	4a11      	ldr	r2, [pc, #68]	; (800fce0 <evtMspReceive+0x688>)
 800fc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca4:	3301      	adds	r3, #1
 800fca6:	637b      	str	r3, [r7, #52]	; 0x34
 800fca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcaa:	2b07      	cmp	r3, #7
 800fcac:	d9f0      	bls.n	800fc90 <evtMspReceive+0x638>
        break;
 800fcae:	f001 b970 	b.w	8010f92 <evtMspReceive+0x193a>
 800fcb2:	bf00      	nop
 800fcb4:	2000169c 	.word	0x2000169c
 800fcb8:	20001780 	.word	0x20001780
 800fcbc:	20001760 	.word	0x20001760
 800fcc0:	20001786 	.word	0x20001786
 800fcc4:	20001788 	.word	0x20001788
 800fcc8:	2000178a 	.word	0x2000178a
 800fccc:	20000e08 	.word	0x20000e08
 800fcd0:	08027078 	.word	0x08027078
 800fcd4:	20001ae0 	.word	0x20001ae0
 800fcd8:	20001af9 	.word	0x20001af9
 800fcdc:	2000089c 	.word	0x2000089c
 800fce0:	2000151c 	.word	0x2000151c

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fce4:	4baa      	ldr	r3, [pc, #680]	; (800ff90 <evtMspReceive+0x938>)
 800fce6:	785b      	ldrb	r3, [r3, #1]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f041 8149 	bne.w	8010f80 <evtMspReceive+0x1928>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 800fcee:	68b8      	ldr	r0, [r7, #8]
 800fcf0:	f007 feee 	bl	8017ad0 <pifMsp_ReadData8>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4ba6      	ldr	r3, [pc, #664]	; (800ff94 <evtMspReceive+0x93c>)
 800fcfa:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fcfe:	4ba5      	ldr	r3, [pc, #660]	; (800ff94 <evtMspReceive+0x93c>)
 800fd00:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d903      	bls.n	800fd10 <evtMspReceive+0x6b8>
                mcfg.current_profile = 0;
 800fd08:	4ba2      	ldr	r3, [pc, #648]	; (800ff94 <evtMspReceive+0x93c>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fd10:	2100      	movs	r1, #0
 800fd12:	2000      	movs	r0, #0
 800fd14:	f7f6 fd9e 	bl	8006854 <writeEEPROM>
        }
        break;
 800fd18:	f001 b932 	b.w	8010f80 <evtMspReceive+0x1928>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 800fd1c:	68b8      	ldr	r0, [r7, #8]
 800fd1e:	f007 feeb 	bl	8017af8 <pifMsp_ReadData16>
 800fd22:	4603      	mov	r3, r0
 800fd24:	b21a      	sxth	r2, r3
 800fd26:	4b9c      	ldr	r3, [pc, #624]	; (800ff98 <evtMspReceive+0x940>)
 800fd28:	801a      	strh	r2, [r3, #0]
        break;
 800fd2a:	f001 b932 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 800fd2e:	21e7      	movs	r1, #231	; 0xe7
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f007 ff77 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 800fd36:	4b97      	ldr	r3, [pc, #604]	; (800ff94 <evtMspReceive+0x93c>)
 800fd38:	795b      	ldrb	r3, [r3, #5]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f007 ff71 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fd42:	2104      	movs	r1, #4
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f007 ff6d 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fd4a:	4994      	ldr	r1, [pc, #592]	; (800ff9c <evtMspReceive+0x944>)
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f007 fffb 	bl	8017d48 <pifMsp_AddAnswer32>
        break;
 800fd52:	f001 b91e 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 800fd56:	4b92      	ldr	r3, [pc, #584]	; (800ffa0 <evtMspReceive+0x948>)
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f007 ffa7 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 800fd62:	4b90      	ldr	r3, [pc, #576]	; (800ffa4 <evtMspReceive+0x94c>)
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	4619      	mov	r1, r3
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f007 ffa1 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fd6e:	2002      	movs	r0, #2
 800fd70:	f7f7 f90a 	bl	8006f88 <sensors>
 800fd74:	4603      	mov	r3, r0
 800fd76:	b21c      	sxth	r4, r3
 800fd78:	2004      	movs	r0, #4
 800fd7a:	f7f7 f905 	bl	8006f88 <sensors>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	b21b      	sxth	r3, r3
 800fd84:	4323      	orrs	r3, r4
 800fd86:	b21c      	sxth	r4, r3
 800fd88:	2008      	movs	r0, #8
 800fd8a:	f7f7 f8fd 	bl	8006f88 <sensors>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	b21b      	sxth	r3, r3
 800fd94:	4323      	orrs	r3, r4
 800fd96:	b21c      	sxth	r4, r3
 800fd98:	2020      	movs	r0, #32
 800fd9a:	f7f7 f8f5 	bl	8006f88 <sensors>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	00db      	lsls	r3, r3, #3
 800fda2:	b21b      	sxth	r3, r3
 800fda4:	4323      	orrs	r3, r4
 800fda6:	b21c      	sxth	r4, r3
 800fda8:	2010      	movs	r0, #16
 800fdaa:	f7f7 f8ed 	bl	8006f88 <sensors>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	011b      	lsls	r3, r3, #4
 800fdb2:	b21b      	sxth	r3, r3
 800fdb4:	4323      	orrs	r3, r4
 800fdb6:	b21b      	sxth	r3, r3
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	4619      	mov	r1, r3
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f007 ff77 	bl	8017cb0 <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fdc6:	4b72      	ldr	r3, [pc, #456]	; (800ff90 <evtMspReceive+0x938>)
 800fdc8:	78db      	ldrb	r3, [r3, #3]
 800fdca:	005a      	lsls	r2, r3, #1
 800fdcc:	4b70      	ldr	r3, [pc, #448]	; (800ff90 <evtMspReceive+0x938>)
 800fdce:	791b      	ldrb	r3, [r3, #4]
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fdd4:	4b6e      	ldr	r3, [pc, #440]	; (800ff90 <evtMspReceive+0x938>)
 800fdd6:	799b      	ldrb	r3, [r3, #6]
 800fdd8:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fdda:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fddc:	4b6c      	ldr	r3, [pc, #432]	; (800ff90 <evtMspReceive+0x938>)
 800fdde:	795b      	ldrb	r3, [r3, #5]
 800fde0:	015b      	lsls	r3, r3, #5
 800fde2:	431a      	orrs	r2, r3
 800fde4:	4b6a      	ldr	r3, [pc, #424]	; (800ff90 <evtMspReceive+0x938>)
 800fde6:	7a5b      	ldrb	r3, [r3, #9]
 800fde8:	019b      	lsls	r3, r3, #6
 800fdea:	431a      	orrs	r2, r3
 800fdec:	4b6e      	ldr	r3, [pc, #440]	; (800ffa8 <evtMspReceive+0x950>)
 800fdee:	79db      	ldrb	r3, [r3, #7]
 800fdf0:	01db      	lsls	r3, r3, #7
 800fdf2:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fdf4:	4b6c      	ldr	r3, [pc, #432]	; (800ffa8 <evtMspReceive+0x950>)
 800fdf6:	7a1b      	ldrb	r3, [r3, #8]
 800fdf8:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fdfa:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fdfc:	4b6a      	ldr	r3, [pc, #424]	; (800ffa8 <evtMspReceive+0x950>)
 800fdfe:	7a5b      	ldrb	r3, [r3, #9]
 800fe00:	025b      	lsls	r3, r3, #9
 800fe02:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fe04:	4b62      	ldr	r3, [pc, #392]	; (800ff90 <evtMspReceive+0x938>)
 800fe06:	79db      	ldrb	r3, [r3, #7]
 800fe08:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fe0a:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fe0c:	4b60      	ldr	r3, [pc, #384]	; (800ff90 <evtMspReceive+0x938>)
 800fe0e:	7a1b      	ldrb	r3, [r3, #8]
 800fe10:	02db      	lsls	r3, r3, #11
 800fe12:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fe14:	4b5e      	ldr	r3, [pc, #376]	; (800ff90 <evtMspReceive+0x938>)
 800fe16:	7d1b      	ldrb	r3, [r3, #20]
 800fe18:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fe1a:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fe1c:	4b5c      	ldr	r3, [pc, #368]	; (800ff90 <evtMspReceive+0x938>)
 800fe1e:	7a9b      	ldrb	r3, [r3, #10]
 800fe20:	031b      	lsls	r3, r3, #12
 800fe22:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fe24:	4b60      	ldr	r3, [pc, #384]	; (800ffa8 <evtMspReceive+0x950>)
 800fe26:	7b5b      	ldrb	r3, [r3, #13]
 800fe28:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fe2a:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fe2c:	4b5e      	ldr	r3, [pc, #376]	; (800ffa8 <evtMspReceive+0x950>)
 800fe2e:	7b9b      	ldrb	r3, [r3, #14]
 800fe30:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fe32:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fe34:	4b5c      	ldr	r3, [pc, #368]	; (800ffa8 <evtMspReceive+0x950>)
 800fe36:	7c1b      	ldrb	r3, [r3, #16]
 800fe38:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fe3a:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800fe3c:	4b5a      	ldr	r3, [pc, #360]	; (800ffa8 <evtMspReceive+0x950>)
 800fe3e:	791b      	ldrb	r3, [r3, #4]
 800fe40:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fe42:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800fe44:	4b58      	ldr	r3, [pc, #352]	; (800ffa8 <evtMspReceive+0x950>)
 800fe46:	7c5b      	ldrb	r3, [r3, #17]
 800fe48:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800fe4a:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800fe4c:	4b56      	ldr	r3, [pc, #344]	; (800ffa8 <evtMspReceive+0x950>)
 800fe4e:	7c9b      	ldrb	r3, [r3, #18]
 800fe50:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800fe52:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800fe54:	4b54      	ldr	r3, [pc, #336]	; (800ffa8 <evtMspReceive+0x950>)
 800fe56:	7cdb      	ldrb	r3, [r3, #19]
 800fe58:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800fe5a:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fe5c:	4b52      	ldr	r3, [pc, #328]	; (800ffa8 <evtMspReceive+0x950>)
 800fe5e:	7d1b      	ldrb	r3, [r3, #20]
 800fe60:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800fe62:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fe64:	4b50      	ldr	r3, [pc, #320]	; (800ffa8 <evtMspReceive+0x950>)
 800fe66:	7d5b      	ldrb	r3, [r3, #21]
 800fe68:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fe6a:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fe6c:	4b4e      	ldr	r3, [pc, #312]	; (800ffa8 <evtMspReceive+0x950>)
 800fe6e:	7d9b      	ldrb	r3, [r3, #22]
 800fe70:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fe72:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fe74:	4b4c      	ldr	r3, [pc, #304]	; (800ffa8 <evtMspReceive+0x950>)
 800fe76:	7ddb      	ldrb	r3, [r3, #23]
 800fe78:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fe7a:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800fe7c:	4a44      	ldr	r2, [pc, #272]	; (800ff90 <evtMspReceive+0x938>)
 800fe7e:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fe80:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fe82:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 800fe84:	2300      	movs	r3, #0
 800fe86:	637b      	str	r3, [r7, #52]	; 0x34
 800fe88:	e018      	b.n	800febc <evtMspReceive+0x864>
            int flag = (tmp & (1 << availableBoxes[i]));
 800fe8a:	4a48      	ldr	r2, [pc, #288]	; (800ffac <evtMspReceive+0x954>)
 800fe8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	2301      	movs	r3, #1
 800fe96:	4093      	lsls	r3, r2
 800fe98:	461a      	mov	r2, r3
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	613b      	str	r3, [r7, #16]
            if (flag)
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d007      	beq.n	800feb6 <evtMspReceive+0x85e>
                junk |= 1 << i;
 800fea6:	2201      	movs	r2, #1
 800fea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feaa:	fa02 f303 	lsl.w	r3, r2, r3
 800feae:	461a      	mov	r2, r3
 800feb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb2:	4313      	orrs	r3, r2
 800feb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800feb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb8:	3301      	adds	r3, #1
 800feba:	637b      	str	r3, [r7, #52]	; 0x34
 800febc:	4b3c      	ldr	r3, [pc, #240]	; (800ffb0 <evtMspReceive+0x958>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	461a      	mov	r2, r3
 800fec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d3e0      	bcc.n	800fe8a <evtMspReceive+0x832>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 800fec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f007 ff3c 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 800fed0:	4b30      	ldr	r3, [pc, #192]	; (800ff94 <evtMspReceive+0x93c>)
 800fed2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f007 fea3 	bl	8017c24 <pifMsp_AddAnswer8>
        break;
 800fede:	f001 b858 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 800fee2:	4b34      	ldr	r3, [pc, #208]	; (800ffb4 <evtMspReceive+0x95c>)
 800fee4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800feec:	d917      	bls.n	800ff1e <evtMspReceive+0x8c6>
            for (i = 0; i < 3; i++)
 800feee:	2300      	movs	r3, #0
 800fef0:	637b      	str	r3, [r7, #52]	; 0x34
 800fef2:	e010      	b.n	800ff16 <evtMspReceive+0x8be>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 800fef4:	4a30      	ldr	r2, [pc, #192]	; (800ffb8 <evtMspReceive+0x960>)
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	da00      	bge.n	800ff02 <evtMspReceive+0x8aa>
 800ff00:	3307      	adds	r3, #7
 800ff02:	10db      	asrs	r3, r3, #3
 800ff04:	b21b      	sxth	r3, r3
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	4619      	mov	r1, r3
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f007 fed0 	bl	8017cb0 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800ff10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff12:	3301      	adds	r3, #1
 800ff14:	637b      	str	r3, [r7, #52]	; 0x34
 800ff16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	d9eb      	bls.n	800fef4 <evtMspReceive+0x89c>
 800ff1c:	e011      	b.n	800ff42 <evtMspReceive+0x8ea>
        } else {
            for (i = 0; i < 3; i++)
 800ff1e:	2300      	movs	r3, #0
 800ff20:	637b      	str	r3, [r7, #52]	; 0x34
 800ff22:	e00b      	b.n	800ff3c <evtMspReceive+0x8e4>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 800ff24:	4a24      	ldr	r2, [pc, #144]	; (800ffb8 <evtMspReceive+0x960>)
 800ff26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	4619      	mov	r1, r3
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f007 febd 	bl	8017cb0 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800ff36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff38:	3301      	adds	r3, #1
 800ff3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d9f0      	bls.n	800ff24 <evtMspReceive+0x8cc>
        }
        for (i = 0; i < 3; i++)
 800ff42:	2300      	movs	r3, #0
 800ff44:	637b      	str	r3, [r7, #52]	; 0x34
 800ff46:	e00b      	b.n	800ff60 <evtMspReceive+0x908>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 800ff48:	4a1c      	ldr	r2, [pc, #112]	; (800ffbc <evtMspReceive+0x964>)
 800ff4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f007 feab 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800ff5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d9f0      	bls.n	800ff48 <evtMspReceive+0x8f0>
        for (i = 0; i < 3; i++)
 800ff66:	2300      	movs	r3, #0
 800ff68:	637b      	str	r3, [r7, #52]	; 0x34
 800ff6a:	e00b      	b.n	800ff84 <evtMspReceive+0x92c>
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 800ff6c:	4a14      	ldr	r2, [pc, #80]	; (800ffc0 <evtMspReceive+0x968>)
 800ff6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	4619      	mov	r1, r3
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f007 fe99 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800ff7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff80:	3301      	adds	r3, #1
 800ff82:	637b      	str	r3, [r7, #52]	; 0x34
 800ff84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d9f0      	bls.n	800ff6c <evtMspReceive+0x914>
        break;
 800ff8a:	f001 b802 	b.w	8010f92 <evtMspReceive+0x193a>
 800ff8e:	bf00      	nop
 800ff90:	2000169c 	.word	0x2000169c
 800ff94:	2000089c 	.word	0x2000089c
 800ff98:	2000196a 	.word	0x2000196a
 800ff9c:	c000000c 	.word	0xc000000c
 800ffa0:	200016bc 	.word	0x200016bc
 800ffa4:	200014a0 	.word	0x200014a0
 800ffa8:	2000173c 	.word	0x2000173c
 800ffac:	20001ae0 	.word	0x20001ae0
 800ffb0:	20001af9 	.word	0x20001af9
 800ffb4:	20000060 	.word	0x20000060
 800ffb8:	200013cc 	.word	0x200013cc
 800ffbc:	20001434 	.word	0x20001434
 800ffc0:	200013d4 	.word	0x200013d4

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 800ffc4:	2210      	movs	r2, #16
 800ffc6:	498c      	ldr	r1, [pc, #560]	; (80101f8 <evtMspReceive+0xba0>)
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f007 ff09 	bl	8017de0 <pifMsp_AddAnswer>
        break;
 800ffce:	f000 bfe0 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	637b      	str	r3, [r7, #52]	; 0x34
 800ffd6:	e04b      	b.n	8010070 <evtMspReceive+0xa18>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 800ffd8:	4988      	ldr	r1, [pc, #544]	; (80101fc <evtMspReceive+0xba4>)
 800ffda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffdc:	4613      	mov	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	440b      	add	r3, r1
 800ffe6:	33b8      	adds	r3, #184	; 0xb8
 800ffe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	4619      	mov	r1, r3
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f007 fe5d 	bl	8017cb0 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 800fff6:	4981      	ldr	r1, [pc, #516]	; (80101fc <evtMspReceive+0xba4>)
 800fff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fffa:	4613      	mov	r3, r2
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	4413      	add	r3, r2
 8010000:	005b      	lsls	r3, r3, #1
 8010002:	440b      	add	r3, r1
 8010004:	33ba      	adds	r3, #186	; 0xba
 8010006:	f9b3 3000 	ldrsh.w	r3, [r3]
 801000a:	b29b      	uxth	r3, r3
 801000c:	4619      	mov	r1, r3
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f007 fe4e 	bl	8017cb0 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 8010014:	4979      	ldr	r1, [pc, #484]	; (80101fc <evtMspReceive+0xba4>)
 8010016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010018:	4613      	mov	r3, r2
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	440b      	add	r3, r1
 8010022:	33bc      	adds	r3, #188	; 0xbc
 8010024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010028:	b29b      	uxth	r3, r3
 801002a:	4619      	mov	r1, r3
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f007 fe3f 	bl	8017cb0 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 8010032:	4972      	ldr	r1, [pc, #456]	; (80101fc <evtMspReceive+0xba4>)
 8010034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010036:	4613      	mov	r3, r2
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	4413      	add	r3, r2
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	440b      	add	r3, r1
 8010040:	33be      	adds	r3, #190	; 0xbe
 8010042:	f993 3000 	ldrsb.w	r3, [r3]
 8010046:	b2db      	uxtb	r3, r3
 8010048:	4619      	mov	r1, r3
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f007 fdea 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 8010050:	496a      	ldr	r1, [pc, #424]	; (80101fc <evtMspReceive+0xba4>)
 8010052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010054:	4613      	mov	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4413      	add	r3, r2
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	440b      	add	r3, r1
 801005e:	33c0      	adds	r3, #192	; 0xc0
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	4619      	mov	r1, r3
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f007 fe23 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 801006a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801006c:	3301      	adds	r3, #1
 801006e:	637b      	str	r3, [r7, #52]	; 0x34
 8010070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010072:	2b07      	cmp	r3, #7
 8010074:	d9b0      	bls.n	800ffd8 <evtMspReceive+0x980>
        }
        break;
 8010076:	f000 bf8c 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 801007a:	2300      	movs	r3, #0
 801007c:	637b      	str	r3, [r7, #52]	; 0x34
 801007e:	e04d      	b.n	801011c <evtMspReceive+0xac4>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 8010080:	68b8      	ldr	r0, [r7, #8]
 8010082:	f007 fd39 	bl	8017af8 <pifMsp_ReadData16>
 8010086:	4603      	mov	r3, r0
 8010088:	b218      	sxth	r0, r3
 801008a:	495c      	ldr	r1, [pc, #368]	; (80101fc <evtMspReceive+0xba4>)
 801008c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	005b      	lsls	r3, r3, #1
 8010096:	440b      	add	r3, r1
 8010098:	33b8      	adds	r3, #184	; 0xb8
 801009a:	4602      	mov	r2, r0
 801009c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 801009e:	68b8      	ldr	r0, [r7, #8]
 80100a0:	f007 fd2a 	bl	8017af8 <pifMsp_ReadData16>
 80100a4:	4603      	mov	r3, r0
 80100a6:	b218      	sxth	r0, r3
 80100a8:	4954      	ldr	r1, [pc, #336]	; (80101fc <evtMspReceive+0xba4>)
 80100aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	005b      	lsls	r3, r3, #1
 80100b4:	440b      	add	r3, r1
 80100b6:	33ba      	adds	r3, #186	; 0xba
 80100b8:	4602      	mov	r2, r0
 80100ba:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f007 fd1b 	bl	8017af8 <pifMsp_ReadData16>
 80100c2:	4603      	mov	r3, r0
 80100c4:	b218      	sxth	r0, r3
 80100c6:	494d      	ldr	r1, [pc, #308]	; (80101fc <evtMspReceive+0xba4>)
 80100c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ca:	4613      	mov	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	4413      	add	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	440b      	add	r3, r1
 80100d4:	33bc      	adds	r3, #188	; 0xbc
 80100d6:	4602      	mov	r2, r0
 80100d8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 80100da:	68b8      	ldr	r0, [r7, #8]
 80100dc:	f007 fcf8 	bl	8017ad0 <pifMsp_ReadData8>
 80100e0:	4603      	mov	r3, r0
 80100e2:	b258      	sxtb	r0, r3
 80100e4:	4945      	ldr	r1, [pc, #276]	; (80101fc <evtMspReceive+0xba4>)
 80100e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e8:	4613      	mov	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4413      	add	r3, r2
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	440b      	add	r3, r1
 80100f2:	33be      	adds	r3, #190	; 0xbe
 80100f4:	4602      	mov	r2, r0
 80100f6:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 80100f8:	68b8      	ldr	r0, [r7, #8]
 80100fa:	f007 fcfd 	bl	8017af8 <pifMsp_ReadData16>
 80100fe:	4603      	mov	r3, r0
 8010100:	4618      	mov	r0, r3
 8010102:	493e      	ldr	r1, [pc, #248]	; (80101fc <evtMspReceive+0xba4>)
 8010104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010106:	4613      	mov	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	440b      	add	r3, r1
 8010110:	33c0      	adds	r3, #192	; 0xc0
 8010112:	4602      	mov	r2, r0
 8010114:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010118:	3301      	adds	r3, #1
 801011a:	637b      	str	r3, [r7, #52]	; 0x34
 801011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011e:	2b07      	cmp	r3, #7
 8010120:	d9ae      	bls.n	8010080 <evtMspReceive+0xa28>
        }
        break;
 8010122:	f000 bf36 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010126:	2300      	movs	r3, #0
 8010128:	637b      	str	r3, [r7, #52]	; 0x34
 801012a:	e05c      	b.n	80101e6 <evtMspReceive+0xb8e>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 801012c:	4934      	ldr	r1, [pc, #208]	; (8010200 <evtMspReceive+0xba8>)
 801012e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010130:	4613      	mov	r3, r2
 8010132:	00db      	lsls	r3, r3, #3
 8010134:	1a9b      	subs	r3, r3, r2
 8010136:	440b      	add	r3, r1
 8010138:	33d0      	adds	r3, #208	; 0xd0
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	4619      	mov	r1, r3
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f007 fd70 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 8010144:	492e      	ldr	r1, [pc, #184]	; (8010200 <evtMspReceive+0xba8>)
 8010146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010148:	4613      	mov	r3, r2
 801014a:	00db      	lsls	r3, r3, #3
 801014c:	1a9b      	subs	r3, r3, r2
 801014e:	440b      	add	r3, r1
 8010150:	33d1      	adds	r3, #209	; 0xd1
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	4619      	mov	r1, r3
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f007 fd64 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 801015c:	4928      	ldr	r1, [pc, #160]	; (8010200 <evtMspReceive+0xba8>)
 801015e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010160:	4613      	mov	r3, r2
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	1a9b      	subs	r3, r3, r2
 8010166:	440b      	add	r3, r1
 8010168:	33d2      	adds	r3, #210	; 0xd2
 801016a:	f993 3000 	ldrsb.w	r3, [r3]
 801016e:	b2db      	uxtb	r3, r3
 8010170:	4619      	mov	r1, r3
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f007 fd56 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 8010178:	4921      	ldr	r1, [pc, #132]	; (8010200 <evtMspReceive+0xba8>)
 801017a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801017c:	4613      	mov	r3, r2
 801017e:	00db      	lsls	r3, r3, #3
 8010180:	1a9b      	subs	r3, r3, r2
 8010182:	440b      	add	r3, r1
 8010184:	33d3      	adds	r3, #211	; 0xd3
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	4619      	mov	r1, r3
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f007 fd4a 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 8010190:	491b      	ldr	r1, [pc, #108]	; (8010200 <evtMspReceive+0xba8>)
 8010192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010194:	4613      	mov	r3, r2
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	1a9b      	subs	r3, r3, r2
 801019a:	440b      	add	r3, r1
 801019c:	33d4      	adds	r3, #212	; 0xd4
 801019e:	f993 3000 	ldrsb.w	r3, [r3]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	4619      	mov	r1, r3
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f007 fd3c 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 80101ac:	4914      	ldr	r1, [pc, #80]	; (8010200 <evtMspReceive+0xba8>)
 80101ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101b0:	4613      	mov	r3, r2
 80101b2:	00db      	lsls	r3, r3, #3
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	440b      	add	r3, r1
 80101b8:	33d5      	adds	r3, #213	; 0xd5
 80101ba:	f993 3000 	ldrsb.w	r3, [r3]
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	4619      	mov	r1, r3
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f007 fd2e 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 80101c8:	490d      	ldr	r1, [pc, #52]	; (8010200 <evtMspReceive+0xba8>)
 80101ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101cc:	4613      	mov	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	1a9b      	subs	r3, r3, r2
 80101d2:	440b      	add	r3, r1
 80101d4:	33d6      	adds	r3, #214	; 0xd6
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	4619      	mov	r1, r3
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f007 fd22 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80101e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e2:	3301      	adds	r3, #1
 80101e4:	637b      	str	r3, [r7, #52]	; 0x34
 80101e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e8:	2b0f      	cmp	r3, #15
 80101ea:	d99f      	bls.n	801012c <evtMspReceive+0xad4>
        }
        break;
 80101ec:	f000 bed1 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80101f0:	2300      	movs	r3, #0
 80101f2:	637b      	str	r3, [r7, #52]	; 0x34
 80101f4:	e06b      	b.n	80102ce <evtMspReceive+0xc76>
 80101f6:	bf00      	nop
 80101f8:	20000040 	.word	0x20000040
 80101fc:	20000e08 	.word	0x20000e08
 8010200:	2000089c 	.word	0x2000089c
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 8010204:	68b8      	ldr	r0, [r7, #8]
 8010206:	f007 fc63 	bl	8017ad0 <pifMsp_ReadData8>
 801020a:	4603      	mov	r3, r0
 801020c:	4618      	mov	r0, r3
 801020e:	49b9      	ldr	r1, [pc, #740]	; (80104f4 <evtMspReceive+0xe9c>)
 8010210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010212:	4613      	mov	r3, r2
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	1a9b      	subs	r3, r3, r2
 8010218:	440b      	add	r3, r1
 801021a:	33d0      	adds	r3, #208	; 0xd0
 801021c:	4602      	mov	r2, r0
 801021e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 8010220:	68b8      	ldr	r0, [r7, #8]
 8010222:	f007 fc55 	bl	8017ad0 <pifMsp_ReadData8>
 8010226:	4603      	mov	r3, r0
 8010228:	4618      	mov	r0, r3
 801022a:	49b2      	ldr	r1, [pc, #712]	; (80104f4 <evtMspReceive+0xe9c>)
 801022c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801022e:	4613      	mov	r3, r2
 8010230:	00db      	lsls	r3, r3, #3
 8010232:	1a9b      	subs	r3, r3, r2
 8010234:	440b      	add	r3, r1
 8010236:	33d1      	adds	r3, #209	; 0xd1
 8010238:	4602      	mov	r2, r0
 801023a:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 801023c:	68b8      	ldr	r0, [r7, #8]
 801023e:	f007 fc47 	bl	8017ad0 <pifMsp_ReadData8>
 8010242:	4603      	mov	r3, r0
 8010244:	b258      	sxtb	r0, r3
 8010246:	49ab      	ldr	r1, [pc, #684]	; (80104f4 <evtMspReceive+0xe9c>)
 8010248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801024a:	4613      	mov	r3, r2
 801024c:	00db      	lsls	r3, r3, #3
 801024e:	1a9b      	subs	r3, r3, r2
 8010250:	440b      	add	r3, r1
 8010252:	33d2      	adds	r3, #210	; 0xd2
 8010254:	4602      	mov	r2, r0
 8010256:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 8010258:	68b8      	ldr	r0, [r7, #8]
 801025a:	f007 fc39 	bl	8017ad0 <pifMsp_ReadData8>
 801025e:	4603      	mov	r3, r0
 8010260:	4618      	mov	r0, r3
 8010262:	49a4      	ldr	r1, [pc, #656]	; (80104f4 <evtMspReceive+0xe9c>)
 8010264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010266:	4613      	mov	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	440b      	add	r3, r1
 801026e:	33d3      	adds	r3, #211	; 0xd3
 8010270:	4602      	mov	r2, r0
 8010272:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 8010274:	68b8      	ldr	r0, [r7, #8]
 8010276:	f007 fc2b 	bl	8017ad0 <pifMsp_ReadData8>
 801027a:	4603      	mov	r3, r0
 801027c:	b258      	sxtb	r0, r3
 801027e:	499d      	ldr	r1, [pc, #628]	; (80104f4 <evtMspReceive+0xe9c>)
 8010280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010282:	4613      	mov	r3, r2
 8010284:	00db      	lsls	r3, r3, #3
 8010286:	1a9b      	subs	r3, r3, r2
 8010288:	440b      	add	r3, r1
 801028a:	33d4      	adds	r3, #212	; 0xd4
 801028c:	4602      	mov	r2, r0
 801028e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 8010290:	68b8      	ldr	r0, [r7, #8]
 8010292:	f007 fc1d 	bl	8017ad0 <pifMsp_ReadData8>
 8010296:	4603      	mov	r3, r0
 8010298:	b258      	sxtb	r0, r3
 801029a:	4996      	ldr	r1, [pc, #600]	; (80104f4 <evtMspReceive+0xe9c>)
 801029c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801029e:	4613      	mov	r3, r2
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	440b      	add	r3, r1
 80102a6:	33d5      	adds	r3, #213	; 0xd5
 80102a8:	4602      	mov	r2, r0
 80102aa:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 80102ac:	68b8      	ldr	r0, [r7, #8]
 80102ae:	f007 fc0f 	bl	8017ad0 <pifMsp_ReadData8>
 80102b2:	4603      	mov	r3, r0
 80102b4:	4618      	mov	r0, r3
 80102b6:	498f      	ldr	r1, [pc, #572]	; (80104f4 <evtMspReceive+0xe9c>)
 80102b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ba:	4613      	mov	r3, r2
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	1a9b      	subs	r3, r3, r2
 80102c0:	440b      	add	r3, r1
 80102c2:	33d6      	adds	r3, #214	; 0xd6
 80102c4:	4602      	mov	r2, r0
 80102c6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80102c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ca:	3301      	adds	r3, #1
 80102cc:	637b      	str	r3, [r7, #52]	; 0x34
 80102ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d0:	2b0f      	cmp	r3, #15
 80102d2:	d997      	bls.n	8010204 <evtMspReceive+0xbac>
        }
        loadCustomServoMixer();
 80102d4:	f7fa fdf6 	bl	800aec4 <loadCustomServoMixer>
        break;
 80102d8:	f000 be5b 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 80102dc:	4b85      	ldr	r3, [pc, #532]	; (80104f4 <evtMspReceive+0xe9c>)
 80102de:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	4619      	mov	r1, r3
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f007 fc9c 	bl	8017c24 <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 80102ec:	4b82      	ldr	r3, [pc, #520]	; (80104f8 <evtMspReceive+0xea0>)
 80102ee:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	4619      	mov	r1, r3
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f007 fcda 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 80102fc:	4b7e      	ldr	r3, [pc, #504]	; (80104f8 <evtMspReceive+0xea0>)
 80102fe:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010302:	b29b      	uxth	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f007 fcd2 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 801030c:	4b7a      	ldr	r3, [pc, #488]	; (80104f8 <evtMspReceive+0xea0>)
 801030e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010312:	b29b      	uxth	r3, r3
 8010314:	4619      	mov	r1, r3
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f007 fcca 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 801031c:	4b76      	ldr	r3, [pc, #472]	; (80104f8 <evtMspReceive+0xea0>)
 801031e:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8010322:	b29b      	uxth	r3, r3
 8010324:	4619      	mov	r1, r3
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f007 fcc2 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 801032c:	4b72      	ldr	r3, [pc, #456]	; (80104f8 <evtMspReceive+0xea0>)
 801032e:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8010332:	4619      	mov	r1, r3
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	f007 fcbb 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 801033a:	4b6f      	ldr	r3, [pc, #444]	; (80104f8 <evtMspReceive+0xea0>)
 801033c:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8010340:	4619      	mov	r1, r3
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f007 fcb4 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 8010348:	4b6b      	ldr	r3, [pc, #428]	; (80104f8 <evtMspReceive+0xea0>)
 801034a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 801034e:	4619      	mov	r1, r3
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f007 fcad 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 8010356:	4b68      	ldr	r3, [pc, #416]	; (80104f8 <evtMspReceive+0xea0>)
 8010358:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 801035c:	4619      	mov	r1, r3
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f007 fca6 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 8010364:	4b64      	ldr	r3, [pc, #400]	; (80104f8 <evtMspReceive+0xea0>)
 8010366:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 801036a:	4619      	mov	r1, r3
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f007 fceb 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 8010372:	4b61      	ldr	r3, [pc, #388]	; (80104f8 <evtMspReceive+0xea0>)
 8010374:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8010378:	4619      	mov	r1, r3
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f007 fc52 	bl	8017c24 <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 8010380:	2100      	movs	r1, #0
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f007 fce0 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010388:	2100      	movs	r1, #0
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f007 fcdc 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010390:	2100      	movs	r1, #0
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	f007 fcd8 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010398:	2100      	movs	r1, #0
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f007 fcd4 	bl	8017d48 <pifMsp_AddAnswer32>
        break;
 80103a0:	f000 bdf7 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 80103a4:	68b8      	ldr	r0, [r7, #8]
 80103a6:	f007 fb93 	bl	8017ad0 <pifMsp_ReadData8>
 80103aa:	4603      	mov	r3, r0
 80103ac:	b25a      	sxtb	r2, r3
 80103ae:	4b51      	ldr	r3, [pc, #324]	; (80104f4 <evtMspReceive+0xe9c>)
 80103b0:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 80103b4:	68b8      	ldr	r0, [r7, #8]
 80103b6:	f007 fb9f 	bl	8017af8 <pifMsp_ReadData16>
 80103ba:	4603      	mov	r3, r0
 80103bc:	b21a      	sxth	r2, r3
 80103be:	4b4e      	ldr	r3, [pc, #312]	; (80104f8 <evtMspReceive+0xea0>)
 80103c0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 80103c4:	68b8      	ldr	r0, [r7, #8]
 80103c6:	f007 fb97 	bl	8017af8 <pifMsp_ReadData16>
 80103ca:	4603      	mov	r3, r0
 80103cc:	b21a      	sxth	r2, r3
 80103ce:	4b4a      	ldr	r3, [pc, #296]	; (80104f8 <evtMspReceive+0xea0>)
 80103d0:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 80103d4:	68b8      	ldr	r0, [r7, #8]
 80103d6:	f007 fb8f 	bl	8017af8 <pifMsp_ReadData16>
 80103da:	4603      	mov	r3, r0
 80103dc:	b21a      	sxth	r2, r3
 80103de:	4b46      	ldr	r3, [pc, #280]	; (80104f8 <evtMspReceive+0xea0>)
 80103e0:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 80103e4:	68b8      	ldr	r0, [r7, #8]
 80103e6:	f007 fb87 	bl	8017af8 <pifMsp_ReadData16>
 80103ea:	4603      	mov	r3, r0
 80103ec:	b21a      	sxth	r2, r3
 80103ee:	4b42      	ldr	r3, [pc, #264]	; (80104f8 <evtMspReceive+0xea0>)
 80103f0:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 80103f4:	68b8      	ldr	r0, [r7, #8]
 80103f6:	f007 fb7f 	bl	8017af8 <pifMsp_ReadData16>
 80103fa:	4603      	mov	r3, r0
 80103fc:	461a      	mov	r2, r3
 80103fe:	4b3e      	ldr	r3, [pc, #248]	; (80104f8 <evtMspReceive+0xea0>)
 8010400:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 8010404:	68b8      	ldr	r0, [r7, #8]
 8010406:	f007 fb77 	bl	8017af8 <pifMsp_ReadData16>
 801040a:	4603      	mov	r3, r0
 801040c:	461a      	mov	r2, r3
 801040e:	4b3a      	ldr	r3, [pc, #232]	; (80104f8 <evtMspReceive+0xea0>)
 8010410:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 8010414:	68b8      	ldr	r0, [r7, #8]
 8010416:	f007 fb6f 	bl	8017af8 <pifMsp_ReadData16>
 801041a:	4603      	mov	r3, r0
 801041c:	461a      	mov	r2, r3
 801041e:	4b36      	ldr	r3, [pc, #216]	; (80104f8 <evtMspReceive+0xea0>)
 8010420:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 8010424:	68b8      	ldr	r0, [r7, #8]
 8010426:	f007 fb67 	bl	8017af8 <pifMsp_ReadData16>
 801042a:	4603      	mov	r3, r0
 801042c:	461a      	mov	r2, r3
 801042e:	4b32      	ldr	r3, [pc, #200]	; (80104f8 <evtMspReceive+0xea0>)
 8010430:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 8010434:	68b8      	ldr	r0, [r7, #8]
 8010436:	f007 fb7c 	bl	8017b32 <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 801043a:	68b8      	ldr	r0, [r7, #8]
 801043c:	f007 fb48 	bl	8017ad0 <pifMsp_ReadData8>
 8010440:	4603      	mov	r3, r0
 8010442:	461a      	mov	r2, r3
 8010444:	4b2c      	ldr	r3, [pc, #176]	; (80104f8 <evtMspReceive+0xea0>)
 8010446:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 801044a:	68b8      	ldr	r0, [r7, #8]
 801044c:	f007 fb71 	bl	8017b32 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010450:	68b8      	ldr	r0, [r7, #8]
 8010452:	f007 fb6e 	bl	8017b32 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010456:	68b8      	ldr	r0, [r7, #8]
 8010458:	f007 fb6b 	bl	8017b32 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 801045c:	68b8      	ldr	r0, [r7, #8]
 801045e:	f007 fb68 	bl	8017b32 <pifMsp_ReadData32>
        break;
 8010462:	f000 bd96 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 8010466:	2210      	movs	r2, #16
 8010468:	4924      	ldr	r1, [pc, #144]	; (80104fc <evtMspReceive+0xea4>)
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f007 fcb8 	bl	8017de0 <pifMsp_AddAnswer>
        break;
 8010470:	f000 bd8f 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 8010474:	2300      	movs	r3, #0
 8010476:	637b      	str	r3, [r7, #52]	; 0x34
 8010478:	e00b      	b.n	8010492 <evtMspReceive+0xe3a>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 801047a:	4a21      	ldr	r2, [pc, #132]	; (8010500 <evtMspReceive+0xea8>)
 801047c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801047e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010482:	b29b      	uxth	r3, r3
 8010484:	4619      	mov	r1, r3
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f007 fc12 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 801048c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048e:	3301      	adds	r3, #1
 8010490:	637b      	str	r3, [r7, #52]	; 0x34
 8010492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010494:	2b07      	cmp	r3, #7
 8010496:	d9f0      	bls.n	801047a <evtMspReceive+0xe22>
        break;
 8010498:	f000 bd7b 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 801049c:	4b19      	ldr	r3, [pc, #100]	; (8010504 <evtMspReceive+0xeac>)
 801049e:	7adb      	ldrb	r3, [r3, #11]
 80104a0:	4619      	mov	r1, r3
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f007 fbbe 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 80104a8:	4b17      	ldr	r3, [pc, #92]	; (8010508 <evtMspReceive+0xeb0>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	4619      	mov	r1, r3
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f007 fbb8 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 80104b4:	4b15      	ldr	r3, [pc, #84]	; (801050c <evtMspReceive+0xeb4>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4619      	mov	r1, r3
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f007 fc44 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 80104c0:	4b12      	ldr	r3, [pc, #72]	; (801050c <evtMspReceive+0xeb4>)
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	4619      	mov	r1, r3
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f007 fc3e 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 80104cc:	4b10      	ldr	r3, [pc, #64]	; (8010510 <evtMspReceive+0xeb8>)
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	4619      	mov	r1, r3
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f007 fbec 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 80104d8:	4b0e      	ldr	r3, [pc, #56]	; (8010514 <evtMspReceive+0xebc>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	4619      	mov	r1, r3
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f007 fbe6 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 80104e4:	4b0c      	ldr	r3, [pc, #48]	; (8010518 <evtMspReceive+0xec0>)
 80104e6:	881b      	ldrh	r3, [r3, #0]
 80104e8:	4619      	mov	r1, r3
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f007 fbe0 	bl	8017cb0 <pifMsp_AddAnswer16>
        break;
 80104f0:	f000 bd4f 	b.w	8010f92 <evtMspReceive+0x193a>
 80104f4:	2000089c 	.word	0x2000089c
 80104f8:	20000e08 	.word	0x20000e08
 80104fc:	20001504 	.word	0x20001504
 8010500:	200016d4 	.word	0x200016d4
 8010504:	2000169c 	.word	0x2000169c
 8010508:	20001780 	.word	0x20001780
 801050c:	20001760 	.word	0x20001760
 8010510:	20001786 	.word	0x20001786
 8010514:	20001788 	.word	0x20001788
 8010518:	20001792 	.word	0x20001792

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 801051c:	4bb0      	ldr	r3, [pc, #704]	; (80107e0 <evtMspReceive+0x1188>)
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	4619      	mov	r1, r3
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f007 fbc4 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 8010528:	4bae      	ldr	r3, [pc, #696]	; (80107e4 <evtMspReceive+0x118c>)
 801052a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801052e:	b29b      	uxth	r3, r3
 8010530:	4619      	mov	r1, r3
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f007 fbbc 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 8010538:	4bab      	ldr	r3, [pc, #684]	; (80107e8 <evtMspReceive+0x1190>)
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	f003 0301 	and.w	r3, r3, #1
 8010540:	b2db      	uxtb	r3, r3
 8010542:	4619      	mov	r1, r3
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f007 fb6d 	bl	8017c24 <pifMsp_AddAnswer8>
        break;
 801054a:	f000 bd22 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 801054e:	2300      	movs	r3, #0
 8010550:	637b      	str	r3, [r7, #52]	; 0x34
 8010552:	e00b      	b.n	801056c <evtMspReceive+0xf14>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 8010554:	4aa5      	ldr	r2, [pc, #660]	; (80107ec <evtMspReceive+0x1194>)
 8010556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010558:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801055c:	b29b      	uxth	r3, r3
 801055e:	4619      	mov	r1, r3
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f007 fba5 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	3301      	adds	r3, #1
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	2b01      	cmp	r3, #1
 8010570:	d9f0      	bls.n	8010554 <evtMspReceive+0xefc>
        pifMsp_AddAnswer16(p_owner, heading);
 8010572:	4b9f      	ldr	r3, [pc, #636]	; (80107f0 <evtMspReceive+0x1198>)
 8010574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010578:	b29b      	uxth	r3, r3
 801057a:	4619      	mov	r1, r3
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f007 fb97 	bl	8017cb0 <pifMsp_AddAnswer16>
        break;
 8010582:	f000 bd06 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 8010586:	4b9b      	ldr	r3, [pc, #620]	; (80107f4 <evtMspReceive+0x119c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4619      	mov	r1, r3
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	f007 fbdb 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 8010592:	4b99      	ldr	r3, [pc, #612]	; (80107f8 <evtMspReceive+0x11a0>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	b29b      	uxth	r3, r3
 8010598:	4619      	mov	r1, r3
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f007 fb88 	bl	8017cb0 <pifMsp_AddAnswer16>
        break;
 80105a0:	f000 bcf7 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 80105a4:	4b95      	ldr	r3, [pc, #596]	; (80107fc <evtMspReceive+0x11a4>)
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	b21b      	sxth	r3, r3
 80105aa:	22ff      	movs	r2, #255	; 0xff
 80105ac:	2100      	movs	r1, #0
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f3 fbd0 	bl	8003d54 <constrain>
 80105b4:	4603      	mov	r3, r0
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	4619      	mov	r1, r3
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f007 fb32 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 80105c0:	4b8f      	ldr	r3, [pc, #572]	; (8010800 <evtMspReceive+0x11a8>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105c8:	2100      	movs	r1, #0
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7f3 fbc2 	bl	8003d54 <constrain>
 80105d0:	4603      	mov	r3, r0
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	4619      	mov	r1, r3
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f007 fb6a 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 80105dc:	4b89      	ldr	r3, [pc, #548]	; (8010804 <evtMspReceive+0x11ac>)
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	4619      	mov	r1, r3
 80105e2:	68f8      	ldr	r0, [r7, #12]
 80105e4:	f007 fb64 	bl	8017cb0 <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 80105e8:	4b87      	ldr	r3, [pc, #540]	; (8010808 <evtMspReceive+0x11b0>)
 80105ea:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d017      	beq.n	8010622 <evtMspReceive+0xfca>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 80105f2:	4b86      	ldr	r3, [pc, #536]	; (801080c <evtMspReceive+0x11b4>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80105fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80105fe:	4613      	mov	r3, r2
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	4413      	add	r3, r2
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801060a:	2100      	movs	r1, #0
 801060c:	4618      	mov	r0, r3
 801060e:	f7f3 fba1 	bl	8003d54 <constrain>
 8010612:	4603      	mov	r3, r0
 8010614:	b29b      	uxth	r3, r3
 8010616:	4619      	mov	r1, r3
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f007 fb49 	bl	8017cb0 <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 801061e:	f000 bcb8 	b.w	8010f92 <evtMspReceive+0x193a>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010622:	4b7a      	ldr	r3, [pc, #488]	; (801080c <evtMspReceive+0x11b4>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	bfb8      	it	lt
 801062a:	425b      	neglt	r3, r3
 801062c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010630:	2100      	movs	r1, #0
 8010632:	4618      	mov	r0, r3
 8010634:	f7f3 fb8e 	bl	8003d54 <constrain>
 8010638:	4603      	mov	r3, r0
 801063a:	b29b      	uxth	r3, r3
 801063c:	4619      	mov	r1, r3
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f007 fb36 	bl	8017cb0 <pifMsp_AddAnswer16>
        break;
 8010644:	f000 bca5 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 8010648:	4b71      	ldr	r3, [pc, #452]	; (8010810 <evtMspReceive+0x11b8>)
 801064a:	7fdb      	ldrb	r3, [r3, #31]
 801064c:	4619      	mov	r1, r3
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f007 fae8 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 8010654:	4b6e      	ldr	r3, [pc, #440]	; (8010810 <evtMspReceive+0x11b8>)
 8010656:	f893 3020 	ldrb.w	r3, [r3, #32]
 801065a:	4619      	mov	r1, r3
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f007 fae1 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 8010662:	4b6b      	ldr	r3, [pc, #428]	; (8010810 <evtMspReceive+0x11b8>)
 8010664:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010668:	4619      	mov	r1, r3
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f007 fada 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 8010670:	4b67      	ldr	r3, [pc, #412]	; (8010810 <evtMspReceive+0x11b8>)
 8010672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010676:	4619      	mov	r1, r3
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f007 fad3 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 801067e:	4b64      	ldr	r3, [pc, #400]	; (8010810 <evtMspReceive+0x11b8>)
 8010680:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010684:	4619      	mov	r1, r3
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f007 facc 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 801068c:	4b60      	ldr	r3, [pc, #384]	; (8010810 <evtMspReceive+0x11b8>)
 801068e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010692:	4619      	mov	r1, r3
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f007 fac5 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 801069a:	4b5d      	ldr	r3, [pc, #372]	; (8010810 <evtMspReceive+0x11b8>)
 801069c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80106a0:	4619      	mov	r1, r3
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f007 fabe 	bl	8017c24 <pifMsp_AddAnswer8>
        break;
 80106a8:	f000 bc73 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 80106ac:	2300      	movs	r3, #0
 80106ae:	637b      	str	r3, [r7, #52]	; 0x34
 80106b0:	e036      	b.n	8010720 <evtMspReceive+0x10c8>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 80106b2:	4a57      	ldr	r2, [pc, #348]	; (8010810 <evtMspReceive+0x11b8>)
 80106b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b6:	4413      	add	r3, r2
 80106b8:	3301      	adds	r3, #1
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	4619      	mov	r1, r3
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f007 fab0 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 80106c4:	4a52      	ldr	r2, [pc, #328]	; (8010810 <evtMspReceive+0x11b8>)
 80106c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c8:	4413      	add	r3, r2
 80106ca:	330b      	adds	r3, #11
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	4619      	mov	r1, r3
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f007 faa7 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 80106d6:	4a4e      	ldr	r2, [pc, #312]	; (8010810 <evtMspReceive+0x11b8>)
 80106d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106da:	4413      	add	r3, r2
 80106dc:	3315      	adds	r3, #21
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	4619      	mov	r1, r3
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f007 fa9e 	bl	8017c24 <pifMsp_AddAnswer8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 80106e8:	4a49      	ldr	r2, [pc, #292]	; (8010810 <evtMspReceive+0x11b8>)
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	4413      	add	r3, r2
 80106ee:	3301      	adds	r3, #1
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	4a46      	ldr	r2, [pc, #280]	; (8010810 <evtMspReceive+0x11b8>)
 80106f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f8:	4413      	add	r3, r2
 80106fa:	330b      	adds	r3, #11
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	4619      	mov	r1, r3
 8010700:	4a43      	ldr	r2, [pc, #268]	; (8010810 <evtMspReceive+0x11b8>)
 8010702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010704:	4413      	add	r3, r2
 8010706:	3315      	adds	r3, #21
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	9100      	str	r1, [sp, #0]
 801070e:	4603      	mov	r3, r0
 8010710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010712:	4940      	ldr	r1, [pc, #256]	; (8010814 <evtMspReceive+0x11bc>)
 8010714:	2002      	movs	r0, #2
 8010716:	f002 fef3 	bl	8013500 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 801071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071c:	3301      	adds	r3, #1
 801071e:	637b      	str	r3, [r7, #52]	; 0x34
 8010720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010722:	2b09      	cmp	r3, #9
 8010724:	d9c5      	bls.n	80106b2 <evtMspReceive+0x105a>
#endif
        }
        break;
 8010726:	f000 bc34 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 801072a:	2230      	movs	r2, #48	; 0x30
 801072c:	493a      	ldr	r1, [pc, #232]	; (8010818 <evtMspReceive+0x11c0>)
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f007 fb56 	bl	8017de0 <pifMsp_AddAnswer>
        break;
 8010734:	f000 bc2d 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010738:	2300      	movs	r3, #0
 801073a:	637b      	str	r3, [r7, #52]	; 0x34
 801073c:	e010      	b.n	8010760 <evtMspReceive+0x1108>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 801073e:	4a37      	ldr	r2, [pc, #220]	; (801081c <evtMspReceive+0x11c4>)
 8010740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010742:	4413      	add	r3, r2
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	4a32      	ldr	r2, [pc, #200]	; (8010810 <evtMspReceive+0x11b8>)
 8010748:	3312      	adds	r3, #18
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	4413      	add	r3, r2
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	b29b      	uxth	r3, r3
 8010752:	4619      	mov	r1, r3
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f007 faab 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 801075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075c:	3301      	adds	r3, #1
 801075e:	637b      	str	r3, [r7, #52]	; 0x34
 8010760:	4b2f      	ldr	r3, [pc, #188]	; (8010820 <evtMspReceive+0x11c8>)
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	461a      	mov	r2, r3
 8010766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010768:	4293      	cmp	r3, r2
 801076a:	d3e8      	bcc.n	801073e <evtMspReceive+0x10e6>
        break;
 801076c:	f000 bc11 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f7fe fdeb 	bl	800f34c <_SerializeBoxNamesReply>
        break;
 8010776:	f000 bc0c 	b.w	8010f92 <evtMspReceive+0x193a>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 801077a:	2300      	movs	r3, #0
 801077c:	637b      	str	r3, [r7, #52]	; 0x34
 801077e:	e028      	b.n	80107d2 <evtMspReceive+0x117a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010780:	2300      	movs	r3, #0
 8010782:	633b      	str	r3, [r7, #48]	; 0x30
 8010784:	e01f      	b.n	80107c6 <evtMspReceive+0x116e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 8010786:	4927      	ldr	r1, [pc, #156]	; (8010824 <evtMspReceive+0x11cc>)
 8010788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	009b      	lsls	r3, r3, #2
 8010792:	440b      	add	r3, r1
 8010794:	3308      	adds	r3, #8
 8010796:	781a      	ldrb	r2, [r3, #0]
 8010798:	4920      	ldr	r1, [pc, #128]	; (801081c <evtMspReceive+0x11c4>)
 801079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079c:	440b      	add	r3, r1
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d10d      	bne.n	80107c0 <evtMspReceive+0x1168>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 80107a4:	491f      	ldr	r1, [pc, #124]	; (8010824 <evtMspReceive+0x11cc>)
 80107a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a8:	4613      	mov	r3, r2
 80107aa:	005b      	lsls	r3, r3, #1
 80107ac:	4413      	add	r3, r2
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	440b      	add	r3, r1
 80107b2:	3308      	adds	r3, #8
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	4619      	mov	r1, r3
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f007 fa33 	bl	8017c24 <pifMsp_AddAnswer8>
                    break;
 80107be:	e005      	b.n	80107cc <evtMspReceive+0x1174>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80107c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c2:	3301      	adds	r3, #1
 80107c4:	633b      	str	r3, [r7, #48]	; 0x30
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	2b18      	cmp	r3, #24
 80107ca:	d9dc      	bls.n	8010786 <evtMspReceive+0x112e>
        for (i = 0; i < numberBoxItems; i++) {
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	3301      	adds	r3, #1
 80107d0:	637b      	str	r3, [r7, #52]	; 0x34
 80107d2:	4b13      	ldr	r3, [pc, #76]	; (8010820 <evtMspReceive+0x11c8>)
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	461a      	mov	r2, r3
 80107d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107da:	4293      	cmp	r3, r2
 80107dc:	d3d0      	bcc.n	8010780 <evtMspReceive+0x1128>
                }
            }
        }
        break;
 80107de:	e3d8      	b.n	8010f92 <evtMspReceive+0x193a>
 80107e0:	20001782 	.word	0x20001782
 80107e4:	20001784 	.word	0x20001784
 80107e8:	2000178a 	.word	0x2000178a
 80107ec:	20001444 	.word	0x20001444
 80107f0:	20001968 	.word	0x20001968
 80107f4:	20001408 	.word	0x20001408
 80107f8:	20001420 	.word	0x20001420
 80107fc:	200016c0 	.word	0x200016c0
 8010800:	200016c8 	.word	0x200016c8
 8010804:	20001728 	.word	0x20001728
 8010808:	2000089c 	.word	0x2000089c
 801080c:	200016c4 	.word	0x200016c4
 8010810:	20000e08 	.word	0x20000e08
 8010814:	08027090 	.word	0x08027090
 8010818:	08028e74 	.word	0x08028e74
 801081c:	20001ae0 	.word	0x20001ae0
 8010820:	20001af9 	.word	0x20001af9
 8010824:	08028d3c 	.word	0x08028d3c

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 8010828:	4ba8      	ldr	r3, [pc, #672]	; (8010acc <evtMspReceive+0x1474>)
 801082a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 801082e:	4619      	mov	r1, r3
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f007 fa3d 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 8010836:	4ba5      	ldr	r3, [pc, #660]	; (8010acc <evtMspReceive+0x1474>)
 8010838:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 801083c:	4619      	mov	r1, r3
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f007 fa36 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 8010844:	4ba1      	ldr	r3, [pc, #644]	; (8010acc <evtMspReceive+0x1474>)
 8010846:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 801084a:	4619      	mov	r1, r3
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f007 fa2f 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 8010852:	4b9e      	ldr	r3, [pc, #632]	; (8010acc <evtMspReceive+0x1474>)
 8010854:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010858:	4619      	mov	r1, r3
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f007 fa28 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 8010860:	4b9b      	ldr	r3, [pc, #620]	; (8010ad0 <evtMspReceive+0x1478>)
 8010862:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010866:	4619      	mov	r1, r3
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f007 fa21 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 801086e:	4b97      	ldr	r3, [pc, #604]	; (8010acc <evtMspReceive+0x1474>)
 8010870:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010874:	4619      	mov	r1, r3
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f007 f9d4 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 801087c:	4b93      	ldr	r3, [pc, #588]	; (8010acc <evtMspReceive+0x1474>)
 801087e:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010882:	b2db      	uxtb	r3, r3
 8010884:	4619      	mov	r1, r3
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f007 f9cc 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 801088c:	4b8f      	ldr	r3, [pc, #572]	; (8010acc <evtMspReceive+0x1474>)
 801088e:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010892:	b2db      	uxtb	r3, r3
 8010894:	4619      	mov	r1, r3
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f007 f9c4 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 801089c:	4b8b      	ldr	r3, [pc, #556]	; (8010acc <evtMspReceive+0x1474>)
 801089e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80108a2:	4619      	mov	r1, r3
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f007 f9bd 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 80108aa:	4b88      	ldr	r3, [pc, #544]	; (8010acc <evtMspReceive+0x1474>)
 80108ac:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80108b0:	4619      	mov	r1, r3
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f007 f9b6 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 80108b8:	2100      	movs	r1, #0
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f007 f9b2 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 80108c0:	4b83      	ldr	r3, [pc, #524]	; (8010ad0 <evtMspReceive+0x1478>)
 80108c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80108c6:	4a83      	ldr	r2, [pc, #524]	; (8010ad4 <evtMspReceive+0x147c>)
 80108c8:	fb82 1203 	smull	r1, r2, r2, r3
 80108cc:	1092      	asrs	r2, r2, #2
 80108ce:	17db      	asrs	r3, r3, #31
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	4619      	mov	r1, r3
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f007 f9e9 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 80108de:	4b7b      	ldr	r3, [pc, #492]	; (8010acc <evtMspReceive+0x1474>)
 80108e0:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 80108e4:	4619      	mov	r1, r3
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f007 f99c 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 80108ec:	4b77      	ldr	r3, [pc, #476]	; (8010acc <evtMspReceive+0x1474>)
 80108ee:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 80108f2:	4619      	mov	r1, r3
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f007 f995 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 80108fa:	4b74      	ldr	r3, [pc, #464]	; (8010acc <evtMspReceive+0x1474>)
 80108fc:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010900:	4619      	mov	r1, r3
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f007 f98e 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 8010908:	4b70      	ldr	r3, [pc, #448]	; (8010acc <evtMspReceive+0x1474>)
 801090a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801090e:	4619      	mov	r1, r3
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f007 f987 	bl	8017c24 <pifMsp_AddAnswer8>
        break;
 8010916:	e33c      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010918:	2300      	movs	r3, #0
 801091a:	637b      	str	r3, [r7, #52]	; 0x34
 801091c:	e00a      	b.n	8010934 <evtMspReceive+0x12dc>
            pifMsp_AddAnswer8(p_owner, i + 1);
 801091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010920:	b2db      	uxtb	r3, r3
 8010922:	3301      	adds	r3, #1
 8010924:	b2db      	uxtb	r3, r3
 8010926:	4619      	mov	r1, r3
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f007 f97b 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	3301      	adds	r3, #1
 8010932:	637b      	str	r3, [r7, #52]	; 0x34
 8010934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010936:	2b07      	cmp	r3, #7
 8010938:	d9f1      	bls.n	801091e <evtMspReceive+0x12c6>
        break;
 801093a:	e32a      	b.n	8010f92 <evtMspReceive+0x193a>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 801093c:	68b8      	ldr	r0, [r7, #8]
 801093e:	f007 f8c7 	bl	8017ad0 <pifMsp_ReadData8>
 8010942:	4603      	mov	r3, r0
 8010944:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 8010946:	7efb      	ldrb	r3, [r7, #27]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d106      	bne.n	801095a <evtMspReceive+0x1302>
            lat = GPS_home[LAT];
 801094c:	4b62      	ldr	r3, [pc, #392]	; (8010ad8 <evtMspReceive+0x1480>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010952:	4b61      	ldr	r3, [pc, #388]	; (8010ad8 <evtMspReceive+0x1480>)
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	627b      	str	r3, [r7, #36]	; 0x24
 8010958:	e008      	b.n	801096c <evtMspReceive+0x1314>
        } else if (wp_no == 16) {
 801095a:	7efb      	ldrb	r3, [r7, #27]
 801095c:	2b10      	cmp	r3, #16
 801095e:	d105      	bne.n	801096c <evtMspReceive+0x1314>
            lat = GPS_hold[LAT];
 8010960:	4b5e      	ldr	r3, [pc, #376]	; (8010adc <evtMspReceive+0x1484>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010966:	4b5d      	ldr	r3, [pc, #372]	; (8010adc <evtMspReceive+0x1484>)
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 801096c:	7efb      	ldrb	r3, [r7, #27]
 801096e:	4619      	mov	r1, r3
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f007 f957 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	4619      	mov	r1, r3
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f007 f9e4 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	4619      	mov	r1, r3
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f007 f9df 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 801098a:	4b55      	ldr	r3, [pc, #340]	; (8010ae0 <evtMspReceive+0x1488>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4619      	mov	r1, r3
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f007 f9d9 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 8010996:	2100      	movs	r1, #0
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f007 f989 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 801099e:	2100      	movs	r1, #0
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f007 f985 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 80109a6:	2100      	movs	r1, #0
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f007 f93b 	bl	8017c24 <pifMsp_AddAnswer8>
        break;
 80109ae:	e2f0      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 80109b0:	68b8      	ldr	r0, [r7, #8]
 80109b2:	f007 f88d 	bl	8017ad0 <pifMsp_ReadData8>
 80109b6:	4603      	mov	r3, r0
 80109b8:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 80109ba:	68b8      	ldr	r0, [r7, #8]
 80109bc:	f007 f8b9 	bl	8017b32 <pifMsp_ReadData32>
 80109c0:	4603      	mov	r3, r0
 80109c2:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 80109c4:	68b8      	ldr	r0, [r7, #8]
 80109c6:	f007 f8b4 	bl	8017b32 <pifMsp_ReadData32>
 80109ca:	4603      	mov	r3, r0
 80109cc:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 80109ce:	68b8      	ldr	r0, [r7, #8]
 80109d0:	f007 f8af 	bl	8017b32 <pifMsp_ReadData32>
 80109d4:	4603      	mov	r3, r0
 80109d6:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 80109d8:	68b8      	ldr	r0, [r7, #8]
 80109da:	f007 f88d 	bl	8017af8 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 80109de:	68b8      	ldr	r0, [r7, #8]
 80109e0:	f007 f88a 	bl	8017af8 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 80109e4:	68b8      	ldr	r0, [r7, #8]
 80109e6:	f007 f873 	bl	8017ad0 <pifMsp_ReadData8>
        if (wp_no == 0) {
 80109ea:	7efb      	ldrb	r3, [r7, #27]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d113      	bne.n	8010a18 <evtMspReceive+0x13c0>
            GPS_home[LAT] = lat;
 80109f0:	4a39      	ldr	r2, [pc, #228]	; (8010ad8 <evtMspReceive+0x1480>)
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 80109f6:	4a38      	ldr	r2, [pc, #224]	; (8010ad8 <evtMspReceive+0x1480>)
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 80109fc:	4b39      	ldr	r3, [pc, #228]	; (8010ae4 <evtMspReceive+0x148c>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010a02:	4b38      	ldr	r3, [pc, #224]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f000 82ba 	beq.w	8010f84 <evtMspReceive+0x192c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010a10:	4a33      	ldr	r2, [pc, #204]	; (8010ae0 <evtMspReceive+0x1488>)
 8010a12:	6a3b      	ldr	r3, [r7, #32]
 8010a14:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 8010a16:	e2b5      	b.n	8010f84 <evtMspReceive+0x192c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010a18:	7efb      	ldrb	r3, [r7, #27]
 8010a1a:	2b10      	cmp	r3, #16
 8010a1c:	f040 82b2 	bne.w	8010f84 <evtMspReceive+0x192c>
            GPS_hold[LAT] = lat;
 8010a20:	4a2e      	ldr	r2, [pc, #184]	; (8010adc <evtMspReceive+0x1484>)
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010a26:	4a2d      	ldr	r2, [pc, #180]	; (8010adc <evtMspReceive+0x1484>)
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010a2c:	6a3b      	ldr	r3, [r7, #32]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <evtMspReceive+0x13e0>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010a32:	4a2b      	ldr	r2, [pc, #172]	; (8010ae0 <evtMspReceive+0x1488>)
 8010a34:	6a3b      	ldr	r3, [r7, #32]
 8010a36:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010a38:	4b2b      	ldr	r3, [pc, #172]	; (8010ae8 <evtMspReceive+0x1490>)
 8010a3a:	2202      	movs	r2, #2
 8010a3c:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010a3e:	492b      	ldr	r1, [pc, #172]	; (8010aec <evtMspReceive+0x1494>)
 8010a40:	4826      	ldr	r0, [pc, #152]	; (8010adc <evtMspReceive+0x1484>)
 8010a42:	f7f8 fb71 	bl	8009128 <GPS_set_next_wp>
        break;
 8010a46:	e29d      	b.n	8010f84 <evtMspReceive+0x192c>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010a48:	4b26      	ldr	r3, [pc, #152]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a4a:	785b      	ldrb	r3, [r3, #1]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f040 829b 	bne.w	8010f88 <evtMspReceive+0x1930>
            checkFirstTime(true);
 8010a52:	2001      	movs	r0, #1
 8010a54:	f7f5 ff80 	bl	8006958 <checkFirstTime>
        break;
 8010a58:	e296      	b.n	8010f88 <evtMspReceive+0x1930>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010a5a:	4b22      	ldr	r3, [pc, #136]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a5c:	785b      	ldrb	r3, [r3, #1]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f040 8294 	bne.w	8010f8c <evtMspReceive+0x1934>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010a64:	4b22      	ldr	r3, [pc, #136]	; (8010af0 <evtMspReceive+0x1498>)
 8010a66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010a6a:	801a      	strh	r2, [r3, #0]
        break;
 8010a6c:	e28e      	b.n	8010f8c <evtMspReceive+0x1934>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010a6e:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a70:	785b      	ldrb	r3, [r3, #1]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f040 828c 	bne.w	8010f90 <evtMspReceive+0x1938>
            f.CALIBRATE_MAG = 1;
 8010a78:	4b1a      	ldr	r3, [pc, #104]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	739a      	strb	r2, [r3, #14]
        break;
 8010a7e:	e287      	b.n	8010f90 <evtMspReceive+0x1938>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <evtMspReceive+0x148c>)
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d004      	beq.n	8010a92 <evtMspReceive+0x143a>
            pifMsp_MakeError(p_owner, p_packet);
 8010a88:	68b9      	ldr	r1, [r7, #8]
 8010a8a:	68f8      	ldr	r0, [r7, #12]
 8010a8c:	f007 f9fa 	bl	8017e84 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 8010a90:	e27f      	b.n	8010f92 <evtMspReceive+0x193a>
            writeEEPROM(0, true);
 8010a92:	2101      	movs	r1, #1
 8010a94:	2000      	movs	r0, #0
 8010a96:	f7f5 fedd 	bl	8006854 <writeEEPROM>
        break;
 8010a9a:	e27a      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 8010a9c:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <evtMspReceive+0x1474>)
 8010a9e:	899b      	ldrh	r3, [r3, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d02d      	beq.n	8010b00 <evtMspReceive+0x14a8>
 8010aa4:	4b13      	ldr	r3, [pc, #76]	; (8010af4 <evtMspReceive+0x149c>)
 8010aa6:	881a      	ldrh	r2, [r3, #0]
 8010aa8:	4b08      	ldr	r3, [pc, #32]	; (8010acc <evtMspReceive+0x1474>)
 8010aaa:	899b      	ldrh	r3, [r3, #12]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	4b06      	ldr	r3, [pc, #24]	; (8010acc <evtMspReceive+0x1474>)
 8010ab2:	899b      	ldrh	r3, [r3, #12]
 8010ab4:	4910      	ldr	r1, [pc, #64]	; (8010af8 <evtMspReceive+0x14a0>)
 8010ab6:	fba1 1303 	umull	r1, r3, r1, r3
 8010aba:	08db      	lsrs	r3, r3, #3
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4413      	add	r3, r2
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	b21a      	sxth	r2, r3
 8010ac4:	4b0d      	ldr	r3, [pc, #52]	; (8010afc <evtMspReceive+0x14a4>)
 8010ac6:	801a      	strh	r2, [r3, #0]
 8010ac8:	e01f      	b.n	8010b0a <evtMspReceive+0x14b2>
 8010aca:	bf00      	nop
 8010acc:	2000089c 	.word	0x2000089c
 8010ad0:	20000e08 	.word	0x20000e08
 8010ad4:	66666667 	.word	0x66666667
 8010ad8:	20001768 	.word	0x20001768
 8010adc:	20001774 	.word	0x20001774
 8010ae0:	20001410 	.word	0x20001410
 8010ae4:	2000169c 	.word	0x2000169c
 8010ae8:	2000179c 	.word	0x2000179c
 8010aec:	20001778 	.word	0x20001778
 8010af0:	20001962 	.word	0x20001962
 8010af4:	200016bc 	.word	0x200016bc
 8010af8:	cccccccd 	.word	0xcccccccd
 8010afc:	200016b4 	.word	0x200016b4
        else debug[0] = cycleTime;
 8010b00:	4ba6      	ldr	r3, [pc, #664]	; (8010d9c <evtMspReceive+0x1744>)
 8010b02:	881b      	ldrh	r3, [r3, #0]
 8010b04:	b21a      	sxth	r2, r3
 8010b06:	4ba6      	ldr	r3, [pc, #664]	; (8010da0 <evtMspReceive+0x1748>)
 8010b08:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 8010b0a:	4ba6      	ldr	r3, [pc, #664]	; (8010da4 <evtMspReceive+0x174c>)
 8010b0c:	791b      	ldrb	r3, [r3, #4]
 8010b0e:	b21a      	sxth	r2, r3
 8010b10:	4ba3      	ldr	r3, [pc, #652]	; (8010da0 <evtMspReceive+0x1748>)
 8010b12:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010b14:	4ba4      	ldr	r3, [pc, #656]	; (8010da8 <evtMspReceive+0x1750>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4aa4      	ldr	r2, [pc, #656]	; (8010dac <evtMspReceive+0x1754>)
 8010b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b1e:	0c9b      	lsrs	r3, r3, #18
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	461a      	mov	r2, r3
 8010b24:	0152      	lsls	r2, r2, #5
 8010b26:	1ad2      	subs	r2, r2, r3
 8010b28:	0092      	lsls	r2, r2, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	4b9f      	ldr	r3, [pc, #636]	; (8010db0 <evtMspReceive+0x1758>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	499d      	ldr	r1, [pc, #628]	; (8010dac <evtMspReceive+0x1754>)
 8010b36:	fba1 1303 	umull	r1, r3, r1, r3
 8010b3a:	0c9b      	lsrs	r3, r3, #18
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	4413      	add	r3, r2
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	b21a      	sxth	r2, r3
 8010b44:	4b96      	ldr	r3, [pc, #600]	; (8010da0 <evtMspReceive+0x1748>)
 8010b46:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010b48:	2300      	movs	r3, #0
 8010b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8010b4c:	e00b      	b.n	8010b66 <evtMspReceive+0x150e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 8010b4e:	4a94      	ldr	r2, [pc, #592]	; (8010da0 <evtMspReceive+0x1748>)
 8010b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	4619      	mov	r1, r3
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f007 f8a8 	bl	8017cb0 <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 8010b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b62:	3301      	adds	r3, #1
 8010b64:	637b      	str	r3, [r7, #52]	; 0x34
 8010b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d9f0      	bls.n	8010b4e <evtMspReceive+0x14f6>
        break;
 8010b6c:	e211      	b.n	8010f92 <evtMspReceive+0x193a>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 8010b6e:	4b91      	ldr	r3, [pc, #580]	; (8010db4 <evtMspReceive+0x175c>)
 8010b70:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	4619      	mov	r1, r3
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f007 f899 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 8010b7e:	4b8d      	ldr	r3, [pc, #564]	; (8010db4 <evtMspReceive+0x175c>)
 8010b80:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	4619      	mov	r1, r3
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f007 f891 	bl	8017cb0 <pifMsp_AddAnswer16>
        break;
 8010b8e:	e200      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 8010b90:	4b89      	ldr	r3, [pc, #548]	; (8010db8 <evtMspReceive+0x1760>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4619      	mov	r1, r3
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f007 f8d6 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 8010b9c:	4b86      	ldr	r3, [pc, #536]	; (8010db8 <evtMspReceive+0x1760>)
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f007 f8d0 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 8010ba8:	4b83      	ldr	r3, [pc, #524]	; (8010db8 <evtMspReceive+0x1760>)
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	4619      	mov	r1, r3
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f007 f8ca 	bl	8017d48 <pifMsp_AddAnswer32>
        break;
 8010bb4:	e1ed      	b.n	8010f92 <evtMspReceive+0x193a>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 8010bb6:	4b81      	ldr	r3, [pc, #516]	; (8010dbc <evtMspReceive+0x1764>)
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	4619      	mov	r1, r3
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f007 f831 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8010bc6:	e022      	b.n	8010c0e <evtMspReceive+0x15b6>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 8010bc8:	4a7d      	ldr	r2, [pc, #500]	; (8010dc0 <evtMspReceive+0x1768>)
 8010bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bcc:	4413      	add	r3, r2
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f007 f826 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 8010bd8:	4a7a      	ldr	r2, [pc, #488]	; (8010dc4 <evtMspReceive+0x176c>)
 8010bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bdc:	4413      	add	r3, r2
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	4619      	mov	r1, r3
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f007 f81e 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 8010be8:	4a77      	ldr	r2, [pc, #476]	; (8010dc8 <evtMspReceive+0x1770>)
 8010bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bec:	4413      	add	r3, r2
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f007 f816 	bl	8017c24 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 8010bf8:	4a74      	ldr	r2, [pc, #464]	; (8010dcc <evtMspReceive+0x1774>)
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfc:	4413      	add	r3, r2
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	4619      	mov	r1, r3
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f007 f80e 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c0e:	4b6b      	ldr	r3, [pc, #428]	; (8010dbc <evtMspReceive+0x1764>)
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	461a      	mov	r2, r3
 8010c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d3d6      	bcc.n	8010bc8 <evtMspReceive+0x1570>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010c1a:	f7f7 fd59 	bl	80086d0 <gpsPollSvinfo>
        break;
 8010c1e:	e1b8      	b.n	8010f92 <evtMspReceive+0x193a>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010c20:	2020      	movs	r0, #32
 8010c22:	f7f6 f9b1 	bl	8006f88 <sensors>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d012      	beq.n	8010c52 <evtMspReceive+0x15fa>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8010c2c:	4b68      	ldr	r3, [pc, #416]	; (8010dd0 <evtMspReceive+0x1778>)
 8010c2e:	685a      	ldr	r2, [r3, #4]
 8010c30:	4b67      	ldr	r3, [pc, #412]	; (8010dd0 <evtMspReceive+0x1778>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	4619      	mov	r1, r3
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	f007 f885 	bl	8017d48 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010c3e:	4b65      	ldr	r3, [pc, #404]	; (8010dd4 <evtMspReceive+0x177c>)
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	4b64      	ldr	r3, [pc, #400]	; (8010dd4 <evtMspReceive+0x177c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	4619      	mov	r1, r3
 8010c4a:	68f8      	ldr	r0, [r7, #12]
 8010c4c:	f007 f87c 	bl	8017d48 <pifMsp_AddAnswer32>
 8010c50:	e007      	b.n	8010c62 <evtMspReceive+0x160a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 8010c52:	2100      	movs	r1, #0
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f007 f877 	bl	8017d48 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f007 f873 	bl	8017d48 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 8010c62:	4b5d      	ldr	r3, [pc, #372]	; (8010dd8 <evtMspReceive+0x1780>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4619      	mov	r1, r3
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f007 f86d 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8010c6e:	4b5b      	ldr	r3, [pc, #364]	; (8010ddc <evtMspReceive+0x1784>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4619      	mov	r1, r3
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f007 f867 	bl	8017d48 <pifMsp_AddAnswer32>
        break;
 8010c7a:	e18a      	b.n	8010f92 <evtMspReceive+0x193a>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8010c7c:	68b8      	ldr	r0, [r7, #8]
 8010c7e:	f006 ff27 	bl	8017ad0 <pifMsp_ReadData8>
 8010c82:	4603      	mov	r3, r0
 8010c84:	461a      	mov	r2, r3
 8010c86:	4b56      	ldr	r3, [pc, #344]	; (8010de0 <evtMspReceive+0x1788>)
 8010c88:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010c8a:	f7f6 fa01 	bl	8007090 <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8010c8e:	68b8      	ldr	r0, [r7, #8]
 8010c90:	f006 ff4f 	bl	8017b32 <pifMsp_ReadData32>
 8010c94:	4603      	mov	r3, r0
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7f6 f9d4 	bl	8007044 <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8010c9c:	68b8      	ldr	r0, [r7, #8]
 8010c9e:	f006 ff17 	bl	8017ad0 <pifMsp_ReadData8>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	4b4e      	ldr	r3, [pc, #312]	; (8010de0 <evtMspReceive+0x1788>)
 8010ca8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f006 ff23 	bl	8017af8 <pifMsp_ReadData16>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	b21a      	sxth	r2, r3
 8010cb6:	4b4a      	ldr	r3, [pc, #296]	; (8010de0 <evtMspReceive+0x1788>)
 8010cb8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 8010cbc:	68b8      	ldr	r0, [r7, #8]
 8010cbe:	f006 ff1b 	bl	8017af8 <pifMsp_ReadData16>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	b21a      	sxth	r2, r3
 8010cc6:	4b46      	ldr	r3, [pc, #280]	; (8010de0 <evtMspReceive+0x1788>)
 8010cc8:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 8010ccc:	68b8      	ldr	r0, [r7, #8]
 8010cce:	f006 ff13 	bl	8017af8 <pifMsp_ReadData16>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	b21a      	sxth	r2, r3
 8010cd6:	4b42      	ldr	r3, [pc, #264]	; (8010de0 <evtMspReceive+0x1788>)
 8010cd8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 8010cdc:	68b8      	ldr	r0, [r7, #8]
 8010cde:	f006 ff0b 	bl	8017af8 <pifMsp_ReadData16>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	4b3e      	ldr	r3, [pc, #248]	; (8010de0 <evtMspReceive+0x1788>)
 8010ce8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 8010cec:	68b8      	ldr	r0, [r7, #8]
 8010cee:	f006 ff03 	bl	8017af8 <pifMsp_ReadData16>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4b3a      	ldr	r3, [pc, #232]	; (8010de0 <evtMspReceive+0x1788>)
 8010cf8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	f006 fefb 	bl	8017af8 <pifMsp_ReadData16>
 8010d02:	4603      	mov	r3, r0
 8010d04:	461a      	mov	r2, r3
 8010d06:	4b36      	ldr	r3, [pc, #216]	; (8010de0 <evtMspReceive+0x1788>)
 8010d08:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 8010d0c:	68b8      	ldr	r0, [r7, #8]
 8010d0e:	f006 fedf 	bl	8017ad0 <pifMsp_ReadData8>
 8010d12:	4603      	mov	r3, r0
 8010d14:	461a      	mov	r2, r3
 8010d16:	4b27      	ldr	r3, [pc, #156]	; (8010db4 <evtMspReceive+0x175c>)
 8010d18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8010d1c:	68b8      	ldr	r0, [r7, #8]
 8010d1e:	f006 fed7 	bl	8017ad0 <pifMsp_ReadData8>
 8010d22:	4603      	mov	r3, r0
 8010d24:	461a      	mov	r2, r3
 8010d26:	4b23      	ldr	r3, [pc, #140]	; (8010db4 <evtMspReceive+0x175c>)
 8010d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8010d2c:	68b8      	ldr	r0, [r7, #8]
 8010d2e:	f006 fecf 	bl	8017ad0 <pifMsp_ReadData8>
 8010d32:	4603      	mov	r3, r0
 8010d34:	461a      	mov	r2, r3
 8010d36:	4b2a      	ldr	r3, [pc, #168]	; (8010de0 <evtMspReceive+0x1788>)
 8010d38:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8010d3c:	68b8      	ldr	r0, [r7, #8]
 8010d3e:	f006 fec7 	bl	8017ad0 <pifMsp_ReadData8>
 8010d42:	4603      	mov	r3, r0
 8010d44:	461a      	mov	r2, r3
 8010d46:	4b1b      	ldr	r3, [pc, #108]	; (8010db4 <evtMspReceive+0x175c>)
 8010d48:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8010d4c:	68b8      	ldr	r0, [r7, #8]
 8010d4e:	f006 fed3 	bl	8017af8 <pifMsp_ReadData16>
 8010d52:	4603      	mov	r3, r0
 8010d54:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 8010d56:	4b22      	ldr	r3, [pc, #136]	; (8010de0 <evtMspReceive+0x1788>)
 8010d58:	899b      	ldrh	r3, [r3, #12]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d04d      	beq.n	8010dfe <evtMspReceive+0x17a6>
            if (mcfg.looptime && tmp) {
 8010d62:	4b1f      	ldr	r3, [pc, #124]	; (8010de0 <evtMspReceive+0x1788>)
 8010d64:	899b      	ldrh	r3, [r3, #12]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00b      	beq.n	8010d82 <evtMspReceive+0x172a>
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d008      	beq.n	8010d82 <evtMspReceive+0x172a>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8010d70:	4b1c      	ldr	r3, [pc, #112]	; (8010de4 <evtMspReceive+0x178c>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	697a      	ldr	r2, [r7, #20]
 8010d76:	b292      	uxth	r2, r2
 8010d78:	4611      	mov	r1, r2
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f003 fc3a 	bl	80145f4 <pifTask_ChangePeriod>
 8010d80:	e039      	b.n	8010df6 <evtMspReceive+0x179e>
            }
            else {
                if (tmp) {
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d02f      	beq.n	8010de8 <evtMspReceive+0x1790>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8010d88:	4b16      	ldr	r3, [pc, #88]	; (8010de4 <evtMspReceive+0x178c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	2103      	movs	r1, #3
 8010d92:	4618      	mov	r0, r3
 8010d94:	f003 fbf0 	bl	8014578 <pifTask_ChangeMode>
 8010d98:	e02d      	b.n	8010df6 <evtMspReceive+0x179e>
 8010d9a:	bf00      	nop
 8010d9c:	200016bc 	.word	0x200016bc
 8010da0:	200016b4 	.word	0x200016b4
 8010da4:	20001bd0 	.word	0x20001bd0
 8010da8:	20001688 	.word	0x20001688
 8010dac:	431bde83 	.word	0x431bde83
 8010db0:	2000168c 	.word	0x2000168c
 8010db4:	20000e08 	.word	0x20000e08
 8010db8:	20001690 	.word	0x20001690
 8010dbc:	2000179d 	.word	0x2000179d
 8010dc0:	200017a0 	.word	0x200017a0
 8010dc4:	200017c0 	.word	0x200017c0
 8010dc8:	200017e0 	.word	0x200017e0
 8010dcc:	20001800 	.word	0x20001800
 8010dd0:	20001820 	.word	0x20001820
 8010dd4:	20001828 	.word	0x20001828
 8010dd8:	20001830 	.word	0x20001830
 8010ddc:	20001834 	.word	0x20001834
 8010de0:	2000089c 	.word	0x2000089c
 8010de4:	200014f4 	.word	0x200014f4
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8010de8:	4b6d      	ldr	r3, [pc, #436]	; (8010fa0 <evtMspReceive+0x1948>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2264      	movs	r2, #100	; 0x64
 8010dee:	2101      	movs	r1, #1
 8010df0:	4618      	mov	r0, r3
 8010df2:	f003 fbc1 	bl	8014578 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	4b6a      	ldr	r3, [pc, #424]	; (8010fa4 <evtMspReceive+0x194c>)
 8010dfc:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 8010dfe:	68b8      	ldr	r0, [r7, #8]
 8010e00:	f006 fe66 	bl	8017ad0 <pifMsp_ReadData8>
 8010e04:	4603      	mov	r3, r0
 8010e06:	461a      	mov	r2, r3
 8010e08:	4b67      	ldr	r3, [pc, #412]	; (8010fa8 <evtMspReceive+0x1950>)
 8010e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8010e0e:	e0c0      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 8010e10:	4b64      	ldr	r3, [pc, #400]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e12:	795b      	ldrb	r3, [r3, #5]
 8010e14:	4619      	mov	r1, r3
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f006 ff04 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8010e1c:	f7f6 f944 	bl	80070a8 <featureMask>
 8010e20:	4603      	mov	r3, r0
 8010e22:	4619      	mov	r1, r3
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f006 ff8f 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8010e2a:	4b5e      	ldr	r3, [pc, #376]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e2c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010e30:	4619      	mov	r1, r3
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f006 fef6 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8010e38:	4b5a      	ldr	r3, [pc, #360]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e3a:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	4619      	mov	r1, r3
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f006 ff34 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8010e48:	4b56      	ldr	r3, [pc, #344]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e4a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	4619      	mov	r1, r3
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f006 ff2c 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8010e58:	4b52      	ldr	r3, [pc, #328]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e5a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4619      	mov	r1, r3
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f006 ff24 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8010e68:	4b4e      	ldr	r3, [pc, #312]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e6a:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8010e6e:	4619      	mov	r1, r3
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f006 ff1d 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 8010e76:	4b4b      	ldr	r3, [pc, #300]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e78:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f006 ff16 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 8010e84:	4b47      	ldr	r3, [pc, #284]	; (8010fa4 <evtMspReceive+0x194c>)
 8010e86:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f006 ff0f 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 8010e92:	4b45      	ldr	r3, [pc, #276]	; (8010fa8 <evtMspReceive+0x1950>)
 8010e94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010e98:	4619      	mov	r1, r3
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f006 fec2 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8010ea0:	4b41      	ldr	r3, [pc, #260]	; (8010fa8 <evtMspReceive+0x1950>)
 8010ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f006 febb 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8010eae:	4b3d      	ldr	r3, [pc, #244]	; (8010fa4 <evtMspReceive+0x194c>)
 8010eb0:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f006 feb4 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 8010ebc:	4b3a      	ldr	r3, [pc, #232]	; (8010fa8 <evtMspReceive+0x1950>)
 8010ebe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f006 fead 	bl	8017c24 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 8010eca:	4b36      	ldr	r3, [pc, #216]	; (8010fa4 <evtMspReceive+0x194c>)
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	4619      	mov	r1, r3
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f006 feed 	bl	8017cb0 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 8010ed6:	4b34      	ldr	r3, [pc, #208]	; (8010fa8 <evtMspReceive+0x1950>)
 8010ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010edc:	4619      	mov	r1, r3
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f006 fea0 	bl	8017c24 <pifMsp_AddAnswer8>
        /// ???
        break;
 8010ee4:	e055      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8010eea:	e00c      	b.n	8010f06 <evtMspReceive+0x18ae>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 8010eec:	4a2d      	ldr	r2, [pc, #180]	; (8010fa4 <evtMspReceive+0x194c>)
 8010eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef0:	4413      	add	r3, r2
 8010ef2:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f006 fe92 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f02:	3301      	adds	r3, #1
 8010f04:	637b      	str	r3, [r7, #52]	; 0x34
 8010f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f08:	2b07      	cmp	r3, #7
 8010f0a:	d9ef      	bls.n	8010eec <evtMspReceive+0x1894>
        break;
 8010f0c:	e041      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010f0e:	2300      	movs	r3, #0
 8010f10:	637b      	str	r3, [r7, #52]	; 0x34
 8010f12:	e00e      	b.n	8010f32 <evtMspReceive+0x18da>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 8010f14:	68b8      	ldr	r0, [r7, #8]
 8010f16:	f006 fddb 	bl	8017ad0 <pifMsp_ReadData8>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4a21      	ldr	r2, [pc, #132]	; (8010fa4 <evtMspReceive+0x194c>)
 8010f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f22:	4413      	add	r3, r2
 8010f24:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010f28:	460a      	mov	r2, r1
 8010f2a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f2e:	3301      	adds	r3, #1
 8010f30:	637b      	str	r3, [r7, #52]	; 0x34
 8010f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f34:	2b07      	cmp	r3, #7
 8010f36:	d9ed      	bls.n	8010f14 <evtMspReceive+0x18bc>
        break;
 8010f38:	e02b      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_REBOOT:
        pendReboot = true;
 8010f3a:	4b1c      	ldr	r3, [pc, #112]	; (8010fac <evtMspReceive+0x1954>)
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	701a      	strb	r2, [r3, #0]
        break;
 8010f40:	e027      	b.n	8010f92 <evtMspReceive+0x193a>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8010f42:	2300      	movs	r3, #0
 8010f44:	637b      	str	r3, [r7, #52]	; 0x34
 8010f46:	e00a      	b.n	8010f5e <evtMspReceive+0x1906>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8010f48:	69fa      	ldr	r2, [r7, #28]
 8010f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f4c:	4413      	add	r3, r2
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	4619      	mov	r1, r3
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f006 fe66 	bl	8017c24 <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8010f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f60:	2b0a      	cmp	r3, #10
 8010f62:	d9f1      	bls.n	8010f48 <evtMspReceive+0x18f0>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010f64:	2100      	movs	r1, #0
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f006 feee 	bl	8017d48 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f006 feea 	bl	8017d48 <pifMsp_AddAnswer32>
        break;
 8010f74:	e00d      	b.n	8010f92 <evtMspReceive+0x193a>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8010f76:	68b9      	ldr	r1, [r7, #8]
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f006 ff83 	bl	8017e84 <pifMsp_MakeError>
        break;
 8010f7e:	e008      	b.n	8010f92 <evtMspReceive+0x193a>
        break;
 8010f80:	bf00      	nop
 8010f82:	e006      	b.n	8010f92 <evtMspReceive+0x193a>
        break;
 8010f84:	bf00      	nop
 8010f86:	e004      	b.n	8010f92 <evtMspReceive+0x193a>
        break;
 8010f88:	bf00      	nop
 8010f8a:	e002      	b.n	8010f92 <evtMspReceive+0x193a>
        break;
 8010f8c:	bf00      	nop
 8010f8e:	e000      	b.n	8010f92 <evtMspReceive+0x193a>
        break;
 8010f90:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 8010f92:	68f8      	ldr	r0, [r7, #12]
 8010f94:	f006 ffc8 	bl	8017f28 <pifMsp_SendAnswer>
}
 8010f98:	bf00      	nop
 8010f9a:	373c      	adds	r7, #60	; 0x3c
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}
 8010fa0:	200014f4 	.word	0x200014f4
 8010fa4:	2000089c 	.word	0x2000089c
 8010fa8:	20000e08 	.word	0x20000e08
 8010fac:	20001afa 	.word	0x20001afa

08010fb0 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	460b      	mov	r3, r1
 8010fba:	607a      	str	r2, [r7, #4]
 8010fbc:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 8010fbe:	4b0c      	ldr	r3, [pc, #48]	; (8010ff0 <evtMspOtherPacket+0x40>)
 8010fc0:	785b      	ldrb	r3, [r3, #1]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d110      	bne.n	8010fe8 <evtMspOtherPacket+0x38>

    if (data == '#')
 8010fc6:	7afb      	ldrb	r3, [r7, #11]
 8010fc8:	2b23      	cmp	r3, #35	; 0x23
 8010fca:	d103      	bne.n	8010fd4 <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 8010fcc:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <evtMspOtherPacket+0x44>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	e00a      	b.n	8010fea <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 8010fd4:	4b08      	ldr	r3, [pc, #32]	; (8010ff8 <evtMspOtherPacket+0x48>)
 8010fd6:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8010fda:	7afa      	ldrb	r2, [r7, #11]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d104      	bne.n	8010fea <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 8010fe0:	2001      	movs	r0, #1
 8010fe2:	f7f1 f82f 	bl	8002044 <systemReset>
 8010fe6:	e000      	b.n	8010fea <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 8010fe8:	bf00      	nop
}
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	2000169c 	.word	0x2000169c
 8010ff4:	20001bb4 	.word	0x20001bb4
 8010ff8:	2000089c 	.word	0x2000089c

08010ffc <serialCom>:

void serialCom(void)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 8011000:	4b0c      	ldr	r3, [pc, #48]	; (8011034 <serialCom+0x38>)
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00b      	beq.n	8011020 <serialCom+0x24>
        s_change_cli = FALSE;
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <serialCom+0x38>)
 801100a:	2200      	movs	r2, #0
 801100c:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 801100e:	480a      	ldr	r0, [pc, #40]	; (8011038 <serialCom+0x3c>)
 8011010:	f006 fd38 	bl	8017a84 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8011014:	4b09      	ldr	r3, [pc, #36]	; (801103c <serialCom+0x40>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3304      	adds	r3, #4
 801101a:	4618      	mov	r0, r3
 801101c:	f7f5 fa22 	bl	8006464 <cliInit>
    };

    if (pendReboot)
 8011020:	4b07      	ldr	r3, [pc, #28]	; (8011040 <serialCom+0x44>)
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <serialCom+0x32>
        systemReset(false); // noreturn
 8011028:	2000      	movs	r0, #0
 801102a:	f7f1 f80b 	bl	8002044 <systemReset>
}
 801102e:	bf00      	nop
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	20001bb4 	.word	0x20001bb4
 8011038:	20001b00 	.word	0x20001b00
 801103c:	200007e4 	.word	0x200007e4
 8011040:	20001afa 	.word	0x20001afa

08011044 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 801104c:	4a07      	ldr	r2, [pc, #28]	; (801106c <pif_Init+0x28>)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8011052:	4b07      	ldr	r3, [pc, #28]	; (8011070 <pif_Init+0x2c>)
 8011054:	2201      	movs	r2, #1
 8011056:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011058:	4b05      	ldr	r3, [pc, #20]	; (8011070 <pif_Init+0x2c>)
 801105a:	2201      	movs	r2, #1
 801105c:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	20001bdc 	.word	0x20001bdc
 8011070:	20001bc4 	.word	0x20001bc4

08011074 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 801107a:	4b56      	ldr	r3, [pc, #344]	; (80111d4 <pif_sigTimer1ms+0x160>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3301      	adds	r3, #1
 8011080:	4a54      	ldr	r2, [pc, #336]	; (80111d4 <pif_sigTimer1ms+0x160>)
 8011082:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8011084:	4b54      	ldr	r3, [pc, #336]	; (80111d8 <pif_sigTimer1ms+0x164>)
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	b29b      	uxth	r3, r3
 801108a:	3301      	adds	r3, #1
 801108c:	b29a      	uxth	r2, r3
 801108e:	4b52      	ldr	r3, [pc, #328]	; (80111d8 <pif_sigTimer1ms+0x164>)
 8011090:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8011092:	4b51      	ldr	r3, [pc, #324]	; (80111d8 <pif_sigTimer1ms+0x164>)
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	b29b      	uxth	r3, r3
 8011098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801109c:	f0c0 808d 	bcc.w	80111ba <pif_sigTimer1ms+0x146>
        pif_timer1ms = 0;
 80110a0:	4b4d      	ldr	r3, [pc, #308]	; (80111d8 <pif_sigTimer1ms+0x164>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 80110a6:	4b4d      	ldr	r3, [pc, #308]	; (80111dc <pif_sigTimer1ms+0x168>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	3301      	adds	r3, #1
 80110ac:	4a4b      	ldr	r2, [pc, #300]	; (80111dc <pif_sigTimer1ms+0x168>)
 80110ae:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 80110b0:	4b4b      	ldr	r3, [pc, #300]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110b2:	795b      	ldrb	r3, [r3, #5]
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	3301      	adds	r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	4b49      	ldr	r3, [pc, #292]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110bc:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 80110be:	4b48      	ldr	r3, [pc, #288]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110c0:	795b      	ldrb	r3, [r3, #5]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	2b3b      	cmp	r3, #59	; 0x3b
 80110c6:	d971      	bls.n	80111ac <pif_sigTimer1ms+0x138>
    		pif_datetime.second = 0;
 80110c8:	4b45      	ldr	r3, [pc, #276]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 80110ce:	4b44      	ldr	r3, [pc, #272]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110d0:	791b      	ldrb	r3, [r3, #4]
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	3301      	adds	r3, #1
 80110d6:	b2da      	uxtb	r2, r3
 80110d8:	4b41      	ldr	r3, [pc, #260]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110da:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80110dc:	4b40      	ldr	r3, [pc, #256]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110de:	791b      	ldrb	r3, [r3, #4]
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	2b3b      	cmp	r3, #59	; 0x3b
 80110e4:	d95b      	bls.n	801119e <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 80110e6:	4b3e      	ldr	r3, [pc, #248]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80110ec:	4b3c      	ldr	r3, [pc, #240]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110ee:	78db      	ldrb	r3, [r3, #3]
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	3301      	adds	r3, #1
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	4b3a      	ldr	r3, [pc, #232]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110f8:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80110fa:	4b39      	ldr	r3, [pc, #228]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 80110fc:	78db      	ldrb	r3, [r3, #3]
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	2b17      	cmp	r3, #23
 8011102:	d94c      	bls.n	801119e <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 8011104:	4b36      	ldr	r3, [pc, #216]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011106:	2200      	movs	r2, #0
 8011108:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 801110a:	4b35      	ldr	r3, [pc, #212]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801110c:	789b      	ldrb	r3, [r3, #2]
 801110e:	b2db      	uxtb	r3, r3
 8011110:	3301      	adds	r3, #1
 8011112:	b2da      	uxtb	r2, r3
 8011114:	4b32      	ldr	r3, [pc, #200]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011116:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 8011118:	4b31      	ldr	r3, [pc, #196]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801111a:	785b      	ldrb	r3, [r3, #1]
 801111c:	b2db      	uxtb	r3, r3
 801111e:	3b01      	subs	r3, #1
 8011120:	4a30      	ldr	r2, [pc, #192]	; (80111e4 <pif_sigTimer1ms+0x170>)
 8011122:	5cd3      	ldrb	r3, [r2, r3]
 8011124:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8011126:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011128:	785b      	ldrb	r3, [r3, #1]
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b02      	cmp	r3, #2
 801112e:	d117      	bne.n	8011160 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 8011130:	4b2b      	ldr	r3, [pc, #172]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	b2db      	uxtb	r3, r3
 8011136:	b29b      	uxth	r3, r3
 8011138:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801113c:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 801113e:	88bb      	ldrh	r3, [r7, #4]
 8011140:	2b03      	cmp	r3, #3
 8011142:	d80d      	bhi.n	8011160 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 8011144:	88bb      	ldrh	r3, [r7, #4]
 8011146:	2b63      	cmp	r3, #99	; 0x63
 8011148:	d807      	bhi.n	801115a <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 801114a:	88bb      	ldrh	r3, [r7, #4]
 801114c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011150:	d206      	bcs.n	8011160 <pif_sigTimer1ms+0xec>
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	3301      	adds	r3, #1
 8011156:	71fb      	strb	r3, [r7, #7]
 8011158:	e002      	b.n	8011160 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	3301      	adds	r3, #1
 801115e:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011160:	4b1f      	ldr	r3, [pc, #124]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011162:	789b      	ldrb	r3, [r3, #2]
 8011164:	b2db      	uxtb	r3, r3
 8011166:	79fa      	ldrb	r2, [r7, #7]
 8011168:	429a      	cmp	r2, r3
 801116a:	d218      	bcs.n	801119e <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 801116c:	4b1c      	ldr	r3, [pc, #112]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801116e:	2201      	movs	r2, #1
 8011170:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011172:	4b1b      	ldr	r3, [pc, #108]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011174:	785b      	ldrb	r3, [r3, #1]
 8011176:	b2db      	uxtb	r3, r3
 8011178:	3301      	adds	r3, #1
 801117a:	b2da      	uxtb	r2, r3
 801117c:	4b18      	ldr	r3, [pc, #96]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801117e:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8011180:	4b17      	ldr	r3, [pc, #92]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011182:	785b      	ldrb	r3, [r3, #1]
 8011184:	b2db      	uxtb	r3, r3
 8011186:	2b0c      	cmp	r3, #12
 8011188:	d909      	bls.n	801119e <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 801118a:	4b15      	ldr	r3, [pc, #84]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801118c:	2201      	movs	r2, #1
 801118e:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	b2db      	uxtb	r3, r3
 8011196:	3301      	adds	r3, #1
 8011198:	b2da      	uxtb	r2, r3
 801119a:	4b11      	ldr	r3, [pc, #68]	; (80111e0 <pif_sigTimer1ms+0x16c>)
 801119c:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}

#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
 801119e:	4b12      	ldr	r3, [pc, #72]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111a0:	795b      	ldrb	r3, [r3, #5]
 80111a2:	f043 0304 	orr.w	r3, r3, #4
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b0f      	ldr	r3, [pc, #60]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111aa:	715a      	strb	r2, [r3, #5]
#endif			
    	}

    	pif_performance.__state |= 2;
 80111ac:	4b0e      	ldr	r3, [pc, #56]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111ae:	795b      	ldrb	r3, [r3, #5]
 80111b0:	f043 0302 	orr.w	r3, r3, #2
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	4b0c      	ldr	r3, [pc, #48]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111b8:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 80111ba:	4b0b      	ldr	r3, [pc, #44]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111bc:	795b      	ldrb	r3, [r3, #5]
 80111be:	f043 0301 	orr.w	r3, r3, #1
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b08      	ldr	r3, [pc, #32]	; (80111e8 <pif_sigTimer1ms+0x174>)
 80111c6:	715a      	strb	r2, [r3, #5]
}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr
 80111d4:	20001bcc 	.word	0x20001bcc
 80111d8:	20001bbc 	.word	0x20001bbc
 80111dc:	20001bc0 	.word	0x20001bc0
 80111e0:	20001bc4 	.word	0x20001bc4
 80111e4:	08028ea4 	.word	0x08028ea4
 80111e8:	20001bd0 	.word	0x20001bd0

080111ec <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	4603      	mov	r3, r0
 80111f4:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80111f6:	4b0a      	ldr	r3, [pc, #40]	; (8011220 <pif_Delay1ms+0x34>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80111fc:	4b08      	ldr	r3, [pc, #32]	; (8011220 <pif_Delay1ms+0x34>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	b29a      	uxth	r2, r3
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	b29b      	uxth	r3, r3
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801120a:	897a      	ldrh	r2, [r7, #10]
 801120c:	88fb      	ldrh	r3, [r7, #6]
 801120e:	429a      	cmp	r2, r3
 8011210:	d3f4      	bcc.n	80111fc <pif_Delay1ms+0x10>
}
 8011212:	bf00      	nop
 8011214:	bf00      	nop
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	20001bcc 	.word	0x20001bcc

08011224 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	4603      	mov	r3, r0
 801122c:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 801122e:	4b0b      	ldr	r3, [pc, #44]	; (801125c <pif_Delay1us+0x38>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4798      	blx	r3
 8011234:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 8011236:	4b09      	ldr	r3, [pc, #36]	; (801125c <pif_Delay1us+0x38>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4798      	blx	r3
 801123c:	4603      	mov	r3, r0
 801123e:	b29a      	uxth	r2, r3
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	b29b      	uxth	r3, r3
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 8011248:	897a      	ldrh	r2, [r7, #10]
 801124a:	88fb      	ldrh	r3, [r7, #6]
 801124c:	429a      	cmp	r2, r3
 801124e:	d3f2      	bcc.n	8011236 <pif_Delay1us+0x12>
}
 8011250:	bf00      	nop
 8011252:	bf00      	nop
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	20001bdc 	.word	0x20001bdc

08011260 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011260:	b480      	push	{r7}
 8011262:	b089      	sub	sp, #36	; 0x24
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	4613      	mov	r3, r2
 801126c:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 8011272:	88fb      	ldrh	r3, [r7, #6]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d01b      	beq.n	80112b0 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011278:	88fb      	ldrh	r3, [r7, #6]
 801127a:	3b01      	subs	r3, #1
 801127c:	61fb      	str	r3, [r7, #28]
 801127e:	e013      	b.n	80112a8 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011280:	68ba      	ldr	r2, [r7, #8]
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	fa22 f303 	lsr.w	r3, r2, r3
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	b2da      	uxtb	r2, r3
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	1c59      	adds	r1, r3, #1
 8011294:	61b9      	str	r1, [r7, #24]
 8011296:	4619      	mov	r1, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	440b      	add	r3, r1
 801129c:	3230      	adds	r2, #48	; 0x30
 801129e:	b2d2      	uxtb	r2, r2
 80112a0:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	61fb      	str	r3, [r7, #28]
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	dae8      	bge.n	8011280 <pif_BinToString+0x20>
 80112ae:	e030      	b.n	8011312 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d025      	beq.n	8011302 <pif_BinToString+0xa2>
    	first = TRUE;
 80112b6:	2301      	movs	r3, #1
 80112b8:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80112ba:	231f      	movs	r3, #31
 80112bc:	61fb      	str	r3, [r7, #28]
 80112be:	e01c      	b.n	80112fa <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 80112c0:	68ba      	ldr	r2, [r7, #8]
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	fa22 f303 	lsr.w	r3, r2, r3
 80112c8:	f003 0301 	and.w	r3, r3, #1
 80112cc:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 80112ce:	7dfb      	ldrb	r3, [r7, #23]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <pif_BinToString+0x7a>
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00c      	beq.n	80112f4 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	b2da      	uxtb	r2, r3
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	1c59      	adds	r1, r3, #1
 80112e2:	61b9      	str	r1, [r7, #24]
 80112e4:	4619      	mov	r1, r3
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	440b      	add	r3, r1
 80112ea:	3230      	adds	r2, #48	; 0x30
 80112ec:	b2d2      	uxtb	r2, r2
 80112ee:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80112f0:	2300      	movs	r3, #0
 80112f2:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	61fb      	str	r3, [r7, #28]
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	dadf      	bge.n	80112c0 <pif_BinToString+0x60>
 8011300:	e007      	b.n	8011312 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	1c5a      	adds	r2, r3, #1
 8011306:	61ba      	str	r2, [r7, #24]
 8011308:	461a      	mov	r2, r3
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	4413      	add	r3, r2
 801130e:	2230      	movs	r2, #48	; 0x30
 8011310:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011312:	69bb      	ldr	r3, [r7, #24]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3724      	adds	r7, #36	; 0x24
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011320:	b480      	push	{r7}
 8011322:	b08d      	sub	sp, #52	; 0x34
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	4613      	mov	r3, r2
 801132c:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 8011336:	2300      	movs	r3, #0
 8011338:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 801133a:	2300      	movs	r3, #0
 801133c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 801133e:	4a43      	ldr	r2, [pc, #268]	; (801144c <pif_DecToString+0x12c>)
 8011340:	f107 0314 	add.w	r3, r7, #20
 8011344:	ca07      	ldmia	r2, {r0, r1, r2}
 8011346:	c303      	stmia	r3!, {r0, r1}
 8011348:	801a      	strh	r2, [r3, #0]
 801134a:	3302      	adds	r3, #2
 801134c:	0c12      	lsrs	r2, r2, #16
 801134e:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d05e      	beq.n	8011418 <pif_DecToString+0xf8>
        while (tmp_val) {
 801135a:	e02c      	b.n	80113b6 <pif_DecToString+0x96>
        	exp_cnt++;
 801135c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801135e:	3301      	adds	r3, #1
 8011360:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	2b09      	cmp	r3, #9
 8011366:	d914      	bls.n	8011392 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011368:	6a39      	ldr	r1, [r7, #32]
 801136a:	4b39      	ldr	r3, [pc, #228]	; (8011450 <pif_DecToString+0x130>)
 801136c:	fba3 2301 	umull	r2, r3, r3, r1
 8011370:	08da      	lsrs	r2, r3, #3
 8011372:	4613      	mov	r3, r2
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	4413      	add	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	1aca      	subs	r2, r1, r3
 801137c:	b2d2      	uxtb	r2, r2
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	1c59      	adds	r1, r3, #1
 8011382:	6279      	str	r1, [r7, #36]	; 0x24
 8011384:	3230      	adds	r2, #48	; 0x30
 8011386:	b2d2      	uxtb	r2, r2
 8011388:	3330      	adds	r3, #48	; 0x30
 801138a:	443b      	add	r3, r7
 801138c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011390:	e00b      	b.n	80113aa <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011392:	6a3b      	ldr	r3, [r7, #32]
 8011394:	b2da      	uxtb	r2, r3
 8011396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011398:	1c59      	adds	r1, r3, #1
 801139a:	6279      	str	r1, [r7, #36]	; 0x24
 801139c:	3230      	adds	r2, #48	; 0x30
 801139e:	b2d2      	uxtb	r2, r2
 80113a0:	3330      	adds	r3, #48	; 0x30
 80113a2:	443b      	add	r3, r7
 80113a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 80113a8:	e008      	b.n	80113bc <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	4a28      	ldr	r2, [pc, #160]	; (8011450 <pif_DecToString+0x130>)
 80113ae:	fba2 2303 	umull	r2, r3, r2, r3
 80113b2:	08db      	lsrs	r3, r3, #3
 80113b4:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1cf      	bne.n	801135c <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 80113bc:	88fb      	ldrh	r3, [r7, #6]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d026      	beq.n	8011410 <pif_DecToString+0xf0>
 80113c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80113c4:	88fb      	ldrh	r3, [r7, #6]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d222      	bcs.n	8011410 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 80113ca:	88fa      	ldrh	r2, [r7, #6]
 80113cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80113d2:	e00a      	b.n	80113ea <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 80113d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d6:	1c5a      	adds	r2, r3, #1
 80113d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80113da:	461a      	mov	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	4413      	add	r3, r2
 80113e0:	2230      	movs	r2, #48	; 0x30
 80113e2:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80113e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113e6:	3b01      	subs	r3, #1
 80113e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80113ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1f1      	bne.n	80113d4 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 80113f0:	e00e      	b.n	8011410 <pif_DecToString+0xf0>
            idx_inv--;
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	3b01      	subs	r3, #1
 80113f6:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80113fe:	461a      	mov	r2, r3
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	4413      	add	r3, r2
 8011404:	f107 0114 	add.w	r1, r7, #20
 8011408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801140a:	440a      	add	r2, r1
 801140c:	7812      	ldrb	r2, [r2, #0]
 801140e:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1ed      	bne.n	80113f2 <pif_DecToString+0xd2>
 8011416:	e012      	b.n	801143e <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011418:	88fb      	ldrh	r3, [r7, #6]
 801141a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	62ba      	str	r2, [r7, #40]	; 0x28
 8011422:	461a      	mov	r2, r3
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	4413      	add	r3, r2
 8011428:	2230      	movs	r2, #48	; 0x30
 801142a:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 801142c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d002      	beq.n	8011438 <pif_DecToString+0x118>
 8011432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011434:	3b01      	subs	r3, #1
 8011436:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801143a:	2b00      	cmp	r3, #0
 801143c:	d1ee      	bne.n	801141c <pif_DecToString+0xfc>
    }
    return idx;
 801143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011440:	4618      	mov	r0, r3
 8011442:	3734      	adds	r7, #52	; 0x34
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr
 801144c:	08027100 	.word	0x08027100
 8011450:	cccccccd 	.word	0xcccccccd

08011454 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011454:	b480      	push	{r7}
 8011456:	b08b      	sub	sp, #44	; 0x2c
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	4611      	mov	r1, r2
 8011460:	461a      	mov	r2, r3
 8011462:	460b      	mov	r3, r1
 8011464:	80fb      	strh	r3, [r7, #6]
 8011466:	4613      	mov	r3, r2
 8011468:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 801146e:	797b      	ldrb	r3, [r7, #5]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d002      	beq.n	801147a <pif_HexToString+0x26>
 8011474:	4b2f      	ldr	r3, [pc, #188]	; (8011534 <pif_HexToString+0xe0>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	e001      	b.n	801147e <pif_HexToString+0x2a>
 801147a:	4b2f      	ldr	r3, [pc, #188]	; (8011538 <pif_HexToString+0xe4>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011480:	88fb      	ldrh	r3, [r7, #6]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d01d      	beq.n	80114c2 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011486:	88fb      	ldrh	r3, [r7, #6]
 8011488:	3b01      	subs	r3, #1
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	627b      	str	r3, [r7, #36]	; 0x24
 801148e:	e014      	b.n	80114ba <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011494:	fa22 f303 	lsr.w	r3, r2, r3
 8011498:	f003 030f 	and.w	r3, r3, #15
 801149c:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 801149e:	69ba      	ldr	r2, [r7, #24]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	441a      	add	r2, r3
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	1c59      	adds	r1, r3, #1
 80114a8:	6239      	str	r1, [r7, #32]
 80114aa:	4619      	mov	r1, r3
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	440b      	add	r3, r1
 80114b0:	7812      	ldrb	r2, [r2, #0]
 80114b2:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b6:	3b04      	subs	r3, #4
 80114b8:	627b      	str	r3, [r7, #36]	; 0x24
 80114ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114bc:	2b00      	cmp	r3, #0
 80114be:	dae7      	bge.n	8011490 <pif_HexToString+0x3c>
 80114c0:	e030      	b.n	8011524 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d025      	beq.n	8011514 <pif_HexToString+0xc0>
    	first = TRUE;
 80114c8:	2301      	movs	r3, #1
 80114ca:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80114cc:	231c      	movs	r3, #28
 80114ce:	627b      	str	r3, [r7, #36]	; 0x24
 80114d0:	e01c      	b.n	801150c <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d6:	fa22 f303 	lsr.w	r3, r2, r3
 80114da:	f003 030f 	and.w	r3, r3, #15
 80114de:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80114e0:	7ffb      	ldrb	r3, [r7, #31]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d002      	beq.n	80114ec <pif_HexToString+0x98>
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00c      	beq.n	8011506 <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	441a      	add	r2, r3
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	1c59      	adds	r1, r3, #1
 80114f6:	6239      	str	r1, [r7, #32]
 80114f8:	4619      	mov	r1, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	440b      	add	r3, r1
 80114fe:	7812      	ldrb	r2, [r2, #0]
 8011500:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011502:	2300      	movs	r3, #0
 8011504:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	3b04      	subs	r3, #4
 801150a:	627b      	str	r3, [r7, #36]	; 0x24
 801150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150e:	2b00      	cmp	r3, #0
 8011510:	dadf      	bge.n	80114d2 <pif_HexToString+0x7e>
 8011512:	e007      	b.n	8011524 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011514:	6a3b      	ldr	r3, [r7, #32]
 8011516:	1c5a      	adds	r2, r3, #1
 8011518:	623a      	str	r2, [r7, #32]
 801151a:	461a      	mov	r2, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	4413      	add	r3, r2
 8011520:	2230      	movs	r2, #48	; 0x30
 8011522:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011524:	6a3b      	ldr	r3, [r7, #32]
}
 8011526:	4618      	mov	r0, r3
 8011528:	372c      	adds	r7, #44	; 0x2c
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	2000012c 	.word	0x2000012c
 8011538:	20000130 	.word	0x20000130

0801153c <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 801153c:	b5b0      	push	{r4, r5, r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	ed87 0b00 	vstr	d0, [r7]
 8011548:	460b      	mov	r3, r1
 801154a:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 801154c:	2300      	movs	r3, #0
 801154e:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011550:	f04f 0200 	mov.w	r2, #0
 8011554:	f04f 0300 	mov.w	r3, #0
 8011558:	e9d7 0100 	ldrd	r0, r1, [r7]
 801155c:	f7ef fa72 	bl	8000a44 <__aeabi_dcmplt>
 8011560:	4603      	mov	r3, r0
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00d      	beq.n	8011582 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 8011566:	8abb      	ldrh	r3, [r7, #20]
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	82ba      	strh	r2, [r7, #20]
 801156c:	461a      	mov	r2, r3
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	4413      	add	r3, r2
 8011572:	222d      	movs	r2, #45	; 0x2d
 8011574:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 8011576:	683c      	ldr	r4, [r7, #0]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801157e:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011586:	f7ef faad 	bl	8000ae4 <__aeabi_d2uiz>
 801158a:	4603      	mov	r3, r0
 801158c:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 801158e:	8abb      	ldrh	r3, [r7, #20]
 8011590:	68fa      	ldr	r2, [r7, #12]
 8011592:	4413      	add	r3, r2
 8011594:	2200      	movs	r2, #0
 8011596:	6939      	ldr	r1, [r7, #16]
 8011598:	4618      	mov	r0, r3
 801159a:	f7ff fec1 	bl	8011320 <pif_DecToString>
 801159e:	4603      	mov	r3, r0
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	8abb      	ldrh	r3, [r7, #20]
 80115a4:	4413      	add	r3, r2
 80115a6:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 80115a8:	8abb      	ldrh	r3, [r7, #20]
 80115aa:	1c5a      	adds	r2, r3, #1
 80115ac:	82ba      	strh	r2, [r7, #20]
 80115ae:	461a      	mov	r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	4413      	add	r3, r2
 80115b4:	222e      	movs	r2, #46	; 0x2e
 80115b6:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 80115b8:	897b      	ldrh	r3, [r7, #10]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <pif_FloatToString+0x86>
 80115be:	2306      	movs	r3, #6
 80115c0:	817b      	strh	r3, [r7, #10]
	value -= num;
 80115c2:	6938      	ldr	r0, [r7, #16]
 80115c4:	f7ee ff52 	bl	800046c <__aeabi_ui2d>
 80115c8:	4602      	mov	r2, r0
 80115ca:	460b      	mov	r3, r1
 80115cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115d0:	f7ee fe0e 	bl	80001f0 <__aeabi_dsub>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80115dc:	2300      	movs	r3, #0
 80115de:	82fb      	strh	r3, [r7, #22]
 80115e0:	e00d      	b.n	80115fe <pif_FloatToString+0xc2>
 80115e2:	f04f 0200 	mov.w	r2, #0
 80115e6:	4b13      	ldr	r3, [pc, #76]	; (8011634 <pif_FloatToString+0xf8>)
 80115e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115ec:	f7ee ffb8 	bl	8000560 <__aeabi_dmul>
 80115f0:	4602      	mov	r2, r0
 80115f2:	460b      	mov	r3, r1
 80115f4:	e9c7 2300 	strd	r2, r3, [r7]
 80115f8:	8afb      	ldrh	r3, [r7, #22]
 80115fa:	3301      	adds	r3, #1
 80115fc:	82fb      	strh	r3, [r7, #22]
 80115fe:	8afa      	ldrh	r2, [r7, #22]
 8011600:	897b      	ldrh	r3, [r7, #10]
 8011602:	429a      	cmp	r2, r3
 8011604:	d3ed      	bcc.n	80115e2 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 8011606:	8abb      	ldrh	r3, [r7, #20]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	18d4      	adds	r4, r2, r3
 801160c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011610:	f7ef fa68 	bl	8000ae4 <__aeabi_d2uiz>
 8011614:	4601      	mov	r1, r0
 8011616:	897b      	ldrh	r3, [r7, #10]
 8011618:	461a      	mov	r2, r3
 801161a:	4620      	mov	r0, r4
 801161c:	f7ff fe80 	bl	8011320 <pif_DecToString>
 8011620:	4603      	mov	r3, r0
 8011622:	b29a      	uxth	r2, r3
 8011624:	8abb      	ldrh	r3, [r7, #20]
 8011626:	4413      	add	r3, r2
 8011628:	82bb      	strh	r3, [r7, #20]
    return idx;
 801162a:	8abb      	ldrh	r3, [r7, #20]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3718      	adds	r7, #24
 8011630:	46bd      	mov	sp, r7
 8011632:	bdb0      	pop	{r4, r5, r7, pc}
 8011634:	40240000 	.word	0x40240000

08011638 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b08c      	sub	sp, #48	; 0x30
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011648:	e242      	b.n	8011ad0 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	2b25      	cmp	r3, #37	; 0x25
 8011650:	f040 8230 	bne.w	8011ab4 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011658:	2300      	movs	r3, #0
 801165a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3301      	adds	r3, #1
 8011662:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	3b25      	subs	r3, #37	; 0x25
 801166a:	2b53      	cmp	r3, #83	; 0x53
 801166c:	f200 822d 	bhi.w	8011aca <pif_PrintFormat+0x492>
 8011670:	a201      	add	r2, pc, #4	; (adr r2, 8011678 <pif_PrintFormat+0x40>)
 8011672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011676:	bf00      	nop
 8011678:	08011aa3 	.word	0x08011aa3
 801167c:	08011acb 	.word	0x08011acb
 8011680:	08011acb 	.word	0x08011acb
 8011684:	08011acb 	.word	0x08011acb
 8011688:	08011acb 	.word	0x08011acb
 801168c:	08011acb 	.word	0x08011acb
 8011690:	08011acb 	.word	0x08011acb
 8011694:	08011acb 	.word	0x08011acb
 8011698:	08011acb 	.word	0x08011acb
 801169c:	08011acb 	.word	0x08011acb
 80116a0:	08011acb 	.word	0x08011acb
 80116a4:	080117c9 	.word	0x080117c9
 80116a8:	080117c9 	.word	0x080117c9
 80116ac:	080117c9 	.word	0x080117c9
 80116b0:	080117c9 	.word	0x080117c9
 80116b4:	080117c9 	.word	0x080117c9
 80116b8:	080117c9 	.word	0x080117c9
 80116bc:	080117c9 	.word	0x080117c9
 80116c0:	080117c9 	.word	0x080117c9
 80116c4:	080117c9 	.word	0x080117c9
 80116c8:	080117c9 	.word	0x080117c9
 80116cc:	08011acb 	.word	0x08011acb
 80116d0:	08011acb 	.word	0x08011acb
 80116d4:	08011acb 	.word	0x08011acb
 80116d8:	08011acb 	.word	0x08011acb
 80116dc:	08011acb 	.word	0x08011acb
 80116e0:	08011acb 	.word	0x08011acb
 80116e4:	08011acb 	.word	0x08011acb
 80116e8:	08011acb 	.word	0x08011acb
 80116ec:	08011acb 	.word	0x08011acb
 80116f0:	08011acb 	.word	0x08011acb
 80116f4:	08011acb 	.word	0x08011acb
 80116f8:	08011acb 	.word	0x08011acb
 80116fc:	08011acb 	.word	0x08011acb
 8011700:	08011acb 	.word	0x08011acb
 8011704:	08011acb 	.word	0x08011acb
 8011708:	08011acb 	.word	0x08011acb
 801170c:	08011acb 	.word	0x08011acb
 8011710:	08011acb 	.word	0x08011acb
 8011714:	08011acb 	.word	0x08011acb
 8011718:	08011acb 	.word	0x08011acb
 801171c:	08011acb 	.word	0x08011acb
 8011720:	08011acb 	.word	0x08011acb
 8011724:	08011acb 	.word	0x08011acb
 8011728:	08011acb 	.word	0x08011acb
 801172c:	08011acb 	.word	0x08011acb
 8011730:	08011acb 	.word	0x08011acb
 8011734:	08011acb 	.word	0x08011acb
 8011738:	08011acb 	.word	0x08011acb
 801173c:	08011acb 	.word	0x08011acb
 8011740:	08011acb 	.word	0x08011acb
 8011744:	0801199f 	.word	0x0801199f
 8011748:	08011acb 	.word	0x08011acb
 801174c:	08011acb 	.word	0x08011acb
 8011750:	08011acb 	.word	0x08011acb
 8011754:	08011acb 	.word	0x08011acb
 8011758:	08011acb 	.word	0x08011acb
 801175c:	08011acb 	.word	0x08011acb
 8011760:	08011acb 	.word	0x08011acb
 8011764:	08011acb 	.word	0x08011acb
 8011768:	08011acb 	.word	0x08011acb
 801176c:	080117ef 	.word	0x080117ef
 8011770:	08011a85 	.word	0x08011a85
 8011774:	08011847 	.word	0x08011847
 8011778:	08011acb 	.word	0x08011acb
 801177c:	080119f7 	.word	0x080119f7
 8011780:	08011acb 	.word	0x08011acb
 8011784:	08011acb 	.word	0x08011acb
 8011788:	08011847 	.word	0x08011847
 801178c:	08011acb 	.word	0x08011acb
 8011790:	08011acb 	.word	0x08011acb
 8011794:	080117e7 	.word	0x080117e7
 8011798:	08011acb 	.word	0x08011acb
 801179c:	08011acb 	.word	0x08011acb
 80117a0:	08011acb 	.word	0x08011acb
 80117a4:	08011acb 	.word	0x08011acb
 80117a8:	08011acb 	.word	0x08011acb
 80117ac:	08011acb 	.word	0x08011acb
 80117b0:	08011a2d 	.word	0x08011a2d
 80117b4:	08011acb 	.word	0x08011acb
 80117b8:	080118ef 	.word	0x080118ef
 80117bc:	08011acb 	.word	0x08011acb
 80117c0:	08011acb 	.word	0x08011acb
 80117c4:	08011947 	.word	0x08011947
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 80117c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117ca:	461a      	mov	r2, r3
 80117cc:	0092      	lsls	r2, r2, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	b29a      	uxth	r2, r3
 80117da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117dc:	4413      	add	r3, r2
 80117de:	b29b      	uxth	r3, r3
 80117e0:	3b30      	subs	r3, #48	; 0x30
 80117e2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 80117e4:	e73b      	b.n	801165e <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 80117e6:	2301      	movs	r3, #1
 80117e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 80117ec:	e737      	b.n	801165e <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 80117ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d013      	beq.n	801181e <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	1d19      	adds	r1, r3, #4
 80117fc:	68ba      	ldr	r2, [r7, #8]
 80117fe:	6011      	str	r1, [r2, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	4413      	add	r3, r2
 801180a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801180c:	6979      	ldr	r1, [r7, #20]
 801180e:	4618      	mov	r0, r3
 8011810:	f7ff fd26 	bl	8011260 <pif_BinToString>
 8011814:	4602      	mov	r2, r0
 8011816:	6a3b      	ldr	r3, [r7, #32]
 8011818:	4413      	add	r3, r2
 801181a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 801181c:	e155      	b.n	8011aca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	1d19      	adds	r1, r3, #4
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	6011      	str	r1, [r2, #0]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 801182c:	6a3b      	ldr	r3, [r7, #32]
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	4413      	add	r3, r2
 8011832:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011834:	69b9      	ldr	r1, [r7, #24]
 8011836:	4618      	mov	r0, r3
 8011838:	f7ff fd12 	bl	8011260 <pif_BinToString>
 801183c:	4602      	mov	r2, r0
 801183e:	6a3b      	ldr	r3, [r7, #32]
 8011840:	4413      	add	r3, r2
 8011842:	623b      	str	r3, [r7, #32]
                    break;
 8011844:	e141      	b.n	8011aca <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011846:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801184a:	2b00      	cmp	r3, #0
 801184c:	d027      	beq.n	801189e <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	1d19      	adds	r1, r3, #4
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	6011      	str	r1, [r2, #0]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	2b00      	cmp	r3, #0
 8011860:	da10      	bge.n	8011884 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011862:	6a3b      	ldr	r3, [r7, #32]
 8011864:	1c5a      	adds	r2, r3, #1
 8011866:	623a      	str	r2, [r7, #32]
 8011868:	461a      	mov	r2, r3
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	4413      	add	r3, r2
 801186e:	222d      	movs	r2, #45	; 0x2d
 8011870:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011874:	425b      	negs	r3, r3
 8011876:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801187a:	2b00      	cmp	r3, #0
 801187c:	d002      	beq.n	8011884 <pif_PrintFormat+0x24c>
 801187e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011880:	3b01      	subs	r3, #1
 8011882:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	68fa      	ldr	r2, [r7, #12]
 8011888:	4413      	add	r3, r2
 801188a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801188c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801188e:	4618      	mov	r0, r3
 8011890:	f7ff fd46 	bl	8011320 <pif_DecToString>
 8011894:	4602      	mov	r2, r0
 8011896:	6a3b      	ldr	r3, [r7, #32]
 8011898:	4413      	add	r3, r2
 801189a:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 801189c:	e115      	b.n	8011aca <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	1d19      	adds	r1, r3, #4
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	6011      	str	r1, [r2, #0]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	da10      	bge.n	80118d4 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	623a      	str	r2, [r7, #32]
 80118b8:	461a      	mov	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	4413      	add	r3, r2
 80118be:	222d      	movs	r2, #45	; 0x2d
 80118c0:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 80118c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c4:	425b      	negs	r3, r3
 80118c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 80118c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d002      	beq.n	80118d4 <pif_PrintFormat+0x29c>
 80118ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118d0:	3b01      	subs	r3, #1
 80118d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	4413      	add	r3, r2
 80118da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fd1e 	bl	8011320 <pif_DecToString>
 80118e4:	4602      	mov	r2, r0
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	4413      	add	r3, r2
 80118ea:	623b      	str	r3, [r7, #32]
                    break;
 80118ec:	e0ed      	b.n	8011aca <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 80118ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d013      	beq.n	801191e <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	1d19      	adds	r1, r3, #4
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	6011      	str	r1, [r2, #0]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011904:	6a3b      	ldr	r3, [r7, #32]
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	4413      	add	r3, r2
 801190a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801190c:	6979      	ldr	r1, [r7, #20]
 801190e:	4618      	mov	r0, r3
 8011910:	f7ff fd06 	bl	8011320 <pif_DecToString>
 8011914:	4602      	mov	r2, r0
 8011916:	6a3b      	ldr	r3, [r7, #32]
 8011918:	4413      	add	r3, r2
 801191a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 801191c:	e0d5      	b.n	8011aca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	1d19      	adds	r1, r3, #4
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	6011      	str	r1, [r2, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 801192c:	6a3b      	ldr	r3, [r7, #32]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	4413      	add	r3, r2
 8011932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011934:	69b9      	ldr	r1, [r7, #24]
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fcf2 	bl	8011320 <pif_DecToString>
 801193c:	4602      	mov	r2, r0
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	4413      	add	r3, r2
 8011942:	623b      	str	r3, [r7, #32]
                    break;
 8011944:	e0c1      	b.n	8011aca <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011946:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801194a:	2b00      	cmp	r3, #0
 801194c:	d013      	beq.n	8011976 <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	1d19      	adds	r1, r3, #4
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	6011      	str	r1, [r2, #0]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	18d0      	adds	r0, r2, r3
 8011962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011964:	2300      	movs	r3, #0
 8011966:	6979      	ldr	r1, [r7, #20]
 8011968:	f7ff fd74 	bl	8011454 <pif_HexToString>
 801196c:	4602      	mov	r2, r0
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	4413      	add	r3, r2
 8011972:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011974:	e0a9      	b.n	8011aca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	1d19      	adds	r1, r3, #4
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	6011      	str	r1, [r2, #0]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	18d0      	adds	r0, r2, r3
 801198a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801198c:	2300      	movs	r3, #0
 801198e:	69b9      	ldr	r1, [r7, #24]
 8011990:	f7ff fd60 	bl	8011454 <pif_HexToString>
 8011994:	4602      	mov	r2, r0
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	4413      	add	r3, r2
 801199a:	623b      	str	r3, [r7, #32]
                    break;
 801199c:	e095      	b.n	8011aca <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 801199e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d013      	beq.n	80119ce <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	1d19      	adds	r1, r3, #4
 80119ac:	68ba      	ldr	r2, [r7, #8]
 80119ae:	6011      	str	r1, [r2, #0]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	18d0      	adds	r0, r2, r3
 80119ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119bc:	2301      	movs	r3, #1
 80119be:	6979      	ldr	r1, [r7, #20]
 80119c0:	f7ff fd48 	bl	8011454 <pif_HexToString>
 80119c4:	4602      	mov	r2, r0
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	4413      	add	r3, r2
 80119ca:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 80119cc:	e07d      	b.n	8011aca <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	1d19      	adds	r1, r3, #4
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	6011      	str	r1, [r2, #0]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 80119dc:	6a3b      	ldr	r3, [r7, #32]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	18d0      	adds	r0, r2, r3
 80119e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119e4:	2301      	movs	r3, #1
 80119e6:	69b9      	ldr	r1, [r7, #24]
 80119e8:	f7ff fd34 	bl	8011454 <pif_HexToString>
 80119ec:	4602      	mov	r2, r0
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	4413      	add	r3, r2
 80119f2:	623b      	str	r3, [r7, #32]
                    break;
 80119f4:	e069      	b.n	8011aca <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 80119f6:	6a3b      	ldr	r3, [r7, #32]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	18d0      	adds	r0, r2, r3
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3307      	adds	r3, #7
 8011a02:	f023 0307 	bic.w	r3, r3, #7
 8011a06:	f103 0108 	add.w	r1, r3, #8
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	6011      	str	r1, [r2, #0]
 8011a0e:	ed93 7b00 	vldr	d7, [r3]
 8011a12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a14:	4619      	mov	r1, r3
 8011a16:	eeb0 0a47 	vmov.f32	s0, s14
 8011a1a:	eef0 0a67 	vmov.f32	s1, s15
 8011a1e:	f7ff fd8d 	bl	801153c <pif_FloatToString>
 8011a22:	4602      	mov	r2, r0
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	4413      	add	r3, r2
 8011a28:	623b      	str	r3, [r7, #32]
                    break;
 8011a2a:	e04e      	b.n	8011aca <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	1d19      	adds	r1, r3, #4
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	6011      	str	r1, [r2, #0]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d043      	beq.n	8011ac8 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011a40:	6938      	ldr	r0, [r7, #16]
 8011a42:	f7ee fbc9 	bl	80001d8 <strlen>
 8011a46:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011a48:	6a3a      	ldr	r2, [r7, #32]
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	2b4e      	cmp	r3, #78	; 0x4e
 8011a50:	d807      	bhi.n	8011a62 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	4413      	add	r3, r2
 8011a58:	6939      	ldr	r1, [r7, #16]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f011 f886 	bl	8022b6c <strcpy>
 8011a60:	e00b      	b.n	8011a7a <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011a62:	6a3b      	ldr	r3, [r7, #32]
 8011a64:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011a68:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	4413      	add	r3, r2
 8011a70:	69fa      	ldr	r2, [r7, #28]
 8011a72:	6939      	ldr	r1, [r7, #16]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f011 f8a3 	bl	8022bc0 <strncpy>
						}
						offset += size;
 8011a7a:	6a3a      	ldr	r2, [r7, #32]
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	4413      	add	r3, r2
 8011a80:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011a82:	e021      	b.n	8011ac8 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	1d19      	adds	r1, r3, #4
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	6011      	str	r1, [r2, #0]
 8011a8e:	6819      	ldr	r1, [r3, #0]
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	1c5a      	adds	r2, r3, #1
 8011a94:	623a      	str	r2, [r7, #32]
 8011a96:	461a      	mov	r2, r3
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	b2ca      	uxtb	r2, r1
 8011a9e:	701a      	strb	r2, [r3, #0]
                    break;
 8011aa0:	e013      	b.n	8011aca <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011aa2:	6a3b      	ldr	r3, [r7, #32]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	623a      	str	r2, [r7, #32]
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	4413      	add	r3, r2
 8011aae:	2225      	movs	r2, #37	; 0x25
 8011ab0:	701a      	strb	r2, [r3, #0]
                    break;
 8011ab2:	e00a      	b.n	8011aca <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011ab4:	6a3b      	ldr	r3, [r7, #32]
 8011ab6:	1c5a      	adds	r2, r3, #1
 8011ab8:	623a      	str	r2, [r7, #32]
 8011aba:	461a      	mov	r2, r3
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	4413      	add	r3, r2
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	7812      	ldrb	r2, [r2, #0]
 8011ac4:	701a      	strb	r2, [r3, #0]
 8011ac6:	e000      	b.n	8011aca <pif_PrintFormat+0x492>
                    break;
 8011ac8:	bf00      	nop
        }
        p_format = p_format + 1;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	3301      	adds	r3, #1
 8011ace:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f47f adb8 	bne.w	801164a <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	4413      	add	r3, r2
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	701a      	strb	r2, [r3, #0]
}
 8011ae4:	bf00      	nop
 8011ae6:	3730      	adds	r7, #48	; 0x30
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011aec:	b40e      	push	{r1, r2, r3}
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b085      	sub	sp, #20
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011af6:	f107 0320 	add.w	r3, r7, #32
 8011afa:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011afc:	f107 030c 	add.w	r3, r7, #12
 8011b00:	69fa      	ldr	r2, [r7, #28]
 8011b02:	4619      	mov	r1, r3
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7ff fd97 	bl	8011638 <pif_PrintFormat>
	va_end(data);
}
 8011b0a:	bf00      	nop
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b14:	b003      	add	sp, #12
 8011b16:	4770      	bx	lr

08011b18 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	460a      	mov	r2, r1
 8011b22:	80fb      	strh	r3, [r7, #6]
 8011b24:	4613      	mov	r3, r2
 8011b26:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011b28:	797b      	ldrb	r3, [r7, #5]
 8011b2a:	021b      	lsls	r3, r3, #8
 8011b2c:	b21a      	sxth	r2, r3
 8011b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b32:	4053      	eors	r3, r2
 8011b34:	b21b      	sxth	r3, r3
 8011b36:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011b38:	2300      	movs	r3, #0
 8011b3a:	81fb      	strh	r3, [r7, #14]
 8011b3c:	e013      	b.n	8011b66 <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	da09      	bge.n	8011b5a <pifCrc16_Add+0x42>
 8011b46:	88fb      	ldrh	r3, [r7, #6]
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	b21b      	sxth	r3, r3
 8011b4c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011b50:	f083 0301 	eor.w	r3, r3, #1
 8011b54:	b21b      	sxth	r3, r3
 8011b56:	80fb      	strh	r3, [r7, #6]
 8011b58:	e002      	b.n	8011b60 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011b5a:	88fb      	ldrh	r3, [r7, #6]
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011b60:	89fb      	ldrh	r3, [r7, #14]
 8011b62:	3301      	adds	r3, #1
 8011b64:	81fb      	strh	r3, [r7, #14]
 8011b66:	89fb      	ldrh	r3, [r7, #14]
 8011b68:	2b07      	cmp	r3, #7
 8011b6a:	d9e8      	bls.n	8011b3e <pifCrc16_Add+0x26>
    }
	return crc;
 8011b6c:	88fb      	ldrh	r3, [r7, #6]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b084      	sub	sp, #16
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	460b      	mov	r3, r1
 8011b84:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	81fb      	strh	r3, [r7, #14]
 8011b8e:	e00d      	b.n	8011bac <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011b90:	89fb      	ldrh	r3, [r7, #14]
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	4413      	add	r3, r2
 8011b96:	781a      	ldrb	r2, [r3, #0]
 8011b98:	89bb      	ldrh	r3, [r7, #12]
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7ff ffbb 	bl	8011b18 <pifCrc16_Add>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011ba6:	89fb      	ldrh	r3, [r7, #14]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	81fb      	strh	r3, [r7, #14]
 8011bac:	89fa      	ldrh	r2, [r7, #14]
 8011bae:	887b      	ldrh	r3, [r7, #2]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d3ed      	bcc.n	8011b90 <pifCrc16+0x16>
	}
	return crc;
 8011bb4:	89bb      	ldrh	r3, [r7, #12]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011bbe:	b480      	push	{r7}
 8011bc0:	b085      	sub	sp, #20
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011bce:	2300      	movs	r3, #0
 8011bd0:	81fb      	strh	r3, [r7, #14]
 8011bd2:	e009      	b.n	8011be8 <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011bd4:	89fb      	ldrh	r3, [r7, #14]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	4413      	add	r3, r2
 8011bda:	781a      	ldrb	r2, [r3, #0]
 8011bdc:	7b7b      	ldrb	r3, [r7, #13]
 8011bde:	4053      	eors	r3, r2
 8011be0:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011be2:	89fb      	ldrh	r3, [r7, #14]
 8011be4:	3301      	adds	r3, #1
 8011be6:	81fb      	strh	r3, [r7, #14]
 8011be8:	89fa      	ldrh	r2, [r7, #14]
 8011bea:	887b      	ldrh	r3, [r7, #2]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d3f1      	bcc.n	8011bd4 <pifCheckXor+0x16>
	}
	return xor;
 8011bf0:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3714      	adds	r7, #20
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr

08011bfe <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f002 f858 	bl	8013cc4 <pifRingBuffer_GetByte>
 8011c14:	4603      	mov	r3, r0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b086      	sub	sp, #24
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	60b9      	str	r1, [r7, #8]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	695b      	ldr	r3, [r3, #20]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 ff04 	bl	8013a3e <pifRingBuffer_GetRemainSize>
 8011c36:	4603      	mov	r3, r0
 8011c38:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011c3a:	8afb      	ldrh	r3, [r7, #22]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <_actSendData+0x26>
 8011c40:	2300      	movs	r3, #0
 8011c42:	e012      	b.n	8011c6a <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011c44:	88fa      	ldrh	r2, [r7, #6]
 8011c46:	8afb      	ldrh	r3, [r7, #22]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d901      	bls.n	8011c50 <_actSendData+0x32>
 8011c4c:	8afb      	ldrh	r3, [r7, #22]
 8011c4e:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	695b      	ldr	r3, [r3, #20]
 8011c54:	88fa      	ldrh	r2, [r7, #6]
 8011c56:	68b9      	ldr	r1, [r7, #8]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f001 ff9b 	bl	8013b94 <pifRingBuffer_PutData>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d001      	beq.n	8011c68 <_actSendData+0x4a>
		return size;
 8011c64:	88fb      	ldrh	r3, [r7, #6]
 8011c66:	e000      	b.n	8011c6a <_actSendData+0x4c>
	}
	return 0;
 8011c68:	2300      	movs	r3, #0
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3718      	adds	r7, #24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
	...

08011c74 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d008      	beq.n	8011c96 <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	6a10      	ldr	r0, [r2, #32]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	6892      	ldr	r2, [r2, #8]
 8011c90:	4611      	mov	r1, r2
 8011c92:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011c94:	e025      	b.n	8011ce2 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d021      	beq.n	8011ce2 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	6a12      	ldr	r2, [r2, #32]
 8011ca6:	4911      	ldr	r1, [pc, #68]	; (8011cec <_sendData+0x78>)
 8011ca8:	4610      	mov	r0, r2
 8011caa:	4798      	blx	r3
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d017      	beq.n	8011ce2 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d112      	bne.n	8011ce2 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	68db      	ldr	r3, [r3, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00a      	beq.n	8011ce2 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	4798      	blx	r3
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d103      	bne.n	8011ce2 <_sendData+0x6e>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011ce2:	bf00      	nop
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	08011c1f 	.word	0x08011c1f

08011cf0 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d104      	bne.n	8011d0c <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011d02:	4b0e      	ldr	r3, [pc, #56]	; (8011d3c <pifComm_Init+0x4c>)
 8011d04:	2201      	movs	r2, #1
 8011d06:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	e012      	b.n	8011d32 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011d0c:	2230      	movs	r2, #48	; 0x30
 8011d0e:	2100      	movs	r1, #0
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f010 fde7 	bl	80228e4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011d16:	887b      	ldrh	r3, [r7, #2]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <pifComm_Init+0x3a>
 8011d1c:	4b08      	ldr	r3, [pc, #32]	; (8011d40 <pifComm_Init+0x50>)
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	b291      	uxth	r1, r2
 8011d24:	4a06      	ldr	r2, [pc, #24]	; (8011d40 <pifComm_Init+0x50>)
 8011d26:	8011      	strh	r1, [r2, #0]
 8011d28:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	887a      	ldrh	r2, [r7, #2]
 8011d2e:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8011d30:	2301      	movs	r3, #1
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20001bb5 	.word	0x20001bb5
 8011d40:	20000128 	.word	0x20000128

08011d44 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	69db      	ldr	r3, [r3, #28]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	69db      	ldr	r3, [r3, #28]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f002 fd5b 	bl	8014814 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d004      	beq.n	8011d76 <pifComm_Clear+0x32>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3318      	adds	r3, #24
 8011d70:	4618      	mov	r0, r3
 8011d72:	f001 fd4f 	bl	8013814 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	695b      	ldr	r3, [r3, #20]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d004      	beq.n	8011d88 <pifComm_Clear+0x44>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	3314      	adds	r3, #20
 8011d82:	4618      	mov	r0, r3
 8011d84:	f001 fd46 	bl	8013814 <pifRingBuffer_Destroy>
}
 8011d88:	bf00      	nop
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	807b      	strh	r3, [r7, #2]
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8011da0:	887b      	ldrh	r3, [r7, #2]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d104      	bne.n	8011db0 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8011da6:	4b1a      	ldr	r3, [pc, #104]	; (8011e10 <pifComm_AllocRxBuffer+0x80>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011dac:	2300      	movs	r3, #0
 8011dae:	e02a      	b.n	8011e06 <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8011db0:	887b      	ldrh	r3, [r7, #2]
 8011db2:	4619      	mov	r1, r3
 8011db4:	2000      	movs	r0, #0
 8011db6:	f001 fd01 	bl	80137bc <pifRingBuffer_CreateHeap>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	699b      	ldr	r3, [r3, #24]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <pifComm_AllocRxBuffer+0x3c>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	e01c      	b.n	8011e06 <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 8011dcc:	787b      	ldrb	r3, [r7, #1]
 8011dce:	2b64      	cmp	r3, #100	; 0x64
 8011dd0:	d901      	bls.n	8011dd6 <pifComm_AllocRxBuffer+0x46>
 8011dd2:	2364      	movs	r3, #100	; 0x64
 8011dd4:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 8011dd6:	887b      	ldrh	r3, [r7, #2]
 8011dd8:	2264      	movs	r2, #100	; 0x64
 8011dda:	fb03 f202 	mul.w	r2, r3, r2
 8011dde:	787b      	ldrb	r3, [r7, #1]
 8011de0:	fb92 f3f3 	sdiv	r3, r2, r3
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d102      	bne.n	8011df8 <pifComm_AllocRxBuffer+0x68>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2201      	movs	r2, #1
 8011df6:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	699b      	ldr	r3, [r3, #24]
 8011dfc:	4905      	ldr	r1, [pc, #20]	; (8011e14 <pifComm_AllocRxBuffer+0x84>)
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f001 fd85 	bl	801390e <pifRingBuffer_SetName>
    return TRUE;
 8011e04:	2301      	movs	r3, #1
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3708      	adds	r7, #8
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	20001bb5 	.word	0x20001bb5
 8011e14:	0802710c 	.word	0x0802710c

08011e18 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	460b      	mov	r3, r1
 8011e22:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8011e24:	887b      	ldrh	r3, [r7, #2]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d104      	bne.n	8011e34 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8011e2a:	4b0f      	ldr	r3, [pc, #60]	; (8011e68 <pifComm_AllocTxBuffer+0x50>)
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011e30:	2300      	movs	r3, #0
 8011e32:	e014      	b.n	8011e5e <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8011e34:	887b      	ldrh	r3, [r7, #2]
 8011e36:	4619      	mov	r1, r3
 8011e38:	2000      	movs	r0, #0
 8011e3a:	f001 fcbf 	bl	80137bc <pifRingBuffer_CreateHeap>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	695b      	ldr	r3, [r3, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <pifComm_AllocTxBuffer+0x38>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	e006      	b.n	8011e5e <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	695b      	ldr	r3, [r3, #20]
 8011e54:	4905      	ldr	r1, [pc, #20]	; (8011e6c <pifComm_AllocTxBuffer+0x54>)
 8011e56:	4618      	mov	r0, r3
 8011e58:	f001 fd59 	bl	801390e <pifRingBuffer_SetName>
	return TRUE;
 8011e5c:	2301      	movs	r3, #1
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	20001bb5 	.word	0x20001bb5
 8011e6c:	08027110 	.word	0x08027110

08011e70 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b085      	sub	sp, #20
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011e90:	bf00      	nop
 8011e92:	3714      	adds	r7, #20
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011eb6:	bf00      	nop
 8011eb8:	370c      	adds	r7, #12
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 8011ec2:	b580      	push	{r7, lr}
 8011ec4:	b082      	sub	sp, #8
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	699b      	ldr	r3, [r3, #24]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d101      	bne.n	8011eda <pifComm_PutRxByte+0x18>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	e01c      	b.n	8011f14 <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	699b      	ldr	r3, [r3, #24]
 8011ede:	78fa      	ldrb	r2, [r7, #3]
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f001 fe22 	bl	8013b2c <pifRingBuffer_PutByte>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d101      	bne.n	8011ef2 <pifComm_PutRxByte+0x30>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	e010      	b.n	8011f14 <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f001 fd56 	bl	80139a8 <pifRingBuffer_GetFillSize>
 8011efc:	4603      	mov	r3, r0
 8011efe:	461a      	mov	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d304      	bcc.n	8011f12 <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	69db      	ldr	r3, [r3, #28]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f002 fb93 	bl	8014638 <pifTask_SetTrigger>
	}
	return TRUE;
 8011f12:	2301      	movs	r3, #1
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	695b      	ldr	r3, [r3, #20]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d101      	bne.n	8011f34 <pifComm_StartGetTxData+0x18>
 8011f30:	2300      	movs	r3, #0
 8011f32:	e027      	b.n	8011f84 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	695b      	ldr	r3, [r3, #20]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f001 fd22 	bl	8013982 <pifRingBuffer_IsEmpty>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <pifComm_StartGetTxData+0x2c>
 8011f44:	2302      	movs	r3, #2
 8011f46:	e01d      	b.n	8011f84 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	695b      	ldr	r3, [r3, #20]
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f001 fceb 	bl	801392a <pifRingBuffer_GetTailPointer>
 8011f54:	4602      	mov	r2, r0
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	695b      	ldr	r3, [r3, #20]
 8011f5e:	2100      	movs	r1, #0
 8011f60:	4618      	mov	r0, r3
 8011f62:	f001 fd43 	bl	80139ec <pifRingBuffer_GetLinerSize>
 8011f66:	4603      	mov	r3, r0
 8011f68:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d004      	beq.n	8011f7c <pifComm_StartGetTxData+0x60>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	8afa      	ldrh	r2, [r7, #22]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d802      	bhi.n	8011f82 <pifComm_StartGetTxData+0x66>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	8afa      	ldrh	r2, [r7, #22]
 8011f80:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8011f82:	2301      	movs	r3, #1
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3718      	adds	r7, #24
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	460b      	mov	r3, r1
 8011f96:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	695b      	ldr	r3, [r3, #20]
 8011f9c:	887a      	ldrh	r2, [r7, #2]
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f001 ff00 	bl	8013da6 <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	695b      	ldr	r3, [r3, #20]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f001 fce9 	bl	8013982 <pifRingBuffer_IsEmpty>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	b2db      	uxtb	r3, r3
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pifTask_SetTrigger(p_owner->_p_task);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	69db      	ldr	r3, [r3, #28]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f002 fb30 	bl	8014638 <pifTask_SetTrigger>
}
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d017      	beq.n	8012026 <_doTask+0x46>
		if (p_owner->act_receive_data) {
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d008      	beq.n	8012010 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012002:	68fa      	ldr	r2, [r7, #12]
 8012004:	6a10      	ldr	r0, [r2, #32]
 8012006:	68fa      	ldr	r2, [r7, #12]
 8012008:	6852      	ldr	r2, [r2, #4]
 801200a:	4611      	mov	r1, r2
 801200c:	4798      	blx	r3
 801200e:	e00a      	b.n	8012026 <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	699b      	ldr	r3, [r3, #24]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d006      	beq.n	8012026 <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801201c:	68fa      	ldr	r2, [r7, #12]
 801201e:	6a12      	ldr	r2, [r2, #32]
 8012020:	4907      	ldr	r1, [pc, #28]	; (8012040 <_doTask+0x60>)
 8012022:	4610      	mov	r0, r2
 8012024:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202a:	2b00      	cmp	r3, #0
 801202c:	d002      	beq.n	8012034 <_doTask+0x54>
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f7ff fe20 	bl	8011c74 <_sendData>
	return 0;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	3710      	adds	r7, #16
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	08011bff 	.word	0x08011bff

08012044 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af02      	add	r7, sp, #8
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	4608      	mov	r0, r1
 801204e:	4611      	mov	r1, r2
 8012050:	461a      	mov	r2, r3
 8012052:	4603      	mov	r3, r0
 8012054:	70fb      	strb	r3, [r7, #3]
 8012056:	460b      	mov	r3, r1
 8012058:	803b      	strh	r3, [r7, #0]
 801205a:	4613      	mov	r3, r2
 801205c:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 801205e:	8839      	ldrh	r1, [r7, #0]
 8012060:	78f8      	ldrb	r0, [r7, #3]
 8012062:	78bb      	ldrb	r3, [r7, #2]
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4a0d      	ldr	r2, [pc, #52]	; (80120a0 <pifComm_AttachTask+0x5c>)
 801206a:	f002 fb6b 	bl	8014744 <pifTaskManager_Add>
 801206e:	4602      	mov	r2, r0
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	61da      	str	r2, [r3, #28]
	if (p_owner->_p_task) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	69db      	ldr	r3, [r3, #28]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00b      	beq.n	8012094 <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d004      	beq.n	801208c <pifComm_AttachTask+0x48>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	69db      	ldr	r3, [r3, #28]
 8012086:	693a      	ldr	r2, [r7, #16]
 8012088:	601a      	str	r2, [r3, #0]
 801208a:	e003      	b.n	8012094 <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	69db      	ldr	r3, [r3, #28]
 8012090:	4a04      	ldr	r2, [pc, #16]	; (80120a4 <pifComm_AttachTask+0x60>)
 8012092:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	69db      	ldr	r3, [r3, #28]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	08011fe1 	.word	0x08011fe1
 80120a4:	08027114 	.word	0x08027114

080120a8 <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	4608      	mov	r0, r1
 80120b2:	4611      	mov	r1, r2
 80120b4:	461a      	mov	r2, r3
 80120b6:	4603      	mov	r3, r0
 80120b8:	817b      	strh	r3, [r7, #10]
 80120ba:	460b      	mov	r3, r1
 80120bc:	727b      	strb	r3, [r7, #9]
 80120be:	4613      	mov	r3, r2
 80120c0:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d005      	beq.n	80120d4 <pifI2cPort_Init+0x2c>
 80120c8:	7a7b      	ldrb	r3, [r7, #9]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d002      	beq.n	80120d4 <pifI2cPort_Init+0x2c>
 80120ce:	88fb      	ldrh	r3, [r7, #6]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d104      	bne.n	80120de <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80120d4:	4b17      	ldr	r3, [pc, #92]	; (8012134 <pifI2cPort_Init+0x8c>)
 80120d6:	2201      	movs	r2, #1
 80120d8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80120da:	2300      	movs	r3, #0
 80120dc:	e025      	b.n	801212a <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80120de:	2230      	movs	r2, #48	; 0x30
 80120e0:	2100      	movs	r1, #0
 80120e2:	68f8      	ldr	r0, [r7, #12]
 80120e4:	f010 fbfe 	bl	80228e4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80120e8:	897b      	ldrh	r3, [r7, #10]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <pifI2cPort_Init+0x54>
 80120ee:	4b12      	ldr	r3, [pc, #72]	; (8012138 <pifI2cPort_Init+0x90>)
 80120f0:	881b      	ldrh	r3, [r3, #0]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	b291      	uxth	r1, r2
 80120f6:	4a10      	ldr	r2, [pc, #64]	; (8012138 <pifI2cPort_Init+0x90>)
 80120f8:	8011      	strh	r1, [r2, #0]
 80120fa:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	897a      	ldrh	r2, [r7, #10]
 8012100:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	88fa      	ldrh	r2, [r7, #6]
 8012106:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	3310      	adds	r3, #16
 801210c:	7a7a      	ldrb	r2, [r7, #9]
 801210e:	2108      	movs	r1, #8
 8012110:	4618      	mov	r0, r3
 8012112:	f000 fac5 	bl	80126a0 <pifFixList_Init>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d001      	beq.n	8012120 <pifI2cPort_Init+0x78>
    return TRUE;
 801211c:	2301      	movs	r3, #1
 801211e:	e004      	b.n	801212a <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012120:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f000 f80a 	bl	801213c <pifI2cPort_Clear>
	return FALSE;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	20001bb5 	.word	0x20001bb5
 8012138:	20000128 	.word	0x20000128

0801213c <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	3310      	adds	r3, #16
 8012148:	2100      	movs	r1, #0
 801214a:	4618      	mov	r0, r3
 801214c:	f000 fb08 	bl	8012760 <pifFixList_Clear>
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d104      	bne.n	8012170 <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 8012166:	4b0d      	ldr	r3, [pc, #52]	; (801219c <pifI2cPort_AddDevice+0x44>)
 8012168:	2201      	movs	r2, #1
 801216a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801216c:	2300      	movs	r3, #0
 801216e:	e011      	b.n	8012194 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	3310      	adds	r3, #16
 8012174:	4618      	mov	r0, r3
 8012176:	f000 fb26 	bl	80127c6 <pifFixList_AddFirst>
 801217a:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <pifI2cPort_AddDevice+0x2e>
 8012182:	2300      	movs	r3, #0
 8012184:	e006      	b.n	8012194 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	220a      	movs	r2, #10
 8012190:	705a      	strb	r2, [r3, #1]
    return p_device;
 8012192:	68fb      	ldr	r3, [r7, #12]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	20001bb5 	.word	0x20001bb5

080121a0 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
	if (p_device) {
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d007      	beq.n	80121c0 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	3310      	adds	r3, #16
 80121b4:	6839      	ldr	r1, [r7, #0]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fb39 	bl	801282e <pifFixList_Remove>
		p_device = NULL;
 80121bc:	2300      	movs	r3, #0
 80121be:	603b      	str	r3, [r7, #0]
	}
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80121c8:	b5b0      	push	{r4, r5, r7, lr}
 80121ca:	b08c      	sub	sp, #48	; 0x30
 80121cc:	af02      	add	r7, sp, #8
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	603b      	str	r3, [r7, #0]
 80121d4:	4613      	mov	r3, r2
 80121d6:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <pifI2cDevice_Read+0x22>
 80121e6:	2300      	movs	r3, #0
 80121e8:	e08e      	b.n	8012308 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d00f      	beq.n	8012212 <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	461a      	mov	r2, r3
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	4613      	mov	r3, r2
 8012204:	2262      	movs	r2, #98	; 0x62
 8012206:	4942      	ldr	r1, [pc, #264]	; (8012310 <pifI2cDevice_Read+0x148>)
 8012208:	2002      	movs	r0, #2
 801220a:	f001 f979 	bl	8013500 <pifLog_Printf>
#endif
		return FALSE;
 801220e:	2300      	movs	r3, #0
 8012210:	e07a      	b.n	8012308 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	68fa      	ldr	r2, [r7, #12]
 8012216:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2201      	movs	r2, #1
 801221c:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 8012222:	e048      	b.n	80122b6 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012228:	461a      	mov	r2, r3
 801222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222c:	4293      	cmp	r3, r2
 801222e:	bf28      	it	cs
 8012230:	4613      	movcs	r3, r2
 8012232:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	685c      	ldr	r4, [r3, #4]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	7818      	ldrb	r0, [r3, #0]
 801223c:	68ba      	ldr	r2, [r7, #8]
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	18d1      	adds	r1, r2, r3
 8012242:	683a      	ldr	r2, [r7, #0]
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	18d5      	adds	r5, r2, r3
 8012248:	7efb      	ldrb	r3, [r7, #27]
 801224a:	b29b      	uxth	r3, r3
 801224c:	79fa      	ldrb	r2, [r7, #7]
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	462b      	mov	r3, r5
 8012252:	47a0      	blx	r4
 8012254:	4603      	mov	r3, r0
 8012256:	2b02      	cmp	r3, #2
 8012258:	d021      	beq.n	801229e <pifI2cDevice_Read+0xd6>
 801225a:	2b02      	cmp	r3, #2
 801225c:	dc23      	bgt.n	80122a6 <pifI2cDevice_Read+0xde>
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <pifI2cDevice_Read+0x9e>
 8012262:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012264:	e01f      	b.n	80122a6 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012266:	4b2b      	ldr	r3, [pc, #172]	; (8012314 <pifI2cDevice_Read+0x14c>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 801226c:	e00a      	b.n	8012284 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801226e:	4b29      	ldr	r3, [pc, #164]	; (8012314 <pifI2cDevice_Read+0x14c>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	7852      	ldrb	r2, [r2, #1]
 801227a:	4293      	cmp	r3, r2
 801227c:	d902      	bls.n	8012284 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 801227e:	2372      	movs	r3, #114	; 0x72
 8012280:	623b      	str	r3, [r7, #32]
					goto fail;
 8012282:	e023      	b.n	80122cc <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	789b      	ldrb	r3, [r3, #2]
 8012288:	b2db      	uxtb	r3, r3
 801228a:	2b01      	cmp	r3, #1
 801228c:	d0ef      	beq.n	801226e <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	789b      	ldrb	r3, [r3, #2]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	2b03      	cmp	r3, #3
 8012296:	d105      	bne.n	80122a4 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012298:	2379      	movs	r3, #121	; 0x79
 801229a:	623b      	str	r3, [r7, #32]
				goto fail;
 801229c:	e016      	b.n	80122cc <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801229e:	2384      	movs	r3, #132	; 0x84
 80122a0:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80122a2:	e013      	b.n	80122cc <pifI2cDevice_Read+0x104>
			break;
 80122a4:	bf00      	nop
		}
		ptr += len;
 80122a6:	7efb      	ldrb	r3, [r7, #27]
 80122a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122aa:	4413      	add	r3, r2
 80122ac:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80122ae:	7efb      	ldrb	r3, [r7, #27]
 80122b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122b2:	1ad3      	subs	r3, r2, r3
 80122b4:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80122b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d1b3      	bne.n	8012224 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2200      	movs	r2, #0
 80122c0:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e01d      	b.n	8012308 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	461a      	mov	r2, r3
 80122d2:	4b11      	ldr	r3, [pc, #68]	; (8012318 <pifI2cDevice_Read+0x150>)
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	9301      	str	r3, [sp, #4]
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	4613      	mov	r3, r2
 80122de:	6a3a      	ldr	r2, [r7, #32]
 80122e0:	490e      	ldr	r1, [pc, #56]	; (801231c <pifI2cDevice_Read+0x154>)
 80122e2:	2004      	movs	r0, #4
 80122e4:	f001 f90c 	bl	8013500 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	2200      	movs	r2, #0
 80122ec:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	881b      	ldrh	r3, [r3, #0]
 80122f2:	3301      	adds	r3, #1
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2200      	movs	r2, #0
 80122fe:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012300:	4b05      	ldr	r3, [pc, #20]	; (8012318 <pifI2cDevice_Read+0x150>)
 8012302:	220a      	movs	r2, #10
 8012304:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012306:	2300      	movs	r3, #0
}
 8012308:	4618      	mov	r0, r3
 801230a:	3728      	adds	r7, #40	; 0x28
 801230c:	46bd      	mov	sp, r7
 801230e:	bdb0      	pop	{r4, r5, r7, pc}
 8012310:	0802714c 	.word	0x0802714c
 8012314:	20001bcc 	.word	0x20001bcc
 8012318:	20001bb5 	.word	0x20001bb5
 801231c:	0802716c 	.word	0x0802716c

08012320 <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b086      	sub	sp, #24
 8012324:	af02      	add	r7, sp, #8
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	460b      	mov	r3, r1
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 801232e:	7af9      	ldrb	r1, [r7, #11]
 8012330:	2301      	movs	r3, #1
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	68f8      	ldr	r0, [r7, #12]
 801233a:	f7ff ff45 	bl	80121c8 <pifI2cDevice_Read>
 801233e:	4603      	mov	r3, r0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b088      	sub	sp, #32
 801234c:	af02      	add	r7, sp, #8
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	460b      	mov	r3, r1
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012356:	7af9      	ldrb	r1, [r7, #11]
 8012358:	f107 0314 	add.w	r3, r7, #20
 801235c:	2202      	movs	r2, #2
 801235e:	9200      	str	r2, [sp, #0]
 8012360:	2201      	movs	r2, #1
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f7ff ff30 	bl	80121c8 <pifI2cDevice_Read>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d101      	bne.n	8012372 <pifI2cDevice_ReadRegWord+0x2a>
 801236e:	2300      	movs	r3, #0
 8012370:	e00a      	b.n	8012388 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012372:	7d3b      	ldrb	r3, [r7, #20]
 8012374:	b29b      	uxth	r3, r3
 8012376:	021b      	lsls	r3, r3, #8
 8012378:	b29a      	uxth	r2, r3
 801237a:	7d7b      	ldrb	r3, [r7, #21]
 801237c:	b29b      	uxth	r3, r3
 801237e:	4413      	add	r3, r2
 8012380:	b29a      	uxth	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012386:	2301      	movs	r3, #1
}
 8012388:	4618      	mov	r0, r3
 801238a:	3718      	adds	r7, #24
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af02      	add	r7, sp, #8
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	607a      	str	r2, [r7, #4]
 801239a:	603b      	str	r3, [r7, #0]
 801239c:	460b      	mov	r3, r1
 801239e:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 80123a0:	7af9      	ldrb	r1, [r7, #11]
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2201      	movs	r2, #1
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f7ff ff0c 	bl	80121c8 <pifI2cDevice_Read>
 80123b0:	4603      	mov	r3, r0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b088      	sub	sp, #32
 80123be:	af02      	add	r7, sp, #8
 80123c0:	60f8      	str	r0, [r7, #12]
 80123c2:	607b      	str	r3, [r7, #4]
 80123c4:	460b      	mov	r3, r1
 80123c6:	72fb      	strb	r3, [r7, #11]
 80123c8:	4613      	mov	r3, r2
 80123ca:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 80123cc:	893b      	ldrh	r3, [r7, #8]
 80123ce:	0a1b      	lsrs	r3, r3, #8
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 80123d4:	893b      	ldrh	r3, [r7, #8]
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	2201      	movs	r2, #1
 80123da:	fa02 f303 	lsl.w	r3, r2, r3
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	3b01      	subs	r3, #1
 80123e2:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80123e4:	7af9      	ldrb	r1, [r7, #11]
 80123e6:	f107 0315 	add.w	r3, r7, #21
 80123ea:	2201      	movs	r2, #1
 80123ec:	9200      	str	r2, [sp, #0]
 80123ee:	2201      	movs	r2, #1
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f7ff fee9 	bl	80121c8 <pifI2cDevice_Read>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <pifI2cDevice_ReadRegBit8+0x46>
 80123fc:	2300      	movs	r3, #0
 80123fe:	e00d      	b.n	801241c <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 8012400:	7d7b      	ldrb	r3, [r7, #21]
 8012402:	461a      	mov	r2, r3
 8012404:	7dfb      	ldrb	r3, [r7, #23]
 8012406:	fa42 f303 	asr.w	r3, r2, r3
 801240a:	b25a      	sxtb	r2, r3
 801240c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012410:	4013      	ands	r3, r2
 8012412:	b25b      	sxtb	r3, r3
 8012414:	b2da      	uxtb	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	701a      	strb	r2, [r3, #0]
	return TRUE;
 801241a:	2301      	movs	r3, #1
}
 801241c:	4618      	mov	r0, r3
 801241e:	3718      	adds	r7, #24
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012424:	b5b0      	push	{r4, r5, r7, lr}
 8012426:	b08c      	sub	sp, #48	; 0x30
 8012428:	af02      	add	r7, sp, #8
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	4613      	mov	r3, r2
 8012432:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d101      	bne.n	8012446 <pifI2cDevice_Write+0x22>
 8012442:	2300      	movs	r3, #0
 8012444:	e08e      	b.n	8012564 <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00f      	beq.n	801246e <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	461a      	mov	r2, r3
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	b2db      	uxtb	r3, r3
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	4613      	mov	r3, r2
 8012460:	22d3      	movs	r2, #211	; 0xd3
 8012462:	4942      	ldr	r1, [pc, #264]	; (801256c <pifI2cDevice_Write+0x148>)
 8012464:	2002      	movs	r0, #2
 8012466:	f001 f84b 	bl	8013500 <pifLog_Printf>
#endif
		return FALSE;
 801246a:	2300      	movs	r3, #0
 801246c:	e07a      	b.n	8012564 <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2201      	movs	r2, #1
 8012478:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801247a:	2300      	movs	r3, #0
 801247c:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801247e:	e048      	b.n	8012512 <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012484:	461a      	mov	r2, r3
 8012486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012488:	4293      	cmp	r3, r2
 801248a:	bf28      	it	cs
 801248c:	4613      	movcs	r3, r2
 801248e:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	689c      	ldr	r4, [r3, #8]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	7818      	ldrb	r0, [r3, #0]
 8012498:	68ba      	ldr	r2, [r7, #8]
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	18d1      	adds	r1, r2, r3
 801249e:	683a      	ldr	r2, [r7, #0]
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	18d5      	adds	r5, r2, r3
 80124a4:	7efb      	ldrb	r3, [r7, #27]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	79fa      	ldrb	r2, [r7, #7]
 80124aa:	9300      	str	r3, [sp, #0]
 80124ac:	462b      	mov	r3, r5
 80124ae:	47a0      	blx	r4
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d021      	beq.n	80124fa <pifI2cDevice_Write+0xd6>
 80124b6:	2b02      	cmp	r3, #2
 80124b8:	dc23      	bgt.n	8012502 <pifI2cDevice_Write+0xde>
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <pifI2cDevice_Write+0x9e>
 80124be:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 80124c0:	e01f      	b.n	8012502 <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 80124c2:	4b2b      	ldr	r3, [pc, #172]	; (8012570 <pifI2cDevice_Write+0x14c>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 80124c8:	e00a      	b.n	80124e0 <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 80124ca:	4b29      	ldr	r3, [pc, #164]	; (8012570 <pifI2cDevice_Write+0x14c>)
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	7852      	ldrb	r2, [r2, #1]
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d902      	bls.n	80124e0 <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 80124da:	23e3      	movs	r3, #227	; 0xe3
 80124dc:	623b      	str	r3, [r7, #32]
					goto fail;
 80124de:	e023      	b.n	8012528 <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	789b      	ldrb	r3, [r3, #2]
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d0ef      	beq.n	80124ca <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	789b      	ldrb	r3, [r3, #2]
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	2b03      	cmp	r3, #3
 80124f2:	d105      	bne.n	8012500 <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 80124f4:	23ea      	movs	r3, #234	; 0xea
 80124f6:	623b      	str	r3, [r7, #32]
				goto fail;
 80124f8:	e016      	b.n	8012528 <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 80124fa:	23f5      	movs	r3, #245	; 0xf5
 80124fc:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80124fe:	e013      	b.n	8012528 <pifI2cDevice_Write+0x104>
			break;
 8012500:	bf00      	nop
		}
		ptr += len;
 8012502:	7efb      	ldrb	r3, [r7, #27]
 8012504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012506:	4413      	add	r3, r2
 8012508:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 801250a:	7efb      	ldrb	r3, [r7, #27]
 801250c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1b3      	bne.n	8012480 <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	2200      	movs	r2, #0
 801251c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2200      	movs	r2, #0
 8012522:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012524:	2301      	movs	r3, #1
 8012526:	e01d      	b.n	8012564 <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	461a      	mov	r2, r3
 801252e:	4b11      	ldr	r3, [pc, #68]	; (8012574 <pifI2cDevice_Write+0x150>)
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	9301      	str	r3, [sp, #4]
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	4613      	mov	r3, r2
 801253a:	6a3a      	ldr	r2, [r7, #32]
 801253c:	490e      	ldr	r1, [pc, #56]	; (8012578 <pifI2cDevice_Write+0x154>)
 801253e:	2004      	movs	r0, #4
 8012540:	f000 ffde 	bl	8013500 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	2200      	movs	r2, #0
 8012548:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	3301      	adds	r3, #1
 8012550:	b29a      	uxth	r2, r3
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2200      	movs	r2, #0
 801255a:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 801255c:	4b05      	ldr	r3, [pc, #20]	; (8012574 <pifI2cDevice_Write+0x150>)
 801255e:	220a      	movs	r2, #10
 8012560:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3728      	adds	r7, #40	; 0x28
 8012568:	46bd      	mov	sp, r7
 801256a:	bdb0      	pop	{r4, r5, r7, pc}
 801256c:	08027188 	.word	0x08027188
 8012570:	20001bcc 	.word	0x20001bcc
 8012574:	20001bb5 	.word	0x20001bb5
 8012578:	080271a8 	.word	0x080271a8

0801257c <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af02      	add	r7, sp, #8
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	70fb      	strb	r3, [r7, #3]
 8012588:	4613      	mov	r3, r2
 801258a:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 801258c:	78f9      	ldrb	r1, [r7, #3]
 801258e:	1cbb      	adds	r3, r7, #2
 8012590:	2201      	movs	r2, #1
 8012592:	9200      	str	r2, [sp, #0]
 8012594:	2201      	movs	r2, #1
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ff ff44 	bl	8012424 <pifI2cDevice_Write>
 801259c:	4603      	mov	r3, r0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
	...

080125a8 <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b086      	sub	sp, #24
 80125ac:	af02      	add	r7, sp, #8
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	4608      	mov	r0, r1
 80125b2:	4611      	mov	r1, r2
 80125b4:	461a      	mov	r2, r3
 80125b6:	4603      	mov	r3, r0
 80125b8:	70fb      	strb	r3, [r7, #3]
 80125ba:	460b      	mov	r3, r1
 80125bc:	803b      	strh	r3, [r7, #0]
 80125be:	4613      	mov	r3, r2
 80125c0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 80125c2:	883b      	ldrh	r3, [r7, #0]
 80125c4:	0a1b      	lsrs	r3, r3, #8
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 80125ca:	883b      	ldrh	r3, [r7, #0]
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	2201      	movs	r2, #1
 80125d0:	fa02 f303 	lsl.w	r3, r2, r3
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	3b01      	subs	r3, #1
 80125d8:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 80125da:	78ba      	ldrb	r2, [r7, #2]
 80125dc:	7bbb      	ldrb	r3, [r7, #14]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d904      	bls.n	80125ec <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 80125e2:	4b21      	ldr	r3, [pc, #132]	; (8012668 <pifI2cDevice_WriteRegBit8+0xc0>)
 80125e4:	2206      	movs	r2, #6
 80125e6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80125e8:	2300      	movs	r3, #0
 80125ea:	e039      	b.n	8012660 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 80125ec:	78f9      	ldrb	r1, [r7, #3]
 80125ee:	f107 030c 	add.w	r3, r7, #12
 80125f2:	2201      	movs	r2, #1
 80125f4:	9200      	str	r2, [sp, #0]
 80125f6:	2201      	movs	r2, #1
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7ff fde5 	bl	80121c8 <pifI2cDevice_Read>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	d101      	bne.n	8012608 <pifI2cDevice_WriteRegBit8+0x60>
 8012604:	2300      	movs	r3, #0
 8012606:	e02b      	b.n	8012660 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 8012608:	7b3b      	ldrb	r3, [r7, #12]
 801260a:	461a      	mov	r2, r3
 801260c:	7bfb      	ldrb	r3, [r7, #15]
 801260e:	411a      	asrs	r2, r3
 8012610:	7bbb      	ldrb	r3, [r7, #14]
 8012612:	401a      	ands	r2, r3
 8012614:	78bb      	ldrb	r3, [r7, #2]
 8012616:	429a      	cmp	r2, r3
 8012618:	d021      	beq.n	801265e <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 801261a:	7bba      	ldrb	r2, [r7, #14]
 801261c:	7bfb      	ldrb	r3, [r7, #15]
 801261e:	fa02 f303 	lsl.w	r3, r2, r3
 8012622:	b25b      	sxtb	r3, r3
 8012624:	43db      	mvns	r3, r3
 8012626:	b25a      	sxtb	r2, r3
 8012628:	7b3b      	ldrb	r3, [r7, #12]
 801262a:	b25b      	sxtb	r3, r3
 801262c:	4013      	ands	r3, r2
 801262e:	b25a      	sxtb	r2, r3
 8012630:	78b9      	ldrb	r1, [r7, #2]
 8012632:	7bfb      	ldrb	r3, [r7, #15]
 8012634:	fa01 f303 	lsl.w	r3, r1, r3
 8012638:	b25b      	sxtb	r3, r3
 801263a:	4313      	orrs	r3, r2
 801263c:	b25b      	sxtb	r3, r3
 801263e:	b2db      	uxtb	r3, r3
 8012640:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012642:	78f9      	ldrb	r1, [r7, #3]
 8012644:	f107 030d 	add.w	r3, r7, #13
 8012648:	2201      	movs	r2, #1
 801264a:	9200      	str	r2, [sp, #0]
 801264c:	2201      	movs	r2, #1
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f7ff fee8 	bl	8012424 <pifI2cDevice_Write>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <pifI2cDevice_WriteRegBit8+0xb6>
 801265a:	2300      	movs	r3, #0
 801265c:	e000      	b.n	8012660 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 801265e:	2301      	movs	r3, #1
}
 8012660:	4618      	mov	r0, r3
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20001bb5 	.word	0x20001bb5

0801266c <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267c:	2b00      	cmp	r3, #0
 801267e:	d009      	beq.n	8012694 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d001      	beq.n	801268a <pifI2cPort_sigEndTransfer+0x1e>
 8012686:	2202      	movs	r2, #2
 8012688:	e000      	b.n	801268c <pifI2cPort_sigEndTransfer+0x20>
 801268a:	2203      	movs	r2, #3
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012690:	709a      	strb	r2, [r3, #2]
 8012692:	e000      	b.n	8012696 <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012694:	bf00      	nop
}
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b088      	sub	sp, #32
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d005      	beq.n	80126be <pifFixList_Init+0x1e>
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <pifFixList_Init+0x1e>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d104      	bne.n	80126c8 <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 80126be:	4b27      	ldr	r3, [pc, #156]	; (801275c <pifFixList_Init+0xbc>)
 80126c0:	2201      	movs	r2, #1
 80126c2:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80126c4:	2300      	movs	r3, #0
 80126c6:	e045      	b.n	8012754 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	3308      	adds	r3, #8
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	4611      	mov	r1, r2
 80126d0:	4618      	mov	r0, r3
 80126d2:	f010 f8b7 	bl	8022844 <calloc>
 80126d6:	4603      	mov	r3, r0
 80126d8:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d033      	beq.n	8012748 <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	69fa      	ldr	r2, [r7, #28]
 80126e4:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2200      	movs	r2, #0
 80126f6:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2200      	movs	r2, #0
 80126fc:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	69ba      	ldr	r2, [r7, #24]
 8012708:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 801270a:	2301      	movs	r3, #1
 801270c:	617b      	str	r3, [r7, #20]
 801270e:	e00f      	b.n	8012730 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	3308      	adds	r3, #8
 8012714:	69fa      	ldr	r2, [r7, #28]
 8012716:	4413      	add	r3, r2
 8012718:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	69fa      	ldr	r2, [r7, #28]
 801271e:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	2200      	movs	r2, #0
 8012724:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	3301      	adds	r3, #1
 801272e:	617b      	str	r3, [r7, #20]
 8012730:	697a      	ldr	r2, [r7, #20]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	429a      	cmp	r2, r3
 8012736:	dbeb      	blt.n	8012710 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	2200      	movs	r2, #0
 801273c:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	2200      	movs	r2, #0
 8012742:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012744:	2301      	movs	r3, #1
 8012746:	e005      	b.n	8012754 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012748:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 801274a:	2100      	movs	r1, #0
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f000 f807 	bl	8012760 <pifFixList_Clear>
	return FALSE;
 8012752:	2300      	movs	r3, #0
}
 8012754:	4618      	mov	r0, r3
 8012756:	3720      	adds	r7, #32
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	20001bb5 	.word	0x20001bb5

08012760 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b084      	sub	sp, #16
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d01f      	beq.n	80127b2 <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d014      	beq.n	80127a2 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	691b      	ldr	r3, [r3, #16]
 801277c:	60fb      	str	r3, [r7, #12]
			while (it) {
 801277e:	e00d      	b.n	801279c <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f103 0208 	add.w	r2, r3, #8
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	4610      	mov	r0, r2
 801278a:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d002      	beq.n	8012798 <pifFixList_Clear+0x38>
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	e000      	b.n	801279a <pifFixList_Clear+0x3a>
 8012798:	2300      	movs	r3, #0
 801279a:	60fb      	str	r3, [r7, #12]
			while (it) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1ee      	bne.n	8012780 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f010 f886 	bl	80228b8 <free>
		p_owner->p_node = NULL;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	605a      	str	r2, [r3, #4]
}
 80127be:	bf00      	nop
 80127c0:	3710      	adds	r7, #16
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b084      	sub	sp, #16
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	695b      	ldr	r3, [r3, #20]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <pifFixList_AddFirst+0x14>
 80127d6:	2300      	movs	r3, #0
 80127d8:	e025      	b.n	8012826 <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	695b      	ldr	r3, [r3, #20]
 80127de:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	691a      	ldr	r2, [r3, #16]
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d003      	beq.n	8012800 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68fa      	ldr	r2, [r7, #12]
 8012804:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	689b      	ldr	r3, [r3, #8]
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	3308      	adds	r3, #8
 8012814:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	461a      	mov	r2, r3
 801281c:	2100      	movs	r1, #0
 801281e:	68b8      	ldr	r0, [r7, #8]
 8012820:	f010 f860 	bl	80228e4 <memset>
    return p;
 8012824:	68bb      	ldr	r3, [r7, #8]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 801282e:	b480      	push	{r7}
 8012830:	b085      	sub	sp, #20
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	3b08      	subs	r3, #8
 801283c:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d005      	beq.n	8012852 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	68fa      	ldr	r2, [r7, #12]
 801284c:	6812      	ldr	r2, [r2, #0]
 801284e:	601a      	str	r2, [r3, #0]
 8012850:	e003      	b.n	801285a <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d004      	beq.n	801286c <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	6852      	ldr	r2, [r2, #4]
 801286a:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	695a      	ldr	r2, [r3, #20]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2200      	movs	r2, #0
 8012878:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	68fa      	ldr	r2, [r7, #12]
 801287e:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	1e5a      	subs	r2, r3, #1
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	609a      	str	r2, [r3, #8]
}
 801288a:	bf00      	nop
 801288c:	3714      	adds	r7, #20
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012896:	b480      	push	{r7}
 8012898:	b083      	sub	sp, #12
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	689b      	ldr	r3, [r3, #8]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	370c      	adds	r7, #12
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr

080128ae <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 80128ae:	b480      	push	{r7}
 80128b0:	b083      	sub	sp, #12
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	691b      	ldr	r3, [r3, #16]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	370c      	adds	r7, #12
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr

080128c6 <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 80128c6:	b480      	push	{r7}
 80128c8:	b083      	sub	sp, #12
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d002      	beq.n	80128da <pifFixList_Next+0x14>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	e000      	b.n	80128dc <pifFixList_Next+0x16>
 80128da:	2300      	movs	r3, #0
}
 80128dc:	4618      	mov	r0, r3
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 80128f2:	4916      	ldr	r1, [pc, #88]	; (801294c <pifLog_CmdHelp+0x64>)
 80128f4:	2000      	movs	r0, #0
 80128f6:	f000 fd75 	bl	80133e4 <pifLog_Print>
    i = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 80128fe:	4b14      	ldr	r3, [pc, #80]	; (8012950 <pifLog_CmdHelp+0x68>)
 8012900:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	011b      	lsls	r3, r3, #4
 8012906:	4413      	add	r3, r2
 8012908:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d016      	beq.n	8012940 <pifLog_CmdHelp+0x58>

        pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	689b      	ldr	r3, [r3, #8]
 801291a:	490e      	ldr	r1, [pc, #56]	; (8012954 <pifLog_CmdHelp+0x6c>)
 801291c:	2000      	movs	r0, #0
 801291e:	f000 fdef 	bl	8013500 <pifLog_Printf>
    	if (p_entry->p_args) {
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <pifLog_CmdHelp+0x50>
            pifLog_Printf(LT_NONE, "\t%s\n", p_entry->p_args);
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	461a      	mov	r2, r3
 8012930:	4909      	ldr	r1, [pc, #36]	; (8012958 <pifLog_CmdHelp+0x70>)
 8012932:	2000      	movs	r0, #0
 8012934:	f000 fde4 	bl	8013500 <pifLog_Printf>
    	}
        i++;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	3301      	adds	r3, #1
 801293c:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 801293e:	e7de      	b.n	80128fe <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 8012940:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	08027214 	.word	0x08027214
 8012950:	20001be4 	.word	0x20001be4
 8012954:	0802722c 	.word	0x0802722c
 8012958:	08027238 	.word	0x08027238

0801295c <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af02      	add	r7, sp, #8
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8012966:	4b07      	ldr	r3, [pc, #28]	; (8012984 <pifLog_CmdPrintVersion+0x28>)
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	2300      	movs	r3, #0
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	2301      	movs	r3, #1
 8012970:	2200      	movs	r2, #0
 8012972:	4905      	ldr	r1, [pc, #20]	; (8012988 <pifLog_CmdPrintVersion+0x2c>)
 8012974:	2000      	movs	r0, #0
 8012976:	f000 fdc3 	bl	8013500 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 801297a:	2300      	movs	r3, #0
}
 801297c:	4618      	mov	r0, r3
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	0802725c 	.word	0x0802725c
 8012988:	08027240 	.word	0x08027240

0801298c <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 8012996:	f002 fa1f 	bl	8014dd8 <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af02      	add	r7, sp, #8
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 0) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d136      	bne.n	8012a22 <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 80129b4:	4b4b      	ldr	r3, [pc, #300]	; (8012ae4 <pifLog_CmdSetStatus+0x140>)
 80129b6:	791b      	ldrb	r3, [r3, #4]
 80129b8:	461a      	mov	r2, r3
 80129ba:	494b      	ldr	r1, [pc, #300]	; (8012ae8 <pifLog_CmdSetStatus+0x144>)
 80129bc:	2000      	movs	r0, #0
 80129be:	f000 fd9f 	bl	8013500 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 80129c2:	4b4a      	ldr	r3, [pc, #296]	; (8012aec <pifLog_CmdSetStatus+0x148>)
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	461a      	mov	r2, r3
 80129c8:	4949      	ldr	r1, [pc, #292]	; (8012af0 <pifLog_CmdSetStatus+0x14c>)
 80129ca:	2000      	movs	r0, #0
 80129cc:	f000 fd98 	bl	8013500 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 80129d0:	4948      	ldr	r1, [pc, #288]	; (8012af4 <pifLog_CmdSetStatus+0x150>)
 80129d2:	2000      	movs	r0, #0
 80129d4:	f000 fd94 	bl	8013500 <pifLog_Printf>
	   	i = 0;
 80129d8:	2300      	movs	r3, #0
 80129da:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80129dc:	e019      	b.n	8012a12 <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 80129de:	4a46      	ldr	r2, [pc, #280]	; (8012af8 <pifLog_CmdSetStatus+0x154>)
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80129e6:	4a44      	ldr	r2, [pc, #272]	; (8012af8 <pifLog_CmdSetStatus+0x154>)
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	4413      	add	r3, r2
 80129ee:	6858      	ldr	r0, [r3, #4]
 80129f0:	4b42      	ldr	r3, [pc, #264]	; (8012afc <pifLog_CmdSetStatus+0x158>)
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	fa22 f303 	lsr.w	r3, r2, r3
 80129fa:	f003 0301 	and.w	r3, r3, #1
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	4603      	mov	r3, r0
 8012a02:	460a      	mov	r2, r1
 8012a04:	493e      	ldr	r1, [pc, #248]	; (8012b00 <pifLog_CmdSetStatus+0x15c>)
 8012a06:	2000      	movs	r0, #0
 8012a08:	f000 fd7a 	bl	8013500 <pifLog_Printf>
			i++;
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a12:	4a39      	ldr	r2, [pc, #228]	; (8012af8 <pifLog_CmdSetStatus+0x154>)
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1df      	bne.n	80129de <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	e05c      	b.n	8012adc <pifLog_CmdSetStatus+0x138>
	}
	else if (argc > 1) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	dd57      	ble.n	8012ad8 <pifLog_CmdSetStatus+0x134>
		switch (argv[1][0]) {
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	3304      	adds	r3, #4
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2b74      	cmp	r3, #116	; 0x74
 8012a32:	d015      	beq.n	8012a60 <pifLog_CmdSetStatus+0xbc>
 8012a34:	2b74      	cmp	r3, #116	; 0x74
 8012a36:	dc16      	bgt.n	8012a66 <pifLog_CmdSetStatus+0xc2>
 8012a38:	2b66      	cmp	r3, #102	; 0x66
 8012a3a:	d00e      	beq.n	8012a5a <pifLog_CmdSetStatus+0xb6>
 8012a3c:	2b66      	cmp	r3, #102	; 0x66
 8012a3e:	dc12      	bgt.n	8012a66 <pifLog_CmdSetStatus+0xc2>
 8012a40:	2b54      	cmp	r3, #84	; 0x54
 8012a42:	d00d      	beq.n	8012a60 <pifLog_CmdSetStatus+0xbc>
 8012a44:	2b54      	cmp	r3, #84	; 0x54
 8012a46:	dc0e      	bgt.n	8012a66 <pifLog_CmdSetStatus+0xc2>
 8012a48:	2b46      	cmp	r3, #70	; 0x46
 8012a4a:	d006      	beq.n	8012a5a <pifLog_CmdSetStatus+0xb6>
 8012a4c:	2b46      	cmp	r3, #70	; 0x46
 8012a4e:	dc0a      	bgt.n	8012a66 <pifLog_CmdSetStatus+0xc2>
 8012a50:	2b30      	cmp	r3, #48	; 0x30
 8012a52:	d002      	beq.n	8012a5a <pifLog_CmdSetStatus+0xb6>
 8012a54:	2b31      	cmp	r3, #49	; 0x31
 8012a56:	d003      	beq.n	8012a60 <pifLog_CmdSetStatus+0xbc>
 8012a58:	e005      	b.n	8012a66 <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	73fb      	strb	r3, [r7, #15]
			break;
 8012a5e:	e005      	b.n	8012a6c <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012a60:	2301      	movs	r3, #1
 8012a62:	73fb      	strb	r3, [r7, #15]
			break;
 8012a64:	e002      	b.n	8012a6c <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012a66:	f06f 0303 	mvn.w	r3, #3
 8012a6a:	e037      	b.n	8012adc <pifLog_CmdSetStatus+0x138>
		}
		i = 0;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a70:	e029      	b.n	8012ac6 <pifLog_CmdSetStatus+0x122>
			if (!strcasecmp(argv[0], c_log_flags[i].p_command)) {
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	4920      	ldr	r1, [pc, #128]	; (8012af8 <pifLog_CmdSetStatus+0x154>)
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	00db      	lsls	r3, r3, #3
 8012a7c:	440b      	add	r3, r1
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	4619      	mov	r1, r3
 8012a82:	4610      	mov	r0, r2
 8012a84:	f010 f83c 	bl	8022b00 <strcasecmp>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d118      	bne.n	8012ac0 <pifLog_CmdSetStatus+0x11c>
				if (value) {
 8012a8e:	7bfb      	ldrb	r3, [r7, #15]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d009      	beq.n	8012aa8 <pifLog_CmdSetStatus+0x104>
					pif_log_flag.all |= 1L << i;
 8012a94:	4b19      	ldr	r3, [pc, #100]	; (8012afc <pifLog_CmdSetStatus+0x158>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2101      	movs	r1, #1
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	4a16      	ldr	r2, [pc, #88]	; (8012afc <pifLog_CmdSetStatus+0x158>)
 8012aa4:	6013      	str	r3, [r2, #0]
 8012aa6:	e009      	b.n	8012abc <pifLog_CmdSetStatus+0x118>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012aa8:	4b14      	ldr	r3, [pc, #80]	; (8012afc <pifLog_CmdSetStatus+0x158>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2101      	movs	r1, #1
 8012aae:	68ba      	ldr	r2, [r7, #8]
 8012ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8012ab4:	43d2      	mvns	r2, r2
 8012ab6:	4013      	ands	r3, r2
 8012ab8:	4a10      	ldr	r2, [pc, #64]	; (8012afc <pifLog_CmdSetStatus+0x158>)
 8012aba:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012abc:	2300      	movs	r3, #0
 8012abe:	e00d      	b.n	8012adc <pifLog_CmdSetStatus+0x138>
			}
			i++;
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012ac6:	4a0c      	ldr	r2, [pc, #48]	; (8012af8 <pifLog_CmdSetStatus+0x154>)
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d1cf      	bne.n	8012a72 <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012ad2:	f06f 0303 	mvn.w	r3, #3
 8012ad6:	e001      	b.n	8012adc <pifLog_CmdSetStatus+0x138>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012ad8:	f06f 0302 	mvn.w	r3, #2
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	20001bd0 	.word	0x20001bd0
 8012ae8:	08027268 	.word	0x08027268
 8012aec:	20001bb5 	.word	0x20001bb5
 8012af0:	08027278 	.word	0x08027278
 8012af4:	08027284 	.word	0x08027284
 8012af8:	08028eb0 	.word	0x08028eb0
 8012afc:	20001be0 	.word	0x20001be0
 8012b00:	0802728c 	.word	0x0802728c

08012b04 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b088      	sub	sp, #32
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	77bb      	strb	r3, [r7, #30]
    uint8_t enter;
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012b12:	e1e2      	b.n	8012eda <_getDebugString+0x3d6>
		if (tmp_char >= 32 && tmp_char <= 126) {
 8012b14:	7bfb      	ldrb	r3, [r7, #15]
 8012b16:	2b1f      	cmp	r3, #31
 8012b18:	d934      	bls.n	8012b84 <_getDebugString+0x80>
 8012b1a:	7bfb      	ldrb	r3, [r7, #15]
 8012b1c:	2b7e      	cmp	r3, #126	; 0x7e
 8012b1e:	d831      	bhi.n	8012b84 <_getDebugString+0x80>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d103      	bne.n	8012b32 <_getDebugString+0x2e>
 8012b2a:	7bfb      	ldrb	r3, [r7, #15]
 8012b2c:	2b20      	cmp	r3, #32
 8012b2e:	d100      	bne.n	8012b32 <_getDebugString+0x2e>
 8012b30:	e1d3      	b.n	8012eda <_getDebugString+0x3d6>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b38:	461a      	mov	r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b40:	3b03      	subs	r3, #3
 8012b42:	429a      	cmp	r2, r3
 8012b44:	f280 815d 	bge.w	8012e02 <_getDebugString+0x2fe>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4c:	7bfa      	ldrb	r2, [r7, #15]
 8012b4e:	4611      	mov	r1, r2
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 ffeb 	bl	8013b2c <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6a1b      	ldr	r3, [r3, #32]
 8012b5a:	69db      	ldr	r3, [r3, #28]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f001 fd6b 	bl	8014638 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b6c:	4413      	add	r3, r2
 8012b6e:	7bfa      	ldrb	r2, [r7, #15]
 8012b70:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b78:	3301      	adds	r3, #1
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012b82:	e13e      	b.n	8012e02 <_getDebugString+0x2fe>
            }
		}
		else {
			switch (tmp_char) {
 8012b84:	7bfb      	ldrb	r3, [r7, #15]
 8012b86:	2b0d      	cmp	r3, #13
 8012b88:	dc16      	bgt.n	8012bb8 <_getDebugString+0xb4>
 8012b8a:	2b08      	cmp	r3, #8
 8012b8c:	f2c0 812c 	blt.w	8012de8 <_getDebugString+0x2e4>
 8012b90:	3b08      	subs	r3, #8
 8012b92:	2b05      	cmp	r3, #5
 8012b94:	f200 8128 	bhi.w	8012de8 <_getDebugString+0x2e4>
 8012b98:	a201      	add	r2, pc, #4	; (adr r2, 8012ba0 <_getDebugString+0x9c>)
 8012b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b9e:	bf00      	nop
 8012ba0:	08012bbf 	.word	0x08012bbf
 8012ba4:	08012c05 	.word	0x08012c05
 8012ba8:	08012db3 	.word	0x08012db3
 8012bac:	08012de9 	.word	0x08012de9
 8012bb0:	08012dbf 	.word	0x08012dbf
 8012bb4:	08012db9 	.word	0x08012db9
 8012bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8012bba:	f040 8115 	bne.w	8012de8 <_getDebugString+0x2e4>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f000 8119 	beq.w	8012dfc <_getDebugString+0x2f8>
					p_owner->char_idx--;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012be4:	4413      	add	r3, r2
 8012be6:	2200      	movs	r2, #0
 8012be8:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bee:	499c      	ldr	r1, [pc, #624]	; (8012e60 <_getDebugString+0x35c>)
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f001 f819 	bl	8013c28 <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6a1b      	ldr	r3, [r3, #32]
 8012bfa:	69db      	ldr	r3, [r3, #28]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f001 fd1b 	bl	8014638 <pifTask_SetTrigger>
				}
				break;
 8012c02:	e0fb      	b.n	8012dfc <_getDebugString+0x2f8>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 8012c04:	2300      	movs	r3, #0
 8012c06:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c12:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c18:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012c1a:	e01b      	b.n	8012c54 <_getDebugString+0x150>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00c      	beq.n	8012c40 <_getDebugString+0x13c>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	6819      	ldr	r1, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c34:	461a      	mov	r2, r3
 8012c36:	f00f ffa1 	bl	8022b7c <strncasecmp>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d106      	bne.n	8012c4e <_getDebugString+0x14a>
						if (!pstart)
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <_getDebugString+0x146>
							pstart = cmd;
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	3310      	adds	r3, #16
 8012c52:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d1df      	bne.n	8012c1c <_getDebugString+0x118>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d05b      	beq.n	8012d1a <_getDebugString+0x216>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c6c:	4413      	add	r3, r2
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d04f      	beq.n	8012d14 <_getDebugString+0x210>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c7e:	4413      	add	r3, r2
 8012c80:	781a      	ldrb	r2, [r3, #0]
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	6879      	ldr	r1, [r7, #4]
 8012c88:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012c8c:	440b      	add	r3, r1
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d141      	bne.n	8012d18 <_getDebugString+0x214>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c9e:	4413      	add	r3, r2
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d11f      	bne.n	8012ce6 <_getDebugString+0x1e2>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cac:	461a      	mov	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cb4:	3b02      	subs	r3, #2
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	da15      	bge.n	8012ce6 <_getDebugString+0x1e2>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cc4:	1c59      	adds	r1, r3, #1
 8012cc6:	b2c8      	uxtb	r0, r1
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8012cce:	4413      	add	r3, r2
 8012cd0:	2220      	movs	r2, #32
 8012cd2:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012cde:	4413      	add	r3, r2
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
	                        break;
 8012ce4:	e019      	b.n	8012d1a <_getDebugString+0x216>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012cf0:	441a      	add	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf6:	6879      	ldr	r1, [r7, #4]
 8012cf8:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012cfc:	440b      	add	r3, r1
 8012cfe:	7812      	ldrb	r2, [r2, #0]
 8012d00:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d08:	3301      	adds	r3, #1
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012d12:	e7a6      	b.n	8012c62 <_getDebugString+0x15e>
 8012d14:	bf00      	nop
 8012d16:	e000      	b.n	8012d1a <_getDebugString+0x216>
	                        break;
 8012d18:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d003      	beq.n	8012d2c <_getDebugString+0x228>
 8012d24:	697a      	ldr	r2, [r7, #20]
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d035      	beq.n	8012d98 <_getDebugString+0x294>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d30:	494c      	ldr	r1, [pc, #304]	; (8012e64 <_getDebugString+0x360>)
 8012d32:	4618      	mov	r0, r3
 8012d34:	f000 ff78 	bl	8013c28 <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	61bb      	str	r3, [r7, #24]
 8012d3c:	e010      	b.n	8012d60 <_getDebugString+0x25c>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4619      	mov	r1, r3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	f000 ff6d 	bl	8013c28 <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d52:	2109      	movs	r1, #9
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 fee9 	bl	8013b2c <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	3310      	adds	r3, #16
 8012d5e:	61bb      	str	r3, [r7, #24]
 8012d60:	69ba      	ldr	r2, [r7, #24]
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d9ea      	bls.n	8012d3e <_getDebugString+0x23a>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d6c:	4a3e      	ldr	r2, [pc, #248]	; (8012e68 <_getDebugString+0x364>)
 8012d6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012d70:	4611      	mov	r1, r2
 8012d72:	4618      	mov	r0, r3
 8012d74:	f000 ff58 	bl	8013c28 <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8012d78:	2300      	movs	r3, #0
 8012d7a:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8012d7c:	e00c      	b.n	8012d98 <_getDebugString+0x294>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d86:	7ffb      	ldrb	r3, [r7, #31]
 8012d88:	4413      	add	r3, r2
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	f000 fecd 	bl	8013b2c <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 8012d92:	7ffb      	ldrb	r3, [r7, #31]
 8012d94:	3301      	adds	r3, #1
 8012d96:	77fb      	strb	r3, [r7, #31]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d9e:	7ffa      	ldrb	r2, [r7, #31]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d3ec      	bcc.n	8012d7e <_getDebugString+0x27a>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6a1b      	ldr	r3, [r3, #32]
 8012da8:	69db      	ldr	r3, [r3, #28]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f001 fc44 	bl	8014638 <pifTask_SetTrigger>
				break;
 8012db0:	e027      	b.n	8012e02 <_getDebugString+0x2fe>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 8012db2:	2301      	movs	r3, #1
 8012db4:	777b      	strb	r3, [r7, #29]
				break;
 8012db6:	e024      	b.n	8012e02 <_getDebugString+0x2fe>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 8012db8:	2302      	movs	r3, #2
 8012dba:	777b      	strb	r3, [r7, #29]
				break;
 8012dbc:	e021      	b.n	8012e02 <_getDebugString+0x2fe>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc2:	492a      	ldr	r1, [pc, #168]	; (8012e6c <_getDebugString+0x368>)
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f000 ff2f 	bl	8013c28 <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dce:	4a26      	ldr	r2, [pc, #152]	; (8012e68 <_getDebugString+0x364>)
 8012dd0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f000 ff27 	bl	8013c28 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6a1b      	ldr	r3, [r3, #32]
 8012dde:	69db      	ldr	r3, [r3, #28]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 fc29 	bl	8014638 <pifTask_SetTrigger>
				break;
 8012de6:	e00c      	b.n	8012e02 <_getDebugString+0x2fe>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d007      	beq.n	8012e00 <_getDebugString+0x2fc>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012df4:	7bfa      	ldrb	r2, [r7, #15]
 8012df6:	4610      	mov	r0, r2
 8012df8:	4798      	blx	r3
            	break;
 8012dfa:	e001      	b.n	8012e00 <_getDebugString+0x2fc>
				break;
 8012dfc:	bf00      	nop
 8012dfe:	e000      	b.n	8012e02 <_getDebugString+0x2fe>
            	break;
 8012e00:	bf00      	nop
			}
        }

		if (enter) {
 8012e02:	7f7b      	ldrb	r3, [r7, #29]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d026      	beq.n	8012e56 <_getDebugString+0x352>
			if (p_owner->char_idx) {
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d005      	beq.n	8012e1e <_getDebugString+0x31a>
				str_get_done_flag = TRUE;
 8012e12:	2301      	movs	r3, #1
 8012e14:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 8012e16:	4a16      	ldr	r2, [pc, #88]	; (8012e70 <_getDebugString+0x36c>)
 8012e18:	7f7b      	ldrb	r3, [r7, #29]
 8012e1a:	7013      	strb	r3, [r2, #0]
 8012e1c:	e019      	b.n	8012e52 <_getDebugString+0x34e>
			}
			else if (!pre_enter || enter == pre_enter) {
 8012e1e:	4b14      	ldr	r3, [pc, #80]	; (8012e70 <_getDebugString+0x36c>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d004      	beq.n	8012e30 <_getDebugString+0x32c>
 8012e26:	4b12      	ldr	r3, [pc, #72]	; (8012e70 <_getDebugString+0x36c>)
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	7f7a      	ldrb	r2, [r7, #29]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d110      	bne.n	8012e52 <_getDebugString+0x34e>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e34:	4a0c      	ldr	r2, [pc, #48]	; (8012e68 <_getDebugString+0x364>)
 8012e36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012e38:	4611      	mov	r1, r2
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fef4 	bl	8013c28 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a1b      	ldr	r3, [r3, #32]
 8012e44:	69db      	ldr	r3, [r3, #28]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f001 fbf6 	bl	8014638 <pifTask_SetTrigger>
				pre_enter = enter;
 8012e4c:	4a08      	ldr	r2, [pc, #32]	; (8012e70 <_getDebugString+0x36c>)
 8012e4e:	7f7b      	ldrb	r3, [r7, #29]
 8012e50:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 8012e52:	2300      	movs	r3, #0
 8012e54:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 8012e56:	7fbb      	ldrb	r3, [r7, #30]
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d13e      	bne.n	8012eda <_getDebugString+0x3d6>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012e5c:	e012      	b.n	8012e84 <_getDebugString+0x380>
 8012e5e:	bf00      	nop
 8012e60:	0802729c 	.word	0x0802729c
 8012e64:	080272a0 	.word	0x080272a0
 8012e68:	20001be4 	.word	0x20001be4
 8012e6c:	080272a8 	.word	0x080272a8
 8012e70:	20001c48 	.word	0x20001c48
            	p_owner->char_idx--;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d009      	beq.n	8012ea2 <_getDebugString+0x39e>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e98:	3b01      	subs	r3, #1
 8012e9a:	4413      	add	r3, r2
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	2b20      	cmp	r3, #32
 8012ea0:	d0e8      	beq.n	8012e74 <_getDebugString+0x370>
            }
            if (p_owner->char_idx) {
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d014      	beq.n	8012ed6 <_getDebugString+0x3d2>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012eb6:	4413      	add	r3, r2
 8012eb8:	2200      	movs	r2, #0
 8012eba:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec0:	210a      	movs	r1, #10
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 fe32 	bl	8013b2c <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6a1b      	ldr	r3, [r3, #32]
 8012ecc:	69db      	ldr	r3, [r3, #28]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f001 fbb2 	bl	8014638 <pifTask_SetTrigger>
	        	break;
 8012ed4:	e00c      	b.n	8012ef0 <_getDebugString+0x3ec>
            }
            else {
            	str_get_done_flag = FALSE;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6a1a      	ldr	r2, [r3, #32]
 8012ede:	f107 010f 	add.w	r1, r7, #15
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	4798      	blx	r3
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	f47f ae12 	bne.w	8012b14 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3720      	adds	r7, #32
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop

08012efc <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b086      	sub	sp, #24
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012f04:	2301      	movs	r3, #1
 8012f06:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f10:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 8012f12:	e022      	b.n	8012f5a <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	2b20      	cmp	r3, #32
 8012f1a:	d105      	bne.n	8012f28 <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012f22:	2301      	movs	r3, #1
 8012f24:	74fb      	strb	r3, [r7, #19]
 8012f26:	e015      	b.n	8012f54 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012f28:	7cfb      	ldrb	r3, [r7, #19]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d012      	beq.n	8012f54 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2b07      	cmp	r3, #7
 8012f32:	d80c      	bhi.n	8012f4e <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	330c      	adds	r3, #12
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	4413      	add	r3, r2
 8012f3e:	697a      	ldr	r2, [r7, #20]
 8012f40:	605a      	str	r2, [r3, #4]
                	argc++;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	3301      	adds	r3, #1
 8012f46:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	74fb      	strb	r3, [r7, #19]
 8012f4c:	e002      	b.n	8012f54 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8012f4e:	f06f 0301 	mvn.w	r3, #1
 8012f52:	e02e      	b.n	8012fb2 <_processDebugCmd+0xb6>
                }
            }
        }

        p_tmp_cmd++;
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	3301      	adds	r3, #1
 8012f58:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1d8      	bne.n	8012f14 <_processDebugCmd+0x18>
    }

    if (argc) {
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d023      	beq.n	8012fb0 <_processDebugCmd+0xb4>
		p_cmd_entry = p_owner->p_cmd_table;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f6c:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012f6e:	e018      	b.n	8012fa2 <_processDebugCmd+0xa6>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	4610      	mov	r0, r2
 8012f7c:	f00f fdc0 	bl	8022b00 <strcasecmp>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d10a      	bne.n	8012f9c <_processDebugCmd+0xa0>
				return p_cmd_entry->processor(argc - 1, &p_owner->p_argv[1]);
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	3a01      	subs	r2, #1
 8012f8e:	4610      	mov	r0, r2
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	3238      	adds	r2, #56	; 0x38
 8012f94:	4611      	mov	r1, r2
 8012f96:	4798      	blx	r3
 8012f98:	4603      	mov	r3, r0
 8012f9a:	e00a      	b.n	8012fb2 <_processDebugCmd+0xb6>
            }

			p_cmd_entry++;
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	3310      	adds	r3, #16
 8012fa0:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1e2      	bne.n	8012f70 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8012faa:	f04f 33ff 	mov.w	r3, #4294967295
 8012fae:	e000      	b.n	8012fb2 <_processDebugCmd+0xb6>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3718      	adds	r7, #24
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b084      	sub	sp, #16
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d10f      	bne.n	8012ff2 <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff fd95 	bl	8012b04 <_getDebugString>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d008      	beq.n	8012ff2 <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fec:	4618      	mov	r0, r3
 8012fee:	f001 fb23 	bl	8014638 <pifTask_SetTrigger>
        }
    }
}
 8012ff2:	bf00      	nop
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
	...

08012ffc <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08e      	sub	sp, #56	; 0x38
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 8013004:	2300      	movs	r3, #0
 8013006:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 8013008:	4850      	ldr	r0, [pc, #320]	; (801314c <_doTask+0x150>)
 801300a:	f7ff ff77 	bl	8012efc <_processDebugCmd>
 801300e:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 8013010:	e00f      	b.n	8013032 <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 8013012:	4b4e      	ldr	r3, [pc, #312]	; (801314c <_doTask+0x150>)
 8013014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013016:	4a4d      	ldr	r2, [pc, #308]	; (801314c <_doTask+0x150>)
 8013018:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801301c:	4413      	add	r3, r2
 801301e:	2200      	movs	r2, #0
 8013020:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 8013022:	4b4a      	ldr	r3, [pc, #296]	; (801314c <_doTask+0x150>)
 8013024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013028:	3b01      	subs	r3, #1
 801302a:	b2da      	uxtb	r2, r3
 801302c:	4b47      	ldr	r3, [pc, #284]	; (801314c <_doTask+0x150>)
 801302e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 8013032:	4b46      	ldr	r3, [pc, #280]	; (801314c <_doTask+0x150>)
 8013034:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1ea      	bne.n	8013012 <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 801303c:	2300      	movs	r3, #0
 801303e:	637b      	str	r3, [r7, #52]	; 0x34
 8013040:	e009      	b.n	8013056 <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 8013042:	4a42      	ldr	r2, [pc, #264]	; (801314c <_doTask+0x150>)
 8013044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013046:	330c      	adds	r3, #12
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4413      	add	r3, r2
 801304c:	2200      	movs	r2, #0
 801304e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013052:	3301      	adds	r3, #1
 8013054:	637b      	str	r3, [r7, #52]	; 0x34
 8013056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013058:	2b07      	cmp	r3, #7
 801305a:	ddf2      	ble.n	8013042 <_doTask+0x46>
	}

	switch (status) {
 801305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305e:	3304      	adds	r3, #4
 8013060:	2b03      	cmp	r3, #3
 8013062:	d83f      	bhi.n	80130e4 <_doTask+0xe8>
 8013064:	a201      	add	r2, pc, #4	; (adr r2, 801306c <_doTask+0x70>)
 8013066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801306a:	bf00      	nop
 801306c:	080130cb 	.word	0x080130cb
 8013070:	080130b1 	.word	0x080130b1
 8013074:	08013097 	.word	0x08013097
 8013078:	0801307d 	.word	0x0801307d
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 801307c:	4b33      	ldr	r3, [pc, #204]	; (801314c <_doTask+0x150>)
 801307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013080:	4933      	ldr	r1, [pc, #204]	; (8013150 <_doTask+0x154>)
 8013082:	4618      	mov	r0, r3
 8013084:	f000 fdd0 	bl	8013c28 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013088:	4b30      	ldr	r3, [pc, #192]	; (801314c <_doTask+0x150>)
 801308a:	6a1b      	ldr	r3, [r3, #32]
 801308c:	69db      	ldr	r3, [r3, #28]
 801308e:	4618      	mov	r0, r3
 8013090:	f001 fad2 	bl	8014638 <pifTask_SetTrigger>
		break;
 8013094:	e043      	b.n	801311e <_doTask+0x122>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments!\n");
 8013096:	4b2d      	ldr	r3, [pc, #180]	; (801314c <_doTask+0x150>)
 8013098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801309a:	492e      	ldr	r1, [pc, #184]	; (8013154 <_doTask+0x158>)
 801309c:	4618      	mov	r0, r3
 801309e:	f000 fdc3 	bl	8013c28 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130a2:	4b2a      	ldr	r3, [pc, #168]	; (801314c <_doTask+0x150>)
 80130a4:	6a1b      	ldr	r3, [r3, #32]
 80130a6:	69db      	ldr	r3, [r3, #28]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f001 fac5 	bl	8014638 <pifTask_SetTrigger>
		break;
 80130ae:	e036      	b.n	801311e <_doTask+0x122>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments!\n");
 80130b0:	4b26      	ldr	r3, [pc, #152]	; (801314c <_doTask+0x150>)
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	4928      	ldr	r1, [pc, #160]	; (8013158 <_doTask+0x15c>)
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fdb6 	bl	8013c28 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130bc:	4b23      	ldr	r3, [pc, #140]	; (801314c <_doTask+0x150>)
 80130be:	6a1b      	ldr	r3, [r3, #32]
 80130c0:	69db      	ldr	r3, [r3, #28]
 80130c2:	4618      	mov	r0, r3
 80130c4:	f001 fab8 	bl	8014638 <pifTask_SetTrigger>
		break;
 80130c8:	e029      	b.n	801311e <_doTask+0x122>

	case PIF_LOG_CMD_INVALID_ARG:
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Invalid arguments!\n");
 80130ca:	4b20      	ldr	r3, [pc, #128]	; (801314c <_doTask+0x150>)
 80130cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ce:	4923      	ldr	r1, [pc, #140]	; (801315c <_doTask+0x160>)
 80130d0:	4618      	mov	r0, r3
 80130d2:	f000 fda9 	bl	8013c28 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130d6:	4b1d      	ldr	r3, [pc, #116]	; (801314c <_doTask+0x150>)
 80130d8:	6a1b      	ldr	r3, [r3, #32]
 80130da:	69db      	ldr	r3, [r3, #28]
 80130dc:	4618      	mov	r0, r3
 80130de:	f001 faab 	bl	8014638 <pifTask_SetTrigger>
		break;
 80130e2:	e01c      	b.n	801311e <_doTask+0x122>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status < PIF_LOG_CMD_NO_ERROR && status > PIF_LOG_CMD_USER_ERROR) {
 80130e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	da18      	bge.n	801311c <_doTask+0x120>
 80130ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ec:	f113 0f09 	cmn.w	r3, #9
 80130f0:	db14      	blt.n	801311c <_doTask+0x120>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 80130f2:	f107 0308 	add.w	r3, r7, #8
 80130f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130f8:	4919      	ldr	r1, [pc, #100]	; (8013160 <_doTask+0x164>)
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fe fcf6 	bl	8011aec <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 8013100:	4b12      	ldr	r3, [pc, #72]	; (801314c <_doTask+0x150>)
 8013102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013104:	f107 0208 	add.w	r2, r7, #8
 8013108:	4611      	mov	r1, r2
 801310a:	4618      	mov	r0, r3
 801310c:	f000 fd8c 	bl	8013c28 <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013110:	4b0e      	ldr	r3, [pc, #56]	; (801314c <_doTask+0x150>)
 8013112:	6a1b      	ldr	r3, [r3, #32]
 8013114:	69db      	ldr	r3, [r3, #28]
 8013116:	4618      	mov	r0, r3
 8013118:	f001 fa8e 	bl	8014638 <pifTask_SetTrigger>
		}
		break;
 801311c:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 801311e:	4b0b      	ldr	r3, [pc, #44]	; (801314c <_doTask+0x150>)
 8013120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013122:	4a0a      	ldr	r2, [pc, #40]	; (801314c <_doTask+0x150>)
 8013124:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013126:	4611      	mov	r1, r2
 8013128:	4618      	mov	r0, r3
 801312a:	f000 fd7d 	bl	8013c28 <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 801312e:	4b07      	ldr	r3, [pc, #28]	; (801314c <_doTask+0x150>)
 8013130:	6a1b      	ldr	r3, [r3, #32]
 8013132:	69db      	ldr	r3, [r3, #28]
 8013134:	4618      	mov	r0, r3
 8013136:	f001 fa7f 	bl	8014638 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 801313a:	4b04      	ldr	r3, [pc, #16]	; (801314c <_doTask+0x150>)
 801313c:	2200      	movs	r2, #0
 801313e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3738      	adds	r7, #56	; 0x38
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	20001be4 	.word	0x20001be4
 8013150:	080272b4 	.word	0x080272b4
 8013154:	080272cc 	.word	0x080272cc
 8013158:	080272e4 	.word	0x080272e4
 801315c:	080272f8 	.word	0x080272f8
 8013160:	0802730c 	.word	0x0802730c

08013164 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8013164:	b5b0      	push	{r4, r5, r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013176:	4618      	mov	r0, r3
 8013178:	f000 fc03 	bl	8013982 <pifRingBuffer_IsEmpty>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d11f      	bne.n	80131c2 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6a1c      	ldr	r4, [r3, #32]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801318a:	2100      	movs	r1, #0
 801318c:	4618      	mov	r0, r3
 801318e:	f000 fbcc 	bl	801392a <pifRingBuffer_GetTailPointer>
 8013192:	4605      	mov	r5, r0
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013198:	2100      	movs	r1, #0
 801319a:	4618      	mov	r0, r3
 801319c:	f000 fc26 	bl	80139ec <pifRingBuffer_GetLinerSize>
 80131a0:	4603      	mov	r3, r0
 80131a2:	461a      	mov	r2, r3
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	4629      	mov	r1, r5
 80131a8:	4620      	mov	r0, r4
 80131aa:	4798      	blx	r3
 80131ac:	4603      	mov	r3, r0
 80131ae:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b4:	897a      	ldrh	r2, [r7, #10]
 80131b6:	4611      	mov	r1, r2
 80131b8:	4618      	mov	r0, r3
 80131ba:	f000 fdf4 	bl	8013da6 <pifRingBuffer_Remove>
		return TRUE;
 80131be:	2301      	movs	r3, #1
 80131c0:	e000      	b.n	80131c4 <_evtSending+0x60>
	}
	return FALSE;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bdb0      	pop	{r4, r5, r7, pc}

080131cc <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	460b      	mov	r3, r1
 80131d6:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 80131d8:	78fb      	ldrb	r3, [r7, #3]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d109      	bne.n	80131f2 <_printLog+0x26>
 80131de:	4813      	ldr	r0, [pc, #76]	; (801322c <_printLog+0x60>)
 80131e0:	f000 fbbe 	bl	8013960 <pifRingBuffer_IsBuffer>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d003      	beq.n	80131f2 <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 80131ea:	6879      	ldr	r1, [r7, #4]
 80131ec:	480f      	ldr	r0, [pc, #60]	; (801322c <_printLog+0x60>)
 80131ee:	f000 fd1b 	bl	8013c28 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 80131f2:	4b0f      	ldr	r3, [pc, #60]	; (8013230 <_printLog+0x64>)
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d108      	bne.n	801320c <_printLog+0x40>
 80131fa:	78fb      	ldrb	r3, [r7, #3]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d010      	beq.n	8013222 <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013200:	e004      	b.n	801320c <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 8013202:	f001 fc61 	bl	8014ac8 <pifTaskManager_Yield>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d009      	beq.n	8013220 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 801320c:	4b08      	ldr	r3, [pc, #32]	; (8013230 <_printLog+0x64>)
 801320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013210:	6879      	ldr	r1, [r7, #4]
 8013212:	4618      	mov	r0, r3
 8013214:	f000 fd08 	bl	8013c28 <pifRingBuffer_PutString>
 8013218:	4603      	mov	r3, r0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d0f1      	beq.n	8013202 <_printLog+0x36>
        }
	}
}
 801321e:	e000      	b.n	8013222 <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 8013220:	bf00      	nop
}
 8013222:	bf00      	nop
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	20001be8 	.word	0x20001be8
 8013230:	20001be4 	.word	0x20001be4

08013234 <_printTime>:

static void _printTime()
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
	int offset = 0;
 801323a:	2300      	movs	r3, #0
 801323c:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	1c5a      	adds	r2, r3, #1
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	4a35      	ldr	r2, [pc, #212]	; (801331c <_printTime+0xe8>)
 8013246:	210a      	movs	r1, #10
 8013248:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	4a33      	ldr	r2, [pc, #204]	; (801331c <_printTime+0xe8>)
 801324e:	4413      	add	r3, r2
 8013250:	4a33      	ldr	r2, [pc, #204]	; (8013320 <_printTime+0xec>)
 8013252:	7952      	ldrb	r2, [r2, #5]
 8013254:	b2d2      	uxtb	r2, r2
 8013256:	4611      	mov	r1, r2
 8013258:	2202      	movs	r2, #2
 801325a:	4618      	mov	r0, r3
 801325c:	f7fe f860 	bl	8011320 <pif_DecToString>
 8013260:	4602      	mov	r2, r0
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	4413      	add	r3, r2
 8013266:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	1c5a      	adds	r2, r3, #1
 801326c:	607a      	str	r2, [r7, #4]
 801326e:	4a2b      	ldr	r2, [pc, #172]	; (801331c <_printTime+0xe8>)
 8013270:	212e      	movs	r1, #46	; 0x2e
 8013272:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	4a29      	ldr	r2, [pc, #164]	; (801331c <_printTime+0xe8>)
 8013278:	4413      	add	r3, r2
 801327a:	4a2a      	ldr	r2, [pc, #168]	; (8013324 <_printTime+0xf0>)
 801327c:	8812      	ldrh	r2, [r2, #0]
 801327e:	b292      	uxth	r2, r2
 8013280:	4611      	mov	r1, r2
 8013282:	2203      	movs	r2, #3
 8013284:	4618      	mov	r0, r3
 8013286:	f7fe f84b 	bl	8011320 <pif_DecToString>
 801328a:	4602      	mov	r2, r0
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4413      	add	r3, r2
 8013290:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	1c5a      	adds	r2, r3, #1
 8013296:	607a      	str	r2, [r7, #4]
 8013298:	4a20      	ldr	r2, [pc, #128]	; (801331c <_printTime+0xe8>)
 801329a:	2120      	movs	r1, #32
 801329c:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	1c5a      	adds	r2, r3, #1
 80132a2:	607a      	str	r2, [r7, #4]
 80132a4:	4a1d      	ldr	r2, [pc, #116]	; (801331c <_printTime+0xe8>)
 80132a6:	2154      	movs	r1, #84	; 0x54
 80132a8:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	1c5a      	adds	r2, r3, #1
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	4a1a      	ldr	r2, [pc, #104]	; (801331c <_printTime+0xe8>)
 80132b2:	2120      	movs	r1, #32
 80132b4:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	4a18      	ldr	r2, [pc, #96]	; (801331c <_printTime+0xe8>)
 80132ba:	4413      	add	r3, r2
 80132bc:	4a18      	ldr	r2, [pc, #96]	; (8013320 <_printTime+0xec>)
 80132be:	78d2      	ldrb	r2, [r2, #3]
 80132c0:	b2d2      	uxtb	r2, r2
 80132c2:	4611      	mov	r1, r2
 80132c4:	2202      	movs	r2, #2
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fe f82a 	bl	8011320 <pif_DecToString>
 80132cc:	4602      	mov	r2, r0
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4413      	add	r3, r2
 80132d2:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	1c5a      	adds	r2, r3, #1
 80132d8:	607a      	str	r2, [r7, #4]
 80132da:	4a10      	ldr	r2, [pc, #64]	; (801331c <_printTime+0xe8>)
 80132dc:	213a      	movs	r1, #58	; 0x3a
 80132de:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4a0e      	ldr	r2, [pc, #56]	; (801331c <_printTime+0xe8>)
 80132e4:	4413      	add	r3, r2
 80132e6:	4a0e      	ldr	r2, [pc, #56]	; (8013320 <_printTime+0xec>)
 80132e8:	7912      	ldrb	r2, [r2, #4]
 80132ea:	b2d2      	uxtb	r2, r2
 80132ec:	4611      	mov	r1, r2
 80132ee:	2202      	movs	r2, #2
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fe f815 	bl	8011320 <pif_DecToString>
 80132f6:	4602      	mov	r2, r0
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	4413      	add	r3, r2
 80132fc:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	1c5a      	adds	r2, r3, #1
 8013302:	607a      	str	r2, [r7, #4]
 8013304:	4a05      	ldr	r2, [pc, #20]	; (801331c <_printTime+0xe8>)
 8013306:	2120      	movs	r1, #32
 8013308:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 801330a:	2100      	movs	r1, #0
 801330c:	4803      	ldr	r0, [pc, #12]	; (801331c <_printTime+0xe8>)
 801330e:	f7ff ff5d 	bl	80131cc <_printLog>
}
 8013312:	bf00      	nop
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	20001c4c 	.word	0x20001c4c
 8013320:	20001bc4 	.word	0x20001bc4
 8013324:	20001bbc 	.word	0x20001bbc

08013328 <pifLog_Init>:

BOOL pifLog_Init()
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 801332e:	2264      	movs	r2, #100	; 0x64
 8013330:	2100      	movs	r1, #0
 8013332:	480f      	ldr	r0, [pc, #60]	; (8013370 <pifLog_Init+0x48>)
 8013334:	f00f fad6 	bl	80228e4 <memset>

	s_log.enable = TRUE;
 8013338:	4b0d      	ldr	r3, [pc, #52]	; (8013370 <pifLog_Init+0x48>)
 801333a:	2201      	movs	r2, #1
 801333c:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 801333e:	2300      	movs	r3, #0
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	4b0b      	ldr	r3, [pc, #44]	; (8013370 <pifLog_Init+0x48>)
 8013344:	4a0b      	ldr	r2, [pc, #44]	; (8013374 <pifLog_Init+0x4c>)
 8013346:	2100      	movs	r1, #0
 8013348:	2007      	movs	r0, #7
 801334a:	f001 f9fb 	bl	8014744 <pifTaskManager_Add>
 801334e:	4603      	mov	r3, r0
 8013350:	4a07      	ldr	r2, [pc, #28]	; (8013370 <pifLog_Init+0x48>)
 8013352:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 8013354:	4b06      	ldr	r3, [pc, #24]	; (8013370 <pifLog_Init+0x48>)
 8013356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <pifLog_Init+0x38>
 801335c:	2300      	movs	r3, #0
 801335e:	e004      	b.n	801336a <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 8013360:	4b03      	ldr	r3, [pc, #12]	; (8013370 <pifLog_Init+0x48>)
 8013362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013364:	4a04      	ldr	r2, [pc, #16]	; (8013378 <pifLog_Init+0x50>)
 8013366:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 8013368:	2301      	movs	r3, #1
}
 801336a:	4618      	mov	r0, r3
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	20001be4 	.word	0x20001be4
 8013374:	08012ffd 	.word	0x08012ffd
 8013378:	08027330 	.word	0x08027330

0801337c <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d002      	beq.n	8013392 <pifLog_UseCommand+0x16>
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d104      	bne.n	801339c <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 8013392:	4b12      	ldr	r3, [pc, #72]	; (80133dc <pifLog_UseCommand+0x60>)
 8013394:	2201      	movs	r2, #1
 8013396:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013398:	2300      	movs	r3, #0
 801339a:	e01b      	b.n	80133d4 <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 801339c:	2120      	movs	r1, #32
 801339e:	2001      	movs	r0, #1
 80133a0:	f00f fa50 	bl	8022844 <calloc>
 80133a4:	4603      	mov	r3, r0
 80133a6:	461a      	mov	r2, r3
 80133a8:	4b0d      	ldr	r3, [pc, #52]	; (80133e0 <pifLog_UseCommand+0x64>)
 80133aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 80133ac:	4b0c      	ldr	r3, [pc, #48]	; (80133e0 <pifLog_UseCommand+0x64>)
 80133ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d104      	bne.n	80133be <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 80133b4:	4b09      	ldr	r3, [pc, #36]	; (80133dc <pifLog_UseCommand+0x60>)
 80133b6:	2203      	movs	r2, #3
 80133b8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80133ba:	2300      	movs	r3, #0
 80133bc:	e00a      	b.n	80133d4 <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 80133be:	4b08      	ldr	r3, [pc, #32]	; (80133e0 <pifLog_UseCommand+0x64>)
 80133c0:	2220      	movs	r2, #32
 80133c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 80133c6:	4a06      	ldr	r2, [pc, #24]	; (80133e0 <pifLog_UseCommand+0x64>)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 80133cc:	4a04      	ldr	r2, [pc, #16]	; (80133e0 <pifLog_UseCommand+0x64>)
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 80133d2:	2301      	movs	r3, #1
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3708      	adds	r7, #8
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	20001bb5 	.word	0x20001bb5
 80133e0:	20001be4 	.word	0x20001be4

080133e4 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b098      	sub	sp, #96	; 0x60
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	4603      	mov	r3, r0
 80133ec:	6039      	str	r1, [r7, #0]
 80133ee:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 80133f0:	2300      	movs	r3, #0
 80133f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 80133f4:	79fb      	ldrb	r3, [r7, #7]
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d96b      	bls.n	80134d2 <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 80133fa:	4b3d      	ldr	r3, [pc, #244]	; (80134f0 <pifLog_Print+0x10c>)
 80133fc:	791b      	ldrb	r3, [r3, #4]
 80133fe:	b2da      	uxtb	r2, r3
 8013400:	4b3c      	ldr	r3, [pc, #240]	; (80134f4 <pifLog_Print+0x110>)
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	429a      	cmp	r2, r3
 8013406:	d006      	beq.n	8013416 <pifLog_Print+0x32>
        	_printTime();
 8013408:	f7ff ff14 	bl	8013234 <_printTime>
        	s_minute = pif_datetime.minute;
 801340c:	4b38      	ldr	r3, [pc, #224]	; (80134f0 <pifLog_Print+0x10c>)
 801340e:	791b      	ldrb	r3, [r3, #4]
 8013410:	b2da      	uxtb	r2, r3
 8013412:	4b38      	ldr	r3, [pc, #224]	; (80134f4 <pifLog_Print+0x110>)
 8013414:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013418:	1c5a      	adds	r2, r3, #1
 801341a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801341c:	3360      	adds	r3, #96	; 0x60
 801341e:	443b      	add	r3, r7
 8013420:	220a      	movs	r2, #10
 8013422:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013428:	f107 020c 	add.w	r2, r7, #12
 801342c:	4413      	add	r3, r2
 801342e:	4a30      	ldr	r2, [pc, #192]	; (80134f0 <pifLog_Print+0x10c>)
 8013430:	7952      	ldrb	r2, [r2, #5]
 8013432:	b2d2      	uxtb	r2, r2
 8013434:	4611      	mov	r1, r2
 8013436:	2202      	movs	r2, #2
 8013438:	4618      	mov	r0, r3
 801343a:	f7fd ff71 	bl	8011320 <pif_DecToString>
 801343e:	4602      	mov	r2, r0
 8013440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013442:	4413      	add	r3, r2
 8013444:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 8013446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013448:	1c5a      	adds	r2, r3, #1
 801344a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801344c:	3360      	adds	r3, #96	; 0x60
 801344e:	443b      	add	r3, r7
 8013450:	222e      	movs	r2, #46	; 0x2e
 8013452:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013458:	f107 020c 	add.w	r2, r7, #12
 801345c:	4413      	add	r3, r2
 801345e:	4a26      	ldr	r2, [pc, #152]	; (80134f8 <pifLog_Print+0x114>)
 8013460:	8812      	ldrh	r2, [r2, #0]
 8013462:	b292      	uxth	r2, r2
 8013464:	4611      	mov	r1, r2
 8013466:	2203      	movs	r2, #3
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd ff59 	bl	8011320 <pif_DecToString>
 801346e:	4602      	mov	r2, r0
 8013470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013472:	4413      	add	r3, r2
 8013474:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 8013476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013478:	1c5a      	adds	r2, r3, #1
 801347a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801347c:	3360      	adds	r3, #96	; 0x60
 801347e:	443b      	add	r3, r7
 8013480:	2220      	movs	r2, #32
 8013482:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013486:	79fb      	ldrb	r3, [r7, #7]
 8013488:	1e9a      	subs	r2, r3, #2
 801348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801348c:	1c59      	adds	r1, r3, #1
 801348e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013490:	491a      	ldr	r1, [pc, #104]	; (80134fc <pifLog_Print+0x118>)
 8013492:	5c8a      	ldrb	r2, [r1, r2]
 8013494:	3360      	adds	r3, #96	; 0x60
 8013496:	443b      	add	r3, r7
 8013498:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 801349c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134a2:	3360      	adds	r3, #96	; 0x60
 80134a4:	443b      	add	r3, r7
 80134a6:	2220      	movs	r2, #32
 80134a8:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 80134ac:	f107 020c 	add.w	r2, r7, #12
 80134b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134b2:	4413      	add	r3, r2
 80134b4:	2200      	movs	r2, #0
 80134b6:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 80134b8:	79fb      	ldrb	r3, [r7, #7]
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	bf0c      	ite	eq
 80134be:	2301      	moveq	r3, #1
 80134c0:	2300      	movne	r3, #0
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	461a      	mov	r2, r3
 80134c6:	f107 030c 	add.w	r3, r7, #12
 80134ca:	4611      	mov	r1, r2
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7ff fe7d 	bl	80131cc <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 80134d2:	79fb      	ldrb	r3, [r7, #7]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	bf0c      	ite	eq
 80134d8:	2301      	moveq	r3, #1
 80134da:	2300      	movne	r3, #0
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	4619      	mov	r1, r3
 80134e0:	6838      	ldr	r0, [r7, #0]
 80134e2:	f7ff fe73 	bl	80131cc <_printLog>
}
 80134e6:	bf00      	nop
 80134e8:	3760      	adds	r7, #96	; 0x60
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	20001bc4 	.word	0x20001bc4
 80134f4:	20000134 	.word	0x20000134
 80134f8:	20001bbc 	.word	0x20001bbc
 80134fc:	08028ee0 	.word	0x08028ee0

08013500 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 8013500:	b40e      	push	{r1, r2, r3}
 8013502:	b580      	push	{r7, lr}
 8013504:	b09b      	sub	sp, #108	; 0x6c
 8013506:	af00      	add	r7, sp, #0
 8013508:	4603      	mov	r3, r0
 801350a:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	2b01      	cmp	r3, #1
 8013514:	d958      	bls.n	80135c8 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 8013516:	4b3d      	ldr	r3, [pc, #244]	; (801360c <pifLog_Printf+0x10c>)
 8013518:	791b      	ldrb	r3, [r3, #4]
 801351a:	b2da      	uxtb	r2, r3
 801351c:	4b3c      	ldr	r3, [pc, #240]	; (8013610 <pifLog_Printf+0x110>)
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	429a      	cmp	r2, r3
 8013522:	d006      	beq.n	8013532 <pifLog_Printf+0x32>
        	_printTime();
 8013524:	f7ff fe86 	bl	8013234 <_printTime>
        	s_minute = pif_datetime.minute;
 8013528:	4b38      	ldr	r3, [pc, #224]	; (801360c <pifLog_Printf+0x10c>)
 801352a:	791b      	ldrb	r3, [r3, #4]
 801352c:	b2da      	uxtb	r2, r3
 801352e:	4b38      	ldr	r3, [pc, #224]	; (8013610 <pifLog_Printf+0x110>)
 8013530:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013534:	1c5a      	adds	r2, r3, #1
 8013536:	667a      	str	r2, [r7, #100]	; 0x64
 8013538:	3368      	adds	r3, #104	; 0x68
 801353a:	443b      	add	r3, r7
 801353c:	220a      	movs	r2, #10
 801353e:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013544:	f107 020c 	add.w	r2, r7, #12
 8013548:	4413      	add	r3, r2
 801354a:	4a30      	ldr	r2, [pc, #192]	; (801360c <pifLog_Printf+0x10c>)
 801354c:	7952      	ldrb	r2, [r2, #5]
 801354e:	b2d2      	uxtb	r2, r2
 8013550:	4611      	mov	r1, r2
 8013552:	2202      	movs	r2, #2
 8013554:	4618      	mov	r0, r3
 8013556:	f7fd fee3 	bl	8011320 <pif_DecToString>
 801355a:	4602      	mov	r2, r0
 801355c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801355e:	4413      	add	r3, r2
 8013560:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 8013562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013564:	1c5a      	adds	r2, r3, #1
 8013566:	667a      	str	r2, [r7, #100]	; 0x64
 8013568:	3368      	adds	r3, #104	; 0x68
 801356a:	443b      	add	r3, r7
 801356c:	222e      	movs	r2, #46	; 0x2e
 801356e:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013574:	f107 020c 	add.w	r2, r7, #12
 8013578:	4413      	add	r3, r2
 801357a:	4a26      	ldr	r2, [pc, #152]	; (8013614 <pifLog_Printf+0x114>)
 801357c:	8812      	ldrh	r2, [r2, #0]
 801357e:	b292      	uxth	r2, r2
 8013580:	4611      	mov	r1, r2
 8013582:	2203      	movs	r2, #3
 8013584:	4618      	mov	r0, r3
 8013586:	f7fd fecb 	bl	8011320 <pif_DecToString>
 801358a:	4602      	mov	r2, r0
 801358c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801358e:	4413      	add	r3, r2
 8013590:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013594:	1c5a      	adds	r2, r3, #1
 8013596:	667a      	str	r2, [r7, #100]	; 0x64
 8013598:	3368      	adds	r3, #104	; 0x68
 801359a:	443b      	add	r3, r7
 801359c:	2220      	movs	r2, #32
 801359e:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 80135a2:	79fb      	ldrb	r3, [r7, #7]
 80135a4:	1e9a      	subs	r2, r3, #2
 80135a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135a8:	1c59      	adds	r1, r3, #1
 80135aa:	6679      	str	r1, [r7, #100]	; 0x64
 80135ac:	491a      	ldr	r1, [pc, #104]	; (8013618 <pifLog_Printf+0x118>)
 80135ae:	5c8a      	ldrb	r2, [r1, r2]
 80135b0:	3368      	adds	r3, #104	; 0x68
 80135b2:	443b      	add	r3, r7
 80135b4:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 80135b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135ba:	1c5a      	adds	r2, r3, #1
 80135bc:	667a      	str	r2, [r7, #100]	; 0x64
 80135be:	3368      	adds	r3, #104	; 0x68
 80135c0:	443b      	add	r3, r7
 80135c2:	2220      	movs	r2, #32
 80135c4:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 80135c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80135cc:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 80135ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d0:	f107 020c 	add.w	r2, r7, #12
 80135d4:	4413      	add	r3, r2
 80135d6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80135da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe f82b 	bl	8011638 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 80135e2:	79fb      	ldrb	r3, [r7, #7]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	bf0c      	ite	eq
 80135e8:	2301      	moveq	r3, #1
 80135ea:	2300      	movne	r3, #0
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	461a      	mov	r2, r3
 80135f0:	f107 030c 	add.w	r3, r7, #12
 80135f4:	4611      	mov	r1, r2
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff fde8 	bl	80131cc <_printLog>
}
 80135fc:	bf00      	nop
 80135fe:	376c      	adds	r7, #108	; 0x6c
 8013600:	46bd      	mov	sp, r7
 8013602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013606:	b003      	add	sp, #12
 8013608:	4770      	bx	lr
 801360a:	bf00      	nop
 801360c:	20001bc4 	.word	0x20001bc4
 8013610:	20000134 	.word	0x20000134
 8013614:	20001bbc 	.word	0x20001bbc
 8013618:	08028ee0 	.word	0x08028ee0

0801361c <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 8013624:	2150      	movs	r1, #80	; 0x50
 8013626:	2000      	movs	r0, #0
 8013628:	f000 f8c8 	bl	80137bc <pifRingBuffer_CreateHeap>
 801362c:	4603      	mov	r3, r0
 801362e:	4a0b      	ldr	r2, [pc, #44]	; (801365c <pifLog_AttachComm+0x40>)
 8013630:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 8013632:	4b0a      	ldr	r3, [pc, #40]	; (801365c <pifLog_AttachComm+0x40>)
 8013634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013636:	2b00      	cmp	r3, #0
 8013638:	d101      	bne.n	801363e <pifLog_AttachComm+0x22>
 801363a:	2300      	movs	r3, #0
 801363c:	e009      	b.n	8013652 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 801363e:	4a07      	ldr	r2, [pc, #28]	; (801365c <pifLog_AttachComm+0x40>)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 8013644:	4b06      	ldr	r3, [pc, #24]	; (8013660 <pifLog_AttachComm+0x44>)
 8013646:	4a07      	ldr	r2, [pc, #28]	; (8013664 <pifLog_AttachComm+0x48>)
 8013648:	4904      	ldr	r1, [pc, #16]	; (801365c <pifLog_AttachComm+0x40>)
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7fe fc10 	bl	8011e70 <pifComm_AttachClient>
    return TRUE;
 8013650:	2301      	movs	r3, #1
}
 8013652:	4618      	mov	r0, r3
 8013654:	3708      	adds	r7, #8
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20001be4 	.word	0x20001be4
 8013660:	08013165 	.word	0x08013165
 8013664:	08012fbb 	.word	0x08012fbb

08013668 <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 8013668:	b580      	push	{r7, lr}
 801366a:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 801366c:	4b06      	ldr	r3, [pc, #24]	; (8013688 <pifLog_DetachComm+0x20>)
 801366e:	6a1b      	ldr	r3, [r3, #32]
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe fc13 	bl	8011e9c <pifComm_DetachClient>
	s_log.p_comm = NULL;
 8013676:	4b04      	ldr	r3, [pc, #16]	; (8013688 <pifLog_DetachComm+0x20>)
 8013678:	2200      	movs	r2, #0
 801367a:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 801367c:	4803      	ldr	r0, [pc, #12]	; (801368c <pifLog_DetachComm+0x24>)
 801367e:	f000 f8c9 	bl	8013814 <pifRingBuffer_Destroy>
}
 8013682:	bf00      	nop
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	20001be4 	.word	0x20001be4
 801368c:	20001c08 	.word	0x20001c08

08013690 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013690:	b580      	push	{r7, lr}
 8013692:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013694:	e008      	b.n	80136a8 <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 8013696:	4b0a      	ldr	r3, [pc, #40]	; (80136c0 <pifLog_SendAndExit+0x30>)
 8013698:	6a1b      	ldr	r3, [r3, #32]
 801369a:	69db      	ldr	r3, [r3, #28]
 801369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801369e:	4a08      	ldr	r2, [pc, #32]	; (80136c0 <pifLog_SendAndExit+0x30>)
 80136a0:	6a12      	ldr	r2, [r2, #32]
 80136a2:	69d2      	ldr	r2, [r2, #28]
 80136a4:	4610      	mov	r0, r2
 80136a6:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 80136a8:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <pifLog_SendAndExit+0x30>)
 80136aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 f97b 	bl	80139a8 <pifRingBuffer_GetFillSize>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d1ee      	bne.n	8013696 <pifLog_SendAndExit+0x6>
	}
}
 80136b8:	bf00      	nop
 80136ba:	bf00      	nop
 80136bc:	bd80      	pop	{r7, pc}
 80136be:	bf00      	nop
 80136c0:	20001be4 	.word	0x20001be4

080136c4 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	791b      	ldrb	r3, [r3, #4]
 80136d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	2b01      	cmp	r3, #1
 80136dc:	d002      	beq.n	80136e4 <_chopOff+0x20>
 80136de:	2b02      	cmp	r3, #2
 80136e0:	d02e      	beq.n	8013740 <_chopOff+0x7c>
 80136e2:	e065      	b.n	80137b0 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 80136e4:	2300      	movs	r3, #0
 80136e6:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	8adb      	ldrh	r3, [r3, #22]
 80136ec:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 80136ee:	e021      	b.n	8013734 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	691a      	ldr	r2, [r3, #16]
 80136f4:	89bb      	ldrh	r3, [r7, #12]
 80136f6:	4413      	add	r3, r2
 80136f8:	781a      	ldrb	r2, [r3, #0]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7e9b      	ldrb	r3, [r3, #26]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d108      	bne.n	8013714 <_chopOff+0x50>
				if (size > count) {
 8013702:	89fa      	ldrh	r2, [r7, #14]
 8013704:	887b      	ldrh	r3, [r7, #2]
 8013706:	429a      	cmp	r2, r3
 8013708:	d904      	bls.n	8013714 <_chopOff+0x50>
					p_owner->__tail = tail;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	89ba      	ldrh	r2, [r7, #12]
 801370e:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013710:	2301      	movs	r3, #1
 8013712:	e04e      	b.n	80137b2 <_chopOff+0xee>
				}
			}
			tail++;
 8013714:	89bb      	ldrh	r3, [r7, #12]
 8013716:	3301      	adds	r3, #1
 8013718:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	891b      	ldrh	r3, [r3, #8]
 801371e:	89ba      	ldrh	r2, [r7, #12]
 8013720:	429a      	cmp	r2, r3
 8013722:	d304      	bcc.n	801372e <_chopOff+0x6a>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	891b      	ldrh	r3, [r3, #8]
 8013728:	89ba      	ldrh	r2, [r7, #12]
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	81bb      	strh	r3, [r7, #12]
			size++;
 801372e:	89fb      	ldrh	r3, [r7, #14]
 8013730:	3301      	adds	r3, #1
 8013732:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	8a9b      	ldrh	r3, [r3, #20]
 8013738:	89ba      	ldrh	r2, [r7, #12]
 801373a:	429a      	cmp	r2, r3
 801373c:	d1d8      	bne.n	80136f0 <_chopOff+0x2c>
		}
		break;
 801373e:	e037      	b.n	80137b0 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f000 f931 	bl	80139a8 <pifRingBuffer_GetFillSize>
 8013746:	4603      	mov	r3, r0
 8013748:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	8b5b      	ldrh	r3, [r3, #26]
 801374e:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013750:	e004      	b.n	801375c <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8b5a      	ldrh	r2, [r3, #26]
 8013756:	89fb      	ldrh	r3, [r7, #14]
 8013758:	4413      	add	r3, r2
 801375a:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 801375c:	887a      	ldrh	r2, [r7, #2]
 801375e:	89fb      	ldrh	r3, [r7, #14]
 8013760:	429a      	cmp	r2, r3
 8013762:	d8f6      	bhi.n	8013752 <_chopOff+0x8e>
		}
		if (size < length) {
 8013764:	89fa      	ldrh	r2, [r7, #14]
 8013766:	897b      	ldrh	r3, [r7, #10]
 8013768:	429a      	cmp	r2, r3
 801376a:	d216      	bcs.n	801379a <_chopOff+0xd6>
			p_owner->__tail += size;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	8ada      	ldrh	r2, [r3, #22]
 8013770:	89fb      	ldrh	r3, [r7, #14]
 8013772:	4413      	add	r3, r2
 8013774:	b29a      	uxth	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8ada      	ldrh	r2, [r3, #22]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	891b      	ldrh	r3, [r3, #8]
 8013782:	429a      	cmp	r2, r3
 8013784:	d307      	bcc.n	8013796 <_chopOff+0xd2>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8ada      	ldrh	r2, [r3, #22]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	891b      	ldrh	r3, [r3, #8]
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	b29a      	uxth	r2, r3
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013796:	2301      	movs	r3, #1
 8013798:	e00b      	b.n	80137b2 <_chopOff+0xee>
		}
		else if (count <= length) {
 801379a:	887a      	ldrh	r2, [r7, #2]
 801379c:	897b      	ldrh	r3, [r7, #10]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d805      	bhi.n	80137ae <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	8a9a      	ldrh	r2, [r3, #20]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	82da      	strh	r2, [r3, #22]
			return TRUE;
 80137aa:	2301      	movs	r3, #1
 80137ac:	e001      	b.n	80137b2 <_chopOff+0xee>
		}
		break;
 80137ae:	bf00      	nop
	}
	return FALSE;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
	...

080137bc <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	460a      	mov	r2, r1
 80137c6:	80fb      	strh	r3, [r7, #6]
 80137c8:	4613      	mov	r3, r2
 80137ca:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 80137cc:	201c      	movs	r0, #28
 80137ce:	f00f f86b 	bl	80228a8 <malloc>
 80137d2:	4603      	mov	r3, r0
 80137d4:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d104      	bne.n	80137e6 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 80137dc:	4b0c      	ldr	r3, [pc, #48]	; (8013810 <pifRingBuffer_CreateHeap+0x54>)
 80137de:	2203      	movs	r2, #3
 80137e0:	701a      	strb	r2, [r3, #0]
		return NULL;
 80137e2:	2300      	movs	r3, #0
 80137e4:	e010      	b.n	8013808 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	88ba      	ldrh	r2, [r7, #4]
 80137ea:	88f9      	ldrh	r1, [r7, #6]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 f829 	bl	8013844 <pifRingBuffer_InitHeap>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d106      	bne.n	8013806 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 80137f8:	f107 030c 	add.w	r3, r7, #12
 80137fc:	4618      	mov	r0, r3
 80137fe:	f000 f809 	bl	8013814 <pifRingBuffer_Destroy>
		return NULL;
 8013802:	2300      	movs	r3, #0
 8013804:	e000      	b.n	8013808 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013806:	68fb      	ldr	r3, [r7, #12]
}
 8013808:	4618      	mov	r0, r3
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	20001bb5 	.word	0x20001bb5

08013814 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00c      	beq.n	801383c <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	4618      	mov	r0, r3
 8013828:	f000 f856 	bl	80138d8 <pifRingBuffer_Clear>
		free(*pp_owner);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4618      	mov	r0, r3
 8013832:	f00f f841 	bl	80228b8 <free>
		*pp_owner = NULL;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2200      	movs	r2, #0
 801383a:	601a      	str	r2, [r3, #0]
	}
}
 801383c:	bf00      	nop
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	460b      	mov	r3, r1
 801384e:	807b      	strh	r3, [r7, #2]
 8013850:	4613      	mov	r3, r2
 8013852:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d002      	beq.n	8013860 <pifRingBuffer_InitHeap+0x1c>
 801385a:	883b      	ldrh	r3, [r7, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d104      	bne.n	801386a <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013860:	4b1b      	ldr	r3, [pc, #108]	; (80138d0 <pifRingBuffer_InitHeap+0x8c>)
 8013862:	2201      	movs	r2, #1
 8013864:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013866:	2300      	movs	r3, #0
 8013868:	e02e      	b.n	80138c8 <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 801386a:	221c      	movs	r2, #28
 801386c:	2100      	movs	r1, #0
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f00f f838 	bl	80228e4 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013874:	883b      	ldrh	r3, [r7, #0]
 8013876:	4619      	mov	r1, r3
 8013878:	2001      	movs	r0, #1
 801387a:	f00e ffe3 	bl	8022844 <calloc>
 801387e:	4603      	mov	r3, r0
 8013880:	461a      	mov	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	691b      	ldr	r3, [r3, #16]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d108      	bne.n	80138a0 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 801388e:	4b10      	ldr	r3, [pc, #64]	; (80138d0 <pifRingBuffer_InitHeap+0x8c>)
 8013890:	2203      	movs	r2, #3
 8013892:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013894:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 f81e 	bl	80138d8 <pifRingBuffer_Clear>
    return FALSE;
 801389c:	2300      	movs	r3, #0
 801389e:	e013      	b.n	80138c8 <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 80138a0:	887b      	ldrh	r3, [r7, #2]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <pifRingBuffer_InitHeap+0x70>
 80138a6:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <pifRingBuffer_InitHeap+0x90>)
 80138a8:	881b      	ldrh	r3, [r3, #0]
 80138aa:	1c5a      	adds	r2, r3, #1
 80138ac:	b291      	uxth	r1, r2
 80138ae:	4a09      	ldr	r2, [pc, #36]	; (80138d4 <pifRingBuffer_InitHeap+0x90>)
 80138b0:	8011      	strh	r1, [r2, #0]
 80138b2:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	887a      	ldrh	r2, [r7, #2]
 80138b8:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	883a      	ldrh	r2, [r7, #0]
 80138be:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	883a      	ldrh	r2, [r7, #0]
 80138c4:	831a      	strh	r2, [r3, #24]
    return TRUE;
 80138c6:	2301      	movs	r3, #1
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	20001bb5 	.word	0x20001bb5
 80138d4:	20000128 	.word	0x20000128

080138d8 <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	791b      	ldrb	r3, [r3, #4]
 80138e4:	f003 0301 	and.w	r3, r3, #1
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d108      	bne.n	8013900 <pifRingBuffer_Clear+0x28>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d004      	beq.n	8013900 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f00e ffdc 	bl	80228b8 <free>
    }
    p_owner->__p_buffer = NULL;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	611a      	str	r2, [r3, #16]
}
 8013906:	bf00      	nop
 8013908:	3708      	adds	r7, #8
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 801390e:	b480      	push	{r7}
 8013910:	b083      	sub	sp, #12
 8013912:	af00      	add	r7, sp, #0
 8013914:	6078      	str	r0, [r7, #4]
 8013916:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	60da      	str	r2, [r3, #12]
}
 801391e:	bf00      	nop
 8013920:	370c      	adds	r7, #12
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr

0801392a <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 801392a:	b480      	push	{r7}
 801392c:	b083      	sub	sp, #12
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
 8013932:	460b      	mov	r3, r1
 8013934:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6919      	ldr	r1, [r3, #16]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	8adb      	ldrh	r3, [r3, #22]
 801393e:	461a      	mov	r2, r3
 8013940:	887b      	ldrh	r3, [r7, #2]
 8013942:	4413      	add	r3, r2
 8013944:	687a      	ldr	r2, [r7, #4]
 8013946:	8912      	ldrh	r2, [r2, #8]
 8013948:	fb93 f0f2 	sdiv	r0, r3, r2
 801394c:	fb00 f202 	mul.w	r2, r0, r2
 8013950:	1a9b      	subs	r3, r3, r2
 8013952:	440b      	add	r3, r1
}
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	691b      	ldr	r3, [r3, #16]
 801396c:	2b00      	cmp	r3, #0
 801396e:	bf14      	ite	ne
 8013970:	2301      	movne	r3, #1
 8013972:	2300      	moveq	r3, #0
 8013974:	b2db      	uxtb	r3, r3
}
 8013976:	4618      	mov	r0, r3
 8013978:	370c      	adds	r7, #12
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013982:	b480      	push	{r7}
 8013984:	b083      	sub	sp, #12
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	8a9a      	ldrh	r2, [r3, #20]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8adb      	ldrh	r3, [r3, #22]
 8013992:	429a      	cmp	r2, r3
 8013994:	bf0c      	ite	eq
 8013996:	2301      	moveq	r3, #1
 8013998:	2300      	movne	r3, #0
 801399a:	b2db      	uxtb	r3, r3
}
 801399c:	4618      	mov	r0, r3
 801399e:	370c      	adds	r7, #12
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b085      	sub	sp, #20
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	8a9a      	ldrh	r2, [r3, #20]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	8adb      	ldrh	r3, [r3, #22]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d306      	bcc.n	80139ca <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	8a9a      	ldrh	r2, [r3, #20]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8adb      	ldrh	r3, [r3, #22]
 80139c4:	1ad3      	subs	r3, r2, r3
 80139c6:	81fb      	strh	r3, [r7, #14]
 80139c8:	e009      	b.n	80139de <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	891a      	ldrh	r2, [r3, #8]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	8adb      	ldrh	r3, [r3, #22]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	b29a      	uxth	r2, r3
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	8a9b      	ldrh	r3, [r3, #20]
 80139da:	4413      	add	r3, r2
 80139dc:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 80139de:	89fb      	ldrh	r3, [r7, #14]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3714      	adds	r7, #20
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b085      	sub	sp, #20
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	460b      	mov	r3, r1
 80139f6:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	8adb      	ldrh	r3, [r3, #22]
 80139fc:	461a      	mov	r2, r3
 80139fe:	887b      	ldrh	r3, [r7, #2]
 8013a00:	4413      	add	r3, r2
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	8912      	ldrh	r2, [r2, #8]
 8013a06:	fb93 f1f2 	sdiv	r1, r3, r2
 8013a0a:	fb01 f202 	mul.w	r2, r1, r2
 8013a0e:	1a9b      	subs	r3, r3, r2
 8013a10:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	8a9b      	ldrh	r3, [r3, #20]
 8013a16:	89fa      	ldrh	r2, [r7, #14]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d805      	bhi.n	8013a28 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	8a9a      	ldrh	r2, [r3, #20]
 8013a20:	89fb      	ldrh	r3, [r7, #14]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	e004      	b.n	8013a32 <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	891a      	ldrh	r2, [r3, #8]
 8013a2c:	89fb      	ldrh	r3, [r7, #14]
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	b29b      	uxth	r3, r3
    }
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3714      	adds	r7, #20
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr

08013a3e <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013a3e:	b480      	push	{r7}
 8013a40:	b085      	sub	sp, #20
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	8a9a      	ldrh	r2, [r3, #20]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	8adb      	ldrh	r3, [r3, #22]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d206      	bcs.n	8013a60 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	8ada      	ldrh	r2, [r3, #22]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	8a9b      	ldrh	r3, [r3, #20]
 8013a5a:	1ad3      	subs	r3, r2, r3
 8013a5c:	81fb      	strh	r3, [r7, #14]
 8013a5e:	e009      	b.n	8013a74 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	891a      	ldrh	r2, [r3, #8]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	8a9b      	ldrh	r3, [r3, #20]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	8adb      	ldrh	r3, [r3, #22]
 8013a70:	4413      	add	r3, r2
 8013a72:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013a74:	89fb      	ldrh	r3, [r7, #14]
 8013a76:	3b01      	subs	r3, #1
 8013a78:	b29b      	uxth	r3, r3
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3714      	adds	r7, #20
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 8013a86:	b480      	push	{r7}
 8013a88:	b083      	sub	sp, #12
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	8b1a      	ldrh	r2, [r3, #24]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	891b      	ldrh	r3, [r3, #8]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d203      	bcs.n	8013aa2 <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	8b1a      	ldrh	r2, [r3, #24]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	8a9a      	ldrh	r2, [r3, #20]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	831a      	strh	r2, [r3, #24]
}
 8013aaa:	bf00      	nop
 8013aac:	370c      	adds	r7, #12
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr

08013ab6 <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 8013ab6:	b480      	push	{r7}
 8013ab8:	b083      	sub	sp, #12
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	891a      	ldrh	r2, [r3, #8]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	831a      	strh	r2, [r3, #24]
}
 8013ac6:	bf00      	nop
 8013ac8:	370c      	adds	r7, #12
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr

08013ad2 <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 8013ad2:	b480      	push	{r7}
 8013ad4:	b083      	sub	sp, #12
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	8b1a      	ldrh	r2, [r3, #24]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	891a      	ldrh	r2, [r3, #8]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	831a      	strh	r2, [r3, #24]
}
 8013aea:	bf00      	nop
 8013aec:	370c      	adds	r7, #12
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 8013af6:	b480      	push	{r7}
 8013af8:	b083      	sub	sp, #12
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
 8013afe:	460b      	mov	r3, r1
 8013b00:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6919      	ldr	r1, [r3, #16]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8b1b      	ldrh	r3, [r3, #24]
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	887b      	ldrh	r3, [r7, #2]
 8013b0e:	4413      	add	r3, r2
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	8912      	ldrh	r2, [r2, #8]
 8013b14:	fb93 f0f2 	sdiv	r0, r3, r2
 8013b18:	fb00 f202 	mul.w	r2, r0, r2
 8013b1c:	1a9b      	subs	r3, r3, r2
 8013b1e:	440b      	add	r3, r1
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	370c      	adds	r7, #12
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	460b      	mov	r3, r1
 8013b36:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	8a9b      	ldrh	r3, [r3, #20]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	891b      	ldrh	r3, [r3, #8]
 8013b44:	89fa      	ldrh	r2, [r7, #14]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d301      	bcc.n	8013b4e <pifRingBuffer_PutByte+0x22>
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	8adb      	ldrh	r3, [r3, #22]
 8013b52:	89fa      	ldrh	r2, [r7, #14]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d10b      	bne.n	8013b70 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013b58:	2101      	movs	r1, #1
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f7ff fdb2 	bl	80136c4 <_chopOff>
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d104      	bne.n	8013b70 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013b66:	4b0a      	ldr	r3, [pc, #40]	; (8013b90 <pifRingBuffer_PutByte+0x64>)
 8013b68:	2204      	movs	r2, #4
 8013b6a:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e00a      	b.n	8013b86 <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	691b      	ldr	r3, [r3, #16]
 8013b74:	687a      	ldr	r2, [r7, #4]
 8013b76:	8a92      	ldrh	r2, [r2, #20]
 8013b78:	4413      	add	r3, r2
 8013b7a:	78fa      	ldrb	r2, [r7, #3]
 8013b7c:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	89fa      	ldrh	r2, [r7, #14]
 8013b82:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013b84:	2301      	movs	r3, #1
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	20001bb5 	.word	0x20001bb5

08013b94 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f7ff ff4b 	bl	8013a3e <pifRingBuffer_GetRemainSize>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013bac:	88fa      	ldrh	r2, [r7, #6]
 8013bae:	8abb      	ldrh	r3, [r7, #20]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d90f      	bls.n	8013bd4 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013bb4:	88fa      	ldrh	r2, [r7, #6]
 8013bb6:	8abb      	ldrh	r3, [r7, #20]
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f7ff fd80 	bl	80136c4 <_chopOff>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d104      	bne.n	8013bd4 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013bca:	4b16      	ldr	r3, [pc, #88]	; (8013c24 <pifRingBuffer_PutData+0x90>)
 8013bcc:	2204      	movs	r2, #4
 8013bce:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	e023      	b.n	8013c1c <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	82fb      	strh	r3, [r7, #22]
 8013bd8:	e01b      	b.n	8013c12 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013bda:	8afb      	ldrh	r3, [r7, #22]
 8013bdc:	68ba      	ldr	r2, [r7, #8]
 8013bde:	441a      	add	r2, r3
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	691b      	ldr	r3, [r3, #16]
 8013be4:	68f9      	ldr	r1, [r7, #12]
 8013be6:	8a89      	ldrh	r1, [r1, #20]
 8013be8:	440b      	add	r3, r1
 8013bea:	7812      	ldrb	r2, [r2, #0]
 8013bec:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	8a9b      	ldrh	r3, [r3, #20]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	8a9a      	ldrh	r2, [r3, #20]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	891b      	ldrh	r3, [r3, #8]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d302      	bcc.n	8013c0c <pifRingBuffer_PutData+0x78>
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013c0c:	8afb      	ldrh	r3, [r7, #22]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	82fb      	strh	r3, [r7, #22]
 8013c12:	8afa      	ldrh	r2, [r7, #22]
 8013c14:	88fb      	ldrh	r3, [r7, #6]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d3df      	bcc.n	8013bda <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013c1a:	2301      	movs	r3, #1
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3718      	adds	r7, #24
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	20001bb5 	.word	0x20001bb5

08013c28 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f7ff ff03 	bl	8013a3e <pifRingBuffer_GetRemainSize>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013c3c:	6838      	ldr	r0, [r7, #0]
 8013c3e:	f7ec facb 	bl	80001d8 <strlen>
 8013c42:	4603      	mov	r3, r0
 8013c44:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013c46:	897a      	ldrh	r2, [r7, #10]
 8013c48:	89bb      	ldrh	r3, [r7, #12]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d90f      	bls.n	8013c6e <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013c4e:	897a      	ldrh	r2, [r7, #10]
 8013c50:	89bb      	ldrh	r3, [r7, #12]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	4619      	mov	r1, r3
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ff fd33 	bl	80136c4 <_chopOff>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d104      	bne.n	8013c6e <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013c64:	4b16      	ldr	r3, [pc, #88]	; (8013cc0 <pifRingBuffer_PutString+0x98>)
 8013c66:	2204      	movs	r2, #4
 8013c68:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	e023      	b.n	8013cb6 <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013c6e:	2300      	movs	r3, #0
 8013c70:	81fb      	strh	r3, [r7, #14]
 8013c72:	e01b      	b.n	8013cac <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	683a      	ldr	r2, [r7, #0]
 8013c78:	441a      	add	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	691b      	ldr	r3, [r3, #16]
 8013c7e:	6879      	ldr	r1, [r7, #4]
 8013c80:	8a89      	ldrh	r1, [r1, #20]
 8013c82:	440b      	add	r3, r1
 8013c84:	7812      	ldrb	r2, [r2, #0]
 8013c86:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8a9b      	ldrh	r3, [r3, #20]
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	8a9a      	ldrh	r2, [r3, #20]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	891b      	ldrh	r3, [r3, #8]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d302      	bcc.n	8013ca6 <pifRingBuffer_PutString+0x7e>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013ca6:	89fb      	ldrh	r3, [r7, #14]
 8013ca8:	3301      	adds	r3, #1
 8013caa:	81fb      	strh	r3, [r7, #14]
 8013cac:	89fa      	ldrh	r2, [r7, #14]
 8013cae:	897b      	ldrh	r3, [r7, #10]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d3df      	bcc.n	8013c74 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013cb4:	2301      	movs	r3, #1
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20001bb5 	.word	0x20001bb5

08013cc4 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	8ada      	ldrh	r2, [r3, #22]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	8a9b      	ldrh	r3, [r3, #20]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d101      	bne.n	8013cde <pifRingBuffer_GetByte+0x1a>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	e017      	b.n	8013d0e <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	8ad2      	ldrh	r2, [r2, #22]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	781a      	ldrb	r2, [r3, #0]
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	8adb      	ldrh	r3, [r3, #22]
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	8ada      	ldrh	r2, [r3, #22]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	891b      	ldrh	r3, [r3, #8]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d302      	bcc.n	8013d0c <pifRingBuffer_GetByte+0x48>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013d0c:	2301      	movs	r3, #1
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b087      	sub	sp, #28
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	60f8      	str	r0, [r7, #12]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	461a      	mov	r2, r3
 8013d26:	460b      	mov	r3, r1
 8013d28:	817b      	strh	r3, [r7, #10]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	8ada      	ldrh	r2, [r3, #22]
 8013d32:	893b      	ldrh	r3, [r7, #8]
 8013d34:	4413      	add	r3, r2
 8013d36:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	891b      	ldrh	r3, [r3, #8]
 8013d3c:	8afa      	ldrh	r2, [r7, #22]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d304      	bcc.n	8013d4c <pifRingBuffer_CopyToArray+0x32>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	891b      	ldrh	r3, [r3, #8]
 8013d46:	8afa      	ldrh	r2, [r7, #22]
 8013d48:	1ad3      	subs	r3, r2, r3
 8013d4a:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	82bb      	strh	r3, [r7, #20]
 8013d50:	e01e      	b.n	8013d90 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	691a      	ldr	r2, [r3, #16]
 8013d56:	8afb      	ldrh	r3, [r7, #22]
 8013d58:	441a      	add	r2, r3
 8013d5a:	8abb      	ldrh	r3, [r7, #20]
 8013d5c:	68f9      	ldr	r1, [r7, #12]
 8013d5e:	440b      	add	r3, r1
 8013d60:	7812      	ldrb	r2, [r2, #0]
 8013d62:	701a      	strb	r2, [r3, #0]
		tail++;
 8013d64:	8afb      	ldrh	r3, [r7, #22]
 8013d66:	3301      	adds	r3, #1
 8013d68:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	891b      	ldrh	r3, [r3, #8]
 8013d6e:	8afa      	ldrh	r2, [r7, #22]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d301      	bcc.n	8013d78 <pifRingBuffer_CopyToArray+0x5e>
 8013d74:	2300      	movs	r3, #0
 8013d76:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	8a9b      	ldrh	r3, [r3, #20]
 8013d7c:	8afa      	ldrh	r2, [r7, #22]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d103      	bne.n	8013d8a <pifRingBuffer_CopyToArray+0x70>
 8013d82:	8abb      	ldrh	r3, [r7, #20]
 8013d84:	3301      	adds	r3, #1
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	e007      	b.n	8013d9a <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8013d8a:	8abb      	ldrh	r3, [r7, #20]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	82bb      	strh	r3, [r7, #20]
 8013d90:	8aba      	ldrh	r2, [r7, #20]
 8013d92:	897b      	ldrh	r3, [r7, #10]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d3dc      	bcc.n	8013d52 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8013d98:	897b      	ldrh	r3, [r7, #10]
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	371c      	adds	r7, #28
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr

08013da6 <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8013da6:	b580      	push	{r7, lr}
 8013da8:	b084      	sub	sp, #16
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
 8013dae:	460b      	mov	r3, r1
 8013db0:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f7ff fdf8 	bl	80139a8 <pifRingBuffer_GetFillSize>
 8013db8:	4603      	mov	r3, r0
 8013dba:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8013dbc:	887a      	ldrh	r2, [r7, #2]
 8013dbe:	89fb      	ldrh	r3, [r7, #14]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d304      	bcc.n	8013dce <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8a9a      	ldrh	r2, [r3, #20]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8013dcc:	e00e      	b.n	8013dec <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	8adb      	ldrh	r3, [r3, #22]
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	887b      	ldrh	r3, [r7, #2]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	687a      	ldr	r2, [r7, #4]
 8013dda:	8912      	ldrh	r2, [r2, #8]
 8013ddc:	fb93 f1f2 	sdiv	r1, r3, r2
 8013de0:	fb01 f202 	mul.w	r2, r1, r2
 8013de4:	1a9b      	subs	r3, r3, r2
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	82da      	strh	r2, [r3, #22]
}
 8013dec:	bf00      	nop
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b089      	sub	sp, #36	; 0x24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	6039      	str	r1, [r7, #0]
 8013dfe:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8013e00:	f04f 33ff 	mov.w	r3, #4294967295
 8013e04:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e06:	2300      	movs	r3, #0
 8013e08:	61bb      	str	r3, [r7, #24]
 8013e0a:	e00f      	b.n	8013e2c <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	fa02 f303 	lsl.w	r3, r2, r3
 8013e14:	461a      	mov	r2, r3
 8013e16:	4b34      	ldr	r3, [pc, #208]	; (8013ee8 <_setTable+0xf4>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4013      	ands	r3, r2
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d102      	bne.n	8013e26 <_setTable+0x32>
			num = i;
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	617b      	str	r3, [r7, #20]
			break;
 8013e24:	e005      	b.n	8013e32 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	61bb      	str	r3, [r7, #24]
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	2b1f      	cmp	r3, #31
 8013e30:	ddec      	ble.n	8013e0c <_setTable+0x18>
		}
	}
	if (num == -1) {
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e38:	d105      	bne.n	8013e46 <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8013e3a:	4b2c      	ldr	r3, [pc, #176]	; (8013eec <_setTable+0xf8>)
 8013e3c:	2204      	movs	r2, #4
 8013e3e:	701a      	strb	r2, [r3, #0]
		return -1;
 8013e40:	f04f 33ff 	mov.w	r3, #4294967295
 8013e44:	e04a      	b.n	8013edc <_setTable+0xe8>
	}
	bit = 1 << num;
 8013e46:	2201      	movs	r2, #1
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8013e4e:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8013e50:	4b25      	ldr	r3, [pc, #148]	; (8013ee8 <_setTable+0xf4>)
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	4313      	orrs	r3, r2
 8013e58:	4a23      	ldr	r2, [pc, #140]	; (8013ee8 <_setTable+0xf4>)
 8013e5a:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8013e5c:	88fb      	ldrh	r3, [r7, #6]
 8013e5e:	015b      	lsls	r3, r3, #5
 8013e60:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8013e62:	4a23      	ldr	r2, [pc, #140]	; (8013ef0 <_setTable+0xfc>)
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e6a:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	2b64      	cmp	r3, #100	; 0x64
 8013e70:	d930      	bls.n	8013ed4 <_setTable+0xe0>
		index = 100 * base;
 8013e72:	4b20      	ldr	r3, [pc, #128]	; (8013ef4 <_setTable+0x100>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2264      	movs	r2, #100	; 0x64
 8013e78:	fb02 f303 	mul.w	r3, r2, r3
 8013e7c:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013e7e:	2300      	movs	r3, #0
 8013e80:	61bb      	str	r3, [r7, #24]
 8013e82:	e017      	b.n	8013eb4 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	4a1c      	ldr	r2, [pc, #112]	; (8013ef8 <_setTable+0x104>)
 8013e88:	fba2 2303 	umull	r2, r3, r2, r3
 8013e8c:	095b      	lsrs	r3, r3, #5
 8013e8e:	f003 021f 	and.w	r2, r3, #31
 8013e92:	491a      	ldr	r1, [pc, #104]	; (8013efc <_setTable+0x108>)
 8013e94:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013e98:	f003 031f 	and.w	r3, r3, #31
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	430a      	orrs	r2, r1
 8013ea0:	4916      	ldr	r1, [pc, #88]	; (8013efc <_setTable+0x108>)
 8013ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8013ea6:	69fa      	ldr	r2, [r7, #28]
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	4413      	add	r3, r2
 8013eac:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	61bb      	str	r3, [r7, #24]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	4a10      	ldr	r2, [pc, #64]	; (8013ef8 <_setTable+0x104>)
 8013eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8013ebc:	1152      	asrs	r2, r2, #5
 8013ebe:	17db      	asrs	r3, r3, #31
 8013ec0:	1ad3      	subs	r3, r2, r3
 8013ec2:	69ba      	ldr	r2, [r7, #24]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	dbdd      	blt.n	8013e84 <_setTable+0x90>
		}
		base++;
 8013ec8:	4b0a      	ldr	r3, [pc, #40]	; (8013ef4 <_setTable+0x100>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	3301      	adds	r3, #1
 8013ece:	4a09      	ldr	r2, [pc, #36]	; (8013ef4 <_setTable+0x100>)
 8013ed0:	6013      	str	r3, [r2, #0]
 8013ed2:	e002      	b.n	8013eda <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8013eda:	697b      	ldr	r3, [r7, #20]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3724      	adds	r7, #36	; 0x24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr
 8013ee8:	20001c9c 	.word	0x20001c9c
 8013eec:	20001bb5 	.word	0x20001bb5
 8013ef0:	0004e200 	.word	0x0004e200
 8013ef4:	20001d2c 	.word	0x20001d2c
 8013ef8:	51eb851f 	.word	0x51eb851f
 8013efc:	20001ca0 	.word	0x20001ca0

08013f00 <_resetTable>:

static void _resetTable(int number)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b085      	sub	sp, #20
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8013f08:	2201      	movs	r2, #1
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f10:	43db      	mvns	r3, r3
 8013f12:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f14:	2300      	movs	r3, #0
 8013f16:	60fb      	str	r3, [r7, #12]
 8013f18:	e00c      	b.n	8013f34 <_resetTable+0x34>
		s_table[i] &= mask;
 8013f1a:	4a0e      	ldr	r2, [pc, #56]	; (8013f54 <_resetTable+0x54>)
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	401a      	ands	r2, r3
 8013f26:	490b      	ldr	r1, [pc, #44]	; (8013f54 <_resetTable+0x54>)
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	3301      	adds	r3, #1
 8013f32:	60fb      	str	r3, [r7, #12]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2b1f      	cmp	r3, #31
 8013f38:	ddef      	ble.n	8013f1a <_resetTable+0x1a>
	}
	s_table_number &= mask;
 8013f3a:	4b07      	ldr	r3, [pc, #28]	; (8013f58 <_resetTable+0x58>)
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	4013      	ands	r3, r2
 8013f42:	4a05      	ldr	r2, [pc, #20]	; (8013f58 <_resetTable+0x58>)
 8013f44:	6013      	str	r3, [r2, #0]
}
 8013f46:	bf00      	nop
 8013f48:	3714      	adds	r7, #20
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr
 8013f52:	bf00      	nop
 8013f54:	20001ca0 	.word	0x20001ca0
 8013f58:	20001c9c 	.word	0x20001c9c

08013f5c <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b085      	sub	sp, #20
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d010      	beq.n	8013f8e <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8013f6c:	4b0b      	ldr	r3, [pc, #44]	; (8013f9c <_processingAlways+0x40>)
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f74:	1ad3      	subs	r3, r2, r3
 8013f76:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	4293      	cmp	r3, r2
 8013f82:	d302      	bcc.n	8013f8a <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e000      	b.n	8013f90 <_processingAlways+0x34>
	}
	return p_owner;
 8013f8e:	687b      	ldr	r3, [r7, #4]
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3714      	adds	r7, #20
 8013f94:	46bd      	mov	sp, r7
 8013f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9a:	4770      	bx	lr
 8013f9c:	20001bcc 	.word	0x20001bcc

08013fa0 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b084      	sub	sp, #16
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 8013fa8:	4b0f      	ldr	r3, [pc, #60]	; (8013fe8 <_processingPeriodUs+0x48>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4798      	blx	r3
 8013fae:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	895b      	ldrh	r3, [r3, #10]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d30a      	bcc.n	8013fdc <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	895b      	ldrh	r3, [r3, #10]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	1ad2      	subs	r2, r2, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	441a      	add	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	e000      	b.n	8013fde <_processingPeriodUs+0x3e>
	}
	return NULL;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	20001bdc 	.word	0x20001bdc

08013fec <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8013ff4:	4b0c      	ldr	r3, [pc, #48]	; (8014028 <_processingPeriodMs+0x3c>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	895b      	ldrh	r3, [r3, #10]
 8014008:	461a      	mov	r2, r3
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	4293      	cmp	r3, r2
 801400e:	d304      	bcc.n	801401a <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	e000      	b.n	801401c <_processingPeriodMs+0x30>
	}
	return NULL;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr
 8014028:	20001bcc 	.word	0x20001bcc
 801402c:	00000000 	.word	0x00000000

08014030 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801403c:	2b00      	cmp	r3, #0
 801403e:	d00f      	beq.n	8014060 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014040:	4b29      	ldr	r3, [pc, #164]	; (80140e8 <_processingRatio+0xb8>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014050:	461a      	mov	r2, r3
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	4293      	cmp	r3, r2
 8014056:	d33b      	bcc.n	80140d0 <_processingRatio+0xa0>
			p_owner->__delay_ms = 0;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	879a      	strh	r2, [r3, #60]	; 0x3c
 801405e:	e037      	b.n	80140d0 <_processingRatio+0xa0>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014060:	4b22      	ldr	r3, [pc, #136]	; (80140ec <_processingRatio+0xbc>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	461a      	mov	r2, r3
 8014066:	4b22      	ldr	r3, [pc, #136]	; (80140f0 <_processingRatio+0xc0>)
 8014068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014070:	2101      	movs	r1, #1
 8014072:	fa01 f202 	lsl.w	r2, r1, r2
 8014076:	4013      	ands	r3, r2
 8014078:	2b00      	cmp	r3, #0
 801407a:	d029      	beq.n	80140d0 <_processingRatio+0xa0>
#ifdef __PIF_DEBUG__
		time = pif_timer1sec;
 801407c:	4b1d      	ldr	r3, [pc, #116]	; (80140f4 <_processingRatio+0xc4>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 8014082:	4b1d      	ldr	r3, [pc, #116]	; (80140f8 <_processingRatio+0xc8>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	429a      	cmp	r2, r3
 801408a:	d01a      	beq.n	80140c2 <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014090:	4618      	mov	r0, r3
 8014092:	f7ec f9eb 	bl	800046c <__aeabi_ui2d>
 8014096:	4602      	mov	r2, r0
 8014098:	460b      	mov	r3, r1
 801409a:	a111      	add	r1, pc, #68	; (adr r1, 80140e0 <_processingRatio+0xb0>)
 801409c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140a0:	f7ec fb88 	bl	80007b4 <__aeabi_ddiv>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	4610      	mov	r0, r2
 80140aa:	4619      	mov	r1, r3
 80140ac:	f7ec fd3a 	bl	8000b24 <__aeabi_d2f>
 80140b0:	4602      	mov	r2, r0
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	651a      	str	r2, [r3, #80]	; 0x50
			p_owner->__count = 0;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2200      	movs	r2, #0
 80140ba:	64da      	str	r2, [r3, #76]	; 0x4c
			pretime = time;
 80140bc:	4a0e      	ldr	r2, [pc, #56]	; (80140f8 <_processingRatio+0xc8>)
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	6013      	str	r3, [r2, #0]
		}
		p_owner->__count++;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c6:	1c5a      	adds	r2, r3, #1
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
		return p_owner;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	e000      	b.n	80140d2 <_processingRatio+0xa2>
	}
	return NULL;
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	f3af 8000 	nop.w
 80140e0:	00000000 	.word	0x00000000
 80140e4:	412e8480 	.word	0x412e8480
 80140e8:	20001bcc 	.word	0x20001bcc
 80140ec:	20001d20 	.word	0x20001d20
 80140f0:	20001ca0 	.word	0x20001ca0
 80140f4:	20001bc0 	.word	0x20001bc0
 80140f8:	20001d30 	.word	0x20001d30

080140fc <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	460b      	mov	r3, r1
 8014106:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b09      	cmp	r3, #9
 801410e:	d848      	bhi.n	80141a2 <_checkParam+0xa6>
 8014110:	a201      	add	r2, pc, #4	; (adr r2, 8014118 <_checkParam+0x1c>)
 8014112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014116:	bf00      	nop
 8014118:	08014141 	.word	0x08014141
 801411c:	080141ad 	.word	0x080141ad
 8014120:	08014165 	.word	0x08014165
 8014124:	08014175 	.word	0x08014175
 8014128:	08014165 	.word	0x08014165
 801412c:	08014175 	.word	0x08014175
 8014130:	08014197 	.word	0x08014197
 8014134:	080141ad 	.word	0x080141ad
 8014138:	080141ad 	.word	0x080141ad
 801413c:	08014165 	.word	0x08014165
    case TM_RATIO:
    	if (!period || period > 100) {
 8014140:	887b      	ldrh	r3, [r7, #2]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <_checkParam+0x50>
 8014146:	887b      	ldrh	r3, [r7, #2]
 8014148:	2b64      	cmp	r3, #100	; 0x64
 801414a:	d904      	bls.n	8014156 <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 801414c:	4b1f      	ldr	r3, [pc, #124]	; (80141cc <_checkParam+0xd0>)
 801414e:	2201      	movs	r2, #1
 8014150:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014152:	2300      	movs	r3, #0
 8014154:	e034      	b.n	80141c0 <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 8014156:	887b      	ldrh	r3, [r7, #2]
 8014158:	2b64      	cmp	r3, #100	; 0x64
 801415a:	d129      	bne.n	80141b0 <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2201      	movs	r2, #1
 8014160:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8014162:	e025      	b.n	80141b0 <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014164:	887b      	ldrh	r3, [r7, #2]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d124      	bne.n	80141b4 <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 801416a:	4b18      	ldr	r3, [pc, #96]	; (80141cc <_checkParam+0xd0>)
 801416c:	2201      	movs	r2, #1
 801416e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014170:	2300      	movs	r3, #0
 8014172:	e025      	b.n	80141c0 <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 8014174:	887b      	ldrh	r3, [r7, #2]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d104      	bne.n	8014184 <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 801417a:	4b14      	ldr	r3, [pc, #80]	; (80141cc <_checkParam+0xd0>)
 801417c:	2201      	movs	r2, #1
 801417e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014180:	2300      	movs	r3, #0
 8014182:	e01d      	b.n	80141c0 <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 8014184:	4b12      	ldr	r3, [pc, #72]	; (80141d0 <_checkParam+0xd4>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d115      	bne.n	80141b8 <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 801418c:	4b0f      	ldr	r3, [pc, #60]	; (80141cc <_checkParam+0xd0>)
 801418e:	2209      	movs	r2, #9
 8014190:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014192:	2300      	movs	r3, #0
 8014194:	e014      	b.n	80141c0 <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 8014196:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <_checkParam+0xd8>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00e      	beq.n	80141bc <_checkParam+0xc0>
 801419e:	2300      	movs	r3, #0
 80141a0:	e00e      	b.n	80141c0 <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 80141a2:	4b0a      	ldr	r3, [pc, #40]	; (80141cc <_checkParam+0xd0>)
 80141a4:	2201      	movs	r2, #1
 80141a6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80141a8:	2300      	movs	r3, #0
 80141aa:	e009      	b.n	80141c0 <_checkParam+0xc4>
		break;
 80141ac:	bf00      	nop
 80141ae:	e006      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b0:	bf00      	nop
 80141b2:	e004      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b4:	bf00      	nop
 80141b6:	e002      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b8:	bf00      	nop
 80141ba:	e000      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141bc:	bf00      	nop
    }
	return TRUE;
 80141be:	2301      	movs	r3, #1
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr
 80141cc:	20001bb5 	.word	0x20001bb5
 80141d0:	20001bdc 	.word	0x20001bdc
 80141d4:	20001c98 	.word	0x20001c98

080141d8 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
 80141e4:	4613      	mov	r3, r2
 80141e6:	803b      	strh	r3, [r7, #0]
	int num = -1;
 80141e8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ec:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 80141ee:	78fb      	ldrb	r3, [r7, #3]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10c      	bne.n	801420e <_setParam+0x36>
    	num = _setTable(period, &mode);
 80141f4:	1cfa      	adds	r2, r7, #3
 80141f6:	883b      	ldrh	r3, [r7, #0]
 80141f8:	4611      	mov	r1, r2
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7ff fdfa 	bl	8013df4 <_setTable>
 8014200:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014208:	d101      	bne.n	801420e <_setParam+0x36>
 801420a:	2300      	movs	r3, #0
 801420c:	e050      	b.n	80142b0 <_setParam+0xd8>
	}

    switch (mode) {
 801420e:	78fb      	ldrb	r3, [r7, #3]
 8014210:	2b09      	cmp	r3, #9
 8014212:	d845      	bhi.n	80142a0 <_setParam+0xc8>
 8014214:	a201      	add	r2, pc, #4	; (adr r2, 801421c <_setParam+0x44>)
 8014216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801421a:	bf00      	nop
 801421c:	08014245 	.word	0x08014245
 8014220:	08014253 	.word	0x08014253
 8014224:	0801425f 	.word	0x0801425f
 8014228:	0801426f 	.word	0x0801426f
 801422c:	0801425f 	.word	0x0801425f
 8014230:	0801426f 	.word	0x0801426f
 8014234:	08014283 	.word	0x08014283
 8014238:	08014295 	.word	0x08014295
 801423c:	08014295 	.word	0x08014295
 8014240:	0801425f 	.word	0x0801425f
    case TM_RATIO:
    	p_owner->__table_number = num;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	4a1a      	ldr	r2, [pc, #104]	; (80142b8 <_setParam+0xe0>)
 801424e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014250:	e027      	b.n	80142a2 <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 8014252:	2364      	movs	r3, #100	; 0x64
 8014254:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4a18      	ldr	r2, [pc, #96]	; (80142bc <_setParam+0xe4>)
 801425a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801425c:	e021      	b.n	80142a2 <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801425e:	4b18      	ldr	r3, [pc, #96]	; (80142c0 <_setParam+0xe8>)
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4a16      	ldr	r2, [pc, #88]	; (80142c4 <_setParam+0xec>)
 801426a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801426c:	e019      	b.n	80142a2 <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801426e:	4b16      	ldr	r3, [pc, #88]	; (80142c8 <_setParam+0xf0>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4798      	blx	r3
 8014274:	4602      	mov	r2, r0
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4a13      	ldr	r2, [pc, #76]	; (80142cc <_setParam+0xf4>)
 801427e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014280:	e00f      	b.n	80142a2 <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 8014282:	4a13      	ldr	r2, [pc, #76]	; (80142d0 <_setParam+0xf8>)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6013      	str	r3, [r2, #0]
    	period = 0;
 8014288:	2300      	movs	r3, #0
 801428a:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8014292:	e006      	b.n	80142a2 <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 8014294:	2300      	movs	r3, #0
 8014296:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2200      	movs	r2, #0
 801429c:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801429e:	e000      	b.n	80142a2 <_setParam+0xca>

    default:
    	break;
 80142a0:	bf00      	nop
    }

    p_owner->_mode = mode;
 80142a2:	78fa      	ldrb	r2, [r7, #3]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	883a      	ldrh	r2, [r7, #0]
 80142ac:	815a      	strh	r2, [r3, #10]
	return TRUE;
 80142ae:	2301      	movs	r3, #1
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	08014031 	.word	0x08014031
 80142bc:	08013f5d 	.word	0x08013f5d
 80142c0:	20001bcc 	.word	0x20001bcc
 80142c4:	08013fed 	.word	0x08013fed
 80142c8:	20001bdc 	.word	0x20001bdc
 80142cc:	08013fa1 	.word	0x08013fa1
 80142d0:	20001c98 	.word	0x20001c98

080142d4 <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 80142dc:	4b43      	ldr	r3, [pc, #268]	; (80143ec <_processingTask+0x118>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	dd01      	ble.n	80142e8 <_processingTask+0x14>
 80142e4:	2300      	movs	r3, #0
 80142e6:	e07d      	b.n	80143e4 <_processingTask+0x110>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
 80142e8:	4b41      	ldr	r3, [pc, #260]	; (80143f0 <_processingTask+0x11c>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d003      	beq.n	80142f8 <_processingTask+0x24>
 80142f0:	4b3f      	ldr	r3, [pc, #252]	; (80143f0 <_processingTask+0x11c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2001      	movs	r0, #1
 80142f6:	4798      	blx	r3
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 80142f8:	4b3c      	ldr	r3, [pc, #240]	; (80143ec <_processingTask+0x118>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	493d      	ldr	r1, [pc, #244]	; (80143f4 <_processingTask+0x120>)
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 8014304:	4b39      	ldr	r3, [pc, #228]	; (80143ec <_processingTask+0x118>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	4a38      	ldr	r2, [pc, #224]	; (80143ec <_processingTask+0x118>)
 801430c:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2201      	movs	r2, #1
 8014312:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 8014314:	4b38      	ldr	r3, [pc, #224]	; (80143f8 <_processingTask+0x124>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d024      	beq.n	8014366 <_processingTask+0x92>
		start_time = (*pif_act_timer1us)();
 801431c:	4b36      	ldr	r3, [pc, #216]	; (80143f8 <_processingTask+0x124>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4798      	blx	r3
 8014322:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	4798      	blx	r3
 801432c:	4603      	mov	r3, r0
 801432e:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 8014330:	4b31      	ldr	r3, [pc, #196]	; (80143f8 <_processingTask+0x124>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4798      	blx	r3
 8014336:	4602      	mov	r2, r0
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	699b      	ldr	r3, [r3, #24]
 8014342:	1c5a      	adds	r2, r3, #1
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	429a      	cmp	r2, r3
 8014350:	d902      	bls.n	8014358 <_processingTask+0x84>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	695a      	ldr	r2, [r3, #20]
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	441a      	add	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	615a      	str	r2, [r3, #20]
 8014364:	e005      	b.n	8014372 <_processingTask+0x9e>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	4798      	blx	r3
 801436e:	4603      	mov	r3, r0
 8014370:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2200      	movs	r2, #0
 8014376:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 8014378:	4b1c      	ldr	r3, [pc, #112]	; (80143ec <_processingTask+0x118>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	3b01      	subs	r3, #1
 801437e:	4a1b      	ldr	r2, [pc, #108]	; (80143ec <_processingTask+0x118>)
 8014380:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 8014382:	4b1a      	ldr	r3, [pc, #104]	; (80143ec <_processingTask+0x118>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4a1b      	ldr	r2, [pc, #108]	; (80143f4 <_processingTask+0x120>)
 8014388:	2100      	movs	r1, #0
 801438a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
 801438e:	4b18      	ldr	r3, [pc, #96]	; (80143f0 <_processingTask+0x11c>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d003      	beq.n	801439e <_processingTask+0xca>
 8014396:	4b16      	ldr	r3, [pc, #88]	; (80143f0 <_processingTask+0x11c>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2000      	movs	r0, #0
 801439c:	4798      	blx	r3
#endif

	switch (p_owner->_mode) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	7a1b      	ldrb	r3, [r3, #8]
 80143a2:	2b04      	cmp	r3, #4
 80143a4:	d002      	beq.n	80143ac <_processingTask+0xd8>
 80143a6:	2b05      	cmp	r3, #5
 80143a8:	d00b      	beq.n	80143c2 <_processingTask+0xee>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 80143aa:	e01a      	b.n	80143e2 <_processingTask+0x10e>
		if (period > 0) {
 80143ac:	8afb      	ldrh	r3, [r7, #22]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d014      	beq.n	80143dc <_processingTask+0x108>
			p_owner->_period = period;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	8afa      	ldrh	r2, [r7, #22]
 80143b6:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 80143b8:	4b10      	ldr	r3, [pc, #64]	; (80143fc <_processingTask+0x128>)
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80143c0:	e00c      	b.n	80143dc <_processingTask+0x108>
		if (period > 0) {
 80143c2:	8afb      	ldrh	r3, [r7, #22]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d00b      	beq.n	80143e0 <_processingTask+0x10c>
			p_owner->_period = period;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	8afa      	ldrh	r2, [r7, #22]
 80143cc:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 80143ce:	4b0a      	ldr	r3, [pc, #40]	; (80143f8 <_processingTask+0x124>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	4798      	blx	r3
 80143d4:	4602      	mov	r2, r0
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80143da:	e001      	b.n	80143e0 <_processingTask+0x10c>
		break;
 80143dc:	bf00      	nop
 80143de:	e000      	b.n	80143e2 <_processingTask+0x10e>
		break;
 80143e0:	bf00      	nop
	}
	return TRUE;
 80143e2:	2301      	movs	r3, #1
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	20001c94 	.word	0x20001c94
 80143f0:	20001c60 	.word	0x20001c60
 80143f4:	20001c80 	.word	0x20001c80
 80143f8:	20001bdc 	.word	0x20001bdc
 80143fc:	20001bcc 	.word	0x20001bcc

08014400 <_checkLoopTime>:

static void _checkLoopTime()
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af02      	add	r7, sp, #8
#endif
#ifdef __PIF_DEBUG__
	static uint32_t pretime = 0UL;
	static uint32_t max_loop = 0UL;

	if (pif_act_timer1us) {
 8014406:	4b46      	ldr	r3, [pc, #280]	; (8014520 <_checkLoopTime+0x120>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d015      	beq.n	801443a <_checkLoopTime+0x3a>
		value = (*pif_act_timer1us)() - pretime;
 801440e:	4b44      	ldr	r3, [pc, #272]	; (8014520 <_checkLoopTime+0x120>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4798      	blx	r3
 8014414:	4602      	mov	r2, r0
 8014416:	4b43      	ldr	r3, [pc, #268]	; (8014524 <_checkLoopTime+0x124>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	607b      	str	r3, [r7, #4]
		if (value > pif_performance.__max_loop_time1us) {
 801441e:	4b42      	ldr	r3, [pc, #264]	; (8014528 <_checkLoopTime+0x128>)
 8014420:	689b      	ldr	r3, [r3, #8]
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	429a      	cmp	r2, r3
 8014426:	d902      	bls.n	801442e <_checkLoopTime+0x2e>
			pif_performance.__max_loop_time1us = value;
 8014428:	4a3f      	ldr	r2, [pc, #252]	; (8014528 <_checkLoopTime+0x128>)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6093      	str	r3, [r2, #8]
		}
		pretime = (*pif_act_timer1us)();
 801442e:	4b3c      	ldr	r3, [pc, #240]	; (8014520 <_checkLoopTime+0x120>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4798      	blx	r3
 8014434:	4603      	mov	r3, r0
 8014436:	4a3b      	ldr	r2, [pc, #236]	; (8014524 <_checkLoopTime+0x124>)
 8014438:	6013      	str	r3, [r2, #0]
	}
#endif

	pif_performance._count++;
 801443a:	4b3b      	ldr	r3, [pc, #236]	; (8014528 <_checkLoopTime+0x128>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	3301      	adds	r3, #1
 8014440:	4a39      	ldr	r2, [pc, #228]	; (8014528 <_checkLoopTime+0x128>)
 8014442:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 8014444:	4b38      	ldr	r3, [pc, #224]	; (8014528 <_checkLoopTime+0x128>)
 8014446:	795b      	ldrb	r3, [r3, #5]
 8014448:	f003 0301 	and.w	r3, r3, #1
 801444c:	2b00      	cmp	r3, #0
 801444e:	d022      	beq.n	8014496 <_checkLoopTime+0x96>
		if (timer_10ms) timer_10ms--;
 8014450:	4b36      	ldr	r3, [pc, #216]	; (801452c <_checkLoopTime+0x12c>)
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <_checkLoopTime+0x66>
 8014458:	4b34      	ldr	r3, [pc, #208]	; (801452c <_checkLoopTime+0x12c>)
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	3b01      	subs	r3, #1
 801445e:	b2da      	uxtb	r2, r3
 8014460:	4b32      	ldr	r3, [pc, #200]	; (801452c <_checkLoopTime+0x12c>)
 8014462:	701a      	strb	r2, [r3, #0]
 8014464:	e017      	b.n	8014496 <_checkLoopTime+0x96>
		else {
			timer_10ms = 9;
 8014466:	4b31      	ldr	r3, [pc, #196]	; (801452c <_checkLoopTime+0x12c>)
 8014468:	2209      	movs	r2, #9
 801446a:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 801446c:	4b30      	ldr	r3, [pc, #192]	; (8014530 <_checkLoopTime+0x130>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2264      	movs	r2, #100	; 0x64
 8014472:	fb03 f202 	mul.w	r2, r3, r2
 8014476:	4b2f      	ldr	r3, [pc, #188]	; (8014534 <_checkLoopTime+0x134>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	fbb2 f3f3 	udiv	r3, r2, r3
 801447e:	b2db      	uxtb	r3, r3
 8014480:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8014484:	b2da      	uxtb	r2, r3
 8014486:	4b28      	ldr	r3, [pc, #160]	; (8014528 <_checkLoopTime+0x128>)
 8014488:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 801448a:	4b2a      	ldr	r3, [pc, #168]	; (8014534 <_checkLoopTime+0x134>)
 801448c:	2200      	movs	r2, #0
 801448e:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 8014490:	4b27      	ldr	r3, [pc, #156]	; (8014530 <_checkLoopTime+0x130>)
 8014492:	2200      	movs	r2, #0
 8014494:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 8014496:	4b24      	ldr	r3, [pc, #144]	; (8014528 <_checkLoopTime+0x128>)
 8014498:	795b      	ldrb	r3, [r3, #5]
 801449a:	f003 0302 	and.w	r3, r3, #2
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d027      	beq.n	80144f2 <_checkLoopTime+0xf2>
#ifdef __PIF_DEBUG__
		if (pif_performance.__max_loop_time1us > max_loop) max_loop = pif_performance.__max_loop_time1us;
 80144a2:	4b21      	ldr	r3, [pc, #132]	; (8014528 <_checkLoopTime+0x128>)
 80144a4:	689a      	ldr	r2, [r3, #8]
 80144a6:	4b24      	ldr	r3, [pc, #144]	; (8014538 <_checkLoopTime+0x138>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d903      	bls.n	80144b6 <_checkLoopTime+0xb6>
 80144ae:	4b1e      	ldr	r3, [pc, #120]	; (8014528 <_checkLoopTime+0x128>)
 80144b0:	689b      	ldr	r3, [r3, #8]
 80144b2:	4a21      	ldr	r2, [pc, #132]	; (8014538 <_checkLoopTime+0x138>)
 80144b4:	6013      	str	r3, [r2, #0]
	#ifndef __PIF_NO_LOG__
		if (pif_log_flag.bt.performance) {
 80144b6:	4b21      	ldr	r3, [pc, #132]	; (801453c <_checkLoopTime+0x13c>)
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	f003 0301 	and.w	r3, r3, #1
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d010      	beq.n	80144e6 <_checkLoopTime+0xe6>
			value = 1000000L / pif_performance._count;
 80144c4:	4b18      	ldr	r3, [pc, #96]	; (8014528 <_checkLoopTime+0x128>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	4a1d      	ldr	r2, [pc, #116]	; (8014540 <_checkLoopTime+0x140>)
 80144ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80144ce:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s) MLT=%luus", value, pif_performance._count, pif_performance.__max_loop_time1us);
 80144d0:	4b15      	ldr	r3, [pc, #84]	; (8014528 <_checkLoopTime+0x128>)
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	4b14      	ldr	r3, [pc, #80]	; (8014528 <_checkLoopTime+0x128>)
 80144d6:	689b      	ldr	r3, [r3, #8]
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	4613      	mov	r3, r2
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	4919      	ldr	r1, [pc, #100]	; (8014544 <_checkLoopTime+0x144>)
 80144e0:	2002      	movs	r0, #2
 80144e2:	f7ff f80d 	bl	8013500 <pifLog_Printf>
		}
	#endif
		pif_performance.__max_loop_time1us = 0UL;
 80144e6:	4b10      	ldr	r3, [pc, #64]	; (8014528 <_checkLoopTime+0x128>)
 80144e8:	2200      	movs	r2, #0
 80144ea:	609a      	str	r2, [r3, #8]
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 80144ec:	4b0e      	ldr	r3, [pc, #56]	; (8014528 <_checkLoopTime+0x128>)
 80144ee:	2200      	movs	r2, #0
 80144f0:	601a      	str	r2, [r3, #0]
	}

#ifdef __PIF_DEBUG__
	if (pif_performance.__state & 4) {		// 1min
 80144f2:	4b0d      	ldr	r3, [pc, #52]	; (8014528 <_checkLoopTime+0x128>)
 80144f4:	795b      	ldrb	r3, [r3, #5]
 80144f6:	f003 0304 	and.w	r3, r3, #4
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d009      	beq.n	8014512 <_checkLoopTime+0x112>
	#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "MLT=%luus", max_loop);
 80144fe:	4b0e      	ldr	r3, [pc, #56]	; (8014538 <_checkLoopTime+0x138>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	461a      	mov	r2, r3
 8014504:	4910      	ldr	r1, [pc, #64]	; (8014548 <_checkLoopTime+0x148>)
 8014506:	2002      	movs	r0, #2
 8014508:	f7fe fffa 	bl	8013500 <pifLog_Printf>
	#endif
		max_loop = 0UL;
 801450c:	4b0a      	ldr	r3, [pc, #40]	; (8014538 <_checkLoopTime+0x138>)
 801450e:	2200      	movs	r2, #0
 8014510:	601a      	str	r2, [r3, #0]
    }
#endif

	pif_performance.__state = 0;
 8014512:	4b05      	ldr	r3, [pc, #20]	; (8014528 <_checkLoopTime+0x128>)
 8014514:	2200      	movs	r2, #0
 8014516:	715a      	strb	r2, [r3, #5]
}
 8014518:	bf00      	nop
 801451a:	3708      	adds	r7, #8
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	20001bdc 	.word	0x20001bdc
 8014524:	20001d34 	.word	0x20001d34
 8014528:	20001bd0 	.word	0x20001bd0
 801452c:	20001d38 	.word	0x20001d38
 8014530:	20001d28 	.word	0x20001d28
 8014534:	20001d24 	.word	0x20001d24
 8014538:	20001d3c 	.word	0x20001d3c
 801453c:	20001be0 	.word	0x20001be0
 8014540:	000f4240 	.word	0x000f4240
 8014544:	0802739c 	.word	0x0802739c
 8014548:	080273b8 	.word	0x080273b8

0801454c <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
    pif_id++;
 8014554:	4b07      	ldr	r3, [pc, #28]	; (8014574 <pifTask_Init+0x28>)
 8014556:	881b      	ldrh	r3, [r3, #0]
 8014558:	3301      	adds	r3, #1
 801455a:	b29a      	uxth	r2, r3
 801455c:	4b05      	ldr	r3, [pc, #20]	; (8014574 <pifTask_Init+0x28>)
 801455e:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 8014560:	4b04      	ldr	r3, [pc, #16]	; (8014574 <pifTask_Init+0x28>)
 8014562:	881a      	ldrh	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	80da      	strh	r2, [r3, #6]
}
 8014568:	bf00      	nop
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr
 8014574:	20000128 	.word	0x20000128

08014578 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	70fb      	strb	r3, [r7, #3]
 8014584:	4613      	mov	r3, r2
 8014586:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	7a1a      	ldrb	r2, [r3, #8]
 801458c:	78fb      	ldrb	r3, [r7, #3]
 801458e:	429a      	cmp	r2, r3
 8014590:	d101      	bne.n	8014596 <pifTask_ChangeMode+0x1e>
 8014592:	2301      	movs	r3, #1
 8014594:	e028      	b.n	80145e8 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	7a1b      	ldrb	r3, [r3, #8]
 801459a:	2b06      	cmp	r3, #6
 801459c:	d102      	bne.n	80145a4 <pifTask_ChangeMode+0x2c>
 801459e:	4b14      	ldr	r3, [pc, #80]	; (80145f0 <pifTask_ChangeMode+0x78>)
 80145a0:	2200      	movs	r2, #0
 80145a2:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 80145a4:	883a      	ldrh	r2, [r7, #0]
 80145a6:	1cfb      	adds	r3, r7, #3
 80145a8:	4611      	mov	r1, r2
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7ff fda6 	bl	80140fc <_checkParam>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <pifTask_ChangeMode+0x42>
 80145b6:	2300      	movs	r3, #0
 80145b8:	e016      	b.n	80145e8 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	7a1b      	ldrb	r3, [r3, #8]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d805      	bhi.n	80145ce <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7ff fc9a 	bl	8013f00 <_resetTable>
		break;
 80145cc:	e000      	b.n	80145d0 <pifTask_ChangeMode+0x58>

	default:
		break;
 80145ce:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 80145d0:	78fb      	ldrb	r3, [r7, #3]
 80145d2:	883a      	ldrh	r2, [r7, #0]
 80145d4:	4619      	mov	r1, r3
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f7ff fdfe 	bl	80141d8 <_setParam>
 80145dc:	4603      	mov	r3, r0
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d101      	bne.n	80145e6 <pifTask_ChangeMode+0x6e>
 80145e2:	2300      	movs	r3, #0
 80145e4:	e000      	b.n	80145e8 <pifTask_ChangeMode+0x70>

    return TRUE;
 80145e6:	2301      	movs	r3, #1
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	20001c98 	.word	0x20001c98

080145f4 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	460b      	mov	r3, r1
 80145fe:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	7a1b      	ldrb	r3, [r3, #8]
 8014604:	2b03      	cmp	r3, #3
 8014606:	dc02      	bgt.n	801460e <pifTask_ChangePeriod+0x1a>
 8014608:	2b02      	cmp	r3, #2
 801460a:	da02      	bge.n	8014612 <pifTask_ChangePeriod+0x1e>
 801460c:	e007      	b.n	801461e <pifTask_ChangePeriod+0x2a>
 801460e:	2b09      	cmp	r3, #9
 8014610:	d105      	bne.n	801461e <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	887a      	ldrh	r2, [r7, #2]
 8014616:	815a      	strh	r2, [r3, #10]
		break;
 8014618:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 801461a:	2301      	movs	r3, #1
 801461c:	e003      	b.n	8014626 <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 801461e:	4b05      	ldr	r3, [pc, #20]	; (8014634 <pifTask_ChangePeriod+0x40>)
 8014620:	2209      	movs	r2, #9
 8014622:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	370c      	adds	r7, #12
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	20001bb5 	.word	0x20001bb5

08014638 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d014      	beq.n	8014670 <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 8014646:	4b0d      	ldr	r3, [pc, #52]	; (801467c <pifTask_SetTrigger+0x44>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d006      	beq.n	801465c <pifTask_SetTrigger+0x24>
 801464e:	4b0b      	ldr	r3, [pc, #44]	; (801467c <pifTask_SetTrigger+0x44>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4798      	blx	r3
 8014654:	4602      	mov	r2, r0
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	649a      	str	r2, [r3, #72]	; 0x48
 801465a:	e003      	b.n	8014664 <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 801465c:	4b08      	ldr	r3, [pc, #32]	; (8014680 <pifTask_SetTrigger+0x48>)
 801465e:	681a      	ldr	r2, [r3, #0]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2201      	movs	r2, #1
 8014668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 801466c:	2301      	movs	r3, #1
 801466e:	e000      	b.n	8014672 <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 8014670:	2300      	movs	r3, #0
}
 8014672:	4618      	mov	r0, r3
 8014674:	3708      	adds	r7, #8
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	20001bdc 	.word	0x20001bdc
 8014680:	20001bcc 	.word	0x20001bcc

08014684 <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	460b      	mov	r3, r1
 801468e:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 8014690:	4b17      	ldr	r3, [pc, #92]	; (80146f0 <pifTask_GetDeltaTime+0x6c>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d107      	bne.n	80146a8 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014698:	4b16      	ldr	r3, [pc, #88]	; (80146f4 <pifTask_GetDeltaTime+0x70>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	60fb      	str	r3, [r7, #12]
 80146a6:	e003      	b.n	80146b0 <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 80146a8:	4b11      	ldr	r3, [pc, #68]	; (80146f0 <pifTask_GetDeltaTime+0x6c>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4798      	blx	r3
 80146ae:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146b4:	68fa      	ldr	r2, [r7, #12]
 80146b6:	1ad3      	subs	r3, r2, r3
 80146b8:	60bb      	str	r3, [r7, #8]
	if (reset) {
 80146ba:	78fb      	ldrb	r3, [r7, #3]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d011      	beq.n	80146e4 <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d00a      	beq.n	80146de <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	69da      	ldr	r2, [r3, #28]
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	441a      	add	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6a1b      	ldr	r3, [r3, #32]
 80146d8:	1c5a      	adds	r2, r3, #1
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 80146e4:	68bb      	ldr	r3, [r7, #8]
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	20001bdc 	.word	0x20001bdc
 80146f4:	20001bcc 	.word	0x20001bcc

080146f8 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	2158      	movs	r1, #88	; 0x58
 8014704:	480b      	ldr	r0, [pc, #44]	; (8014734 <pifTaskManager_Init+0x3c>)
 8014706:	f7fd ffcb 	bl	80126a0 <pifFixList_Init>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d101      	bne.n	8014714 <pifTaskManager_Init+0x1c>
 8014710:	2300      	movs	r3, #0
 8014712:	e00b      	b.n	801472c <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014714:	4b08      	ldr	r3, [pc, #32]	; (8014738 <pifTaskManager_Init+0x40>)
 8014716:	2200      	movs	r2, #0
 8014718:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 801471a:	4b08      	ldr	r3, [pc, #32]	; (801473c <pifTaskManager_Init+0x44>)
 801471c:	2200      	movs	r2, #0
 801471e:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 8014720:	2280      	movs	r2, #128	; 0x80
 8014722:	2100      	movs	r1, #0
 8014724:	4806      	ldr	r0, [pc, #24]	; (8014740 <pifTaskManager_Init+0x48>)
 8014726:	f00e f8dd 	bl	80228e4 <memset>
	return TRUE;
 801472a:	2301      	movs	r3, #1
}
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	20001c64 	.word	0x20001c64
 8014738:	20001c7c 	.word	0x20001c7c
 801473c:	20001c9c 	.word	0x20001c9c
 8014740:	20001ca0 	.word	0x20001ca0

08014744 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	af00      	add	r7, sp, #0
 801474a:	60ba      	str	r2, [r7, #8]
 801474c:	607b      	str	r3, [r7, #4]
 801474e:	4603      	mov	r3, r0
 8014750:	73fb      	strb	r3, [r7, #15]
 8014752:	460b      	mov	r3, r1
 8014754:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d104      	bne.n	8014766 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 801475c:	4b2a      	ldr	r3, [pc, #168]	; (8014808 <pifTaskManager_Add+0xc4>)
 801475e:	2201      	movs	r2, #1
 8014760:	701a      	strb	r2, [r3, #0]
	    return NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	e04b      	b.n	80147fe <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014766:	89ba      	ldrh	r2, [r7, #12]
 8014768:	f107 030f 	add.w	r3, r7, #15
 801476c:	4611      	mov	r1, r2
 801476e:	4618      	mov	r0, r3
 8014770:	f7ff fcc4 	bl	80140fc <_checkParam>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d101      	bne.n	801477e <pifTaskManager_Add+0x3a>
 801477a:	2300      	movs	r3, #0
 801477c:	e03f      	b.n	80147fe <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801477e:	4823      	ldr	r0, [pc, #140]	; (801480c <pifTaskManager_Add+0xc8>)
 8014780:	f7fe f821 	bl	80127c6 <pifFixList_AddFirst>
 8014784:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d101      	bne.n	8014790 <pifTaskManager_Add+0x4c>
 801478c:	2300      	movs	r3, #0
 801478e:	e036      	b.n	80147fe <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 8014790:	6978      	ldr	r0, [r7, #20]
 8014792:	f7ff fedb 	bl	801454c <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014796:	7bfb      	ldrb	r3, [r7, #15]
 8014798:	89ba      	ldrh	r2, [r7, #12]
 801479a:	4619      	mov	r1, r3
 801479c:	6978      	ldr	r0, [r7, #20]
 801479e:	f7ff fd1b 	bl	80141d8 <_setParam>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d021      	beq.n	80147ec <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	68ba      	ldr	r2, [r7, #8]
 80147ac:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->_p_client = p_client;
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 80147b4:	7bfb      	ldrb	r3, [r7, #15]
 80147b6:	2b07      	cmp	r3, #7
 80147b8:	d006      	beq.n	80147c8 <pifTaskManager_Add+0x84>
 80147ba:	7bfb      	ldrb	r3, [r7, #15]
 80147bc:	2b06      	cmp	r3, #6
 80147be:	d003      	beq.n	80147c8 <pifTaskManager_Add+0x84>
 80147c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d101      	bne.n	80147cc <pifTaskManager_Add+0x88>
 80147c8:	2301      	movs	r3, #1
 80147ca:	e000      	b.n	80147ce <pifTaskManager_Add+0x8a>
 80147cc:	2300      	movs	r3, #0
 80147ce:	b2da      	uxtb	r2, r3
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80147d4:	4b0e      	ldr	r3, [pc, #56]	; (8014810 <pifTaskManager_Add+0xcc>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d105      	bne.n	80147e8 <pifTaskManager_Add+0xa4>
 80147dc:	480b      	ldr	r0, [pc, #44]	; (801480c <pifTaskManager_Add+0xc8>)
 80147de:	f7fe f866 	bl	80128ae <pifFixList_Begin>
 80147e2:	4603      	mov	r3, r0
 80147e4:	4a0a      	ldr	r2, [pc, #40]	; (8014810 <pifTaskManager_Add+0xcc>)
 80147e6:	6013      	str	r3, [r2, #0]
    return p_owner;
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	e008      	b.n	80147fe <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80147ec:	bf00      	nop

fail:
	if (p_owner) {
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d003      	beq.n	80147fc <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 80147f4:	6979      	ldr	r1, [r7, #20]
 80147f6:	4805      	ldr	r0, [pc, #20]	; (801480c <pifTaskManager_Add+0xc8>)
 80147f8:	f7fe f819 	bl	801282e <pifFixList_Remove>
	}
	return NULL;
 80147fc:	2300      	movs	r3, #0
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3718      	adds	r7, #24
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	20001bb5 	.word	0x20001bb5
 801480c:	20001c64 	.word	0x20001c64
 8014810:	20001c7c 	.word	0x20001c7c

08014814 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 801481c:	4b17      	ldr	r3, [pc, #92]	; (801487c <pifTaskManager_Remove+0x68>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	3308      	adds	r3, #8
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	429a      	cmp	r2, r3
 8014826:	d102      	bne.n	801482e <pifTaskManager_Remove+0x1a>
 8014828:	4b14      	ldr	r3, [pc, #80]	; (801487c <pifTaskManager_Remove+0x68>)
 801482a:	2200      	movs	r2, #0
 801482c:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	7a1b      	ldrb	r3, [r3, #8]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d805      	bhi.n	8014842 <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801483a:	4618      	mov	r0, r3
 801483c:	f7ff fb60 	bl	8013f00 <_resetTable>
		break;
 8014840:	e000      	b.n	8014844 <pifTaskManager_Remove+0x30>

	default:
		break;
 8014842:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014844:	6879      	ldr	r1, [r7, #4]
 8014846:	480e      	ldr	r0, [pc, #56]	; (8014880 <pifTaskManager_Remove+0x6c>)
 8014848:	f7fd fff1 	bl	801282e <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 801484c:	480c      	ldr	r0, [pc, #48]	; (8014880 <pifTaskManager_Remove+0x6c>)
 801484e:	f7fe f822 	bl	8012896 <pifFixList_Count>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d103      	bne.n	8014860 <pifTaskManager_Remove+0x4c>
 8014858:	4b08      	ldr	r3, [pc, #32]	; (801487c <pifTaskManager_Remove+0x68>)
 801485a:	2200      	movs	r2, #0
 801485c:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 801485e:	e009      	b.n	8014874 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014860:	4b06      	ldr	r3, [pc, #24]	; (801487c <pifTaskManager_Remove+0x68>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d105      	bne.n	8014874 <pifTaskManager_Remove+0x60>
 8014868:	4805      	ldr	r0, [pc, #20]	; (8014880 <pifTaskManager_Remove+0x6c>)
 801486a:	f7fe f820 	bl	80128ae <pifFixList_Begin>
 801486e:	4603      	mov	r3, r0
 8014870:	4a02      	ldr	r2, [pc, #8]	; (801487c <pifTaskManager_Remove+0x68>)
 8014872:	6013      	str	r3, [r2, #0]
}
 8014874:	bf00      	nop
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	20001c7c 	.word	0x20001c7c
 8014880:	20001c64 	.word	0x20001c64

08014884 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014884:	b580      	push	{r7, lr}
 8014886:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 8014888:	4802      	ldr	r0, [pc, #8]	; (8014894 <pifTaskManager_Count+0x10>)
 801488a:	f7fe f804 	bl	8012896 <pifFixList_Count>
 801488e:	4603      	mov	r3, r0
}
 8014890:	4618      	mov	r0, r3
 8014892:	bd80      	pop	{r7, pc}
 8014894:	20001c64 	.word	0x20001c64

08014898 <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b08a      	sub	sp, #40	; 0x28
 801489c:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 801489e:	2300      	movs	r3, #0
 80148a0:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 80148a2:	2300      	movs	r3, #0
 80148a4:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 80148a6:	2300      	movs	r3, #0
 80148a8:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 80148aa:	2300      	movs	r3, #0
 80148ac:	613b      	str	r3, [r7, #16]
 80148ae:	487e      	ldr	r0, [pc, #504]	; (8014aa8 <pifTaskManager_Loop+0x210>)
 80148b0:	f7fd fff1 	bl	8012896 <pifFixList_Count>
 80148b4:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 80148b6:	2300      	movs	r3, #0
 80148b8:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 80148ba:	4b7c      	ldr	r3, [pc, #496]	; (8014aac <pifTaskManager_Loop+0x214>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d005      	beq.n	80148ce <pifTaskManager_Loop+0x36>
 80148c2:	4b7a      	ldr	r3, [pc, #488]	; (8014aac <pifTaskManager_Loop+0x214>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4798      	blx	r3
 80148c8:	4603      	mov	r3, r0
 80148ca:	4a79      	ldr	r2, [pc, #484]	; (8014ab0 <pifTaskManager_Loop+0x218>)
 80148cc:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80148ce:	4b79      	ldr	r3, [pc, #484]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d109      	bne.n	80148ea <pifTaskManager_Loop+0x52>
		if (!count) return;
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f000 80e1 	beq.w	8014aa0 <pifTaskManager_Loop+0x208>
		s_it_current = pifFixList_Begin(&s_tasks);
 80148de:	4872      	ldr	r0, [pc, #456]	; (8014aa8 <pifTaskManager_Loop+0x210>)
 80148e0:	f7fd ffe5 	bl	80128ae <pifFixList_Begin>
 80148e4:	4603      	mov	r3, r0
 80148e6:	4a73      	ldr	r2, [pc, #460]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80148e8:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80148ea:	4b73      	ldr	r3, [pc, #460]	; (8014ab8 <pifTaskManager_Loop+0x220>)
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	4413      	add	r3, r2
 80148f2:	4a71      	ldr	r2, [pc, #452]	; (8014ab8 <pifTaskManager_Loop+0x220>)
 80148f4:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 80148f6:	4b71      	ldr	r3, [pc, #452]	; (8014abc <pifTaskManager_Loop+0x224>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d012      	beq.n	8014924 <pifTaskManager_Loop+0x8c>
 80148fe:	4b6f      	ldr	r3, [pc, #444]	; (8014abc <pifTaskManager_Loop+0x224>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00c      	beq.n	8014924 <pifTaskManager_Loop+0x8c>
		s_task_cutin->__trigger = FALSE;
 801490a:	4b6c      	ldr	r3, [pc, #432]	; (8014abc <pifTaskManager_Loop+0x224>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2200      	movs	r2, #0
 8014910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014914:	4b69      	ldr	r3, [pc, #420]	; (8014abc <pifTaskManager_Loop+0x224>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 801491a:	2301      	movs	r3, #1
 801491c:	73fb      	strb	r3, [r7, #15]
		i = 1;
 801491e:	2301      	movs	r3, #1
 8014920:	61bb      	str	r3, [r7, #24]
 8014922:	e062      	b.n	80149ea <pifTaskManager_Loop+0x152>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014924:	2300      	movs	r3, #0
 8014926:	617b      	str	r3, [r7, #20]
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	61bb      	str	r3, [r7, #24]
 801492c:	e056      	b.n	80149dc <pifTaskManager_Loop+0x144>
			p_owner = (PifTask*)s_it_current->data;
 801492e:	4b61      	ldr	r3, [pc, #388]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	3308      	adds	r3, #8
 8014934:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801493c:	2b00      	cmp	r3, #0
 801493e:	d008      	beq.n	8014952 <pifTaskManager_Loop+0xba>
				p_owner->__trigger = FALSE;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2200      	movs	r2, #0
 8014944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 801494c:	2301      	movs	r3, #1
 801494e:	73fb      	strb	r3, [r7, #15]
 8014950:	e02d      	b.n	80149ae <pifTaskManager_Loop+0x116>
			}
			else if (!p_owner->pause) {
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	791b      	ldrb	r3, [r3, #4]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d129      	bne.n	80149ae <pifTaskManager_Loop+0x116>
				if (p_owner->_mode == TM_TIMER) {
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	7a1b      	ldrb	r3, [r3, #8]
 801495e:	2b08      	cmp	r3, #8
 8014960:	d107      	bne.n	8014972 <pifTaskManager_Loop+0xda>
					(*p_owner->__evt_loop)(p_owner);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	4798      	blx	r3
					t++;
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	3301      	adds	r3, #1
 801496e:	613b      	str	r3, [r7, #16]
 8014970:	e01d      	b.n	80149ae <pifTaskManager_Loop+0x116>
				}
				else if (p_owner->__processing) {
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014976:	2b00      	cmp	r3, #0
 8014978:	d019      	beq.n	80149ae <pifTaskManager_Loop+0x116>
					if (p_owner->_mode == TM_IDLE_MS) {
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	7a1b      	ldrb	r3, [r3, #8]
 801497e:	2b09      	cmp	r3, #9
 8014980:	d110      	bne.n	80149a4 <pifTaskManager_Loop+0x10c>
						if (!p_idle) {
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d112      	bne.n	80149ae <pifTaskManager_Loop+0x116>
							p_idle = (*p_owner->__processing)(p_owner);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	4798      	blx	r3
 8014990:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014992:	6a3b      	ldr	r3, [r7, #32]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d00a      	beq.n	80149ae <pifTaskManager_Loop+0x116>
								it_idle = s_it_current;
 8014998:	4b46      	ldr	r3, [pc, #280]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	61fb      	str	r3, [r7, #28]
								n = i;
 801499e:	69bb      	ldr	r3, [r7, #24]
 80149a0:	617b      	str	r3, [r7, #20]
 80149a2:	e004      	b.n	80149ae <pifTaskManager_Loop+0x116>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	4798      	blx	r3
 80149ac:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 80149ae:	4b41      	ldr	r3, [pc, #260]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fd ff87 	bl	80128c6 <pifFixList_Next>
 80149b8:	4603      	mov	r3, r0
 80149ba:	4a3e      	ldr	r2, [pc, #248]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80149bc:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 80149be:	4b3d      	ldr	r3, [pc, #244]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d107      	bne.n	80149d6 <pifTaskManager_Loop+0x13e>
				s_it_current = pifFixList_Begin(&s_tasks);
 80149c6:	4838      	ldr	r0, [pc, #224]	; (8014aa8 <pifTaskManager_Loop+0x210>)
 80149c8:	f7fd ff71 	bl	80128ae <pifFixList_Begin>
 80149cc:	4603      	mov	r3, r0
 80149ce:	4a39      	ldr	r2, [pc, #228]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 80149d0:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 80149d2:	f7ff fd15 	bl	8014400 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 80149d6:	69bb      	ldr	r3, [r7, #24]
 80149d8:	3301      	adds	r3, #1
 80149da:	61bb      	str	r3, [r7, #24]
 80149dc:	69ba      	ldr	r2, [r7, #24]
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	da02      	bge.n	80149ea <pifTaskManager_Loop+0x152>
 80149e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d0a1      	beq.n	801492e <pifTaskManager_Loop+0x96>
			}
		}
	}

	if (p_select) {
 80149ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d034      	beq.n	8014a5a <pifTaskManager_Loop+0x1c2>
		if (trigger) {
 80149f0:	7bfb      	ldrb	r3, [r7, #15]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d02d      	beq.n	8014a52 <pifTaskManager_Loop+0x1ba>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80149f6:	4b2d      	ldr	r3, [pc, #180]	; (8014aac <pifTaskManager_Loop+0x214>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d00c      	beq.n	8014a18 <pifTaskManager_Loop+0x180>
 80149fe:	4b2b      	ldr	r3, [pc, #172]	; (8014aac <pifTaskManager_Loop+0x214>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	4798      	blx	r3
 8014a04:	4603      	mov	r3, r0
 8014a06:	b29a      	uxth	r2, r3
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014a16:	e009      	b.n	8014a2c <pifTaskManager_Loop+0x194>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014a18:	4b29      	ldr	r3, [pc, #164]	; (8014ac0 <pifTaskManager_Loop+0x228>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014a30:	461a      	mov	r2, r3
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d904      	bls.n	8014a44 <pifTaskManager_Loop+0x1ac>
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014a3e:	461a      	mov	r2, r3
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a42:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a4a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014a4c:	441a      	add	r2, r3
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a50:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 8014a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a54:	f7ff fc3e 	bl	80142d4 <_processingTask>
 8014a58:	e018      	b.n	8014a8c <pifTaskManager_Loop+0x1f4>
	}
	else if (p_idle) {
 8014a5a:	6a3b      	ldr	r3, [r7, #32]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d015      	beq.n	8014a8c <pifTaskManager_Loop+0x1f4>
		i = n;
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014a64:	69f8      	ldr	r0, [r7, #28]
 8014a66:	f7fd ff2e 	bl	80128c6 <pifFixList_Next>
 8014a6a:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d106      	bne.n	8014a80 <pifTaskManager_Loop+0x1e8>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014a72:	480d      	ldr	r0, [pc, #52]	; (8014aa8 <pifTaskManager_Loop+0x210>)
 8014a74:	f7fd ff1b 	bl	80128ae <pifFixList_Begin>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	4a0e      	ldr	r2, [pc, #56]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 8014a7c:	6013      	str	r3, [r2, #0]
 8014a7e:	e002      	b.n	8014a86 <pifTaskManager_Loop+0x1ee>
		}
		else {
			s_it_current = it_idle;
 8014a80:	4a0c      	ldr	r2, [pc, #48]	; (8014ab4 <pifTaskManager_Loop+0x21c>)
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 8014a86:	6a38      	ldr	r0, [r7, #32]
 8014a88:	f7ff fc24 	bl	80142d4 <_processingTask>
	}
	s_pass_count += i - t;
 8014a8c:	69ba      	ldr	r2, [r7, #24]
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	1ad3      	subs	r3, r2, r3
 8014a92:	461a      	mov	r2, r3
 8014a94:	4b0b      	ldr	r3, [pc, #44]	; (8014ac4 <pifTaskManager_Loop+0x22c>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	4413      	add	r3, r2
 8014a9a:	4a0a      	ldr	r2, [pc, #40]	; (8014ac4 <pifTaskManager_Loop+0x22c>)
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	e000      	b.n	8014aa2 <pifTaskManager_Loop+0x20a>
		if (!count) return;
 8014aa0:	bf00      	nop
}
 8014aa2:	3728      	adds	r7, #40	; 0x28
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	20001c64 	.word	0x20001c64
 8014aac:	20001bdc 	.word	0x20001bdc
 8014ab0:	20001bb8 	.word	0x20001bb8
 8014ab4:	20001c7c 	.word	0x20001c7c
 8014ab8:	20001d24 	.word	0x20001d24
 8014abc:	20001c98 	.word	0x20001c98
 8014ac0:	20001bcc 	.word	0x20001bcc
 8014ac4:	20001d28 	.word	0x20001d28

08014ac8 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08a      	sub	sp, #40	; 0x28
 8014acc:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 8014ada:	2300      	movs	r3, #0
 8014adc:	60fb      	str	r3, [r7, #12]
 8014ade:	488c      	ldr	r0, [pc, #560]	; (8014d10 <pifTaskManager_Yield+0x248>)
 8014ae0:	f7fd fed9 	bl	8012896 <pifFixList_Count>
 8014ae4:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	72fb      	strb	r3, [r7, #11]
	BOOL rtn = TRUE;
 8014aea:	2301      	movs	r3, #1
 8014aec:	72bb      	strb	r3, [r7, #10]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014aee:	4b89      	ldr	r3, [pc, #548]	; (8014d14 <pifTaskManager_Yield+0x24c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d005      	beq.n	8014b02 <pifTaskManager_Yield+0x3a>
 8014af6:	4b87      	ldr	r3, [pc, #540]	; (8014d14 <pifTaskManager_Yield+0x24c>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4798      	blx	r3
 8014afc:	4603      	mov	r3, r0
 8014afe:	4a86      	ldr	r2, [pc, #536]	; (8014d18 <pifTaskManager_Yield+0x250>)
 8014b00:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014b02:	4b86      	ldr	r3, [pc, #536]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10a      	bne.n	8014b20 <pifTaskManager_Yield+0x58>
		if (!count) return FALSE;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d101      	bne.n	8014b14 <pifTaskManager_Yield+0x4c>
 8014b10:	2300      	movs	r3, #0
 8014b12:	e134      	b.n	8014d7e <pifTaskManager_Yield+0x2b6>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014b14:	487e      	ldr	r0, [pc, #504]	; (8014d10 <pifTaskManager_Yield+0x248>)
 8014b16:	f7fd feca 	bl	80128ae <pifFixList_Begin>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	4a7f      	ldr	r2, [pc, #508]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014b1e:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014b20:	4b7f      	ldr	r3, [pc, #508]	; (8014d20 <pifTaskManager_Yield+0x258>)
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	4413      	add	r3, r2
 8014b28:	4a7d      	ldr	r2, [pc, #500]	; (8014d20 <pifTaskManager_Yield+0x258>)
 8014b2a:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 8014b2c:	4b7d      	ldr	r3, [pc, #500]	; (8014d24 <pifTaskManager_Yield+0x25c>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d017      	beq.n	8014b64 <pifTaskManager_Yield+0x9c>
 8014b34:	4b7b      	ldr	r3, [pc, #492]	; (8014d24 <pifTaskManager_Yield+0x25c>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d011      	beq.n	8014b64 <pifTaskManager_Yield+0x9c>
 8014b40:	4b78      	ldr	r3, [pc, #480]	; (8014d24 <pifTaskManager_Yield+0x25c>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	7a5b      	ldrb	r3, [r3, #9]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10c      	bne.n	8014b64 <pifTaskManager_Yield+0x9c>
		s_task_cutin->__trigger = FALSE;
 8014b4a:	4b76      	ldr	r3, [pc, #472]	; (8014d24 <pifTaskManager_Yield+0x25c>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014b54:	4b73      	ldr	r3, [pc, #460]	; (8014d24 <pifTaskManager_Yield+0x25c>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	72fb      	strb	r3, [r7, #11]
		i = 1;
 8014b5e:	2301      	movs	r3, #1
 8014b60:	61bb      	str	r3, [r7, #24]
 8014b62:	e097      	b.n	8014c94 <pifTaskManager_Yield+0x1cc>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014b64:	2300      	movs	r3, #0
 8014b66:	613b      	str	r3, [r7, #16]
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	61bb      	str	r3, [r7, #24]
 8014b6c:	e08a      	b.n	8014c84 <pifTaskManager_Yield+0x1bc>
			p_owner = (PifTask*)s_it_current->data;
 8014b6e:	4b6b      	ldr	r3, [pc, #428]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	3308      	adds	r3, #8
 8014b74:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	7a5b      	ldrb	r3, [r3, #9]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d162      	bne.n	8014c44 <pifTaskManager_Yield+0x17c>
			if (s_task_stack_ptr) {
 8014b7e:	4b6a      	ldr	r3, [pc, #424]	; (8014d28 <pifTaskManager_Yield+0x260>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d021      	beq.n	8014bca <pifTaskManager_Yield+0x102>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014b86:	2300      	movs	r3, #0
 8014b88:	617b      	str	r3, [r7, #20]
 8014b8a:	e012      	b.n	8014bb2 <pifTaskManager_Yield+0xea>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b8c:	4a67      	ldr	r2, [pc, #412]	; (8014d2c <pifTaskManager_Yield+0x264>)
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b94:	795b      	ldrb	r3, [r3, #5]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d008      	beq.n	8014bac <pifTaskManager_Yield+0xe4>
 8014b9a:	4a64      	ldr	r2, [pc, #400]	; (8014d2c <pifTaskManager_Yield+0x264>)
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ba2:	795a      	ldrb	r2, [r3, #5]
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	795b      	ldrb	r3, [r3, #5]
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d008      	beq.n	8014bbe <pifTaskManager_Yield+0xf6>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	3301      	adds	r3, #1
 8014bb0:	617b      	str	r3, [r7, #20]
 8014bb2:	4b5d      	ldr	r3, [pc, #372]	; (8014d28 <pifTaskManager_Yield+0x260>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	697a      	ldr	r2, [r7, #20]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	dbe7      	blt.n	8014b8c <pifTaskManager_Yield+0xc4>
 8014bbc:	e000      	b.n	8014bc0 <pifTaskManager_Yield+0xf8>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014bbe:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 8014bc0:	4b59      	ldr	r3, [pc, #356]	; (8014d28 <pifTaskManager_Yield+0x260>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	697a      	ldr	r2, [r7, #20]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	db3e      	blt.n	8014c48 <pifTaskManager_Yield+0x180>
			}

			if (p_owner->__trigger) {
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d008      	beq.n	8014be6 <pifTaskManager_Yield+0x11e>
				p_owner->__trigger = FALSE;
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014be0:	2301      	movs	r3, #1
 8014be2:	72fb      	strb	r3, [r7, #11]
 8014be4:	e033      	b.n	8014c4e <pifTaskManager_Yield+0x186>
			}
			else if (!p_owner->pause) {
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	791b      	ldrb	r3, [r3, #4]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d12e      	bne.n	8014c4c <pifTaskManager_Yield+0x184>
				if (p_owner->_mode == TM_TIMER) {
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	7a1b      	ldrb	r3, [r3, #8]
 8014bf2:	2b08      	cmp	r3, #8
 8014bf4:	d107      	bne.n	8014c06 <pifTaskManager_Yield+0x13e>
					(*p_owner->__evt_loop)(p_owner);
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bfa:	6838      	ldr	r0, [r7, #0]
 8014bfc:	4798      	blx	r3
					t++;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	3301      	adds	r3, #1
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e023      	b.n	8014c4e <pifTaskManager_Yield+0x186>
				}
				else if (p_owner->__processing) {
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d01e      	beq.n	8014c4c <pifTaskManager_Yield+0x184>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	7a1b      	ldrb	r3, [r3, #8]
 8014c12:	2b09      	cmp	r3, #9
 8014c14:	d110      	bne.n	8014c38 <pifTaskManager_Yield+0x170>
						if (!p_idle) {
 8014c16:	6a3b      	ldr	r3, [r7, #32]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d118      	bne.n	8014c4e <pifTaskManager_Yield+0x186>
							p_idle = (*p_owner->__processing)(p_owner);
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c20:	6838      	ldr	r0, [r7, #0]
 8014c22:	4798      	blx	r3
 8014c24:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014c26:	6a3b      	ldr	r3, [r7, #32]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d010      	beq.n	8014c4e <pifTaskManager_Yield+0x186>
								it_idle = s_it_current;
 8014c2c:	4b3b      	ldr	r3, [pc, #236]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	61fb      	str	r3, [r7, #28]
								n = i;
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	613b      	str	r3, [r7, #16]
 8014c36:	e00a      	b.n	8014c4e <pifTaskManager_Yield+0x186>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c3c:	6838      	ldr	r0, [r7, #0]
 8014c3e:	4798      	blx	r3
 8014c40:	6278      	str	r0, [r7, #36]	; 0x24
 8014c42:	e004      	b.n	8014c4e <pifTaskManager_Yield+0x186>
			if (p_owner->_running) goto next;
 8014c44:	bf00      	nop
 8014c46:	e002      	b.n	8014c4e <pifTaskManager_Yield+0x186>
				if (k < s_task_stack_ptr) goto next;
 8014c48:	bf00      	nop
 8014c4a:	e000      	b.n	8014c4e <pifTaskManager_Yield+0x186>
					}
				}
			}

next:
 8014c4c:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8014c4e:	4b33      	ldr	r3, [pc, #204]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7fd fe37 	bl	80128c6 <pifFixList_Next>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	4a30      	ldr	r2, [pc, #192]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014c5c:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014c5e:	4b2f      	ldr	r3, [pc, #188]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d10b      	bne.n	8014c7e <pifTaskManager_Yield+0x1b6>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014c66:	482a      	ldr	r0, [pc, #168]	; (8014d10 <pifTaskManager_Yield+0x248>)
 8014c68:	f7fd fe21 	bl	80128ae <pifFixList_Begin>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	4a2b      	ldr	r2, [pc, #172]	; (8014d1c <pifTaskManager_Yield+0x254>)
 8014c70:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 8014c72:	4b2d      	ldr	r3, [pc, #180]	; (8014d28 <pifTaskManager_Yield+0x260>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <pifTaskManager_Yield+0x1b6>
 8014c7a:	f7ff fbc1 	bl	8014400 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	3301      	adds	r3, #1
 8014c82:	61bb      	str	r3, [r7, #24]
 8014c84:	69ba      	ldr	r2, [r7, #24]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	da03      	bge.n	8014c94 <pifTaskManager_Yield+0x1cc>
 8014c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	f43f af6d 	beq.w	8014b6e <pifTaskManager_Yield+0xa6>
			}
		}
	}

	if (p_select) {
 8014c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d04c      	beq.n	8014d34 <pifTaskManager_Yield+0x26c>
		if (trigger && s_task_stack_ptr) {
 8014c9a:	7afb      	ldrb	r3, [r7, #11]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d031      	beq.n	8014d04 <pifTaskManager_Yield+0x23c>
 8014ca0:	4b21      	ldr	r3, [pc, #132]	; (8014d28 <pifTaskManager_Yield+0x260>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d02d      	beq.n	8014d04 <pifTaskManager_Yield+0x23c>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014ca8:	4b1a      	ldr	r3, [pc, #104]	; (8014d14 <pifTaskManager_Yield+0x24c>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d00c      	beq.n	8014cca <pifTaskManager_Yield+0x202>
 8014cb0:	4b18      	ldr	r3, [pc, #96]	; (8014d14 <pifTaskManager_Yield+0x24c>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4798      	blx	r3
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	1ad3      	subs	r3, r2, r3
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014cc8:	e009      	b.n	8014cde <pifTaskManager_Yield+0x216>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014cca:	4b19      	ldr	r3, [pc, #100]	; (8014d30 <pifTaskManager_Yield+0x268>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	b29a      	uxth	r2, r3
 8014cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cdc:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d904      	bls.n	8014cf6 <pifTaskManager_Yield+0x22e>
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf4:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cfc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014cfe:	441a      	add	r2, r3
 8014d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d02:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    rtn = _processingTask(p_select);
 8014d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d06:	f7ff fae5 	bl	80142d4 <_processingTask>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	72bb      	strb	r3, [r7, #10]
 8014d0e:	e02c      	b.n	8014d6a <pifTaskManager_Yield+0x2a2>
 8014d10:	20001c64 	.word	0x20001c64
 8014d14:	20001bdc 	.word	0x20001bdc
 8014d18:	20001bb8 	.word	0x20001bb8
 8014d1c:	20001c7c 	.word	0x20001c7c
 8014d20:	20001d24 	.word	0x20001d24
 8014d24:	20001c98 	.word	0x20001c98
 8014d28:	20001c94 	.word	0x20001c94
 8014d2c:	20001c80 	.word	0x20001c80
 8014d30:	20001bcc 	.word	0x20001bcc
	}
	else if (p_idle) {
 8014d34:	6a3b      	ldr	r3, [r7, #32]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d017      	beq.n	8014d6a <pifTaskManager_Yield+0x2a2>
		i = n;
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014d3e:	69f8      	ldr	r0, [r7, #28]
 8014d40:	f7fd fdc1 	bl	80128c6 <pifFixList_Next>
 8014d44:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014d46:	69fb      	ldr	r3, [r7, #28]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d106      	bne.n	8014d5a <pifTaskManager_Yield+0x292>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014d4c:	480e      	ldr	r0, [pc, #56]	; (8014d88 <pifTaskManager_Yield+0x2c0>)
 8014d4e:	f7fd fdae 	bl	80128ae <pifFixList_Begin>
 8014d52:	4603      	mov	r3, r0
 8014d54:	4a0d      	ldr	r2, [pc, #52]	; (8014d8c <pifTaskManager_Yield+0x2c4>)
 8014d56:	6013      	str	r3, [r2, #0]
 8014d58:	e002      	b.n	8014d60 <pifTaskManager_Yield+0x298>
		}
		else {
			s_it_current = it_idle;
 8014d5a:	4a0c      	ldr	r2, [pc, #48]	; (8014d8c <pifTaskManager_Yield+0x2c4>)
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	6013      	str	r3, [r2, #0]
		}
	    rtn = _processingTask(p_idle);
 8014d60:	6a38      	ldr	r0, [r7, #32]
 8014d62:	f7ff fab7 	bl	80142d4 <_processingTask>
 8014d66:	4603      	mov	r3, r0
 8014d68:	72bb      	strb	r3, [r7, #10]
	}
	s_pass_count += i - t;
 8014d6a:	69ba      	ldr	r2, [r7, #24]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	1ad3      	subs	r3, r2, r3
 8014d70:	461a      	mov	r2, r3
 8014d72:	4b07      	ldr	r3, [pc, #28]	; (8014d90 <pifTaskManager_Yield+0x2c8>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	4413      	add	r3, r2
 8014d78:	4a05      	ldr	r2, [pc, #20]	; (8014d90 <pifTaskManager_Yield+0x2c8>)
 8014d7a:	6013      	str	r3, [r2, #0]
    return rtn;
 8014d7c:	7abb      	ldrb	r3, [r7, #10]
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3728      	adds	r7, #40	; 0x28
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	20001c64 	.word	0x20001c64
 8014d8c:	20001c7c 	.word	0x20001c7c
 8014d90:	20001d28 	.word	0x20001d28

08014d94 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b084      	sub	sp, #16
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d101      	bne.n	8014da6 <pifTaskManager_YieldMs+0x12>
 8014da2:	2300      	movs	r3, #0
 8014da4:	e011      	b.n	8014dca <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014da6:	4b0b      	ldr	r3, [pc, #44]	; (8014dd4 <pifTaskManager_YieldMs+0x40>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014dac:	f7ff fe8c 	bl	8014ac8 <pifTaskManager_Yield>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <pifTaskManager_YieldMs+0x26>
 8014db6:	2300      	movs	r3, #0
 8014db8:	e007      	b.n	8014dca <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014dba:	4b06      	ldr	r3, [pc, #24]	; (8014dd4 <pifTaskManager_YieldMs+0x40>)
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d2f1      	bcs.n	8014dac <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014dc8:	2301      	movs	r3, #1
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3710      	adds	r7, #16
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	20001bcc 	.word	0x20001bcc

08014dd8 <pifTaskManager_Print>:
    }
    return TRUE;
}

void pifTaskManager_Print()
{
 8014dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dda:	b091      	sub	sp, #68	; 0x44
 8014ddc:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 8014dde:	4b40      	ldr	r3, [pc, #256]	; (8014ee0 <pifTaskManager_Print+0x108>)
 8014de0:	463c      	mov	r4, r7
 8014de2:	461d      	mov	r5, r3
 8014de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014df0:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 8014df4:	483b      	ldr	r0, [pc, #236]	; (8014ee4 <pifTaskManager_Print+0x10c>)
 8014df6:	f7fd fd4e 	bl	8012896 <pifFixList_Count>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	493a      	ldr	r1, [pc, #232]	; (8014ee8 <pifTaskManager_Print+0x110>)
 8014e00:	2000      	movs	r0, #0
 8014e02:	f7fe fb7d 	bl	8013500 <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 8014e06:	4837      	ldr	r0, [pc, #220]	; (8014ee4 <pifTaskManager_Print+0x10c>)
 8014e08:	f7fd fd51 	bl	80128ae <pifFixList_Begin>
 8014e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014e0e:	e05f      	b.n	8014ed0 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	3308      	adds	r3, #8
 8014e14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 8014e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d007      	beq.n	8014e2e <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8014e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	461a      	mov	r2, r3
 8014e24:	4931      	ldr	r1, [pc, #196]	; (8014eec <pifTaskManager_Print+0x114>)
 8014e26:	2000      	movs	r0, #0
 8014e28:	f7fe fb6a 	bl	8013500 <pifLog_Printf>
 8014e2c:	e003      	b.n	8014e36 <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8014e2e:	4930      	ldr	r1, [pc, #192]	; (8014ef0 <pifTaskManager_Print+0x118>)
 8014e30:	2000      	movs	r0, #0
 8014e32:	f7fe fad7 	bl	80133e4 <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e38:	88db      	ldrh	r3, [r3, #6]
 8014e3a:	461e      	mov	r6, r3
 8014e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3e:	7a1b      	ldrb	r3, [r3, #8]
 8014e40:	009b      	lsls	r3, r3, #2
 8014e42:	3330      	adds	r3, #48	; 0x30
 8014e44:	443b      	add	r3, r7
 8014e46:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4c:	895b      	ldrh	r3, [r3, #10]
 8014e4e:	461d      	mov	r5, r3
 8014e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e52:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e56:	6951      	ldr	r1, [r2, #20]
 8014e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e5a:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e5c:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014e62:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e64:	4c23      	ldr	r4, [pc, #140]	; (8014ef4 <pifTaskManager_Print+0x11c>)
 8014e66:	fba4 4101 	umull	r4, r1, r4, r1
 8014e6a:	0989      	lsrs	r1, r1, #6
 8014e6c:	9103      	str	r1, [sp, #12]
 8014e6e:	9202      	str	r2, [sp, #8]
 8014e70:	9301      	str	r3, [sp, #4]
 8014e72:	9500      	str	r5, [sp, #0]
 8014e74:	4603      	mov	r3, r0
 8014e76:	4632      	mov	r2, r6
 8014e78:	491f      	ldr	r1, [pc, #124]	; (8014ef8 <pifTaskManager_Print+0x120>)
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	f7fe fb40 	bl	8013500 <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8014e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e82:	69db      	ldr	r3, [r3, #28]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00a      	beq.n	8014e9e <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8014e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e8a:	69da      	ldr	r2, [r3, #28]
 8014e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e8e:	6a1b      	ldr	r3, [r3, #32]
 8014e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e94:	461a      	mov	r2, r3
 8014e96:	4919      	ldr	r1, [pc, #100]	; (8014efc <pifTaskManager_Print+0x124>)
 8014e98:	2000      	movs	r0, #0
 8014e9a:	f7fe fb31 	bl	8013500 <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8014e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00c      	beq.n	8014ec0 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 8014ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb0:	699b      	ldr	r3, [r3, #24]
 8014eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014eb6:	460a      	mov	r2, r1
 8014eb8:	4911      	ldr	r1, [pc, #68]	; (8014f00 <pifTaskManager_Print+0x128>)
 8014eba:	2000      	movs	r0, #0
 8014ebc:	f7fe fb20 	bl	8013500 <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 8014ec0:	4910      	ldr	r1, [pc, #64]	; (8014f04 <pifTaskManager_Print+0x12c>)
 8014ec2:	2000      	movs	r0, #0
 8014ec4:	f7fe fa8e 	bl	80133e4 <pifLog_Print>
		it = pifFixList_Next(it);
 8014ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014eca:	f7fd fcfc 	bl	80128c6 <pifFixList_Next>
 8014ece:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d19c      	bne.n	8014e10 <pifTaskManager_Print+0x38>
	}
}
 8014ed6:	bf00      	nop
 8014ed8:	bf00      	nop
 8014eda:	3734      	adds	r7, #52	; 0x34
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ee0:	0802743c 	.word	0x0802743c
 8014ee4:	20001c64 	.word	0x20001c64
 8014ee8:	080273c4 	.word	0x080273c4
 8014eec:	080273d4 	.word	0x080273d4
 8014ef0:	080273dc 	.word	0x080273dc
 8014ef4:	10624dd3 	.word	0x10624dd3
 8014ef8:	080273e4 	.word	0x080273e4
 8014efc:	08027410 	.word	0x08027410
 8014f00:	08027420 	.word	0x08027420
 8014f04:	08027438 	.word	0x08027438

08014f08 <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	68db      	ldr	r3, [r3, #12]
 8014f14:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	3308      	adds	r3, #8
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7fd fcc7 	bl	80128ae <pifFixList_Begin>
 8014f20:	6178      	str	r0, [r7, #20]
	while (it) {
 8014f22:	e017      	b.n	8014f54 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	3308      	adds	r3, #8
 8014f28:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	7f1b      	ldrb	r3, [r3, #28]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d00c      	beq.n	8014f4c <_doTask+0x44>
			p_timer->__event = FALSE;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	2200      	movs	r2, #0
 8014f36:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6a1b      	ldr	r3, [r3, #32]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d005      	beq.n	8014f4c <_doTask+0x44>
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	6a1b      	ldr	r3, [r3, #32]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	6912      	ldr	r2, [r2, #16]
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014f4c:	6978      	ldr	r0, [r7, #20]
 8014f4e:	f7fd fcba 	bl	80128c6 <pifFixList_Next>
 8014f52:	6178      	str	r0, [r7, #20]
	while (it) {
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d1e4      	bne.n	8014f24 <_doTask+0x1c>
	}
	return 0;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3718      	adds	r7, #24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af02      	add	r7, sp, #8
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	603b      	str	r3, [r7, #0]
 8014f70:	460b      	mov	r3, r1
 8014f72:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d002      	beq.n	8014f80 <pifTimerManager_Init+0x1c>
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d104      	bne.n	8014f8a <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014f80:	4b21      	ldr	r3, [pc, #132]	; (8015008 <pifTimerManager_Init+0xa4>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014f86:	2300      	movs	r3, #0
 8014f88:	e03a      	b.n	8015000 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014f8a:	2224      	movs	r2, #36	; 0x24
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f00d fca8 	bl	80228e4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014f94:	897b      	ldrh	r3, [r7, #10]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d106      	bne.n	8014fa8 <pifTimerManager_Init+0x44>
 8014f9a:	4b1c      	ldr	r3, [pc, #112]	; (801500c <pifTimerManager_Init+0xa8>)
 8014f9c:	881b      	ldrh	r3, [r3, #0]
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	b291      	uxth	r1, r2
 8014fa2:	4a1a      	ldr	r2, [pc, #104]	; (801500c <pifTimerManager_Init+0xa8>)
 8014fa4:	8011      	strh	r1, [r2, #0]
 8014fa6:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	897a      	ldrh	r2, [r7, #10]
 8014fac:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	3308      	adds	r3, #8
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	2128      	movs	r1, #40	; 0x28
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fd fb72 	bl	80126a0 <pifFixList_Init>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d017      	beq.n	8014ff2 <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 8014fc8:	2301      	movs	r3, #1
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	4a10      	ldr	r2, [pc, #64]	; (8015010 <pifTimerManager_Init+0xac>)
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	2008      	movs	r0, #8
 8014fd4:	f7ff fbb6 	bl	8014744 <pifTaskManager_Add>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	6a1b      	ldr	r3, [r3, #32]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d007      	beq.n	8014ff6 <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	6a1b      	ldr	r3, [r3, #32]
 8014fea:	4a0a      	ldr	r2, [pc, #40]	; (8015014 <pifTimerManager_Init+0xb0>)
 8014fec:	601a      	str	r2, [r3, #0]
    return TRUE;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e006      	b.n	8015000 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014ff2:	bf00      	nop
 8014ff4:	e000      	b.n	8014ff8 <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 8014ff6:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014ff8:	68f8      	ldr	r0, [r7, #12]
 8014ffa:	f000 f80d 	bl	8015018 <pifTimerManager_Clear>
    return FALSE;
 8014ffe:	2300      	movs	r3, #0
}
 8015000:	4618      	mov	r0, r3
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	20001bb5 	.word	0x20001bb5
 801500c:	20000128 	.word	0x20000128
 8015010:	08014f09 	.word	0x08014f09
 8015014:	08027490 	.word	0x08027490

08015018 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6a1b      	ldr	r3, [r3, #32]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d007      	beq.n	8015038 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6a1b      	ldr	r3, [r3, #32]
 801502c:	4618      	mov	r0, r3
 801502e:	f7ff fbf1 	bl	8014814 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2200      	movs	r2, #0
 8015036:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3308      	adds	r3, #8
 801503c:	2100      	movs	r1, #0
 801503e:	4618      	mov	r0, r3
 8015040:	f7fd fb8e 	bl	8012760 <pifFixList_Clear>
}
 8015044:	bf00      	nop
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b084      	sub	sp, #16
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	460b      	mov	r3, r1
 8015056:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3308      	adds	r3, #8
 801505c:	4618      	mov	r0, r3
 801505e:	f7fd fbb2 	bl	80127c6 <pifFixList_AddFirst>
 8015062:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <pifTimerManager_Add+0x22>
 801506a:	2300      	movs	r3, #0
 801506c:	e006      	b.n	801507c <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	78fa      	ldrb	r2, [r7, #3]
 8015072:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2200      	movs	r2, #0
 8015078:	725a      	strb	r2, [r3, #9]
    return p_timer;
 801507a:	68fb      	ldr	r3, [r7, #12]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2202      	movs	r2, #2
 8015090:	725a      	strb	r2, [r3, #9]
}
 8015092:	bf00      	nop
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	3308      	adds	r3, #8
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fd fbf3 	bl	8012896 <pifFixList_Count>
 80150b0:	4603      	mov	r3, r0
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3708      	adds	r7, #8
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
	...

080150bc <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
	if (!target) {
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d104      	bne.n	80150d6 <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 80150cc:	4b11      	ldr	r3, [pc, #68]	; (8015114 <pifTimer_Start+0x58>)
 80150ce:	2201      	movs	r2, #1
 80150d0:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80150d2:	2300      	movs	r3, #0
 80150d4:	e017      	b.n	8015106 <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	7a5b      	ldrb	r3, [r3, #9]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d105      	bne.n	80150ea <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2201      	movs	r2, #1
 80150e2:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	683a      	ldr	r2, [r7, #0]
 80150ee:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	683a      	ldr	r2, [r7, #0]
 80150f4:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	7a1b      	ldrb	r3, [r3, #8]
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d102      	bne.n	8015104 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2200      	movs	r2, #0
 8015102:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8015104:	2301      	movs	r3, #1
}
 8015106:	4618      	mov	r0, r3
 8015108:	370c      	adds	r7, #12
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	20001bb5 	.word	0x20001bb5

08015118 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2200      	movs	r2, #0
 8015124:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	7a1b      	ldrb	r3, [r3, #8]
 8015130:	2b02      	cmp	r3, #2
 8015132:	d103      	bne.n	801513c <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	2000      	movs	r0, #0
 801513a:	4798      	blx	r3
	}
}
 801513c:	bf00      	nop
 801513e:	3708      	adds	r7, #8
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8015144:	b480      	push	{r7}
 8015146:	b083      	sub	sp, #12
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2201      	movs	r2, #1
 8015158:	725a      	strb	r2, [r3, #9]
}
 801515a:	bf00      	nop
 801515c:	370c      	adds	r7, #12
 801515e:	46bd      	mov	sp, r7
 8015160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015164:	4770      	bx	lr

08015166 <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b086      	sub	sp, #24
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 801516e:	2300      	movs	r3, #0
 8015170:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	f000 8092 	beq.w	801529e <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	3308      	adds	r3, #8
 801517e:	4618      	mov	r0, r3
 8015180:	f7fd fb95 	bl	80128ae <pifFixList_Begin>
 8015184:	6138      	str	r0, [r7, #16]
	while (it) {
 8015186:	e07c      	b.n	8015282 <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	3308      	adds	r3, #8
 801518c:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	7a5b      	ldrb	r3, [r3, #9]
 8015192:	2b02      	cmp	r3, #2
 8015194:	d105      	bne.n	80151a2 <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d16e      	bne.n	801527a <pifTimerManager_sigTick+0x114>
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	617b      	str	r3, [r7, #20]
 80151a0:	e06b      	b.n	801527a <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d060      	beq.n	801526c <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	68db      	ldr	r3, [r3, #12]
 80151ae:	1e5a      	subs	r2, r3, #1
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	7a1b      	ldrb	r3, [r3, #8]
 80151b8:	2b02      	cmp	r3, #2
 80151ba:	d031      	beq.n	8015220 <pifTimerManager_sigTick+0xba>
 80151bc:	2b02      	cmp	r3, #2
 80151be:	dc5c      	bgt.n	801527a <pifTimerManager_sigTick+0x114>
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d002      	beq.n	80151ca <pifTimerManager_sigTick+0x64>
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d015      	beq.n	80151f4 <pifTimerManager_sigTick+0x8e>
 80151c8:	e057      	b.n	801527a <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	68db      	ldr	r3, [r3, #12]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d14e      	bne.n	8015270 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	2200      	movs	r2, #0
 80151d6:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2201      	movs	r2, #1
 80151dc:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d044      	beq.n	8015270 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	6952      	ldr	r2, [r2, #20]
 80151ee:	4610      	mov	r0, r2
 80151f0:	4798      	blx	r3
					}
				}
				break;
 80151f2:	e03d      	b.n	8015270 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d13b      	bne.n	8015274 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2201      	movs	r2, #1
 8015208:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801520e:	2b00      	cmp	r3, #0
 8015210:	d030      	beq.n	8015274 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015216:	68fa      	ldr	r2, [r7, #12]
 8015218:	6952      	ldr	r2, [r2, #20]
 801521a:	4610      	mov	r0, r2
 801521c:	4798      	blx	r3
					}
				}
				break;
 801521e:	e029      	b.n	8015274 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	699a      	ldr	r2, [r3, #24]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	429a      	cmp	r2, r3
 801522a:	d016      	beq.n	801525a <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d107      	bne.n	8015244 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	2000      	movs	r0, #0
 801523a:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	68da      	ldr	r2, [r3, #12]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	699b      	ldr	r3, [r3, #24]
 801524c:	429a      	cmp	r2, r3
 801524e:	d113      	bne.n	8015278 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	2001      	movs	r0, #1
 8015256:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8015258:	e00e      	b.n	8015278 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	68db      	ldr	r3, [r3, #12]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d10a      	bne.n	8015278 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	60da      	str	r2, [r3, #12]
				break;
 801526a:	e005      	b.n	8015278 <pifTimerManager_sigTick+0x112>
			}
		}
 801526c:	bf00      	nop
 801526e:	e004      	b.n	801527a <pifTimerManager_sigTick+0x114>
				break;
 8015270:	bf00      	nop
 8015272:	e002      	b.n	801527a <pifTimerManager_sigTick+0x114>
				break;
 8015274:	bf00      	nop
 8015276:	e000      	b.n	801527a <pifTimerManager_sigTick+0x114>
				break;
 8015278:	bf00      	nop

		it = pifFixList_Next(it);
 801527a:	6938      	ldr	r0, [r7, #16]
 801527c:	f7fd fb23 	bl	80128c6 <pifFixList_Next>
 8015280:	6138      	str	r0, [r7, #16]
	while (it) {
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	2b00      	cmp	r3, #0
 8015286:	f47f af7f 	bne.w	8015188 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d007      	beq.n	80152a0 <pifTimerManager_sigTick+0x13a>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	3308      	adds	r3, #8
 8015294:	6979      	ldr	r1, [r7, #20]
 8015296:	4618      	mov	r0, r3
 8015298:	f7fd fac9 	bl	801282e <pifFixList_Remove>
 801529c:	e000      	b.n	80152a0 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 801529e:	bf00      	nop
}
 80152a0:	3718      	adds	r7, #24
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 80152a6:	b480      	push	{r7}
 80152a8:	b085      	sub	sp, #20
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	60f8      	str	r0, [r7, #12]
 80152ae:	60b9      	str	r1, [r7, #8]
 80152b0:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	68ba      	ldr	r2, [r7, #8]
 80152b6:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	611a      	str	r2, [r3, #16]
}
 80152be:	bf00      	nop
 80152c0:	3714      	adds	r7, #20
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr
	...

080152cc <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	460b      	mov	r3, r1
 80152d6:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d104      	bne.n	80152e8 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80152de:	4b09      	ldr	r3, [pc, #36]	; (8015304 <pifNoiseFilter_Init+0x38>)
 80152e0:	2201      	movs	r2, #1
 80152e2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80152e4:	2300      	movs	r3, #0
 80152e6:	e008      	b.n	80152fa <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 80152e8:	2208      	movs	r2, #8
 80152ea:	2100      	movs	r1, #0
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f00d faf9 	bl	80228e4 <memset>

    p_owner->_type = type;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	78fa      	ldrb	r2, [r7, #3]
 80152f6:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80152f8:	2301      	movs	r3, #1
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	20001bb5 	.word	0x20001bb5

08015308 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	6839      	ldr	r1, [r7, #0]
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	4798      	blx	r3
 801531c:	4603      	mov	r3, r0
}
 801531e:	4618      	mov	r0, r3
 8015320:	3708      	adds	r7, #8
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}

08015326 <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 8015326:	b580      	push	{r7, lr}
 8015328:	b082      	sub	sp, #8
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d002      	beq.n	801533c <_clear+0x16>
 8015336:	2b02      	cmp	r3, #2
 8015338:	d00d      	beq.n	8015356 <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 801533a:	e01c      	b.n	8015376 <_clear+0x50>
		if (p_owner->__wf.value) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	699b      	ldr	r3, [r3, #24]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d015      	beq.n	8015370 <_clear+0x4a>
			free(p_owner->__wf.value);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	699b      	ldr	r3, [r3, #24]
 8015348:	4618      	mov	r0, r3
 801534a:	f00d fab5 	bl	80228b8 <free>
			p_owner->__wf.value = NULL;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2200      	movs	r2, #0
 8015352:	619a      	str	r2, [r3, #24]
		break;
 8015354:	e00c      	b.n	8015370 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	69db      	ldr	r3, [r3, #28]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00a      	beq.n	8015374 <_clear+0x4e>
			free(p_owner->__nc.diff);
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	69db      	ldr	r3, [r3, #28]
 8015362:	4618      	mov	r0, r3
 8015364:	f00d faa8 	bl	80228b8 <free>
			p_owner->__nc.diff = NULL;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2200      	movs	r2, #0
 801536c:	61da      	str	r2, [r3, #28]
		break;
 801536e:	e001      	b.n	8015374 <_clear+0x4e>
		break;
 8015370:	bf00      	nop
 8015372:	e000      	b.n	8015376 <_clear+0x50>
		break;
 8015374:	bf00      	nop
	}
}
 8015376:	bf00      	nop
 8015378:	3708      	adds	r7, #8
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 801537e:	b480      	push	{r7}
 8015380:	b085      	sub	sp, #20
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
 8015386:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015392:	3301      	adds	r3, #1
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801539a:	fb93 f1f2 	sdiv	r1, r3, r2
 801539e:	fb01 f202 	mul.w	r2, r1, r2
 80153a2:	1a9b      	subs	r3, r3, r2
 80153a4:	b25a      	sxtb	r2, r3
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	699a      	ldr	r2, [r3, #24]
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	6919      	ldr	r1, [r3, #16]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153b8:	009b      	lsls	r3, r3, #2
 80153ba:	440b      	add	r3, r1
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	1ad2      	subs	r2, r2, r3
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	691a      	ldr	r2, [r3, #16]
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	4413      	add	r3, r2
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	6812      	ldr	r2, [r2, #0]
 80153d6:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	699a      	ldr	r2, [r3, #24]
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	6919      	ldr	r1, [r3, #16]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	440b      	add	r3, r1
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	441a      	add	r2, r3
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	699b      	ldr	r3, [r3, #24]
 80153f6:	68fa      	ldr	r2, [r7, #12]
 80153f8:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80153fc:	fb93 f2f2 	sdiv	r2, r3, r2
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	330c      	adds	r3, #12
}
 8015408:	4618      	mov	r0, r3
 801540a:	3714      	adds	r7, #20
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015414:	b480      	push	{r7}
 8015416:	b08b      	sub	sp, #44	; 0x2c
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 8015422:	69bb      	ldr	r3, [r7, #24]
 8015424:	69da      	ldr	r2, [r3, #28]
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801542c:	4619      	mov	r1, r3
 801542e:	460b      	mov	r3, r1
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	440b      	add	r3, r1
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4413      	add	r3, r2
 8015438:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	b29a      	uxth	r2, r3
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	6919      	ldr	r1, [r3, #16]
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	440b      	add	r3, r1
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	b29b      	uxth	r3, r3
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	b29b      	uxth	r3, r3
 8015456:	b21b      	sxth	r3, r3
 8015458:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 801545a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801545e:	b29a      	uxth	r2, r3
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015466:	b29b      	uxth	r3, r3
 8015468:	1ad3      	subs	r3, r2, r3
 801546a:	b29b      	uxth	r3, r3
 801546c:	b21b      	sxth	r3, r3
 801546e:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015470:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015474:	2b00      	cmp	r3, #0
 8015476:	da06      	bge.n	8015486 <_processNoiseCancel+0x72>
 8015478:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801547c:	b29b      	uxth	r3, r3
 801547e:	425b      	negs	r3, r3
 8015480:	b29b      	uxth	r3, r3
 8015482:	b21b      	sxth	r3, r3
 8015484:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 8015486:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801548a:	b29a      	uxth	r2, r3
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015492:	b29b      	uxth	r3, r3
 8015494:	4413      	add	r3, r2
 8015496:	b29b      	uxth	r3, r3
 8015498:	b21b      	sxth	r3, r3
 801549a:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 801549c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	da06      	bge.n	80154b2 <_processNoiseCancel+0x9e>
 80154a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154a8:	b29b      	uxth	r3, r3
 80154aa:	425b      	negs	r3, r3
 80154ac:	b29b      	uxth	r3, r3
 80154ae:	b21b      	sxth	r3, r3
 80154b0:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 80154b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80154b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	dd6d      	ble.n	801559a <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	691a      	ldr	r2, [r3, #16]
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	4413      	add	r3, r2
 80154cc:	683a      	ldr	r2, [r7, #0]
 80154ce:	6812      	ldr	r2, [r2, #0]
 80154d0:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	69da      	ldr	r2, [r3, #28]
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80154e0:	4619      	mov	r1, r3
 80154e2:	460b      	mov	r3, r1
 80154e4:	005b      	lsls	r3, r3, #1
 80154e6:	440b      	add	r3, r1
 80154e8:	005b      	lsls	r3, r3, #1
 80154ea:	4413      	add	r3, r2
 80154ec:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	691a      	ldr	r2, [r3, #16]
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	4413      	add	r3, r2
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	b29a      	uxth	r2, r3
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	6919      	ldr	r1, [r3, #16]
 8015504:	69bb      	ldr	r3, [r7, #24]
 8015506:	f993 3018 	ldrsb.w	r3, [r3, #24]
 801550a:	009b      	lsls	r3, r3, #2
 801550c:	440b      	add	r3, r1
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	b29b      	uxth	r3, r3
 8015512:	1ad3      	subs	r3, r2, r3
 8015514:	b29b      	uxth	r3, r3
 8015516:	b21a      	sxth	r2, r3
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015522:	b29a      	uxth	r2, r3
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801552a:	b29b      	uxth	r3, r3
 801552c:	1ad3      	subs	r3, r2, r3
 801552e:	b29a      	uxth	r2, r3
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	3302      	adds	r3, #2
 8015534:	b212      	sxth	r2, r2
 8015536:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	3302      	adds	r3, #2
 801553c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015540:	2b00      	cmp	r3, #0
 8015542:	da0a      	bge.n	801555a <_processNoiseCancel+0x146>
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	3302      	adds	r3, #2
 8015548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801554c:	b29b      	uxth	r3, r3
 801554e:	425b      	negs	r3, r3
 8015550:	b29a      	uxth	r2, r3
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	3302      	adds	r3, #2
 8015556:	b212      	sxth	r2, r2
 8015558:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 801555a:	693b      	ldr	r3, [r7, #16]
 801555c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015560:	b29a      	uxth	r2, r3
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015568:	b29b      	uxth	r3, r3
 801556a:	4413      	add	r3, r2
 801556c:	b29a      	uxth	r2, r3
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	3304      	adds	r3, #4
 8015572:	b212      	sxth	r2, r2
 8015574:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	3304      	adds	r3, #4
 801557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801557e:	2b00      	cmp	r3, #0
 8015580:	da43      	bge.n	801560a <_processNoiseCancel+0x1f6>
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	3304      	adds	r3, #4
 8015586:	f9b3 3000 	ldrsh.w	r3, [r3]
 801558a:	b29b      	uxth	r3, r3
 801558c:	425b      	negs	r3, r3
 801558e:	b29a      	uxth	r2, r3
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	3304      	adds	r3, #4
 8015594:	b212      	sxth	r2, r2
 8015596:	801a      	strh	r2, [r3, #0]
 8015598:	e037      	b.n	801560a <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	f993 2014 	ldrsb.w	r2, [r3, #20]
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80155aa:	3301      	adds	r3, #1
 80155ac:	69ba      	ldr	r2, [r7, #24]
 80155ae:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80155b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80155b6:	fb01 f202 	mul.w	r2, r1, r2
 80155ba:	1a9b      	subs	r3, r3, r2
 80155bc:	b25a      	sxtb	r2, r3
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	691a      	ldr	r2, [r3, #16]
 80155c6:	69bb      	ldr	r3, [r7, #24]
 80155c8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80155cc:	009b      	lsls	r3, r3, #2
 80155ce:	4413      	add	r3, r2
 80155d0:	683a      	ldr	r2, [r7, #0]
 80155d2:	6812      	ldr	r2, [r2, #0]
 80155d4:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	69da      	ldr	r2, [r3, #28]
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80155e0:	4619      	mov	r1, r3
 80155e2:	460b      	mov	r3, r1
 80155e4:	005b      	lsls	r3, r3, #1
 80155e6:	440b      	add	r3, r1
 80155e8:	005b      	lsls	r3, r3, #1
 80155ea:	4413      	add	r3, r2
 80155ec:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 80155ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	3302      	adds	r3, #2
 80155fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80155fe:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	3304      	adds	r3, #4
 8015604:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015608:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 801560a:	2300      	movs	r3, #0
 801560c:	61fb      	str	r3, [r7, #28]
	count = 0;
 801560e:	2300      	movs	r3, #0
 8015610:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015612:	2300      	movs	r3, #0
 8015614:	627b      	str	r3, [r7, #36]	; 0x24
 8015616:	e00e      	b.n	8015636 <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	691a      	ldr	r2, [r3, #16]
 801561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	4413      	add	r3, r2
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	69fa      	ldr	r2, [r7, #28]
 8015626:	4413      	add	r3, r2
 8015628:	61fb      	str	r3, [r7, #28]
		count++;
 801562a:	6a3b      	ldr	r3, [r7, #32]
 801562c:	3301      	adds	r3, #1
 801562e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015632:	3301      	adds	r3, #1
 8015634:	627b      	str	r3, [r7, #36]	; 0x24
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801563c:	461a      	mov	r2, r3
 801563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015640:	4293      	cmp	r3, r2
 8015642:	dbe9      	blt.n	8015618 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 8015644:	6a3b      	ldr	r3, [r7, #32]
 8015646:	2b00      	cmp	r3, #0
 8015648:	dd05      	ble.n	8015656 <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 801564a:	69fa      	ldr	r2, [r7, #28]
 801564c:	6a3b      	ldr	r3, [r7, #32]
 801564e:	fb92 f2f3 	sdiv	r2, r2, r3
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 8015656:	69bb      	ldr	r3, [r7, #24]
 8015658:	330c      	adds	r3, #12
}
 801565a:	4618      	mov	r0, r3
 801565c:	372c      	adds	r7, #44	; 0x2c
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
	...

08015668 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	460b      	mov	r3, r1
 8015672:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d002      	beq.n	8015680 <pifNoiseFilterInt32_Init+0x18>
 801567a:	78fb      	ldrb	r3, [r7, #3]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d104      	bne.n	801568a <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015680:	4b17      	ldr	r3, [pc, #92]	; (80156e0 <pifNoiseFilterInt32_Init+0x78>)
 8015682:	2201      	movs	r2, #1
 8015684:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015686:	2300      	movs	r3, #0
 8015688:	e026      	b.n	80156d8 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 801568a:	2220      	movs	r2, #32
 801568c:	2100      	movs	r1, #0
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f00d f928 	bl	80228e4 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015694:	78fb      	ldrb	r3, [r7, #3]
 8015696:	2104      	movs	r1, #4
 8015698:	4618      	mov	r0, r3
 801569a:	f00d f8d3 	bl	8022844 <calloc>
 801569e:	4603      	mov	r3, r0
 80156a0:	461a      	mov	r2, r3
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	691b      	ldr	r3, [r3, #16]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d104      	bne.n	80156b8 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 80156ae:	4b0c      	ldr	r3, [pc, #48]	; (80156e0 <pifNoiseFilterInt32_Init+0x78>)
 80156b0:	2203      	movs	r2, #3
 80156b2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80156b4:	2300      	movs	r3, #0
 80156b6:	e00f      	b.n	80156d8 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2100      	movs	r1, #0
 80156bc:	4618      	mov	r0, r3
 80156be:	f7ff fe05 	bl	80152cc <pifNoiseFilter_Init>
    p_owner->_size = size;
 80156c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2200      	movs	r2, #0
 80156ce:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	4a04      	ldr	r2, [pc, #16]	; (80156e4 <pifNoiseFilterInt32_Init+0x7c>)
 80156d4:	605a      	str	r2, [r3, #4]
    return TRUE;
 80156d6:	2301      	movs	r3, #1
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	20001bb5 	.word	0x20001bb5
 80156e4:	0801537f 	.word	0x0801537f

080156e8 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7ff fe18 	bl	8015326 <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156fc:	2b02      	cmp	r3, #2
 80156fe:	dd04      	ble.n	801570a <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015706:	2b20      	cmp	r3, #32
 8015708:	dd04      	ble.n	8015714 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 801570a:	4b15      	ldr	r3, [pc, #84]	; (8015760 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 801570c:	2201      	movs	r2, #1
 801570e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015710:	2300      	movs	r3, #0
 8015712:	e021      	b.n	8015758 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801571a:	461a      	mov	r2, r3
 801571c:	4613      	mov	r3, r2
 801571e:	005b      	lsls	r3, r3, #1
 8015720:	4413      	add	r3, r2
 8015722:	2102      	movs	r1, #2
 8015724:	4618      	mov	r0, r3
 8015726:	f00d f88d 	bl	8022844 <calloc>
 801572a:	4603      	mov	r3, r0
 801572c:	461a      	mov	r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	69db      	ldr	r3, [r3, #28]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d104      	bne.n	8015744 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 801573a:	4b09      	ldr	r3, [pc, #36]	; (8015760 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 801573c:	2203      	movs	r2, #3
 801573e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015740:	2300      	movs	r3, #0
 8015742:	e009      	b.n	8015758 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2202      	movs	r2, #2
 801574e:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	4a04      	ldr	r2, [pc, #16]	; (8015764 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 8015754:	605a      	str	r2, [r3, #4]
	return TRUE;
 8015756:	2301      	movs	r3, #1
}
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	20001bb5 	.word	0x20001bb5
 8015764:	08015415 	.word	0x08015415

08015768 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	3b30      	subs	r3, #48	; 0x30
 8015778:	b2db      	uxtb	r3, r3
 801577a:	461a      	mov	r2, r3
 801577c:	0092      	lsls	r2, r2, #2
 801577e:	4413      	add	r3, r2
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	b2da      	uxtb	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	3301      	adds	r3, #1
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	4413      	add	r3, r2
 801578c:	b2db      	uxtb	r3, r3
 801578e:	3b30      	subs	r3, #48	; 0x30
 8015790:	b2da      	uxtb	r2, r3
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	3302      	adds	r3, #2
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	3b30      	subs	r3, #48	; 0x30
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	461a      	mov	r2, r3
 80157a2:	0092      	lsls	r2, r2, #2
 80157a4:	4413      	add	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	b2da      	uxtb	r2, r3
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	3303      	adds	r3, #3
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	4413      	add	r3, r2
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	3b30      	subs	r3, #48	; 0x30
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	3304      	adds	r3, #4
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	3b30      	subs	r3, #48	; 0x30
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	461a      	mov	r2, r3
 80157c8:	0092      	lsls	r2, r2, #2
 80157ca:	4413      	add	r3, r2
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	b2da      	uxtb	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	3305      	adds	r3, #5
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	4413      	add	r3, r2
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	701a      	strb	r2, [r3, #0]
}
 80157e2:	bf00      	nop
 80157e4:	370c      	adds	r7, #12
 80157e6:	46bd      	mov	sp, r7
 80157e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ec:	4770      	bx	lr
	...

080157f0 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b085      	sub	sp, #20
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	3b30      	subs	r3, #48	; 0x30
 8015800:	b2db      	uxtb	r3, r3
 8015802:	461a      	mov	r2, r3
 8015804:	0092      	lsls	r2, r2, #2
 8015806:	4413      	add	r3, r2
 8015808:	005b      	lsls	r3, r3, #1
 801580a:	b2da      	uxtb	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	3301      	adds	r3, #1
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	4413      	add	r3, r2
 8015814:	b2db      	uxtb	r3, r3
 8015816:	3b30      	subs	r3, #48	; 0x30
 8015818:	b2da      	uxtb	r2, r3
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	3302      	adds	r3, #2
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	3b30      	subs	r3, #48	; 0x30
 8015826:	b2db      	uxtb	r3, r3
 8015828:	461a      	mov	r2, r3
 801582a:	0092      	lsls	r2, r2, #2
 801582c:	4413      	add	r3, r2
 801582e:	005b      	lsls	r3, r3, #1
 8015830:	b2da      	uxtb	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	3303      	adds	r3, #3
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	4413      	add	r3, r2
 801583a:	b2db      	uxtb	r3, r3
 801583c:	3b30      	subs	r3, #48	; 0x30
 801583e:	b2da      	uxtb	r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3304      	adds	r3, #4
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	3b30      	subs	r3, #48	; 0x30
 801584c:	b2db      	uxtb	r3, r3
 801584e:	461a      	mov	r2, r3
 8015850:	0092      	lsls	r2, r2, #2
 8015852:	4413      	add	r3, r2
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	b2da      	uxtb	r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3305      	adds	r3, #5
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	4413      	add	r3, r2
 8015860:	b2db      	uxtb	r3, r3
 8015862:	3b30      	subs	r3, #48	; 0x30
 8015864:	b2da      	uxtb	r2, r3
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	3306      	adds	r3, #6
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	2b2e      	cmp	r3, #46	; 0x2e
 8015872:	d134      	bne.n	80158de <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	2200      	movs	r2, #0
 8015878:	80da      	strh	r2, [r3, #6]
		digit = 100;
 801587a:	2364      	movs	r3, #100	; 0x64
 801587c:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801587e:	2307      	movs	r3, #7
 8015880:	60fb      	str	r3, [r7, #12]
 8015882:	e027      	b.n	80158d4 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	4413      	add	r3, r2
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	3301      	adds	r3, #1
 801588e:	4a17      	ldr	r2, [pc, #92]	; (80158ec <_convertString2Time+0xfc>)
 8015890:	4413      	add	r3, r2
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	f003 0304 	and.w	r3, r3, #4
 8015898:	2b00      	cmp	r3, #0
 801589a:	d01f      	beq.n	80158dc <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	88da      	ldrh	r2, [r3, #6]
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	440b      	add	r3, r1
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	3b30      	subs	r3, #48	; 0x30
 80158aa:	b299      	uxth	r1, r3
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	fb11 f303 	smulbb	r3, r1, r3
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	4413      	add	r3, r2
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	4a0b      	ldr	r2, [pc, #44]	; (80158f0 <_convertString2Time+0x100>)
 80158c2:	fb82 1203 	smull	r1, r2, r2, r3
 80158c6:	1092      	asrs	r2, r2, #2
 80158c8:	17db      	asrs	r3, r3, #31
 80158ca:	1ad3      	subs	r3, r2, r3
 80158cc:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	3301      	adds	r3, #1
 80158d2:	60fb      	str	r3, [r7, #12]
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2b09      	cmp	r3, #9
 80158d8:	ddd4      	ble.n	8015884 <_convertString2Time+0x94>
		}
	}
}
 80158da:	e000      	b.n	80158de <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 80158dc:	bf00      	nop
}
 80158de:	bf00      	nop
 80158e0:	3714      	adds	r7, #20
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	08028eec 	.word	0x08028eec
 80158f0:	66666667 	.word	0x66666667

080158f4 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 80158f4:	b5b0      	push	{r4, r5, r7, lr}
 80158f6:	b088      	sub	sp, #32
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 80158fc:	f04f 0200 	mov.w	r2, #0
 8015900:	f04f 0300 	mov.w	r3, #0
 8015904:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	2b2d      	cmp	r3, #45	; 0x2d
 8015912:	d120      	bne.n	8015956 <_convertString2Float+0x62>
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	3301      	adds	r3, #1
 8015918:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 801591a:	e01c      	b.n	8015956 <_convertString2Float+0x62>
		value *= 10;
 801591c:	f04f 0200 	mov.w	r2, #0
 8015920:	4b38      	ldr	r3, [pc, #224]	; (8015a04 <_convertString2Float+0x110>)
 8015922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015926:	f7ea fe1b 	bl	8000560 <__aeabi_dmul>
 801592a:	4602      	mov	r2, r0
 801592c:	460b      	mov	r3, r1
 801592e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 8015932:	69fb      	ldr	r3, [r7, #28]
 8015934:	1c5a      	adds	r2, r3, #1
 8015936:	61fa      	str	r2, [r7, #28]
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	3b30      	subs	r3, #48	; 0x30
 801593c:	4618      	mov	r0, r3
 801593e:	f7ea fda5 	bl	800048c <__aeabi_i2d>
 8015942:	4602      	mov	r2, r0
 8015944:	460b      	mov	r3, r1
 8015946:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801594a:	f7ea fc53 	bl	80001f4 <__adddf3>
 801594e:	4602      	mov	r2, r0
 8015950:	460b      	mov	r3, r1
 8015952:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 8015956:	69fb      	ldr	r3, [r7, #28]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	3301      	adds	r3, #1
 801595c:	4a2a      	ldr	r2, [pc, #168]	; (8015a08 <_convertString2Float+0x114>)
 801595e:	4413      	add	r3, r2
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	f003 0304 	and.w	r3, r3, #4
 8015966:	2b00      	cmp	r3, #0
 8015968:	d1d8      	bne.n	801591c <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	2b2d      	cmp	r3, #45	; 0x2d
 8015970:	d105      	bne.n	801597e <_convertString2Float+0x8a>
 8015972:	693c      	ldr	r4, [r7, #16]
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801597a:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	2b2e      	cmp	r3, #46	; 0x2e
 8015984:	d133      	bne.n	80159ee <_convertString2Float+0xfa>
		p++;
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	3301      	adds	r3, #1
 801598a:	61fb      	str	r3, [r7, #28]
		unit = 10;
 801598c:	f04f 0200 	mov.w	r2, #0
 8015990:	4b1c      	ldr	r3, [pc, #112]	; (8015a04 <_convertString2Float+0x110>)
 8015992:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015996:	e020      	b.n	80159da <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	1c5a      	adds	r2, r3, #1
 801599c:	61fa      	str	r2, [r7, #28]
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	3b30      	subs	r3, #48	; 0x30
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7ea fd72 	bl	800048c <__aeabi_i2d>
 80159a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80159ac:	f7ea ff02 	bl	80007b4 <__aeabi_ddiv>
 80159b0:	4602      	mov	r2, r0
 80159b2:	460b      	mov	r3, r1
 80159b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80159b8:	f7ea fc1c 	bl	80001f4 <__adddf3>
 80159bc:	4602      	mov	r2, r0
 80159be:	460b      	mov	r3, r1
 80159c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 80159c4:	f04f 0200 	mov.w	r2, #0
 80159c8:	4b0e      	ldr	r3, [pc, #56]	; (8015a04 <_convertString2Float+0x110>)
 80159ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159ce:	f7ea fdc7 	bl	8000560 <__aeabi_dmul>
 80159d2:	4602      	mov	r2, r0
 80159d4:	460b      	mov	r3, r1
 80159d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 80159da:	69fb      	ldr	r3, [r7, #28]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	3301      	adds	r3, #1
 80159e0:	4a09      	ldr	r2, [pc, #36]	; (8015a08 <_convertString2Float+0x114>)
 80159e2:	4413      	add	r3, r2
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	f003 0304 	and.w	r3, r3, #4
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d1d4      	bne.n	8015998 <_convertString2Float+0xa4>
		}
	}
	return value;
 80159ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80159f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80159f6:	eeb0 0a47 	vmov.f32	s0, s14
 80159fa:	eef0 0a67 	vmov.f32	s1, s15
 80159fe:	3720      	adds	r7, #32
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bdb0      	pop	{r4, r5, r7, pc}
 8015a04:	40240000 	.word	0x40240000
 8015a08:	08028eec 	.word	0x08028eec

08015a0c <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 8015a14:	2300      	movs	r3, #0
 8015a16:	60bb      	str	r3, [r7, #8]

	p = str;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	2b2d      	cmp	r3, #45	; 0x2d
 8015a22:	d111      	bne.n	8015a48 <_convertString2Interger+0x3c>
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	3301      	adds	r3, #1
 8015a28:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 8015a2a:	e00d      	b.n	8015a48 <_convertString2Interger+0x3c>
		value *= 10;
 8015a2c:	68ba      	ldr	r2, [r7, #8]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	4413      	add	r3, r2
 8015a34:	005b      	lsls	r3, r3, #1
 8015a36:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	1c5a      	adds	r2, r3, #1
 8015a3c:	60fa      	str	r2, [r7, #12]
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	3b30      	subs	r3, #48	; 0x30
 8015a42:	68ba      	ldr	r2, [r7, #8]
 8015a44:	4413      	add	r3, r2
 8015a46:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	4a0a      	ldr	r2, [pc, #40]	; (8015a78 <_convertString2Interger+0x6c>)
 8015a50:	4413      	add	r3, r2
 8015a52:	781b      	ldrb	r3, [r3, #0]
 8015a54:	f003 0304 	and.w	r3, r3, #4
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d1e7      	bne.n	8015a2c <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 8015a60:	2b2d      	cmp	r3, #45	; 0x2d
 8015a62:	d102      	bne.n	8015a6a <_convertString2Interger+0x5e>
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	425b      	negs	r3, r3
 8015a68:	60bb      	str	r3, [r7, #8]
	return value;
 8015a6a:	68bb      	ldr	r3, [r7, #8]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3714      	adds	r7, #20
 8015a70:	46bd      	mov	sp, r7
 8015a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a76:	4770      	bx	lr
 8015a78:	08028eec 	.word	0x08028eec
 8015a7c:	00000000 	.word	0x00000000

08015a80 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015a80:	b5b0      	push	{r4, r5, r7, lr}
 8015a82:	b088      	sub	sp, #32
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	75fb      	strb	r3, [r7, #23]
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015a90:	2300      	movs	r3, #0
 8015a92:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	61fb      	str	r3, [r7, #28]
 8015a98:	e002      	b.n	8015aa0 <_convertString2Degrees+0x20>
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	61fb      	str	r3, [r7, #28]
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	4a46      	ldr	r2, [pc, #280]	; (8015bc0 <_convertString2Degrees+0x140>)
 8015aa8:	4413      	add	r3, r2
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	f003 0304 	and.w	r3, r3, #4
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d1f2      	bne.n	8015a9a <_convertString2Degrees+0x1a>
	q = s;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015ab8:	e011      	b.n	8015ade <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015aba:	7dfb      	ldrb	r3, [r7, #23]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d005      	beq.n	8015acc <_convertString2Degrees+0x4c>
 8015ac0:	7dfb      	ldrb	r3, [r7, #23]
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	0092      	lsls	r2, r2, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015acc:	69bb      	ldr	r3, [r7, #24]
 8015ace:	1c5a      	adds	r2, r3, #1
 8015ad0:	61ba      	str	r2, [r7, #24]
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	3b30      	subs	r3, #48	; 0x30
 8015ad6:	b2da      	uxtb	r2, r3
 8015ad8:	7dfb      	ldrb	r3, [r7, #23]
 8015ada:	4413      	add	r3, r2
 8015adc:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015ade:	69fa      	ldr	r2, [r7, #28]
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	1ad3      	subs	r3, r2, r3
 8015ae4:	2b02      	cmp	r3, #2
 8015ae6:	dce8      	bgt.n	8015aba <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015ae8:	e011      	b.n	8015b0e <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015aea:	7dbb      	ldrb	r3, [r7, #22]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d005      	beq.n	8015afc <_convertString2Degrees+0x7c>
 8015af0:	7dbb      	ldrb	r3, [r7, #22]
 8015af2:	461a      	mov	r2, r3
 8015af4:	0092      	lsls	r2, r2, #2
 8015af6:	4413      	add	r3, r2
 8015af8:	005b      	lsls	r3, r3, #1
 8015afa:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015afc:	69bb      	ldr	r3, [r7, #24]
 8015afe:	1c5a      	adds	r2, r3, #1
 8015b00:	61ba      	str	r2, [r7, #24]
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	3b30      	subs	r3, #48	; 0x30
 8015b06:	b2da      	uxtb	r2, r3
 8015b08:	7dbb      	ldrb	r3, [r7, #22]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8015b0e:	69fa      	ldr	r2, [r7, #28]
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d8e9      	bhi.n	8015aea <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8015b1c:	d124      	bne.n	8015b68 <_convertString2Degrees+0xe8>
		q = p + 1;
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	3301      	adds	r3, #1
 8015b22:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 8015b24:	2300      	movs	r3, #0
 8015b26:	73fb      	strb	r3, [r7, #15]
 8015b28:	e01b      	b.n	8015b62 <_convertString2Degrees+0xe2>
			frac_min *= 10;
 8015b2a:	693a      	ldr	r2, [r7, #16]
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	4413      	add	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	781b      	ldrb	r3, [r3, #0]
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	4a20      	ldr	r2, [pc, #128]	; (8015bc0 <_convertString2Degrees+0x140>)
 8015b3e:	4413      	add	r3, r2
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	f003 0304 	and.w	r3, r3, #4
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d008      	beq.n	8015b5c <_convertString2Degrees+0xdc>
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	1c5a      	adds	r2, r3, #1
 8015b4e:	61ba      	str	r2, [r7, #24]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	3b30      	subs	r3, #48	; 0x30
 8015b54:	461a      	mov	r2, r3
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	4413      	add	r3, r2
 8015b5a:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
 8015b5e:	3301      	adds	r3, #1
 8015b60:	73fb      	strb	r3, [r7, #15]
 8015b62:	7bfb      	ldrb	r3, [r7, #15]
 8015b64:	2b03      	cmp	r3, #3
 8015b66:	d9e0      	bls.n	8015b2a <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015b68:	7dfb      	ldrb	r3, [r7, #23]
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7ea fc8e 	bl	800048c <__aeabi_i2d>
 8015b70:	4604      	mov	r4, r0
 8015b72:	460d      	mov	r5, r1
 8015b74:	7dbb      	ldrb	r3, [r7, #22]
 8015b76:	f242 7210 	movw	r2, #10000	; 0x2710
 8015b7a:	fb03 f202 	mul.w	r2, r3, r2
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	4413      	add	r3, r2
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7ea fc72 	bl	800046c <__aeabi_ui2d>
 8015b88:	a30b      	add	r3, pc, #44	; (adr r3, 8015bb8 <_convertString2Degrees+0x138>)
 8015b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8e:	f7ea fe11 	bl	80007b4 <__aeabi_ddiv>
 8015b92:	4602      	mov	r2, r0
 8015b94:	460b      	mov	r3, r1
 8015b96:	4620      	mov	r0, r4
 8015b98:	4629      	mov	r1, r5
 8015b9a:	f7ea fb2b 	bl	80001f4 <__adddf3>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	ec43 2b17 	vmov	d7, r2, r3
}
 8015ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8015baa:	eef0 0a67 	vmov.f32	s1, s15
 8015bae:	3720      	adds	r7, #32
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8015bb4:	f3af 8000 	nop.w
 8015bb8:	00000000 	.word	0x00000000
 8015bbc:	41224f80 	.word	0x41224f80
 8015bc0:	08028eec 	.word	0x08028eec

08015bc4 <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	4603      	mov	r3, r0
 8015bcc:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015bce:	79fb      	ldrb	r3, [r7, #7]
 8015bd0:	3b30      	subs	r3, #48	; 0x30
 8015bd2:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 8015bd4:	79fb      	ldrb	r3, [r7, #7]
 8015bd6:	2b09      	cmp	r3, #9
 8015bd8:	d902      	bls.n	8015be0 <_convertAscii2Hex+0x1c>
 8015bda:	79fb      	ldrb	r3, [r7, #7]
 8015bdc:	3b07      	subs	r3, #7
 8015bde:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015be0:	79fb      	ldrb	r3, [r7, #7]
 8015be2:	f003 030f 	and.w	r3, r3, #15
 8015be6:	71fb      	strb	r3, [r7, #7]
	return n;
 8015be8:	79fb      	ldrb	r3, [r7, #7]
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b084      	sub	sp, #16
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015c08:	f36f 0341 	bfc	r3, #1, #1
 8015c0c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015c16:	f36f 0300 	bfc	r3, #0, #1
 8015c1a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	2200      	movs	r2, #0
 8015c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d004      	beq.n	8015c3a <_evtTimerFinish+0x44>
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	4798      	blx	r3
}
 8015c3a:	bf00      	nop
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
	...

08015c44 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d104      	bne.n	8015c60 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015c56:	4b0e      	ldr	r3, [pc, #56]	; (8015c90 <pifGps_Init+0x4c>)
 8015c58:	2201      	movs	r2, #1
 8015c5a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	e012      	b.n	8015c86 <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015c60:	22b0      	movs	r2, #176	; 0xb0
 8015c62:	2100      	movs	r1, #0
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f00c fe3d 	bl	80228e4 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015c6a:	887b      	ldrh	r3, [r7, #2]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d106      	bne.n	8015c7e <pifGps_Init+0x3a>
 8015c70:	4b08      	ldr	r3, [pc, #32]	; (8015c94 <pifGps_Init+0x50>)
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	1c5a      	adds	r2, r3, #1
 8015c76:	b291      	uxth	r1, r2
 8015c78:	4a06      	ldr	r2, [pc, #24]	; (8015c94 <pifGps_Init+0x50>)
 8015c7a:	8011      	strh	r1, [r2, #0]
 8015c7c:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	887a      	ldrh	r2, [r7, #2]
 8015c82:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015c84:	2301      	movs	r3, #1
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3708      	adds	r7, #8
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	20001bb5 	.word	0x20001bb5
 8015c94:	20000128 	.word	0x20000128

08015c98 <pifGps_SetTimeout>:
	}
	p_owner->__evt_text = NULL;
}

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
 8015ca4:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d02b      	beq.n	8015d04 <pifGps_SetTimeout+0x6c>
		if (!p_owner->__p_timer) {
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d11a      	bne.n	8015cec <pifGps_SetTimeout+0x54>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015cb6:	2100      	movs	r1, #0
 8015cb8:	68b8      	ldr	r0, [r7, #8]
 8015cba:	f7ff f9c7 	bl	801504c <pifTimerManager_Add>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			if (!p_owner->__p_timer) return FALSE;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d101      	bne.n	8015cd4 <pifGps_SetTimeout+0x3c>
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	e023      	b.n	8015d1c <pifGps_SetTimeout+0x84>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015cda:	68fa      	ldr	r2, [r7, #12]
 8015cdc:	4911      	ldr	r1, [pc, #68]	; (8015d24 <pifGps_SetTimeout+0x8c>)
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7ff fae1 	bl	80152a6 <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	683a      	ldr	r2, [r7, #0]
 8015ce8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015cf2:	6879      	ldr	r1, [r7, #4]
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7ff f9e1 	bl	80150bc <pifTimer_Start>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10c      	bne.n	8015d1a <pifGps_SetTimeout+0x82>
 8015d00:	2300      	movs	r3, #0
 8015d02:	e00b      	b.n	8015d1c <pifGps_SetTimeout+0x84>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d005      	beq.n	8015d1a <pifGps_SetTimeout+0x82>
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff f9ff 	bl	8015118 <pifTimer_Stop>
	}
    return TRUE;
 8015d1a:	2301      	movs	r3, #1
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	08015bf7 	.word	0x08015bf7

08015d28 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015d36:	f043 0302 	orr.w	r3, r3, #2
 8015d3a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d003      	beq.n	8015d4e <pifGps_SendEvent+0x26>
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d005      	beq.n	8015d64 <pifGps_SendEvent+0x3c>
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7ff f9f0 	bl	8015144 <pifTimer_Reset>
}
 8015d64:	bf00      	nop
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	0000      	movs	r0, r0
	...

08015d70 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d74:	b090      	sub	sp, #64	; 0x40
 8015d76:	af02      	add	r7, sp, #8
 8015d78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015d7a:	460b      	mov	r3, r1
 8015d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015d80:	2300      	movs	r3, #0
 8015d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static PifGpsNmeaMsgId msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015d8a:	2b24      	cmp	r3, #36	; 0x24
 8015d8c:	d11a      	bne.n	8015dc4 <pifGps_ParsingNmea+0x54>
		param = 0;
 8015d8e:	4b8a      	ldr	r3, [pc, #552]	; (8015fb8 <pifGps_ParsingNmea+0x248>)
 8015d90:	2200      	movs	r2, #0
 8015d92:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015d94:	4b89      	ldr	r3, [pc, #548]	; (8015fbc <pifGps_ParsingNmea+0x24c>)
 8015d96:	2200      	movs	r2, #0
 8015d98:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015d9a:	4b89      	ldr	r3, [pc, #548]	; (8015fc0 <pifGps_ParsingNmea+0x250>)
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da2:	689b      	ldr	r3, [r3, #8]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d00a      	beq.n	8015dbe <pifGps_ParsingNmea+0x4e>
			string[0] = c;
 8015da8:	4a86      	ldr	r2, [pc, #536]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dae:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015db0:	4b84      	ldr	r3, [pc, #528]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015db2:	2200      	movs	r2, #0
 8015db4:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db8:	689b      	ldr	r3, [r3, #8]
 8015dba:	4882      	ldr	r0, [pc, #520]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015dbc:	4798      	blx	r3
		}
		return TRUE;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	f000 bd44 	b.w	801684c <pifGps_ParsingNmea+0xadc>
	}
	else if (c == ',' || c == '*') {
 8015dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dc8:	2b2c      	cmp	r3, #44	; 0x2c
 8015dca:	d004      	beq.n	8015dd6 <pifGps_ParsingNmea+0x66>
 8015dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8015dd2:	f040 847f 	bne.w	80166d4 <pifGps_ParsingNmea+0x964>
		string[offset] = 0;
 8015dd6:	4b79      	ldr	r3, [pc, #484]	; (8015fbc <pifGps_ParsingNmea+0x24c>)
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	4619      	mov	r1, r3
 8015ddc:	4a79      	ldr	r2, [pc, #484]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015dde:	2300      	movs	r3, #0
 8015de0:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015de2:	4b75      	ldr	r3, [pc, #468]	; (8015fb8 <pifGps_ParsingNmea+0x248>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	f040 8103 	bne.w	8015ff2 <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015dec:	4b76      	ldr	r3, [pc, #472]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015dee:	2200      	movs	r2, #0
 8015df0:	701a      	strb	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015df2:	4b74      	ldr	r3, [pc, #464]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015df4:	789b      	ldrb	r3, [r3, #2]
 8015df6:	2b44      	cmp	r3, #68	; 0x44
 8015df8:	d10c      	bne.n	8015e14 <pifGps_ParsingNmea+0xa4>
 8015dfa:	4b72      	ldr	r3, [pc, #456]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015dfc:	78db      	ldrb	r3, [r3, #3]
 8015dfe:	2b54      	cmp	r3, #84	; 0x54
 8015e00:	d108      	bne.n	8015e14 <pifGps_ParsingNmea+0xa4>
 8015e02:	4b70      	ldr	r3, [pc, #448]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e04:	791b      	ldrb	r3, [r3, #4]
 8015e06:	2b4d      	cmp	r3, #77	; 0x4d
 8015e08:	d104      	bne.n	8015e14 <pifGps_ParsingNmea+0xa4>
 8015e0a:	4b6f      	ldr	r3, [pc, #444]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015e0c:	2201      	movs	r2, #1
 8015e0e:	701a      	strb	r2, [r3, #0]
 8015e10:	f000 bc29 	b.w	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015e14:	4b6b      	ldr	r3, [pc, #428]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e16:	789b      	ldrb	r3, [r3, #2]
 8015e18:	2b47      	cmp	r3, #71	; 0x47
 8015e1a:	d10c      	bne.n	8015e36 <pifGps_ParsingNmea+0xc6>
 8015e1c:	4b69      	ldr	r3, [pc, #420]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e1e:	78db      	ldrb	r3, [r3, #3]
 8015e20:	2b42      	cmp	r3, #66	; 0x42
 8015e22:	d108      	bne.n	8015e36 <pifGps_ParsingNmea+0xc6>
 8015e24:	4b67      	ldr	r3, [pc, #412]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e26:	791b      	ldrb	r3, [r3, #4]
 8015e28:	2b53      	cmp	r3, #83	; 0x53
 8015e2a:	d104      	bne.n	8015e36 <pifGps_ParsingNmea+0xc6>
 8015e2c:	4b66      	ldr	r3, [pc, #408]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015e2e:	2202      	movs	r2, #2
 8015e30:	701a      	strb	r2, [r3, #0]
 8015e32:	f000 bc18 	b.w	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015e36:	4b63      	ldr	r3, [pc, #396]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e38:	789b      	ldrb	r3, [r3, #2]
 8015e3a:	2b47      	cmp	r3, #71	; 0x47
 8015e3c:	d10c      	bne.n	8015e58 <pifGps_ParsingNmea+0xe8>
 8015e3e:	4b61      	ldr	r3, [pc, #388]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e40:	78db      	ldrb	r3, [r3, #3]
 8015e42:	2b47      	cmp	r3, #71	; 0x47
 8015e44:	d108      	bne.n	8015e58 <pifGps_ParsingNmea+0xe8>
 8015e46:	4b5f      	ldr	r3, [pc, #380]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e48:	791b      	ldrb	r3, [r3, #4]
 8015e4a:	2b41      	cmp	r3, #65	; 0x41
 8015e4c:	d104      	bne.n	8015e58 <pifGps_ParsingNmea+0xe8>
 8015e4e:	4b5e      	ldr	r3, [pc, #376]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015e50:	2203      	movs	r2, #3
 8015e52:	701a      	strb	r2, [r3, #0]
 8015e54:	f000 bc07 	b.w	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015e58:	4b5a      	ldr	r3, [pc, #360]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e5a:	789b      	ldrb	r3, [r3, #2]
 8015e5c:	2b47      	cmp	r3, #71	; 0x47
 8015e5e:	d10b      	bne.n	8015e78 <pifGps_ParsingNmea+0x108>
 8015e60:	4b58      	ldr	r3, [pc, #352]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e62:	78db      	ldrb	r3, [r3, #3]
 8015e64:	2b4c      	cmp	r3, #76	; 0x4c
 8015e66:	d107      	bne.n	8015e78 <pifGps_ParsingNmea+0x108>
 8015e68:	4b56      	ldr	r3, [pc, #344]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e6a:	791b      	ldrb	r3, [r3, #4]
 8015e6c:	2b4c      	cmp	r3, #76	; 0x4c
 8015e6e:	d103      	bne.n	8015e78 <pifGps_ParsingNmea+0x108>
 8015e70:	4b55      	ldr	r3, [pc, #340]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015e72:	2204      	movs	r2, #4
 8015e74:	701a      	strb	r2, [r3, #0]
 8015e76:	e3f6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015e78:	4b52      	ldr	r3, [pc, #328]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e7a:	789b      	ldrb	r3, [r3, #2]
 8015e7c:	2b47      	cmp	r3, #71	; 0x47
 8015e7e:	d10b      	bne.n	8015e98 <pifGps_ParsingNmea+0x128>
 8015e80:	4b50      	ldr	r3, [pc, #320]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e82:	78db      	ldrb	r3, [r3, #3]
 8015e84:	2b4e      	cmp	r3, #78	; 0x4e
 8015e86:	d107      	bne.n	8015e98 <pifGps_ParsingNmea+0x128>
 8015e88:	4b4e      	ldr	r3, [pc, #312]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e8a:	791b      	ldrb	r3, [r3, #4]
 8015e8c:	2b53      	cmp	r3, #83	; 0x53
 8015e8e:	d103      	bne.n	8015e98 <pifGps_ParsingNmea+0x128>
 8015e90:	4b4d      	ldr	r3, [pc, #308]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015e92:	2205      	movs	r2, #5
 8015e94:	701a      	strb	r2, [r3, #0]
 8015e96:	e3e6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015e98:	4b4a      	ldr	r3, [pc, #296]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015e9a:	789b      	ldrb	r3, [r3, #2]
 8015e9c:	2b47      	cmp	r3, #71	; 0x47
 8015e9e:	d10b      	bne.n	8015eb8 <pifGps_ParsingNmea+0x148>
 8015ea0:	4b48      	ldr	r3, [pc, #288]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015ea2:	78db      	ldrb	r3, [r3, #3]
 8015ea4:	2b52      	cmp	r3, #82	; 0x52
 8015ea6:	d107      	bne.n	8015eb8 <pifGps_ParsingNmea+0x148>
 8015ea8:	4b46      	ldr	r3, [pc, #280]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015eaa:	791b      	ldrb	r3, [r3, #4]
 8015eac:	2b53      	cmp	r3, #83	; 0x53
 8015eae:	d103      	bne.n	8015eb8 <pifGps_ParsingNmea+0x148>
 8015eb0:	4b45      	ldr	r3, [pc, #276]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015eb2:	2206      	movs	r2, #6
 8015eb4:	701a      	strb	r2, [r3, #0]
 8015eb6:	e3d6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015eb8:	4b42      	ldr	r3, [pc, #264]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015eba:	789b      	ldrb	r3, [r3, #2]
 8015ebc:	2b47      	cmp	r3, #71	; 0x47
 8015ebe:	d10b      	bne.n	8015ed8 <pifGps_ParsingNmea+0x168>
 8015ec0:	4b40      	ldr	r3, [pc, #256]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015ec2:	78db      	ldrb	r3, [r3, #3]
 8015ec4:	2b53      	cmp	r3, #83	; 0x53
 8015ec6:	d107      	bne.n	8015ed8 <pifGps_ParsingNmea+0x168>
 8015ec8:	4b3e      	ldr	r3, [pc, #248]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015eca:	791b      	ldrb	r3, [r3, #4]
 8015ecc:	2b41      	cmp	r3, #65	; 0x41
 8015ece:	d103      	bne.n	8015ed8 <pifGps_ParsingNmea+0x168>
 8015ed0:	4b3d      	ldr	r3, [pc, #244]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015ed2:	2207      	movs	r2, #7
 8015ed4:	701a      	strb	r2, [r3, #0]
 8015ed6:	e3c6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015ed8:	4b3a      	ldr	r3, [pc, #232]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015eda:	789b      	ldrb	r3, [r3, #2]
 8015edc:	2b47      	cmp	r3, #71	; 0x47
 8015ede:	d10b      	bne.n	8015ef8 <pifGps_ParsingNmea+0x188>
 8015ee0:	4b38      	ldr	r3, [pc, #224]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015ee2:	78db      	ldrb	r3, [r3, #3]
 8015ee4:	2b53      	cmp	r3, #83	; 0x53
 8015ee6:	d107      	bne.n	8015ef8 <pifGps_ParsingNmea+0x188>
 8015ee8:	4b36      	ldr	r3, [pc, #216]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015eea:	791b      	ldrb	r3, [r3, #4]
 8015eec:	2b54      	cmp	r3, #84	; 0x54
 8015eee:	d103      	bne.n	8015ef8 <pifGps_ParsingNmea+0x188>
 8015ef0:	4b35      	ldr	r3, [pc, #212]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015ef2:	2208      	movs	r2, #8
 8015ef4:	701a      	strb	r2, [r3, #0]
 8015ef6:	e3b6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015ef8:	4b32      	ldr	r3, [pc, #200]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015efa:	789b      	ldrb	r3, [r3, #2]
 8015efc:	2b47      	cmp	r3, #71	; 0x47
 8015efe:	d10b      	bne.n	8015f18 <pifGps_ParsingNmea+0x1a8>
 8015f00:	4b30      	ldr	r3, [pc, #192]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f02:	78db      	ldrb	r3, [r3, #3]
 8015f04:	2b53      	cmp	r3, #83	; 0x53
 8015f06:	d107      	bne.n	8015f18 <pifGps_ParsingNmea+0x1a8>
 8015f08:	4b2e      	ldr	r3, [pc, #184]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f0a:	791b      	ldrb	r3, [r3, #4]
 8015f0c:	2b56      	cmp	r3, #86	; 0x56
 8015f0e:	d103      	bne.n	8015f18 <pifGps_ParsingNmea+0x1a8>
 8015f10:	4b2d      	ldr	r3, [pc, #180]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015f12:	2209      	movs	r2, #9
 8015f14:	701a      	strb	r2, [r3, #0]
 8015f16:	e3a6      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015f18:	4b2a      	ldr	r3, [pc, #168]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f1a:	789b      	ldrb	r3, [r3, #2]
 8015f1c:	2b52      	cmp	r3, #82	; 0x52
 8015f1e:	d10b      	bne.n	8015f38 <pifGps_ParsingNmea+0x1c8>
 8015f20:	4b28      	ldr	r3, [pc, #160]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f22:	78db      	ldrb	r3, [r3, #3]
 8015f24:	2b4d      	cmp	r3, #77	; 0x4d
 8015f26:	d107      	bne.n	8015f38 <pifGps_ParsingNmea+0x1c8>
 8015f28:	4b26      	ldr	r3, [pc, #152]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f2a:	791b      	ldrb	r3, [r3, #4]
 8015f2c:	2b43      	cmp	r3, #67	; 0x43
 8015f2e:	d103      	bne.n	8015f38 <pifGps_ParsingNmea+0x1c8>
 8015f30:	4b25      	ldr	r3, [pc, #148]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015f32:	220a      	movs	r2, #10
 8015f34:	701a      	strb	r2, [r3, #0]
 8015f36:	e396      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015f38:	4b22      	ldr	r3, [pc, #136]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f3a:	789b      	ldrb	r3, [r3, #2]
 8015f3c:	2b54      	cmp	r3, #84	; 0x54
 8015f3e:	d10b      	bne.n	8015f58 <pifGps_ParsingNmea+0x1e8>
 8015f40:	4b20      	ldr	r3, [pc, #128]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f42:	78db      	ldrb	r3, [r3, #3]
 8015f44:	2b48      	cmp	r3, #72	; 0x48
 8015f46:	d107      	bne.n	8015f58 <pifGps_ParsingNmea+0x1e8>
 8015f48:	4b1e      	ldr	r3, [pc, #120]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f4a:	791b      	ldrb	r3, [r3, #4]
 8015f4c:	2b53      	cmp	r3, #83	; 0x53
 8015f4e:	d103      	bne.n	8015f58 <pifGps_ParsingNmea+0x1e8>
 8015f50:	4b1d      	ldr	r3, [pc, #116]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015f52:	220b      	movs	r2, #11
 8015f54:	701a      	strb	r2, [r3, #0]
 8015f56:	e386      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015f58:	4b1a      	ldr	r3, [pc, #104]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f5a:	789b      	ldrb	r3, [r3, #2]
 8015f5c:	2b54      	cmp	r3, #84	; 0x54
 8015f5e:	d10b      	bne.n	8015f78 <pifGps_ParsingNmea+0x208>
 8015f60:	4b18      	ldr	r3, [pc, #96]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f62:	78db      	ldrb	r3, [r3, #3]
 8015f64:	2b58      	cmp	r3, #88	; 0x58
 8015f66:	d107      	bne.n	8015f78 <pifGps_ParsingNmea+0x208>
 8015f68:	4b16      	ldr	r3, [pc, #88]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f6a:	791b      	ldrb	r3, [r3, #4]
 8015f6c:	2b54      	cmp	r3, #84	; 0x54
 8015f6e:	d103      	bne.n	8015f78 <pifGps_ParsingNmea+0x208>
 8015f70:	4b15      	ldr	r3, [pc, #84]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015f72:	220c      	movs	r2, #12
 8015f74:	701a      	strb	r2, [r3, #0]
 8015f76:	e376      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015f78:	4b12      	ldr	r3, [pc, #72]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f7a:	789b      	ldrb	r3, [r3, #2]
 8015f7c:	2b56      	cmp	r3, #86	; 0x56
 8015f7e:	d10b      	bne.n	8015f98 <pifGps_ParsingNmea+0x228>
 8015f80:	4b10      	ldr	r3, [pc, #64]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f82:	78db      	ldrb	r3, [r3, #3]
 8015f84:	2b4c      	cmp	r3, #76	; 0x4c
 8015f86:	d107      	bne.n	8015f98 <pifGps_ParsingNmea+0x228>
 8015f88:	4b0e      	ldr	r3, [pc, #56]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f8a:	791b      	ldrb	r3, [r3, #4]
 8015f8c:	2b57      	cmp	r3, #87	; 0x57
 8015f8e:	d103      	bne.n	8015f98 <pifGps_ParsingNmea+0x228>
 8015f90:	4b0d      	ldr	r3, [pc, #52]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015f92:	220d      	movs	r2, #13
 8015f94:	701a      	strb	r2, [r3, #0]
 8015f96:	e366      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015f98:	4b0a      	ldr	r3, [pc, #40]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015f9a:	789b      	ldrb	r3, [r3, #2]
 8015f9c:	2b56      	cmp	r3, #86	; 0x56
 8015f9e:	d115      	bne.n	8015fcc <pifGps_ParsingNmea+0x25c>
 8015fa0:	4b08      	ldr	r3, [pc, #32]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015fa2:	78db      	ldrb	r3, [r3, #3]
 8015fa4:	2b54      	cmp	r3, #84	; 0x54
 8015fa6:	d111      	bne.n	8015fcc <pifGps_ParsingNmea+0x25c>
 8015fa8:	4b06      	ldr	r3, [pc, #24]	; (8015fc4 <pifGps_ParsingNmea+0x254>)
 8015faa:	791b      	ldrb	r3, [r3, #4]
 8015fac:	2b47      	cmp	r3, #71	; 0x47
 8015fae:	d10d      	bne.n	8015fcc <pifGps_ParsingNmea+0x25c>
 8015fb0:	4b05      	ldr	r3, [pc, #20]	; (8015fc8 <pifGps_ParsingNmea+0x258>)
 8015fb2:	220e      	movs	r2, #14
 8015fb4:	701a      	strb	r2, [r3, #0]
 8015fb6:	e356      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
 8015fb8:	20001d40 	.word	0x20001d40
 8015fbc:	20001d41 	.word	0x20001d41
 8015fc0:	20001d42 	.word	0x20001d42
 8015fc4:	20001d44 	.word	0x20001d44
 8015fc8:	20001d64 	.word	0x20001d64
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015fcc:	4bb0      	ldr	r3, [pc, #704]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8015fce:	789b      	ldrb	r3, [r3, #2]
 8015fd0:	2b5a      	cmp	r3, #90	; 0x5a
 8015fd2:	f040 8348 	bne.w	8016666 <pifGps_ParsingNmea+0x8f6>
 8015fd6:	4bae      	ldr	r3, [pc, #696]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8015fd8:	78db      	ldrb	r3, [r3, #3]
 8015fda:	2b44      	cmp	r3, #68	; 0x44
 8015fdc:	f040 8343 	bne.w	8016666 <pifGps_ParsingNmea+0x8f6>
 8015fe0:	4bab      	ldr	r3, [pc, #684]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8015fe2:	791b      	ldrb	r3, [r3, #4]
 8015fe4:	2b41      	cmp	r3, #65	; 0x41
 8015fe6:	f040 833e 	bne.w	8016666 <pifGps_ParsingNmea+0x8f6>
 8015fea:	4baa      	ldr	r3, [pc, #680]	; (8016294 <pifGps_ParsingNmea+0x524>)
 8015fec:	220f      	movs	r2, #15
 8015fee:	701a      	strb	r2, [r3, #0]
 8015ff0:	e339      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
		}
		else if (offset) {
 8015ff2:	4ba9      	ldr	r3, [pc, #676]	; (8016298 <pifGps_ParsingNmea+0x528>)
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	f000 8324 	beq.w	8016644 <pifGps_ParsingNmea+0x8d4>
			switch (msg_id) {
 8015ffc:	4ba5      	ldr	r3, [pc, #660]	; (8016294 <pifGps_ParsingNmea+0x524>)
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	3b01      	subs	r3, #1
 8016002:	2b0e      	cmp	r3, #14
 8016004:	f200 832f 	bhi.w	8016666 <pifGps_ParsingNmea+0x8f6>
 8016008:	a201      	add	r2, pc, #4	; (adr r2, 8016010 <pifGps_ParsingNmea+0x2a0>)
 801600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801600e:	bf00      	nop
 8016010:	08016667 	.word	0x08016667
 8016014:	08016667 	.word	0x08016667
 8016018:	0801604d 	.word	0x0801604d
 801601c:	08016151 	.word	0x08016151
 8016020:	080161ff 	.word	0x080161ff
 8016024:	08016667 	.word	0x08016667
 8016028:	08016667 	.word	0x08016667
 801602c:	08016667 	.word	0x08016667
 8016030:	080162ed 	.word	0x080162ed
 8016034:	0801640f 	.word	0x0801640f
 8016038:	08016667 	.word	0x08016667
 801603c:	08016503 	.word	0x08016503
 8016040:	08016667 	.word	0x08016667
 8016044:	08016599 	.word	0x08016599
 8016048:	080165df 	.word	0x080165df

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				switch (param) {
 801604c:	4b93      	ldr	r3, [pc, #588]	; (801629c <pifGps_ParsingNmea+0x52c>)
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	3b01      	subs	r3, #1
 8016052:	2b08      	cmp	r3, #8
 8016054:	f200 82f8 	bhi.w	8016648 <pifGps_ParsingNmea+0x8d8>
 8016058:	a201      	add	r2, pc, #4	; (adr r2, 8016060 <pifGps_ParsingNmea+0x2f0>)
 801605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801605e:	bf00      	nop
 8016060:	08016085 	.word	0x08016085
 8016064:	08016093 	.word	0x08016093
 8016068:	080160a9 	.word	0x080160a9
 801606c:	080160cb 	.word	0x080160cb
 8016070:	080160e1 	.word	0x080160e1
 8016074:	08016103 	.word	0x08016103
 8016078:	08016121 	.word	0x08016121
 801607c:	08016649 	.word	0x08016649
 8016080:	08016133 	.word	0x08016133
				case 1: 
					_convertString2Time(string, &p_owner->_utc); 
 8016084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016086:	330e      	adds	r3, #14
 8016088:	4619      	mov	r1, r3
 801608a:	4881      	ldr	r0, [pc, #516]	; (8016290 <pifGps_ParsingNmea+0x520>)
 801608c:	f7ff fbb0 	bl	80157f0 <_convertString2Time>
					break;
 8016090:	e05d      	b.n	801614e <pifGps_ParsingNmea+0x3de>
				case 2: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016092:	487f      	ldr	r0, [pc, #508]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016094:	f7ff fcf4 	bl	8015a80 <_convertString2Degrees>
 8016098:	eeb0 7a40 	vmov.f32	s14, s0
 801609c:	eef0 7a60 	vmov.f32	s15, s1
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80160a6:	e052      	b.n	801614e <pifGps_ParsingNmea+0x3de>
				case 3: 
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80160a8:	4b79      	ldr	r3, [pc, #484]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	2b53      	cmp	r3, #83	; 0x53
 80160ae:	d14b      	bne.n	8016148 <pifGps_ParsingNmea+0x3d8>
 80160b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80160b6:	623a      	str	r2, [r7, #32]
 80160b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80160bc:	627b      	str	r3, [r7, #36]	; 0x24
 80160be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c0:	ed97 7b08 	vldr	d7, [r7, #32]
 80160c4:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80160c8:	e03e      	b.n	8016148 <pifGps_ParsingNmea+0x3d8>
				case 4: 
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80160ca:	4871      	ldr	r0, [pc, #452]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80160cc:	f7ff fcd8 	bl	8015a80 <_convertString2Degrees>
 80160d0:	eeb0 7a40 	vmov.f32	s14, s0
 80160d4:	eef0 7a60 	vmov.f32	s15, s1
 80160d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160da:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80160de:	e036      	b.n	801614e <pifGps_ParsingNmea+0x3de>
				case 5: 
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80160e0:	4b6b      	ldr	r3, [pc, #428]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	2b57      	cmp	r3, #87	; 0x57
 80160e6:	d131      	bne.n	801614c <pifGps_ParsingNmea+0x3dc>
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80160ee:	61ba      	str	r2, [r7, #24]
 80160f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80160f4:	61fb      	str	r3, [r7, #28]
 80160f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f8:	ed97 7b06 	vldr	d7, [r7, #24]
 80160fc:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016100:	e024      	b.n	801614c <pifGps_ParsingNmea+0x3dc>
				case 6: 
					p_owner->_fix = (string[0]  > '0');
 8016102:	4b63      	ldr	r3, [pc, #396]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	2b30      	cmp	r3, #48	; 0x30
 8016108:	bf8c      	ite	hi
 801610a:	2301      	movhi	r3, #1
 801610c:	2300      	movls	r3, #0
 801610e:	b2d9      	uxtb	r1, r3
 8016110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016112:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016116:	f361 0300 	bfi	r3, r1, #0, #1
 801611a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
					break;
 801611e:	e016      	b.n	801614e <pifGps_ParsingNmea+0x3de>
				case 7: 
					p_owner->_num_sat = _convertString2Interger(string);
 8016120:	485b      	ldr	r0, [pc, #364]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016122:	f7ff fc73 	bl	8015a0c <_convertString2Interger>
 8016126:	4603      	mov	r3, r0
 8016128:	b2da      	uxtb	r2, r3
 801612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 8016130:	e00d      	b.n	801614e <pifGps_ParsingNmea+0x3de>
				case 9: 
					p_owner->_altitude = _convertString2Float(string);
 8016132:	4857      	ldr	r0, [pc, #348]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016134:	f7ff fbde 	bl	80158f4 <_convertString2Float>
 8016138:	eeb0 7a40 	vmov.f32	s14, s0
 801613c:	eef0 7a60 	vmov.f32	s15, s1
 8016140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016142:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 8016146:	e002      	b.n	801614e <pifGps_ParsingNmea+0x3de>
					break;
 8016148:	bf00      	nop
 801614a:	e27d      	b.n	8016648 <pifGps_ParsingNmea+0x8d8>
					break;
 801614c:	bf00      	nop
				}
				break;
 801614e:	e27b      	b.n	8016648 <pifGps_ParsingNmea+0x8d8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				switch (param) {
 8016150:	4b52      	ldr	r3, [pc, #328]	; (801629c <pifGps_ParsingNmea+0x52c>)
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	3b01      	subs	r3, #1
 8016156:	2b04      	cmp	r3, #4
 8016158:	f200 8278 	bhi.w	801664c <pifGps_ParsingNmea+0x8dc>
 801615c:	a201      	add	r2, pc, #4	; (adr r2, 8016164 <pifGps_ParsingNmea+0x3f4>)
 801615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016162:	bf00      	nop
 8016164:	08016179 	.word	0x08016179
 8016168:	0801618f 	.word	0x0801618f
 801616c:	080161b1 	.word	0x080161b1
 8016170:	080161c7 	.word	0x080161c7
 8016174:	080161e9 	.word	0x080161e9
				case 1: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016178:	4845      	ldr	r0, [pc, #276]	; (8016290 <pifGps_ParsingNmea+0x520>)
 801617a:	f7ff fc81 	bl	8015a80 <_convertString2Degrees>
 801617e:	eeb0 7a40 	vmov.f32	s14, s0
 8016182:	eef0 7a60 	vmov.f32	s15, s1
 8016186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016188:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801618c:	e036      	b.n	80161fc <pifGps_ParsingNmea+0x48c>
				case 2:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801618e:	4b40      	ldr	r3, [pc, #256]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	2b53      	cmp	r3, #83	; 0x53
 8016194:	d12f      	bne.n	80161f6 <pifGps_ParsingNmea+0x486>
 8016196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016198:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801619c:	613a      	str	r2, [r7, #16]
 801619e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80161a2:	617b      	str	r3, [r7, #20]
 80161a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80161aa:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80161ae:	e022      	b.n	80161f6 <pifGps_ParsingNmea+0x486>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80161b0:	4837      	ldr	r0, [pc, #220]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80161b2:	f7ff fc65 	bl	8015a80 <_convertString2Degrees>
 80161b6:	eeb0 7a40 	vmov.f32	s14, s0
 80161ba:	eef0 7a60 	vmov.f32	s15, s1
 80161be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c0:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80161c4:	e01a      	b.n	80161fc <pifGps_ParsingNmea+0x48c>
				case 4:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80161c6:	4b32      	ldr	r3, [pc, #200]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	2b57      	cmp	r3, #87	; 0x57
 80161cc:	d115      	bne.n	80161fa <pifGps_ParsingNmea+0x48a>
 80161ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80161d4:	60ba      	str	r2, [r7, #8]
 80161d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80161da:	60fb      	str	r3, [r7, #12]
 80161dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161de:	ed97 7b02 	vldr	d7, [r7, #8]
 80161e2:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80161e6:	e008      	b.n	80161fa <pifGps_ParsingNmea+0x48a>
				case 5:
					 _convertString2Time(string, &p_owner->_utc);
 80161e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ea:	330e      	adds	r3, #14
 80161ec:	4619      	mov	r1, r3
 80161ee:	4828      	ldr	r0, [pc, #160]	; (8016290 <pifGps_ParsingNmea+0x520>)
 80161f0:	f7ff fafe 	bl	80157f0 <_convertString2Time>
					break;
 80161f4:	e002      	b.n	80161fc <pifGps_ParsingNmea+0x48c>
					break;
 80161f6:	bf00      	nop
 80161f8:	e228      	b.n	801664c <pifGps_ParsingNmea+0x8dc>
					break;
 80161fa:	bf00      	nop
				}
				break;
 80161fc:	e226      	b.n	801664c <pifGps_ParsingNmea+0x8dc>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				switch (param) {
 80161fe:	4b27      	ldr	r3, [pc, #156]	; (801629c <pifGps_ParsingNmea+0x52c>)
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	3b01      	subs	r3, #1
 8016204:	2b08      	cmp	r3, #8
 8016206:	f200 8223 	bhi.w	8016650 <pifGps_ParsingNmea+0x8e0>
 801620a:	a201      	add	r2, pc, #4	; (adr r2, 8016210 <pifGps_ParsingNmea+0x4a0>)
 801620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016210:	08016235 	.word	0x08016235
 8016214:	08016243 	.word	0x08016243
 8016218:	08016259 	.word	0x08016259
 801621c:	0801627b 	.word	0x0801627b
 8016220:	080162a1 	.word	0x080162a1
 8016224:	08016651 	.word	0x08016651
 8016228:	080162bd 	.word	0x080162bd
 801622c:	08016651 	.word	0x08016651
 8016230:	080162cf 	.word	0x080162cf
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 8016234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016236:	330e      	adds	r3, #14
 8016238:	4619      	mov	r1, r3
 801623a:	4815      	ldr	r0, [pc, #84]	; (8016290 <pifGps_ParsingNmea+0x520>)
 801623c:	f7ff fad8 	bl	80157f0 <_convertString2Time>
					break;
 8016240:	e053      	b.n	80162ea <pifGps_ParsingNmea+0x57a>
				case 2:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016242:	4813      	ldr	r0, [pc, #76]	; (8016290 <pifGps_ParsingNmea+0x520>)
 8016244:	f7ff fc1c 	bl	8015a80 <_convertString2Degrees>
 8016248:	eeb0 7a40 	vmov.f32	s14, s0
 801624c:	eef0 7a60 	vmov.f32	s15, s1
 8016250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016252:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016256:	e048      	b.n	80162ea <pifGps_ParsingNmea+0x57a>
				case 3:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016258:	4b0d      	ldr	r3, [pc, #52]	; (8016290 <pifGps_ParsingNmea+0x520>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b53      	cmp	r3, #83	; 0x53
 801625e:	d141      	bne.n	80162e4 <pifGps_ParsingNmea+0x574>
 8016260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016262:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016266:	603a      	str	r2, [r7, #0]
 8016268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801626c:	607b      	str	r3, [r7, #4]
 801626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016270:	ed97 7b00 	vldr	d7, [r7]
 8016274:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016278:	e034      	b.n	80162e4 <pifGps_ParsingNmea+0x574>
				case 4:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 801627a:	4805      	ldr	r0, [pc, #20]	; (8016290 <pifGps_ParsingNmea+0x520>)
 801627c:	f7ff fc00 	bl	8015a80 <_convertString2Degrees>
 8016280:	eeb0 7a40 	vmov.f32	s14, s0
 8016284:	eef0 7a60 	vmov.f32	s15, s1
 8016288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801628a:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 801628e:	e02c      	b.n	80162ea <pifGps_ParsingNmea+0x57a>
 8016290:	20001d44 	.word	0x20001d44
 8016294:	20001d64 	.word	0x20001d64
 8016298:	20001d41 	.word	0x20001d41
 801629c:	20001d40 	.word	0x20001d40
				case 5:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80162a0:	4bb5      	ldr	r3, [pc, #724]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	2b57      	cmp	r3, #87	; 0x57
 80162a6:	d11f      	bne.n	80162e8 <pifGps_ParsingNmea+0x578>
 80162a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80162ae:	4692      	mov	sl, r2
 80162b0:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	e9c3 ab08 	strd	sl, fp, [r3, #32]
					break;
 80162ba:	e015      	b.n	80162e8 <pifGps_ParsingNmea+0x578>
				case 7:
					p_owner->_num_sat = _convertString2Interger(string);
 80162bc:	48ae      	ldr	r0, [pc, #696]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80162be:	f7ff fba5 	bl	8015a0c <_convertString2Interger>
 80162c2:	4603      	mov	r3, r0
 80162c4:	b2da      	uxtb	r2, r3
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 80162cc:	e00d      	b.n	80162ea <pifGps_ParsingNmea+0x57a>
				case 9:
					p_owner->_altitude = _convertString2Float(string);
 80162ce:	48aa      	ldr	r0, [pc, #680]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80162d0:	f7ff fb10 	bl	80158f4 <_convertString2Float>
 80162d4:	eeb0 7a40 	vmov.f32	s14, s0
 80162d8:	eef0 7a60 	vmov.f32	s15, s1
 80162dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162de:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 80162e2:	e002      	b.n	80162ea <pifGps_ParsingNmea+0x57a>
					break;
 80162e4:	bf00      	nop
 80162e6:	e1b3      	b.n	8016650 <pifGps_ParsingNmea+0x8e0>
					break;
 80162e8:	bf00      	nop
				}
				break;
 80162ea:	e1b1      	b.n	8016650 <pifGps_ParsingNmea+0x8e0>

			case PIF_GPS_NMEA_MSG_ID_GST:
				break;

			case PIF_GPS_NMEA_MSG_ID_GSV:
				switch (param) {
 80162ec:	4ba3      	ldr	r3, [pc, #652]	; (801657c <pifGps_ParsingNmea+0x80c>)
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	2b03      	cmp	r3, #3
 80162f2:	d00e      	beq.n	8016312 <pifGps_ParsingNmea+0x5a2>
 80162f4:	2b03      	cmp	r3, #3
 80162f6:	dc16      	bgt.n	8016326 <pifGps_ParsingNmea+0x5b6>
 80162f8:	2b01      	cmp	r3, #1
 80162fa:	d013      	beq.n	8016324 <pifGps_ParsingNmea+0x5b4>
 80162fc:	2b02      	cmp	r3, #2
 80162fe:	d112      	bne.n	8016326 <pifGps_ParsingNmea+0x5b6>
				case 1:
                    // Total number of messages of this type in this cycle
					break;
				case 2:
                    // Message number
					p_owner->__sv_msg_num = _convertString2Interger(string);
 8016300:	489d      	ldr	r0, [pc, #628]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016302:	f7ff fb83 	bl	8015a0c <_convertString2Interger>
 8016306:	4603      	mov	r3, r0
 8016308:	b2da      	uxtb	r2, r3
 801630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					break;
 8016310:	e009      	b.n	8016326 <pifGps_ParsingNmea+0x5b6>
				case 3:
                    // Total number of SVs visible
					p_owner->_sv_num_sv = _convertString2Interger(string);
 8016312:	4899      	ldr	r0, [pc, #612]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016314:	f7ff fb7a 	bl	8015a0c <_convertString2Interger>
 8016318:	4603      	mov	r3, r0
 801631a:	b2da      	uxtb	r2, r3
 801631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
					break;
 8016322:	e000      	b.n	8016326 <pifGps_ParsingNmea+0x5b6>
					break;
 8016324:	bf00      	nop
				}
				if (param < 4) break;
 8016326:	4b95      	ldr	r3, [pc, #596]	; (801657c <pifGps_ParsingNmea+0x80c>)
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2b03      	cmp	r3, #3
 801632c:	f240 8192 	bls.w	8016654 <pifGps_ParsingNmea+0x8e4>

				sv_packet_idx = (param - 4) / 4 + 1; // satellite number in packet, 1-4
 8016330:	4b92      	ldr	r3, [pc, #584]	; (801657c <pifGps_ParsingNmea+0x80c>)
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	3b04      	subs	r3, #4
 8016336:	2b00      	cmp	r3, #0
 8016338:	da00      	bge.n	801633c <pifGps_ParsingNmea+0x5cc>
 801633a:	3303      	adds	r3, #3
 801633c:	109b      	asrs	r3, r3, #2
 801633e:	b2db      	uxtb	r3, r3
 8016340:	3301      	adds	r3, #1
 8016342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				sv_sat_num    = sv_packet_idx + (4 * (p_owner->__sv_msg_num - 1)); // global satellite number
 8016346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016348:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801634c:	3b01      	subs	r3, #1
 801634e:	b2db      	uxtb	r3, r3
 8016350:	009b      	lsls	r3, r3, #2
 8016352:	b2da      	uxtb	r2, r3
 8016354:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016358:	4413      	add	r3, r2
 801635a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				sv_sat_param  = param - 3 - (4 * (sv_packet_idx - 1)); // parameter number for satellite
 801635e:	4b87      	ldr	r3, [pc, #540]	; (801657c <pifGps_ParsingNmea+0x80c>)
 8016360:	781a      	ldrb	r2, [r3, #0]
 8016362:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016366:	3b01      	subs	r3, #1
 8016368:	b2db      	uxtb	r3, r3
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	b2db      	uxtb	r3, r3
 801636e:	1ad3      	subs	r3, r2, r3
 8016370:	b2db      	uxtb	r3, r3
 8016372:	3b03      	subs	r3, #3
 8016374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 8016378:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801637c:	2b10      	cmp	r3, #16
 801637e:	f200 816b 	bhi.w	8016658 <pifGps_ParsingNmea+0x8e8>

				switch (sv_sat_param) {
 8016382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016386:	3b01      	subs	r3, #1
 8016388:	2b03      	cmp	r3, #3
 801638a:	d838      	bhi.n	80163fe <pifGps_ParsingNmea+0x68e>
 801638c:	a201      	add	r2, pc, #4	; (adr r2, 8016394 <pifGps_ParsingNmea+0x624>)
 801638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016392:	bf00      	nop
 8016394:	080163a5 	.word	0x080163a5
 8016398:	080163ff 	.word	0x080163ff
 801639c:	080163ff 	.word	0x080163ff
 80163a0:	080163d3 	.word	0x080163d3
				case 1:
					// SV PRN number
					p_owner->_sv_chn[sv_sat_num - 1]  = sv_sat_num;
 80163a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80163a8:	3b01      	subs	r3, #1
 80163aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163ac:	4413      	add	r3, r2
 80163ae:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80163b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
					p_owner->_sv_svid[sv_sat_num - 1] = _convertString2Interger(string);
 80163b6:	4870      	ldr	r0, [pc, #448]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80163b8:	f7ff fb28 	bl	8015a0c <_convertString2Interger>
 80163bc:	4602      	mov	r2, r0
 80163be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80163c2:	3b01      	subs	r3, #1
 80163c4:	b2d1      	uxtb	r1, r2
 80163c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163c8:	4413      	add	r3, r2
 80163ca:	460a      	mov	r2, r1
 80163cc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					break;
 80163d0:	e015      	b.n	80163fe <pifGps_ParsingNmea+0x68e>
				case 3:
					// Azimuth, degrees from True North, 000 through 359
					break;
				case 4:
					// SNR, 00 through 99 dB (null when not tracking)
					p_owner->_sv_cno[sv_sat_num - 1] = _convertString2Interger(string);
 80163d2:	4869      	ldr	r0, [pc, #420]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80163d4:	f7ff fb1a 	bl	8015a0c <_convertString2Interger>
 80163d8:	4602      	mov	r2, r0
 80163da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80163de:	3b01      	subs	r3, #1
 80163e0:	b2d1      	uxtb	r1, r2
 80163e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163e4:	4413      	add	r3, r2
 80163e6:	460a      	mov	r2, r1
 80163e8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					p_owner->_sv_quality[sv_sat_num - 1] = 0; // only used by ublox
 80163ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80163f0:	3b01      	subs	r3, #1
 80163f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163f4:	4413      	add	r3, r2
 80163f6:	2200      	movs	r2, #0
 80163f8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
					break;
 80163fc:	bf00      	nop
				}

				p_owner->_sv_received_count++;
 80163fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016404:	1c5a      	adds	r2, r3, #1
 8016406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				break;
 801640c:	e12b      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_RMC:
				switch (param) {
 801640e:	4b5b      	ldr	r3, [pc, #364]	; (801657c <pifGps_ParsingNmea+0x80c>)
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	3b01      	subs	r3, #1
 8016414:	2b08      	cmp	r3, #8
 8016416:	f200 8121 	bhi.w	801665c <pifGps_ParsingNmea+0x8ec>
 801641a:	a201      	add	r2, pc, #4	; (adr r2, 8016420 <pifGps_ParsingNmea+0x6b0>)
 801641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016420:	08016445 	.word	0x08016445
 8016424:	0801665d 	.word	0x0801665d
 8016428:	08016453 	.word	0x08016453
 801642c:	08016469 	.word	0x08016469
 8016430:	08016485 	.word	0x08016485
 8016434:	0801649b 	.word	0x0801649b
 8016438:	080164b7 	.word	0x080164b7
 801643c:	080164d7 	.word	0x080164d7
 8016440:	080164ed 	.word	0x080164ed
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 8016444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016446:	330e      	adds	r3, #14
 8016448:	4619      	mov	r1, r3
 801644a:	484b      	ldr	r0, [pc, #300]	; (8016578 <pifGps_ParsingNmea+0x808>)
 801644c:	f7ff f9d0 	bl	80157f0 <_convertString2Time>
					break;
 8016450:	e056      	b.n	8016500 <pifGps_ParsingNmea+0x790>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016452:	4849      	ldr	r0, [pc, #292]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016454:	f7ff fb14 	bl	8015a80 <_convertString2Degrees>
 8016458:	eeb0 7a40 	vmov.f32	s14, s0
 801645c:	eef0 7a60 	vmov.f32	s15, s1
 8016460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016462:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016466:	e04b      	b.n	8016500 <pifGps_ParsingNmea+0x790>
				case 4:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016468:	4b43      	ldr	r3, [pc, #268]	; (8016578 <pifGps_ParsingNmea+0x808>)
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	2b53      	cmp	r3, #83	; 0x53
 801646e:	d144      	bne.n	80164fa <pifGps_ParsingNmea+0x78a>
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016476:	4690      	mov	r8, r2
 8016478:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647e:	e9c3 8906 	strd	r8, r9, [r3, #24]
					break;
 8016482:	e03a      	b.n	80164fa <pifGps_ParsingNmea+0x78a>
				case 5:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016484:	483c      	ldr	r0, [pc, #240]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016486:	f7ff fafb 	bl	8015a80 <_convertString2Degrees>
 801648a:	eeb0 7a40 	vmov.f32	s14, s0
 801648e:	eef0 7a60 	vmov.f32	s15, s1
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016498:	e032      	b.n	8016500 <pifGps_ParsingNmea+0x790>
				case 6:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801649a:	4b37      	ldr	r3, [pc, #220]	; (8016578 <pifGps_ParsingNmea+0x808>)
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	2b57      	cmp	r3, #87	; 0x57
 80164a0:	d12d      	bne.n	80164fe <pifGps_ParsingNmea+0x78e>
 80164a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80164a8:	4614      	mov	r4, r2
 80164aa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	e9c3 4508 	strd	r4, r5, [r3, #32]
					break;
 80164b4:	e023      	b.n	80164fe <pifGps_ParsingNmea+0x78e>
				case 7:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 80164b6:	4830      	ldr	r0, [pc, #192]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80164b8:	f7ff fa1c 	bl	80158f4 <_convertString2Float>
 80164bc:	ec51 0b10 	vmov	r0, r1, d0
 80164c0:	a32b      	add	r3, pc, #172	; (adr r3, 8016570 <pifGps_ParsingNmea+0x800>)
 80164c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c6:	f7ea f84b 	bl	8000560 <__aeabi_dmul>
 80164ca:	4602      	mov	r2, r0
 80164cc:	460b      	mov	r3, r1
 80164ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 80164d4:	e014      	b.n	8016500 <pifGps_ParsingNmea+0x790>
				case 8:
					p_owner->_ground_course = _convertString2Float(string);
 80164d6:	4828      	ldr	r0, [pc, #160]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80164d8:	f7ff fa0c 	bl	80158f4 <_convertString2Float>
 80164dc:	eeb0 7a40 	vmov.f32	s14, s0
 80164e0:	eef0 7a60 	vmov.f32	s15, s1
 80164e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 80164ea:	e009      	b.n	8016500 <pifGps_ParsingNmea+0x790>
				case 9:
					_convertString2Date(string, &p_owner->_utc);
 80164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ee:	330e      	adds	r3, #14
 80164f0:	4619      	mov	r1, r3
 80164f2:	4821      	ldr	r0, [pc, #132]	; (8016578 <pifGps_ParsingNmea+0x808>)
 80164f4:	f7ff f938 	bl	8015768 <_convertString2Date>
					break;
 80164f8:	e002      	b.n	8016500 <pifGps_ParsingNmea+0x790>
					break;
 80164fa:	bf00      	nop
 80164fc:	e0ae      	b.n	801665c <pifGps_ParsingNmea+0x8ec>
					break;
 80164fe:	bf00      	nop
				}
				break;
 8016500:	e0ac      	b.n	801665c <pifGps_ParsingNmea+0x8ec>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 8016502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016508:	2b00      	cmp	r3, #0
 801650a:	d043      	beq.n	8016594 <pifGps_ParsingNmea+0x824>
					switch (param) {
 801650c:	4b1b      	ldr	r3, [pc, #108]	; (801657c <pifGps_ParsingNmea+0x80c>)
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	3b01      	subs	r3, #1
 8016512:	2b03      	cmp	r3, #3
 8016514:	f200 80a4 	bhi.w	8016660 <pifGps_ParsingNmea+0x8f0>
 8016518:	a201      	add	r2, pc, #4	; (adr r2, 8016520 <pifGps_ParsingNmea+0x7b0>)
 801651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801651e:	bf00      	nop
 8016520:	08016531 	.word	0x08016531
 8016524:	08016545 	.word	0x08016545
 8016528:	08016559 	.word	0x08016559
 801652c:	08016581 	.word	0x08016581
					case 1:
						p_owner->__p_txt->total = _convertString2Interger(string);
 8016530:	4811      	ldr	r0, [pc, #68]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016532:	f7ff fa6b 	bl	8015a0c <_convertString2Interger>
 8016536:	4602      	mov	r2, r0
 8016538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801653e:	b2d2      	uxtb	r2, r2
 8016540:	701a      	strb	r2, [r3, #0]
						break;
 8016542:	e028      	b.n	8016596 <pifGps_ParsingNmea+0x826>
					case 2:
						p_owner->__p_txt->num = _convertString2Interger(string);
 8016544:	480c      	ldr	r0, [pc, #48]	; (8016578 <pifGps_ParsingNmea+0x808>)
 8016546:	f7ff fa61 	bl	8015a0c <_convertString2Interger>
 801654a:	4602      	mov	r2, r0
 801654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016552:	b2d2      	uxtb	r2, r2
 8016554:	705a      	strb	r2, [r3, #1]
						break;
 8016556:	e01e      	b.n	8016596 <pifGps_ParsingNmea+0x826>
					case 3:
						p_owner->__p_txt->type = _convertString2Interger(string);
 8016558:	4807      	ldr	r0, [pc, #28]	; (8016578 <pifGps_ParsingNmea+0x808>)
 801655a:	f7ff fa57 	bl	8015a0c <_convertString2Interger>
 801655e:	4602      	mov	r2, r0
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016566:	b2d2      	uxtb	r2, r2
 8016568:	709a      	strb	r2, [r3, #2]
						break;
 801656a:	e014      	b.n	8016596 <pifGps_ParsingNmea+0x826>
 801656c:	f3af 8000 	nop.w
 8016570:	00000000 	.word	0x00000000
 8016574:	40e91e80 	.word	0x40e91e80
 8016578:	20001d44 	.word	0x20001d44
 801657c:	20001d40 	.word	0x20001d40
					case 4:
						strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 8016580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016586:	3303      	adds	r3, #3
 8016588:	223f      	movs	r2, #63	; 0x3f
 801658a:	499b      	ldr	r1, [pc, #620]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 801658c:	4618      	mov	r0, r3
 801658e:	f00c fb17 	bl	8022bc0 <strncpy>
						break;
 8016592:	e000      	b.n	8016596 <pifGps_ParsingNmea+0x826>
					}
				}
 8016594:	bf00      	nop
				break;
 8016596:	e063      	b.n	8016660 <pifGps_ParsingNmea+0x8f0>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				switch (param) {
 8016598:	4b98      	ldr	r3, [pc, #608]	; (80167fc <pifGps_ParsingNmea+0xa8c>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	2b01      	cmp	r3, #1
 801659e:	d002      	beq.n	80165a6 <pifGps_ParsingNmea+0x836>
 80165a0:	2b05      	cmp	r3, #5
 80165a2:	d00b      	beq.n	80165bc <pifGps_ParsingNmea+0x84c>
					break;
				case 5:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
					break;
				}
				break;
 80165a4:	e05f      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
					p_owner->_ground_course = _convertString2Float(string);
 80165a6:	4894      	ldr	r0, [pc, #592]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80165a8:	f7ff f9a4 	bl	80158f4 <_convertString2Float>
 80165ac:	eeb0 7a40 	vmov.f32	s14, s0
 80165b0:	eef0 7a60 	vmov.f32	s15, s1
 80165b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 80165ba:	e00f      	b.n	80165dc <pifGps_ParsingNmea+0x86c>
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 80165bc:	488e      	ldr	r0, [pc, #568]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80165be:	f7ff f999 	bl	80158f4 <_convertString2Float>
 80165c2:	ec51 0b10 	vmov	r0, r1, d0
 80165c6:	a38a      	add	r3, pc, #552	; (adr r3, 80167f0 <pifGps_ParsingNmea+0xa80>)
 80165c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165cc:	f7e9 ffc8 	bl	8000560 <__aeabi_dmul>
 80165d0:	4602      	mov	r2, r0
 80165d2:	460b      	mov	r3, r1
 80165d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 80165da:	bf00      	nop
				break;
 80165dc:	e043      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				switch (param) {
 80165de:	4b87      	ldr	r3, [pc, #540]	; (80167fc <pifGps_ParsingNmea+0xa8c>)
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	3b01      	subs	r3, #1
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d83d      	bhi.n	8016664 <pifGps_ParsingNmea+0x8f4>
 80165e8:	a201      	add	r2, pc, #4	; (adr r2, 80165f0 <pifGps_ParsingNmea+0x880>)
 80165ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165ee:	bf00      	nop
 80165f0:	08016601 	.word	0x08016601
 80165f4:	0801660f 	.word	0x0801660f
 80165f8:	0801661f 	.word	0x0801661f
 80165fc:	0801662f 	.word	0x0801662f
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 8016600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016602:	330e      	adds	r3, #14
 8016604:	4619      	mov	r1, r3
 8016606:	487c      	ldr	r0, [pc, #496]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 8016608:	f7ff f8f2 	bl	80157f0 <_convertString2Time>
					break;
 801660c:	e019      	b.n	8016642 <pifGps_ParsingNmea+0x8d2>
				case 2:
					p_owner->_utc.day = _convertString2Interger(string);
 801660e:	487a      	ldr	r0, [pc, #488]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 8016610:	f7ff f9fc 	bl	8015a0c <_convertString2Interger>
 8016614:	4603      	mov	r3, r0
 8016616:	b2da      	uxtb	r2, r3
 8016618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661a:	741a      	strb	r2, [r3, #16]
					break;
 801661c:	e011      	b.n	8016642 <pifGps_ParsingNmea+0x8d2>
				case 3:
					p_owner->_utc.month = _convertString2Interger(string);
 801661e:	4876      	ldr	r0, [pc, #472]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 8016620:	f7ff f9f4 	bl	8015a0c <_convertString2Interger>
 8016624:	4603      	mov	r3, r0
 8016626:	b2da      	uxtb	r2, r3
 8016628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662a:	73da      	strb	r2, [r3, #15]
					break;
 801662c:	e009      	b.n	8016642 <pifGps_ParsingNmea+0x8d2>
				case 4:
					p_owner->_utc.year = _convertString2Interger(string) - 2000;
 801662e:	4872      	ldr	r0, [pc, #456]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 8016630:	f7ff f9ec 	bl	8015a0c <_convertString2Interger>
 8016634:	4603      	mov	r3, r0
 8016636:	b2db      	uxtb	r3, r3
 8016638:	3330      	adds	r3, #48	; 0x30
 801663a:	b2da      	uxtb	r2, r3
 801663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801663e:	739a      	strb	r2, [r3, #14]
					break;
 8016640:	bf00      	nop
				}
				break;
 8016642:	e00f      	b.n	8016664 <pifGps_ParsingNmea+0x8f4>
			}
		}
 8016644:	bf00      	nop
 8016646:	e00e      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 8016648:	bf00      	nop
 801664a:	e00c      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 801664c:	bf00      	nop
 801664e:	e00a      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 8016650:	bf00      	nop
 8016652:	e008      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				if (param < 4) break;
 8016654:	bf00      	nop
 8016656:	e006      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 8016658:	bf00      	nop
 801665a:	e004      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 801665c:	bf00      	nop
 801665e:	e002      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 8016660:	bf00      	nop
 8016662:	e000      	b.n	8016666 <pifGps_ParsingNmea+0x8f6>
				break;
 8016664:	bf00      	nop
		param++;
 8016666:	4b65      	ldr	r3, [pc, #404]	; (80167fc <pifGps_ParsingNmea+0xa8c>)
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	3301      	adds	r3, #1
 801666c:	b2da      	uxtb	r2, r3
 801666e:	4b63      	ldr	r3, [pc, #396]	; (80167fc <pifGps_ParsingNmea+0xa8c>)
 8016670:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 8016672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016676:	2b2a      	cmp	r3, #42	; 0x2a
 8016678:	d103      	bne.n	8016682 <pifGps_ParsingNmea+0x912>
 801667a:	4b61      	ldr	r3, [pc, #388]	; (8016800 <pifGps_ParsingNmea+0xa90>)
 801667c:	2201      	movs	r2, #1
 801667e:	701a      	strb	r2, [r3, #0]
 8016680:	e007      	b.n	8016692 <pifGps_ParsingNmea+0x922>
		else parity ^= c;
 8016682:	4b60      	ldr	r3, [pc, #384]	; (8016804 <pifGps_ParsingNmea+0xa94>)
 8016684:	781a      	ldrb	r2, [r3, #0]
 8016686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801668a:	4053      	eors	r3, r2
 801668c:	b2da      	uxtb	r2, r3
 801668e:	4b5d      	ldr	r3, [pc, #372]	; (8016804 <pifGps_ParsingNmea+0xa94>)
 8016690:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016694:	689b      	ldr	r3, [r3, #8]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d018      	beq.n	80166cc <pifGps_ParsingNmea+0x95c>
			string[offset++] = c;
 801669a:	4b5b      	ldr	r3, [pc, #364]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	1c5a      	adds	r2, r3, #1
 80166a0:	b2d1      	uxtb	r1, r2
 80166a2:	4a59      	ldr	r2, [pc, #356]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80166a4:	7011      	strb	r1, [r2, #0]
 80166a6:	4619      	mov	r1, r3
 80166a8:	4a53      	ldr	r2, [pc, #332]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80166aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166ae:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 80166b0:	4b55      	ldr	r3, [pc, #340]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80166b2:	781b      	ldrb	r3, [r3, #0]
 80166b4:	1c5a      	adds	r2, r3, #1
 80166b6:	b2d1      	uxtb	r1, r2
 80166b8:	4a53      	ldr	r2, [pc, #332]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80166ba:	7011      	strb	r1, [r2, #0]
 80166bc:	461a      	mov	r2, r3
 80166be:	4b4e      	ldr	r3, [pc, #312]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80166c0:	2100      	movs	r1, #0
 80166c2:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 80166c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c6:	689b      	ldr	r3, [r3, #8]
 80166c8:	484b      	ldr	r0, [pc, #300]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80166ca:	4798      	blx	r3
		}
		offset = 0;
 80166cc:	4b4e      	ldr	r3, [pc, #312]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80166ce:	2200      	movs	r2, #0
 80166d0:	701a      	strb	r2, [r3, #0]
 80166d2:	e0ba      	b.n	801684a <pifGps_ParsingNmea+0xada>
	}
	else if (c == '\r' || c == '\n') {
 80166d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166d8:	2b0d      	cmp	r3, #13
 80166da:	d004      	beq.n	80166e6 <pifGps_ParsingNmea+0x976>
 80166dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166e0:	2b0a      	cmp	r3, #10
 80166e2:	f040 8097 	bne.w	8016814 <pifGps_ParsingNmea+0xaa4>
		if (msg_id && checksum_param) { //parity checksum
 80166e6:	4b49      	ldr	r3, [pc, #292]	; (801680c <pifGps_ParsingNmea+0xa9c>)
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d058      	beq.n	80167a0 <pifGps_ParsingNmea+0xa30>
 80166ee:	4b44      	ldr	r3, [pc, #272]	; (8016800 <pifGps_ParsingNmea+0xa90>)
 80166f0:	781b      	ldrb	r3, [r3, #0]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d054      	beq.n	80167a0 <pifGps_ParsingNmea+0xa30>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 80166f6:	4b40      	ldr	r3, [pc, #256]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7ff fa62 	bl	8015bc4 <_convertAscii2Hex>
 8016700:	4603      	mov	r3, r0
 8016702:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum <<= 4;
 8016706:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801670a:	011b      	lsls	r3, r3, #4
 801670c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum += _convertAscii2Hex(string[1]);
 8016710:	4b39      	ldr	r3, [pc, #228]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 8016712:	785b      	ldrb	r3, [r3, #1]
 8016714:	4618      	mov	r0, r3
 8016716:	f7ff fa55 	bl	8015bc4 <_convertAscii2Hex>
 801671a:	4603      	mov	r3, r0
 801671c:	461a      	mov	r2, r3
 801671e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016722:	4413      	add	r3, r2
 8016724:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (checksum == parity) {
 8016728:	4b36      	ldr	r3, [pc, #216]	; (8016804 <pifGps_ParsingNmea+0xa94>)
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8016730:	429a      	cmp	r2, r3
 8016732:	d122      	bne.n	801677a <pifGps_ParsingNmea+0xa0a>
				if (p_owner->evt_nmea_receive) {
 8016734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d00c      	beq.n	8016756 <pifGps_ParsingNmea+0x9e6>
					if ((p_owner->evt_nmea_receive)(p_owner, msg_id)) pifGps_SendEvent(p_owner);
 801673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4a32      	ldr	r2, [pc, #200]	; (801680c <pifGps_ParsingNmea+0xa9c>)
 8016742:	7812      	ldrb	r2, [r2, #0]
 8016744:	4611      	mov	r1, r2
 8016746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016748:	4798      	blx	r3
 801674a:	4603      	mov	r3, r0
 801674c:	2b00      	cmp	r3, #0
 801674e:	d002      	beq.n	8016756 <pifGps_ParsingNmea+0x9e6>
 8016750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016752:	f7ff fae9 	bl	8015d28 <pifGps_SendEvent>
				}
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 8016756:	4b2d      	ldr	r3, [pc, #180]	; (801680c <pifGps_ParsingNmea+0xa9c>)
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	2b0c      	cmp	r3, #12
 801675c:	d11d      	bne.n	801679a <pifGps_ParsingNmea+0xa2a>
 801675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016760:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016764:	2b00      	cmp	r3, #0
 8016766:	d018      	beq.n	801679a <pifGps_ParsingNmea+0xa2a>
					(p_owner->__evt_text)(p_owner->__p_txt);
 8016768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801676a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016770:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8016774:	4610      	mov	r0, r2
 8016776:	4798      	blx	r3
 8016778:	e00f      	b.n	801679a <pifGps_ParsingNmea+0xa2a>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 801677a:	4b24      	ldr	r3, [pc, #144]	; (801680c <pifGps_ParsingNmea+0xa9c>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	4619      	mov	r1, r3
 8016780:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016784:	4a1f      	ldr	r2, [pc, #124]	; (8016804 <pifGps_ParsingNmea+0xa94>)
 8016786:	7812      	ldrb	r2, [r2, #0]
 8016788:	9201      	str	r2, [sp, #4]
 801678a:	9300      	str	r3, [sp, #0]
 801678c:	460b      	mov	r3, r1
 801678e:	f240 12df 	movw	r2, #479	; 0x1df
 8016792:	491f      	ldr	r1, [pc, #124]	; (8016810 <pifGps_ParsingNmea+0xaa0>)
 8016794:	2004      	movs	r0, #4
 8016796:	f7fc feb3 	bl	8013500 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 801679a:	2301      	movs	r3, #1
 801679c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 80167a0:	4b17      	ldr	r3, [pc, #92]	; (8016800 <pifGps_ParsingNmea+0xa90>)
 80167a2:	2200      	movs	r2, #0
 80167a4:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 80167a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a8:	689b      	ldr	r3, [r3, #8]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d018      	beq.n	80167e0 <pifGps_ParsingNmea+0xa70>
			string[offset++] = c;
 80167ae:	4b16      	ldr	r3, [pc, #88]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	1c5a      	adds	r2, r3, #1
 80167b4:	b2d1      	uxtb	r1, r2
 80167b6:	4a14      	ldr	r2, [pc, #80]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80167b8:	7011      	strb	r1, [r2, #0]
 80167ba:	4619      	mov	r1, r3
 80167bc:	4a0e      	ldr	r2, [pc, #56]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80167be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167c2:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 80167c4:	4b10      	ldr	r3, [pc, #64]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	1c5a      	adds	r2, r3, #1
 80167ca:	b2d1      	uxtb	r1, r2
 80167cc:	4a0e      	ldr	r2, [pc, #56]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80167ce:	7011      	strb	r1, [r2, #0]
 80167d0:	461a      	mov	r2, r3
 80167d2:	4b09      	ldr	r3, [pc, #36]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80167d4:	2100      	movs	r1, #0
 80167d6:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 80167d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167da:	689b      	ldr	r3, [r3, #8]
 80167dc:	4806      	ldr	r0, [pc, #24]	; (80167f8 <pifGps_ParsingNmea+0xa88>)
 80167de:	4798      	blx	r3
		}
		offset = 0;
 80167e0:	4b09      	ldr	r3, [pc, #36]	; (8016808 <pifGps_ParsingNmea+0xa98>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	701a      	strb	r2, [r3, #0]
		return rtn;
 80167e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80167ea:	e02f      	b.n	801684c <pifGps_ParsingNmea+0xadc>
 80167ec:	f3af 8000 	nop.w
 80167f0:	00000000 	.word	0x00000000
 80167f4:	40e91e80 	.word	0x40e91e80
 80167f8:	20001d44 	.word	0x20001d44
 80167fc:	20001d40 	.word	0x20001d40
 8016800:	20001d65 	.word	0x20001d65
 8016804:	20001d42 	.word	0x20001d42
 8016808:	20001d41 	.word	0x20001d41
 801680c:	20001d64 	.word	0x20001d64
 8016810:	08027498 	.word	0x08027498
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016814:	4b10      	ldr	r3, [pc, #64]	; (8016858 <pifGps_ParsingNmea+0xae8>)
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	2b1f      	cmp	r3, #31
 801681a:	d80a      	bhi.n	8016832 <pifGps_ParsingNmea+0xac2>
 801681c:	4b0e      	ldr	r3, [pc, #56]	; (8016858 <pifGps_ParsingNmea+0xae8>)
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	1c5a      	adds	r2, r3, #1
 8016822:	b2d1      	uxtb	r1, r2
 8016824:	4a0c      	ldr	r2, [pc, #48]	; (8016858 <pifGps_ParsingNmea+0xae8>)
 8016826:	7011      	strb	r1, [r2, #0]
 8016828:	4619      	mov	r1, r3
 801682a:	4a0c      	ldr	r2, [pc, #48]	; (801685c <pifGps_ParsingNmea+0xaec>)
 801682c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016830:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8016832:	4b0b      	ldr	r3, [pc, #44]	; (8016860 <pifGps_ParsingNmea+0xaf0>)
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d107      	bne.n	801684a <pifGps_ParsingNmea+0xada>
 801683a:	4b0a      	ldr	r3, [pc, #40]	; (8016864 <pifGps_ParsingNmea+0xaf4>)
 801683c:	781a      	ldrb	r2, [r3, #0]
 801683e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016842:	4053      	eors	r3, r2
 8016844:	b2da      	uxtb	r2, r3
 8016846:	4b07      	ldr	r3, [pc, #28]	; (8016864 <pifGps_ParsingNmea+0xaf4>)
 8016848:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 801684a:	2300      	movs	r3, #0
}
 801684c:	4618      	mov	r0, r3
 801684e:	3738      	adds	r7, #56	; 0x38
 8016850:	46bd      	mov	sp, r7
 8016852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016856:	bf00      	nop
 8016858:	20001d41 	.word	0x20001d41
 801685c:	20001d44 	.word	0x20001d44
 8016860:	20001d65 	.word	0x20001d65
 8016864:	20001d42 	.word	0x20001d42

08016868 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016868:	b480      	push	{r7}
 801686a:	b087      	sub	sp, #28
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	4613      	mov	r3, r2
 8016874:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 8016876:	2300      	movs	r3, #0
 8016878:	75fb      	strb	r3, [r7, #23]
 801687a:	2300      	movs	r3, #0
 801687c:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 801687e:	2300      	movs	r3, #0
 8016880:	82bb      	strh	r3, [r7, #20]
 8016882:	e00d      	b.n	80168a0 <_checksumUbx+0x38>
		ck_a += p_header[i];
 8016884:	8abb      	ldrh	r3, [r7, #20]
 8016886:	68fa      	ldr	r2, [r7, #12]
 8016888:	4413      	add	r3, r2
 801688a:	781a      	ldrb	r2, [r3, #0]
 801688c:	7dfb      	ldrb	r3, [r7, #23]
 801688e:	4413      	add	r3, r2
 8016890:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016892:	7dba      	ldrb	r2, [r7, #22]
 8016894:	7dfb      	ldrb	r3, [r7, #23]
 8016896:	4413      	add	r3, r2
 8016898:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 801689a:	8abb      	ldrh	r3, [r7, #20]
 801689c:	3301      	adds	r3, #1
 801689e:	82bb      	strh	r3, [r7, #20]
 80168a0:	8abb      	ldrh	r3, [r7, #20]
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d9ee      	bls.n	8016884 <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80168a6:	2300      	movs	r3, #0
 80168a8:	82bb      	strh	r3, [r7, #20]
 80168aa:	e00d      	b.n	80168c8 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80168ac:	8abb      	ldrh	r3, [r7, #20]
 80168ae:	68ba      	ldr	r2, [r7, #8]
 80168b0:	4413      	add	r3, r2
 80168b2:	781a      	ldrb	r2, [r3, #0]
 80168b4:	7dfb      	ldrb	r3, [r7, #23]
 80168b6:	4413      	add	r3, r2
 80168b8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80168ba:	7dba      	ldrb	r2, [r7, #22]
 80168bc:	7dfb      	ldrb	r3, [r7, #23]
 80168be:	4413      	add	r3, r2
 80168c0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80168c2:	8abb      	ldrh	r3, [r7, #20]
 80168c4:	3301      	adds	r3, #1
 80168c6:	82bb      	strh	r3, [r7, #20]
 80168c8:	8aba      	ldrh	r2, [r7, #20]
 80168ca:	88fb      	ldrh	r3, [r7, #6]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d3ed      	bcc.n	80168ac <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80168d0:	7dfb      	ldrb	r3, [r7, #23]
 80168d2:	b29a      	uxth	r2, r3
 80168d4:	7dbb      	ldrb	r3, [r7, #22]
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	021b      	lsls	r3, r3, #8
 80168da:	b29b      	uxth	r3, r3
 80168dc:	4413      	add	r3, r2
 80168de:	b29b      	uxth	r3, r3
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	371c      	adds	r7, #28
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr

080168ec <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 80168ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168ee:	b08d      	sub	sp, #52	; 0x34
 80168f0:	af06      	add	r7, sp, #24
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80168fc:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80168fe:	e0db      	b.n	8016ab8 <_parsingPacket+0x1cc>
		switch (p_owner->__rx.state) {
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016906:	2b09      	cmp	r3, #9
 8016908:	f200 80d5 	bhi.w	8016ab6 <_parsingPacket+0x1ca>
 801690c:	a201      	add	r2, pc, #4	; (adr r2, 8016914 <_parsingPacket+0x28>)
 801690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016912:	bf00      	nop
 8016914:	0801693d 	.word	0x0801693d
 8016918:	08016979 	.word	0x08016979
 801691c:	08016993 	.word	0x08016993
 8016920:	080169a3 	.word	0x080169a3
 8016924:	080169b3 	.word	0x080169b3
 8016928:	080169c5 	.word	0x080169c5
 801692c:	08016a01 	.word	0x08016a01
 8016930:	08016a3b 	.word	0x08016a3b
 8016934:	08016a4f 	.word	0x08016a4f
 8016938:	08016a99 	.word	0x08016a99
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 801693c:	7afb      	ldrb	r3, [r7, #11]
 801693e:	2bb5      	cmp	r3, #181	; 0xb5
 8016940:	d107      	bne.n	8016952 <_parsingPacket+0x66>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2201      	movs	r2, #1
 8016946:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 801694a:	4b85      	ldr	r3, [pc, #532]	; (8016b60 <_parsingPacket+0x274>)
 801694c:	2204      	movs	r2, #4
 801694e:	701a      	strb	r2, [r3, #0]
 8016950:	e0b2      	b.n	8016ab8 <_parsingPacket+0x1cc>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	3308      	adds	r3, #8
 8016956:	7afa      	ldrb	r2, [r7, #11]
 8016958:	4611      	mov	r1, r2
 801695a:	4618      	mov	r0, r3
 801695c:	f7ff fa08 	bl	8015d70 <pifGps_ParsingNmea>
 8016960:	4603      	mov	r3, r0
 8016962:	2b00      	cmp	r3, #0
 8016964:	f000 80a8 	beq.w	8016ab8 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_NMEA;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2209      	movs	r2, #9
 801696c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8016970:	4b7b      	ldr	r3, [pc, #492]	; (8016b60 <_parsingPacket+0x274>)
 8016972:	2204      	movs	r2, #4
 8016974:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 8016976:	e09f      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 8016978:	7afb      	ldrb	r3, [r7, #11]
 801697a:	2b62      	cmp	r3, #98	; 0x62
 801697c:	d104      	bne.n	8016988 <_parsingPacket+0x9c>
				p_owner->__rx.state = GURS_CLASS;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2202      	movs	r2, #2
 8016982:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016986:	e097      	b.n	8016ab8 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_INVALID_DATA;
 8016988:	2301      	movs	r3, #1
 801698a:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801698c:	2361      	movs	r3, #97	; 0x61
 801698e:	613b      	str	r3, [r7, #16]
				goto fail;
 8016990:	e09f      	b.n	8016ad2 <_parsingPacket+0x1e6>

		case GURS_CLASS:
			p_packet->class_id = data;
 8016992:	7afa      	ldrb	r2, [r7, #11]
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2203      	movs	r2, #3
 801699c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80169a0:	e08a      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_ID:
			p_packet->msg_id = data;
 80169a2:	7afa      	ldrb	r2, [r7, #11]
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2204      	movs	r2, #4
 80169ac:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80169b0:	e082      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80169b2:	7afb      	ldrb	r3, [r7, #11]
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2205      	movs	r2, #5
 80169be:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80169c2:	e079      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	885b      	ldrh	r3, [r3, #2]
 80169c8:	b21a      	sxth	r2, r3
 80169ca:	7afb      	ldrb	r3, [r7, #11]
 80169cc:	021b      	lsls	r3, r3, #8
 80169ce:	b21b      	sxth	r3, r3
 80169d0:	4313      	orrs	r3, r2
 80169d2:	b21b      	sxth	r3, r3
 80169d4:	b29a      	uxth	r2, r3
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	885b      	ldrh	r3, [r3, #2]
 80169de:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80169e2:	d208      	bcs.n	80169f6 <_parsingPacket+0x10a>
				p_owner->__rx.payload_count = 0;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
				p_owner->__rx.state = GURS_PAYLOAD;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2206      	movs	r2, #6
 80169f0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80169f4:	e060      	b.n	8016ab8 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80169f6:	2300      	movs	r3, #0
 80169f8:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80169fa:	237f      	movs	r3, #127	; 0x7f
 80169fc:	613b      	str	r3, [r7, #16]
				goto fail;
 80169fe:	e068      	b.n	8016ad2 <_parsingPacket+0x1e6>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8016a06:	4619      	mov	r1, r3
 8016a08:	7afa      	ldrb	r2, [r7, #11]
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	440b      	add	r3, r1
 8016a0e:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8016a16:	3301      	adds	r3, #1
 8016a18:	b2da      	uxtb	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	885b      	ldrh	r3, [r3, #2]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d343      	bcc.n	8016ab8 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_CK_A;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2207      	movs	r2, #7
 8016a34:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			}
			break;
 8016a38:	e03e      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 8016a3a:	7afb      	ldrb	r3, [r7, #11]
 8016a3c:	b29a      	uxth	r2, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			p_owner->__rx.state = GURS_CK_B;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2208      	movs	r2, #8
 8016a48:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8016a4c:	e034      	b.n	8016ab8 <_parsingPacket+0x1cc>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 8016a54:	b21a      	sxth	r2, r3
 8016a56:	7afb      	ldrb	r3, [r7, #11]
 8016a58:	021b      	lsls	r3, r3, #8
 8016a5a:	b21b      	sxth	r3, r3
 8016a5c:	4313      	orrs	r3, r2
 8016a5e:	b21b      	sxth	r3, r3
 8016a60:	b29a      	uxth	r2, r3
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8b3 4298 	ldrh.w	r4, [r3, #664]	; 0x298
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	1d19      	adds	r1, r3, #4
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	885b      	ldrh	r3, [r3, #2]
 8016a76:	461a      	mov	r2, r3
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f7ff fef5 	bl	8016868 <_checksumUbx>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	429c      	cmp	r4, r3
 8016a82:	d104      	bne.n	8016a8e <_parsingPacket+0x1a2>
				p_owner->__rx.state = GURS_DONE;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	220a      	movs	r2, #10
 8016a88:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 8016a8c:	e064      	b.n	8016b58 <_parsingPacket+0x26c>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 8016a8e:	2302      	movs	r3, #2
 8016a90:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8016a92:	239b      	movs	r3, #155	; 0x9b
 8016a94:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 8016a96:	e01c      	b.n	8016ad2 <_parsingPacket+0x1e6>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	3308      	adds	r3, #8
 8016a9c:	7afa      	ldrb	r2, [r7, #11]
 8016a9e:	4611      	mov	r1, r2
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7ff f965 	bl	8015d70 <pifGps_ParsingNmea>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d005      	beq.n	8016ab8 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 8016ab4:	e050      	b.n	8016b58 <_parsingPacket+0x26c>
			}
			break;

		default:
			break;
 8016ab6:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8016abe:	f107 010b 	add.w	r1, r7, #11
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	4610      	mov	r0, r2
 8016ac6:	4798      	blx	r3
 8016ac8:	4603      	mov	r3, r0
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	f47f af18 	bne.w	8016900 <_parsingPacket+0x14>
		}
	}
	return;
 8016ad0:	e042      	b.n	8016b58 <_parsingPacket+0x26c>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 8016ad2:	4b23      	ldr	r3, [pc, #140]	; (8016b60 <_parsingPacket+0x274>)
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	7dfa      	ldrb	r2, [r7, #23]
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d039      	beq.n	8016b50 <_parsingPacket+0x264>
		if (p_owner->__rx.state) {
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d021      	beq.n	8016b2a <_parsingPacket+0x23e>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	8a9b      	ldrh	r3, [r3, #20]
 8016aea:	461e      	mov	r6, r3
 8016aec:	7dfb      	ldrb	r3, [r7, #23]
 8016aee:	4a1d      	ldr	r2, [pc, #116]	; (8016b64 <_parsingPacket+0x278>)
 8016af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016af4:	7afa      	ldrb	r2, [r7, #11]
 8016af6:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016afe:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016b00:	68fa      	ldr	r2, [r7, #12]
 8016b02:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016b04:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016b06:	68fa      	ldr	r2, [r7, #12]
 8016b08:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016b0a:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016b0c:	68fa      	ldr	r2, [r7, #12]
 8016b0e:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016b10:	9205      	str	r2, [sp, #20]
 8016b12:	9504      	str	r5, [sp, #16]
 8016b14:	9403      	str	r4, [sp, #12]
 8016b16:	9002      	str	r0, [sp, #8]
 8016b18:	9101      	str	r1, [sp, #4]
 8016b1a:	9300      	str	r3, [sp, #0]
 8016b1c:	4633      	mov	r3, r6
 8016b1e:	693a      	ldr	r2, [r7, #16]
 8016b20:	4911      	ldr	r1, [pc, #68]	; (8016b68 <_parsingPacket+0x27c>)
 8016b22:	2004      	movs	r0, #4
 8016b24:	f7fc fcec 	bl	8013500 <pifLog_Printf>
 8016b28:	e00f      	b.n	8016b4a <_parsingPacket+0x25e>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	8a9b      	ldrh	r3, [r3, #20]
 8016b2e:	4619      	mov	r1, r3
 8016b30:	7dfb      	ldrb	r3, [r7, #23]
 8016b32:	4a0c      	ldr	r2, [pc, #48]	; (8016b64 <_parsingPacket+0x278>)
 8016b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b38:	7afa      	ldrb	r2, [r7, #11]
 8016b3a:	9201      	str	r2, [sp, #4]
 8016b3c:	9300      	str	r3, [sp, #0]
 8016b3e:	460b      	mov	r3, r1
 8016b40:	693a      	ldr	r2, [r7, #16]
 8016b42:	490a      	ldr	r1, [pc, #40]	; (8016b6c <_parsingPacket+0x280>)
 8016b44:	2004      	movs	r0, #4
 8016b46:	f7fc fcdb 	bl	8013500 <pifLog_Printf>
		}
		pre_err = pkt_err;
 8016b4a:	4a05      	ldr	r2, [pc, #20]	; (8016b60 <_parsingPacket+0x274>)
 8016b4c:	7dfb      	ldrb	r3, [r7, #23]
 8016b4e:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8016b58:	371c      	adds	r7, #28
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	20000148 	.word	0x20000148
 8016b64:	20000138 	.word	0x20000138
 8016b68:	080274e8 	.word	0x080274e8
 8016b6c:	08027518 	.word	0x08027518

08016b70 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b08a      	sub	sp, #40	; 0x28
 8016b74:	af04      	add	r7, sp, #16
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	613b      	str	r3, [r7, #16]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8016b84:	60fb      	str	r3, [r7, #12]
	PifGps *p_parent = &p_owner->_gps;
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	3308      	adds	r3, #8
 8016b8a:	60bb      	str	r3, [r7, #8]
    int i;
    static BOOL next_fix = FALSE;

    if (!p_owner->_gps.evt_receive) return;
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	f000 8241 	beq.w	8017018 <_evtParsing+0x4a8>

    if (p_owner->__rx.state < GURS_DONE) {
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016b9c:	2b09      	cmp	r3, #9
 8016b9e:	d803      	bhi.n	8016ba8 <_evtParsing+0x38>
    	_parsingPacket(p_owner, act_receive_data);
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	6938      	ldr	r0, [r7, #16]
 8016ba4:	f7ff fea2 	bl	80168ec <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016bae:	2b0a      	cmp	r3, #10
 8016bb0:	f040 8233 	bne.w	801701a <_evtParsing+0x4aa>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d01c      	beq.n	8016bf6 <_evtParsing+0x86>
 8016bbc:	2b05      	cmp	r3, #5
 8016bbe:	f040 8204 	bne.w	8016fca <_evtParsing+0x45a>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	785b      	ldrb	r3, [r3, #1]
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d913      	bls.n	8016bf2 <_evtParsing+0x82>
        	case GUMI_ACK_NAK:
        		break;

            default:
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	8a9b      	ldrh	r3, [r3, #20]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	4b9f      	ldr	r3, [pc, #636]	; (8016e50 <_evtParsing+0x2e0>)
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	68fa      	ldr	r2, [r7, #12]
 8016bd6:	7812      	ldrb	r2, [r2, #0]
 8016bd8:	4611      	mov	r1, r2
 8016bda:	68fa      	ldr	r2, [r7, #12]
 8016bdc:	7852      	ldrb	r2, [r2, #1]
 8016bde:	9202      	str	r2, [sp, #8]
 8016be0:	9101      	str	r1, [sp, #4]
 8016be2:	9300      	str	r3, [sp, #0]
 8016be4:	4603      	mov	r3, r0
 8016be6:	22e2      	movs	r2, #226	; 0xe2
 8016be8:	499a      	ldr	r1, [pc, #616]	; (8016e54 <_evtParsing+0x2e4>)
 8016bea:	2004      	movs	r0, #4
 8016bec:	f7fc fc88 	bl	8013500 <pifLog_Printf>
#endif
                break;
 8016bf0:	e000      	b.n	8016bf4 <_evtParsing+0x84>
        		break;
 8016bf2:	bf00      	nop
        	}
        	break;
 8016bf4:	e1fa      	b.n	8016fec <_evtParsing+0x47c>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	785b      	ldrb	r3, [r3, #1]
 8016bfa:	3b02      	subs	r3, #2
 8016bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8016bfe:	f200 81cb 	bhi.w	8016f98 <_evtParsing+0x428>
 8016c02:	a201      	add	r2, pc, #4	; (adr r2, 8016c08 <_evtParsing+0x98>)
 8016c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c08:	08016cc5 	.word	0x08016cc5
 8016c0c:	08016de9 	.word	0x08016de9
 8016c10:	08016f99 	.word	0x08016f99
 8016c14:	08016f99 	.word	0x08016f99
 8016c18:	08016da5 	.word	0x08016da5
 8016c1c:	08016d59 	.word	0x08016d59
 8016c20:	08016f99 	.word	0x08016f99
 8016c24:	08016f99 	.word	0x08016f99
 8016c28:	08016f99 	.word	0x08016f99
 8016c2c:	08016f99 	.word	0x08016f99
 8016c30:	08016f99 	.word	0x08016f99
 8016c34:	08016f99 	.word	0x08016f99
 8016c38:	08016f99 	.word	0x08016f99
 8016c3c:	08016f99 	.word	0x08016f99
 8016c40:	08016f99 	.word	0x08016f99
 8016c44:	08016f99 	.word	0x08016f99
 8016c48:	08016f65 	.word	0x08016f65
 8016c4c:	08016f99 	.word	0x08016f99
 8016c50:	08016f99 	.word	0x08016f99
 8016c54:	08016f99 	.word	0x08016f99
 8016c58:	08016f99 	.word	0x08016f99
 8016c5c:	08016f99 	.word	0x08016f99
 8016c60:	08016f99 	.word	0x08016f99
 8016c64:	08016f99 	.word	0x08016f99
 8016c68:	08016f99 	.word	0x08016f99
 8016c6c:	08016f99 	.word	0x08016f99
 8016c70:	08016f99 	.word	0x08016f99
 8016c74:	08016f99 	.word	0x08016f99
 8016c78:	08016f99 	.word	0x08016f99
 8016c7c:	08016f99 	.word	0x08016f99
 8016c80:	08016f99 	.word	0x08016f99
 8016c84:	08016f0d 	.word	0x08016f0d
 8016c88:	08016f99 	.word	0x08016f99
 8016c8c:	08016f99 	.word	0x08016f99
 8016c90:	08016f99 	.word	0x08016f99
 8016c94:	08016f99 	.word	0x08016f99
 8016c98:	08016f99 	.word	0x08016f99
 8016c9c:	08016f99 	.word	0x08016f99
 8016ca0:	08016f99 	.word	0x08016f99
 8016ca4:	08016f99 	.word	0x08016f99
 8016ca8:	08016f99 	.word	0x08016f99
 8016cac:	08016f99 	.word	0x08016f99
 8016cb0:	08016f99 	.word	0x08016f99
 8016cb4:	08016f99 	.word	0x08016f99
 8016cb8:	08016f99 	.word	0x08016f99
 8016cbc:	08016f99 	.word	0x08016f99
 8016cc0:	08016e23 	.word	0x08016e23
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	689b      	ldr	r3, [r3, #8]
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7e9 fbdf 	bl	800048c <__aeabi_i2d>
 8016cce:	a35e      	add	r3, pc, #376	; (adr r3, 8016e48 <_evtParsing+0x2d8>)
 8016cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd4:	f7e9 fd6e 	bl	80007b4 <__aeabi_ddiv>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	460b      	mov	r3, r1
 8016cdc:	68b9      	ldr	r1, [r7, #8]
 8016cde:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	68db      	ldr	r3, [r3, #12]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7e9 fbd0 	bl	800048c <__aeabi_i2d>
 8016cec:	a356      	add	r3, pc, #344	; (adr r3, 8016e48 <_evtParsing+0x2d8>)
 8016cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf2:	f7e9 fd5f 	bl	80007b4 <__aeabi_ddiv>
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	68b9      	ldr	r1, [r7, #8]
 8016cfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	695b      	ldr	r3, [r3, #20]
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7e9 fbc1 	bl	800048c <__aeabi_i2d>
 8016d0a:	f04f 0200 	mov.w	r2, #0
 8016d0e:	4b52      	ldr	r3, [pc, #328]	; (8016e58 <_evtParsing+0x2e8>)
 8016d10:	f7e9 fd50 	bl	80007b4 <__aeabi_ddiv>
 8016d14:	4602      	mov	r2, r0
 8016d16:	460b      	mov	r3, r1
 8016d18:	68b9      	ldr	r1, [r7, #8]
 8016d1a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	699a      	ldr	r2, [r3, #24]
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	69da      	ldr	r2, [r3, #28]
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016d2e:	4b4b      	ldr	r3, [pc, #300]	; (8016e5c <_evtParsing+0x2ec>)
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	f003 0301 	and.w	r3, r3, #1
 8016d36:	b2d9      	uxtb	r1, r3
 8016d38:	68ba      	ldr	r2, [r7, #8]
 8016d3a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016d3e:	f361 0300 	bfi	r3, r1, #0, #1
 8016d42:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016d4e:	4b44      	ldr	r3, [pc, #272]	; (8016e60 <_evtParsing+0x2f0>)
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016d56:	e137      	b.n	8016fc8 <_evtParsing+0x458>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	891b      	ldrh	r3, [r3, #8]
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	3344      	adds	r3, #68	; 0x44
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	7a9a      	ldrb	r2, [r3, #10]
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	7ada      	ldrb	r2, [r3, #11]
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	7b1a      	ldrb	r2, [r3, #12]
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	7b5a      	ldrb	r2, [r3, #13]
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	7b9a      	ldrb	r2, [r3, #14]
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	695b      	ldr	r3, [r3, #20]
 8016d92:	461a      	mov	r2, r3
 8016d94:	4b33      	ldr	r3, [pc, #204]	; (8016e64 <_evtParsing+0x2f4>)
 8016d96:	fba3 2302 	umull	r2, r3, r3, r2
 8016d9a:	0c9b      	lsrs	r3, r3, #18
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	829a      	strh	r2, [r3, #20]
                    break;
 8016da2:	e111      	b.n	8016fc8 <_evtParsing+0x458>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	7bdb      	ldrb	r3, [r3, #15]
 8016da8:	f003 0301 	and.w	r3, r3, #1
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d005      	beq.n	8016dbc <_evtParsing+0x24c>
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	7b9b      	ldrb	r3, [r3, #14]
 8016db4:	2b03      	cmp	r3, #3
 8016db6:	d101      	bne.n	8016dbc <_evtParsing+0x24c>
 8016db8:	2301      	movs	r3, #1
 8016dba:	e000      	b.n	8016dbe <_evtParsing+0x24e>
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	b2da      	uxtb	r2, r3
 8016dc0:	4b26      	ldr	r3, [pc, #152]	; (8016e5c <_evtParsing+0x2ec>)
 8016dc2:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016dc4:	4b25      	ldr	r3, [pc, #148]	; (8016e5c <_evtParsing+0x2ec>)
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d106      	bne.n	8016dda <_evtParsing+0x26a>
                    	p_parent->_fix = FALSE;
 8016dcc:	68ba      	ldr	r2, [r7, #8]
 8016dce:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016dd2:	f36f 0300 	bfc	r3, #0, #1
 8016dd6:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016de6:	e0ef      	b.n	8016fc8 <_evtParsing+0x458>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	7a5b      	ldrb	r3, [r3, #9]
 8016dec:	f003 0301 	and.w	r3, r3, #1
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d005      	beq.n	8016e00 <_evtParsing+0x290>
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	7a1b      	ldrb	r3, [r3, #8]
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	d101      	bne.n	8016e00 <_evtParsing+0x290>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	e000      	b.n	8016e02 <_evtParsing+0x292>
 8016e00:	2300      	movs	r3, #0
 8016e02:	b2da      	uxtb	r2, r3
 8016e04:	4b15      	ldr	r3, [pc, #84]	; (8016e5c <_evtParsing+0x2ec>)
 8016e06:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016e08:	4b14      	ldr	r3, [pc, #80]	; (8016e5c <_evtParsing+0x2ec>)
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	f040 80d8 	bne.w	8016fc2 <_evtParsing+0x452>
                    	p_parent->_fix = FALSE;
 8016e12:	68ba      	ldr	r2, [r7, #8]
 8016e14:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016e18:	f36f 0300 	bfc	r3, #0, #1
 8016e1c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016e20:	e0cf      	b.n	8016fc2 <_evtParsing+0x452>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	7a1a      	ldrb	r2, [r3, #8]
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    if (p_owner->_num_ch > 16)
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8016e32:	2b10      	cmp	r3, #16
 8016e34:	d903      	bls.n	8016e3e <_evtParsing+0x2ce>
                    	p_owner->_num_ch = 16;
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	2210      	movs	r2, #16
 8016e3a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016e3e:	2300      	movs	r3, #0
 8016e40:	617b      	str	r3, [r7, #20]
 8016e42:	e050      	b.n	8016ee6 <_evtParsing+0x376>
 8016e44:	f3af 8000 	nop.w
 8016e48:	00000000 	.word	0x00000000
 8016e4c:	416312d0 	.word	0x416312d0
 8016e50:	20000138 	.word	0x20000138
 8016e54:	0802752c 	.word	0x0802752c
 8016e58:	408f4000 	.word	0x408f4000
 8016e5c:	20001d66 	.word	0x20001d66
 8016e60:	20001bcc 	.word	0x20001bcc
 8016e64:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016e68:	68f9      	ldr	r1, [r7, #12]
 8016e6a:	697a      	ldr	r2, [r7, #20]
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	4413      	add	r3, r2
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	440b      	add	r3, r1
 8016e76:	330c      	adds	r3, #12
 8016e78:	7819      	ldrb	r1, [r3, #0]
 8016e7a:	693a      	ldr	r2, [r7, #16]
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	4413      	add	r3, r2
 8016e80:	33b9      	adds	r3, #185	; 0xb9
 8016e82:	460a      	mov	r2, r1
 8016e84:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016e86:	68f9      	ldr	r1, [r7, #12]
 8016e88:	697a      	ldr	r2, [r7, #20]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4413      	add	r3, r2
 8016e90:	009b      	lsls	r3, r3, #2
 8016e92:	440b      	add	r3, r1
 8016e94:	330d      	adds	r3, #13
 8016e96:	7819      	ldrb	r1, [r3, #0]
 8016e98:	693a      	ldr	r2, [r7, #16]
 8016e9a:	697b      	ldr	r3, [r7, #20]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	33c9      	adds	r3, #201	; 0xc9
 8016ea0:	460a      	mov	r2, r1
 8016ea2:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016ea4:	68f9      	ldr	r1, [r7, #12]
 8016ea6:	697a      	ldr	r2, [r7, #20]
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	005b      	lsls	r3, r3, #1
 8016eac:	4413      	add	r3, r2
 8016eae:	009b      	lsls	r3, r3, #2
 8016eb0:	440b      	add	r3, r1
 8016eb2:	330f      	adds	r3, #15
 8016eb4:	7819      	ldrb	r1, [r3, #0]
 8016eb6:	693a      	ldr	r2, [r7, #16]
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	4413      	add	r3, r2
 8016ebc:	33d9      	adds	r3, #217	; 0xd9
 8016ebe:	460a      	mov	r2, r1
 8016ec0:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016ec2:	68f9      	ldr	r1, [r7, #12]
 8016ec4:	697a      	ldr	r2, [r7, #20]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	4413      	add	r3, r2
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	440b      	add	r3, r1
 8016ed0:	3310      	adds	r3, #16
 8016ed2:	7819      	ldrb	r1, [r3, #0]
 8016ed4:	693a      	ldr	r2, [r7, #16]
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	4413      	add	r3, r2
 8016eda:	33e9      	adds	r3, #233	; 0xe9
 8016edc:	460a      	mov	r2, r1
 8016ede:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016ee0:	697b      	ldr	r3, [r7, #20]
 8016ee2:	3301      	adds	r3, #1
 8016ee4:	617b      	str	r3, [r7, #20]
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8016eec:	461a      	mov	r2, r3
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	dbb9      	blt.n	8016e68 <_evtParsing+0x2f8>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016f00:	4b49      	ldr	r3, [pc, #292]	; (8017028 <_evtParsing+0x4b8>)
 8016f02:	681a      	ldr	r2, [r3, #0]
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                    break;
 8016f0a:	e05d      	b.n	8016fc8 <_evtParsing+0x458>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	7ddb      	ldrb	r3, [r3, #23]
 8016f10:	f003 0304 	and.w	r3, r3, #4
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d056      	beq.n	8016fc6 <_evtParsing+0x456>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	8a1b      	ldrh	r3, [r3, #16]
 8016f1c:	b2db      	uxtb	r3, r3
 8016f1e:	3330      	adds	r3, #48	; 0x30
 8016f20:	b2da      	uxtb	r2, r3
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	7c9a      	ldrb	r2, [r3, #18]
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	7cda      	ldrb	r2, [r3, #19]
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	7d1a      	ldrb	r2, [r3, #20]
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	7d5a      	ldrb	r2, [r3, #21]
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	7d9a      	ldrb	r2, [r3, #22]
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	68db      	ldr	r3, [r3, #12]
 8016f52:	461a      	mov	r2, r3
 8016f54:	4b35      	ldr	r3, [pc, #212]	; (801702c <_evtParsing+0x4bc>)
 8016f56:	fba3 2302 	umull	r2, r3, r3, r2
 8016f5a:	0c9b      	lsrs	r3, r3, #18
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016f62:	e030      	b.n	8016fc6 <_evtParsing+0x456>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	695b      	ldr	r3, [r3, #20]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7e9 fa7f 	bl	800046c <__aeabi_ui2d>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	460b      	mov	r3, r1
 8016f72:	68b9      	ldr	r1, [r7, #8]
 8016f74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	69db      	ldr	r3, [r3, #28]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7e9 fa85 	bl	800048c <__aeabi_i2d>
 8016f82:	a327      	add	r3, pc, #156	; (adr r3, 8017020 <_evtParsing+0x4b0>)
 8016f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f88:	f7e9 fc14 	bl	80007b4 <__aeabi_ddiv>
 8016f8c:	4602      	mov	r2, r0
 8016f8e:	460b      	mov	r3, r1
 8016f90:	68b9      	ldr	r1, [r7, #8]
 8016f92:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    break;
 8016f96:	e017      	b.n	8016fc8 <_evtParsing+0x458>

                default:
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016f98:	693b      	ldr	r3, [r7, #16]
 8016f9a:	8a9b      	ldrh	r3, [r3, #20]
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	4b24      	ldr	r3, [pc, #144]	; (8017030 <_evtParsing+0x4c0>)
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	68fa      	ldr	r2, [r7, #12]
 8016fa4:	7812      	ldrb	r2, [r2, #0]
 8016fa6:	4611      	mov	r1, r2
 8016fa8:	68fa      	ldr	r2, [r7, #12]
 8016faa:	7852      	ldrb	r2, [r2, #1]
 8016fac:	9202      	str	r2, [sp, #8]
 8016fae:	9101      	str	r1, [sp, #4]
 8016fb0:	9300      	str	r3, [sp, #0]
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	f240 122f 	movw	r2, #303	; 0x12f
 8016fb8:	491e      	ldr	r1, [pc, #120]	; (8017034 <_evtParsing+0x4c4>)
 8016fba:	2004      	movs	r0, #4
 8016fbc:	f7fc faa0 	bl	8013500 <pifLog_Printf>
#endif
                    break;
 8016fc0:	e002      	b.n	8016fc8 <_evtParsing+0x458>
                    break;
 8016fc2:	bf00      	nop
 8016fc4:	e012      	b.n	8016fec <_evtParsing+0x47c>
                	break;
 8016fc6:	bf00      	nop
            }
        	break;
 8016fc8:	e010      	b.n	8016fec <_evtParsing+0x47c>

		default:
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	8a9b      	ldrh	r3, [r3, #20]
 8016fce:	4619      	mov	r1, r3
 8016fd0:	4b17      	ldr	r3, [pc, #92]	; (8017030 <_evtParsing+0x4c0>)
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	68fa      	ldr	r2, [r7, #12]
 8016fd6:	7812      	ldrb	r2, [r2, #0]
 8016fd8:	9201      	str	r2, [sp, #4]
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	460b      	mov	r3, r1
 8016fde:	f240 1237 	movw	r2, #311	; 0x137
 8016fe2:	4915      	ldr	r1, [pc, #84]	; (8017038 <_evtParsing+0x4c8>)
 8016fe4:	2004      	movs	r0, #4
 8016fe6:	f7fc fa8b 	bl	8013500 <pifLog_Printf>
#endif
			break;
 8016fea:	bf00      	nop
        }

		if (p_owner->evt_ubx_receive) {
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d00c      	beq.n	801700e <_evtParsing+0x49e>
			if ((*p_owner->evt_ubx_receive)(p_owner, p_packet)) pifGps_SendEvent(&p_owner->_gps);
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	68f9      	ldr	r1, [r7, #12]
 8016ffa:	6938      	ldr	r0, [r7, #16]
 8016ffc:	4798      	blx	r3
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d004      	beq.n	801700e <_evtParsing+0x49e>
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	3308      	adds	r3, #8
 8017008:	4618      	mov	r0, r3
 801700a:	f7fe fe8d 	bl	8015d28 <pifGps_SendEvent>
		}

    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 801700e:	693b      	ldr	r3, [r7, #16]
 8017010:	2200      	movs	r2, #0
 8017012:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8017016:	e000      	b.n	801701a <_evtParsing+0x4aa>
    if (!p_owner->_gps.evt_receive) return;
 8017018:	bf00      	nop
    }
}
 801701a:	3718      	adds	r7, #24
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	00000000 	.word	0x00000000
 8017024:	40f86a00 	.word	0x40f86a00
 8017028:	20001bcc 	.word	0x20001bcc
 801702c:	431bde83 	.word	0x431bde83
 8017030:	20000138 	.word	0x20000138
 8017034:	0802752c 	.word	0x0802752c
 8017038:	08027548 	.word	0x08027548

0801703c <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b088      	sub	sp, #32
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	4613      	mov	r3, r2
 8017048:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 801704a:	2300      	movs	r3, #0
 801704c:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 801704e:	2301      	movs	r3, #1
 8017050:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8017052:	69bb      	ldr	r3, [r7, #24]
 8017054:	68ba      	ldr	r2, [r7, #8]
 8017056:	4413      	add	r3, r2
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	2b2a      	cmp	r3, #42	; 0x2a
 801705c:	d13a      	bne.n	80170d4 <_makeNmeaPacket+0x98>
			i++;
 801705e:	69bb      	ldr	r3, [r7, #24]
 8017060:	3301      	adds	r3, #1
 8017062:	61bb      	str	r3, [r7, #24]
			break;
 8017064:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8017066:	4b4b      	ldr	r3, [pc, #300]	; (8017194 <_makeNmeaPacket+0x158>)
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	7ffb      	ldrb	r3, [r7, #31]
 801706c:	091b      	lsrs	r3, r3, #4
 801706e:	b2db      	uxtb	r3, r3
 8017070:	f003 030f 	and.w	r3, r3, #15
 8017074:	441a      	add	r2, r3
 8017076:	69bb      	ldr	r3, [r7, #24]
 8017078:	68b9      	ldr	r1, [r7, #8]
 801707a:	440b      	add	r3, r1
 801707c:	7812      	ldrb	r2, [r2, #0]
 801707e:	701a      	strb	r2, [r3, #0]
 8017080:	69bb      	ldr	r3, [r7, #24]
 8017082:	3301      	adds	r3, #1
 8017084:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8017086:	4b43      	ldr	r3, [pc, #268]	; (8017194 <_makeNmeaPacket+0x158>)
 8017088:	681a      	ldr	r2, [r3, #0]
 801708a:	7ffb      	ldrb	r3, [r7, #31]
 801708c:	f003 030f 	and.w	r3, r3, #15
 8017090:	441a      	add	r2, r3
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	68b9      	ldr	r1, [r7, #8]
 8017096:	440b      	add	r3, r1
 8017098:	7812      	ldrb	r2, [r2, #0]
 801709a:	701a      	strb	r2, [r3, #0]
 801709c:	69bb      	ldr	r3, [r7, #24]
 801709e:	3301      	adds	r3, #1
 80170a0:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	68ba      	ldr	r2, [r7, #8]
 80170a6:	4413      	add	r3, r2
 80170a8:	220d      	movs	r2, #13
 80170aa:	701a      	strb	r2, [r3, #0]
 80170ac:	69bb      	ldr	r3, [r7, #24]
 80170ae:	3301      	adds	r3, #1
 80170b0:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 80170b2:	69bb      	ldr	r3, [r7, #24]
 80170b4:	68ba      	ldr	r2, [r7, #8]
 80170b6:	4413      	add	r3, r2
 80170b8:	220a      	movs	r2, #10
 80170ba:	701a      	strb	r2, [r3, #0]
 80170bc:	69bb      	ldr	r3, [r7, #24]
 80170be:	3301      	adds	r3, #1
 80170c0:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	68ba      	ldr	r2, [r7, #8]
 80170c6:	4413      	add	r3, r2
 80170c8:	2200      	movs	r2, #0
 80170ca:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 80170cc:	79fb      	ldrb	r3, [r7, #7]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d01b      	beq.n	801710a <_makeNmeaPacket+0xce>
 80170d2:	e00f      	b.n	80170f4 <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 80170d4:	69bb      	ldr	r3, [r7, #24]
 80170d6:	68ba      	ldr	r2, [r7, #8]
 80170d8:	4413      	add	r3, r2
 80170da:	781a      	ldrb	r2, [r3, #0]
 80170dc:	7ffb      	ldrb	r3, [r7, #31]
 80170de:	4053      	eors	r3, r2
 80170e0:	77fb      	strb	r3, [r7, #31]
			i++;
 80170e2:	69bb      	ldr	r3, [r7, #24]
 80170e4:	3301      	adds	r3, #1
 80170e6:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 80170e8:	e7b3      	b.n	8017052 <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 80170ea:	f7fd fced 	bl	8014ac8 <pifTaskManager_Yield>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d009      	beq.n	8017108 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7fc fc41 	bl	8013982 <pifRingBuffer_IsEmpty>
 8017100:	4603      	mov	r3, r0
 8017102:	2b00      	cmp	r3, #0
 8017104:	d0f1      	beq.n	80170ea <_makeNmeaPacket+0xae>
 8017106:	e000      	b.n	801710a <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8017108:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017110:	4618      	mov	r0, r3
 8017112:	f7fc fcb8 	bl	8013a86 <pifRingBuffer_BeginPutting>

	header[0] = i;
 8017116:	69bb      	ldr	r3, [r7, #24]
 8017118:	b2db      	uxtb	r3, r3
 801711a:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 801711c:	2300      	movs	r3, #0
 801711e:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8017120:	2300      	movs	r3, #0
 8017122:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8017124:	2300      	movs	r3, #0
 8017126:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801712e:	f107 0114 	add.w	r1, r7, #20
 8017132:	2204      	movs	r2, #4
 8017134:	4618      	mov	r0, r3
 8017136:	f7fc fd2d 	bl	8013b94 <pifRingBuffer_PutData>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	d01a      	beq.n	8017176 <_makeNmeaPacket+0x13a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017146:	7d3a      	ldrb	r2, [r7, #20]
 8017148:	b292      	uxth	r2, r2
 801714a:	68b9      	ldr	r1, [r7, #8]
 801714c:	4618      	mov	r0, r3
 801714e:	f7fc fd21 	bl	8013b94 <pifRingBuffer_PutData>
 8017152:	4603      	mov	r3, r0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d010      	beq.n	801717a <_makeNmeaPacket+0x13e>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801715e:	4618      	mov	r0, r3
 8017160:	f7fc fca9 	bl	8013ab6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801716a:	69db      	ldr	r3, [r3, #28]
 801716c:	4618      	mov	r0, r3
 801716e:	f7fd fa63 	bl	8014638 <pifTask_SetTrigger>
	return TRUE;
 8017172:	2301      	movs	r3, #1
 8017174:	e009      	b.n	801718a <_makeNmeaPacket+0x14e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8017176:	bf00      	nop
 8017178:	e000      	b.n	801717c <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 801717a:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017182:	4618      	mov	r0, r3
 8017184:	f7fc fca5 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	return FALSE;
 8017188:	2300      	movs	r3, #0
}
 801718a:	4618      	mov	r0, r3
 801718c:	3720      	adds	r7, #32
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	2000012c 	.word	0x2000012c

08017198 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b088      	sub	sp, #32
 801719c:	af00      	add	r7, sp, #0
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	60b9      	str	r1, [r7, #8]
 80171a2:	603b      	str	r3, [r7, #0]
 80171a4:	4613      	mov	r3, r2
 80171a6:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	3302      	adds	r3, #2
 80171ac:	88fa      	ldrh	r2, [r7, #6]
 80171ae:	6839      	ldr	r1, [r7, #0]
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7ff fb59 	bl	8016868 <_checksumUbx>
 80171b6:	4603      	mov	r3, r0
 80171b8:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 80171ba:	8bfb      	ldrh	r3, [r7, #30]
 80171bc:	b2db      	uxtb	r3, r3
 80171be:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 80171c0:	8bfb      	ldrh	r3, [r7, #30]
 80171c2:	0a1b      	lsrs	r3, r3, #8
 80171c4:	b29b      	uxth	r3, r3
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 80171ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d010      	beq.n	80171f4 <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80171d2:	e004      	b.n	80171de <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 80171d4:	f7fd fc78 	bl	8014ac8 <pifTaskManager_Yield>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d009      	beq.n	80171f2 <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7fc fbcc 	bl	8013982 <pifRingBuffer_IsEmpty>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d0f1      	beq.n	80171d4 <_makeUbxPacket+0x3c>
 80171f0:	e000      	b.n	80171f4 <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 80171f2:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7fc fc43 	bl	8013a86 <pifRingBuffer_BeginPutting>

	info[0] = length + 8;
 8017200:	88fb      	ldrh	r3, [r7, #6]
 8017202:	b2db      	uxtb	r3, r3
 8017204:	3308      	adds	r3, #8
 8017206:	b2db      	uxtb	r3, r3
 8017208:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 801720a:	2300      	movs	r3, #0
 801720c:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8017212:	2300      	movs	r3, #0
 8017214:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801721c:	f107 0118 	add.w	r1, r7, #24
 8017220:	2204      	movs	r2, #4
 8017222:	4618      	mov	r0, r3
 8017224:	f7fc fcb6 	bl	8013b94 <pifRingBuffer_PutData>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d033      	beq.n	8017296 <_makeUbxPacket+0xfe>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017234:	2206      	movs	r2, #6
 8017236:	68b9      	ldr	r1, [r7, #8]
 8017238:	4618      	mov	r0, r3
 801723a:	f7fc fcab 	bl	8013b94 <pifRingBuffer_PutData>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d02a      	beq.n	801729a <_makeUbxPacket+0x102>
	if (length > 0) {
 8017244:	88fb      	ldrh	r3, [r7, #6]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00a      	beq.n	8017260 <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017250:	88fa      	ldrh	r2, [r7, #6]
 8017252:	6839      	ldr	r1, [r7, #0]
 8017254:	4618      	mov	r0, r3
 8017256:	f7fc fc9d 	bl	8013b94 <pifRingBuffer_PutData>
 801725a:	4603      	mov	r3, r0
 801725c:	2b00      	cmp	r3, #0
 801725e:	d01e      	beq.n	801729e <_makeUbxPacket+0x106>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017266:	f107 0114 	add.w	r1, r7, #20
 801726a:	2202      	movs	r2, #2
 801726c:	4618      	mov	r0, r3
 801726e:	f7fc fc91 	bl	8013b94 <pifRingBuffer_PutData>
 8017272:	4603      	mov	r3, r0
 8017274:	2b00      	cmp	r3, #0
 8017276:	d014      	beq.n	80172a2 <_makeUbxPacket+0x10a>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801727e:	4618      	mov	r0, r3
 8017280:	f7fc fc19 	bl	8013ab6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801728a:	69db      	ldr	r3, [r3, #28]
 801728c:	4618      	mov	r0, r3
 801728e:	f7fd f9d3 	bl	8014638 <pifTask_SetTrigger>
	return TRUE;
 8017292:	2301      	movs	r3, #1
 8017294:	e00d      	b.n	80172b2 <_makeUbxPacket+0x11a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8017296:	bf00      	nop
 8017298:	e004      	b.n	80172a4 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 801729a:	bf00      	nop
 801729c:	e002      	b.n	80172a4 <_makeUbxPacket+0x10c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 801729e:	bf00      	nop
 80172a0:	e000      	b.n	80172a4 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 80172a2:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fc fc11 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	return FALSE;
 80172b0:	2300      	movs	r3, #0
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3720      	adds	r7, #32
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}

080172ba <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80172ba:	b5b0      	push	{r4, r5, r7, lr}
 80172bc:	b084      	sub	sp, #16
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
 80172c2:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80172ce:	2b02      	cmp	r3, #2
 80172d0:	d05d      	beq.n	801738e <_evtSending+0xd4>
 80172d2:	2b02      	cmp	r3, #2
 80172d4:	dc72      	bgt.n	80173bc <_evtSending+0x102>
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d002      	beq.n	80172e0 <_evtSending+0x26>
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d01c      	beq.n	8017318 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 80172de:	e06d      	b.n	80173bc <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7fc fb4b 	bl	8013982 <pifRingBuffer_IsEmpty>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d166      	bne.n	80173c0 <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	f203 20ba 	addw	r0, r3, #698	; 0x2ba
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80172fe:	2300      	movs	r3, #0
 8017300:	2104      	movs	r1, #4
 8017302:	f7fc fd0a 	bl	8013d1a <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	2204      	movs	r2, #4
 801730a:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
			p_owner->__tx.state = GUTS_SENDING;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	2201      	movs	r2, #1
 8017312:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 8017316:	e053      	b.n	80173c0 <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 801732a:	b29b      	uxth	r3, r3
 801732c:	4619      	mov	r1, r3
 801732e:	4610      	mov	r0, r2
 8017330:	f7fc fafb 	bl	801392a <pifRingBuffer_GetTailPointer>
 8017334:	4605      	mov	r5, r0
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	f503 7227 	add.w	r2, r3, #668	; 0x29c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017342:	b29b      	uxth	r3, r3
 8017344:	4619      	mov	r1, r3
 8017346:	4610      	mov	r0, r2
 8017348:	f7fc fb50 	bl	80139ec <pifRingBuffer_GetLinerSize>
 801734c:	4603      	mov	r3, r0
 801734e:	461a      	mov	r2, r3
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	4629      	mov	r1, r5
 8017354:	4620      	mov	r0, r4
 8017356:	4798      	blx	r3
 8017358:	4603      	mov	r3, r0
 801735a:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f893 22be 	ldrb.w	r2, [r3, #702]	; 0x2be
 8017362:	897b      	ldrh	r3, [r7, #10]
 8017364:	b2db      	uxtb	r3, r3
 8017366:	4413      	add	r3, r2
 8017368:	b2da      	uxtb	r2, r3
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8017376:	3303      	adds	r3, #3
 8017378:	68fa      	ldr	r2, [r7, #12]
 801737a:	f892 22be 	ldrb.w	r2, [r2, #702]	; 0x2be
 801737e:	4293      	cmp	r3, r2
 8017380:	da03      	bge.n	801738a <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2202      	movs	r2, #2
 8017386:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		return TRUE;
 801738a:	2301      	movs	r3, #1
 801738c:	e01c      	b.n	80173c8 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8017394:	2b00      	cmp	r3, #0
 8017396:	d115      	bne.n	80173c4 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	3304      	adds	r3, #4
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	4619      	mov	r1, r3
 80173ac:	4610      	mov	r0, r2
 80173ae:	f7fc fcfa 	bl	8013da6 <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 80173ba:	e003      	b.n	80173c4 <_evtSending+0x10a>
		break;
 80173bc:	bf00      	nop
 80173be:	e002      	b.n	80173c6 <_evtSending+0x10c>
		break;
 80173c0:	bf00      	nop
 80173c2:	e000      	b.n	80173c6 <_evtSending+0x10c>
		break;
 80173c4:	bf00      	nop
	}
	return FALSE;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3710      	adds	r7, #16
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bdb0      	pop	{r4, r5, r7, pc}

080173d0 <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af02      	add	r7, sp, #8
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	460b      	mov	r3, r1
 80173da:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d103      	bne.n	80173ea <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 80173e2:	4b1e      	ldr	r3, [pc, #120]	; (801745c <pifGpsUblox_Init+0x8c>)
 80173e4:	2201      	movs	r2, #1
 80173e6:	701a      	strb	r2, [r3, #0]
		goto fail;
 80173e8:	e026      	b.n	8017438 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 80173ea:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80173ee:	2100      	movs	r1, #0
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f00b fa77 	bl	80228e4 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	3308      	adds	r3, #8
 80173fa:	887a      	ldrh	r2, [r7, #2]
 80173fc:	4611      	mov	r1, r2
 80173fe:	4618      	mov	r0, r3
 8017400:	f7fe fc20 	bl	8015c44 <pifGps_Init>
 8017404:	4603      	mov	r3, r0
 8017406:	2b00      	cmp	r3, #0
 8017408:	d013      	beq.n	8017432 <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017410:	2240      	movs	r2, #64	; 0x40
 8017412:	2100      	movs	r1, #0
 8017414:	4618      	mov	r0, r3
 8017416:	f7fc fa15 	bl	8013844 <pifRingBuffer_InitHeap>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00a      	beq.n	8017436 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017426:	490e      	ldr	r1, [pc, #56]	; (8017460 <pifGpsUblox_Init+0x90>)
 8017428:	4618      	mov	r0, r3
 801742a:	f7fc fa70 	bl	801390e <pifRingBuffer_SetName>
    return TRUE;
 801742e:	2301      	movs	r3, #1
 8017430:	e010      	b.n	8017454 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017432:	bf00      	nop
 8017434:	e000      	b.n	8017438 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017436:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f000 f815 	bl	8017468 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801743e:	887b      	ldrh	r3, [r7, #2]
 8017440:	4a06      	ldr	r2, [pc, #24]	; (801745c <pifGpsUblox_Init+0x8c>)
 8017442:	7812      	ldrb	r2, [r2, #0]
 8017444:	9200      	str	r2, [sp, #0]
 8017446:	f240 12d1 	movw	r2, #465	; 0x1d1
 801744a:	4906      	ldr	r1, [pc, #24]	; (8017464 <pifGpsUblox_Init+0x94>)
 801744c:	2004      	movs	r0, #4
 801744e:	f7fc f857 	bl	8013500 <pifLog_Printf>
#endif
    return FALSE;
 8017452:	2300      	movs	r3, #0
}
 8017454:	4618      	mov	r0, r3
 8017456:	3708      	adds	r7, #8
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	20001bb5 	.word	0x20001bb5
 8017460:	0802755c 	.word	0x0802755c
 8017464:	08027560 	.word	0x08027560

08017468 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017476:	4618      	mov	r0, r3
 8017478:	f7fc fa2e 	bl	80138d8 <pifRingBuffer_Clear>
}
 801747c:	bf00      	nop
 801747e:	3708      	adds	r7, #8
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}

08017484 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	683a      	ldr	r2, [r7, #0]
 8017492:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017496:	4b05      	ldr	r3, [pc, #20]	; (80174ac <pifGpsUblox_AttachComm+0x28>)
 8017498:	4a05      	ldr	r2, [pc, #20]	; (80174b0 <pifGpsUblox_AttachComm+0x2c>)
 801749a:	6879      	ldr	r1, [r7, #4]
 801749c:	6838      	ldr	r0, [r7, #0]
 801749e:	f7fa fce7 	bl	8011e70 <pifComm_AttachClient>
}
 80174a2:	bf00      	nop
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	080172bb 	.word	0x080172bb
 80174b0:	08016b71 	.word	0x08016b71

080174b4 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 80174b4:	b590      	push	{r4, r7, lr}
 80174b6:	b091      	sub	sp, #68	; 0x44
 80174b8:	af02      	add	r7, sp, #8
 80174ba:	60f8      	str	r0, [r7, #12]
 80174bc:	4608      	mov	r0, r1
 80174be:	4611      	mov	r1, r2
 80174c0:	461a      	mov	r2, r3
 80174c2:	4603      	mov	r3, r0
 80174c4:	72fb      	strb	r3, [r7, #11]
 80174c6:	460b      	mov	r3, r1
 80174c8:	813b      	strh	r3, [r7, #8]
 80174ca:	4613      	mov	r3, r2
 80174cc:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d004      	beq.n	80174e2 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 80174d8:	4b0f      	ldr	r3, [pc, #60]	; (8017518 <pifGpsUblox_SetPubxConfig+0x64>)
 80174da:	2202      	movs	r2, #2
 80174dc:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80174de:	2300      	movs	r3, #0
 80174e0:	e015      	b.n	801750e <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 80174e2:	7af9      	ldrb	r1, [r7, #11]
 80174e4:	893c      	ldrh	r4, [r7, #8]
 80174e6:	88fb      	ldrh	r3, [r7, #6]
 80174e8:	f107 0010 	add.w	r0, r7, #16
 80174ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80174ee:	9201      	str	r2, [sp, #4]
 80174f0:	9300      	str	r3, [sp, #0]
 80174f2:	4623      	mov	r3, r4
 80174f4:	460a      	mov	r2, r1
 80174f6:	4909      	ldr	r1, [pc, #36]	; (801751c <pifGpsUblox_SetPubxConfig+0x68>)
 80174f8:	f7fa faf8 	bl	8011aec <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 80174fc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017500:	f107 0310 	add.w	r3, r7, #16
 8017504:	4619      	mov	r1, r3
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f7ff fd98 	bl	801703c <_makeNmeaPacket>
 801750c:	4603      	mov	r3, r0
}
 801750e:	4618      	mov	r0, r3
 8017510:	373c      	adds	r7, #60	; 0x3c
 8017512:	46bd      	mov	sp, r7
 8017514:	bd90      	pop	{r4, r7, pc}
 8017516:	bf00      	nop
 8017518:	20001bb5 	.word	0x20001bb5
 801751c:	080275b4 	.word	0x080275b4

08017520 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b086      	sub	sp, #24
 8017524:	af02      	add	r7, sp, #8
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	4608      	mov	r0, r1
 801752a:	4611      	mov	r1, r2
 801752c:	461a      	mov	r2, r3
 801752e:	4603      	mov	r3, r0
 8017530:	70fb      	strb	r3, [r7, #3]
 8017532:	460b      	mov	r3, r1
 8017534:	70bb      	strb	r3, [r7, #2]
 8017536:	4613      	mov	r3, r2
 8017538:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 801753a:	f246 23b5 	movw	r3, #25269	; 0x62b5
 801753e:	60bb      	str	r3, [r7, #8]
 8017540:	2300      	movs	r3, #0
 8017542:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 801754a:	2b00      	cmp	r3, #0
 801754c:	d004      	beq.n	8017558 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 801754e:	4b0f      	ldr	r3, [pc, #60]	; (801758c <pifGpsUblox_SendUbxMsg+0x6c>)
 8017550:	2202      	movs	r2, #2
 8017552:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017554:	2300      	movs	r3, #0
 8017556:	e015      	b.n	8017584 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 8017558:	78fb      	ldrb	r3, [r7, #3]
 801755a:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 801755c:	78bb      	ldrb	r3, [r7, #2]
 801755e:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017560:	883b      	ldrh	r3, [r7, #0]
 8017562:	b2db      	uxtb	r3, r3
 8017564:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 8017566:	883b      	ldrh	r3, [r7, #0]
 8017568:	0a1b      	lsrs	r3, r3, #8
 801756a:	b29b      	uxth	r3, r3
 801756c:	b2db      	uxtb	r3, r3
 801756e:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 8017570:	883a      	ldrh	r2, [r7, #0]
 8017572:	f107 0108 	add.w	r1, r7, #8
 8017576:	7f3b      	ldrb	r3, [r7, #28]
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	69bb      	ldr	r3, [r7, #24]
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f7ff fe0b 	bl	8017198 <_makeUbxPacket>
 8017582:	4603      	mov	r3, r0
}
 8017584:	4618      	mov	r0, r3
 8017586:	3710      	adds	r7, #16
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}
 801758c:	20001bb5 	.word	0x20001bb5

08017590 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b086      	sub	sp, #24
 8017594:	af02      	add	r7, sp, #8
 8017596:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d103      	bne.n	80175a6 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 801759e:	4b0e      	ldr	r3, [pc, #56]	; (80175d8 <_evtTimerRxTimeout+0x48>)
 80175a0:	2201      	movs	r2, #1
 80175a2:	701a      	strb	r2, [r3, #0]
		return;
 80175a4:	e014      	b.n	80175d0 <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	881b      	ldrh	r3, [r3, #0]
 80175ae:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	7a1b      	ldrb	r3, [r3, #8]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80175b4:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	7d5b      	ldrb	r3, [r3, #21]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80175ba:	9301      	str	r3, [sp, #4]
 80175bc:	9200      	str	r2, [sp, #0]
 80175be:	460b      	mov	r3, r1
 80175c0:	2216      	movs	r2, #22
 80175c2:	4906      	ldr	r1, [pc, #24]	; (80175dc <_evtTimerRxTimeout+0x4c>)
 80175c4:	2004      	movs	r0, #4
 80175c6:	f7fb ff9b 	bl	8013500 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	2200      	movs	r2, #0
 80175ce:	721a      	strb	r2, [r3, #8]
}
 80175d0:	3710      	adds	r7, #16
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
 80175d6:	bf00      	nop
 80175d8:	20001bb5 	.word	0x20001bb5
 80175dc:	080275f0 	.word	0x080275f0

080175e0 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 80175e0:	b590      	push	{r4, r7, lr}
 80175e2:	b08b      	sub	sp, #44	; 0x2c
 80175e4:	af04      	add	r7, sp, #16
 80175e6:	6078      	str	r0, [r7, #4]
 80175e8:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	3314      	adds	r3, #20
 80175ee:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80175f0:	e0b1      	b.n	8017756 <_parsingPacket+0x176>
		switch (p_owner->__rx.state) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	7a1b      	ldrb	r3, [r3, #8]
 80175f6:	2b05      	cmp	r3, #5
 80175f8:	f200 80ac 	bhi.w	8017754 <_parsingPacket+0x174>
 80175fc:	a201      	add	r2, pc, #4	; (adr r2, 8017604 <_parsingPacket+0x24>)
 80175fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017602:	bf00      	nop
 8017604:	0801761d 	.word	0x0801761d
 8017608:	08017663 	.word	0x08017663
 801760c:	0801767b 	.word	0x0801767b
 8017610:	08017693 	.word	0x08017693
 8017614:	080176bf 	.word	0x080176bf
 8017618:	080176e7 	.word	0x080176e7
		case MRS_IDLE:
			if (data == '$') {
 801761c:	7afb      	ldrb	r3, [r7, #11]
 801761e:	2b24      	cmp	r3, #36	; 0x24
 8017620:	d109      	bne.n	8017636 <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2201      	movs	r2, #1
 8017626:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6a1b      	ldr	r3, [r3, #32]
 801762c:	21c8      	movs	r1, #200	; 0xc8
 801762e:	4618      	mov	r0, r3
 8017630:	f7fd fd44 	bl	80150bc <pifTimer_Start>
 8017634:	e08f      	b.n	8017756 <_parsingPacket+0x176>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 8017636:	4b65      	ldr	r3, [pc, #404]	; (80177cc <_parsingPacket+0x1ec>)
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	2b03      	cmp	r3, #3
 801763c:	d10b      	bne.n	8017656 <_parsingPacket+0x76>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017642:	2b00      	cmp	r3, #0
 8017644:	d007      	beq.n	8017656 <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801764a:	7af9      	ldrb	r1, [r7, #11]
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	4798      	blx	r3
 8017654:	e004      	b.n	8017660 <_parsingPacket+0x80>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 8017656:	2301      	movs	r3, #1
 8017658:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 801765a:	234b      	movs	r3, #75	; 0x4b
 801765c:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 801765e:	e089      	b.n	8017774 <_parsingPacket+0x194>
			}
			break;
 8017660:	e079      	b.n	8017756 <_parsingPacket+0x176>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017662:	7afb      	ldrb	r3, [r7, #11]
 8017664:	2b4d      	cmp	r3, #77	; 0x4d
 8017666:	d103      	bne.n	8017670 <_parsingPacket+0x90>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2202      	movs	r2, #2
 801766c:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801766e:	e072      	b.n	8017756 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017670:	2301      	movs	r3, #1
 8017672:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017674:	2358      	movs	r3, #88	; 0x58
 8017676:	613b      	str	r3, [r7, #16]
				goto fail;
 8017678:	e07c      	b.n	8017774 <_parsingPacket+0x194>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 801767a:	7afb      	ldrb	r3, [r7, #11]
 801767c:	2b3c      	cmp	r3, #60	; 0x3c
 801767e:	d103      	bne.n	8017688 <_parsingPacket+0xa8>
				p_owner->__rx.state = MRS_DIRECTION;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2203      	movs	r2, #3
 8017684:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017686:	e066      	b.n	8017756 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017688:	2301      	movs	r3, #1
 801768a:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801768c:	2365      	movs	r3, #101	; 0x65
 801768e:	613b      	str	r3, [r7, #16]
				goto fail;
 8017690:	e070      	b.n	8017774 <_parsingPacket+0x194>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 8017692:	7afb      	ldrb	r3, [r7, #11]
 8017694:	2b7c      	cmp	r3, #124	; 0x7c
 8017696:	d80d      	bhi.n	80176b4 <_parsingPacket+0xd4>
				p_packet->data_count = data;
 8017698:	7afa      	ldrb	r2, [r7, #11]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	68db      	ldr	r3, [r3, #12]
 80176a2:	7afa      	ldrb	r2, [r7, #11]
 80176a4:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2201      	movs	r2, #1
 80176aa:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2204      	movs	r2, #4
 80176b0:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80176b2:	e050      	b.n	8017756 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80176b4:	2300      	movs	r3, #0
 80176b6:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80176b8:	2375      	movs	r3, #117	; 0x75
 80176ba:	613b      	str	r3, [r7, #16]
				goto fail;
 80176bc:	e05a      	b.n	8017774 <_parsingPacket+0x194>

		case MRS_LENGTH:
			p_packet->command = data;
 80176be:	7afa      	ldrb	r2, [r7, #11]
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	68db      	ldr	r3, [r3, #12]
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	7c12      	ldrb	r2, [r2, #16]
 80176cc:	4413      	add	r3, r2
 80176ce:	7afa      	ldrb	r2, [r7, #11]
 80176d0:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	7c1b      	ldrb	r3, [r3, #16]
 80176d6:	3301      	adds	r3, #1
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2205      	movs	r2, #5
 80176e2:	721a      	strb	r2, [r3, #8]
			break;
 80176e4:	e037      	b.n	8017756 <_parsingPacket+0x176>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	68db      	ldr	r3, [r3, #12]
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	7c12      	ldrb	r2, [r2, #16]
 80176ee:	4413      	add	r3, r2
 80176f0:	7afa      	ldrb	r2, [r7, #11]
 80176f2:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	7c1b      	ldrb	r3, [r3, #16]
 80176f8:	3301      	adds	r3, #1
 80176fa:	b2da      	uxtb	r2, r3
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	785b      	ldrb	r3, [r3, #1]
 8017704:	3302      	adds	r3, #2
 8017706:	687a      	ldr	r2, [r7, #4]
 8017708:	7c12      	ldrb	r2, [r2, #16]
 801770a:	4293      	cmp	r3, r2
 801770c:	da23      	bge.n	8017756 <_parsingPacket+0x176>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	68da      	ldr	r2, [r3, #12]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	785b      	ldrb	r3, [r3, #1]
 8017716:	b29b      	uxth	r3, r3
 8017718:	3302      	adds	r3, #2
 801771a:	b29b      	uxth	r3, r3
 801771c:	4619      	mov	r1, r3
 801771e:	4610      	mov	r0, r2
 8017720:	f7fa fa4d 	bl	8011bbe <pifCheckXor>
 8017724:	4603      	mov	r3, r0
 8017726:	461a      	mov	r2, r3
 8017728:	7afb      	ldrb	r3, [r7, #11]
 801772a:	429a      	cmp	r2, r3
 801772c:	d10d      	bne.n	801774a <_parsingPacket+0x16a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	6a1b      	ldr	r3, [r3, #32]
 8017732:	4618      	mov	r0, r3
 8017734:	f7fd fcf0 	bl	8015118 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	1c9a      	adds	r2, r3, #2
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2206      	movs	r2, #6
 8017746:	721a      	strb	r2, [r3, #8]
					return;
 8017748:	e03c      	b.n	80177c4 <_parsingPacket+0x1e4>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 801774a:	2302      	movs	r3, #2
 801774c:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 801774e:	2391      	movs	r3, #145	; 0x91
 8017750:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 8017752:	e00f      	b.n	8017774 <_parsingPacket+0x194>
				}
			}
			break;

		default:
			break;
 8017754:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	685a      	ldr	r2, [r3, #4]
 801775a:	f107 010b 	add.w	r1, r7, #11
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	4610      	mov	r0, r2
 8017762:	4798      	blx	r3
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	f47f af43 	bne.w	80175f2 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 801776c:	4b17      	ldr	r3, [pc, #92]	; (80177cc <_parsingPacket+0x1ec>)
 801776e:	2203      	movs	r2, #3
 8017770:	701a      	strb	r2, [r3, #0]
	return;
 8017772:	e027      	b.n	80177c4 <_parsingPacket+0x1e4>

fail:
	if (pkt_err != pre_error) {
 8017774:	4b15      	ldr	r3, [pc, #84]	; (80177cc <_parsingPacket+0x1ec>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	7dfa      	ldrb	r2, [r7, #23]
 801777a:	429a      	cmp	r2, r3
 801777c:	d01a      	beq.n	80177b4 <_parsingPacket+0x1d4>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	881b      	ldrh	r3, [r3, #0]
 8017782:	461c      	mov	r4, r3
 8017784:	7dfb      	ldrb	r3, [r7, #23]
 8017786:	4a12      	ldr	r2, [pc, #72]	; (80177d0 <_parsingPacket+0x1f0>)
 8017788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801778c:	7afa      	ldrb	r2, [r7, #11]
 801778e:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 8017790:	687a      	ldr	r2, [r7, #4]
 8017792:	7a12      	ldrb	r2, [r2, #8]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017794:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 801779a:	9203      	str	r2, [sp, #12]
 801779c:	9002      	str	r0, [sp, #8]
 801779e:	9101      	str	r1, [sp, #4]
 80177a0:	9300      	str	r3, [sp, #0]
 80177a2:	4623      	mov	r3, r4
 80177a4:	693a      	ldr	r2, [r7, #16]
 80177a6:	490b      	ldr	r1, [pc, #44]	; (80177d4 <_parsingPacket+0x1f4>)
 80177a8:	2004      	movs	r0, #4
 80177aa:	f7fb fea9 	bl	8013500 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 80177ae:	4a07      	ldr	r2, [pc, #28]	; (80177cc <_parsingPacket+0x1ec>)
 80177b0:	7dfb      	ldrb	r3, [r7, #23]
 80177b2:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6a1b      	ldr	r3, [r3, #32]
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7fd fcad 	bl	8015118 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2200      	movs	r2, #0
 80177c2:	721a      	strb	r2, [r3, #8]
}
 80177c4:	371c      	adds	r7, #28
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd90      	pop	{r4, r7, pc}
 80177ca:	bf00      	nop
 80177cc:	20000158 	.word	0x20000158
 80177d0:	2000014c 	.word	0x2000014c
 80177d4:	0802764c 	.word	0x0802764c

080177d8 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	7a1b      	ldrb	r3, [r3, #8]
 80177ea:	2b05      	cmp	r3, #5
 80177ec:	d803      	bhi.n	80177f6 <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 80177ee:	6839      	ldr	r1, [r7, #0]
 80177f0:	68f8      	ldr	r0, [r7, #12]
 80177f2:	f7ff fef5 	bl	80175e0 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	7a1b      	ldrb	r3, [r3, #8]
 80177fa:	2b06      	cmp	r3, #6
 80177fc:	d119      	bne.n	8017832 <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	699a      	ldr	r2, [r3, #24]
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801780a:	2b00      	cmp	r3, #0
 801780c:	d008      	beq.n	8017820 <_evtParsing+0x48>
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017812:	68fa      	ldr	r2, [r7, #12]
 8017814:	f102 0114 	add.w	r1, r2, #20
 8017818:	68fa      	ldr	r2, [r7, #12]
 801781a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	69db      	ldr	r3, [r3, #28]
 8017826:	4618      	mov	r0, r3
 8017828:	f7fc ff06 	bl	8014638 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2200      	movs	r2, #0
 8017830:	721a      	strb	r2, [r3, #8]
    }
}
 8017832:	bf00      	nop
 8017834:	3710      	adds	r7, #16
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}

0801783a <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 801783a:	b5b0      	push	{r4, r5, r7, lr}
 801783c:	b084      	sub	sp, #16
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]
 8017842:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	7a1b      	ldrb	r3, [r3, #8]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d001      	beq.n	8017854 <_evtSending+0x1a>
 8017850:	2300      	movs	r3, #0
 8017852:	e06f      	b.n	8017934 <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801785a:	2b00      	cmp	r3, #0
 801785c:	d002      	beq.n	8017864 <_evtSending+0x2a>
 801785e:	2b01      	cmp	r3, #1
 8017860:	d021      	beq.n	80178a6 <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 8017862:	e066      	b.n	8017932 <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	3324      	adds	r3, #36	; 0x24
 8017868:	4618      	mov	r0, r3
 801786a:	f7fc f88a 	bl	8013982 <pifRingBuffer_IsEmpty>
 801786e:	4603      	mov	r3, r0
 8017870:	2b00      	cmp	r3, #0
 8017872:	d15d      	bne.n	8017930 <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	3324      	adds	r3, #36	; 0x24
 8017878:	4618      	mov	r0, r3
 801787a:	f7fc f895 	bl	80139a8 <pifRingBuffer_GetFillSize>
 801787e:	4603      	mov	r3, r0
 8017880:	461a      	mov	r2, r3
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2200      	movs	r2, #0
 801788c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2201      	movs	r2, #1
 8017894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	69db      	ldr	r3, [r3, #28]
 801789e:	4618      	mov	r0, r3
 80178a0:	f7fc feca 	bl	8014638 <pifTask_SetTrigger>
		break;
 80178a4:	e044      	b.n	8017930 <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	685c      	ldr	r4, [r3, #4]
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80178b6:	4619      	mov	r1, r3
 80178b8:	4610      	mov	r0, r2
 80178ba:	f7fc f836 	bl	801392a <pifRingBuffer_GetTailPointer>
 80178be:	4605      	mov	r5, r0
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80178cc:	4619      	mov	r1, r3
 80178ce:	4610      	mov	r0, r2
 80178d0:	f7fc f88c 	bl	80139ec <pifRingBuffer_GetLinerSize>
 80178d4:	4603      	mov	r3, r0
 80178d6:	461a      	mov	r2, r3
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	4629      	mov	r1, r5
 80178dc:	4620      	mov	r0, r4
 80178de:	4798      	blx	r3
 80178e0:	4603      	mov	r3, r0
 80178e2:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 80178e4:	897b      	ldrh	r3, [r7, #10]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d101      	bne.n	80178ee <_evtSending+0xb4>
 80178ea:	2300      	movs	r3, #0
 80178ec:	e022      	b.n	8017934 <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80178f4:	897b      	ldrh	r3, [r7, #10]
 80178f6:	4413      	add	r3, r2
 80178f8:	b29a      	uxth	r2, r3
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801790c:	429a      	cmp	r2, r3
 801790e:	d30d      	bcc.n	801792c <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801791c:	4619      	mov	r1, r3
 801791e:	4610      	mov	r0, r2
 8017920:	f7fc fa41 	bl	8013da6 <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	2200      	movs	r2, #0
 8017928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 801792c:	2301      	movs	r3, #1
 801792e:	e001      	b.n	8017934 <_evtSending+0xfa>
		break;
 8017930:	bf00      	nop
	}
	return FALSE;
 8017932:	2300      	movs	r3, #0
}
 8017934:	4618      	mov	r0, r3
 8017936:	3710      	adds	r7, #16
 8017938:	46bd      	mov	sp, r7
 801793a:	bdb0      	pop	{r4, r5, r7, pc}

0801793c <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b086      	sub	sp, #24
 8017940:	af02      	add	r7, sp, #8
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	4613      	mov	r3, r2
 8017948:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d103      	bne.n	8017958 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017950:	4b2c      	ldr	r3, [pc, #176]	; (8017a04 <pifMsp_Init+0xc8>)
 8017952:	2201      	movs	r2, #1
 8017954:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017956:	e042      	b.n	80179de <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 8017958:	2258      	movs	r2, #88	; 0x58
 801795a:	2100      	movs	r1, #0
 801795c:	68f8      	ldr	r0, [r7, #12]
 801795e:	f00a ffc1 	bl	80228e4 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 8017962:	2180      	movs	r1, #128	; 0x80
 8017964:	2001      	movs	r0, #1
 8017966:	f00a ff6d 	bl	8022844 <calloc>
 801796a:	4603      	mov	r3, r0
 801796c:	461a      	mov	r2, r3
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	68db      	ldr	r3, [r3, #12]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d103      	bne.n	8017982 <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 801797a:	4b22      	ldr	r3, [pc, #136]	; (8017a04 <pifMsp_Init+0xc8>)
 801797c:	2203      	movs	r2, #3
 801797e:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017980:	e02d      	b.n	80179de <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	3324      	adds	r3, #36	; 0x24
 8017986:	2280      	movs	r2, #128	; 0x80
 8017988:	2100      	movs	r1, #0
 801798a:	4618      	mov	r0, r3
 801798c:	f7fb ff5a 	bl	8013844 <pifRingBuffer_InitHeap>
 8017990:	4603      	mov	r3, r0
 8017992:	2b00      	cmp	r3, #0
 8017994:	d020      	beq.n	80179d8 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 8017996:	2100      	movs	r1, #0
 8017998:	68b8      	ldr	r0, [r7, #8]
 801799a:	f7fd fb57 	bl	801504c <pifTimerManager_Add>
 801799e:	4602      	mov	r2, r0
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	6a1b      	ldr	r3, [r3, #32]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d017      	beq.n	80179dc <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	6a1b      	ldr	r3, [r3, #32]
 80179b0:	68fa      	ldr	r2, [r7, #12]
 80179b2:	4915      	ldr	r1, [pc, #84]	; (8017a08 <pifMsp_Init+0xcc>)
 80179b4:	4618      	mov	r0, r3
 80179b6:	f7fd fc76 	bl	80152a6 <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 80179ba:	88fb      	ldrh	r3, [r7, #6]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d106      	bne.n	80179ce <pifMsp_Init+0x92>
 80179c0:	4b12      	ldr	r3, [pc, #72]	; (8017a0c <pifMsp_Init+0xd0>)
 80179c2:	881b      	ldrh	r3, [r3, #0]
 80179c4:	1c5a      	adds	r2, r3, #1
 80179c6:	b291      	uxth	r1, r2
 80179c8:	4a10      	ldr	r2, [pc, #64]	; (8017a0c <pifMsp_Init+0xd0>)
 80179ca:	8011      	strh	r1, [r2, #0]
 80179cc:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	88fa      	ldrh	r2, [r7, #6]
 80179d2:	801a      	strh	r2, [r3, #0]
    return TRUE;
 80179d4:	2301      	movs	r3, #1
 80179d6:	e010      	b.n	80179fa <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80179d8:	bf00      	nop
 80179da:	e000      	b.n	80179de <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 80179dc:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 80179de:	68f8      	ldr	r0, [r7, #12]
 80179e0:	f000 f818 	bl	8017a14 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 80179e4:	88fb      	ldrh	r3, [r7, #6]
 80179e6:	4a07      	ldr	r2, [pc, #28]	; (8017a04 <pifMsp_Init+0xc8>)
 80179e8:	7812      	ldrb	r2, [r2, #0]
 80179ea:	9200      	str	r2, [sp, #0]
 80179ec:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80179f0:	4907      	ldr	r1, [pc, #28]	; (8017a10 <pifMsp_Init+0xd4>)
 80179f2:	2004      	movs	r0, #4
 80179f4:	f7fb fd84 	bl	8013500 <pifLog_Printf>
#endif
    return FALSE;
 80179f8:	2300      	movs	r3, #0
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	3710      	adds	r7, #16
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	20001bb5 	.word	0x20001bb5
 8017a08:	08017591 	.word	0x08017591
 8017a0c:	20000128 	.word	0x20000128
 8017a10:	08027670 	.word	0x08027670

08017a14 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d007      	beq.n	8017a34 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f00a ff45 	bl	80228b8 <free>
		p_owner->__rx.p_packet = NULL;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2200      	movs	r2, #0
 8017a32:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	3324      	adds	r3, #36	; 0x24
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7fb ff4d 	bl	80138d8 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6a1b      	ldr	r3, [r3, #32]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d004      	beq.n	8017a50 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6a1b      	ldr	r3, [r3, #32]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fd fb1a 	bl	8015084 <pifTimerManager_Remove>
	}
#endif
}
 8017a50:	bf00      	nop
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	683a      	ldr	r2, [r7, #0]
 8017a66:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017a68:	4b04      	ldr	r3, [pc, #16]	; (8017a7c <pifMsp_AttachComm+0x24>)
 8017a6a:	4a05      	ldr	r2, [pc, #20]	; (8017a80 <pifMsp_AttachComm+0x28>)
 8017a6c:	6879      	ldr	r1, [r7, #4]
 8017a6e:	6838      	ldr	r0, [r7, #0]
 8017a70:	f7fa f9fe 	bl	8011e70 <pifComm_AttachClient>
}
 8017a74:	bf00      	nop
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	0801783b 	.word	0x0801783b
 8017a80:	080177d9 	.word	0x080177d9

08017a84 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	685b      	ldr	r3, [r3, #4]
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7fa fa03 	bl	8011e9c <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	2200      	movs	r2, #0
 8017a9a:	605a      	str	r2, [r3, #4]
}
 8017a9c:	bf00      	nop
 8017a9e:	3708      	adds	r7, #8
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b085      	sub	sp, #20
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	68ba      	ldr	r2, [r7, #8]
 8017ab6:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	683a      	ldr	r2, [r7, #0]
 8017ac2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8017ac4:	bf00      	nop
 8017ac6:	3714      	adds	r7, #20
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ace:	4770      	bx	lr

08017ad0 <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b085      	sub	sp, #20
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	689b      	ldr	r3, [r3, #8]
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	689b      	ldr	r3, [r3, #8]
 8017ae4:	1c5a      	adds	r2, r3, #1
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	609a      	str	r2, [r3, #8]
	return data;
 8017aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3714      	adds	r7, #20
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 8017af8:	b480      	push	{r7}
 8017afa:	b085      	sub	sp, #20
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	689b      	ldr	r3, [r3, #8]
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	b21a      	sxth	r2, r3
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	689b      	ldr	r3, [r3, #8]
 8017b0c:	3301      	adds	r3, #1
 8017b0e:	781b      	ldrb	r3, [r3, #0]
 8017b10:	021b      	lsls	r3, r3, #8
 8017b12:	b21b      	sxth	r3, r3
 8017b14:	4313      	orrs	r3, r2
 8017b16:	b21b      	sxth	r3, r3
 8017b18:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	1c9a      	adds	r2, r3, #2
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	609a      	str	r2, [r3, #8]
	return data;
 8017b24:	89fb      	ldrh	r3, [r7, #14]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr

08017b32 <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 8017b32:	b480      	push	{r7}
 8017b34:	b085      	sub	sp, #20
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	689b      	ldr	r3, [r3, #8]
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	461a      	mov	r2, r3
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	689b      	ldr	r3, [r3, #8]
 8017b46:	3301      	adds	r3, #1
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	021b      	lsls	r3, r3, #8
 8017b4c:	431a      	orrs	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	689b      	ldr	r3, [r3, #8]
 8017b52:	3302      	adds	r3, #2
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	041b      	lsls	r3, r3, #16
 8017b58:	431a      	orrs	r2, r3
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	689b      	ldr	r3, [r3, #8]
 8017b5e:	3303      	adds	r3, #3
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	061b      	lsls	r3, r3, #24
 8017b64:	4313      	orrs	r3, r2
 8017b66:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	689b      	ldr	r3, [r3, #8]
 8017b6c:	1d1a      	adds	r2, r3, #4
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	609a      	str	r2, [r3, #8]
	return data;
 8017b72:	68fb      	ldr	r3, [r7, #12]
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	3714      	adds	r7, #20
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7e:	4770      	bx	lr

08017b80 <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af02      	add	r7, sp, #8
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	3324      	adds	r3, #36	; 0x24
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f7fb ff79 	bl	8013a86 <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017b94:	2324      	movs	r3, #36	; 0x24
 8017b96:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017b98:	234d      	movs	r3, #77	; 0x4d
 8017b9a:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 8017b9c:	233e      	movs	r3, #62	; 0x3e
 8017b9e:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	3324      	adds	r3, #36	; 0x24
 8017bae:	f107 0108 	add.w	r1, r7, #8
 8017bb2:	2205      	movs	r2, #5
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f7fb ffed 	bl	8013b94 <pifRingBuffer_PutData>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d009      	beq.n	8017bd4 <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 8017bc0:	7b3a      	ldrb	r2, [r7, #12]
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	e01e      	b.n	8017c12 <pifMsp_MakeAnswer+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017bd4:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	3324      	adds	r3, #36	; 0x24
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7fb ff79 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017be0:	4b0e      	ldr	r3, [pc, #56]	; (8017c1c <pifMsp_MakeAnswer+0x9c>)
 8017be2:	781b      	ldrb	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d102      	bne.n	8017bee <pifMsp_MakeAnswer+0x6e>
 8017be8:	4b0c      	ldr	r3, [pc, #48]	; (8017c1c <pifMsp_MakeAnswer+0x9c>)
 8017bea:	2204      	movs	r2, #4
 8017bec:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	881b      	ldrh	r3, [r3, #0]
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	4b08      	ldr	r3, [pc, #32]	; (8017c1c <pifMsp_MakeAnswer+0x9c>)
 8017bfc:	781b      	ldrb	r3, [r3, #0]
 8017bfe:	9301      	str	r3, [sp, #4]
 8017c00:	9200      	str	r2, [sp, #0]
 8017c02:	460b      	mov	r3, r1
 8017c04:	f240 1269 	movw	r2, #361	; 0x169
 8017c08:	4905      	ldr	r1, [pc, #20]	; (8017c20 <pifMsp_MakeAnswer+0xa0>)
 8017c0a:	2004      	movs	r0, #4
 8017c0c:	f7fb fc78 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017c10:	2300      	movs	r3, #0
}
 8017c12:	4618      	mov	r0, r3
 8017c14:	3710      	adds	r7, #16
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	20001bb5 	.word	0x20001bb5
 8017c20:	08027684 	.word	0x08027684

08017c24 <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b084      	sub	sp, #16
 8017c28:	af02      	add	r7, sp, #8
 8017c2a:	6078      	str	r0, [r7, #4]
 8017c2c:	460b      	mov	r3, r1
 8017c2e:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	3324      	adds	r3, #36	; 0x24
 8017c34:	1cf9      	adds	r1, r7, #3
 8017c36:	2201      	movs	r2, #1
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f7fb ffab 	bl	8013b94 <pifRingBuffer_PutData>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d012      	beq.n	8017c6a <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017c4a:	78fb      	ldrb	r3, [r7, #3]
 8017c4c:	4053      	eors	r3, r2
 8017c4e:	b2da      	uxtb	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017c66:	2301      	movs	r3, #1
 8017c68:	e01a      	b.n	8017ca0 <pifMsp_AddAnswer8+0x7c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8017c6a:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	3324      	adds	r3, #36	; 0x24
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fb ff2e 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017c76:	4b0c      	ldr	r3, [pc, #48]	; (8017ca8 <pifMsp_AddAnswer8+0x84>)
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d102      	bne.n	8017c84 <pifMsp_AddAnswer8+0x60>
 8017c7e:	4b0a      	ldr	r3, [pc, #40]	; (8017ca8 <pifMsp_AddAnswer8+0x84>)
 8017c80:	2204      	movs	r2, #4
 8017c82:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	881b      	ldrh	r3, [r3, #0]
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4b07      	ldr	r3, [pc, #28]	; (8017ca8 <pifMsp_AddAnswer8+0x84>)
 8017c8c:	781b      	ldrb	r3, [r3, #0]
 8017c8e:	9300      	str	r3, [sp, #0]
 8017c90:	4613      	mov	r3, r2
 8017c92:	f240 1279 	movw	r2, #377	; 0x179
 8017c96:	4905      	ldr	r1, [pc, #20]	; (8017cac <pifMsp_AddAnswer8+0x88>)
 8017c98:	2004      	movs	r0, #4
 8017c9a:	f7fb fc31 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017c9e:	2300      	movs	r3, #0
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	20001bb5 	.word	0x20001bb5
 8017cac:	08027670 	.word	0x08027670

08017cb0 <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b084      	sub	sp, #16
 8017cb4:	af02      	add	r7, sp, #8
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	460b      	mov	r3, r1
 8017cba:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	3324      	adds	r3, #36	; 0x24
 8017cc0:	1cb9      	adds	r1, r7, #2
 8017cc2:	2202      	movs	r2, #2
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7fb ff65 	bl	8013b94 <pifRingBuffer_PutData>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d018      	beq.n	8017d02 <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 8017cd0:	1cbb      	adds	r3, r7, #2
 8017cd2:	2102      	movs	r1, #2
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7f9 ff72 	bl	8011bbe <pifCheckXor>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	461a      	mov	r2, r3
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017ce4:	4053      	eors	r3, r2
 8017ce6:	b2da      	uxtb	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017cf4:	3302      	adds	r3, #2
 8017cf6:	b29a      	uxth	r2, r3
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e01a      	b.n	8017d38 <pifMsp_AddAnswer16+0x88>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017d02:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	3324      	adds	r3, #36	; 0x24
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7fb fee2 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017d0e:	4b0c      	ldr	r3, [pc, #48]	; (8017d40 <pifMsp_AddAnswer16+0x90>)
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d102      	bne.n	8017d1c <pifMsp_AddAnswer16+0x6c>
 8017d16:	4b0a      	ldr	r3, [pc, #40]	; (8017d40 <pifMsp_AddAnswer16+0x90>)
 8017d18:	2204      	movs	r2, #4
 8017d1a:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	881b      	ldrh	r3, [r3, #0]
 8017d20:	461a      	mov	r2, r3
 8017d22:	4b07      	ldr	r3, [pc, #28]	; (8017d40 <pifMsp_AddAnswer16+0x90>)
 8017d24:	781b      	ldrb	r3, [r3, #0]
 8017d26:	9300      	str	r3, [sp, #0]
 8017d28:	4613      	mov	r3, r2
 8017d2a:	f240 1289 	movw	r2, #393	; 0x189
 8017d2e:	4905      	ldr	r1, [pc, #20]	; (8017d44 <pifMsp_AddAnswer16+0x94>)
 8017d30:	2004      	movs	r0, #4
 8017d32:	f7fb fbe5 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017d36:	2300      	movs	r3, #0
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	20001bb5 	.word	0x20001bb5
 8017d44:	08027670 	.word	0x08027670

08017d48 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b084      	sub	sp, #16
 8017d4c:	af02      	add	r7, sp, #8
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	3324      	adds	r3, #36	; 0x24
 8017d56:	4639      	mov	r1, r7
 8017d58:	2204      	movs	r2, #4
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7fb ff1a 	bl	8013b94 <pifRingBuffer_PutData>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d018      	beq.n	8017d98 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 8017d66:	463b      	mov	r3, r7
 8017d68:	2104      	movs	r1, #4
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7f9 ff27 	bl	8011bbe <pifCheckXor>
 8017d70:	4603      	mov	r3, r0
 8017d72:	461a      	mov	r2, r3
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017d7a:	4053      	eors	r3, r2
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017d8a:	3304      	adds	r3, #4
 8017d8c:	b29a      	uxth	r2, r3
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017d94:	2301      	movs	r3, #1
 8017d96:	e01a      	b.n	8017dce <pifMsp_AddAnswer32+0x86>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017d98:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	3324      	adds	r3, #36	; 0x24
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fb fe97 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017da4:	4b0c      	ldr	r3, [pc, #48]	; (8017dd8 <pifMsp_AddAnswer32+0x90>)
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d102      	bne.n	8017db2 <pifMsp_AddAnswer32+0x6a>
 8017dac:	4b0a      	ldr	r3, [pc, #40]	; (8017dd8 <pifMsp_AddAnswer32+0x90>)
 8017dae:	2204      	movs	r2, #4
 8017db0:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	881b      	ldrh	r3, [r3, #0]
 8017db6:	461a      	mov	r2, r3
 8017db8:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <pifMsp_AddAnswer32+0x90>)
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	f240 1299 	movw	r2, #409	; 0x199
 8017dc4:	4905      	ldr	r1, [pc, #20]	; (8017ddc <pifMsp_AddAnswer32+0x94>)
 8017dc6:	2004      	movs	r0, #4
 8017dc8:	f7fb fb9a 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017dcc:	2300      	movs	r3, #0
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	20001bb5 	.word	0x20001bb5
 8017ddc:	08027670 	.word	0x08027670

08017de0 <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af02      	add	r7, sp, #8
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	4613      	mov	r3, r2
 8017dec:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 8017dee:	88fb      	ldrh	r3, [r7, #6]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d021      	beq.n	8017e38 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	3324      	adds	r3, #36	; 0x24
 8017df8:	88fa      	ldrh	r2, [r7, #6]
 8017dfa:	68b9      	ldr	r1, [r7, #8]
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7fb fec9 	bl	8013b94 <pifRingBuffer_PutData>
 8017e02:	4603      	mov	r3, r0
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d019      	beq.n	8017e3c <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8017e08:	88fb      	ldrh	r3, [r7, #6]
 8017e0a:	4619      	mov	r1, r3
 8017e0c:	68b8      	ldr	r0, [r7, #8]
 8017e0e:	f7f9 fed6 	bl	8011bbe <pifCheckXor>
 8017e12:	4603      	mov	r3, r0
 8017e14:	461a      	mov	r2, r3
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017e1c:	4053      	eors	r3, r2
 8017e1e:	b2da      	uxtb	r2, r3
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e2c:	88fb      	ldrh	r3, [r7, #6]
 8017e2e:	4413      	add	r3, r2
 8017e30:	b29a      	uxth	r2, r3
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8017e38:	2301      	movs	r3, #1
 8017e3a:	e01a      	b.n	8017e72 <pifMsp_AddAnswer+0x92>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017e3c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	3324      	adds	r3, #36	; 0x24
 8017e42:	4618      	mov	r0, r3
 8017e44:	f7fb fe45 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017e48:	4b0c      	ldr	r3, [pc, #48]	; (8017e7c <pifMsp_AddAnswer+0x9c>)
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d102      	bne.n	8017e56 <pifMsp_AddAnswer+0x76>
 8017e50:	4b0a      	ldr	r3, [pc, #40]	; (8017e7c <pifMsp_AddAnswer+0x9c>)
 8017e52:	2204      	movs	r2, #4
 8017e54:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	881b      	ldrh	r3, [r3, #0]
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	4b07      	ldr	r3, [pc, #28]	; (8017e7c <pifMsp_AddAnswer+0x9c>)
 8017e5e:	781b      	ldrb	r3, [r3, #0]
 8017e60:	9300      	str	r3, [sp, #0]
 8017e62:	4613      	mov	r3, r2
 8017e64:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017e68:	4905      	ldr	r1, [pc, #20]	; (8017e80 <pifMsp_AddAnswer+0xa0>)
 8017e6a:	2004      	movs	r0, #4
 8017e6c:	f7fb fb48 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017e70:	2300      	movs	r3, #0
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20001bb5 	.word	0x20001bb5
 8017e80:	08027670 	.word	0x08027670

08017e84 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b086      	sub	sp, #24
 8017e88:	af02      	add	r7, sp, #8
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	3324      	adds	r3, #36	; 0x24
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7fb fdf7 	bl	8013a86 <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017e98:	2324      	movs	r3, #36	; 0x24
 8017e9a:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017e9c:	234d      	movs	r3, #77	; 0x4d
 8017e9e:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017ea0:	2321      	movs	r3, #33	; 0x21
 8017ea2:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	3324      	adds	r3, #36	; 0x24
 8017eb2:	f107 0108 	add.w	r1, r7, #8
 8017eb6:	2205      	movs	r2, #5
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7fb fe6b 	bl	8013b94 <pifRingBuffer_PutData>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d009      	beq.n	8017ed8 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 8017ec4:	7b3a      	ldrb	r2, [r7, #12]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	e01e      	b.n	8017f16 <pifMsp_MakeError+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017ed8:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	3324      	adds	r3, #36	; 0x24
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7fb fdf7 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017ee4:	4b0e      	ldr	r3, [pc, #56]	; (8017f20 <pifMsp_MakeError+0x9c>)
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d102      	bne.n	8017ef2 <pifMsp_MakeError+0x6e>
 8017eec:	4b0c      	ldr	r3, [pc, #48]	; (8017f20 <pifMsp_MakeError+0x9c>)
 8017eee:	2204      	movs	r2, #4
 8017ef0:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	881b      	ldrh	r3, [r3, #0]
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	461a      	mov	r2, r3
 8017efe:	4b08      	ldr	r3, [pc, #32]	; (8017f20 <pifMsp_MakeError+0x9c>)
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	9301      	str	r3, [sp, #4]
 8017f04:	9200      	str	r2, [sp, #0]
 8017f06:	460b      	mov	r3, r1
 8017f08:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8017f0c:	4905      	ldr	r1, [pc, #20]	; (8017f24 <pifMsp_MakeError+0xa0>)
 8017f0e:	2004      	movs	r0, #4
 8017f10:	f7fb faf6 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017f14:	2300      	movs	r3, #0
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	20001bb5 	.word	0x20001bb5
 8017f24:	08027684 	.word	0x08027684

08017f28 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8017f28:	b590      	push	{r4, r7, lr}
 8017f2a:	b085      	sub	sp, #20
 8017f2c:	af02      	add	r7, sp, #8
 8017f2e:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	3324      	adds	r3, #36	; 0x24
 8017f3a:	2103      	movs	r1, #3
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7fb fdda 	bl	8013af6 <pifRingBuffer_GetPointerPutting>
 8017f42:	4603      	mov	r3, r0
 8017f44:	b2e2      	uxtb	r2, r4
 8017f46:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	4053      	eors	r3, r2
 8017f58:	b2da      	uxtb	r2, r3
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	4610      	mov	r0, r2
 8017f70:	f7fb fddc 	bl	8013b2c <pifRingBuffer_PutByte>
 8017f74:	4603      	mov	r3, r0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d00c      	beq.n	8017f94 <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	3324      	adds	r3, #36	; 0x24
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7fb fd99 	bl	8013ab6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	69db      	ldr	r3, [r3, #28]
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fc fb54 	bl	8014638 <pifTask_SetTrigger>
	return TRUE;
 8017f90:	2301      	movs	r3, #1
 8017f92:	e01a      	b.n	8017fca <pifMsp_SendAnswer+0xa2>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017f94:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	3324      	adds	r3, #36	; 0x24
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7fb fd99 	bl	8013ad2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017fa0:	4b0c      	ldr	r3, [pc, #48]	; (8017fd4 <pifMsp_SendAnswer+0xac>)
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d102      	bne.n	8017fae <pifMsp_SendAnswer+0x86>
 8017fa8:	4b0a      	ldr	r3, [pc, #40]	; (8017fd4 <pifMsp_SendAnswer+0xac>)
 8017faa:	2204      	movs	r2, #4
 8017fac:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	881b      	ldrh	r3, [r3, #0]
 8017fb2:	461a      	mov	r2, r3
 8017fb4:	4b07      	ldr	r3, [pc, #28]	; (8017fd4 <pifMsp_SendAnswer+0xac>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	9300      	str	r3, [sp, #0]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8017fc0:	4905      	ldr	r1, [pc, #20]	; (8017fd8 <pifMsp_SendAnswer+0xb0>)
 8017fc2:	2004      	movs	r0, #4
 8017fc4:	f7fb fa9c 	bl	8013500 <pifLog_Printf>
#endif
	return FALSE;
 8017fc8:	2300      	movs	r3, #0
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	370c      	adds	r7, #12
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd90      	pop	{r4, r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	20001bb5 	.word	0x20001bb5
 8017fd8:	08027670 	.word	0x08027670

08017fdc <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 8017fdc:	b480      	push	{r7}
 8017fde:	b085      	sub	sp, #20
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	68ba      	ldr	r2, [r7, #8]
 8017fec:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	687a      	ldr	r2, [r7, #4]
 8017ff2:	61da      	str	r2, [r3, #28]
}
 8017ff4:	bf00      	nop
 8017ff6:	3714      	adds	r7, #20
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffe:	4770      	bx	lr

08018000 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b084      	sub	sp, #16
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	460b      	mov	r3, r1
 801800a:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 801800c:	2300      	movs	r3, #0
 801800e:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018016:	2b02      	cmp	r3, #2
 8018018:	d04f      	beq.n	80180ba <_processRcPpm+0xba>
 801801a:	2b02      	cmp	r3, #2
 801801c:	f300 80b5 	bgt.w	801818a <_processRcPpm+0x18a>
 8018020:	2b00      	cmp	r3, #0
 8018022:	d002      	beq.n	801802a <_processRcPpm+0x2a>
 8018024:	2b01      	cmp	r3, #1
 8018026:	d010      	beq.n	801804a <_processRcPpm+0x4a>
 8018028:	e0af      	b.n	801818a <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018030:	887a      	ldrh	r2, [r7, #2]
 8018032:	429a      	cmp	r2, r3
 8018034:	f0c0 80a4 	bcc.w	8018180 <_processRcPpm+0x180>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801803e:	3301      	adds	r3, #1
 8018040:	b2da      	uxtb	r2, r3
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018048:	e09a      	b.n	8018180 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018050:	887a      	ldrh	r2, [r7, #2]
 8018052:	429a      	cmp	r2, r3
 8018054:	d224      	bcs.n	80180a0 <_processRcPpm+0xa0>
			p_owner->_channel++;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801805c:	b2db      	uxtb	r3, r3
 801805e:	3301      	adds	r3, #1
 8018060:	b2db      	uxtb	r3, r3
 8018062:	b25a      	sxtb	r2, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018070:	461a      	mov	r2, r3
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018078:	429a      	cmp	r2, r3
 801807a:	f280 8083 	bge.w	8018184 <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018084:	461a      	mov	r2, r3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	789b      	ldrb	r3, [r3, #2]
 801808a:	429a      	cmp	r2, r3
 801808c:	db7a      	blt.n	8018184 <_processRcPpm+0x184>
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018094:	b2db      	uxtb	r3, r3
 8018096:	3301      	adds	r3, #1
 8018098:	b2da      	uxtb	r2, r3
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 801809e:	e071      	b.n	8018184 <_processRcPpm+0x184>
			p_owner->_channel = -1;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	22ff      	movs	r2, #255	; 0xff
 80180a4:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80180ae:	3301      	adds	r3, #1
 80180b0:	b2da      	uxtb	r2, r3
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80180b8:	e064      	b.n	8018184 <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80180c0:	887a      	ldrh	r2, [r7, #2]
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d257      	bcs.n	8018176 <_processRcPpm+0x176>
			p_owner->_channel++;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80180cc:	b2db      	uxtb	r3, r3
 80180ce:	3301      	adds	r3, #1
 80180d0:	b2db      	uxtb	r3, r3
 80180d2:	b25a      	sxtb	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80180e0:	461a      	mov	r2, r3
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80180e8:	429a      	cmp	r2, r3
 80180ea:	da4d      	bge.n	8018188 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80180f2:	f003 0301 	and.w	r3, r3, #1
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d019      	beq.n	8018130 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018100:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8018104:	b29b      	uxth	r3, r3
 8018106:	461a      	mov	r2, r3
 8018108:	887b      	ldrh	r3, [r7, #2]
 801810a:	4293      	cmp	r3, r2
 801810c:	d31b      	bcc.n	8018146 <_processRcPpm+0x146>
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018112:	887a      	ldrh	r2, [r7, #2]
 8018114:	429a      	cmp	r2, r3
 8018116:	d816      	bhi.n	8018146 <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4413      	add	r3, r2
 8018126:	887a      	ldrh	r2, [r7, #2]
 8018128:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 801812a:	887b      	ldrh	r3, [r7, #2]
 801812c:	81fb      	strh	r3, [r7, #14]
 801812e:	e00a      	b.n	8018146 <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	887a      	ldrh	r2, [r7, #2]
 8018140:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 8018142:	887b      	ldrh	r3, [r7, #2]
 8018144:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 8018146:	89fb      	ldrh	r3, [r7, #14]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d01d      	beq.n	8018188 <_processRcPpm+0x188>
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018152:	3301      	adds	r3, #1
 8018154:	687a      	ldr	r2, [r7, #4]
 8018156:	7892      	ldrb	r2, [r2, #2]
 8018158:	4293      	cmp	r3, r2
 801815a:	db15      	blt.n	8018188 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	699b      	ldr	r3, [r3, #24]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d011      	beq.n	8018188 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	699b      	ldr	r3, [r3, #24]
 8018168:	6878      	ldr	r0, [r7, #4]
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 801816e:	687a      	ldr	r2, [r7, #4]
 8018170:	69d2      	ldr	r2, [r2, #28]
 8018172:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 8018174:	e008      	b.n	8018188 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	22ff      	movs	r2, #255	; 0xff
 801817a:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 801817e:	e003      	b.n	8018188 <_processRcPpm+0x188>
		break;
 8018180:	bf00      	nop
 8018182:	e002      	b.n	801818a <_processRcPpm+0x18a>
		break;
 8018184:	bf00      	nop
 8018186:	e000      	b.n	801818a <_processRcPpm+0x18a>
		break;
 8018188:	bf00      	nop
	}
	return rtn;
 801818a:	89fb      	ldrh	r3, [r7, #14]
}
 801818c:	4618      	mov	r0, r3
 801818e:	3710      	adds	r7, #16
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}

08018194 <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b084      	sub	sp, #16
 8018198:	af00      	add	r7, sp, #0
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	4608      	mov	r0, r1
 801819e:	4611      	mov	r1, r2
 80181a0:	461a      	mov	r2, r3
 80181a2:	4603      	mov	r3, r0
 80181a4:	817b      	strh	r3, [r7, #10]
 80181a6:	460b      	mov	r3, r1
 80181a8:	727b      	strb	r3, [r7, #9]
 80181aa:	4613      	mov	r3, r2
 80181ac:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d104      	bne.n	80181be <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 80181b4:	4b1e      	ldr	r3, [pc, #120]	; (8018230 <pifRcPpm_Init+0x9c>)
 80181b6:	2201      	movs	r2, #1
 80181b8:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80181ba:	2300      	movs	r3, #0
 80181bc:	e033      	b.n	8018226 <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 80181be:	2254      	movs	r2, #84	; 0x54
 80181c0:	2100      	movs	r1, #0
 80181c2:	68f8      	ldr	r0, [r7, #12]
 80181c4:	f00a fb8e 	bl	80228e4 <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 80181c8:	7a7b      	ldrb	r3, [r7, #9]
 80181ca:	4619      	mov	r1, r3
 80181cc:	2002      	movs	r0, #2
 80181ce:	f00a fb39 	bl	8022844 <calloc>
 80181d2:	4603      	mov	r3, r0
 80181d4:	461a      	mov	r2, r3
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d104      	bne.n	80181ec <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 80181e2:	4b13      	ldr	r3, [pc, #76]	; (8018230 <pifRcPpm_Init+0x9c>)
 80181e4:	2203      	movs	r2, #3
 80181e6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80181e8:	2300      	movs	r3, #0
 80181ea:	e01c      	b.n	8018226 <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 80181ec:	897b      	ldrh	r3, [r7, #10]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d106      	bne.n	8018200 <pifRcPpm_Init+0x6c>
 80181f2:	4b10      	ldr	r3, [pc, #64]	; (8018234 <pifRcPpm_Init+0xa0>)
 80181f4:	881b      	ldrh	r3, [r3, #0]
 80181f6:	1c5a      	adds	r2, r3, #1
 80181f8:	b291      	uxth	r1, r2
 80181fa:	4a0e      	ldr	r2, [pc, #56]	; (8018234 <pifRcPpm_Init+0xa0>)
 80181fc:	8011      	strh	r1, [r2, #0]
 80181fe:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	897a      	ldrh	r2, [r7, #10]
 8018204:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	2200      	movs	r2, #0
 801820a:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	22ff      	movs	r2, #255	; 0xff
 8018210:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	7a7a      	ldrb	r2, [r7, #9]
 8018218:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	88fa      	ldrh	r2, [r7, #6]
 8018220:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 8018224:	2301      	movs	r3, #1
}
 8018226:	4618      	mov	r0, r3
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	20001bb5 	.word	0x20001bb5
 8018234:	20000128 	.word	0x20000128

08018238 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 8018238:	b480      	push	{r7}
 801823a:	b085      	sub	sp, #20
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018244:	68fa      	ldr	r2, [r7, #12]
 8018246:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 801824a:	f043 0301 	orr.w	r3, r3, #1
 801824e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018258:	b299      	uxth	r1, r3
 801825a:	68fa      	ldr	r2, [r7, #12]
 801825c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 801825e:	f361 034f 	bfi	r3, r1, #1, #15
 8018262:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	b29a      	uxth	r2, r3
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 801826c:	2301      	movs	r3, #1
}
 801826e:	4618      	mov	r0, r3
 8018270:	3714      	adds	r7, #20
 8018272:	46bd      	mov	sp, r7
 8018274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018278:	4770      	bx	lr

0801827a <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b084      	sub	sp, #16
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
 8018282:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 8018284:	2300      	movs	r3, #0
 8018286:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	3305      	adds	r3, #5
 8018292:	00db      	lsls	r3, r3, #3
 8018294:	4413      	add	r3, r2
 8018296:	683a      	ldr	r2, [r7, #0]
 8018298:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80182a0:	687a      	ldr	r2, [r7, #4]
 80182a2:	3305      	adds	r3, #5
 80182a4:	00db      	lsls	r3, r3, #3
 80182a6:	4413      	add	r3, r2
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	b29a      	uxth	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80182b2:	6879      	ldr	r1, [r7, #4]
 80182b4:	3305      	adds	r3, #5
 80182b6:	00db      	lsls	r3, r3, #3
 80182b8:	440b      	add	r3, r1
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	b29b      	uxth	r3, r3
 80182be:	1ad3      	subs	r3, r2, r3
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	4619      	mov	r1, r3
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f7ff fe9b 	bl	8018000 <_processRcPpm>
 80182ca:	4603      	mov	r3, r0
 80182cc:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80182e0:	3301      	adds	r3, #1
 80182e2:	b2db      	uxtb	r3, r3
 80182e4:	f003 0303 	and.w	r3, r3, #3
 80182e8:	b2da      	uxtb	r2, r3
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80182f6:	2b03      	cmp	r3, #3
 80182f8:	d807      	bhi.n	801830a <pifRcPpm_sigTick+0x90>
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018300:	3301      	adds	r3, #1
 8018302:	b2da      	uxtb	r2, r3
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 801830a:	89fb      	ldrh	r3, [r7, #14]
}
 801830c:	4618      	mov	r0, r3
 801830e:	3710      	adds	r7, #16
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	460b      	mov	r3, r1
 801831e:	807b      	strh	r3, [r7, #2]
 8018320:	4613      	mov	r3, r2
 8018322:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d104      	bne.n	8018334 <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 801832a:	4b25      	ldr	r3, [pc, #148]	; (80183c0 <pifRcPwm_Init+0xac>)
 801832c:	2201      	movs	r2, #1
 801832e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018330:	2300      	movs	r3, #0
 8018332:	e041      	b.n	80183b8 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 8018334:	2230      	movs	r2, #48	; 0x30
 8018336:	2100      	movs	r1, #0
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	f00a fad3 	bl	80228e4 <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 801833e:	787b      	ldrb	r3, [r7, #1]
 8018340:	4619      	mov	r1, r3
 8018342:	2024      	movs	r0, #36	; 0x24
 8018344:	f00a fa7e 	bl	8022844 <calloc>
 8018348:	4603      	mov	r3, r0
 801834a:	461a      	mov	r2, r3
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018354:	2b00      	cmp	r3, #0
 8018356:	d108      	bne.n	801836a <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 8018358:	4b19      	ldr	r3, [pc, #100]	; (80183c0 <pifRcPwm_Init+0xac>)
 801835a:	2203      	movs	r2, #3
 801835c:	701a      	strb	r2, [r3, #0]
        goto fail;
 801835e:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f000 f831 	bl	80183c8 <pifRcPwm_Clear>
	return FALSE;
 8018366:	2300      	movs	r3, #0
 8018368:	e026      	b.n	80183b8 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 801836a:	787b      	ldrb	r3, [r7, #1]
 801836c:	4619      	mov	r1, r3
 801836e:	2002      	movs	r0, #2
 8018370:	f00a fa68 	bl	8022844 <calloc>
 8018374:	4603      	mov	r3, r0
 8018376:	461a      	mov	r2, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018380:	2b00      	cmp	r3, #0
 8018382:	d104      	bne.n	801838e <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 8018384:	4b0e      	ldr	r3, [pc, #56]	; (80183c0 <pifRcPwm_Init+0xac>)
 8018386:	2203      	movs	r2, #3
 8018388:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801838a:	2300      	movs	r3, #0
 801838c:	e014      	b.n	80183b8 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 801838e:	887b      	ldrh	r3, [r7, #2]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d106      	bne.n	80183a2 <pifRcPwm_Init+0x8e>
 8018394:	4b0b      	ldr	r3, [pc, #44]	; (80183c4 <pifRcPwm_Init+0xb0>)
 8018396:	881b      	ldrh	r3, [r3, #0]
 8018398:	1c5a      	adds	r2, r3, #1
 801839a:	b291      	uxth	r1, r2
 801839c:	4a09      	ldr	r2, [pc, #36]	; (80183c4 <pifRcPwm_Init+0xb0>)
 801839e:	8011      	strh	r1, [r2, #0]
 80183a0:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	887a      	ldrh	r2, [r7, #2]
 80183a6:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2200      	movs	r2, #0
 80183ac:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	787a      	ldrb	r2, [r7, #1]
 80183b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 80183b6:	2301      	movs	r3, #1
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	3708      	adds	r7, #8
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	20001bb5 	.word	0x20001bb5
 80183c4:	20000128 	.word	0x20000128

080183c8 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d007      	beq.n	80183e8 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183dc:	4618      	mov	r0, r3
 80183de:	f00a fa6b 	bl	80228b8 <free>
		p_owner->__p_channel = NULL;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2200      	movs	r2, #0
 80183e6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d007      	beq.n	8018400 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183f4:	4618      	mov	r0, r3
 80183f6:	f00a fa5f 	bl	80228b8 <free>
		p_owner->__p_data = NULL;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2200      	movs	r2, #0
 80183fe:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8018400:	bf00      	nop
 8018402:	3708      	adds	r7, #8
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}

08018408 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 8018408:	b480      	push	{r7}
 801840a:	b085      	sub	sp, #20
 801840c:	af00      	add	r7, sp, #0
 801840e:	60f8      	str	r0, [r7, #12]
 8018410:	60b9      	str	r1, [r7, #8]
 8018412:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018414:	68fa      	ldr	r2, [r7, #12]
 8018416:	f892 3020 	ldrb.w	r3, [r2, #32]
 801841a:	f043 0301 	orr.w	r3, r3, #1
 801841e:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018428:	b299      	uxth	r1, r3
 801842a:	68fa      	ldr	r2, [r7, #12]
 801842c:	8c13      	ldrh	r3, [r2, #32]
 801842e:	f361 034f 	bfi	r3, r1, #1, #15
 8018432:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	b29a      	uxth	r2, r3
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 801843c:	2301      	movs	r3, #1
}
 801843e:	4618      	mov	r0, r3
 8018440:	3714      	adds	r7, #20
 8018442:	46bd      	mov	sp, r7
 8018444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018448:	4770      	bx	lr
	...

0801844c <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b090      	sub	sp, #64	; 0x40
 8018450:	af02      	add	r7, sp, #8
 8018452:	60f8      	str	r0, [r7, #12]
 8018454:	607a      	str	r2, [r7, #4]
 8018456:	603b      	str	r3, [r7, #0]
 8018458:	460b      	mov	r3, r1
 801845a:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d005      	beq.n	801846e <pifGy86_Init+0x22>
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d002      	beq.n	801846e <pifGy86_Init+0x22>
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d104      	bne.n	8018478 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 801846e:	4b48      	ldr	r3, [pc, #288]	; (8018590 <pifGy86_Init+0x144>)
 8018470:	2201      	movs	r2, #1
 8018472:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018474:	2300      	movs	r3, #0
 8018476:	e1dd      	b.n	8018834 <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 8018478:	2264      	movs	r2, #100	; 0x64
 801847a:	2100      	movs	r1, #0
 801847c:	68f8      	ldr	r0, [r7, #12]
 801847e:	f00a fa31 	bl	80228e4 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	1d18      	adds	r0, r3, #4
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	9300      	str	r3, [sp, #0]
 801848a:	2368      	movs	r3, #104	; 0x68
 801848c:	687a      	ldr	r2, [r7, #4]
 801848e:	2100      	movs	r1, #0
 8018490:	f001 f8b8 	bl	8019604 <pifMpu60x0_Init>
 8018494:	4603      	mov	r3, r0
 8018496:	2b00      	cmp	r3, #0
 8018498:	f000 81a5 	beq.w	80187e6 <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	2200      	movs	r2, #0
 80184a2:	2119      	movs	r1, #25
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7fa f869 	bl	801257c <pifI2cDevice_WriteRegByte>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	f000 819c 	beq.w	80187ea <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 80184b2:	2300      	movs	r3, #0
 80184b4:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 80184b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d005      	beq.n	80184c8 <pifGy86_Init+0x7c>
 80184bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184be:	789b      	ldrb	r3, [r3, #2]
 80184c0:	f003 0307 	and.w	r3, r3, #7
 80184c4:	b2da      	uxtb	r2, r3
 80184c6:	e000      	b.n	80184ca <pifGy86_Init+0x7e>
 80184c8:	2203      	movs	r2, #3
 80184ca:	7d3b      	ldrb	r3, [r7, #20]
 80184cc:	f362 0302 	bfi	r3, r2, #0, #3
 80184d0:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	68db      	ldr	r3, [r3, #12]
 80184d6:	7d3a      	ldrb	r2, [r7, #20]
 80184d8:	216b      	movs	r1, #107	; 0x6b
 80184da:	4618      	mov	r0, r3
 80184dc:	f7fa f84e 	bl	801257c <pifI2cDevice_WriteRegByte>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	f000 8183 	beq.w	80187ee <pifGy86_Init+0x3a2>

    if (p_config) {
 80184e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d043      	beq.n	8018576 <pifGy86_Init+0x12a>
    	config.byte = 0;
 80184ee:	2300      	movs	r3, #0
 80184f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 80184f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184f6:	78db      	ldrb	r3, [r3, #3]
 80184f8:	f003 0307 	and.w	r3, r3, #7
 80184fc:	b2da      	uxtb	r2, r3
 80184fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018502:	f362 0302 	bfi	r3, r2, #0, #3
 8018506:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	68db      	ldr	r3, [r3, #12]
 801850e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018512:	211a      	movs	r1, #26
 8018514:	4618      	mov	r0, r3
 8018516:	f7fa f831 	bl	801257c <pifI2cDevice_WriteRegByte>
 801851a:	4603      	mov	r3, r0
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 8168 	beq.w	80187f2 <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8018522:	2300      	movs	r3, #0
 8018524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8018528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801852a:	791b      	ldrb	r3, [r3, #4]
 801852c:	f003 0303 	and.w	r3, r3, #3
 8018530:	b2da      	uxtb	r2, r3
 8018532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018536:	f362 03c4 	bfi	r3, r2, #3, #2
 801853a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	3304      	adds	r3, #4
 8018542:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8018546:	4618      	mov	r0, r3
 8018548:	f001 f978 	bl	801983c <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 801854c:	2300      	movs	r3, #0
 801854e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8018552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018554:	785b      	ldrb	r3, [r3, #1]
 8018556:	f003 0303 	and.w	r3, r3, #3
 801855a:	b2da      	uxtb	r2, r3
 801855c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018560:	f362 03c4 	bfi	r3, r2, #3, #2
 8018564:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	3304      	adds	r3, #4
 801856c:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8018570:	4618      	mov	r0, r3
 8018572:	f001 f983 	bl	801987c <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 8018576:	2300      	movs	r3, #0
 8018578:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 801857c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801857e:	2b00      	cmp	r3, #0
 8018580:	d008      	beq.n	8018594 <pifGy86_Init+0x148>
 8018582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018584:	795b      	ldrb	r3, [r3, #5]
 8018586:	f003 030f 	and.w	r3, r3, #15
 801858a:	b2da      	uxtb	r2, r3
 801858c:	e003      	b.n	8018596 <pifGy86_Init+0x14a>
 801858e:	bf00      	nop
 8018590:	20001bb5 	.word	0x20001bb5
 8018594:	220d      	movs	r2, #13
 8018596:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801859a:	f362 0303 	bfi	r3, r2, #0, #4
 801859e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	68db      	ldr	r3, [r3, #12]
 80185a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80185aa:	2124      	movs	r1, #36	; 0x24
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7f9 ffe5 	bl	801257c <pifI2cDevice_WriteRegByte>
 80185b2:	4603      	mov	r3, r0
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	f000 811e 	beq.w	80187f6 <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 80185ba:	2300      	movs	r3, #0
 80185bc:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 80185be:	7e3b      	ldrb	r3, [r7, #24]
 80185c0:	f043 0310 	orr.w	r3, r3, #16
 80185c4:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 80185c6:	7e3b      	ldrb	r3, [r7, #24]
 80185c8:	f043 0302 	orr.w	r3, r3, #2
 80185cc:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	68db      	ldr	r3, [r3, #12]
 80185d2:	7e3a      	ldrb	r2, [r7, #24]
 80185d4:	2137      	movs	r1, #55	; 0x37
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7f9 ffd0 	bl	801257c <pifI2cDevice_WriteRegByte>
 80185dc:	4603      	mov	r3, r0
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f000 810b 	beq.w	80187fa <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 80185e4:	2300      	movs	r3, #0
 80185e6:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 80185e8:	7f3b      	ldrb	r3, [r7, #28]
 80185ea:	f043 0301 	orr.w	r3, r3, #1
 80185ee:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	68db      	ldr	r3, [r3, #12]
 80185f4:	7f3a      	ldrb	r2, [r7, #28]
 80185f6:	2138      	movs	r1, #56	; 0x38
 80185f8:	4618      	mov	r0, r3
 80185fa:	f7f9 ffbf 	bl	801257c <pifI2cDevice_WriteRegByte>
 80185fe:	4603      	mov	r3, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 80fc 	beq.w	80187fe <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	f103 0014 	add.w	r0, r3, #20
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	2100      	movs	r1, #0
 8018612:	f000 faff 	bl	8018c14 <pifHmc5883_Init>
 8018616:	4603      	mov	r3, r0
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 80f2 	beq.w	8018802 <pifGy86_Init+0x3b6>

    if (p_config) {
 801861e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018620:	2b00      	cmp	r3, #0
 8018622:	d039      	beq.n	8018698 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8018624:	7c3b      	ldrb	r3, [r7, #16]
 8018626:	f36f 0301 	bfc	r3, #0, #2
 801862a:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 801862c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801862e:	7a5b      	ldrb	r3, [r3, #9]
 8018630:	f003 0303 	and.w	r3, r3, #3
 8018634:	b2da      	uxtb	r2, r3
 8018636:	7c3b      	ldrb	r3, [r7, #16]
 8018638:	f362 1346 	bfi	r3, r2, #5, #2
 801863c:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 801863e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018640:	799b      	ldrb	r3, [r3, #6]
 8018642:	f003 0307 	and.w	r3, r3, #7
 8018646:	b2da      	uxtb	r2, r3
 8018648:	7c3b      	ldrb	r3, [r7, #16]
 801864a:	f362 0384 	bfi	r3, r2, #2, #3
 801864e:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018654:	7c3a      	ldrb	r2, [r7, #16]
 8018656:	2100      	movs	r1, #0
 8018658:	4618      	mov	r0, r3
 801865a:	f7f9 ff8f 	bl	801257c <pifI2cDevice_WriteRegByte>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	f000 80d0 	beq.w	8018806 <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	f103 0214 	add.w	r2, r3, #20
 801866c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801866e:	79db      	ldrb	r3, [r3, #7]
 8018670:	4619      	mov	r1, r3
 8018672:	4610      	mov	r0, r2
 8018674:	f000 fba2 	bl	8018dbc <pifHmc5883_SetGain>
 8018678:	4603      	mov	r3, r0
 801867a:	2b00      	cmp	r3, #0
 801867c:	f000 80c5 	beq.w	801880a <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018686:	7a1b      	ldrb	r3, [r3, #8]
 8018688:	2202      	movs	r2, #2
 801868a:	2102      	movs	r1, #2
 801868c:	f7f9 ff8c 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 8018690:	4603      	mov	r3, r0
 8018692:	2b00      	cmp	r3, #0
 8018694:	f000 80bb 	beq.w	801880e <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	68d8      	ldr	r0, [r3, #12]
 801869c:	2300      	movs	r3, #0
 801869e:	f240 1201 	movw	r2, #257	; 0x101
 80186a2:	2137      	movs	r1, #55	; 0x37
 80186a4:	f7f9 ff80 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 80186a8:	4603      	mov	r3, r0
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	f000 80b1 	beq.w	8018812 <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	68db      	ldr	r3, [r3, #12]
 80186b4:	2201      	movs	r2, #1
 80186b6:	2138      	movs	r1, #56	; 0x38
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7f9 ff5f 	bl	801257c <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	68d8      	ldr	r0, [r3, #12]
 80186c2:	2301      	movs	r3, #1
 80186c4:	f240 5201 	movw	r2, #1281	; 0x501
 80186c8:	216a      	movs	r1, #106	; 0x6a
 80186ca:	f7f9 ff6d 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 80186ce:	4603      	mov	r3, r0
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	f000 80a0 	beq.w	8018816 <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 80186dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186e0:	221e      	movs	r2, #30
 80186e2:	f362 0306 	bfi	r3, r2, #0, #7
 80186e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 80186ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	68db      	ldr	r3, [r3, #12]
 80186fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80186fe:	2125      	movs	r1, #37	; 0x25
 8018700:	4618      	mov	r0, r3
 8018702:	f7f9 ff3b 	bl	801257c <pifI2cDevice_WriteRegByte>
 8018706:	4603      	mov	r3, r0
 8018708:	2b00      	cmp	r3, #0
 801870a:	f000 8086 	beq.w	801881a <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	68db      	ldr	r3, [r3, #12]
 8018712:	2203      	movs	r2, #3
 8018714:	2126      	movs	r1, #38	; 0x26
 8018716:	4618      	mov	r0, r3
 8018718:	f7f9 ff30 	bl	801257c <pifI2cDevice_WriteRegByte>
 801871c:	4603      	mov	r3, r0
 801871e:	2b00      	cmp	r3, #0
 8018720:	d07d      	beq.n	801881e <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 8018722:	2300      	movs	r3, #0
 8018724:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8018728:	f897 3020 	ldrb.w	r3, [r7, #32]
 801872c:	2206      	movs	r2, #6
 801872e:	f362 0303 	bfi	r3, r2, #0, #4
 8018732:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8018736:	f897 3020 	ldrb.w	r3, [r7, #32]
 801873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801873e:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	f897 2020 	ldrb.w	r2, [r7, #32]
 801874a:	2127      	movs	r1, #39	; 0x27
 801874c:	4618      	mov	r0, r3
 801874e:	f7f9 ff15 	bl	801257c <pifI2cDevice_WriteRegByte>
 8018752:	4603      	mov	r3, r0
 8018754:	2b00      	cmp	r3, #0
 8018756:	d064      	beq.n	8018822 <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8018758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801875a:	2b00      	cmp	r3, #0
 801875c:	d02a      	beq.n	80187b4 <pifGy86_Init+0x368>
 801875e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018760:	691b      	ldr	r3, [r3, #16]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d026      	beq.n	80187b4 <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801876c:	2377      	movs	r3, #119	; 0x77
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	2100      	movs	r1, #0
 8018772:	f001 fd5d 	bl	801a230 <pifMs5611_Init>
 8018776:	4603      	mov	r3, r0
 8018778:	2b00      	cmp	r3, #0
 801877a:	d054      	beq.n	8018826 <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8018782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018784:	7a9b      	ldrb	r3, [r3, #10]
 8018786:	b29b      	uxth	r3, r3
 8018788:	4619      	mov	r1, r3
 801878a:	4610      	mov	r0, r2
 801878c:	f001 fdf0 	bl	801a370 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8018796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018798:	8999      	ldrh	r1, [r3, #12]
 801879a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801879c:	691a      	ldr	r2, [r3, #16]
 801879e:	2300      	movs	r3, #0
 80187a0:	f001 fe22 	bl	801a3e8 <pifMs5611_AddTaskForReading>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d03f      	beq.n	801882a <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80187b0:	7812      	ldrb	r2, [r2, #0]
 80187b2:	715a      	strb	r2, [r3, #5]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 80187b4:	897b      	ldrh	r3, [r7, #10]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d106      	bne.n	80187c8 <pifGy86_Init+0x37c>
 80187ba:	4b20      	ldr	r3, [pc, #128]	; (801883c <pifGy86_Init+0x3f0>)
 80187bc:	881b      	ldrh	r3, [r3, #0]
 80187be:	1c5a      	adds	r2, r3, #1
 80187c0:	b291      	uxth	r1, r2
 80187c2:	4a1e      	ldr	r2, [pc, #120]	; (801883c <pifGy86_Init+0x3f0>)
 80187c4:	8011      	strh	r1, [r2, #0]
 80187c6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	897a      	ldrh	r2, [r7, #10]
 80187cc:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	2200      	movs	r2, #0
 80187d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	4a19      	ldr	r2, [pc, #100]	; (8018840 <pifGy86_Init+0x3f4>)
 80187da:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 80187e2:	2301      	movs	r3, #1
 80187e4:	e026      	b.n	8018834 <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80187e6:	bf00      	nop
 80187e8:	e020      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80187ea:	bf00      	nop
 80187ec:	e01e      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80187ee:	bf00      	nop
 80187f0:	e01c      	b.n	801882c <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 80187f2:	bf00      	nop
 80187f4:	e01a      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80187f6:	bf00      	nop
 80187f8:	e018      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80187fa:	bf00      	nop
 80187fc:	e016      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80187fe:	bf00      	nop
 8018800:	e014      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018802:	bf00      	nop
 8018804:	e012      	b.n	801882c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018806:	bf00      	nop
 8018808:	e010      	b.n	801882c <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 801880a:	bf00      	nop
 801880c:	e00e      	b.n	801882c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 801880e:	bf00      	nop
 8018810:	e00c      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018812:	bf00      	nop
 8018814:	e00a      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018816:	bf00      	nop
 8018818:	e008      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 801881a:	bf00      	nop
 801881c:	e006      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 801881e:	bf00      	nop
 8018820:	e004      	b.n	801882c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8018822:	bf00      	nop
 8018824:	e002      	b.n	801882c <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8018826:	bf00      	nop
 8018828:	e000      	b.n	801882c <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 801882a:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 801882c:	68f8      	ldr	r0, [r7, #12]
 801882e:	f000 f809 	bl	8018844 <pifGy86_Clear>
	return FALSE;
 8018832:	2300      	movs	r3, #0
}
 8018834:	4618      	mov	r0, r3
 8018836:	3738      	adds	r7, #56	; 0x38
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}
 801883c:	20000128 	.word	0x20000128
 8018840:	08018873 	.word	0x08018873

08018844 <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b082      	sub	sp, #8
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	332c      	adds	r3, #44	; 0x2c
 8018850:	4618      	mov	r0, r3
 8018852:	f001 fd69 	bl	801a328 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	3314      	adds	r3, #20
 801885a:	4618      	mov	r0, r3
 801885c:	f000 fa96 	bl	8018d8c <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	3304      	adds	r3, #4
 8018864:	4618      	mov	r0, r3
 8018866:	f000 ffd1 	bl	801980c <pifMpu60x0_Clear>
}
 801886a:	bf00      	nop
 801886c:	3708      	adds	r7, #8
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}

08018872 <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8018872:	b580      	push	{r7, lr}
 8018874:	b084      	sub	sp, #16
 8018876:	af00      	add	r7, sp, #0
 8018878:	6078      	str	r0, [r7, #4]
 801887a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	68d8      	ldr	r0, [r3, #12]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8018886:	3349      	adds	r3, #73	; 0x49
 8018888:	b2d9      	uxtb	r1, r3
 801888a:	f107 0208 	add.w	r2, r7, #8
 801888e:	2306      	movs	r3, #6
 8018890:	f7f9 fd7e 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 8018894:	4603      	mov	r3, r0
 8018896:	2b00      	cmp	r3, #0
 8018898:	d101      	bne.n	801889e <pifGy86_ReadMag+0x2c>
 801889a:	2300      	movs	r3, #0
 801889c:	e04d      	b.n	801893a <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 801889e:	7a3b      	ldrb	r3, [r7, #8]
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	021b      	lsls	r3, r3, #8
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	7a7b      	ldrb	r3, [r7, #9]
 80188a8:	b29b      	uxth	r3, r3
 80188aa:	4413      	add	r3, r2
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	b21b      	sxth	r3, r3
 80188b0:	ee07 3a90 	vmov	s15, r3
 80188b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80188be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188c6:	ee17 3a90 	vmov	r3, s15
 80188ca:	b21a      	sxth	r2, r3
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 80188d0:	7abb      	ldrb	r3, [r7, #10]
 80188d2:	b29b      	uxth	r3, r3
 80188d4:	021b      	lsls	r3, r3, #8
 80188d6:	b29a      	uxth	r2, r3
 80188d8:	7afb      	ldrb	r3, [r7, #11]
 80188da:	b29b      	uxth	r3, r3
 80188dc:	4413      	add	r3, r2
 80188de:	b29b      	uxth	r3, r3
 80188e0:	b21b      	sxth	r3, r3
 80188e2:	ee07 3a90 	vmov	s15, r3
 80188e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80188f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	3304      	adds	r3, #4
 80188f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188fc:	ee17 2a90 	vmov	r2, s15
 8018900:	b212      	sxth	r2, r2
 8018902:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8018904:	7b3b      	ldrb	r3, [r7, #12]
 8018906:	b29b      	uxth	r3, r3
 8018908:	021b      	lsls	r3, r3, #8
 801890a:	b29a      	uxth	r2, r3
 801890c:	7b7b      	ldrb	r3, [r7, #13]
 801890e:	b29b      	uxth	r3, r3
 8018910:	4413      	add	r3, r2
 8018912:	b29b      	uxth	r3, r3
 8018914:	b21b      	sxth	r3, r3
 8018916:	ee07 3a90 	vmov	s15, r3
 801891a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	edd3 7a06 	vldr	s15, [r3, #24]
 8018924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	3302      	adds	r3, #2
 801892c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018930:	ee17 2a90 	vmov	r2, s15
 8018934:	b212      	sxth	r2, r2
 8018936:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8018938:	2301      	movs	r3, #1
}
 801893a:	4618      	mov	r0, r3
 801893c:	3710      	adds	r7, #16
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}

08018942 <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8018942:	b580      	push	{r7, lr}
 8018944:	b084      	sub	sp, #16
 8018946:	af00      	add	r7, sp, #0
 8018948:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	68db      	ldr	r3, [r3, #12]
 801894e:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	7d1b      	ldrb	r3, [r3, #20]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d002      	beq.n	801895e <_doTask+0x1c>
 8018958:	2b03      	cmp	r3, #3
 801895a:	d004      	beq.n	8018966 <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 801895c:	e011      	b.n	8018982 <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	f000 f866 	bl	8018a30 <pifHcSr04_Trigger>
		break;
 8018964:	e00d      	b.n	8018982 <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d005      	beq.n	801897a <_doTask+0x38>
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	68fa      	ldr	r2, [r7, #12]
 8018974:	69d2      	ldr	r2, [r2, #28]
 8018976:	4610      	mov	r0, r2
 8018978:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2200      	movs	r2, #0
 801897e:	751a      	strb	r2, [r3, #20]
		break;
 8018980:	bf00      	nop
	}
	return 0;
 8018982:	2300      	movs	r3, #0
}
 8018984:	4618      	mov	r0, r3
 8018986:	3710      	adds	r7, #16
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}

0801898c <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b084      	sub	sp, #16
 8018990:	af02      	add	r7, sp, #8
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	460b      	mov	r3, r1
 8018996:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d104      	bne.n	80189a8 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801899e:	4b1f      	ldr	r3, [pc, #124]	; (8018a1c <pifHcSr04_Init+0x90>)
 80189a0:	2201      	movs	r2, #1
 80189a2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80189a4:	2300      	movs	r3, #0
 80189a6:	e035      	b.n	8018a14 <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 80189a8:	4b1d      	ldr	r3, [pc, #116]	; (8018a20 <pifHcSr04_Init+0x94>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d104      	bne.n	80189ba <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 80189b0:	4b1a      	ldr	r3, [pc, #104]	; (8018a1c <pifHcSr04_Init+0x90>)
 80189b2:	2209      	movs	r2, #9
 80189b4:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80189b6:	2300      	movs	r3, #0
 80189b8:	e02c      	b.n	8018a14 <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 80189ba:	2220      	movs	r2, #32
 80189bc:	2100      	movs	r1, #0
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f009 ff90 	bl	80228e4 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 80189c4:	2300      	movs	r3, #0
 80189c6:	9300      	str	r3, [sp, #0]
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	4a16      	ldr	r2, [pc, #88]	; (8018a24 <pifHcSr04_Init+0x98>)
 80189cc:	2132      	movs	r1, #50	; 0x32
 80189ce:	2002      	movs	r0, #2
 80189d0:	f7fb feb8 	bl	8014744 <pifTaskManager_Add>
 80189d4:	4602      	mov	r2, r0
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	68db      	ldr	r3, [r3, #12]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d101      	bne.n	80189e6 <pifHcSr04_Init+0x5a>
 80189e2:	2300      	movs	r3, #0
 80189e4:	e016      	b.n	8018a14 <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HC_SR04";
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	68db      	ldr	r3, [r3, #12]
 80189ea:	4a0f      	ldr	r2, [pc, #60]	; (8018a28 <pifHcSr04_Init+0x9c>)
 80189ec:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 80189ee:	887b      	ldrh	r3, [r7, #2]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d106      	bne.n	8018a02 <pifHcSr04_Init+0x76>
 80189f4:	4b0d      	ldr	r3, [pc, #52]	; (8018a2c <pifHcSr04_Init+0xa0>)
 80189f6:	881b      	ldrh	r3, [r3, #0]
 80189f8:	1c5a      	adds	r2, r3, #1
 80189fa:	b291      	uxth	r1, r2
 80189fc:	4a0b      	ldr	r2, [pc, #44]	; (8018a2c <pifHcSr04_Init+0xa0>)
 80189fe:	8011      	strh	r1, [r2, #0]
 8018a00:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	887a      	ldrh	r2, [r7, #2]
 8018a06:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8018a08:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f000 f849 	bl	8018aa4 <pifHcSr04_SetTemperature>

    return TRUE;
 8018a12:	2301      	movs	r3, #1
}
 8018a14:	4618      	mov	r0, r3
 8018a16:	3708      	adds	r7, #8
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	bd80      	pop	{r7, pc}
 8018a1c:	20001bb5 	.word	0x20001bb5
 8018a20:	20001bdc 	.word	0x20001bdc
 8018a24:	08018943 	.word	0x08018943
 8018a28:	0802769c 	.word	0x0802769c
 8018a2c:	20000128 	.word	0x20000128

08018a30 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2001      	movs	r0, #1
 8018a3e:	4798      	blx	r3
	pif_Delay1us(11);
 8018a40:	200b      	movs	r0, #11
 8018a42:	f7f8 fbef 	bl	8011224 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	2000      	movs	r0, #0
 8018a4c:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2201      	movs	r2, #1
 8018a52:	751a      	strb	r2, [r3, #20]
}
 8018a54:	bf00      	nop
 8018a56:	3708      	adds	r7, #8
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	bd80      	pop	{r7, pc}

08018a5c <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b082      	sub	sp, #8
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
 8018a64:	460b      	mov	r3, r1
 8018a66:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d002      	beq.n	8018a74 <pifHcSr04_StartTrigger+0x18>
 8018a6e:	887b      	ldrh	r3, [r7, #2]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d104      	bne.n	8018a7e <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 8018a74:	4b0a      	ldr	r3, [pc, #40]	; (8018aa0 <pifHcSr04_StartTrigger+0x44>)
 8018a76:	2201      	movs	r2, #1
 8018a78:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	e00b      	b.n	8018a96 <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	68db      	ldr	r3, [r3, #12]
 8018a82:	887a      	ldrh	r2, [r7, #2]
 8018a84:	4611      	mov	r1, r2
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7fb fdb4 	bl	80145f4 <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	68db      	ldr	r3, [r3, #12]
 8018a90:	2200      	movs	r2, #0
 8018a92:	711a      	strb	r2, [r3, #4]
	return TRUE;
 8018a94:	2301      	movs	r3, #1
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3708      	adds	r7, #8
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	20001bb5 	.word	0x20001bb5

08018aa4 <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 8018aa4:	b480      	push	{r7}
 8018aa6:	b083      	sub	sp, #12
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
 8018aac:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8018ab0:	edd7 7a00 	vldr	s15, [r7]
 8018ab4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8018ae8 <pifHcSr04_SetTemperature+0x44>
 8018ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018abc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8018aec <pifHcSr04_SetTemperature+0x48>
 8018ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ac4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8018af0 <pifHcSr04_SetTemperature+0x4c>
 8018ac8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018acc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8018ada:	bf00      	nop
 8018adc:	370c      	adds	r7, #12
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop
 8018ae8:	3f19999a 	.word	0x3f19999a
 8018aec:	43a5cccd 	.word	0x43a5cccd
 8018af0:	461c4000 	.word	0x461c4000

08018af4 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
 8018afc:	460b      	mov	r3, r1
 8018afe:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	7d1b      	ldrb	r3, [r3, #20]
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d002      	beq.n	8018b0e <pifHcSr04_sigReceiveEcho+0x1a>
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	d00d      	beq.n	8018b28 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 8018b0c:	e031      	b.n	8018b72 <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 8018b0e:	78fb      	ldrb	r3, [r7, #3]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d02b      	beq.n	8018b6c <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8018b14:	4b19      	ldr	r3, [pc, #100]	; (8018b7c <pifHcSr04_sigReceiveEcho+0x88>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	4798      	blx	r3
 8018b1a:	4602      	mov	r2, r0
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2202      	movs	r2, #2
 8018b24:	751a      	strb	r2, [r3, #20]
		break;
 8018b26:	e021      	b.n	8018b6c <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 8018b28:	78fb      	ldrb	r3, [r7, #3]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d120      	bne.n	8018b70 <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 8018b2e:	4b13      	ldr	r3, [pc, #76]	; (8018b7c <pifHcSr04_sigReceiveEcho+0x88>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	4798      	blx	r3
 8018b34:	4602      	mov	r2, r0
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	699b      	ldr	r3, [r3, #24]
 8018b3a:	1ad3      	subs	r3, r2, r3
 8018b3c:	ee07 3a90 	vmov	s15, r3
 8018b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	ed93 7a04 	vldr	s14, [r3, #16]
 8018b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b52:	ee17 2a90 	vmov	r2, s15
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2203      	movs	r2, #3
 8018b5e:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7fb fd67 	bl	8014638 <pifTask_SetTrigger>
		break;
 8018b6a:	e001      	b.n	8018b70 <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 8018b6c:	bf00      	nop
 8018b6e:	e000      	b.n	8018b72 <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 8018b70:	bf00      	nop
	}
}
 8018b72:	bf00      	nop
 8018b74:	3708      	adds	r7, #8
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	20001bdc 	.word	0x20001bdc

08018b80 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8018b80:	b480      	push	{r7}
 8018b82:	b083      	sub	sp, #12
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	460b      	mov	r3, r1
 8018b8a:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8018b8c:	78fb      	ldrb	r3, [r7, #3]
 8018b8e:	2b07      	cmp	r3, #7
 8018b90:	d839      	bhi.n	8018c06 <_changeGain+0x86>
 8018b92:	a201      	add	r2, pc, #4	; (adr r2, 8018b98 <_changeGain+0x18>)
 8018b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b98:	08018bb9 	.word	0x08018bb9
 8018b9c:	08018bc3 	.word	0x08018bc3
 8018ba0:	08018bcd 	.word	0x08018bcd
 8018ba4:	08018bd7 	.word	0x08018bd7
 8018ba8:	08018be1 	.word	0x08018be1
 8018bac:	08018beb 	.word	0x08018beb
 8018bb0:	08018bf5 	.word	0x08018bf5
 8018bb4:	08018bff 	.word	0x08018bff
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f240 525a 	movw	r2, #1370	; 0x55a
 8018bbe:	825a      	strh	r2, [r3, #18]
 8018bc0:	e021      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	f240 4242 	movw	r2, #1090	; 0x442
 8018bc8:	825a      	strh	r2, [r3, #18]
 8018bca:	e01c      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f44f 724d 	mov.w	r2, #820	; 0x334
 8018bd2:	825a      	strh	r2, [r3, #18]
 8018bd4:	e017      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f44f 7225 	mov.w	r2, #660	; 0x294
 8018bdc:	825a      	strh	r2, [r3, #18]
 8018bde:	e012      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018be6:	825a      	strh	r2, [r3, #18]
 8018be8:	e00d      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8018bf0:	825a      	strh	r2, [r3, #18]
 8018bf2:	e008      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018bfa:	825a      	strh	r2, [r3, #18]
 8018bfc:	e003      	b.n	8018c06 <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	22e6      	movs	r2, #230	; 0xe6
 8018c02:	825a      	strh	r2, [r3, #18]
 8018c04:	bf00      	nop
	}
}
 8018c06:	bf00      	nop
 8018c08:	370c      	adds	r7, #12
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c10:	4770      	bx	lr
 8018c12:	bf00      	nop

08018c14 <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 8018c14:	b590      	push	{r4, r7, lr}
 8018c16:	b08d      	sub	sp, #52	; 0x34
 8018c18:	af02      	add	r7, sp, #8
 8018c1a:	60f8      	str	r0, [r7, #12]
 8018c1c:	607a      	str	r2, [r7, #4]
 8018c1e:	603b      	str	r3, [r7, #0]
 8018c20:	460b      	mov	r3, r1
 8018c22:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 8018c24:	4b53      	ldr	r3, [pc, #332]	; (8018d74 <pifHmc5883_Init+0x160>)
 8018c26:	f107 0418 	add.w	r4, r7, #24
 8018c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d005      	beq.n	8018c42 <pifHmc5883_Init+0x2e>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d002      	beq.n	8018c42 <pifHmc5883_Init+0x2e>
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d104      	bne.n	8018c4c <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 8018c42:	4b4d      	ldr	r3, [pc, #308]	; (8018d78 <pifHmc5883_Init+0x164>)
 8018c44:	2201      	movs	r2, #1
 8018c46:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	e08f      	b.n	8018d6c <pifHmc5883_Init+0x158>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 8018c4c:	2218      	movs	r2, #24
 8018c4e:	2100      	movs	r1, #0
 8018c50:	68f8      	ldr	r0, [r7, #12]
 8018c52:	f009 fe47 	bl	80228e4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8018c56:	6878      	ldr	r0, [r7, #4]
 8018c58:	f7f9 fa7e 	bl	8012158 <pifI2cPort_AddDevice>
 8018c5c:	4602      	mov	r2, r0
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	691b      	ldr	r3, [r3, #16]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d101      	bne.n	8018c6e <pifHmc5883_Init+0x5a>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	e07e      	b.n	8018d6c <pifHmc5883_Init+0x158>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	691b      	ldr	r3, [r3, #16]
 8018c72:	221e      	movs	r2, #30
 8018c74:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	6918      	ldr	r0, [r3, #16]
 8018c7a:	f107 0214 	add.w	r2, r7, #20
 8018c7e:	2303      	movs	r3, #3
 8018c80:	210a      	movs	r1, #10
 8018c82:	f7f9 fb85 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 8018c86:	4603      	mov	r3, r0
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d068      	beq.n	8018d5e <pifHmc5883_Init+0x14a>
	if (data[0] != 'H') {
 8018c8c:	7d3b      	ldrb	r3, [r7, #20]
 8018c8e:	2b48      	cmp	r3, #72	; 0x48
 8018c90:	d003      	beq.n	8018c9a <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 8018c92:	4b39      	ldr	r3, [pc, #228]	; (8018d78 <pifHmc5883_Init+0x164>)
 8018c94:	2211      	movs	r2, #17
 8018c96:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018c98:	e064      	b.n	8018d64 <pifHmc5883_Init+0x150>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 8018c9a:	7d3b      	ldrb	r3, [r7, #20]
 8018c9c:	2b1f      	cmp	r3, #31
 8018c9e:	d905      	bls.n	8018cac <pifHmc5883_Init+0x98>
 8018ca0:	7d7b      	ldrb	r3, [r7, #21]
 8018ca2:	2b1f      	cmp	r3, #31
 8018ca4:	d902      	bls.n	8018cac <pifHmc5883_Init+0x98>
 8018ca6:	7dbb      	ldrb	r3, [r7, #22]
 8018ca8:	2b1f      	cmp	r3, #31
 8018caa:	d80e      	bhi.n	8018cca <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 8018cac:	7d3b      	ldrb	r3, [r7, #20]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	7d7b      	ldrb	r3, [r7, #21]
 8018cb2:	7dba      	ldrb	r2, [r7, #22]
 8018cb4:	4611      	mov	r1, r2
 8018cb6:	f107 0218 	add.w	r2, r7, #24
 8018cba:	9101      	str	r1, [sp, #4]
 8018cbc:	9300      	str	r3, [sp, #0]
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	492e      	ldr	r1, [pc, #184]	; (8018d7c <pifHmc5883_Init+0x168>)
 8018cc2:	2002      	movs	r0, #2
 8018cc4:	f7fa fc1c 	bl	8013500 <pifLog_Printf>
 8018cc8:	e00d      	b.n	8018ce6 <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 8018cca:	7d3b      	ldrb	r3, [r7, #20]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	7d7b      	ldrb	r3, [r7, #21]
 8018cd0:	7dba      	ldrb	r2, [r7, #22]
 8018cd2:	4611      	mov	r1, r2
 8018cd4:	f107 0218 	add.w	r2, r7, #24
 8018cd8:	9101      	str	r1, [sp, #4]
 8018cda:	9300      	str	r3, [sp, #0]
 8018cdc:	4603      	mov	r3, r0
 8018cde:	4928      	ldr	r1, [pc, #160]	; (8018d80 <pifHmc5883_Init+0x16c>)
 8018ce0:	2002      	movs	r0, #2
 8018ce2:	f7fa fc0d 	bl	8013500 <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	6918      	ldr	r0, [r3, #16]
 8018cea:	f107 0314 	add.w	r3, r7, #20
 8018cee:	f240 5203 	movw	r2, #1283	; 0x503
 8018cf2:	2101      	movs	r1, #1
 8018cf4:	f7f9 fb61 	bl	80123ba <pifI2cDevice_ReadRegBit8>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d031      	beq.n	8018d62 <pifHmc5883_Init+0x14e>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data[0]);
 8018cfe:	7d3b      	ldrb	r3, [r7, #20]
 8018d00:	4619      	mov	r1, r3
 8018d02:	6838      	ldr	r0, [r7, #0]
 8018d04:	f7ff ff3c 	bl	8018b80 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018d08:	897b      	ldrh	r3, [r7, #10]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d106      	bne.n	8018d1c <pifHmc5883_Init+0x108>
 8018d0e:	4b1d      	ldr	r3, [pc, #116]	; (8018d84 <pifHmc5883_Init+0x170>)
 8018d10:	881b      	ldrh	r3, [r3, #0]
 8018d12:	1c5a      	adds	r2, r3, #1
 8018d14:	b291      	uxth	r1, r2
 8018d16:	4a1b      	ldr	r2, [pc, #108]	; (8018d84 <pifHmc5883_Init+0x170>)
 8018d18:	8011      	strh	r1, [r2, #0]
 8018d1a:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	897a      	ldrh	r2, [r7, #10]
 8018d20:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018d28:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018d30:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018d38:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	683a      	ldr	r2, [r7, #0]
 8018d3e:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	781b      	ldrb	r3, [r3, #0]
 8018d44:	f043 0304 	orr.w	r3, r3, #4
 8018d48:	b2da      	uxtb	r2, r3
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	4a0d      	ldr	r2, [pc, #52]	; (8018d88 <pifHmc5883_Init+0x174>)
 8018d52:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	68fa      	ldr	r2, [r7, #12]
 8018d58:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	e006      	b.n	8018d6c <pifHmc5883_Init+0x158>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8018d5e:	bf00      	nop
 8018d60:	e000      	b.n	8018d64 <pifHmc5883_Init+0x150>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8018d62:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8018d64:	68f8      	ldr	r0, [r7, #12]
 8018d66:	f000 f811 	bl	8018d8c <pifHmc5883_Clear>
	return FALSE;
 8018d6a:	2300      	movs	r3, #0
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	372c      	adds	r7, #44	; 0x2c
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd90      	pop	{r4, r7, pc}
 8018d74:	080276c4 	.word	0x080276c4
 8018d78:	20001bb5 	.word	0x20001bb5
 8018d7c:	080276a4 	.word	0x080276a4
 8018d80:	080276b8 	.word	0x080276b8
 8018d84:	20000128 	.word	0x20000128
 8018d88:	08018dfb 	.word	0x08018dfb

08018d8c <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b082      	sub	sp, #8
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	691b      	ldr	r3, [r3, #16]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d00b      	beq.n	8018db4 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	691b      	ldr	r3, [r3, #16]
 8018da0:	685a      	ldr	r2, [r3, #4]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	691b      	ldr	r3, [r3, #16]
 8018da6:	4619      	mov	r1, r3
 8018da8:	4610      	mov	r0, r2
 8018daa:	f7f9 f9f9 	bl	80121a0 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2200      	movs	r2, #0
 8018db2:	611a      	str	r2, [r3, #16]
	}
}
 8018db4:	bf00      	nop
 8018db6:	3708      	adds	r7, #8
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bd80      	pop	{r7, pc}

08018dbc <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b082      	sub	sp, #8
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6918      	ldr	r0, [r3, #16]
 8018dcc:	78fb      	ldrb	r3, [r7, #3]
 8018dce:	f240 5203 	movw	r2, #1283	; 0x503
 8018dd2:	2101      	movs	r1, #1
 8018dd4:	f7f9 fbe8 	bl	80125a8 <pifI2cDevice_WriteRegBit8>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d101      	bne.n	8018de2 <pifHmc5883_SetGain+0x26>
 8018dde:	2300      	movs	r3, #0
 8018de0:	e007      	b.n	8018df2 <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	695b      	ldr	r3, [r3, #20]
 8018de6:	78fa      	ldrb	r2, [r7, #3]
 8018de8:	4611      	mov	r1, r2
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7ff fec8 	bl	8018b80 <_changeGain>
    return TRUE;
 8018df0:	2301      	movs	r3, #1
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3708      	adds	r7, #8
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}

08018dfa <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 8018dfa:	b580      	push	{r7, lr}
 8018dfc:	b084      	sub	sp, #16
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	6078      	str	r0, [r7, #4]
 8018e02:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	691b      	ldr	r3, [r3, #16]
 8018e08:	f107 0208 	add.w	r2, r7, #8
 8018e0c:	2109      	movs	r1, #9
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7f9 fa86 	bl	8012320 <pifI2cDevice_ReadRegByte>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d101      	bne.n	8018e1e <pifHmc5883_ReadMag+0x24>
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	e061      	b.n	8018ee2 <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 8018e1e:	7a3b      	ldrb	r3, [r7, #8]
 8018e20:	f003 0301 	and.w	r3, r3, #1
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d101      	bne.n	8018e2c <pifHmc5883_ReadMag+0x32>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	e05a      	b.n	8018ee2 <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	6918      	ldr	r0, [r3, #16]
 8018e30:	f107 0208 	add.w	r2, r7, #8
 8018e34:	2306      	movs	r3, #6
 8018e36:	2103      	movs	r1, #3
 8018e38:	f7f9 faaa 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d101      	bne.n	8018e46 <pifHmc5883_ReadMag+0x4c>
 8018e42:	2300      	movs	r3, #0
 8018e44:	e04d      	b.n	8018ee2 <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 8018e46:	7a3b      	ldrb	r3, [r7, #8]
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	021b      	lsls	r3, r3, #8
 8018e4c:	b29a      	uxth	r2, r3
 8018e4e:	7a7b      	ldrb	r3, [r7, #9]
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	4413      	add	r3, r2
 8018e54:	b29b      	uxth	r3, r3
 8018e56:	b21b      	sxth	r3, r3
 8018e58:	ee07 3a90 	vmov	s15, r3
 8018e5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	edd3 7a00 	vldr	s15, [r3]
 8018e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e6e:	ee17 3a90 	vmov	r3, s15
 8018e72:	b21a      	sxth	r2, r3
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 8018e78:	7abb      	ldrb	r3, [r7, #10]
 8018e7a:	b29b      	uxth	r3, r3
 8018e7c:	021b      	lsls	r3, r3, #8
 8018e7e:	b29a      	uxth	r2, r3
 8018e80:	7afb      	ldrb	r3, [r7, #11]
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	4413      	add	r3, r2
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	b21b      	sxth	r3, r3
 8018e8a:	ee07 3a90 	vmov	s15, r3
 8018e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8018e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	3304      	adds	r3, #4
 8018ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ea4:	ee17 2a90 	vmov	r2, s15
 8018ea8:	b212      	sxth	r2, r2
 8018eaa:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 8018eac:	7b3b      	ldrb	r3, [r7, #12]
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	021b      	lsls	r3, r3, #8
 8018eb2:	b29a      	uxth	r2, r3
 8018eb4:	7b7b      	ldrb	r3, [r7, #13]
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	4413      	add	r3, r2
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	b21b      	sxth	r3, r3
 8018ebe:	ee07 3a90 	vmov	s15, r3
 8018ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	3302      	adds	r3, #2
 8018ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ed8:	ee17 2a90 	vmov	r2, s15
 8018edc:	b212      	sxth	r2, r2
 8018ede:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8018ee0:	2301      	movs	r3, #1
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}

08018eea <_alignBoard2>:

#include <math.h>


static void _alignBoard2(PifImuSensor* p_owner, int16_t *vec)
{
 8018eea:	b580      	push	{r7, lr}
 8018eec:	b084      	sub	sp, #16
 8018eee:	af00      	add	r7, sp, #0
 8018ef0:	6078      	str	r0, [r7, #4]
 8018ef2:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	881b      	ldrh	r3, [r3, #0]
 8018ef8:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	885b      	ldrh	r3, [r3, #2]
 8018efe:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	889b      	ldrh	r3, [r3, #4]
 8018f04:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8018f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f10:	ee07 3a90 	vmov	s15, r3
 8018f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8018f22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018f26:	ee07 3a90 	vmov	s15, r3
 8018f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8018f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018f40:	ee07 3a90 	vmov	s15, r3
 8018f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f50:	eeb0 0a67 	vmov.f32	s0, s15
 8018f54:	f009 ffe8 	bl	8022f28 <lrintf>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	b21a      	sxth	r2, r3
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f6a:	ee07 3a90 	vmov	s15, r3
 8018f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8018f7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018f80:	ee07 3a90 	vmov	s15, r3
 8018f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8018f96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018f9a:	ee07 3a90 	vmov	s15, r3
 8018f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018faa:	eeb0 0a67 	vmov.f32	s0, s15
 8018fae:	f009 ffbb 	bl	8022f28 <lrintf>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	3302      	adds	r3, #2
 8018fb8:	b212      	sxth	r2, r2
 8018fba:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8018fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018fc6:	ee07 3a90 	vmov	s15, r3
 8018fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8018fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018fdc:	ee07 3a90 	vmov	s15, r3
 8018fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8018ff2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018ff6:	ee07 3a90 	vmov	s15, r3
 8018ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019006:	eeb0 0a67 	vmov.f32	s0, s15
 801900a:	f009 ff8d 	bl	8022f28 <lrintf>
 801900e:	4602      	mov	r2, r0
 8019010:	683b      	ldr	r3, [r7, #0]
 8019012:	3304      	adds	r3, #4
 8019014:	b212      	sxth	r2, r2
 8019016:	801a      	strh	r2, [r3, #0]
}
 8019018:	bf00      	nop
 801901a:	3710      	adds	r7, #16
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}

08019020 <_alignSensors2>:

static void _alignSensors2(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b084      	sub	sp, #16
 8019024:	af00      	add	r7, sp, #0
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	60b9      	str	r1, [r7, #8]
 801902a:	607a      	str	r2, [r7, #4]
 801902c:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 801902e:	78fb      	ldrb	r3, [r7, #3]
 8019030:	3b02      	subs	r3, #2
 8019032:	2b06      	cmp	r3, #6
 8019034:	f200 80c8 	bhi.w	80191c8 <_alignSensors2+0x1a8>
 8019038:	a201      	add	r2, pc, #4	; (adr r2, 8019040 <_alignSensors2+0x20>)
 801903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801903e:	bf00      	nop
 8019040:	0801905d 	.word	0x0801905d
 8019044:	08019089 	.word	0x08019089
 8019048:	080190bf 	.word	0x080190bf
 801904c:	080190ed 	.word	0x080190ed
 8019050:	08019123 	.word	0x08019123
 8019054:	08019151 	.word	0x08019151
 8019058:	08019189 	.word	0x08019189
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	f9b3 3000 	ldrsh.w	r3, [r3]
 801906c:	b29b      	uxth	r3, r3
 801906e:	425b      	negs	r3, r3
 8019070:	b29a      	uxth	r2, r3
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	3302      	adds	r3, #2
 8019076:	b212      	sxth	r2, r2
 8019078:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	3304      	adds	r3, #4
 801907e:	68ba      	ldr	r2, [r7, #8]
 8019080:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019084:	801a      	strh	r2, [r3, #0]
            break;
 8019086:	e0b1      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801908e:	b29b      	uxth	r3, r3
 8019090:	425b      	negs	r3, r3
 8019092:	b29b      	uxth	r3, r3
 8019094:	b21a      	sxth	r2, r3
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801909a:	68bb      	ldr	r3, [r7, #8]
 801909c:	3302      	adds	r3, #2
 801909e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190a2:	b29b      	uxth	r3, r3
 80190a4:	425b      	negs	r3, r3
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	3302      	adds	r3, #2
 80190ac:	b212      	sxth	r2, r2
 80190ae:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	3304      	adds	r3, #4
 80190b4:	68ba      	ldr	r2, [r7, #8]
 80190b6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80190ba:	801a      	strh	r2, [r3, #0]
            break;
 80190bc:	e096      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	3302      	adds	r3, #2
 80190c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	425b      	negs	r3, r3
 80190ca:	b29b      	uxth	r3, r3
 80190cc:	b21a      	sxth	r2, r3
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	3302      	adds	r3, #2
 80190d6:	68ba      	ldr	r2, [r7, #8]
 80190d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80190dc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	3304      	adds	r3, #4
 80190e2:	68ba      	ldr	r2, [r7, #8]
 80190e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80190e8:	801a      	strh	r2, [r3, #0]
            break;
 80190ea:	e07f      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	425b      	negs	r3, r3
 80190f6:	b29b      	uxth	r3, r3
 80190f8:	b21a      	sxth	r2, r3
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	3302      	adds	r3, #2
 8019102:	68ba      	ldr	r2, [r7, #8]
 8019104:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019108:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801910a:	68bb      	ldr	r3, [r7, #8]
 801910c:	3304      	adds	r3, #4
 801910e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019112:	b29b      	uxth	r3, r3
 8019114:	425b      	negs	r3, r3
 8019116:	b29a      	uxth	r2, r3
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	3304      	adds	r3, #4
 801911c:	b212      	sxth	r2, r2
 801911e:	801a      	strh	r2, [r3, #0]
            break;
 8019120:	e064      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 8019122:	68bb      	ldr	r3, [r7, #8]
 8019124:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	3302      	adds	r3, #2
 8019130:	68ba      	ldr	r2, [r7, #8]
 8019132:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019136:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019138:	68bb      	ldr	r3, [r7, #8]
 801913a:	3304      	adds	r3, #4
 801913c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019140:	b29b      	uxth	r3, r3
 8019142:	425b      	negs	r3, r3
 8019144:	b29a      	uxth	r2, r3
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	3304      	adds	r3, #4
 801914a:	b212      	sxth	r2, r2
 801914c:	801a      	strh	r2, [r3, #0]
            break;
 801914e:	e04d      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 8019150:	68bb      	ldr	r3, [r7, #8]
 8019152:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	3302      	adds	r3, #2
 801915e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019162:	b29b      	uxth	r3, r3
 8019164:	425b      	negs	r3, r3
 8019166:	b29a      	uxth	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	3302      	adds	r3, #2
 801916c:	b212      	sxth	r2, r2
 801916e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	3304      	adds	r3, #4
 8019174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019178:	b29b      	uxth	r3, r3
 801917a:	425b      	negs	r3, r3
 801917c:	b29a      	uxth	r2, r3
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	3304      	adds	r3, #4
 8019182:	b212      	sxth	r2, r2
 8019184:	801a      	strh	r2, [r3, #0]
            break;
 8019186:	e031      	b.n	80191ec <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	3302      	adds	r3, #2
 801918c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019190:	b29b      	uxth	r3, r3
 8019192:	425b      	negs	r3, r3
 8019194:	b29b      	uxth	r3, r3
 8019196:	b21a      	sxth	r2, r3
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 801919c:	68bb      	ldr	r3, [r7, #8]
 801919e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	425b      	negs	r3, r3
 80191a6:	b29a      	uxth	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	3302      	adds	r3, #2
 80191ac:	b212      	sxth	r2, r2
 80191ae:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80191b0:	68bb      	ldr	r3, [r7, #8]
 80191b2:	3304      	adds	r3, #4
 80191b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	425b      	negs	r3, r3
 80191bc:	b29a      	uxth	r2, r3
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	3304      	adds	r3, #4
 80191c2:	b212      	sxth	r2, r2
 80191c4:	801a      	strh	r2, [r3, #0]
            break;
 80191c6:	e011      	b.n	80191ec <_alignSensors2+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	3302      	adds	r3, #2
 80191d6:	68ba      	ldr	r2, [r7, #8]
 80191d8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80191dc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	3304      	adds	r3, #4
 80191e2:	68ba      	ldr	r2, [r7, #8]
 80191e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80191e8:	801a      	strh	r2, [r3, #0]
            break;
 80191ea:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d003      	beq.n	80191fe <_alignSensors2+0x1de>
        _alignBoard2(p_owner, dest);
 80191f6:	6879      	ldr	r1, [r7, #4]
 80191f8:	68f8      	ldr	r0, [r7, #12]
 80191fa:	f7ff fe76 	bl	8018eea <_alignBoard2>
}
 80191fe:	bf00      	nop
 8019200:	3710      	adds	r7, #16
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop

08019208 <pifImuSensor_Init>:
    if (p_owner->__board_alignment)
        _alignBoard4(p_owner, dest);
}

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b082      	sub	sp, #8
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 8019210:	2278      	movs	r2, #120	; 0x78
 8019212:	2100      	movs	r1, #0
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f009 fb65 	bl	80228e4 <memset>
}
 801921a:	bf00      	nop
 801921c:	3708      	adds	r7, #8
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}
	...

08019224 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b092      	sub	sp, #72	; 0x48
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	4608      	mov	r0, r1
 801922e:	4611      	mov	r1, r2
 8019230:	461a      	mov	r2, r3
 8019232:	4603      	mov	r3, r0
 8019234:	817b      	strh	r3, [r7, #10]
 8019236:	460b      	mov	r3, r1
 8019238:	813b      	strh	r3, [r7, #8]
 801923a:	4613      	mov	r3, r2
 801923c:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801923e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d108      	bne.n	8019258 <pifImuSensor_InitBoardAlignment+0x34>
 8019246:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d104      	bne.n	8019258 <pifImuSensor_InitBoardAlignment+0x34>
 801924e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019252:	2b00      	cmp	r3, #0
 8019254:	f000 80da 	beq.w	801940c <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2201      	movs	r2, #1
 801925c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 8019260:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019264:	ee07 3a90 	vmov	s15, r3
 8019268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801926c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019414 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019270:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019274:	eddf 6a68 	vldr	s13, [pc, #416]	; 8019418 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801927c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 8019280:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019284:	ee07 3a90 	vmov	s15, r3
 8019288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801928c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8019414 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019294:	eddf 6a60 	vldr	s13, [pc, #384]	; 8019418 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801929c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 80192a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80192a4:	ee07 3a90 	vmov	s15, r3
 80192a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192ac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019414 <pifImuSensor_InitBoardAlignment+0x1f0>
 80192b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80192b4:	eddf 6a58 	vldr	s13, [pc, #352]	; 8019418 <pifImuSensor_InitBoardAlignment+0x1f4>
 80192b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80192bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 80192c0:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80192c4:	f009 fdec 	bl	8022ea0 <cosf>
 80192c8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 80192cc:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80192d0:	f009 fe6a 	bl	8022fa8 <sinf>
 80192d4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 80192d8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80192dc:	f009 fde0 	bl	8022ea0 <cosf>
 80192e0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 80192e4:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80192e8:	f009 fe5e 	bl	8022fa8 <sinf>
 80192ec:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 80192f0:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80192f4:	f009 fdd4 	bl	8022ea0 <cosf>
 80192f8:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 80192fc:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019300:	f009 fe52 	bl	8022fa8 <sinf>
 8019304:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8019308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801930c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019314:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8019318:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801931c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019324:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8019328:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801932c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019334:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8019338:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801933c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019344:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8019348:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801934c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019354:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	69fa      	ldr	r2, [r7, #28]
 801935c:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 801935e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019362:	eeb1 7a67 	vneg.f32	s14, s15
 8019366:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801936a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019378:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 801937a:	ed97 7a05 	vldr	s14, [r7, #20]
 801937e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019386:	edd7 7a06 	vldr	s15, [r7, #24]
 801938a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019394:	ed97 7a04 	vldr	s14, [r7, #16]
 8019398:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801939c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80193a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80193a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 80193ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80193b2:	eeb1 7a67 	vneg.f32	s14, s15
 80193b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80193ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 80193c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80193c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80193cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80193d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80193d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 80193de:	ed97 7a06 	vldr	s14, [r7, #24]
 80193e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80193e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80193ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 80193f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80193fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 801940a:	e000      	b.n	801940e <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801940c:	bf00      	nop
}
 801940e:	3748      	adds	r7, #72	; 0x48
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}
 8019414:	40490fdb 	.word	0x40490fdb
 8019418:	43340000 	.word	0x43340000

0801941c <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801941c:	b480      	push	{r7}
 801941e:	b083      	sub	sp, #12
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
 8019424:	460b      	mov	r3, r1
 8019426:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019428:	78fb      	ldrb	r3, [r7, #3]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d002      	beq.n	8019434 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	78fa      	ldrb	r2, [r7, #3]
 8019432:	751a      	strb	r2, [r3, #20]
}
 8019434:	bf00      	nop
 8019436:	370c      	adds	r7, #12
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr

08019440 <pifImuSensor_ReadGyro2>:

BOOL pifImuSensor_ReadGyro2(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b084      	sub	sp, #16
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
 8019448:	6039      	str	r1, [r7, #0]
	int16_t gyro[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	f003 0301 	and.w	r3, r3, #1
 8019452:	2b00      	cmp	r3, #0
 8019454:	d016      	beq.n	8019484 <pifImuSensor_ReadGyro2+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	699b      	ldr	r3, [r3, #24]
 801945a:	687a      	ldr	r2, [r7, #4]
 801945c:	69d2      	ldr	r2, [r2, #28]
 801945e:	f107 0108 	add.w	r1, r7, #8
 8019462:	4610      	mov	r0, r2
 8019464:	4798      	blx	r3
 8019466:	4603      	mov	r3, r0
 8019468:	2b00      	cmp	r3, #0
 801946a:	d101      	bne.n	8019470 <pifImuSensor_ReadGyro2+0x30>
 801946c:	2300      	movs	r3, #0
 801946e:	e00a      	b.n	8019486 <pifImuSensor_ReadGyro2+0x46>

		_alignSensors2(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	7d1b      	ldrb	r3, [r3, #20]
 8019474:	f107 0108 	add.w	r1, r7, #8
 8019478:	683a      	ldr	r2, [r7, #0]
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7ff fdd0 	bl	8019020 <_alignSensors2>
		return TRUE;
 8019480:	2301      	movs	r3, #1
 8019482:	e000      	b.n	8019486 <pifImuSensor_ReadGyro2+0x46>
	}
	return FALSE;
 8019484:	2300      	movs	r3, #0
}
 8019486:	4618      	mov	r0, r3
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}

0801948e <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801948e:	b480      	push	{r7}
 8019490:	b083      	sub	sp, #12
 8019492:	af00      	add	r7, sp, #0
 8019494:	6078      	str	r0, [r7, #4]
 8019496:	460b      	mov	r3, r1
 8019498:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801949a:	78fb      	ldrb	r3, [r7, #3]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d003      	beq.n	80194a8 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	78fa      	ldrb	r2, [r7, #3]
 80194a4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80194a8:	bf00      	nop
 80194aa:	370c      	adds	r7, #12
 80194ac:	46bd      	mov	sp, r7
 80194ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b2:	4770      	bx	lr

080194b4 <pifImuSensor_ReadAccel2>:

BOOL pifImuSensor_ReadAccel2(PifImuSensor* p_owner, int16_t* p_accel)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b084      	sub	sp, #16
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
 80194bc:	6039      	str	r1, [r7, #0]
	int16_t accel[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	781b      	ldrb	r3, [r3, #0]
 80194c2:	f003 0302 	and.w	r3, r3, #2
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d017      	beq.n	80194fa <pifImuSensor_ReadAccel2+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80194d2:	f107 0108 	add.w	r1, r7, #8
 80194d6:	4610      	mov	r0, r2
 80194d8:	4798      	blx	r3
 80194da:	4603      	mov	r3, r0
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d101      	bne.n	80194e4 <pifImuSensor_ReadAccel2+0x30>
 80194e0:	2300      	movs	r3, #0
 80194e2:	e00b      	b.n	80194fc <pifImuSensor_ReadAccel2+0x48>

		_alignSensors2(p_owner, accel, p_accel, p_owner->__accel_info.align);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80194ea:	f107 0108 	add.w	r1, r7, #8
 80194ee:	683a      	ldr	r2, [r7, #0]
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7ff fd95 	bl	8019020 <_alignSensors2>
		return TRUE;
 80194f6:	2301      	movs	r3, #1
 80194f8:	e000      	b.n	80194fc <pifImuSensor_ReadAccel2+0x48>
	}
	return FALSE;
 80194fa:	2300      	movs	r3, #0
}
 80194fc:	4618      	mov	r0, r3
 80194fe:	3710      	adds	r7, #16
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}

08019504 <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019504:	b480      	push	{r7}
 8019506:	b083      	sub	sp, #12
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
 801950c:	460b      	mov	r3, r1
 801950e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019510:	78fb      	ldrb	r3, [r7, #3]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d003      	beq.n	801951e <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	78fa      	ldrb	r2, [r7, #3]
 801951a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 801951e:	bf00      	nop
 8019520:	370c      	adds	r7, #12
 8019522:	46bd      	mov	sp, r7
 8019524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019528:	4770      	bx	lr

0801952a <pifImuSensor_ReadMag2>:

BOOL pifImuSensor_ReadMag2(PifImuSensor* p_owner, int16_t* p_mag)
{
 801952a:	b580      	push	{r7, lr}
 801952c:	b084      	sub	sp, #16
 801952e:	af00      	add	r7, sp, #0
 8019530:	6078      	str	r0, [r7, #4]
 8019532:	6039      	str	r1, [r7, #0]
	int16_t mag[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	781b      	ldrb	r3, [r3, #0]
 8019538:	f003 0304 	and.w	r3, r3, #4
 801953c:	2b00      	cmp	r3, #0
 801953e:	d017      	beq.n	8019570 <pifImuSensor_ReadMag2+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019544:	687a      	ldr	r2, [r7, #4]
 8019546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019548:	f107 0108 	add.w	r1, r7, #8
 801954c:	4610      	mov	r0, r2
 801954e:	4798      	blx	r3
 8019550:	4603      	mov	r3, r0
 8019552:	2b00      	cmp	r3, #0
 8019554:	d101      	bne.n	801955a <pifImuSensor_ReadMag2+0x30>
 8019556:	2300      	movs	r3, #0
 8019558:	e00b      	b.n	8019572 <pifImuSensor_ReadMag2+0x48>

		_alignSensors2(p_owner, mag, p_mag, p_owner->__mag_info.align);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019560:	f107 0108 	add.w	r1, r7, #8
 8019564:	683a      	ldr	r2, [r7, #0]
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	f7ff fd5a 	bl	8019020 <_alignSensors2>
		return TRUE;
 801956c:	2301      	movs	r3, #1
 801956e:	e000      	b.n	8019572 <pifImuSensor_ReadMag2+0x48>
	}
	return FALSE;
 8019570:	2300      	movs	r3, #0
}
 8019572:	4618      	mov	r0, r3
 8019574:	3710      	adds	r7, #16
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	0000      	movs	r0, r0
 801957c:	0000      	movs	r0, r0
	...

08019580 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b082      	sub	sp, #8
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
 8019588:	460b      	mov	r3, r1
 801958a:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d101      	bne.n	8019596 <_changeFsSel+0x16>
 8019592:	2300      	movs	r3, #0
 8019594:	e013      	b.n	80195be <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8019596:	78fb      	ldrb	r3, [r7, #3]
 8019598:	2201      	movs	r2, #1
 801959a:	fa02 f303 	lsl.w	r3, r2, r3
 801959e:	4618      	mov	r0, r3
 80195a0:	f7e6 ff74 	bl	800048c <__aeabi_i2d>
 80195a4:	4602      	mov	r2, r0
 80195a6:	460b      	mov	r3, r1
 80195a8:	a107      	add	r1, pc, #28	; (adr r1, 80195c8 <_changeFsSel+0x48>)
 80195aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80195ae:	f7e7 f901 	bl	80007b4 <__aeabi_ddiv>
 80195b2:	4602      	mov	r2, r0
 80195b4:	460b      	mov	r3, r1
 80195b6:	6879      	ldr	r1, [r7, #4]
 80195b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 80195bc:	2301      	movs	r3, #1
}
 80195be:	4618      	mov	r0, r3
 80195c0:	3708      	adds	r7, #8
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	00000000 	.word	0x00000000
 80195cc:	40606000 	.word	0x40606000

080195d0 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 80195d0:	b480      	push	{r7}
 80195d2:	b083      	sub	sp, #12
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	460b      	mov	r3, r1
 80195da:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d101      	bne.n	80195e6 <_changeAfsSel+0x16>
 80195e2:	2300      	movs	r3, #0
 80195e4:	e008      	b.n	80195f8 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 80195e6:	78fb      	ldrb	r3, [r7, #3]
 80195e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80195ec:	fa42 f303 	asr.w	r3, r2, r3
 80195f0:	b29a      	uxth	r2, r3
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	821a      	strh	r2, [r3, #16]
	return TRUE;
 80195f6:	2301      	movs	r3, #1
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	370c      	adds	r7, #12
 80195fc:	46bd      	mov	sp, r7
 80195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019602:	4770      	bx	lr

08019604 <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8019604:	b590      	push	{r4, r7, lr}
 8019606:	b08b      	sub	sp, #44	; 0x2c
 8019608:	af00      	add	r7, sp, #0
 801960a:	60f8      	str	r0, [r7, #12]
 801960c:	607a      	str	r2, [r7, #4]
 801960e:	461a      	mov	r2, r3
 8019610:	460b      	mov	r3, r1
 8019612:	817b      	strh	r3, [r7, #10]
 8019614:	4613      	mov	r3, r2
 8019616:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8019618:	4b75      	ldr	r3, [pc, #468]	; (80197f0 <pifMpu60x0_Init+0x1ec>)
 801961a:	f107 0418 	add.w	r4, r7, #24
 801961e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d005      	beq.n	8019636 <pifMpu60x0_Init+0x32>
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d002      	beq.n	8019636 <pifMpu60x0_Init+0x32>
 8019630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019632:	2b00      	cmp	r3, #0
 8019634:	d104      	bne.n	8019640 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 8019636:	4b6f      	ldr	r3, [pc, #444]	; (80197f4 <pifMpu60x0_Init+0x1f0>)
 8019638:	2201      	movs	r2, #1
 801963a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801963c:	2300      	movs	r3, #0
 801963e:	e0d3      	b.n	80197e8 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8019640:	2210      	movs	r2, #16
 8019642:	2100      	movs	r1, #0
 8019644:	68f8      	ldr	r0, [r7, #12]
 8019646:	f009 f94d 	bl	80228e4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f7f8 fd84 	bl	8012158 <pifI2cPort_AddDevice>
 8019650:	4602      	mov	r2, r0
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	689b      	ldr	r3, [r3, #8]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d101      	bne.n	8019662 <pifMpu60x0_Init+0x5e>
 801965e:	2300      	movs	r3, #0
 8019660:	e0c2      	b.n	80197e8 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	689b      	ldr	r3, [r3, #8]
 8019666:	7a7a      	ldrb	r2, [r7, #9]
 8019668:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	689b      	ldr	r3, [r3, #8]
 801966e:	f107 0217 	add.w	r2, r7, #23
 8019672:	2175      	movs	r1, #117	; 0x75
 8019674:	4618      	mov	r0, r3
 8019676:	f7f8 fe53 	bl	8012320 <pifI2cDevice_ReadRegByte>
 801967a:	4603      	mov	r3, r0
 801967c:	2b00      	cmp	r3, #0
 801967e:	f000 80a4 	beq.w	80197ca <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 8019682:	7dfb      	ldrb	r3, [r7, #23]
 8019684:	7a7a      	ldrb	r2, [r7, #9]
 8019686:	429a      	cmp	r2, r3
 8019688:	d003      	beq.n	8019692 <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 801968a:	4b5a      	ldr	r3, [pc, #360]	; (80197f4 <pifMpu60x0_Init+0x1f0>)
 801968c:	2211      	movs	r2, #17
 801968e:	701a      	strb	r2, [r3, #0]
		goto fail;
 8019690:	e0a6      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 8019692:	7dfb      	ldrb	r3, [r7, #23]
 8019694:	2b1f      	cmp	r3, #31
 8019696:	d809      	bhi.n	80196ac <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 8019698:	7dfb      	ldrb	r3, [r7, #23]
 801969a:	085b      	lsrs	r3, r3, #1
 801969c:	b2db      	uxtb	r3, r3
 801969e:	f107 0218 	add.w	r2, r7, #24
 80196a2:	4955      	ldr	r1, [pc, #340]	; (80197f8 <pifMpu60x0_Init+0x1f4>)
 80196a4:	2002      	movs	r0, #2
 80196a6:	f7f9 ff2b 	bl	8013500 <pifLog_Printf>
 80196aa:	e008      	b.n	80196be <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 80196ac:	7dfb      	ldrb	r3, [r7, #23]
 80196ae:	085b      	lsrs	r3, r3, #1
 80196b0:	b2db      	uxtb	r3, r3
 80196b2:	f107 0218 	add.w	r2, r7, #24
 80196b6:	4951      	ldr	r1, [pc, #324]	; (80197fc <pifMpu60x0_Init+0x1f8>)
 80196b8:	2002      	movs	r0, #2
 80196ba:	f7f9 ff21 	bl	8013500 <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 80196be:	2300      	movs	r3, #0
 80196c0:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 80196c2:	7d3b      	ldrb	r3, [r7, #20]
 80196c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196c8:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	689b      	ldr	r3, [r3, #8]
 80196ce:	7d3a      	ldrb	r2, [r7, #20]
 80196d0:	216b      	movs	r1, #107	; 0x6b
 80196d2:	4618      	mov	r0, r3
 80196d4:	f7f8 ff52 	bl	801257c <pifI2cDevice_WriteRegByte>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d077      	beq.n	80197ce <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 80196de:	2064      	movs	r0, #100	; 0x64
 80196e0:	f7fb fb58 	bl	8014d94 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	6898      	ldr	r0, [r3, #8]
 80196e8:	f107 0317 	add.w	r3, r7, #23
 80196ec:	f240 3202 	movw	r2, #770	; 0x302
 80196f0:	211b      	movs	r1, #27
 80196f2:	f7f8 fe62 	bl	80123ba <pifI2cDevice_ReadRegBit8>
 80196f6:	4603      	mov	r3, r0
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d06a      	beq.n	80197d2 <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 80196fc:	7dfb      	ldrb	r3, [r7, #23]
 80196fe:	4619      	mov	r1, r3
 8019700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019702:	f7ff ff3d 	bl	8019580 <_changeFsSel>
 8019706:	4603      	mov	r3, r0
 8019708:	2b00      	cmp	r3, #0
 801970a:	d064      	beq.n	80197d6 <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	6898      	ldr	r0, [r3, #8]
 8019710:	f107 0317 	add.w	r3, r7, #23
 8019714:	f240 3202 	movw	r2, #770	; 0x302
 8019718:	211c      	movs	r1, #28
 801971a:	f7f8 fe4e 	bl	80123ba <pifI2cDevice_ReadRegBit8>
 801971e:	4603      	mov	r3, r0
 8019720:	2b00      	cmp	r3, #0
 8019722:	d05a      	beq.n	80197da <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8019724:	7dfb      	ldrb	r3, [r7, #23]
 8019726:	4619      	mov	r1, r3
 8019728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801972a:	f7ff ff51 	bl	80195d0 <_changeAfsSel>
 801972e:	4603      	mov	r3, r0
 8019730:	2b00      	cmp	r3, #0
 8019732:	d054      	beq.n	80197de <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019734:	897b      	ldrh	r3, [r7, #10]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d106      	bne.n	8019748 <pifMpu60x0_Init+0x144>
 801973a:	4b31      	ldr	r3, [pc, #196]	; (8019800 <pifMpu60x0_Init+0x1fc>)
 801973c:	881b      	ldrh	r3, [r3, #0]
 801973e:	1c5a      	adds	r2, r3, #1
 8019740:	b291      	uxth	r1, r2
 8019742:	4a2f      	ldr	r2, [pc, #188]	; (8019800 <pifMpu60x0_Init+0x1fc>)
 8019744:	8011      	strh	r1, [r2, #0]
 8019746:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	897a      	ldrh	r2, [r7, #10]
 801974c:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	2201      	movs	r2, #1
 8019752:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019758:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 801975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801975c:	781b      	ldrb	r3, [r3, #0]
 801975e:	f043 0303 	orr.w	r3, r3, #3
 8019762:	b2da      	uxtb	r2, r3
 8019764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019766:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 8019768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976a:	2201      	movs	r2, #1
 801976c:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 801976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019770:	4a24      	ldr	r2, [pc, #144]	; (8019804 <pifMpu60x0_Init+0x200>)
 8019772:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 8019774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019776:	68fa      	ldr	r2, [r7, #12]
 8019778:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 801977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977c:	2201      	movs	r2, #1
 801977e:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8019782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019784:	4a20      	ldr	r2, [pc, #128]	; (8019808 <pifMpu60x0_Init+0x204>)
 8019786:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8019788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801978a:	68fa      	ldr	r2, [r7, #12]
 801978c:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019790:	2200      	movs	r2, #0
 8019792:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8019794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019796:	2200      	movs	r2, #0
 8019798:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 801979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801979c:	2200      	movs	r2, #0
 801979e:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 80197a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a2:	2200      	movs	r2, #0
 80197a4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 80197a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197aa:	2200      	movs	r2, #0
 80197ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 80197ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197b0:	2200      	movs	r2, #0
 80197b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 80197b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197b8:	2200      	movs	r2, #0
 80197ba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 80197be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197c0:	f04f 0200 	mov.w	r2, #0
 80197c4:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 80197c6:	2301      	movs	r3, #1
 80197c8:	e00e      	b.n	80197e8 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 80197ca:	bf00      	nop
 80197cc:	e008      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80197ce:	bf00      	nop
 80197d0:	e006      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 80197d2:	bf00      	nop
 80197d4:	e004      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 80197d6:	bf00      	nop
 80197d8:	e002      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 80197da:	bf00      	nop
 80197dc:	e000      	b.n	80197e0 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 80197de:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 80197e0:	68f8      	ldr	r0, [r7, #12]
 80197e2:	f000 f813 	bl	801980c <pifMpu60x0_Clear>
	return FALSE;
 80197e6:	2300      	movs	r3, #0
}
 80197e8:	4618      	mov	r0, r3
 80197ea:	372c      	adds	r7, #44	; 0x2c
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd90      	pop	{r4, r7, pc}
 80197f0:	080276e4 	.word	0x080276e4
 80197f4:	20001bb5 	.word	0x20001bb5
 80197f8:	080276d4 	.word	0x080276d4
 80197fc:	080276dc 	.word	0x080276dc
 8019800:	20000128 	.word	0x20000128
 8019804:	080198bd 	.word	0x080198bd
 8019808:	08019983 	.word	0x08019983

0801980c <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b082      	sub	sp, #8
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	689b      	ldr	r3, [r3, #8]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d00b      	beq.n	8019834 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	689b      	ldr	r3, [r3, #8]
 8019820:	685a      	ldr	r2, [r3, #4]
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	689b      	ldr	r3, [r3, #8]
 8019826:	4619      	mov	r1, r3
 8019828:	4610      	mov	r0, r2
 801982a:	f7f8 fcb9 	bl	80121a0 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	2200      	movs	r2, #0
 8019832:	609a      	str	r2, [r3, #8]
    }
}
 8019834:	bf00      	nop
 8019836:	3708      	adds	r7, #8
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
 8019844:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	689b      	ldr	r3, [r3, #8]
 801984a:	783a      	ldrb	r2, [r7, #0]
 801984c:	211b      	movs	r1, #27
 801984e:	4618      	mov	r0, r3
 8019850:	f7f8 fe94 	bl	801257c <pifI2cDevice_WriteRegByte>
 8019854:	4603      	mov	r3, r0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d101      	bne.n	801985e <pifMpu60x0_SetGyroConfig+0x22>
 801985a:	2300      	movs	r3, #0
 801985c:	e00a      	b.n	8019874 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	68da      	ldr	r2, [r3, #12]
 8019862:	783b      	ldrb	r3, [r7, #0]
 8019864:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8019868:	b2db      	uxtb	r3, r3
 801986a:	4619      	mov	r1, r3
 801986c:	4610      	mov	r0, r2
 801986e:	f7ff fe87 	bl	8019580 <_changeFsSel>
	return TRUE;
 8019872:	2301      	movs	r3, #1
}
 8019874:	4618      	mov	r0, r3
 8019876:	3708      	adds	r7, #8
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	689b      	ldr	r3, [r3, #8]
 801988a:	783a      	ldrb	r2, [r7, #0]
 801988c:	211c      	movs	r1, #28
 801988e:	4618      	mov	r0, r3
 8019890:	f7f8 fe74 	bl	801257c <pifI2cDevice_WriteRegByte>
 8019894:	4603      	mov	r3, r0
 8019896:	2b00      	cmp	r3, #0
 8019898:	d101      	bne.n	801989e <pifMpu60x0_SetAccelConfig+0x22>
 801989a:	2300      	movs	r3, #0
 801989c:	e00a      	b.n	80198b4 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	68da      	ldr	r2, [r3, #12]
 80198a2:	783b      	ldrb	r3, [r7, #0]
 80198a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80198a8:	b2db      	uxtb	r3, r3
 80198aa:	4619      	mov	r1, r3
 80198ac:	4610      	mov	r0, r2
 80198ae:	f7ff fe8f 	bl	80195d0 <_changeAfsSel>
	return TRUE;
 80198b2:	2301      	movs	r3, #1
}
 80198b4:	4618      	mov	r0, r3
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}

080198bc <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b084      	sub	sp, #16
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
 80198c4:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6898      	ldr	r0, [r3, #8]
 80198ca:	f107 0208 	add.w	r2, r7, #8
 80198ce:	2306      	movs	r3, #6
 80198d0:	2143      	movs	r1, #67	; 0x43
 80198d2:	f7f8 fd5d 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 80198d6:	4603      	mov	r3, r0
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d101      	bne.n	80198e0 <pifMpu60x0_ReadGyro+0x24>
 80198dc:	2300      	movs	r3, #0
 80198de:	e04c      	b.n	801997a <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 80198e0:	7a3b      	ldrb	r3, [r7, #8]
 80198e2:	b29b      	uxth	r3, r3
 80198e4:	021b      	lsls	r3, r3, #8
 80198e6:	b29a      	uxth	r2, r3
 80198e8:	7a7b      	ldrb	r3, [r7, #9]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4413      	add	r3, r2
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	b21a      	sxth	r2, r3
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 80198f6:	7abb      	ldrb	r3, [r7, #10]
 80198f8:	b29b      	uxth	r3, r3
 80198fa:	021b      	lsls	r3, r3, #8
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	7afb      	ldrb	r3, [r7, #11]
 8019900:	b29b      	uxth	r3, r3
 8019902:	4413      	add	r3, r2
 8019904:	b29a      	uxth	r2, r3
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	3302      	adds	r3, #2
 801990a:	b212      	sxth	r2, r2
 801990c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801990e:	7b3b      	ldrb	r3, [r7, #12]
 8019910:	b29b      	uxth	r3, r3
 8019912:	021b      	lsls	r3, r3, #8
 8019914:	b29a      	uxth	r2, r3
 8019916:	7b7b      	ldrb	r3, [r7, #13]
 8019918:	b29b      	uxth	r3, r3
 801991a:	4413      	add	r3, r2
 801991c:	b29a      	uxth	r2, r3
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	3304      	adds	r3, #4
 8019922:	b212      	sxth	r2, r2
 8019924:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	781b      	ldrb	r3, [r3, #0]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d024      	beq.n	8019978 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019934:	461a      	mov	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	781b      	ldrb	r3, [r3, #0]
 801993a:	fb92 f3f3 	sdiv	r3, r2, r3
 801993e:	b21a      	sxth	r2, r3
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	3302      	adds	r3, #2
 8019948:	f9b3 3000 	ldrsh.w	r3, [r3]
 801994c:	461a      	mov	r2, r3
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	fb92 f2f3 	sdiv	r2, r2, r3
 8019956:	683b      	ldr	r3, [r7, #0]
 8019958:	3302      	adds	r3, #2
 801995a:	b212      	sxth	r2, r2
 801995c:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	3304      	adds	r3, #4
 8019962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019966:	461a      	mov	r2, r3
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	fb92 f2f3 	sdiv	r2, r2, r3
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	3304      	adds	r3, #4
 8019974:	b212      	sxth	r2, r2
 8019976:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8019978:	2301      	movs	r3, #1
}
 801997a:	4618      	mov	r0, r3
 801997c:	3710      	adds	r7, #16
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}

08019982 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 8019982:	b580      	push	{r7, lr}
 8019984:	b084      	sub	sp, #16
 8019986:	af00      	add	r7, sp, #0
 8019988:	6078      	str	r0, [r7, #4]
 801998a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	6898      	ldr	r0, [r3, #8]
 8019990:	f107 0208 	add.w	r2, r7, #8
 8019994:	2306      	movs	r3, #6
 8019996:	213b      	movs	r1, #59	; 0x3b
 8019998:	f7f8 fcfa 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 801999c:	4603      	mov	r3, r0
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d101      	bne.n	80199a6 <pifMpu60x0_ReadAccel+0x24>
 80199a2:	2300      	movs	r3, #0
 80199a4:	e04c      	b.n	8019a40 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 80199a6:	7a3b      	ldrb	r3, [r7, #8]
 80199a8:	b29b      	uxth	r3, r3
 80199aa:	021b      	lsls	r3, r3, #8
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	7a7b      	ldrb	r3, [r7, #9]
 80199b0:	b29b      	uxth	r3, r3
 80199b2:	4413      	add	r3, r2
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	b21a      	sxth	r2, r3
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 80199bc:	7abb      	ldrb	r3, [r7, #10]
 80199be:	b29b      	uxth	r3, r3
 80199c0:	021b      	lsls	r3, r3, #8
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	7afb      	ldrb	r3, [r7, #11]
 80199c6:	b29b      	uxth	r3, r3
 80199c8:	4413      	add	r3, r2
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	3302      	adds	r3, #2
 80199d0:	b212      	sxth	r2, r2
 80199d2:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 80199d4:	7b3b      	ldrb	r3, [r7, #12]
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	021b      	lsls	r3, r3, #8
 80199da:	b29a      	uxth	r2, r3
 80199dc:	7b7b      	ldrb	r3, [r7, #13]
 80199de:	b29b      	uxth	r3, r3
 80199e0:	4413      	add	r3, r2
 80199e2:	b29a      	uxth	r2, r3
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	3304      	adds	r3, #4
 80199e8:	b212      	sxth	r2, r2
 80199ea:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	785b      	ldrb	r3, [r3, #1]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d024      	beq.n	8019a3e <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199fa:	461a      	mov	r2, r3
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	785b      	ldrb	r3, [r3, #1]
 8019a00:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a04:	b21a      	sxth	r2, r3
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	3302      	adds	r3, #2
 8019a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a12:	461a      	mov	r2, r3
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	785b      	ldrb	r3, [r3, #1]
 8019a18:	fb92 f2f3 	sdiv	r2, r2, r3
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	3302      	adds	r3, #2
 8019a20:	b212      	sxth	r2, r2
 8019a22:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	3304      	adds	r3, #4
 8019a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a2c:	461a      	mov	r2, r3
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	785b      	ldrb	r3, [r3, #1]
 8019a32:	fb92 f2f3 	sdiv	r2, r2, r3
 8019a36:	683b      	ldr	r3, [r7, #0]
 8019a38:	3304      	adds	r3, #4
 8019a3a:	b212      	sxth	r2, r2
 8019a3c:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8019a3e:	2301      	movs	r3, #1
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	3710      	adds	r7, #16
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd80      	pop	{r7, pc}

08019a48 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b087      	sub	sp, #28
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 8019a50:	2300      	movs	r3, #0
 8019a52:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 8019a54:	2301      	movs	r3, #1
 8019a56:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	8adb      	ldrh	r3, [r3, #22]
 8019a5c:	b2db      	uxtb	r3, r3
 8019a5e:	f003 030f 	and.w	r3, r3, #15
 8019a62:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	8adb      	ldrh	r3, [r3, #22]
 8019a68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8019a6c:	b29a      	uxth	r2, r3
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 8019a72:	2300      	movs	r3, #0
 8019a74:	617b      	str	r3, [r7, #20]
 8019a76:	e00b      	b.n	8019a90 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	697a      	ldr	r2, [r7, #20]
 8019a7c:	3204      	adds	r2, #4
 8019a7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d001      	beq.n	8019a8a <_checkPromCrc+0x42>
            zero = 0;
 8019a86:	2300      	movs	r3, #0
 8019a88:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 8019a8a:	697b      	ldr	r3, [r7, #20]
 8019a8c:	3301      	adds	r3, #1
 8019a8e:	617b      	str	r3, [r7, #20]
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	2b07      	cmp	r3, #7
 8019a94:	ddf0      	ble.n	8019a78 <_checkPromCrc+0x30>
    }
    if (zero)
 8019a96:	7afb      	ldrb	r3, [r7, #11]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d001      	beq.n	8019aa0 <_checkPromCrc+0x58>
        return FALSE;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e04b      	b.n	8019b38 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	617b      	str	r3, [r7, #20]
 8019aa4:	e033      	b.n	8019b0e <_checkPromCrc+0xc6>
        if (i & 1)
 8019aa6:	697b      	ldr	r3, [r7, #20]
 8019aa8:	f003 0301 	and.w	r3, r3, #1
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d00a      	beq.n	8019ac6 <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	105a      	asrs	r2, r3, #1
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	3204      	adds	r2, #4
 8019ab8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	68fa      	ldr	r2, [r7, #12]
 8019ac0:	4053      	eors	r3, r2
 8019ac2:	60fb      	str	r3, [r7, #12]
 8019ac4:	e00b      	b.n	8019ade <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	105a      	asrs	r2, r3, #1
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	3204      	adds	r2, #4
 8019ace:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019ad2:	0a1b      	lsrs	r3, r3, #8
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	461a      	mov	r2, r3
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	4053      	eors	r3, r2
 8019adc:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019ade:	2308      	movs	r3, #8
 8019ae0:	613b      	str	r3, [r7, #16]
 8019ae2:	e00e      	b.n	8019b02 <_checkPromCrc+0xba>
            if (res & 0x8000)
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d003      	beq.n	8019af6 <_checkPromCrc+0xae>
                res ^= 0x1800;
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 8019af4:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	005b      	lsls	r3, r3, #1
 8019afa:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019afc:	693b      	ldr	r3, [r7, #16]
 8019afe:	3b01      	subs	r3, #1
 8019b00:	613b      	str	r3, [r7, #16]
 8019b02:	693b      	ldr	r3, [r7, #16]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	dced      	bgt.n	8019ae4 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	617b      	str	r3, [r7, #20]
 8019b0e:	697b      	ldr	r3, [r7, #20]
 8019b10:	2b0f      	cmp	r3, #15
 8019b12:	ddc8      	ble.n	8019aa6 <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	8ada      	ldrh	r2, [r3, #22]
 8019b18:	7abb      	ldrb	r3, [r7, #10]
 8019b1a:	b29b      	uxth	r3, r3
 8019b1c:	4313      	orrs	r3, r2
 8019b1e:	b29a      	uxth	r2, r3
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 8019b24:	7aba      	ldrb	r2, [r7, #10]
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	0b1b      	lsrs	r3, r3, #12
 8019b2a:	f003 030f 	and.w	r3, r3, #15
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d101      	bne.n	8019b36 <_checkPromCrc+0xee>
        return TRUE;
 8019b32:	2301      	movs	r3, #1
 8019b34:	e000      	b.n	8019b38 <_checkPromCrc+0xf0>

    return FALSE;
 8019b36:	2300      	movs	r3, #0
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	371c      	adds	r7, #28
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b42:	4770      	bx	lr

08019b44 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 8019b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019b48:	b0d2      	sub	sp, #328	; 0x148
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8019b50:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8019b54:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 8019b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b62:	8a5b      	ldrh	r3, [r3, #18]
 8019b64:	021b      	lsls	r3, r3, #8
 8019b66:	1ad3      	subs	r3, r2, r3
 8019b68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 8019b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019b70:	17da      	asrs	r2, r3, #31
 8019b72:	469a      	mov	sl, r3
 8019b74:	4693      	mov	fp, r2
 8019b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b7a:	8a9b      	ldrh	r3, [r3, #20]
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	2200      	movs	r2, #0
 8019b80:	4698      	mov	r8, r3
 8019b82:	4691      	mov	r9, r2
 8019b84:	fb08 f20b 	mul.w	r2, r8, fp
 8019b88:	fb0a f309 	mul.w	r3, sl, r9
 8019b8c:	4413      	add	r3, r2
 8019b8e:	fbaa 4508 	umull	r4, r5, sl, r8
 8019b92:	442b      	add	r3, r5
 8019b94:	461d      	mov	r5, r3
 8019b96:	f04f 0200 	mov.w	r2, #0
 8019b9a:	f04f 0300 	mov.w	r3, #0
 8019b9e:	0de2      	lsrs	r2, r4, #23
 8019ba0:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8019ba4:	15eb      	asrs	r3, r5, #23
 8019ba6:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8019baa:	6739      	str	r1, [r7, #112]	; 0x70
 8019bac:	f143 0300 	adc.w	r3, r3, #0
 8019bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8019bb2:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8019bb6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 8019bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019bbe:	899b      	ldrh	r3, [r3, #12]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019bc8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8019bcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	0c1b      	lsrs	r3, r3, #16
 8019bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019bd8:	460b      	mov	r3, r1
 8019bda:	041b      	lsls	r3, r3, #16
 8019bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019be4:	8a1b      	ldrh	r3, [r3, #16]
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	2200      	movs	r2, #0
 8019bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019bee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8019bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019bf6:	17da      	asrs	r2, r3, #31
 8019bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8019c00:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8019c04:	462b      	mov	r3, r5
 8019c06:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8019c0a:	4642      	mov	r2, r8
 8019c0c:	fb02 f203 	mul.w	r2, r2, r3
 8019c10:	464b      	mov	r3, r9
 8019c12:	4621      	mov	r1, r4
 8019c14:	fb01 f303 	mul.w	r3, r1, r3
 8019c18:	4413      	add	r3, r2
 8019c1a:	4622      	mov	r2, r4
 8019c1c:	4641      	mov	r1, r8
 8019c1e:	fba2 1201 	umull	r1, r2, r2, r1
 8019c22:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8019c26:	460a      	mov	r2, r1
 8019c28:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8019c2c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8019c30:	4413      	add	r3, r2
 8019c32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8019c36:	f04f 0200 	mov.w	r2, #0
 8019c3a:	f04f 0300 	mov.w	r3, #0
 8019c3e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8019c42:	4621      	mov	r1, r4
 8019c44:	09ca      	lsrs	r2, r1, #7
 8019c46:	4629      	mov	r1, r5
 8019c48:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	11cb      	asrs	r3, r1, #7
 8019c50:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8019c54:	4621      	mov	r1, r4
 8019c56:	1889      	adds	r1, r1, r2
 8019c58:	66b9      	str	r1, [r7, #104]	; 0x68
 8019c5a:	4629      	mov	r1, r5
 8019c5c:	eb43 0101 	adc.w	r1, r3, r1
 8019c60:	66f9      	str	r1, [r7, #108]	; 0x6c
 8019c62:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8019c66:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 8019c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019c6e:	895b      	ldrh	r3, [r3, #10]
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	2200      	movs	r2, #0
 8019c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8019c7c:	f04f 0000 	mov.w	r0, #0
 8019c80:	f04f 0100 	mov.w	r1, #0
 8019c84:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8019c88:	462b      	mov	r3, r5
 8019c8a:	03d9      	lsls	r1, r3, #15
 8019c8c:	4623      	mov	r3, r4
 8019c8e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8019c92:	4623      	mov	r3, r4
 8019c94:	03d8      	lsls	r0, r3, #15
 8019c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019c9a:	89db      	ldrh	r3, [r3, #14]
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8019ca4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8019ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019cac:	17da      	asrs	r2, r3, #31
 8019cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8019cb2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8019cb6:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8019cba:	464b      	mov	r3, r9
 8019cbc:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 8019cc0:	4652      	mov	r2, sl
 8019cc2:	fb02 f203 	mul.w	r2, r2, r3
 8019cc6:	465b      	mov	r3, fp
 8019cc8:	4644      	mov	r4, r8
 8019cca:	fb04 f303 	mul.w	r3, r4, r3
 8019cce:	4413      	add	r3, r2
 8019cd0:	4642      	mov	r2, r8
 8019cd2:	4654      	mov	r4, sl
 8019cd4:	fba2 4204 	umull	r4, r2, r2, r4
 8019cd8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8019cdc:	4622      	mov	r2, r4
 8019cde:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8019ce2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8019ce6:	4413      	add	r3, r2
 8019ce8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8019cec:	f04f 0200 	mov.w	r2, #0
 8019cf0:	f04f 0300 	mov.w	r3, #0
 8019cf4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8019cf8:	4644      	mov	r4, r8
 8019cfa:	0a22      	lsrs	r2, r4, #8
 8019cfc:	464c      	mov	r4, r9
 8019cfe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8019d02:	464c      	mov	r4, r9
 8019d04:	1223      	asrs	r3, r4, #8
 8019d06:	1884      	adds	r4, r0, r2
 8019d08:	663c      	str	r4, [r7, #96]	; 0x60
 8019d0a:	eb41 0303 	adc.w	r3, r1, r3
 8019d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8019d10:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8019d14:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 8019d18:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019d1c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8019d20:	f173 0300 	sbcs.w	r3, r3, #0
 8019d24:	f280 8150 	bge.w	8019fc8 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 8019d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019d2c:	17da      	asrs	r2, r3, #31
 8019d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019d32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019d3a:	17da      	asrs	r2, r3, #31
 8019d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019d40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8019d44:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8019d48:	462b      	mov	r3, r5
 8019d4a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8019d4e:	4642      	mov	r2, r8
 8019d50:	fb02 f203 	mul.w	r2, r2, r3
 8019d54:	464b      	mov	r3, r9
 8019d56:	4621      	mov	r1, r4
 8019d58:	fb01 f303 	mul.w	r3, r1, r3
 8019d5c:	4413      	add	r3, r2
 8019d5e:	4622      	mov	r2, r4
 8019d60:	4641      	mov	r1, r8
 8019d62:	fba2 1201 	umull	r1, r2, r2, r1
 8019d66:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8019d6a:	460a      	mov	r2, r1
 8019d6c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8019d70:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8019d74:	4413      	add	r3, r2
 8019d76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8019d7a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	da08      	bge.n	8019d94 <_calcurateBarometric+0x250>
 8019d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019d86:	1851      	adds	r1, r2, r1
 8019d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8019d8a:	f143 0300 	adc.w	r3, r3, #0
 8019d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019d94:	f04f 0000 	mov.w	r0, #0
 8019d98:	f04f 0100 	mov.w	r1, #0
 8019d9c:	0fd0      	lsrs	r0, r2, #31
 8019d9e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019da2:	17d9      	asrs	r1, r3, #31
 8019da4:	2300      	movs	r3, #0
 8019da6:	4242      	negs	r2, r0
 8019da8:	653a      	str	r2, [r7, #80]	; 0x50
 8019daa:	eb63 0301 	sbc.w	r3, r3, r1
 8019dae:	657b      	str	r3, [r7, #84]	; 0x54
 8019db0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019db4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019db8:	1814      	adds	r4, r2, r0
 8019dba:	64bc      	str	r4, [r7, #72]	; 0x48
 8019dbc:	414b      	adcs	r3, r1
 8019dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019dc0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8019dc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 8019dc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019dcc:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8019dd0:	6439      	str	r1, [r7, #64]	; 0x40
 8019dd2:	f143 33ff 	adc.w	r3, r3, #4294967295
 8019dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8019dd8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8019ddc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 8019de0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019de4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019de8:	fb03 f102 	mul.w	r1, r3, r2
 8019dec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019df4:	fb02 f303 	mul.w	r3, r2, r3
 8019df8:	18ca      	adds	r2, r1, r3
 8019dfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019dfe:	fba3 1303 	umull	r1, r3, r3, r3
 8019e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019e06:	460b      	mov	r3, r1
 8019e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8019e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019e10:	18d3      	adds	r3, r2, r3
 8019e12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019e16:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8019e1a:	4622      	mov	r2, r4
 8019e1c:	462b      	mov	r3, r5
 8019e1e:	f04f 0000 	mov.w	r0, #0
 8019e22:	f04f 0100 	mov.w	r1, #0
 8019e26:	0099      	lsls	r1, r3, #2
 8019e28:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8019e2c:	0090      	lsls	r0, r2, #2
 8019e2e:	4602      	mov	r2, r0
 8019e30:	460b      	mov	r3, r1
 8019e32:	4621      	mov	r1, r4
 8019e34:	1851      	adds	r1, r2, r1
 8019e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8019e38:	4629      	mov	r1, r5
 8019e3a:	eb43 0101 	adc.w	r1, r3, r1
 8019e3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019e40:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8019e44:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 8019e48:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019e4c:	f04f 0000 	mov.w	r0, #0
 8019e50:	f04f 0100 	mov.w	r1, #0
 8019e54:	0850      	lsrs	r0, r2, #1
 8019e56:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8019e5a:	1059      	asrs	r1, r3, #1
 8019e5c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8019e60:	1a14      	subs	r4, r2, r0
 8019e62:	633c      	str	r4, [r7, #48]	; 0x30
 8019e64:	eb63 0301 	sbc.w	r3, r3, r1
 8019e68:	637b      	str	r3, [r7, #52]	; 0x34
 8019e6a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8019e6e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 8019e72:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019e76:	f04f 0000 	mov.w	r0, #0
 8019e7a:	f04f 0100 	mov.w	r1, #0
 8019e7e:	0890      	lsrs	r0, r2, #2
 8019e80:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8019e84:	1099      	asrs	r1, r3, #2
 8019e86:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8019e8a:	1a14      	subs	r4, r2, r0
 8019e8c:	62bc      	str	r4, [r7, #40]	; 0x28
 8019e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8019e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e94:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8019e98:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 8019e9c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019ea0:	497c      	ldr	r1, [pc, #496]	; (801a094 <_calcurateBarometric+0x550>)
 8019ea2:	428a      	cmp	r2, r1
 8019ea4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8019ea8:	f280 808e 	bge.w	8019fc8 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 8019eac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019eb0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8019eb4:	1851      	adds	r1, r2, r1
 8019eb6:	6239      	str	r1, [r7, #32]
 8019eb8:	f143 0300 	adc.w	r3, r3, #0
 8019ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8019ebe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8019ec2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 8019ec6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019ece:	fb03 f102 	mul.w	r1, r3, r2
 8019ed2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019ed6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019eda:	fb02 f303 	mul.w	r3, r2, r3
 8019ede:	18ca      	adds	r2, r1, r3
 8019ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019ee4:	fba3 1303 	umull	r1, r3, r3, r3
 8019ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019eec:	460b      	mov	r3, r1
 8019eee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8019ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019ef6:	18d3      	adds	r3, r2, r3
 8019ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019efc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8019f00:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8019f04:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 8019f08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019f0c:	4614      	mov	r4, r2
 8019f0e:	461d      	mov	r5, r3
 8019f10:	f04f 0000 	mov.w	r0, #0
 8019f14:	f04f 0100 	mov.w	r1, #0
 8019f18:	00d9      	lsls	r1, r3, #3
 8019f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019f1e:	00d0      	lsls	r0, r2, #3
 8019f20:	1a23      	subs	r3, r4, r0
 8019f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019f26:	eb65 0301 	sbc.w	r3, r5, r1
 8019f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019f2e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8019f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8019f36:	4621      	mov	r1, r4
 8019f38:	1851      	adds	r1, r2, r1
 8019f3a:	61b9      	str	r1, [r7, #24]
 8019f3c:	4629      	mov	r1, r5
 8019f3e:	eb43 0101 	adc.w	r1, r3, r1
 8019f42:	61f9      	str	r1, [r7, #28]
 8019f44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019f48:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 8019f4c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8019f50:	4602      	mov	r2, r0
 8019f52:	460b      	mov	r3, r1
 8019f54:	1894      	adds	r4, r2, r2
 8019f56:	613c      	str	r4, [r7, #16]
 8019f58:	415b      	adcs	r3, r3
 8019f5a:	617b      	str	r3, [r7, #20]
 8019f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019f60:	1814      	adds	r4, r2, r0
 8019f62:	60bc      	str	r4, [r7, #8]
 8019f64:	414b      	adcs	r3, r1
 8019f66:	60fb      	str	r3, [r7, #12]
 8019f68:	f04f 0200 	mov.w	r2, #0
 8019f6c:	f04f 0300 	mov.w	r3, #0
 8019f70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8019f74:	464c      	mov	r4, r9
 8019f76:	00a3      	lsls	r3, r4, #2
 8019f78:	4644      	mov	r4, r8
 8019f7a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8019f7e:	4644      	mov	r4, r8
 8019f80:	00a2      	lsls	r2, r4, #2
 8019f82:	4614      	mov	r4, r2
 8019f84:	461d      	mov	r5, r3
 8019f86:	4623      	mov	r3, r4
 8019f88:	1a1b      	subs	r3, r3, r0
 8019f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019f8e:	462b      	mov	r3, r5
 8019f90:	eb63 0301 	sbc.w	r3, r3, r1
 8019f94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019f98:	f04f 0200 	mov.w	r2, #0
 8019f9c:	f04f 0300 	mov.w	r3, #0
 8019fa0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	084a      	lsrs	r2, r1, #1
 8019fa8:	4629      	mov	r1, r5
 8019faa:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8019fae:	4629      	mov	r1, r5
 8019fb0:	104b      	asrs	r3, r1, #1
 8019fb2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8019fb6:	1a84      	subs	r4, r0, r2
 8019fb8:	603c      	str	r4, [r7, #0]
 8019fba:	eb61 0303 	sbc.w	r3, r1, r3
 8019fbe:	607b      	str	r3, [r7, #4]
 8019fc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019fc4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 8019fc8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8019fcc:	f7e6 fa9a 	bl	8000504 <__aeabi_l2d>
 8019fd0:	f04f 0200 	mov.w	r2, #0
 8019fd4:	4b30      	ldr	r3, [pc, #192]	; (801a098 <_calcurateBarometric+0x554>)
 8019fd6:	f7e6 fbed 	bl	80007b4 <__aeabi_ddiv>
 8019fda:	4602      	mov	r2, r0
 8019fdc:	460b      	mov	r3, r1
 8019fde:	4610      	mov	r0, r2
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	f7e6 fd9f 	bl	8000b24 <__aeabi_d2f>
 8019fe6:	4602      	mov	r2, r0
 8019fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019fec:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 8019fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019ffa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8019ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a002:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801a006:	462a      	mov	r2, r5
 801a008:	fb02 f203 	mul.w	r2, r2, r3
 801a00c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a010:	4621      	mov	r1, r4
 801a012:	fb01 f303 	mul.w	r3, r1, r3
 801a016:	4413      	add	r3, r2
 801a018:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a01c:	4621      	mov	r1, r4
 801a01e:	fba2 1201 	umull	r1, r2, r2, r1
 801a022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a026:	460a      	mov	r2, r1
 801a028:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801a02c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a030:	4413      	add	r3, r2
 801a032:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a036:	f04f 0200 	mov.w	r2, #0
 801a03a:	f04f 0300 	mov.w	r3, #0
 801a03e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801a042:	4621      	mov	r1, r4
 801a044:	0d4a      	lsrs	r2, r1, #21
 801a046:	4629      	mov	r1, r5
 801a048:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801a04c:	4629      	mov	r1, r5
 801a04e:	154b      	asrs	r3, r1, #21
 801a050:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801a054:	1a14      	subs	r4, r2, r0
 801a056:	67bc      	str	r4, [r7, #120]	; 0x78
 801a058:	eb63 0301 	sbc.w	r3, r3, r1
 801a05c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a05e:	f04f 0200 	mov.w	r2, #0
 801a062:	f04f 0300 	mov.w	r3, #0
 801a066:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801a06a:	4621      	mov	r1, r4
 801a06c:	0bca      	lsrs	r2, r1, #15
 801a06e:	4629      	mov	r1, r5
 801a070:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801a074:	4629      	mov	r1, r5
 801a076:	13cb      	asrs	r3, r1, #15
 801a078:	4610      	mov	r0, r2
 801a07a:	4619      	mov	r1, r3
 801a07c:	f7e6 fe72 	bl	8000d64 <__aeabi_l2f>
 801a080:	4602      	mov	r2, r0
 801a082:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a086:	601a      	str	r2, [r3, #0]
}
 801a088:	bf00      	nop
 801a08a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801a08e:	46bd      	mov	sp, r7
 801a090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a094:	fffffa24 	.word	0xfffffa24
 801a098:	40590000 	.word	0x40590000

0801a09c <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b08a      	sub	sp, #40	; 0x28
 801a0a0:	af02      	add	r7, sp, #8
 801a0a2:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	68db      	ldr	r3, [r3, #12]
 801a0a8:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801a0ae:	69bb      	ldr	r3, [r7, #24]
 801a0b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a0b4:	3b01      	subs	r3, #1
 801a0b6:	2b04      	cmp	r3, #4
 801a0b8:	f200 80a9 	bhi.w	801a20e <_doTask+0x172>
 801a0bc:	a201      	add	r2, pc, #4	; (adr r2, 801a0c4 <_doTask+0x28>)
 801a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0c2:	bf00      	nop
 801a0c4:	0801a0d9 	.word	0x0801a0d9
 801a0c8:	0801a119 	.word	0x0801a119
 801a0cc:	0801a14b 	.word	0x0801a14b
 801a0d0:	0801a181 	.word	0x0801a181
 801a0d4:	0801a1b3 	.word	0x0801a1b3
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801a0d8:	4b54      	ldr	r3, [pc, #336]	; (801a22c <_doTask+0x190>)
 801a0da:	681a      	ldr	r2, [r3, #0]
 801a0dc:	69bb      	ldr	r3, [r7, #24]
 801a0de:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801a0e0:	69bb      	ldr	r3, [r7, #24]
 801a0e2:	8b1b      	ldrh	r3, [r3, #24]
 801a0e4:	b2db      	uxtb	r3, r3
 801a0e6:	3350      	adds	r3, #80	; 0x50
 801a0e8:	b2db      	uxtb	r3, r3
 801a0ea:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a0ec:	69bb      	ldr	r3, [r7, #24]
 801a0ee:	6858      	ldr	r0, [r3, #4]
 801a0f0:	f107 0310 	add.w	r3, r7, #16
 801a0f4:	2201      	movs	r2, #1
 801a0f6:	9200      	str	r2, [sp, #0]
 801a0f8:	2200      	movs	r2, #0
 801a0fa:	2100      	movs	r1, #0
 801a0fc:	f7f8 f992 	bl	8012424 <pifI2cDevice_Write>
 801a100:	4603      	mov	r3, r0
 801a102:	2b00      	cmp	r3, #0
 801a104:	f000 8085 	beq.w	801a212 <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801a108:	69bb      	ldr	r3, [r7, #24]
 801a10a:	2202      	movs	r2, #2
 801a10c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a110:	69bb      	ldr	r3, [r7, #24]
 801a112:	7e9b      	ldrb	r3, [r3, #26]
 801a114:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a116:	e07c      	b.n	801a212 <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a118:	69bb      	ldr	r3, [r7, #24]
 801a11a:	6858      	ldr	r0, [r3, #4]
 801a11c:	f107 0210 	add.w	r2, r7, #16
 801a120:	2303      	movs	r3, #3
 801a122:	2100      	movs	r1, #0
 801a124:	f7f8 f934 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 801a128:	4603      	mov	r3, r0
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d073      	beq.n	801a216 <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a12e:	7c3b      	ldrb	r3, [r7, #16]
 801a130:	041b      	lsls	r3, r3, #16
 801a132:	7c7a      	ldrb	r2, [r7, #17]
 801a134:	0212      	lsls	r2, r2, #8
 801a136:	4413      	add	r3, r2
 801a138:	7cba      	ldrb	r2, [r7, #18]
 801a13a:	441a      	add	r2, r3
 801a13c:	69bb      	ldr	r3, [r7, #24]
 801a13e:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801a140:	69bb      	ldr	r3, [r7, #24]
 801a142:	2203      	movs	r2, #3
 801a144:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a148:	e065      	b.n	801a216 <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801a14a:	69bb      	ldr	r3, [r7, #24]
 801a14c:	8b1b      	ldrh	r3, [r3, #24]
 801a14e:	b2db      	uxtb	r3, r3
 801a150:	3340      	adds	r3, #64	; 0x40
 801a152:	b2db      	uxtb	r3, r3
 801a154:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a156:	69bb      	ldr	r3, [r7, #24]
 801a158:	6858      	ldr	r0, [r3, #4]
 801a15a:	f107 0310 	add.w	r3, r7, #16
 801a15e:	2201      	movs	r2, #1
 801a160:	9200      	str	r2, [sp, #0]
 801a162:	2200      	movs	r2, #0
 801a164:	2100      	movs	r1, #0
 801a166:	f7f8 f95d 	bl	8012424 <pifI2cDevice_Write>
 801a16a:	4603      	mov	r3, r0
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d054      	beq.n	801a21a <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801a170:	69bb      	ldr	r3, [r7, #24]
 801a172:	2204      	movs	r2, #4
 801a174:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	7e9b      	ldrb	r3, [r3, #26]
 801a17c:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a17e:	e04c      	b.n	801a21a <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a180:	69bb      	ldr	r3, [r7, #24]
 801a182:	6858      	ldr	r0, [r3, #4]
 801a184:	f107 0210 	add.w	r2, r7, #16
 801a188:	2303      	movs	r3, #3
 801a18a:	2100      	movs	r1, #0
 801a18c:	f7f8 f900 	bl	8012390 <pifI2cDevice_ReadRegBytes>
 801a190:	4603      	mov	r3, r0
 801a192:	2b00      	cmp	r3, #0
 801a194:	d043      	beq.n	801a21e <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a196:	7c3b      	ldrb	r3, [r7, #16]
 801a198:	041b      	lsls	r3, r3, #16
 801a19a:	7c7a      	ldrb	r2, [r7, #17]
 801a19c:	0212      	lsls	r2, r2, #8
 801a19e:	4413      	add	r3, r2
 801a1a0:	7cba      	ldrb	r2, [r7, #18]
 801a1a2:	441a      	add	r2, r3
 801a1a4:	69bb      	ldr	r3, [r7, #24]
 801a1a6:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801a1a8:	69bb      	ldr	r3, [r7, #24]
 801a1aa:	2205      	movs	r2, #5
 801a1ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a1b0:	e035      	b.n	801a21e <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801a1b2:	f107 0208 	add.w	r2, r7, #8
 801a1b6:	f107 030c 	add.w	r3, r7, #12
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	69b8      	ldr	r0, [r7, #24]
 801a1be:	f7ff fcc1 	bl	8019b44 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801a1c2:	69bb      	ldr	r3, [r7, #24]
 801a1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d00a      	beq.n	801a1e0 <_doTask+0x144>
 801a1ca:	69bb      	ldr	r3, [r7, #24]
 801a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1ce:	edd7 7a03 	vldr	s15, [r7, #12]
 801a1d2:	ed97 7a02 	vldr	s14, [r7, #8]
 801a1d6:	eef0 0a47 	vmov.f32	s1, s14
 801a1da:	eeb0 0a67 	vmov.f32	s0, s15
 801a1de:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801a1e0:	4b12      	ldr	r3, [pc, #72]	; (801a22c <_doTask+0x190>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	69bb      	ldr	r3, [r7, #24]
 801a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ea:	b29b      	uxth	r3, r3
 801a1ec:	1ad3      	subs	r3, r2, r3
 801a1ee:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801a1f0:	69bb      	ldr	r3, [r7, #24]
 801a1f2:	8c1b      	ldrh	r3, [r3, #32]
 801a1f4:	8afa      	ldrh	r2, [r7, #22]
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d204      	bcs.n	801a204 <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801a1fa:	69bb      	ldr	r3, [r7, #24]
 801a1fc:	8c1a      	ldrh	r2, [r3, #32]
 801a1fe:	8afb      	ldrh	r3, [r7, #22]
 801a200:	1ad3      	subs	r3, r2, r3
 801a202:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801a204:	69bb      	ldr	r3, [r7, #24]
 801a206:	2201      	movs	r2, #1
 801a208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801a20c:	e008      	b.n	801a220 <_doTask+0x184>

	default:
		break;
 801a20e:	bf00      	nop
 801a210:	e006      	b.n	801a220 <_doTask+0x184>
		break;
 801a212:	bf00      	nop
 801a214:	e004      	b.n	801a220 <_doTask+0x184>
		break;
 801a216:	bf00      	nop
 801a218:	e002      	b.n	801a220 <_doTask+0x184>
		break;
 801a21a:	bf00      	nop
 801a21c:	e000      	b.n	801a220 <_doTask+0x184>
		break;
 801a21e:	bf00      	nop
	}
	return delay;
 801a220:	8bfb      	ldrh	r3, [r7, #30]
}
 801a222:	4618      	mov	r0, r3
 801a224:	3720      	adds	r7, #32
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	20001bcc 	.word	0x20001bcc

0801a230 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af00      	add	r7, sp, #0
 801a236:	60f8      	str	r0, [r7, #12]
 801a238:	607a      	str	r2, [r7, #4]
 801a23a:	461a      	mov	r2, r3
 801a23c:	460b      	mov	r3, r1
 801a23e:	817b      	strh	r3, [r7, #10]
 801a240:	4613      	mov	r3, r2
 801a242:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d002      	beq.n	801a250 <pifMs5611_Init+0x20>
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d104      	bne.n	801a25a <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801a250:	4b33      	ldr	r3, [pc, #204]	; (801a320 <pifMs5611_Init+0xf0>)
 801a252:	2201      	movs	r2, #1
 801a254:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a256:	2300      	movs	r3, #0
 801a258:	e05e      	b.n	801a318 <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801a25a:	2234      	movs	r2, #52	; 0x34
 801a25c:	2100      	movs	r1, #0
 801a25e:	68f8      	ldr	r0, [r7, #12]
 801a260:	f008 fb40 	bl	80228e4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7f7 ff77 	bl	8012158 <pifI2cPort_AddDevice>
 801a26a:	4602      	mov	r2, r0
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	685b      	ldr	r3, [r3, #4]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d101      	bne.n	801a27c <pifMs5611_Init+0x4c>
 801a278:	2300      	movs	r3, #0
 801a27a:	e04d      	b.n	801a318 <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	685b      	ldr	r3, [r3, #4]
 801a280:	7a7a      	ldrb	r2, [r7, #9]
 801a282:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	685b      	ldr	r3, [r3, #4]
 801a288:	2200      	movs	r2, #0
 801a28a:	211e      	movs	r1, #30
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7f8 f975 	bl	801257c <pifI2cDevice_WriteRegByte>
 801a292:	4603      	mov	r3, r0
 801a294:	2b00      	cmp	r3, #0
 801a296:	d036      	beq.n	801a306 <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 801a298:	2064      	movs	r0, #100	; 0x64
 801a29a:	f7fa fd7b 	bl	8014d94 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801a29e:	2300      	movs	r3, #0
 801a2a0:	617b      	str	r3, [r7, #20]
 801a2a2:	e014      	b.n	801a2ce <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	6858      	ldr	r0, [r3, #4]
 801a2a8:	697b      	ldr	r3, [r7, #20]
 801a2aa:	3350      	adds	r3, #80	; 0x50
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	005b      	lsls	r3, r3, #1
 801a2b0:	b2d9      	uxtb	r1, r3
 801a2b2:	697b      	ldr	r3, [r7, #20]
 801a2b4:	3304      	adds	r3, #4
 801a2b6:	005b      	lsls	r3, r3, #1
 801a2b8:	68fa      	ldr	r2, [r7, #12]
 801a2ba:	4413      	add	r3, r2
 801a2bc:	461a      	mov	r2, r3
 801a2be:	f7f8 f843 	bl	8012348 <pifI2cDevice_ReadRegWord>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d020      	beq.n	801a30a <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 801a2c8:	697b      	ldr	r3, [r7, #20]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	617b      	str	r3, [r7, #20]
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	2b07      	cmp	r3, #7
 801a2d2:	dde7      	ble.n	801a2a4 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801a2d4:	68f8      	ldr	r0, [r7, #12]
 801a2d6:	f7ff fbb7 	bl	8019a48 <_checkPromCrc>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d016      	beq.n	801a30e <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801a2e0:	2104      	movs	r1, #4
 801a2e2:	68f8      	ldr	r0, [r7, #12]
 801a2e4:	f000 f844 	bl	801a370 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a2e8:	897b      	ldrh	r3, [r7, #10]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d106      	bne.n	801a2fc <pifMs5611_Init+0xcc>
 801a2ee:	4b0d      	ldr	r3, [pc, #52]	; (801a324 <pifMs5611_Init+0xf4>)
 801a2f0:	881b      	ldrh	r3, [r3, #0]
 801a2f2:	1c5a      	adds	r2, r3, #1
 801a2f4:	b291      	uxth	r1, r2
 801a2f6:	4a0b      	ldr	r2, [pc, #44]	; (801a324 <pifMs5611_Init+0xf4>)
 801a2f8:	8011      	strh	r1, [r2, #0]
 801a2fa:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	897a      	ldrh	r2, [r7, #10]
 801a300:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801a302:	2301      	movs	r3, #1
 801a304:	e008      	b.n	801a318 <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801a306:	bf00      	nop
 801a308:	e002      	b.n	801a310 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801a30a:	bf00      	nop
 801a30c:	e000      	b.n	801a310 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801a30e:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801a310:	68f8      	ldr	r0, [r7, #12]
 801a312:	f000 f809 	bl	801a328 <pifMs5611_Clear>
	return FALSE;
 801a316:	2300      	movs	r3, #0
}
 801a318:	4618      	mov	r0, r3
 801a31a:	3718      	adds	r7, #24
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	20001bb5 	.word	0x20001bb5
 801a324:	20000128 	.word	0x20000128

0801a328 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b082      	sub	sp, #8
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	69db      	ldr	r3, [r3, #28]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d007      	beq.n	801a348 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	69db      	ldr	r3, [r3, #28]
 801a33c:	4618      	mov	r0, r3
 801a33e:	f7fa fa69 	bl	8014814 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	2200      	movs	r2, #0
 801a346:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	685b      	ldr	r3, [r3, #4]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d00b      	beq.n	801a368 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	685a      	ldr	r2, [r3, #4]
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	4619      	mov	r1, r3
 801a35c:	4610      	mov	r0, r2
 801a35e:	f7f7 ff1f 	bl	80121a0 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	2200      	movs	r2, #0
 801a366:	605a      	str	r2, [r3, #4]
	}
}
 801a368:	bf00      	nop
 801a36a:	3708      	adds	r7, #8
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801a370:	b480      	push	{r7}
 801a372:	b083      	sub	sp, #12
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
 801a378:	460b      	mov	r3, r1
 801a37a:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	887a      	ldrh	r2, [r7, #2]
 801a380:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801a382:	887b      	ldrh	r3, [r7, #2]
 801a384:	2b08      	cmp	r3, #8
 801a386:	d829      	bhi.n	801a3dc <pifMs5611_SetOverSamplingRate+0x6c>
 801a388:	a201      	add	r2, pc, #4	; (adr r2, 801a390 <pifMs5611_SetOverSamplingRate+0x20>)
 801a38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a38e:	bf00      	nop
 801a390:	0801a3b5 	.word	0x0801a3b5
 801a394:	0801a3dd 	.word	0x0801a3dd
 801a398:	0801a3bd 	.word	0x0801a3bd
 801a39c:	0801a3dd 	.word	0x0801a3dd
 801a3a0:	0801a3c5 	.word	0x0801a3c5
 801a3a4:	0801a3dd 	.word	0x0801a3dd
 801a3a8:	0801a3cd 	.word	0x0801a3cd
 801a3ac:	0801a3dd 	.word	0x0801a3dd
 801a3b0:	0801a3d5 	.word	0x0801a3d5
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2202      	movs	r2, #2
 801a3b8:	769a      	strb	r2, [r3, #26]
 801a3ba:	e00f      	b.n	801a3dc <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	2203      	movs	r2, #3
 801a3c0:	769a      	strb	r2, [r3, #26]
 801a3c2:	e00b      	b.n	801a3dc <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	2204      	movs	r2, #4
 801a3c8:	769a      	strb	r2, [r3, #26]
 801a3ca:	e007      	b.n	801a3dc <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2206      	movs	r2, #6
 801a3d0:	769a      	strb	r2, [r3, #26]
 801a3d2:	e003      	b.n	801a3dc <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	220b      	movs	r2, #11
 801a3d8:	769a      	strb	r2, [r3, #26]
 801a3da:	bf00      	nop
	}
}
 801a3dc:	bf00      	nop
 801a3de:	370c      	adds	r7, #12
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e6:	4770      	bx	lr

0801a3e8 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b086      	sub	sp, #24
 801a3ec:	af02      	add	r7, sp, #8
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	607a      	str	r2, [r7, #4]
 801a3f2:	461a      	mov	r2, r3
 801a3f4:	460b      	mov	r3, r1
 801a3f6:	817b      	strh	r3, [r7, #10]
 801a3f8:	4613      	mov	r3, r2
 801a3fa:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801a3fc:	8979      	ldrh	r1, [r7, #10]
 801a3fe:	7a7b      	ldrb	r3, [r7, #9]
 801a400:	9300      	str	r3, [sp, #0]
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	4a0f      	ldr	r2, [pc, #60]	; (801a444 <pifMs5611_AddTaskForReading+0x5c>)
 801a406:	2004      	movs	r0, #4
 801a408:	f7fa f99c 	bl	8014744 <pifTaskManager_Add>
 801a40c:	4602      	mov	r2, r0
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	69db      	ldr	r3, [r3, #28]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d101      	bne.n	801a41e <pifMs5611_AddTaskForReading+0x36>
 801a41a:	2300      	movs	r3, #0
 801a41c:	e00e      	b.n	801a43c <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	69db      	ldr	r3, [r3, #28]
 801a422:	4a09      	ldr	r2, [pc, #36]	; (801a448 <pifMs5611_AddTaskForReading+0x60>)
 801a424:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	897a      	ldrh	r2, [r7, #10]
 801a42a:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	687a      	ldr	r2, [r7, #4]
 801a430:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	2201      	movs	r2, #1
 801a436:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801a43a:	2301      	movs	r3, #1
}
 801a43c:	4618      	mov	r0, r3
 801a43e:	3710      	adds	r7, #16
 801a440:	46bd      	mov	sp, r7
 801a442:	bd80      	pop	{r7, pc}
 801a444:	0801a09d 	.word	0x0801a09d
 801a448:	080276f4 	.word	0x080276f4

0801a44c <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b086      	sub	sp, #24
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	68db      	ldr	r3, [r3, #12]
 801a458:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801a45a:	2300      	movs	r3, #0
 801a45c:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	691b      	ldr	r3, [r3, #16]
 801a462:	693a      	ldr	r2, [r7, #16]
 801a464:	7d12      	ldrb	r2, [r2, #20]
 801a466:	4413      	add	r3, r2
 801a468:	781b      	ldrb	r3, [r3, #0]
 801a46a:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	7b1b      	ldrb	r3, [r3, #12]
 801a470:	3b01      	subs	r3, #1
 801a472:	2b03      	cmp	r3, #3
 801a474:	d87f      	bhi.n	801a576 <_doTask+0x12a>
 801a476:	a201      	add	r2, pc, #4	; (adr r2, 801a47c <_doTask+0x30>)
 801a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a47c:	0801a48d 	.word	0x0801a48d
 801a480:	0801a4af 	.word	0x0801a4af
 801a484:	0801a4d1 	.word	0x0801a4d1
 801a488:	0801a543 	.word	0x0801a543
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801a48c:	693b      	ldr	r3, [r7, #16]
 801a48e:	699b      	ldr	r3, [r3, #24]
 801a490:	693a      	ldr	r2, [r7, #16]
 801a492:	8892      	ldrh	r2, [r2, #4]
 801a494:	2101      	movs	r1, #1
 801a496:	4610      	mov	r0, r2
 801a498:	4798      	blx	r3
		p_owner->__pos++;
 801a49a:	693b      	ldr	r3, [r7, #16]
 801a49c:	7d1b      	ldrb	r3, [r3, #20]
 801a49e:	3301      	adds	r3, #1
 801a4a0:	b2da      	uxtb	r2, r3
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801a4a6:	693b      	ldr	r3, [r7, #16]
 801a4a8:	2202      	movs	r2, #2
 801a4aa:	731a      	strb	r2, [r3, #12]
		break;
 801a4ac:	e064      	b.n	801a578 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801a4ae:	693b      	ldr	r3, [r7, #16]
 801a4b0:	699b      	ldr	r3, [r3, #24]
 801a4b2:	693a      	ldr	r2, [r7, #16]
 801a4b4:	8892      	ldrh	r2, [r2, #4]
 801a4b6:	2100      	movs	r1, #0
 801a4b8:	4610      	mov	r0, r2
 801a4ba:	4798      	blx	r3
		p_owner->__pos++;
 801a4bc:	693b      	ldr	r3, [r7, #16]
 801a4be:	7d1b      	ldrb	r3, [r3, #20]
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	b2da      	uxtb	r2, r3
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801a4c8:	693b      	ldr	r3, [r7, #16]
 801a4ca:	2203      	movs	r2, #3
 801a4cc:	731a      	strb	r2, [r3, #12]
		break;
 801a4ce:	e053      	b.n	801a578 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801a4d0:	89fb      	ldrh	r3, [r7, #14]
 801a4d2:	2bef      	cmp	r3, #239	; 0xef
 801a4d4:	d810      	bhi.n	801a4f8 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	699b      	ldr	r3, [r3, #24]
 801a4da:	693a      	ldr	r2, [r7, #16]
 801a4dc:	8892      	ldrh	r2, [r2, #4]
 801a4de:	2101      	movs	r1, #1
 801a4e0:	4610      	mov	r0, r2
 801a4e2:	4798      	blx	r3
			p_owner->__pos++;
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	7d1b      	ldrb	r3, [r3, #20]
 801a4e8:	3301      	adds	r3, #1
 801a4ea:	b2da      	uxtb	r2, r3
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	2202      	movs	r2, #2
 801a4f4:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801a4f6:	e03f      	b.n	801a578 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801a4f8:	89fb      	ldrh	r3, [r7, #14]
 801a4fa:	2bf0      	cmp	r3, #240	; 0xf0
 801a4fc:	d105      	bne.n	801a50a <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801a4fe:	693b      	ldr	r3, [r7, #16]
 801a500:	2204      	movs	r2, #4
 801a502:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801a504:	2301      	movs	r3, #1
 801a506:	82fb      	strh	r3, [r7, #22]
		break;
 801a508:	e036      	b.n	801a578 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801a50a:	89fb      	ldrh	r3, [r7, #14]
 801a50c:	b2db      	uxtb	r3, r3
 801a50e:	3310      	adds	r3, #16
 801a510:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	7d5b      	ldrb	r3, [r3, #21]
 801a516:	7b7a      	ldrb	r2, [r7, #13]
 801a518:	429a      	cmp	r2, r3
 801a51a:	d90c      	bls.n	801a536 <_doTask+0xea>
				p_owner->__pos = 0;
 801a51c:	693b      	ldr	r3, [r7, #16]
 801a51e:	2200      	movs	r2, #0
 801a520:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801a522:	693b      	ldr	r3, [r7, #16]
 801a524:	7d5b      	ldrb	r3, [r3, #21]
 801a526:	3301      	adds	r3, #1
 801a528:	b2da      	uxtb	r2, r3
 801a52a:	693b      	ldr	r3, [r7, #16]
 801a52c:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	2201      	movs	r2, #1
 801a532:	731a      	strb	r2, [r3, #12]
 801a534:	e002      	b.n	801a53c <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801a536:	693b      	ldr	r3, [r7, #16]
 801a538:	2204      	movs	r2, #4
 801a53a:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801a53c:	2301      	movs	r3, #1
 801a53e:	82fb      	strh	r3, [r7, #22]
		break;
 801a540:	e01a      	b.n	801a578 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801a542:	693b      	ldr	r3, [r7, #16]
 801a544:	699b      	ldr	r3, [r3, #24]
 801a546:	693a      	ldr	r2, [r7, #16]
 801a548:	8892      	ldrh	r2, [r2, #4]
 801a54a:	2100      	movs	r1, #0
 801a54c:	4610      	mov	r0, r2
 801a54e:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801a550:	693b      	ldr	r3, [r7, #16]
 801a552:	2200      	movs	r2, #0
 801a554:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801a556:	693b      	ldr	r3, [r7, #16]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d005      	beq.n	801a56a <_doTask+0x11e>
 801a55e:	693b      	ldr	r3, [r7, #16]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	693a      	ldr	r2, [r7, #16]
 801a564:	8892      	ldrh	r2, [r2, #4]
 801a566:	4610      	mov	r0, r2
 801a568:	4798      	blx	r3
		delay = 1;
 801a56a:	2301      	movs	r3, #1
 801a56c:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	2201      	movs	r2, #1
 801a572:	711a      	strb	r2, [r3, #4]
		break;
 801a574:	e000      	b.n	801a578 <_doTask+0x12c>

	default:
		break;
 801a576:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801a578:	8afb      	ldrh	r3, [r7, #22]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d106      	bne.n	801a58c <_doTask+0x140>
 801a57e:	89fb      	ldrh	r3, [r7, #14]
 801a580:	461a      	mov	r2, r3
 801a582:	0092      	lsls	r2, r2, #2
 801a584:	4413      	add	r3, r2
 801a586:	005b      	lsls	r3, r3, #1
 801a588:	b29b      	uxth	r3, r3
 801a58a:	e000      	b.n	801a58e <_doTask+0x142>
 801a58c:	8afb      	ldrh	r3, [r7, #22]
}
 801a58e:	4618      	mov	r0, r3
 801a590:	3718      	adds	r7, #24
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}
 801a596:	bf00      	nop

0801a598 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b086      	sub	sp, #24
 801a59c:	af02      	add	r7, sp, #8
 801a59e:	60f8      	str	r0, [r7, #12]
 801a5a0:	460b      	mov	r3, r1
 801a5a2:	607a      	str	r2, [r7, #4]
 801a5a4:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d002      	beq.n	801a5b2 <pifBuzzer_Init+0x1a>
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d104      	bne.n	801a5bc <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801a5b2:	4b1a      	ldr	r3, [pc, #104]	; (801a61c <pifBuzzer_Init+0x84>)
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	e02a      	b.n	801a612 <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801a5bc:	221c      	movs	r2, #28
 801a5be:	2100      	movs	r1, #0
 801a5c0:	68f8      	ldr	r0, [r7, #12]
 801a5c2:	f008 f98f 	bl	80228e4 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	9300      	str	r3, [sp, #0]
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	4a14      	ldr	r2, [pc, #80]	; (801a620 <pifBuzzer_Init+0x88>)
 801a5ce:	2101      	movs	r1, #1
 801a5d0:	2004      	movs	r0, #4
 801a5d2:	f7fa f8b7 	bl	8014744 <pifTaskManager_Add>
 801a5d6:	4602      	mov	r2, r0
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	689b      	ldr	r3, [r3, #8]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d101      	bne.n	801a5e8 <pifBuzzer_Init+0x50>
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	e014      	b.n	801a612 <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	689b      	ldr	r3, [r3, #8]
 801a5ec:	4a0d      	ldr	r2, [pc, #52]	; (801a624 <pifBuzzer_Init+0x8c>)
 801a5ee:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801a5f0:	897b      	ldrh	r3, [r7, #10]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d106      	bne.n	801a604 <pifBuzzer_Init+0x6c>
 801a5f6:	4b0c      	ldr	r3, [pc, #48]	; (801a628 <pifBuzzer_Init+0x90>)
 801a5f8:	881b      	ldrh	r3, [r3, #0]
 801a5fa:	1c5a      	adds	r2, r3, #1
 801a5fc:	b291      	uxth	r1, r2
 801a5fe:	4a0a      	ldr	r2, [pc, #40]	; (801a628 <pifBuzzer_Init+0x90>)
 801a600:	8011      	strh	r1, [r2, #0]
 801a602:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	897a      	ldrh	r2, [r7, #10]
 801a608:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	619a      	str	r2, [r3, #24]
    return TRUE;
 801a610:	2301      	movs	r3, #1
}
 801a612:	4618      	mov	r0, r3
 801a614:	3710      	adds	r7, #16
 801a616:	46bd      	mov	sp, r7
 801a618:	bd80      	pop	{r7, pc}
 801a61a:	bf00      	nop
 801a61c:	20001bb5 	.word	0x20001bb5
 801a620:	0801a44d 	.word	0x0801a44d
 801a624:	080276fc 	.word	0x080276fc
 801a628:	20000128 	.word	0x20000128

0801a62c <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801a62c:	b480      	push	{r7}
 801a62e:	b083      	sub	sp, #12
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
 801a634:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	689b      	ldr	r3, [r3, #8]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d101      	bne.n	801a642 <pifBuzzer_Start+0x16>
 801a63e:	2300      	movs	r3, #0
 801a640:	e010      	b.n	801a664 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	683a      	ldr	r2, [r7, #0]
 801a646:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2200      	movs	r2, #0
 801a64c:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	2200      	movs	r2, #0
 801a652:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	2201      	movs	r2, #1
 801a658:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	689b      	ldr	r3, [r3, #8]
 801a65e:	2200      	movs	r2, #0
 801a660:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801a662:	2301      	movs	r3, #1
}
 801a664:	4618      	mov	r0, r3
 801a666:	370c      	adds	r7, #12
 801a668:	46bd      	mov	sp, r7
 801a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66e:	4770      	bx	lr

0801a670 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801a670:	b480      	push	{r7}
 801a672:	b083      	sub	sp, #12
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	2204      	movs	r2, #4
 801a67c:	731a      	strb	r2, [r3, #12]
}
 801a67e:	bf00      	nop
 801a680:	370c      	adds	r7, #12
 801a682:	46bd      	mov	sp, r7
 801a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a688:	4770      	bx	lr

0801a68a <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801a68a:	b580      	push	{r7, lr}
 801a68c:	b086      	sub	sp, #24
 801a68e:	af02      	add	r7, sp, #8
 801a690:	60f8      	str	r0, [r7, #12]
 801a692:	60b9      	str	r1, [r7, #8]
 801a694:	607a      	str	r2, [r7, #4]
 801a696:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	7a19      	ldrb	r1, [r3, #8]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	0a1b      	lsrs	r3, r3, #8
 801a6a0:	b2da      	uxtb	r2, r3
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	685b      	ldr	r3, [r3, #4]
 801a6a6:	430a      	orrs	r2, r1
 801a6a8:	b2d2      	uxtb	r2, r2
 801a6aa:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	6858      	ldr	r0, [r3, #4]
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	b2d9      	uxtb	r1, r3
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	9300      	str	r3, [sp, #0]
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	f7f7 fd84 	bl	80121c8 <pifI2cDevice_Read>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d101      	bne.n	801a6ca <_actStorageI2c_Read_1+0x40>
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	e000      	b.n	801a6cc <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801a6ca:	2301      	movs	r3, #1
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	3710      	adds	r7, #16
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}

0801a6d4 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b086      	sub	sp, #24
 801a6d8:	af02      	add	r7, sp, #8
 801a6da:	60f8      	str	r0, [r7, #12]
 801a6dc:	60b9      	str	r1, [r7, #8]
 801a6de:	607a      	str	r2, [r7, #4]
 801a6e0:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	7a19      	ldrb	r1, [r3, #8]
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	0a1b      	lsrs	r3, r3, #8
 801a6ea:	b2da      	uxtb	r2, r3
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	685b      	ldr	r3, [r3, #4]
 801a6f0:	430a      	orrs	r2, r1
 801a6f2:	b2d2      	uxtb	r2, r2
 801a6f4:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	6858      	ldr	r0, [r3, #4]
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	b2d9      	uxtb	r1, r3
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	9300      	str	r3, [sp, #0]
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	2201      	movs	r2, #1
 801a706:	f7f7 fe8d 	bl	8012424 <pifI2cDevice_Write>
 801a70a:	4603      	mov	r3, r0
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d101      	bne.n	801a714 <_actStorageI2c_Write_1+0x40>
 801a710:	2300      	movs	r3, #0
 801a712:	e009      	b.n	801a728 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	7a5b      	ldrb	r3, [r3, #9]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d004      	beq.n	801a726 <_actStorageI2c_Write_1+0x52>
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	7a5b      	ldrb	r3, [r3, #9]
 801a720:	4618      	mov	r0, r3
 801a722:	f7fa fb37 	bl	8014d94 <pifTaskManager_YieldMs>
	return TRUE;
 801a726:	2301      	movs	r3, #1
}
 801a728:	4618      	mov	r0, r3
 801a72a:	3710      	adds	r7, #16
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}

0801a730 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b086      	sub	sp, #24
 801a734:	af02      	add	r7, sp, #8
 801a736:	60f8      	str	r0, [r7, #12]
 801a738:	60b9      	str	r1, [r7, #8]
 801a73a:	607a      	str	r2, [r7, #4]
 801a73c:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	7a19      	ldrb	r1, [r3, #8]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	0c1b      	lsrs	r3, r3, #16
 801a746:	b2da      	uxtb	r2, r3
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	430a      	orrs	r2, r1
 801a74e:	b2d2      	uxtb	r2, r2
 801a750:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	6858      	ldr	r0, [r3, #4]
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	b299      	uxth	r1, r3
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	9300      	str	r3, [sp, #0]
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	2202      	movs	r2, #2
 801a762:	f7f7 fd31 	bl	80121c8 <pifI2cDevice_Read>
 801a766:	4603      	mov	r3, r0
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d101      	bne.n	801a770 <_actStorageI2c_Read_2+0x40>
 801a76c:	2300      	movs	r3, #0
 801a76e:	e000      	b.n	801a772 <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801a770:	2301      	movs	r3, #1
}
 801a772:	4618      	mov	r0, r3
 801a774:	3710      	adds	r7, #16
 801a776:	46bd      	mov	sp, r7
 801a778:	bd80      	pop	{r7, pc}

0801a77a <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801a77a:	b580      	push	{r7, lr}
 801a77c:	b086      	sub	sp, #24
 801a77e:	af02      	add	r7, sp, #8
 801a780:	60f8      	str	r0, [r7, #12]
 801a782:	60b9      	str	r1, [r7, #8]
 801a784:	607a      	str	r2, [r7, #4]
 801a786:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	7a19      	ldrb	r1, [r3, #8]
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	0c1b      	lsrs	r3, r3, #16
 801a790:	b2da      	uxtb	r2, r3
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	430a      	orrs	r2, r1
 801a798:	b2d2      	uxtb	r2, r2
 801a79a:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	6858      	ldr	r0, [r3, #4]
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	b299      	uxth	r1, r3
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	9300      	str	r3, [sp, #0]
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2202      	movs	r2, #2
 801a7ac:	f7f7 fe3a 	bl	8012424 <pifI2cDevice_Write>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d101      	bne.n	801a7ba <_actStorageI2c_Write_2+0x40>
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	e009      	b.n	801a7ce <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	7a5b      	ldrb	r3, [r3, #9]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d004      	beq.n	801a7cc <_actStorageI2c_Write_2+0x52>
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	7a5b      	ldrb	r3, [r3, #9]
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7fa fae4 	bl	8014d94 <pifTaskManager_YieldMs>
	return TRUE;
 801a7cc:	2301      	movs	r3, #1
}
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	3710      	adds	r7, #16
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
	...

0801a7d8 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b084      	sub	sp, #16
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	4611      	mov	r1, r2
 801a7e4:	461a      	mov	r2, r3
 801a7e6:	460b      	mov	r3, r1
 801a7e8:	71fb      	strb	r3, [r7, #7]
 801a7ea:	4613      	mov	r3, r2
 801a7ec:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d002      	beq.n	801a7fa <pifStorage_AttachI2c+0x22>
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d104      	bne.n	801a804 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801a7fa:	4b1c      	ldr	r3, [pc, #112]	; (801a86c <pifStorage_AttachI2c+0x94>)
 801a7fc:	2201      	movs	r2, #1
 801a7fe:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a800:	2300      	movs	r3, #0
 801a802:	e02f      	b.n	801a864 <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 801a804:	68b8      	ldr	r0, [r7, #8]
 801a806:	f7f7 fca7 	bl	8012158 <pifI2cPort_AddDevice>
 801a80a:	4602      	mov	r2, r0
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	685b      	ldr	r3, [r3, #4]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d101      	bne.n	801a81c <pifStorage_AttachI2c+0x44>
 801a818:	2300      	movs	r3, #0
 801a81a:	e023      	b.n	801a864 <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	79fa      	ldrb	r2, [r7, #7]
 801a820:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	685b      	ldr	r3, [r3, #4]
 801a826:	79fa      	ldrb	r2, [r7, #7]
 801a828:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	7e3a      	ldrb	r2, [r7, #24]
 801a82e:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801a830:	79bb      	ldrb	r3, [r7, #6]
 801a832:	2b01      	cmp	r3, #1
 801a834:	d007      	beq.n	801a846 <pifStorage_AttachI2c+0x6e>
 801a836:	2b02      	cmp	r3, #2
 801a838:	d00c      	beq.n	801a854 <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801a83a:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801a83c:	68f8      	ldr	r0, [r7, #12]
 801a83e:	f000 f81f 	bl	801a880 <pifStorage_DetachI2c>
	return FALSE;
 801a842:	2300      	movs	r3, #0
 801a844:	e00e      	b.n	801a864 <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	4a09      	ldr	r2, [pc, #36]	; (801a870 <pifStorage_AttachI2c+0x98>)
 801a84a:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	4a09      	ldr	r2, [pc, #36]	; (801a874 <pifStorage_AttachI2c+0x9c>)
 801a850:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801a852:	e006      	b.n	801a862 <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	4a08      	ldr	r2, [pc, #32]	; (801a878 <pifStorage_AttachI2c+0xa0>)
 801a858:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	4a07      	ldr	r2, [pc, #28]	; (801a87c <pifStorage_AttachI2c+0xa4>)
 801a85e:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801a860:	bf00      	nop
	return TRUE;
 801a862:	2301      	movs	r3, #1
}
 801a864:	4618      	mov	r0, r3
 801a866:	3710      	adds	r7, #16
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	20001bb5 	.word	0x20001bb5
 801a870:	0801a68b 	.word	0x0801a68b
 801a874:	0801a6d5 	.word	0x0801a6d5
 801a878:	0801a731 	.word	0x0801a731
 801a87c:	0801a77b 	.word	0x0801a77b

0801a880 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d00b      	beq.n	801a8a8 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	685b      	ldr	r3, [r3, #4]
 801a894:	685a      	ldr	r2, [r3, #4]
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	685b      	ldr	r3, [r3, #4]
 801a89a:	4619      	mov	r1, r3
 801a89c:	4610      	mov	r0, r2
 801a89e:	f7f7 fc7f 	bl	80121a0 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a8b4:	bf00      	nop
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b082      	sub	sp, #8
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	68db      	ldr	r3, [r3, #12]
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	4798      	blx	r3
 801a8cc:	4603      	mov	r3, r0
}
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	3708      	adds	r7, #8
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	bd80      	pop	{r7, pc}

0801a8d6 <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801a8d6:	b580      	push	{r7, lr}
 801a8d8:	b082      	sub	sp, #8
 801a8da:	af00      	add	r7, sp, #0
 801a8dc:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	691b      	ldr	r3, [r3, #16]
 801a8e2:	6878      	ldr	r0, [r7, #4]
 801a8e4:	4798      	blx	r3
 801a8e6:	4603      	mov	r3, r0
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3708      	adds	r7, #8
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	460b      	mov	r3, r1
 801a8fa:	807b      	strh	r3, [r7, #2]
 801a8fc:	4613      	mov	r3, r2
 801a8fe:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	695b      	ldr	r3, [r3, #20]
 801a904:	883a      	ldrh	r2, [r7, #0]
 801a906:	8879      	ldrh	r1, [r7, #2]
 801a908:	6878      	ldr	r0, [r7, #4]
 801a90a:	4798      	blx	r3
 801a90c:	4603      	mov	r3, r0
}
 801a90e:	4618      	mov	r0, r3
 801a910:	3708      	adds	r7, #8
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}

0801a916 <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801a916:	b580      	push	{r7, lr}
 801a918:	b082      	sub	sp, #8
 801a91a:	af00      	add	r7, sp, #0
 801a91c:	6078      	str	r0, [r7, #4]
 801a91e:	460b      	mov	r3, r1
 801a920:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	69db      	ldr	r3, [r3, #28]
 801a926:	887a      	ldrh	r2, [r7, #2]
 801a928:	4611      	mov	r1, r2
 801a92a:	6878      	ldr	r0, [r7, #4]
 801a92c:	4798      	blx	r3
 801a92e:	4603      	mov	r3, r0
}
 801a930:	4618      	mov	r0, r3
 801a932:	3708      	adds	r7, #8
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801a938:	b590      	push	{r4, r7, lr}
 801a93a:	b085      	sub	sp, #20
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
 801a944:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	6a1c      	ldr	r4, [r3, #32]
 801a94a:	683b      	ldr	r3, [r7, #0]
 801a94c:	687a      	ldr	r2, [r7, #4]
 801a94e:	68b9      	ldr	r1, [r7, #8]
 801a950:	68f8      	ldr	r0, [r7, #12]
 801a952:	47a0      	blx	r4
 801a954:	4603      	mov	r3, r0
}
 801a956:	4618      	mov	r0, r3
 801a958:	3714      	adds	r7, #20
 801a95a:	46bd      	mov	sp, r7
 801a95c:	bd90      	pop	{r4, r7, pc}

0801a95e <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801a95e:	b590      	push	{r4, r7, lr}
 801a960:	b085      	sub	sp, #20
 801a962:	af00      	add	r7, sp, #0
 801a964:	60f8      	str	r0, [r7, #12]
 801a966:	60b9      	str	r1, [r7, #8]
 801a968:	607a      	str	r2, [r7, #4]
 801a96a:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a970:	683b      	ldr	r3, [r7, #0]
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	68b9      	ldr	r1, [r7, #8]
 801a976:	68f8      	ldr	r0, [r7, #12]
 801a978:	47a0      	blx	r4
 801a97a:	4603      	mov	r3, r0
}
 801a97c:	4618      	mov	r0, r3
 801a97e:	3714      	adds	r7, #20
 801a980:	46bd      	mov	sp, r7
 801a982:	bd90      	pop	{r4, r7, pc}

0801a984 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801a984:	b480      	push	{r7}
 801a986:	b085      	sub	sp, #20
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a990:	899b      	ldrh	r3, [r3, #12]
 801a992:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801a994:	89fb      	ldrh	r3, [r7, #14]
 801a996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a99a:	4293      	cmp	r3, r2
 801a99c:	d105      	bne.n	801a9aa <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801a99e:	4b0c      	ldr	r3, [pc, #48]	; (801a9d0 <_getNewDataNode+0x4c>)
 801a9a0:	2204      	movs	r2, #4
 801a9a2:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801a9a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9a8:	e00c      	b.n	801a9c4 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a9ae:	89fa      	ldrh	r2, [r7, #14]
 801a9b0:	4613      	mov	r3, r2
 801a9b2:	005b      	lsls	r3, r3, #1
 801a9b4:	4413      	add	r3, r2
 801a9b6:	009b      	lsls	r3, r3, #2
 801a9b8:	18ca      	adds	r2, r1, r3
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9be:	88d2      	ldrh	r2, [r2, #6]
 801a9c0:	819a      	strh	r2, [r3, #12]
	return node;
 801a9c2:	89fb      	ldrh	r3, [r7, #14]
}
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	3714      	adds	r7, #20
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr
 801a9d0:	20001bb5 	.word	0x20001bb5

0801a9d4 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801a9d4:	b590      	push	{r4, r7, lr}
 801a9d6:	b087      	sub	sp, #28
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	60f8      	str	r0, [r7, #12]
 801a9dc:	60b9      	str	r1, [r7, #8]
 801a9de:	607a      	str	r2, [r7, #4]
 801a9e0:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	617b      	str	r3, [r7, #20]
	while (size) {
 801a9e6:	e01d      	b.n	801aa24 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801a9e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a9ea:	683a      	ldr	r2, [r7, #0]
 801a9ec:	4293      	cmp	r3, r2
 801a9ee:	bf28      	it	cs
 801a9f0:	4613      	movcs	r3, r2
 801a9f2:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a9f8:	68f8      	ldr	r0, [r7, #12]
 801a9fa:	68ba      	ldr	r2, [r7, #8]
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	18d1      	adds	r1, r2, r3
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	697b      	ldr	r3, [r7, #20]
 801aa04:	441a      	add	r2, r3
 801aa06:	693b      	ldr	r3, [r7, #16]
 801aa08:	47a0      	blx	r4
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d101      	bne.n	801aa14 <_readData+0x40>
 801aa10:	2300      	movs	r3, #0
 801aa12:	e00b      	b.n	801aa2c <_readData+0x58>

		ptr += len;
 801aa14:	697a      	ldr	r2, [r7, #20]
 801aa16:	693b      	ldr	r3, [r7, #16]
 801aa18:	4413      	add	r3, r2
 801aa1a:	617b      	str	r3, [r7, #20]
		size -= len;
 801aa1c:	683a      	ldr	r2, [r7, #0]
 801aa1e:	693b      	ldr	r3, [r7, #16]
 801aa20:	1ad3      	subs	r3, r2, r3
 801aa22:	603b      	str	r3, [r7, #0]
	while (size) {
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d1de      	bne.n	801a9e8 <_readData+0x14>
	}
	return TRUE;
 801aa2a:	2301      	movs	r3, #1
}
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	371c      	adds	r7, #28
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd90      	pop	{r4, r7, pc}

0801aa34 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801aa34:	b590      	push	{r4, r7, lr}
 801aa36:	b089      	sub	sp, #36	; 0x24
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	60f8      	str	r0, [r7, #12]
 801aa3c:	60b9      	str	r1, [r7, #8]
 801aa3e:	607a      	str	r2, [r7, #4]
 801aa40:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa46:	88db      	ldrh	r3, [r3, #6]
 801aa48:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	61fb      	str	r3, [r7, #28]
	while (size) {
 801aa4e:	e01d      	b.n	801aa8c <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801aa50:	8b7b      	ldrh	r3, [r7, #26]
 801aa52:	683a      	ldr	r2, [r7, #0]
 801aa54:	4293      	cmp	r3, r2
 801aa56:	bf28      	it	cs
 801aa58:	4613      	movcs	r3, r2
 801aa5a:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801aa60:	68f8      	ldr	r0, [r7, #12]
 801aa62:	68ba      	ldr	r2, [r7, #8]
 801aa64:	69fb      	ldr	r3, [r7, #28]
 801aa66:	18d1      	adds	r1, r2, r3
 801aa68:	687a      	ldr	r2, [r7, #4]
 801aa6a:	69fb      	ldr	r3, [r7, #28]
 801aa6c:	441a      	add	r2, r3
 801aa6e:	697b      	ldr	r3, [r7, #20]
 801aa70:	47a0      	blx	r4
 801aa72:	4603      	mov	r3, r0
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d101      	bne.n	801aa7c <_writeData+0x48>
 801aa78:	2300      	movs	r3, #0
 801aa7a:	e00b      	b.n	801aa94 <_writeData+0x60>

		ptr += len;
 801aa7c:	69fa      	ldr	r2, [r7, #28]
 801aa7e:	697b      	ldr	r3, [r7, #20]
 801aa80:	4413      	add	r3, r2
 801aa82:	61fb      	str	r3, [r7, #28]
		size -= len;
 801aa84:	683a      	ldr	r2, [r7, #0]
 801aa86:	697b      	ldr	r3, [r7, #20]
 801aa88:	1ad3      	subs	r3, r2, r3
 801aa8a:	603b      	str	r3, [r7, #0]
	while (size) {
 801aa8c:	683b      	ldr	r3, [r7, #0]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d1de      	bne.n	801aa50 <_writeData+0x1c>
	}
	return TRUE;
 801aa92:	2301      	movs	r3, #1
}
 801aa94:	4618      	mov	r0, r3
 801aa96:	3724      	adds	r7, #36	; 0x24
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd90      	pop	{r4, r7, pc}

0801aa9c <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b082      	sub	sp, #8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d104      	bne.n	801aab8 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801aaae:	4b18      	ldr	r3, [pc, #96]	; (801ab10 <pifStorageVar_Init+0x74>)
 801aab0:	2201      	movs	r2, #1
 801aab2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801aab4:	2300      	movs	r3, #0
 801aab6:	e027      	b.n	801ab08 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801aab8:	2248      	movs	r2, #72	; 0x48
 801aaba:	2100      	movs	r1, #0
 801aabc:	6878      	ldr	r0, [r7, #4]
 801aabe:	f007 ff11 	bl	80228e4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801aac2:	887b      	ldrh	r3, [r7, #2]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d106      	bne.n	801aad6 <pifStorageVar_Init+0x3a>
 801aac8:	4b12      	ldr	r3, [pc, #72]	; (801ab14 <pifStorageVar_Init+0x78>)
 801aaca:	881b      	ldrh	r3, [r3, #0]
 801aacc:	1c5a      	adds	r2, r3, #1
 801aace:	b291      	uxth	r1, r2
 801aad0:	4a10      	ldr	r2, [pc, #64]	; (801ab14 <pifStorageVar_Init+0x78>)
 801aad2:	8011      	strh	r1, [r2, #0]
 801aad4:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	887a      	ldrh	r2, [r7, #2]
 801aada:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	4a0e      	ldr	r2, [pc, #56]	; (801ab18 <pifStorageVar_Init+0x7c>)
 801aae0:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	4a0d      	ldr	r2, [pc, #52]	; (801ab1c <pifStorageVar_Init+0x80>)
 801aae6:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	4a0d      	ldr	r2, [pc, #52]	; (801ab20 <pifStorageVar_Init+0x84>)
 801aaec:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	4a0c      	ldr	r2, [pc, #48]	; (801ab24 <pifStorageVar_Init+0x88>)
 801aaf2:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	4a0c      	ldr	r2, [pc, #48]	; (801ab28 <pifStorageVar_Init+0x8c>)
 801aaf8:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	4a0b      	ldr	r2, [pc, #44]	; (801ab2c <pifStorageVar_Init+0x90>)
 801aafe:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	4a0b      	ldr	r2, [pc, #44]	; (801ab30 <pifStorageVar_Init+0x94>)
 801ab04:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801ab06:	2301      	movs	r3, #1
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3708      	adds	r7, #8
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	20001bb5 	.word	0x20001bb5
 801ab14:	20000128 	.word	0x20000128
 801ab18:	0801ad5f 	.word	0x0801ad5f
 801ab1c:	0801ad79 	.word	0x0801ad79
 801ab20:	0801af19 	.word	0x0801af19
 801ab24:	0801b1c5 	.word	0x0801b1c5
 801ab28:	0801b2e1 	.word	0x0801b2e1
 801ab2c:	0801b375 	.word	0x0801b375
 801ab30:	0801b3cd 	.word	0x0801b3cd

0801ab34 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d007      	beq.n	801ab54 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f007 feb5 	bl	80228b8 <free>
        p_owner->__p_info_buffer = NULL;
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2200      	movs	r2, #0
 801ab52:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	2200      	movs	r2, #0
 801ab58:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2200      	movs	r2, #0
 801ab64:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	2200      	movs	r2, #0
 801ab70:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	2200      	movs	r2, #0
 801ab76:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801ab7e:	bf00      	nop
 801ab80:	3708      	adds	r7, #8
 801ab82:	46bd      	mov	sp, r7
 801ab84:	bd80      	pop	{r7, pc}
	...

0801ab88 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801ab88:	b590      	push	{r4, r7, lr}
 801ab8a:	b089      	sub	sp, #36	; 0x24
 801ab8c:	af02      	add	r7, sp, #8
 801ab8e:	60f8      	str	r0, [r7, #12]
 801ab90:	607a      	str	r2, [r7, #4]
 801ab92:	461a      	mov	r2, r3
 801ab94:	460b      	mov	r3, r1
 801ab96:	817b      	strh	r3, [r7, #10]
 801ab98:	4613      	mov	r3, r2
 801ab9a:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d008      	beq.n	801abb4 <pifStorageVar_SetMedia+0x2c>
 801aba2:	897b      	ldrh	r3, [r7, #10]
 801aba4:	2b0f      	cmp	r3, #15
 801aba6:	d905      	bls.n	801abb4 <pifStorageVar_SetMedia+0x2c>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d002      	beq.n	801abb4 <pifStorageVar_SetMedia+0x2c>
 801abae:	7a7b      	ldrb	r3, [r7, #9]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d104      	bne.n	801abbe <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801abb4:	4b5c      	ldr	r3, [pc, #368]	; (801ad28 <pifStorageVar_SetMedia+0x1a0>)
 801abb6:	2201      	movs	r2, #1
 801abb8:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801abba:	2300      	movs	r3, #0
 801abbc:	e0af      	b.n	801ad1e <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801abbe:	897b      	ldrh	r3, [r7, #10]
 801abc0:	687a      	ldr	r2, [r7, #4]
 801abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 801abc6:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801abc8:	697b      	ldr	r3, [r7, #20]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d003      	beq.n	801abd6 <pifStorageVar_SetMedia+0x4e>
 801abce:	697b      	ldr	r3, [r7, #20]
 801abd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801abd4:	d304      	bcc.n	801abe0 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801abd6:	4b54      	ldr	r3, [pc, #336]	; (801ad28 <pifStorageVar_SetMedia+0x1a0>)
 801abd8:	2201      	movs	r2, #1
 801abda:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801abdc:	2300      	movs	r3, #0
 801abde:	e09e      	b.n	801ad1e <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801abe0:	7a7a      	ldrb	r2, [r7, #9]
 801abe2:	4613      	mov	r3, r2
 801abe4:	005b      	lsls	r3, r3, #1
 801abe6:	4413      	add	r3, r2
 801abe8:	009b      	lsls	r3, r3, #2
 801abea:	461a      	mov	r2, r3
 801abec:	897b      	ldrh	r3, [r7, #10]
 801abee:	4413      	add	r3, r2
 801abf0:	f103 020f 	add.w	r2, r3, #15
 801abf4:	897b      	ldrh	r3, [r7, #10]
 801abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 801abfa:	b29a      	uxth	r2, r3
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ac04:	461a      	mov	r2, r3
 801ac06:	897b      	ldrh	r3, [r7, #10]
 801ac08:	fb02 f303 	mul.w	r3, r2, r3
 801ac0c:	461a      	mov	r2, r3
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac16:	4619      	mov	r1, r3
 801ac18:	2001      	movs	r0, #1
 801ac1a:	f007 fe13 	bl	8022844 <calloc>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	461a      	mov	r2, r3
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d104      	bne.n	801ac38 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801ac2e:	4b3e      	ldr	r3, [pc, #248]	; (801ad28 <pifStorageVar_SetMedia+0x1a0>)
 801ac30:	2203      	movs	r2, #3
 801ac32:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801ac34:	2300      	movs	r3, #0
 801ac36:	e072      	b.n	801ad1e <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ac40:	897b      	ldrh	r3, [r7, #10]
 801ac42:	9300      	str	r3, [sp, #0]
 801ac44:	4613      	mov	r3, r2
 801ac46:	2200      	movs	r2, #0
 801ac48:	68f8      	ldr	r0, [r7, #12]
 801ac4a:	f7ff fec3 	bl	801a9d4 <_readData>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d108      	bne.n	801ac66 <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801ac54:	4b34      	ldr	r3, [pc, #208]	; (801ad28 <pifStorageVar_SetMedia+0x1a0>)
 801ac56:	220d      	movs	r2, #13
 801ac58:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801ac5a:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d05b      	beq.n	801ad1c <pifStorageVar_SetMedia+0x194>
 801ac64:	e052      	b.n	801ad0c <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac72:	f103 0210 	add.w	r2, r3, #16
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac7e:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801ac80:	693b      	ldr	r3, [r7, #16]
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	2b70      	cmp	r3, #112	; 0x70
 801ac86:	d121      	bne.n	801accc <pifStorageVar_SetMedia+0x144>
 801ac88:	693b      	ldr	r3, [r7, #16]
 801ac8a:	785b      	ldrb	r3, [r3, #1]
 801ac8c:	2b69      	cmp	r3, #105	; 0x69
 801ac8e:	d11d      	bne.n	801accc <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801ac90:	693b      	ldr	r3, [r7, #16]
 801ac92:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801ac94:	2b66      	cmp	r3, #102	; 0x66
 801ac96:	d119      	bne.n	801accc <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	78db      	ldrb	r3, [r3, #3]
 801ac9c:	2b73      	cmp	r3, #115	; 0x73
 801ac9e:	d115      	bne.n	801accc <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801aca0:	693b      	ldr	r3, [r7, #16]
 801aca2:	795b      	ldrb	r3, [r3, #5]
 801aca4:	7a7a      	ldrb	r2, [r7, #9]
 801aca6:	429a      	cmp	r2, r3
 801aca8:	d112      	bne.n	801acd0 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801acaa:	693b      	ldr	r3, [r7, #16]
 801acac:	89dc      	ldrh	r4, [r3, #14]
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acb2:	210a      	movs	r1, #10
 801acb4:	4618      	mov	r0, r3
 801acb6:	f7f6 ff60 	bl	8011b7a <pifCrc16>
 801acba:	4603      	mov	r3, r0
 801acbc:	429c      	cmp	r4, r3
 801acbe:	d109      	bne.n	801acd4 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	2201      	movs	r2, #1
 801acc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801acc8:	2301      	movs	r3, #1
 801acca:	e028      	b.n	801ad1e <pifStorageVar_SetMedia+0x196>
        goto set;
 801accc:	bf00      	nop
 801acce:	e002      	b.n	801acd6 <pifStorageVar_SetMedia+0x14e>
        goto set;
 801acd0:	bf00      	nop
 801acd2:	e000      	b.n	801acd6 <pifStorageVar_SetMedia+0x14e>
        goto set;
 801acd4:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801acd6:	693b      	ldr	r3, [r7, #16]
 801acd8:	2270      	movs	r2, #112	; 0x70
 801acda:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801acdc:	693b      	ldr	r3, [r7, #16]
 801acde:	2269      	movs	r2, #105	; 0x69
 801ace0:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801ace2:	693b      	ldr	r3, [r7, #16]
 801ace4:	2266      	movs	r2, #102	; 0x66
 801ace6:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801ace8:	693b      	ldr	r3, [r7, #16]
 801acea:	2273      	movs	r2, #115	; 0x73
 801acec:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801acee:	693b      	ldr	r3, [r7, #16]
 801acf0:	2201      	movs	r2, #1
 801acf2:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	7a7a      	ldrb	r2, [r7, #9]
 801acf8:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801acfa:	693b      	ldr	r3, [r7, #16]
 801acfc:	897a      	ldrh	r2, [r7, #10]
 801acfe:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801ad00:	697b      	ldr	r3, [r7, #20]
 801ad02:	b29a      	uxth	r2, r3
 801ad04:	693b      	ldr	r3, [r7, #16]
 801ad06:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e008      	b.n	801ad1e <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad10:	4618      	mov	r0, r3
 801ad12:	f007 fdd1 	bl	80228b8 <free>
		p_owner->__p_info_buffer = NULL;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	2200      	movs	r2, #0
 801ad1a:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801ad1c:	2300      	movs	r3, #0
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	371c      	adds	r7, #28
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd90      	pop	{r4, r7, pc}
 801ad26:	bf00      	nop
 801ad28:	20001bb5 	.word	0x20001bb5

0801ad2c <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b086      	sub	sp, #24
 801ad30:	af02      	add	r7, sp, #8
 801ad32:	60f8      	str	r0, [r7, #12]
 801ad34:	60b9      	str	r1, [r7, #8]
 801ad36:	4611      	mov	r1, r2
 801ad38:	461a      	mov	r2, r3
 801ad3a:	460b      	mov	r3, r1
 801ad3c:	71fb      	strb	r3, [r7, #7]
 801ad3e:	4613      	mov	r3, r2
 801ad40:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801ad42:	68f8      	ldr	r0, [r7, #12]
 801ad44:	79b9      	ldrb	r1, [r7, #6]
 801ad46:	79fa      	ldrb	r2, [r7, #7]
 801ad48:	7e3b      	ldrb	r3, [r7, #24]
 801ad4a:	9300      	str	r3, [sp, #0]
 801ad4c:	460b      	mov	r3, r1
 801ad4e:	68b9      	ldr	r1, [r7, #8]
 801ad50:	f7ff fd42 	bl	801a7d8 <pifStorage_AttachI2c>
 801ad54:	4603      	mov	r3, r0
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3710      	adds	r7, #16
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}

0801ad5e <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801ad5e:	b480      	push	{r7}
 801ad60:	b083      	sub	sp, #12
 801ad62:	af00      	add	r7, sp, #0
 801ad64:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	370c      	adds	r7, #12
 801ad70:	46bd      	mov	sp, r7
 801ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad76:	4770      	bx	lr

0801ad78 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801ad78:	b590      	push	{r4, r7, lr}
 801ad7a:	b08d      	sub	sp, #52	; 0x34
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad88:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d104      	bne.n	801ad9a <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801ad90:	4b60      	ldr	r3, [pc, #384]	; (801af14 <pifStorageVar_Format+0x19c>)
 801ad92:	2201      	movs	r2, #1
 801ad94:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801ad96:	2300      	movs	r3, #0
 801ad98:	e0b8      	b.n	801af0c <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801ad9a:	6a3b      	ldr	r3, [r7, #32]
 801ad9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ada0:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801ada2:	6a3b      	ldr	r3, [r7, #32]
 801ada4:	2200      	movs	r2, #0
 801ada6:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801ada8:	210a      	movs	r1, #10
 801adaa:	6a38      	ldr	r0, [r7, #32]
 801adac:	f7f6 fee5 	bl	8011b7a <pifCrc16>
 801adb0:	4603      	mov	r3, r0
 801adb2:	461a      	mov	r2, r3
 801adb4:	6a3b      	ldr	r3, [r7, #32]
 801adb6:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adbc:	f103 0010 	add.w	r0, r3, #16
 801adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adc4:	3b10      	subs	r3, #16
 801adc6:	461a      	mov	r2, r3
 801adc8:	21ff      	movs	r1, #255	; 0xff
 801adca:	f007 fd8b 	bl	80228e4 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801adce:	2300      	movs	r3, #0
 801add0:	62bb      	str	r3, [r7, #40]	; 0x28
 801add2:	e019      	b.n	801ae08 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801add8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801adda:	4613      	mov	r3, r2
 801addc:	005b      	lsls	r3, r3, #1
 801adde:	4413      	add	r3, r2
 801ade0:	009b      	lsls	r3, r3, #2
 801ade2:	440b      	add	r3, r1
 801ade4:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ade8:	b29b      	uxth	r3, r3
 801adea:	3301      	adds	r3, #1
 801adec:	b29a      	uxth	r2, r3
 801adee:	69fb      	ldr	r3, [r7, #28]
 801adf0:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801adf2:	2106      	movs	r1, #6
 801adf4:	69f8      	ldr	r0, [r7, #28]
 801adf6:	f7f6 fec0 	bl	8011b7a <pifCrc16>
 801adfa:	4603      	mov	r3, r0
 801adfc:	461a      	mov	r2, r3
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae04:	3301      	adds	r3, #1
 801ae06:	62bb      	str	r3, [r7, #40]	; 0x28
 801ae08:	6a3b      	ldr	r3, [r7, #32]
 801ae0a:	795b      	ldrb	r3, [r3, #5]
 801ae0c:	3b01      	subs	r3, #1
 801ae0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ae10:	429a      	cmp	r2, r3
 801ae12:	dbdf      	blt.n	801add4 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ae18:	6a3b      	ldr	r3, [r7, #32]
 801ae1a:	795b      	ldrb	r3, [r3, #5]
 801ae1c:	4619      	mov	r1, r3
 801ae1e:	460b      	mov	r3, r1
 801ae20:	005b      	lsls	r3, r3, #1
 801ae22:	440b      	add	r3, r1
 801ae24:	009b      	lsls	r3, r3, #2
 801ae26:	3b0c      	subs	r3, #12
 801ae28:	4413      	add	r3, r2
 801ae2a:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801ae2c:	2106      	movs	r1, #6
 801ae2e:	69f8      	ldr	r0, [r7, #28]
 801ae30:	f7f6 fea3 	bl	8011b7a <pifCrc16>
 801ae34:	4603      	mov	r3, r0
 801ae36:	461a      	mov	r2, r3
 801ae38:	69fb      	ldr	r3, [r7, #28]
 801ae3a:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae44:	2100      	movs	r1, #0
 801ae46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae48:	f7ff fdf4 	bl	801aa34 <_writeData>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d104      	bne.n	801ae5c <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801ae52:	4b30      	ldr	r3, [pc, #192]	; (801af14 <pifStorageVar_Format+0x19c>)
 801ae54:	220d      	movs	r2, #13
 801ae56:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801ae58:	2300      	movs	r3, #0
 801ae5a:	e057      	b.n	801af0c <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801ae6a:	e046      	b.n	801aefa <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801ae6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ae70:	2b10      	cmp	r3, #16
 801ae72:	bf28      	it	cs
 801ae74:	2310      	movcs	r3, #16
 801ae76:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801ae7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801ae80:	7efb      	ldrb	r3, [r7, #27]
 801ae82:	f107 0108 	add.w	r1, r7, #8
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	47a0      	blx	r4
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d104      	bne.n	801ae9a <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801ae90:	4b20      	ldr	r3, [pc, #128]	; (801af14 <pifStorageVar_Format+0x19c>)
 801ae92:	220d      	movs	r2, #13
 801ae94:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801ae96:	2300      	movs	r3, #0
 801ae98:	e038      	b.n	801af0c <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801aea0:	e01a      	b.n	801aed8 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aea6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801aeaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801aeae:	440a      	add	r2, r1
 801aeb0:	4413      	add	r3, r2
 801aeb2:	781a      	ldrb	r2, [r3, #0]
 801aeb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801aeb8:	3330      	adds	r3, #48	; 0x30
 801aeba:	443b      	add	r3, r7
 801aebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d004      	beq.n	801aece <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801aec4:	4b13      	ldr	r3, [pc, #76]	; (801af14 <pifStorageVar_Format+0x19c>)
 801aec6:	220f      	movs	r2, #15
 801aec8:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801aeca:	2300      	movs	r3, #0
 801aecc:	e01e      	b.n	801af0c <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801aece:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801aed2:	3301      	adds	r3, #1
 801aed4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801aed8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801aedc:	7efb      	ldrb	r3, [r7, #27]
 801aede:	429a      	cmp	r2, r3
 801aee0:	d3df      	bcc.n	801aea2 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801aee2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801aee6:	7efb      	ldrb	r3, [r7, #27]
 801aee8:	4413      	add	r3, r2
 801aeea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801aeee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801aef2:	7efb      	ldrb	r3, [r7, #27]
 801aef4:	1ad3      	subs	r3, r2, r3
 801aef6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801aefa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d1b4      	bne.n	801ae6c <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af04:	2201      	movs	r2, #1
 801af06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801af0a:	2301      	movs	r3, #1
}
 801af0c:	4618      	mov	r0, r3
 801af0e:	3734      	adds	r7, #52	; 0x34
 801af10:	46bd      	mov	sp, r7
 801af12:	bd90      	pop	{r4, r7, pc}
 801af14:	20001bb5 	.word	0x20001bb5

0801af18 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b08a      	sub	sp, #40	; 0x28
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
 801af20:	460b      	mov	r3, r1
 801af22:	807b      	strh	r3, [r7, #2]
 801af24:	4613      	mov	r3, r2
 801af26:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801af2c:	69fb      	ldr	r3, [r7, #28]
 801af2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af30:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801af32:	69bb      	ldr	r3, [r7, #24]
 801af34:	88db      	ldrh	r3, [r3, #6]
 801af36:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801af38:	883a      	ldrh	r2, [r7, #0]
 801af3a:	8afb      	ldrh	r3, [r7, #22]
 801af3c:	4413      	add	r3, r2
 801af3e:	1e5a      	subs	r2, r3, #1
 801af40:	8afb      	ldrh	r3, [r7, #22]
 801af42:	fb92 f3f3 	sdiv	r3, r2, r3
 801af46:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801af48:	69fb      	ldr	r3, [r7, #28]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d002      	beq.n	801af54 <pifStorageVar_Create+0x3c>
 801af4e:	887b      	ldrh	r3, [r7, #2]
 801af50:	2bff      	cmp	r3, #255	; 0xff
 801af52:	d104      	bne.n	801af5e <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801af54:	4b9a      	ldr	r3, [pc, #616]	; (801b1c0 <pifStorageVar_Create+0x2a8>)
 801af56:	2201      	movs	r2, #1
 801af58:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801af5a:	2300      	movs	r3, #0
 801af5c:	e12b      	b.n	801b1b6 <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801af5e:	69fb      	ldr	r3, [r7, #28]
 801af60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801af64:	2b00      	cmp	r3, #0
 801af66:	d104      	bne.n	801af72 <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801af68:	4b95      	ldr	r3, [pc, #596]	; (801b1c0 <pifStorageVar_Create+0x2a8>)
 801af6a:	220f      	movs	r2, #15
 801af6c:	701a      	strb	r2, [r3, #0]
		return NULL;
 801af6e:	2300      	movs	r3, #0
 801af70:	e121      	b.n	801b1b6 <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801af72:	69bb      	ldr	r3, [r7, #24]
 801af74:	895b      	ldrh	r3, [r3, #10]
 801af76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af7a:	4293      	cmp	r3, r2
 801af7c:	d127      	bne.n	801afce <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801af7e:	69fb      	ldr	r3, [r7, #28]
 801af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af82:	891b      	ldrh	r3, [r3, #8]
 801af84:	8aba      	ldrh	r2, [r7, #20]
 801af86:	429a      	cmp	r2, r3
 801af88:	d904      	bls.n	801af94 <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801af8a:	4b8d      	ldr	r3, [pc, #564]	; (801b1c0 <pifStorageVar_Create+0x2a8>)
 801af8c:	2204      	movs	r2, #4
 801af8e:	701a      	strb	r2, [r3, #0]
			return NULL;
 801af90:	2300      	movs	r3, #0
 801af92:	e110      	b.n	801b1b6 <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801af94:	69fb      	ldr	r3, [r7, #28]
 801af96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801af98:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801af9a:	69f8      	ldr	r0, [r7, #28]
 801af9c:	f7ff fcf2 	bl	801a984 <_getNewDataNode>
 801afa0:	4603      	mov	r3, r0
 801afa2:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801afa4:	69fb      	ldr	r3, [r7, #28]
 801afa6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801afa8:	89fa      	ldrh	r2, [r7, #14]
 801afaa:	4613      	mov	r3, r2
 801afac:	005b      	lsls	r3, r3, #1
 801afae:	4413      	add	r3, r2
 801afb0:	009b      	lsls	r3, r3, #2
 801afb2:	440b      	add	r3, r1
 801afb4:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801afb6:	69bb      	ldr	r3, [r7, #24]
 801afb8:	895a      	ldrh	r2, [r3, #10]
 801afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afbc:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801afc4:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801afc6:	69bb      	ldr	r3, [r7, #24]
 801afc8:	89fa      	ldrh	r2, [r7, #14]
 801afca:	815a      	strh	r2, [r3, #10]
		goto save;
 801afcc:	e0d1      	b.n	801b172 <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801afce:	69bb      	ldr	r3, [r7, #24]
 801afd0:	895b      	ldrh	r3, [r3, #10]
 801afd2:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801afd4:	69fb      	ldr	r3, [r7, #28]
 801afd6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801afd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801afda:	4613      	mov	r3, r2
 801afdc:	005b      	lsls	r3, r3, #1
 801afde:	4413      	add	r3, r2
 801afe0:	009b      	lsls	r3, r3, #2
 801afe2:	440b      	add	r3, r1
 801afe4:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801afe6:	69fb      	ldr	r3, [r7, #28]
 801afe8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801afea:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801afec:	693b      	ldr	r3, [r7, #16]
 801afee:	889b      	ldrh	r3, [r3, #4]
 801aff0:	8c3a      	ldrh	r2, [r7, #32]
 801aff2:	429a      	cmp	r2, r3
 801aff4:	f000 80b2 	beq.w	801b15c <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801aff8:	693b      	ldr	r3, [r7, #16]
 801affa:	889b      	ldrh	r3, [r3, #4]
 801affc:	461a      	mov	r2, r3
 801affe:	8c3b      	ldrh	r3, [r7, #32]
 801b000:	1ad2      	subs	r2, r2, r3
 801b002:	8abb      	ldrh	r3, [r7, #20]
 801b004:	429a      	cmp	r2, r3
 801b006:	f2c0 80a9 	blt.w	801b15c <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801b00a:	69f8      	ldr	r0, [r7, #28]
 801b00c:	f7ff fcba 	bl	801a984 <_getNewDataNode>
 801b010:	4603      	mov	r3, r0
 801b012:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801b014:	89fb      	ldrh	r3, [r7, #14]
 801b016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b01a:	4293      	cmp	r3, r2
 801b01c:	d101      	bne.n	801b022 <pifStorageVar_Create+0x10a>
 801b01e:	2300      	movs	r3, #0
 801b020:	e0c9      	b.n	801b1b6 <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801b022:	69fb      	ldr	r3, [r7, #28]
 801b024:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b026:	89fa      	ldrh	r2, [r7, #14]
 801b028:	4613      	mov	r3, r2
 801b02a:	005b      	lsls	r3, r3, #1
 801b02c:	4413      	add	r3, r2
 801b02e:	009b      	lsls	r3, r3, #2
 801b030:	440b      	add	r3, r1
 801b032:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801b034:	69bb      	ldr	r3, [r7, #24]
 801b036:	895a      	ldrh	r2, [r3, #10]
 801b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b03a:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b042:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	89fa      	ldrh	r2, [r7, #14]
 801b048:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801b04a:	693b      	ldr	r3, [r7, #16]
 801b04c:	89fa      	ldrh	r2, [r7, #14]
 801b04e:	811a      	strh	r2, [r3, #8]
				goto save;
 801b050:	e08f      	b.n	801b172 <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801b052:	69fb      	ldr	r3, [r7, #28]
 801b054:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b056:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b058:	4613      	mov	r3, r2
 801b05a:	005b      	lsls	r3, r3, #1
 801b05c:	4413      	add	r3, r2
 801b05e:	009b      	lsls	r3, r3, #2
 801b060:	440b      	add	r3, r1
 801b062:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801b064:	693b      	ldr	r3, [r7, #16]
 801b066:	889a      	ldrh	r2, [r3, #4]
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	885b      	ldrh	r3, [r3, #2]
 801b06c:	4619      	mov	r1, r3
 801b06e:	8afb      	ldrh	r3, [r7, #22]
 801b070:	440b      	add	r3, r1
 801b072:	1e59      	subs	r1, r3, #1
 801b074:	8afb      	ldrh	r3, [r7, #22]
 801b076:	fb91 f3f3 	sdiv	r3, r1, r3
 801b07a:	b29b      	uxth	r3, r3
 801b07c:	4413      	add	r3, r2
 801b07e:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801b080:	693b      	ldr	r3, [r7, #16]
 801b082:	88db      	ldrh	r3, [r3, #6]
 801b084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b088:	4293      	cmp	r3, r2
 801b08a:	d127      	bne.n	801b0dc <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801b08c:	69bb      	ldr	r3, [r7, #24]
 801b08e:	891b      	ldrh	r3, [r3, #8]
 801b090:	461a      	mov	r2, r3
 801b092:	8c3b      	ldrh	r3, [r7, #32]
 801b094:	1ad2      	subs	r2, r2, r3
 801b096:	8abb      	ldrh	r3, [r7, #20]
 801b098:	429a      	cmp	r2, r3
 801b09a:	db5c      	blt.n	801b156 <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b09c:	69f8      	ldr	r0, [r7, #28]
 801b09e:	f7ff fc71 	bl	801a984 <_getNewDataNode>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b0a6:	89fb      	ldrh	r3, [r7, #14]
 801b0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d101      	bne.n	801b0b4 <pifStorageVar_Create+0x19c>
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	e080      	b.n	801b1b6 <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b0b4:	69fb      	ldr	r3, [r7, #28]
 801b0b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b0b8:	89fa      	ldrh	r2, [r7, #14]
 801b0ba:	4613      	mov	r3, r2
 801b0bc:	005b      	lsls	r3, r3, #1
 801b0be:	4413      	add	r3, r2
 801b0c0:	009b      	lsls	r3, r3, #2
 801b0c2:	440b      	add	r3, r1
 801b0c4:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b0c6:	693b      	ldr	r3, [r7, #16]
 801b0c8:	88da      	ldrh	r2, [r3, #6]
 801b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0cc:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b0d2:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801b0d4:	693b      	ldr	r3, [r7, #16]
 801b0d6:	89fa      	ldrh	r2, [r7, #14]
 801b0d8:	80da      	strh	r2, [r3, #6]
					goto save;
 801b0da:	e04a      	b.n	801b172 <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801b0dc:	69fb      	ldr	r3, [r7, #28]
 801b0de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b0e0:	693b      	ldr	r3, [r7, #16]
 801b0e2:	88db      	ldrh	r3, [r3, #6]
 801b0e4:	4619      	mov	r1, r3
 801b0e6:	460b      	mov	r3, r1
 801b0e8:	005b      	lsls	r3, r3, #1
 801b0ea:	440b      	add	r3, r1
 801b0ec:	009b      	lsls	r3, r3, #2
 801b0ee:	4413      	add	r3, r2
 801b0f0:	889b      	ldrh	r3, [r3, #4]
 801b0f2:	461a      	mov	r2, r3
 801b0f4:	8c3b      	ldrh	r3, [r7, #32]
 801b0f6:	1ad2      	subs	r2, r2, r3
 801b0f8:	8abb      	ldrh	r3, [r7, #20]
 801b0fa:	429a      	cmp	r2, r3
 801b0fc:	db2b      	blt.n	801b156 <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b0fe:	69f8      	ldr	r0, [r7, #28]
 801b100:	f7ff fc40 	bl	801a984 <_getNewDataNode>
 801b104:	4603      	mov	r3, r0
 801b106:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b108:	89fb      	ldrh	r3, [r7, #14]
 801b10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b10e:	4293      	cmp	r3, r2
 801b110:	d101      	bne.n	801b116 <pifStorageVar_Create+0x1fe>
 801b112:	2300      	movs	r3, #0
 801b114:	e04f      	b.n	801b1b6 <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b116:	69fb      	ldr	r3, [r7, #28]
 801b118:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b11a:	89fa      	ldrh	r2, [r7, #14]
 801b11c:	4613      	mov	r3, r2
 801b11e:	005b      	lsls	r3, r3, #1
 801b120:	4413      	add	r3, r2
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	440b      	add	r3, r1
 801b126:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b128:	693b      	ldr	r3, [r7, #16]
 801b12a:	88da      	ldrh	r2, [r3, #6]
 801b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b12e:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b132:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b134:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801b136:	69fb      	ldr	r3, [r7, #28]
 801b138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	88db      	ldrh	r3, [r3, #6]
 801b13e:	4619      	mov	r1, r3
 801b140:	460b      	mov	r3, r1
 801b142:	005b      	lsls	r3, r3, #1
 801b144:	440b      	add	r3, r1
 801b146:	009b      	lsls	r3, r3, #2
 801b148:	4413      	add	r3, r2
 801b14a:	89fa      	ldrh	r2, [r7, #14]
 801b14c:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	89fa      	ldrh	r2, [r7, #14]
 801b152:	80da      	strh	r2, [r3, #6]
					goto save;
 801b154:	e00d      	b.n	801b172 <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	88db      	ldrh	r3, [r3, #6]
 801b15a:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801b15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b162:	4293      	cmp	r3, r2
 801b164:	f47f af75 	bne.w	801b052 <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801b168:	4b15      	ldr	r3, [pc, #84]	; (801b1c0 <pifStorageVar_Create+0x2a8>)
 801b16a:	2204      	movs	r2, #4
 801b16c:	701a      	strb	r2, [r3, #0]
	return NULL;
 801b16e:	2300      	movs	r3, #0
 801b170:	e021      	b.n	801b1b6 <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b174:	887a      	ldrh	r2, [r7, #2]
 801b176:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b17a:	883a      	ldrh	r2, [r7, #0]
 801b17c:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b180:	8c3a      	ldrh	r2, [r7, #32]
 801b182:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801b184:	2106      	movs	r1, #6
 801b186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b188:	f7f6 fcf7 	bl	8011b7a <pifCrc16>
 801b18c:	4603      	mov	r3, r0
 801b18e:	461a      	mov	r2, r3
 801b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b192:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b194:	69fb      	ldr	r3, [r7, #28]
 801b196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b198:	69fb      	ldr	r3, [r7, #28]
 801b19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b19c:	2100      	movs	r1, #0
 801b19e:	69f8      	ldr	r0, [r7, #28]
 801b1a0:	f7ff fc48 	bl	801aa34 <_writeData>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d104      	bne.n	801b1b4 <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801b1aa:	4b05      	ldr	r3, [pc, #20]	; (801b1c0 <pifStorageVar_Create+0x2a8>)
 801b1ac:	220d      	movs	r2, #13
 801b1ae:	701a      	strb	r2, [r3, #0]
        return NULL;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	e000      	b.n	801b1b6 <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3728      	adds	r7, #40	; 0x28
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	20001bb5 	.word	0x20001bb5

0801b1c4 <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b086      	sub	sp, #24
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1d8:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d104      	bne.n	801b1ee <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801b1e4:	4b3d      	ldr	r3, [pc, #244]	; (801b2dc <pifStorageVar_Delete+0x118>)
 801b1e6:	220f      	movs	r2, #15
 801b1e8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	e072      	b.n	801b2d4 <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	895b      	ldrh	r3, [r3, #10]
 801b1f2:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b1f4:	e065      	b.n	801b2c2 <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801b1f6:	693b      	ldr	r3, [r7, #16]
 801b1f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b1fa:	8afa      	ldrh	r2, [r7, #22]
 801b1fc:	4613      	mov	r3, r2
 801b1fe:	005b      	lsls	r3, r3, #1
 801b200:	4413      	add	r3, r2
 801b202:	009b      	lsls	r3, r3, #2
 801b204:	440b      	add	r3, r1
 801b206:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	881b      	ldrh	r3, [r3, #0]
 801b20c:	887a      	ldrh	r2, [r7, #2]
 801b20e:	429a      	cmp	r2, r3
 801b210:	d154      	bne.n	801b2bc <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801b212:	2206      	movs	r2, #6
 801b214:	21ff      	movs	r1, #255	; 0xff
 801b216:	68b8      	ldr	r0, [r7, #8]
 801b218:	f007 fb64 	bl	80228e4 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	891b      	ldrh	r3, [r3, #8]
 801b220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b224:	4293      	cmp	r3, r2
 801b226:	d00d      	beq.n	801b244 <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b22c:	68bb      	ldr	r3, [r7, #8]
 801b22e:	891b      	ldrh	r3, [r3, #8]
 801b230:	4619      	mov	r1, r3
 801b232:	460b      	mov	r3, r1
 801b234:	005b      	lsls	r3, r3, #1
 801b236:	440b      	add	r3, r1
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	4413      	add	r3, r2
 801b23c:	68ba      	ldr	r2, [r7, #8]
 801b23e:	88d2      	ldrh	r2, [r2, #6]
 801b240:	80da      	strh	r2, [r3, #6]
 801b242:	e003      	b.n	801b24c <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	88da      	ldrh	r2, [r3, #6]
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	88db      	ldrh	r3, [r3, #6]
 801b250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b254:	4293      	cmp	r3, r2
 801b256:	d00c      	beq.n	801b272 <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801b258:	693b      	ldr	r3, [r7, #16]
 801b25a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b25c:	68bb      	ldr	r3, [r7, #8]
 801b25e:	88db      	ldrh	r3, [r3, #6]
 801b260:	4619      	mov	r1, r3
 801b262:	460b      	mov	r3, r1
 801b264:	005b      	lsls	r3, r3, #1
 801b266:	440b      	add	r3, r1
 801b268:	009b      	lsls	r3, r3, #2
 801b26a:	4413      	add	r3, r2
 801b26c:	68ba      	ldr	r2, [r7, #8]
 801b26e:	8912      	ldrh	r2, [r2, #8]
 801b270:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	899a      	ldrh	r2, [r3, #12]
 801b276:	68bb      	ldr	r3, [r7, #8]
 801b278:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801b27a:	68bb      	ldr	r3, [r7, #8]
 801b27c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b280:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b282:	2106      	movs	r1, #6
 801b284:	68b8      	ldr	r0, [r7, #8]
 801b286:	f7f6 fc78 	bl	8011b7a <pifCrc16>
 801b28a:	4603      	mov	r3, r0
 801b28c:	461a      	mov	r2, r3
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	8afa      	ldrh	r2, [r7, #22]
 801b296:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b298:	693b      	ldr	r3, [r7, #16]
 801b29a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b29c:	693b      	ldr	r3, [r7, #16]
 801b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2a0:	2100      	movs	r1, #0
 801b2a2:	6938      	ldr	r0, [r7, #16]
 801b2a4:	f7ff fbc6 	bl	801aa34 <_writeData>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d104      	bne.n	801b2b8 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801b2ae:	4b0b      	ldr	r3, [pc, #44]	; (801b2dc <pifStorageVar_Delete+0x118>)
 801b2b0:	220d      	movs	r2, #13
 801b2b2:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	e00d      	b.n	801b2d4 <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801b2b8:	2301      	movs	r3, #1
 801b2ba:	e00b      	b.n	801b2d4 <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	88db      	ldrh	r3, [r3, #6]
 801b2c0:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b2c2:	8afb      	ldrh	r3, [r7, #22]
 801b2c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	d194      	bne.n	801b1f6 <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801b2cc:	4b03      	ldr	r3, [pc, #12]	; (801b2dc <pifStorageVar_Delete+0x118>)
 801b2ce:	220e      	movs	r2, #14
 801b2d0:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801b2d2:	2300      	movs	r3, #0
}
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	3718      	adds	r7, #24
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}
 801b2dc:	20001bb5 	.word	0x20001bb5

0801b2e0 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801b2e0:	b590      	push	{r4, r7, lr}
 801b2e2:	b087      	sub	sp, #28
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	460b      	mov	r3, r1
 801b2ea:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2f4:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801b2f6:	693b      	ldr	r3, [r7, #16]
 801b2f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d104      	bne.n	801b30a <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801b300:	4b1b      	ldr	r3, [pc, #108]	; (801b370 <pifStorageVar_Open+0x90>)
 801b302:	220f      	movs	r2, #15
 801b304:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b306:	2300      	movs	r3, #0
 801b308:	e02d      	b.n	801b366 <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	895b      	ldrh	r3, [r3, #10]
 801b30e:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b310:	e020      	b.n	801b354 <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801b312:	693b      	ldr	r3, [r7, #16]
 801b314:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b316:	8afa      	ldrh	r2, [r7, #22]
 801b318:	4613      	mov	r3, r2
 801b31a:	005b      	lsls	r3, r3, #1
 801b31c:	4413      	add	r3, r2
 801b31e:	009b      	lsls	r3, r3, #2
 801b320:	440b      	add	r3, r1
 801b322:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	881b      	ldrh	r3, [r3, #0]
 801b328:	887a      	ldrh	r2, [r7, #2]
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d10f      	bne.n	801b34e <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	895c      	ldrh	r4, [r3, #10]
 801b332:	2106      	movs	r1, #6
 801b334:	68b8      	ldr	r0, [r7, #8]
 801b336:	f7f6 fc20 	bl	8011b7a <pifCrc16>
 801b33a:	4603      	mov	r3, r0
 801b33c:	429c      	cmp	r4, r3
 801b33e:	d004      	beq.n	801b34a <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801b340:	4b0b      	ldr	r3, [pc, #44]	; (801b370 <pifStorageVar_Open+0x90>)
 801b342:	220c      	movs	r2, #12
 801b344:	701a      	strb	r2, [r3, #0]
				return NULL;
 801b346:	2300      	movs	r3, #0
 801b348:	e00d      	b.n	801b366 <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801b34a:	68bb      	ldr	r3, [r7, #8]
 801b34c:	e00b      	b.n	801b366 <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	88db      	ldrh	r3, [r3, #6]
 801b352:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b354:	8afb      	ldrh	r3, [r7, #22]
 801b356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b35a:	4293      	cmp	r3, r2
 801b35c:	d1d9      	bne.n	801b312 <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801b35e:	4b04      	ldr	r3, [pc, #16]	; (801b370 <pifStorageVar_Open+0x90>)
 801b360:	220e      	movs	r2, #14
 801b362:	701a      	strb	r2, [r3, #0]
	return NULL;
 801b364:	2300      	movs	r3, #0
}
 801b366:	4618      	mov	r0, r3
 801b368:	371c      	adds	r7, #28
 801b36a:	46bd      	mov	sp, r7
 801b36c:	bd90      	pop	{r4, r7, pc}
 801b36e:	bf00      	nop
 801b370:	20001bb5 	.word	0x20001bb5

0801b374 <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b088      	sub	sp, #32
 801b378:	af02      	add	r7, sp, #8
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	607a      	str	r2, [r7, #4]
 801b380:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d104      	bne.n	801b39a <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801b390:	4b0d      	ldr	r3, [pc, #52]	; (801b3c8 <pifStorageVar_Read+0x54>)
 801b392:	220f      	movs	r2, #15
 801b394:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b396:	2300      	movs	r3, #0
 801b398:	e012      	b.n	801b3c0 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	889b      	ldrh	r3, [r3, #4]
 801b39e:	461a      	mov	r2, r3
 801b3a0:	697b      	ldr	r3, [r7, #20]
 801b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3a4:	88db      	ldrh	r3, [r3, #6]
 801b3a6:	fb02 f303 	mul.w	r3, r2, r3
 801b3aa:	461a      	mov	r2, r3
 801b3ac:	697b      	ldr	r3, [r7, #20]
 801b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3b0:	88db      	ldrh	r3, [r3, #6]
 801b3b2:	9300      	str	r3, [sp, #0]
 801b3b4:	683b      	ldr	r3, [r7, #0]
 801b3b6:	68b9      	ldr	r1, [r7, #8]
 801b3b8:	6978      	ldr	r0, [r7, #20]
 801b3ba:	f7ff fb0b 	bl	801a9d4 <_readData>
 801b3be:	4603      	mov	r3, r0
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	3718      	adds	r7, #24
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd80      	pop	{r7, pc}
 801b3c8:	20001bb5 	.word	0x20001bb5

0801b3cc <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b086      	sub	sp, #24
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	60f8      	str	r0, [r7, #12]
 801b3d4:	60b9      	str	r1, [r7, #8]
 801b3d6:	607a      	str	r2, [r7, #4]
 801b3d8:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801b3de:	697b      	ldr	r3, [r7, #20]
 801b3e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d104      	bne.n	801b3f2 <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801b3e8:	4b0b      	ldr	r3, [pc, #44]	; (801b418 <pifStorageVar_Write+0x4c>)
 801b3ea:	220f      	movs	r2, #15
 801b3ec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	e00e      	b.n	801b410 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	889b      	ldrh	r3, [r3, #4]
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	697b      	ldr	r3, [r7, #20]
 801b3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3fc:	88db      	ldrh	r3, [r3, #6]
 801b3fe:	fb02 f303 	mul.w	r3, r2, r3
 801b402:	4619      	mov	r1, r3
 801b404:	683b      	ldr	r3, [r7, #0]
 801b406:	687a      	ldr	r2, [r7, #4]
 801b408:	6978      	ldr	r0, [r7, #20]
 801b40a:	f7ff fb13 	bl	801aa34 <_writeData>
 801b40e:	4603      	mov	r3, r0
}
 801b410:	4618      	mov	r0, r3
 801b412:	3718      	adds	r7, #24
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	20001bb5 	.word	0x20001bb5

0801b41c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801b420:	4b0e      	ldr	r3, [pc, #56]	; (801b45c <HAL_Init+0x40>)
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	4a0d      	ldr	r2, [pc, #52]	; (801b45c <HAL_Init+0x40>)
 801b426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b42a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801b42c:	4b0b      	ldr	r3, [pc, #44]	; (801b45c <HAL_Init+0x40>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	4a0a      	ldr	r2, [pc, #40]	; (801b45c <HAL_Init+0x40>)
 801b432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801b438:	4b08      	ldr	r3, [pc, #32]	; (801b45c <HAL_Init+0x40>)
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	4a07      	ldr	r2, [pc, #28]	; (801b45c <HAL_Init+0x40>)
 801b43e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b444:	2003      	movs	r0, #3
 801b446:	f000 fd51 	bl	801beec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801b44a:	2000      	movs	r0, #0
 801b44c:	f000 f808 	bl	801b460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801b450:	f7e8 f858 	bl	8003504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801b454:	2300      	movs	r3, #0
}
 801b456:	4618      	mov	r0, r3
 801b458:	bd80      	pop	{r7, pc}
 801b45a:	bf00      	nop
 801b45c:	40023c00 	.word	0x40023c00

0801b460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b082      	sub	sp, #8
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801b468:	4b12      	ldr	r3, [pc, #72]	; (801b4b4 <HAL_InitTick+0x54>)
 801b46a:	681a      	ldr	r2, [r3, #0]
 801b46c:	4b12      	ldr	r3, [pc, #72]	; (801b4b8 <HAL_InitTick+0x58>)
 801b46e:	781b      	ldrb	r3, [r3, #0]
 801b470:	4619      	mov	r1, r3
 801b472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b476:	fbb3 f3f1 	udiv	r3, r3, r1
 801b47a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b47e:	4618      	mov	r0, r3
 801b480:	f000 fd77 	bl	801bf72 <HAL_SYSTICK_Config>
 801b484:	4603      	mov	r3, r0
 801b486:	2b00      	cmp	r3, #0
 801b488:	d001      	beq.n	801b48e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801b48a:	2301      	movs	r3, #1
 801b48c:	e00e      	b.n	801b4ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	2b0f      	cmp	r3, #15
 801b492:	d80a      	bhi.n	801b4aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b494:	2200      	movs	r2, #0
 801b496:	6879      	ldr	r1, [r7, #4]
 801b498:	f04f 30ff 	mov.w	r0, #4294967295
 801b49c:	f000 fd31 	bl	801bf02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801b4a0:	4a06      	ldr	r2, [pc, #24]	; (801b4bc <HAL_InitTick+0x5c>)
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	e000      	b.n	801b4ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801b4aa:	2301      	movs	r3, #1
}
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3708      	adds	r7, #8
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}
 801b4b4:	20000020 	.word	0x20000020
 801b4b8:	20000160 	.word	0x20000160
 801b4bc:	2000015c 	.word	0x2000015c

0801b4c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b4c0:	b480      	push	{r7}
 801b4c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801b4c4:	4b06      	ldr	r3, [pc, #24]	; (801b4e0 <HAL_IncTick+0x20>)
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	461a      	mov	r2, r3
 801b4ca:	4b06      	ldr	r3, [pc, #24]	; (801b4e4 <HAL_IncTick+0x24>)
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	4413      	add	r3, r2
 801b4d0:	4a04      	ldr	r2, [pc, #16]	; (801b4e4 <HAL_IncTick+0x24>)
 801b4d2:	6013      	str	r3, [r2, #0]
}
 801b4d4:	bf00      	nop
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4dc:	4770      	bx	lr
 801b4de:	bf00      	nop
 801b4e0:	20000160 	.word	0x20000160
 801b4e4:	20001d68 	.word	0x20001d68

0801b4e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	af00      	add	r7, sp, #0
  return uwTick;
 801b4ec:	4b03      	ldr	r3, [pc, #12]	; (801b4fc <HAL_GetTick+0x14>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
}
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f8:	4770      	bx	lr
 801b4fa:	bf00      	nop
 801b4fc:	20001d68 	.word	0x20001d68

0801b500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b084      	sub	sp, #16
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801b508:	2300      	movs	r3, #0
 801b50a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d101      	bne.n	801b516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801b512:	2301      	movs	r3, #1
 801b514:	e033      	b.n	801b57e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d109      	bne.n	801b532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801b51e:	6878      	ldr	r0, [r7, #4]
 801b520:	f7e8 f818 	bl	8003554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	2200      	movs	r2, #0
 801b528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2200      	movs	r2, #0
 801b52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b536:	f003 0310 	and.w	r3, r3, #16
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d118      	bne.n	801b570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b546:	f023 0302 	bic.w	r3, r3, #2
 801b54a:	f043 0202 	orr.w	r2, r3, #2
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f000 fa58 	bl	801ba08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	2200      	movs	r2, #0
 801b55c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b562:	f023 0303 	bic.w	r3, r3, #3
 801b566:	f043 0201 	orr.w	r2, r3, #1
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	641a      	str	r2, [r3, #64]	; 0x40
 801b56e:	e001      	b.n	801b574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801b570:	2301      	movs	r3, #1
 801b572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	2200      	movs	r2, #0
 801b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3710      	adds	r7, #16
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
	...

0801b588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b086      	sub	sp, #24
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801b594:	2300      	movs	r3, #0
 801b596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b59e:	2b01      	cmp	r3, #1
 801b5a0:	d101      	bne.n	801b5a6 <HAL_ADC_Start_DMA+0x1e>
 801b5a2:	2302      	movs	r3, #2
 801b5a4:	e0ce      	b.n	801b744 <HAL_ADC_Start_DMA+0x1bc>
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	2201      	movs	r2, #1
 801b5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	689b      	ldr	r3, [r3, #8]
 801b5b4:	f003 0301 	and.w	r3, r3, #1
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d018      	beq.n	801b5ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	689a      	ldr	r2, [r3, #8]
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f042 0201 	orr.w	r2, r2, #1
 801b5ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801b5cc:	4b5f      	ldr	r3, [pc, #380]	; (801b74c <HAL_ADC_Start_DMA+0x1c4>)
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	4a5f      	ldr	r2, [pc, #380]	; (801b750 <HAL_ADC_Start_DMA+0x1c8>)
 801b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 801b5d6:	0c9a      	lsrs	r2, r3, #18
 801b5d8:	4613      	mov	r3, r2
 801b5da:	005b      	lsls	r3, r3, #1
 801b5dc:	4413      	add	r3, r2
 801b5de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801b5e0:	e002      	b.n	801b5e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	3b01      	subs	r3, #1
 801b5e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d1f9      	bne.n	801b5e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	689b      	ldr	r3, [r3, #8]
 801b5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b5f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b5fc:	d107      	bne.n	801b60e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	689a      	ldr	r2, [r3, #8]
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b60c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	689b      	ldr	r3, [r3, #8]
 801b614:	f003 0301 	and.w	r3, r3, #1
 801b618:	2b01      	cmp	r3, #1
 801b61a:	f040 8086 	bne.w	801b72a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801b626:	f023 0301 	bic.w	r3, r3, #1
 801b62a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	685b      	ldr	r3, [r3, #4]
 801b638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d007      	beq.n	801b650 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801b648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b65c:	d106      	bne.n	801b66c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b662:	f023 0206 	bic.w	r2, r3, #6
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	645a      	str	r2, [r3, #68]	; 0x44
 801b66a:	e002      	b.n	801b672 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	2200      	movs	r2, #0
 801b670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	2200      	movs	r2, #0
 801b676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801b67a:	4b36      	ldr	r3, [pc, #216]	; (801b754 <HAL_ADC_Start_DMA+0x1cc>)
 801b67c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b682:	4a35      	ldr	r2, [pc, #212]	; (801b758 <HAL_ADC_Start_DMA+0x1d0>)
 801b684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b68a:	4a34      	ldr	r2, [pc, #208]	; (801b75c <HAL_ADC_Start_DMA+0x1d4>)
 801b68c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b692:	4a33      	ldr	r2, [pc, #204]	; (801b760 <HAL_ADC_Start_DMA+0x1d8>)
 801b694:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801b69e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	685a      	ldr	r2, [r3, #4]
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801b6ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	689a      	ldr	r2, [r3, #8]
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b6be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	334c      	adds	r3, #76	; 0x4c
 801b6ca:	4619      	mov	r1, r3
 801b6cc:	68ba      	ldr	r2, [r7, #8]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	f000 fd0a 	bl	801c0e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	685b      	ldr	r3, [r3, #4]
 801b6d8:	f003 031f 	and.w	r3, r3, #31
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d10f      	bne.n	801b700 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	689b      	ldr	r3, [r3, #8]
 801b6e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d129      	bne.n	801b742 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	689a      	ldr	r2, [r3, #8]
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801b6fc:	609a      	str	r2, [r3, #8]
 801b6fe:	e020      	b.n	801b742 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a17      	ldr	r2, [pc, #92]	; (801b764 <HAL_ADC_Start_DMA+0x1dc>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d11b      	bne.n	801b742 <HAL_ADC_Start_DMA+0x1ba>
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	689b      	ldr	r3, [r3, #8]
 801b710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b714:	2b00      	cmp	r3, #0
 801b716:	d114      	bne.n	801b742 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	689a      	ldr	r2, [r3, #8]
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801b726:	609a      	str	r2, [r3, #8]
 801b728:	e00b      	b.n	801b742 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b72e:	f043 0210 	orr.w	r2, r3, #16
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b73a:	f043 0201 	orr.w	r2, r3, #1
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801b742:	2300      	movs	r3, #0
}
 801b744:	4618      	mov	r0, r3
 801b746:	3718      	adds	r7, #24
 801b748:	46bd      	mov	sp, r7
 801b74a:	bd80      	pop	{r7, pc}
 801b74c:	20000020 	.word	0x20000020
 801b750:	431bde83 	.word	0x431bde83
 801b754:	40012300 	.word	0x40012300
 801b758:	0801bc01 	.word	0x0801bc01
 801b75c:	0801bcbb 	.word	0x0801bcbb
 801b760:	0801bcd7 	.word	0x0801bcd7
 801b764:	40012000 	.word	0x40012000

0801b768 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801b768:	b480      	push	{r7}
 801b76a:	b083      	sub	sp, #12
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801b770:	bf00      	nop
 801b772:	370c      	adds	r7, #12
 801b774:	46bd      	mov	sp, r7
 801b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b77a:	4770      	bx	lr

0801b77c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801b77c:	b480      	push	{r7}
 801b77e:	b083      	sub	sp, #12
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801b784:	bf00      	nop
 801b786:	370c      	adds	r7, #12
 801b788:	46bd      	mov	sp, r7
 801b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78e:	4770      	bx	lr

0801b790 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801b790:	b480      	push	{r7}
 801b792:	b083      	sub	sp, #12
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801b798:	bf00      	nop
 801b79a:	370c      	adds	r7, #12
 801b79c:	46bd      	mov	sp, r7
 801b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a2:	4770      	bx	lr

0801b7a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801b7a4:	b480      	push	{r7}
 801b7a6:	b085      	sub	sp, #20
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
 801b7ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b7b8:	2b01      	cmp	r3, #1
 801b7ba:	d101      	bne.n	801b7c0 <HAL_ADC_ConfigChannel+0x1c>
 801b7bc:	2302      	movs	r3, #2
 801b7be:	e113      	b.n	801b9e8 <HAL_ADC_ConfigChannel+0x244>
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801b7c8:	683b      	ldr	r3, [r7, #0]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	2b09      	cmp	r3, #9
 801b7ce:	d925      	bls.n	801b81c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	68d9      	ldr	r1, [r3, #12]
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	b29b      	uxth	r3, r3
 801b7dc:	461a      	mov	r2, r3
 801b7de:	4613      	mov	r3, r2
 801b7e0:	005b      	lsls	r3, r3, #1
 801b7e2:	4413      	add	r3, r2
 801b7e4:	3b1e      	subs	r3, #30
 801b7e6:	2207      	movs	r2, #7
 801b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ec:	43da      	mvns	r2, r3
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	400a      	ands	r2, r1
 801b7f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	68d9      	ldr	r1, [r3, #12]
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	689a      	ldr	r2, [r3, #8]
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	b29b      	uxth	r3, r3
 801b806:	4618      	mov	r0, r3
 801b808:	4603      	mov	r3, r0
 801b80a:	005b      	lsls	r3, r3, #1
 801b80c:	4403      	add	r3, r0
 801b80e:	3b1e      	subs	r3, #30
 801b810:	409a      	lsls	r2, r3
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	430a      	orrs	r2, r1
 801b818:	60da      	str	r2, [r3, #12]
 801b81a:	e022      	b.n	801b862 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	6919      	ldr	r1, [r3, #16]
 801b822:	683b      	ldr	r3, [r7, #0]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	b29b      	uxth	r3, r3
 801b828:	461a      	mov	r2, r3
 801b82a:	4613      	mov	r3, r2
 801b82c:	005b      	lsls	r3, r3, #1
 801b82e:	4413      	add	r3, r2
 801b830:	2207      	movs	r2, #7
 801b832:	fa02 f303 	lsl.w	r3, r2, r3
 801b836:	43da      	mvns	r2, r3
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	400a      	ands	r2, r1
 801b83e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	6919      	ldr	r1, [r3, #16]
 801b846:	683b      	ldr	r3, [r7, #0]
 801b848:	689a      	ldr	r2, [r3, #8]
 801b84a:	683b      	ldr	r3, [r7, #0]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	b29b      	uxth	r3, r3
 801b850:	4618      	mov	r0, r3
 801b852:	4603      	mov	r3, r0
 801b854:	005b      	lsls	r3, r3, #1
 801b856:	4403      	add	r3, r0
 801b858:	409a      	lsls	r2, r3
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	430a      	orrs	r2, r1
 801b860:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801b862:	683b      	ldr	r3, [r7, #0]
 801b864:	685b      	ldr	r3, [r3, #4]
 801b866:	2b06      	cmp	r3, #6
 801b868:	d824      	bhi.n	801b8b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801b870:	683b      	ldr	r3, [r7, #0]
 801b872:	685a      	ldr	r2, [r3, #4]
 801b874:	4613      	mov	r3, r2
 801b876:	009b      	lsls	r3, r3, #2
 801b878:	4413      	add	r3, r2
 801b87a:	3b05      	subs	r3, #5
 801b87c:	221f      	movs	r2, #31
 801b87e:	fa02 f303 	lsl.w	r3, r2, r3
 801b882:	43da      	mvns	r2, r3
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	400a      	ands	r2, r1
 801b88a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	b29b      	uxth	r3, r3
 801b898:	4618      	mov	r0, r3
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	685a      	ldr	r2, [r3, #4]
 801b89e:	4613      	mov	r3, r2
 801b8a0:	009b      	lsls	r3, r3, #2
 801b8a2:	4413      	add	r3, r2
 801b8a4:	3b05      	subs	r3, #5
 801b8a6:	fa00 f203 	lsl.w	r2, r0, r3
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	430a      	orrs	r2, r1
 801b8b0:	635a      	str	r2, [r3, #52]	; 0x34
 801b8b2:	e04c      	b.n	801b94e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801b8b4:	683b      	ldr	r3, [r7, #0]
 801b8b6:	685b      	ldr	r3, [r3, #4]
 801b8b8:	2b0c      	cmp	r3, #12
 801b8ba:	d824      	bhi.n	801b906 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	685a      	ldr	r2, [r3, #4]
 801b8c6:	4613      	mov	r3, r2
 801b8c8:	009b      	lsls	r3, r3, #2
 801b8ca:	4413      	add	r3, r2
 801b8cc:	3b23      	subs	r3, #35	; 0x23
 801b8ce:	221f      	movs	r2, #31
 801b8d0:	fa02 f303 	lsl.w	r3, r2, r3
 801b8d4:	43da      	mvns	r2, r3
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	400a      	ands	r2, r1
 801b8dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	b29b      	uxth	r3, r3
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	683b      	ldr	r3, [r7, #0]
 801b8ee:	685a      	ldr	r2, [r3, #4]
 801b8f0:	4613      	mov	r3, r2
 801b8f2:	009b      	lsls	r3, r3, #2
 801b8f4:	4413      	add	r3, r2
 801b8f6:	3b23      	subs	r3, #35	; 0x23
 801b8f8:	fa00 f203 	lsl.w	r2, r0, r3
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	430a      	orrs	r2, r1
 801b902:	631a      	str	r2, [r3, #48]	; 0x30
 801b904:	e023      	b.n	801b94e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	685a      	ldr	r2, [r3, #4]
 801b910:	4613      	mov	r3, r2
 801b912:	009b      	lsls	r3, r3, #2
 801b914:	4413      	add	r3, r2
 801b916:	3b41      	subs	r3, #65	; 0x41
 801b918:	221f      	movs	r2, #31
 801b91a:	fa02 f303 	lsl.w	r3, r2, r3
 801b91e:	43da      	mvns	r2, r3
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	400a      	ands	r2, r1
 801b926:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	b29b      	uxth	r3, r3
 801b934:	4618      	mov	r0, r3
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	685a      	ldr	r2, [r3, #4]
 801b93a:	4613      	mov	r3, r2
 801b93c:	009b      	lsls	r3, r3, #2
 801b93e:	4413      	add	r3, r2
 801b940:	3b41      	subs	r3, #65	; 0x41
 801b942:	fa00 f203 	lsl.w	r2, r0, r3
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	430a      	orrs	r2, r1
 801b94c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801b94e:	4b29      	ldr	r3, [pc, #164]	; (801b9f4 <HAL_ADC_ConfigChannel+0x250>)
 801b950:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	4a28      	ldr	r2, [pc, #160]	; (801b9f8 <HAL_ADC_ConfigChannel+0x254>)
 801b958:	4293      	cmp	r3, r2
 801b95a:	d10f      	bne.n	801b97c <HAL_ADC_ConfigChannel+0x1d8>
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	2b12      	cmp	r3, #18
 801b962:	d10b      	bne.n	801b97c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	685b      	ldr	r3, [r3, #4]
 801b968:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	685b      	ldr	r3, [r3, #4]
 801b974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	4a1d      	ldr	r2, [pc, #116]	; (801b9f8 <HAL_ADC_ConfigChannel+0x254>)
 801b982:	4293      	cmp	r3, r2
 801b984:	d12b      	bne.n	801b9de <HAL_ADC_ConfigChannel+0x23a>
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	4a1c      	ldr	r2, [pc, #112]	; (801b9fc <HAL_ADC_ConfigChannel+0x258>)
 801b98c:	4293      	cmp	r3, r2
 801b98e:	d003      	beq.n	801b998 <HAL_ADC_ConfigChannel+0x1f4>
 801b990:	683b      	ldr	r3, [r7, #0]
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	2b11      	cmp	r3, #17
 801b996:	d122      	bne.n	801b9de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	4a11      	ldr	r2, [pc, #68]	; (801b9fc <HAL_ADC_ConfigChannel+0x258>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d111      	bne.n	801b9de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801b9ba:	4b11      	ldr	r3, [pc, #68]	; (801ba00 <HAL_ADC_ConfigChannel+0x25c>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	4a11      	ldr	r2, [pc, #68]	; (801ba04 <HAL_ADC_ConfigChannel+0x260>)
 801b9c0:	fba2 2303 	umull	r2, r3, r2, r3
 801b9c4:	0c9a      	lsrs	r2, r3, #18
 801b9c6:	4613      	mov	r3, r2
 801b9c8:	009b      	lsls	r3, r3, #2
 801b9ca:	4413      	add	r3, r2
 801b9cc:	005b      	lsls	r3, r3, #1
 801b9ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801b9d0:	e002      	b.n	801b9d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801b9d2:	68bb      	ldr	r3, [r7, #8]
 801b9d4:	3b01      	subs	r3, #1
 801b9d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d1f9      	bne.n	801b9d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801b9e6:	2300      	movs	r3, #0
}
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	3714      	adds	r7, #20
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f2:	4770      	bx	lr
 801b9f4:	40012300 	.word	0x40012300
 801b9f8:	40012000 	.word	0x40012000
 801b9fc:	10000012 	.word	0x10000012
 801ba00:	20000020 	.word	0x20000020
 801ba04:	431bde83 	.word	0x431bde83

0801ba08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801ba08:	b480      	push	{r7}
 801ba0a:	b085      	sub	sp, #20
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801ba10:	4b79      	ldr	r3, [pc, #484]	; (801bbf8 <ADC_Init+0x1f0>)
 801ba12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	685a      	ldr	r2, [r3, #4]
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	685b      	ldr	r3, [r3, #4]
 801ba28:	431a      	orrs	r2, r3
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	685a      	ldr	r2, [r3, #4]
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ba3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	6859      	ldr	r1, [r3, #4]
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	691b      	ldr	r3, [r3, #16]
 801ba48:	021a      	lsls	r2, r3, #8
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	430a      	orrs	r2, r1
 801ba50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	685a      	ldr	r2, [r3, #4]
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801ba60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	6859      	ldr	r1, [r3, #4]
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	689a      	ldr	r2, [r3, #8]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	430a      	orrs	r2, r1
 801ba72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	689a      	ldr	r2, [r3, #8]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ba82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	6899      	ldr	r1, [r3, #8]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	68da      	ldr	r2, [r3, #12]
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	430a      	orrs	r2, r1
 801ba94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba9a:	4a58      	ldr	r2, [pc, #352]	; (801bbfc <ADC_Init+0x1f4>)
 801ba9c:	4293      	cmp	r3, r2
 801ba9e:	d022      	beq.n	801bae6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	689a      	ldr	r2, [r3, #8]
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801baae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	6899      	ldr	r1, [r3, #8]
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	430a      	orrs	r2, r1
 801bac0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	689a      	ldr	r2, [r3, #8]
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801bad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	6899      	ldr	r1, [r3, #8]
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	430a      	orrs	r2, r1
 801bae2:	609a      	str	r2, [r3, #8]
 801bae4:	e00f      	b.n	801bb06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	689a      	ldr	r2, [r3, #8]
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801baf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	689a      	ldr	r2, [r3, #8]
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801bb04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	689a      	ldr	r2, [r3, #8]
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	f022 0202 	bic.w	r2, r2, #2
 801bb14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	6899      	ldr	r1, [r3, #8]
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	7e1b      	ldrb	r3, [r3, #24]
 801bb20:	005a      	lsls	r2, r3, #1
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	430a      	orrs	r2, r1
 801bb28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d01b      	beq.n	801bb6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	685a      	ldr	r2, [r3, #4]
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801bb42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	685a      	ldr	r2, [r3, #4]
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801bb52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	6859      	ldr	r1, [r3, #4]
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb5e:	3b01      	subs	r3, #1
 801bb60:	035a      	lsls	r2, r3, #13
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	430a      	orrs	r2, r1
 801bb68:	605a      	str	r2, [r3, #4]
 801bb6a:	e007      	b.n	801bb7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	685a      	ldr	r2, [r3, #4]
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bb7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801bb8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	69db      	ldr	r3, [r3, #28]
 801bb96:	3b01      	subs	r3, #1
 801bb98:	051a      	lsls	r2, r3, #20
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	430a      	orrs	r2, r1
 801bba0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	689a      	ldr	r2, [r3, #8]
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801bbb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	6899      	ldr	r1, [r3, #8]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bbbe:	025a      	lsls	r2, r3, #9
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	430a      	orrs	r2, r1
 801bbc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	689a      	ldr	r2, [r3, #8]
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801bbd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	6899      	ldr	r1, [r3, #8]
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	695b      	ldr	r3, [r3, #20]
 801bbe2:	029a      	lsls	r2, r3, #10
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	430a      	orrs	r2, r1
 801bbea:	609a      	str	r2, [r3, #8]
}
 801bbec:	bf00      	nop
 801bbee:	3714      	adds	r7, #20
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf6:	4770      	bx	lr
 801bbf8:	40012300 	.word	0x40012300
 801bbfc:	0f000001 	.word	0x0f000001

0801bc00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801bc00:	b580      	push	{r7, lr}
 801bc02:	b084      	sub	sp, #16
 801bc04:	af00      	add	r7, sp, #0
 801bc06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d13c      	bne.n	801bc94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	689b      	ldr	r3, [r3, #8]
 801bc2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d12b      	bne.n	801bc8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d127      	bne.n	801bc8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d006      	beq.n	801bc58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	689b      	ldr	r3, [r3, #8]
 801bc50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d119      	bne.n	801bc8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	685a      	ldr	r2, [r3, #4]
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	f022 0220 	bic.w	r2, r2, #32
 801bc66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d105      	bne.n	801bc8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc84:	f043 0201 	orr.w	r2, r3, #1
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801bc8c:	68f8      	ldr	r0, [r7, #12]
 801bc8e:	f7ff fd6b 	bl	801b768 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801bc92:	e00e      	b.n	801bcb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc98:	f003 0310 	and.w	r3, r3, #16
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d003      	beq.n	801bca8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801bca0:	68f8      	ldr	r0, [r7, #12]
 801bca2:	f7ff fd75 	bl	801b790 <HAL_ADC_ErrorCallback>
}
 801bca6:	e004      	b.n	801bcb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bcae:	6878      	ldr	r0, [r7, #4]
 801bcb0:	4798      	blx	r3
}
 801bcb2:	bf00      	nop
 801bcb4:	3710      	adds	r7, #16
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd80      	pop	{r7, pc}

0801bcba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801bcba:	b580      	push	{r7, lr}
 801bcbc:	b084      	sub	sp, #16
 801bcbe:	af00      	add	r7, sp, #0
 801bcc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801bcc8:	68f8      	ldr	r0, [r7, #12]
 801bcca:	f7ff fd57 	bl	801b77c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801bcce:	bf00      	nop
 801bcd0:	3710      	adds	r7, #16
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	bd80      	pop	{r7, pc}

0801bcd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801bcd6:	b580      	push	{r7, lr}
 801bcd8:	b084      	sub	sp, #16
 801bcda:	af00      	add	r7, sp, #0
 801bcdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bce2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	2240      	movs	r2, #64	; 0x40
 801bce8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcee:	f043 0204 	orr.w	r2, r3, #4
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	f7ff fd4a 	bl	801b790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801bcfc:	bf00      	nop
 801bcfe:	3710      	adds	r7, #16
 801bd00:	46bd      	mov	sp, r7
 801bd02:	bd80      	pop	{r7, pc}

0801bd04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bd04:	b480      	push	{r7}
 801bd06:	b085      	sub	sp, #20
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	f003 0307 	and.w	r3, r3, #7
 801bd12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bd14:	4b0c      	ldr	r3, [pc, #48]	; (801bd48 <__NVIC_SetPriorityGrouping+0x44>)
 801bd16:	68db      	ldr	r3, [r3, #12]
 801bd18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bd1a:	68ba      	ldr	r2, [r7, #8]
 801bd1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801bd20:	4013      	ands	r3, r2
 801bd22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bd24:	68fb      	ldr	r3, [r7, #12]
 801bd26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bd28:	68bb      	ldr	r3, [r7, #8]
 801bd2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801bd2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801bd30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bd34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bd36:	4a04      	ldr	r2, [pc, #16]	; (801bd48 <__NVIC_SetPriorityGrouping+0x44>)
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	60d3      	str	r3, [r2, #12]
}
 801bd3c:	bf00      	nop
 801bd3e:	3714      	adds	r7, #20
 801bd40:	46bd      	mov	sp, r7
 801bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd46:	4770      	bx	lr
 801bd48:	e000ed00 	.word	0xe000ed00

0801bd4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801bd4c:	b480      	push	{r7}
 801bd4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bd50:	4b04      	ldr	r3, [pc, #16]	; (801bd64 <__NVIC_GetPriorityGrouping+0x18>)
 801bd52:	68db      	ldr	r3, [r3, #12]
 801bd54:	0a1b      	lsrs	r3, r3, #8
 801bd56:	f003 0307 	and.w	r3, r3, #7
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd62:	4770      	bx	lr
 801bd64:	e000ed00 	.word	0xe000ed00

0801bd68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bd68:	b480      	push	{r7}
 801bd6a:	b083      	sub	sp, #12
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	4603      	mov	r3, r0
 801bd70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bd72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	db0b      	blt.n	801bd92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bd7a:	79fb      	ldrb	r3, [r7, #7]
 801bd7c:	f003 021f 	and.w	r2, r3, #31
 801bd80:	4907      	ldr	r1, [pc, #28]	; (801bda0 <__NVIC_EnableIRQ+0x38>)
 801bd82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd86:	095b      	lsrs	r3, r3, #5
 801bd88:	2001      	movs	r0, #1
 801bd8a:	fa00 f202 	lsl.w	r2, r0, r2
 801bd8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801bd92:	bf00      	nop
 801bd94:	370c      	adds	r7, #12
 801bd96:	46bd      	mov	sp, r7
 801bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd9c:	4770      	bx	lr
 801bd9e:	bf00      	nop
 801bda0:	e000e100 	.word	0xe000e100

0801bda4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801bda4:	b480      	push	{r7}
 801bda6:	b083      	sub	sp, #12
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	4603      	mov	r3, r0
 801bdac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bdae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	db12      	blt.n	801bddc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bdb6:	79fb      	ldrb	r3, [r7, #7]
 801bdb8:	f003 021f 	and.w	r2, r3, #31
 801bdbc:	490a      	ldr	r1, [pc, #40]	; (801bde8 <__NVIC_DisableIRQ+0x44>)
 801bdbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bdc2:	095b      	lsrs	r3, r3, #5
 801bdc4:	2001      	movs	r0, #1
 801bdc6:	fa00 f202 	lsl.w	r2, r0, r2
 801bdca:	3320      	adds	r3, #32
 801bdcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801bdd0:	f3bf 8f4f 	dsb	sy
}
 801bdd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801bdd6:	f3bf 8f6f 	isb	sy
}
 801bdda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801bddc:	bf00      	nop
 801bdde:	370c      	adds	r7, #12
 801bde0:	46bd      	mov	sp, r7
 801bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde6:	4770      	bx	lr
 801bde8:	e000e100 	.word	0xe000e100

0801bdec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bdec:	b480      	push	{r7}
 801bdee:	b083      	sub	sp, #12
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	4603      	mov	r3, r0
 801bdf4:	6039      	str	r1, [r7, #0]
 801bdf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bdf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	db0a      	blt.n	801be16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	b2da      	uxtb	r2, r3
 801be04:	490c      	ldr	r1, [pc, #48]	; (801be38 <__NVIC_SetPriority+0x4c>)
 801be06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be0a:	0112      	lsls	r2, r2, #4
 801be0c:	b2d2      	uxtb	r2, r2
 801be0e:	440b      	add	r3, r1
 801be10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801be14:	e00a      	b.n	801be2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	b2da      	uxtb	r2, r3
 801be1a:	4908      	ldr	r1, [pc, #32]	; (801be3c <__NVIC_SetPriority+0x50>)
 801be1c:	79fb      	ldrb	r3, [r7, #7]
 801be1e:	f003 030f 	and.w	r3, r3, #15
 801be22:	3b04      	subs	r3, #4
 801be24:	0112      	lsls	r2, r2, #4
 801be26:	b2d2      	uxtb	r2, r2
 801be28:	440b      	add	r3, r1
 801be2a:	761a      	strb	r2, [r3, #24]
}
 801be2c:	bf00      	nop
 801be2e:	370c      	adds	r7, #12
 801be30:	46bd      	mov	sp, r7
 801be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be36:	4770      	bx	lr
 801be38:	e000e100 	.word	0xe000e100
 801be3c:	e000ed00 	.word	0xe000ed00

0801be40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801be40:	b480      	push	{r7}
 801be42:	b089      	sub	sp, #36	; 0x24
 801be44:	af00      	add	r7, sp, #0
 801be46:	60f8      	str	r0, [r7, #12]
 801be48:	60b9      	str	r1, [r7, #8]
 801be4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	f003 0307 	and.w	r3, r3, #7
 801be52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801be54:	69fb      	ldr	r3, [r7, #28]
 801be56:	f1c3 0307 	rsb	r3, r3, #7
 801be5a:	2b04      	cmp	r3, #4
 801be5c:	bf28      	it	cs
 801be5e:	2304      	movcs	r3, #4
 801be60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801be62:	69fb      	ldr	r3, [r7, #28]
 801be64:	3304      	adds	r3, #4
 801be66:	2b06      	cmp	r3, #6
 801be68:	d902      	bls.n	801be70 <NVIC_EncodePriority+0x30>
 801be6a:	69fb      	ldr	r3, [r7, #28]
 801be6c:	3b03      	subs	r3, #3
 801be6e:	e000      	b.n	801be72 <NVIC_EncodePriority+0x32>
 801be70:	2300      	movs	r3, #0
 801be72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801be74:	f04f 32ff 	mov.w	r2, #4294967295
 801be78:	69bb      	ldr	r3, [r7, #24]
 801be7a:	fa02 f303 	lsl.w	r3, r2, r3
 801be7e:	43da      	mvns	r2, r3
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	401a      	ands	r2, r3
 801be84:	697b      	ldr	r3, [r7, #20]
 801be86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801be88:	f04f 31ff 	mov.w	r1, #4294967295
 801be8c:	697b      	ldr	r3, [r7, #20]
 801be8e:	fa01 f303 	lsl.w	r3, r1, r3
 801be92:	43d9      	mvns	r1, r3
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801be98:	4313      	orrs	r3, r2
         );
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3724      	adds	r7, #36	; 0x24
 801be9e:	46bd      	mov	sp, r7
 801bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea4:	4770      	bx	lr
	...

0801bea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b082      	sub	sp, #8
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	3b01      	subs	r3, #1
 801beb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801beb8:	d301      	bcc.n	801bebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801beba:	2301      	movs	r3, #1
 801bebc:	e00f      	b.n	801bede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bebe:	4a0a      	ldr	r2, [pc, #40]	; (801bee8 <SysTick_Config+0x40>)
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	3b01      	subs	r3, #1
 801bec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bec6:	210f      	movs	r1, #15
 801bec8:	f04f 30ff 	mov.w	r0, #4294967295
 801becc:	f7ff ff8e 	bl	801bdec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bed0:	4b05      	ldr	r3, [pc, #20]	; (801bee8 <SysTick_Config+0x40>)
 801bed2:	2200      	movs	r2, #0
 801bed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bed6:	4b04      	ldr	r3, [pc, #16]	; (801bee8 <SysTick_Config+0x40>)
 801bed8:	2207      	movs	r2, #7
 801beda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bedc:	2300      	movs	r3, #0
}
 801bede:	4618      	mov	r0, r3
 801bee0:	3708      	adds	r7, #8
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	e000e010 	.word	0xe000e010

0801beec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801beec:	b580      	push	{r7, lr}
 801beee:	b082      	sub	sp, #8
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bef4:	6878      	ldr	r0, [r7, #4]
 801bef6:	f7ff ff05 	bl	801bd04 <__NVIC_SetPriorityGrouping>
}
 801befa:	bf00      	nop
 801befc:	3708      	adds	r7, #8
 801befe:	46bd      	mov	sp, r7
 801bf00:	bd80      	pop	{r7, pc}

0801bf02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801bf02:	b580      	push	{r7, lr}
 801bf04:	b086      	sub	sp, #24
 801bf06:	af00      	add	r7, sp, #0
 801bf08:	4603      	mov	r3, r0
 801bf0a:	60b9      	str	r1, [r7, #8]
 801bf0c:	607a      	str	r2, [r7, #4]
 801bf0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801bf10:	2300      	movs	r3, #0
 801bf12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801bf14:	f7ff ff1a 	bl	801bd4c <__NVIC_GetPriorityGrouping>
 801bf18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bf1a:	687a      	ldr	r2, [r7, #4]
 801bf1c:	68b9      	ldr	r1, [r7, #8]
 801bf1e:	6978      	ldr	r0, [r7, #20]
 801bf20:	f7ff ff8e 	bl	801be40 <NVIC_EncodePriority>
 801bf24:	4602      	mov	r2, r0
 801bf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf2a:	4611      	mov	r1, r2
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f7ff ff5d 	bl	801bdec <__NVIC_SetPriority>
}
 801bf32:	bf00      	nop
 801bf34:	3718      	adds	r7, #24
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd80      	pop	{r7, pc}

0801bf3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bf3a:	b580      	push	{r7, lr}
 801bf3c:	b082      	sub	sp, #8
 801bf3e:	af00      	add	r7, sp, #0
 801bf40:	4603      	mov	r3, r0
 801bf42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bf44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f7ff ff0d 	bl	801bd68 <__NVIC_EnableIRQ>
}
 801bf4e:	bf00      	nop
 801bf50:	3708      	adds	r7, #8
 801bf52:	46bd      	mov	sp, r7
 801bf54:	bd80      	pop	{r7, pc}

0801bf56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801bf56:	b580      	push	{r7, lr}
 801bf58:	b082      	sub	sp, #8
 801bf5a:	af00      	add	r7, sp, #0
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801bf60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7ff ff1d 	bl	801bda4 <__NVIC_DisableIRQ>
}
 801bf6a:	bf00      	nop
 801bf6c:	3708      	adds	r7, #8
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd80      	pop	{r7, pc}

0801bf72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bf72:	b580      	push	{r7, lr}
 801bf74:	b082      	sub	sp, #8
 801bf76:	af00      	add	r7, sp, #0
 801bf78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bf7a:	6878      	ldr	r0, [r7, #4]
 801bf7c:	f7ff ff94 	bl	801bea8 <SysTick_Config>
 801bf80:	4603      	mov	r3, r0
}
 801bf82:	4618      	mov	r0, r3
 801bf84:	3708      	adds	r7, #8
 801bf86:	46bd      	mov	sp, r7
 801bf88:	bd80      	pop	{r7, pc}
	...

0801bf8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b086      	sub	sp, #24
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801bf94:	2300      	movs	r3, #0
 801bf96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801bf98:	f7ff faa6 	bl	801b4e8 <HAL_GetTick>
 801bf9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d101      	bne.n	801bfa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801bfa4:	2301      	movs	r3, #1
 801bfa6:	e099      	b.n	801c0dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2202      	movs	r2, #2
 801bfac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681a      	ldr	r2, [r3, #0]
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	f022 0201 	bic.w	r2, r2, #1
 801bfc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801bfc8:	e00f      	b.n	801bfea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801bfca:	f7ff fa8d 	bl	801b4e8 <HAL_GetTick>
 801bfce:	4602      	mov	r2, r0
 801bfd0:	693b      	ldr	r3, [r7, #16]
 801bfd2:	1ad3      	subs	r3, r2, r3
 801bfd4:	2b05      	cmp	r3, #5
 801bfd6:	d908      	bls.n	801bfea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	2220      	movs	r2, #32
 801bfdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2203      	movs	r2, #3
 801bfe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801bfe6:	2303      	movs	r3, #3
 801bfe8:	e078      	b.n	801c0dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	f003 0301 	and.w	r3, r3, #1
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d1e8      	bne.n	801bfca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c000:	697a      	ldr	r2, [r7, #20]
 801c002:	4b38      	ldr	r3, [pc, #224]	; (801c0e4 <HAL_DMA_Init+0x158>)
 801c004:	4013      	ands	r3, r2
 801c006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	685a      	ldr	r2, [r3, #4]
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	689b      	ldr	r3, [r3, #8]
 801c010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	691b      	ldr	r3, [r3, #16]
 801c01c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	699b      	ldr	r3, [r3, #24]
 801c028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c02e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	6a1b      	ldr	r3, [r3, #32]
 801c034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c036:	697a      	ldr	r2, [r7, #20]
 801c038:	4313      	orrs	r3, r2
 801c03a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c040:	2b04      	cmp	r3, #4
 801c042:	d107      	bne.n	801c054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c04c:	4313      	orrs	r3, r2
 801c04e:	697a      	ldr	r2, [r7, #20]
 801c050:	4313      	orrs	r3, r2
 801c052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	697a      	ldr	r2, [r7, #20]
 801c05a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	695b      	ldr	r3, [r3, #20]
 801c062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c064:	697b      	ldr	r3, [r7, #20]
 801c066:	f023 0307 	bic.w	r3, r3, #7
 801c06a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c070:	697a      	ldr	r2, [r7, #20]
 801c072:	4313      	orrs	r3, r2
 801c074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c07a:	2b04      	cmp	r3, #4
 801c07c:	d117      	bne.n	801c0ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c082:	697a      	ldr	r2, [r7, #20]
 801c084:	4313      	orrs	r3, r2
 801c086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d00e      	beq.n	801c0ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c090:	6878      	ldr	r0, [r7, #4]
 801c092:	f000 fb1b 	bl	801c6cc <DMA_CheckFifoParam>
 801c096:	4603      	mov	r3, r0
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d008      	beq.n	801c0ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2240      	movs	r2, #64	; 0x40
 801c0a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	e016      	b.n	801c0dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	697a      	ldr	r2, [r7, #20]
 801c0b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f000 fad2 	bl	801c660 <DMA_CalcBaseAndBitshift>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c0c4:	223f      	movs	r2, #63	; 0x3f
 801c0c6:	409a      	lsls	r2, r3
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801c0da:	2300      	movs	r3, #0
}
 801c0dc:	4618      	mov	r0, r3
 801c0de:	3718      	adds	r7, #24
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}
 801c0e4:	f010803f 	.word	0xf010803f

0801c0e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b086      	sub	sp, #24
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	60f8      	str	r0, [r7, #12]
 801c0f0:	60b9      	str	r1, [r7, #8]
 801c0f2:	607a      	str	r2, [r7, #4]
 801c0f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c106:	2b01      	cmp	r3, #1
 801c108:	d101      	bne.n	801c10e <HAL_DMA_Start_IT+0x26>
 801c10a:	2302      	movs	r3, #2
 801c10c:	e040      	b.n	801c190 <HAL_DMA_Start_IT+0xa8>
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	2201      	movs	r2, #1
 801c112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	2b01      	cmp	r3, #1
 801c120:	d12f      	bne.n	801c182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2202      	movs	r2, #2
 801c126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	2200      	movs	r2, #0
 801c12e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	68b9      	ldr	r1, [r7, #8]
 801c136:	68f8      	ldr	r0, [r7, #12]
 801c138:	f000 fa64 	bl	801c604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c140:	223f      	movs	r2, #63	; 0x3f
 801c142:	409a      	lsls	r2, r3
 801c144:	693b      	ldr	r3, [r7, #16]
 801c146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	681a      	ldr	r2, [r3, #0]
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	f042 0216 	orr.w	r2, r2, #22
 801c156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d007      	beq.n	801c170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	681a      	ldr	r2, [r3, #0]
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	f042 0208 	orr.w	r2, r2, #8
 801c16e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	681a      	ldr	r2, [r3, #0]
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	f042 0201 	orr.w	r2, r2, #1
 801c17e:	601a      	str	r2, [r3, #0]
 801c180:	e005      	b.n	801c18e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	2200      	movs	r2, #0
 801c186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801c18a:	2302      	movs	r3, #2
 801c18c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801c18e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c190:	4618      	mov	r0, r3
 801c192:	3718      	adds	r7, #24
 801c194:	46bd      	mov	sp, r7
 801c196:	bd80      	pop	{r7, pc}

0801c198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b084      	sub	sp, #16
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c1a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801c1a6:	f7ff f99f 	bl	801b4e8 <HAL_GetTick>
 801c1aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c1b2:	b2db      	uxtb	r3, r3
 801c1b4:	2b02      	cmp	r3, #2
 801c1b6:	d008      	beq.n	801c1ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2280      	movs	r2, #128	; 0x80
 801c1bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801c1c6:	2301      	movs	r3, #1
 801c1c8:	e052      	b.n	801c270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	681a      	ldr	r2, [r3, #0]
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	f022 0216 	bic.w	r2, r2, #22
 801c1d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	695a      	ldr	r2, [r3, #20]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c1e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d103      	bne.n	801c1fa <HAL_DMA_Abort+0x62>
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d007      	beq.n	801c20a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	f022 0208 	bic.w	r2, r2, #8
 801c208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	f022 0201 	bic.w	r2, r2, #1
 801c218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c21a:	e013      	b.n	801c244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c21c:	f7ff f964 	bl	801b4e8 <HAL_GetTick>
 801c220:	4602      	mov	r2, r0
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	1ad3      	subs	r3, r2, r3
 801c226:	2b05      	cmp	r3, #5
 801c228:	d90c      	bls.n	801c244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	2220      	movs	r2, #32
 801c22e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2203      	movs	r2, #3
 801c234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	2200      	movs	r2, #0
 801c23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801c240:	2303      	movs	r3, #3
 801c242:	e015      	b.n	801c270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	f003 0301 	and.w	r3, r3, #1
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d1e4      	bne.n	801c21c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c256:	223f      	movs	r2, #63	; 0x3f
 801c258:	409a      	lsls	r2, r3
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	2201      	movs	r2, #1
 801c262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2200      	movs	r2, #0
 801c26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801c26e:	2300      	movs	r3, #0
}
 801c270:	4618      	mov	r0, r3
 801c272:	3710      	adds	r7, #16
 801c274:	46bd      	mov	sp, r7
 801c276:	bd80      	pop	{r7, pc}

0801c278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801c278:	b480      	push	{r7}
 801c27a:	b083      	sub	sp, #12
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c286:	b2db      	uxtb	r3, r3
 801c288:	2b02      	cmp	r3, #2
 801c28a:	d004      	beq.n	801c296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	2280      	movs	r2, #128	; 0x80
 801c290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801c292:	2301      	movs	r3, #1
 801c294:	e00c      	b.n	801c2b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	2205      	movs	r2, #5
 801c29a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	681a      	ldr	r2, [r3, #0]
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	f022 0201 	bic.w	r2, r2, #1
 801c2ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801c2ae:	2300      	movs	r3, #0
}
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	370c      	adds	r7, #12
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ba:	4770      	bx	lr

0801c2bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b086      	sub	sp, #24
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801c2c8:	4b8e      	ldr	r3, [pc, #568]	; (801c504 <HAL_DMA_IRQHandler+0x248>)
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	4a8e      	ldr	r2, [pc, #568]	; (801c508 <HAL_DMA_IRQHandler+0x24c>)
 801c2ce:	fba2 2303 	umull	r2, r3, r2, r3
 801c2d2:	0a9b      	lsrs	r3, r3, #10
 801c2d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c2da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801c2dc:	693b      	ldr	r3, [r7, #16]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c2e6:	2208      	movs	r2, #8
 801c2e8:	409a      	lsls	r2, r3
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	4013      	ands	r3, r2
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d01a      	beq.n	801c328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	f003 0304 	and.w	r3, r3, #4
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d013      	beq.n	801c328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	f022 0204 	bic.w	r2, r2, #4
 801c30e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c314:	2208      	movs	r2, #8
 801c316:	409a      	lsls	r2, r3
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c320:	f043 0201 	orr.w	r2, r3, #1
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c32c:	2201      	movs	r2, #1
 801c32e:	409a      	lsls	r2, r3
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	4013      	ands	r3, r2
 801c334:	2b00      	cmp	r3, #0
 801c336:	d012      	beq.n	801c35e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	695b      	ldr	r3, [r3, #20]
 801c33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c342:	2b00      	cmp	r3, #0
 801c344:	d00b      	beq.n	801c35e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c34a:	2201      	movs	r2, #1
 801c34c:	409a      	lsls	r2, r3
 801c34e:	693b      	ldr	r3, [r7, #16]
 801c350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c356:	f043 0202 	orr.w	r2, r3, #2
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c362:	2204      	movs	r2, #4
 801c364:	409a      	lsls	r2, r3
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	4013      	ands	r3, r2
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d012      	beq.n	801c394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	f003 0302 	and.w	r3, r3, #2
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d00b      	beq.n	801c394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c380:	2204      	movs	r2, #4
 801c382:	409a      	lsls	r2, r3
 801c384:	693b      	ldr	r3, [r7, #16]
 801c386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c38c:	f043 0204 	orr.w	r2, r3, #4
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c398:	2210      	movs	r2, #16
 801c39a:	409a      	lsls	r2, r3
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	4013      	ands	r3, r2
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d043      	beq.n	801c42c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	f003 0308 	and.w	r3, r3, #8
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d03c      	beq.n	801c42c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c3b6:	2210      	movs	r2, #16
 801c3b8:	409a      	lsls	r2, r3
 801c3ba:	693b      	ldr	r3, [r7, #16]
 801c3bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d018      	beq.n	801c3fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d108      	bne.n	801c3ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d024      	beq.n	801c42c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3e6:	6878      	ldr	r0, [r7, #4]
 801c3e8:	4798      	blx	r3
 801c3ea:	e01f      	b.n	801c42c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d01b      	beq.n	801c42c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3f8:	6878      	ldr	r0, [r7, #4]
 801c3fa:	4798      	blx	r3
 801c3fc:	e016      	b.n	801c42c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d107      	bne.n	801c41c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	681a      	ldr	r2, [r3, #0]
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	f022 0208 	bic.w	r2, r2, #8
 801c41a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c420:	2b00      	cmp	r3, #0
 801c422:	d003      	beq.n	801c42c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c428:	6878      	ldr	r0, [r7, #4]
 801c42a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c430:	2220      	movs	r2, #32
 801c432:	409a      	lsls	r2, r3
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	4013      	ands	r3, r2
 801c438:	2b00      	cmp	r3, #0
 801c43a:	f000 808f 	beq.w	801c55c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	f003 0310 	and.w	r3, r3, #16
 801c448:	2b00      	cmp	r3, #0
 801c44a:	f000 8087 	beq.w	801c55c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c452:	2220      	movs	r2, #32
 801c454:	409a      	lsls	r2, r3
 801c456:	693b      	ldr	r3, [r7, #16]
 801c458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c460:	b2db      	uxtb	r3, r3
 801c462:	2b05      	cmp	r3, #5
 801c464:	d136      	bne.n	801c4d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	681a      	ldr	r2, [r3, #0]
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	f022 0216 	bic.w	r2, r2, #22
 801c474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	695a      	ldr	r2, [r3, #20]
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d103      	bne.n	801c496 <HAL_DMA_IRQHandler+0x1da>
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c492:	2b00      	cmp	r3, #0
 801c494:	d007      	beq.n	801c4a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	681a      	ldr	r2, [r3, #0]
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	f022 0208 	bic.w	r2, r2, #8
 801c4a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4aa:	223f      	movs	r2, #63	; 0x3f
 801c4ac:	409a      	lsls	r2, r3
 801c4ae:	693b      	ldr	r3, [r7, #16]
 801c4b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	2201      	movs	r2, #1
 801c4b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	2200      	movs	r2, #0
 801c4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d07e      	beq.n	801c5c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4ce:	6878      	ldr	r0, [r7, #4]
 801c4d0:	4798      	blx	r3
        }
        return;
 801c4d2:	e079      	b.n	801c5c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d01d      	beq.n	801c51e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d10d      	bne.n	801c50c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d031      	beq.n	801c55c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4fc:	6878      	ldr	r0, [r7, #4]
 801c4fe:	4798      	blx	r3
 801c500:	e02c      	b.n	801c55c <HAL_DMA_IRQHandler+0x2a0>
 801c502:	bf00      	nop
 801c504:	20000020 	.word	0x20000020
 801c508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c510:	2b00      	cmp	r3, #0
 801c512:	d023      	beq.n	801c55c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c518:	6878      	ldr	r0, [r7, #4]
 801c51a:	4798      	blx	r3
 801c51c:	e01e      	b.n	801c55c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d10f      	bne.n	801c54c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	681a      	ldr	r2, [r3, #0]
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	f022 0210 	bic.w	r2, r2, #16
 801c53a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2201      	movs	r2, #1
 801c540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	2200      	movs	r2, #0
 801c548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c550:	2b00      	cmp	r3, #0
 801c552:	d003      	beq.n	801c55c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c558:	6878      	ldr	r0, [r7, #4]
 801c55a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c560:	2b00      	cmp	r3, #0
 801c562:	d032      	beq.n	801c5ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c568:	f003 0301 	and.w	r3, r3, #1
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d022      	beq.n	801c5b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2205      	movs	r2, #5
 801c574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	681a      	ldr	r2, [r3, #0]
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	f022 0201 	bic.w	r2, r2, #1
 801c586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	3301      	adds	r3, #1
 801c58c:	60bb      	str	r3, [r7, #8]
 801c58e:	697a      	ldr	r2, [r7, #20]
 801c590:	429a      	cmp	r2, r3
 801c592:	d307      	bcc.n	801c5a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	f003 0301 	and.w	r3, r3, #1
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d1f2      	bne.n	801c588 <HAL_DMA_IRQHandler+0x2cc>
 801c5a2:	e000      	b.n	801c5a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 801c5a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	2201      	movs	r2, #1
 801c5aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d005      	beq.n	801c5ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5c2:	6878      	ldr	r0, [r7, #4]
 801c5c4:	4798      	blx	r3
 801c5c6:	e000      	b.n	801c5ca <HAL_DMA_IRQHandler+0x30e>
        return;
 801c5c8:	bf00      	nop
    }
  }
}
 801c5ca:	3718      	adds	r7, #24
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}

0801c5d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801c5d0:	b480      	push	{r7}
 801c5d2:	b083      	sub	sp, #12
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c5de:	b2db      	uxtb	r3, r3
}
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	370c      	adds	r7, #12
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ea:	4770      	bx	lr

0801c5ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801c5ec:	b480      	push	{r7}
 801c5ee:	b083      	sub	sp, #12
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801c5f8:	4618      	mov	r0, r3
 801c5fa:	370c      	adds	r7, #12
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c602:	4770      	bx	lr

0801c604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c604:	b480      	push	{r7}
 801c606:	b085      	sub	sp, #20
 801c608:	af00      	add	r7, sp, #0
 801c60a:	60f8      	str	r0, [r7, #12]
 801c60c:	60b9      	str	r1, [r7, #8]
 801c60e:	607a      	str	r2, [r7, #4]
 801c610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	681a      	ldr	r2, [r3, #0]
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801c620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	683a      	ldr	r2, [r7, #0]
 801c628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	689b      	ldr	r3, [r3, #8]
 801c62e:	2b40      	cmp	r3, #64	; 0x40
 801c630:	d108      	bne.n	801c644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	68ba      	ldr	r2, [r7, #8]
 801c640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801c642:	e007      	b.n	801c654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	68ba      	ldr	r2, [r7, #8]
 801c64a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	687a      	ldr	r2, [r7, #4]
 801c652:	60da      	str	r2, [r3, #12]
}
 801c654:	bf00      	nop
 801c656:	3714      	adds	r7, #20
 801c658:	46bd      	mov	sp, r7
 801c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c65e:	4770      	bx	lr

0801c660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c660:	b480      	push	{r7}
 801c662:	b085      	sub	sp, #20
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	b2db      	uxtb	r3, r3
 801c66e:	3b10      	subs	r3, #16
 801c670:	4a14      	ldr	r2, [pc, #80]	; (801c6c4 <DMA_CalcBaseAndBitshift+0x64>)
 801c672:	fba2 2303 	umull	r2, r3, r2, r3
 801c676:	091b      	lsrs	r3, r3, #4
 801c678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801c67a:	4a13      	ldr	r2, [pc, #76]	; (801c6c8 <DMA_CalcBaseAndBitshift+0x68>)
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	4413      	add	r3, r2
 801c680:	781b      	ldrb	r3, [r3, #0]
 801c682:	461a      	mov	r2, r3
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	2b03      	cmp	r3, #3
 801c68c:	d909      	bls.n	801c6a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c696:	f023 0303 	bic.w	r3, r3, #3
 801c69a:	1d1a      	adds	r2, r3, #4
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	659a      	str	r2, [r3, #88]	; 0x58
 801c6a0:	e007      	b.n	801c6b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c6aa:	f023 0303 	bic.w	r3, r3, #3
 801c6ae:	687a      	ldr	r2, [r7, #4]
 801c6b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	3714      	adds	r7, #20
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c0:	4770      	bx	lr
 801c6c2:	bf00      	nop
 801c6c4:	aaaaaaab 	.word	0xaaaaaaab
 801c6c8:	08028ee4 	.word	0x08028ee4

0801c6cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c6cc:	b480      	push	{r7}
 801c6ce:	b085      	sub	sp, #20
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	699b      	ldr	r3, [r3, #24]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d11f      	bne.n	801c726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801c6e6:	68bb      	ldr	r3, [r7, #8]
 801c6e8:	2b03      	cmp	r3, #3
 801c6ea:	d856      	bhi.n	801c79a <DMA_CheckFifoParam+0xce>
 801c6ec:	a201      	add	r2, pc, #4	; (adr r2, 801c6f4 <DMA_CheckFifoParam+0x28>)
 801c6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6f2:	bf00      	nop
 801c6f4:	0801c705 	.word	0x0801c705
 801c6f8:	0801c717 	.word	0x0801c717
 801c6fc:	0801c705 	.word	0x0801c705
 801c700:	0801c79b 	.word	0x0801c79b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d046      	beq.n	801c79e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801c710:	2301      	movs	r3, #1
 801c712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c714:	e043      	b.n	801c79e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c71a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c71e:	d140      	bne.n	801c7a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801c720:	2301      	movs	r3, #1
 801c722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c724:	e03d      	b.n	801c7a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	699b      	ldr	r3, [r3, #24]
 801c72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c72e:	d121      	bne.n	801c774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801c730:	68bb      	ldr	r3, [r7, #8]
 801c732:	2b03      	cmp	r3, #3
 801c734:	d837      	bhi.n	801c7a6 <DMA_CheckFifoParam+0xda>
 801c736:	a201      	add	r2, pc, #4	; (adr r2, 801c73c <DMA_CheckFifoParam+0x70>)
 801c738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c73c:	0801c74d 	.word	0x0801c74d
 801c740:	0801c753 	.word	0x0801c753
 801c744:	0801c74d 	.word	0x0801c74d
 801c748:	0801c765 	.word	0x0801c765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801c74c:	2301      	movs	r3, #1
 801c74e:	73fb      	strb	r3, [r7, #15]
      break;
 801c750:	e030      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d025      	beq.n	801c7aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801c75e:	2301      	movs	r3, #1
 801c760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c762:	e022      	b.n	801c7aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c76c:	d11f      	bne.n	801c7ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801c76e:	2301      	movs	r3, #1
 801c770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801c772:	e01c      	b.n	801c7ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801c774:	68bb      	ldr	r3, [r7, #8]
 801c776:	2b02      	cmp	r3, #2
 801c778:	d903      	bls.n	801c782 <DMA_CheckFifoParam+0xb6>
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	2b03      	cmp	r3, #3
 801c77e:	d003      	beq.n	801c788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801c780:	e018      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801c782:	2301      	movs	r3, #1
 801c784:	73fb      	strb	r3, [r7, #15]
      break;
 801c786:	e015      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c78c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c790:	2b00      	cmp	r3, #0
 801c792:	d00e      	beq.n	801c7b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801c794:	2301      	movs	r3, #1
 801c796:	73fb      	strb	r3, [r7, #15]
      break;
 801c798:	e00b      	b.n	801c7b2 <DMA_CheckFifoParam+0xe6>
      break;
 801c79a:	bf00      	nop
 801c79c:	e00a      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;
 801c79e:	bf00      	nop
 801c7a0:	e008      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;
 801c7a2:	bf00      	nop
 801c7a4:	e006      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;
 801c7a6:	bf00      	nop
 801c7a8:	e004      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;
 801c7aa:	bf00      	nop
 801c7ac:	e002      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;   
 801c7ae:	bf00      	nop
 801c7b0:	e000      	b.n	801c7b4 <DMA_CheckFifoParam+0xe8>
      break;
 801c7b2:	bf00      	nop
    }
  } 
  
  return status; 
 801c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	3714      	adds	r7, #20
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7c0:	4770      	bx	lr
 801c7c2:	bf00      	nop

0801c7c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c7c4:	b480      	push	{r7}
 801c7c6:	b089      	sub	sp, #36	; 0x24
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
 801c7cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c7da:	2300      	movs	r3, #0
 801c7dc:	61fb      	str	r3, [r7, #28]
 801c7de:	e159      	b.n	801ca94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801c7e0:	2201      	movs	r2, #1
 801c7e2:	69fb      	ldr	r3, [r7, #28]
 801c7e4:	fa02 f303 	lsl.w	r3, r2, r3
 801c7e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	697a      	ldr	r2, [r7, #20]
 801c7f0:	4013      	ands	r3, r2
 801c7f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801c7f4:	693a      	ldr	r2, [r7, #16]
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	429a      	cmp	r2, r3
 801c7fa:	f040 8148 	bne.w	801ca8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801c7fe:	683b      	ldr	r3, [r7, #0]
 801c800:	685b      	ldr	r3, [r3, #4]
 801c802:	f003 0303 	and.w	r3, r3, #3
 801c806:	2b01      	cmp	r3, #1
 801c808:	d005      	beq.n	801c816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c80a:	683b      	ldr	r3, [r7, #0]
 801c80c:	685b      	ldr	r3, [r3, #4]
 801c80e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801c812:	2b02      	cmp	r3, #2
 801c814:	d130      	bne.n	801c878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	689b      	ldr	r3, [r3, #8]
 801c81a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c81c:	69fb      	ldr	r3, [r7, #28]
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	2203      	movs	r2, #3
 801c822:	fa02 f303 	lsl.w	r3, r2, r3
 801c826:	43db      	mvns	r3, r3
 801c828:	69ba      	ldr	r2, [r7, #24]
 801c82a:	4013      	ands	r3, r2
 801c82c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c82e:	683b      	ldr	r3, [r7, #0]
 801c830:	68da      	ldr	r2, [r3, #12]
 801c832:	69fb      	ldr	r3, [r7, #28]
 801c834:	005b      	lsls	r3, r3, #1
 801c836:	fa02 f303 	lsl.w	r3, r2, r3
 801c83a:	69ba      	ldr	r2, [r7, #24]
 801c83c:	4313      	orrs	r3, r2
 801c83e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	69ba      	ldr	r2, [r7, #24]
 801c844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	685b      	ldr	r3, [r3, #4]
 801c84a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c84c:	2201      	movs	r2, #1
 801c84e:	69fb      	ldr	r3, [r7, #28]
 801c850:	fa02 f303 	lsl.w	r3, r2, r3
 801c854:	43db      	mvns	r3, r3
 801c856:	69ba      	ldr	r2, [r7, #24]
 801c858:	4013      	ands	r3, r2
 801c85a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c85c:	683b      	ldr	r3, [r7, #0]
 801c85e:	685b      	ldr	r3, [r3, #4]
 801c860:	091b      	lsrs	r3, r3, #4
 801c862:	f003 0201 	and.w	r2, r3, #1
 801c866:	69fb      	ldr	r3, [r7, #28]
 801c868:	fa02 f303 	lsl.w	r3, r2, r3
 801c86c:	69ba      	ldr	r2, [r7, #24]
 801c86e:	4313      	orrs	r3, r2
 801c870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	69ba      	ldr	r2, [r7, #24]
 801c876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c878:	683b      	ldr	r3, [r7, #0]
 801c87a:	685b      	ldr	r3, [r3, #4]
 801c87c:	f003 0303 	and.w	r3, r3, #3
 801c880:	2b03      	cmp	r3, #3
 801c882:	d017      	beq.n	801c8b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	68db      	ldr	r3, [r3, #12]
 801c888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801c88a:	69fb      	ldr	r3, [r7, #28]
 801c88c:	005b      	lsls	r3, r3, #1
 801c88e:	2203      	movs	r2, #3
 801c890:	fa02 f303 	lsl.w	r3, r2, r3
 801c894:	43db      	mvns	r3, r3
 801c896:	69ba      	ldr	r2, [r7, #24]
 801c898:	4013      	ands	r3, r2
 801c89a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c89c:	683b      	ldr	r3, [r7, #0]
 801c89e:	689a      	ldr	r2, [r3, #8]
 801c8a0:	69fb      	ldr	r3, [r7, #28]
 801c8a2:	005b      	lsls	r3, r3, #1
 801c8a4:	fa02 f303 	lsl.w	r3, r2, r3
 801c8a8:	69ba      	ldr	r2, [r7, #24]
 801c8aa:	4313      	orrs	r3, r2
 801c8ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	69ba      	ldr	r2, [r7, #24]
 801c8b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	685b      	ldr	r3, [r3, #4]
 801c8b8:	f003 0303 	and.w	r3, r3, #3
 801c8bc:	2b02      	cmp	r3, #2
 801c8be:	d123      	bne.n	801c908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c8c0:	69fb      	ldr	r3, [r7, #28]
 801c8c2:	08da      	lsrs	r2, r3, #3
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	3208      	adds	r2, #8
 801c8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	f003 0307 	and.w	r3, r3, #7
 801c8d4:	009b      	lsls	r3, r3, #2
 801c8d6:	220f      	movs	r2, #15
 801c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 801c8dc:	43db      	mvns	r3, r3
 801c8de:	69ba      	ldr	r2, [r7, #24]
 801c8e0:	4013      	ands	r3, r2
 801c8e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	691a      	ldr	r2, [r3, #16]
 801c8e8:	69fb      	ldr	r3, [r7, #28]
 801c8ea:	f003 0307 	and.w	r3, r3, #7
 801c8ee:	009b      	lsls	r3, r3, #2
 801c8f0:	fa02 f303 	lsl.w	r3, r2, r3
 801c8f4:	69ba      	ldr	r2, [r7, #24]
 801c8f6:	4313      	orrs	r3, r2
 801c8f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c8fa:	69fb      	ldr	r3, [r7, #28]
 801c8fc:	08da      	lsrs	r2, r3, #3
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	3208      	adds	r2, #8
 801c902:	69b9      	ldr	r1, [r7, #24]
 801c904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801c90e:	69fb      	ldr	r3, [r7, #28]
 801c910:	005b      	lsls	r3, r3, #1
 801c912:	2203      	movs	r2, #3
 801c914:	fa02 f303 	lsl.w	r3, r2, r3
 801c918:	43db      	mvns	r3, r3
 801c91a:	69ba      	ldr	r2, [r7, #24]
 801c91c:	4013      	ands	r3, r2
 801c91e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	f003 0203 	and.w	r2, r3, #3
 801c928:	69fb      	ldr	r3, [r7, #28]
 801c92a:	005b      	lsls	r3, r3, #1
 801c92c:	fa02 f303 	lsl.w	r3, r2, r3
 801c930:	69ba      	ldr	r2, [r7, #24]
 801c932:	4313      	orrs	r3, r2
 801c934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	69ba      	ldr	r2, [r7, #24]
 801c93a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	685b      	ldr	r3, [r3, #4]
 801c940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c944:	2b00      	cmp	r3, #0
 801c946:	f000 80a2 	beq.w	801ca8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c94a:	2300      	movs	r3, #0
 801c94c:	60fb      	str	r3, [r7, #12]
 801c94e:	4b57      	ldr	r3, [pc, #348]	; (801caac <HAL_GPIO_Init+0x2e8>)
 801c950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c952:	4a56      	ldr	r2, [pc, #344]	; (801caac <HAL_GPIO_Init+0x2e8>)
 801c954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c958:	6453      	str	r3, [r2, #68]	; 0x44
 801c95a:	4b54      	ldr	r3, [pc, #336]	; (801caac <HAL_GPIO_Init+0x2e8>)
 801c95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c95e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c962:	60fb      	str	r3, [r7, #12]
 801c964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c966:	4a52      	ldr	r2, [pc, #328]	; (801cab0 <HAL_GPIO_Init+0x2ec>)
 801c968:	69fb      	ldr	r3, [r7, #28]
 801c96a:	089b      	lsrs	r3, r3, #2
 801c96c:	3302      	adds	r3, #2
 801c96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801c974:	69fb      	ldr	r3, [r7, #28]
 801c976:	f003 0303 	and.w	r3, r3, #3
 801c97a:	009b      	lsls	r3, r3, #2
 801c97c:	220f      	movs	r2, #15
 801c97e:	fa02 f303 	lsl.w	r3, r2, r3
 801c982:	43db      	mvns	r3, r3
 801c984:	69ba      	ldr	r2, [r7, #24]
 801c986:	4013      	ands	r3, r2
 801c988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	4a49      	ldr	r2, [pc, #292]	; (801cab4 <HAL_GPIO_Init+0x2f0>)
 801c98e:	4293      	cmp	r3, r2
 801c990:	d019      	beq.n	801c9c6 <HAL_GPIO_Init+0x202>
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	4a48      	ldr	r2, [pc, #288]	; (801cab8 <HAL_GPIO_Init+0x2f4>)
 801c996:	4293      	cmp	r3, r2
 801c998:	d013      	beq.n	801c9c2 <HAL_GPIO_Init+0x1fe>
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	4a47      	ldr	r2, [pc, #284]	; (801cabc <HAL_GPIO_Init+0x2f8>)
 801c99e:	4293      	cmp	r3, r2
 801c9a0:	d00d      	beq.n	801c9be <HAL_GPIO_Init+0x1fa>
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	4a46      	ldr	r2, [pc, #280]	; (801cac0 <HAL_GPIO_Init+0x2fc>)
 801c9a6:	4293      	cmp	r3, r2
 801c9a8:	d007      	beq.n	801c9ba <HAL_GPIO_Init+0x1f6>
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	4a45      	ldr	r2, [pc, #276]	; (801cac4 <HAL_GPIO_Init+0x300>)
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	d101      	bne.n	801c9b6 <HAL_GPIO_Init+0x1f2>
 801c9b2:	2304      	movs	r3, #4
 801c9b4:	e008      	b.n	801c9c8 <HAL_GPIO_Init+0x204>
 801c9b6:	2307      	movs	r3, #7
 801c9b8:	e006      	b.n	801c9c8 <HAL_GPIO_Init+0x204>
 801c9ba:	2303      	movs	r3, #3
 801c9bc:	e004      	b.n	801c9c8 <HAL_GPIO_Init+0x204>
 801c9be:	2302      	movs	r3, #2
 801c9c0:	e002      	b.n	801c9c8 <HAL_GPIO_Init+0x204>
 801c9c2:	2301      	movs	r3, #1
 801c9c4:	e000      	b.n	801c9c8 <HAL_GPIO_Init+0x204>
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	69fa      	ldr	r2, [r7, #28]
 801c9ca:	f002 0203 	and.w	r2, r2, #3
 801c9ce:	0092      	lsls	r2, r2, #2
 801c9d0:	4093      	lsls	r3, r2
 801c9d2:	69ba      	ldr	r2, [r7, #24]
 801c9d4:	4313      	orrs	r3, r2
 801c9d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c9d8:	4935      	ldr	r1, [pc, #212]	; (801cab0 <HAL_GPIO_Init+0x2ec>)
 801c9da:	69fb      	ldr	r3, [r7, #28]
 801c9dc:	089b      	lsrs	r3, r3, #2
 801c9de:	3302      	adds	r3, #2
 801c9e0:	69ba      	ldr	r2, [r7, #24]
 801c9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801c9e6:	4b38      	ldr	r3, [pc, #224]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801c9e8:	689b      	ldr	r3, [r3, #8]
 801c9ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c9ec:	693b      	ldr	r3, [r7, #16]
 801c9ee:	43db      	mvns	r3, r3
 801c9f0:	69ba      	ldr	r2, [r7, #24]
 801c9f2:	4013      	ands	r3, r2
 801c9f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c9f6:	683b      	ldr	r3, [r7, #0]
 801c9f8:	685b      	ldr	r3, [r3, #4]
 801c9fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d003      	beq.n	801ca0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801ca02:	69ba      	ldr	r2, [r7, #24]
 801ca04:	693b      	ldr	r3, [r7, #16]
 801ca06:	4313      	orrs	r3, r2
 801ca08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801ca0a:	4a2f      	ldr	r2, [pc, #188]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca0c:	69bb      	ldr	r3, [r7, #24]
 801ca0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801ca10:	4b2d      	ldr	r3, [pc, #180]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca12:	68db      	ldr	r3, [r3, #12]
 801ca14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ca16:	693b      	ldr	r3, [r7, #16]
 801ca18:	43db      	mvns	r3, r3
 801ca1a:	69ba      	ldr	r2, [r7, #24]
 801ca1c:	4013      	ands	r3, r2
 801ca1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ca20:	683b      	ldr	r3, [r7, #0]
 801ca22:	685b      	ldr	r3, [r3, #4]
 801ca24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d003      	beq.n	801ca34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801ca2c:	69ba      	ldr	r2, [r7, #24]
 801ca2e:	693b      	ldr	r3, [r7, #16]
 801ca30:	4313      	orrs	r3, r2
 801ca32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801ca34:	4a24      	ldr	r2, [pc, #144]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca36:	69bb      	ldr	r3, [r7, #24]
 801ca38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801ca3a:	4b23      	ldr	r3, [pc, #140]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca3c:	685b      	ldr	r3, [r3, #4]
 801ca3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ca40:	693b      	ldr	r3, [r7, #16]
 801ca42:	43db      	mvns	r3, r3
 801ca44:	69ba      	ldr	r2, [r7, #24]
 801ca46:	4013      	ands	r3, r2
 801ca48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	685b      	ldr	r3, [r3, #4]
 801ca4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d003      	beq.n	801ca5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801ca56:	69ba      	ldr	r2, [r7, #24]
 801ca58:	693b      	ldr	r3, [r7, #16]
 801ca5a:	4313      	orrs	r3, r2
 801ca5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801ca5e:	4a1a      	ldr	r2, [pc, #104]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca60:	69bb      	ldr	r3, [r7, #24]
 801ca62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801ca64:	4b18      	ldr	r3, [pc, #96]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ca6a:	693b      	ldr	r3, [r7, #16]
 801ca6c:	43db      	mvns	r3, r3
 801ca6e:	69ba      	ldr	r2, [r7, #24]
 801ca70:	4013      	ands	r3, r2
 801ca72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ca74:	683b      	ldr	r3, [r7, #0]
 801ca76:	685b      	ldr	r3, [r3, #4]
 801ca78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d003      	beq.n	801ca88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801ca80:	69ba      	ldr	r2, [r7, #24]
 801ca82:	693b      	ldr	r3, [r7, #16]
 801ca84:	4313      	orrs	r3, r2
 801ca86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801ca88:	4a0f      	ldr	r2, [pc, #60]	; (801cac8 <HAL_GPIO_Init+0x304>)
 801ca8a:	69bb      	ldr	r3, [r7, #24]
 801ca8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801ca8e:	69fb      	ldr	r3, [r7, #28]
 801ca90:	3301      	adds	r3, #1
 801ca92:	61fb      	str	r3, [r7, #28]
 801ca94:	69fb      	ldr	r3, [r7, #28]
 801ca96:	2b0f      	cmp	r3, #15
 801ca98:	f67f aea2 	bls.w	801c7e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801ca9c:	bf00      	nop
 801ca9e:	bf00      	nop
 801caa0:	3724      	adds	r7, #36	; 0x24
 801caa2:	46bd      	mov	sp, r7
 801caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa8:	4770      	bx	lr
 801caaa:	bf00      	nop
 801caac:	40023800 	.word	0x40023800
 801cab0:	40013800 	.word	0x40013800
 801cab4:	40020000 	.word	0x40020000
 801cab8:	40020400 	.word	0x40020400
 801cabc:	40020800 	.word	0x40020800
 801cac0:	40020c00 	.word	0x40020c00
 801cac4:	40021000 	.word	0x40021000
 801cac8:	40013c00 	.word	0x40013c00

0801cacc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801cacc:	b480      	push	{r7}
 801cace:	b087      	sub	sp, #28
 801cad0:	af00      	add	r7, sp, #0
 801cad2:	6078      	str	r0, [r7, #4]
 801cad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801cad6:	2300      	movs	r3, #0
 801cad8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801cada:	2300      	movs	r3, #0
 801cadc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801cade:	2300      	movs	r3, #0
 801cae0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cae2:	2300      	movs	r3, #0
 801cae4:	617b      	str	r3, [r7, #20]
 801cae6:	e0bb      	b.n	801cc60 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801cae8:	2201      	movs	r2, #1
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	fa02 f303 	lsl.w	r3, r2, r3
 801caf0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801caf2:	683a      	ldr	r2, [r7, #0]
 801caf4:	693b      	ldr	r3, [r7, #16]
 801caf6:	4013      	ands	r3, r2
 801caf8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801cafa:	68fa      	ldr	r2, [r7, #12]
 801cafc:	693b      	ldr	r3, [r7, #16]
 801cafe:	429a      	cmp	r2, r3
 801cb00:	f040 80ab 	bne.w	801cc5a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801cb04:	4a5c      	ldr	r2, [pc, #368]	; (801cc78 <HAL_GPIO_DeInit+0x1ac>)
 801cb06:	697b      	ldr	r3, [r7, #20]
 801cb08:	089b      	lsrs	r3, r3, #2
 801cb0a:	3302      	adds	r3, #2
 801cb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801cb12:	697b      	ldr	r3, [r7, #20]
 801cb14:	f003 0303 	and.w	r3, r3, #3
 801cb18:	009b      	lsls	r3, r3, #2
 801cb1a:	220f      	movs	r2, #15
 801cb1c:	fa02 f303 	lsl.w	r3, r2, r3
 801cb20:	68ba      	ldr	r2, [r7, #8]
 801cb22:	4013      	ands	r3, r2
 801cb24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	4a54      	ldr	r2, [pc, #336]	; (801cc7c <HAL_GPIO_DeInit+0x1b0>)
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d019      	beq.n	801cb62 <HAL_GPIO_DeInit+0x96>
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	4a53      	ldr	r2, [pc, #332]	; (801cc80 <HAL_GPIO_DeInit+0x1b4>)
 801cb32:	4293      	cmp	r3, r2
 801cb34:	d013      	beq.n	801cb5e <HAL_GPIO_DeInit+0x92>
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	4a52      	ldr	r2, [pc, #328]	; (801cc84 <HAL_GPIO_DeInit+0x1b8>)
 801cb3a:	4293      	cmp	r3, r2
 801cb3c:	d00d      	beq.n	801cb5a <HAL_GPIO_DeInit+0x8e>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	4a51      	ldr	r2, [pc, #324]	; (801cc88 <HAL_GPIO_DeInit+0x1bc>)
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d007      	beq.n	801cb56 <HAL_GPIO_DeInit+0x8a>
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	4a50      	ldr	r2, [pc, #320]	; (801cc8c <HAL_GPIO_DeInit+0x1c0>)
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	d101      	bne.n	801cb52 <HAL_GPIO_DeInit+0x86>
 801cb4e:	2304      	movs	r3, #4
 801cb50:	e008      	b.n	801cb64 <HAL_GPIO_DeInit+0x98>
 801cb52:	2307      	movs	r3, #7
 801cb54:	e006      	b.n	801cb64 <HAL_GPIO_DeInit+0x98>
 801cb56:	2303      	movs	r3, #3
 801cb58:	e004      	b.n	801cb64 <HAL_GPIO_DeInit+0x98>
 801cb5a:	2302      	movs	r3, #2
 801cb5c:	e002      	b.n	801cb64 <HAL_GPIO_DeInit+0x98>
 801cb5e:	2301      	movs	r3, #1
 801cb60:	e000      	b.n	801cb64 <HAL_GPIO_DeInit+0x98>
 801cb62:	2300      	movs	r3, #0
 801cb64:	697a      	ldr	r2, [r7, #20]
 801cb66:	f002 0203 	and.w	r2, r2, #3
 801cb6a:	0092      	lsls	r2, r2, #2
 801cb6c:	4093      	lsls	r3, r2
 801cb6e:	68ba      	ldr	r2, [r7, #8]
 801cb70:	429a      	cmp	r2, r3
 801cb72:	d132      	bne.n	801cbda <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801cb74:	4b46      	ldr	r3, [pc, #280]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb76:	681a      	ldr	r2, [r3, #0]
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	43db      	mvns	r3, r3
 801cb7c:	4944      	ldr	r1, [pc, #272]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb7e:	4013      	ands	r3, r2
 801cb80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801cb82:	4b43      	ldr	r3, [pc, #268]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb84:	685a      	ldr	r2, [r3, #4]
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	43db      	mvns	r3, r3
 801cb8a:	4941      	ldr	r1, [pc, #260]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb8c:	4013      	ands	r3, r2
 801cb8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801cb90:	4b3f      	ldr	r3, [pc, #252]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb92:	68da      	ldr	r2, [r3, #12]
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	43db      	mvns	r3, r3
 801cb98:	493d      	ldr	r1, [pc, #244]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cb9a:	4013      	ands	r3, r2
 801cb9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801cb9e:	4b3c      	ldr	r3, [pc, #240]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cba0:	689a      	ldr	r2, [r3, #8]
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	43db      	mvns	r3, r3
 801cba6:	493a      	ldr	r1, [pc, #232]	; (801cc90 <HAL_GPIO_DeInit+0x1c4>)
 801cba8:	4013      	ands	r3, r2
 801cbaa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801cbac:	697b      	ldr	r3, [r7, #20]
 801cbae:	f003 0303 	and.w	r3, r3, #3
 801cbb2:	009b      	lsls	r3, r3, #2
 801cbb4:	220f      	movs	r2, #15
 801cbb6:	fa02 f303 	lsl.w	r3, r2, r3
 801cbba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801cbbc:	4a2e      	ldr	r2, [pc, #184]	; (801cc78 <HAL_GPIO_DeInit+0x1ac>)
 801cbbe:	697b      	ldr	r3, [r7, #20]
 801cbc0:	089b      	lsrs	r3, r3, #2
 801cbc2:	3302      	adds	r3, #2
 801cbc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	43da      	mvns	r2, r3
 801cbcc:	482a      	ldr	r0, [pc, #168]	; (801cc78 <HAL_GPIO_DeInit+0x1ac>)
 801cbce:	697b      	ldr	r3, [r7, #20]
 801cbd0:	089b      	lsrs	r3, r3, #2
 801cbd2:	400a      	ands	r2, r1
 801cbd4:	3302      	adds	r3, #2
 801cbd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	681a      	ldr	r2, [r3, #0]
 801cbde:	697b      	ldr	r3, [r7, #20]
 801cbe0:	005b      	lsls	r3, r3, #1
 801cbe2:	2103      	movs	r1, #3
 801cbe4:	fa01 f303 	lsl.w	r3, r1, r3
 801cbe8:	43db      	mvns	r3, r3
 801cbea:	401a      	ands	r2, r3
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801cbf0:	697b      	ldr	r3, [r7, #20]
 801cbf2:	08da      	lsrs	r2, r3, #3
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	3208      	adds	r2, #8
 801cbf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cbfc:	697b      	ldr	r3, [r7, #20]
 801cbfe:	f003 0307 	and.w	r3, r3, #7
 801cc02:	009b      	lsls	r3, r3, #2
 801cc04:	220f      	movs	r2, #15
 801cc06:	fa02 f303 	lsl.w	r3, r2, r3
 801cc0a:	43db      	mvns	r3, r3
 801cc0c:	697a      	ldr	r2, [r7, #20]
 801cc0e:	08d2      	lsrs	r2, r2, #3
 801cc10:	4019      	ands	r1, r3
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	3208      	adds	r2, #8
 801cc16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	68da      	ldr	r2, [r3, #12]
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	005b      	lsls	r3, r3, #1
 801cc22:	2103      	movs	r1, #3
 801cc24:	fa01 f303 	lsl.w	r3, r1, r3
 801cc28:	43db      	mvns	r3, r3
 801cc2a:	401a      	ands	r2, r3
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	685a      	ldr	r2, [r3, #4]
 801cc34:	2101      	movs	r1, #1
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	fa01 f303 	lsl.w	r3, r1, r3
 801cc3c:	43db      	mvns	r3, r3
 801cc3e:	401a      	ands	r2, r3
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	689a      	ldr	r2, [r3, #8]
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	005b      	lsls	r3, r3, #1
 801cc4c:	2103      	movs	r1, #3
 801cc4e:	fa01 f303 	lsl.w	r3, r1, r3
 801cc52:	43db      	mvns	r3, r3
 801cc54:	401a      	ands	r2, r3
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	3301      	adds	r3, #1
 801cc5e:	617b      	str	r3, [r7, #20]
 801cc60:	697b      	ldr	r3, [r7, #20]
 801cc62:	2b0f      	cmp	r3, #15
 801cc64:	f67f af40 	bls.w	801cae8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801cc68:	bf00      	nop
 801cc6a:	bf00      	nop
 801cc6c:	371c      	adds	r7, #28
 801cc6e:	46bd      	mov	sp, r7
 801cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc74:	4770      	bx	lr
 801cc76:	bf00      	nop
 801cc78:	40013800 	.word	0x40013800
 801cc7c:	40020000 	.word	0x40020000
 801cc80:	40020400 	.word	0x40020400
 801cc84:	40020800 	.word	0x40020800
 801cc88:	40020c00 	.word	0x40020c00
 801cc8c:	40021000 	.word	0x40021000
 801cc90:	40013c00 	.word	0x40013c00

0801cc94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cc94:	b480      	push	{r7}
 801cc96:	b083      	sub	sp, #12
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
 801cc9c:	460b      	mov	r3, r1
 801cc9e:	807b      	strh	r3, [r7, #2]
 801cca0:	4613      	mov	r3, r2
 801cca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801cca4:	787b      	ldrb	r3, [r7, #1]
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d003      	beq.n	801ccb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ccaa:	887a      	ldrh	r2, [r7, #2]
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801ccb0:	e003      	b.n	801ccba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801ccb2:	887b      	ldrh	r3, [r7, #2]
 801ccb4:	041a      	lsls	r2, r3, #16
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	619a      	str	r2, [r3, #24]
}
 801ccba:	bf00      	nop
 801ccbc:	370c      	adds	r7, #12
 801ccbe:	46bd      	mov	sp, r7
 801ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccc4:	4770      	bx	lr
	...

0801ccc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	b082      	sub	sp, #8
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	4603      	mov	r3, r0
 801ccd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801ccd2:	4b08      	ldr	r3, [pc, #32]	; (801ccf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ccd4:	695a      	ldr	r2, [r3, #20]
 801ccd6:	88fb      	ldrh	r3, [r7, #6]
 801ccd8:	4013      	ands	r3, r2
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d006      	beq.n	801ccec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801ccde:	4a05      	ldr	r2, [pc, #20]	; (801ccf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801cce0:	88fb      	ldrh	r3, [r7, #6]
 801cce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801cce4:	88fb      	ldrh	r3, [r7, #6]
 801cce6:	4618      	mov	r0, r3
 801cce8:	f7e5 fa34 	bl	8002154 <HAL_GPIO_EXTI_Callback>
  }
}
 801ccec:	bf00      	nop
 801ccee:	3708      	adds	r7, #8
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bd80      	pop	{r7, pc}
 801ccf4:	40013c00 	.word	0x40013c00

0801ccf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b084      	sub	sp, #16
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d101      	bne.n	801cd0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801cd06:	2301      	movs	r3, #1
 801cd08:	e12b      	b.n	801cf62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d106      	bne.n	801cd24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2200      	movs	r2, #0
 801cd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801cd1e:	6878      	ldr	r0, [r7, #4]
 801cd20:	f7e6 fcc8 	bl	80036b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2224      	movs	r2, #36	; 0x24
 801cd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	681a      	ldr	r2, [r3, #0]
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	f022 0201 	bic.w	r2, r2, #1
 801cd3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	681a      	ldr	r2, [r3, #0]
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cd4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	681a      	ldr	r2, [r3, #0]
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cd5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801cd5c:	f003 fb62 	bl	8020424 <HAL_RCC_GetPCLK1Freq>
 801cd60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	4a81      	ldr	r2, [pc, #516]	; (801cf6c <HAL_I2C_Init+0x274>)
 801cd68:	4293      	cmp	r3, r2
 801cd6a:	d807      	bhi.n	801cd7c <HAL_I2C_Init+0x84>
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	4a80      	ldr	r2, [pc, #512]	; (801cf70 <HAL_I2C_Init+0x278>)
 801cd70:	4293      	cmp	r3, r2
 801cd72:	bf94      	ite	ls
 801cd74:	2301      	movls	r3, #1
 801cd76:	2300      	movhi	r3, #0
 801cd78:	b2db      	uxtb	r3, r3
 801cd7a:	e006      	b.n	801cd8a <HAL_I2C_Init+0x92>
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	4a7d      	ldr	r2, [pc, #500]	; (801cf74 <HAL_I2C_Init+0x27c>)
 801cd80:	4293      	cmp	r3, r2
 801cd82:	bf94      	ite	ls
 801cd84:	2301      	movls	r3, #1
 801cd86:	2300      	movhi	r3, #0
 801cd88:	b2db      	uxtb	r3, r3
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d001      	beq.n	801cd92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801cd8e:	2301      	movs	r3, #1
 801cd90:	e0e7      	b.n	801cf62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	4a78      	ldr	r2, [pc, #480]	; (801cf78 <HAL_I2C_Init+0x280>)
 801cd96:	fba2 2303 	umull	r2, r3, r2, r3
 801cd9a:	0c9b      	lsrs	r3, r3, #18
 801cd9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	685b      	ldr	r3, [r3, #4]
 801cda4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	68ba      	ldr	r2, [r7, #8]
 801cdae:	430a      	orrs	r2, r1
 801cdb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	6a1b      	ldr	r3, [r3, #32]
 801cdb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	685b      	ldr	r3, [r3, #4]
 801cdc0:	4a6a      	ldr	r2, [pc, #424]	; (801cf6c <HAL_I2C_Init+0x274>)
 801cdc2:	4293      	cmp	r3, r2
 801cdc4:	d802      	bhi.n	801cdcc <HAL_I2C_Init+0xd4>
 801cdc6:	68bb      	ldr	r3, [r7, #8]
 801cdc8:	3301      	adds	r3, #1
 801cdca:	e009      	b.n	801cde0 <HAL_I2C_Init+0xe8>
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801cdd2:	fb02 f303 	mul.w	r3, r2, r3
 801cdd6:	4a69      	ldr	r2, [pc, #420]	; (801cf7c <HAL_I2C_Init+0x284>)
 801cdd8:	fba2 2303 	umull	r2, r3, r2, r3
 801cddc:	099b      	lsrs	r3, r3, #6
 801cdde:	3301      	adds	r3, #1
 801cde0:	687a      	ldr	r2, [r7, #4]
 801cde2:	6812      	ldr	r2, [r2, #0]
 801cde4:	430b      	orrs	r3, r1
 801cde6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	69db      	ldr	r3, [r3, #28]
 801cdee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801cdf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	685b      	ldr	r3, [r3, #4]
 801cdfa:	495c      	ldr	r1, [pc, #368]	; (801cf6c <HAL_I2C_Init+0x274>)
 801cdfc:	428b      	cmp	r3, r1
 801cdfe:	d819      	bhi.n	801ce34 <HAL_I2C_Init+0x13c>
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	1e59      	subs	r1, r3, #1
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	685b      	ldr	r3, [r3, #4]
 801ce08:	005b      	lsls	r3, r3, #1
 801ce0a:	fbb1 f3f3 	udiv	r3, r1, r3
 801ce0e:	1c59      	adds	r1, r3, #1
 801ce10:	f640 73fc 	movw	r3, #4092	; 0xffc
 801ce14:	400b      	ands	r3, r1
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d00a      	beq.n	801ce30 <HAL_I2C_Init+0x138>
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	1e59      	subs	r1, r3, #1
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	685b      	ldr	r3, [r3, #4]
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	fbb1 f3f3 	udiv	r3, r1, r3
 801ce28:	3301      	adds	r3, #1
 801ce2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce2e:	e051      	b.n	801ced4 <HAL_I2C_Init+0x1dc>
 801ce30:	2304      	movs	r3, #4
 801ce32:	e04f      	b.n	801ced4 <HAL_I2C_Init+0x1dc>
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	689b      	ldr	r3, [r3, #8]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d111      	bne.n	801ce60 <HAL_I2C_Init+0x168>
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	1e58      	subs	r0, r3, #1
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	6859      	ldr	r1, [r3, #4]
 801ce44:	460b      	mov	r3, r1
 801ce46:	005b      	lsls	r3, r3, #1
 801ce48:	440b      	add	r3, r1
 801ce4a:	fbb0 f3f3 	udiv	r3, r0, r3
 801ce4e:	3301      	adds	r3, #1
 801ce50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	bf0c      	ite	eq
 801ce58:	2301      	moveq	r3, #1
 801ce5a:	2300      	movne	r3, #0
 801ce5c:	b2db      	uxtb	r3, r3
 801ce5e:	e012      	b.n	801ce86 <HAL_I2C_Init+0x18e>
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	1e58      	subs	r0, r3, #1
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	6859      	ldr	r1, [r3, #4]
 801ce68:	460b      	mov	r3, r1
 801ce6a:	009b      	lsls	r3, r3, #2
 801ce6c:	440b      	add	r3, r1
 801ce6e:	0099      	lsls	r1, r3, #2
 801ce70:	440b      	add	r3, r1
 801ce72:	fbb0 f3f3 	udiv	r3, r0, r3
 801ce76:	3301      	adds	r3, #1
 801ce78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	bf0c      	ite	eq
 801ce80:	2301      	moveq	r3, #1
 801ce82:	2300      	movne	r3, #0
 801ce84:	b2db      	uxtb	r3, r3
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d001      	beq.n	801ce8e <HAL_I2C_Init+0x196>
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	e022      	b.n	801ced4 <HAL_I2C_Init+0x1dc>
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	689b      	ldr	r3, [r3, #8]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d10e      	bne.n	801ceb4 <HAL_I2C_Init+0x1bc>
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	1e58      	subs	r0, r3, #1
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	6859      	ldr	r1, [r3, #4]
 801ce9e:	460b      	mov	r3, r1
 801cea0:	005b      	lsls	r3, r3, #1
 801cea2:	440b      	add	r3, r1
 801cea4:	fbb0 f3f3 	udiv	r3, r0, r3
 801cea8:	3301      	adds	r3, #1
 801ceaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ceae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ceb2:	e00f      	b.n	801ced4 <HAL_I2C_Init+0x1dc>
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	1e58      	subs	r0, r3, #1
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	6859      	ldr	r1, [r3, #4]
 801cebc:	460b      	mov	r3, r1
 801cebe:	009b      	lsls	r3, r3, #2
 801cec0:	440b      	add	r3, r1
 801cec2:	0099      	lsls	r1, r3, #2
 801cec4:	440b      	add	r3, r1
 801cec6:	fbb0 f3f3 	udiv	r3, r0, r3
 801ceca:	3301      	adds	r3, #1
 801cecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ced0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ced4:	6879      	ldr	r1, [r7, #4]
 801ced6:	6809      	ldr	r1, [r1, #0]
 801ced8:	4313      	orrs	r3, r2
 801ceda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	69da      	ldr	r2, [r3, #28]
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	6a1b      	ldr	r3, [r3, #32]
 801ceee:	431a      	orrs	r2, r3
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	430a      	orrs	r2, r1
 801cef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	689b      	ldr	r3, [r3, #8]
 801cefe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801cf02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801cf06:	687a      	ldr	r2, [r7, #4]
 801cf08:	6911      	ldr	r1, [r2, #16]
 801cf0a:	687a      	ldr	r2, [r7, #4]
 801cf0c:	68d2      	ldr	r2, [r2, #12]
 801cf0e:	4311      	orrs	r1, r2
 801cf10:	687a      	ldr	r2, [r7, #4]
 801cf12:	6812      	ldr	r2, [r2, #0]
 801cf14:	430b      	orrs	r3, r1
 801cf16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	68db      	ldr	r3, [r3, #12]
 801cf1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	695a      	ldr	r2, [r3, #20]
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	699b      	ldr	r3, [r3, #24]
 801cf2a:	431a      	orrs	r2, r3
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	430a      	orrs	r2, r1
 801cf32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	681a      	ldr	r2, [r3, #0]
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	f042 0201 	orr.w	r2, r2, #1
 801cf42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	2200      	movs	r2, #0
 801cf48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	2220      	movs	r2, #32
 801cf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	2200      	movs	r2, #0
 801cf56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801cf60:	2300      	movs	r3, #0
}
 801cf62:	4618      	mov	r0, r3
 801cf64:	3710      	adds	r7, #16
 801cf66:	46bd      	mov	sp, r7
 801cf68:	bd80      	pop	{r7, pc}
 801cf6a:	bf00      	nop
 801cf6c:	000186a0 	.word	0x000186a0
 801cf70:	001e847f 	.word	0x001e847f
 801cf74:	003d08ff 	.word	0x003d08ff
 801cf78:	431bde83 	.word	0x431bde83
 801cf7c:	10624dd3 	.word	0x10624dd3

0801cf80 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801cf80:	b580      	push	{r7, lr}
 801cf82:	b086      	sub	sp, #24
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	60f8      	str	r0, [r7, #12]
 801cf88:	607a      	str	r2, [r7, #4]
 801cf8a:	461a      	mov	r2, r3
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	817b      	strh	r3, [r7, #10]
 801cf90:	4613      	mov	r3, r2
 801cf92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801cf94:	2300      	movs	r3, #0
 801cf96:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf9e:	b2db      	uxtb	r3, r3
 801cfa0:	2b20      	cmp	r3, #32
 801cfa2:	f040 810d 	bne.w	801d1c0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801cfa6:	4b89      	ldr	r3, [pc, #548]	; (801d1cc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	08db      	lsrs	r3, r3, #3
 801cfac:	4a88      	ldr	r2, [pc, #544]	; (801d1d0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801cfae:	fba2 2303 	umull	r2, r3, r2, r3
 801cfb2:	0a1a      	lsrs	r2, r3, #8
 801cfb4:	4613      	mov	r3, r2
 801cfb6:	009b      	lsls	r3, r3, #2
 801cfb8:	4413      	add	r3, r2
 801cfba:	009a      	lsls	r2, r3, #2
 801cfbc:	4413      	add	r3, r2
 801cfbe:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801cfc0:	693b      	ldr	r3, [r7, #16]
 801cfc2:	3b01      	subs	r3, #1
 801cfc4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801cfc6:	693b      	ldr	r3, [r7, #16]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d116      	bne.n	801cffa <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	2200      	movs	r2, #0
 801cfd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	2220      	movs	r2, #32
 801cfd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	2200      	movs	r2, #0
 801cfde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cfe6:	f043 0220 	orr.w	r2, r3, #32
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	2200      	movs	r2, #0
 801cff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cff6:	2301      	movs	r3, #1
 801cff8:	e0e3      	b.n	801d1c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	699b      	ldr	r3, [r3, #24]
 801d000:	f003 0302 	and.w	r3, r3, #2
 801d004:	2b02      	cmp	r3, #2
 801d006:	d0db      	beq.n	801cfc0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d101      	bne.n	801d016 <HAL_I2C_Master_Transmit_DMA+0x96>
 801d012:	2302      	movs	r3, #2
 801d014:	e0d5      	b.n	801d1c2 <HAL_I2C_Master_Transmit_DMA+0x242>
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	2201      	movs	r2, #1
 801d01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	f003 0301 	and.w	r3, r3, #1
 801d028:	2b01      	cmp	r3, #1
 801d02a:	d007      	beq.n	801d03c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	681a      	ldr	r2, [r3, #0]
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f042 0201 	orr.w	r2, r2, #1
 801d03a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	681a      	ldr	r2, [r3, #0]
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d04a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	2221      	movs	r2, #33	; 0x21
 801d050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	2210      	movs	r2, #16
 801d058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	2200      	movs	r2, #0
 801d060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	687a      	ldr	r2, [r7, #4]
 801d066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	893a      	ldrh	r2, [r7, #8]
 801d06c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d072:	b29a      	uxth	r2, r3
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d078:	68fb      	ldr	r3, [r7, #12]
 801d07a:	4a56      	ldr	r2, [pc, #344]	; (801d1d4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801d07c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d07e:	897a      	ldrh	r2, [r7, #10]
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d07b      	beq.n	801d184 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d090:	2b00      	cmp	r3, #0
 801d092:	d02a      	beq.n	801d0ea <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d098:	4a4f      	ldr	r2, [pc, #316]	; (801d1d8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801d09a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0a0:	4a4e      	ldr	r2, [pc, #312]	; (801d1dc <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801d0a2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0cc:	4619      	mov	r1, r3
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	3310      	adds	r3, #16
 801d0d4:	461a      	mov	r2, r3
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d0da:	f7ff f805 	bl	801c0e8 <HAL_DMA_Start_IT>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d0e2:	7dfb      	ldrb	r3, [r7, #23]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d139      	bne.n	801d15c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801d0e8:	e013      	b.n	801d112 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	2220      	movs	r2, #32
 801d0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d0f2:	68fb      	ldr	r3, [r7, #12]
 801d0f4:	2200      	movs	r2, #0
 801d0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d0fa:	68fb      	ldr	r3, [r7, #12]
 801d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	2200      	movs	r2, #0
 801d10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d10e:	2301      	movs	r3, #1
 801d110:	e057      	b.n	801d1c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	2200      	movs	r2, #0
 801d116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	685a      	ldr	r2, [r3, #4]
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801d128:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	685a      	ldr	r2, [r3, #4]
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d138:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	681a      	ldr	r2, [r3, #0]
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d148:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	681a      	ldr	r2, [r3, #0]
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d158:	601a      	str	r2, [r3, #0]
 801d15a:	e02f      	b.n	801d1bc <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	2220      	movs	r2, #32
 801d160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	2200      	movs	r2, #0
 801d168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d170:	f043 0210 	orr.w	r2, r3, #16
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	2200      	movs	r2, #0
 801d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d180:	2301      	movs	r3, #1
 801d182:	e01e      	b.n	801d1c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d184:	68fb      	ldr	r3, [r7, #12]
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	681a      	ldr	r2, [r3, #0]
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d192:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	681a      	ldr	r2, [r3, #0]
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d1a2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	685a      	ldr	r2, [r3, #4]
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d1ba:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801d1bc:	2300      	movs	r3, #0
 801d1be:	e000      	b.n	801d1c2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801d1c0:	2302      	movs	r3, #2
  }
}
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	3718      	adds	r7, #24
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	bd80      	pop	{r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	20000020 	.word	0x20000020
 801d1d0:	14f8b589 	.word	0x14f8b589
 801d1d4:	ffff0000 	.word	0xffff0000
 801d1d8:	0801f4a9 	.word	0x0801f4a9
 801d1dc:	0801f653 	.word	0x0801f653

0801d1e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b086      	sub	sp, #24
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	60f8      	str	r0, [r7, #12]
 801d1e8:	607a      	str	r2, [r7, #4]
 801d1ea:	461a      	mov	r2, r3
 801d1ec:	460b      	mov	r3, r1
 801d1ee:	817b      	strh	r3, [r7, #10]
 801d1f0:	4613      	mov	r3, r2
 801d1f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d1fe:	b2db      	uxtb	r3, r3
 801d200:	2b20      	cmp	r3, #32
 801d202:	f040 810d 	bne.w	801d420 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d206:	4b89      	ldr	r3, [pc, #548]	; (801d42c <HAL_I2C_Master_Receive_DMA+0x24c>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	08db      	lsrs	r3, r3, #3
 801d20c:	4a88      	ldr	r2, [pc, #544]	; (801d430 <HAL_I2C_Master_Receive_DMA+0x250>)
 801d20e:	fba2 2303 	umull	r2, r3, r2, r3
 801d212:	0a1a      	lsrs	r2, r3, #8
 801d214:	4613      	mov	r3, r2
 801d216:	009b      	lsls	r3, r3, #2
 801d218:	4413      	add	r3, r2
 801d21a:	009a      	lsls	r2, r3, #2
 801d21c:	4413      	add	r3, r2
 801d21e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d220:	693b      	ldr	r3, [r7, #16]
 801d222:	3b01      	subs	r3, #1
 801d224:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d226:	693b      	ldr	r3, [r7, #16]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d116      	bne.n	801d25a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	2200      	movs	r2, #0
 801d230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	2220      	movs	r2, #32
 801d236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	2200      	movs	r2, #0
 801d23e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d246:	f043 0220 	orr.w	r2, r3, #32
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	2200      	movs	r2, #0
 801d252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d256:	2301      	movs	r3, #1
 801d258:	e0e3      	b.n	801d422 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	699b      	ldr	r3, [r3, #24]
 801d260:	f003 0302 	and.w	r3, r3, #2
 801d264:	2b02      	cmp	r3, #2
 801d266:	d0db      	beq.n	801d220 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d26e:	2b01      	cmp	r3, #1
 801d270:	d101      	bne.n	801d276 <HAL_I2C_Master_Receive_DMA+0x96>
 801d272:	2302      	movs	r3, #2
 801d274:	e0d5      	b.n	801d422 <HAL_I2C_Master_Receive_DMA+0x242>
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	2201      	movs	r2, #1
 801d27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	f003 0301 	and.w	r3, r3, #1
 801d288:	2b01      	cmp	r3, #1
 801d28a:	d007      	beq.n	801d29c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	681a      	ldr	r2, [r3, #0]
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	f042 0201 	orr.w	r2, r2, #1
 801d29a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	681a      	ldr	r2, [r3, #0]
 801d2a2:	68fb      	ldr	r3, [r7, #12]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d2aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	2222      	movs	r2, #34	; 0x22
 801d2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	2210      	movs	r2, #16
 801d2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	2200      	movs	r2, #0
 801d2c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	687a      	ldr	r2, [r7, #4]
 801d2c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	893a      	ldrh	r2, [r7, #8]
 801d2cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d2d2:	b29a      	uxth	r2, r3
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d2d8:	68fb      	ldr	r3, [r7, #12]
 801d2da:	4a56      	ldr	r2, [pc, #344]	; (801d434 <HAL_I2C_Master_Receive_DMA+0x254>)
 801d2dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d2de:	897a      	ldrh	r2, [r7, #10]
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d07b      	beq.n	801d3e4 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d02a      	beq.n	801d34a <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2f8:	4a4f      	ldr	r2, [pc, #316]	; (801d438 <HAL_I2C_Master_Receive_DMA+0x258>)
 801d2fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d300:	4a4e      	ldr	r2, [pc, #312]	; (801d43c <HAL_I2C_Master_Receive_DMA+0x25c>)
 801d302:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d308:	2200      	movs	r2, #0
 801d30a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d310:	2200      	movs	r2, #0
 801d312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d318:	2200      	movs	r2, #0
 801d31a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d320:	2200      	movs	r2, #0
 801d322:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	3310      	adds	r3, #16
 801d32e:	4619      	mov	r1, r3
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d334:	461a      	mov	r2, r3
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d33a:	f7fe fed5 	bl	801c0e8 <HAL_DMA_Start_IT>
 801d33e:	4603      	mov	r3, r0
 801d340:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d342:	7dfb      	ldrb	r3, [r7, #23]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d139      	bne.n	801d3bc <HAL_I2C_Master_Receive_DMA+0x1dc>
 801d348:	e013      	b.n	801d372 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	2220      	movs	r2, #32
 801d34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	2200      	movs	r2, #0
 801d356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d35e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	2200      	movs	r2, #0
 801d36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d36e:	2301      	movs	r3, #1
 801d370:	e057      	b.n	801d422 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	681a      	ldr	r2, [r3, #0]
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d380:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	681a      	ldr	r2, [r3, #0]
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d390:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	2200      	movs	r2, #0
 801d396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	685a      	ldr	r2, [r3, #4]
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801d3a8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	685a      	ldr	r2, [r3, #4]
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d3b8:	605a      	str	r2, [r3, #4]
 801d3ba:	e02f      	b.n	801d41c <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	2220      	movs	r2, #32
 801d3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3d0:	f043 0210 	orr.w	r2, r3, #16
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	2200      	movs	r2, #0
 801d3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d3e0:	2301      	movs	r3, #1
 801d3e2:	e01e      	b.n	801d422 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	2200      	movs	r2, #0
 801d3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	685a      	ldr	r2, [r3, #4]
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d3fa:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	681a      	ldr	r2, [r3, #0]
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d40a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	681a      	ldr	r2, [r3, #0]
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d41a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801d41c:	2300      	movs	r3, #0
 801d41e:	e000      	b.n	801d422 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801d420:	2302      	movs	r3, #2
  }
}
 801d422:	4618      	mov	r0, r3
 801d424:	3718      	adds	r7, #24
 801d426:	46bd      	mov	sp, r7
 801d428:	bd80      	pop	{r7, pc}
 801d42a:	bf00      	nop
 801d42c:	20000020 	.word	0x20000020
 801d430:	14f8b589 	.word	0x14f8b589
 801d434:	ffff0000 	.word	0xffff0000
 801d438:	0801f4a9 	.word	0x0801f4a9
 801d43c:	0801f653 	.word	0x0801f653

0801d440 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801d440:	b580      	push	{r7, lr}
 801d442:	b08a      	sub	sp, #40	; 0x28
 801d444:	af02      	add	r7, sp, #8
 801d446:	60f8      	str	r0, [r7, #12]
 801d448:	4608      	mov	r0, r1
 801d44a:	4611      	mov	r1, r2
 801d44c:	461a      	mov	r2, r3
 801d44e:	4603      	mov	r3, r0
 801d450:	817b      	strh	r3, [r7, #10]
 801d452:	460b      	mov	r3, r1
 801d454:	813b      	strh	r3, [r7, #8]
 801d456:	4613      	mov	r3, r2
 801d458:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801d45a:	2300      	movs	r3, #0
 801d45c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801d45e:	f7fe f843 	bl	801b4e8 <HAL_GetTick>
 801d462:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d46a:	b2db      	uxtb	r3, r3
 801d46c:	2b20      	cmp	r3, #32
 801d46e:	f040 8145 	bne.w	801d6fc <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d472:	4b9d      	ldr	r3, [pc, #628]	; (801d6e8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	08db      	lsrs	r3, r3, #3
 801d478:	4a9c      	ldr	r2, [pc, #624]	; (801d6ec <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801d47a:	fba2 2303 	umull	r2, r3, r2, r3
 801d47e:	0a1a      	lsrs	r2, r3, #8
 801d480:	4613      	mov	r3, r2
 801d482:	009b      	lsls	r3, r3, #2
 801d484:	4413      	add	r3, r2
 801d486:	009a      	lsls	r2, r3, #2
 801d488:	4413      	add	r3, r2
 801d48a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801d48c:	697b      	ldr	r3, [r7, #20]
 801d48e:	3b01      	subs	r3, #1
 801d490:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801d492:	697b      	ldr	r3, [r7, #20]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d116      	bne.n	801d4c6 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	2200      	movs	r2, #0
 801d49c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	2220      	movs	r2, #32
 801d4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	2200      	movs	r2, #0
 801d4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4b2:	f043 0220 	orr.w	r2, r3, #32
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d4c2:	2301      	movs	r3, #1
 801d4c4:	e11b      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	699b      	ldr	r3, [r3, #24]
 801d4cc:	f003 0302 	and.w	r3, r3, #2
 801d4d0:	2b02      	cmp	r3, #2
 801d4d2:	d0db      	beq.n	801d48c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d4da:	2b01      	cmp	r3, #1
 801d4dc:	d101      	bne.n	801d4e2 <HAL_I2C_Mem_Write_DMA+0xa2>
 801d4de:	2302      	movs	r3, #2
 801d4e0:	e10d      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	2201      	movs	r2, #1
 801d4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	f003 0301 	and.w	r3, r3, #1
 801d4f4:	2b01      	cmp	r3, #1
 801d4f6:	d007      	beq.n	801d508 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	681a      	ldr	r2, [r3, #0]
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	f042 0201 	orr.w	r2, r2, #1
 801d506:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	681a      	ldr	r2, [r3, #0]
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d516:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	2221      	movs	r2, #33	; 0x21
 801d51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	2240      	movs	r2, #64	; 0x40
 801d524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	2200      	movs	r2, #0
 801d52c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801d538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d53e:	b29a      	uxth	r2, r3
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	4a6a      	ldr	r2, [pc, #424]	; (801d6f0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801d548:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d54a:	897a      	ldrh	r2, [r7, #10]
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801d550:	893a      	ldrh	r2, [r7, #8]
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801d556:	88fa      	ldrh	r2, [r7, #6]
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	2200      	movs	r2, #0
 801d560:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d566:	2b00      	cmp	r3, #0
 801d568:	f000 80a9 	beq.w	801d6be <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d570:	2b00      	cmp	r3, #0
 801d572:	d02a      	beq.n	801d5ca <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d578:	4a5e      	ldr	r2, [pc, #376]	; (801d6f4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801d57a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d580:	4a5d      	ldr	r2, [pc, #372]	; (801d6f8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801d582:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d588:	2200      	movs	r2, #0
 801d58a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d590:	2200      	movs	r2, #0
 801d592:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d598:	2200      	movs	r2, #0
 801d59a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5ac:	4619      	mov	r1, r3
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	3310      	adds	r3, #16
 801d5b4:	461a      	mov	r2, r3
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d5ba:	f7fe fd95 	bl	801c0e8 <HAL_DMA_Start_IT>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d5c2:	7efb      	ldrb	r3, [r7, #27]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d166      	bne.n	801d696 <HAL_I2C_Mem_Write_DMA+0x256>
 801d5c8:	e013      	b.n	801d5f2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	2220      	movs	r2, #32
 801d5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	2200      	movs	r2, #0
 801d5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d5ee:	2301      	movs	r3, #1
 801d5f0:	e085      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801d5f2:	88f8      	ldrh	r0, [r7, #6]
 801d5f4:	893a      	ldrh	r2, [r7, #8]
 801d5f6:	8979      	ldrh	r1, [r7, #10]
 801d5f8:	69fb      	ldr	r3, [r7, #28]
 801d5fa:	9301      	str	r3, [sp, #4]
 801d5fc:	2323      	movs	r3, #35	; 0x23
 801d5fe:	9300      	str	r3, [sp, #0]
 801d600:	4603      	mov	r3, r0
 801d602:	68f8      	ldr	r0, [r7, #12]
 801d604:	f001 fdd2 	bl	801f1ac <I2C_RequestMemoryWrite>
 801d608:	4603      	mov	r3, r0
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d022      	beq.n	801d654 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d612:	4618      	mov	r0, r3
 801d614:	f7fe fe30 	bl	801c278 <HAL_DMA_Abort_IT>
 801d618:	4603      	mov	r3, r0
 801d61a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d620:	2200      	movs	r2, #0
 801d622:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	681a      	ldr	r2, [r3, #0]
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d632:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	2200      	movs	r2, #0
 801d638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	2200      	movs	r2, #0
 801d63e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	681a      	ldr	r2, [r3, #0]
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	f022 0201 	bic.w	r2, r2, #1
 801d64e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801d650:	2301      	movs	r3, #1
 801d652:	e054      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d654:	2300      	movs	r3, #0
 801d656:	613b      	str	r3, [r7, #16]
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	695b      	ldr	r3, [r3, #20]
 801d65e:	613b      	str	r3, [r7, #16]
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	699b      	ldr	r3, [r3, #24]
 801d666:	613b      	str	r3, [r7, #16]
 801d668:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	2200      	movs	r2, #0
 801d66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	685a      	ldr	r2, [r3, #4]
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d680:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	685a      	ldr	r2, [r3, #4]
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d690:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801d692:	2300      	movs	r3, #0
 801d694:	e033      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	2220      	movs	r2, #32
 801d69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6aa:	f043 0210 	orr.w	r2, r3, #16
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	2200      	movs	r2, #0
 801d6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	e01f      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	2220      	movs	r2, #32
 801d6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	2200      	movs	r2, #0
 801d6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	2200      	movs	r2, #0
 801d6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801d6e2:	2301      	movs	r3, #1
 801d6e4:	e00b      	b.n	801d6fe <HAL_I2C_Mem_Write_DMA+0x2be>
 801d6e6:	bf00      	nop
 801d6e8:	20000020 	.word	0x20000020
 801d6ec:	14f8b589 	.word	0x14f8b589
 801d6f0:	ffff0000 	.word	0xffff0000
 801d6f4:	0801f4a9 	.word	0x0801f4a9
 801d6f8:	0801f653 	.word	0x0801f653
    }
  }
  else
  {
    return HAL_BUSY;
 801d6fc:	2302      	movs	r3, #2
  }
}
 801d6fe:	4618      	mov	r0, r3
 801d700:	3720      	adds	r7, #32
 801d702:	46bd      	mov	sp, r7
 801d704:	bd80      	pop	{r7, pc}
 801d706:	bf00      	nop

0801d708 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b08c      	sub	sp, #48	; 0x30
 801d70c:	af02      	add	r7, sp, #8
 801d70e:	60f8      	str	r0, [r7, #12]
 801d710:	4608      	mov	r0, r1
 801d712:	4611      	mov	r1, r2
 801d714:	461a      	mov	r2, r3
 801d716:	4603      	mov	r3, r0
 801d718:	817b      	strh	r3, [r7, #10]
 801d71a:	460b      	mov	r3, r1
 801d71c:	813b      	strh	r3, [r7, #8]
 801d71e:	4613      	mov	r3, r2
 801d720:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801d722:	f7fd fee1 	bl	801b4e8 <HAL_GetTick>
 801d726:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801d728:	2300      	movs	r3, #0
 801d72a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d732:	b2db      	uxtb	r3, r3
 801d734:	2b20      	cmp	r3, #32
 801d736:	f040 8176 	bne.w	801da26 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d73a:	4b95      	ldr	r3, [pc, #596]	; (801d990 <HAL_I2C_Mem_Read_DMA+0x288>)
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	08db      	lsrs	r3, r3, #3
 801d740:	4a94      	ldr	r2, [pc, #592]	; (801d994 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801d742:	fba2 2303 	umull	r2, r3, r2, r3
 801d746:	0a1a      	lsrs	r2, r3, #8
 801d748:	4613      	mov	r3, r2
 801d74a:	009b      	lsls	r3, r3, #2
 801d74c:	4413      	add	r3, r2
 801d74e:	009a      	lsls	r2, r3, #2
 801d750:	4413      	add	r3, r2
 801d752:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801d754:	69fb      	ldr	r3, [r7, #28]
 801d756:	3b01      	subs	r3, #1
 801d758:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801d75a:	69fb      	ldr	r3, [r7, #28]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d116      	bne.n	801d78e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	2200      	movs	r2, #0
 801d764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	2220      	movs	r2, #32
 801d76a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	2200      	movs	r2, #0
 801d772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d77a:	f043 0220 	orr.w	r2, r3, #32
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	2200      	movs	r2, #0
 801d786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d78a:	2301      	movs	r3, #1
 801d78c:	e14c      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	699b      	ldr	r3, [r3, #24]
 801d794:	f003 0302 	and.w	r3, r3, #2
 801d798:	2b02      	cmp	r3, #2
 801d79a:	d0db      	beq.n	801d754 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d7a2:	2b01      	cmp	r3, #1
 801d7a4:	d101      	bne.n	801d7aa <HAL_I2C_Mem_Read_DMA+0xa2>
 801d7a6:	2302      	movs	r3, #2
 801d7a8:	e13e      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	2201      	movs	r2, #1
 801d7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	f003 0301 	and.w	r3, r3, #1
 801d7bc:	2b01      	cmp	r3, #1
 801d7be:	d007      	beq.n	801d7d0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	681a      	ldr	r2, [r3, #0]
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	f042 0201 	orr.w	r2, r2, #1
 801d7ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	681a      	ldr	r2, [r3, #0]
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d7de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	2222      	movs	r2, #34	; 0x22
 801d7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	2240      	movs	r2, #64	; 0x40
 801d7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	2200      	movs	r2, #0
 801d7f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d7fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d806:	b29a      	uxth	r2, r3
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	4a62      	ldr	r2, [pc, #392]	; (801d998 <HAL_I2C_Mem_Read_DMA+0x290>)
 801d810:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d812:	897a      	ldrh	r2, [r7, #10]
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801d818:	893a      	ldrh	r2, [r7, #8]
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801d81e:	88fa      	ldrh	r2, [r7, #6]
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	2200      	movs	r2, #0
 801d828:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d82e:	2b00      	cmp	r3, #0
 801d830:	f000 80cc 	beq.w	801d9cc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d02d      	beq.n	801d898 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d840:	4a56      	ldr	r2, [pc, #344]	; (801d99c <HAL_I2C_Mem_Read_DMA+0x294>)
 801d842:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d848:	4a55      	ldr	r2, [pc, #340]	; (801d9a0 <HAL_I2C_Mem_Read_DMA+0x298>)
 801d84a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d850:	2200      	movs	r2, #0
 801d852:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d858:	2200      	movs	r2, #0
 801d85a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d860:	2200      	movs	r2, #0
 801d862:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d868:	2200      	movs	r2, #0
 801d86a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	3310      	adds	r3, #16
 801d876:	4619      	mov	r1, r3
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d87c:	461a      	mov	r2, r3
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d882:	f7fe fc31 	bl	801c0e8 <HAL_DMA_Start_IT>
 801d886:	4603      	mov	r3, r0
 801d888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d88c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d890:	2b00      	cmp	r3, #0
 801d892:	f040 8087 	bne.w	801d9a4 <HAL_I2C_Mem_Read_DMA+0x29c>
 801d896:	e013      	b.n	801d8c0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	2220      	movs	r2, #32
 801d89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	2200      	movs	r2, #0
 801d8a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d8bc:	2301      	movs	r3, #1
 801d8be:	e0b3      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801d8c0:	88f8      	ldrh	r0, [r7, #6]
 801d8c2:	893a      	ldrh	r2, [r7, #8]
 801d8c4:	8979      	ldrh	r1, [r7, #10]
 801d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8c8:	9301      	str	r3, [sp, #4]
 801d8ca:	2323      	movs	r3, #35	; 0x23
 801d8cc:	9300      	str	r3, [sp, #0]
 801d8ce:	4603      	mov	r3, r0
 801d8d0:	68f8      	ldr	r0, [r7, #12]
 801d8d2:	f001 fd01 	bl	801f2d8 <I2C_RequestMemoryRead>
 801d8d6:	4603      	mov	r3, r0
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d023      	beq.n	801d924 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	f7fe fcc9 	bl	801c278 <HAL_DMA_Abort_IT>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	681a      	ldr	r2, [r3, #0]
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d902:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	2200      	movs	r2, #0
 801d908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	2200      	movs	r2, #0
 801d90e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	681a      	ldr	r2, [r3, #0]
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	f022 0201 	bic.w	r2, r2, #1
 801d91e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801d920:	2301      	movs	r3, #1
 801d922:	e081      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d928:	2b01      	cmp	r3, #1
 801d92a:	d108      	bne.n	801d93e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	681a      	ldr	r2, [r3, #0]
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d93a:	601a      	str	r2, [r3, #0]
 801d93c:	e007      	b.n	801d94e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	685a      	ldr	r2, [r3, #4]
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d94c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d94e:	2300      	movs	r3, #0
 801d950:	61bb      	str	r3, [r7, #24]
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	695b      	ldr	r3, [r3, #20]
 801d958:	61bb      	str	r3, [r7, #24]
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	699b      	ldr	r3, [r3, #24]
 801d960:	61bb      	str	r3, [r7, #24]
 801d962:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	2200      	movs	r2, #0
 801d968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	685a      	ldr	r2, [r3, #4]
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d97a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	685a      	ldr	r2, [r3, #4]
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d98a:	605a      	str	r2, [r3, #4]
 801d98c:	e049      	b.n	801da22 <HAL_I2C_Mem_Read_DMA+0x31a>
 801d98e:	bf00      	nop
 801d990:	20000020 	.word	0x20000020
 801d994:	14f8b589 	.word	0x14f8b589
 801d998:	ffff0000 	.word	0xffff0000
 801d99c:	0801f4a9 	.word	0x0801f4a9
 801d9a0:	0801f653 	.word	0x0801f653
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	2220      	movs	r2, #32
 801d9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9b8:	f043 0210 	orr.w	r2, r3, #16
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	2200      	movs	r2, #0
 801d9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d9c8:	2301      	movs	r3, #1
 801d9ca:	e02d      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801d9cc:	88f8      	ldrh	r0, [r7, #6]
 801d9ce:	893a      	ldrh	r2, [r7, #8]
 801d9d0:	8979      	ldrh	r1, [r7, #10]
 801d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9d4:	9301      	str	r3, [sp, #4]
 801d9d6:	2323      	movs	r3, #35	; 0x23
 801d9d8:	9300      	str	r3, [sp, #0]
 801d9da:	4603      	mov	r3, r0
 801d9dc:	68f8      	ldr	r0, [r7, #12]
 801d9de:	f001 fc7b 	bl	801f2d8 <I2C_RequestMemoryRead>
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d001      	beq.n	801d9ec <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801d9e8:	2301      	movs	r3, #1
 801d9ea:	e01d      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	617b      	str	r3, [r7, #20]
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	695b      	ldr	r3, [r3, #20]
 801d9f6:	617b      	str	r3, [r7, #20]
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	699b      	ldr	r3, [r3, #24]
 801d9fe:	617b      	str	r3, [r7, #20]
 801da00:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	681a      	ldr	r2, [r3, #0]
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801da10:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801da12:	68fb      	ldr	r3, [r7, #12]
 801da14:	2220      	movs	r2, #32
 801da16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	2200      	movs	r2, #0
 801da1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801da22:	2300      	movs	r3, #0
 801da24:	e000      	b.n	801da28 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801da26:	2302      	movs	r3, #2
  }
}
 801da28:	4618      	mov	r0, r3
 801da2a:	3728      	adds	r7, #40	; 0x28
 801da2c:	46bd      	mov	sp, r7
 801da2e:	bd80      	pop	{r7, pc}

0801da30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801da30:	b580      	push	{r7, lr}
 801da32:	b088      	sub	sp, #32
 801da34:	af00      	add	r7, sp, #0
 801da36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801da38:	2300      	movs	r3, #0
 801da3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	685b      	ldr	r3, [r3, #4]
 801da42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801da50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801da58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801da5a:	7bfb      	ldrb	r3, [r7, #15]
 801da5c:	2b10      	cmp	r3, #16
 801da5e:	d003      	beq.n	801da68 <HAL_I2C_EV_IRQHandler+0x38>
 801da60:	7bfb      	ldrb	r3, [r7, #15]
 801da62:	2b40      	cmp	r3, #64	; 0x40
 801da64:	f040 80c1 	bne.w	801dbea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	699b      	ldr	r3, [r3, #24]
 801da6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	695b      	ldr	r3, [r3, #20]
 801da76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801da78:	69fb      	ldr	r3, [r7, #28]
 801da7a:	f003 0301 	and.w	r3, r3, #1
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d10d      	bne.n	801da9e <HAL_I2C_EV_IRQHandler+0x6e>
 801da82:	693b      	ldr	r3, [r7, #16]
 801da84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801da88:	d003      	beq.n	801da92 <HAL_I2C_EV_IRQHandler+0x62>
 801da8a:	693b      	ldr	r3, [r7, #16]
 801da8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801da90:	d101      	bne.n	801da96 <HAL_I2C_EV_IRQHandler+0x66>
 801da92:	2301      	movs	r3, #1
 801da94:	e000      	b.n	801da98 <HAL_I2C_EV_IRQHandler+0x68>
 801da96:	2300      	movs	r3, #0
 801da98:	2b01      	cmp	r3, #1
 801da9a:	f000 8132 	beq.w	801dd02 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801da9e:	69fb      	ldr	r3, [r7, #28]
 801daa0:	f003 0301 	and.w	r3, r3, #1
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	d00c      	beq.n	801dac2 <HAL_I2C_EV_IRQHandler+0x92>
 801daa8:	697b      	ldr	r3, [r7, #20]
 801daaa:	0a5b      	lsrs	r3, r3, #9
 801daac:	f003 0301 	and.w	r3, r3, #1
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d006      	beq.n	801dac2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801dab4:	6878      	ldr	r0, [r7, #4]
 801dab6:	f002 f82a 	bl	801fb0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801daba:	6878      	ldr	r0, [r7, #4]
 801dabc:	f000 fd5b 	bl	801e576 <I2C_Master_SB>
 801dac0:	e092      	b.n	801dbe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dac2:	69fb      	ldr	r3, [r7, #28]
 801dac4:	08db      	lsrs	r3, r3, #3
 801dac6:	f003 0301 	and.w	r3, r3, #1
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d009      	beq.n	801dae2 <HAL_I2C_EV_IRQHandler+0xb2>
 801dace:	697b      	ldr	r3, [r7, #20]
 801dad0:	0a5b      	lsrs	r3, r3, #9
 801dad2:	f003 0301 	and.w	r3, r3, #1
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d003      	beq.n	801dae2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801dada:	6878      	ldr	r0, [r7, #4]
 801dadc:	f000 fdd1 	bl	801e682 <I2C_Master_ADD10>
 801dae0:	e082      	b.n	801dbe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dae2:	69fb      	ldr	r3, [r7, #28]
 801dae4:	085b      	lsrs	r3, r3, #1
 801dae6:	f003 0301 	and.w	r3, r3, #1
 801daea:	2b00      	cmp	r3, #0
 801daec:	d009      	beq.n	801db02 <HAL_I2C_EV_IRQHandler+0xd2>
 801daee:	697b      	ldr	r3, [r7, #20]
 801daf0:	0a5b      	lsrs	r3, r3, #9
 801daf2:	f003 0301 	and.w	r3, r3, #1
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d003      	beq.n	801db02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801dafa:	6878      	ldr	r0, [r7, #4]
 801dafc:	f000 fdeb 	bl	801e6d6 <I2C_Master_ADDR>
 801db00:	e072      	b.n	801dbe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801db02:	69bb      	ldr	r3, [r7, #24]
 801db04:	089b      	lsrs	r3, r3, #2
 801db06:	f003 0301 	and.w	r3, r3, #1
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d03b      	beq.n	801db86 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801db18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801db1c:	f000 80f3 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801db20:	69fb      	ldr	r3, [r7, #28]
 801db22:	09db      	lsrs	r3, r3, #7
 801db24:	f003 0301 	and.w	r3, r3, #1
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d00f      	beq.n	801db4c <HAL_I2C_EV_IRQHandler+0x11c>
 801db2c:	697b      	ldr	r3, [r7, #20]
 801db2e:	0a9b      	lsrs	r3, r3, #10
 801db30:	f003 0301 	and.w	r3, r3, #1
 801db34:	2b00      	cmp	r3, #0
 801db36:	d009      	beq.n	801db4c <HAL_I2C_EV_IRQHandler+0x11c>
 801db38:	69fb      	ldr	r3, [r7, #28]
 801db3a:	089b      	lsrs	r3, r3, #2
 801db3c:	f003 0301 	and.w	r3, r3, #1
 801db40:	2b00      	cmp	r3, #0
 801db42:	d103      	bne.n	801db4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801db44:	6878      	ldr	r0, [r7, #4]
 801db46:	f000 f9cb 	bl	801dee0 <I2C_MasterTransmit_TXE>
 801db4a:	e04d      	b.n	801dbe8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801db4c:	69fb      	ldr	r3, [r7, #28]
 801db4e:	089b      	lsrs	r3, r3, #2
 801db50:	f003 0301 	and.w	r3, r3, #1
 801db54:	2b00      	cmp	r3, #0
 801db56:	f000 80d6 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
 801db5a:	697b      	ldr	r3, [r7, #20]
 801db5c:	0a5b      	lsrs	r3, r3, #9
 801db5e:	f003 0301 	and.w	r3, r3, #1
 801db62:	2b00      	cmp	r3, #0
 801db64:	f000 80cf 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801db68:	7bbb      	ldrb	r3, [r7, #14]
 801db6a:	2b21      	cmp	r3, #33	; 0x21
 801db6c:	d103      	bne.n	801db76 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f000 fa52 	bl	801e018 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801db74:	e0c7      	b.n	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801db76:	7bfb      	ldrb	r3, [r7, #15]
 801db78:	2b40      	cmp	r3, #64	; 0x40
 801db7a:	f040 80c4 	bne.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f000 fac0 	bl	801e104 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801db84:	e0bf      	b.n	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	685b      	ldr	r3, [r3, #4]
 801db8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801db90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801db94:	f000 80b7 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801db98:	69fb      	ldr	r3, [r7, #28]
 801db9a:	099b      	lsrs	r3, r3, #6
 801db9c:	f003 0301 	and.w	r3, r3, #1
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d00f      	beq.n	801dbc4 <HAL_I2C_EV_IRQHandler+0x194>
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	0a9b      	lsrs	r3, r3, #10
 801dba8:	f003 0301 	and.w	r3, r3, #1
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d009      	beq.n	801dbc4 <HAL_I2C_EV_IRQHandler+0x194>
 801dbb0:	69fb      	ldr	r3, [r7, #28]
 801dbb2:	089b      	lsrs	r3, r3, #2
 801dbb4:	f003 0301 	and.w	r3, r3, #1
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d103      	bne.n	801dbc4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801dbbc:	6878      	ldr	r0, [r7, #4]
 801dbbe:	f000 fb35 	bl	801e22c <I2C_MasterReceive_RXNE>
 801dbc2:	e011      	b.n	801dbe8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dbc4:	69fb      	ldr	r3, [r7, #28]
 801dbc6:	089b      	lsrs	r3, r3, #2
 801dbc8:	f003 0301 	and.w	r3, r3, #1
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	f000 809a 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
 801dbd2:	697b      	ldr	r3, [r7, #20]
 801dbd4:	0a5b      	lsrs	r3, r3, #9
 801dbd6:	f003 0301 	and.w	r3, r3, #1
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	f000 8093 	beq.w	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801dbe0:	6878      	ldr	r0, [r7, #4]
 801dbe2:	f000 fbde 	bl	801e3a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dbe6:	e08e      	b.n	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
 801dbe8:	e08d      	b.n	801dd06 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d004      	beq.n	801dbfc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	681b      	ldr	r3, [r3, #0]
 801dbf6:	695b      	ldr	r3, [r3, #20]
 801dbf8:	61fb      	str	r3, [r7, #28]
 801dbfa:	e007      	b.n	801dc0c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	699b      	ldr	r3, [r3, #24]
 801dc02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	695b      	ldr	r3, [r3, #20]
 801dc0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc0c:	69fb      	ldr	r3, [r7, #28]
 801dc0e:	085b      	lsrs	r3, r3, #1
 801dc10:	f003 0301 	and.w	r3, r3, #1
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d012      	beq.n	801dc3e <HAL_I2C_EV_IRQHandler+0x20e>
 801dc18:	697b      	ldr	r3, [r7, #20]
 801dc1a:	0a5b      	lsrs	r3, r3, #9
 801dc1c:	f003 0301 	and.w	r3, r3, #1
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d00c      	beq.n	801dc3e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d003      	beq.n	801dc34 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	699b      	ldr	r3, [r3, #24]
 801dc32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801dc34:	69b9      	ldr	r1, [r7, #24]
 801dc36:	6878      	ldr	r0, [r7, #4]
 801dc38:	f000 ff9c 	bl	801eb74 <I2C_Slave_ADDR>
 801dc3c:	e066      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc3e:	69fb      	ldr	r3, [r7, #28]
 801dc40:	091b      	lsrs	r3, r3, #4
 801dc42:	f003 0301 	and.w	r3, r3, #1
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d009      	beq.n	801dc5e <HAL_I2C_EV_IRQHandler+0x22e>
 801dc4a:	697b      	ldr	r3, [r7, #20]
 801dc4c:	0a5b      	lsrs	r3, r3, #9
 801dc4e:	f003 0301 	and.w	r3, r3, #1
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d003      	beq.n	801dc5e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801dc56:	6878      	ldr	r0, [r7, #4]
 801dc58:	f000 ffd6 	bl	801ec08 <I2C_Slave_STOPF>
 801dc5c:	e056      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801dc5e:	7bbb      	ldrb	r3, [r7, #14]
 801dc60:	2b21      	cmp	r3, #33	; 0x21
 801dc62:	d002      	beq.n	801dc6a <HAL_I2C_EV_IRQHandler+0x23a>
 801dc64:	7bbb      	ldrb	r3, [r7, #14]
 801dc66:	2b29      	cmp	r3, #41	; 0x29
 801dc68:	d125      	bne.n	801dcb6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dc6a:	69fb      	ldr	r3, [r7, #28]
 801dc6c:	09db      	lsrs	r3, r3, #7
 801dc6e:	f003 0301 	and.w	r3, r3, #1
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d00f      	beq.n	801dc96 <HAL_I2C_EV_IRQHandler+0x266>
 801dc76:	697b      	ldr	r3, [r7, #20]
 801dc78:	0a9b      	lsrs	r3, r3, #10
 801dc7a:	f003 0301 	and.w	r3, r3, #1
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d009      	beq.n	801dc96 <HAL_I2C_EV_IRQHandler+0x266>
 801dc82:	69fb      	ldr	r3, [r7, #28]
 801dc84:	089b      	lsrs	r3, r3, #2
 801dc86:	f003 0301 	and.w	r3, r3, #1
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d103      	bne.n	801dc96 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	f000 feb2 	bl	801e9f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dc94:	e039      	b.n	801dd0a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc96:	69fb      	ldr	r3, [r7, #28]
 801dc98:	089b      	lsrs	r3, r3, #2
 801dc9a:	f003 0301 	and.w	r3, r3, #1
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d033      	beq.n	801dd0a <HAL_I2C_EV_IRQHandler+0x2da>
 801dca2:	697b      	ldr	r3, [r7, #20]
 801dca4:	0a5b      	lsrs	r3, r3, #9
 801dca6:	f003 0301 	and.w	r3, r3, #1
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d02d      	beq.n	801dd0a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801dcae:	6878      	ldr	r0, [r7, #4]
 801dcb0:	f000 fedf 	bl	801ea72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dcb4:	e029      	b.n	801dd0a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dcb6:	69fb      	ldr	r3, [r7, #28]
 801dcb8:	099b      	lsrs	r3, r3, #6
 801dcba:	f003 0301 	and.w	r3, r3, #1
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d00f      	beq.n	801dce2 <HAL_I2C_EV_IRQHandler+0x2b2>
 801dcc2:	697b      	ldr	r3, [r7, #20]
 801dcc4:	0a9b      	lsrs	r3, r3, #10
 801dcc6:	f003 0301 	and.w	r3, r3, #1
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d009      	beq.n	801dce2 <HAL_I2C_EV_IRQHandler+0x2b2>
 801dcce:	69fb      	ldr	r3, [r7, #28]
 801dcd0:	089b      	lsrs	r3, r3, #2
 801dcd2:	f003 0301 	and.w	r3, r3, #1
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d103      	bne.n	801dce2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801dcda:	6878      	ldr	r0, [r7, #4]
 801dcdc:	f000 feea 	bl	801eab4 <I2C_SlaveReceive_RXNE>
 801dce0:	e014      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dce2:	69fb      	ldr	r3, [r7, #28]
 801dce4:	089b      	lsrs	r3, r3, #2
 801dce6:	f003 0301 	and.w	r3, r3, #1
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d00e      	beq.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
 801dcee:	697b      	ldr	r3, [r7, #20]
 801dcf0:	0a5b      	lsrs	r3, r3, #9
 801dcf2:	f003 0301 	and.w	r3, r3, #1
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d008      	beq.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801dcfa:	6878      	ldr	r0, [r7, #4]
 801dcfc:	f000 ff18 	bl	801eb30 <I2C_SlaveReceive_BTF>
 801dd00:	e004      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801dd02:	bf00      	nop
 801dd04:	e002      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd06:	bf00      	nop
 801dd08:	e000      	b.n	801dd0c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dd0a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801dd0c:	3720      	adds	r7, #32
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	bd80      	pop	{r7, pc}

0801dd12 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801dd12:	b580      	push	{r7, lr}
 801dd14:	b08a      	sub	sp, #40	; 0x28
 801dd16:	af00      	add	r7, sp, #0
 801dd18:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	695b      	ldr	r3, [r3, #20]
 801dd20:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	685b      	ldr	r3, [r3, #4]
 801dd28:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dd34:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801dd36:	6a3b      	ldr	r3, [r7, #32]
 801dd38:	0a1b      	lsrs	r3, r3, #8
 801dd3a:	f003 0301 	and.w	r3, r3, #1
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d00e      	beq.n	801dd60 <HAL_I2C_ER_IRQHandler+0x4e>
 801dd42:	69fb      	ldr	r3, [r7, #28]
 801dd44:	0a1b      	lsrs	r3, r3, #8
 801dd46:	f003 0301 	and.w	r3, r3, #1
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d008      	beq.n	801dd60 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd50:	f043 0301 	orr.w	r3, r3, #1
 801dd54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801dd5e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801dd60:	6a3b      	ldr	r3, [r7, #32]
 801dd62:	0a5b      	lsrs	r3, r3, #9
 801dd64:	f003 0301 	and.w	r3, r3, #1
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d00e      	beq.n	801dd8a <HAL_I2C_ER_IRQHandler+0x78>
 801dd6c:	69fb      	ldr	r3, [r7, #28]
 801dd6e:	0a1b      	lsrs	r3, r3, #8
 801dd70:	f003 0301 	and.w	r3, r3, #1
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d008      	beq.n	801dd8a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd7a:	f043 0302 	orr.w	r3, r3, #2
 801dd7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801dd88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801dd8a:	6a3b      	ldr	r3, [r7, #32]
 801dd8c:	0a9b      	lsrs	r3, r3, #10
 801dd8e:	f003 0301 	and.w	r3, r3, #1
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d03f      	beq.n	801de16 <HAL_I2C_ER_IRQHandler+0x104>
 801dd96:	69fb      	ldr	r3, [r7, #28]
 801dd98:	0a1b      	lsrs	r3, r3, #8
 801dd9a:	f003 0301 	and.w	r3, r3, #1
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	d039      	beq.n	801de16 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801dda2:	7efb      	ldrb	r3, [r7, #27]
 801dda4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddaa:	b29b      	uxth	r3, r3
 801ddac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ddb4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ddba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801ddbc:	7ebb      	ldrb	r3, [r7, #26]
 801ddbe:	2b20      	cmp	r3, #32
 801ddc0:	d112      	bne.n	801dde8 <HAL_I2C_ER_IRQHandler+0xd6>
 801ddc2:	697b      	ldr	r3, [r7, #20]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d10f      	bne.n	801dde8 <HAL_I2C_ER_IRQHandler+0xd6>
 801ddc8:	7cfb      	ldrb	r3, [r7, #19]
 801ddca:	2b21      	cmp	r3, #33	; 0x21
 801ddcc:	d008      	beq.n	801dde0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801ddce:	7cfb      	ldrb	r3, [r7, #19]
 801ddd0:	2b29      	cmp	r3, #41	; 0x29
 801ddd2:	d005      	beq.n	801dde0 <HAL_I2C_ER_IRQHandler+0xce>
 801ddd4:	7cfb      	ldrb	r3, [r7, #19]
 801ddd6:	2b28      	cmp	r3, #40	; 0x28
 801ddd8:	d106      	bne.n	801dde8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	2b21      	cmp	r3, #33	; 0x21
 801ddde:	d103      	bne.n	801dde8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801dde0:	6878      	ldr	r0, [r7, #4]
 801dde2:	f001 f841 	bl	801ee68 <I2C_Slave_AF>
 801dde6:	e016      	b.n	801de16 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ddf0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf4:	f043 0304 	orr.w	r3, r3, #4
 801ddf8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801ddfa:	7efb      	ldrb	r3, [r7, #27]
 801ddfc:	2b10      	cmp	r3, #16
 801ddfe:	d002      	beq.n	801de06 <HAL_I2C_ER_IRQHandler+0xf4>
 801de00:	7efb      	ldrb	r3, [r7, #27]
 801de02:	2b40      	cmp	r3, #64	; 0x40
 801de04:	d107      	bne.n	801de16 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	681a      	ldr	r2, [r3, #0]
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801de14:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801de16:	6a3b      	ldr	r3, [r7, #32]
 801de18:	0adb      	lsrs	r3, r3, #11
 801de1a:	f003 0301 	and.w	r3, r3, #1
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d00e      	beq.n	801de40 <HAL_I2C_ER_IRQHandler+0x12e>
 801de22:	69fb      	ldr	r3, [r7, #28]
 801de24:	0a1b      	lsrs	r3, r3, #8
 801de26:	f003 0301 	and.w	r3, r3, #1
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d008      	beq.n	801de40 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de30:	f043 0308 	orr.w	r3, r3, #8
 801de34:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801de3e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de42:	2b00      	cmp	r3, #0
 801de44:	d008      	beq.n	801de58 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de4c:	431a      	orrs	r2, r3
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801de52:	6878      	ldr	r0, [r7, #4]
 801de54:	f001 f878 	bl	801ef48 <I2C_ITError>
  }
}
 801de58:	bf00      	nop
 801de5a:	3728      	adds	r7, #40	; 0x28
 801de5c:	46bd      	mov	sp, r7
 801de5e:	bd80      	pop	{r7, pc}

0801de60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801de60:	b480      	push	{r7}
 801de62:	b083      	sub	sp, #12
 801de64:	af00      	add	r7, sp, #0
 801de66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801de68:	bf00      	nop
 801de6a:	370c      	adds	r7, #12
 801de6c:	46bd      	mov	sp, r7
 801de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de72:	4770      	bx	lr

0801de74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801de74:	b480      	push	{r7}
 801de76:	b083      	sub	sp, #12
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801de7c:	bf00      	nop
 801de7e:	370c      	adds	r7, #12
 801de80:	46bd      	mov	sp, r7
 801de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de86:	4770      	bx	lr

0801de88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801de88:	b480      	push	{r7}
 801de8a:	b083      	sub	sp, #12
 801de8c:	af00      	add	r7, sp, #0
 801de8e:	6078      	str	r0, [r7, #4]
 801de90:	460b      	mov	r3, r1
 801de92:	70fb      	strb	r3, [r7, #3]
 801de94:	4613      	mov	r3, r2
 801de96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801de98:	bf00      	nop
 801de9a:	370c      	adds	r7, #12
 801de9c:	46bd      	mov	sp, r7
 801de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dea2:	4770      	bx	lr

0801dea4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801dea4:	b480      	push	{r7}
 801dea6:	b083      	sub	sp, #12
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801deac:	bf00      	nop
 801deae:	370c      	adds	r7, #12
 801deb0:	46bd      	mov	sp, r7
 801deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb6:	4770      	bx	lr

0801deb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801deb8:	b480      	push	{r7}
 801deba:	b083      	sub	sp, #12
 801debc:	af00      	add	r7, sp, #0
 801debe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801dec0:	bf00      	nop
 801dec2:	370c      	adds	r7, #12
 801dec4:	46bd      	mov	sp, r7
 801dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deca:	4770      	bx	lr

0801decc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801decc:	b480      	push	{r7}
 801dece:	b083      	sub	sp, #12
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801ded4:	bf00      	nop
 801ded6:	370c      	adds	r7, #12
 801ded8:	46bd      	mov	sp, r7
 801deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dede:	4770      	bx	lr

0801dee0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801dee0:	b580      	push	{r7, lr}
 801dee2:	b084      	sub	sp, #16
 801dee4:	af00      	add	r7, sp, #0
 801dee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801deee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801def6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801defc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df02:	2b00      	cmp	r3, #0
 801df04:	d150      	bne.n	801dfa8 <I2C_MasterTransmit_TXE+0xc8>
 801df06:	7bfb      	ldrb	r3, [r7, #15]
 801df08:	2b21      	cmp	r3, #33	; 0x21
 801df0a:	d14d      	bne.n	801dfa8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801df0c:	68bb      	ldr	r3, [r7, #8]
 801df0e:	2b08      	cmp	r3, #8
 801df10:	d01d      	beq.n	801df4e <I2C_MasterTransmit_TXE+0x6e>
 801df12:	68bb      	ldr	r3, [r7, #8]
 801df14:	2b20      	cmp	r3, #32
 801df16:	d01a      	beq.n	801df4e <I2C_MasterTransmit_TXE+0x6e>
 801df18:	68bb      	ldr	r3, [r7, #8]
 801df1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801df1e:	d016      	beq.n	801df4e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	685a      	ldr	r2, [r3, #4]
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801df2e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	2211      	movs	r2, #17
 801df34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	2200      	movs	r2, #0
 801df3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	2220      	movs	r2, #32
 801df42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801df46:	6878      	ldr	r0, [r7, #4]
 801df48:	f7e3 fdb4 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801df4c:	e060      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	685a      	ldr	r2, [r3, #4]
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801df5c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	681a      	ldr	r2, [r3, #0]
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801df6c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	2200      	movs	r2, #0
 801df72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	2220      	movs	r2, #32
 801df78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801df82:	b2db      	uxtb	r3, r3
 801df84:	2b40      	cmp	r3, #64	; 0x40
 801df86:	d107      	bne.n	801df98 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	2200      	movs	r2, #0
 801df8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f7e3 fd79 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801df96:	e03b      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	2200      	movs	r2, #0
 801df9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801dfa0:	6878      	ldr	r0, [r7, #4]
 801dfa2:	f7e3 fd87 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801dfa6:	e033      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801dfa8:	7bfb      	ldrb	r3, [r7, #15]
 801dfaa:	2b21      	cmp	r3, #33	; 0x21
 801dfac:	d005      	beq.n	801dfba <I2C_MasterTransmit_TXE+0xda>
 801dfae:	7bbb      	ldrb	r3, [r7, #14]
 801dfb0:	2b40      	cmp	r3, #64	; 0x40
 801dfb2:	d12d      	bne.n	801e010 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801dfb4:	7bfb      	ldrb	r3, [r7, #15]
 801dfb6:	2b22      	cmp	r3, #34	; 0x22
 801dfb8:	d12a      	bne.n	801e010 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dfbe:	b29b      	uxth	r3, r3
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d108      	bne.n	801dfd6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	685a      	ldr	r2, [r3, #4]
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dfd2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801dfd4:	e01c      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	2b40      	cmp	r3, #64	; 0x40
 801dfe0:	d103      	bne.n	801dfea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801dfe2:	6878      	ldr	r0, [r7, #4]
 801dfe4:	f000 f88e 	bl	801e104 <I2C_MemoryTransmit_TXE_BTF>
}
 801dfe8:	e012      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfee:	781a      	ldrb	r2, [r3, #0]
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dffa:	1c5a      	adds	r2, r3, #1
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e004:	b29b      	uxth	r3, r3
 801e006:	3b01      	subs	r3, #1
 801e008:	b29a      	uxth	r2, r3
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e00e:	e7ff      	b.n	801e010 <I2C_MasterTransmit_TXE+0x130>
 801e010:	bf00      	nop
 801e012:	3710      	adds	r7, #16
 801e014:	46bd      	mov	sp, r7
 801e016:	bd80      	pop	{r7, pc}

0801e018 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b084      	sub	sp, #16
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e024:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e02c:	b2db      	uxtb	r3, r3
 801e02e:	2b21      	cmp	r3, #33	; 0x21
 801e030:	d164      	bne.n	801e0fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e036:	b29b      	uxth	r3, r3
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d012      	beq.n	801e062 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e040:	781a      	ldrb	r2, [r3, #0]
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e04c:	1c5a      	adds	r2, r3, #1
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e056:	b29b      	uxth	r3, r3
 801e058:	3b01      	subs	r3, #1
 801e05a:	b29a      	uxth	r2, r3
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801e060:	e04c      	b.n	801e0fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	2b08      	cmp	r3, #8
 801e066:	d01d      	beq.n	801e0a4 <I2C_MasterTransmit_BTF+0x8c>
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	2b20      	cmp	r3, #32
 801e06c:	d01a      	beq.n	801e0a4 <I2C_MasterTransmit_BTF+0x8c>
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e074:	d016      	beq.n	801e0a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	685a      	ldr	r2, [r3, #4]
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e084:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	2211      	movs	r2, #17
 801e08a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	2200      	movs	r2, #0
 801e090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	2220      	movs	r2, #32
 801e098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e09c:	6878      	ldr	r0, [r7, #4]
 801e09e:	f7e3 fd09 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801e0a2:	e02b      	b.n	801e0fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	685a      	ldr	r2, [r3, #4]
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e0b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	681a      	ldr	r2, [r3, #0]
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e0c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	2220      	movs	r2, #32
 801e0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e0d8:	b2db      	uxtb	r3, r3
 801e0da:	2b40      	cmp	r3, #64	; 0x40
 801e0dc:	d107      	bne.n	801e0ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	2200      	movs	r2, #0
 801e0e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801e0e6:	6878      	ldr	r0, [r7, #4]
 801e0e8:	f7e3 fcce 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801e0ec:	e006      	b.n	801e0fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	2200      	movs	r2, #0
 801e0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801e0f6:	6878      	ldr	r0, [r7, #4]
 801e0f8:	f7e3 fcdc 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801e0fc:	bf00      	nop
 801e0fe:	3710      	adds	r7, #16
 801e100:	46bd      	mov	sp, r7
 801e102:	bd80      	pop	{r7, pc}

0801e104 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b084      	sub	sp, #16
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e112:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d11d      	bne.n	801e158 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e120:	2b01      	cmp	r3, #1
 801e122:	d10b      	bne.n	801e13c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e128:	b2da      	uxtb	r2, r3
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e134:	1c9a      	adds	r2, r3, #2
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801e13a:	e073      	b.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e140:	b29b      	uxth	r3, r3
 801e142:	121b      	asrs	r3, r3, #8
 801e144:	b2da      	uxtb	r2, r3
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e150:	1c5a      	adds	r2, r3, #1
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e156:	e065      	b.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e15c:	2b01      	cmp	r3, #1
 801e15e:	d10b      	bne.n	801e178 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e164:	b2da      	uxtb	r2, r3
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e170:	1c5a      	adds	r2, r3, #1
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e176:	e055      	b.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e17c:	2b02      	cmp	r3, #2
 801e17e:	d151      	bne.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801e180:	7bfb      	ldrb	r3, [r7, #15]
 801e182:	2b22      	cmp	r3, #34	; 0x22
 801e184:	d10d      	bne.n	801e1a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	681a      	ldr	r2, [r3, #0]
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e194:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e19a:	1c5a      	adds	r2, r3, #1
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e1a0:	e040      	b.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1a6:	b29b      	uxth	r3, r3
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d015      	beq.n	801e1d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801e1ac:	7bfb      	ldrb	r3, [r7, #15]
 801e1ae:	2b21      	cmp	r3, #33	; 0x21
 801e1b0:	d112      	bne.n	801e1d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1b6:	781a      	ldrb	r2, [r3, #0]
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1c2:	1c5a      	adds	r2, r3, #1
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1cc:	b29b      	uxth	r3, r3
 801e1ce:	3b01      	subs	r3, #1
 801e1d0:	b29a      	uxth	r2, r3
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e1d6:	e025      	b.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1dc:	b29b      	uxth	r3, r3
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d120      	bne.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801e1e2:	7bfb      	ldrb	r3, [r7, #15]
 801e1e4:	2b21      	cmp	r3, #33	; 0x21
 801e1e6:	d11d      	bne.n	801e224 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	685a      	ldr	r2, [r3, #4]
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e1f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	681a      	ldr	r2, [r3, #0]
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e206:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	2200      	movs	r2, #0
 801e20c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	2220      	movs	r2, #32
 801e212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	2200      	movs	r2, #0
 801e21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801e21e:	6878      	ldr	r0, [r7, #4]
 801e220:	f7e3 fc32 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801e224:	bf00      	nop
 801e226:	3710      	adds	r7, #16
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}

0801e22c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b084      	sub	sp, #16
 801e230:	af00      	add	r7, sp, #0
 801e232:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e23a:	b2db      	uxtb	r3, r3
 801e23c:	2b22      	cmp	r3, #34	; 0x22
 801e23e:	f040 80ac 	bne.w	801e39a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e246:	b29b      	uxth	r3, r3
 801e248:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	2b03      	cmp	r3, #3
 801e24e:	d921      	bls.n	801e294 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	691a      	ldr	r2, [r3, #16]
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e25a:	b2d2      	uxtb	r2, r2
 801e25c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e262:	1c5a      	adds	r2, r3, #1
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e26c:	b29b      	uxth	r3, r3
 801e26e:	3b01      	subs	r3, #1
 801e270:	b29a      	uxth	r2, r3
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	2b03      	cmp	r3, #3
 801e27e:	f040 808c 	bne.w	801e39a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	685a      	ldr	r2, [r3, #4]
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e290:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801e292:	e082      	b.n	801e39a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e298:	2b02      	cmp	r3, #2
 801e29a:	d075      	beq.n	801e388 <I2C_MasterReceive_RXNE+0x15c>
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	2b01      	cmp	r3, #1
 801e2a0:	d002      	beq.n	801e2a8 <I2C_MasterReceive_RXNE+0x7c>
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d16f      	bne.n	801e388 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e2a8:	6878      	ldr	r0, [r7, #4]
 801e2aa:	f001 fbcf 	bl	801fa4c <I2C_WaitOnSTOPRequestThroughIT>
 801e2ae:	4603      	mov	r3, r0
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d142      	bne.n	801e33a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	681a      	ldr	r2, [r3, #0]
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e2c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	685a      	ldr	r2, [r3, #4]
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e2d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	691a      	ldr	r2, [r3, #16]
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2de:	b2d2      	uxtb	r2, r2
 801e2e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2e6:	1c5a      	adds	r2, r3, #1
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e2f0:	b29b      	uxth	r3, r3
 801e2f2:	3b01      	subs	r3, #1
 801e2f4:	b29a      	uxth	r2, r3
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	2220      	movs	r2, #32
 801e2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e308:	b2db      	uxtb	r3, r3
 801e30a:	2b40      	cmp	r3, #64	; 0x40
 801e30c:	d10a      	bne.n	801e324 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	2200      	movs	r2, #0
 801e312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	2200      	movs	r2, #0
 801e31a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801e31c:	6878      	ldr	r0, [r7, #4]
 801e31e:	f7e3 fb87 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e322:	e03a      	b.n	801e39a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	2200      	movs	r2, #0
 801e328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	2212      	movs	r2, #18
 801e330:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801e332:	6878      	ldr	r0, [r7, #4]
 801e334:	f7e3 fb92 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e338:	e02f      	b.n	801e39a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	685a      	ldr	r2, [r3, #4]
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e348:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	691a      	ldr	r2, [r3, #16]
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e354:	b2d2      	uxtb	r2, r2
 801e356:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e35c:	1c5a      	adds	r2, r3, #1
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e366:	b29b      	uxth	r3, r3
 801e368:	3b01      	subs	r3, #1
 801e36a:	b29a      	uxth	r2, r3
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	2220      	movs	r2, #32
 801e374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	2200      	movs	r2, #0
 801e37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801e380:	6878      	ldr	r0, [r7, #4]
 801e382:	f7ff fd99 	bl	801deb8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e386:	e008      	b.n	801e39a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	685a      	ldr	r2, [r3, #4]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e396:	605a      	str	r2, [r3, #4]
}
 801e398:	e7ff      	b.n	801e39a <I2C_MasterReceive_RXNE+0x16e>
 801e39a:	bf00      	nop
 801e39c:	3710      	adds	r7, #16
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	bd80      	pop	{r7, pc}

0801e3a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801e3a2:	b580      	push	{r7, lr}
 801e3a4:	b084      	sub	sp, #16
 801e3a6:	af00      	add	r7, sp, #0
 801e3a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3b4:	b29b      	uxth	r3, r3
 801e3b6:	2b04      	cmp	r3, #4
 801e3b8:	d11b      	bne.n	801e3f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	685a      	ldr	r2, [r3, #4]
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e3c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	691a      	ldr	r2, [r3, #16]
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3d4:	b2d2      	uxtb	r2, r2
 801e3d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3dc:	1c5a      	adds	r2, r3, #1
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3e6:	b29b      	uxth	r3, r3
 801e3e8:	3b01      	subs	r3, #1
 801e3ea:	b29a      	uxth	r2, r3
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801e3f0:	e0bd      	b.n	801e56e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3f6:	b29b      	uxth	r3, r3
 801e3f8:	2b03      	cmp	r3, #3
 801e3fa:	d129      	bne.n	801e450 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	685a      	ldr	r2, [r3, #4]
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e40a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801e40c:	68fb      	ldr	r3, [r7, #12]
 801e40e:	2b04      	cmp	r3, #4
 801e410:	d00a      	beq.n	801e428 <I2C_MasterReceive_BTF+0x86>
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	2b02      	cmp	r3, #2
 801e416:	d007      	beq.n	801e428 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	681a      	ldr	r2, [r3, #0]
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e426:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	691a      	ldr	r2, [r3, #16]
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e432:	b2d2      	uxtb	r2, r2
 801e434:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e43a:	1c5a      	adds	r2, r3, #1
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e444:	b29b      	uxth	r3, r3
 801e446:	3b01      	subs	r3, #1
 801e448:	b29a      	uxth	r2, r3
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e44e:	e08e      	b.n	801e56e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e454:	b29b      	uxth	r3, r3
 801e456:	2b02      	cmp	r3, #2
 801e458:	d176      	bne.n	801e548 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	2b01      	cmp	r3, #1
 801e45e:	d002      	beq.n	801e466 <I2C_MasterReceive_BTF+0xc4>
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	2b10      	cmp	r3, #16
 801e464:	d108      	bne.n	801e478 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	681a      	ldr	r2, [r3, #0]
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e474:	601a      	str	r2, [r3, #0]
 801e476:	e019      	b.n	801e4ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	2b04      	cmp	r3, #4
 801e47c:	d002      	beq.n	801e484 <I2C_MasterReceive_BTF+0xe2>
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	2b02      	cmp	r3, #2
 801e482:	d108      	bne.n	801e496 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	681a      	ldr	r2, [r3, #0]
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e492:	601a      	str	r2, [r3, #0]
 801e494:	e00a      	b.n	801e4ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	2b10      	cmp	r3, #16
 801e49a:	d007      	beq.n	801e4ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	681a      	ldr	r2, [r3, #0]
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e4aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	691a      	ldr	r2, [r3, #16]
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4b6:	b2d2      	uxtb	r2, r2
 801e4b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4be:	1c5a      	adds	r2, r3, #1
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e4c8:	b29b      	uxth	r3, r3
 801e4ca:	3b01      	subs	r3, #1
 801e4cc:	b29a      	uxth	r2, r3
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	691a      	ldr	r2, [r3, #16]
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4dc:	b2d2      	uxtb	r2, r2
 801e4de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4e4:	1c5a      	adds	r2, r3, #1
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e4ee:	b29b      	uxth	r3, r3
 801e4f0:	3b01      	subs	r3, #1
 801e4f2:	b29a      	uxth	r2, r3
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	685a      	ldr	r2, [r3, #4]
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801e506:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	2220      	movs	r2, #32
 801e50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e516:	b2db      	uxtb	r3, r3
 801e518:	2b40      	cmp	r3, #64	; 0x40
 801e51a:	d10a      	bne.n	801e532 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2200      	movs	r2, #0
 801e520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	2200      	movs	r2, #0
 801e528:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801e52a:	6878      	ldr	r0, [r7, #4]
 801e52c:	f7e3 fa80 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801e530:	e01d      	b.n	801e56e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	2200      	movs	r2, #0
 801e536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	2212      	movs	r2, #18
 801e53e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801e540:	6878      	ldr	r0, [r7, #4]
 801e542:	f7e3 fa8b 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801e546:	e012      	b.n	801e56e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	691a      	ldr	r2, [r3, #16]
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e552:	b2d2      	uxtb	r2, r2
 801e554:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e55a:	1c5a      	adds	r2, r3, #1
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e564:	b29b      	uxth	r3, r3
 801e566:	3b01      	subs	r3, #1
 801e568:	b29a      	uxth	r2, r3
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e56e:	bf00      	nop
 801e570:	3710      	adds	r7, #16
 801e572:	46bd      	mov	sp, r7
 801e574:	bd80      	pop	{r7, pc}

0801e576 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801e576:	b480      	push	{r7}
 801e578:	b083      	sub	sp, #12
 801e57a:	af00      	add	r7, sp, #0
 801e57c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e584:	b2db      	uxtb	r3, r3
 801e586:	2b40      	cmp	r3, #64	; 0x40
 801e588:	d117      	bne.n	801e5ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d109      	bne.n	801e5a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e596:	b2db      	uxtb	r3, r3
 801e598:	461a      	mov	r2, r3
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e5a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801e5a4:	e067      	b.n	801e676 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e5aa:	b2db      	uxtb	r3, r3
 801e5ac:	f043 0301 	orr.w	r3, r3, #1
 801e5b0:	b2da      	uxtb	r2, r3
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	611a      	str	r2, [r3, #16]
}
 801e5b8:	e05d      	b.n	801e676 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	691b      	ldr	r3, [r3, #16]
 801e5be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e5c2:	d133      	bne.n	801e62c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e5ca:	b2db      	uxtb	r3, r3
 801e5cc:	2b21      	cmp	r3, #33	; 0x21
 801e5ce:	d109      	bne.n	801e5e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e5d4:	b2db      	uxtb	r3, r3
 801e5d6:	461a      	mov	r2, r3
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e5e0:	611a      	str	r2, [r3, #16]
 801e5e2:	e008      	b.n	801e5f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e5e8:	b2db      	uxtb	r3, r3
 801e5ea:	f043 0301 	orr.w	r3, r3, #1
 801e5ee:	b2da      	uxtb	r2, r3
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d004      	beq.n	801e608 <I2C_Master_SB+0x92>
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e604:	2b00      	cmp	r3, #0
 801e606:	d108      	bne.n	801e61a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d032      	beq.n	801e676 <I2C_Master_SB+0x100>
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e616:	2b00      	cmp	r3, #0
 801e618:	d02d      	beq.n	801e676 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	685a      	ldr	r2, [r3, #4]
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e628:	605a      	str	r2, [r3, #4]
}
 801e62a:	e024      	b.n	801e676 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e630:	2b00      	cmp	r3, #0
 801e632:	d10e      	bne.n	801e652 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e638:	b29b      	uxth	r3, r3
 801e63a:	11db      	asrs	r3, r3, #7
 801e63c:	b2db      	uxtb	r3, r3
 801e63e:	f003 0306 	and.w	r3, r3, #6
 801e642:	b2db      	uxtb	r3, r3
 801e644:	f063 030f 	orn	r3, r3, #15
 801e648:	b2da      	uxtb	r2, r3
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	611a      	str	r2, [r3, #16]
}
 801e650:	e011      	b.n	801e676 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e656:	2b01      	cmp	r3, #1
 801e658:	d10d      	bne.n	801e676 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e65e:	b29b      	uxth	r3, r3
 801e660:	11db      	asrs	r3, r3, #7
 801e662:	b2db      	uxtb	r3, r3
 801e664:	f003 0306 	and.w	r3, r3, #6
 801e668:	b2db      	uxtb	r3, r3
 801e66a:	f063 030e 	orn	r3, r3, #14
 801e66e:	b2da      	uxtb	r2, r3
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	611a      	str	r2, [r3, #16]
}
 801e676:	bf00      	nop
 801e678:	370c      	adds	r7, #12
 801e67a:	46bd      	mov	sp, r7
 801e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e680:	4770      	bx	lr

0801e682 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801e682:	b480      	push	{r7}
 801e684:	b083      	sub	sp, #12
 801e686:	af00      	add	r7, sp, #0
 801e688:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e68e:	b2da      	uxtb	r2, r3
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d004      	beq.n	801e6a8 <I2C_Master_ADD10+0x26>
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d108      	bne.n	801e6ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d00c      	beq.n	801e6ca <I2C_Master_ADD10+0x48>
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d007      	beq.n	801e6ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	685a      	ldr	r2, [r3, #4]
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e6c8:	605a      	str	r2, [r3, #4]
  }
}
 801e6ca:	bf00      	nop
 801e6cc:	370c      	adds	r7, #12
 801e6ce:	46bd      	mov	sp, r7
 801e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6d4:	4770      	bx	lr

0801e6d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801e6d6:	b480      	push	{r7}
 801e6d8:	b091      	sub	sp, #68	; 0x44
 801e6da:	af00      	add	r7, sp, #0
 801e6dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e6e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e6fa:	b2db      	uxtb	r3, r3
 801e6fc:	2b22      	cmp	r3, #34	; 0x22
 801e6fe:	f040 8169 	bne.w	801e9d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e706:	2b00      	cmp	r3, #0
 801e708:	d10f      	bne.n	801e72a <I2C_Master_ADDR+0x54>
 801e70a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801e70e:	2b40      	cmp	r3, #64	; 0x40
 801e710:	d10b      	bne.n	801e72a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e712:	2300      	movs	r3, #0
 801e714:	633b      	str	r3, [r7, #48]	; 0x30
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	695b      	ldr	r3, [r3, #20]
 801e71c:	633b      	str	r3, [r7, #48]	; 0x30
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	699b      	ldr	r3, [r3, #24]
 801e724:	633b      	str	r3, [r7, #48]	; 0x30
 801e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e728:	e160      	b.n	801e9ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d11d      	bne.n	801e76e <I2C_Master_ADDR+0x98>
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	691b      	ldr	r3, [r3, #16]
 801e736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e73a:	d118      	bne.n	801e76e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e73c:	2300      	movs	r3, #0
 801e73e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	695b      	ldr	r3, [r3, #20]
 801e746:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	699b      	ldr	r3, [r3, #24]
 801e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	681a      	ldr	r2, [r3, #0]
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e760:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e766:	1c5a      	adds	r2, r3, #1
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	651a      	str	r2, [r3, #80]	; 0x50
 801e76c:	e13e      	b.n	801e9ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e772:	b29b      	uxth	r3, r3
 801e774:	2b00      	cmp	r3, #0
 801e776:	d113      	bne.n	801e7a0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e778:	2300      	movs	r3, #0
 801e77a:	62bb      	str	r3, [r7, #40]	; 0x28
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	695b      	ldr	r3, [r3, #20]
 801e782:	62bb      	str	r3, [r7, #40]	; 0x28
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	699b      	ldr	r3, [r3, #24]
 801e78a:	62bb      	str	r3, [r7, #40]	; 0x28
 801e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	681a      	ldr	r2, [r3, #0]
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e79c:	601a      	str	r2, [r3, #0]
 801e79e:	e115      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e7a4:	b29b      	uxth	r3, r3
 801e7a6:	2b01      	cmp	r3, #1
 801e7a8:	f040 808a 	bne.w	801e8c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801e7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e7b2:	d137      	bne.n	801e824 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	681a      	ldr	r2, [r3, #0]
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e7c2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	685b      	ldr	r3, [r3, #4]
 801e7ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e7ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e7d2:	d113      	bne.n	801e7fc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	681a      	ldr	r2, [r3, #0]
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e7e2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e7e4:	2300      	movs	r3, #0
 801e7e6:	627b      	str	r3, [r7, #36]	; 0x24
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	695b      	ldr	r3, [r3, #20]
 801e7ee:	627b      	str	r3, [r7, #36]	; 0x24
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	699b      	ldr	r3, [r3, #24]
 801e7f6:	627b      	str	r3, [r7, #36]	; 0x24
 801e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7fa:	e0e7      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e7fc:	2300      	movs	r3, #0
 801e7fe:	623b      	str	r3, [r7, #32]
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	695b      	ldr	r3, [r3, #20]
 801e806:	623b      	str	r3, [r7, #32]
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	699b      	ldr	r3, [r3, #24]
 801e80e:	623b      	str	r3, [r7, #32]
 801e810:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	681a      	ldr	r2, [r3, #0]
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e820:	601a      	str	r2, [r3, #0]
 801e822:	e0d3      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e826:	2b08      	cmp	r3, #8
 801e828:	d02e      	beq.n	801e888 <I2C_Master_ADDR+0x1b2>
 801e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e82c:	2b20      	cmp	r3, #32
 801e82e:	d02b      	beq.n	801e888 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e832:	2b12      	cmp	r3, #18
 801e834:	d102      	bne.n	801e83c <I2C_Master_ADDR+0x166>
 801e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e838:	2b01      	cmp	r3, #1
 801e83a:	d125      	bne.n	801e888 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e83e:	2b04      	cmp	r3, #4
 801e840:	d00e      	beq.n	801e860 <I2C_Master_ADDR+0x18a>
 801e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e844:	2b02      	cmp	r3, #2
 801e846:	d00b      	beq.n	801e860 <I2C_Master_ADDR+0x18a>
 801e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e84a:	2b10      	cmp	r3, #16
 801e84c:	d008      	beq.n	801e860 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e84e:	687b      	ldr	r3, [r7, #4]
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	681a      	ldr	r2, [r3, #0]
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e85c:	601a      	str	r2, [r3, #0]
 801e85e:	e007      	b.n	801e870 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	681a      	ldr	r2, [r3, #0]
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e86e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e870:	2300      	movs	r3, #0
 801e872:	61fb      	str	r3, [r7, #28]
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	695b      	ldr	r3, [r3, #20]
 801e87a:	61fb      	str	r3, [r7, #28]
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	699b      	ldr	r3, [r3, #24]
 801e882:	61fb      	str	r3, [r7, #28]
 801e884:	69fb      	ldr	r3, [r7, #28]
 801e886:	e0a1      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	681a      	ldr	r2, [r3, #0]
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e896:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e898:	2300      	movs	r3, #0
 801e89a:	61bb      	str	r3, [r7, #24]
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	695b      	ldr	r3, [r3, #20]
 801e8a2:	61bb      	str	r3, [r7, #24]
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	699b      	ldr	r3, [r3, #24]
 801e8aa:	61bb      	str	r3, [r7, #24]
 801e8ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	681a      	ldr	r2, [r3, #0]
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8bc:	601a      	str	r2, [r3, #0]
 801e8be:	e085      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e8c4:	b29b      	uxth	r3, r3
 801e8c6:	2b02      	cmp	r3, #2
 801e8c8:	d14d      	bne.n	801e966 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8cc:	2b04      	cmp	r3, #4
 801e8ce:	d016      	beq.n	801e8fe <I2C_Master_ADDR+0x228>
 801e8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8d2:	2b02      	cmp	r3, #2
 801e8d4:	d013      	beq.n	801e8fe <I2C_Master_ADDR+0x228>
 801e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8d8:	2b10      	cmp	r3, #16
 801e8da:	d010      	beq.n	801e8fe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	681a      	ldr	r2, [r3, #0]
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e8ea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	681a      	ldr	r2, [r3, #0]
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e8fa:	601a      	str	r2, [r3, #0]
 801e8fc:	e007      	b.n	801e90e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	681a      	ldr	r2, [r3, #0]
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e90c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	685b      	ldr	r3, [r3, #4]
 801e914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e91c:	d117      	bne.n	801e94e <I2C_Master_ADDR+0x278>
 801e91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e924:	d00b      	beq.n	801e93e <I2C_Master_ADDR+0x268>
 801e926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e928:	2b01      	cmp	r3, #1
 801e92a:	d008      	beq.n	801e93e <I2C_Master_ADDR+0x268>
 801e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e92e:	2b08      	cmp	r3, #8
 801e930:	d005      	beq.n	801e93e <I2C_Master_ADDR+0x268>
 801e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e934:	2b10      	cmp	r3, #16
 801e936:	d002      	beq.n	801e93e <I2C_Master_ADDR+0x268>
 801e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e93a:	2b20      	cmp	r3, #32
 801e93c:	d107      	bne.n	801e94e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	685a      	ldr	r2, [r3, #4]
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e94c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e94e:	2300      	movs	r3, #0
 801e950:	617b      	str	r3, [r7, #20]
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	695b      	ldr	r3, [r3, #20]
 801e958:	617b      	str	r3, [r7, #20]
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	699b      	ldr	r3, [r3, #24]
 801e960:	617b      	str	r3, [r7, #20]
 801e962:	697b      	ldr	r3, [r7, #20]
 801e964:	e032      	b.n	801e9cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	681a      	ldr	r2, [r3, #0]
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e974:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	685b      	ldr	r3, [r3, #4]
 801e97c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e984:	d117      	bne.n	801e9b6 <I2C_Master_ADDR+0x2e0>
 801e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e98c:	d00b      	beq.n	801e9a6 <I2C_Master_ADDR+0x2d0>
 801e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e990:	2b01      	cmp	r3, #1
 801e992:	d008      	beq.n	801e9a6 <I2C_Master_ADDR+0x2d0>
 801e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e996:	2b08      	cmp	r3, #8
 801e998:	d005      	beq.n	801e9a6 <I2C_Master_ADDR+0x2d0>
 801e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e99c:	2b10      	cmp	r3, #16
 801e99e:	d002      	beq.n	801e9a6 <I2C_Master_ADDR+0x2d0>
 801e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9a2:	2b20      	cmp	r3, #32
 801e9a4:	d107      	bne.n	801e9b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	685a      	ldr	r2, [r3, #4]
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e9b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e9b6:	2300      	movs	r3, #0
 801e9b8:	613b      	str	r3, [r7, #16]
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	695b      	ldr	r3, [r3, #20]
 801e9c0:	613b      	str	r3, [r7, #16]
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	699b      	ldr	r3, [r3, #24]
 801e9c8:	613b      	str	r3, [r7, #16]
 801e9ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801e9d2:	e00b      	b.n	801e9ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	60fb      	str	r3, [r7, #12]
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	695b      	ldr	r3, [r3, #20]
 801e9de:	60fb      	str	r3, [r7, #12]
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	699b      	ldr	r3, [r3, #24]
 801e9e6:	60fb      	str	r3, [r7, #12]
 801e9e8:	68fb      	ldr	r3, [r7, #12]
}
 801e9ea:	e7ff      	b.n	801e9ec <I2C_Master_ADDR+0x316>
 801e9ec:	bf00      	nop
 801e9ee:	3744      	adds	r7, #68	; 0x44
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9f6:	4770      	bx	lr

0801e9f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e9f8:	b580      	push	{r7, lr}
 801e9fa:	b084      	sub	sp, #16
 801e9fc:	af00      	add	r7, sp, #0
 801e9fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea0c:	b29b      	uxth	r3, r3
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d02b      	beq.n	801ea6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea16:	781a      	ldrb	r2, [r3, #0]
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea22:	1c5a      	adds	r2, r3, #1
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea2c:	b29b      	uxth	r3, r3
 801ea2e:	3b01      	subs	r3, #1
 801ea30:	b29a      	uxth	r2, r3
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea3a:	b29b      	uxth	r3, r3
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d114      	bne.n	801ea6a <I2C_SlaveTransmit_TXE+0x72>
 801ea40:	7bfb      	ldrb	r3, [r7, #15]
 801ea42:	2b29      	cmp	r3, #41	; 0x29
 801ea44:	d111      	bne.n	801ea6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	685a      	ldr	r2, [r3, #4]
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	2221      	movs	r2, #33	; 0x21
 801ea5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	2228      	movs	r2, #40	; 0x28
 801ea60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801ea64:	6878      	ldr	r0, [r7, #4]
 801ea66:	f7ff f9fb 	bl	801de60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801ea6a:	bf00      	nop
 801ea6c:	3710      	adds	r7, #16
 801ea6e:	46bd      	mov	sp, r7
 801ea70:	bd80      	pop	{r7, pc}

0801ea72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801ea72:	b480      	push	{r7}
 801ea74:	b083      	sub	sp, #12
 801ea76:	af00      	add	r7, sp, #0
 801ea78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea7e:	b29b      	uxth	r3, r3
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	d011      	beq.n	801eaa8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea88:	781a      	ldrb	r2, [r3, #0]
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea94:	1c5a      	adds	r2, r3, #1
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea9e:	b29b      	uxth	r3, r3
 801eaa0:	3b01      	subs	r3, #1
 801eaa2:	b29a      	uxth	r2, r3
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801eaa8:	bf00      	nop
 801eaaa:	370c      	adds	r7, #12
 801eaac:	46bd      	mov	sp, r7
 801eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eab2:	4770      	bx	lr

0801eab4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801eab4:	b580      	push	{r7, lr}
 801eab6:	b084      	sub	sp, #16
 801eab8:	af00      	add	r7, sp, #0
 801eaba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eac8:	b29b      	uxth	r3, r3
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d02c      	beq.n	801eb28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	691a      	ldr	r2, [r3, #16]
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ead8:	b2d2      	uxtb	r2, r2
 801eada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eae0:	1c5a      	adds	r2, r3, #1
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eaea:	b29b      	uxth	r3, r3
 801eaec:	3b01      	subs	r3, #1
 801eaee:	b29a      	uxth	r2, r3
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eaf8:	b29b      	uxth	r3, r3
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d114      	bne.n	801eb28 <I2C_SlaveReceive_RXNE+0x74>
 801eafe:	7bfb      	ldrb	r3, [r7, #15]
 801eb00:	2b2a      	cmp	r3, #42	; 0x2a
 801eb02:	d111      	bne.n	801eb28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	685a      	ldr	r2, [r3, #4]
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	2222      	movs	r2, #34	; 0x22
 801eb18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	2228      	movs	r2, #40	; 0x28
 801eb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801eb22:	6878      	ldr	r0, [r7, #4]
 801eb24:	f7ff f9a6 	bl	801de74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801eb28:	bf00      	nop
 801eb2a:	3710      	adds	r7, #16
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	bd80      	pop	{r7, pc}

0801eb30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801eb30:	b480      	push	{r7}
 801eb32:	b083      	sub	sp, #12
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb3c:	b29b      	uxth	r3, r3
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d012      	beq.n	801eb68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	691a      	ldr	r2, [r3, #16]
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb4c:	b2d2      	uxtb	r2, r2
 801eb4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb54:	1c5a      	adds	r2, r3, #1
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb5e:	b29b      	uxth	r3, r3
 801eb60:	3b01      	subs	r3, #1
 801eb62:	b29a      	uxth	r2, r3
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801eb68:	bf00      	nop
 801eb6a:	370c      	adds	r7, #12
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb72:	4770      	bx	lr

0801eb74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b084      	sub	sp, #16
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
 801eb7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb88:	b2db      	uxtb	r3, r3
 801eb8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801eb8e:	2b28      	cmp	r3, #40	; 0x28
 801eb90:	d127      	bne.n	801ebe2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	685a      	ldr	r2, [r3, #4]
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eba0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801eba2:	683b      	ldr	r3, [r7, #0]
 801eba4:	089b      	lsrs	r3, r3, #2
 801eba6:	f003 0301 	and.w	r3, r3, #1
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d101      	bne.n	801ebb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801ebae:	2301      	movs	r3, #1
 801ebb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801ebb2:	683b      	ldr	r3, [r7, #0]
 801ebb4:	09db      	lsrs	r3, r3, #7
 801ebb6:	f003 0301 	and.w	r3, r3, #1
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d103      	bne.n	801ebc6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	68db      	ldr	r3, [r3, #12]
 801ebc2:	81bb      	strh	r3, [r7, #12]
 801ebc4:	e002      	b.n	801ebcc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	699b      	ldr	r3, [r3, #24]
 801ebca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	2200      	movs	r2, #0
 801ebd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801ebd4:	89ba      	ldrh	r2, [r7, #12]
 801ebd6:	7bfb      	ldrb	r3, [r7, #15]
 801ebd8:	4619      	mov	r1, r3
 801ebda:	6878      	ldr	r0, [r7, #4]
 801ebdc:	f7ff f954 	bl	801de88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801ebe0:	e00e      	b.n	801ec00 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	60bb      	str	r3, [r7, #8]
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	695b      	ldr	r3, [r3, #20]
 801ebec:	60bb      	str	r3, [r7, #8]
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	699b      	ldr	r3, [r3, #24]
 801ebf4:	60bb      	str	r3, [r7, #8]
 801ebf6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2200      	movs	r2, #0
 801ebfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801ec00:	bf00      	nop
 801ec02:	3710      	adds	r7, #16
 801ec04:	46bd      	mov	sp, r7
 801ec06:	bd80      	pop	{r7, pc}

0801ec08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801ec08:	b580      	push	{r7, lr}
 801ec0a:	b084      	sub	sp, #16
 801ec0c:	af00      	add	r7, sp, #0
 801ec0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ec16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	685a      	ldr	r2, [r3, #4]
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ec26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801ec28:	2300      	movs	r3, #0
 801ec2a:	60bb      	str	r3, [r7, #8]
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	695b      	ldr	r3, [r3, #20]
 801ec32:	60bb      	str	r3, [r7, #8]
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	681a      	ldr	r2, [r3, #0]
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	f042 0201 	orr.w	r2, r2, #1
 801ec42:	601a      	str	r2, [r3, #0]
 801ec44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	681a      	ldr	r2, [r3, #0]
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	685b      	ldr	r3, [r3, #4]
 801ec5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ec60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ec64:	d172      	bne.n	801ed4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801ec66:	7bfb      	ldrb	r3, [r7, #15]
 801ec68:	2b22      	cmp	r3, #34	; 0x22
 801ec6a:	d002      	beq.n	801ec72 <I2C_Slave_STOPF+0x6a>
 801ec6c:	7bfb      	ldrb	r3, [r7, #15]
 801ec6e:	2b2a      	cmp	r3, #42	; 0x2a
 801ec70:	d135      	bne.n	801ecde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	685b      	ldr	r3, [r3, #4]
 801ec7a:	b29a      	uxth	r2, r3
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec84:	b29b      	uxth	r3, r3
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d005      	beq.n	801ec96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec8e:	f043 0204 	orr.w	r2, r3, #4
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	685a      	ldr	r2, [r3, #4]
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eca4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7fd fc90 	bl	801c5d0 <HAL_DMA_GetState>
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	2b01      	cmp	r3, #1
 801ecb4:	d049      	beq.n	801ed4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecba:	4a69      	ldr	r2, [pc, #420]	; (801ee60 <I2C_Slave_STOPF+0x258>)
 801ecbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecc2:	4618      	mov	r0, r3
 801ecc4:	f7fd fad8 	bl	801c278 <HAL_DMA_Abort_IT>
 801ecc8:	4603      	mov	r3, r0
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d03d      	beq.n	801ed4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ecd4:	687a      	ldr	r2, [r7, #4]
 801ecd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801ecd8:	4610      	mov	r0, r2
 801ecda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801ecdc:	e035      	b.n	801ed4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	685b      	ldr	r3, [r3, #4]
 801ece6:	b29a      	uxth	r2, r3
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecf0:	b29b      	uxth	r3, r3
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d005      	beq.n	801ed02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecfa:	f043 0204 	orr.w	r2, r3, #4
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	685a      	ldr	r2, [r3, #4]
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ed10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed16:	4618      	mov	r0, r3
 801ed18:	f7fd fc5a 	bl	801c5d0 <HAL_DMA_GetState>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	2b01      	cmp	r3, #1
 801ed20:	d014      	beq.n	801ed4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed26:	4a4e      	ldr	r2, [pc, #312]	; (801ee60 <I2C_Slave_STOPF+0x258>)
 801ed28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed2e:	4618      	mov	r0, r3
 801ed30:	f7fd faa2 	bl	801c278 <HAL_DMA_Abort_IT>
 801ed34:	4603      	mov	r3, r0
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d008      	beq.n	801ed4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed40:	687a      	ldr	r2, [r7, #4]
 801ed42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801ed44:	4610      	mov	r0, r2
 801ed46:	4798      	blx	r3
 801ed48:	e000      	b.n	801ed4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801ed4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed50:	b29b      	uxth	r3, r3
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d03e      	beq.n	801edd4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	681b      	ldr	r3, [r3, #0]
 801ed5a:	695b      	ldr	r3, [r3, #20]
 801ed5c:	f003 0304 	and.w	r3, r3, #4
 801ed60:	2b04      	cmp	r3, #4
 801ed62:	d112      	bne.n	801ed8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	691a      	ldr	r2, [r3, #16]
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed6e:	b2d2      	uxtb	r2, r2
 801ed70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed76:	1c5a      	adds	r2, r3, #1
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed80:	b29b      	uxth	r3, r3
 801ed82:	3b01      	subs	r3, #1
 801ed84:	b29a      	uxth	r2, r3
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	695b      	ldr	r3, [r3, #20]
 801ed90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ed94:	2b40      	cmp	r3, #64	; 0x40
 801ed96:	d112      	bne.n	801edbe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	691a      	ldr	r2, [r3, #16]
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eda2:	b2d2      	uxtb	r2, r2
 801eda4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edaa:	1c5a      	adds	r2, r3, #1
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edb4:	b29b      	uxth	r3, r3
 801edb6:	3b01      	subs	r3, #1
 801edb8:	b29a      	uxth	r2, r3
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edc2:	b29b      	uxth	r3, r3
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d005      	beq.n	801edd4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edcc:	f043 0204 	orr.w	r2, r3, #4
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d003      	beq.n	801ede4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801eddc:	6878      	ldr	r0, [r7, #4]
 801edde:	f000 f8b3 	bl	801ef48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801ede2:	e039      	b.n	801ee58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801ede4:	7bfb      	ldrb	r3, [r7, #15]
 801ede6:	2b2a      	cmp	r3, #42	; 0x2a
 801ede8:	d109      	bne.n	801edfe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	2200      	movs	r2, #0
 801edee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	2228      	movs	r2, #40	; 0x28
 801edf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801edf8:	6878      	ldr	r0, [r7, #4]
 801edfa:	f7ff f83b 	bl	801de74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ee04:	b2db      	uxtb	r3, r3
 801ee06:	2b28      	cmp	r3, #40	; 0x28
 801ee08:	d111      	bne.n	801ee2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	4a15      	ldr	r2, [pc, #84]	; (801ee64 <I2C_Slave_STOPF+0x25c>)
 801ee0e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	2200      	movs	r2, #0
 801ee14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	2220      	movs	r2, #32
 801ee1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	2200      	movs	r2, #0
 801ee22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801ee26:	6878      	ldr	r0, [r7, #4]
 801ee28:	f7ff f83c 	bl	801dea4 <HAL_I2C_ListenCpltCallback>
}
 801ee2c:	e014      	b.n	801ee58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee32:	2b22      	cmp	r3, #34	; 0x22
 801ee34:	d002      	beq.n	801ee3c <I2C_Slave_STOPF+0x234>
 801ee36:	7bfb      	ldrb	r3, [r7, #15]
 801ee38:	2b22      	cmp	r3, #34	; 0x22
 801ee3a:	d10d      	bne.n	801ee58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2200      	movs	r2, #0
 801ee40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	2220      	movs	r2, #32
 801ee46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	2200      	movs	r2, #0
 801ee4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801ee52:	6878      	ldr	r0, [r7, #4]
 801ee54:	f7ff f80e 	bl	801de74 <HAL_I2C_SlaveRxCpltCallback>
}
 801ee58:	bf00      	nop
 801ee5a:	3710      	adds	r7, #16
 801ee5c:	46bd      	mov	sp, r7
 801ee5e:	bd80      	pop	{r7, pc}
 801ee60:	0801f6cd 	.word	0x0801f6cd
 801ee64:	ffff0000 	.word	0xffff0000

0801ee68 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801ee68:	b580      	push	{r7, lr}
 801ee6a:	b084      	sub	sp, #16
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ee76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee7c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	2b08      	cmp	r3, #8
 801ee82:	d002      	beq.n	801ee8a <I2C_Slave_AF+0x22>
 801ee84:	68bb      	ldr	r3, [r7, #8]
 801ee86:	2b20      	cmp	r3, #32
 801ee88:	d129      	bne.n	801eede <I2C_Slave_AF+0x76>
 801ee8a:	7bfb      	ldrb	r3, [r7, #15]
 801ee8c:	2b28      	cmp	r3, #40	; 0x28
 801ee8e:	d126      	bne.n	801eede <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	4a2c      	ldr	r2, [pc, #176]	; (801ef44 <I2C_Slave_AF+0xdc>)
 801ee94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	685a      	ldr	r2, [r3, #4]
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801eea4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801eeae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	681a      	ldr	r2, [r3, #0]
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eebe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	2200      	movs	r2, #0
 801eec4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	2220      	movs	r2, #32
 801eeca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	2200      	movs	r2, #0
 801eed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801eed6:	6878      	ldr	r0, [r7, #4]
 801eed8:	f7fe ffe4 	bl	801dea4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801eedc:	e02e      	b.n	801ef3c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801eede:	7bfb      	ldrb	r3, [r7, #15]
 801eee0:	2b21      	cmp	r3, #33	; 0x21
 801eee2:	d126      	bne.n	801ef32 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	4a17      	ldr	r2, [pc, #92]	; (801ef44 <I2C_Slave_AF+0xdc>)
 801eee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	2221      	movs	r2, #33	; 0x21
 801eeee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	2220      	movs	r2, #32
 801eef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	2200      	movs	r2, #0
 801eefc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	685a      	ldr	r2, [r3, #4]
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ef0e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ef18:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	681a      	ldr	r2, [r3, #0]
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef28:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801ef2a:	6878      	ldr	r0, [r7, #4]
 801ef2c:	f7fe ff98 	bl	801de60 <HAL_I2C_SlaveTxCpltCallback>
}
 801ef30:	e004      	b.n	801ef3c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ef3a:	615a      	str	r2, [r3, #20]
}
 801ef3c:	bf00      	nop
 801ef3e:	3710      	adds	r7, #16
 801ef40:	46bd      	mov	sp, r7
 801ef42:	bd80      	pop	{r7, pc}
 801ef44:	ffff0000 	.word	0xffff0000

0801ef48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801ef48:	b580      	push	{r7, lr}
 801ef4a:	b084      	sub	sp, #16
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ef56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ef5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801ef60:	7bbb      	ldrb	r3, [r7, #14]
 801ef62:	2b10      	cmp	r3, #16
 801ef64:	d002      	beq.n	801ef6c <I2C_ITError+0x24>
 801ef66:	7bbb      	ldrb	r3, [r7, #14]
 801ef68:	2b40      	cmp	r3, #64	; 0x40
 801ef6a:	d10a      	bne.n	801ef82 <I2C_ITError+0x3a>
 801ef6c:	7bfb      	ldrb	r3, [r7, #15]
 801ef6e:	2b22      	cmp	r3, #34	; 0x22
 801ef70:	d107      	bne.n	801ef82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	681a      	ldr	r2, [r3, #0]
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ef80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801ef82:	7bfb      	ldrb	r3, [r7, #15]
 801ef84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ef88:	2b28      	cmp	r3, #40	; 0x28
 801ef8a:	d107      	bne.n	801ef9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2200      	movs	r2, #0
 801ef90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	2228      	movs	r2, #40	; 0x28
 801ef96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801ef9a:	e015      	b.n	801efc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	685b      	ldr	r3, [r3, #4]
 801efa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801efa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801efaa:	d00a      	beq.n	801efc2 <I2C_ITError+0x7a>
 801efac:	7bfb      	ldrb	r3, [r7, #15]
 801efae:	2b60      	cmp	r3, #96	; 0x60
 801efb0:	d007      	beq.n	801efc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	2220      	movs	r2, #32
 801efb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	2200      	movs	r2, #0
 801efbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	2200      	movs	r2, #0
 801efc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801efd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801efd6:	d162      	bne.n	801f09e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	685a      	ldr	r2, [r3, #4]
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801efe6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801eff0:	b2db      	uxtb	r3, r3
 801eff2:	2b01      	cmp	r3, #1
 801eff4:	d020      	beq.n	801f038 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801effa:	4a6a      	ldr	r2, [pc, #424]	; (801f1a4 <I2C_ITError+0x25c>)
 801effc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f002:	4618      	mov	r0, r3
 801f004:	f7fd f938 	bl	801c278 <HAL_DMA_Abort_IT>
 801f008:	4603      	mov	r3, r0
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	f000 8089 	beq.w	801f122 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	681a      	ldr	r2, [r3, #0]
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	f022 0201 	bic.w	r2, r2, #1
 801f01e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2220      	movs	r2, #32
 801f024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f02e:	687a      	ldr	r2, [r7, #4]
 801f030:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f032:	4610      	mov	r0, r2
 801f034:	4798      	blx	r3
 801f036:	e074      	b.n	801f122 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f03c:	4a59      	ldr	r2, [pc, #356]	; (801f1a4 <I2C_ITError+0x25c>)
 801f03e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f044:	4618      	mov	r0, r3
 801f046:	f7fd f917 	bl	801c278 <HAL_DMA_Abort_IT>
 801f04a:	4603      	mov	r3, r0
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d068      	beq.n	801f122 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	695b      	ldr	r3, [r3, #20]
 801f056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f05a:	2b40      	cmp	r3, #64	; 0x40
 801f05c:	d10b      	bne.n	801f076 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	691a      	ldr	r2, [r3, #16]
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f068:	b2d2      	uxtb	r2, r2
 801f06a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f070:	1c5a      	adds	r2, r3, #1
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	681a      	ldr	r2, [r3, #0]
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	f022 0201 	bic.w	r2, r2, #1
 801f084:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	2220      	movs	r2, #32
 801f08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f094:	687a      	ldr	r2, [r7, #4]
 801f096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f098:	4610      	mov	r0, r2
 801f09a:	4798      	blx	r3
 801f09c:	e041      	b.n	801f122 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f0a4:	b2db      	uxtb	r3, r3
 801f0a6:	2b60      	cmp	r3, #96	; 0x60
 801f0a8:	d125      	bne.n	801f0f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	2220      	movs	r2, #32
 801f0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	695b      	ldr	r3, [r3, #20]
 801f0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f0c2:	2b40      	cmp	r3, #64	; 0x40
 801f0c4:	d10b      	bne.n	801f0de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	691a      	ldr	r2, [r3, #16]
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0d0:	b2d2      	uxtb	r2, r2
 801f0d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0d8:	1c5a      	adds	r2, r3, #1
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	681a      	ldr	r2, [r3, #0]
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	f022 0201 	bic.w	r2, r2, #1
 801f0ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f0ee:	6878      	ldr	r0, [r7, #4]
 801f0f0:	f7fe feec 	bl	801decc <HAL_I2C_AbortCpltCallback>
 801f0f4:	e015      	b.n	801f122 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	695b      	ldr	r3, [r3, #20]
 801f0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f100:	2b40      	cmp	r3, #64	; 0x40
 801f102:	d10b      	bne.n	801f11c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	691a      	ldr	r2, [r3, #16]
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f10e:	b2d2      	uxtb	r2, r2
 801f110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f116:	1c5a      	adds	r2, r3, #1
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801f11c:	6878      	ldr	r0, [r7, #4]
 801f11e:	f7fe fecb 	bl	801deb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f126:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f128:	68bb      	ldr	r3, [r7, #8]
 801f12a:	f003 0301 	and.w	r3, r3, #1
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d10e      	bne.n	801f150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f132:	68bb      	ldr	r3, [r7, #8]
 801f134:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d109      	bne.n	801f150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f13c:	68bb      	ldr	r3, [r7, #8]
 801f13e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f142:	2b00      	cmp	r3, #0
 801f144:	d104      	bne.n	801f150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801f146:	68bb      	ldr	r3, [r7, #8]
 801f148:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	d007      	beq.n	801f160 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	685a      	ldr	r2, [r3, #4]
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f15e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f166:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f16c:	f003 0304 	and.w	r3, r3, #4
 801f170:	2b04      	cmp	r3, #4
 801f172:	d113      	bne.n	801f19c <I2C_ITError+0x254>
 801f174:	7bfb      	ldrb	r3, [r7, #15]
 801f176:	2b28      	cmp	r3, #40	; 0x28
 801f178:	d110      	bne.n	801f19c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	4a0a      	ldr	r2, [pc, #40]	; (801f1a8 <I2C_ITError+0x260>)
 801f17e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	2200      	movs	r2, #0
 801f184:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	2220      	movs	r2, #32
 801f18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	2200      	movs	r2, #0
 801f192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f196:	6878      	ldr	r0, [r7, #4]
 801f198:	f7fe fe84 	bl	801dea4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f19c:	bf00      	nop
 801f19e:	3710      	adds	r7, #16
 801f1a0:	46bd      	mov	sp, r7
 801f1a2:	bd80      	pop	{r7, pc}
 801f1a4:	0801f6cd 	.word	0x0801f6cd
 801f1a8:	ffff0000 	.word	0xffff0000

0801f1ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b088      	sub	sp, #32
 801f1b0:	af02      	add	r7, sp, #8
 801f1b2:	60f8      	str	r0, [r7, #12]
 801f1b4:	4608      	mov	r0, r1
 801f1b6:	4611      	mov	r1, r2
 801f1b8:	461a      	mov	r2, r3
 801f1ba:	4603      	mov	r3, r0
 801f1bc:	817b      	strh	r3, [r7, #10]
 801f1be:	460b      	mov	r3, r1
 801f1c0:	813b      	strh	r3, [r7, #8]
 801f1c2:	4613      	mov	r3, r2
 801f1c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f1c6:	68fb      	ldr	r3, [r7, #12]
 801f1c8:	681b      	ldr	r3, [r3, #0]
 801f1ca:	681a      	ldr	r2, [r3, #0]
 801f1cc:	68fb      	ldr	r3, [r7, #12]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f1d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1d8:	9300      	str	r3, [sp, #0]
 801f1da:	6a3b      	ldr	r3, [r7, #32]
 801f1dc:	2200      	movs	r2, #0
 801f1de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f1e2:	68f8      	ldr	r0, [r7, #12]
 801f1e4:	f000 fb1a 	bl	801f81c <I2C_WaitOnFlagUntilTimeout>
 801f1e8:	4603      	mov	r3, r0
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d00d      	beq.n	801f20a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1fc:	d103      	bne.n	801f206 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f206:	2303      	movs	r3, #3
 801f208:	e05f      	b.n	801f2ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f20a:	897b      	ldrh	r3, [r7, #10]
 801f20c:	b2db      	uxtb	r3, r3
 801f20e:	461a      	mov	r2, r3
 801f210:	68fb      	ldr	r3, [r7, #12]
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f21c:	6a3a      	ldr	r2, [r7, #32]
 801f21e:	492d      	ldr	r1, [pc, #180]	; (801f2d4 <I2C_RequestMemoryWrite+0x128>)
 801f220:	68f8      	ldr	r0, [r7, #12]
 801f222:	f000 fb52 	bl	801f8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f226:	4603      	mov	r3, r0
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d001      	beq.n	801f230 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801f22c:	2301      	movs	r3, #1
 801f22e:	e04c      	b.n	801f2ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f230:	2300      	movs	r3, #0
 801f232:	617b      	str	r3, [r7, #20]
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	695b      	ldr	r3, [r3, #20]
 801f23a:	617b      	str	r3, [r7, #20]
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	699b      	ldr	r3, [r3, #24]
 801f242:	617b      	str	r3, [r7, #20]
 801f244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f248:	6a39      	ldr	r1, [r7, #32]
 801f24a:	68f8      	ldr	r0, [r7, #12]
 801f24c:	f000 fbbc 	bl	801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 801f250:	4603      	mov	r3, r0
 801f252:	2b00      	cmp	r3, #0
 801f254:	d00d      	beq.n	801f272 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f25a:	2b04      	cmp	r3, #4
 801f25c:	d107      	bne.n	801f26e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	681a      	ldr	r2, [r3, #0]
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f26c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f26e:	2301      	movs	r3, #1
 801f270:	e02b      	b.n	801f2ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801f272:	88fb      	ldrh	r3, [r7, #6]
 801f274:	2b01      	cmp	r3, #1
 801f276:	d105      	bne.n	801f284 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f278:	893b      	ldrh	r3, [r7, #8]
 801f27a:	b2da      	uxtb	r2, r3
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	611a      	str	r2, [r3, #16]
 801f282:	e021      	b.n	801f2c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801f284:	893b      	ldrh	r3, [r7, #8]
 801f286:	0a1b      	lsrs	r3, r3, #8
 801f288:	b29b      	uxth	r3, r3
 801f28a:	b2da      	uxtb	r2, r3
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f294:	6a39      	ldr	r1, [r7, #32]
 801f296:	68f8      	ldr	r0, [r7, #12]
 801f298:	f000 fb96 	bl	801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 801f29c:	4603      	mov	r3, r0
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d00d      	beq.n	801f2be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2a6:	2b04      	cmp	r3, #4
 801f2a8:	d107      	bne.n	801f2ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	681a      	ldr	r2, [r3, #0]
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f2b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801f2ba:	2301      	movs	r3, #1
 801f2bc:	e005      	b.n	801f2ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f2be:	893b      	ldrh	r3, [r7, #8]
 801f2c0:	b2da      	uxtb	r2, r3
 801f2c2:	68fb      	ldr	r3, [r7, #12]
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801f2c8:	2300      	movs	r3, #0
}
 801f2ca:	4618      	mov	r0, r3
 801f2cc:	3718      	adds	r7, #24
 801f2ce:	46bd      	mov	sp, r7
 801f2d0:	bd80      	pop	{r7, pc}
 801f2d2:	bf00      	nop
 801f2d4:	00010002 	.word	0x00010002

0801f2d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	b088      	sub	sp, #32
 801f2dc:	af02      	add	r7, sp, #8
 801f2de:	60f8      	str	r0, [r7, #12]
 801f2e0:	4608      	mov	r0, r1
 801f2e2:	4611      	mov	r1, r2
 801f2e4:	461a      	mov	r2, r3
 801f2e6:	4603      	mov	r3, r0
 801f2e8:	817b      	strh	r3, [r7, #10]
 801f2ea:	460b      	mov	r3, r1
 801f2ec:	813b      	strh	r3, [r7, #8]
 801f2ee:	4613      	mov	r3, r2
 801f2f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	681a      	ldr	r2, [r3, #0]
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f300:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	681a      	ldr	r2, [r3, #0]
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f314:	9300      	str	r3, [sp, #0]
 801f316:	6a3b      	ldr	r3, [r7, #32]
 801f318:	2200      	movs	r2, #0
 801f31a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f31e:	68f8      	ldr	r0, [r7, #12]
 801f320:	f000 fa7c 	bl	801f81c <I2C_WaitOnFlagUntilTimeout>
 801f324:	4603      	mov	r3, r0
 801f326:	2b00      	cmp	r3, #0
 801f328:	d00d      	beq.n	801f346 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f32a:	68fb      	ldr	r3, [r7, #12]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f338:	d103      	bne.n	801f342 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f342:	2303      	movs	r3, #3
 801f344:	e0aa      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f346:	897b      	ldrh	r3, [r7, #10]
 801f348:	b2db      	uxtb	r3, r3
 801f34a:	461a      	mov	r2, r3
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f358:	6a3a      	ldr	r2, [r7, #32]
 801f35a:	4952      	ldr	r1, [pc, #328]	; (801f4a4 <I2C_RequestMemoryRead+0x1cc>)
 801f35c:	68f8      	ldr	r0, [r7, #12]
 801f35e:	f000 fab4 	bl	801f8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f362:	4603      	mov	r3, r0
 801f364:	2b00      	cmp	r3, #0
 801f366:	d001      	beq.n	801f36c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801f368:	2301      	movs	r3, #1
 801f36a:	e097      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f36c:	2300      	movs	r3, #0
 801f36e:	617b      	str	r3, [r7, #20]
 801f370:	68fb      	ldr	r3, [r7, #12]
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	695b      	ldr	r3, [r3, #20]
 801f376:	617b      	str	r3, [r7, #20]
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	699b      	ldr	r3, [r3, #24]
 801f37e:	617b      	str	r3, [r7, #20]
 801f380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f384:	6a39      	ldr	r1, [r7, #32]
 801f386:	68f8      	ldr	r0, [r7, #12]
 801f388:	f000 fb1e 	bl	801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 801f38c:	4603      	mov	r3, r0
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d00d      	beq.n	801f3ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f396:	2b04      	cmp	r3, #4
 801f398:	d107      	bne.n	801f3aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f39a:	68fb      	ldr	r3, [r7, #12]
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	681a      	ldr	r2, [r3, #0]
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f3a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f3aa:	2301      	movs	r3, #1
 801f3ac:	e076      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801f3ae:	88fb      	ldrh	r3, [r7, #6]
 801f3b0:	2b01      	cmp	r3, #1
 801f3b2:	d105      	bne.n	801f3c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f3b4:	893b      	ldrh	r3, [r7, #8]
 801f3b6:	b2da      	uxtb	r2, r3
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	611a      	str	r2, [r3, #16]
 801f3be:	e021      	b.n	801f404 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801f3c0:	893b      	ldrh	r3, [r7, #8]
 801f3c2:	0a1b      	lsrs	r3, r3, #8
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	b2da      	uxtb	r2, r3
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f3d0:	6a39      	ldr	r1, [r7, #32]
 801f3d2:	68f8      	ldr	r0, [r7, #12]
 801f3d4:	f000 faf8 	bl	801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 801f3d8:	4603      	mov	r3, r0
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d00d      	beq.n	801f3fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3e2:	2b04      	cmp	r3, #4
 801f3e4:	d107      	bne.n	801f3f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	681a      	ldr	r2, [r3, #0]
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f3f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801f3f6:	2301      	movs	r3, #1
 801f3f8:	e050      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f3fa:	893b      	ldrh	r3, [r7, #8]
 801f3fc:	b2da      	uxtb	r2, r3
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f406:	6a39      	ldr	r1, [r7, #32]
 801f408:	68f8      	ldr	r0, [r7, #12]
 801f40a:	f000 fadd 	bl	801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 801f40e:	4603      	mov	r3, r0
 801f410:	2b00      	cmp	r3, #0
 801f412:	d00d      	beq.n	801f430 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f418:	2b04      	cmp	r3, #4
 801f41a:	d107      	bne.n	801f42c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	681a      	ldr	r2, [r3, #0]
 801f422:	68fb      	ldr	r3, [r7, #12]
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f42a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f42c:	2301      	movs	r3, #1
 801f42e:	e035      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	681a      	ldr	r2, [r3, #0]
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f43e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f442:	9300      	str	r3, [sp, #0]
 801f444:	6a3b      	ldr	r3, [r7, #32]
 801f446:	2200      	movs	r2, #0
 801f448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f44c:	68f8      	ldr	r0, [r7, #12]
 801f44e:	f000 f9e5 	bl	801f81c <I2C_WaitOnFlagUntilTimeout>
 801f452:	4603      	mov	r3, r0
 801f454:	2b00      	cmp	r3, #0
 801f456:	d00d      	beq.n	801f474 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f466:	d103      	bne.n	801f470 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f46e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f470:	2303      	movs	r3, #3
 801f472:	e013      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801f474:	897b      	ldrh	r3, [r7, #10]
 801f476:	b2db      	uxtb	r3, r3
 801f478:	f043 0301 	orr.w	r3, r3, #1
 801f47c:	b2da      	uxtb	r2, r3
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f486:	6a3a      	ldr	r2, [r7, #32]
 801f488:	4906      	ldr	r1, [pc, #24]	; (801f4a4 <I2C_RequestMemoryRead+0x1cc>)
 801f48a:	68f8      	ldr	r0, [r7, #12]
 801f48c:	f000 fa1d 	bl	801f8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f490:	4603      	mov	r3, r0
 801f492:	2b00      	cmp	r3, #0
 801f494:	d001      	beq.n	801f49a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801f496:	2301      	movs	r3, #1
 801f498:	e000      	b.n	801f49c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801f49a:	2300      	movs	r3, #0
}
 801f49c:	4618      	mov	r0, r3
 801f49e:	3718      	adds	r7, #24
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	bd80      	pop	{r7, pc}
 801f4a4:	00010002 	.word	0x00010002

0801f4a8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801f4a8:	b580      	push	{r7, lr}
 801f4aa:	b086      	sub	sp, #24
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f4b6:	697b      	ldr	r3, [r7, #20]
 801f4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f4bc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801f4be:	697b      	ldr	r3, [r7, #20]
 801f4c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f4c4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f4c6:	697b      	ldr	r3, [r7, #20]
 801f4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4ca:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f4cc:	697b      	ldr	r3, [r7, #20]
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	685a      	ldr	r2, [r3, #4]
 801f4d2:	697b      	ldr	r3, [r7, #20]
 801f4d4:	681b      	ldr	r3, [r3, #0]
 801f4d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801f4da:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f4dc:	697b      	ldr	r3, [r7, #20]
 801f4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d003      	beq.n	801f4ec <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f4e4:	697b      	ldr	r3, [r7, #20]
 801f4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f4ec:	697b      	ldr	r3, [r7, #20]
 801f4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d003      	beq.n	801f4fc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f4f4:	697b      	ldr	r3, [r7, #20]
 801f4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801f4fc:	7cfb      	ldrb	r3, [r7, #19]
 801f4fe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801f502:	2b21      	cmp	r3, #33	; 0x21
 801f504:	d007      	beq.n	801f516 <I2C_DMAXferCplt+0x6e>
 801f506:	7cfb      	ldrb	r3, [r7, #19]
 801f508:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801f50c:	2b22      	cmp	r3, #34	; 0x22
 801f50e:	d131      	bne.n	801f574 <I2C_DMAXferCplt+0xcc>
 801f510:	7cbb      	ldrb	r3, [r7, #18]
 801f512:	2b20      	cmp	r3, #32
 801f514:	d12e      	bne.n	801f574 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f516:	697b      	ldr	r3, [r7, #20]
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	685a      	ldr	r2, [r3, #4]
 801f51c:	697b      	ldr	r3, [r7, #20]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f524:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	2200      	movs	r2, #0
 801f52a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801f52c:	7cfb      	ldrb	r3, [r7, #19]
 801f52e:	2b29      	cmp	r3, #41	; 0x29
 801f530:	d10a      	bne.n	801f548 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f532:	697b      	ldr	r3, [r7, #20]
 801f534:	2221      	movs	r2, #33	; 0x21
 801f536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f538:	697b      	ldr	r3, [r7, #20]
 801f53a:	2228      	movs	r2, #40	; 0x28
 801f53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f540:	6978      	ldr	r0, [r7, #20]
 801f542:	f7fe fc8d 	bl	801de60 <HAL_I2C_SlaveTxCpltCallback>
 801f546:	e00c      	b.n	801f562 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f548:	7cfb      	ldrb	r3, [r7, #19]
 801f54a:	2b2a      	cmp	r3, #42	; 0x2a
 801f54c:	d109      	bne.n	801f562 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f54e:	697b      	ldr	r3, [r7, #20]
 801f550:	2222      	movs	r2, #34	; 0x22
 801f552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f554:	697b      	ldr	r3, [r7, #20]
 801f556:	2228      	movs	r2, #40	; 0x28
 801f558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f55c:	6978      	ldr	r0, [r7, #20]
 801f55e:	f7fe fc89 	bl	801de74 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f562:	697b      	ldr	r3, [r7, #20]
 801f564:	681b      	ldr	r3, [r3, #0]
 801f566:	685a      	ldr	r2, [r3, #4]
 801f568:	697b      	ldr	r3, [r7, #20]
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801f570:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801f572:	e06a      	b.n	801f64a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801f574:	697b      	ldr	r3, [r7, #20]
 801f576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f57a:	b2db      	uxtb	r3, r3
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d064      	beq.n	801f64a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801f580:	697b      	ldr	r3, [r7, #20]
 801f582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f584:	b29b      	uxth	r3, r3
 801f586:	2b01      	cmp	r3, #1
 801f588:	d107      	bne.n	801f59a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f58a:	697b      	ldr	r3, [r7, #20]
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	681a      	ldr	r2, [r3, #0]
 801f590:	697b      	ldr	r3, [r7, #20]
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f598:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f59a:	697b      	ldr	r3, [r7, #20]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	685a      	ldr	r2, [r3, #4]
 801f5a0:	697b      	ldr	r3, [r7, #20]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801f5a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f5b0:	d009      	beq.n	801f5c6 <I2C_DMAXferCplt+0x11e>
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	2b08      	cmp	r3, #8
 801f5b6:	d006      	beq.n	801f5c6 <I2C_DMAXferCplt+0x11e>
 801f5b8:	68fb      	ldr	r3, [r7, #12]
 801f5ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801f5be:	d002      	beq.n	801f5c6 <I2C_DMAXferCplt+0x11e>
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	2b20      	cmp	r3, #32
 801f5c4:	d107      	bne.n	801f5d6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f5c6:	697b      	ldr	r3, [r7, #20]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	681a      	ldr	r2, [r3, #0]
 801f5cc:	697b      	ldr	r3, [r7, #20]
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f5d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f5d6:	697b      	ldr	r3, [r7, #20]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	685a      	ldr	r2, [r3, #4]
 801f5dc:	697b      	ldr	r3, [r7, #20]
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801f5e4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f5e6:	697b      	ldr	r3, [r7, #20]
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	685a      	ldr	r2, [r3, #4]
 801f5ec:	697b      	ldr	r3, [r7, #20]
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f5f4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801f5f6:	697b      	ldr	r3, [r7, #20]
 801f5f8:	2200      	movs	r2, #0
 801f5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f5fc:	697b      	ldr	r3, [r7, #20]
 801f5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f600:	2b00      	cmp	r3, #0
 801f602:	d003      	beq.n	801f60c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801f604:	6978      	ldr	r0, [r7, #20]
 801f606:	f7fe fc57 	bl	801deb8 <HAL_I2C_ErrorCallback>
}
 801f60a:	e01e      	b.n	801f64a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801f60c:	697b      	ldr	r3, [r7, #20]
 801f60e:	2220      	movs	r2, #32
 801f610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f614:	697b      	ldr	r3, [r7, #20]
 801f616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f61a:	b2db      	uxtb	r3, r3
 801f61c:	2b40      	cmp	r3, #64	; 0x40
 801f61e:	d10a      	bne.n	801f636 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	2200      	movs	r2, #0
 801f624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801f628:	697b      	ldr	r3, [r7, #20]
 801f62a:	2200      	movs	r2, #0
 801f62c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801f62e:	6978      	ldr	r0, [r7, #20]
 801f630:	f7e2 f9fe 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801f634:	e009      	b.n	801f64a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f636:	697b      	ldr	r3, [r7, #20]
 801f638:	2200      	movs	r2, #0
 801f63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801f63e:	697b      	ldr	r3, [r7, #20]
 801f640:	2212      	movs	r2, #18
 801f642:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801f644:	6978      	ldr	r0, [r7, #20]
 801f646:	f7e2 fa09 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801f64a:	bf00      	nop
 801f64c:	3718      	adds	r7, #24
 801f64e:	46bd      	mov	sp, r7
 801f650:	bd80      	pop	{r7, pc}

0801f652 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801f652:	b580      	push	{r7, lr}
 801f654:	b084      	sub	sp, #16
 801f656:	af00      	add	r7, sp, #0
 801f658:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f65e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f660:	68fb      	ldr	r3, [r7, #12]
 801f662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f664:	2b00      	cmp	r3, #0
 801f666:	d003      	beq.n	801f670 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f668:	68fb      	ldr	r3, [r7, #12]
 801f66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f66c:	2200      	movs	r2, #0
 801f66e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f670:	68fb      	ldr	r3, [r7, #12]
 801f672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f674:	2b00      	cmp	r3, #0
 801f676:	d003      	beq.n	801f680 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f67c:	2200      	movs	r2, #0
 801f67e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801f680:	6878      	ldr	r0, [r7, #4]
 801f682:	f7fc ffb3 	bl	801c5ec <HAL_DMA_GetError>
 801f686:	4603      	mov	r3, r0
 801f688:	2b02      	cmp	r3, #2
 801f68a:	d01b      	beq.n	801f6c4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	681a      	ldr	r2, [r3, #0]
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f69a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	2200      	movs	r2, #0
 801f6a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801f6a2:	68fb      	ldr	r3, [r7, #12]
 801f6a4:	2220      	movs	r2, #32
 801f6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6b6:	f043 0210 	orr.w	r2, r3, #16
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801f6be:	68f8      	ldr	r0, [r7, #12]
 801f6c0:	f7fe fbfa 	bl	801deb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f6c4:	bf00      	nop
 801f6c6:	3710      	adds	r7, #16
 801f6c8:	46bd      	mov	sp, r7
 801f6ca:	bd80      	pop	{r7, pc}

0801f6cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801f6cc:	b580      	push	{r7, lr}
 801f6ce:	b086      	sub	sp, #24
 801f6d0:	af00      	add	r7, sp, #0
 801f6d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f6d4:	2300      	movs	r3, #0
 801f6d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f6de:	697b      	ldr	r3, [r7, #20]
 801f6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f6e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801f6e6:	4b4b      	ldr	r3, [pc, #300]	; (801f814 <I2C_DMAAbort+0x148>)
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	08db      	lsrs	r3, r3, #3
 801f6ec:	4a4a      	ldr	r2, [pc, #296]	; (801f818 <I2C_DMAAbort+0x14c>)
 801f6ee:	fba2 2303 	umull	r2, r3, r2, r3
 801f6f2:	0a1a      	lsrs	r2, r3, #8
 801f6f4:	4613      	mov	r3, r2
 801f6f6:	009b      	lsls	r3, r3, #2
 801f6f8:	4413      	add	r3, r2
 801f6fa:	00da      	lsls	r2, r3, #3
 801f6fc:	1ad3      	subs	r3, r2, r3
 801f6fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d106      	bne.n	801f714 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801f706:	697b      	ldr	r3, [r7, #20]
 801f708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f70a:	f043 0220 	orr.w	r2, r3, #32
 801f70e:	697b      	ldr	r3, [r7, #20]
 801f710:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801f712:	e00a      	b.n	801f72a <I2C_DMAAbort+0x5e>
    }
    count--;
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	3b01      	subs	r3, #1
 801f718:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801f71a:	697b      	ldr	r3, [r7, #20]
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801f724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f728:	d0ea      	beq.n	801f700 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f72a:	697b      	ldr	r3, [r7, #20]
 801f72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d003      	beq.n	801f73a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f732:	697b      	ldr	r3, [r7, #20]
 801f734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f736:	2200      	movs	r2, #0
 801f738:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f73a:	697b      	ldr	r3, [r7, #20]
 801f73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d003      	beq.n	801f74a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f742:	697b      	ldr	r3, [r7, #20]
 801f744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f746:	2200      	movs	r2, #0
 801f748:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f74a:	697b      	ldr	r3, [r7, #20]
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	681a      	ldr	r2, [r3, #0]
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f758:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801f75a:	697b      	ldr	r3, [r7, #20]
 801f75c:	2200      	movs	r2, #0
 801f75e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801f760:	697b      	ldr	r3, [r7, #20]
 801f762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f764:	2b00      	cmp	r3, #0
 801f766:	d003      	beq.n	801f770 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801f768:	697b      	ldr	r3, [r7, #20]
 801f76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f76c:	2200      	movs	r2, #0
 801f76e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801f770:	697b      	ldr	r3, [r7, #20]
 801f772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f774:	2b00      	cmp	r3, #0
 801f776:	d003      	beq.n	801f780 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801f778:	697b      	ldr	r3, [r7, #20]
 801f77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f77c:	2200      	movs	r2, #0
 801f77e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801f780:	697b      	ldr	r3, [r7, #20]
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	681a      	ldr	r2, [r3, #0]
 801f786:	697b      	ldr	r3, [r7, #20]
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	f022 0201 	bic.w	r2, r2, #1
 801f78e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f790:	697b      	ldr	r3, [r7, #20]
 801f792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f796:	b2db      	uxtb	r3, r3
 801f798:	2b60      	cmp	r3, #96	; 0x60
 801f79a:	d10e      	bne.n	801f7ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801f79c:	697b      	ldr	r3, [r7, #20]
 801f79e:	2220      	movs	r2, #32
 801f7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f7a4:	697b      	ldr	r3, [r7, #20]
 801f7a6:	2200      	movs	r2, #0
 801f7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801f7ac:	697b      	ldr	r3, [r7, #20]
 801f7ae:	2200      	movs	r2, #0
 801f7b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f7b2:	6978      	ldr	r0, [r7, #20]
 801f7b4:	f7fe fb8a 	bl	801decc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f7b8:	e027      	b.n	801f80a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f7ba:	7cfb      	ldrb	r3, [r7, #19]
 801f7bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f7c0:	2b28      	cmp	r3, #40	; 0x28
 801f7c2:	d117      	bne.n	801f7f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801f7c4:	697b      	ldr	r3, [r7, #20]
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	681a      	ldr	r2, [r3, #0]
 801f7ca:	697b      	ldr	r3, [r7, #20]
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	f042 0201 	orr.w	r2, r2, #1
 801f7d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f7d4:	697b      	ldr	r3, [r7, #20]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	681a      	ldr	r2, [r3, #0]
 801f7da:	697b      	ldr	r3, [r7, #20]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f7e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801f7e4:	697b      	ldr	r3, [r7, #20]
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f7ea:	697b      	ldr	r3, [r7, #20]
 801f7ec:	2228      	movs	r2, #40	; 0x28
 801f7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f7f2:	e007      	b.n	801f804 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801f7f4:	697b      	ldr	r3, [r7, #20]
 801f7f6:	2220      	movs	r2, #32
 801f7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7fc:	697b      	ldr	r3, [r7, #20]
 801f7fe:	2200      	movs	r2, #0
 801f800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801f804:	6978      	ldr	r0, [r7, #20]
 801f806:	f7fe fb57 	bl	801deb8 <HAL_I2C_ErrorCallback>
}
 801f80a:	bf00      	nop
 801f80c:	3718      	adds	r7, #24
 801f80e:	46bd      	mov	sp, r7
 801f810:	bd80      	pop	{r7, pc}
 801f812:	bf00      	nop
 801f814:	20000020 	.word	0x20000020
 801f818:	14f8b589 	.word	0x14f8b589

0801f81c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f81c:	b580      	push	{r7, lr}
 801f81e:	b084      	sub	sp, #16
 801f820:	af00      	add	r7, sp, #0
 801f822:	60f8      	str	r0, [r7, #12]
 801f824:	60b9      	str	r1, [r7, #8]
 801f826:	603b      	str	r3, [r7, #0]
 801f828:	4613      	mov	r3, r2
 801f82a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f82c:	e025      	b.n	801f87a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f834:	d021      	beq.n	801f87a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f836:	f7fb fe57 	bl	801b4e8 <HAL_GetTick>
 801f83a:	4602      	mov	r2, r0
 801f83c:	69bb      	ldr	r3, [r7, #24]
 801f83e:	1ad3      	subs	r3, r2, r3
 801f840:	683a      	ldr	r2, [r7, #0]
 801f842:	429a      	cmp	r2, r3
 801f844:	d302      	bcc.n	801f84c <I2C_WaitOnFlagUntilTimeout+0x30>
 801f846:	683b      	ldr	r3, [r7, #0]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d116      	bne.n	801f87a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	2200      	movs	r2, #0
 801f850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801f852:	68fb      	ldr	r3, [r7, #12]
 801f854:	2220      	movs	r2, #32
 801f856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	2200      	movs	r2, #0
 801f85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f866:	f043 0220 	orr.w	r2, r3, #32
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	2200      	movs	r2, #0
 801f872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f876:	2301      	movs	r3, #1
 801f878:	e023      	b.n	801f8c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f87a:	68bb      	ldr	r3, [r7, #8]
 801f87c:	0c1b      	lsrs	r3, r3, #16
 801f87e:	b2db      	uxtb	r3, r3
 801f880:	2b01      	cmp	r3, #1
 801f882:	d10d      	bne.n	801f8a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	695b      	ldr	r3, [r3, #20]
 801f88a:	43da      	mvns	r2, r3
 801f88c:	68bb      	ldr	r3, [r7, #8]
 801f88e:	4013      	ands	r3, r2
 801f890:	b29b      	uxth	r3, r3
 801f892:	2b00      	cmp	r3, #0
 801f894:	bf0c      	ite	eq
 801f896:	2301      	moveq	r3, #1
 801f898:	2300      	movne	r3, #0
 801f89a:	b2db      	uxtb	r3, r3
 801f89c:	461a      	mov	r2, r3
 801f89e:	e00c      	b.n	801f8ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	699b      	ldr	r3, [r3, #24]
 801f8a6:	43da      	mvns	r2, r3
 801f8a8:	68bb      	ldr	r3, [r7, #8]
 801f8aa:	4013      	ands	r3, r2
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	bf0c      	ite	eq
 801f8b2:	2301      	moveq	r3, #1
 801f8b4:	2300      	movne	r3, #0
 801f8b6:	b2db      	uxtb	r3, r3
 801f8b8:	461a      	mov	r2, r3
 801f8ba:	79fb      	ldrb	r3, [r7, #7]
 801f8bc:	429a      	cmp	r2, r3
 801f8be:	d0b6      	beq.n	801f82e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801f8c0:	2300      	movs	r3, #0
}
 801f8c2:	4618      	mov	r0, r3
 801f8c4:	3710      	adds	r7, #16
 801f8c6:	46bd      	mov	sp, r7
 801f8c8:	bd80      	pop	{r7, pc}

0801f8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801f8ca:	b580      	push	{r7, lr}
 801f8cc:	b084      	sub	sp, #16
 801f8ce:	af00      	add	r7, sp, #0
 801f8d0:	60f8      	str	r0, [r7, #12]
 801f8d2:	60b9      	str	r1, [r7, #8]
 801f8d4:	607a      	str	r2, [r7, #4]
 801f8d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f8d8:	e051      	b.n	801f97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	695b      	ldr	r3, [r3, #20]
 801f8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f8e8:	d123      	bne.n	801f932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	681a      	ldr	r2, [r3, #0]
 801f8f0:	68fb      	ldr	r3, [r7, #12]
 801f8f2:	681b      	ldr	r3, [r3, #0]
 801f8f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f8f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f8fa:	68fb      	ldr	r3, [r7, #12]
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801f904:	68fb      	ldr	r3, [r7, #12]
 801f906:	2200      	movs	r2, #0
 801f908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	2220      	movs	r2, #32
 801f90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	2200      	movs	r2, #0
 801f916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f91e:	f043 0204 	orr.w	r2, r3, #4
 801f922:	68fb      	ldr	r3, [r7, #12]
 801f924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801f926:	68fb      	ldr	r3, [r7, #12]
 801f928:	2200      	movs	r2, #0
 801f92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801f92e:	2301      	movs	r3, #1
 801f930:	e046      	b.n	801f9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f938:	d021      	beq.n	801f97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f93a:	f7fb fdd5 	bl	801b4e8 <HAL_GetTick>
 801f93e:	4602      	mov	r2, r0
 801f940:	683b      	ldr	r3, [r7, #0]
 801f942:	1ad3      	subs	r3, r2, r3
 801f944:	687a      	ldr	r2, [r7, #4]
 801f946:	429a      	cmp	r2, r3
 801f948:	d302      	bcc.n	801f950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d116      	bne.n	801f97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	2200      	movs	r2, #0
 801f954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	2220      	movs	r2, #32
 801f95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f95e:	68fb      	ldr	r3, [r7, #12]
 801f960:	2200      	movs	r2, #0
 801f962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f96a:	f043 0220 	orr.w	r2, r3, #32
 801f96e:	68fb      	ldr	r3, [r7, #12]
 801f970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f972:	68fb      	ldr	r3, [r7, #12]
 801f974:	2200      	movs	r2, #0
 801f976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f97a:	2301      	movs	r3, #1
 801f97c:	e020      	b.n	801f9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f97e:	68bb      	ldr	r3, [r7, #8]
 801f980:	0c1b      	lsrs	r3, r3, #16
 801f982:	b2db      	uxtb	r3, r3
 801f984:	2b01      	cmp	r3, #1
 801f986:	d10c      	bne.n	801f9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	695b      	ldr	r3, [r3, #20]
 801f98e:	43da      	mvns	r2, r3
 801f990:	68bb      	ldr	r3, [r7, #8]
 801f992:	4013      	ands	r3, r2
 801f994:	b29b      	uxth	r3, r3
 801f996:	2b00      	cmp	r3, #0
 801f998:	bf14      	ite	ne
 801f99a:	2301      	movne	r3, #1
 801f99c:	2300      	moveq	r3, #0
 801f99e:	b2db      	uxtb	r3, r3
 801f9a0:	e00b      	b.n	801f9ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801f9a2:	68fb      	ldr	r3, [r7, #12]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	699b      	ldr	r3, [r3, #24]
 801f9a8:	43da      	mvns	r2, r3
 801f9aa:	68bb      	ldr	r3, [r7, #8]
 801f9ac:	4013      	ands	r3, r2
 801f9ae:	b29b      	uxth	r3, r3
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	bf14      	ite	ne
 801f9b4:	2301      	movne	r3, #1
 801f9b6:	2300      	moveq	r3, #0
 801f9b8:	b2db      	uxtb	r3, r3
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d18d      	bne.n	801f8da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801f9be:	2300      	movs	r3, #0
}
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	3710      	adds	r7, #16
 801f9c4:	46bd      	mov	sp, r7
 801f9c6:	bd80      	pop	{r7, pc}

0801f9c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f9c8:	b580      	push	{r7, lr}
 801f9ca:	b084      	sub	sp, #16
 801f9cc:	af00      	add	r7, sp, #0
 801f9ce:	60f8      	str	r0, [r7, #12]
 801f9d0:	60b9      	str	r1, [r7, #8]
 801f9d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f9d4:	e02d      	b.n	801fa32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f9d6:	68f8      	ldr	r0, [r7, #12]
 801f9d8:	f000 f86a 	bl	801fab0 <I2C_IsAcknowledgeFailed>
 801f9dc:	4603      	mov	r3, r0
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d001      	beq.n	801f9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f9e2:	2301      	movs	r3, #1
 801f9e4:	e02d      	b.n	801fa42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f9e6:	68bb      	ldr	r3, [r7, #8]
 801f9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f9ec:	d021      	beq.n	801fa32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f9ee:	f7fb fd7b 	bl	801b4e8 <HAL_GetTick>
 801f9f2:	4602      	mov	r2, r0
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	1ad3      	subs	r3, r2, r3
 801f9f8:	68ba      	ldr	r2, [r7, #8]
 801f9fa:	429a      	cmp	r2, r3
 801f9fc:	d302      	bcc.n	801fa04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f9fe:	68bb      	ldr	r3, [r7, #8]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d116      	bne.n	801fa32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801fa04:	68fb      	ldr	r3, [r7, #12]
 801fa06:	2200      	movs	r2, #0
 801fa08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801fa0a:	68fb      	ldr	r3, [r7, #12]
 801fa0c:	2220      	movs	r2, #32
 801fa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	2200      	movs	r2, #0
 801fa16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa1e:	f043 0220 	orr.w	r2, r3, #32
 801fa22:	68fb      	ldr	r3, [r7, #12]
 801fa24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	2200      	movs	r2, #0
 801fa2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801fa2e:	2301      	movs	r3, #1
 801fa30:	e007      	b.n	801fa42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	695b      	ldr	r3, [r3, #20]
 801fa38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fa3c:	2b80      	cmp	r3, #128	; 0x80
 801fa3e:	d1ca      	bne.n	801f9d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801fa40:	2300      	movs	r3, #0
}
 801fa42:	4618      	mov	r0, r3
 801fa44:	3710      	adds	r7, #16
 801fa46:	46bd      	mov	sp, r7
 801fa48:	bd80      	pop	{r7, pc}
	...

0801fa4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801fa4c:	b480      	push	{r7}
 801fa4e:	b085      	sub	sp, #20
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801fa54:	2300      	movs	r3, #0
 801fa56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801fa58:	4b13      	ldr	r3, [pc, #76]	; (801faa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	08db      	lsrs	r3, r3, #3
 801fa5e:	4a13      	ldr	r2, [pc, #76]	; (801faac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801fa60:	fba2 2303 	umull	r2, r3, r2, r3
 801fa64:	0a1a      	lsrs	r2, r3, #8
 801fa66:	4613      	mov	r3, r2
 801fa68:	009b      	lsls	r3, r3, #2
 801fa6a:	4413      	add	r3, r2
 801fa6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	3b01      	subs	r3, #1
 801fa72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d107      	bne.n	801fa8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa7e:	f043 0220 	orr.w	r2, r3, #32
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801fa86:	2301      	movs	r3, #1
 801fa88:	e008      	b.n	801fa9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801fa94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fa98:	d0e9      	beq.n	801fa6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801fa9a:	2300      	movs	r3, #0
}
 801fa9c:	4618      	mov	r0, r3
 801fa9e:	3714      	adds	r7, #20
 801faa0:	46bd      	mov	sp, r7
 801faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faa6:	4770      	bx	lr
 801faa8:	20000020 	.word	0x20000020
 801faac:	14f8b589 	.word	0x14f8b589

0801fab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801fab0:	b480      	push	{r7}
 801fab2:	b083      	sub	sp, #12
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	681b      	ldr	r3, [r3, #0]
 801fabc:	695b      	ldr	r3, [r3, #20]
 801fabe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801fac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fac6:	d11b      	bne.n	801fb00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801fad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	2200      	movs	r2, #0
 801fad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	2220      	movs	r2, #32
 801fadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	2200      	movs	r2, #0
 801fae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801faec:	f043 0204 	orr.w	r2, r3, #4
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	2200      	movs	r2, #0
 801faf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801fafc:	2301      	movs	r3, #1
 801fafe:	e000      	b.n	801fb02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801fb00:	2300      	movs	r3, #0
}
 801fb02:	4618      	mov	r0, r3
 801fb04:	370c      	adds	r7, #12
 801fb06:	46bd      	mov	sp, r7
 801fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb0c:	4770      	bx	lr

0801fb0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801fb0e:	b480      	push	{r7}
 801fb10:	b083      	sub	sp, #12
 801fb12:	af00      	add	r7, sp, #0
 801fb14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb1a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801fb1e:	d103      	bne.n	801fb28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	2201      	movs	r2, #1
 801fb24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801fb26:	e007      	b.n	801fb38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801fb30:	d102      	bne.n	801fb38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	2208      	movs	r2, #8
 801fb36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801fb38:	bf00      	nop
 801fb3a:	370c      	adds	r7, #12
 801fb3c:	46bd      	mov	sp, r7
 801fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb42:	4770      	bx	lr

0801fb44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801fb44:	b580      	push	{r7, lr}
 801fb46:	b086      	sub	sp, #24
 801fb48:	af00      	add	r7, sp, #0
 801fb4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d101      	bne.n	801fb56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801fb52:	2301      	movs	r3, #1
 801fb54:	e267      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	f003 0301 	and.w	r3, r3, #1
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d075      	beq.n	801fc4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801fb62:	4b88      	ldr	r3, [pc, #544]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fb64:	689b      	ldr	r3, [r3, #8]
 801fb66:	f003 030c 	and.w	r3, r3, #12
 801fb6a:	2b04      	cmp	r3, #4
 801fb6c:	d00c      	beq.n	801fb88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801fb6e:	4b85      	ldr	r3, [pc, #532]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fb70:	689b      	ldr	r3, [r3, #8]
 801fb72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801fb76:	2b08      	cmp	r3, #8
 801fb78:	d112      	bne.n	801fba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801fb7a:	4b82      	ldr	r3, [pc, #520]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fb7c:	685b      	ldr	r3, [r3, #4]
 801fb7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fb82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801fb86:	d10b      	bne.n	801fba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801fb88:	4b7e      	ldr	r3, [pc, #504]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d05b      	beq.n	801fc4c <HAL_RCC_OscConfig+0x108>
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	685b      	ldr	r3, [r3, #4]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d157      	bne.n	801fc4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801fb9c:	2301      	movs	r3, #1
 801fb9e:	e242      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	685b      	ldr	r3, [r3, #4]
 801fba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fba8:	d106      	bne.n	801fbb8 <HAL_RCC_OscConfig+0x74>
 801fbaa:	4b76      	ldr	r3, [pc, #472]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	4a75      	ldr	r2, [pc, #468]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801fbb4:	6013      	str	r3, [r2, #0]
 801fbb6:	e01d      	b.n	801fbf4 <HAL_RCC_OscConfig+0xb0>
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	685b      	ldr	r3, [r3, #4]
 801fbbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801fbc0:	d10c      	bne.n	801fbdc <HAL_RCC_OscConfig+0x98>
 801fbc2:	4b70      	ldr	r3, [pc, #448]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	4a6f      	ldr	r2, [pc, #444]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801fbcc:	6013      	str	r3, [r2, #0]
 801fbce:	4b6d      	ldr	r3, [pc, #436]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	4a6c      	ldr	r2, [pc, #432]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801fbd8:	6013      	str	r3, [r2, #0]
 801fbda:	e00b      	b.n	801fbf4 <HAL_RCC_OscConfig+0xb0>
 801fbdc:	4b69      	ldr	r3, [pc, #420]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	4a68      	ldr	r2, [pc, #416]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fbe6:	6013      	str	r3, [r2, #0]
 801fbe8:	4b66      	ldr	r3, [pc, #408]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	4a65      	ldr	r2, [pc, #404]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fbee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fbf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	685b      	ldr	r3, [r3, #4]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d013      	beq.n	801fc24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fbfc:	f7fb fc74 	bl	801b4e8 <HAL_GetTick>
 801fc00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fc02:	e008      	b.n	801fc16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801fc04:	f7fb fc70 	bl	801b4e8 <HAL_GetTick>
 801fc08:	4602      	mov	r2, r0
 801fc0a:	693b      	ldr	r3, [r7, #16]
 801fc0c:	1ad3      	subs	r3, r2, r3
 801fc0e:	2b64      	cmp	r3, #100	; 0x64
 801fc10:	d901      	bls.n	801fc16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801fc12:	2303      	movs	r3, #3
 801fc14:	e207      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fc16:	4b5b      	ldr	r3, [pc, #364]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc18:	681b      	ldr	r3, [r3, #0]
 801fc1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d0f0      	beq.n	801fc04 <HAL_RCC_OscConfig+0xc0>
 801fc22:	e014      	b.n	801fc4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fc24:	f7fb fc60 	bl	801b4e8 <HAL_GetTick>
 801fc28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801fc2a:	e008      	b.n	801fc3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801fc2c:	f7fb fc5c 	bl	801b4e8 <HAL_GetTick>
 801fc30:	4602      	mov	r2, r0
 801fc32:	693b      	ldr	r3, [r7, #16]
 801fc34:	1ad3      	subs	r3, r2, r3
 801fc36:	2b64      	cmp	r3, #100	; 0x64
 801fc38:	d901      	bls.n	801fc3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801fc3a:	2303      	movs	r3, #3
 801fc3c:	e1f3      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801fc3e:	4b51      	ldr	r3, [pc, #324]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d1f0      	bne.n	801fc2c <HAL_RCC_OscConfig+0xe8>
 801fc4a:	e000      	b.n	801fc4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801fc4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	f003 0302 	and.w	r3, r3, #2
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d063      	beq.n	801fd22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801fc5a:	4b4a      	ldr	r3, [pc, #296]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc5c:	689b      	ldr	r3, [r3, #8]
 801fc5e:	f003 030c 	and.w	r3, r3, #12
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d00b      	beq.n	801fc7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801fc66:	4b47      	ldr	r3, [pc, #284]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc68:	689b      	ldr	r3, [r3, #8]
 801fc6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801fc6e:	2b08      	cmp	r3, #8
 801fc70:	d11c      	bne.n	801fcac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801fc72:	4b44      	ldr	r3, [pc, #272]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc74:	685b      	ldr	r3, [r3, #4]
 801fc76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d116      	bne.n	801fcac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801fc7e:	4b41      	ldr	r3, [pc, #260]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	f003 0302 	and.w	r3, r3, #2
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d005      	beq.n	801fc96 <HAL_RCC_OscConfig+0x152>
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	68db      	ldr	r3, [r3, #12]
 801fc8e:	2b01      	cmp	r3, #1
 801fc90:	d001      	beq.n	801fc96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801fc92:	2301      	movs	r3, #1
 801fc94:	e1c7      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801fc96:	4b3b      	ldr	r3, [pc, #236]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	691b      	ldr	r3, [r3, #16]
 801fca2:	00db      	lsls	r3, r3, #3
 801fca4:	4937      	ldr	r1, [pc, #220]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fca6:	4313      	orrs	r3, r2
 801fca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801fcaa:	e03a      	b.n	801fd22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	68db      	ldr	r3, [r3, #12]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d020      	beq.n	801fcf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801fcb4:	4b34      	ldr	r3, [pc, #208]	; (801fd88 <HAL_RCC_OscConfig+0x244>)
 801fcb6:	2201      	movs	r2, #1
 801fcb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801fcba:	f7fb fc15 	bl	801b4e8 <HAL_GetTick>
 801fcbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fcc0:	e008      	b.n	801fcd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801fcc2:	f7fb fc11 	bl	801b4e8 <HAL_GetTick>
 801fcc6:	4602      	mov	r2, r0
 801fcc8:	693b      	ldr	r3, [r7, #16]
 801fcca:	1ad3      	subs	r3, r2, r3
 801fccc:	2b02      	cmp	r3, #2
 801fcce:	d901      	bls.n	801fcd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801fcd0:	2303      	movs	r3, #3
 801fcd2:	e1a8      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fcd4:	4b2b      	ldr	r3, [pc, #172]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	f003 0302 	and.w	r3, r3, #2
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d0f0      	beq.n	801fcc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801fce0:	4b28      	ldr	r3, [pc, #160]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	691b      	ldr	r3, [r3, #16]
 801fcec:	00db      	lsls	r3, r3, #3
 801fcee:	4925      	ldr	r1, [pc, #148]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fcf0:	4313      	orrs	r3, r2
 801fcf2:	600b      	str	r3, [r1, #0]
 801fcf4:	e015      	b.n	801fd22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801fcf6:	4b24      	ldr	r3, [pc, #144]	; (801fd88 <HAL_RCC_OscConfig+0x244>)
 801fcf8:	2200      	movs	r2, #0
 801fcfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801fcfc:	f7fb fbf4 	bl	801b4e8 <HAL_GetTick>
 801fd00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801fd02:	e008      	b.n	801fd16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801fd04:	f7fb fbf0 	bl	801b4e8 <HAL_GetTick>
 801fd08:	4602      	mov	r2, r0
 801fd0a:	693b      	ldr	r3, [r7, #16]
 801fd0c:	1ad3      	subs	r3, r2, r3
 801fd0e:	2b02      	cmp	r3, #2
 801fd10:	d901      	bls.n	801fd16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801fd12:	2303      	movs	r3, #3
 801fd14:	e187      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801fd16:	4b1b      	ldr	r3, [pc, #108]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	f003 0302 	and.w	r3, r3, #2
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d1f0      	bne.n	801fd04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	f003 0308 	and.w	r3, r3, #8
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d036      	beq.n	801fd9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	695b      	ldr	r3, [r3, #20]
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d016      	beq.n	801fd64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801fd36:	4b15      	ldr	r3, [pc, #84]	; (801fd8c <HAL_RCC_OscConfig+0x248>)
 801fd38:	2201      	movs	r2, #1
 801fd3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801fd3c:	f7fb fbd4 	bl	801b4e8 <HAL_GetTick>
 801fd40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801fd42:	e008      	b.n	801fd56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801fd44:	f7fb fbd0 	bl	801b4e8 <HAL_GetTick>
 801fd48:	4602      	mov	r2, r0
 801fd4a:	693b      	ldr	r3, [r7, #16]
 801fd4c:	1ad3      	subs	r3, r2, r3
 801fd4e:	2b02      	cmp	r3, #2
 801fd50:	d901      	bls.n	801fd56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801fd52:	2303      	movs	r3, #3
 801fd54:	e167      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801fd56:	4b0b      	ldr	r3, [pc, #44]	; (801fd84 <HAL_RCC_OscConfig+0x240>)
 801fd58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fd5a:	f003 0302 	and.w	r3, r3, #2
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d0f0      	beq.n	801fd44 <HAL_RCC_OscConfig+0x200>
 801fd62:	e01b      	b.n	801fd9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801fd64:	4b09      	ldr	r3, [pc, #36]	; (801fd8c <HAL_RCC_OscConfig+0x248>)
 801fd66:	2200      	movs	r2, #0
 801fd68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801fd6a:	f7fb fbbd 	bl	801b4e8 <HAL_GetTick>
 801fd6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801fd70:	e00e      	b.n	801fd90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801fd72:	f7fb fbb9 	bl	801b4e8 <HAL_GetTick>
 801fd76:	4602      	mov	r2, r0
 801fd78:	693b      	ldr	r3, [r7, #16]
 801fd7a:	1ad3      	subs	r3, r2, r3
 801fd7c:	2b02      	cmp	r3, #2
 801fd7e:	d907      	bls.n	801fd90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801fd80:	2303      	movs	r3, #3
 801fd82:	e150      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
 801fd84:	40023800 	.word	0x40023800
 801fd88:	42470000 	.word	0x42470000
 801fd8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801fd90:	4b88      	ldr	r3, [pc, #544]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fd94:	f003 0302 	and.w	r3, r3, #2
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	d1ea      	bne.n	801fd72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	f003 0304 	and.w	r3, r3, #4
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	f000 8097 	beq.w	801fed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801fdaa:	2300      	movs	r3, #0
 801fdac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801fdae:	4b81      	ldr	r3, [pc, #516]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fdb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fdb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	d10f      	bne.n	801fdda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801fdba:	2300      	movs	r3, #0
 801fdbc:	60bb      	str	r3, [r7, #8]
 801fdbe:	4b7d      	ldr	r3, [pc, #500]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fdc2:	4a7c      	ldr	r2, [pc, #496]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fdc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801fdc8:	6413      	str	r3, [r2, #64]	; 0x40
 801fdca:	4b7a      	ldr	r3, [pc, #488]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fdce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801fdd2:	60bb      	str	r3, [r7, #8]
 801fdd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801fdd6:	2301      	movs	r3, #1
 801fdd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801fdda:	4b77      	ldr	r3, [pc, #476]	; (801ffb8 <HAL_RCC_OscConfig+0x474>)
 801fddc:	681b      	ldr	r3, [r3, #0]
 801fdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d118      	bne.n	801fe18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801fde6:	4b74      	ldr	r3, [pc, #464]	; (801ffb8 <HAL_RCC_OscConfig+0x474>)
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	4a73      	ldr	r2, [pc, #460]	; (801ffb8 <HAL_RCC_OscConfig+0x474>)
 801fdec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fdf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801fdf2:	f7fb fb79 	bl	801b4e8 <HAL_GetTick>
 801fdf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801fdf8:	e008      	b.n	801fe0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801fdfa:	f7fb fb75 	bl	801b4e8 <HAL_GetTick>
 801fdfe:	4602      	mov	r2, r0
 801fe00:	693b      	ldr	r3, [r7, #16]
 801fe02:	1ad3      	subs	r3, r2, r3
 801fe04:	2b02      	cmp	r3, #2
 801fe06:	d901      	bls.n	801fe0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801fe08:	2303      	movs	r3, #3
 801fe0a:	e10c      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801fe0c:	4b6a      	ldr	r3, [pc, #424]	; (801ffb8 <HAL_RCC_OscConfig+0x474>)
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d0f0      	beq.n	801fdfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	689b      	ldr	r3, [r3, #8]
 801fe1c:	2b01      	cmp	r3, #1
 801fe1e:	d106      	bne.n	801fe2e <HAL_RCC_OscConfig+0x2ea>
 801fe20:	4b64      	ldr	r3, [pc, #400]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe24:	4a63      	ldr	r2, [pc, #396]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe26:	f043 0301 	orr.w	r3, r3, #1
 801fe2a:	6713      	str	r3, [r2, #112]	; 0x70
 801fe2c:	e01c      	b.n	801fe68 <HAL_RCC_OscConfig+0x324>
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	689b      	ldr	r3, [r3, #8]
 801fe32:	2b05      	cmp	r3, #5
 801fe34:	d10c      	bne.n	801fe50 <HAL_RCC_OscConfig+0x30c>
 801fe36:	4b5f      	ldr	r3, [pc, #380]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe3a:	4a5e      	ldr	r2, [pc, #376]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe3c:	f043 0304 	orr.w	r3, r3, #4
 801fe40:	6713      	str	r3, [r2, #112]	; 0x70
 801fe42:	4b5c      	ldr	r3, [pc, #368]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe46:	4a5b      	ldr	r2, [pc, #364]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe48:	f043 0301 	orr.w	r3, r3, #1
 801fe4c:	6713      	str	r3, [r2, #112]	; 0x70
 801fe4e:	e00b      	b.n	801fe68 <HAL_RCC_OscConfig+0x324>
 801fe50:	4b58      	ldr	r3, [pc, #352]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe54:	4a57      	ldr	r2, [pc, #348]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe56:	f023 0301 	bic.w	r3, r3, #1
 801fe5a:	6713      	str	r3, [r2, #112]	; 0x70
 801fe5c:	4b55      	ldr	r3, [pc, #340]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe60:	4a54      	ldr	r2, [pc, #336]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe62:	f023 0304 	bic.w	r3, r3, #4
 801fe66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	689b      	ldr	r3, [r3, #8]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d015      	beq.n	801fe9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801fe70:	f7fb fb3a 	bl	801b4e8 <HAL_GetTick>
 801fe74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fe76:	e00a      	b.n	801fe8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801fe78:	f7fb fb36 	bl	801b4e8 <HAL_GetTick>
 801fe7c:	4602      	mov	r2, r0
 801fe7e:	693b      	ldr	r3, [r7, #16]
 801fe80:	1ad3      	subs	r3, r2, r3
 801fe82:	f241 3288 	movw	r2, #5000	; 0x1388
 801fe86:	4293      	cmp	r3, r2
 801fe88:	d901      	bls.n	801fe8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801fe8a:	2303      	movs	r3, #3
 801fe8c:	e0cb      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fe8e:	4b49      	ldr	r3, [pc, #292]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fe90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe92:	f003 0302 	and.w	r3, r3, #2
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d0ee      	beq.n	801fe78 <HAL_RCC_OscConfig+0x334>
 801fe9a:	e014      	b.n	801fec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801fe9c:	f7fb fb24 	bl	801b4e8 <HAL_GetTick>
 801fea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801fea2:	e00a      	b.n	801feba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801fea4:	f7fb fb20 	bl	801b4e8 <HAL_GetTick>
 801fea8:	4602      	mov	r2, r0
 801feaa:	693b      	ldr	r3, [r7, #16]
 801feac:	1ad3      	subs	r3, r2, r3
 801feae:	f241 3288 	movw	r2, #5000	; 0x1388
 801feb2:	4293      	cmp	r3, r2
 801feb4:	d901      	bls.n	801feba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801feb6:	2303      	movs	r3, #3
 801feb8:	e0b5      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801feba:	4b3e      	ldr	r3, [pc, #248]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801febc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801febe:	f003 0302 	and.w	r3, r3, #2
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d1ee      	bne.n	801fea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801fec6:	7dfb      	ldrb	r3, [r7, #23]
 801fec8:	2b01      	cmp	r3, #1
 801feca:	d105      	bne.n	801fed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801fecc:	4b39      	ldr	r3, [pc, #228]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fed0:	4a38      	ldr	r2, [pc, #224]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801fed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	699b      	ldr	r3, [r3, #24]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	f000 80a1 	beq.w	8020024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801fee2:	4b34      	ldr	r3, [pc, #208]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801fee4:	689b      	ldr	r3, [r3, #8]
 801fee6:	f003 030c 	and.w	r3, r3, #12
 801feea:	2b08      	cmp	r3, #8
 801feec:	d05c      	beq.n	801ffa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	699b      	ldr	r3, [r3, #24]
 801fef2:	2b02      	cmp	r3, #2
 801fef4:	d141      	bne.n	801ff7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801fef6:	4b31      	ldr	r3, [pc, #196]	; (801ffbc <HAL_RCC_OscConfig+0x478>)
 801fef8:	2200      	movs	r2, #0
 801fefa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fefc:	f7fb faf4 	bl	801b4e8 <HAL_GetTick>
 801ff00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801ff02:	e008      	b.n	801ff16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ff04:	f7fb faf0 	bl	801b4e8 <HAL_GetTick>
 801ff08:	4602      	mov	r2, r0
 801ff0a:	693b      	ldr	r3, [r7, #16]
 801ff0c:	1ad3      	subs	r3, r2, r3
 801ff0e:	2b02      	cmp	r3, #2
 801ff10:	d901      	bls.n	801ff16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801ff12:	2303      	movs	r3, #3
 801ff14:	e087      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801ff16:	4b27      	ldr	r3, [pc, #156]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801ff18:	681b      	ldr	r3, [r3, #0]
 801ff1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d1f0      	bne.n	801ff04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	69da      	ldr	r2, [r3, #28]
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	6a1b      	ldr	r3, [r3, #32]
 801ff2a:	431a      	orrs	r2, r3
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff30:	019b      	lsls	r3, r3, #6
 801ff32:	431a      	orrs	r2, r3
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff38:	085b      	lsrs	r3, r3, #1
 801ff3a:	3b01      	subs	r3, #1
 801ff3c:	041b      	lsls	r3, r3, #16
 801ff3e:	431a      	orrs	r2, r3
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff44:	061b      	lsls	r3, r3, #24
 801ff46:	491b      	ldr	r1, [pc, #108]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801ff48:	4313      	orrs	r3, r2
 801ff4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ff4c:	4b1b      	ldr	r3, [pc, #108]	; (801ffbc <HAL_RCC_OscConfig+0x478>)
 801ff4e:	2201      	movs	r2, #1
 801ff50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ff52:	f7fb fac9 	bl	801b4e8 <HAL_GetTick>
 801ff56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801ff58:	e008      	b.n	801ff6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ff5a:	f7fb fac5 	bl	801b4e8 <HAL_GetTick>
 801ff5e:	4602      	mov	r2, r0
 801ff60:	693b      	ldr	r3, [r7, #16]
 801ff62:	1ad3      	subs	r3, r2, r3
 801ff64:	2b02      	cmp	r3, #2
 801ff66:	d901      	bls.n	801ff6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801ff68:	2303      	movs	r3, #3
 801ff6a:	e05c      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801ff6c:	4b11      	ldr	r3, [pc, #68]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d0f0      	beq.n	801ff5a <HAL_RCC_OscConfig+0x416>
 801ff78:	e054      	b.n	8020024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ff7a:	4b10      	ldr	r3, [pc, #64]	; (801ffbc <HAL_RCC_OscConfig+0x478>)
 801ff7c:	2200      	movs	r2, #0
 801ff7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ff80:	f7fb fab2 	bl	801b4e8 <HAL_GetTick>
 801ff84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801ff86:	e008      	b.n	801ff9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ff88:	f7fb faae 	bl	801b4e8 <HAL_GetTick>
 801ff8c:	4602      	mov	r2, r0
 801ff8e:	693b      	ldr	r3, [r7, #16]
 801ff90:	1ad3      	subs	r3, r2, r3
 801ff92:	2b02      	cmp	r3, #2
 801ff94:	d901      	bls.n	801ff9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801ff96:	2303      	movs	r3, #3
 801ff98:	e045      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801ff9a:	4b06      	ldr	r3, [pc, #24]	; (801ffb4 <HAL_RCC_OscConfig+0x470>)
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d1f0      	bne.n	801ff88 <HAL_RCC_OscConfig+0x444>
 801ffa6:	e03d      	b.n	8020024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	699b      	ldr	r3, [r3, #24]
 801ffac:	2b01      	cmp	r3, #1
 801ffae:	d107      	bne.n	801ffc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801ffb0:	2301      	movs	r3, #1
 801ffb2:	e038      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
 801ffb4:	40023800 	.word	0x40023800
 801ffb8:	40007000 	.word	0x40007000
 801ffbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801ffc0:	4b1b      	ldr	r3, [pc, #108]	; (8020030 <HAL_RCC_OscConfig+0x4ec>)
 801ffc2:	685b      	ldr	r3, [r3, #4]
 801ffc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	699b      	ldr	r3, [r3, #24]
 801ffca:	2b01      	cmp	r3, #1
 801ffcc:	d028      	beq.n	8020020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ffce:	68fb      	ldr	r3, [r7, #12]
 801ffd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801ffd8:	429a      	cmp	r2, r3
 801ffda:	d121      	bne.n	8020020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ffe6:	429a      	cmp	r2, r3
 801ffe8:	d11a      	bne.n	8020020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801ffea:	68fa      	ldr	r2, [r7, #12]
 801ffec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801fff0:	4013      	ands	r3, r2
 801fff2:	687a      	ldr	r2, [r7, #4]
 801fff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801fff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801fff8:	4293      	cmp	r3, r2
 801fffa:	d111      	bne.n	8020020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801fffc:	68fb      	ldr	r3, [r7, #12]
 801fffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020006:	085b      	lsrs	r3, r3, #1
 8020008:	3b01      	subs	r3, #1
 802000a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802000c:	429a      	cmp	r2, r3
 802000e:	d107      	bne.n	8020020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802001a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802001c:	429a      	cmp	r2, r3
 802001e:	d001      	beq.n	8020024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8020020:	2301      	movs	r3, #1
 8020022:	e000      	b.n	8020026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8020024:	2300      	movs	r3, #0
}
 8020026:	4618      	mov	r0, r3
 8020028:	3718      	adds	r7, #24
 802002a:	46bd      	mov	sp, r7
 802002c:	bd80      	pop	{r7, pc}
 802002e:	bf00      	nop
 8020030:	40023800 	.word	0x40023800

08020034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020034:	b580      	push	{r7, lr}
 8020036:	b084      	sub	sp, #16
 8020038:	af00      	add	r7, sp, #0
 802003a:	6078      	str	r0, [r7, #4]
 802003c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	2b00      	cmp	r3, #0
 8020042:	d101      	bne.n	8020048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8020044:	2301      	movs	r3, #1
 8020046:	e0cc      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8020048:	4b68      	ldr	r3, [pc, #416]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	f003 0307 	and.w	r3, r3, #7
 8020050:	683a      	ldr	r2, [r7, #0]
 8020052:	429a      	cmp	r2, r3
 8020054:	d90c      	bls.n	8020070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020056:	4b65      	ldr	r3, [pc, #404]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 8020058:	683a      	ldr	r2, [r7, #0]
 802005a:	b2d2      	uxtb	r2, r2
 802005c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802005e:	4b63      	ldr	r3, [pc, #396]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	f003 0307 	and.w	r3, r3, #7
 8020066:	683a      	ldr	r2, [r7, #0]
 8020068:	429a      	cmp	r2, r3
 802006a:	d001      	beq.n	8020070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802006c:	2301      	movs	r3, #1
 802006e:	e0b8      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	f003 0302 	and.w	r3, r3, #2
 8020078:	2b00      	cmp	r3, #0
 802007a:	d020      	beq.n	80200be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	f003 0304 	and.w	r3, r3, #4
 8020084:	2b00      	cmp	r3, #0
 8020086:	d005      	beq.n	8020094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8020088:	4b59      	ldr	r3, [pc, #356]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 802008a:	689b      	ldr	r3, [r3, #8]
 802008c:	4a58      	ldr	r2, [pc, #352]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 802008e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8020092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	f003 0308 	and.w	r3, r3, #8
 802009c:	2b00      	cmp	r3, #0
 802009e:	d005      	beq.n	80200ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80200a0:	4b53      	ldr	r3, [pc, #332]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200a2:	689b      	ldr	r3, [r3, #8]
 80200a4:	4a52      	ldr	r2, [pc, #328]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80200aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80200ac:	4b50      	ldr	r3, [pc, #320]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200ae:	689b      	ldr	r3, [r3, #8]
 80200b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	689b      	ldr	r3, [r3, #8]
 80200b8:	494d      	ldr	r1, [pc, #308]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200ba:	4313      	orrs	r3, r2
 80200bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	681b      	ldr	r3, [r3, #0]
 80200c2:	f003 0301 	and.w	r3, r3, #1
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d044      	beq.n	8020154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	685b      	ldr	r3, [r3, #4]
 80200ce:	2b01      	cmp	r3, #1
 80200d0:	d107      	bne.n	80200e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80200d2:	4b47      	ldr	r3, [pc, #284]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d119      	bne.n	8020112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80200de:	2301      	movs	r3, #1
 80200e0:	e07f      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	685b      	ldr	r3, [r3, #4]
 80200e6:	2b02      	cmp	r3, #2
 80200e8:	d003      	beq.n	80200f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80200ee:	2b03      	cmp	r3, #3
 80200f0:	d107      	bne.n	8020102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80200f2:	4b3f      	ldr	r3, [pc, #252]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d109      	bne.n	8020112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80200fe:	2301      	movs	r3, #1
 8020100:	e06f      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020102:	4b3b      	ldr	r3, [pc, #236]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	f003 0302 	and.w	r3, r3, #2
 802010a:	2b00      	cmp	r3, #0
 802010c:	d101      	bne.n	8020112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802010e:	2301      	movs	r3, #1
 8020110:	e067      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8020112:	4b37      	ldr	r3, [pc, #220]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 8020114:	689b      	ldr	r3, [r3, #8]
 8020116:	f023 0203 	bic.w	r2, r3, #3
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	685b      	ldr	r3, [r3, #4]
 802011e:	4934      	ldr	r1, [pc, #208]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 8020120:	4313      	orrs	r3, r2
 8020122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8020124:	f7fb f9e0 	bl	801b4e8 <HAL_GetTick>
 8020128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802012a:	e00a      	b.n	8020142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802012c:	f7fb f9dc 	bl	801b4e8 <HAL_GetTick>
 8020130:	4602      	mov	r2, r0
 8020132:	68fb      	ldr	r3, [r7, #12]
 8020134:	1ad3      	subs	r3, r2, r3
 8020136:	f241 3288 	movw	r2, #5000	; 0x1388
 802013a:	4293      	cmp	r3, r2
 802013c:	d901      	bls.n	8020142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802013e:	2303      	movs	r3, #3
 8020140:	e04f      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020142:	4b2b      	ldr	r3, [pc, #172]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 8020144:	689b      	ldr	r3, [r3, #8]
 8020146:	f003 020c 	and.w	r2, r3, #12
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	685b      	ldr	r3, [r3, #4]
 802014e:	009b      	lsls	r3, r3, #2
 8020150:	429a      	cmp	r2, r3
 8020152:	d1eb      	bne.n	802012c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020154:	4b25      	ldr	r3, [pc, #148]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	f003 0307 	and.w	r3, r3, #7
 802015c:	683a      	ldr	r2, [r7, #0]
 802015e:	429a      	cmp	r2, r3
 8020160:	d20c      	bcs.n	802017c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020162:	4b22      	ldr	r3, [pc, #136]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 8020164:	683a      	ldr	r2, [r7, #0]
 8020166:	b2d2      	uxtb	r2, r2
 8020168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802016a:	4b20      	ldr	r3, [pc, #128]	; (80201ec <HAL_RCC_ClockConfig+0x1b8>)
 802016c:	681b      	ldr	r3, [r3, #0]
 802016e:	f003 0307 	and.w	r3, r3, #7
 8020172:	683a      	ldr	r2, [r7, #0]
 8020174:	429a      	cmp	r2, r3
 8020176:	d001      	beq.n	802017c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8020178:	2301      	movs	r3, #1
 802017a:	e032      	b.n	80201e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	f003 0304 	and.w	r3, r3, #4
 8020184:	2b00      	cmp	r3, #0
 8020186:	d008      	beq.n	802019a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8020188:	4b19      	ldr	r3, [pc, #100]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 802018a:	689b      	ldr	r3, [r3, #8]
 802018c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	68db      	ldr	r3, [r3, #12]
 8020194:	4916      	ldr	r1, [pc, #88]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 8020196:	4313      	orrs	r3, r2
 8020198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	f003 0308 	and.w	r3, r3, #8
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d009      	beq.n	80201ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80201a6:	4b12      	ldr	r3, [pc, #72]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80201a8:	689b      	ldr	r3, [r3, #8]
 80201aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	691b      	ldr	r3, [r3, #16]
 80201b2:	00db      	lsls	r3, r3, #3
 80201b4:	490e      	ldr	r1, [pc, #56]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80201b6:	4313      	orrs	r3, r2
 80201b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80201ba:	f000 f821 	bl	8020200 <HAL_RCC_GetSysClockFreq>
 80201be:	4602      	mov	r2, r0
 80201c0:	4b0b      	ldr	r3, [pc, #44]	; (80201f0 <HAL_RCC_ClockConfig+0x1bc>)
 80201c2:	689b      	ldr	r3, [r3, #8]
 80201c4:	091b      	lsrs	r3, r3, #4
 80201c6:	f003 030f 	and.w	r3, r3, #15
 80201ca:	490a      	ldr	r1, [pc, #40]	; (80201f4 <HAL_RCC_ClockConfig+0x1c0>)
 80201cc:	5ccb      	ldrb	r3, [r1, r3]
 80201ce:	fa22 f303 	lsr.w	r3, r2, r3
 80201d2:	4a09      	ldr	r2, [pc, #36]	; (80201f8 <HAL_RCC_ClockConfig+0x1c4>)
 80201d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80201d6:	4b09      	ldr	r3, [pc, #36]	; (80201fc <HAL_RCC_ClockConfig+0x1c8>)
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	4618      	mov	r0, r3
 80201dc:	f7fb f940 	bl	801b460 <HAL_InitTick>

  return HAL_OK;
 80201e0:	2300      	movs	r3, #0
}
 80201e2:	4618      	mov	r0, r3
 80201e4:	3710      	adds	r7, #16
 80201e6:	46bd      	mov	sp, r7
 80201e8:	bd80      	pop	{r7, pc}
 80201ea:	bf00      	nop
 80201ec:	40023c00 	.word	0x40023c00
 80201f0:	40023800 	.word	0x40023800
 80201f4:	080277b4 	.word	0x080277b4
 80201f8:	20000020 	.word	0x20000020
 80201fc:	2000015c 	.word	0x2000015c

08020200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020204:	b094      	sub	sp, #80	; 0x50
 8020206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020208:	2300      	movs	r3, #0
 802020a:	647b      	str	r3, [r7, #68]	; 0x44
 802020c:	2300      	movs	r3, #0
 802020e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020210:	2300      	movs	r3, #0
 8020212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8020214:	2300      	movs	r3, #0
 8020216:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020218:	4b79      	ldr	r3, [pc, #484]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 802021a:	689b      	ldr	r3, [r3, #8]
 802021c:	f003 030c 	and.w	r3, r3, #12
 8020220:	2b08      	cmp	r3, #8
 8020222:	d00d      	beq.n	8020240 <HAL_RCC_GetSysClockFreq+0x40>
 8020224:	2b08      	cmp	r3, #8
 8020226:	f200 80e1 	bhi.w	80203ec <HAL_RCC_GetSysClockFreq+0x1ec>
 802022a:	2b00      	cmp	r3, #0
 802022c:	d002      	beq.n	8020234 <HAL_RCC_GetSysClockFreq+0x34>
 802022e:	2b04      	cmp	r3, #4
 8020230:	d003      	beq.n	802023a <HAL_RCC_GetSysClockFreq+0x3a>
 8020232:	e0db      	b.n	80203ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8020234:	4b73      	ldr	r3, [pc, #460]	; (8020404 <HAL_RCC_GetSysClockFreq+0x204>)
 8020236:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8020238:	e0db      	b.n	80203f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802023a:	4b73      	ldr	r3, [pc, #460]	; (8020408 <HAL_RCC_GetSysClockFreq+0x208>)
 802023c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802023e:	e0d8      	b.n	80203f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020240:	4b6f      	ldr	r3, [pc, #444]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 8020242:	685b      	ldr	r3, [r3, #4]
 8020244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020248:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802024a:	4b6d      	ldr	r3, [pc, #436]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 802024c:	685b      	ldr	r3, [r3, #4]
 802024e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020252:	2b00      	cmp	r3, #0
 8020254:	d063      	beq.n	802031e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020256:	4b6a      	ldr	r3, [pc, #424]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 8020258:	685b      	ldr	r3, [r3, #4]
 802025a:	099b      	lsrs	r3, r3, #6
 802025c:	2200      	movs	r2, #0
 802025e:	63bb      	str	r3, [r7, #56]	; 0x38
 8020260:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020268:	633b      	str	r3, [r7, #48]	; 0x30
 802026a:	2300      	movs	r3, #0
 802026c:	637b      	str	r3, [r7, #52]	; 0x34
 802026e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8020272:	4622      	mov	r2, r4
 8020274:	462b      	mov	r3, r5
 8020276:	f04f 0000 	mov.w	r0, #0
 802027a:	f04f 0100 	mov.w	r1, #0
 802027e:	0159      	lsls	r1, r3, #5
 8020280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020284:	0150      	lsls	r0, r2, #5
 8020286:	4602      	mov	r2, r0
 8020288:	460b      	mov	r3, r1
 802028a:	4621      	mov	r1, r4
 802028c:	1a51      	subs	r1, r2, r1
 802028e:	6139      	str	r1, [r7, #16]
 8020290:	4629      	mov	r1, r5
 8020292:	eb63 0301 	sbc.w	r3, r3, r1
 8020296:	617b      	str	r3, [r7, #20]
 8020298:	f04f 0200 	mov.w	r2, #0
 802029c:	f04f 0300 	mov.w	r3, #0
 80202a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80202a4:	4659      	mov	r1, fp
 80202a6:	018b      	lsls	r3, r1, #6
 80202a8:	4651      	mov	r1, sl
 80202aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80202ae:	4651      	mov	r1, sl
 80202b0:	018a      	lsls	r2, r1, #6
 80202b2:	4651      	mov	r1, sl
 80202b4:	ebb2 0801 	subs.w	r8, r2, r1
 80202b8:	4659      	mov	r1, fp
 80202ba:	eb63 0901 	sbc.w	r9, r3, r1
 80202be:	f04f 0200 	mov.w	r2, #0
 80202c2:	f04f 0300 	mov.w	r3, #0
 80202c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80202ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80202ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80202d2:	4690      	mov	r8, r2
 80202d4:	4699      	mov	r9, r3
 80202d6:	4623      	mov	r3, r4
 80202d8:	eb18 0303 	adds.w	r3, r8, r3
 80202dc:	60bb      	str	r3, [r7, #8]
 80202de:	462b      	mov	r3, r5
 80202e0:	eb49 0303 	adc.w	r3, r9, r3
 80202e4:	60fb      	str	r3, [r7, #12]
 80202e6:	f04f 0200 	mov.w	r2, #0
 80202ea:	f04f 0300 	mov.w	r3, #0
 80202ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80202f2:	4629      	mov	r1, r5
 80202f4:	024b      	lsls	r3, r1, #9
 80202f6:	4621      	mov	r1, r4
 80202f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80202fc:	4621      	mov	r1, r4
 80202fe:	024a      	lsls	r2, r1, #9
 8020300:	4610      	mov	r0, r2
 8020302:	4619      	mov	r1, r3
 8020304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020306:	2200      	movs	r2, #0
 8020308:	62bb      	str	r3, [r7, #40]	; 0x28
 802030a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802030c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020310:	f7e0 fdb6 	bl	8000e80 <__aeabi_uldivmod>
 8020314:	4602      	mov	r2, r0
 8020316:	460b      	mov	r3, r1
 8020318:	4613      	mov	r3, r2
 802031a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802031c:	e058      	b.n	80203d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802031e:	4b38      	ldr	r3, [pc, #224]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 8020320:	685b      	ldr	r3, [r3, #4]
 8020322:	099b      	lsrs	r3, r3, #6
 8020324:	2200      	movs	r2, #0
 8020326:	4618      	mov	r0, r3
 8020328:	4611      	mov	r1, r2
 802032a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802032e:	623b      	str	r3, [r7, #32]
 8020330:	2300      	movs	r3, #0
 8020332:	627b      	str	r3, [r7, #36]	; 0x24
 8020334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8020338:	4642      	mov	r2, r8
 802033a:	464b      	mov	r3, r9
 802033c:	f04f 0000 	mov.w	r0, #0
 8020340:	f04f 0100 	mov.w	r1, #0
 8020344:	0159      	lsls	r1, r3, #5
 8020346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802034a:	0150      	lsls	r0, r2, #5
 802034c:	4602      	mov	r2, r0
 802034e:	460b      	mov	r3, r1
 8020350:	4641      	mov	r1, r8
 8020352:	ebb2 0a01 	subs.w	sl, r2, r1
 8020356:	4649      	mov	r1, r9
 8020358:	eb63 0b01 	sbc.w	fp, r3, r1
 802035c:	f04f 0200 	mov.w	r2, #0
 8020360:	f04f 0300 	mov.w	r3, #0
 8020364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8020368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 802036c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020370:	ebb2 040a 	subs.w	r4, r2, sl
 8020374:	eb63 050b 	sbc.w	r5, r3, fp
 8020378:	f04f 0200 	mov.w	r2, #0
 802037c:	f04f 0300 	mov.w	r3, #0
 8020380:	00eb      	lsls	r3, r5, #3
 8020382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020386:	00e2      	lsls	r2, r4, #3
 8020388:	4614      	mov	r4, r2
 802038a:	461d      	mov	r5, r3
 802038c:	4643      	mov	r3, r8
 802038e:	18e3      	adds	r3, r4, r3
 8020390:	603b      	str	r3, [r7, #0]
 8020392:	464b      	mov	r3, r9
 8020394:	eb45 0303 	adc.w	r3, r5, r3
 8020398:	607b      	str	r3, [r7, #4]
 802039a:	f04f 0200 	mov.w	r2, #0
 802039e:	f04f 0300 	mov.w	r3, #0
 80203a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80203a6:	4629      	mov	r1, r5
 80203a8:	028b      	lsls	r3, r1, #10
 80203aa:	4621      	mov	r1, r4
 80203ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80203b0:	4621      	mov	r1, r4
 80203b2:	028a      	lsls	r2, r1, #10
 80203b4:	4610      	mov	r0, r2
 80203b6:	4619      	mov	r1, r3
 80203b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80203ba:	2200      	movs	r2, #0
 80203bc:	61bb      	str	r3, [r7, #24]
 80203be:	61fa      	str	r2, [r7, #28]
 80203c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80203c4:	f7e0 fd5c 	bl	8000e80 <__aeabi_uldivmod>
 80203c8:	4602      	mov	r2, r0
 80203ca:	460b      	mov	r3, r1
 80203cc:	4613      	mov	r3, r2
 80203ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80203d0:	4b0b      	ldr	r3, [pc, #44]	; (8020400 <HAL_RCC_GetSysClockFreq+0x200>)
 80203d2:	685b      	ldr	r3, [r3, #4]
 80203d4:	0c1b      	lsrs	r3, r3, #16
 80203d6:	f003 0303 	and.w	r3, r3, #3
 80203da:	3301      	adds	r3, #1
 80203dc:	005b      	lsls	r3, r3, #1
 80203de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80203e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80203e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80203e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80203e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80203ea:	e002      	b.n	80203f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80203ec:	4b05      	ldr	r3, [pc, #20]	; (8020404 <HAL_RCC_GetSysClockFreq+0x204>)
 80203ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80203f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80203f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80203f4:	4618      	mov	r0, r3
 80203f6:	3750      	adds	r7, #80	; 0x50
 80203f8:	46bd      	mov	sp, r7
 80203fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80203fe:	bf00      	nop
 8020400:	40023800 	.word	0x40023800
 8020404:	00f42400 	.word	0x00f42400
 8020408:	007a1200 	.word	0x007a1200

0802040c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802040c:	b480      	push	{r7}
 802040e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020410:	4b03      	ldr	r3, [pc, #12]	; (8020420 <HAL_RCC_GetHCLKFreq+0x14>)
 8020412:	681b      	ldr	r3, [r3, #0]
}
 8020414:	4618      	mov	r0, r3
 8020416:	46bd      	mov	sp, r7
 8020418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802041c:	4770      	bx	lr
 802041e:	bf00      	nop
 8020420:	20000020 	.word	0x20000020

08020424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8020424:	b580      	push	{r7, lr}
 8020426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020428:	f7ff fff0 	bl	802040c <HAL_RCC_GetHCLKFreq>
 802042c:	4602      	mov	r2, r0
 802042e:	4b05      	ldr	r3, [pc, #20]	; (8020444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8020430:	689b      	ldr	r3, [r3, #8]
 8020432:	0a9b      	lsrs	r3, r3, #10
 8020434:	f003 0307 	and.w	r3, r3, #7
 8020438:	4903      	ldr	r1, [pc, #12]	; (8020448 <HAL_RCC_GetPCLK1Freq+0x24>)
 802043a:	5ccb      	ldrb	r3, [r1, r3]
 802043c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020440:	4618      	mov	r0, r3
 8020442:	bd80      	pop	{r7, pc}
 8020444:	40023800 	.word	0x40023800
 8020448:	080277c4 	.word	0x080277c4

0802044c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020450:	f7ff ffdc 	bl	802040c <HAL_RCC_GetHCLKFreq>
 8020454:	4602      	mov	r2, r0
 8020456:	4b05      	ldr	r3, [pc, #20]	; (802046c <HAL_RCC_GetPCLK2Freq+0x20>)
 8020458:	689b      	ldr	r3, [r3, #8]
 802045a:	0b5b      	lsrs	r3, r3, #13
 802045c:	f003 0307 	and.w	r3, r3, #7
 8020460:	4903      	ldr	r1, [pc, #12]	; (8020470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020462:	5ccb      	ldrb	r3, [r1, r3]
 8020464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020468:	4618      	mov	r0, r3
 802046a:	bd80      	pop	{r7, pc}
 802046c:	40023800 	.word	0x40023800
 8020470:	080277c4 	.word	0x080277c4

08020474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020474:	b580      	push	{r7, lr}
 8020476:	b082      	sub	sp, #8
 8020478:	af00      	add	r7, sp, #0
 802047a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	2b00      	cmp	r3, #0
 8020480:	d101      	bne.n	8020486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020482:	2301      	movs	r3, #1
 8020484:	e041      	b.n	802050a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802048c:	b2db      	uxtb	r3, r3
 802048e:	2b00      	cmp	r3, #0
 8020490:	d106      	bne.n	80204a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	2200      	movs	r2, #0
 8020496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802049a:	6878      	ldr	r0, [r7, #4]
 802049c:	f7e3 f9c6 	bl	800382c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	2202      	movs	r2, #2
 80204a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	681a      	ldr	r2, [r3, #0]
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	3304      	adds	r3, #4
 80204b0:	4619      	mov	r1, r3
 80204b2:	4610      	mov	r0, r2
 80204b4:	f000 fd14 	bl	8020ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	2201      	movs	r2, #1
 80204bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	2201      	movs	r2, #1
 80204c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	2201      	movs	r2, #1
 80204cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	2201      	movs	r2, #1
 80204d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	2201      	movs	r2, #1
 80204dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	2201      	movs	r2, #1
 80204e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	2201      	movs	r2, #1
 80204ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	2201      	movs	r2, #1
 80204f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	2201      	movs	r2, #1
 80204fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020500:	687b      	ldr	r3, [r7, #4]
 8020502:	2201      	movs	r2, #1
 8020504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020508:	2300      	movs	r3, #0
}
 802050a:	4618      	mov	r0, r3
 802050c:	3708      	adds	r7, #8
 802050e:	46bd      	mov	sp, r7
 8020510:	bd80      	pop	{r7, pc}

08020512 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020512:	b580      	push	{r7, lr}
 8020514:	b082      	sub	sp, #8
 8020516:	af00      	add	r7, sp, #0
 8020518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	2b00      	cmp	r3, #0
 802051e:	d101      	bne.n	8020524 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020520:	2301      	movs	r3, #1
 8020522:	e041      	b.n	80205a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802052a:	b2db      	uxtb	r3, r3
 802052c:	2b00      	cmp	r3, #0
 802052e:	d106      	bne.n	802053e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	2200      	movs	r2, #0
 8020534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8020538:	6878      	ldr	r0, [r7, #4]
 802053a:	f000 f839 	bl	80205b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	2202      	movs	r2, #2
 8020542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020546:	687b      	ldr	r3, [r7, #4]
 8020548:	681a      	ldr	r2, [r3, #0]
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	3304      	adds	r3, #4
 802054e:	4619      	mov	r1, r3
 8020550:	4610      	mov	r0, r2
 8020552:	f000 fcc5 	bl	8020ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	2201      	movs	r2, #1
 802055a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	2201      	movs	r2, #1
 8020562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	2201      	movs	r2, #1
 802056a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	2201      	movs	r2, #1
 8020572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	2201      	movs	r2, #1
 802057a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	2201      	movs	r2, #1
 8020582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	2201      	movs	r2, #1
 802058a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	2201      	movs	r2, #1
 8020592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	2201      	movs	r2, #1
 802059a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	2201      	movs	r2, #1
 80205a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80205a6:	2300      	movs	r3, #0
}
 80205a8:	4618      	mov	r0, r3
 80205aa:	3708      	adds	r7, #8
 80205ac:	46bd      	mov	sp, r7
 80205ae:	bd80      	pop	{r7, pc}

080205b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80205b0:	b480      	push	{r7}
 80205b2:	b083      	sub	sp, #12
 80205b4:	af00      	add	r7, sp, #0
 80205b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80205b8:	bf00      	nop
 80205ba:	370c      	adds	r7, #12
 80205bc:	46bd      	mov	sp, r7
 80205be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205c2:	4770      	bx	lr

080205c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80205c4:	b580      	push	{r7, lr}
 80205c6:	b084      	sub	sp, #16
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	6078      	str	r0, [r7, #4]
 80205cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80205ce:	683b      	ldr	r3, [r7, #0]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d109      	bne.n	80205e8 <HAL_TIM_PWM_Start+0x24>
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80205da:	b2db      	uxtb	r3, r3
 80205dc:	2b01      	cmp	r3, #1
 80205de:	bf14      	ite	ne
 80205e0:	2301      	movne	r3, #1
 80205e2:	2300      	moveq	r3, #0
 80205e4:	b2db      	uxtb	r3, r3
 80205e6:	e022      	b.n	802062e <HAL_TIM_PWM_Start+0x6a>
 80205e8:	683b      	ldr	r3, [r7, #0]
 80205ea:	2b04      	cmp	r3, #4
 80205ec:	d109      	bne.n	8020602 <HAL_TIM_PWM_Start+0x3e>
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80205f4:	b2db      	uxtb	r3, r3
 80205f6:	2b01      	cmp	r3, #1
 80205f8:	bf14      	ite	ne
 80205fa:	2301      	movne	r3, #1
 80205fc:	2300      	moveq	r3, #0
 80205fe:	b2db      	uxtb	r3, r3
 8020600:	e015      	b.n	802062e <HAL_TIM_PWM_Start+0x6a>
 8020602:	683b      	ldr	r3, [r7, #0]
 8020604:	2b08      	cmp	r3, #8
 8020606:	d109      	bne.n	802061c <HAL_TIM_PWM_Start+0x58>
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802060e:	b2db      	uxtb	r3, r3
 8020610:	2b01      	cmp	r3, #1
 8020612:	bf14      	ite	ne
 8020614:	2301      	movne	r3, #1
 8020616:	2300      	moveq	r3, #0
 8020618:	b2db      	uxtb	r3, r3
 802061a:	e008      	b.n	802062e <HAL_TIM_PWM_Start+0x6a>
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020622:	b2db      	uxtb	r3, r3
 8020624:	2b01      	cmp	r3, #1
 8020626:	bf14      	ite	ne
 8020628:	2301      	movne	r3, #1
 802062a:	2300      	moveq	r3, #0
 802062c:	b2db      	uxtb	r3, r3
 802062e:	2b00      	cmp	r3, #0
 8020630:	d001      	beq.n	8020636 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8020632:	2301      	movs	r3, #1
 8020634:	e068      	b.n	8020708 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020636:	683b      	ldr	r3, [r7, #0]
 8020638:	2b00      	cmp	r3, #0
 802063a:	d104      	bne.n	8020646 <HAL_TIM_PWM_Start+0x82>
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	2202      	movs	r2, #2
 8020640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020644:	e013      	b.n	802066e <HAL_TIM_PWM_Start+0xaa>
 8020646:	683b      	ldr	r3, [r7, #0]
 8020648:	2b04      	cmp	r3, #4
 802064a:	d104      	bne.n	8020656 <HAL_TIM_PWM_Start+0x92>
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	2202      	movs	r2, #2
 8020650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020654:	e00b      	b.n	802066e <HAL_TIM_PWM_Start+0xaa>
 8020656:	683b      	ldr	r3, [r7, #0]
 8020658:	2b08      	cmp	r3, #8
 802065a:	d104      	bne.n	8020666 <HAL_TIM_PWM_Start+0xa2>
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	2202      	movs	r2, #2
 8020660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020664:	e003      	b.n	802066e <HAL_TIM_PWM_Start+0xaa>
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	2202      	movs	r2, #2
 802066a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	2201      	movs	r2, #1
 8020674:	6839      	ldr	r1, [r7, #0]
 8020676:	4618      	mov	r0, r3
 8020678:	f000 fed8 	bl	802142c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	4a23      	ldr	r2, [pc, #140]	; (8020710 <HAL_TIM_PWM_Start+0x14c>)
 8020682:	4293      	cmp	r3, r2
 8020684:	d107      	bne.n	8020696 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	4a1d      	ldr	r2, [pc, #116]	; (8020710 <HAL_TIM_PWM_Start+0x14c>)
 802069c:	4293      	cmp	r3, r2
 802069e:	d018      	beq.n	80206d2 <HAL_TIM_PWM_Start+0x10e>
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80206a8:	d013      	beq.n	80206d2 <HAL_TIM_PWM_Start+0x10e>
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	4a19      	ldr	r2, [pc, #100]	; (8020714 <HAL_TIM_PWM_Start+0x150>)
 80206b0:	4293      	cmp	r3, r2
 80206b2:	d00e      	beq.n	80206d2 <HAL_TIM_PWM_Start+0x10e>
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	4a17      	ldr	r2, [pc, #92]	; (8020718 <HAL_TIM_PWM_Start+0x154>)
 80206ba:	4293      	cmp	r3, r2
 80206bc:	d009      	beq.n	80206d2 <HAL_TIM_PWM_Start+0x10e>
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	681b      	ldr	r3, [r3, #0]
 80206c2:	4a16      	ldr	r2, [pc, #88]	; (802071c <HAL_TIM_PWM_Start+0x158>)
 80206c4:	4293      	cmp	r3, r2
 80206c6:	d004      	beq.n	80206d2 <HAL_TIM_PWM_Start+0x10e>
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	4a14      	ldr	r2, [pc, #80]	; (8020720 <HAL_TIM_PWM_Start+0x15c>)
 80206ce:	4293      	cmp	r3, r2
 80206d0:	d111      	bne.n	80206f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	689b      	ldr	r3, [r3, #8]
 80206d8:	f003 0307 	and.w	r3, r3, #7
 80206dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	2b06      	cmp	r3, #6
 80206e2:	d010      	beq.n	8020706 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	681a      	ldr	r2, [r3, #0]
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	f042 0201 	orr.w	r2, r2, #1
 80206f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80206f4:	e007      	b.n	8020706 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	681a      	ldr	r2, [r3, #0]
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f042 0201 	orr.w	r2, r2, #1
 8020704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8020706:	2300      	movs	r3, #0
}
 8020708:	4618      	mov	r0, r3
 802070a:	3710      	adds	r7, #16
 802070c:	46bd      	mov	sp, r7
 802070e:	bd80      	pop	{r7, pc}
 8020710:	40010000 	.word	0x40010000
 8020714:	40000400 	.word	0x40000400
 8020718:	40000800 	.word	0x40000800
 802071c:	40000c00 	.word	0x40000c00
 8020720:	40014000 	.word	0x40014000

08020724 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020724:	b580      	push	{r7, lr}
 8020726:	b084      	sub	sp, #16
 8020728:	af00      	add	r7, sp, #0
 802072a:	6078      	str	r0, [r7, #4]
 802072c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802072e:	2300      	movs	r3, #0
 8020730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	2b00      	cmp	r3, #0
 8020736:	d104      	bne.n	8020742 <HAL_TIM_IC_Start_IT+0x1e>
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802073e:	b2db      	uxtb	r3, r3
 8020740:	e013      	b.n	802076a <HAL_TIM_IC_Start_IT+0x46>
 8020742:	683b      	ldr	r3, [r7, #0]
 8020744:	2b04      	cmp	r3, #4
 8020746:	d104      	bne.n	8020752 <HAL_TIM_IC_Start_IT+0x2e>
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802074e:	b2db      	uxtb	r3, r3
 8020750:	e00b      	b.n	802076a <HAL_TIM_IC_Start_IT+0x46>
 8020752:	683b      	ldr	r3, [r7, #0]
 8020754:	2b08      	cmp	r3, #8
 8020756:	d104      	bne.n	8020762 <HAL_TIM_IC_Start_IT+0x3e>
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802075e:	b2db      	uxtb	r3, r3
 8020760:	e003      	b.n	802076a <HAL_TIM_IC_Start_IT+0x46>
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020768:	b2db      	uxtb	r3, r3
 802076a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 802076c:	683b      	ldr	r3, [r7, #0]
 802076e:	2b00      	cmp	r3, #0
 8020770:	d104      	bne.n	802077c <HAL_TIM_IC_Start_IT+0x58>
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020778:	b2db      	uxtb	r3, r3
 802077a:	e013      	b.n	80207a4 <HAL_TIM_IC_Start_IT+0x80>
 802077c:	683b      	ldr	r3, [r7, #0]
 802077e:	2b04      	cmp	r3, #4
 8020780:	d104      	bne.n	802078c <HAL_TIM_IC_Start_IT+0x68>
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8020788:	b2db      	uxtb	r3, r3
 802078a:	e00b      	b.n	80207a4 <HAL_TIM_IC_Start_IT+0x80>
 802078c:	683b      	ldr	r3, [r7, #0]
 802078e:	2b08      	cmp	r3, #8
 8020790:	d104      	bne.n	802079c <HAL_TIM_IC_Start_IT+0x78>
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020798:	b2db      	uxtb	r3, r3
 802079a:	e003      	b.n	80207a4 <HAL_TIM_IC_Start_IT+0x80>
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80207a2:	b2db      	uxtb	r3, r3
 80207a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80207a6:	7bbb      	ldrb	r3, [r7, #14]
 80207a8:	2b01      	cmp	r3, #1
 80207aa:	d102      	bne.n	80207b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80207ac:	7b7b      	ldrb	r3, [r7, #13]
 80207ae:	2b01      	cmp	r3, #1
 80207b0:	d001      	beq.n	80207b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80207b2:	2301      	movs	r3, #1
 80207b4:	e0c2      	b.n	802093c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d104      	bne.n	80207c6 <HAL_TIM_IC_Start_IT+0xa2>
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	2202      	movs	r2, #2
 80207c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80207c4:	e013      	b.n	80207ee <HAL_TIM_IC_Start_IT+0xca>
 80207c6:	683b      	ldr	r3, [r7, #0]
 80207c8:	2b04      	cmp	r3, #4
 80207ca:	d104      	bne.n	80207d6 <HAL_TIM_IC_Start_IT+0xb2>
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	2202      	movs	r2, #2
 80207d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80207d4:	e00b      	b.n	80207ee <HAL_TIM_IC_Start_IT+0xca>
 80207d6:	683b      	ldr	r3, [r7, #0]
 80207d8:	2b08      	cmp	r3, #8
 80207da:	d104      	bne.n	80207e6 <HAL_TIM_IC_Start_IT+0xc2>
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	2202      	movs	r2, #2
 80207e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80207e4:	e003      	b.n	80207ee <HAL_TIM_IC_Start_IT+0xca>
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	2202      	movs	r2, #2
 80207ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80207ee:	683b      	ldr	r3, [r7, #0]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d104      	bne.n	80207fe <HAL_TIM_IC_Start_IT+0xda>
 80207f4:	687b      	ldr	r3, [r7, #4]
 80207f6:	2202      	movs	r2, #2
 80207f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80207fc:	e013      	b.n	8020826 <HAL_TIM_IC_Start_IT+0x102>
 80207fe:	683b      	ldr	r3, [r7, #0]
 8020800:	2b04      	cmp	r3, #4
 8020802:	d104      	bne.n	802080e <HAL_TIM_IC_Start_IT+0xea>
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	2202      	movs	r2, #2
 8020808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802080c:	e00b      	b.n	8020826 <HAL_TIM_IC_Start_IT+0x102>
 802080e:	683b      	ldr	r3, [r7, #0]
 8020810:	2b08      	cmp	r3, #8
 8020812:	d104      	bne.n	802081e <HAL_TIM_IC_Start_IT+0xfa>
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	2202      	movs	r2, #2
 8020818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802081c:	e003      	b.n	8020826 <HAL_TIM_IC_Start_IT+0x102>
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	2202      	movs	r2, #2
 8020822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8020826:	683b      	ldr	r3, [r7, #0]
 8020828:	2b0c      	cmp	r3, #12
 802082a:	d841      	bhi.n	80208b0 <HAL_TIM_IC_Start_IT+0x18c>
 802082c:	a201      	add	r2, pc, #4	; (adr r2, 8020834 <HAL_TIM_IC_Start_IT+0x110>)
 802082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020832:	bf00      	nop
 8020834:	08020869 	.word	0x08020869
 8020838:	080208b1 	.word	0x080208b1
 802083c:	080208b1 	.word	0x080208b1
 8020840:	080208b1 	.word	0x080208b1
 8020844:	0802087b 	.word	0x0802087b
 8020848:	080208b1 	.word	0x080208b1
 802084c:	080208b1 	.word	0x080208b1
 8020850:	080208b1 	.word	0x080208b1
 8020854:	0802088d 	.word	0x0802088d
 8020858:	080208b1 	.word	0x080208b1
 802085c:	080208b1 	.word	0x080208b1
 8020860:	080208b1 	.word	0x080208b1
 8020864:	0802089f 	.word	0x0802089f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	68da      	ldr	r2, [r3, #12]
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	681b      	ldr	r3, [r3, #0]
 8020872:	f042 0202 	orr.w	r2, r2, #2
 8020876:	60da      	str	r2, [r3, #12]
      break;
 8020878:	e01d      	b.n	80208b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	68da      	ldr	r2, [r3, #12]
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	f042 0204 	orr.w	r2, r2, #4
 8020888:	60da      	str	r2, [r3, #12]
      break;
 802088a:	e014      	b.n	80208b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	681b      	ldr	r3, [r3, #0]
 8020890:	68da      	ldr	r2, [r3, #12]
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	f042 0208 	orr.w	r2, r2, #8
 802089a:	60da      	str	r2, [r3, #12]
      break;
 802089c:	e00b      	b.n	80208b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 802089e:	687b      	ldr	r3, [r7, #4]
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	68da      	ldr	r2, [r3, #12]
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	f042 0210 	orr.w	r2, r2, #16
 80208ac:	60da      	str	r2, [r3, #12]
      break;
 80208ae:	e002      	b.n	80208b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80208b0:	2301      	movs	r3, #1
 80208b2:	73fb      	strb	r3, [r7, #15]
      break;
 80208b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80208b6:	7bfb      	ldrb	r3, [r7, #15]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d13e      	bne.n	802093a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	2201      	movs	r2, #1
 80208c2:	6839      	ldr	r1, [r7, #0]
 80208c4:	4618      	mov	r0, r3
 80208c6:	f000 fdb1 	bl	802142c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	4a1d      	ldr	r2, [pc, #116]	; (8020944 <HAL_TIM_IC_Start_IT+0x220>)
 80208d0:	4293      	cmp	r3, r2
 80208d2:	d018      	beq.n	8020906 <HAL_TIM_IC_Start_IT+0x1e2>
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	681b      	ldr	r3, [r3, #0]
 80208d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80208dc:	d013      	beq.n	8020906 <HAL_TIM_IC_Start_IT+0x1e2>
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	4a19      	ldr	r2, [pc, #100]	; (8020948 <HAL_TIM_IC_Start_IT+0x224>)
 80208e4:	4293      	cmp	r3, r2
 80208e6:	d00e      	beq.n	8020906 <HAL_TIM_IC_Start_IT+0x1e2>
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	4a17      	ldr	r2, [pc, #92]	; (802094c <HAL_TIM_IC_Start_IT+0x228>)
 80208ee:	4293      	cmp	r3, r2
 80208f0:	d009      	beq.n	8020906 <HAL_TIM_IC_Start_IT+0x1e2>
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	4a16      	ldr	r2, [pc, #88]	; (8020950 <HAL_TIM_IC_Start_IT+0x22c>)
 80208f8:	4293      	cmp	r3, r2
 80208fa:	d004      	beq.n	8020906 <HAL_TIM_IC_Start_IT+0x1e2>
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	4a14      	ldr	r2, [pc, #80]	; (8020954 <HAL_TIM_IC_Start_IT+0x230>)
 8020902:	4293      	cmp	r3, r2
 8020904:	d111      	bne.n	802092a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	689b      	ldr	r3, [r3, #8]
 802090c:	f003 0307 	and.w	r3, r3, #7
 8020910:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020912:	68bb      	ldr	r3, [r7, #8]
 8020914:	2b06      	cmp	r3, #6
 8020916:	d010      	beq.n	802093a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	681a      	ldr	r2, [r3, #0]
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	f042 0201 	orr.w	r2, r2, #1
 8020926:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020928:	e007      	b.n	802093a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	681a      	ldr	r2, [r3, #0]
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	f042 0201 	orr.w	r2, r2, #1
 8020938:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 802093a:	7bfb      	ldrb	r3, [r7, #15]
}
 802093c:	4618      	mov	r0, r3
 802093e:	3710      	adds	r7, #16
 8020940:	46bd      	mov	sp, r7
 8020942:	bd80      	pop	{r7, pc}
 8020944:	40010000 	.word	0x40010000
 8020948:	40000400 	.word	0x40000400
 802094c:	40000800 	.word	0x40000800
 8020950:	40000c00 	.word	0x40000c00
 8020954:	40014000 	.word	0x40014000

08020958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8020958:	b580      	push	{r7, lr}
 802095a:	b082      	sub	sp, #8
 802095c:	af00      	add	r7, sp, #0
 802095e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	691b      	ldr	r3, [r3, #16]
 8020966:	f003 0302 	and.w	r3, r3, #2
 802096a:	2b02      	cmp	r3, #2
 802096c:	d122      	bne.n	80209b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	68db      	ldr	r3, [r3, #12]
 8020974:	f003 0302 	and.w	r3, r3, #2
 8020978:	2b02      	cmp	r3, #2
 802097a:	d11b      	bne.n	80209b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	f06f 0202 	mvn.w	r2, #2
 8020984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	2201      	movs	r2, #1
 802098a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	699b      	ldr	r3, [r3, #24]
 8020992:	f003 0303 	and.w	r3, r3, #3
 8020996:	2b00      	cmp	r3, #0
 8020998:	d003      	beq.n	80209a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802099a:	6878      	ldr	r0, [r7, #4]
 802099c:	f000 fa81 	bl	8020ea2 <HAL_TIM_IC_CaptureCallback>
 80209a0:	e005      	b.n	80209ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80209a2:	6878      	ldr	r0, [r7, #4]
 80209a4:	f000 fa73 	bl	8020e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80209a8:	6878      	ldr	r0, [r7, #4]
 80209aa:	f000 fa84 	bl	8020eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	2200      	movs	r2, #0
 80209b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	691b      	ldr	r3, [r3, #16]
 80209ba:	f003 0304 	and.w	r3, r3, #4
 80209be:	2b04      	cmp	r3, #4
 80209c0:	d122      	bne.n	8020a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	68db      	ldr	r3, [r3, #12]
 80209c8:	f003 0304 	and.w	r3, r3, #4
 80209cc:	2b04      	cmp	r3, #4
 80209ce:	d11b      	bne.n	8020a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	f06f 0204 	mvn.w	r2, #4
 80209d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	2202      	movs	r2, #2
 80209de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	699b      	ldr	r3, [r3, #24]
 80209e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d003      	beq.n	80209f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80209ee:	6878      	ldr	r0, [r7, #4]
 80209f0:	f000 fa57 	bl	8020ea2 <HAL_TIM_IC_CaptureCallback>
 80209f4:	e005      	b.n	8020a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80209f6:	6878      	ldr	r0, [r7, #4]
 80209f8:	f000 fa49 	bl	8020e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80209fc:	6878      	ldr	r0, [r7, #4]
 80209fe:	f000 fa5a 	bl	8020eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	2200      	movs	r2, #0
 8020a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	691b      	ldr	r3, [r3, #16]
 8020a0e:	f003 0308 	and.w	r3, r3, #8
 8020a12:	2b08      	cmp	r3, #8
 8020a14:	d122      	bne.n	8020a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	68db      	ldr	r3, [r3, #12]
 8020a1c:	f003 0308 	and.w	r3, r3, #8
 8020a20:	2b08      	cmp	r3, #8
 8020a22:	d11b      	bne.n	8020a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	f06f 0208 	mvn.w	r2, #8
 8020a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	2204      	movs	r2, #4
 8020a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	69db      	ldr	r3, [r3, #28]
 8020a3a:	f003 0303 	and.w	r3, r3, #3
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d003      	beq.n	8020a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020a42:	6878      	ldr	r0, [r7, #4]
 8020a44:	f000 fa2d 	bl	8020ea2 <HAL_TIM_IC_CaptureCallback>
 8020a48:	e005      	b.n	8020a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020a4a:	6878      	ldr	r0, [r7, #4]
 8020a4c:	f000 fa1f 	bl	8020e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020a50:	6878      	ldr	r0, [r7, #4]
 8020a52:	f000 fa30 	bl	8020eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	2200      	movs	r2, #0
 8020a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	691b      	ldr	r3, [r3, #16]
 8020a62:	f003 0310 	and.w	r3, r3, #16
 8020a66:	2b10      	cmp	r3, #16
 8020a68:	d122      	bne.n	8020ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	681b      	ldr	r3, [r3, #0]
 8020a6e:	68db      	ldr	r3, [r3, #12]
 8020a70:	f003 0310 	and.w	r3, r3, #16
 8020a74:	2b10      	cmp	r3, #16
 8020a76:	d11b      	bne.n	8020ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8020a78:	687b      	ldr	r3, [r7, #4]
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	f06f 0210 	mvn.w	r2, #16
 8020a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	2208      	movs	r2, #8
 8020a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	69db      	ldr	r3, [r3, #28]
 8020a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d003      	beq.n	8020a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020a96:	6878      	ldr	r0, [r7, #4]
 8020a98:	f000 fa03 	bl	8020ea2 <HAL_TIM_IC_CaptureCallback>
 8020a9c:	e005      	b.n	8020aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020a9e:	6878      	ldr	r0, [r7, #4]
 8020aa0:	f000 f9f5 	bl	8020e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020aa4:	6878      	ldr	r0, [r7, #4]
 8020aa6:	f000 fa06 	bl	8020eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	2200      	movs	r2, #0
 8020aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	691b      	ldr	r3, [r3, #16]
 8020ab6:	f003 0301 	and.w	r3, r3, #1
 8020aba:	2b01      	cmp	r3, #1
 8020abc:	d10e      	bne.n	8020adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	68db      	ldr	r3, [r3, #12]
 8020ac4:	f003 0301 	and.w	r3, r3, #1
 8020ac8:	2b01      	cmp	r3, #1
 8020aca:	d107      	bne.n	8020adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	f06f 0201 	mvn.w	r2, #1
 8020ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8020ad6:	6878      	ldr	r0, [r7, #4]
 8020ad8:	f000 f9cf 	bl	8020e7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	691b      	ldr	r3, [r3, #16]
 8020ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020ae6:	2b80      	cmp	r3, #128	; 0x80
 8020ae8:	d10e      	bne.n	8020b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	681b      	ldr	r3, [r3, #0]
 8020aee:	68db      	ldr	r3, [r3, #12]
 8020af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020af4:	2b80      	cmp	r3, #128	; 0x80
 8020af6:	d107      	bne.n	8020b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8020b02:	6878      	ldr	r0, [r7, #4]
 8020b04:	f000 fd30 	bl	8021568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	691b      	ldr	r3, [r3, #16]
 8020b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020b12:	2b40      	cmp	r3, #64	; 0x40
 8020b14:	d10e      	bne.n	8020b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	68db      	ldr	r3, [r3, #12]
 8020b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020b20:	2b40      	cmp	r3, #64	; 0x40
 8020b22:	d107      	bne.n	8020b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8020b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020b2e:	6878      	ldr	r0, [r7, #4]
 8020b30:	f000 f9cb 	bl	8020eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	691b      	ldr	r3, [r3, #16]
 8020b3a:	f003 0320 	and.w	r3, r3, #32
 8020b3e:	2b20      	cmp	r3, #32
 8020b40:	d10e      	bne.n	8020b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	681b      	ldr	r3, [r3, #0]
 8020b46:	68db      	ldr	r3, [r3, #12]
 8020b48:	f003 0320 	and.w	r3, r3, #32
 8020b4c:	2b20      	cmp	r3, #32
 8020b4e:	d107      	bne.n	8020b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	f06f 0220 	mvn.w	r2, #32
 8020b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8020b5a:	6878      	ldr	r0, [r7, #4]
 8020b5c:	f000 fcfa 	bl	8021554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020b60:	bf00      	nop
 8020b62:	3708      	adds	r7, #8
 8020b64:	46bd      	mov	sp, r7
 8020b66:	bd80      	pop	{r7, pc}

08020b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8020b68:	b580      	push	{r7, lr}
 8020b6a:	b086      	sub	sp, #24
 8020b6c:	af00      	add	r7, sp, #0
 8020b6e:	60f8      	str	r0, [r7, #12]
 8020b70:	60b9      	str	r1, [r7, #8]
 8020b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020b74:	2300      	movs	r3, #0
 8020b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020b78:	68fb      	ldr	r3, [r7, #12]
 8020b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020b7e:	2b01      	cmp	r3, #1
 8020b80:	d101      	bne.n	8020b86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020b82:	2302      	movs	r3, #2
 8020b84:	e0ae      	b.n	8020ce4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8020b86:	68fb      	ldr	r3, [r7, #12]
 8020b88:	2201      	movs	r2, #1
 8020b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	2b0c      	cmp	r3, #12
 8020b92:	f200 809f 	bhi.w	8020cd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8020b96:	a201      	add	r2, pc, #4	; (adr r2, 8020b9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8020b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b9c:	08020bd1 	.word	0x08020bd1
 8020ba0:	08020cd5 	.word	0x08020cd5
 8020ba4:	08020cd5 	.word	0x08020cd5
 8020ba8:	08020cd5 	.word	0x08020cd5
 8020bac:	08020c11 	.word	0x08020c11
 8020bb0:	08020cd5 	.word	0x08020cd5
 8020bb4:	08020cd5 	.word	0x08020cd5
 8020bb8:	08020cd5 	.word	0x08020cd5
 8020bbc:	08020c53 	.word	0x08020c53
 8020bc0:	08020cd5 	.word	0x08020cd5
 8020bc4:	08020cd5 	.word	0x08020cd5
 8020bc8:	08020cd5 	.word	0x08020cd5
 8020bcc:	08020c93 	.word	0x08020c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020bd0:	68fb      	ldr	r3, [r7, #12]
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	68b9      	ldr	r1, [r7, #8]
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f000 fa02 	bl	8020fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	699a      	ldr	r2, [r3, #24]
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	f042 0208 	orr.w	r2, r2, #8
 8020bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	699a      	ldr	r2, [r3, #24]
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	f022 0204 	bic.w	r2, r2, #4
 8020bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020bfc:	68fb      	ldr	r3, [r7, #12]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	6999      	ldr	r1, [r3, #24]
 8020c02:	68bb      	ldr	r3, [r7, #8]
 8020c04:	691a      	ldr	r2, [r3, #16]
 8020c06:	68fb      	ldr	r3, [r7, #12]
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	430a      	orrs	r2, r1
 8020c0c:	619a      	str	r2, [r3, #24]
      break;
 8020c0e:	e064      	b.n	8020cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020c10:	68fb      	ldr	r3, [r7, #12]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	68b9      	ldr	r1, [r7, #8]
 8020c16:	4618      	mov	r0, r3
 8020c18:	f000 fa48 	bl	80210ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020c1c:	68fb      	ldr	r3, [r7, #12]
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	699a      	ldr	r2, [r3, #24]
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020c2c:	68fb      	ldr	r3, [r7, #12]
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	699a      	ldr	r2, [r3, #24]
 8020c32:	68fb      	ldr	r3, [r7, #12]
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	6999      	ldr	r1, [r3, #24]
 8020c42:	68bb      	ldr	r3, [r7, #8]
 8020c44:	691b      	ldr	r3, [r3, #16]
 8020c46:	021a      	lsls	r2, r3, #8
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	430a      	orrs	r2, r1
 8020c4e:	619a      	str	r2, [r3, #24]
      break;
 8020c50:	e043      	b.n	8020cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	68b9      	ldr	r1, [r7, #8]
 8020c58:	4618      	mov	r0, r3
 8020c5a:	f000 fa93 	bl	8021184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020c5e:	68fb      	ldr	r3, [r7, #12]
 8020c60:	681b      	ldr	r3, [r3, #0]
 8020c62:	69da      	ldr	r2, [r3, #28]
 8020c64:	68fb      	ldr	r3, [r7, #12]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	f042 0208 	orr.w	r2, r2, #8
 8020c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	69da      	ldr	r2, [r3, #28]
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	f022 0204 	bic.w	r2, r2, #4
 8020c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020c7e:	68fb      	ldr	r3, [r7, #12]
 8020c80:	681b      	ldr	r3, [r3, #0]
 8020c82:	69d9      	ldr	r1, [r3, #28]
 8020c84:	68bb      	ldr	r3, [r7, #8]
 8020c86:	691a      	ldr	r2, [r3, #16]
 8020c88:	68fb      	ldr	r3, [r7, #12]
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	430a      	orrs	r2, r1
 8020c8e:	61da      	str	r2, [r3, #28]
      break;
 8020c90:	e023      	b.n	8020cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	68b9      	ldr	r1, [r7, #8]
 8020c98:	4618      	mov	r0, r3
 8020c9a:	f000 fadd 	bl	8021258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020c9e:	68fb      	ldr	r3, [r7, #12]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	69da      	ldr	r2, [r3, #28]
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020cae:	68fb      	ldr	r3, [r7, #12]
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	69da      	ldr	r2, [r3, #28]
 8020cb4:	68fb      	ldr	r3, [r7, #12]
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020cbe:	68fb      	ldr	r3, [r7, #12]
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	69d9      	ldr	r1, [r3, #28]
 8020cc4:	68bb      	ldr	r3, [r7, #8]
 8020cc6:	691b      	ldr	r3, [r3, #16]
 8020cc8:	021a      	lsls	r2, r3, #8
 8020cca:	68fb      	ldr	r3, [r7, #12]
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	430a      	orrs	r2, r1
 8020cd0:	61da      	str	r2, [r3, #28]
      break;
 8020cd2:	e002      	b.n	8020cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8020cd4:	2301      	movs	r3, #1
 8020cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8020cd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	2200      	movs	r2, #0
 8020cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8020ce4:	4618      	mov	r0, r3
 8020ce6:	3718      	adds	r7, #24
 8020ce8:	46bd      	mov	sp, r7
 8020cea:	bd80      	pop	{r7, pc}

08020cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020cec:	b580      	push	{r7, lr}
 8020cee:	b084      	sub	sp, #16
 8020cf0:	af00      	add	r7, sp, #0
 8020cf2:	6078      	str	r0, [r7, #4]
 8020cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020cf6:	2300      	movs	r3, #0
 8020cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020d00:	2b01      	cmp	r3, #1
 8020d02:	d101      	bne.n	8020d08 <HAL_TIM_ConfigClockSource+0x1c>
 8020d04:	2302      	movs	r3, #2
 8020d06:	e0b4      	b.n	8020e72 <HAL_TIM_ConfigClockSource+0x186>
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	2201      	movs	r2, #1
 8020d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	2202      	movs	r2, #2
 8020d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	689b      	ldr	r3, [r3, #8]
 8020d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020d20:	68bb      	ldr	r3, [r7, #8]
 8020d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8020d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020d28:	68bb      	ldr	r3, [r7, #8]
 8020d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	681b      	ldr	r3, [r3, #0]
 8020d34:	68ba      	ldr	r2, [r7, #8]
 8020d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020d38:	683b      	ldr	r3, [r7, #0]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020d40:	d03e      	beq.n	8020dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8020d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020d46:	f200 8087 	bhi.w	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020d4e:	f000 8086 	beq.w	8020e5e <HAL_TIM_ConfigClockSource+0x172>
 8020d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020d56:	d87f      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d58:	2b70      	cmp	r3, #112	; 0x70
 8020d5a:	d01a      	beq.n	8020d92 <HAL_TIM_ConfigClockSource+0xa6>
 8020d5c:	2b70      	cmp	r3, #112	; 0x70
 8020d5e:	d87b      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d60:	2b60      	cmp	r3, #96	; 0x60
 8020d62:	d050      	beq.n	8020e06 <HAL_TIM_ConfigClockSource+0x11a>
 8020d64:	2b60      	cmp	r3, #96	; 0x60
 8020d66:	d877      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d68:	2b50      	cmp	r3, #80	; 0x50
 8020d6a:	d03c      	beq.n	8020de6 <HAL_TIM_ConfigClockSource+0xfa>
 8020d6c:	2b50      	cmp	r3, #80	; 0x50
 8020d6e:	d873      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d70:	2b40      	cmp	r3, #64	; 0x40
 8020d72:	d058      	beq.n	8020e26 <HAL_TIM_ConfigClockSource+0x13a>
 8020d74:	2b40      	cmp	r3, #64	; 0x40
 8020d76:	d86f      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d78:	2b30      	cmp	r3, #48	; 0x30
 8020d7a:	d064      	beq.n	8020e46 <HAL_TIM_ConfigClockSource+0x15a>
 8020d7c:	2b30      	cmp	r3, #48	; 0x30
 8020d7e:	d86b      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d80:	2b20      	cmp	r3, #32
 8020d82:	d060      	beq.n	8020e46 <HAL_TIM_ConfigClockSource+0x15a>
 8020d84:	2b20      	cmp	r3, #32
 8020d86:	d867      	bhi.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d05c      	beq.n	8020e46 <HAL_TIM_ConfigClockSource+0x15a>
 8020d8c:	2b10      	cmp	r3, #16
 8020d8e:	d05a      	beq.n	8020e46 <HAL_TIM_ConfigClockSource+0x15a>
 8020d90:	e062      	b.n	8020e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	6818      	ldr	r0, [r3, #0]
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	6899      	ldr	r1, [r3, #8]
 8020d9a:	683b      	ldr	r3, [r7, #0]
 8020d9c:	685a      	ldr	r2, [r3, #4]
 8020d9e:	683b      	ldr	r3, [r7, #0]
 8020da0:	68db      	ldr	r3, [r3, #12]
 8020da2:	f000 fb23 	bl	80213ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	689b      	ldr	r3, [r3, #8]
 8020dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020dae:	68bb      	ldr	r3, [r7, #8]
 8020db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	68ba      	ldr	r2, [r7, #8]
 8020dbc:	609a      	str	r2, [r3, #8]
      break;
 8020dbe:	e04f      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	6818      	ldr	r0, [r3, #0]
 8020dc4:	683b      	ldr	r3, [r7, #0]
 8020dc6:	6899      	ldr	r1, [r3, #8]
 8020dc8:	683b      	ldr	r3, [r7, #0]
 8020dca:	685a      	ldr	r2, [r3, #4]
 8020dcc:	683b      	ldr	r3, [r7, #0]
 8020dce:	68db      	ldr	r3, [r3, #12]
 8020dd0:	f000 fb0c 	bl	80213ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	689a      	ldr	r2, [r3, #8]
 8020dda:	687b      	ldr	r3, [r7, #4]
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020de2:	609a      	str	r2, [r3, #8]
      break;
 8020de4:	e03c      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	6818      	ldr	r0, [r3, #0]
 8020dea:	683b      	ldr	r3, [r7, #0]
 8020dec:	6859      	ldr	r1, [r3, #4]
 8020dee:	683b      	ldr	r3, [r7, #0]
 8020df0:	68db      	ldr	r3, [r3, #12]
 8020df2:	461a      	mov	r2, r3
 8020df4:	f000 fa80 	bl	80212f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	2150      	movs	r1, #80	; 0x50
 8020dfe:	4618      	mov	r0, r3
 8020e00:	f000 fad9 	bl	80213b6 <TIM_ITRx_SetConfig>
      break;
 8020e04:	e02c      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	6818      	ldr	r0, [r3, #0]
 8020e0a:	683b      	ldr	r3, [r7, #0]
 8020e0c:	6859      	ldr	r1, [r3, #4]
 8020e0e:	683b      	ldr	r3, [r7, #0]
 8020e10:	68db      	ldr	r3, [r3, #12]
 8020e12:	461a      	mov	r2, r3
 8020e14:	f000 fa9f 	bl	8021356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	2160      	movs	r1, #96	; 0x60
 8020e1e:	4618      	mov	r0, r3
 8020e20:	f000 fac9 	bl	80213b6 <TIM_ITRx_SetConfig>
      break;
 8020e24:	e01c      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	6818      	ldr	r0, [r3, #0]
 8020e2a:	683b      	ldr	r3, [r7, #0]
 8020e2c:	6859      	ldr	r1, [r3, #4]
 8020e2e:	683b      	ldr	r3, [r7, #0]
 8020e30:	68db      	ldr	r3, [r3, #12]
 8020e32:	461a      	mov	r2, r3
 8020e34:	f000 fa60 	bl	80212f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	681b      	ldr	r3, [r3, #0]
 8020e3c:	2140      	movs	r1, #64	; 0x40
 8020e3e:	4618      	mov	r0, r3
 8020e40:	f000 fab9 	bl	80213b6 <TIM_ITRx_SetConfig>
      break;
 8020e44:	e00c      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	681a      	ldr	r2, [r3, #0]
 8020e4a:	683b      	ldr	r3, [r7, #0]
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	4619      	mov	r1, r3
 8020e50:	4610      	mov	r0, r2
 8020e52:	f000 fab0 	bl	80213b6 <TIM_ITRx_SetConfig>
      break;
 8020e56:	e003      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8020e58:	2301      	movs	r3, #1
 8020e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8020e5c:	e000      	b.n	8020e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8020e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	2201      	movs	r2, #1
 8020e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e72:	4618      	mov	r0, r3
 8020e74:	3710      	adds	r7, #16
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}

08020e7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e7a:	b480      	push	{r7}
 8020e7c:	b083      	sub	sp, #12
 8020e7e:	af00      	add	r7, sp, #0
 8020e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8020e82:	bf00      	nop
 8020e84:	370c      	adds	r7, #12
 8020e86:	46bd      	mov	sp, r7
 8020e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e8c:	4770      	bx	lr

08020e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e8e:	b480      	push	{r7}
 8020e90:	b083      	sub	sp, #12
 8020e92:	af00      	add	r7, sp, #0
 8020e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020e96:	bf00      	nop
 8020e98:	370c      	adds	r7, #12
 8020e9a:	46bd      	mov	sp, r7
 8020e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ea0:	4770      	bx	lr

08020ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8020ea2:	b480      	push	{r7}
 8020ea4:	b083      	sub	sp, #12
 8020ea6:	af00      	add	r7, sp, #0
 8020ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8020eaa:	bf00      	nop
 8020eac:	370c      	adds	r7, #12
 8020eae:	46bd      	mov	sp, r7
 8020eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb4:	4770      	bx	lr

08020eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8020eb6:	b480      	push	{r7}
 8020eb8:	b083      	sub	sp, #12
 8020eba:	af00      	add	r7, sp, #0
 8020ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8020ebe:	bf00      	nop
 8020ec0:	370c      	adds	r7, #12
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec8:	4770      	bx	lr

08020eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020eca:	b480      	push	{r7}
 8020ecc:	b083      	sub	sp, #12
 8020ece:	af00      	add	r7, sp, #0
 8020ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8020ed2:	bf00      	nop
 8020ed4:	370c      	adds	r7, #12
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020edc:	4770      	bx	lr
	...

08020ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020ee0:	b480      	push	{r7}
 8020ee2:	b085      	sub	sp, #20
 8020ee4:	af00      	add	r7, sp, #0
 8020ee6:	6078      	str	r0, [r7, #4]
 8020ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	4a34      	ldr	r2, [pc, #208]	; (8020fc4 <TIM_Base_SetConfig+0xe4>)
 8020ef4:	4293      	cmp	r3, r2
 8020ef6:	d00f      	beq.n	8020f18 <TIM_Base_SetConfig+0x38>
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020efe:	d00b      	beq.n	8020f18 <TIM_Base_SetConfig+0x38>
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	4a31      	ldr	r2, [pc, #196]	; (8020fc8 <TIM_Base_SetConfig+0xe8>)
 8020f04:	4293      	cmp	r3, r2
 8020f06:	d007      	beq.n	8020f18 <TIM_Base_SetConfig+0x38>
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	4a30      	ldr	r2, [pc, #192]	; (8020fcc <TIM_Base_SetConfig+0xec>)
 8020f0c:	4293      	cmp	r3, r2
 8020f0e:	d003      	beq.n	8020f18 <TIM_Base_SetConfig+0x38>
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	4a2f      	ldr	r2, [pc, #188]	; (8020fd0 <TIM_Base_SetConfig+0xf0>)
 8020f14:	4293      	cmp	r3, r2
 8020f16:	d108      	bne.n	8020f2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020f20:	683b      	ldr	r3, [r7, #0]
 8020f22:	685b      	ldr	r3, [r3, #4]
 8020f24:	68fa      	ldr	r2, [r7, #12]
 8020f26:	4313      	orrs	r3, r2
 8020f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	4a25      	ldr	r2, [pc, #148]	; (8020fc4 <TIM_Base_SetConfig+0xe4>)
 8020f2e:	4293      	cmp	r3, r2
 8020f30:	d01b      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020f38:	d017      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	4a22      	ldr	r2, [pc, #136]	; (8020fc8 <TIM_Base_SetConfig+0xe8>)
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d013      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	4a21      	ldr	r2, [pc, #132]	; (8020fcc <TIM_Base_SetConfig+0xec>)
 8020f46:	4293      	cmp	r3, r2
 8020f48:	d00f      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	4a20      	ldr	r2, [pc, #128]	; (8020fd0 <TIM_Base_SetConfig+0xf0>)
 8020f4e:	4293      	cmp	r3, r2
 8020f50:	d00b      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	4a1f      	ldr	r2, [pc, #124]	; (8020fd4 <TIM_Base_SetConfig+0xf4>)
 8020f56:	4293      	cmp	r3, r2
 8020f58:	d007      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	4a1e      	ldr	r2, [pc, #120]	; (8020fd8 <TIM_Base_SetConfig+0xf8>)
 8020f5e:	4293      	cmp	r3, r2
 8020f60:	d003      	beq.n	8020f6a <TIM_Base_SetConfig+0x8a>
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	4a1d      	ldr	r2, [pc, #116]	; (8020fdc <TIM_Base_SetConfig+0xfc>)
 8020f66:	4293      	cmp	r3, r2
 8020f68:	d108      	bne.n	8020f7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020f72:	683b      	ldr	r3, [r7, #0]
 8020f74:	68db      	ldr	r3, [r3, #12]
 8020f76:	68fa      	ldr	r2, [r7, #12]
 8020f78:	4313      	orrs	r3, r2
 8020f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	695b      	ldr	r3, [r3, #20]
 8020f86:	4313      	orrs	r3, r2
 8020f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	68fa      	ldr	r2, [r7, #12]
 8020f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	689a      	ldr	r2, [r3, #8]
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020f98:	683b      	ldr	r3, [r7, #0]
 8020f9a:	681a      	ldr	r2, [r3, #0]
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	4a08      	ldr	r2, [pc, #32]	; (8020fc4 <TIM_Base_SetConfig+0xe4>)
 8020fa4:	4293      	cmp	r3, r2
 8020fa6:	d103      	bne.n	8020fb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020fa8:	683b      	ldr	r3, [r7, #0]
 8020faa:	691a      	ldr	r2, [r3, #16]
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	2201      	movs	r2, #1
 8020fb4:	615a      	str	r2, [r3, #20]
}
 8020fb6:	bf00      	nop
 8020fb8:	3714      	adds	r7, #20
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fc0:	4770      	bx	lr
 8020fc2:	bf00      	nop
 8020fc4:	40010000 	.word	0x40010000
 8020fc8:	40000400 	.word	0x40000400
 8020fcc:	40000800 	.word	0x40000800
 8020fd0:	40000c00 	.word	0x40000c00
 8020fd4:	40014000 	.word	0x40014000
 8020fd8:	40014400 	.word	0x40014400
 8020fdc:	40014800 	.word	0x40014800

08020fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020fe0:	b480      	push	{r7}
 8020fe2:	b087      	sub	sp, #28
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	6078      	str	r0, [r7, #4]
 8020fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	6a1b      	ldr	r3, [r3, #32]
 8020fee:	f023 0201 	bic.w	r2, r3, #1
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	6a1b      	ldr	r3, [r3, #32]
 8020ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	685b      	ldr	r3, [r3, #4]
 8021000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	699b      	ldr	r3, [r3, #24]
 8021006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802100e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8021010:	68fb      	ldr	r3, [r7, #12]
 8021012:	f023 0303 	bic.w	r3, r3, #3
 8021016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021018:	683b      	ldr	r3, [r7, #0]
 802101a:	681b      	ldr	r3, [r3, #0]
 802101c:	68fa      	ldr	r2, [r7, #12]
 802101e:	4313      	orrs	r3, r2
 8021020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8021022:	697b      	ldr	r3, [r7, #20]
 8021024:	f023 0302 	bic.w	r3, r3, #2
 8021028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802102a:	683b      	ldr	r3, [r7, #0]
 802102c:	689b      	ldr	r3, [r3, #8]
 802102e:	697a      	ldr	r2, [r7, #20]
 8021030:	4313      	orrs	r3, r2
 8021032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	4a1c      	ldr	r2, [pc, #112]	; (80210a8 <TIM_OC1_SetConfig+0xc8>)
 8021038:	4293      	cmp	r3, r2
 802103a:	d10c      	bne.n	8021056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802103c:	697b      	ldr	r3, [r7, #20]
 802103e:	f023 0308 	bic.w	r3, r3, #8
 8021042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8021044:	683b      	ldr	r3, [r7, #0]
 8021046:	68db      	ldr	r3, [r3, #12]
 8021048:	697a      	ldr	r2, [r7, #20]
 802104a:	4313      	orrs	r3, r2
 802104c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802104e:	697b      	ldr	r3, [r7, #20]
 8021050:	f023 0304 	bic.w	r3, r3, #4
 8021054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	4a13      	ldr	r2, [pc, #76]	; (80210a8 <TIM_OC1_SetConfig+0xc8>)
 802105a:	4293      	cmp	r3, r2
 802105c:	d111      	bne.n	8021082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802105e:	693b      	ldr	r3, [r7, #16]
 8021060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8021066:	693b      	ldr	r3, [r7, #16]
 8021068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802106c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802106e:	683b      	ldr	r3, [r7, #0]
 8021070:	695b      	ldr	r3, [r3, #20]
 8021072:	693a      	ldr	r2, [r7, #16]
 8021074:	4313      	orrs	r3, r2
 8021076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8021078:	683b      	ldr	r3, [r7, #0]
 802107a:	699b      	ldr	r3, [r3, #24]
 802107c:	693a      	ldr	r2, [r7, #16]
 802107e:	4313      	orrs	r3, r2
 8021080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021082:	687b      	ldr	r3, [r7, #4]
 8021084:	693a      	ldr	r2, [r7, #16]
 8021086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	68fa      	ldr	r2, [r7, #12]
 802108c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802108e:	683b      	ldr	r3, [r7, #0]
 8021090:	685a      	ldr	r2, [r3, #4]
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	697a      	ldr	r2, [r7, #20]
 802109a:	621a      	str	r2, [r3, #32]
}
 802109c:	bf00      	nop
 802109e:	371c      	adds	r7, #28
 80210a0:	46bd      	mov	sp, r7
 80210a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210a6:	4770      	bx	lr
 80210a8:	40010000 	.word	0x40010000

080210ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80210ac:	b480      	push	{r7}
 80210ae:	b087      	sub	sp, #28
 80210b0:	af00      	add	r7, sp, #0
 80210b2:	6078      	str	r0, [r7, #4]
 80210b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80210b6:	687b      	ldr	r3, [r7, #4]
 80210b8:	6a1b      	ldr	r3, [r3, #32]
 80210ba:	f023 0210 	bic.w	r2, r3, #16
 80210be:	687b      	ldr	r3, [r7, #4]
 80210c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	6a1b      	ldr	r3, [r3, #32]
 80210c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	685b      	ldr	r3, [r3, #4]
 80210cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	699b      	ldr	r3, [r3, #24]
 80210d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80210d4:	68fb      	ldr	r3, [r7, #12]
 80210d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80210da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80210e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80210e4:	683b      	ldr	r3, [r7, #0]
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	021b      	lsls	r3, r3, #8
 80210ea:	68fa      	ldr	r2, [r7, #12]
 80210ec:	4313      	orrs	r3, r2
 80210ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80210f0:	697b      	ldr	r3, [r7, #20]
 80210f2:	f023 0320 	bic.w	r3, r3, #32
 80210f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80210f8:	683b      	ldr	r3, [r7, #0]
 80210fa:	689b      	ldr	r3, [r3, #8]
 80210fc:	011b      	lsls	r3, r3, #4
 80210fe:	697a      	ldr	r2, [r7, #20]
 8021100:	4313      	orrs	r3, r2
 8021102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	4a1e      	ldr	r2, [pc, #120]	; (8021180 <TIM_OC2_SetConfig+0xd4>)
 8021108:	4293      	cmp	r3, r2
 802110a:	d10d      	bne.n	8021128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802110c:	697b      	ldr	r3, [r7, #20]
 802110e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8021114:	683b      	ldr	r3, [r7, #0]
 8021116:	68db      	ldr	r3, [r3, #12]
 8021118:	011b      	lsls	r3, r3, #4
 802111a:	697a      	ldr	r2, [r7, #20]
 802111c:	4313      	orrs	r3, r2
 802111e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8021120:	697b      	ldr	r3, [r7, #20]
 8021122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	4a15      	ldr	r2, [pc, #84]	; (8021180 <TIM_OC2_SetConfig+0xd4>)
 802112c:	4293      	cmp	r3, r2
 802112e:	d113      	bne.n	8021158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8021130:	693b      	ldr	r3, [r7, #16]
 8021132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8021138:	693b      	ldr	r3, [r7, #16]
 802113a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802113e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8021140:	683b      	ldr	r3, [r7, #0]
 8021142:	695b      	ldr	r3, [r3, #20]
 8021144:	009b      	lsls	r3, r3, #2
 8021146:	693a      	ldr	r2, [r7, #16]
 8021148:	4313      	orrs	r3, r2
 802114a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802114c:	683b      	ldr	r3, [r7, #0]
 802114e:	699b      	ldr	r3, [r3, #24]
 8021150:	009b      	lsls	r3, r3, #2
 8021152:	693a      	ldr	r2, [r7, #16]
 8021154:	4313      	orrs	r3, r2
 8021156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	693a      	ldr	r2, [r7, #16]
 802115c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	68fa      	ldr	r2, [r7, #12]
 8021162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021164:	683b      	ldr	r3, [r7, #0]
 8021166:	685a      	ldr	r2, [r3, #4]
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	697a      	ldr	r2, [r7, #20]
 8021170:	621a      	str	r2, [r3, #32]
}
 8021172:	bf00      	nop
 8021174:	371c      	adds	r7, #28
 8021176:	46bd      	mov	sp, r7
 8021178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802117c:	4770      	bx	lr
 802117e:	bf00      	nop
 8021180:	40010000 	.word	0x40010000

08021184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021184:	b480      	push	{r7}
 8021186:	b087      	sub	sp, #28
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
 802118c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	6a1b      	ldr	r3, [r3, #32]
 8021192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	6a1b      	ldr	r3, [r3, #32]
 802119e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	685b      	ldr	r3, [r3, #4]
 80211a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	69db      	ldr	r3, [r3, #28]
 80211aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80211b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80211b4:	68fb      	ldr	r3, [r7, #12]
 80211b6:	f023 0303 	bic.w	r3, r3, #3
 80211ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80211bc:	683b      	ldr	r3, [r7, #0]
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	68fa      	ldr	r2, [r7, #12]
 80211c2:	4313      	orrs	r3, r2
 80211c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80211c6:	697b      	ldr	r3, [r7, #20]
 80211c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80211cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	689b      	ldr	r3, [r3, #8]
 80211d2:	021b      	lsls	r3, r3, #8
 80211d4:	697a      	ldr	r2, [r7, #20]
 80211d6:	4313      	orrs	r3, r2
 80211d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	4a1d      	ldr	r2, [pc, #116]	; (8021254 <TIM_OC3_SetConfig+0xd0>)
 80211de:	4293      	cmp	r3, r2
 80211e0:	d10d      	bne.n	80211fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80211e2:	697b      	ldr	r3, [r7, #20]
 80211e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80211e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80211ea:	683b      	ldr	r3, [r7, #0]
 80211ec:	68db      	ldr	r3, [r3, #12]
 80211ee:	021b      	lsls	r3, r3, #8
 80211f0:	697a      	ldr	r2, [r7, #20]
 80211f2:	4313      	orrs	r3, r2
 80211f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80211f6:	697b      	ldr	r3, [r7, #20]
 80211f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80211fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	4a14      	ldr	r2, [pc, #80]	; (8021254 <TIM_OC3_SetConfig+0xd0>)
 8021202:	4293      	cmp	r3, r2
 8021204:	d113      	bne.n	802122e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8021206:	693b      	ldr	r3, [r7, #16]
 8021208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802120c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802120e:	693b      	ldr	r3, [r7, #16]
 8021210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8021216:	683b      	ldr	r3, [r7, #0]
 8021218:	695b      	ldr	r3, [r3, #20]
 802121a:	011b      	lsls	r3, r3, #4
 802121c:	693a      	ldr	r2, [r7, #16]
 802121e:	4313      	orrs	r3, r2
 8021220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8021222:	683b      	ldr	r3, [r7, #0]
 8021224:	699b      	ldr	r3, [r3, #24]
 8021226:	011b      	lsls	r3, r3, #4
 8021228:	693a      	ldr	r2, [r7, #16]
 802122a:	4313      	orrs	r3, r2
 802122c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	693a      	ldr	r2, [r7, #16]
 8021232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	68fa      	ldr	r2, [r7, #12]
 8021238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802123a:	683b      	ldr	r3, [r7, #0]
 802123c:	685a      	ldr	r2, [r3, #4]
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	697a      	ldr	r2, [r7, #20]
 8021246:	621a      	str	r2, [r3, #32]
}
 8021248:	bf00      	nop
 802124a:	371c      	adds	r7, #28
 802124c:	46bd      	mov	sp, r7
 802124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021252:	4770      	bx	lr
 8021254:	40010000 	.word	0x40010000

08021258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021258:	b480      	push	{r7}
 802125a:	b087      	sub	sp, #28
 802125c:	af00      	add	r7, sp, #0
 802125e:	6078      	str	r0, [r7, #4]
 8021260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	6a1b      	ldr	r3, [r3, #32]
 8021266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	6a1b      	ldr	r3, [r3, #32]
 8021272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	685b      	ldr	r3, [r3, #4]
 8021278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	69db      	ldr	r3, [r3, #28]
 802127e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021280:	68fb      	ldr	r3, [r7, #12]
 8021282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8021288:	68fb      	ldr	r3, [r7, #12]
 802128a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802128e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021290:	683b      	ldr	r3, [r7, #0]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	021b      	lsls	r3, r3, #8
 8021296:	68fa      	ldr	r2, [r7, #12]
 8021298:	4313      	orrs	r3, r2
 802129a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802129c:	693b      	ldr	r3, [r7, #16]
 802129e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80212a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	689b      	ldr	r3, [r3, #8]
 80212a8:	031b      	lsls	r3, r3, #12
 80212aa:	693a      	ldr	r2, [r7, #16]
 80212ac:	4313      	orrs	r3, r2
 80212ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	4a10      	ldr	r2, [pc, #64]	; (80212f4 <TIM_OC4_SetConfig+0x9c>)
 80212b4:	4293      	cmp	r3, r2
 80212b6:	d109      	bne.n	80212cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80212b8:	697b      	ldr	r3, [r7, #20]
 80212ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80212be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80212c0:	683b      	ldr	r3, [r7, #0]
 80212c2:	695b      	ldr	r3, [r3, #20]
 80212c4:	019b      	lsls	r3, r3, #6
 80212c6:	697a      	ldr	r2, [r7, #20]
 80212c8:	4313      	orrs	r3, r2
 80212ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	697a      	ldr	r2, [r7, #20]
 80212d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	68fa      	ldr	r2, [r7, #12]
 80212d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80212d8:	683b      	ldr	r3, [r7, #0]
 80212da:	685a      	ldr	r2, [r3, #4]
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	693a      	ldr	r2, [r7, #16]
 80212e4:	621a      	str	r2, [r3, #32]
}
 80212e6:	bf00      	nop
 80212e8:	371c      	adds	r7, #28
 80212ea:	46bd      	mov	sp, r7
 80212ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f0:	4770      	bx	lr
 80212f2:	bf00      	nop
 80212f4:	40010000 	.word	0x40010000

080212f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80212f8:	b480      	push	{r7}
 80212fa:	b087      	sub	sp, #28
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	60f8      	str	r0, [r7, #12]
 8021300:	60b9      	str	r1, [r7, #8]
 8021302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021304:	68fb      	ldr	r3, [r7, #12]
 8021306:	6a1b      	ldr	r3, [r3, #32]
 8021308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	6a1b      	ldr	r3, [r3, #32]
 802130e:	f023 0201 	bic.w	r2, r3, #1
 8021312:	68fb      	ldr	r3, [r7, #12]
 8021314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021316:	68fb      	ldr	r3, [r7, #12]
 8021318:	699b      	ldr	r3, [r3, #24]
 802131a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802131c:	693b      	ldr	r3, [r7, #16]
 802131e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	011b      	lsls	r3, r3, #4
 8021328:	693a      	ldr	r2, [r7, #16]
 802132a:	4313      	orrs	r3, r2
 802132c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802132e:	697b      	ldr	r3, [r7, #20]
 8021330:	f023 030a 	bic.w	r3, r3, #10
 8021334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8021336:	697a      	ldr	r2, [r7, #20]
 8021338:	68bb      	ldr	r3, [r7, #8]
 802133a:	4313      	orrs	r3, r2
 802133c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802133e:	68fb      	ldr	r3, [r7, #12]
 8021340:	693a      	ldr	r2, [r7, #16]
 8021342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	697a      	ldr	r2, [r7, #20]
 8021348:	621a      	str	r2, [r3, #32]
}
 802134a:	bf00      	nop
 802134c:	371c      	adds	r7, #28
 802134e:	46bd      	mov	sp, r7
 8021350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021354:	4770      	bx	lr

08021356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021356:	b480      	push	{r7}
 8021358:	b087      	sub	sp, #28
 802135a:	af00      	add	r7, sp, #0
 802135c:	60f8      	str	r0, [r7, #12]
 802135e:	60b9      	str	r1, [r7, #8]
 8021360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021362:	68fb      	ldr	r3, [r7, #12]
 8021364:	6a1b      	ldr	r3, [r3, #32]
 8021366:	f023 0210 	bic.w	r2, r3, #16
 802136a:	68fb      	ldr	r3, [r7, #12]
 802136c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802136e:	68fb      	ldr	r3, [r7, #12]
 8021370:	699b      	ldr	r3, [r3, #24]
 8021372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	6a1b      	ldr	r3, [r3, #32]
 8021378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	031b      	lsls	r3, r3, #12
 8021386:	697a      	ldr	r2, [r7, #20]
 8021388:	4313      	orrs	r3, r2
 802138a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802138c:	693b      	ldr	r3, [r7, #16]
 802138e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021394:	68bb      	ldr	r3, [r7, #8]
 8021396:	011b      	lsls	r3, r3, #4
 8021398:	693a      	ldr	r2, [r7, #16]
 802139a:	4313      	orrs	r3, r2
 802139c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802139e:	68fb      	ldr	r3, [r7, #12]
 80213a0:	697a      	ldr	r2, [r7, #20]
 80213a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	693a      	ldr	r2, [r7, #16]
 80213a8:	621a      	str	r2, [r3, #32]
}
 80213aa:	bf00      	nop
 80213ac:	371c      	adds	r7, #28
 80213ae:	46bd      	mov	sp, r7
 80213b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213b4:	4770      	bx	lr

080213b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80213b6:	b480      	push	{r7}
 80213b8:	b085      	sub	sp, #20
 80213ba:	af00      	add	r7, sp, #0
 80213bc:	6078      	str	r0, [r7, #4]
 80213be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	689b      	ldr	r3, [r3, #8]
 80213c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80213cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80213ce:	683a      	ldr	r2, [r7, #0]
 80213d0:	68fb      	ldr	r3, [r7, #12]
 80213d2:	4313      	orrs	r3, r2
 80213d4:	f043 0307 	orr.w	r3, r3, #7
 80213d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	68fa      	ldr	r2, [r7, #12]
 80213de:	609a      	str	r2, [r3, #8]
}
 80213e0:	bf00      	nop
 80213e2:	3714      	adds	r7, #20
 80213e4:	46bd      	mov	sp, r7
 80213e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ea:	4770      	bx	lr

080213ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80213ec:	b480      	push	{r7}
 80213ee:	b087      	sub	sp, #28
 80213f0:	af00      	add	r7, sp, #0
 80213f2:	60f8      	str	r0, [r7, #12]
 80213f4:	60b9      	str	r1, [r7, #8]
 80213f6:	607a      	str	r2, [r7, #4]
 80213f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	689b      	ldr	r3, [r3, #8]
 80213fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021400:	697b      	ldr	r3, [r7, #20]
 8021402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021408:	683b      	ldr	r3, [r7, #0]
 802140a:	021a      	lsls	r2, r3, #8
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	431a      	orrs	r2, r3
 8021410:	68bb      	ldr	r3, [r7, #8]
 8021412:	4313      	orrs	r3, r2
 8021414:	697a      	ldr	r2, [r7, #20]
 8021416:	4313      	orrs	r3, r2
 8021418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	697a      	ldr	r2, [r7, #20]
 802141e:	609a      	str	r2, [r3, #8]
}
 8021420:	bf00      	nop
 8021422:	371c      	adds	r7, #28
 8021424:	46bd      	mov	sp, r7
 8021426:	f85d 7b04 	ldr.w	r7, [sp], #4
 802142a:	4770      	bx	lr

0802142c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802142c:	b480      	push	{r7}
 802142e:	b087      	sub	sp, #28
 8021430:	af00      	add	r7, sp, #0
 8021432:	60f8      	str	r0, [r7, #12]
 8021434:	60b9      	str	r1, [r7, #8]
 8021436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021438:	68bb      	ldr	r3, [r7, #8]
 802143a:	f003 031f 	and.w	r3, r3, #31
 802143e:	2201      	movs	r2, #1
 8021440:	fa02 f303 	lsl.w	r3, r2, r3
 8021444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8021446:	68fb      	ldr	r3, [r7, #12]
 8021448:	6a1a      	ldr	r2, [r3, #32]
 802144a:	697b      	ldr	r3, [r7, #20]
 802144c:	43db      	mvns	r3, r3
 802144e:	401a      	ands	r2, r3
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021454:	68fb      	ldr	r3, [r7, #12]
 8021456:	6a1a      	ldr	r2, [r3, #32]
 8021458:	68bb      	ldr	r3, [r7, #8]
 802145a:	f003 031f 	and.w	r3, r3, #31
 802145e:	6879      	ldr	r1, [r7, #4]
 8021460:	fa01 f303 	lsl.w	r3, r1, r3
 8021464:	431a      	orrs	r2, r3
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	621a      	str	r2, [r3, #32]
}
 802146a:	bf00      	nop
 802146c:	371c      	adds	r7, #28
 802146e:	46bd      	mov	sp, r7
 8021470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021474:	4770      	bx	lr
	...

08021478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021478:	b480      	push	{r7}
 802147a:	b085      	sub	sp, #20
 802147c:	af00      	add	r7, sp, #0
 802147e:	6078      	str	r0, [r7, #4]
 8021480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021488:	2b01      	cmp	r3, #1
 802148a:	d101      	bne.n	8021490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802148c:	2302      	movs	r3, #2
 802148e:	e050      	b.n	8021532 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	2201      	movs	r2, #1
 8021494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	2202      	movs	r2, #2
 802149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	685b      	ldr	r3, [r3, #4]
 80214a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	689b      	ldr	r3, [r3, #8]
 80214ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80214b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80214b8:	683b      	ldr	r3, [r7, #0]
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	68fa      	ldr	r2, [r7, #12]
 80214be:	4313      	orrs	r3, r2
 80214c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	68fa      	ldr	r2, [r7, #12]
 80214c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	4a1c      	ldr	r2, [pc, #112]	; (8021540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80214d0:	4293      	cmp	r3, r2
 80214d2:	d018      	beq.n	8021506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80214dc:	d013      	beq.n	8021506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	4a18      	ldr	r2, [pc, #96]	; (8021544 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80214e4:	4293      	cmp	r3, r2
 80214e6:	d00e      	beq.n	8021506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	4a16      	ldr	r2, [pc, #88]	; (8021548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80214ee:	4293      	cmp	r3, r2
 80214f0:	d009      	beq.n	8021506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	4a15      	ldr	r2, [pc, #84]	; (802154c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80214f8:	4293      	cmp	r3, r2
 80214fa:	d004      	beq.n	8021506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	4a13      	ldr	r2, [pc, #76]	; (8021550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8021502:	4293      	cmp	r3, r2
 8021504:	d10c      	bne.n	8021520 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021506:	68bb      	ldr	r3, [r7, #8]
 8021508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802150c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802150e:	683b      	ldr	r3, [r7, #0]
 8021510:	685b      	ldr	r3, [r3, #4]
 8021512:	68ba      	ldr	r2, [r7, #8]
 8021514:	4313      	orrs	r3, r2
 8021516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	68ba      	ldr	r2, [r7, #8]
 802151e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	2201      	movs	r2, #1
 8021524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	2200      	movs	r2, #0
 802152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021530:	2300      	movs	r3, #0
}
 8021532:	4618      	mov	r0, r3
 8021534:	3714      	adds	r7, #20
 8021536:	46bd      	mov	sp, r7
 8021538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153c:	4770      	bx	lr
 802153e:	bf00      	nop
 8021540:	40010000 	.word	0x40010000
 8021544:	40000400 	.word	0x40000400
 8021548:	40000800 	.word	0x40000800
 802154c:	40000c00 	.word	0x40000c00
 8021550:	40014000 	.word	0x40014000

08021554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021554:	b480      	push	{r7}
 8021556:	b083      	sub	sp, #12
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802155c:	bf00      	nop
 802155e:	370c      	adds	r7, #12
 8021560:	46bd      	mov	sp, r7
 8021562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021566:	4770      	bx	lr

08021568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021568:	b480      	push	{r7}
 802156a:	b083      	sub	sp, #12
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021570:	bf00      	nop
 8021572:	370c      	adds	r7, #12
 8021574:	46bd      	mov	sp, r7
 8021576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802157a:	4770      	bx	lr

0802157c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802157c:	b580      	push	{r7, lr}
 802157e:	b082      	sub	sp, #8
 8021580:	af00      	add	r7, sp, #0
 8021582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	2b00      	cmp	r3, #0
 8021588:	d101      	bne.n	802158e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802158a:	2301      	movs	r3, #1
 802158c:	e03f      	b.n	802160e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021594:	b2db      	uxtb	r3, r3
 8021596:	2b00      	cmp	r3, #0
 8021598:	d106      	bne.n	80215a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	2200      	movs	r2, #0
 802159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80215a2:	6878      	ldr	r0, [r7, #4]
 80215a4:	f7e2 f9d8 	bl	8003958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	2224      	movs	r2, #36	; 0x24
 80215ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	68da      	ldr	r2, [r3, #12]
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80215be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80215c0:	6878      	ldr	r0, [r7, #4]
 80215c2:	f000 fec7 	bl	8022354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	681b      	ldr	r3, [r3, #0]
 80215ca:	691a      	ldr	r2, [r3, #16]
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80215d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	695a      	ldr	r2, [r3, #20]
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80215e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80215e6:	687b      	ldr	r3, [r7, #4]
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	68da      	ldr	r2, [r3, #12]
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80215f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	2200      	movs	r2, #0
 80215fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	2220      	movs	r2, #32
 8021600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	2220      	movs	r2, #32
 8021608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802160c:	2300      	movs	r3, #0
}
 802160e:	4618      	mov	r0, r3
 8021610:	3708      	adds	r7, #8
 8021612:	46bd      	mov	sp, r7
 8021614:	bd80      	pop	{r7, pc}

08021616 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8021616:	b580      	push	{r7, lr}
 8021618:	b082      	sub	sp, #8
 802161a:	af00      	add	r7, sp, #0
 802161c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	2b00      	cmp	r3, #0
 8021622:	d101      	bne.n	8021628 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8021624:	2301      	movs	r3, #1
 8021626:	e021      	b.n	802166c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	2224      	movs	r2, #36	; 0x24
 802162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	68da      	ldr	r2, [r3, #12]
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802163e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8021640:	6878      	ldr	r0, [r7, #4]
 8021642:	f7e2 fa53 	bl	8003aec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	2200      	movs	r2, #0
 802164a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	2200      	movs	r2, #0
 8021650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	2200      	movs	r2, #0
 8021658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	2200      	movs	r2, #0
 8021660:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	2200      	movs	r2, #0
 8021666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802166a:	2300      	movs	r3, #0
}
 802166c:	4618      	mov	r0, r3
 802166e:	3708      	adds	r7, #8
 8021670:	46bd      	mov	sp, r7
 8021672:	bd80      	pop	{r7, pc}

08021674 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8021674:	b480      	push	{r7}
 8021676:	b085      	sub	sp, #20
 8021678:	af00      	add	r7, sp, #0
 802167a:	60f8      	str	r0, [r7, #12]
 802167c:	60b9      	str	r1, [r7, #8]
 802167e:	4613      	mov	r3, r2
 8021680:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021688:	b2db      	uxtb	r3, r3
 802168a:	2b20      	cmp	r3, #32
 802168c:	d130      	bne.n	80216f0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 802168e:	68bb      	ldr	r3, [r7, #8]
 8021690:	2b00      	cmp	r3, #0
 8021692:	d002      	beq.n	802169a <HAL_UART_Transmit_IT+0x26>
 8021694:	88fb      	ldrh	r3, [r7, #6]
 8021696:	2b00      	cmp	r3, #0
 8021698:	d101      	bne.n	802169e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802169a:	2301      	movs	r3, #1
 802169c:	e029      	b.n	80216f2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802169e:	68fb      	ldr	r3, [r7, #12]
 80216a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80216a4:	2b01      	cmp	r3, #1
 80216a6:	d101      	bne.n	80216ac <HAL_UART_Transmit_IT+0x38>
 80216a8:	2302      	movs	r3, #2
 80216aa:	e022      	b.n	80216f2 <HAL_UART_Transmit_IT+0x7e>
 80216ac:	68fb      	ldr	r3, [r7, #12]
 80216ae:	2201      	movs	r2, #1
 80216b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80216b4:	68fb      	ldr	r3, [r7, #12]
 80216b6:	68ba      	ldr	r2, [r7, #8]
 80216b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80216ba:	68fb      	ldr	r3, [r7, #12]
 80216bc:	88fa      	ldrh	r2, [r7, #6]
 80216be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80216c0:	68fb      	ldr	r3, [r7, #12]
 80216c2:	88fa      	ldrh	r2, [r7, #6]
 80216c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	2200      	movs	r2, #0
 80216ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80216cc:	68fb      	ldr	r3, [r7, #12]
 80216ce:	2221      	movs	r2, #33	; 0x21
 80216d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	2200      	movs	r2, #0
 80216d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80216dc:	68fb      	ldr	r3, [r7, #12]
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	68da      	ldr	r2, [r3, #12]
 80216e2:	68fb      	ldr	r3, [r7, #12]
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80216ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80216ec:	2300      	movs	r3, #0
 80216ee:	e000      	b.n	80216f2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80216f0:	2302      	movs	r3, #2
  }
}
 80216f2:	4618      	mov	r0, r3
 80216f4:	3714      	adds	r7, #20
 80216f6:	46bd      	mov	sp, r7
 80216f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216fc:	4770      	bx	lr

080216fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80216fe:	b580      	push	{r7, lr}
 8021700:	b084      	sub	sp, #16
 8021702:	af00      	add	r7, sp, #0
 8021704:	60f8      	str	r0, [r7, #12]
 8021706:	60b9      	str	r1, [r7, #8]
 8021708:	4613      	mov	r3, r2
 802170a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021712:	b2db      	uxtb	r3, r3
 8021714:	2b20      	cmp	r3, #32
 8021716:	d11d      	bne.n	8021754 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8021718:	68bb      	ldr	r3, [r7, #8]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d002      	beq.n	8021724 <HAL_UART_Receive_IT+0x26>
 802171e:	88fb      	ldrh	r3, [r7, #6]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d101      	bne.n	8021728 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8021724:	2301      	movs	r3, #1
 8021726:	e016      	b.n	8021756 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802172e:	2b01      	cmp	r3, #1
 8021730:	d101      	bne.n	8021736 <HAL_UART_Receive_IT+0x38>
 8021732:	2302      	movs	r3, #2
 8021734:	e00f      	b.n	8021756 <HAL_UART_Receive_IT+0x58>
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	2201      	movs	r2, #1
 802173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802173e:	68fb      	ldr	r3, [r7, #12]
 8021740:	2200      	movs	r2, #0
 8021742:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8021744:	88fb      	ldrh	r3, [r7, #6]
 8021746:	461a      	mov	r2, r3
 8021748:	68b9      	ldr	r1, [r7, #8]
 802174a:	68f8      	ldr	r0, [r7, #12]
 802174c:	f000 fbca 	bl	8021ee4 <UART_Start_Receive_IT>
 8021750:	4603      	mov	r3, r0
 8021752:	e000      	b.n	8021756 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8021754:	2302      	movs	r3, #2
  }
}
 8021756:	4618      	mov	r0, r3
 8021758:	3710      	adds	r7, #16
 802175a:	46bd      	mov	sp, r7
 802175c:	bd80      	pop	{r7, pc}
	...

08021760 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8021760:	b580      	push	{r7, lr}
 8021762:	b0a2      	sub	sp, #136	; 0x88
 8021764:	af00      	add	r7, sp, #0
 8021766:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8021768:	2301      	movs	r3, #1
 802176a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	330c      	adds	r3, #12
 8021774:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021778:	e853 3f00 	ldrex	r3, [r3]
 802177c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021780:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8021784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	330c      	adds	r3, #12
 802178e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021794:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802179a:	e841 2300 	strex	r3, r2, [r1]
 802179e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80217a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d1e3      	bne.n	802176e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	3314      	adds	r3, #20
 80217ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217b0:	e853 3f00 	ldrex	r3, [r3]
 80217b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80217b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80217b8:	f023 0301 	bic.w	r3, r3, #1
 80217bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80217be:	687b      	ldr	r3, [r7, #4]
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	3314      	adds	r3, #20
 80217c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80217c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80217c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80217cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80217ce:	e841 2300 	strex	r3, r2, [r1]
 80217d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80217d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d1e5      	bne.n	80217a6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217de:	2b01      	cmp	r3, #1
 80217e0:	d119      	bne.n	8021816 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	330c      	adds	r3, #12
 80217e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217ec:	e853 3f00 	ldrex	r3, [r3]
 80217f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80217f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80217f4:	f023 0310 	bic.w	r3, r3, #16
 80217f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80217fa:	687b      	ldr	r3, [r7, #4]
 80217fc:	681b      	ldr	r3, [r3, #0]
 80217fe:	330c      	adds	r3, #12
 8021800:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8021802:	647a      	str	r2, [r7, #68]	; 0x44
 8021804:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802180a:	e841 2300 	strex	r3, r2, [r1]
 802180e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021812:	2b00      	cmp	r3, #0
 8021814:	d1e5      	bne.n	80217e2 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802181a:	2b00      	cmp	r3, #0
 802181c:	d00f      	beq.n	802183e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	695b      	ldr	r3, [r3, #20]
 8021824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021828:	2b80      	cmp	r3, #128	; 0x80
 802182a:	d104      	bne.n	8021836 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021830:	4a53      	ldr	r2, [pc, #332]	; (8021980 <HAL_UART_Abort_IT+0x220>)
 8021832:	651a      	str	r2, [r3, #80]	; 0x50
 8021834:	e003      	b.n	802183e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802183a:	2200      	movs	r2, #0
 802183c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021842:	2b00      	cmp	r3, #0
 8021844:	d00f      	beq.n	8021866 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	695b      	ldr	r3, [r3, #20]
 802184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021850:	2b40      	cmp	r3, #64	; 0x40
 8021852:	d104      	bne.n	802185e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021858:	4a4a      	ldr	r2, [pc, #296]	; (8021984 <HAL_UART_Abort_IT+0x224>)
 802185a:	651a      	str	r2, [r3, #80]	; 0x50
 802185c:	e003      	b.n	8021866 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021862:	2200      	movs	r2, #0
 8021864:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	695b      	ldr	r3, [r3, #20]
 802186c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021870:	2b80      	cmp	r3, #128	; 0x80
 8021872:	d12d      	bne.n	80218d0 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	3314      	adds	r3, #20
 802187a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802187e:	e853 3f00 	ldrex	r3, [r3]
 8021882:	623b      	str	r3, [r7, #32]
   return(result);
 8021884:	6a3b      	ldr	r3, [r7, #32]
 8021886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802188a:	677b      	str	r3, [r7, #116]	; 0x74
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	3314      	adds	r3, #20
 8021892:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021894:	633a      	str	r2, [r7, #48]	; 0x30
 8021896:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802189a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802189c:	e841 2300 	strex	r3, r2, [r1]
 80218a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80218a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d1e5      	bne.n	8021874 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d00f      	beq.n	80218d0 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80218b4:	4618      	mov	r0, r3
 80218b6:	f7fa fcdf 	bl	801c278 <HAL_DMA_Abort_IT>
 80218ba:	4603      	mov	r3, r0
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d004      	beq.n	80218ca <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80218c4:	2200      	movs	r2, #0
 80218c6:	651a      	str	r2, [r3, #80]	; 0x50
 80218c8:	e002      	b.n	80218d0 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80218ca:	2300      	movs	r3, #0
 80218cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	695b      	ldr	r3, [r3, #20]
 80218d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80218da:	2b40      	cmp	r3, #64	; 0x40
 80218dc:	d130      	bne.n	8021940 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	3314      	adds	r3, #20
 80218e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80218e6:	693b      	ldr	r3, [r7, #16]
 80218e8:	e853 3f00 	ldrex	r3, [r3]
 80218ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80218ee:	68fb      	ldr	r3, [r7, #12]
 80218f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80218f4:	673b      	str	r3, [r7, #112]	; 0x70
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	681b      	ldr	r3, [r3, #0]
 80218fa:	3314      	adds	r3, #20
 80218fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80218fe:	61fa      	str	r2, [r7, #28]
 8021900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021902:	69b9      	ldr	r1, [r7, #24]
 8021904:	69fa      	ldr	r2, [r7, #28]
 8021906:	e841 2300 	strex	r3, r2, [r1]
 802190a:	617b      	str	r3, [r7, #20]
   return(result);
 802190c:	697b      	ldr	r3, [r7, #20]
 802190e:	2b00      	cmp	r3, #0
 8021910:	d1e5      	bne.n	80218de <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021916:	2b00      	cmp	r3, #0
 8021918:	d012      	beq.n	8021940 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802191e:	4618      	mov	r0, r3
 8021920:	f7fa fcaa 	bl	801c278 <HAL_DMA_Abort_IT>
 8021924:	4603      	mov	r3, r0
 8021926:	2b00      	cmp	r3, #0
 8021928:	d007      	beq.n	802193a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802192e:	2200      	movs	r2, #0
 8021930:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8021932:	2301      	movs	r3, #1
 8021934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021938:	e002      	b.n	8021940 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 802193a:	2300      	movs	r3, #0
 802193c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8021940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021944:	2b01      	cmp	r3, #1
 8021946:	d116      	bne.n	8021976 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	2200      	movs	r2, #0
 802194c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	2200      	movs	r2, #0
 8021952:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	2200      	movs	r2, #0
 8021958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	2220      	movs	r2, #32
 802195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	2220      	movs	r2, #32
 8021966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	2200      	movs	r2, #0
 802196e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f000 faa1 	bl	8021eb8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8021976:	2300      	movs	r3, #0
}
 8021978:	4618      	mov	r0, r3
 802197a:	3788      	adds	r7, #136	; 0x88
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}
 8021980:	0802204f 	.word	0x0802204f
 8021984:	080220af 	.word	0x080220af

08021988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8021988:	b580      	push	{r7, lr}
 802198a:	b0ba      	sub	sp, #232	; 0xe8
 802198c:	af00      	add	r7, sp, #0
 802198e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	681b      	ldr	r3, [r3, #0]
 8021996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	68db      	ldr	r3, [r3, #12]
 80219a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	695b      	ldr	r3, [r3, #20]
 80219aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80219ae:	2300      	movs	r3, #0
 80219b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80219b4:	2300      	movs	r3, #0
 80219b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80219ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80219be:	f003 030f 	and.w	r3, r3, #15
 80219c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80219c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d10f      	bne.n	80219ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80219ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80219d2:	f003 0320 	and.w	r3, r3, #32
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d009      	beq.n	80219ee <HAL_UART_IRQHandler+0x66>
 80219da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80219de:	f003 0320 	and.w	r3, r3, #32
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d003      	beq.n	80219ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80219e6:	6878      	ldr	r0, [r7, #4]
 80219e8:	f000 fbf9 	bl	80221de <UART_Receive_IT>
      return;
 80219ec:	e256      	b.n	8021e9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80219ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	f000 80de 	beq.w	8021bb4 <HAL_UART_IRQHandler+0x22c>
 80219f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80219fc:	f003 0301 	and.w	r3, r3, #1
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d106      	bne.n	8021a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8021a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021a08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	f000 80d1 	beq.w	8021bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021a16:	f003 0301 	and.w	r3, r3, #1
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d00b      	beq.n	8021a36 <HAL_UART_IRQHandler+0xae>
 8021a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d005      	beq.n	8021a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a2e:	f043 0201 	orr.w	r2, r3, #1
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021a3a:	f003 0304 	and.w	r3, r3, #4
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d00b      	beq.n	8021a5a <HAL_UART_IRQHandler+0xd2>
 8021a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021a46:	f003 0301 	and.w	r3, r3, #1
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d005      	beq.n	8021a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a52:	f043 0202 	orr.w	r2, r3, #2
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021a5e:	f003 0302 	and.w	r3, r3, #2
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d00b      	beq.n	8021a7e <HAL_UART_IRQHandler+0xf6>
 8021a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021a6a:	f003 0301 	and.w	r3, r3, #1
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d005      	beq.n	8021a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a76:	f043 0204 	orr.w	r2, r3, #4
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8021a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021a82:	f003 0308 	and.w	r3, r3, #8
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d011      	beq.n	8021aae <HAL_UART_IRQHandler+0x126>
 8021a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021a8e:	f003 0320 	and.w	r3, r3, #32
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d105      	bne.n	8021aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8021a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021a9a:	f003 0301 	and.w	r3, r3, #1
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d005      	beq.n	8021aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021aa2:	687b      	ldr	r3, [r7, #4]
 8021aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021aa6:	f043 0208 	orr.w	r2, r3, #8
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	f000 81ed 	beq.w	8021e92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021abc:	f003 0320 	and.w	r3, r3, #32
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d008      	beq.n	8021ad6 <HAL_UART_IRQHandler+0x14e>
 8021ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021ac8:	f003 0320 	and.w	r3, r3, #32
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d002      	beq.n	8021ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8021ad0:	6878      	ldr	r0, [r7, #4]
 8021ad2:	f000 fb84 	bl	80221de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8021ad6:	687b      	ldr	r3, [r7, #4]
 8021ad8:	681b      	ldr	r3, [r3, #0]
 8021ada:	695b      	ldr	r3, [r3, #20]
 8021adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021ae0:	2b40      	cmp	r3, #64	; 0x40
 8021ae2:	bf0c      	ite	eq
 8021ae4:	2301      	moveq	r3, #1
 8021ae6:	2300      	movne	r3, #0
 8021ae8:	b2db      	uxtb	r3, r3
 8021aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021af2:	f003 0308 	and.w	r3, r3, #8
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d103      	bne.n	8021b02 <HAL_UART_IRQHandler+0x17a>
 8021afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d04f      	beq.n	8021ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8021b02:	6878      	ldr	r0, [r7, #4]
 8021b04:	f000 fa2c 	bl	8021f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	695b      	ldr	r3, [r3, #20]
 8021b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021b12:	2b40      	cmp	r3, #64	; 0x40
 8021b14:	d141      	bne.n	8021b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021b16:	687b      	ldr	r3, [r7, #4]
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	3314      	adds	r3, #20
 8021b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021b24:	e853 3f00 	ldrex	r3, [r3]
 8021b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8021b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	3314      	adds	r3, #20
 8021b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8021b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8021b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8021b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8021b52:	e841 2300 	strex	r3, r2, [r1]
 8021b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8021b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d1d9      	bne.n	8021b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d013      	beq.n	8021b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b6e:	4a7d      	ldr	r2, [pc, #500]	; (8021d64 <HAL_UART_IRQHandler+0x3dc>)
 8021b70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b76:	4618      	mov	r0, r3
 8021b78:	f7fa fb7e 	bl	801c278 <HAL_DMA_Abort_IT>
 8021b7c:	4603      	mov	r3, r0
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d016      	beq.n	8021bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021b8c:	4610      	mov	r0, r2
 8021b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021b90:	e00e      	b.n	8021bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021b92:	6878      	ldr	r0, [r7, #4]
 8021b94:	f000 f986 	bl	8021ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021b98:	e00a      	b.n	8021bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021b9a:	6878      	ldr	r0, [r7, #4]
 8021b9c:	f000 f982 	bl	8021ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021ba0:	e006      	b.n	8021bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021ba2:	6878      	ldr	r0, [r7, #4]
 8021ba4:	f000 f97e 	bl	8021ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	2200      	movs	r2, #0
 8021bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8021bae:	e170      	b.n	8021e92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021bb0:	bf00      	nop
    return;
 8021bb2:	e16e      	b.n	8021e92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bb8:	2b01      	cmp	r3, #1
 8021bba:	f040 814a 	bne.w	8021e52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8021bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021bc2:	f003 0310 	and.w	r3, r3, #16
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	f000 8143 	beq.w	8021e52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8021bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021bd0:	f003 0310 	and.w	r3, r3, #16
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	f000 813c 	beq.w	8021e52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021bda:	2300      	movs	r3, #0
 8021bdc:	60bb      	str	r3, [r7, #8]
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	60bb      	str	r3, [r7, #8]
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	681b      	ldr	r3, [r3, #0]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	60bb      	str	r3, [r7, #8]
 8021bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	695b      	ldr	r3, [r3, #20]
 8021bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021bfa:	2b40      	cmp	r3, #64	; 0x40
 8021bfc:	f040 80b4 	bne.w	8021d68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	685b      	ldr	r3, [r3, #4]
 8021c08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8021c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	f000 8140 	beq.w	8021e96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021c1e:	429a      	cmp	r2, r3
 8021c20:	f080 8139 	bcs.w	8021e96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c30:	69db      	ldr	r3, [r3, #28]
 8021c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021c36:	f000 8088 	beq.w	8021d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	330c      	adds	r3, #12
 8021c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021c48:	e853 3f00 	ldrex	r3, [r3]
 8021c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8021c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	681b      	ldr	r3, [r3, #0]
 8021c60:	330c      	adds	r3, #12
 8021c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8021c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021c76:	e841 2300 	strex	r3, r2, [r1]
 8021c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8021c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d1d9      	bne.n	8021c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	3314      	adds	r3, #20
 8021c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021c90:	e853 3f00 	ldrex	r3, [r3]
 8021c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c98:	f023 0301 	bic.w	r3, r3, #1
 8021c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	3314      	adds	r3, #20
 8021ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8021caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8021cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8021cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021cb6:	e841 2300 	strex	r3, r2, [r1]
 8021cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8021cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d1e1      	bne.n	8021c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	3314      	adds	r3, #20
 8021cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021ccc:	e853 3f00 	ldrex	r3, [r3]
 8021cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8021cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	681b      	ldr	r3, [r3, #0]
 8021ce0:	3314      	adds	r3, #20
 8021ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021cee:	e841 2300 	strex	r3, r2, [r1]
 8021cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d1e3      	bne.n	8021cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	2220      	movs	r2, #32
 8021cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	2200      	movs	r2, #0
 8021d06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	330c      	adds	r3, #12
 8021d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d12:	e853 3f00 	ldrex	r3, [r3]
 8021d16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021d1a:	f023 0310 	bic.w	r3, r3, #16
 8021d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	330c      	adds	r3, #12
 8021d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8021d2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021d34:	e841 2300 	strex	r3, r2, [r1]
 8021d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d1e3      	bne.n	8021d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d44:	4618      	mov	r0, r3
 8021d46:	f7fa fa27 	bl	801c198 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021d52:	b29b      	uxth	r3, r3
 8021d54:	1ad3      	subs	r3, r2, r3
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	4619      	mov	r1, r3
 8021d5a:	6878      	ldr	r0, [r7, #4]
 8021d5c:	f000 f8b6 	bl	8021ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021d60:	e099      	b.n	8021e96 <HAL_UART_IRQHandler+0x50e>
 8021d62:	bf00      	nop
 8021d64:	08022027 	.word	0x08022027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021d70:	b29b      	uxth	r3, r3
 8021d72:	1ad3      	subs	r3, r2, r3
 8021d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021d7c:	b29b      	uxth	r3, r3
 8021d7e:	2b00      	cmp	r3, #0
 8021d80:	f000 808b 	beq.w	8021e9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8021d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	f000 8086 	beq.w	8021e9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	330c      	adds	r3, #12
 8021d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021d98:	e853 3f00 	ldrex	r3, [r3]
 8021d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8021d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021da8:	687b      	ldr	r3, [r7, #4]
 8021daa:	681b      	ldr	r3, [r3, #0]
 8021dac:	330c      	adds	r3, #12
 8021dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8021db2:	647a      	str	r2, [r7, #68]	; 0x44
 8021db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021dba:	e841 2300 	strex	r3, r2, [r1]
 8021dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d1e3      	bne.n	8021d8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	3314      	adds	r3, #20
 8021dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dd0:	e853 3f00 	ldrex	r3, [r3]
 8021dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8021dd6:	6a3b      	ldr	r3, [r7, #32]
 8021dd8:	f023 0301 	bic.w	r3, r3, #1
 8021ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	681b      	ldr	r3, [r3, #0]
 8021de4:	3314      	adds	r3, #20
 8021de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8021dea:	633a      	str	r2, [r7, #48]	; 0x30
 8021dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021df2:	e841 2300 	strex	r3, r2, [r1]
 8021df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d1e3      	bne.n	8021dc6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	2220      	movs	r2, #32
 8021e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	2200      	movs	r2, #0
 8021e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	330c      	adds	r3, #12
 8021e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e14:	693b      	ldr	r3, [r7, #16]
 8021e16:	e853 3f00 	ldrex	r3, [r3]
 8021e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8021e1c:	68fb      	ldr	r3, [r7, #12]
 8021e1e:	f023 0310 	bic.w	r3, r3, #16
 8021e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	681b      	ldr	r3, [r3, #0]
 8021e2a:	330c      	adds	r3, #12
 8021e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8021e30:	61fa      	str	r2, [r7, #28]
 8021e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e34:	69b9      	ldr	r1, [r7, #24]
 8021e36:	69fa      	ldr	r2, [r7, #28]
 8021e38:	e841 2300 	strex	r3, r2, [r1]
 8021e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8021e3e:	697b      	ldr	r3, [r7, #20]
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d1e3      	bne.n	8021e0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8021e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021e48:	4619      	mov	r1, r3
 8021e4a:	6878      	ldr	r0, [r7, #4]
 8021e4c:	f000 f83e 	bl	8021ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021e50:	e023      	b.n	8021e9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d009      	beq.n	8021e72 <HAL_UART_IRQHandler+0x4ea>
 8021e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d003      	beq.n	8021e72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8021e6a:	6878      	ldr	r0, [r7, #4]
 8021e6c:	f000 f94f 	bl	802210e <UART_Transmit_IT>
    return;
 8021e70:	e014      	b.n	8021e9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8021e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d00e      	beq.n	8021e9c <HAL_UART_IRQHandler+0x514>
 8021e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d008      	beq.n	8021e9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8021e8a:	6878      	ldr	r0, [r7, #4]
 8021e8c:	f000 f98f 	bl	80221ae <UART_EndTransmit_IT>
    return;
 8021e90:	e004      	b.n	8021e9c <HAL_UART_IRQHandler+0x514>
    return;
 8021e92:	bf00      	nop
 8021e94:	e002      	b.n	8021e9c <HAL_UART_IRQHandler+0x514>
      return;
 8021e96:	bf00      	nop
 8021e98:	e000      	b.n	8021e9c <HAL_UART_IRQHandler+0x514>
      return;
 8021e9a:	bf00      	nop
  }
}
 8021e9c:	37e8      	adds	r7, #232	; 0xe8
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	bd80      	pop	{r7, pc}
 8021ea2:	bf00      	nop

08021ea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8021ea4:	b480      	push	{r7}
 8021ea6:	b083      	sub	sp, #12
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8021eac:	bf00      	nop
 8021eae:	370c      	adds	r7, #12
 8021eb0:	46bd      	mov	sp, r7
 8021eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eb6:	4770      	bx	lr

08021eb8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8021eb8:	b480      	push	{r7}
 8021eba:	b083      	sub	sp, #12
 8021ebc:	af00      	add	r7, sp, #0
 8021ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8021ec0:	bf00      	nop
 8021ec2:	370c      	adds	r7, #12
 8021ec4:	46bd      	mov	sp, r7
 8021ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eca:	4770      	bx	lr

08021ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8021ecc:	b480      	push	{r7}
 8021ece:	b083      	sub	sp, #12
 8021ed0:	af00      	add	r7, sp, #0
 8021ed2:	6078      	str	r0, [r7, #4]
 8021ed4:	460b      	mov	r3, r1
 8021ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8021ed8:	bf00      	nop
 8021eda:	370c      	adds	r7, #12
 8021edc:	46bd      	mov	sp, r7
 8021ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee2:	4770      	bx	lr

08021ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021ee4:	b480      	push	{r7}
 8021ee6:	b085      	sub	sp, #20
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	60f8      	str	r0, [r7, #12]
 8021eec:	60b9      	str	r1, [r7, #8]
 8021eee:	4613      	mov	r3, r2
 8021ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8021ef2:	68fb      	ldr	r3, [r7, #12]
 8021ef4:	68ba      	ldr	r2, [r7, #8]
 8021ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8021ef8:	68fb      	ldr	r3, [r7, #12]
 8021efa:	88fa      	ldrh	r2, [r7, #6]
 8021efc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8021efe:	68fb      	ldr	r3, [r7, #12]
 8021f00:	88fa      	ldrh	r2, [r7, #6]
 8021f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	2200      	movs	r2, #0
 8021f08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	2222      	movs	r2, #34	; 0x22
 8021f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	2200      	movs	r2, #0
 8021f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8021f1a:	68fb      	ldr	r3, [r7, #12]
 8021f1c:	691b      	ldr	r3, [r3, #16]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d007      	beq.n	8021f32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8021f22:	68fb      	ldr	r3, [r7, #12]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	68da      	ldr	r2, [r3, #12]
 8021f28:	68fb      	ldr	r3, [r7, #12]
 8021f2a:	681b      	ldr	r3, [r3, #0]
 8021f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8021f32:	68fb      	ldr	r3, [r7, #12]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	695a      	ldr	r2, [r3, #20]
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	f042 0201 	orr.w	r2, r2, #1
 8021f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	681b      	ldr	r3, [r3, #0]
 8021f46:	68da      	ldr	r2, [r3, #12]
 8021f48:	68fb      	ldr	r3, [r7, #12]
 8021f4a:	681b      	ldr	r3, [r3, #0]
 8021f4c:	f042 0220 	orr.w	r2, r2, #32
 8021f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8021f52:	2300      	movs	r3, #0
}
 8021f54:	4618      	mov	r0, r3
 8021f56:	3714      	adds	r7, #20
 8021f58:	46bd      	mov	sp, r7
 8021f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f5e:	4770      	bx	lr

08021f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021f60:	b480      	push	{r7}
 8021f62:	b095      	sub	sp, #84	; 0x54
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	330c      	adds	r3, #12
 8021f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f72:	e853 3f00 	ldrex	r3, [r3]
 8021f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8021f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	330c      	adds	r3, #12
 8021f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021f88:	643a      	str	r2, [r7, #64]	; 0x40
 8021f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8021f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021f90:	e841 2300 	strex	r3, r2, [r1]
 8021f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d1e5      	bne.n	8021f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	3314      	adds	r3, #20
 8021fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fa4:	6a3b      	ldr	r3, [r7, #32]
 8021fa6:	e853 3f00 	ldrex	r3, [r3]
 8021faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8021fac:	69fb      	ldr	r3, [r7, #28]
 8021fae:	f023 0301 	bic.w	r3, r3, #1
 8021fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	3314      	adds	r3, #20
 8021fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021fc4:	e841 2300 	strex	r3, r2, [r1]
 8021fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d1e5      	bne.n	8021f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021fd4:	2b01      	cmp	r3, #1
 8021fd6:	d119      	bne.n	802200c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	330c      	adds	r3, #12
 8021fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fe0:	68fb      	ldr	r3, [r7, #12]
 8021fe2:	e853 3f00 	ldrex	r3, [r3]
 8021fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8021fe8:	68bb      	ldr	r3, [r7, #8]
 8021fea:	f023 0310 	bic.w	r3, r3, #16
 8021fee:	647b      	str	r3, [r7, #68]	; 0x44
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	681b      	ldr	r3, [r3, #0]
 8021ff4:	330c      	adds	r3, #12
 8021ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021ff8:	61ba      	str	r2, [r7, #24]
 8021ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ffc:	6979      	ldr	r1, [r7, #20]
 8021ffe:	69ba      	ldr	r2, [r7, #24]
 8022000:	e841 2300 	strex	r3, r2, [r1]
 8022004:	613b      	str	r3, [r7, #16]
   return(result);
 8022006:	693b      	ldr	r3, [r7, #16]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d1e5      	bne.n	8021fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	2220      	movs	r2, #32
 8022010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	2200      	movs	r2, #0
 8022018:	631a      	str	r2, [r3, #48]	; 0x30
}
 802201a:	bf00      	nop
 802201c:	3754      	adds	r7, #84	; 0x54
 802201e:	46bd      	mov	sp, r7
 8022020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022024:	4770      	bx	lr

08022026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022026:	b580      	push	{r7, lr}
 8022028:	b084      	sub	sp, #16
 802202a:	af00      	add	r7, sp, #0
 802202c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8022034:	68fb      	ldr	r3, [r7, #12]
 8022036:	2200      	movs	r2, #0
 8022038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802203a:	68fb      	ldr	r3, [r7, #12]
 802203c:	2200      	movs	r2, #0
 802203e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022040:	68f8      	ldr	r0, [r7, #12]
 8022042:	f7ff ff2f 	bl	8021ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022046:	bf00      	nop
 8022048:	3710      	adds	r7, #16
 802204a:	46bd      	mov	sp, r7
 802204c:	bd80      	pop	{r7, pc}

0802204e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802204e:	b580      	push	{r7, lr}
 8022050:	b084      	sub	sp, #16
 8022052:	af00      	add	r7, sp, #0
 8022054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802205a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022060:	2200      	movs	r2, #0
 8022062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022068:	2b00      	cmp	r3, #0
 802206a:	d004      	beq.n	8022076 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 802206c:	68fb      	ldr	r3, [r7, #12]
 802206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022072:	2b00      	cmp	r3, #0
 8022074:	d117      	bne.n	80220a6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	2200      	movs	r2, #0
 802207a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	2200      	movs	r2, #0
 8022080:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022082:	68fb      	ldr	r3, [r7, #12]
 8022084:	2200      	movs	r2, #0
 8022086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022088:	68fb      	ldr	r3, [r7, #12]
 802208a:	2220      	movs	r2, #32
 802208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	2220      	movs	r2, #32
 8022094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	2200      	movs	r2, #0
 802209c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802209e:	68f8      	ldr	r0, [r7, #12]
 80220a0:	f7ff ff0a 	bl	8021eb8 <HAL_UART_AbortCpltCallback>
 80220a4:	e000      	b.n	80220a8 <UART_DMATxAbortCallback+0x5a>
      return;
 80220a6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80220a8:	3710      	adds	r7, #16
 80220aa:	46bd      	mov	sp, r7
 80220ac:	bd80      	pop	{r7, pc}

080220ae <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80220ae:	b580      	push	{r7, lr}
 80220b0:	b084      	sub	sp, #16
 80220b2:	af00      	add	r7, sp, #0
 80220b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80220b6:	687b      	ldr	r3, [r7, #4]
 80220b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220ba:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220c0:	2200      	movs	r2, #0
 80220c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d004      	beq.n	80220d6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80220cc:	68fb      	ldr	r3, [r7, #12]
 80220ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80220d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d117      	bne.n	8022106 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80220d6:	68fb      	ldr	r3, [r7, #12]
 80220d8:	2200      	movs	r2, #0
 80220da:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80220dc:	68fb      	ldr	r3, [r7, #12]
 80220de:	2200      	movs	r2, #0
 80220e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80220e2:	68fb      	ldr	r3, [r7, #12]
 80220e4:	2200      	movs	r2, #0
 80220e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	2220      	movs	r2, #32
 80220ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	2220      	movs	r2, #32
 80220f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80220f8:	68fb      	ldr	r3, [r7, #12]
 80220fa:	2200      	movs	r2, #0
 80220fc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80220fe:	68f8      	ldr	r0, [r7, #12]
 8022100:	f7ff feda 	bl	8021eb8 <HAL_UART_AbortCpltCallback>
 8022104:	e000      	b.n	8022108 <UART_DMARxAbortCallback+0x5a>
      return;
 8022106:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022108:	3710      	adds	r7, #16
 802210a:	46bd      	mov	sp, r7
 802210c:	bd80      	pop	{r7, pc}

0802210e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802210e:	b480      	push	{r7}
 8022110:	b085      	sub	sp, #20
 8022112:	af00      	add	r7, sp, #0
 8022114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802211c:	b2db      	uxtb	r3, r3
 802211e:	2b21      	cmp	r3, #33	; 0x21
 8022120:	d13e      	bne.n	80221a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	689b      	ldr	r3, [r3, #8]
 8022126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802212a:	d114      	bne.n	8022156 <UART_Transmit_IT+0x48>
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	691b      	ldr	r3, [r3, #16]
 8022130:	2b00      	cmp	r3, #0
 8022132:	d110      	bne.n	8022156 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	6a1b      	ldr	r3, [r3, #32]
 8022138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	881b      	ldrh	r3, [r3, #0]
 802213e:	461a      	mov	r2, r3
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	681b      	ldr	r3, [r3, #0]
 8022144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	6a1b      	ldr	r3, [r3, #32]
 802214e:	1c9a      	adds	r2, r3, #2
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	621a      	str	r2, [r3, #32]
 8022154:	e008      	b.n	8022168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	6a1b      	ldr	r3, [r3, #32]
 802215a:	1c59      	adds	r1, r3, #1
 802215c:	687a      	ldr	r2, [r7, #4]
 802215e:	6211      	str	r1, [r2, #32]
 8022160:	781a      	ldrb	r2, [r3, #0]
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802216c:	b29b      	uxth	r3, r3
 802216e:	3b01      	subs	r3, #1
 8022170:	b29b      	uxth	r3, r3
 8022172:	687a      	ldr	r2, [r7, #4]
 8022174:	4619      	mov	r1, r3
 8022176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022178:	2b00      	cmp	r3, #0
 802217a:	d10f      	bne.n	802219c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	681b      	ldr	r3, [r3, #0]
 8022180:	68da      	ldr	r2, [r3, #12]
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802218a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802218c:	687b      	ldr	r3, [r7, #4]
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	68da      	ldr	r2, [r3, #12]
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802219a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802219c:	2300      	movs	r3, #0
 802219e:	e000      	b.n	80221a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80221a0:	2302      	movs	r3, #2
  }
}
 80221a2:	4618      	mov	r0, r3
 80221a4:	3714      	adds	r7, #20
 80221a6:	46bd      	mov	sp, r7
 80221a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ac:	4770      	bx	lr

080221ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80221ae:	b580      	push	{r7, lr}
 80221b0:	b082      	sub	sp, #8
 80221b2:	af00      	add	r7, sp, #0
 80221b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	68da      	ldr	r2, [r3, #12]
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80221c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	2220      	movs	r2, #32
 80221ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80221ce:	6878      	ldr	r0, [r7, #4]
 80221d0:	f7e0 f99c 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80221d4:	2300      	movs	r3, #0
}
 80221d6:	4618      	mov	r0, r3
 80221d8:	3708      	adds	r7, #8
 80221da:	46bd      	mov	sp, r7
 80221dc:	bd80      	pop	{r7, pc}

080221de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80221de:	b580      	push	{r7, lr}
 80221e0:	b08c      	sub	sp, #48	; 0x30
 80221e2:	af00      	add	r7, sp, #0
 80221e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80221ec:	b2db      	uxtb	r3, r3
 80221ee:	2b22      	cmp	r3, #34	; 0x22
 80221f0:	f040 80ab 	bne.w	802234a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	689b      	ldr	r3, [r3, #8]
 80221f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80221fc:	d117      	bne.n	802222e <UART_Receive_IT+0x50>
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	691b      	ldr	r3, [r3, #16]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d113      	bne.n	802222e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022206:	2300      	movs	r3, #0
 8022208:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802220e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022210:	687b      	ldr	r3, [r7, #4]
 8022212:	681b      	ldr	r3, [r3, #0]
 8022214:	685b      	ldr	r3, [r3, #4]
 8022216:	b29b      	uxth	r3, r3
 8022218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802221c:	b29a      	uxth	r2, r3
 802221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022226:	1c9a      	adds	r2, r3, #2
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	629a      	str	r2, [r3, #40]	; 0x28
 802222c:	e026      	b.n	802227c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022232:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8022234:	2300      	movs	r3, #0
 8022236:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	689b      	ldr	r3, [r3, #8]
 802223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022240:	d007      	beq.n	8022252 <UART_Receive_IT+0x74>
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	689b      	ldr	r3, [r3, #8]
 8022246:	2b00      	cmp	r3, #0
 8022248:	d10a      	bne.n	8022260 <UART_Receive_IT+0x82>
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	691b      	ldr	r3, [r3, #16]
 802224e:	2b00      	cmp	r3, #0
 8022250:	d106      	bne.n	8022260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	685b      	ldr	r3, [r3, #4]
 8022258:	b2da      	uxtb	r2, r3
 802225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802225c:	701a      	strb	r2, [r3, #0]
 802225e:	e008      	b.n	8022272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	685b      	ldr	r3, [r3, #4]
 8022266:	b2db      	uxtb	r3, r3
 8022268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802226c:	b2da      	uxtb	r2, r3
 802226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022276:	1c5a      	adds	r2, r3, #1
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802227c:	687b      	ldr	r3, [r7, #4]
 802227e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022280:	b29b      	uxth	r3, r3
 8022282:	3b01      	subs	r3, #1
 8022284:	b29b      	uxth	r3, r3
 8022286:	687a      	ldr	r2, [r7, #4]
 8022288:	4619      	mov	r1, r3
 802228a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802228c:	2b00      	cmp	r3, #0
 802228e:	d15a      	bne.n	8022346 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	68da      	ldr	r2, [r3, #12]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	f022 0220 	bic.w	r2, r2, #32
 802229e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	68da      	ldr	r2, [r3, #12]
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	681b      	ldr	r3, [r3, #0]
 80222aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80222ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	681b      	ldr	r3, [r3, #0]
 80222b4:	695a      	ldr	r2, [r3, #20]
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	f022 0201 	bic.w	r2, r2, #1
 80222be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	2220      	movs	r2, #32
 80222c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222cc:	2b01      	cmp	r3, #1
 80222ce:	d135      	bne.n	802233c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	2200      	movs	r2, #0
 80222d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	330c      	adds	r3, #12
 80222dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222de:	697b      	ldr	r3, [r7, #20]
 80222e0:	e853 3f00 	ldrex	r3, [r3]
 80222e4:	613b      	str	r3, [r7, #16]
   return(result);
 80222e6:	693b      	ldr	r3, [r7, #16]
 80222e8:	f023 0310 	bic.w	r3, r3, #16
 80222ec:	627b      	str	r3, [r7, #36]	; 0x24
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	330c      	adds	r3, #12
 80222f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80222f6:	623a      	str	r2, [r7, #32]
 80222f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222fa:	69f9      	ldr	r1, [r7, #28]
 80222fc:	6a3a      	ldr	r2, [r7, #32]
 80222fe:	e841 2300 	strex	r3, r2, [r1]
 8022302:	61bb      	str	r3, [r7, #24]
   return(result);
 8022304:	69bb      	ldr	r3, [r7, #24]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d1e5      	bne.n	80222d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	681b      	ldr	r3, [r3, #0]
 8022310:	f003 0310 	and.w	r3, r3, #16
 8022314:	2b10      	cmp	r3, #16
 8022316:	d10a      	bne.n	802232e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022318:	2300      	movs	r3, #0
 802231a:	60fb      	str	r3, [r7, #12]
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	681b      	ldr	r3, [r3, #0]
 8022320:	681b      	ldr	r3, [r3, #0]
 8022322:	60fb      	str	r3, [r7, #12]
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	685b      	ldr	r3, [r3, #4]
 802232a:	60fb      	str	r3, [r7, #12]
 802232c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022332:	4619      	mov	r1, r3
 8022334:	6878      	ldr	r0, [r7, #4]
 8022336:	f7ff fdc9 	bl	8021ecc <HAL_UARTEx_RxEventCallback>
 802233a:	e002      	b.n	8022342 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802233c:	6878      	ldr	r0, [r7, #4]
 802233e:	f7e0 f96d 	bl	800261c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022342:	2300      	movs	r3, #0
 8022344:	e002      	b.n	802234c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022346:	2300      	movs	r3, #0
 8022348:	e000      	b.n	802234c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802234a:	2302      	movs	r3, #2
  }
}
 802234c:	4618      	mov	r0, r3
 802234e:	3730      	adds	r7, #48	; 0x30
 8022350:	46bd      	mov	sp, r7
 8022352:	bd80      	pop	{r7, pc}

08022354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022358:	b0c0      	sub	sp, #256	; 0x100
 802235a:	af00      	add	r7, sp, #0
 802235c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	691b      	ldr	r3, [r3, #16]
 8022368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022370:	68d9      	ldr	r1, [r3, #12]
 8022372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022376:	681a      	ldr	r2, [r3, #0]
 8022378:	ea40 0301 	orr.w	r3, r0, r1
 802237c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022382:	689a      	ldr	r2, [r3, #8]
 8022384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022388:	691b      	ldr	r3, [r3, #16]
 802238a:	431a      	orrs	r2, r3
 802238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022390:	695b      	ldr	r3, [r3, #20]
 8022392:	431a      	orrs	r2, r3
 8022394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022398:	69db      	ldr	r3, [r3, #28]
 802239a:	4313      	orrs	r3, r2
 802239c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80223a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223a4:	681b      	ldr	r3, [r3, #0]
 80223a6:	68db      	ldr	r3, [r3, #12]
 80223a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80223ac:	f021 010c 	bic.w	r1, r1, #12
 80223b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223b4:	681a      	ldr	r2, [r3, #0]
 80223b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80223ba:	430b      	orrs	r3, r1
 80223bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80223be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	695b      	ldr	r3, [r3, #20]
 80223c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80223ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223ce:	6999      	ldr	r1, [r3, #24]
 80223d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223d4:	681a      	ldr	r2, [r3, #0]
 80223d6:	ea40 0301 	orr.w	r3, r0, r1
 80223da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80223dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223e0:	681a      	ldr	r2, [r3, #0]
 80223e2:	4b8f      	ldr	r3, [pc, #572]	; (8022620 <UART_SetConfig+0x2cc>)
 80223e4:	429a      	cmp	r2, r3
 80223e6:	d005      	beq.n	80223f4 <UART_SetConfig+0xa0>
 80223e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80223ec:	681a      	ldr	r2, [r3, #0]
 80223ee:	4b8d      	ldr	r3, [pc, #564]	; (8022624 <UART_SetConfig+0x2d0>)
 80223f0:	429a      	cmp	r2, r3
 80223f2:	d104      	bne.n	80223fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80223f4:	f7fe f82a 	bl	802044c <HAL_RCC_GetPCLK2Freq>
 80223f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80223fc:	e003      	b.n	8022406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80223fe:	f7fe f811 	bl	8020424 <HAL_RCC_GetPCLK1Freq>
 8022402:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802240a:	69db      	ldr	r3, [r3, #28]
 802240c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022410:	f040 810c 	bne.w	802262c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022418:	2200      	movs	r2, #0
 802241a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802241e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022426:	4622      	mov	r2, r4
 8022428:	462b      	mov	r3, r5
 802242a:	1891      	adds	r1, r2, r2
 802242c:	65b9      	str	r1, [r7, #88]	; 0x58
 802242e:	415b      	adcs	r3, r3
 8022430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022436:	4621      	mov	r1, r4
 8022438:	eb12 0801 	adds.w	r8, r2, r1
 802243c:	4629      	mov	r1, r5
 802243e:	eb43 0901 	adc.w	r9, r3, r1
 8022442:	f04f 0200 	mov.w	r2, #0
 8022446:	f04f 0300 	mov.w	r3, #0
 802244a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802244e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022456:	4690      	mov	r8, r2
 8022458:	4699      	mov	r9, r3
 802245a:	4623      	mov	r3, r4
 802245c:	eb18 0303 	adds.w	r3, r8, r3
 8022460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022464:	462b      	mov	r3, r5
 8022466:	eb49 0303 	adc.w	r3, r9, r3
 802246a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022472:	685b      	ldr	r3, [r3, #4]
 8022474:	2200      	movs	r2, #0
 8022476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802247a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802247e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022482:	460b      	mov	r3, r1
 8022484:	18db      	adds	r3, r3, r3
 8022486:	653b      	str	r3, [r7, #80]	; 0x50
 8022488:	4613      	mov	r3, r2
 802248a:	eb42 0303 	adc.w	r3, r2, r3
 802248e:	657b      	str	r3, [r7, #84]	; 0x54
 8022490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022498:	f7de fcf2 	bl	8000e80 <__aeabi_uldivmod>
 802249c:	4602      	mov	r2, r0
 802249e:	460b      	mov	r3, r1
 80224a0:	4b61      	ldr	r3, [pc, #388]	; (8022628 <UART_SetConfig+0x2d4>)
 80224a2:	fba3 2302 	umull	r2, r3, r3, r2
 80224a6:	095b      	lsrs	r3, r3, #5
 80224a8:	011c      	lsls	r4, r3, #4
 80224aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80224ae:	2200      	movs	r2, #0
 80224b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80224b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80224b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80224bc:	4642      	mov	r2, r8
 80224be:	464b      	mov	r3, r9
 80224c0:	1891      	adds	r1, r2, r2
 80224c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80224c4:	415b      	adcs	r3, r3
 80224c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80224c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80224cc:	4641      	mov	r1, r8
 80224ce:	eb12 0a01 	adds.w	sl, r2, r1
 80224d2:	4649      	mov	r1, r9
 80224d4:	eb43 0b01 	adc.w	fp, r3, r1
 80224d8:	f04f 0200 	mov.w	r2, #0
 80224dc:	f04f 0300 	mov.w	r3, #0
 80224e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80224e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80224e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80224ec:	4692      	mov	sl, r2
 80224ee:	469b      	mov	fp, r3
 80224f0:	4643      	mov	r3, r8
 80224f2:	eb1a 0303 	adds.w	r3, sl, r3
 80224f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80224fa:	464b      	mov	r3, r9
 80224fc:	eb4b 0303 	adc.w	r3, fp, r3
 8022500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022508:	685b      	ldr	r3, [r3, #4]
 802250a:	2200      	movs	r2, #0
 802250c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022510:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022518:	460b      	mov	r3, r1
 802251a:	18db      	adds	r3, r3, r3
 802251c:	643b      	str	r3, [r7, #64]	; 0x40
 802251e:	4613      	mov	r3, r2
 8022520:	eb42 0303 	adc.w	r3, r2, r3
 8022524:	647b      	str	r3, [r7, #68]	; 0x44
 8022526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802252a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802252e:	f7de fca7 	bl	8000e80 <__aeabi_uldivmod>
 8022532:	4602      	mov	r2, r0
 8022534:	460b      	mov	r3, r1
 8022536:	4611      	mov	r1, r2
 8022538:	4b3b      	ldr	r3, [pc, #236]	; (8022628 <UART_SetConfig+0x2d4>)
 802253a:	fba3 2301 	umull	r2, r3, r3, r1
 802253e:	095b      	lsrs	r3, r3, #5
 8022540:	2264      	movs	r2, #100	; 0x64
 8022542:	fb02 f303 	mul.w	r3, r2, r3
 8022546:	1acb      	subs	r3, r1, r3
 8022548:	00db      	lsls	r3, r3, #3
 802254a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802254e:	4b36      	ldr	r3, [pc, #216]	; (8022628 <UART_SetConfig+0x2d4>)
 8022550:	fba3 2302 	umull	r2, r3, r3, r2
 8022554:	095b      	lsrs	r3, r3, #5
 8022556:	005b      	lsls	r3, r3, #1
 8022558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802255c:	441c      	add	r4, r3
 802255e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022562:	2200      	movs	r2, #0
 8022564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022568:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802256c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022570:	4642      	mov	r2, r8
 8022572:	464b      	mov	r3, r9
 8022574:	1891      	adds	r1, r2, r2
 8022576:	63b9      	str	r1, [r7, #56]	; 0x38
 8022578:	415b      	adcs	r3, r3
 802257a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802257c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022580:	4641      	mov	r1, r8
 8022582:	1851      	adds	r1, r2, r1
 8022584:	6339      	str	r1, [r7, #48]	; 0x30
 8022586:	4649      	mov	r1, r9
 8022588:	414b      	adcs	r3, r1
 802258a:	637b      	str	r3, [r7, #52]	; 0x34
 802258c:	f04f 0200 	mov.w	r2, #0
 8022590:	f04f 0300 	mov.w	r3, #0
 8022594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8022598:	4659      	mov	r1, fp
 802259a:	00cb      	lsls	r3, r1, #3
 802259c:	4651      	mov	r1, sl
 802259e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80225a2:	4651      	mov	r1, sl
 80225a4:	00ca      	lsls	r2, r1, #3
 80225a6:	4610      	mov	r0, r2
 80225a8:	4619      	mov	r1, r3
 80225aa:	4603      	mov	r3, r0
 80225ac:	4642      	mov	r2, r8
 80225ae:	189b      	adds	r3, r3, r2
 80225b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80225b4:	464b      	mov	r3, r9
 80225b6:	460a      	mov	r2, r1
 80225b8:	eb42 0303 	adc.w	r3, r2, r3
 80225bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80225c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80225c4:	685b      	ldr	r3, [r3, #4]
 80225c6:	2200      	movs	r2, #0
 80225c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80225cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80225d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80225d4:	460b      	mov	r3, r1
 80225d6:	18db      	adds	r3, r3, r3
 80225d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80225da:	4613      	mov	r3, r2
 80225dc:	eb42 0303 	adc.w	r3, r2, r3
 80225e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80225e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80225e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80225ea:	f7de fc49 	bl	8000e80 <__aeabi_uldivmod>
 80225ee:	4602      	mov	r2, r0
 80225f0:	460b      	mov	r3, r1
 80225f2:	4b0d      	ldr	r3, [pc, #52]	; (8022628 <UART_SetConfig+0x2d4>)
 80225f4:	fba3 1302 	umull	r1, r3, r3, r2
 80225f8:	095b      	lsrs	r3, r3, #5
 80225fa:	2164      	movs	r1, #100	; 0x64
 80225fc:	fb01 f303 	mul.w	r3, r1, r3
 8022600:	1ad3      	subs	r3, r2, r3
 8022602:	00db      	lsls	r3, r3, #3
 8022604:	3332      	adds	r3, #50	; 0x32
 8022606:	4a08      	ldr	r2, [pc, #32]	; (8022628 <UART_SetConfig+0x2d4>)
 8022608:	fba2 2303 	umull	r2, r3, r2, r3
 802260c:	095b      	lsrs	r3, r3, #5
 802260e:	f003 0207 	and.w	r2, r3, #7
 8022612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	4422      	add	r2, r4
 802261a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802261c:	e105      	b.n	802282a <UART_SetConfig+0x4d6>
 802261e:	bf00      	nop
 8022620:	40011000 	.word	0x40011000
 8022624:	40011400 	.word	0x40011400
 8022628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802262c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022630:	2200      	movs	r2, #0
 8022632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802263a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802263e:	4642      	mov	r2, r8
 8022640:	464b      	mov	r3, r9
 8022642:	1891      	adds	r1, r2, r2
 8022644:	6239      	str	r1, [r7, #32]
 8022646:	415b      	adcs	r3, r3
 8022648:	627b      	str	r3, [r7, #36]	; 0x24
 802264a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802264e:	4641      	mov	r1, r8
 8022650:	1854      	adds	r4, r2, r1
 8022652:	4649      	mov	r1, r9
 8022654:	eb43 0501 	adc.w	r5, r3, r1
 8022658:	f04f 0200 	mov.w	r2, #0
 802265c:	f04f 0300 	mov.w	r3, #0
 8022660:	00eb      	lsls	r3, r5, #3
 8022662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022666:	00e2      	lsls	r2, r4, #3
 8022668:	4614      	mov	r4, r2
 802266a:	461d      	mov	r5, r3
 802266c:	4643      	mov	r3, r8
 802266e:	18e3      	adds	r3, r4, r3
 8022670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022674:	464b      	mov	r3, r9
 8022676:	eb45 0303 	adc.w	r3, r5, r3
 802267a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022682:	685b      	ldr	r3, [r3, #4]
 8022684:	2200      	movs	r2, #0
 8022686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802268a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802268e:	f04f 0200 	mov.w	r2, #0
 8022692:	f04f 0300 	mov.w	r3, #0
 8022696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802269a:	4629      	mov	r1, r5
 802269c:	008b      	lsls	r3, r1, #2
 802269e:	4621      	mov	r1, r4
 80226a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80226a4:	4621      	mov	r1, r4
 80226a6:	008a      	lsls	r2, r1, #2
 80226a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80226ac:	f7de fbe8 	bl	8000e80 <__aeabi_uldivmod>
 80226b0:	4602      	mov	r2, r0
 80226b2:	460b      	mov	r3, r1
 80226b4:	4b60      	ldr	r3, [pc, #384]	; (8022838 <UART_SetConfig+0x4e4>)
 80226b6:	fba3 2302 	umull	r2, r3, r3, r2
 80226ba:	095b      	lsrs	r3, r3, #5
 80226bc:	011c      	lsls	r4, r3, #4
 80226be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80226c2:	2200      	movs	r2, #0
 80226c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80226c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80226cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80226d0:	4642      	mov	r2, r8
 80226d2:	464b      	mov	r3, r9
 80226d4:	1891      	adds	r1, r2, r2
 80226d6:	61b9      	str	r1, [r7, #24]
 80226d8:	415b      	adcs	r3, r3
 80226da:	61fb      	str	r3, [r7, #28]
 80226dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80226e0:	4641      	mov	r1, r8
 80226e2:	1851      	adds	r1, r2, r1
 80226e4:	6139      	str	r1, [r7, #16]
 80226e6:	4649      	mov	r1, r9
 80226e8:	414b      	adcs	r3, r1
 80226ea:	617b      	str	r3, [r7, #20]
 80226ec:	f04f 0200 	mov.w	r2, #0
 80226f0:	f04f 0300 	mov.w	r3, #0
 80226f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80226f8:	4659      	mov	r1, fp
 80226fa:	00cb      	lsls	r3, r1, #3
 80226fc:	4651      	mov	r1, sl
 80226fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022702:	4651      	mov	r1, sl
 8022704:	00ca      	lsls	r2, r1, #3
 8022706:	4610      	mov	r0, r2
 8022708:	4619      	mov	r1, r3
 802270a:	4603      	mov	r3, r0
 802270c:	4642      	mov	r2, r8
 802270e:	189b      	adds	r3, r3, r2
 8022710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022714:	464b      	mov	r3, r9
 8022716:	460a      	mov	r2, r1
 8022718:	eb42 0303 	adc.w	r3, r2, r3
 802271c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022724:	685b      	ldr	r3, [r3, #4]
 8022726:	2200      	movs	r2, #0
 8022728:	67bb      	str	r3, [r7, #120]	; 0x78
 802272a:	67fa      	str	r2, [r7, #124]	; 0x7c
 802272c:	f04f 0200 	mov.w	r2, #0
 8022730:	f04f 0300 	mov.w	r3, #0
 8022734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8022738:	4649      	mov	r1, r9
 802273a:	008b      	lsls	r3, r1, #2
 802273c:	4641      	mov	r1, r8
 802273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022742:	4641      	mov	r1, r8
 8022744:	008a      	lsls	r2, r1, #2
 8022746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802274a:	f7de fb99 	bl	8000e80 <__aeabi_uldivmod>
 802274e:	4602      	mov	r2, r0
 8022750:	460b      	mov	r3, r1
 8022752:	4b39      	ldr	r3, [pc, #228]	; (8022838 <UART_SetConfig+0x4e4>)
 8022754:	fba3 1302 	umull	r1, r3, r3, r2
 8022758:	095b      	lsrs	r3, r3, #5
 802275a:	2164      	movs	r1, #100	; 0x64
 802275c:	fb01 f303 	mul.w	r3, r1, r3
 8022760:	1ad3      	subs	r3, r2, r3
 8022762:	011b      	lsls	r3, r3, #4
 8022764:	3332      	adds	r3, #50	; 0x32
 8022766:	4a34      	ldr	r2, [pc, #208]	; (8022838 <UART_SetConfig+0x4e4>)
 8022768:	fba2 2303 	umull	r2, r3, r2, r3
 802276c:	095b      	lsrs	r3, r3, #5
 802276e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022772:	441c      	add	r4, r3
 8022774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022778:	2200      	movs	r2, #0
 802277a:	673b      	str	r3, [r7, #112]	; 0x70
 802277c:	677a      	str	r2, [r7, #116]	; 0x74
 802277e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8022782:	4642      	mov	r2, r8
 8022784:	464b      	mov	r3, r9
 8022786:	1891      	adds	r1, r2, r2
 8022788:	60b9      	str	r1, [r7, #8]
 802278a:	415b      	adcs	r3, r3
 802278c:	60fb      	str	r3, [r7, #12]
 802278e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022792:	4641      	mov	r1, r8
 8022794:	1851      	adds	r1, r2, r1
 8022796:	6039      	str	r1, [r7, #0]
 8022798:	4649      	mov	r1, r9
 802279a:	414b      	adcs	r3, r1
 802279c:	607b      	str	r3, [r7, #4]
 802279e:	f04f 0200 	mov.w	r2, #0
 80227a2:	f04f 0300 	mov.w	r3, #0
 80227a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80227aa:	4659      	mov	r1, fp
 80227ac:	00cb      	lsls	r3, r1, #3
 80227ae:	4651      	mov	r1, sl
 80227b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80227b4:	4651      	mov	r1, sl
 80227b6:	00ca      	lsls	r2, r1, #3
 80227b8:	4610      	mov	r0, r2
 80227ba:	4619      	mov	r1, r3
 80227bc:	4603      	mov	r3, r0
 80227be:	4642      	mov	r2, r8
 80227c0:	189b      	adds	r3, r3, r2
 80227c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80227c4:	464b      	mov	r3, r9
 80227c6:	460a      	mov	r2, r1
 80227c8:	eb42 0303 	adc.w	r3, r2, r3
 80227cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80227ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80227d2:	685b      	ldr	r3, [r3, #4]
 80227d4:	2200      	movs	r2, #0
 80227d6:	663b      	str	r3, [r7, #96]	; 0x60
 80227d8:	667a      	str	r2, [r7, #100]	; 0x64
 80227da:	f04f 0200 	mov.w	r2, #0
 80227de:	f04f 0300 	mov.w	r3, #0
 80227e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80227e6:	4649      	mov	r1, r9
 80227e8:	008b      	lsls	r3, r1, #2
 80227ea:	4641      	mov	r1, r8
 80227ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80227f0:	4641      	mov	r1, r8
 80227f2:	008a      	lsls	r2, r1, #2
 80227f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80227f8:	f7de fb42 	bl	8000e80 <__aeabi_uldivmod>
 80227fc:	4602      	mov	r2, r0
 80227fe:	460b      	mov	r3, r1
 8022800:	4b0d      	ldr	r3, [pc, #52]	; (8022838 <UART_SetConfig+0x4e4>)
 8022802:	fba3 1302 	umull	r1, r3, r3, r2
 8022806:	095b      	lsrs	r3, r3, #5
 8022808:	2164      	movs	r1, #100	; 0x64
 802280a:	fb01 f303 	mul.w	r3, r1, r3
 802280e:	1ad3      	subs	r3, r2, r3
 8022810:	011b      	lsls	r3, r3, #4
 8022812:	3332      	adds	r3, #50	; 0x32
 8022814:	4a08      	ldr	r2, [pc, #32]	; (8022838 <UART_SetConfig+0x4e4>)
 8022816:	fba2 2303 	umull	r2, r3, r2, r3
 802281a:	095b      	lsrs	r3, r3, #5
 802281c:	f003 020f 	and.w	r2, r3, #15
 8022820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	4422      	add	r2, r4
 8022828:	609a      	str	r2, [r3, #8]
}
 802282a:	bf00      	nop
 802282c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8022830:	46bd      	mov	sp, r7
 8022832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022836:	bf00      	nop
 8022838:	51eb851f 	.word	0x51eb851f

0802283c <atoi>:
 802283c:	220a      	movs	r2, #10
 802283e:	2100      	movs	r1, #0
 8022840:	f000 ba6a 	b.w	8022d18 <strtol>

08022844 <calloc>:
 8022844:	4b02      	ldr	r3, [pc, #8]	; (8022850 <calloc+0xc>)
 8022846:	460a      	mov	r2, r1
 8022848:	4601      	mov	r1, r0
 802284a:	6818      	ldr	r0, [r3, #0]
 802284c:	f000 b852 	b.w	80228f4 <_calloc_r>
 8022850:	20000164 	.word	0x20000164

08022854 <__errno>:
 8022854:	4b01      	ldr	r3, [pc, #4]	; (802285c <__errno+0x8>)
 8022856:	6818      	ldr	r0, [r3, #0]
 8022858:	4770      	bx	lr
 802285a:	bf00      	nop
 802285c:	20000164 	.word	0x20000164

08022860 <__libc_init_array>:
 8022860:	b570      	push	{r4, r5, r6, lr}
 8022862:	4d0d      	ldr	r5, [pc, #52]	; (8022898 <__libc_init_array+0x38>)
 8022864:	4c0d      	ldr	r4, [pc, #52]	; (802289c <__libc_init_array+0x3c>)
 8022866:	1b64      	subs	r4, r4, r5
 8022868:	10a4      	asrs	r4, r4, #2
 802286a:	2600      	movs	r6, #0
 802286c:	42a6      	cmp	r6, r4
 802286e:	d109      	bne.n	8022884 <__libc_init_array+0x24>
 8022870:	4d0b      	ldr	r5, [pc, #44]	; (80228a0 <__libc_init_array+0x40>)
 8022872:	4c0c      	ldr	r4, [pc, #48]	; (80228a4 <__libc_init_array+0x44>)
 8022874:	f002 ff00 	bl	8025678 <_init>
 8022878:	1b64      	subs	r4, r4, r5
 802287a:	10a4      	asrs	r4, r4, #2
 802287c:	2600      	movs	r6, #0
 802287e:	42a6      	cmp	r6, r4
 8022880:	d105      	bne.n	802288e <__libc_init_array+0x2e>
 8022882:	bd70      	pop	{r4, r5, r6, pc}
 8022884:	f855 3b04 	ldr.w	r3, [r5], #4
 8022888:	4798      	blx	r3
 802288a:	3601      	adds	r6, #1
 802288c:	e7ee      	b.n	802286c <__libc_init_array+0xc>
 802288e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022892:	4798      	blx	r3
 8022894:	3601      	adds	r6, #1
 8022896:	e7f2      	b.n	802287e <__libc_init_array+0x1e>
 8022898:	08029600 	.word	0x08029600
 802289c:	08029600 	.word	0x08029600
 80228a0:	08029600 	.word	0x08029600
 80228a4:	08029604 	.word	0x08029604

080228a8 <malloc>:
 80228a8:	4b02      	ldr	r3, [pc, #8]	; (80228b4 <malloc+0xc>)
 80228aa:	4601      	mov	r1, r0
 80228ac:	6818      	ldr	r0, [r3, #0]
 80228ae:	f000 b8a3 	b.w	80229f8 <_malloc_r>
 80228b2:	bf00      	nop
 80228b4:	20000164 	.word	0x20000164

080228b8 <free>:
 80228b8:	4b02      	ldr	r3, [pc, #8]	; (80228c4 <free+0xc>)
 80228ba:	4601      	mov	r1, r0
 80228bc:	6818      	ldr	r0, [r3, #0]
 80228be:	f000 b82f 	b.w	8022920 <_free_r>
 80228c2:	bf00      	nop
 80228c4:	20000164 	.word	0x20000164

080228c8 <memcpy>:
 80228c8:	440a      	add	r2, r1
 80228ca:	4291      	cmp	r1, r2
 80228cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80228d0:	d100      	bne.n	80228d4 <memcpy+0xc>
 80228d2:	4770      	bx	lr
 80228d4:	b510      	push	{r4, lr}
 80228d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80228da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80228de:	4291      	cmp	r1, r2
 80228e0:	d1f9      	bne.n	80228d6 <memcpy+0xe>
 80228e2:	bd10      	pop	{r4, pc}

080228e4 <memset>:
 80228e4:	4402      	add	r2, r0
 80228e6:	4603      	mov	r3, r0
 80228e8:	4293      	cmp	r3, r2
 80228ea:	d100      	bne.n	80228ee <memset+0xa>
 80228ec:	4770      	bx	lr
 80228ee:	f803 1b01 	strb.w	r1, [r3], #1
 80228f2:	e7f9      	b.n	80228e8 <memset+0x4>

080228f4 <_calloc_r>:
 80228f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80228f6:	fba1 2402 	umull	r2, r4, r1, r2
 80228fa:	b94c      	cbnz	r4, 8022910 <_calloc_r+0x1c>
 80228fc:	4611      	mov	r1, r2
 80228fe:	9201      	str	r2, [sp, #4]
 8022900:	f000 f87a 	bl	80229f8 <_malloc_r>
 8022904:	9a01      	ldr	r2, [sp, #4]
 8022906:	4605      	mov	r5, r0
 8022908:	b930      	cbnz	r0, 8022918 <_calloc_r+0x24>
 802290a:	4628      	mov	r0, r5
 802290c:	b003      	add	sp, #12
 802290e:	bd30      	pop	{r4, r5, pc}
 8022910:	220c      	movs	r2, #12
 8022912:	6002      	str	r2, [r0, #0]
 8022914:	2500      	movs	r5, #0
 8022916:	e7f8      	b.n	802290a <_calloc_r+0x16>
 8022918:	4621      	mov	r1, r4
 802291a:	f7ff ffe3 	bl	80228e4 <memset>
 802291e:	e7f4      	b.n	802290a <_calloc_r+0x16>

08022920 <_free_r>:
 8022920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022922:	2900      	cmp	r1, #0
 8022924:	d044      	beq.n	80229b0 <_free_r+0x90>
 8022926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802292a:	9001      	str	r0, [sp, #4]
 802292c:	2b00      	cmp	r3, #0
 802292e:	f1a1 0404 	sub.w	r4, r1, #4
 8022932:	bfb8      	it	lt
 8022934:	18e4      	addlt	r4, r4, r3
 8022936:	f000 f9f9 	bl	8022d2c <__malloc_lock>
 802293a:	4a1e      	ldr	r2, [pc, #120]	; (80229b4 <_free_r+0x94>)
 802293c:	9801      	ldr	r0, [sp, #4]
 802293e:	6813      	ldr	r3, [r2, #0]
 8022940:	b933      	cbnz	r3, 8022950 <_free_r+0x30>
 8022942:	6063      	str	r3, [r4, #4]
 8022944:	6014      	str	r4, [r2, #0]
 8022946:	b003      	add	sp, #12
 8022948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802294c:	f000 b9f4 	b.w	8022d38 <__malloc_unlock>
 8022950:	42a3      	cmp	r3, r4
 8022952:	d908      	bls.n	8022966 <_free_r+0x46>
 8022954:	6825      	ldr	r5, [r4, #0]
 8022956:	1961      	adds	r1, r4, r5
 8022958:	428b      	cmp	r3, r1
 802295a:	bf01      	itttt	eq
 802295c:	6819      	ldreq	r1, [r3, #0]
 802295e:	685b      	ldreq	r3, [r3, #4]
 8022960:	1949      	addeq	r1, r1, r5
 8022962:	6021      	streq	r1, [r4, #0]
 8022964:	e7ed      	b.n	8022942 <_free_r+0x22>
 8022966:	461a      	mov	r2, r3
 8022968:	685b      	ldr	r3, [r3, #4]
 802296a:	b10b      	cbz	r3, 8022970 <_free_r+0x50>
 802296c:	42a3      	cmp	r3, r4
 802296e:	d9fa      	bls.n	8022966 <_free_r+0x46>
 8022970:	6811      	ldr	r1, [r2, #0]
 8022972:	1855      	adds	r5, r2, r1
 8022974:	42a5      	cmp	r5, r4
 8022976:	d10b      	bne.n	8022990 <_free_r+0x70>
 8022978:	6824      	ldr	r4, [r4, #0]
 802297a:	4421      	add	r1, r4
 802297c:	1854      	adds	r4, r2, r1
 802297e:	42a3      	cmp	r3, r4
 8022980:	6011      	str	r1, [r2, #0]
 8022982:	d1e0      	bne.n	8022946 <_free_r+0x26>
 8022984:	681c      	ldr	r4, [r3, #0]
 8022986:	685b      	ldr	r3, [r3, #4]
 8022988:	6053      	str	r3, [r2, #4]
 802298a:	4421      	add	r1, r4
 802298c:	6011      	str	r1, [r2, #0]
 802298e:	e7da      	b.n	8022946 <_free_r+0x26>
 8022990:	d902      	bls.n	8022998 <_free_r+0x78>
 8022992:	230c      	movs	r3, #12
 8022994:	6003      	str	r3, [r0, #0]
 8022996:	e7d6      	b.n	8022946 <_free_r+0x26>
 8022998:	6825      	ldr	r5, [r4, #0]
 802299a:	1961      	adds	r1, r4, r5
 802299c:	428b      	cmp	r3, r1
 802299e:	bf04      	itt	eq
 80229a0:	6819      	ldreq	r1, [r3, #0]
 80229a2:	685b      	ldreq	r3, [r3, #4]
 80229a4:	6063      	str	r3, [r4, #4]
 80229a6:	bf04      	itt	eq
 80229a8:	1949      	addeq	r1, r1, r5
 80229aa:	6021      	streq	r1, [r4, #0]
 80229ac:	6054      	str	r4, [r2, #4]
 80229ae:	e7ca      	b.n	8022946 <_free_r+0x26>
 80229b0:	b003      	add	sp, #12
 80229b2:	bd30      	pop	{r4, r5, pc}
 80229b4:	20001d6c 	.word	0x20001d6c

080229b8 <sbrk_aligned>:
 80229b8:	b570      	push	{r4, r5, r6, lr}
 80229ba:	4e0e      	ldr	r6, [pc, #56]	; (80229f4 <sbrk_aligned+0x3c>)
 80229bc:	460c      	mov	r4, r1
 80229be:	6831      	ldr	r1, [r6, #0]
 80229c0:	4605      	mov	r5, r0
 80229c2:	b911      	cbnz	r1, 80229ca <sbrk_aligned+0x12>
 80229c4:	f000 f88c 	bl	8022ae0 <_sbrk_r>
 80229c8:	6030      	str	r0, [r6, #0]
 80229ca:	4621      	mov	r1, r4
 80229cc:	4628      	mov	r0, r5
 80229ce:	f000 f887 	bl	8022ae0 <_sbrk_r>
 80229d2:	1c43      	adds	r3, r0, #1
 80229d4:	d00a      	beq.n	80229ec <sbrk_aligned+0x34>
 80229d6:	1cc4      	adds	r4, r0, #3
 80229d8:	f024 0403 	bic.w	r4, r4, #3
 80229dc:	42a0      	cmp	r0, r4
 80229de:	d007      	beq.n	80229f0 <sbrk_aligned+0x38>
 80229e0:	1a21      	subs	r1, r4, r0
 80229e2:	4628      	mov	r0, r5
 80229e4:	f000 f87c 	bl	8022ae0 <_sbrk_r>
 80229e8:	3001      	adds	r0, #1
 80229ea:	d101      	bne.n	80229f0 <sbrk_aligned+0x38>
 80229ec:	f04f 34ff 	mov.w	r4, #4294967295
 80229f0:	4620      	mov	r0, r4
 80229f2:	bd70      	pop	{r4, r5, r6, pc}
 80229f4:	20001d70 	.word	0x20001d70

080229f8 <_malloc_r>:
 80229f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229fc:	1ccd      	adds	r5, r1, #3
 80229fe:	f025 0503 	bic.w	r5, r5, #3
 8022a02:	3508      	adds	r5, #8
 8022a04:	2d0c      	cmp	r5, #12
 8022a06:	bf38      	it	cc
 8022a08:	250c      	movcc	r5, #12
 8022a0a:	2d00      	cmp	r5, #0
 8022a0c:	4607      	mov	r7, r0
 8022a0e:	db01      	blt.n	8022a14 <_malloc_r+0x1c>
 8022a10:	42a9      	cmp	r1, r5
 8022a12:	d905      	bls.n	8022a20 <_malloc_r+0x28>
 8022a14:	230c      	movs	r3, #12
 8022a16:	603b      	str	r3, [r7, #0]
 8022a18:	2600      	movs	r6, #0
 8022a1a:	4630      	mov	r0, r6
 8022a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a20:	4e2e      	ldr	r6, [pc, #184]	; (8022adc <_malloc_r+0xe4>)
 8022a22:	f000 f983 	bl	8022d2c <__malloc_lock>
 8022a26:	6833      	ldr	r3, [r6, #0]
 8022a28:	461c      	mov	r4, r3
 8022a2a:	bb34      	cbnz	r4, 8022a7a <_malloc_r+0x82>
 8022a2c:	4629      	mov	r1, r5
 8022a2e:	4638      	mov	r0, r7
 8022a30:	f7ff ffc2 	bl	80229b8 <sbrk_aligned>
 8022a34:	1c43      	adds	r3, r0, #1
 8022a36:	4604      	mov	r4, r0
 8022a38:	d14d      	bne.n	8022ad6 <_malloc_r+0xde>
 8022a3a:	6834      	ldr	r4, [r6, #0]
 8022a3c:	4626      	mov	r6, r4
 8022a3e:	2e00      	cmp	r6, #0
 8022a40:	d140      	bne.n	8022ac4 <_malloc_r+0xcc>
 8022a42:	6823      	ldr	r3, [r4, #0]
 8022a44:	4631      	mov	r1, r6
 8022a46:	4638      	mov	r0, r7
 8022a48:	eb04 0803 	add.w	r8, r4, r3
 8022a4c:	f000 f848 	bl	8022ae0 <_sbrk_r>
 8022a50:	4580      	cmp	r8, r0
 8022a52:	d13a      	bne.n	8022aca <_malloc_r+0xd2>
 8022a54:	6821      	ldr	r1, [r4, #0]
 8022a56:	3503      	adds	r5, #3
 8022a58:	1a6d      	subs	r5, r5, r1
 8022a5a:	f025 0503 	bic.w	r5, r5, #3
 8022a5e:	3508      	adds	r5, #8
 8022a60:	2d0c      	cmp	r5, #12
 8022a62:	bf38      	it	cc
 8022a64:	250c      	movcc	r5, #12
 8022a66:	4629      	mov	r1, r5
 8022a68:	4638      	mov	r0, r7
 8022a6a:	f7ff ffa5 	bl	80229b8 <sbrk_aligned>
 8022a6e:	3001      	adds	r0, #1
 8022a70:	d02b      	beq.n	8022aca <_malloc_r+0xd2>
 8022a72:	6823      	ldr	r3, [r4, #0]
 8022a74:	442b      	add	r3, r5
 8022a76:	6023      	str	r3, [r4, #0]
 8022a78:	e00e      	b.n	8022a98 <_malloc_r+0xa0>
 8022a7a:	6822      	ldr	r2, [r4, #0]
 8022a7c:	1b52      	subs	r2, r2, r5
 8022a7e:	d41e      	bmi.n	8022abe <_malloc_r+0xc6>
 8022a80:	2a0b      	cmp	r2, #11
 8022a82:	d916      	bls.n	8022ab2 <_malloc_r+0xba>
 8022a84:	1961      	adds	r1, r4, r5
 8022a86:	42a3      	cmp	r3, r4
 8022a88:	6025      	str	r5, [r4, #0]
 8022a8a:	bf18      	it	ne
 8022a8c:	6059      	strne	r1, [r3, #4]
 8022a8e:	6863      	ldr	r3, [r4, #4]
 8022a90:	bf08      	it	eq
 8022a92:	6031      	streq	r1, [r6, #0]
 8022a94:	5162      	str	r2, [r4, r5]
 8022a96:	604b      	str	r3, [r1, #4]
 8022a98:	4638      	mov	r0, r7
 8022a9a:	f104 060b 	add.w	r6, r4, #11
 8022a9e:	f000 f94b 	bl	8022d38 <__malloc_unlock>
 8022aa2:	f026 0607 	bic.w	r6, r6, #7
 8022aa6:	1d23      	adds	r3, r4, #4
 8022aa8:	1af2      	subs	r2, r6, r3
 8022aaa:	d0b6      	beq.n	8022a1a <_malloc_r+0x22>
 8022aac:	1b9b      	subs	r3, r3, r6
 8022aae:	50a3      	str	r3, [r4, r2]
 8022ab0:	e7b3      	b.n	8022a1a <_malloc_r+0x22>
 8022ab2:	6862      	ldr	r2, [r4, #4]
 8022ab4:	42a3      	cmp	r3, r4
 8022ab6:	bf0c      	ite	eq
 8022ab8:	6032      	streq	r2, [r6, #0]
 8022aba:	605a      	strne	r2, [r3, #4]
 8022abc:	e7ec      	b.n	8022a98 <_malloc_r+0xa0>
 8022abe:	4623      	mov	r3, r4
 8022ac0:	6864      	ldr	r4, [r4, #4]
 8022ac2:	e7b2      	b.n	8022a2a <_malloc_r+0x32>
 8022ac4:	4634      	mov	r4, r6
 8022ac6:	6876      	ldr	r6, [r6, #4]
 8022ac8:	e7b9      	b.n	8022a3e <_malloc_r+0x46>
 8022aca:	230c      	movs	r3, #12
 8022acc:	603b      	str	r3, [r7, #0]
 8022ace:	4638      	mov	r0, r7
 8022ad0:	f000 f932 	bl	8022d38 <__malloc_unlock>
 8022ad4:	e7a1      	b.n	8022a1a <_malloc_r+0x22>
 8022ad6:	6025      	str	r5, [r4, #0]
 8022ad8:	e7de      	b.n	8022a98 <_malloc_r+0xa0>
 8022ada:	bf00      	nop
 8022adc:	20001d6c 	.word	0x20001d6c

08022ae0 <_sbrk_r>:
 8022ae0:	b538      	push	{r3, r4, r5, lr}
 8022ae2:	4d06      	ldr	r5, [pc, #24]	; (8022afc <_sbrk_r+0x1c>)
 8022ae4:	2300      	movs	r3, #0
 8022ae6:	4604      	mov	r4, r0
 8022ae8:	4608      	mov	r0, r1
 8022aea:	602b      	str	r3, [r5, #0]
 8022aec:	f7e1 f8ea 	bl	8003cc4 <_sbrk>
 8022af0:	1c43      	adds	r3, r0, #1
 8022af2:	d102      	bne.n	8022afa <_sbrk_r+0x1a>
 8022af4:	682b      	ldr	r3, [r5, #0]
 8022af6:	b103      	cbz	r3, 8022afa <_sbrk_r+0x1a>
 8022af8:	6023      	str	r3, [r4, #0]
 8022afa:	bd38      	pop	{r3, r4, r5, pc}
 8022afc:	20001d74 	.word	0x20001d74

08022b00 <strcasecmp>:
 8022b00:	b530      	push	{r4, r5, lr}
 8022b02:	4d0b      	ldr	r5, [pc, #44]	; (8022b30 <strcasecmp+0x30>)
 8022b04:	4604      	mov	r4, r0
 8022b06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022b0a:	5d5a      	ldrb	r2, [r3, r5]
 8022b0c:	f002 0203 	and.w	r2, r2, #3
 8022b10:	2a01      	cmp	r2, #1
 8022b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b16:	5ca8      	ldrb	r0, [r5, r2]
 8022b18:	f000 0003 	and.w	r0, r0, #3
 8022b1c:	bf08      	it	eq
 8022b1e:	3320      	addeq	r3, #32
 8022b20:	2801      	cmp	r0, #1
 8022b22:	bf08      	it	eq
 8022b24:	3220      	addeq	r2, #32
 8022b26:	1a98      	subs	r0, r3, r2
 8022b28:	d101      	bne.n	8022b2e <strcasecmp+0x2e>
 8022b2a:	2a00      	cmp	r2, #0
 8022b2c:	d1eb      	bne.n	8022b06 <strcasecmp+0x6>
 8022b2e:	bd30      	pop	{r4, r5, pc}
 8022b30:	08028eed 	.word	0x08028eed

08022b34 <strcat>:
 8022b34:	b510      	push	{r4, lr}
 8022b36:	4602      	mov	r2, r0
 8022b38:	7814      	ldrb	r4, [r2, #0]
 8022b3a:	4613      	mov	r3, r2
 8022b3c:	3201      	adds	r2, #1
 8022b3e:	2c00      	cmp	r4, #0
 8022b40:	d1fa      	bne.n	8022b38 <strcat+0x4>
 8022b42:	3b01      	subs	r3, #1
 8022b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022b4c:	2a00      	cmp	r2, #0
 8022b4e:	d1f9      	bne.n	8022b44 <strcat+0x10>
 8022b50:	bd10      	pop	{r4, pc}

08022b52 <strchr>:
 8022b52:	b2c9      	uxtb	r1, r1
 8022b54:	4603      	mov	r3, r0
 8022b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b5a:	b11a      	cbz	r2, 8022b64 <strchr+0x12>
 8022b5c:	428a      	cmp	r2, r1
 8022b5e:	d1f9      	bne.n	8022b54 <strchr+0x2>
 8022b60:	4618      	mov	r0, r3
 8022b62:	4770      	bx	lr
 8022b64:	2900      	cmp	r1, #0
 8022b66:	bf18      	it	ne
 8022b68:	2300      	movne	r3, #0
 8022b6a:	e7f9      	b.n	8022b60 <strchr+0xe>

08022b6c <strcpy>:
 8022b6c:	4603      	mov	r3, r0
 8022b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b72:	f803 2b01 	strb.w	r2, [r3], #1
 8022b76:	2a00      	cmp	r2, #0
 8022b78:	d1f9      	bne.n	8022b6e <strcpy+0x2>
 8022b7a:	4770      	bx	lr

08022b7c <strncasecmp>:
 8022b7c:	b570      	push	{r4, r5, r6, lr}
 8022b7e:	4e0f      	ldr	r6, [pc, #60]	; (8022bbc <strncasecmp+0x40>)
 8022b80:	4604      	mov	r4, r0
 8022b82:	440a      	add	r2, r1
 8022b84:	428a      	cmp	r2, r1
 8022b86:	d101      	bne.n	8022b8c <strncasecmp+0x10>
 8022b88:	2000      	movs	r0, #0
 8022b8a:	e013      	b.n	8022bb4 <strncasecmp+0x38>
 8022b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022b90:	5d98      	ldrb	r0, [r3, r6]
 8022b92:	f000 0003 	and.w	r0, r0, #3
 8022b96:	2801      	cmp	r0, #1
 8022b98:	f811 0b01 	ldrb.w	r0, [r1], #1
 8022b9c:	5c35      	ldrb	r5, [r6, r0]
 8022b9e:	f005 0503 	and.w	r5, r5, #3
 8022ba2:	bf08      	it	eq
 8022ba4:	3320      	addeq	r3, #32
 8022ba6:	2d01      	cmp	r5, #1
 8022ba8:	bf08      	it	eq
 8022baa:	3020      	addeq	r0, #32
 8022bac:	1a1b      	subs	r3, r3, r0
 8022bae:	d102      	bne.n	8022bb6 <strncasecmp+0x3a>
 8022bb0:	2800      	cmp	r0, #0
 8022bb2:	d1e7      	bne.n	8022b84 <strncasecmp+0x8>
 8022bb4:	bd70      	pop	{r4, r5, r6, pc}
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	e7fc      	b.n	8022bb4 <strncasecmp+0x38>
 8022bba:	bf00      	nop
 8022bbc:	08028eed 	.word	0x08028eed

08022bc0 <strncpy>:
 8022bc0:	b510      	push	{r4, lr}
 8022bc2:	3901      	subs	r1, #1
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	b132      	cbz	r2, 8022bd6 <strncpy+0x16>
 8022bc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022bcc:	f803 4b01 	strb.w	r4, [r3], #1
 8022bd0:	3a01      	subs	r2, #1
 8022bd2:	2c00      	cmp	r4, #0
 8022bd4:	d1f7      	bne.n	8022bc6 <strncpy+0x6>
 8022bd6:	441a      	add	r2, r3
 8022bd8:	2100      	movs	r1, #0
 8022bda:	4293      	cmp	r3, r2
 8022bdc:	d100      	bne.n	8022be0 <strncpy+0x20>
 8022bde:	bd10      	pop	{r4, pc}
 8022be0:	f803 1b01 	strb.w	r1, [r3], #1
 8022be4:	e7f9      	b.n	8022bda <strncpy+0x1a>

08022be6 <strstr>:
 8022be6:	780a      	ldrb	r2, [r1, #0]
 8022be8:	b570      	push	{r4, r5, r6, lr}
 8022bea:	b96a      	cbnz	r2, 8022c08 <strstr+0x22>
 8022bec:	bd70      	pop	{r4, r5, r6, pc}
 8022bee:	429a      	cmp	r2, r3
 8022bf0:	d109      	bne.n	8022c06 <strstr+0x20>
 8022bf2:	460c      	mov	r4, r1
 8022bf4:	4605      	mov	r5, r0
 8022bf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	d0f6      	beq.n	8022bec <strstr+0x6>
 8022bfe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022c02:	429e      	cmp	r6, r3
 8022c04:	d0f7      	beq.n	8022bf6 <strstr+0x10>
 8022c06:	3001      	adds	r0, #1
 8022c08:	7803      	ldrb	r3, [r0, #0]
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	d1ef      	bne.n	8022bee <strstr+0x8>
 8022c0e:	4618      	mov	r0, r3
 8022c10:	e7ec      	b.n	8022bec <strstr+0x6>
	...

08022c14 <_strtol_l.constprop.0>:
 8022c14:	2b01      	cmp	r3, #1
 8022c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c1a:	d001      	beq.n	8022c20 <_strtol_l.constprop.0+0xc>
 8022c1c:	2b24      	cmp	r3, #36	; 0x24
 8022c1e:	d906      	bls.n	8022c2e <_strtol_l.constprop.0+0x1a>
 8022c20:	f7ff fe18 	bl	8022854 <__errno>
 8022c24:	2316      	movs	r3, #22
 8022c26:	6003      	str	r3, [r0, #0]
 8022c28:	2000      	movs	r0, #0
 8022c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022d14 <_strtol_l.constprop.0+0x100>
 8022c32:	460d      	mov	r5, r1
 8022c34:	462e      	mov	r6, r5
 8022c36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022c3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8022c3e:	f017 0708 	ands.w	r7, r7, #8
 8022c42:	d1f7      	bne.n	8022c34 <_strtol_l.constprop.0+0x20>
 8022c44:	2c2d      	cmp	r4, #45	; 0x2d
 8022c46:	d132      	bne.n	8022cae <_strtol_l.constprop.0+0x9a>
 8022c48:	782c      	ldrb	r4, [r5, #0]
 8022c4a:	2701      	movs	r7, #1
 8022c4c:	1cb5      	adds	r5, r6, #2
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d05b      	beq.n	8022d0a <_strtol_l.constprop.0+0xf6>
 8022c52:	2b10      	cmp	r3, #16
 8022c54:	d109      	bne.n	8022c6a <_strtol_l.constprop.0+0x56>
 8022c56:	2c30      	cmp	r4, #48	; 0x30
 8022c58:	d107      	bne.n	8022c6a <_strtol_l.constprop.0+0x56>
 8022c5a:	782c      	ldrb	r4, [r5, #0]
 8022c5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022c60:	2c58      	cmp	r4, #88	; 0x58
 8022c62:	d14d      	bne.n	8022d00 <_strtol_l.constprop.0+0xec>
 8022c64:	786c      	ldrb	r4, [r5, #1]
 8022c66:	2310      	movs	r3, #16
 8022c68:	3502      	adds	r5, #2
 8022c6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022c6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022c72:	f04f 0c00 	mov.w	ip, #0
 8022c76:	fbb8 f9f3 	udiv	r9, r8, r3
 8022c7a:	4666      	mov	r6, ip
 8022c7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8022c80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022c84:	f1be 0f09 	cmp.w	lr, #9
 8022c88:	d816      	bhi.n	8022cb8 <_strtol_l.constprop.0+0xa4>
 8022c8a:	4674      	mov	r4, lr
 8022c8c:	42a3      	cmp	r3, r4
 8022c8e:	dd24      	ble.n	8022cda <_strtol_l.constprop.0+0xc6>
 8022c90:	f1bc 0f00 	cmp.w	ip, #0
 8022c94:	db1e      	blt.n	8022cd4 <_strtol_l.constprop.0+0xc0>
 8022c96:	45b1      	cmp	r9, r6
 8022c98:	d31c      	bcc.n	8022cd4 <_strtol_l.constprop.0+0xc0>
 8022c9a:	d101      	bne.n	8022ca0 <_strtol_l.constprop.0+0x8c>
 8022c9c:	45a2      	cmp	sl, r4
 8022c9e:	db19      	blt.n	8022cd4 <_strtol_l.constprop.0+0xc0>
 8022ca0:	fb06 4603 	mla	r6, r6, r3, r4
 8022ca4:	f04f 0c01 	mov.w	ip, #1
 8022ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022cac:	e7e8      	b.n	8022c80 <_strtol_l.constprop.0+0x6c>
 8022cae:	2c2b      	cmp	r4, #43	; 0x2b
 8022cb0:	bf04      	itt	eq
 8022cb2:	782c      	ldrbeq	r4, [r5, #0]
 8022cb4:	1cb5      	addeq	r5, r6, #2
 8022cb6:	e7ca      	b.n	8022c4e <_strtol_l.constprop.0+0x3a>
 8022cb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8022cbc:	f1be 0f19 	cmp.w	lr, #25
 8022cc0:	d801      	bhi.n	8022cc6 <_strtol_l.constprop.0+0xb2>
 8022cc2:	3c37      	subs	r4, #55	; 0x37
 8022cc4:	e7e2      	b.n	8022c8c <_strtol_l.constprop.0+0x78>
 8022cc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8022cca:	f1be 0f19 	cmp.w	lr, #25
 8022cce:	d804      	bhi.n	8022cda <_strtol_l.constprop.0+0xc6>
 8022cd0:	3c57      	subs	r4, #87	; 0x57
 8022cd2:	e7db      	b.n	8022c8c <_strtol_l.constprop.0+0x78>
 8022cd4:	f04f 3cff 	mov.w	ip, #4294967295
 8022cd8:	e7e6      	b.n	8022ca8 <_strtol_l.constprop.0+0x94>
 8022cda:	f1bc 0f00 	cmp.w	ip, #0
 8022cde:	da05      	bge.n	8022cec <_strtol_l.constprop.0+0xd8>
 8022ce0:	2322      	movs	r3, #34	; 0x22
 8022ce2:	6003      	str	r3, [r0, #0]
 8022ce4:	4646      	mov	r6, r8
 8022ce6:	b942      	cbnz	r2, 8022cfa <_strtol_l.constprop.0+0xe6>
 8022ce8:	4630      	mov	r0, r6
 8022cea:	e79e      	b.n	8022c2a <_strtol_l.constprop.0+0x16>
 8022cec:	b107      	cbz	r7, 8022cf0 <_strtol_l.constprop.0+0xdc>
 8022cee:	4276      	negs	r6, r6
 8022cf0:	2a00      	cmp	r2, #0
 8022cf2:	d0f9      	beq.n	8022ce8 <_strtol_l.constprop.0+0xd4>
 8022cf4:	f1bc 0f00 	cmp.w	ip, #0
 8022cf8:	d000      	beq.n	8022cfc <_strtol_l.constprop.0+0xe8>
 8022cfa:	1e69      	subs	r1, r5, #1
 8022cfc:	6011      	str	r1, [r2, #0]
 8022cfe:	e7f3      	b.n	8022ce8 <_strtol_l.constprop.0+0xd4>
 8022d00:	2430      	movs	r4, #48	; 0x30
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d1b1      	bne.n	8022c6a <_strtol_l.constprop.0+0x56>
 8022d06:	2308      	movs	r3, #8
 8022d08:	e7af      	b.n	8022c6a <_strtol_l.constprop.0+0x56>
 8022d0a:	2c30      	cmp	r4, #48	; 0x30
 8022d0c:	d0a5      	beq.n	8022c5a <_strtol_l.constprop.0+0x46>
 8022d0e:	230a      	movs	r3, #10
 8022d10:	e7ab      	b.n	8022c6a <_strtol_l.constprop.0+0x56>
 8022d12:	bf00      	nop
 8022d14:	08028eed 	.word	0x08028eed

08022d18 <strtol>:
 8022d18:	4613      	mov	r3, r2
 8022d1a:	460a      	mov	r2, r1
 8022d1c:	4601      	mov	r1, r0
 8022d1e:	4802      	ldr	r0, [pc, #8]	; (8022d28 <strtol+0x10>)
 8022d20:	6800      	ldr	r0, [r0, #0]
 8022d22:	f7ff bf77 	b.w	8022c14 <_strtol_l.constprop.0>
 8022d26:	bf00      	nop
 8022d28:	20000164 	.word	0x20000164

08022d2c <__malloc_lock>:
 8022d2c:	4801      	ldr	r0, [pc, #4]	; (8022d34 <__malloc_lock+0x8>)
 8022d2e:	f000 b809 	b.w	8022d44 <__retarget_lock_acquire_recursive>
 8022d32:	bf00      	nop
 8022d34:	20001d78 	.word	0x20001d78

08022d38 <__malloc_unlock>:
 8022d38:	4801      	ldr	r0, [pc, #4]	; (8022d40 <__malloc_unlock+0x8>)
 8022d3a:	f000 b804 	b.w	8022d46 <__retarget_lock_release_recursive>
 8022d3e:	bf00      	nop
 8022d40:	20001d78 	.word	0x20001d78

08022d44 <__retarget_lock_acquire_recursive>:
 8022d44:	4770      	bx	lr

08022d46 <__retarget_lock_release_recursive>:
 8022d46:	4770      	bx	lr

08022d48 <cos>:
 8022d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d4a:	ec53 2b10 	vmov	r2, r3, d0
 8022d4e:	4826      	ldr	r0, [pc, #152]	; (8022de8 <cos+0xa0>)
 8022d50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022d54:	4281      	cmp	r1, r0
 8022d56:	dc06      	bgt.n	8022d66 <cos+0x1e>
 8022d58:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8022de0 <cos+0x98>
 8022d5c:	b005      	add	sp, #20
 8022d5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d62:	f001 b9c1 	b.w	80240e8 <__kernel_cos>
 8022d66:	4821      	ldr	r0, [pc, #132]	; (8022dec <cos+0xa4>)
 8022d68:	4281      	cmp	r1, r0
 8022d6a:	dd09      	ble.n	8022d80 <cos+0x38>
 8022d6c:	ee10 0a10 	vmov	r0, s0
 8022d70:	4619      	mov	r1, r3
 8022d72:	f7dd fa3d 	bl	80001f0 <__aeabi_dsub>
 8022d76:	ec41 0b10 	vmov	d0, r0, r1
 8022d7a:	b005      	add	sp, #20
 8022d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022d80:	4668      	mov	r0, sp
 8022d82:	f000 f9fd 	bl	8023180 <__ieee754_rem_pio2>
 8022d86:	f000 0003 	and.w	r0, r0, #3
 8022d8a:	2801      	cmp	r0, #1
 8022d8c:	d00b      	beq.n	8022da6 <cos+0x5e>
 8022d8e:	2802      	cmp	r0, #2
 8022d90:	d016      	beq.n	8022dc0 <cos+0x78>
 8022d92:	b9e0      	cbnz	r0, 8022dce <cos+0x86>
 8022d94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022d98:	ed9d 0b00 	vldr	d0, [sp]
 8022d9c:	f001 f9a4 	bl	80240e8 <__kernel_cos>
 8022da0:	ec51 0b10 	vmov	r0, r1, d0
 8022da4:	e7e7      	b.n	8022d76 <cos+0x2e>
 8022da6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022daa:	ed9d 0b00 	vldr	d0, [sp]
 8022dae:	f001 fdb3 	bl	8024918 <__kernel_sin>
 8022db2:	ec53 2b10 	vmov	r2, r3, d0
 8022db6:	ee10 0a10 	vmov	r0, s0
 8022dba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022dbe:	e7da      	b.n	8022d76 <cos+0x2e>
 8022dc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022dc4:	ed9d 0b00 	vldr	d0, [sp]
 8022dc8:	f001 f98e 	bl	80240e8 <__kernel_cos>
 8022dcc:	e7f1      	b.n	8022db2 <cos+0x6a>
 8022dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022dd2:	ed9d 0b00 	vldr	d0, [sp]
 8022dd6:	2001      	movs	r0, #1
 8022dd8:	f001 fd9e 	bl	8024918 <__kernel_sin>
 8022ddc:	e7e0      	b.n	8022da0 <cos+0x58>
 8022dde:	bf00      	nop
	...
 8022de8:	3fe921fb 	.word	0x3fe921fb
 8022dec:	7fefffff 	.word	0x7fefffff

08022df0 <sin>:
 8022df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022df2:	ec53 2b10 	vmov	r2, r3, d0
 8022df6:	4828      	ldr	r0, [pc, #160]	; (8022e98 <sin+0xa8>)
 8022df8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022dfc:	4281      	cmp	r1, r0
 8022dfe:	dc07      	bgt.n	8022e10 <sin+0x20>
 8022e00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8022e90 <sin+0xa0>
 8022e04:	2000      	movs	r0, #0
 8022e06:	b005      	add	sp, #20
 8022e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e0c:	f001 bd84 	b.w	8024918 <__kernel_sin>
 8022e10:	4822      	ldr	r0, [pc, #136]	; (8022e9c <sin+0xac>)
 8022e12:	4281      	cmp	r1, r0
 8022e14:	dd09      	ble.n	8022e2a <sin+0x3a>
 8022e16:	ee10 0a10 	vmov	r0, s0
 8022e1a:	4619      	mov	r1, r3
 8022e1c:	f7dd f9e8 	bl	80001f0 <__aeabi_dsub>
 8022e20:	ec41 0b10 	vmov	d0, r0, r1
 8022e24:	b005      	add	sp, #20
 8022e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8022e2a:	4668      	mov	r0, sp
 8022e2c:	f000 f9a8 	bl	8023180 <__ieee754_rem_pio2>
 8022e30:	f000 0003 	and.w	r0, r0, #3
 8022e34:	2801      	cmp	r0, #1
 8022e36:	d00c      	beq.n	8022e52 <sin+0x62>
 8022e38:	2802      	cmp	r0, #2
 8022e3a:	d011      	beq.n	8022e60 <sin+0x70>
 8022e3c:	b9f0      	cbnz	r0, 8022e7c <sin+0x8c>
 8022e3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e42:	ed9d 0b00 	vldr	d0, [sp]
 8022e46:	2001      	movs	r0, #1
 8022e48:	f001 fd66 	bl	8024918 <__kernel_sin>
 8022e4c:	ec51 0b10 	vmov	r0, r1, d0
 8022e50:	e7e6      	b.n	8022e20 <sin+0x30>
 8022e52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e56:	ed9d 0b00 	vldr	d0, [sp]
 8022e5a:	f001 f945 	bl	80240e8 <__kernel_cos>
 8022e5e:	e7f5      	b.n	8022e4c <sin+0x5c>
 8022e60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e64:	ed9d 0b00 	vldr	d0, [sp]
 8022e68:	2001      	movs	r0, #1
 8022e6a:	f001 fd55 	bl	8024918 <__kernel_sin>
 8022e6e:	ec53 2b10 	vmov	r2, r3, d0
 8022e72:	ee10 0a10 	vmov	r0, s0
 8022e76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022e7a:	e7d1      	b.n	8022e20 <sin+0x30>
 8022e7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e80:	ed9d 0b00 	vldr	d0, [sp]
 8022e84:	f001 f930 	bl	80240e8 <__kernel_cos>
 8022e88:	e7f1      	b.n	8022e6e <sin+0x7e>
 8022e8a:	bf00      	nop
 8022e8c:	f3af 8000 	nop.w
	...
 8022e98:	3fe921fb 	.word	0x3fe921fb
 8022e9c:	7fefffff 	.word	0x7fefffff

08022ea0 <cosf>:
 8022ea0:	ee10 3a10 	vmov	r3, s0
 8022ea4:	b507      	push	{r0, r1, r2, lr}
 8022ea6:	4a1e      	ldr	r2, [pc, #120]	; (8022f20 <cosf+0x80>)
 8022ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022eac:	4293      	cmp	r3, r2
 8022eae:	dc06      	bgt.n	8022ebe <cosf+0x1e>
 8022eb0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8022f24 <cosf+0x84>
 8022eb4:	b003      	add	sp, #12
 8022eb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8022eba:	f001 bdeb 	b.w	8024a94 <__kernel_cosf>
 8022ebe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022ec2:	db04      	blt.n	8022ece <cosf+0x2e>
 8022ec4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8022ec8:	b003      	add	sp, #12
 8022eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8022ece:	4668      	mov	r0, sp
 8022ed0:	f000 ffc8 	bl	8023e64 <__ieee754_rem_pio2f>
 8022ed4:	f000 0003 	and.w	r0, r0, #3
 8022ed8:	2801      	cmp	r0, #1
 8022eda:	d009      	beq.n	8022ef0 <cosf+0x50>
 8022edc:	2802      	cmp	r0, #2
 8022ede:	d010      	beq.n	8022f02 <cosf+0x62>
 8022ee0:	b9b0      	cbnz	r0, 8022f10 <cosf+0x70>
 8022ee2:	eddd 0a01 	vldr	s1, [sp, #4]
 8022ee6:	ed9d 0a00 	vldr	s0, [sp]
 8022eea:	f001 fdd3 	bl	8024a94 <__kernel_cosf>
 8022eee:	e7eb      	b.n	8022ec8 <cosf+0x28>
 8022ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8022ef4:	ed9d 0a00 	vldr	s0, [sp]
 8022ef8:	f002 f8a2 	bl	8025040 <__kernel_sinf>
 8022efc:	eeb1 0a40 	vneg.f32	s0, s0
 8022f00:	e7e2      	b.n	8022ec8 <cosf+0x28>
 8022f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8022f06:	ed9d 0a00 	vldr	s0, [sp]
 8022f0a:	f001 fdc3 	bl	8024a94 <__kernel_cosf>
 8022f0e:	e7f5      	b.n	8022efc <cosf+0x5c>
 8022f10:	eddd 0a01 	vldr	s1, [sp, #4]
 8022f14:	ed9d 0a00 	vldr	s0, [sp]
 8022f18:	2001      	movs	r0, #1
 8022f1a:	f002 f891 	bl	8025040 <__kernel_sinf>
 8022f1e:	e7d3      	b.n	8022ec8 <cosf+0x28>
 8022f20:	3f490fd8 	.word	0x3f490fd8
 8022f24:	00000000 	.word	0x00000000

08022f28 <lrintf>:
 8022f28:	ee10 3a10 	vmov	r3, s0
 8022f2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022f30:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8022f34:	281e      	cmp	r0, #30
 8022f36:	b082      	sub	sp, #8
 8022f38:	dc2e      	bgt.n	8022f98 <lrintf+0x70>
 8022f3a:	1c41      	adds	r1, r0, #1
 8022f3c:	da02      	bge.n	8022f44 <lrintf+0x1c>
 8022f3e:	2000      	movs	r0, #0
 8022f40:	b002      	add	sp, #8
 8022f42:	4770      	bx	lr
 8022f44:	2816      	cmp	r0, #22
 8022f46:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8022f4a:	dd09      	ble.n	8022f60 <lrintf+0x38>
 8022f4c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022f50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022f54:	3a96      	subs	r2, #150	; 0x96
 8022f56:	4090      	lsls	r0, r2
 8022f58:	2900      	cmp	r1, #0
 8022f5a:	d0f1      	beq.n	8022f40 <lrintf+0x18>
 8022f5c:	4240      	negs	r0, r0
 8022f5e:	e7ef      	b.n	8022f40 <lrintf+0x18>
 8022f60:	4b10      	ldr	r3, [pc, #64]	; (8022fa4 <lrintf+0x7c>)
 8022f62:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022f66:	ed93 7a00 	vldr	s14, [r3]
 8022f6a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8022f6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022f72:	eddd 7a01 	vldr	s15, [sp, #4]
 8022f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022f7a:	ee17 3a90 	vmov	r3, s15
 8022f7e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022f82:	d0dc      	beq.n	8022f3e <lrintf+0x16>
 8022f84:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022f88:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8022f8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022f90:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022f94:	40d8      	lsrs	r0, r3
 8022f96:	e7df      	b.n	8022f58 <lrintf+0x30>
 8022f98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022f9c:	ee17 0a90 	vmov	r0, s15
 8022fa0:	e7ce      	b.n	8022f40 <lrintf+0x18>
 8022fa2:	bf00      	nop
 8022fa4:	08028ff0 	.word	0x08028ff0

08022fa8 <sinf>:
 8022fa8:	ee10 3a10 	vmov	r3, s0
 8022fac:	b507      	push	{r0, r1, r2, lr}
 8022fae:	4a1f      	ldr	r2, [pc, #124]	; (802302c <sinf+0x84>)
 8022fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022fb4:	4293      	cmp	r3, r2
 8022fb6:	dc07      	bgt.n	8022fc8 <sinf+0x20>
 8022fb8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8023030 <sinf+0x88>
 8022fbc:	2000      	movs	r0, #0
 8022fbe:	b003      	add	sp, #12
 8022fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022fc4:	f002 b83c 	b.w	8025040 <__kernel_sinf>
 8022fc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022fcc:	db04      	blt.n	8022fd8 <sinf+0x30>
 8022fce:	ee30 0a40 	vsub.f32	s0, s0, s0
 8022fd2:	b003      	add	sp, #12
 8022fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8022fd8:	4668      	mov	r0, sp
 8022fda:	f000 ff43 	bl	8023e64 <__ieee754_rem_pio2f>
 8022fde:	f000 0003 	and.w	r0, r0, #3
 8022fe2:	2801      	cmp	r0, #1
 8022fe4:	d00a      	beq.n	8022ffc <sinf+0x54>
 8022fe6:	2802      	cmp	r0, #2
 8022fe8:	d00f      	beq.n	802300a <sinf+0x62>
 8022fea:	b9c0      	cbnz	r0, 802301e <sinf+0x76>
 8022fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8022ff0:	ed9d 0a00 	vldr	s0, [sp]
 8022ff4:	2001      	movs	r0, #1
 8022ff6:	f002 f823 	bl	8025040 <__kernel_sinf>
 8022ffa:	e7ea      	b.n	8022fd2 <sinf+0x2a>
 8022ffc:	eddd 0a01 	vldr	s1, [sp, #4]
 8023000:	ed9d 0a00 	vldr	s0, [sp]
 8023004:	f001 fd46 	bl	8024a94 <__kernel_cosf>
 8023008:	e7e3      	b.n	8022fd2 <sinf+0x2a>
 802300a:	eddd 0a01 	vldr	s1, [sp, #4]
 802300e:	ed9d 0a00 	vldr	s0, [sp]
 8023012:	2001      	movs	r0, #1
 8023014:	f002 f814 	bl	8025040 <__kernel_sinf>
 8023018:	eeb1 0a40 	vneg.f32	s0, s0
 802301c:	e7d9      	b.n	8022fd2 <sinf+0x2a>
 802301e:	eddd 0a01 	vldr	s1, [sp, #4]
 8023022:	ed9d 0a00 	vldr	s0, [sp]
 8023026:	f001 fd35 	bl	8024a94 <__kernel_cosf>
 802302a:	e7f5      	b.n	8023018 <sinf+0x70>
 802302c:	3f490fd8 	.word	0x3f490fd8
 8023030:	00000000 	.word	0x00000000

08023034 <acosf>:
 8023034:	b508      	push	{r3, lr}
 8023036:	ed2d 8b02 	vpush	{d8}
 802303a:	eeb0 8a40 	vmov.f32	s16, s0
 802303e:	f000 faab 	bl	8023598 <__ieee754_acosf>
 8023042:	eeb4 8a48 	vcmp.f32	s16, s16
 8023046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802304a:	eef0 8a40 	vmov.f32	s17, s0
 802304e:	d615      	bvs.n	802307c <acosf+0x48>
 8023050:	eeb0 0a48 	vmov.f32	s0, s16
 8023054:	f002 fa42 	bl	80254dc <fabsf>
 8023058:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802305c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023064:	dd0a      	ble.n	802307c <acosf+0x48>
 8023066:	f7ff fbf5 	bl	8022854 <__errno>
 802306a:	ecbd 8b02 	vpop	{d8}
 802306e:	2321      	movs	r3, #33	; 0x21
 8023070:	6003      	str	r3, [r0, #0]
 8023072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023076:	4804      	ldr	r0, [pc, #16]	; (8023088 <acosf+0x54>)
 8023078:	f002 ba86 	b.w	8025588 <nanf>
 802307c:	eeb0 0a68 	vmov.f32	s0, s17
 8023080:	ecbd 8b02 	vpop	{d8}
 8023084:	bd08      	pop	{r3, pc}
 8023086:	bf00      	nop
 8023088:	08028ff8 	.word	0x08028ff8

0802308c <atan2f>:
 802308c:	f000 bb7c 	b.w	8023788 <__ieee754_atan2f>

08023090 <powf>:
 8023090:	b508      	push	{r3, lr}
 8023092:	ed2d 8b04 	vpush	{d8-d9}
 8023096:	eeb0 8a60 	vmov.f32	s16, s1
 802309a:	eeb0 9a40 	vmov.f32	s18, s0
 802309e:	f000 fc13 	bl	80238c8 <__ieee754_powf>
 80230a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80230a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230aa:	eef0 8a40 	vmov.f32	s17, s0
 80230ae:	d63e      	bvs.n	802312e <powf+0x9e>
 80230b0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80230b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230b8:	d112      	bne.n	80230e0 <powf+0x50>
 80230ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80230be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230c2:	d039      	beq.n	8023138 <powf+0xa8>
 80230c4:	eeb0 0a48 	vmov.f32	s0, s16
 80230c8:	f002 fa0f 	bl	80254ea <finitef>
 80230cc:	b378      	cbz	r0, 802312e <powf+0x9e>
 80230ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80230d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230d6:	d52a      	bpl.n	802312e <powf+0x9e>
 80230d8:	f7ff fbbc 	bl	8022854 <__errno>
 80230dc:	2322      	movs	r3, #34	; 0x22
 80230de:	e014      	b.n	802310a <powf+0x7a>
 80230e0:	f002 fa03 	bl	80254ea <finitef>
 80230e4:	b998      	cbnz	r0, 802310e <powf+0x7e>
 80230e6:	eeb0 0a49 	vmov.f32	s0, s18
 80230ea:	f002 f9fe 	bl	80254ea <finitef>
 80230ee:	b170      	cbz	r0, 802310e <powf+0x7e>
 80230f0:	eeb0 0a48 	vmov.f32	s0, s16
 80230f4:	f002 f9f9 	bl	80254ea <finitef>
 80230f8:	b148      	cbz	r0, 802310e <powf+0x7e>
 80230fa:	eef4 8a68 	vcmp.f32	s17, s17
 80230fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023102:	d7e9      	bvc.n	80230d8 <powf+0x48>
 8023104:	f7ff fba6 	bl	8022854 <__errno>
 8023108:	2321      	movs	r3, #33	; 0x21
 802310a:	6003      	str	r3, [r0, #0]
 802310c:	e00f      	b.n	802312e <powf+0x9e>
 802310e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8023112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023116:	d10a      	bne.n	802312e <powf+0x9e>
 8023118:	eeb0 0a49 	vmov.f32	s0, s18
 802311c:	f002 f9e5 	bl	80254ea <finitef>
 8023120:	b128      	cbz	r0, 802312e <powf+0x9e>
 8023122:	eeb0 0a48 	vmov.f32	s0, s16
 8023126:	f002 f9e0 	bl	80254ea <finitef>
 802312a:	2800      	cmp	r0, #0
 802312c:	d1d4      	bne.n	80230d8 <powf+0x48>
 802312e:	eeb0 0a68 	vmov.f32	s0, s17
 8023132:	ecbd 8b04 	vpop	{d8-d9}
 8023136:	bd08      	pop	{r3, pc}
 8023138:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802313c:	e7f7      	b.n	802312e <powf+0x9e>
	...

08023140 <sqrtf>:
 8023140:	b508      	push	{r3, lr}
 8023142:	ed2d 8b02 	vpush	{d8}
 8023146:	eeb0 8a40 	vmov.f32	s16, s0
 802314a:	f000 ffc7 	bl	80240dc <__ieee754_sqrtf>
 802314e:	eeb4 8a48 	vcmp.f32	s16, s16
 8023152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023156:	d60c      	bvs.n	8023172 <sqrtf+0x32>
 8023158:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023178 <sqrtf+0x38>
 802315c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023164:	d505      	bpl.n	8023172 <sqrtf+0x32>
 8023166:	f7ff fb75 	bl	8022854 <__errno>
 802316a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802316e:	2321      	movs	r3, #33	; 0x21
 8023170:	6003      	str	r3, [r0, #0]
 8023172:	ecbd 8b02 	vpop	{d8}
 8023176:	bd08      	pop	{r3, pc}
	...

08023180 <__ieee754_rem_pio2>:
 8023180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023184:	ed2d 8b02 	vpush	{d8}
 8023188:	ec55 4b10 	vmov	r4, r5, d0
 802318c:	4bca      	ldr	r3, [pc, #808]	; (80234b8 <__ieee754_rem_pio2+0x338>)
 802318e:	b08b      	sub	sp, #44	; 0x2c
 8023190:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023194:	4598      	cmp	r8, r3
 8023196:	4682      	mov	sl, r0
 8023198:	9502      	str	r5, [sp, #8]
 802319a:	dc08      	bgt.n	80231ae <__ieee754_rem_pio2+0x2e>
 802319c:	2200      	movs	r2, #0
 802319e:	2300      	movs	r3, #0
 80231a0:	ed80 0b00 	vstr	d0, [r0]
 80231a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80231a8:	f04f 0b00 	mov.w	fp, #0
 80231ac:	e028      	b.n	8023200 <__ieee754_rem_pio2+0x80>
 80231ae:	4bc3      	ldr	r3, [pc, #780]	; (80234bc <__ieee754_rem_pio2+0x33c>)
 80231b0:	4598      	cmp	r8, r3
 80231b2:	dc78      	bgt.n	80232a6 <__ieee754_rem_pio2+0x126>
 80231b4:	9b02      	ldr	r3, [sp, #8]
 80231b6:	4ec2      	ldr	r6, [pc, #776]	; (80234c0 <__ieee754_rem_pio2+0x340>)
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	ee10 0a10 	vmov	r0, s0
 80231be:	a3b0      	add	r3, pc, #704	; (adr r3, 8023480 <__ieee754_rem_pio2+0x300>)
 80231c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c4:	4629      	mov	r1, r5
 80231c6:	dd39      	ble.n	802323c <__ieee754_rem_pio2+0xbc>
 80231c8:	f7dd f812 	bl	80001f0 <__aeabi_dsub>
 80231cc:	45b0      	cmp	r8, r6
 80231ce:	4604      	mov	r4, r0
 80231d0:	460d      	mov	r5, r1
 80231d2:	d01b      	beq.n	802320c <__ieee754_rem_pio2+0x8c>
 80231d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8023488 <__ieee754_rem_pio2+0x308>)
 80231d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231da:	f7dd f809 	bl	80001f0 <__aeabi_dsub>
 80231de:	4602      	mov	r2, r0
 80231e0:	460b      	mov	r3, r1
 80231e2:	e9ca 2300 	strd	r2, r3, [sl]
 80231e6:	4620      	mov	r0, r4
 80231e8:	4629      	mov	r1, r5
 80231ea:	f7dd f801 	bl	80001f0 <__aeabi_dsub>
 80231ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8023488 <__ieee754_rem_pio2+0x308>)
 80231f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231f4:	f7dc fffc 	bl	80001f0 <__aeabi_dsub>
 80231f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80231fc:	f04f 0b01 	mov.w	fp, #1
 8023200:	4658      	mov	r0, fp
 8023202:	b00b      	add	sp, #44	; 0x2c
 8023204:	ecbd 8b02 	vpop	{d8}
 8023208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802320c:	a3a0      	add	r3, pc, #640	; (adr r3, 8023490 <__ieee754_rem_pio2+0x310>)
 802320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023212:	f7dc ffed 	bl	80001f0 <__aeabi_dsub>
 8023216:	a3a0      	add	r3, pc, #640	; (adr r3, 8023498 <__ieee754_rem_pio2+0x318>)
 8023218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802321c:	4604      	mov	r4, r0
 802321e:	460d      	mov	r5, r1
 8023220:	f7dc ffe6 	bl	80001f0 <__aeabi_dsub>
 8023224:	4602      	mov	r2, r0
 8023226:	460b      	mov	r3, r1
 8023228:	e9ca 2300 	strd	r2, r3, [sl]
 802322c:	4620      	mov	r0, r4
 802322e:	4629      	mov	r1, r5
 8023230:	f7dc ffde 	bl	80001f0 <__aeabi_dsub>
 8023234:	a398      	add	r3, pc, #608	; (adr r3, 8023498 <__ieee754_rem_pio2+0x318>)
 8023236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802323a:	e7db      	b.n	80231f4 <__ieee754_rem_pio2+0x74>
 802323c:	f7dc ffda 	bl	80001f4 <__adddf3>
 8023240:	45b0      	cmp	r8, r6
 8023242:	4604      	mov	r4, r0
 8023244:	460d      	mov	r5, r1
 8023246:	d016      	beq.n	8023276 <__ieee754_rem_pio2+0xf6>
 8023248:	a38f      	add	r3, pc, #572	; (adr r3, 8023488 <__ieee754_rem_pio2+0x308>)
 802324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802324e:	f7dc ffd1 	bl	80001f4 <__adddf3>
 8023252:	4602      	mov	r2, r0
 8023254:	460b      	mov	r3, r1
 8023256:	e9ca 2300 	strd	r2, r3, [sl]
 802325a:	4620      	mov	r0, r4
 802325c:	4629      	mov	r1, r5
 802325e:	f7dc ffc7 	bl	80001f0 <__aeabi_dsub>
 8023262:	a389      	add	r3, pc, #548	; (adr r3, 8023488 <__ieee754_rem_pio2+0x308>)
 8023264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023268:	f7dc ffc4 	bl	80001f4 <__adddf3>
 802326c:	f04f 3bff 	mov.w	fp, #4294967295
 8023270:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023274:	e7c4      	b.n	8023200 <__ieee754_rem_pio2+0x80>
 8023276:	a386      	add	r3, pc, #536	; (adr r3, 8023490 <__ieee754_rem_pio2+0x310>)
 8023278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802327c:	f7dc ffba 	bl	80001f4 <__adddf3>
 8023280:	a385      	add	r3, pc, #532	; (adr r3, 8023498 <__ieee754_rem_pio2+0x318>)
 8023282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023286:	4604      	mov	r4, r0
 8023288:	460d      	mov	r5, r1
 802328a:	f7dc ffb3 	bl	80001f4 <__adddf3>
 802328e:	4602      	mov	r2, r0
 8023290:	460b      	mov	r3, r1
 8023292:	e9ca 2300 	strd	r2, r3, [sl]
 8023296:	4620      	mov	r0, r4
 8023298:	4629      	mov	r1, r5
 802329a:	f7dc ffa9 	bl	80001f0 <__aeabi_dsub>
 802329e:	a37e      	add	r3, pc, #504	; (adr r3, 8023498 <__ieee754_rem_pio2+0x318>)
 80232a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a4:	e7e0      	b.n	8023268 <__ieee754_rem_pio2+0xe8>
 80232a6:	4b87      	ldr	r3, [pc, #540]	; (80234c4 <__ieee754_rem_pio2+0x344>)
 80232a8:	4598      	cmp	r8, r3
 80232aa:	f300 80d9 	bgt.w	8023460 <__ieee754_rem_pio2+0x2e0>
 80232ae:	f001 ff31 	bl	8025114 <fabs>
 80232b2:	ec55 4b10 	vmov	r4, r5, d0
 80232b6:	ee10 0a10 	vmov	r0, s0
 80232ba:	a379      	add	r3, pc, #484	; (adr r3, 80234a0 <__ieee754_rem_pio2+0x320>)
 80232bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232c0:	4629      	mov	r1, r5
 80232c2:	f7dd f94d 	bl	8000560 <__aeabi_dmul>
 80232c6:	4b80      	ldr	r3, [pc, #512]	; (80234c8 <__ieee754_rem_pio2+0x348>)
 80232c8:	2200      	movs	r2, #0
 80232ca:	f7dc ff93 	bl	80001f4 <__adddf3>
 80232ce:	f7dd fbe1 	bl	8000a94 <__aeabi_d2iz>
 80232d2:	4683      	mov	fp, r0
 80232d4:	f7dd f8da 	bl	800048c <__aeabi_i2d>
 80232d8:	4602      	mov	r2, r0
 80232da:	460b      	mov	r3, r1
 80232dc:	ec43 2b18 	vmov	d8, r2, r3
 80232e0:	a367      	add	r3, pc, #412	; (adr r3, 8023480 <__ieee754_rem_pio2+0x300>)
 80232e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e6:	f7dd f93b 	bl	8000560 <__aeabi_dmul>
 80232ea:	4602      	mov	r2, r0
 80232ec:	460b      	mov	r3, r1
 80232ee:	4620      	mov	r0, r4
 80232f0:	4629      	mov	r1, r5
 80232f2:	f7dc ff7d 	bl	80001f0 <__aeabi_dsub>
 80232f6:	a364      	add	r3, pc, #400	; (adr r3, 8023488 <__ieee754_rem_pio2+0x308>)
 80232f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232fc:	4606      	mov	r6, r0
 80232fe:	460f      	mov	r7, r1
 8023300:	ec51 0b18 	vmov	r0, r1, d8
 8023304:	f7dd f92c 	bl	8000560 <__aeabi_dmul>
 8023308:	f1bb 0f1f 	cmp.w	fp, #31
 802330c:	4604      	mov	r4, r0
 802330e:	460d      	mov	r5, r1
 8023310:	dc0d      	bgt.n	802332e <__ieee754_rem_pio2+0x1ae>
 8023312:	4b6e      	ldr	r3, [pc, #440]	; (80234cc <__ieee754_rem_pio2+0x34c>)
 8023314:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802331c:	4543      	cmp	r3, r8
 802331e:	d006      	beq.n	802332e <__ieee754_rem_pio2+0x1ae>
 8023320:	4622      	mov	r2, r4
 8023322:	462b      	mov	r3, r5
 8023324:	4630      	mov	r0, r6
 8023326:	4639      	mov	r1, r7
 8023328:	f7dc ff62 	bl	80001f0 <__aeabi_dsub>
 802332c:	e00f      	b.n	802334e <__ieee754_rem_pio2+0x1ce>
 802332e:	462b      	mov	r3, r5
 8023330:	4622      	mov	r2, r4
 8023332:	4630      	mov	r0, r6
 8023334:	4639      	mov	r1, r7
 8023336:	f7dc ff5b 	bl	80001f0 <__aeabi_dsub>
 802333a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802333e:	9303      	str	r3, [sp, #12]
 8023340:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023344:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023348:	f1b8 0f10 	cmp.w	r8, #16
 802334c:	dc02      	bgt.n	8023354 <__ieee754_rem_pio2+0x1d4>
 802334e:	e9ca 0100 	strd	r0, r1, [sl]
 8023352:	e039      	b.n	80233c8 <__ieee754_rem_pio2+0x248>
 8023354:	a34e      	add	r3, pc, #312	; (adr r3, 8023490 <__ieee754_rem_pio2+0x310>)
 8023356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802335a:	ec51 0b18 	vmov	r0, r1, d8
 802335e:	f7dd f8ff 	bl	8000560 <__aeabi_dmul>
 8023362:	4604      	mov	r4, r0
 8023364:	460d      	mov	r5, r1
 8023366:	4602      	mov	r2, r0
 8023368:	460b      	mov	r3, r1
 802336a:	4630      	mov	r0, r6
 802336c:	4639      	mov	r1, r7
 802336e:	f7dc ff3f 	bl	80001f0 <__aeabi_dsub>
 8023372:	4602      	mov	r2, r0
 8023374:	460b      	mov	r3, r1
 8023376:	4680      	mov	r8, r0
 8023378:	4689      	mov	r9, r1
 802337a:	4630      	mov	r0, r6
 802337c:	4639      	mov	r1, r7
 802337e:	f7dc ff37 	bl	80001f0 <__aeabi_dsub>
 8023382:	4622      	mov	r2, r4
 8023384:	462b      	mov	r3, r5
 8023386:	f7dc ff33 	bl	80001f0 <__aeabi_dsub>
 802338a:	a343      	add	r3, pc, #268	; (adr r3, 8023498 <__ieee754_rem_pio2+0x318>)
 802338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023390:	4604      	mov	r4, r0
 8023392:	460d      	mov	r5, r1
 8023394:	ec51 0b18 	vmov	r0, r1, d8
 8023398:	f7dd f8e2 	bl	8000560 <__aeabi_dmul>
 802339c:	4622      	mov	r2, r4
 802339e:	462b      	mov	r3, r5
 80233a0:	f7dc ff26 	bl	80001f0 <__aeabi_dsub>
 80233a4:	4602      	mov	r2, r0
 80233a6:	460b      	mov	r3, r1
 80233a8:	4604      	mov	r4, r0
 80233aa:	460d      	mov	r5, r1
 80233ac:	4640      	mov	r0, r8
 80233ae:	4649      	mov	r1, r9
 80233b0:	f7dc ff1e 	bl	80001f0 <__aeabi_dsub>
 80233b4:	9a03      	ldr	r2, [sp, #12]
 80233b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80233ba:	1ad3      	subs	r3, r2, r3
 80233bc:	2b31      	cmp	r3, #49	; 0x31
 80233be:	dc24      	bgt.n	802340a <__ieee754_rem_pio2+0x28a>
 80233c0:	e9ca 0100 	strd	r0, r1, [sl]
 80233c4:	4646      	mov	r6, r8
 80233c6:	464f      	mov	r7, r9
 80233c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80233cc:	4630      	mov	r0, r6
 80233ce:	4642      	mov	r2, r8
 80233d0:	464b      	mov	r3, r9
 80233d2:	4639      	mov	r1, r7
 80233d4:	f7dc ff0c 	bl	80001f0 <__aeabi_dsub>
 80233d8:	462b      	mov	r3, r5
 80233da:	4622      	mov	r2, r4
 80233dc:	f7dc ff08 	bl	80001f0 <__aeabi_dsub>
 80233e0:	9b02      	ldr	r3, [sp, #8]
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80233e8:	f6bf af0a 	bge.w	8023200 <__ieee754_rem_pio2+0x80>
 80233ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80233f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80233f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80233f8:	f8ca 8000 	str.w	r8, [sl]
 80233fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8023400:	f8ca 300c 	str.w	r3, [sl, #12]
 8023404:	f1cb 0b00 	rsb	fp, fp, #0
 8023408:	e6fa      	b.n	8023200 <__ieee754_rem_pio2+0x80>
 802340a:	a327      	add	r3, pc, #156	; (adr r3, 80234a8 <__ieee754_rem_pio2+0x328>)
 802340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023410:	ec51 0b18 	vmov	r0, r1, d8
 8023414:	f7dd f8a4 	bl	8000560 <__aeabi_dmul>
 8023418:	4604      	mov	r4, r0
 802341a:	460d      	mov	r5, r1
 802341c:	4602      	mov	r2, r0
 802341e:	460b      	mov	r3, r1
 8023420:	4640      	mov	r0, r8
 8023422:	4649      	mov	r1, r9
 8023424:	f7dc fee4 	bl	80001f0 <__aeabi_dsub>
 8023428:	4602      	mov	r2, r0
 802342a:	460b      	mov	r3, r1
 802342c:	4606      	mov	r6, r0
 802342e:	460f      	mov	r7, r1
 8023430:	4640      	mov	r0, r8
 8023432:	4649      	mov	r1, r9
 8023434:	f7dc fedc 	bl	80001f0 <__aeabi_dsub>
 8023438:	4622      	mov	r2, r4
 802343a:	462b      	mov	r3, r5
 802343c:	f7dc fed8 	bl	80001f0 <__aeabi_dsub>
 8023440:	a31b      	add	r3, pc, #108	; (adr r3, 80234b0 <__ieee754_rem_pio2+0x330>)
 8023442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023446:	4604      	mov	r4, r0
 8023448:	460d      	mov	r5, r1
 802344a:	ec51 0b18 	vmov	r0, r1, d8
 802344e:	f7dd f887 	bl	8000560 <__aeabi_dmul>
 8023452:	4622      	mov	r2, r4
 8023454:	462b      	mov	r3, r5
 8023456:	f7dc fecb 	bl	80001f0 <__aeabi_dsub>
 802345a:	4604      	mov	r4, r0
 802345c:	460d      	mov	r5, r1
 802345e:	e75f      	b.n	8023320 <__ieee754_rem_pio2+0x1a0>
 8023460:	4b1b      	ldr	r3, [pc, #108]	; (80234d0 <__ieee754_rem_pio2+0x350>)
 8023462:	4598      	cmp	r8, r3
 8023464:	dd36      	ble.n	80234d4 <__ieee754_rem_pio2+0x354>
 8023466:	ee10 2a10 	vmov	r2, s0
 802346a:	462b      	mov	r3, r5
 802346c:	4620      	mov	r0, r4
 802346e:	4629      	mov	r1, r5
 8023470:	f7dc febe 	bl	80001f0 <__aeabi_dsub>
 8023474:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023478:	e9ca 0100 	strd	r0, r1, [sl]
 802347c:	e694      	b.n	80231a8 <__ieee754_rem_pio2+0x28>
 802347e:	bf00      	nop
 8023480:	54400000 	.word	0x54400000
 8023484:	3ff921fb 	.word	0x3ff921fb
 8023488:	1a626331 	.word	0x1a626331
 802348c:	3dd0b461 	.word	0x3dd0b461
 8023490:	1a600000 	.word	0x1a600000
 8023494:	3dd0b461 	.word	0x3dd0b461
 8023498:	2e037073 	.word	0x2e037073
 802349c:	3ba3198a 	.word	0x3ba3198a
 80234a0:	6dc9c883 	.word	0x6dc9c883
 80234a4:	3fe45f30 	.word	0x3fe45f30
 80234a8:	2e000000 	.word	0x2e000000
 80234ac:	3ba3198a 	.word	0x3ba3198a
 80234b0:	252049c1 	.word	0x252049c1
 80234b4:	397b839a 	.word	0x397b839a
 80234b8:	3fe921fb 	.word	0x3fe921fb
 80234bc:	4002d97b 	.word	0x4002d97b
 80234c0:	3ff921fb 	.word	0x3ff921fb
 80234c4:	413921fb 	.word	0x413921fb
 80234c8:	3fe00000 	.word	0x3fe00000
 80234cc:	08028ffc 	.word	0x08028ffc
 80234d0:	7fefffff 	.word	0x7fefffff
 80234d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80234d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80234dc:	ee10 0a10 	vmov	r0, s0
 80234e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80234e4:	ee10 6a10 	vmov	r6, s0
 80234e8:	460f      	mov	r7, r1
 80234ea:	f7dd fad3 	bl	8000a94 <__aeabi_d2iz>
 80234ee:	f7dc ffcd 	bl	800048c <__aeabi_i2d>
 80234f2:	4602      	mov	r2, r0
 80234f4:	460b      	mov	r3, r1
 80234f6:	4630      	mov	r0, r6
 80234f8:	4639      	mov	r1, r7
 80234fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80234fe:	f7dc fe77 	bl	80001f0 <__aeabi_dsub>
 8023502:	4b23      	ldr	r3, [pc, #140]	; (8023590 <__ieee754_rem_pio2+0x410>)
 8023504:	2200      	movs	r2, #0
 8023506:	f7dd f82b 	bl	8000560 <__aeabi_dmul>
 802350a:	460f      	mov	r7, r1
 802350c:	4606      	mov	r6, r0
 802350e:	f7dd fac1 	bl	8000a94 <__aeabi_d2iz>
 8023512:	f7dc ffbb 	bl	800048c <__aeabi_i2d>
 8023516:	4602      	mov	r2, r0
 8023518:	460b      	mov	r3, r1
 802351a:	4630      	mov	r0, r6
 802351c:	4639      	mov	r1, r7
 802351e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023522:	f7dc fe65 	bl	80001f0 <__aeabi_dsub>
 8023526:	4b1a      	ldr	r3, [pc, #104]	; (8023590 <__ieee754_rem_pio2+0x410>)
 8023528:	2200      	movs	r2, #0
 802352a:	f7dd f819 	bl	8000560 <__aeabi_dmul>
 802352e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023532:	ad04      	add	r5, sp, #16
 8023534:	f04f 0803 	mov.w	r8, #3
 8023538:	46a9      	mov	r9, r5
 802353a:	2600      	movs	r6, #0
 802353c:	2700      	movs	r7, #0
 802353e:	4632      	mov	r2, r6
 8023540:	463b      	mov	r3, r7
 8023542:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8023546:	46c3      	mov	fp, r8
 8023548:	3d08      	subs	r5, #8
 802354a:	f108 38ff 	add.w	r8, r8, #4294967295
 802354e:	f7dd fa6f 	bl	8000a30 <__aeabi_dcmpeq>
 8023552:	2800      	cmp	r0, #0
 8023554:	d1f3      	bne.n	802353e <__ieee754_rem_pio2+0x3be>
 8023556:	4b0f      	ldr	r3, [pc, #60]	; (8023594 <__ieee754_rem_pio2+0x414>)
 8023558:	9301      	str	r3, [sp, #4]
 802355a:	2302      	movs	r3, #2
 802355c:	9300      	str	r3, [sp, #0]
 802355e:	4622      	mov	r2, r4
 8023560:	465b      	mov	r3, fp
 8023562:	4651      	mov	r1, sl
 8023564:	4648      	mov	r0, r9
 8023566:	f000 fe87 	bl	8024278 <__kernel_rem_pio2>
 802356a:	9b02      	ldr	r3, [sp, #8]
 802356c:	2b00      	cmp	r3, #0
 802356e:	4683      	mov	fp, r0
 8023570:	f6bf ae46 	bge.w	8023200 <__ieee754_rem_pio2+0x80>
 8023574:	e9da 2100 	ldrd	r2, r1, [sl]
 8023578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802357c:	e9ca 2300 	strd	r2, r3, [sl]
 8023580:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8023584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023588:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802358c:	e73a      	b.n	8023404 <__ieee754_rem_pio2+0x284>
 802358e:	bf00      	nop
 8023590:	41700000 	.word	0x41700000
 8023594:	0802907c 	.word	0x0802907c

08023598 <__ieee754_acosf>:
 8023598:	b508      	push	{r3, lr}
 802359a:	ee10 3a10 	vmov	r3, s0
 802359e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80235a2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80235a6:	ed2d 8b0c 	vpush	{d8-d13}
 80235aa:	d10a      	bne.n	80235c2 <__ieee754_acosf+0x2a>
 80235ac:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8023744 <__ieee754_acosf+0x1ac>
 80235b0:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8023748 <__ieee754_acosf+0x1b0>
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	bfd8      	it	le
 80235b8:	eeb0 0a48 	vmovle.f32	s0, s16
 80235bc:	ecbd 8b0c 	vpop	{d8-d13}
 80235c0:	bd08      	pop	{r3, pc}
 80235c2:	dd04      	ble.n	80235ce <__ieee754_acosf+0x36>
 80235c4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80235c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80235cc:	e7f6      	b.n	80235bc <__ieee754_acosf+0x24>
 80235ce:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80235d2:	da3c      	bge.n	802364e <__ieee754_acosf+0xb6>
 80235d4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80235d8:	f340 80b1 	ble.w	802373e <__ieee754_acosf+0x1a6>
 80235dc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80235e0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 802374c <__ieee754_acosf+0x1b4>
 80235e4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8023750 <__ieee754_acosf+0x1b8>
 80235e8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8023754 <__ieee754_acosf+0x1bc>
 80235ec:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8023758 <__ieee754_acosf+0x1c0>
 80235f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80235f4:	eddf 6a59 	vldr	s13, [pc, #356]	; 802375c <__ieee754_acosf+0x1c4>
 80235f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80235fc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8023760 <__ieee754_acosf+0x1c8>
 8023600:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023604:	eddf 6a57 	vldr	s13, [pc, #348]	; 8023764 <__ieee754_acosf+0x1cc>
 8023608:	eee7 6a27 	vfma.f32	s13, s14, s15
 802360c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8023768 <__ieee754_acosf+0x1d0>
 8023610:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023614:	eddf 6a55 	vldr	s13, [pc, #340]	; 802376c <__ieee754_acosf+0x1d4>
 8023618:	eea7 6aa6 	vfma.f32	s12, s15, s13
 802361c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8023770 <__ieee754_acosf+0x1d8>
 8023620:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023624:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8023774 <__ieee754_acosf+0x1dc>
 8023628:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802362c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023630:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802363c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023640:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8023778 <__ieee754_acosf+0x1e0>
 8023644:	ee30 0a48 	vsub.f32	s0, s0, s16
 8023648:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802364c:	e7b6      	b.n	80235bc <__ieee754_acosf+0x24>
 802364e:	2b00      	cmp	r3, #0
 8023650:	eddf da3e 	vldr	s27, [pc, #248]	; 802374c <__ieee754_acosf+0x1b4>
 8023654:	eddf ca3e 	vldr	s25, [pc, #248]	; 8023750 <__ieee754_acosf+0x1b8>
 8023658:	ed9f ca40 	vldr	s24, [pc, #256]	; 802375c <__ieee754_acosf+0x1c4>
 802365c:	eddf ba40 	vldr	s23, [pc, #256]	; 8023760 <__ieee754_acosf+0x1c8>
 8023660:	ed9f ba40 	vldr	s22, [pc, #256]	; 8023764 <__ieee754_acosf+0x1cc>
 8023664:	eddf 8a40 	vldr	s17, [pc, #256]	; 8023768 <__ieee754_acosf+0x1d0>
 8023668:	ed9f da40 	vldr	s26, [pc, #256]	; 802376c <__ieee754_acosf+0x1d4>
 802366c:	eddf aa39 	vldr	s21, [pc, #228]	; 8023754 <__ieee754_acosf+0x1bc>
 8023670:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8023770 <__ieee754_acosf+0x1d8>
 8023674:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8023774 <__ieee754_acosf+0x1dc>
 8023678:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 802367c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023680:	da28      	bge.n	80236d4 <__ieee754_acosf+0x13c>
 8023682:	ee30 0a09 	vadd.f32	s0, s0, s18
 8023686:	ee20 0a27 	vmul.f32	s0, s0, s15
 802368a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 802368e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8023692:	eeac ca80 	vfma.f32	s24, s25, s0
 8023696:	eeaa aa80 	vfma.f32	s20, s21, s0
 802369a:	eeec ba00 	vfma.f32	s23, s24, s0
 802369e:	eeea 9a00 	vfma.f32	s19, s20, s0
 80236a2:	eeab ba80 	vfma.f32	s22, s23, s0
 80236a6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80236aa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80236ae:	ee68 8a80 	vmul.f32	s17, s17, s0
 80236b2:	f000 fd13 	bl	80240dc <__ieee754_sqrtf>
 80236b6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80236ba:	eddf 7a30 	vldr	s15, [pc, #192]	; 802377c <__ieee754_acosf+0x1e4>
 80236be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80236c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80236c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80236ca:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8023780 <__ieee754_acosf+0x1e8>
 80236ce:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80236d2:	e773      	b.n	80235bc <__ieee754_acosf+0x24>
 80236d4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80236d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80236dc:	eeb0 0a48 	vmov.f32	s0, s16
 80236e0:	f000 fcfc 	bl	80240dc <__ieee754_sqrtf>
 80236e4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80236e8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80236ec:	eeac ca88 	vfma.f32	s24, s25, s16
 80236f0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80236f4:	eeec ba08 	vfma.f32	s23, s24, s16
 80236f8:	ee10 3a10 	vmov	r3, s0
 80236fc:	eeab ba88 	vfma.f32	s22, s23, s16
 8023700:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023704:	f023 030f 	bic.w	r3, r3, #15
 8023708:	eeea 9a08 	vfma.f32	s19, s20, s16
 802370c:	ee07 3a90 	vmov	s15, r3
 8023710:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8023714:	eeb0 6a48 	vmov.f32	s12, s16
 8023718:	eea7 6ae7 	vfms.f32	s12, s15, s15
 802371c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8023720:	ee70 6a27 	vadd.f32	s13, s0, s15
 8023724:	ee68 8a88 	vmul.f32	s17, s17, s16
 8023728:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802372c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8023730:	eea0 7a26 	vfma.f32	s14, s0, s13
 8023734:	ee37 0a87 	vadd.f32	s0, s15, s14
 8023738:	ee30 0a00 	vadd.f32	s0, s0, s0
 802373c:	e73e      	b.n	80235bc <__ieee754_acosf+0x24>
 802373e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8023784 <__ieee754_acosf+0x1ec>
 8023742:	e73b      	b.n	80235bc <__ieee754_acosf+0x24>
 8023744:	00000000 	.word	0x00000000
 8023748:	40490fdb 	.word	0x40490fdb
 802374c:	3811ef08 	.word	0x3811ef08
 8023750:	3a4f7f04 	.word	0x3a4f7f04
 8023754:	bf303361 	.word	0xbf303361
 8023758:	33a22168 	.word	0x33a22168
 802375c:	bd241146 	.word	0xbd241146
 8023760:	3e4e0aa8 	.word	0x3e4e0aa8
 8023764:	bea6b090 	.word	0xbea6b090
 8023768:	3e2aaaab 	.word	0x3e2aaaab
 802376c:	3d9dc62e 	.word	0x3d9dc62e
 8023770:	4001572d 	.word	0x4001572d
 8023774:	c019d139 	.word	0xc019d139
 8023778:	3fc90fda 	.word	0x3fc90fda
 802377c:	b3a22168 	.word	0xb3a22168
 8023780:	40490fda 	.word	0x40490fda
 8023784:	3fc90fdb 	.word	0x3fc90fdb

08023788 <__ieee754_atan2f>:
 8023788:	ee10 2a90 	vmov	r2, s1
 802378c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8023790:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023794:	b510      	push	{r4, lr}
 8023796:	eef0 7a40 	vmov.f32	s15, s0
 802379a:	dc06      	bgt.n	80237aa <__ieee754_atan2f+0x22>
 802379c:	ee10 0a10 	vmov	r0, s0
 80237a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80237a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80237a8:	dd04      	ble.n	80237b4 <__ieee754_atan2f+0x2c>
 80237aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80237ae:	eeb0 0a67 	vmov.f32	s0, s15
 80237b2:	bd10      	pop	{r4, pc}
 80237b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80237b8:	d103      	bne.n	80237c2 <__ieee754_atan2f+0x3a>
 80237ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237be:	f001 bdb9 	b.w	8025334 <atanf>
 80237c2:	1794      	asrs	r4, r2, #30
 80237c4:	f004 0402 	and.w	r4, r4, #2
 80237c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80237cc:	b943      	cbnz	r3, 80237e0 <__ieee754_atan2f+0x58>
 80237ce:	2c02      	cmp	r4, #2
 80237d0:	d05e      	beq.n	8023890 <__ieee754_atan2f+0x108>
 80237d2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80238a4 <__ieee754_atan2f+0x11c>
 80237d6:	2c03      	cmp	r4, #3
 80237d8:	bf08      	it	eq
 80237da:	eef0 7a47 	vmoveq.f32	s15, s14
 80237de:	e7e6      	b.n	80237ae <__ieee754_atan2f+0x26>
 80237e0:	b941      	cbnz	r1, 80237f4 <__ieee754_atan2f+0x6c>
 80237e2:	eddf 7a31 	vldr	s15, [pc, #196]	; 80238a8 <__ieee754_atan2f+0x120>
 80237e6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80238ac <__ieee754_atan2f+0x124>
 80237ea:	2800      	cmp	r0, #0
 80237ec:	bfb8      	it	lt
 80237ee:	eef0 7a40 	vmovlt.f32	s15, s0
 80237f2:	e7dc      	b.n	80237ae <__ieee754_atan2f+0x26>
 80237f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80237f8:	d110      	bne.n	802381c <__ieee754_atan2f+0x94>
 80237fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80237fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8023802:	d107      	bne.n	8023814 <__ieee754_atan2f+0x8c>
 8023804:	2c02      	cmp	r4, #2
 8023806:	d846      	bhi.n	8023896 <__ieee754_atan2f+0x10e>
 8023808:	4b29      	ldr	r3, [pc, #164]	; (80238b0 <__ieee754_atan2f+0x128>)
 802380a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802380e:	edd4 7a00 	vldr	s15, [r4]
 8023812:	e7cc      	b.n	80237ae <__ieee754_atan2f+0x26>
 8023814:	2c02      	cmp	r4, #2
 8023816:	d841      	bhi.n	802389c <__ieee754_atan2f+0x114>
 8023818:	4b26      	ldr	r3, [pc, #152]	; (80238b4 <__ieee754_atan2f+0x12c>)
 802381a:	e7f6      	b.n	802380a <__ieee754_atan2f+0x82>
 802381c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023820:	d0df      	beq.n	80237e2 <__ieee754_atan2f+0x5a>
 8023822:	1a5b      	subs	r3, r3, r1
 8023824:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8023828:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802382c:	da1a      	bge.n	8023864 <__ieee754_atan2f+0xdc>
 802382e:	2a00      	cmp	r2, #0
 8023830:	da01      	bge.n	8023836 <__ieee754_atan2f+0xae>
 8023832:	313c      	adds	r1, #60	; 0x3c
 8023834:	db19      	blt.n	802386a <__ieee754_atan2f+0xe2>
 8023836:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802383a:	f001 fe4f 	bl	80254dc <fabsf>
 802383e:	f001 fd79 	bl	8025334 <atanf>
 8023842:	eef0 7a40 	vmov.f32	s15, s0
 8023846:	2c01      	cmp	r4, #1
 8023848:	d012      	beq.n	8023870 <__ieee754_atan2f+0xe8>
 802384a:	2c02      	cmp	r4, #2
 802384c:	d017      	beq.n	802387e <__ieee754_atan2f+0xf6>
 802384e:	2c00      	cmp	r4, #0
 8023850:	d0ad      	beq.n	80237ae <__ieee754_atan2f+0x26>
 8023852:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80238b8 <__ieee754_atan2f+0x130>
 8023856:	ee77 7a80 	vadd.f32	s15, s15, s0
 802385a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80238bc <__ieee754_atan2f+0x134>
 802385e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023862:	e7a4      	b.n	80237ae <__ieee754_atan2f+0x26>
 8023864:	eddf 7a10 	vldr	s15, [pc, #64]	; 80238a8 <__ieee754_atan2f+0x120>
 8023868:	e7ed      	b.n	8023846 <__ieee754_atan2f+0xbe>
 802386a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80238c0 <__ieee754_atan2f+0x138>
 802386e:	e7ea      	b.n	8023846 <__ieee754_atan2f+0xbe>
 8023870:	ee17 3a90 	vmov	r3, s15
 8023874:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023878:	ee07 3a90 	vmov	s15, r3
 802387c:	e797      	b.n	80237ae <__ieee754_atan2f+0x26>
 802387e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80238b8 <__ieee754_atan2f+0x130>
 8023882:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023886:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80238bc <__ieee754_atan2f+0x134>
 802388a:	ee70 7a67 	vsub.f32	s15, s0, s15
 802388e:	e78e      	b.n	80237ae <__ieee754_atan2f+0x26>
 8023890:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80238bc <__ieee754_atan2f+0x134>
 8023894:	e78b      	b.n	80237ae <__ieee754_atan2f+0x26>
 8023896:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80238c4 <__ieee754_atan2f+0x13c>
 802389a:	e788      	b.n	80237ae <__ieee754_atan2f+0x26>
 802389c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80238c0 <__ieee754_atan2f+0x138>
 80238a0:	e785      	b.n	80237ae <__ieee754_atan2f+0x26>
 80238a2:	bf00      	nop
 80238a4:	c0490fdb 	.word	0xc0490fdb
 80238a8:	3fc90fdb 	.word	0x3fc90fdb
 80238ac:	bfc90fdb 	.word	0xbfc90fdb
 80238b0:	08029184 	.word	0x08029184
 80238b4:	08029190 	.word	0x08029190
 80238b8:	33bbbd2e 	.word	0x33bbbd2e
 80238bc:	40490fdb 	.word	0x40490fdb
 80238c0:	00000000 	.word	0x00000000
 80238c4:	3f490fdb 	.word	0x3f490fdb

080238c8 <__ieee754_powf>:
 80238c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238cc:	ee10 4a90 	vmov	r4, s1
 80238d0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80238d4:	ed2d 8b02 	vpush	{d8}
 80238d8:	ee10 6a10 	vmov	r6, s0
 80238dc:	eeb0 8a40 	vmov.f32	s16, s0
 80238e0:	eef0 8a60 	vmov.f32	s17, s1
 80238e4:	d10c      	bne.n	8023900 <__ieee754_powf+0x38>
 80238e6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80238ea:	0076      	lsls	r6, r6, #1
 80238ec:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80238f0:	f240 8296 	bls.w	8023e20 <__ieee754_powf+0x558>
 80238f4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80238f8:	ecbd 8b02 	vpop	{d8}
 80238fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023900:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023904:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8023908:	dcf4      	bgt.n	80238f4 <__ieee754_powf+0x2c>
 802390a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802390e:	dd08      	ble.n	8023922 <__ieee754_powf+0x5a>
 8023910:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8023914:	d1ee      	bne.n	80238f4 <__ieee754_powf+0x2c>
 8023916:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802391a:	0064      	lsls	r4, r4, #1
 802391c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8023920:	e7e6      	b.n	80238f0 <__ieee754_powf+0x28>
 8023922:	2e00      	cmp	r6, #0
 8023924:	da20      	bge.n	8023968 <__ieee754_powf+0xa0>
 8023926:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 802392a:	da2d      	bge.n	8023988 <__ieee754_powf+0xc0>
 802392c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8023930:	f2c0 827f 	blt.w	8023e32 <__ieee754_powf+0x56a>
 8023934:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8023938:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802393c:	fa48 f703 	asr.w	r7, r8, r3
 8023940:	fa07 f303 	lsl.w	r3, r7, r3
 8023944:	4543      	cmp	r3, r8
 8023946:	f040 8274 	bne.w	8023e32 <__ieee754_powf+0x56a>
 802394a:	f007 0701 	and.w	r7, r7, #1
 802394e:	f1c7 0702 	rsb	r7, r7, #2
 8023952:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8023956:	d11f      	bne.n	8023998 <__ieee754_powf+0xd0>
 8023958:	2c00      	cmp	r4, #0
 802395a:	f280 8267 	bge.w	8023e2c <__ieee754_powf+0x564>
 802395e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023962:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8023966:	e7c7      	b.n	80238f8 <__ieee754_powf+0x30>
 8023968:	2700      	movs	r7, #0
 802396a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802396e:	d1f0      	bne.n	8023952 <__ieee754_powf+0x8a>
 8023970:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8023974:	f000 8254 	beq.w	8023e20 <__ieee754_powf+0x558>
 8023978:	dd08      	ble.n	802398c <__ieee754_powf+0xc4>
 802397a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8023c84 <__ieee754_powf+0x3bc>
 802397e:	2c00      	cmp	r4, #0
 8023980:	bfa8      	it	ge
 8023982:	eeb0 0a68 	vmovge.f32	s0, s17
 8023986:	e7b7      	b.n	80238f8 <__ieee754_powf+0x30>
 8023988:	2702      	movs	r7, #2
 802398a:	e7ee      	b.n	802396a <__ieee754_powf+0xa2>
 802398c:	2c00      	cmp	r4, #0
 802398e:	f280 824a 	bge.w	8023e26 <__ieee754_powf+0x55e>
 8023992:	eeb1 0a68 	vneg.f32	s0, s17
 8023996:	e7af      	b.n	80238f8 <__ieee754_powf+0x30>
 8023998:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 802399c:	d102      	bne.n	80239a4 <__ieee754_powf+0xdc>
 802399e:	ee28 0a08 	vmul.f32	s0, s16, s16
 80239a2:	e7a9      	b.n	80238f8 <__ieee754_powf+0x30>
 80239a4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80239a8:	eeb0 0a48 	vmov.f32	s0, s16
 80239ac:	d107      	bne.n	80239be <__ieee754_powf+0xf6>
 80239ae:	2e00      	cmp	r6, #0
 80239b0:	db05      	blt.n	80239be <__ieee754_powf+0xf6>
 80239b2:	ecbd 8b02 	vpop	{d8}
 80239b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80239ba:	f000 bb8f 	b.w	80240dc <__ieee754_sqrtf>
 80239be:	f001 fd8d 	bl	80254dc <fabsf>
 80239c2:	b125      	cbz	r5, 80239ce <__ieee754_powf+0x106>
 80239c4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80239c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80239cc:	d116      	bne.n	80239fc <__ieee754_powf+0x134>
 80239ce:	2c00      	cmp	r4, #0
 80239d0:	bfbc      	itt	lt
 80239d2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80239d6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80239da:	2e00      	cmp	r6, #0
 80239dc:	da8c      	bge.n	80238f8 <__ieee754_powf+0x30>
 80239de:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80239e2:	ea55 0307 	orrs.w	r3, r5, r7
 80239e6:	d104      	bne.n	80239f2 <__ieee754_powf+0x12a>
 80239e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80239ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80239f0:	e782      	b.n	80238f8 <__ieee754_powf+0x30>
 80239f2:	2f01      	cmp	r7, #1
 80239f4:	d180      	bne.n	80238f8 <__ieee754_powf+0x30>
 80239f6:	eeb1 0a40 	vneg.f32	s0, s0
 80239fa:	e77d      	b.n	80238f8 <__ieee754_powf+0x30>
 80239fc:	0ff0      	lsrs	r0, r6, #31
 80239fe:	3801      	subs	r0, #1
 8023a00:	ea57 0300 	orrs.w	r3, r7, r0
 8023a04:	d104      	bne.n	8023a10 <__ieee754_powf+0x148>
 8023a06:	ee38 8a48 	vsub.f32	s16, s16, s16
 8023a0a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023a0e:	e773      	b.n	80238f8 <__ieee754_powf+0x30>
 8023a10:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8023a14:	dd74      	ble.n	8023b00 <__ieee754_powf+0x238>
 8023a16:	4b9c      	ldr	r3, [pc, #624]	; (8023c88 <__ieee754_powf+0x3c0>)
 8023a18:	429d      	cmp	r5, r3
 8023a1a:	dc08      	bgt.n	8023a2e <__ieee754_powf+0x166>
 8023a1c:	2c00      	cmp	r4, #0
 8023a1e:	da0b      	bge.n	8023a38 <__ieee754_powf+0x170>
 8023a20:	2000      	movs	r0, #0
 8023a22:	ecbd 8b02 	vpop	{d8}
 8023a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a2a:	f001 bb6d 	b.w	8025108 <__math_oflowf>
 8023a2e:	4b97      	ldr	r3, [pc, #604]	; (8023c8c <__ieee754_powf+0x3c4>)
 8023a30:	429d      	cmp	r5, r3
 8023a32:	dd08      	ble.n	8023a46 <__ieee754_powf+0x17e>
 8023a34:	2c00      	cmp	r4, #0
 8023a36:	dcf3      	bgt.n	8023a20 <__ieee754_powf+0x158>
 8023a38:	2000      	movs	r0, #0
 8023a3a:	ecbd 8b02 	vpop	{d8}
 8023a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a42:	f001 bb5b 	b.w	80250fc <__math_uflowf>
 8023a46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023a4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023a4e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8023c90 <__ieee754_powf+0x3c8>
 8023a52:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8023a56:	eee0 6a67 	vfms.f32	s13, s0, s15
 8023a5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023a5e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8023a62:	ee20 7a00 	vmul.f32	s14, s0, s0
 8023a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023a6a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8023c94 <__ieee754_powf+0x3cc>
 8023a6e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8023a72:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8023c98 <__ieee754_powf+0x3d0>
 8023a76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023a7a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8023c9c <__ieee754_powf+0x3d4>
 8023a7e:	eef0 6a67 	vmov.f32	s13, s15
 8023a82:	eee0 6a07 	vfma.f32	s13, s0, s14
 8023a86:	ee16 3a90 	vmov	r3, s13
 8023a8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023a8e:	f023 030f 	bic.w	r3, r3, #15
 8023a92:	ee00 3a90 	vmov	s1, r3
 8023a96:	eee0 0a47 	vfms.f32	s1, s0, s14
 8023a9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8023a9e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8023aa2:	f024 040f 	bic.w	r4, r4, #15
 8023aa6:	ee07 4a10 	vmov	s14, r4
 8023aaa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8023aae:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8023ab2:	ee07 3a90 	vmov	s15, r3
 8023ab6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8023aba:	3f01      	subs	r7, #1
 8023abc:	ea57 0200 	orrs.w	r2, r7, r0
 8023ac0:	ee07 4a10 	vmov	s14, r4
 8023ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023ac8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8023acc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8023ad0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8023ad4:	ee17 4a10 	vmov	r4, s14
 8023ad8:	bf08      	it	eq
 8023ada:	eeb0 8a40 	vmoveq.f32	s16, s0
 8023ade:	2c00      	cmp	r4, #0
 8023ae0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023ae4:	f340 817e 	ble.w	8023de4 <__ieee754_powf+0x51c>
 8023ae8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8023aec:	f340 80f8 	ble.w	8023ce0 <__ieee754_powf+0x418>
 8023af0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023af8:	bf4c      	ite	mi
 8023afa:	2001      	movmi	r0, #1
 8023afc:	2000      	movpl	r0, #0
 8023afe:	e790      	b.n	8023a22 <__ieee754_powf+0x15a>
 8023b00:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8023b04:	bf01      	itttt	eq
 8023b06:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8023ca0 <__ieee754_powf+0x3d8>
 8023b0a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8023b0e:	f06f 0217 	mvneq.w	r2, #23
 8023b12:	ee17 5a90 	vmoveq	r5, s15
 8023b16:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8023b1a:	bf18      	it	ne
 8023b1c:	2200      	movne	r2, #0
 8023b1e:	3b7f      	subs	r3, #127	; 0x7f
 8023b20:	4413      	add	r3, r2
 8023b22:	4a60      	ldr	r2, [pc, #384]	; (8023ca4 <__ieee754_powf+0x3dc>)
 8023b24:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8023b28:	4295      	cmp	r5, r2
 8023b2a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8023b2e:	dd06      	ble.n	8023b3e <__ieee754_powf+0x276>
 8023b30:	4a5d      	ldr	r2, [pc, #372]	; (8023ca8 <__ieee754_powf+0x3e0>)
 8023b32:	4295      	cmp	r5, r2
 8023b34:	f340 80a4 	ble.w	8023c80 <__ieee754_powf+0x3b8>
 8023b38:	3301      	adds	r3, #1
 8023b3a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8023b3e:	2500      	movs	r5, #0
 8023b40:	4a5a      	ldr	r2, [pc, #360]	; (8023cac <__ieee754_powf+0x3e4>)
 8023b42:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8023b46:	ee07 1a90 	vmov	s15, r1
 8023b4a:	ed92 7a00 	vldr	s14, [r2]
 8023b4e:	4a58      	ldr	r2, [pc, #352]	; (8023cb0 <__ieee754_powf+0x3e8>)
 8023b50:	ee37 6a27 	vadd.f32	s12, s14, s15
 8023b54:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8023b58:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8023b5c:	1049      	asrs	r1, r1, #1
 8023b5e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8023b62:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8023b66:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8023b6a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8023b6e:	ee06 1a10 	vmov	s12, r1
 8023b72:	ee65 4a26 	vmul.f32	s9, s10, s13
 8023b76:	ee36 7a47 	vsub.f32	s14, s12, s14
 8023b7a:	ee14 6a90 	vmov	r6, s9
 8023b7e:	4016      	ands	r6, r2
 8023b80:	ee05 6a90 	vmov	s11, r6
 8023b84:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8023b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023b8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8023cb4 <__ieee754_powf+0x3ec>
 8023b90:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8023b94:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8023b98:	ee25 6a26 	vmul.f32	s12, s10, s13
 8023b9c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8023cb8 <__ieee754_powf+0x3f0>
 8023ba0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023ba4:	eddf 6a45 	vldr	s13, [pc, #276]	; 8023cbc <__ieee754_powf+0x3f4>
 8023ba8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023bac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8023c90 <__ieee754_powf+0x3c8>
 8023bb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023bb4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8023cc0 <__ieee754_powf+0x3f8>
 8023bb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023bbc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8023cc4 <__ieee754_powf+0x3fc>
 8023bc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023bc4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8023bc8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8023bcc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023bd0:	eee5 6a07 	vfma.f32	s13, s10, s14
 8023bd4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8023bd8:	eef0 7a45 	vmov.f32	s15, s10
 8023bdc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8023be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023be4:	ee17 1a90 	vmov	r1, s15
 8023be8:	4011      	ands	r1, r2
 8023bea:	ee07 1a90 	vmov	s15, r1
 8023bee:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8023bf2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8023bf6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8023bfa:	ee27 7a24 	vmul.f32	s14, s14, s9
 8023bfe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023c02:	eeb0 6a47 	vmov.f32	s12, s14
 8023c06:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8023c0a:	ee16 1a10 	vmov	r1, s12
 8023c0e:	4011      	ands	r1, r2
 8023c10:	ee06 1a90 	vmov	s13, r1
 8023c14:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8023c18:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8023cc8 <__ieee754_powf+0x400>
 8023c1c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8023ccc <__ieee754_powf+0x404>
 8023c20:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023c24:	ee06 1a10 	vmov	s12, r1
 8023c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023c2c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8023cd0 <__ieee754_powf+0x408>
 8023c30:	4928      	ldr	r1, [pc, #160]	; (8023cd4 <__ieee754_powf+0x40c>)
 8023c32:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023c36:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8023c3a:	edd1 7a00 	vldr	s15, [r1]
 8023c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023c42:	ee07 3a90 	vmov	s15, r3
 8023c46:	4b24      	ldr	r3, [pc, #144]	; (8023cd8 <__ieee754_powf+0x410>)
 8023c48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8023c4c:	eef0 7a47 	vmov.f32	s15, s14
 8023c50:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023c54:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8023c58:	edd5 0a00 	vldr	s1, [r5]
 8023c5c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023c64:	ee17 3a90 	vmov	r3, s15
 8023c68:	4013      	ands	r3, r2
 8023c6a:	ee07 3a90 	vmov	s15, r3
 8023c6e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8023c72:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8023c76:	eee6 6a65 	vfms.f32	s13, s12, s11
 8023c7a:	ee77 7a66 	vsub.f32	s15, s14, s13
 8023c7e:	e70e      	b.n	8023a9e <__ieee754_powf+0x1d6>
 8023c80:	2501      	movs	r5, #1
 8023c82:	e75d      	b.n	8023b40 <__ieee754_powf+0x278>
 8023c84:	00000000 	.word	0x00000000
 8023c88:	3f7ffff3 	.word	0x3f7ffff3
 8023c8c:	3f800007 	.word	0x3f800007
 8023c90:	3eaaaaab 	.word	0x3eaaaaab
 8023c94:	3fb8aa3b 	.word	0x3fb8aa3b
 8023c98:	36eca570 	.word	0x36eca570
 8023c9c:	3fb8aa00 	.word	0x3fb8aa00
 8023ca0:	4b800000 	.word	0x4b800000
 8023ca4:	001cc471 	.word	0x001cc471
 8023ca8:	005db3d6 	.word	0x005db3d6
 8023cac:	0802919c 	.word	0x0802919c
 8023cb0:	fffff000 	.word	0xfffff000
 8023cb4:	3e6c3255 	.word	0x3e6c3255
 8023cb8:	3e53f142 	.word	0x3e53f142
 8023cbc:	3e8ba305 	.word	0x3e8ba305
 8023cc0:	3edb6db7 	.word	0x3edb6db7
 8023cc4:	3f19999a 	.word	0x3f19999a
 8023cc8:	3f76384f 	.word	0x3f76384f
 8023ccc:	3f763800 	.word	0x3f763800
 8023cd0:	369dc3a0 	.word	0x369dc3a0
 8023cd4:	080291ac 	.word	0x080291ac
 8023cd8:	080291a4 	.word	0x080291a4
 8023cdc:	3338aa3c 	.word	0x3338aa3c
 8023ce0:	f040 8095 	bne.w	8023e0e <__ieee754_powf+0x546>
 8023ce4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8023cdc <__ieee754_powf+0x414>
 8023ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023cec:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8023cf0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8023cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cf8:	f73f aefa 	bgt.w	8023af0 <__ieee754_powf+0x228>
 8023cfc:	15db      	asrs	r3, r3, #23
 8023cfe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8023d02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8023d06:	4103      	asrs	r3, r0
 8023d08:	4423      	add	r3, r4
 8023d0a:	494b      	ldr	r1, [pc, #300]	; (8023e38 <__ieee754_powf+0x570>)
 8023d0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023d10:	3a7f      	subs	r2, #127	; 0x7f
 8023d12:	4111      	asrs	r1, r2
 8023d14:	ea23 0101 	bic.w	r1, r3, r1
 8023d18:	ee07 1a10 	vmov	s14, r1
 8023d1c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023d24:	f1c2 0217 	rsb	r2, r2, #23
 8023d28:	4110      	asrs	r0, r2
 8023d2a:	2c00      	cmp	r4, #0
 8023d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023d30:	bfb8      	it	lt
 8023d32:	4240      	neglt	r0, r0
 8023d34:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8023d38:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8023e3c <__ieee754_powf+0x574>
 8023d3c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8023e40 <__ieee754_powf+0x578>
 8023d40:	ee17 3a10 	vmov	r3, s14
 8023d44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023d48:	f023 030f 	bic.w	r3, r3, #15
 8023d4c:	ee07 3a10 	vmov	s14, r3
 8023d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023d54:	ee27 0a00 	vmul.f32	s0, s14, s0
 8023d58:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8023d5c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8023e44 <__ieee754_powf+0x57c>
 8023d60:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8023d64:	eef0 7a40 	vmov.f32	s15, s0
 8023d68:	eee7 7a26 	vfma.f32	s15, s14, s13
 8023d6c:	eeb0 6a67 	vmov.f32	s12, s15
 8023d70:	eea7 6a66 	vfms.f32	s12, s14, s13
 8023d74:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8023d78:	ee30 0a46 	vsub.f32	s0, s0, s12
 8023d7c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8023e48 <__ieee754_powf+0x580>
 8023d80:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8023e4c <__ieee754_powf+0x584>
 8023d84:	eee7 6a06 	vfma.f32	s13, s14, s12
 8023d88:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8023e50 <__ieee754_powf+0x588>
 8023d8c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8023d90:	eddf 6a30 	vldr	s13, [pc, #192]	; 8023e54 <__ieee754_powf+0x58c>
 8023d94:	eee6 6a07 	vfma.f32	s13, s12, s14
 8023d98:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8023e58 <__ieee754_powf+0x590>
 8023d9c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8023da0:	eef0 6a67 	vmov.f32	s13, s15
 8023da4:	eee6 6a47 	vfms.f32	s13, s12, s14
 8023da8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023dac:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8023db0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8023db4:	eea7 0a80 	vfma.f32	s0, s15, s0
 8023db8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8023dbc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8023dc0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023dc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023dc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023dcc:	ee10 3a10 	vmov	r3, s0
 8023dd0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8023dd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8023dd8:	da1f      	bge.n	8023e1a <__ieee754_powf+0x552>
 8023dda:	f001 fbdb 	bl	8025594 <scalbnf>
 8023dde:	ee20 0a08 	vmul.f32	s0, s0, s16
 8023de2:	e589      	b.n	80238f8 <__ieee754_powf+0x30>
 8023de4:	4a1d      	ldr	r2, [pc, #116]	; (8023e5c <__ieee754_powf+0x594>)
 8023de6:	4293      	cmp	r3, r2
 8023de8:	dd07      	ble.n	8023dfa <__ieee754_powf+0x532>
 8023dea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023df2:	bf4c      	ite	mi
 8023df4:	2001      	movmi	r0, #1
 8023df6:	2000      	movpl	r0, #0
 8023df8:	e61f      	b.n	8023a3a <__ieee754_powf+0x172>
 8023dfa:	d108      	bne.n	8023e0e <__ieee754_powf+0x546>
 8023dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023e00:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8023e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e08:	f6ff af78 	blt.w	8023cfc <__ieee754_powf+0x434>
 8023e0c:	e7ed      	b.n	8023dea <__ieee754_powf+0x522>
 8023e0e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8023e12:	f73f af73 	bgt.w	8023cfc <__ieee754_powf+0x434>
 8023e16:	2000      	movs	r0, #0
 8023e18:	e78c      	b.n	8023d34 <__ieee754_powf+0x46c>
 8023e1a:	ee00 3a10 	vmov	s0, r3
 8023e1e:	e7de      	b.n	8023dde <__ieee754_powf+0x516>
 8023e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023e24:	e568      	b.n	80238f8 <__ieee754_powf+0x30>
 8023e26:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8023e60 <__ieee754_powf+0x598>
 8023e2a:	e565      	b.n	80238f8 <__ieee754_powf+0x30>
 8023e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8023e30:	e562      	b.n	80238f8 <__ieee754_powf+0x30>
 8023e32:	2700      	movs	r7, #0
 8023e34:	e58d      	b.n	8023952 <__ieee754_powf+0x8a>
 8023e36:	bf00      	nop
 8023e38:	007fffff 	.word	0x007fffff
 8023e3c:	35bfbe8c 	.word	0x35bfbe8c
 8023e40:	3f317200 	.word	0x3f317200
 8023e44:	3f317218 	.word	0x3f317218
 8023e48:	b5ddea0e 	.word	0xb5ddea0e
 8023e4c:	3331bb4c 	.word	0x3331bb4c
 8023e50:	388ab355 	.word	0x388ab355
 8023e54:	bb360b61 	.word	0xbb360b61
 8023e58:	3e2aaaab 	.word	0x3e2aaaab
 8023e5c:	43160000 	.word	0x43160000
 8023e60:	00000000 	.word	0x00000000

08023e64 <__ieee754_rem_pio2f>:
 8023e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e66:	ee10 6a10 	vmov	r6, s0
 8023e6a:	4b8e      	ldr	r3, [pc, #568]	; (80240a4 <__ieee754_rem_pio2f+0x240>)
 8023e6c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023e70:	429d      	cmp	r5, r3
 8023e72:	b087      	sub	sp, #28
 8023e74:	eef0 7a40 	vmov.f32	s15, s0
 8023e78:	4604      	mov	r4, r0
 8023e7a:	dc05      	bgt.n	8023e88 <__ieee754_rem_pio2f+0x24>
 8023e7c:	2300      	movs	r3, #0
 8023e7e:	ed80 0a00 	vstr	s0, [r0]
 8023e82:	6043      	str	r3, [r0, #4]
 8023e84:	2000      	movs	r0, #0
 8023e86:	e01a      	b.n	8023ebe <__ieee754_rem_pio2f+0x5a>
 8023e88:	4b87      	ldr	r3, [pc, #540]	; (80240a8 <__ieee754_rem_pio2f+0x244>)
 8023e8a:	429d      	cmp	r5, r3
 8023e8c:	dc46      	bgt.n	8023f1c <__ieee754_rem_pio2f+0xb8>
 8023e8e:	2e00      	cmp	r6, #0
 8023e90:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80240ac <__ieee754_rem_pio2f+0x248>
 8023e94:	4b86      	ldr	r3, [pc, #536]	; (80240b0 <__ieee754_rem_pio2f+0x24c>)
 8023e96:	f025 050f 	bic.w	r5, r5, #15
 8023e9a:	dd1f      	ble.n	8023edc <__ieee754_rem_pio2f+0x78>
 8023e9c:	429d      	cmp	r5, r3
 8023e9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023ea2:	d00e      	beq.n	8023ec2 <__ieee754_rem_pio2f+0x5e>
 8023ea4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80240b4 <__ieee754_rem_pio2f+0x250>
 8023ea8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8023eac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023eb0:	ed80 0a00 	vstr	s0, [r0]
 8023eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023eb8:	2001      	movs	r0, #1
 8023eba:	edc4 7a01 	vstr	s15, [r4, #4]
 8023ebe:	b007      	add	sp, #28
 8023ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ec2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80240b8 <__ieee754_rem_pio2f+0x254>
 8023ec6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80240bc <__ieee754_rem_pio2f+0x258>
 8023eca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023ece:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8023ed2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023ed6:	edc0 6a00 	vstr	s13, [r0]
 8023eda:	e7eb      	b.n	8023eb4 <__ieee754_rem_pio2f+0x50>
 8023edc:	429d      	cmp	r5, r3
 8023ede:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023ee2:	d00e      	beq.n	8023f02 <__ieee754_rem_pio2f+0x9e>
 8023ee4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80240b4 <__ieee754_rem_pio2f+0x250>
 8023ee8:	ee37 0a87 	vadd.f32	s0, s15, s14
 8023eec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023ef0:	ed80 0a00 	vstr	s0, [r0]
 8023ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8023efc:	edc4 7a01 	vstr	s15, [r4, #4]
 8023f00:	e7dd      	b.n	8023ebe <__ieee754_rem_pio2f+0x5a>
 8023f02:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80240b8 <__ieee754_rem_pio2f+0x254>
 8023f06:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80240bc <__ieee754_rem_pio2f+0x258>
 8023f0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023f0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023f16:	edc0 6a00 	vstr	s13, [r0]
 8023f1a:	e7eb      	b.n	8023ef4 <__ieee754_rem_pio2f+0x90>
 8023f1c:	4b68      	ldr	r3, [pc, #416]	; (80240c0 <__ieee754_rem_pio2f+0x25c>)
 8023f1e:	429d      	cmp	r5, r3
 8023f20:	dc72      	bgt.n	8024008 <__ieee754_rem_pio2f+0x1a4>
 8023f22:	f001 fadb 	bl	80254dc <fabsf>
 8023f26:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80240c4 <__ieee754_rem_pio2f+0x260>
 8023f2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023f2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023f3a:	ee17 0a90 	vmov	r0, s15
 8023f3e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80240ac <__ieee754_rem_pio2f+0x248>
 8023f42:	eea7 0a67 	vfms.f32	s0, s14, s15
 8023f46:	281f      	cmp	r0, #31
 8023f48:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80240b4 <__ieee754_rem_pio2f+0x250>
 8023f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023f50:	eeb1 6a47 	vneg.f32	s12, s14
 8023f54:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023f58:	ee16 2a90 	vmov	r2, s13
 8023f5c:	dc1c      	bgt.n	8023f98 <__ieee754_rem_pio2f+0x134>
 8023f5e:	495a      	ldr	r1, [pc, #360]	; (80240c8 <__ieee754_rem_pio2f+0x264>)
 8023f60:	1e47      	subs	r7, r0, #1
 8023f62:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8023f66:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023f6a:	428b      	cmp	r3, r1
 8023f6c:	d014      	beq.n	8023f98 <__ieee754_rem_pio2f+0x134>
 8023f6e:	6022      	str	r2, [r4, #0]
 8023f70:	ed94 7a00 	vldr	s14, [r4]
 8023f74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023f78:	2e00      	cmp	r6, #0
 8023f7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023f7e:	ed84 0a01 	vstr	s0, [r4, #4]
 8023f82:	da9c      	bge.n	8023ebe <__ieee754_rem_pio2f+0x5a>
 8023f84:	eeb1 7a47 	vneg.f32	s14, s14
 8023f88:	eeb1 0a40 	vneg.f32	s0, s0
 8023f8c:	ed84 7a00 	vstr	s14, [r4]
 8023f90:	ed84 0a01 	vstr	s0, [r4, #4]
 8023f94:	4240      	negs	r0, r0
 8023f96:	e792      	b.n	8023ebe <__ieee754_rem_pio2f+0x5a>
 8023f98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8023f9c:	15eb      	asrs	r3, r5, #23
 8023f9e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8023fa2:	2d08      	cmp	r5, #8
 8023fa4:	dde3      	ble.n	8023f6e <__ieee754_rem_pio2f+0x10a>
 8023fa6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80240b8 <__ieee754_rem_pio2f+0x254>
 8023faa:	eddf 5a44 	vldr	s11, [pc, #272]	; 80240bc <__ieee754_rem_pio2f+0x258>
 8023fae:	eef0 6a40 	vmov.f32	s13, s0
 8023fb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023fb6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8023fba:	eea6 0a27 	vfma.f32	s0, s12, s15
 8023fbe:	eef0 7a40 	vmov.f32	s15, s0
 8023fc2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8023fc6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8023fca:	ee15 2a90 	vmov	r2, s11
 8023fce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8023fd2:	1a5b      	subs	r3, r3, r1
 8023fd4:	2b19      	cmp	r3, #25
 8023fd6:	dc04      	bgt.n	8023fe2 <__ieee754_rem_pio2f+0x17e>
 8023fd8:	edc4 5a00 	vstr	s11, [r4]
 8023fdc:	eeb0 0a66 	vmov.f32	s0, s13
 8023fe0:	e7c6      	b.n	8023f70 <__ieee754_rem_pio2f+0x10c>
 8023fe2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80240cc <__ieee754_rem_pio2f+0x268>
 8023fe6:	eeb0 0a66 	vmov.f32	s0, s13
 8023fea:	eea6 0a25 	vfma.f32	s0, s12, s11
 8023fee:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8023ff2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80240d0 <__ieee754_rem_pio2f+0x26c>
 8023ff6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023ffa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8023ffe:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024002:	ed84 7a00 	vstr	s14, [r4]
 8024006:	e7b3      	b.n	8023f70 <__ieee754_rem_pio2f+0x10c>
 8024008:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802400c:	db06      	blt.n	802401c <__ieee754_rem_pio2f+0x1b8>
 802400e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024012:	edc0 7a01 	vstr	s15, [r0, #4]
 8024016:	edc0 7a00 	vstr	s15, [r0]
 802401a:	e733      	b.n	8023e84 <__ieee754_rem_pio2f+0x20>
 802401c:	15ea      	asrs	r2, r5, #23
 802401e:	3a86      	subs	r2, #134	; 0x86
 8024020:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8024024:	ee07 3a90 	vmov	s15, r3
 8024028:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802402c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80240d4 <__ieee754_rem_pio2f+0x270>
 8024030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024038:	ed8d 7a03 	vstr	s14, [sp, #12]
 802403c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024040:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024044:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802404c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8024050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024054:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802405c:	edcd 7a05 	vstr	s15, [sp, #20]
 8024060:	d11e      	bne.n	80240a0 <__ieee754_rem_pio2f+0x23c>
 8024062:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8024066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802406a:	bf14      	ite	ne
 802406c:	2302      	movne	r3, #2
 802406e:	2301      	moveq	r3, #1
 8024070:	4919      	ldr	r1, [pc, #100]	; (80240d8 <__ieee754_rem_pio2f+0x274>)
 8024072:	9101      	str	r1, [sp, #4]
 8024074:	2102      	movs	r1, #2
 8024076:	9100      	str	r1, [sp, #0]
 8024078:	a803      	add	r0, sp, #12
 802407a:	4621      	mov	r1, r4
 802407c:	f000 fd6a 	bl	8024b54 <__kernel_rem_pio2f>
 8024080:	2e00      	cmp	r6, #0
 8024082:	f6bf af1c 	bge.w	8023ebe <__ieee754_rem_pio2f+0x5a>
 8024086:	edd4 7a00 	vldr	s15, [r4]
 802408a:	eef1 7a67 	vneg.f32	s15, s15
 802408e:	edc4 7a00 	vstr	s15, [r4]
 8024092:	edd4 7a01 	vldr	s15, [r4, #4]
 8024096:	eef1 7a67 	vneg.f32	s15, s15
 802409a:	edc4 7a01 	vstr	s15, [r4, #4]
 802409e:	e779      	b.n	8023f94 <__ieee754_rem_pio2f+0x130>
 80240a0:	2303      	movs	r3, #3
 80240a2:	e7e5      	b.n	8024070 <__ieee754_rem_pio2f+0x20c>
 80240a4:	3f490fd8 	.word	0x3f490fd8
 80240a8:	4016cbe3 	.word	0x4016cbe3
 80240ac:	3fc90f80 	.word	0x3fc90f80
 80240b0:	3fc90fd0 	.word	0x3fc90fd0
 80240b4:	37354443 	.word	0x37354443
 80240b8:	37354400 	.word	0x37354400
 80240bc:	2e85a308 	.word	0x2e85a308
 80240c0:	43490f80 	.word	0x43490f80
 80240c4:	3f22f984 	.word	0x3f22f984
 80240c8:	080291b4 	.word	0x080291b4
 80240cc:	2e85a300 	.word	0x2e85a300
 80240d0:	248d3132 	.word	0x248d3132
 80240d4:	43800000 	.word	0x43800000
 80240d8:	08029234 	.word	0x08029234

080240dc <__ieee754_sqrtf>:
 80240dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80240e0:	4770      	bx	lr
 80240e2:	0000      	movs	r0, r0
 80240e4:	0000      	movs	r0, r0
	...

080240e8 <__kernel_cos>:
 80240e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240ec:	ec57 6b10 	vmov	r6, r7, d0
 80240f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80240f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80240f8:	ed8d 1b00 	vstr	d1, [sp]
 80240fc:	da07      	bge.n	802410e <__kernel_cos+0x26>
 80240fe:	ee10 0a10 	vmov	r0, s0
 8024102:	4639      	mov	r1, r7
 8024104:	f7dc fcc6 	bl	8000a94 <__aeabi_d2iz>
 8024108:	2800      	cmp	r0, #0
 802410a:	f000 8088 	beq.w	802421e <__kernel_cos+0x136>
 802410e:	4632      	mov	r2, r6
 8024110:	463b      	mov	r3, r7
 8024112:	4630      	mov	r0, r6
 8024114:	4639      	mov	r1, r7
 8024116:	f7dc fa23 	bl	8000560 <__aeabi_dmul>
 802411a:	4b51      	ldr	r3, [pc, #324]	; (8024260 <__kernel_cos+0x178>)
 802411c:	2200      	movs	r2, #0
 802411e:	4604      	mov	r4, r0
 8024120:	460d      	mov	r5, r1
 8024122:	f7dc fa1d 	bl	8000560 <__aeabi_dmul>
 8024126:	a340      	add	r3, pc, #256	; (adr r3, 8024228 <__kernel_cos+0x140>)
 8024128:	e9d3 2300 	ldrd	r2, r3, [r3]
 802412c:	4682      	mov	sl, r0
 802412e:	468b      	mov	fp, r1
 8024130:	4620      	mov	r0, r4
 8024132:	4629      	mov	r1, r5
 8024134:	f7dc fa14 	bl	8000560 <__aeabi_dmul>
 8024138:	a33d      	add	r3, pc, #244	; (adr r3, 8024230 <__kernel_cos+0x148>)
 802413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802413e:	f7dc f859 	bl	80001f4 <__adddf3>
 8024142:	4622      	mov	r2, r4
 8024144:	462b      	mov	r3, r5
 8024146:	f7dc fa0b 	bl	8000560 <__aeabi_dmul>
 802414a:	a33b      	add	r3, pc, #236	; (adr r3, 8024238 <__kernel_cos+0x150>)
 802414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024150:	f7dc f84e 	bl	80001f0 <__aeabi_dsub>
 8024154:	4622      	mov	r2, r4
 8024156:	462b      	mov	r3, r5
 8024158:	f7dc fa02 	bl	8000560 <__aeabi_dmul>
 802415c:	a338      	add	r3, pc, #224	; (adr r3, 8024240 <__kernel_cos+0x158>)
 802415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024162:	f7dc f847 	bl	80001f4 <__adddf3>
 8024166:	4622      	mov	r2, r4
 8024168:	462b      	mov	r3, r5
 802416a:	f7dc f9f9 	bl	8000560 <__aeabi_dmul>
 802416e:	a336      	add	r3, pc, #216	; (adr r3, 8024248 <__kernel_cos+0x160>)
 8024170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024174:	f7dc f83c 	bl	80001f0 <__aeabi_dsub>
 8024178:	4622      	mov	r2, r4
 802417a:	462b      	mov	r3, r5
 802417c:	f7dc f9f0 	bl	8000560 <__aeabi_dmul>
 8024180:	a333      	add	r3, pc, #204	; (adr r3, 8024250 <__kernel_cos+0x168>)
 8024182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024186:	f7dc f835 	bl	80001f4 <__adddf3>
 802418a:	4622      	mov	r2, r4
 802418c:	462b      	mov	r3, r5
 802418e:	f7dc f9e7 	bl	8000560 <__aeabi_dmul>
 8024192:	4622      	mov	r2, r4
 8024194:	462b      	mov	r3, r5
 8024196:	f7dc f9e3 	bl	8000560 <__aeabi_dmul>
 802419a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802419e:	4604      	mov	r4, r0
 80241a0:	460d      	mov	r5, r1
 80241a2:	4630      	mov	r0, r6
 80241a4:	4639      	mov	r1, r7
 80241a6:	f7dc f9db 	bl	8000560 <__aeabi_dmul>
 80241aa:	460b      	mov	r3, r1
 80241ac:	4602      	mov	r2, r0
 80241ae:	4629      	mov	r1, r5
 80241b0:	4620      	mov	r0, r4
 80241b2:	f7dc f81d 	bl	80001f0 <__aeabi_dsub>
 80241b6:	4b2b      	ldr	r3, [pc, #172]	; (8024264 <__kernel_cos+0x17c>)
 80241b8:	4598      	cmp	r8, r3
 80241ba:	4606      	mov	r6, r0
 80241bc:	460f      	mov	r7, r1
 80241be:	dc10      	bgt.n	80241e2 <__kernel_cos+0xfa>
 80241c0:	4602      	mov	r2, r0
 80241c2:	460b      	mov	r3, r1
 80241c4:	4650      	mov	r0, sl
 80241c6:	4659      	mov	r1, fp
 80241c8:	f7dc f812 	bl	80001f0 <__aeabi_dsub>
 80241cc:	460b      	mov	r3, r1
 80241ce:	4926      	ldr	r1, [pc, #152]	; (8024268 <__kernel_cos+0x180>)
 80241d0:	4602      	mov	r2, r0
 80241d2:	2000      	movs	r0, #0
 80241d4:	f7dc f80c 	bl	80001f0 <__aeabi_dsub>
 80241d8:	ec41 0b10 	vmov	d0, r0, r1
 80241dc:	b003      	add	sp, #12
 80241de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241e2:	4b22      	ldr	r3, [pc, #136]	; (802426c <__kernel_cos+0x184>)
 80241e4:	4920      	ldr	r1, [pc, #128]	; (8024268 <__kernel_cos+0x180>)
 80241e6:	4598      	cmp	r8, r3
 80241e8:	bfcc      	ite	gt
 80241ea:	4d21      	ldrgt	r5, [pc, #132]	; (8024270 <__kernel_cos+0x188>)
 80241ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80241f0:	2400      	movs	r4, #0
 80241f2:	4622      	mov	r2, r4
 80241f4:	462b      	mov	r3, r5
 80241f6:	2000      	movs	r0, #0
 80241f8:	f7db fffa 	bl	80001f0 <__aeabi_dsub>
 80241fc:	4622      	mov	r2, r4
 80241fe:	4680      	mov	r8, r0
 8024200:	4689      	mov	r9, r1
 8024202:	462b      	mov	r3, r5
 8024204:	4650      	mov	r0, sl
 8024206:	4659      	mov	r1, fp
 8024208:	f7db fff2 	bl	80001f0 <__aeabi_dsub>
 802420c:	4632      	mov	r2, r6
 802420e:	463b      	mov	r3, r7
 8024210:	f7db ffee 	bl	80001f0 <__aeabi_dsub>
 8024214:	4602      	mov	r2, r0
 8024216:	460b      	mov	r3, r1
 8024218:	4640      	mov	r0, r8
 802421a:	4649      	mov	r1, r9
 802421c:	e7da      	b.n	80241d4 <__kernel_cos+0xec>
 802421e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024258 <__kernel_cos+0x170>
 8024222:	e7db      	b.n	80241dc <__kernel_cos+0xf4>
 8024224:	f3af 8000 	nop.w
 8024228:	be8838d4 	.word	0xbe8838d4
 802422c:	bda8fae9 	.word	0xbda8fae9
 8024230:	bdb4b1c4 	.word	0xbdb4b1c4
 8024234:	3e21ee9e 	.word	0x3e21ee9e
 8024238:	809c52ad 	.word	0x809c52ad
 802423c:	3e927e4f 	.word	0x3e927e4f
 8024240:	19cb1590 	.word	0x19cb1590
 8024244:	3efa01a0 	.word	0x3efa01a0
 8024248:	16c15177 	.word	0x16c15177
 802424c:	3f56c16c 	.word	0x3f56c16c
 8024250:	5555554c 	.word	0x5555554c
 8024254:	3fa55555 	.word	0x3fa55555
 8024258:	00000000 	.word	0x00000000
 802425c:	3ff00000 	.word	0x3ff00000
 8024260:	3fe00000 	.word	0x3fe00000
 8024264:	3fd33332 	.word	0x3fd33332
 8024268:	3ff00000 	.word	0x3ff00000
 802426c:	3fe90000 	.word	0x3fe90000
 8024270:	3fd20000 	.word	0x3fd20000
 8024274:	00000000 	.word	0x00000000

08024278 <__kernel_rem_pio2>:
 8024278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802427c:	ed2d 8b02 	vpush	{d8}
 8024280:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024284:	f112 0f14 	cmn.w	r2, #20
 8024288:	9308      	str	r3, [sp, #32]
 802428a:	9101      	str	r1, [sp, #4]
 802428c:	4bc4      	ldr	r3, [pc, #784]	; (80245a0 <__kernel_rem_pio2+0x328>)
 802428e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024290:	900b      	str	r0, [sp, #44]	; 0x2c
 8024292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024296:	9302      	str	r3, [sp, #8]
 8024298:	9b08      	ldr	r3, [sp, #32]
 802429a:	f103 33ff 	add.w	r3, r3, #4294967295
 802429e:	bfa8      	it	ge
 80242a0:	1ed4      	subge	r4, r2, #3
 80242a2:	9306      	str	r3, [sp, #24]
 80242a4:	bfb2      	itee	lt
 80242a6:	2400      	movlt	r4, #0
 80242a8:	2318      	movge	r3, #24
 80242aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80242ae:	f06f 0317 	mvn.w	r3, #23
 80242b2:	fb04 3303 	mla	r3, r4, r3, r3
 80242b6:	eb03 0a02 	add.w	sl, r3, r2
 80242ba:	9b02      	ldr	r3, [sp, #8]
 80242bc:	9a06      	ldr	r2, [sp, #24]
 80242be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024590 <__kernel_rem_pio2+0x318>
 80242c2:	eb03 0802 	add.w	r8, r3, r2
 80242c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80242c8:	1aa7      	subs	r7, r4, r2
 80242ca:	ae22      	add	r6, sp, #136	; 0x88
 80242cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80242d0:	2500      	movs	r5, #0
 80242d2:	4545      	cmp	r5, r8
 80242d4:	dd13      	ble.n	80242fe <__kernel_rem_pio2+0x86>
 80242d6:	9b08      	ldr	r3, [sp, #32]
 80242d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024590 <__kernel_rem_pio2+0x318>
 80242dc:	aa22      	add	r2, sp, #136	; 0x88
 80242de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80242e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80242e6:	f04f 0800 	mov.w	r8, #0
 80242ea:	9b02      	ldr	r3, [sp, #8]
 80242ec:	4598      	cmp	r8, r3
 80242ee:	dc2f      	bgt.n	8024350 <__kernel_rem_pio2+0xd8>
 80242f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80242f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80242f8:	462f      	mov	r7, r5
 80242fa:	2600      	movs	r6, #0
 80242fc:	e01b      	b.n	8024336 <__kernel_rem_pio2+0xbe>
 80242fe:	42ef      	cmn	r7, r5
 8024300:	d407      	bmi.n	8024312 <__kernel_rem_pio2+0x9a>
 8024302:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024306:	f7dc f8c1 	bl	800048c <__aeabi_i2d>
 802430a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802430e:	3501      	adds	r5, #1
 8024310:	e7df      	b.n	80242d2 <__kernel_rem_pio2+0x5a>
 8024312:	ec51 0b18 	vmov	r0, r1, d8
 8024316:	e7f8      	b.n	802430a <__kernel_rem_pio2+0x92>
 8024318:	e9d7 2300 	ldrd	r2, r3, [r7]
 802431c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024320:	f7dc f91e 	bl	8000560 <__aeabi_dmul>
 8024324:	4602      	mov	r2, r0
 8024326:	460b      	mov	r3, r1
 8024328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802432c:	f7db ff62 	bl	80001f4 <__adddf3>
 8024330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024334:	3601      	adds	r6, #1
 8024336:	9b06      	ldr	r3, [sp, #24]
 8024338:	429e      	cmp	r6, r3
 802433a:	f1a7 0708 	sub.w	r7, r7, #8
 802433e:	ddeb      	ble.n	8024318 <__kernel_rem_pio2+0xa0>
 8024340:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024344:	f108 0801 	add.w	r8, r8, #1
 8024348:	ecab 7b02 	vstmia	fp!, {d7}
 802434c:	3508      	adds	r5, #8
 802434e:	e7cc      	b.n	80242ea <__kernel_rem_pio2+0x72>
 8024350:	9b02      	ldr	r3, [sp, #8]
 8024352:	aa0e      	add	r2, sp, #56	; 0x38
 8024354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024358:	930d      	str	r3, [sp, #52]	; 0x34
 802435a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802435c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024360:	9c02      	ldr	r4, [sp, #8]
 8024362:	930c      	str	r3, [sp, #48]	; 0x30
 8024364:	00e3      	lsls	r3, r4, #3
 8024366:	930a      	str	r3, [sp, #40]	; 0x28
 8024368:	ab9a      	add	r3, sp, #616	; 0x268
 802436a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802436e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024372:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024376:	ab72      	add	r3, sp, #456	; 0x1c8
 8024378:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802437c:	46c3      	mov	fp, r8
 802437e:	46a1      	mov	r9, r4
 8024380:	f1b9 0f00 	cmp.w	r9, #0
 8024384:	f1a5 0508 	sub.w	r5, r5, #8
 8024388:	dc77      	bgt.n	802447a <__kernel_rem_pio2+0x202>
 802438a:	ec47 6b10 	vmov	d0, r6, r7
 802438e:	4650      	mov	r0, sl
 8024390:	f000 ff4a 	bl	8025228 <scalbn>
 8024394:	ec57 6b10 	vmov	r6, r7, d0
 8024398:	2200      	movs	r2, #0
 802439a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802439e:	ee10 0a10 	vmov	r0, s0
 80243a2:	4639      	mov	r1, r7
 80243a4:	f7dc f8dc 	bl	8000560 <__aeabi_dmul>
 80243a8:	ec41 0b10 	vmov	d0, r0, r1
 80243ac:	f000 febc 	bl	8025128 <floor>
 80243b0:	4b7c      	ldr	r3, [pc, #496]	; (80245a4 <__kernel_rem_pio2+0x32c>)
 80243b2:	ec51 0b10 	vmov	r0, r1, d0
 80243b6:	2200      	movs	r2, #0
 80243b8:	f7dc f8d2 	bl	8000560 <__aeabi_dmul>
 80243bc:	4602      	mov	r2, r0
 80243be:	460b      	mov	r3, r1
 80243c0:	4630      	mov	r0, r6
 80243c2:	4639      	mov	r1, r7
 80243c4:	f7db ff14 	bl	80001f0 <__aeabi_dsub>
 80243c8:	460f      	mov	r7, r1
 80243ca:	4606      	mov	r6, r0
 80243cc:	f7dc fb62 	bl	8000a94 <__aeabi_d2iz>
 80243d0:	9004      	str	r0, [sp, #16]
 80243d2:	f7dc f85b 	bl	800048c <__aeabi_i2d>
 80243d6:	4602      	mov	r2, r0
 80243d8:	460b      	mov	r3, r1
 80243da:	4630      	mov	r0, r6
 80243dc:	4639      	mov	r1, r7
 80243de:	f7db ff07 	bl	80001f0 <__aeabi_dsub>
 80243e2:	f1ba 0f00 	cmp.w	sl, #0
 80243e6:	4606      	mov	r6, r0
 80243e8:	460f      	mov	r7, r1
 80243ea:	dd6d      	ble.n	80244c8 <__kernel_rem_pio2+0x250>
 80243ec:	1e62      	subs	r2, r4, #1
 80243ee:	ab0e      	add	r3, sp, #56	; 0x38
 80243f0:	9d04      	ldr	r5, [sp, #16]
 80243f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80243f6:	f1ca 0118 	rsb	r1, sl, #24
 80243fa:	fa40 f301 	asr.w	r3, r0, r1
 80243fe:	441d      	add	r5, r3
 8024400:	408b      	lsls	r3, r1
 8024402:	1ac0      	subs	r0, r0, r3
 8024404:	ab0e      	add	r3, sp, #56	; 0x38
 8024406:	9504      	str	r5, [sp, #16]
 8024408:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802440c:	f1ca 0317 	rsb	r3, sl, #23
 8024410:	fa40 fb03 	asr.w	fp, r0, r3
 8024414:	f1bb 0f00 	cmp.w	fp, #0
 8024418:	dd65      	ble.n	80244e6 <__kernel_rem_pio2+0x26e>
 802441a:	9b04      	ldr	r3, [sp, #16]
 802441c:	2200      	movs	r2, #0
 802441e:	3301      	adds	r3, #1
 8024420:	9304      	str	r3, [sp, #16]
 8024422:	4615      	mov	r5, r2
 8024424:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024428:	4294      	cmp	r4, r2
 802442a:	f300 809c 	bgt.w	8024566 <__kernel_rem_pio2+0x2ee>
 802442e:	f1ba 0f00 	cmp.w	sl, #0
 8024432:	dd07      	ble.n	8024444 <__kernel_rem_pio2+0x1cc>
 8024434:	f1ba 0f01 	cmp.w	sl, #1
 8024438:	f000 80c0 	beq.w	80245bc <__kernel_rem_pio2+0x344>
 802443c:	f1ba 0f02 	cmp.w	sl, #2
 8024440:	f000 80c6 	beq.w	80245d0 <__kernel_rem_pio2+0x358>
 8024444:	f1bb 0f02 	cmp.w	fp, #2
 8024448:	d14d      	bne.n	80244e6 <__kernel_rem_pio2+0x26e>
 802444a:	4632      	mov	r2, r6
 802444c:	463b      	mov	r3, r7
 802444e:	4956      	ldr	r1, [pc, #344]	; (80245a8 <__kernel_rem_pio2+0x330>)
 8024450:	2000      	movs	r0, #0
 8024452:	f7db fecd 	bl	80001f0 <__aeabi_dsub>
 8024456:	4606      	mov	r6, r0
 8024458:	460f      	mov	r7, r1
 802445a:	2d00      	cmp	r5, #0
 802445c:	d043      	beq.n	80244e6 <__kernel_rem_pio2+0x26e>
 802445e:	4650      	mov	r0, sl
 8024460:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024598 <__kernel_rem_pio2+0x320>
 8024464:	f000 fee0 	bl	8025228 <scalbn>
 8024468:	4630      	mov	r0, r6
 802446a:	4639      	mov	r1, r7
 802446c:	ec53 2b10 	vmov	r2, r3, d0
 8024470:	f7db febe 	bl	80001f0 <__aeabi_dsub>
 8024474:	4606      	mov	r6, r0
 8024476:	460f      	mov	r7, r1
 8024478:	e035      	b.n	80244e6 <__kernel_rem_pio2+0x26e>
 802447a:	4b4c      	ldr	r3, [pc, #304]	; (80245ac <__kernel_rem_pio2+0x334>)
 802447c:	2200      	movs	r2, #0
 802447e:	4630      	mov	r0, r6
 8024480:	4639      	mov	r1, r7
 8024482:	f7dc f86d 	bl	8000560 <__aeabi_dmul>
 8024486:	f7dc fb05 	bl	8000a94 <__aeabi_d2iz>
 802448a:	f7db ffff 	bl	800048c <__aeabi_i2d>
 802448e:	4602      	mov	r2, r0
 8024490:	460b      	mov	r3, r1
 8024492:	ec43 2b18 	vmov	d8, r2, r3
 8024496:	4b46      	ldr	r3, [pc, #280]	; (80245b0 <__kernel_rem_pio2+0x338>)
 8024498:	2200      	movs	r2, #0
 802449a:	f7dc f861 	bl	8000560 <__aeabi_dmul>
 802449e:	4602      	mov	r2, r0
 80244a0:	460b      	mov	r3, r1
 80244a2:	4630      	mov	r0, r6
 80244a4:	4639      	mov	r1, r7
 80244a6:	f7db fea3 	bl	80001f0 <__aeabi_dsub>
 80244aa:	f7dc faf3 	bl	8000a94 <__aeabi_d2iz>
 80244ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80244b2:	f84b 0b04 	str.w	r0, [fp], #4
 80244b6:	ec51 0b18 	vmov	r0, r1, d8
 80244ba:	f7db fe9b 	bl	80001f4 <__adddf3>
 80244be:	f109 39ff 	add.w	r9, r9, #4294967295
 80244c2:	4606      	mov	r6, r0
 80244c4:	460f      	mov	r7, r1
 80244c6:	e75b      	b.n	8024380 <__kernel_rem_pio2+0x108>
 80244c8:	d106      	bne.n	80244d8 <__kernel_rem_pio2+0x260>
 80244ca:	1e63      	subs	r3, r4, #1
 80244cc:	aa0e      	add	r2, sp, #56	; 0x38
 80244ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80244d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80244d6:	e79d      	b.n	8024414 <__kernel_rem_pio2+0x19c>
 80244d8:	4b36      	ldr	r3, [pc, #216]	; (80245b4 <__kernel_rem_pio2+0x33c>)
 80244da:	2200      	movs	r2, #0
 80244dc:	f7dc fac6 	bl	8000a6c <__aeabi_dcmpge>
 80244e0:	2800      	cmp	r0, #0
 80244e2:	d13d      	bne.n	8024560 <__kernel_rem_pio2+0x2e8>
 80244e4:	4683      	mov	fp, r0
 80244e6:	2200      	movs	r2, #0
 80244e8:	2300      	movs	r3, #0
 80244ea:	4630      	mov	r0, r6
 80244ec:	4639      	mov	r1, r7
 80244ee:	f7dc fa9f 	bl	8000a30 <__aeabi_dcmpeq>
 80244f2:	2800      	cmp	r0, #0
 80244f4:	f000 80c0 	beq.w	8024678 <__kernel_rem_pio2+0x400>
 80244f8:	1e65      	subs	r5, r4, #1
 80244fa:	462b      	mov	r3, r5
 80244fc:	2200      	movs	r2, #0
 80244fe:	9902      	ldr	r1, [sp, #8]
 8024500:	428b      	cmp	r3, r1
 8024502:	da6c      	bge.n	80245de <__kernel_rem_pio2+0x366>
 8024504:	2a00      	cmp	r2, #0
 8024506:	f000 8089 	beq.w	802461c <__kernel_rem_pio2+0x3a4>
 802450a:	ab0e      	add	r3, sp, #56	; 0x38
 802450c:	f1aa 0a18 	sub.w	sl, sl, #24
 8024510:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024514:	2b00      	cmp	r3, #0
 8024516:	f000 80ad 	beq.w	8024674 <__kernel_rem_pio2+0x3fc>
 802451a:	4650      	mov	r0, sl
 802451c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024598 <__kernel_rem_pio2+0x320>
 8024520:	f000 fe82 	bl	8025228 <scalbn>
 8024524:	ab9a      	add	r3, sp, #616	; 0x268
 8024526:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802452a:	ec57 6b10 	vmov	r6, r7, d0
 802452e:	00ec      	lsls	r4, r5, #3
 8024530:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024534:	46aa      	mov	sl, r5
 8024536:	f1ba 0f00 	cmp.w	sl, #0
 802453a:	f280 80d6 	bge.w	80246ea <__kernel_rem_pio2+0x472>
 802453e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024590 <__kernel_rem_pio2+0x318>
 8024542:	462e      	mov	r6, r5
 8024544:	2e00      	cmp	r6, #0
 8024546:	f2c0 8104 	blt.w	8024752 <__kernel_rem_pio2+0x4da>
 802454a:	ab72      	add	r3, sp, #456	; 0x1c8
 802454c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024550:	f8df a064 	ldr.w	sl, [pc, #100]	; 80245b8 <__kernel_rem_pio2+0x340>
 8024554:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024558:	f04f 0800 	mov.w	r8, #0
 802455c:	1baf      	subs	r7, r5, r6
 802455e:	e0ea      	b.n	8024736 <__kernel_rem_pio2+0x4be>
 8024560:	f04f 0b02 	mov.w	fp, #2
 8024564:	e759      	b.n	802441a <__kernel_rem_pio2+0x1a2>
 8024566:	f8d8 3000 	ldr.w	r3, [r8]
 802456a:	b955      	cbnz	r5, 8024582 <__kernel_rem_pio2+0x30a>
 802456c:	b123      	cbz	r3, 8024578 <__kernel_rem_pio2+0x300>
 802456e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024572:	f8c8 3000 	str.w	r3, [r8]
 8024576:	2301      	movs	r3, #1
 8024578:	3201      	adds	r2, #1
 802457a:	f108 0804 	add.w	r8, r8, #4
 802457e:	461d      	mov	r5, r3
 8024580:	e752      	b.n	8024428 <__kernel_rem_pio2+0x1b0>
 8024582:	1acb      	subs	r3, r1, r3
 8024584:	f8c8 3000 	str.w	r3, [r8]
 8024588:	462b      	mov	r3, r5
 802458a:	e7f5      	b.n	8024578 <__kernel_rem_pio2+0x300>
 802458c:	f3af 8000 	nop.w
	...
 802459c:	3ff00000 	.word	0x3ff00000
 80245a0:	08029590 	.word	0x08029590
 80245a4:	40200000 	.word	0x40200000
 80245a8:	3ff00000 	.word	0x3ff00000
 80245ac:	3e700000 	.word	0x3e700000
 80245b0:	41700000 	.word	0x41700000
 80245b4:	3fe00000 	.word	0x3fe00000
 80245b8:	08029550 	.word	0x08029550
 80245bc:	1e62      	subs	r2, r4, #1
 80245be:	ab0e      	add	r3, sp, #56	; 0x38
 80245c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80245c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80245c8:	a90e      	add	r1, sp, #56	; 0x38
 80245ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80245ce:	e739      	b.n	8024444 <__kernel_rem_pio2+0x1cc>
 80245d0:	1e62      	subs	r2, r4, #1
 80245d2:	ab0e      	add	r3, sp, #56	; 0x38
 80245d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80245d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80245dc:	e7f4      	b.n	80245c8 <__kernel_rem_pio2+0x350>
 80245de:	a90e      	add	r1, sp, #56	; 0x38
 80245e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80245e4:	3b01      	subs	r3, #1
 80245e6:	430a      	orrs	r2, r1
 80245e8:	e789      	b.n	80244fe <__kernel_rem_pio2+0x286>
 80245ea:	3301      	adds	r3, #1
 80245ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80245f0:	2900      	cmp	r1, #0
 80245f2:	d0fa      	beq.n	80245ea <__kernel_rem_pio2+0x372>
 80245f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80245fa:	446a      	add	r2, sp
 80245fc:	3a98      	subs	r2, #152	; 0x98
 80245fe:	920a      	str	r2, [sp, #40]	; 0x28
 8024600:	9a08      	ldr	r2, [sp, #32]
 8024602:	18e3      	adds	r3, r4, r3
 8024604:	18a5      	adds	r5, r4, r2
 8024606:	aa22      	add	r2, sp, #136	; 0x88
 8024608:	f104 0801 	add.w	r8, r4, #1
 802460c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024610:	9304      	str	r3, [sp, #16]
 8024612:	9b04      	ldr	r3, [sp, #16]
 8024614:	4543      	cmp	r3, r8
 8024616:	da04      	bge.n	8024622 <__kernel_rem_pio2+0x3aa>
 8024618:	461c      	mov	r4, r3
 802461a:	e6a3      	b.n	8024364 <__kernel_rem_pio2+0xec>
 802461c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802461e:	2301      	movs	r3, #1
 8024620:	e7e4      	b.n	80245ec <__kernel_rem_pio2+0x374>
 8024622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024624:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8024628:	f7db ff30 	bl	800048c <__aeabi_i2d>
 802462c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024632:	46ab      	mov	fp, r5
 8024634:	461c      	mov	r4, r3
 8024636:	f04f 0900 	mov.w	r9, #0
 802463a:	2600      	movs	r6, #0
 802463c:	2700      	movs	r7, #0
 802463e:	9b06      	ldr	r3, [sp, #24]
 8024640:	4599      	cmp	r9, r3
 8024642:	dd06      	ble.n	8024652 <__kernel_rem_pio2+0x3da>
 8024644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024646:	e8e3 6702 	strd	r6, r7, [r3], #8
 802464a:	f108 0801 	add.w	r8, r8, #1
 802464e:	930a      	str	r3, [sp, #40]	; 0x28
 8024650:	e7df      	b.n	8024612 <__kernel_rem_pio2+0x39a>
 8024652:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8024656:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802465a:	f7db ff81 	bl	8000560 <__aeabi_dmul>
 802465e:	4602      	mov	r2, r0
 8024660:	460b      	mov	r3, r1
 8024662:	4630      	mov	r0, r6
 8024664:	4639      	mov	r1, r7
 8024666:	f7db fdc5 	bl	80001f4 <__adddf3>
 802466a:	f109 0901 	add.w	r9, r9, #1
 802466e:	4606      	mov	r6, r0
 8024670:	460f      	mov	r7, r1
 8024672:	e7e4      	b.n	802463e <__kernel_rem_pio2+0x3c6>
 8024674:	3d01      	subs	r5, #1
 8024676:	e748      	b.n	802450a <__kernel_rem_pio2+0x292>
 8024678:	ec47 6b10 	vmov	d0, r6, r7
 802467c:	f1ca 0000 	rsb	r0, sl, #0
 8024680:	f000 fdd2 	bl	8025228 <scalbn>
 8024684:	ec57 6b10 	vmov	r6, r7, d0
 8024688:	4ba0      	ldr	r3, [pc, #640]	; (802490c <__kernel_rem_pio2+0x694>)
 802468a:	ee10 0a10 	vmov	r0, s0
 802468e:	2200      	movs	r2, #0
 8024690:	4639      	mov	r1, r7
 8024692:	f7dc f9eb 	bl	8000a6c <__aeabi_dcmpge>
 8024696:	b1f8      	cbz	r0, 80246d8 <__kernel_rem_pio2+0x460>
 8024698:	4b9d      	ldr	r3, [pc, #628]	; (8024910 <__kernel_rem_pio2+0x698>)
 802469a:	2200      	movs	r2, #0
 802469c:	4630      	mov	r0, r6
 802469e:	4639      	mov	r1, r7
 80246a0:	f7db ff5e 	bl	8000560 <__aeabi_dmul>
 80246a4:	f7dc f9f6 	bl	8000a94 <__aeabi_d2iz>
 80246a8:	4680      	mov	r8, r0
 80246aa:	f7db feef 	bl	800048c <__aeabi_i2d>
 80246ae:	4b97      	ldr	r3, [pc, #604]	; (802490c <__kernel_rem_pio2+0x694>)
 80246b0:	2200      	movs	r2, #0
 80246b2:	f7db ff55 	bl	8000560 <__aeabi_dmul>
 80246b6:	460b      	mov	r3, r1
 80246b8:	4602      	mov	r2, r0
 80246ba:	4639      	mov	r1, r7
 80246bc:	4630      	mov	r0, r6
 80246be:	f7db fd97 	bl	80001f0 <__aeabi_dsub>
 80246c2:	f7dc f9e7 	bl	8000a94 <__aeabi_d2iz>
 80246c6:	1c65      	adds	r5, r4, #1
 80246c8:	ab0e      	add	r3, sp, #56	; 0x38
 80246ca:	f10a 0a18 	add.w	sl, sl, #24
 80246ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80246d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80246d6:	e720      	b.n	802451a <__kernel_rem_pio2+0x2a2>
 80246d8:	4630      	mov	r0, r6
 80246da:	4639      	mov	r1, r7
 80246dc:	f7dc f9da 	bl	8000a94 <__aeabi_d2iz>
 80246e0:	ab0e      	add	r3, sp, #56	; 0x38
 80246e2:	4625      	mov	r5, r4
 80246e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80246e8:	e717      	b.n	802451a <__kernel_rem_pio2+0x2a2>
 80246ea:	ab0e      	add	r3, sp, #56	; 0x38
 80246ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80246f0:	f7db fecc 	bl	800048c <__aeabi_i2d>
 80246f4:	4632      	mov	r2, r6
 80246f6:	463b      	mov	r3, r7
 80246f8:	f7db ff32 	bl	8000560 <__aeabi_dmul>
 80246fc:	4b84      	ldr	r3, [pc, #528]	; (8024910 <__kernel_rem_pio2+0x698>)
 80246fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8024702:	2200      	movs	r2, #0
 8024704:	4630      	mov	r0, r6
 8024706:	4639      	mov	r1, r7
 8024708:	f7db ff2a 	bl	8000560 <__aeabi_dmul>
 802470c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024710:	4606      	mov	r6, r0
 8024712:	460f      	mov	r7, r1
 8024714:	e70f      	b.n	8024536 <__kernel_rem_pio2+0x2be>
 8024716:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802471a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802471e:	f7db ff1f 	bl	8000560 <__aeabi_dmul>
 8024722:	4602      	mov	r2, r0
 8024724:	460b      	mov	r3, r1
 8024726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802472a:	f7db fd63 	bl	80001f4 <__adddf3>
 802472e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024732:	f108 0801 	add.w	r8, r8, #1
 8024736:	9b02      	ldr	r3, [sp, #8]
 8024738:	4598      	cmp	r8, r3
 802473a:	dc01      	bgt.n	8024740 <__kernel_rem_pio2+0x4c8>
 802473c:	45b8      	cmp	r8, r7
 802473e:	ddea      	ble.n	8024716 <__kernel_rem_pio2+0x49e>
 8024740:	ed9d 7b06 	vldr	d7, [sp, #24]
 8024744:	ab4a      	add	r3, sp, #296	; 0x128
 8024746:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802474a:	ed87 7b00 	vstr	d7, [r7]
 802474e:	3e01      	subs	r6, #1
 8024750:	e6f8      	b.n	8024544 <__kernel_rem_pio2+0x2cc>
 8024752:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024754:	2b02      	cmp	r3, #2
 8024756:	dc0b      	bgt.n	8024770 <__kernel_rem_pio2+0x4f8>
 8024758:	2b00      	cmp	r3, #0
 802475a:	dc35      	bgt.n	80247c8 <__kernel_rem_pio2+0x550>
 802475c:	d059      	beq.n	8024812 <__kernel_rem_pio2+0x59a>
 802475e:	9b04      	ldr	r3, [sp, #16]
 8024760:	f003 0007 	and.w	r0, r3, #7
 8024764:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8024768:	ecbd 8b02 	vpop	{d8}
 802476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024770:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024772:	2b03      	cmp	r3, #3
 8024774:	d1f3      	bne.n	802475e <__kernel_rem_pio2+0x4e6>
 8024776:	ab4a      	add	r3, sp, #296	; 0x128
 8024778:	4423      	add	r3, r4
 802477a:	9306      	str	r3, [sp, #24]
 802477c:	461c      	mov	r4, r3
 802477e:	469a      	mov	sl, r3
 8024780:	9502      	str	r5, [sp, #8]
 8024782:	9b02      	ldr	r3, [sp, #8]
 8024784:	2b00      	cmp	r3, #0
 8024786:	f1aa 0a08 	sub.w	sl, sl, #8
 802478a:	dc6b      	bgt.n	8024864 <__kernel_rem_pio2+0x5ec>
 802478c:	46aa      	mov	sl, r5
 802478e:	f1ba 0f01 	cmp.w	sl, #1
 8024792:	f1a4 0408 	sub.w	r4, r4, #8
 8024796:	f300 8085 	bgt.w	80248a4 <__kernel_rem_pio2+0x62c>
 802479a:	9c06      	ldr	r4, [sp, #24]
 802479c:	2000      	movs	r0, #0
 802479e:	3408      	adds	r4, #8
 80247a0:	2100      	movs	r1, #0
 80247a2:	2d01      	cmp	r5, #1
 80247a4:	f300 809d 	bgt.w	80248e2 <__kernel_rem_pio2+0x66a>
 80247a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80247ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80247b0:	f1bb 0f00 	cmp.w	fp, #0
 80247b4:	f040 809b 	bne.w	80248ee <__kernel_rem_pio2+0x676>
 80247b8:	9b01      	ldr	r3, [sp, #4]
 80247ba:	e9c3 5600 	strd	r5, r6, [r3]
 80247be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80247c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80247c6:	e7ca      	b.n	802475e <__kernel_rem_pio2+0x4e6>
 80247c8:	3408      	adds	r4, #8
 80247ca:	ab4a      	add	r3, sp, #296	; 0x128
 80247cc:	441c      	add	r4, r3
 80247ce:	462e      	mov	r6, r5
 80247d0:	2000      	movs	r0, #0
 80247d2:	2100      	movs	r1, #0
 80247d4:	2e00      	cmp	r6, #0
 80247d6:	da36      	bge.n	8024846 <__kernel_rem_pio2+0x5ce>
 80247d8:	f1bb 0f00 	cmp.w	fp, #0
 80247dc:	d039      	beq.n	8024852 <__kernel_rem_pio2+0x5da>
 80247de:	4602      	mov	r2, r0
 80247e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80247e4:	9c01      	ldr	r4, [sp, #4]
 80247e6:	e9c4 2300 	strd	r2, r3, [r4]
 80247ea:	4602      	mov	r2, r0
 80247ec:	460b      	mov	r3, r1
 80247ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80247f2:	f7db fcfd 	bl	80001f0 <__aeabi_dsub>
 80247f6:	ae4c      	add	r6, sp, #304	; 0x130
 80247f8:	2401      	movs	r4, #1
 80247fa:	42a5      	cmp	r5, r4
 80247fc:	da2c      	bge.n	8024858 <__kernel_rem_pio2+0x5e0>
 80247fe:	f1bb 0f00 	cmp.w	fp, #0
 8024802:	d002      	beq.n	802480a <__kernel_rem_pio2+0x592>
 8024804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024808:	4619      	mov	r1, r3
 802480a:	9b01      	ldr	r3, [sp, #4]
 802480c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8024810:	e7a5      	b.n	802475e <__kernel_rem_pio2+0x4e6>
 8024812:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8024816:	eb0d 0403 	add.w	r4, sp, r3
 802481a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802481e:	2000      	movs	r0, #0
 8024820:	2100      	movs	r1, #0
 8024822:	2d00      	cmp	r5, #0
 8024824:	da09      	bge.n	802483a <__kernel_rem_pio2+0x5c2>
 8024826:	f1bb 0f00 	cmp.w	fp, #0
 802482a:	d002      	beq.n	8024832 <__kernel_rem_pio2+0x5ba>
 802482c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024830:	4619      	mov	r1, r3
 8024832:	9b01      	ldr	r3, [sp, #4]
 8024834:	e9c3 0100 	strd	r0, r1, [r3]
 8024838:	e791      	b.n	802475e <__kernel_rem_pio2+0x4e6>
 802483a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802483e:	f7db fcd9 	bl	80001f4 <__adddf3>
 8024842:	3d01      	subs	r5, #1
 8024844:	e7ed      	b.n	8024822 <__kernel_rem_pio2+0x5aa>
 8024846:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802484a:	f7db fcd3 	bl	80001f4 <__adddf3>
 802484e:	3e01      	subs	r6, #1
 8024850:	e7c0      	b.n	80247d4 <__kernel_rem_pio2+0x55c>
 8024852:	4602      	mov	r2, r0
 8024854:	460b      	mov	r3, r1
 8024856:	e7c5      	b.n	80247e4 <__kernel_rem_pio2+0x56c>
 8024858:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802485c:	f7db fcca 	bl	80001f4 <__adddf3>
 8024860:	3401      	adds	r4, #1
 8024862:	e7ca      	b.n	80247fa <__kernel_rem_pio2+0x582>
 8024864:	e9da 8900 	ldrd	r8, r9, [sl]
 8024868:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802486c:	9b02      	ldr	r3, [sp, #8]
 802486e:	3b01      	subs	r3, #1
 8024870:	9302      	str	r3, [sp, #8]
 8024872:	4632      	mov	r2, r6
 8024874:	463b      	mov	r3, r7
 8024876:	4640      	mov	r0, r8
 8024878:	4649      	mov	r1, r9
 802487a:	f7db fcbb 	bl	80001f4 <__adddf3>
 802487e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024882:	4602      	mov	r2, r0
 8024884:	460b      	mov	r3, r1
 8024886:	4640      	mov	r0, r8
 8024888:	4649      	mov	r1, r9
 802488a:	f7db fcb1 	bl	80001f0 <__aeabi_dsub>
 802488e:	4632      	mov	r2, r6
 8024890:	463b      	mov	r3, r7
 8024892:	f7db fcaf 	bl	80001f4 <__adddf3>
 8024896:	ed9d 7b08 	vldr	d7, [sp, #32]
 802489a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802489e:	ed8a 7b00 	vstr	d7, [sl]
 80248a2:	e76e      	b.n	8024782 <__kernel_rem_pio2+0x50a>
 80248a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80248a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80248ac:	4640      	mov	r0, r8
 80248ae:	4632      	mov	r2, r6
 80248b0:	463b      	mov	r3, r7
 80248b2:	4649      	mov	r1, r9
 80248b4:	f7db fc9e 	bl	80001f4 <__adddf3>
 80248b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80248bc:	4602      	mov	r2, r0
 80248be:	460b      	mov	r3, r1
 80248c0:	4640      	mov	r0, r8
 80248c2:	4649      	mov	r1, r9
 80248c4:	f7db fc94 	bl	80001f0 <__aeabi_dsub>
 80248c8:	4632      	mov	r2, r6
 80248ca:	463b      	mov	r3, r7
 80248cc:	f7db fc92 	bl	80001f4 <__adddf3>
 80248d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80248d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80248d8:	ed84 7b00 	vstr	d7, [r4]
 80248dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80248e0:	e755      	b.n	802478e <__kernel_rem_pio2+0x516>
 80248e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80248e6:	f7db fc85 	bl	80001f4 <__adddf3>
 80248ea:	3d01      	subs	r5, #1
 80248ec:	e759      	b.n	80247a2 <__kernel_rem_pio2+0x52a>
 80248ee:	9b01      	ldr	r3, [sp, #4]
 80248f0:	9a01      	ldr	r2, [sp, #4]
 80248f2:	601d      	str	r5, [r3, #0]
 80248f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80248f8:	605c      	str	r4, [r3, #4]
 80248fa:	609f      	str	r7, [r3, #8]
 80248fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8024900:	60d3      	str	r3, [r2, #12]
 8024902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024906:	6110      	str	r0, [r2, #16]
 8024908:	6153      	str	r3, [r2, #20]
 802490a:	e728      	b.n	802475e <__kernel_rem_pio2+0x4e6>
 802490c:	41700000 	.word	0x41700000
 8024910:	3e700000 	.word	0x3e700000
 8024914:	00000000 	.word	0x00000000

08024918 <__kernel_sin>:
 8024918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802491c:	ed2d 8b04 	vpush	{d8-d9}
 8024920:	eeb0 8a41 	vmov.f32	s16, s2
 8024924:	eef0 8a61 	vmov.f32	s17, s3
 8024928:	ec55 4b10 	vmov	r4, r5, d0
 802492c:	b083      	sub	sp, #12
 802492e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024932:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024936:	9001      	str	r0, [sp, #4]
 8024938:	da06      	bge.n	8024948 <__kernel_sin+0x30>
 802493a:	ee10 0a10 	vmov	r0, s0
 802493e:	4629      	mov	r1, r5
 8024940:	f7dc f8a8 	bl	8000a94 <__aeabi_d2iz>
 8024944:	2800      	cmp	r0, #0
 8024946:	d051      	beq.n	80249ec <__kernel_sin+0xd4>
 8024948:	4622      	mov	r2, r4
 802494a:	462b      	mov	r3, r5
 802494c:	4620      	mov	r0, r4
 802494e:	4629      	mov	r1, r5
 8024950:	f7db fe06 	bl	8000560 <__aeabi_dmul>
 8024954:	4682      	mov	sl, r0
 8024956:	468b      	mov	fp, r1
 8024958:	4602      	mov	r2, r0
 802495a:	460b      	mov	r3, r1
 802495c:	4620      	mov	r0, r4
 802495e:	4629      	mov	r1, r5
 8024960:	f7db fdfe 	bl	8000560 <__aeabi_dmul>
 8024964:	a341      	add	r3, pc, #260	; (adr r3, 8024a6c <__kernel_sin+0x154>)
 8024966:	e9d3 2300 	ldrd	r2, r3, [r3]
 802496a:	4680      	mov	r8, r0
 802496c:	4689      	mov	r9, r1
 802496e:	4650      	mov	r0, sl
 8024970:	4659      	mov	r1, fp
 8024972:	f7db fdf5 	bl	8000560 <__aeabi_dmul>
 8024976:	a33f      	add	r3, pc, #252	; (adr r3, 8024a74 <__kernel_sin+0x15c>)
 8024978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802497c:	f7db fc38 	bl	80001f0 <__aeabi_dsub>
 8024980:	4652      	mov	r2, sl
 8024982:	465b      	mov	r3, fp
 8024984:	f7db fdec 	bl	8000560 <__aeabi_dmul>
 8024988:	a33c      	add	r3, pc, #240	; (adr r3, 8024a7c <__kernel_sin+0x164>)
 802498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802498e:	f7db fc31 	bl	80001f4 <__adddf3>
 8024992:	4652      	mov	r2, sl
 8024994:	465b      	mov	r3, fp
 8024996:	f7db fde3 	bl	8000560 <__aeabi_dmul>
 802499a:	a33a      	add	r3, pc, #232	; (adr r3, 8024a84 <__kernel_sin+0x16c>)
 802499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249a0:	f7db fc26 	bl	80001f0 <__aeabi_dsub>
 80249a4:	4652      	mov	r2, sl
 80249a6:	465b      	mov	r3, fp
 80249a8:	f7db fdda 	bl	8000560 <__aeabi_dmul>
 80249ac:	a337      	add	r3, pc, #220	; (adr r3, 8024a8c <__kernel_sin+0x174>)
 80249ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249b2:	f7db fc1f 	bl	80001f4 <__adddf3>
 80249b6:	9b01      	ldr	r3, [sp, #4]
 80249b8:	4606      	mov	r6, r0
 80249ba:	460f      	mov	r7, r1
 80249bc:	b9eb      	cbnz	r3, 80249fa <__kernel_sin+0xe2>
 80249be:	4602      	mov	r2, r0
 80249c0:	460b      	mov	r3, r1
 80249c2:	4650      	mov	r0, sl
 80249c4:	4659      	mov	r1, fp
 80249c6:	f7db fdcb 	bl	8000560 <__aeabi_dmul>
 80249ca:	a325      	add	r3, pc, #148	; (adr r3, 8024a60 <__kernel_sin+0x148>)
 80249cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249d0:	f7db fc0e 	bl	80001f0 <__aeabi_dsub>
 80249d4:	4642      	mov	r2, r8
 80249d6:	464b      	mov	r3, r9
 80249d8:	f7db fdc2 	bl	8000560 <__aeabi_dmul>
 80249dc:	4602      	mov	r2, r0
 80249de:	460b      	mov	r3, r1
 80249e0:	4620      	mov	r0, r4
 80249e2:	4629      	mov	r1, r5
 80249e4:	f7db fc06 	bl	80001f4 <__adddf3>
 80249e8:	4604      	mov	r4, r0
 80249ea:	460d      	mov	r5, r1
 80249ec:	ec45 4b10 	vmov	d0, r4, r5
 80249f0:	b003      	add	sp, #12
 80249f2:	ecbd 8b04 	vpop	{d8-d9}
 80249f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249fa:	4b1b      	ldr	r3, [pc, #108]	; (8024a68 <__kernel_sin+0x150>)
 80249fc:	ec51 0b18 	vmov	r0, r1, d8
 8024a00:	2200      	movs	r2, #0
 8024a02:	f7db fdad 	bl	8000560 <__aeabi_dmul>
 8024a06:	4632      	mov	r2, r6
 8024a08:	ec41 0b19 	vmov	d9, r0, r1
 8024a0c:	463b      	mov	r3, r7
 8024a0e:	4640      	mov	r0, r8
 8024a10:	4649      	mov	r1, r9
 8024a12:	f7db fda5 	bl	8000560 <__aeabi_dmul>
 8024a16:	4602      	mov	r2, r0
 8024a18:	460b      	mov	r3, r1
 8024a1a:	ec51 0b19 	vmov	r0, r1, d9
 8024a1e:	f7db fbe7 	bl	80001f0 <__aeabi_dsub>
 8024a22:	4652      	mov	r2, sl
 8024a24:	465b      	mov	r3, fp
 8024a26:	f7db fd9b 	bl	8000560 <__aeabi_dmul>
 8024a2a:	ec53 2b18 	vmov	r2, r3, d8
 8024a2e:	f7db fbdf 	bl	80001f0 <__aeabi_dsub>
 8024a32:	a30b      	add	r3, pc, #44	; (adr r3, 8024a60 <__kernel_sin+0x148>)
 8024a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a38:	4606      	mov	r6, r0
 8024a3a:	460f      	mov	r7, r1
 8024a3c:	4640      	mov	r0, r8
 8024a3e:	4649      	mov	r1, r9
 8024a40:	f7db fd8e 	bl	8000560 <__aeabi_dmul>
 8024a44:	4602      	mov	r2, r0
 8024a46:	460b      	mov	r3, r1
 8024a48:	4630      	mov	r0, r6
 8024a4a:	4639      	mov	r1, r7
 8024a4c:	f7db fbd2 	bl	80001f4 <__adddf3>
 8024a50:	4602      	mov	r2, r0
 8024a52:	460b      	mov	r3, r1
 8024a54:	4620      	mov	r0, r4
 8024a56:	4629      	mov	r1, r5
 8024a58:	f7db fbca 	bl	80001f0 <__aeabi_dsub>
 8024a5c:	e7c4      	b.n	80249e8 <__kernel_sin+0xd0>
 8024a5e:	bf00      	nop
 8024a60:	55555549 	.word	0x55555549
 8024a64:	3fc55555 	.word	0x3fc55555
 8024a68:	3fe00000 	.word	0x3fe00000
 8024a6c:	5acfd57c 	.word	0x5acfd57c
 8024a70:	3de5d93a 	.word	0x3de5d93a
 8024a74:	8a2b9ceb 	.word	0x8a2b9ceb
 8024a78:	3e5ae5e6 	.word	0x3e5ae5e6
 8024a7c:	57b1fe7d 	.word	0x57b1fe7d
 8024a80:	3ec71de3 	.word	0x3ec71de3
 8024a84:	19c161d5 	.word	0x19c161d5
 8024a88:	3f2a01a0 	.word	0x3f2a01a0
 8024a8c:	1110f8a6 	.word	0x1110f8a6
 8024a90:	3f811111 	.word	0x3f811111

08024a94 <__kernel_cosf>:
 8024a94:	ee10 3a10 	vmov	r3, s0
 8024a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024a9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024aa0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024aa4:	da05      	bge.n	8024ab2 <__kernel_cosf+0x1e>
 8024aa6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024aaa:	ee17 2a90 	vmov	r2, s15
 8024aae:	2a00      	cmp	r2, #0
 8024ab0:	d03d      	beq.n	8024b2e <__kernel_cosf+0x9a>
 8024ab2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8024ab6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024b34 <__kernel_cosf+0xa0>
 8024aba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024b38 <__kernel_cosf+0xa4>
 8024abe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8024b3c <__kernel_cosf+0xa8>
 8024ac2:	4a1f      	ldr	r2, [pc, #124]	; (8024b40 <__kernel_cosf+0xac>)
 8024ac4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8024ac8:	4293      	cmp	r3, r2
 8024aca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8024b44 <__kernel_cosf+0xb0>
 8024ace:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024ad2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024b48 <__kernel_cosf+0xb4>
 8024ad6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024ada:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8024b4c <__kernel_cosf+0xb8>
 8024ade:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024ae2:	eeb0 7a66 	vmov.f32	s14, s13
 8024ae6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024aea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024aee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8024af2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8024af6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8024afa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024afe:	dc04      	bgt.n	8024b0a <__kernel_cosf+0x76>
 8024b00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8024b04:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024b08:	4770      	bx	lr
 8024b0a:	4a11      	ldr	r2, [pc, #68]	; (8024b50 <__kernel_cosf+0xbc>)
 8024b0c:	4293      	cmp	r3, r2
 8024b0e:	bfda      	itte	le
 8024b10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8024b14:	ee06 3a90 	vmovle	s13, r3
 8024b18:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8024b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024b20:	ee36 0a66 	vsub.f32	s0, s12, s13
 8024b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024b28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024b2c:	4770      	bx	lr
 8024b2e:	eeb0 0a46 	vmov.f32	s0, s12
 8024b32:	4770      	bx	lr
 8024b34:	ad47d74e 	.word	0xad47d74e
 8024b38:	310f74f6 	.word	0x310f74f6
 8024b3c:	3d2aaaab 	.word	0x3d2aaaab
 8024b40:	3e999999 	.word	0x3e999999
 8024b44:	b493f27c 	.word	0xb493f27c
 8024b48:	37d00d01 	.word	0x37d00d01
 8024b4c:	bab60b61 	.word	0xbab60b61
 8024b50:	3f480000 	.word	0x3f480000

08024b54 <__kernel_rem_pio2f>:
 8024b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b58:	ed2d 8b04 	vpush	{d8-d9}
 8024b5c:	b0d9      	sub	sp, #356	; 0x164
 8024b5e:	4688      	mov	r8, r1
 8024b60:	9002      	str	r0, [sp, #8]
 8024b62:	49bb      	ldr	r1, [pc, #748]	; (8024e50 <__kernel_rem_pio2f+0x2fc>)
 8024b64:	9866      	ldr	r0, [sp, #408]	; 0x198
 8024b66:	9301      	str	r3, [sp, #4]
 8024b68:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8024b6c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8024b70:	1e59      	subs	r1, r3, #1
 8024b72:	1d13      	adds	r3, r2, #4
 8024b74:	db27      	blt.n	8024bc6 <__kernel_rem_pio2f+0x72>
 8024b76:	f1b2 0b03 	subs.w	fp, r2, #3
 8024b7a:	bf48      	it	mi
 8024b7c:	f102 0b04 	addmi.w	fp, r2, #4
 8024b80:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8024b84:	1c45      	adds	r5, r0, #1
 8024b86:	00ec      	lsls	r4, r5, #3
 8024b88:	1a47      	subs	r7, r0, r1
 8024b8a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024b8e:	9403      	str	r4, [sp, #12]
 8024b90:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8024b94:	eb0a 0c01 	add.w	ip, sl, r1
 8024b98:	ae1c      	add	r6, sp, #112	; 0x70
 8024b9a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8024b9e:	2400      	movs	r4, #0
 8024ba0:	4564      	cmp	r4, ip
 8024ba2:	dd12      	ble.n	8024bca <__kernel_rem_pio2f+0x76>
 8024ba4:	9b01      	ldr	r3, [sp, #4]
 8024ba6:	ac1c      	add	r4, sp, #112	; 0x70
 8024ba8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8024bac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8024bb0:	f04f 0c00 	mov.w	ip, #0
 8024bb4:	45d4      	cmp	ip, sl
 8024bb6:	dc27      	bgt.n	8024c08 <__kernel_rem_pio2f+0xb4>
 8024bb8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8024bbc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024bc0:	4627      	mov	r7, r4
 8024bc2:	2600      	movs	r6, #0
 8024bc4:	e016      	b.n	8024bf4 <__kernel_rem_pio2f+0xa0>
 8024bc6:	2000      	movs	r0, #0
 8024bc8:	e7dc      	b.n	8024b84 <__kernel_rem_pio2f+0x30>
 8024bca:	42e7      	cmn	r7, r4
 8024bcc:	bf5d      	ittte	pl
 8024bce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8024bd2:	ee07 3a90 	vmovpl	s15, r3
 8024bd6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8024bda:	eef0 7a47 	vmovmi.f32	s15, s14
 8024bde:	ece6 7a01 	vstmia	r6!, {s15}
 8024be2:	3401      	adds	r4, #1
 8024be4:	e7dc      	b.n	8024ba0 <__kernel_rem_pio2f+0x4c>
 8024be6:	ecf9 6a01 	vldmia	r9!, {s13}
 8024bea:	ed97 7a00 	vldr	s14, [r7]
 8024bee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024bf2:	3601      	adds	r6, #1
 8024bf4:	428e      	cmp	r6, r1
 8024bf6:	f1a7 0704 	sub.w	r7, r7, #4
 8024bfa:	ddf4      	ble.n	8024be6 <__kernel_rem_pio2f+0x92>
 8024bfc:	eceb 7a01 	vstmia	fp!, {s15}
 8024c00:	f10c 0c01 	add.w	ip, ip, #1
 8024c04:	3404      	adds	r4, #4
 8024c06:	e7d5      	b.n	8024bb4 <__kernel_rem_pio2f+0x60>
 8024c08:	ab08      	add	r3, sp, #32
 8024c0a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024c0e:	eddf 8a93 	vldr	s17, [pc, #588]	; 8024e5c <__kernel_rem_pio2f+0x308>
 8024c12:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8024e58 <__kernel_rem_pio2f+0x304>
 8024c16:	9304      	str	r3, [sp, #16]
 8024c18:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8024c1c:	4656      	mov	r6, sl
 8024c1e:	00b3      	lsls	r3, r6, #2
 8024c20:	9305      	str	r3, [sp, #20]
 8024c22:	ab58      	add	r3, sp, #352	; 0x160
 8024c24:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024c28:	ac08      	add	r4, sp, #32
 8024c2a:	ab44      	add	r3, sp, #272	; 0x110
 8024c2c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8024c30:	46a4      	mov	ip, r4
 8024c32:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024c36:	4637      	mov	r7, r6
 8024c38:	2f00      	cmp	r7, #0
 8024c3a:	f1a0 0004 	sub.w	r0, r0, #4
 8024c3e:	dc4f      	bgt.n	8024ce0 <__kernel_rem_pio2f+0x18c>
 8024c40:	4628      	mov	r0, r5
 8024c42:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8024c46:	f000 fca5 	bl	8025594 <scalbnf>
 8024c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8024c4e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8024c52:	ee28 0a00 	vmul.f32	s0, s16, s0
 8024c56:	f000 fc55 	bl	8025504 <floorf>
 8024c5a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8024c5e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024c62:	2d00      	cmp	r5, #0
 8024c64:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024c68:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8024c6c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8024c70:	ee17 9a90 	vmov	r9, s15
 8024c74:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024c78:	dd44      	ble.n	8024d04 <__kernel_rem_pio2f+0x1b0>
 8024c7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8024c7e:	ab08      	add	r3, sp, #32
 8024c80:	f1c5 0e08 	rsb	lr, r5, #8
 8024c84:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8024c88:	fa47 f00e 	asr.w	r0, r7, lr
 8024c8c:	4481      	add	r9, r0
 8024c8e:	fa00 f00e 	lsl.w	r0, r0, lr
 8024c92:	1a3f      	subs	r7, r7, r0
 8024c94:	f1c5 0007 	rsb	r0, r5, #7
 8024c98:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8024c9c:	4107      	asrs	r7, r0
 8024c9e:	2f00      	cmp	r7, #0
 8024ca0:	dd3f      	ble.n	8024d22 <__kernel_rem_pio2f+0x1ce>
 8024ca2:	f04f 0e00 	mov.w	lr, #0
 8024ca6:	f109 0901 	add.w	r9, r9, #1
 8024caa:	4673      	mov	r3, lr
 8024cac:	4576      	cmp	r6, lr
 8024cae:	dc6b      	bgt.n	8024d88 <__kernel_rem_pio2f+0x234>
 8024cb0:	2d00      	cmp	r5, #0
 8024cb2:	dd04      	ble.n	8024cbe <__kernel_rem_pio2f+0x16a>
 8024cb4:	2d01      	cmp	r5, #1
 8024cb6:	d078      	beq.n	8024daa <__kernel_rem_pio2f+0x256>
 8024cb8:	2d02      	cmp	r5, #2
 8024cba:	f000 8081 	beq.w	8024dc0 <__kernel_rem_pio2f+0x26c>
 8024cbe:	2f02      	cmp	r7, #2
 8024cc0:	d12f      	bne.n	8024d22 <__kernel_rem_pio2f+0x1ce>
 8024cc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024cc6:	ee30 8a48 	vsub.f32	s16, s0, s16
 8024cca:	b353      	cbz	r3, 8024d22 <__kernel_rem_pio2f+0x1ce>
 8024ccc:	4628      	mov	r0, r5
 8024cce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8024cd2:	f000 fc5f 	bl	8025594 <scalbnf>
 8024cd6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024cda:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024cde:	e020      	b.n	8024d22 <__kernel_rem_pio2f+0x1ce>
 8024ce0:	ee60 7a28 	vmul.f32	s15, s0, s17
 8024ce4:	3f01      	subs	r7, #1
 8024ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024cee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8024cf2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024cf6:	ecac 0a01 	vstmia	ip!, {s0}
 8024cfa:	ed90 0a00 	vldr	s0, [r0]
 8024cfe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8024d02:	e799      	b.n	8024c38 <__kernel_rem_pio2f+0xe4>
 8024d04:	d105      	bne.n	8024d12 <__kernel_rem_pio2f+0x1be>
 8024d06:	1e70      	subs	r0, r6, #1
 8024d08:	ab08      	add	r3, sp, #32
 8024d0a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8024d0e:	11ff      	asrs	r7, r7, #7
 8024d10:	e7c5      	b.n	8024c9e <__kernel_rem_pio2f+0x14a>
 8024d12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024d16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8024d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024d1e:	da31      	bge.n	8024d84 <__kernel_rem_pio2f+0x230>
 8024d20:	2700      	movs	r7, #0
 8024d22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024d2a:	f040 809b 	bne.w	8024e64 <__kernel_rem_pio2f+0x310>
 8024d2e:	1e74      	subs	r4, r6, #1
 8024d30:	46a4      	mov	ip, r4
 8024d32:	2000      	movs	r0, #0
 8024d34:	45d4      	cmp	ip, sl
 8024d36:	da4a      	bge.n	8024dce <__kernel_rem_pio2f+0x27a>
 8024d38:	2800      	cmp	r0, #0
 8024d3a:	d07a      	beq.n	8024e32 <__kernel_rem_pio2f+0x2de>
 8024d3c:	ab08      	add	r3, sp, #32
 8024d3e:	3d08      	subs	r5, #8
 8024d40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8024d44:	2b00      	cmp	r3, #0
 8024d46:	f000 8081 	beq.w	8024e4c <__kernel_rem_pio2f+0x2f8>
 8024d4a:	4628      	mov	r0, r5
 8024d4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024d50:	00a5      	lsls	r5, r4, #2
 8024d52:	f000 fc1f 	bl	8025594 <scalbnf>
 8024d56:	aa44      	add	r2, sp, #272	; 0x110
 8024d58:	1d2b      	adds	r3, r5, #4
 8024d5a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8024e5c <__kernel_rem_pio2f+0x308>
 8024d5e:	18d1      	adds	r1, r2, r3
 8024d60:	4622      	mov	r2, r4
 8024d62:	2a00      	cmp	r2, #0
 8024d64:	f280 80ae 	bge.w	8024ec4 <__kernel_rem_pio2f+0x370>
 8024d68:	4622      	mov	r2, r4
 8024d6a:	2a00      	cmp	r2, #0
 8024d6c:	f2c0 80cc 	blt.w	8024f08 <__kernel_rem_pio2f+0x3b4>
 8024d70:	a944      	add	r1, sp, #272	; 0x110
 8024d72:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8024d76:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8024e54 <__kernel_rem_pio2f+0x300>
 8024d7a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024d7e:	2000      	movs	r0, #0
 8024d80:	1aa1      	subs	r1, r4, r2
 8024d82:	e0b6      	b.n	8024ef2 <__kernel_rem_pio2f+0x39e>
 8024d84:	2702      	movs	r7, #2
 8024d86:	e78c      	b.n	8024ca2 <__kernel_rem_pio2f+0x14e>
 8024d88:	6820      	ldr	r0, [r4, #0]
 8024d8a:	b94b      	cbnz	r3, 8024da0 <__kernel_rem_pio2f+0x24c>
 8024d8c:	b118      	cbz	r0, 8024d96 <__kernel_rem_pio2f+0x242>
 8024d8e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024d92:	6020      	str	r0, [r4, #0]
 8024d94:	2001      	movs	r0, #1
 8024d96:	f10e 0e01 	add.w	lr, lr, #1
 8024d9a:	3404      	adds	r4, #4
 8024d9c:	4603      	mov	r3, r0
 8024d9e:	e785      	b.n	8024cac <__kernel_rem_pio2f+0x158>
 8024da0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8024da4:	6020      	str	r0, [r4, #0]
 8024da6:	4618      	mov	r0, r3
 8024da8:	e7f5      	b.n	8024d96 <__kernel_rem_pio2f+0x242>
 8024daa:	1e74      	subs	r4, r6, #1
 8024dac:	a808      	add	r0, sp, #32
 8024dae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8024db2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8024db6:	f10d 0c20 	add.w	ip, sp, #32
 8024dba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8024dbe:	e77e      	b.n	8024cbe <__kernel_rem_pio2f+0x16a>
 8024dc0:	1e74      	subs	r4, r6, #1
 8024dc2:	a808      	add	r0, sp, #32
 8024dc4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8024dc8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8024dcc:	e7f3      	b.n	8024db6 <__kernel_rem_pio2f+0x262>
 8024dce:	ab08      	add	r3, sp, #32
 8024dd0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024dd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024dd8:	4318      	orrs	r0, r3
 8024dda:	e7ab      	b.n	8024d34 <__kernel_rem_pio2f+0x1e0>
 8024ddc:	f10c 0c01 	add.w	ip, ip, #1
 8024de0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8024de4:	2c00      	cmp	r4, #0
 8024de6:	d0f9      	beq.n	8024ddc <__kernel_rem_pio2f+0x288>
 8024de8:	9b05      	ldr	r3, [sp, #20]
 8024dea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8024dee:	eb0d 0003 	add.w	r0, sp, r3
 8024df2:	9b01      	ldr	r3, [sp, #4]
 8024df4:	18f4      	adds	r4, r6, r3
 8024df6:	ab1c      	add	r3, sp, #112	; 0x70
 8024df8:	1c77      	adds	r7, r6, #1
 8024dfa:	384c      	subs	r0, #76	; 0x4c
 8024dfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024e00:	4466      	add	r6, ip
 8024e02:	42be      	cmp	r6, r7
 8024e04:	f6ff af0b 	blt.w	8024c1e <__kernel_rem_pio2f+0xca>
 8024e08:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8024e0c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8024e10:	ee07 3a90 	vmov	s15, r3
 8024e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024e18:	f04f 0c00 	mov.w	ip, #0
 8024e1c:	ece4 7a01 	vstmia	r4!, {s15}
 8024e20:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024e24:	46a1      	mov	r9, r4
 8024e26:	458c      	cmp	ip, r1
 8024e28:	dd07      	ble.n	8024e3a <__kernel_rem_pio2f+0x2e6>
 8024e2a:	ece0 7a01 	vstmia	r0!, {s15}
 8024e2e:	3701      	adds	r7, #1
 8024e30:	e7e7      	b.n	8024e02 <__kernel_rem_pio2f+0x2ae>
 8024e32:	9804      	ldr	r0, [sp, #16]
 8024e34:	f04f 0c01 	mov.w	ip, #1
 8024e38:	e7d2      	b.n	8024de0 <__kernel_rem_pio2f+0x28c>
 8024e3a:	ecfe 6a01 	vldmia	lr!, {s13}
 8024e3e:	ed39 7a01 	vldmdb	r9!, {s14}
 8024e42:	f10c 0c01 	add.w	ip, ip, #1
 8024e46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024e4a:	e7ec      	b.n	8024e26 <__kernel_rem_pio2f+0x2d2>
 8024e4c:	3c01      	subs	r4, #1
 8024e4e:	e775      	b.n	8024d3c <__kernel_rem_pio2f+0x1e8>
 8024e50:	080295cc 	.word	0x080295cc
 8024e54:	080295a0 	.word	0x080295a0
 8024e58:	43800000 	.word	0x43800000
 8024e5c:	3b800000 	.word	0x3b800000
 8024e60:	00000000 	.word	0x00000000
 8024e64:	9b03      	ldr	r3, [sp, #12]
 8024e66:	eeb0 0a48 	vmov.f32	s0, s16
 8024e6a:	1a98      	subs	r0, r3, r2
 8024e6c:	f000 fb92 	bl	8025594 <scalbnf>
 8024e70:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8024e58 <__kernel_rem_pio2f+0x304>
 8024e74:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8024e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e7c:	db19      	blt.n	8024eb2 <__kernel_rem_pio2f+0x35e>
 8024e7e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8024e5c <__kernel_rem_pio2f+0x308>
 8024e82:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024e86:	aa08      	add	r2, sp, #32
 8024e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024e8c:	1c74      	adds	r4, r6, #1
 8024e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024e92:	3508      	adds	r5, #8
 8024e94:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024e9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024ea0:	ee10 3a10 	vmov	r3, s0
 8024ea4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8024ea8:	ee17 3a90 	vmov	r3, s15
 8024eac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8024eb0:	e74b      	b.n	8024d4a <__kernel_rem_pio2f+0x1f6>
 8024eb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024eb6:	aa08      	add	r2, sp, #32
 8024eb8:	ee10 3a10 	vmov	r3, s0
 8024ebc:	4634      	mov	r4, r6
 8024ebe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8024ec2:	e742      	b.n	8024d4a <__kernel_rem_pio2f+0x1f6>
 8024ec4:	a808      	add	r0, sp, #32
 8024ec6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8024eca:	9001      	str	r0, [sp, #4]
 8024ecc:	ee07 0a90 	vmov	s15, r0
 8024ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024ed4:	3a01      	subs	r2, #1
 8024ed6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024eda:	ee20 0a07 	vmul.f32	s0, s0, s14
 8024ede:	ed61 7a01 	vstmdb	r1!, {s15}
 8024ee2:	e73e      	b.n	8024d62 <__kernel_rem_pio2f+0x20e>
 8024ee4:	ecfc 6a01 	vldmia	ip!, {s13}
 8024ee8:	ecb6 7a01 	vldmia	r6!, {s14}
 8024eec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024ef0:	3001      	adds	r0, #1
 8024ef2:	4550      	cmp	r0, sl
 8024ef4:	dc01      	bgt.n	8024efa <__kernel_rem_pio2f+0x3a6>
 8024ef6:	4288      	cmp	r0, r1
 8024ef8:	ddf4      	ble.n	8024ee4 <__kernel_rem_pio2f+0x390>
 8024efa:	a858      	add	r0, sp, #352	; 0x160
 8024efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024f00:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8024f04:	3a01      	subs	r2, #1
 8024f06:	e730      	b.n	8024d6a <__kernel_rem_pio2f+0x216>
 8024f08:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8024f0a:	2a02      	cmp	r2, #2
 8024f0c:	dc09      	bgt.n	8024f22 <__kernel_rem_pio2f+0x3ce>
 8024f0e:	2a00      	cmp	r2, #0
 8024f10:	dc2a      	bgt.n	8024f68 <__kernel_rem_pio2f+0x414>
 8024f12:	d043      	beq.n	8024f9c <__kernel_rem_pio2f+0x448>
 8024f14:	f009 0007 	and.w	r0, r9, #7
 8024f18:	b059      	add	sp, #356	; 0x164
 8024f1a:	ecbd 8b04 	vpop	{d8-d9}
 8024f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f22:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8024f24:	2b03      	cmp	r3, #3
 8024f26:	d1f5      	bne.n	8024f14 <__kernel_rem_pio2f+0x3c0>
 8024f28:	ab30      	add	r3, sp, #192	; 0xc0
 8024f2a:	442b      	add	r3, r5
 8024f2c:	461a      	mov	r2, r3
 8024f2e:	4619      	mov	r1, r3
 8024f30:	4620      	mov	r0, r4
 8024f32:	2800      	cmp	r0, #0
 8024f34:	f1a1 0104 	sub.w	r1, r1, #4
 8024f38:	dc51      	bgt.n	8024fde <__kernel_rem_pio2f+0x48a>
 8024f3a:	4621      	mov	r1, r4
 8024f3c:	2901      	cmp	r1, #1
 8024f3e:	f1a2 0204 	sub.w	r2, r2, #4
 8024f42:	dc5c      	bgt.n	8024ffe <__kernel_rem_pio2f+0x4aa>
 8024f44:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024f48:	3304      	adds	r3, #4
 8024f4a:	2c01      	cmp	r4, #1
 8024f4c:	dc67      	bgt.n	802501e <__kernel_rem_pio2f+0x4ca>
 8024f4e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8024f52:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8024f56:	2f00      	cmp	r7, #0
 8024f58:	d167      	bne.n	802502a <__kernel_rem_pio2f+0x4d6>
 8024f5a:	edc8 6a00 	vstr	s13, [r8]
 8024f5e:	ed88 7a01 	vstr	s14, [r8, #4]
 8024f62:	edc8 7a02 	vstr	s15, [r8, #8]
 8024f66:	e7d5      	b.n	8024f14 <__kernel_rem_pio2f+0x3c0>
 8024f68:	aa30      	add	r2, sp, #192	; 0xc0
 8024f6a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024f6e:	4413      	add	r3, r2
 8024f70:	4622      	mov	r2, r4
 8024f72:	2a00      	cmp	r2, #0
 8024f74:	da24      	bge.n	8024fc0 <__kernel_rem_pio2f+0x46c>
 8024f76:	b34f      	cbz	r7, 8024fcc <__kernel_rem_pio2f+0x478>
 8024f78:	eef1 7a47 	vneg.f32	s15, s14
 8024f7c:	edc8 7a00 	vstr	s15, [r8]
 8024f80:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8024f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024f88:	aa31      	add	r2, sp, #196	; 0xc4
 8024f8a:	2301      	movs	r3, #1
 8024f8c:	429c      	cmp	r4, r3
 8024f8e:	da20      	bge.n	8024fd2 <__kernel_rem_pio2f+0x47e>
 8024f90:	b10f      	cbz	r7, 8024f96 <__kernel_rem_pio2f+0x442>
 8024f92:	eef1 7a67 	vneg.f32	s15, s15
 8024f96:	edc8 7a01 	vstr	s15, [r8, #4]
 8024f9a:	e7bb      	b.n	8024f14 <__kernel_rem_pio2f+0x3c0>
 8024f9c:	aa30      	add	r2, sp, #192	; 0xc0
 8024f9e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8024e60 <__kernel_rem_pio2f+0x30c>
 8024fa2:	4413      	add	r3, r2
 8024fa4:	2c00      	cmp	r4, #0
 8024fa6:	da05      	bge.n	8024fb4 <__kernel_rem_pio2f+0x460>
 8024fa8:	b10f      	cbz	r7, 8024fae <__kernel_rem_pio2f+0x45a>
 8024faa:	eef1 7a67 	vneg.f32	s15, s15
 8024fae:	edc8 7a00 	vstr	s15, [r8]
 8024fb2:	e7af      	b.n	8024f14 <__kernel_rem_pio2f+0x3c0>
 8024fb4:	ed33 7a01 	vldmdb	r3!, {s14}
 8024fb8:	3c01      	subs	r4, #1
 8024fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fbe:	e7f1      	b.n	8024fa4 <__kernel_rem_pio2f+0x450>
 8024fc0:	ed73 7a01 	vldmdb	r3!, {s15}
 8024fc4:	3a01      	subs	r2, #1
 8024fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024fca:	e7d2      	b.n	8024f72 <__kernel_rem_pio2f+0x41e>
 8024fcc:	eef0 7a47 	vmov.f32	s15, s14
 8024fd0:	e7d4      	b.n	8024f7c <__kernel_rem_pio2f+0x428>
 8024fd2:	ecb2 7a01 	vldmia	r2!, {s14}
 8024fd6:	3301      	adds	r3, #1
 8024fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fdc:	e7d6      	b.n	8024f8c <__kernel_rem_pio2f+0x438>
 8024fde:	edd1 7a00 	vldr	s15, [r1]
 8024fe2:	edd1 6a01 	vldr	s13, [r1, #4]
 8024fe6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024fea:	3801      	subs	r0, #1
 8024fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024ff0:	ed81 7a00 	vstr	s14, [r1]
 8024ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024ff8:	edc1 7a01 	vstr	s15, [r1, #4]
 8024ffc:	e799      	b.n	8024f32 <__kernel_rem_pio2f+0x3de>
 8024ffe:	edd2 7a00 	vldr	s15, [r2]
 8025002:	edd2 6a01 	vldr	s13, [r2, #4]
 8025006:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802500a:	3901      	subs	r1, #1
 802500c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025010:	ed82 7a00 	vstr	s14, [r2]
 8025014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025018:	edc2 7a01 	vstr	s15, [r2, #4]
 802501c:	e78e      	b.n	8024f3c <__kernel_rem_pio2f+0x3e8>
 802501e:	ed33 7a01 	vldmdb	r3!, {s14}
 8025022:	3c01      	subs	r4, #1
 8025024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025028:	e78f      	b.n	8024f4a <__kernel_rem_pio2f+0x3f6>
 802502a:	eef1 6a66 	vneg.f32	s13, s13
 802502e:	eeb1 7a47 	vneg.f32	s14, s14
 8025032:	edc8 6a00 	vstr	s13, [r8]
 8025036:	ed88 7a01 	vstr	s14, [r8, #4]
 802503a:	eef1 7a67 	vneg.f32	s15, s15
 802503e:	e790      	b.n	8024f62 <__kernel_rem_pio2f+0x40e>

08025040 <__kernel_sinf>:
 8025040:	ee10 3a10 	vmov	r3, s0
 8025044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025048:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802504c:	da04      	bge.n	8025058 <__kernel_sinf+0x18>
 802504e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025052:	ee17 3a90 	vmov	r3, s15
 8025056:	b35b      	cbz	r3, 80250b0 <__kernel_sinf+0x70>
 8025058:	ee20 7a00 	vmul.f32	s14, s0, s0
 802505c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80250b4 <__kernel_sinf+0x74>
 8025060:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80250b8 <__kernel_sinf+0x78>
 8025064:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025068:	eddf 7a14 	vldr	s15, [pc, #80]	; 80250bc <__kernel_sinf+0x7c>
 802506c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025070:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80250c0 <__kernel_sinf+0x80>
 8025074:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025078:	eddf 7a12 	vldr	s15, [pc, #72]	; 80250c4 <__kernel_sinf+0x84>
 802507c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025080:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025084:	b930      	cbnz	r0, 8025094 <__kernel_sinf+0x54>
 8025086:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80250c8 <__kernel_sinf+0x88>
 802508a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802508e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8025092:	4770      	bx	lr
 8025094:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8025098:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802509c:	eee0 7a86 	vfma.f32	s15, s1, s12
 80250a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80250a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80250cc <__kernel_sinf+0x8c>
 80250a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80250ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 80250b0:	4770      	bx	lr
 80250b2:	bf00      	nop
 80250b4:	2f2ec9d3 	.word	0x2f2ec9d3
 80250b8:	b2d72f34 	.word	0xb2d72f34
 80250bc:	3638ef1b 	.word	0x3638ef1b
 80250c0:	b9500d01 	.word	0xb9500d01
 80250c4:	3c088889 	.word	0x3c088889
 80250c8:	be2aaaab 	.word	0xbe2aaaab
 80250cc:	3e2aaaab 	.word	0x3e2aaaab

080250d0 <with_errnof>:
 80250d0:	b513      	push	{r0, r1, r4, lr}
 80250d2:	4604      	mov	r4, r0
 80250d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80250d8:	f7fd fbbc 	bl	8022854 <__errno>
 80250dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80250e0:	6004      	str	r4, [r0, #0]
 80250e2:	b002      	add	sp, #8
 80250e4:	bd10      	pop	{r4, pc}

080250e6 <xflowf>:
 80250e6:	b130      	cbz	r0, 80250f6 <xflowf+0x10>
 80250e8:	eef1 7a40 	vneg.f32	s15, s0
 80250ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80250f0:	2022      	movs	r0, #34	; 0x22
 80250f2:	f7ff bfed 	b.w	80250d0 <with_errnof>
 80250f6:	eef0 7a40 	vmov.f32	s15, s0
 80250fa:	e7f7      	b.n	80250ec <xflowf+0x6>

080250fc <__math_uflowf>:
 80250fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025104 <__math_uflowf+0x8>
 8025100:	f7ff bff1 	b.w	80250e6 <xflowf>
 8025104:	10000000 	.word	0x10000000

08025108 <__math_oflowf>:
 8025108:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025110 <__math_oflowf+0x8>
 802510c:	f7ff bfeb 	b.w	80250e6 <xflowf>
 8025110:	70000000 	.word	0x70000000

08025114 <fabs>:
 8025114:	ec51 0b10 	vmov	r0, r1, d0
 8025118:	ee10 2a10 	vmov	r2, s0
 802511c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025120:	ec43 2b10 	vmov	d0, r2, r3
 8025124:	4770      	bx	lr
	...

08025128 <floor>:
 8025128:	ec51 0b10 	vmov	r0, r1, d0
 802512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025130:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025134:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025138:	2e13      	cmp	r6, #19
 802513a:	ee10 5a10 	vmov	r5, s0
 802513e:	ee10 8a10 	vmov	r8, s0
 8025142:	460c      	mov	r4, r1
 8025144:	dc32      	bgt.n	80251ac <floor+0x84>
 8025146:	2e00      	cmp	r6, #0
 8025148:	da14      	bge.n	8025174 <floor+0x4c>
 802514a:	a333      	add	r3, pc, #204	; (adr r3, 8025218 <floor+0xf0>)
 802514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025150:	f7db f850 	bl	80001f4 <__adddf3>
 8025154:	2200      	movs	r2, #0
 8025156:	2300      	movs	r3, #0
 8025158:	f7db fc92 	bl	8000a80 <__aeabi_dcmpgt>
 802515c:	b138      	cbz	r0, 802516e <floor+0x46>
 802515e:	2c00      	cmp	r4, #0
 8025160:	da57      	bge.n	8025212 <floor+0xea>
 8025162:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025166:	431d      	orrs	r5, r3
 8025168:	d001      	beq.n	802516e <floor+0x46>
 802516a:	4c2d      	ldr	r4, [pc, #180]	; (8025220 <floor+0xf8>)
 802516c:	2500      	movs	r5, #0
 802516e:	4621      	mov	r1, r4
 8025170:	4628      	mov	r0, r5
 8025172:	e025      	b.n	80251c0 <floor+0x98>
 8025174:	4f2b      	ldr	r7, [pc, #172]	; (8025224 <floor+0xfc>)
 8025176:	4137      	asrs	r7, r6
 8025178:	ea01 0307 	and.w	r3, r1, r7
 802517c:	4303      	orrs	r3, r0
 802517e:	d01f      	beq.n	80251c0 <floor+0x98>
 8025180:	a325      	add	r3, pc, #148	; (adr r3, 8025218 <floor+0xf0>)
 8025182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025186:	f7db f835 	bl	80001f4 <__adddf3>
 802518a:	2200      	movs	r2, #0
 802518c:	2300      	movs	r3, #0
 802518e:	f7db fc77 	bl	8000a80 <__aeabi_dcmpgt>
 8025192:	2800      	cmp	r0, #0
 8025194:	d0eb      	beq.n	802516e <floor+0x46>
 8025196:	2c00      	cmp	r4, #0
 8025198:	bfbe      	ittt	lt
 802519a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802519e:	fa43 f606 	asrlt.w	r6, r3, r6
 80251a2:	19a4      	addlt	r4, r4, r6
 80251a4:	ea24 0407 	bic.w	r4, r4, r7
 80251a8:	2500      	movs	r5, #0
 80251aa:	e7e0      	b.n	802516e <floor+0x46>
 80251ac:	2e33      	cmp	r6, #51	; 0x33
 80251ae:	dd0b      	ble.n	80251c8 <floor+0xa0>
 80251b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80251b4:	d104      	bne.n	80251c0 <floor+0x98>
 80251b6:	ee10 2a10 	vmov	r2, s0
 80251ba:	460b      	mov	r3, r1
 80251bc:	f7db f81a 	bl	80001f4 <__adddf3>
 80251c0:	ec41 0b10 	vmov	d0, r0, r1
 80251c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80251c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80251cc:	f04f 33ff 	mov.w	r3, #4294967295
 80251d0:	fa23 f707 	lsr.w	r7, r3, r7
 80251d4:	4207      	tst	r7, r0
 80251d6:	d0f3      	beq.n	80251c0 <floor+0x98>
 80251d8:	a30f      	add	r3, pc, #60	; (adr r3, 8025218 <floor+0xf0>)
 80251da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251de:	f7db f809 	bl	80001f4 <__adddf3>
 80251e2:	2200      	movs	r2, #0
 80251e4:	2300      	movs	r3, #0
 80251e6:	f7db fc4b 	bl	8000a80 <__aeabi_dcmpgt>
 80251ea:	2800      	cmp	r0, #0
 80251ec:	d0bf      	beq.n	802516e <floor+0x46>
 80251ee:	2c00      	cmp	r4, #0
 80251f0:	da02      	bge.n	80251f8 <floor+0xd0>
 80251f2:	2e14      	cmp	r6, #20
 80251f4:	d103      	bne.n	80251fe <floor+0xd6>
 80251f6:	3401      	adds	r4, #1
 80251f8:	ea25 0507 	bic.w	r5, r5, r7
 80251fc:	e7b7      	b.n	802516e <floor+0x46>
 80251fe:	2301      	movs	r3, #1
 8025200:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025204:	fa03 f606 	lsl.w	r6, r3, r6
 8025208:	4435      	add	r5, r6
 802520a:	4545      	cmp	r5, r8
 802520c:	bf38      	it	cc
 802520e:	18e4      	addcc	r4, r4, r3
 8025210:	e7f2      	b.n	80251f8 <floor+0xd0>
 8025212:	2500      	movs	r5, #0
 8025214:	462c      	mov	r4, r5
 8025216:	e7aa      	b.n	802516e <floor+0x46>
 8025218:	8800759c 	.word	0x8800759c
 802521c:	7e37e43c 	.word	0x7e37e43c
 8025220:	bff00000 	.word	0xbff00000
 8025224:	000fffff 	.word	0x000fffff

08025228 <scalbn>:
 8025228:	b570      	push	{r4, r5, r6, lr}
 802522a:	ec55 4b10 	vmov	r4, r5, d0
 802522e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8025232:	4606      	mov	r6, r0
 8025234:	462b      	mov	r3, r5
 8025236:	b99a      	cbnz	r2, 8025260 <scalbn+0x38>
 8025238:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802523c:	4323      	orrs	r3, r4
 802523e:	d036      	beq.n	80252ae <scalbn+0x86>
 8025240:	4b39      	ldr	r3, [pc, #228]	; (8025328 <scalbn+0x100>)
 8025242:	4629      	mov	r1, r5
 8025244:	ee10 0a10 	vmov	r0, s0
 8025248:	2200      	movs	r2, #0
 802524a:	f7db f989 	bl	8000560 <__aeabi_dmul>
 802524e:	4b37      	ldr	r3, [pc, #220]	; (802532c <scalbn+0x104>)
 8025250:	429e      	cmp	r6, r3
 8025252:	4604      	mov	r4, r0
 8025254:	460d      	mov	r5, r1
 8025256:	da10      	bge.n	802527a <scalbn+0x52>
 8025258:	a32b      	add	r3, pc, #172	; (adr r3, 8025308 <scalbn+0xe0>)
 802525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802525e:	e03a      	b.n	80252d6 <scalbn+0xae>
 8025260:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025264:	428a      	cmp	r2, r1
 8025266:	d10c      	bne.n	8025282 <scalbn+0x5a>
 8025268:	ee10 2a10 	vmov	r2, s0
 802526c:	4620      	mov	r0, r4
 802526e:	4629      	mov	r1, r5
 8025270:	f7da ffc0 	bl	80001f4 <__adddf3>
 8025274:	4604      	mov	r4, r0
 8025276:	460d      	mov	r5, r1
 8025278:	e019      	b.n	80252ae <scalbn+0x86>
 802527a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802527e:	460b      	mov	r3, r1
 8025280:	3a36      	subs	r2, #54	; 0x36
 8025282:	4432      	add	r2, r6
 8025284:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025288:	428a      	cmp	r2, r1
 802528a:	dd08      	ble.n	802529e <scalbn+0x76>
 802528c:	2d00      	cmp	r5, #0
 802528e:	a120      	add	r1, pc, #128	; (adr r1, 8025310 <scalbn+0xe8>)
 8025290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025294:	da1c      	bge.n	80252d0 <scalbn+0xa8>
 8025296:	a120      	add	r1, pc, #128	; (adr r1, 8025318 <scalbn+0xf0>)
 8025298:	e9d1 0100 	ldrd	r0, r1, [r1]
 802529c:	e018      	b.n	80252d0 <scalbn+0xa8>
 802529e:	2a00      	cmp	r2, #0
 80252a0:	dd08      	ble.n	80252b4 <scalbn+0x8c>
 80252a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80252a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80252aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80252ae:	ec45 4b10 	vmov	d0, r4, r5
 80252b2:	bd70      	pop	{r4, r5, r6, pc}
 80252b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80252b8:	da19      	bge.n	80252ee <scalbn+0xc6>
 80252ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80252be:	429e      	cmp	r6, r3
 80252c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80252c4:	dd0a      	ble.n	80252dc <scalbn+0xb4>
 80252c6:	a112      	add	r1, pc, #72	; (adr r1, 8025310 <scalbn+0xe8>)
 80252c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	d1e2      	bne.n	8025296 <scalbn+0x6e>
 80252d0:	a30f      	add	r3, pc, #60	; (adr r3, 8025310 <scalbn+0xe8>)
 80252d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252d6:	f7db f943 	bl	8000560 <__aeabi_dmul>
 80252da:	e7cb      	b.n	8025274 <scalbn+0x4c>
 80252dc:	a10a      	add	r1, pc, #40	; (adr r1, 8025308 <scalbn+0xe0>)
 80252de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80252e2:	2b00      	cmp	r3, #0
 80252e4:	d0b8      	beq.n	8025258 <scalbn+0x30>
 80252e6:	a10e      	add	r1, pc, #56	; (adr r1, 8025320 <scalbn+0xf8>)
 80252e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80252ec:	e7b4      	b.n	8025258 <scalbn+0x30>
 80252ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80252f2:	3236      	adds	r2, #54	; 0x36
 80252f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80252f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80252fc:	4620      	mov	r0, r4
 80252fe:	4b0c      	ldr	r3, [pc, #48]	; (8025330 <scalbn+0x108>)
 8025300:	2200      	movs	r2, #0
 8025302:	e7e8      	b.n	80252d6 <scalbn+0xae>
 8025304:	f3af 8000 	nop.w
 8025308:	c2f8f359 	.word	0xc2f8f359
 802530c:	01a56e1f 	.word	0x01a56e1f
 8025310:	8800759c 	.word	0x8800759c
 8025314:	7e37e43c 	.word	0x7e37e43c
 8025318:	8800759c 	.word	0x8800759c
 802531c:	fe37e43c 	.word	0xfe37e43c
 8025320:	c2f8f359 	.word	0xc2f8f359
 8025324:	81a56e1f 	.word	0x81a56e1f
 8025328:	43500000 	.word	0x43500000
 802532c:	ffff3cb0 	.word	0xffff3cb0
 8025330:	3c900000 	.word	0x3c900000

08025334 <atanf>:
 8025334:	b538      	push	{r3, r4, r5, lr}
 8025336:	ee10 5a10 	vmov	r5, s0
 802533a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802533e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8025342:	eef0 7a40 	vmov.f32	s15, s0
 8025346:	db10      	blt.n	802536a <atanf+0x36>
 8025348:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802534c:	dd04      	ble.n	8025358 <atanf+0x24>
 802534e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025352:	eeb0 0a67 	vmov.f32	s0, s15
 8025356:	bd38      	pop	{r3, r4, r5, pc}
 8025358:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025490 <atanf+0x15c>
 802535c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8025494 <atanf+0x160>
 8025360:	2d00      	cmp	r5, #0
 8025362:	bfd8      	it	le
 8025364:	eef0 7a40 	vmovle.f32	s15, s0
 8025368:	e7f3      	b.n	8025352 <atanf+0x1e>
 802536a:	4b4b      	ldr	r3, [pc, #300]	; (8025498 <atanf+0x164>)
 802536c:	429c      	cmp	r4, r3
 802536e:	dc10      	bgt.n	8025392 <atanf+0x5e>
 8025370:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8025374:	da0a      	bge.n	802538c <atanf+0x58>
 8025376:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802549c <atanf+0x168>
 802537a:	ee30 7a07 	vadd.f32	s14, s0, s14
 802537e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025382:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802538a:	dce2      	bgt.n	8025352 <atanf+0x1e>
 802538c:	f04f 33ff 	mov.w	r3, #4294967295
 8025390:	e013      	b.n	80253ba <atanf+0x86>
 8025392:	f000 f8a3 	bl	80254dc <fabsf>
 8025396:	4b42      	ldr	r3, [pc, #264]	; (80254a0 <atanf+0x16c>)
 8025398:	429c      	cmp	r4, r3
 802539a:	dc4f      	bgt.n	802543c <atanf+0x108>
 802539c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80253a0:	429c      	cmp	r4, r3
 80253a2:	dc41      	bgt.n	8025428 <atanf+0xf4>
 80253a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80253a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80253ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80253b0:	2300      	movs	r3, #0
 80253b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80253b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80253ba:	1c5a      	adds	r2, r3, #1
 80253bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80253c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80254a4 <atanf+0x170>
 80253c4:	eddf 5a38 	vldr	s11, [pc, #224]	; 80254a8 <atanf+0x174>
 80253c8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80254ac <atanf+0x178>
 80253cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80253d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80253d4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80254b0 <atanf+0x17c>
 80253d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80253dc:	eddf 5a35 	vldr	s11, [pc, #212]	; 80254b4 <atanf+0x180>
 80253e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80253e4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80254b8 <atanf+0x184>
 80253e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80253ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80254bc <atanf+0x188>
 80253f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80253f4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80254c0 <atanf+0x18c>
 80253f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80253fc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80254c4 <atanf+0x190>
 8025400:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025404:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80254c8 <atanf+0x194>
 8025408:	eea7 5a26 	vfma.f32	s10, s14, s13
 802540c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80254cc <atanf+0x198>
 8025410:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025414:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025418:	eea5 7a86 	vfma.f32	s14, s11, s12
 802541c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025420:	d121      	bne.n	8025466 <atanf+0x132>
 8025422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025426:	e794      	b.n	8025352 <atanf+0x1e>
 8025428:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802542c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025430:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025434:	2301      	movs	r3, #1
 8025436:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802543a:	e7be      	b.n	80253ba <atanf+0x86>
 802543c:	4b24      	ldr	r3, [pc, #144]	; (80254d0 <atanf+0x19c>)
 802543e:	429c      	cmp	r4, r3
 8025440:	dc0b      	bgt.n	802545a <atanf+0x126>
 8025442:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8025446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802544a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802544e:	2302      	movs	r3, #2
 8025450:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025458:	e7af      	b.n	80253ba <atanf+0x86>
 802545a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802545e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025462:	2303      	movs	r3, #3
 8025464:	e7a9      	b.n	80253ba <atanf+0x86>
 8025466:	4a1b      	ldr	r2, [pc, #108]	; (80254d4 <atanf+0x1a0>)
 8025468:	491b      	ldr	r1, [pc, #108]	; (80254d8 <atanf+0x1a4>)
 802546a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802546e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025472:	ed93 0a00 	vldr	s0, [r3]
 8025476:	ee37 7a40 	vsub.f32	s14, s14, s0
 802547a:	ed92 0a00 	vldr	s0, [r2]
 802547e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025482:	2d00      	cmp	r5, #0
 8025484:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025488:	bfb8      	it	lt
 802548a:	eef1 7a67 	vneglt.f32	s15, s15
 802548e:	e760      	b.n	8025352 <atanf+0x1e>
 8025490:	3fc90fdb 	.word	0x3fc90fdb
 8025494:	bfc90fdb 	.word	0xbfc90fdb
 8025498:	3edfffff 	.word	0x3edfffff
 802549c:	7149f2ca 	.word	0x7149f2ca
 80254a0:	3f97ffff 	.word	0x3f97ffff
 80254a4:	3c8569d7 	.word	0x3c8569d7
 80254a8:	3d4bda59 	.word	0x3d4bda59
 80254ac:	bd6ef16b 	.word	0xbd6ef16b
 80254b0:	3d886b35 	.word	0x3d886b35
 80254b4:	3dba2e6e 	.word	0x3dba2e6e
 80254b8:	3e124925 	.word	0x3e124925
 80254bc:	3eaaaaab 	.word	0x3eaaaaab
 80254c0:	bd15a221 	.word	0xbd15a221
 80254c4:	bd9d8795 	.word	0xbd9d8795
 80254c8:	bde38e38 	.word	0xbde38e38
 80254cc:	be4ccccd 	.word	0xbe4ccccd
 80254d0:	401bffff 	.word	0x401bffff
 80254d4:	080295d8 	.word	0x080295d8
 80254d8:	080295e8 	.word	0x080295e8

080254dc <fabsf>:
 80254dc:	ee10 3a10 	vmov	r3, s0
 80254e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80254e4:	ee00 3a10 	vmov	s0, r3
 80254e8:	4770      	bx	lr

080254ea <finitef>:
 80254ea:	b082      	sub	sp, #8
 80254ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80254f0:	9801      	ldr	r0, [sp, #4]
 80254f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80254f6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80254fa:	bfac      	ite	ge
 80254fc:	2000      	movge	r0, #0
 80254fe:	2001      	movlt	r0, #1
 8025500:	b002      	add	sp, #8
 8025502:	4770      	bx	lr

08025504 <floorf>:
 8025504:	ee10 3a10 	vmov	r3, s0
 8025508:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802550c:	3a7f      	subs	r2, #127	; 0x7f
 802550e:	2a16      	cmp	r2, #22
 8025510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025514:	dc2a      	bgt.n	802556c <floorf+0x68>
 8025516:	2a00      	cmp	r2, #0
 8025518:	da11      	bge.n	802553e <floorf+0x3a>
 802551a:	eddf 7a18 	vldr	s15, [pc, #96]	; 802557c <floorf+0x78>
 802551e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025522:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802552a:	dd05      	ble.n	8025538 <floorf+0x34>
 802552c:	2b00      	cmp	r3, #0
 802552e:	da23      	bge.n	8025578 <floorf+0x74>
 8025530:	4a13      	ldr	r2, [pc, #76]	; (8025580 <floorf+0x7c>)
 8025532:	2900      	cmp	r1, #0
 8025534:	bf18      	it	ne
 8025536:	4613      	movne	r3, r2
 8025538:	ee00 3a10 	vmov	s0, r3
 802553c:	4770      	bx	lr
 802553e:	4911      	ldr	r1, [pc, #68]	; (8025584 <floorf+0x80>)
 8025540:	4111      	asrs	r1, r2
 8025542:	420b      	tst	r3, r1
 8025544:	d0fa      	beq.n	802553c <floorf+0x38>
 8025546:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802557c <floorf+0x78>
 802554a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802554e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025556:	ddef      	ble.n	8025538 <floorf+0x34>
 8025558:	2b00      	cmp	r3, #0
 802555a:	bfbe      	ittt	lt
 802555c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025560:	fa40 f202 	asrlt.w	r2, r0, r2
 8025564:	189b      	addlt	r3, r3, r2
 8025566:	ea23 0301 	bic.w	r3, r3, r1
 802556a:	e7e5      	b.n	8025538 <floorf+0x34>
 802556c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025570:	d3e4      	bcc.n	802553c <floorf+0x38>
 8025572:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025576:	4770      	bx	lr
 8025578:	2300      	movs	r3, #0
 802557a:	e7dd      	b.n	8025538 <floorf+0x34>
 802557c:	7149f2ca 	.word	0x7149f2ca
 8025580:	bf800000 	.word	0xbf800000
 8025584:	007fffff 	.word	0x007fffff

08025588 <nanf>:
 8025588:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025590 <nanf+0x8>
 802558c:	4770      	bx	lr
 802558e:	bf00      	nop
 8025590:	7fc00000 	.word	0x7fc00000

08025594 <scalbnf>:
 8025594:	ee10 3a10 	vmov	r3, s0
 8025598:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802559c:	d025      	beq.n	80255ea <scalbnf+0x56>
 802559e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80255a2:	d302      	bcc.n	80255aa <scalbnf+0x16>
 80255a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80255a8:	4770      	bx	lr
 80255aa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80255ae:	d122      	bne.n	80255f6 <scalbnf+0x62>
 80255b0:	4b2a      	ldr	r3, [pc, #168]	; (802565c <scalbnf+0xc8>)
 80255b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8025660 <scalbnf+0xcc>
 80255b6:	4298      	cmp	r0, r3
 80255b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80255bc:	db16      	blt.n	80255ec <scalbnf+0x58>
 80255be:	ee10 3a10 	vmov	r3, s0
 80255c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80255c6:	3a19      	subs	r2, #25
 80255c8:	4402      	add	r2, r0
 80255ca:	2afe      	cmp	r2, #254	; 0xfe
 80255cc:	dd15      	ble.n	80255fa <scalbnf+0x66>
 80255ce:	ee10 3a10 	vmov	r3, s0
 80255d2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8025664 <scalbnf+0xd0>
 80255d6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8025668 <scalbnf+0xd4>
 80255da:	2b00      	cmp	r3, #0
 80255dc:	eeb0 7a67 	vmov.f32	s14, s15
 80255e0:	bfb8      	it	lt
 80255e2:	eef0 7a66 	vmovlt.f32	s15, s13
 80255e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80255ea:	4770      	bx	lr
 80255ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802566c <scalbnf+0xd8>
 80255f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80255f4:	4770      	bx	lr
 80255f6:	0dd2      	lsrs	r2, r2, #23
 80255f8:	e7e6      	b.n	80255c8 <scalbnf+0x34>
 80255fa:	2a00      	cmp	r2, #0
 80255fc:	dd06      	ble.n	802560c <scalbnf+0x78>
 80255fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025602:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025606:	ee00 3a10 	vmov	s0, r3
 802560a:	4770      	bx	lr
 802560c:	f112 0f16 	cmn.w	r2, #22
 8025610:	da1a      	bge.n	8025648 <scalbnf+0xb4>
 8025612:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025616:	4298      	cmp	r0, r3
 8025618:	ee10 3a10 	vmov	r3, s0
 802561c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025620:	dd0a      	ble.n	8025638 <scalbnf+0xa4>
 8025622:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8025664 <scalbnf+0xd0>
 8025626:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8025668 <scalbnf+0xd4>
 802562a:	eef0 7a40 	vmov.f32	s15, s0
 802562e:	2b00      	cmp	r3, #0
 8025630:	bf18      	it	ne
 8025632:	eeb0 0a47 	vmovne.f32	s0, s14
 8025636:	e7db      	b.n	80255f0 <scalbnf+0x5c>
 8025638:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802566c <scalbnf+0xd8>
 802563c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8025670 <scalbnf+0xdc>
 8025640:	eef0 7a40 	vmov.f32	s15, s0
 8025644:	2b00      	cmp	r3, #0
 8025646:	e7f3      	b.n	8025630 <scalbnf+0x9c>
 8025648:	3219      	adds	r2, #25
 802564a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802564e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025652:	eddf 7a08 	vldr	s15, [pc, #32]	; 8025674 <scalbnf+0xe0>
 8025656:	ee07 3a10 	vmov	s14, r3
 802565a:	e7c4      	b.n	80255e6 <scalbnf+0x52>
 802565c:	ffff3cb0 	.word	0xffff3cb0
 8025660:	4c000000 	.word	0x4c000000
 8025664:	7149f2ca 	.word	0x7149f2ca
 8025668:	f149f2ca 	.word	0xf149f2ca
 802566c:	0da24260 	.word	0x0da24260
 8025670:	8da24260 	.word	0x8da24260
 8025674:	33000000 	.word	0x33000000

08025678 <_init>:
 8025678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802567a:	bf00      	nop
 802567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802567e:	bc08      	pop	{r3}
 8025680:	469e      	mov	lr, r3
 8025682:	4770      	bx	lr

08025684 <_fini>:
 8025684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025686:	bf00      	nop
 8025688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802568a:	bc08      	pop	{r3}
 802568c:	469e      	mov	lr, r3
 802568e:	4770      	bx	lr
