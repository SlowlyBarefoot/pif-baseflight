
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024778  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003da8  08024910  08024910  00034910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080286b8  080286b8  00040100  2**0
                  CONTENTS
  4 .ARM          00000008  080286b8  080286b8  000386b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080286c0  080286c0  00040100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080286c0  080286c0  000386c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080286c4  080286c4  000386c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080286c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002190  20000100  080287c8  00040100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002290  080287c8  00042290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00078b26  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b111  00000000  00000000  000b8c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e0  00000000  00000000  000c3d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022d0  00000000  00000000  000c6348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002086c  00000000  00000000  000c8618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000347a2  00000000  00000000  000e8e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9b79  00000000  00000000  0011d626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c719f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7ec  00000000  00000000  001c71f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080248f8 	.word	0x080248f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	080248f8 	.word	0x080248f8

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ldivmod>:
 8000df4:	b97b      	cbnz	r3, 8000e16 <__aeabi_ldivmod+0x22>
 8000df6:	b972      	cbnz	r2, 8000e16 <__aeabi_ldivmod+0x22>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bfbe      	ittt	lt
 8000dfc:	2000      	movlt	r0, #0
 8000dfe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e02:	e006      	blt.n	8000e12 <__aeabi_ldivmod+0x1e>
 8000e04:	bf08      	it	eq
 8000e06:	2800      	cmpeq	r0, #0
 8000e08:	bf1c      	itt	ne
 8000e0a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e12:	f000 b9b9 	b.w	8001188 <__aeabi_idiv0>
 8000e16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	db09      	blt.n	8000e36 <__aeabi_ldivmod+0x42>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db1a      	blt.n	8000e5c <__aeabi_ldivmod+0x68>
 8000e26:	f000 f84d 	bl	8000ec4 <__udivmoddi4>
 8000e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db1b      	blt.n	8000e78 <__aeabi_ldivmod+0x84>
 8000e40:	f000 f840 	bl	8000ec4 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	4770      	bx	lr
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e62:	f000 f82f 	bl	8000ec4 <__udivmoddi4>
 8000e66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6e:	b004      	add	sp, #16
 8000e70:	4240      	negs	r0, r0
 8000e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e76:	4770      	bx	lr
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	f000 f821 	bl	8000ec4 <__udivmoddi4>
 8000e82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e8a:	b004      	add	sp, #16
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea8:	f000 b96e 	b.w	8001188 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f806 	bl	8000ec4 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__udivmoddi4>:
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	9d08      	ldr	r5, [sp, #32]
 8000eca:	4604      	mov	r4, r0
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8083 	bne.w	8000fda <__udivmoddi4+0x116>
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	4617      	mov	r7, r2
 8000ed8:	d947      	bls.n	8000f6a <__udivmoddi4+0xa6>
 8000eda:	fab2 f282 	clz	r2, r2
 8000ede:	b142      	cbz	r2, 8000ef2 <__udivmoddi4+0x2e>
 8000ee0:	f1c2 0020 	rsb	r0, r2, #32
 8000ee4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	4097      	lsls	r7, r2
 8000eec:	ea40 0c01 	orr.w	ip, r0, r1
 8000ef0:	4094      	lsls	r4, r2
 8000ef2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ef6:	0c23      	lsrs	r3, r4, #16
 8000ef8:	fbbc f6f8 	udiv	r6, ip, r8
 8000efc:	fa1f fe87 	uxth.w	lr, r7
 8000f00:	fb08 c116 	mls	r1, r8, r6, ip
 8000f04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f08:	fb06 f10e 	mul.w	r1, r6, lr
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x60>
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f16:	f080 8119 	bcs.w	800114c <__udivmoddi4+0x288>
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	f240 8116 	bls.w	800114c <__udivmoddi4+0x288>
 8000f20:	3e02      	subs	r6, #2
 8000f22:	443b      	add	r3, r7
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d909      	bls.n	8000f50 <__udivmoddi4+0x8c>
 8000f3c:	193c      	adds	r4, r7, r4
 8000f3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f42:	f080 8105 	bcs.w	8001150 <__udivmoddi4+0x28c>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	f240 8102 	bls.w	8001150 <__udivmoddi4+0x28c>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	443c      	add	r4, r7
 8000f50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f54:	eba4 040e 	sub.w	r4, r4, lr
 8000f58:	2600      	movs	r6, #0
 8000f5a:	b11d      	cbz	r5, 8000f64 <__udivmoddi4+0xa0>
 8000f5c:	40d4      	lsrs	r4, r2
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e9c5 4300 	strd	r4, r3, [r5]
 8000f64:	4631      	mov	r1, r6
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	b902      	cbnz	r2, 8000f6e <__udivmoddi4+0xaa>
 8000f6c:	deff      	udf	#255	; 0xff
 8000f6e:	fab2 f282 	clz	r2, r2
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d150      	bne.n	8001018 <__udivmoddi4+0x154>
 8000f76:	1bcb      	subs	r3, r1, r7
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	fa1f f887 	uxth.w	r8, r7
 8000f80:	2601      	movs	r6, #1
 8000f82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f86:	0c21      	lsrs	r1, r4, #16
 8000f88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb08 f30c 	mul.w	r3, r8, ip
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0xe4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f9e:	d202      	bcs.n	8000fa6 <__udivmoddi4+0xe2>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	f200 80e9 	bhi.w	8001178 <__udivmoddi4+0x2b4>
 8000fa6:	4684      	mov	ip, r0
 8000fa8:	1ac9      	subs	r1, r1, r3
 8000faa:	b2a3      	uxth	r3, r4
 8000fac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fb8:	fb08 f800 	mul.w	r8, r8, r0
 8000fbc:	45a0      	cmp	r8, r4
 8000fbe:	d907      	bls.n	8000fd0 <__udivmoddi4+0x10c>
 8000fc0:	193c      	adds	r4, r7, r4
 8000fc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc6:	d202      	bcs.n	8000fce <__udivmoddi4+0x10a>
 8000fc8:	45a0      	cmp	r8, r4
 8000fca:	f200 80d9 	bhi.w	8001180 <__udivmoddi4+0x2bc>
 8000fce:	4618      	mov	r0, r3
 8000fd0:	eba4 0408 	sub.w	r4, r4, r8
 8000fd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fd8:	e7bf      	b.n	8000f5a <__udivmoddi4+0x96>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0x12e>
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	f000 80b1 	beq.w	8001146 <__udivmoddi4+0x282>
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e9c5 0100 	strd	r0, r1, [r5]
 8000fea:	4630      	mov	r0, r6
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f683 	clz	r6, r3
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d14a      	bne.n	8001090 <__udivmoddi4+0x1cc>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0x140>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80b8 	bhi.w	8001174 <__udivmoddi4+0x2b0>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0103 	sbc.w	r1, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	468c      	mov	ip, r1
 800100e:	2d00      	cmp	r5, #0
 8001010:	d0a8      	beq.n	8000f64 <__udivmoddi4+0xa0>
 8001012:	e9c5 4c00 	strd	r4, ip, [r5]
 8001016:	e7a5      	b.n	8000f64 <__udivmoddi4+0xa0>
 8001018:	f1c2 0320 	rsb	r3, r2, #32
 800101c:	fa20 f603 	lsr.w	r6, r0, r3
 8001020:	4097      	lsls	r7, r2
 8001022:	fa01 f002 	lsl.w	r0, r1, r2
 8001026:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800102a:	40d9      	lsrs	r1, r3
 800102c:	4330      	orrs	r0, r6
 800102e:	0c03      	lsrs	r3, r0, #16
 8001030:	fbb1 f6fe 	udiv	r6, r1, lr
 8001034:	fa1f f887 	uxth.w	r8, r7
 8001038:	fb0e 1116 	mls	r1, lr, r6, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb06 f108 	mul.w	r1, r6, r8
 8001044:	4299      	cmp	r1, r3
 8001046:	fa04 f402 	lsl.w	r4, r4, r2
 800104a:	d909      	bls.n	8001060 <__udivmoddi4+0x19c>
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	f106 3cff 	add.w	ip, r6, #4294967295
 8001052:	f080 808d 	bcs.w	8001170 <__udivmoddi4+0x2ac>
 8001056:	4299      	cmp	r1, r3
 8001058:	f240 808a 	bls.w	8001170 <__udivmoddi4+0x2ac>
 800105c:	3e02      	subs	r6, #2
 800105e:	443b      	add	r3, r7
 8001060:	1a5b      	subs	r3, r3, r1
 8001062:	b281      	uxth	r1, r0
 8001064:	fbb3 f0fe 	udiv	r0, r3, lr
 8001068:	fb0e 3310 	mls	r3, lr, r0, r3
 800106c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001070:	fb00 f308 	mul.w	r3, r0, r8
 8001074:	428b      	cmp	r3, r1
 8001076:	d907      	bls.n	8001088 <__udivmoddi4+0x1c4>
 8001078:	1879      	adds	r1, r7, r1
 800107a:	f100 3cff 	add.w	ip, r0, #4294967295
 800107e:	d273      	bcs.n	8001168 <__udivmoddi4+0x2a4>
 8001080:	428b      	cmp	r3, r1
 8001082:	d971      	bls.n	8001168 <__udivmoddi4+0x2a4>
 8001084:	3802      	subs	r0, #2
 8001086:	4439      	add	r1, r7
 8001088:	1acb      	subs	r3, r1, r3
 800108a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800108e:	e778      	b.n	8000f82 <__udivmoddi4+0xbe>
 8001090:	f1c6 0c20 	rsb	ip, r6, #32
 8001094:	fa03 f406 	lsl.w	r4, r3, r6
 8001098:	fa22 f30c 	lsr.w	r3, r2, ip
 800109c:	431c      	orrs	r4, r3
 800109e:	fa20 f70c 	lsr.w	r7, r0, ip
 80010a2:	fa01 f306 	lsl.w	r3, r1, r6
 80010a6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80010aa:	fa21 f10c 	lsr.w	r1, r1, ip
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0c3b      	lsrs	r3, r7, #16
 80010b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b6:	fa1f f884 	uxth.w	r8, r4
 80010ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80010be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010c2:	fb09 fa08 	mul.w	sl, r9, r8
 80010c6:	458a      	cmp	sl, r1
 80010c8:	fa02 f206 	lsl.w	r2, r2, r6
 80010cc:	fa00 f306 	lsl.w	r3, r0, r6
 80010d0:	d908      	bls.n	80010e4 <__udivmoddi4+0x220>
 80010d2:	1861      	adds	r1, r4, r1
 80010d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d8:	d248      	bcs.n	800116c <__udivmoddi4+0x2a8>
 80010da:	458a      	cmp	sl, r1
 80010dc:	d946      	bls.n	800116c <__udivmoddi4+0x2a8>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4421      	add	r1, r4
 80010e4:	eba1 010a 	sub.w	r1, r1, sl
 80010e8:	b2bf      	uxth	r7, r7
 80010ea:	fbb1 f0fe 	udiv	r0, r1, lr
 80010ee:	fb0e 1110 	mls	r1, lr, r0, r1
 80010f2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80010f6:	fb00 f808 	mul.w	r8, r0, r8
 80010fa:	45b8      	cmp	r8, r7
 80010fc:	d907      	bls.n	800110e <__udivmoddi4+0x24a>
 80010fe:	19e7      	adds	r7, r4, r7
 8001100:	f100 31ff 	add.w	r1, r0, #4294967295
 8001104:	d22e      	bcs.n	8001164 <__udivmoddi4+0x2a0>
 8001106:	45b8      	cmp	r8, r7
 8001108:	d92c      	bls.n	8001164 <__udivmoddi4+0x2a0>
 800110a:	3802      	subs	r0, #2
 800110c:	4427      	add	r7, r4
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	eba7 0708 	sub.w	r7, r7, r8
 8001116:	fba0 8902 	umull	r8, r9, r0, r2
 800111a:	454f      	cmp	r7, r9
 800111c:	46c6      	mov	lr, r8
 800111e:	4649      	mov	r1, r9
 8001120:	d31a      	bcc.n	8001158 <__udivmoddi4+0x294>
 8001122:	d017      	beq.n	8001154 <__udivmoddi4+0x290>
 8001124:	b15d      	cbz	r5, 800113e <__udivmoddi4+0x27a>
 8001126:	ebb3 020e 	subs.w	r2, r3, lr
 800112a:	eb67 0701 	sbc.w	r7, r7, r1
 800112e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001132:	40f2      	lsrs	r2, r6
 8001134:	ea4c 0202 	orr.w	r2, ip, r2
 8001138:	40f7      	lsrs	r7, r6
 800113a:	e9c5 2700 	strd	r2, r7, [r5]
 800113e:	2600      	movs	r6, #0
 8001140:	4631      	mov	r1, r6
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001146:	462e      	mov	r6, r5
 8001148:	4628      	mov	r0, r5
 800114a:	e70b      	b.n	8000f64 <__udivmoddi4+0xa0>
 800114c:	4606      	mov	r6, r0
 800114e:	e6e9      	b.n	8000f24 <__udivmoddi4+0x60>
 8001150:	4618      	mov	r0, r3
 8001152:	e6fd      	b.n	8000f50 <__udivmoddi4+0x8c>
 8001154:	4543      	cmp	r3, r8
 8001156:	d2e5      	bcs.n	8001124 <__udivmoddi4+0x260>
 8001158:	ebb8 0e02 	subs.w	lr, r8, r2
 800115c:	eb69 0104 	sbc.w	r1, r9, r4
 8001160:	3801      	subs	r0, #1
 8001162:	e7df      	b.n	8001124 <__udivmoddi4+0x260>
 8001164:	4608      	mov	r0, r1
 8001166:	e7d2      	b.n	800110e <__udivmoddi4+0x24a>
 8001168:	4660      	mov	r0, ip
 800116a:	e78d      	b.n	8001088 <__udivmoddi4+0x1c4>
 800116c:	4681      	mov	r9, r0
 800116e:	e7b9      	b.n	80010e4 <__udivmoddi4+0x220>
 8001170:	4666      	mov	r6, ip
 8001172:	e775      	b.n	8001060 <__udivmoddi4+0x19c>
 8001174:	4630      	mov	r0, r6
 8001176:	e74a      	b.n	800100e <__udivmoddi4+0x14a>
 8001178:	f1ac 0c02 	sub.w	ip, ip, #2
 800117c:	4439      	add	r1, r7
 800117e:	e713      	b.n	8000fa8 <__udivmoddi4+0xe4>
 8001180:	3802      	subs	r0, #2
 8001182:	443c      	add	r4, r7
 8001184:	e724      	b.n	8000fd0 <__udivmoddi4+0x10c>
 8001186:	bf00      	nop

08001188 <__aeabi_idiv0>:
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 8001194:	2204      	movs	r2, #4
 8001196:	4904      	ldr	r1, [pc, #16]	; (80011a8 <adcInit+0x1c>)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <adcInit+0x20>)
 800119a:	f019 fbd1 	bl	801a940 <HAL_ADC_Start_DMA>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	20001658 	.word	0x20001658

080011b0 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <actGetAdcChannel+0x20>)
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	2000011c 	.word	0x2000011c

080011d4 <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <actGetBatteryVoltage+0x30>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001208 <actGetBatteryVoltage+0x34>
 80011e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ec:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800120c <actGetBatteryVoltage+0x38>
 80011f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	2000011c 	.word	0x2000011c
 8001208:	40533333 	.word	0x40533333
 800120c:	457ff000 	.word	0x457ff000

08001210 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <actGetBatteryCurrent+0x28>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	fb02 f203 	mul.w	r2, r2, r3
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <actGetBatteryCurrent+0x2c>)
 8001222:	fba3 1302 	umull	r1, r3, r3, r2
 8001226:	1ad2      	subs	r2, r2, r3
 8001228:	0852      	lsrs	r2, r2, #1
 800122a:	4413      	add	r3, r2
 800122c:	0adb      	lsrs	r3, r3, #11
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	2000011c 	.word	0x2000011c
 800123c:	00100101 	.word	0x00100101

08001240 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
#endif

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    acc_1G = 512 * 8;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <gy86Detect+0xf8>)
 800124c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001250:	801a      	strh	r2, [r3, #0]

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a39      	ldr	r2, [pc, #228]	; (800133c <gy86Detect+0xfc>)
 8001256:	615a      	str	r2, [r3, #20]

    memset(&config, 0, sizeof(PifGy86Config));
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2214      	movs	r2, #20
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f020 fc49 	bl	8021af8 <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001266:	2301      	movs	r3, #1
 8001268:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 800126a:	2303      	movs	r3, #3
 800126c:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	8a1b      	ldrh	r3, [r3, #16]
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d102      	bne.n	800127c <gy86Detect+0x3c>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e024      	b.n	80012c6 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 188)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8a1b      	ldrh	r3, [r3, #16]
 8001280:	2bbb      	cmp	r3, #187	; 0xbb
 8001282:	d902      	bls.n	800128a <gy86Detect+0x4a>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e01d      	b.n	80012c6 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 98)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8a1b      	ldrh	r3, [r3, #16]
 800128e:	2b61      	cmp	r3, #97	; 0x61
 8001290:	d902      	bls.n	8001298 <gy86Detect+0x58>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 8001292:	2302      	movs	r3, #2
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e016      	b.n	80012c6 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 42)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8a1b      	ldrh	r3, [r3, #16]
 800129c:	2b29      	cmp	r3, #41	; 0x29
 800129e:	d902      	bls.n	80012a6 <gy86Detect+0x66>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012a0:	2303      	movs	r3, #3
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00f      	b.n	80012c6 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8a1b      	ldrh	r3, [r3, #16]
 80012aa:	2b13      	cmp	r3, #19
 80012ac:	d902      	bls.n	80012b4 <gy86Detect+0x74>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012ae:	2304      	movs	r3, #4
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e008      	b.n	80012c6 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	8a1b      	ldrh	r3, [r3, #16]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d902      	bls.n	80012c2 <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012bc:	2305      	movs	r3, #5
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e001      	b.n	80012c6 <gy86Detect+0x86>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012c2:	2306      	movs	r3, #6
 80012c4:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012c6:	2303      	movs	r3, #3
 80012c8:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012ca:	2302      	movs	r3, #2
 80012cc:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012ce:	230d      	movs	r3, #13
 80012d0:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012d2:	2301      	movs	r3, #1
 80012d4:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012d6:	2303      	movs	r3, #3
 80012d8:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012da:	2306      	movs	r3, #6
 80012dc:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012de:	2300      	movs	r3, #0
 80012e0:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012e2:	2308      	movs	r3, #8
 80012e4:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012e6:	2319      	movs	r3, #25
 80012e8:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = evtBaroRead;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <gy86Detect+0x100>)
 80012ec:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(&p_sensor_set->acc, &p_sensor_set->gyro, &p_sensor_set->mag, &config)) return false;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f103 0018 	add.w	r0, r3, #24
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	f000 f822 	bl	8001348 <mpu6050Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <gy86Detect+0xce>
 800130a:	2300      	movs	r3, #0
 800130c:	e010      	b.n	8001330 <gy86Detect+0xf0>

    p_sensor_set->gyro.hardware = hw_Names[0];
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <gy86Detect+0x104>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
    p_sensor_set->acc.hardware = hw_Names[0];
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <gy86Detect+0x104>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
    p_sensor_set->mag.hardware = hw_Names[1];
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <gy86Detect+0x104>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	649a      	str	r2, [r3, #72]	; 0x48
    p_sensor_set->baro.hardware = hw_Names[2];
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <gy86Detect+0x104>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	631a      	str	r2, [r3, #48]	; 0x30

    return true;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000005a 	.word	0x2000005a
 800133c:	31924418 	.word	0x31924418
 8001340:	0800e9dd 	.word	0x0800e9dd
 8001344:	20000000 	.word	0x20000000

08001348 <mpu6050Init>:

static BOOL mpu6050Init(sensor_t *acc, sensor_t *gyro, sensor_t *mag, PifGy86Config* p_config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &imu_sensor, p_config)) return FALSE;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <mpu6050Init+0x64>)
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <mpu6050Init+0x68>)
 800135e:	2100      	movs	r1, #0
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <mpu6050Init+0x6c>)
 8001362:	f016 fa93 	bl	801788c <pifGy86_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <mpu6050Init+0x28>
 800136c:	2300      	movs	r3, #0
 800136e:	e018      	b.n	80013a2 <mpu6050Init+0x5a>
    s_gy86._mpu6050.gyro_scale = 4;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <mpu6050Init+0x6c>)
 8001372:	2204      	movs	r2, #4
 8001374:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <mpu6050Init+0x6c>)
 8001378:	2264      	movs	r2, #100	; 0x64
 800137a:	719a      	strb	r2, [r3, #6]

    acc->init = mpuAccInit;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <mpu6050Init+0x70>)
 8001380:	605a      	str	r2, [r3, #4]
    acc->read = mpuAccRead;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <mpu6050Init+0x74>)
 8001386:	609a      	str	r2, [r3, #8]
    gyro->init = mpuGyroInit;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <mpu6050Init+0x78>)
 800138c:	605a      	str	r2, [r3, #4]
    gyro->read = mpuGyroRead;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <mpu6050Init+0x7c>)
 8001392:	609a      	str	r2, [r3, #8]
    mag->init = hmc5883lInit;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <mpu6050Init+0x80>)
 8001398:	605a      	str	r2, [r3, #4]
    mag->read = hmc5883lRead;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <mpu6050Init+0x84>)
 800139e:	609a      	str	r2, [r3, #8]
    return TRUE;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200021f8 	.word	0x200021f8
 80013b0:	20002120 	.word	0x20002120
 80013b4:	2000012c 	.word	0x2000012c
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013f5 	.word	0x080013f5
 80013c0:	0800143d 	.word	0x0800143d
 80013c4:	08001461 	.word	0x08001461
 80013c8:	080014a9 	.word	0x080014a9
 80013cc:	080017f5 	.word	0x080017f5

080013d0 <mpuAccInit>:

static BOOL mpuAccInit(PifImuSensorAlign align)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetAccelAlign(&imu_sensor, align);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <mpuAccInit+0x20>)
 80013e0:	f017 fae9 	bl	80189b6 <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200021f8 	.word	0x200021f8

080013f4 <mpuAccRead>:

static BOOL mpuAccRead(int16_t *accData)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel(&imu_sensor, data)) return FALSE;
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <mpuAccRead+0x44>)
 8001404:	f017 faea 	bl	80189dc <pifImuSensor_ReadAccel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <mpuAccRead+0x1e>
 800140e:	2300      	movs	r3, #0
 8001410:	e00e      	b.n	8001430 <mpuAccRead+0x3c>
    accData[0] = data[0];
 8001412:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3302      	adds	r3, #2
 800141e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001422:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800142c:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200021f8 	.word	0x200021f8

0800143c <mpuGyroInit>:

static BOOL mpuGyroInit(PifImuSensorAlign align)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetGyroAlign(&imu_sensor, align);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4619      	mov	r1, r3
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <mpuGyroInit+0x20>)
 800144c:	f017 fa7a 	bl	8018944 <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200021f8 	.word	0x200021f8

08001460 <mpuGyroRead>:

static BOOL mpuGyroRead(int16_t *gyroData)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro(&imu_sensor, data)) return FALSE;
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <mpuGyroRead+0x44>)
 8001470:	f017 fa7a 	bl	8018968 <pifImuSensor_ReadGyro>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <mpuGyroRead+0x1e>
 800147a:	2300      	movs	r3, #0
 800147c:	e00e      	b.n	800149c <mpuGyroRead+0x3c>
	gyroData[0] = data[0];
 800147e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3302      	adds	r3, #2
 800148a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800148e:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3304      	adds	r3, #4
 8001494:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001498:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200021f8 	.word	0x200021f8

080014a8 <hmc5883lInit>:

static BOOL hmc5883lInit(PifImuSensorAlign align)
{
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&imu_sensor, align);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4619      	mov	r1, r3
 80014ca:	48c4      	ldr	r0, [pc, #784]	; (80017dc <hmc5883lInit+0x334>)
 80014cc:	f017 faae 	bl	8018a2c <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014d0:	4bc3      	ldr	r3, [pc, #780]	; (80017e0 <hmc5883lInit+0x338>)
 80014d2:	68d8      	ldr	r0, [r3, #12]
 80014d4:	2300      	movs	r3, #0
 80014d6:	f240 5201 	movw	r2, #1281	; 0x501
 80014da:	216a      	movs	r1, #106	; 0x6a
 80014dc:	f011 f9ca 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <hmc5883lInit+0x42>
 80014e6:	2300      	movs	r3, #0
 80014e8:	e173      	b.n	80017d2 <hmc5883lInit+0x32a>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014ea:	4bbd      	ldr	r3, [pc, #756]	; (80017e0 <hmc5883lInit+0x338>)
 80014ec:	68d8      	ldr	r0, [r3, #12]
 80014ee:	2301      	movs	r3, #1
 80014f0:	f240 1201 	movw	r2, #257	; 0x101
 80014f4:	2137      	movs	r1, #55	; 0x37
 80014f6:	f011 f9bd 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <hmc5883lInit+0x5c>
 8001500:	2300      	movs	r3, #0
 8001502:	e166      	b.n	80017d2 <hmc5883lInit+0x32a>

    config_a.byte = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f362 0301 	bfi	r3, r2, #0, #2
 8001510:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	2204      	movs	r2, #4
 8001516:	f362 0384 	bfi	r3, r2, #2, #3
 800151a:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 800151c:	4bb0      	ldr	r3, [pc, #704]	; (80017e0 <hmc5883lInit+0x338>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	7b3a      	ldrb	r2, [r7, #12]
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f011 f98f 	bl	8012848 <pifI2cDevice_WriteRegByte>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <hmc5883lInit+0x8c>
 8001530:	2300      	movs	r3, #0
 8001532:	e14e      	b.n	80017d2 <hmc5883lInit+0x32a>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001534:	2103      	movs	r1, #3
 8001536:	48ab      	ldr	r0, [pc, #684]	; (80017e4 <hmc5883lInit+0x33c>)
 8001538:	f016 feae 	bl	8018298 <pifHmc5883_SetGain>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <hmc5883lInit+0x9e>
 8001542:	2300      	movs	r3, #0
 8001544:	e145      	b.n	80017d2 <hmc5883lInit+0x32a>
    pifTaskManager_YieldMs(100);
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	f013 fad2 	bl	8014af0 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	48a4      	ldr	r0, [pc, #656]	; (80017e4 <hmc5883lInit+0x33c>)
 8001554:	f016 febf 	bl	80182d6 <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	e03d      	b.n	80015da <hmc5883lInit+0x132>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800155e:	4ba0      	ldr	r3, [pc, #640]	; (80017e0 <hmc5883lInit+0x338>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2201      	movs	r2, #1
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f011 f96e 	bl	8012848 <pifI2cDevice_WriteRegByte>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <hmc5883lInit+0xce>
 8001572:	2300      	movs	r3, #0
 8001574:	e12d      	b.n	80017d2 <hmc5883lInit+0x32a>
        pifTaskManager_YieldMs(50);
 8001576:	2032      	movs	r0, #50	; 0x32
 8001578:	f013 faba 	bl	8014af0 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4898      	ldr	r0, [pc, #608]	; (80017e4 <hmc5883lInit+0x33c>)
 8001584:	f016 fea7 	bl	80182d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001598:	4413      	add	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015a2:	4413      	add	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	bfa8      	it	ge
 80015b2:	4613      	movge	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015ba:	4293      	cmp	r3, r2
 80015bc:	bfa8      	it	ge
 80015be:	4613      	movge	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015c6:	dc03      	bgt.n	80015d0 <hmc5883lInit+0x128>
            bret = false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015ce:	e007      	b.n	80015e0 <hmc5883lInit+0x138>
        }
        actLed1Toggle();
 80015d0:	f000 fd5e 	bl	8002090 <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	3301      	adds	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	2b09      	cmp	r3, #9
 80015de:	ddbe      	ble.n	800155e <hmc5883lInit+0xb6>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f362 0301 	bfi	r3, r2, #0, #2
 80015e8:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015ea:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <hmc5883lInit+0x338>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	7b3a      	ldrb	r2, [r7, #12]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f011 f928 	bl	8012848 <pifI2cDevice_WriteRegByte>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <hmc5883lInit+0x15a>
 80015fe:	2300      	movs	r3, #0
 8001600:	e0e7      	b.n	80017d2 <hmc5883lInit+0x32a>
    for (i = 0; i < 10; i++) {
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	e03d      	b.n	8001684 <hmc5883lInit+0x1dc>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001608:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <hmc5883lInit+0x338>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	2201      	movs	r2, #1
 800160e:	2102      	movs	r1, #2
 8001610:	4618      	mov	r0, r3
 8001612:	f011 f919 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <hmc5883lInit+0x178>
 800161c:	2300      	movs	r3, #0
 800161e:	e0d8      	b.n	80017d2 <hmc5883lInit+0x32a>
        pifTaskManager_YieldMs(50);
 8001620:	2032      	movs	r0, #50	; 0x32
 8001622:	f013 fa65 	bl	8014af0 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	486d      	ldr	r0, [pc, #436]	; (80017e4 <hmc5883lInit+0x33c>)
 800162e:	f016 fe52 	bl	80182d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 8001650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001654:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001658:	4293      	cmp	r3, r2
 800165a:	bfa8      	it	ge
 800165c:	4613      	movge	r3, r2
 800165e:	b21a      	sxth	r2, r3
 8001660:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	b21b      	sxth	r3, r3
 800166c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001670:	dc03      	bgt.n	800167a <hmc5883lInit+0x1d2>
            bret = false;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8001678:	e007      	b.n	800168a <hmc5883lInit+0x1e2>
        }
        actLed1Toggle();
 800167a:	f000 fd09 	bl	8002090 <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3301      	adds	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	2b09      	cmp	r3, #9
 8001688:	ddbe      	ble.n	8001608 <hmc5883lInit+0x160>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001694:	eddf 6a54 	vldr	s13, [pc, #336]	; 80017e8 <hmc5883lInit+0x340>
 8001698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169c:	eef0 7ae7 	vabs.f32	s15, s15
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <hmc5883lInit+0x338>)
 80016a2:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b0:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80017e8 <hmc5883lInit+0x340>
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	eef0 7ae7 	vabs.f32	s15, s15
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <hmc5883lInit+0x338>)
 80016be:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80017ec <hmc5883lInit+0x344>
 80016d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d4:	eef0 7ae7 	vabs.f32	s15, s15
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <hmc5883lInit+0x338>)
 80016da:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016de:	7b3b      	ldrb	r3, [r7, #12]
 80016e0:	f36f 0301 	bfc	r3, #0, #2
 80016e4:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016e6:	7b3b      	ldrb	r3, [r7, #12]
 80016e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ec:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <hmc5883lInit+0x338>)
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	7b3a      	ldrb	r2, [r7, #12]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 f8a6 	bl	8012848 <pifI2cDevice_WriteRegByte>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <hmc5883lInit+0x25e>
 8001702:	2300      	movs	r3, #0
 8001704:	e065      	b.n	80017d2 <hmc5883lInit+0x32a>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 8001706:	2101      	movs	r1, #1
 8001708:	4836      	ldr	r0, [pc, #216]	; (80017e4 <hmc5883lInit+0x33c>)
 800170a:	f016 fdc5 	bl	8018298 <pifHmc5883_SetGain>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <hmc5883lInit+0x270>
 8001714:	2300      	movs	r3, #0
 8001716:	e05c      	b.n	80017d2 <hmc5883lInit+0x32a>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <hmc5883lInit+0x338>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f011 f891 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <hmc5883lInit+0x288>
 800172c:	2300      	movs	r3, #0
 800172e:	e050      	b.n	80017d2 <hmc5883lInit+0x32a>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <hmc5883lInit+0x338>)
 8001732:	68d8      	ldr	r0, [r3, #12]
 8001734:	2300      	movs	r3, #0
 8001736:	f240 1201 	movw	r2, #257	; 0x101
 800173a:	2137      	movs	r1, #55	; 0x37
 800173c:	f011 f89a 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <hmc5883lInit+0x2a2>
 8001746:	2300      	movs	r3, #0
 8001748:	e043      	b.n	80017d2 <hmc5883lInit+0x32a>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <hmc5883lInit+0x338>)
 800174c:	68d8      	ldr	r0, [r3, #12]
 800174e:	2301      	movs	r3, #1
 8001750:	f240 5201 	movw	r2, #1281	; 0x501
 8001754:	216a      	movs	r1, #106	; 0x6a
 8001756:	f011 f88d 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <hmc5883lInit+0x2bc>
 8001760:	2300      	movs	r3, #0
 8001762:	e036      	b.n	80017d2 <hmc5883lInit+0x32a>

    if (!bret) {                // Something went wrong so get a best guess
 8001764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <hmc5883lInit+0x2e2>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <hmc5883lInit+0x338>)
 8001774:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001778:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <hmc5883lInit+0x338>)
 800177c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001780:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <hmc5883lInit+0x338>)
 8001784:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001788:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <hmc5883lInit+0x338>)
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <hmc5883lInit+0x338>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe94 	bl	80004c4 <__aeabi_f2d>
 800179c:	4680      	mov	r8, r0
 800179e:	4689      	mov	r9, r1
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <hmc5883lInit+0x338>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe8d 	bl	80004c4 <__aeabi_f2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <hmc5883lInit+0x338>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe86 	bl	80004c4 <__aeabi_f2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017c0:	e9cd 4500 	strd	r4, r5, [sp]
 80017c4:	4642      	mov	r2, r8
 80017c6:	464b      	mov	r3, r9
 80017c8:	4909      	ldr	r1, [pc, #36]	; (80017f0 <hmc5883lInit+0x348>)
 80017ca:	2002      	movs	r0, #2
 80017cc:	f011 fede 	bl	801358c <pifLog_Printf>
    return TRUE;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017dc:	200021f8 	.word	0x200021f8
 80017e0:	2000012c 	.word	0x2000012c
 80017e4:	20000140 	.word	0x20000140
 80017e8:	466f4000 	.word	0x466f4000
 80017ec:	465ec001 	.word	0x465ec001
 80017f0:	08024928 	.word	0x08024928

080017f4 <hmc5883lRead>:

static BOOL hmc5883lRead(int16_t *magData)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag(&imu_sensor, data)) return FALSE;
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4619      	mov	r1, r3
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <hmc5883lRead+0x44>)
 8001804:	f017 f925 	bl	8018a52 <pifImuSensor_ReadMag>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <hmc5883lRead+0x1e>
 800180e:	2300      	movs	r3, #0
 8001810:	e00e      	b.n	8001830 <hmc5883lRead+0x3c>
	magData[0] = data[0];
 8001812:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3302      	adds	r3, #2
 800181e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001822:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800182c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200021f8 	.word	0x200021f8

0800183c <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	461a      	mov	r2, r3
 800184a:	2101      	movs	r1, #1
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <_actHcSr04Trigger+0x24>)
 800184e:	f01a fbfd 	bl	801c04c <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <_actHcSr04Trigger+0x28>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020800 	.word	0x40020800
 8001864:	200001b0 	.word	0x200001b0

08001868 <hcsr04Echo>:

void hcsr04Echo()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <hcsr04Echo+0x24>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <hcsr04Echo+0x24>)
 8001878:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <hcsr04Echo+0x24>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <hcsr04Echo+0x28>)
 8001882:	f016 fba9 	bl	8017fd8 <pifHcSr04_sigReceiveEcho>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001b0 	.word	0x200001b0
 8001890:	2000018c 	.word	0x2000018c

08001894 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <_evtHcSr04Distance+0x54>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_evtHcSr04Distance+0x58>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d010      	beq.n	80018de <_evtHcSr04Distance+0x4a>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <_evtHcSr04Distance+0x5c>)
 80018c2:	f016 fb45 	bl	8017f50 <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7fe fdfc 	bl	80004c4 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4908      	ldr	r1, [pc, #32]	; (80018f4 <_evtHcSr04Distance+0x60>)
 80018d2:	2002      	movs	r0, #2
 80018d4:	f011 fe5a 	bl	801358c <pifLog_Printf>
#endif
        pretemp = temp;
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <_evtHcSr04Distance+0x58>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6013      	str	r3, [r2, #0]
    }
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001b4 	.word	0x200001b4
 80018ec:	200001b8 	.word	0x200001b8
 80018f0:	2000018c 	.word	0x2000018c
 80018f4:	0802493c 	.word	0x0802493c

080018f8 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 8001904:	2100      	movs	r1, #0
 8001906:	4810      	ldr	r0, [pc, #64]	; (8001948 <hcsr04Init+0x50>)
 8001908:	f016 fa9c 	bl	8017e44 <pifHcSr04_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <hcsr04Init+0x1e>
 8001912:	2300      	movs	r3, #0
 8001914:	e013      	b.n	800193e <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <hcsr04Init+0x50>)
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <hcsr04Init+0x54>)
 800191a:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_distance = _evtHcSr04Distance;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <hcsr04Init+0x50>)
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <hcsr04Init+0x58>)
 8001920:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4619      	mov	r1, r3
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <hcsr04Init+0x50>)
 8001928:	f016 faee 	bl	8017f08 <pifHcSr04_StartTrigger>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <hcsr04Init+0x3e>
 8001932:	2300      	movs	r3, #0
 8001934:	e003      	b.n	800193e <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <hcsr04Init+0x5c>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6013      	str	r3, [r2, #0]
    return TRUE;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000018c 	.word	0x2000018c
 800194c:	0800183d 	.word	0x0800183d
 8001950:	08001895 	.word	0x08001895
 8001954:	200001b4 	.word	0x200001b4

08001958 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af02      	add	r7, sp, #8
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4603      	mov	r3, r0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	4613      	mov	r3, r2
 8001968:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b21b      	sxth	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b21b      	sxth	r3, r3
 800197c:	b299      	uxth	r1, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	b29a      	uxth	r2, r3
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	b298      	uxth	r0, r3
 8001986:	8b3b      	ldrh	r3, [r7, #24]
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4603      	mov	r3, r0
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <actI2cRead+0x78>)
 8001992:	f01b f893 	bl	801cabc <HAL_I2C_Mem_Read_DMA>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <actI2cRead+0x48>
 800199c:	2300      	movs	r3, #0
 800199e:	e013      	b.n	80019c8 <actI2cRead+0x70>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e011      	b.n	80019c8 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	b299      	uxth	r1, r3
 80019b2:	8b3b      	ldrh	r3, [r7, #24]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <actI2cRead+0x78>)
 80019b8:	f01a fdee 	bl	801c598 <HAL_I2C_Master_Receive_DMA>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <actI2cRead+0x6e>
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <actI2cRead+0x70>
 80019c6:	2302      	movs	r3, #2
	}
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200015a4 	.word	0x200015a4

080019d4 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	4613      	mov	r3, r2
 80019e4:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019e6:	7bbb      	ldrb	r3, [r7, #14]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d016      	beq.n	8001a1a <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b299      	uxth	r1, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	b298      	uxth	r0, r3
 80019fc:	8b3b      	ldrh	r3, [r7, #24]
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <actI2cWrite+0x6c>)
 8001a08:	f01a fef6 	bl	801c7f8 <HAL_I2C_Mem_Write_DMA>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <actI2cWrite+0x42>
 8001a12:	2300      	movs	r3, #0
 8001a14:	e010      	b.n	8001a38 <actI2cWrite+0x64>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e00e      	b.n	8001a38 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	b299      	uxth	r1, r3
 8001a22:	8b3b      	ldrh	r3, [r7, #24]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <actI2cWrite+0x6c>)
 8001a28:	f01a fc86 	bl	801c338 <HAL_I2C_Master_Transmit_DMA>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <actI2cWrite+0x62>
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <actI2cWrite+0x64>
 8001a36:	2302      	movs	r3, #2
	}
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200015a4 	.word	0x200015a4

08001a44 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d103      	bne.n	8001a5e <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a56:	2101      	movs	r1, #1
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a5a:	f010 ff6d 	bl	8012938 <pifI2cPort_sigEndTransfer>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	20002120 	.word	0x20002120

08001a70 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d103      	bne.n	8001a8a <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a82:	2101      	movs	r1, #1
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a86:	f010 ff57 	bl	8012938 <pifI2cPort_sigEndTransfer>
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40005400 	.word	0x40005400
 8001a98:	20002120 	.word	0x20002120

08001a9c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d103      	bne.n	8001ab6 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001ab2:	f010 ff41 	bl	8012938 <pifI2cPort_sigEndTransfer>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	20002120 	.word	0x20002120

08001ac8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d103      	bne.n	8001ae2 <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ada:	2101      	movs	r1, #1
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001ade:	f010 ff2b 	bl	8012938 <pifI2cPort_sigEndTransfer>
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40005400 	.word	0x40005400
 8001af0:	20002120 	.word	0x20002120

08001af4 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d811      	bhi.n	8001b2e <failsafeCheck+0x3a>
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <failsafeCheck+0x78>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	88ba      	ldrh	r2, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d90c      	bls.n	8001b2e <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2201      	movs	r2, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <failsafeCheck+0x7c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <failsafeCheck+0x7c>)
 8001b2c:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <failsafeCheck+0x7c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d114      	bne.n	8001b60 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <failsafeCheck+0x7c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <failsafeCheck+0x80>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	2b14      	cmp	r3, #20
 8001b44:	dd09      	ble.n	8001b5a <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <failsafeCheck+0x80>)
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b14      	subs	r3, #20
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <failsafeCheck+0x80>)
 8001b56:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b58:	e002      	b.n	8001b60 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <failsafeCheck+0x80>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000695 	.word	0x20000695
 8001b74:	20000e82 	.word	0x20000e82

08001b78 <pwmReadRc>:

void pwmReadRc()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
    PifPulse* p_pulse = &pwmPorts[0].pulse;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <pwmReadRc+0x48>)
 8001b80:	607b      	str	r3, [r7, #4]

	if (pifPulse_sigTick(p_pulse, (*pif_act_timer1us)())) {
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <pwmReadRc+0x4c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4798      	blx	r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f011 feeb 	bl	8013968 <pifPulse_sigTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <pwmReadRc+0x3e>
		failsafeCheck(p_pulse->_channel, captures[p_pulse->_channel]);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <pwmReadRc+0x50>)
 8001baa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff ff9f 	bl	8001af4 <failsafeCheck>
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200001c0 	.word	0x200001c0
 8001bc4:	2000137c 	.word	0x2000137c
 8001bc8:	2000061c 	.word	0x2000061c

08001bcc <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <pwmWriteStandard+0x8c>)
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	78db      	ldrb	r3, [r3, #3]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d830      	bhi.n	8001c4c <pwmWriteStandard+0x80>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <pwmWriteStandard+0x24>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001c4d 	.word	0x08001c4d
 8001bf8:	08001c4d 	.word	0x08001c4d
 8001bfc:	08001c4d 	.word	0x08001c4d
 8001c00:	08001c2f 	.word	0x08001c2f
 8001c04:	08001c4d 	.word	0x08001c4d
 8001c08:	08001c4d 	.word	0x08001c4d
 8001c0c:	08001c4d 	.word	0x08001c4d
 8001c10:	08001c39 	.word	0x08001c39
 8001c14:	08001c4d 	.word	0x08001c4d
 8001c18:	08001c4d 	.word	0x08001c4d
 8001c1c:	08001c4d 	.word	0x08001c4d
 8001c20:	08001c43 	.word	0x08001c43
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <pwmWriteStandard+0x90>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	88ba      	ldrh	r2, [r7, #4]
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2c:	e00e      	b.n	8001c4c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <pwmWriteStandard+0x90>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	88ba      	ldrh	r2, [r7, #4]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
 8001c36:	e009      	b.n	8001c4c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <pwmWriteStandard+0x90>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	88ba      	ldrh	r2, [r7, #4]
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c40:	e004      	b.n	8001c4c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <pwmWriteStandard+0x90>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	88ba      	ldrh	r2, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4a:	bf00      	nop
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	2000063c 	.word	0x2000063c
 8001c5c:	200015f8 	.word	0x200015f8

08001c60 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	8a5a      	ldrh	r2, [r3, #18]
 8001c70:	4b8a      	ldr	r3, [pc, #552]	; (8001e9c <pwmInit+0x23c>)
 8001c72:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	79da      	ldrb	r2, [r3, #7]
 8001c78:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <pwmInit+0x240>)
 8001c7a:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7d1a      	ldrb	r2, [r3, #20]
 8001c80:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <pwmInit+0x244>)
 8001c82:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	799b      	ldrb	r3, [r3, #6]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <pwmInit+0x3e>
        i++; // next index is for PPM
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001c9e:	4a82      	ldr	r2, [pc, #520]	; (8001ea8 <pwmInit+0x248>)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	e0e4      	b.n	8001e78 <pwmInit+0x218>
        uint8_t pwm = setup[i].pwm;
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4413      	add	r3, r2
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	f000 80d5 	beq.w	8001e82 <pwmInit+0x222>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001cd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <pwmInit+0x98>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <pwmInit+0x98>
        	type = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001cf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d026      	beq.n	8001d52 <pwmInit+0xf2>
            p = &pwmPorts[pwm];
 8001d04:	7dfa      	ldrb	r2, [r7, #23]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4a67      	ldr	r2, [pc, #412]	; (8001eac <pwmInit+0x24c>)
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
            if (pifPulse_Init(&p->pulse, PIF_ID_AUTO)) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3304      	adds	r3, #4
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f011 fd74 	bl	8013808 <pifPulse_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a5 	beq.w	8001e72 <pwmInit+0x212>
                pifPulse_SetPositionMode(&p->pulse, 8, 2700, captures);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1d18      	adds	r0, r3, #4
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <pwmInit+0x250>)
 8001d2e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001d32:	2108      	movs	r1, #8
 8001d34:	f011 fd92 	bl	801385c <pifPulse_SetPositionMode>
                pifPulse_SetValidRange(&p->pulse, PIF_PMM_TICK_POSITION, PULSE_MIN, PULSE_MAX);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1d18      	adds	r0, r3, #4
 8001d3c:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001d40:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d44:	2140      	movs	r1, #64	; 0x40
 8001d46:	f011 fdb9 	bl	80138bc <pifPulse_SetValidRange>
                numInputs = 8;
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <pwmInit+0x254>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e08f      	b.n	8001e72 <pwmInit+0x212>
            }
        } else if (type & TYPE_IW) {
 8001d52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8089 	bne.w	8001e72 <pwmInit+0x212>
                	break;
            	}
                numInputs++;
            }
*/
        } else if (type & TYPE_M) {
 8001d60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d05d      	beq.n	8001e28 <pwmInit+0x1c8>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	895b      	ldrh	r3, [r3, #10]
 8001d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d74:	d803      	bhi.n	8001d7e <pwmInit+0x11e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7d5b      	ldrb	r3, [r3, #21]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <pwmInit+0x124>
                mhz = PWM_TIMER_8_MHZ;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e001      	b.n	8001d88 <pwmInit+0x128>
            else
                mhz = PWM_TIMER_MHZ;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <pwmInit+0x258>)
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7d5b      	ldrb	r3, [r3, #21]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <pwmInit+0x148>
                period = hz / 4000;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <pwmInit+0x25c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da6:	e006      	b.n	8001db6 <pwmInit+0x156>
            else
                period = hz / init->motorPwmRate;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	895b      	ldrh	r3, [r3, #10]
 8001dac:	461a      	mov	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db4:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001db6:	7dfa      	ldrb	r2, [r7, #23]
 8001db8:	493c      	ldr	r1, [pc, #240]	; (8001eac <pwmInit+0x24c>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	440b      	add	r3, r1
 8001dc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dc6:	801a      	strh	r2, [r3, #0]
            pwmPorts[pwm].port = setup[i].port;
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	7dfa      	ldrb	r2, [r7, #23]
 8001dd6:	7898      	ldrb	r0, [r3, #2]
 8001dd8:	4934      	ldr	r1, [pc, #208]	; (8001eac <pwmInit+0x24c>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	440b      	add	r3, r1
 8001de4:	3303      	adds	r3, #3
 8001de6:	4602      	mov	r2, r0
 8001de8:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dea:	7dfa      	ldrb	r2, [r7, #23]
 8001dec:	492f      	ldr	r1, [pc, #188]	; (8001eac <pwmInit+0x24c>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	440b      	add	r3, r1
 8001df8:	3303      	adds	r3, #3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <pwmInit+0x260>)
 8001e00:	f01d fd96 	bl	801f930 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e04:	7dfa      	ldrb	r2, [r7, #23]
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <pwmInit+0x264>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	b2c8      	uxtb	r0, r1
 8001e0e:	492d      	ldr	r1, [pc, #180]	; (8001ec4 <pwmInit+0x264>)
 8001e10:	7008      	strb	r0, [r1, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <pwmInit+0x24c>)
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <pwmInit+0x268>)
 8001e22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e26:	e024      	b.n	8001e72 <pwmInit+0x212>
        } else if (type & TYPE_S) {
 8001e28:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da20      	bge.n	8001e72 <pwmInit+0x212>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	899b      	ldrh	r3, [r3, #12]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <pwmInit+0x258>)
 8001e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	b298      	uxth	r0, r3
 8001e40:	491a      	ldr	r1, [pc, #104]	; (8001eac <pwmInit+0x24c>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	440b      	add	r3, r1
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	801a      	strh	r2, [r3, #0]
            servos[numServos++] = &pwmPorts[pwm];
 8001e50:	7dfa      	ldrb	r2, [r7, #23]
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <pwmInit+0x26c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	b2c8      	uxtb	r0, r1
 8001e5a:	491c      	ldr	r1, [pc, #112]	; (8001ecc <pwmInit+0x26c>)
 8001e5c:	7008      	strb	r0, [r1, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <pwmInit+0x24c>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <pwmInit+0x270>)
 8001e6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b0d      	cmp	r3, #13
 8001e7c:	f77f af17 	ble.w	8001cae <pwmInit+0x4e>
 8001e80:	e000      	b.n	8001e84 <pwmInit+0x224>
            break;
 8001e82:	bf00      	nop
        }
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <pwmInit+0x274>)
 8001e86:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <pwmInit+0x278>)
 8001e88:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <pwmInit+0x26c>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	759a      	strb	r2, [r3, #22]

    return false;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	20000693 	.word	0x20000693
 8001ea4:	20000694 	.word	0x20000694
 8001ea8:	080268a8 	.word	0x080268a8
 8001eac:	200001bc 	.word	0x200001bc
 8001eb0:	2000061c 	.word	0x2000061c
 8001eb4:	20000692 	.word	0x20000692
 8001eb8:	000f4240 	.word	0x000f4240
 8001ebc:	10624dd3 	.word	0x10624dd3
 8001ec0:	200015f8 	.word	0x200015f8
 8001ec4:	20000690 	.word	0x20000690
 8001ec8:	2000063c 	.word	0x2000063c
 8001ecc:	20000691 	.word	0x20000691
 8001ed0:	2000066c 	.word	0x2000066c
 8001ed4:	2000068c 	.word	0x2000068c
 8001ed8:	08001bcd 	.word	0x08001bcd

08001edc <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <actPwmWriteMotor+0x30>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d205      	bcs.n	8001f02 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <actPwmWriteMotor+0x34>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	88b9      	ldrh	r1, [r7, #4]
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	4610      	mov	r0, r2
 8001f00:	4798      	blx	r3
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000690 	.word	0x20000690
 8001f10:	2000068c 	.word	0x2000068c

08001f14 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <actPwmRead+0x20>)
 8001f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000061c 	.word	0x2000061c

08001f54 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001f5e:	f000 f8ad 	bl	80020bc <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f852 	bl	800200c <actLed0State>
    actLed1State(OFF);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f87b 	bl	8002064 <actLed1State>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <failureMode>:

void failureMode(uint8_t mode)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
 8001f7c:	f011 fbd2 	bl	8013724 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 f86f 	bl	8002064 <actLed1State>
    actLed0State(ON);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f000 f840 	bl	800200c <actLed0State>
    while (1) {
        actLed1Toggle();
 8001f8c:	f000 f880 	bl	8002090 <actLed1Toggle>
        actLed0Toggle();
 8001f90:	f000 f852 	bl	8002038 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	441a      	add	r2, r3
 8001f9e:	0152      	lsls	r2, r2, #5
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	0091      	lsls	r1, r2, #2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b02      	subs	r3, #2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00f fa90 	bl	80114d8 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fbe:	f000 f87d 	bl	80020bc <actBuzzerAction>
        pif_Delay1ms(25);
 8001fc2:	2019      	movs	r0, #25
 8001fc4:	f00f fa88 	bl	80114d8 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f875 	bl	80020bc <actBuzzerAction>
        actLed1Toggle();
 8001fd2:	e7db      	b.n	8001f8c <failureMode+0x1a>

08001fd4 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4907      	ldr	r1, [pc, #28]	; (8002000 <systemReset+0x2c>)
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f011 fad1 	bl	801358c <pifLog_Printf>
	pif_Delay1ms(2000);
 8001fea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fee:	f00f fa73 	bl	80114d8 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <systemReset+0x30>)
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <systemReset+0x34>)
 8001ff6:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	08024944 	.word	0x08024944
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	05fa0004 	.word	0x05fa0004

0800200c <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	461a      	mov	r2, r3
 800201a:	2110      	movs	r1, #16
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <actLed0State+0x24>)
 800201e:	f01a f815 	bl	801c04c <HAL_GPIO_WritePin>
    len0_state = state;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <actLed0State+0x28>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40020800 	.word	0x40020800
 8002034:	20000696 	.word	0x20000696

08002038 <actLed0Toggle>:

void actLed0Toggle()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <actLed0Toggle+0x24>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <actLed0Toggle+0x24>)
 8002048:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <actLed0Toggle+0x24>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	2110      	movs	r1, #16
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <actLed0Toggle+0x28>)
 8002054:	f019 fffa 	bl	801c04c <HAL_GPIO_WritePin>
#endif
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000696 	.word	0x20000696
 8002060:	40020800 	.word	0x40020800

08002064 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	461a      	mov	r2, r3
 8002072:	2104      	movs	r1, #4
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <actLed1State+0x24>)
 8002076:	f019 ffe9 	bl	801c04c <HAL_GPIO_WritePin>
    len1_state = state;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <actLed1State+0x28>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40020400 	.word	0x40020400
 800208c:	20000697 	.word	0x20000697

08002090 <actLed1Toggle>:

void actLed1Toggle()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <actLed1Toggle+0x24>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <actLed1Toggle+0x24>)
 80020a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <actLed1Toggle+0x24>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	2104      	movs	r1, #4
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <actLed1Toggle+0x28>)
 80020ac:	f019 ffce 	bl	801c04c <HAL_GPIO_WritePin>
#endif
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000697 	.word	0x20000697
 80020b8:	40020400 	.word	0x40020400

080020bc <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	80fb      	strh	r3, [r7, #6]
 80020c8:	4613      	mov	r3, r2
 80020ca:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	461a      	mov	r2, r3
 80020d0:	2120      	movs	r1, #32
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <actBuzzerAction+0x24>)
 80020d4:	f019 ffba 	bl	801c04c <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020800 	.word	0x40020800

080020e4 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_EXTI_Callback+0x1c>
 80020f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f8:	d105      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 80020fa:	f7ff fd3d 	bl	8001b78 <pwmReadRc>
		break;
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002100:	f7ff fbb2 	bl	8001868 <hcsr04Echo>
    	break;
 8002104:	bf00      	nop
    }
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002116:	2100      	movs	r1, #0
 8002118:	4822      	ldr	r0, [pc, #136]	; (80021a4 <storageInit+0x94>)
 800211a:	f017 fe99 	bl	8019e50 <pifStorageVar_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <storageInit+0x18>
 8002124:	2300      	movs	r3, #0
 8002126:	e039      	b.n	800219c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002128:	230a      	movs	r3, #10
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2302      	movs	r3, #2
 800212e:	2250      	movs	r2, #80	; 0x50
 8002130:	491d      	ldr	r1, [pc, #116]	; (80021a8 <storageInit+0x98>)
 8002132:	481c      	ldr	r0, [pc, #112]	; (80021a4 <storageInit+0x94>)
 8002134:	f017 ffd4 	bl	801a0e0 <pifStorageVar_AttachI2c>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d027      	beq.n	800218e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 800213e:	2308      	movs	r3, #8
 8002140:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4817      	ldr	r0, [pc, #92]	; (80021a4 <storageInit+0x94>)
 8002148:	f017 fef8 	bl	8019f3c <pifStorageVar_SetMedia>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01f      	beq.n	8002192 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 8002152:	4814      	ldr	r0, [pc, #80]	; (80021a4 <storageInit+0x94>)
 8002154:	f017 ffdd 	bl	801a112 <pifStorageVar_IsFormat>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <storageInit+0x9c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4912      	ldr	r1, [pc, #72]	; (80021b0 <storageInit+0xa0>)
 8002166:	2002      	movs	r0, #2
 8002168:	f011 fa10 	bl	801358c <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <storageInit+0x94>)
 800216e:	f017 fd8c 	bl	8019c8a <pifStorage_Format>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <storageInit+0xa4>)
 800217a:	2002      	movs	r0, #2
 800217c:	f011 fa06 	bl	801358c <pifLog_Printf>
			goto fail;
 8002180:	e008      	b.n	8002194 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <storageInit+0xa8>)
 8002184:	2002      	movs	r0, #2
 8002186:	f011 fa01 	bl	801358c <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <storageInit+0x94>)
 800218c:	e006      	b.n	800219c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8002192:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <storageInit+0x94>)
 8002196:	f017 fea7 	bl	8019ee8 <pifStorageVar_Clear>
#endif
	return NULL;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200014fc 	.word	0x200014fc
 80021a8:	20002120 	.word	0x20002120
 80021ac:	20001365 	.word	0x20001365
 80021b0:	0802495c 	.word	0x0802495c
 80021b4:	08024974 	.word	0x08024974
 80021b8:	0802498c 	.word	0x0802498c

080021bc <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8a1b      	ldrh	r3, [r3, #16]
 80021ca:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4a11      	ldr	r2, [pc, #68]	; (800221c <actUartSetBaudRate+0x60>)
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d101      	bne.n	80021ec <actUartSetBaudRate+0x30>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e013      	b.n	8002214 <actUartSetBaudRate+0x58>

	HAL_UART_DeInit(p_uart->p_huart);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	4618      	mov	r0, r3
 80021f2:	f01e fbc6 	bl	8020982 <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f01e fb70 	bl	80208e8 <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <actUartSetBaudRate+0x56>
		return FALSE;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <actUartSetBaudRate+0x58>
	}
	return TRUE;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200006cc 	.word	0x200006cc

08002220 <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8a1b      	ldrh	r3, [r3, #16]
 800222c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <actUartStartTransfer+0x64>)
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2208      	movs	r2, #8
 8002242:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f00f ffda 	bl	801220a <pifComm_StartGetTxData>
 8002256:	4603      	mov	r3, r0
 8002258:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <actUartStartTransfer+0x58>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800226e:	461a      	mov	r2, r3
 8002270:	f01e fbb6 	bl	80209e0 <HAL_UART_Transmit_IT>
		return TRUE;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <actUartStartTransfer+0x5a>
	}
	return FALSE;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200006cc 	.word	0x200006cc

08002288 <serialUSART>:

static BOOL serialUSART(uartPort_t* s, uint32_t baudRate, PifId pif_id)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
	s->init = TRUE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (!pifComm_Init(&s->port.comm, pif_id)) return FALSE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3304      	adds	r3, #4
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00f fe9a 	bl	8011fe0 <pifComm_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <serialUSART+0x2e>
 80022b2:	2300      	movs	r3, #0
 80022b4:	e02b      	b.n	800230e <serialUSART+0x86>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, 1, TRUE)) return FALSE;	// 1ms
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1d18      	adds	r0, r3, #4
 80022ba:	2301      	movs	r3, #1
 80022bc:	2201      	movs	r2, #1
 80022be:	2102      	movs	r1, #2
 80022c0:	f010 f838 	bl	8012334 <pifComm_AttachTask>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <serialUSART+0x46>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e01f      	b.n	800230e <serialUSART+0x86>
	if (!pifComm_AllocRxBuffer(&s->port.comm, 64, s->rx_threshold)) return FALSE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1d18      	adds	r0, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022d8:	461a      	mov	r2, r3
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	f00f fed0 	bl	8012080 <pifComm_AllocRxBuffer>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <serialUSART+0x62>
 80022e6:	2300      	movs	r3, #0
 80022e8:	e011      	b.n	800230e <serialUSART+0x86>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00f ff09 	bl	8012108 <pifComm_AllocTxBuffer>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <serialUSART+0x78>
 80022fc:	2300      	movs	r3, #0
 80022fe:	e006      	b.n	800230e <serialUSART+0x86>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <serialUSART+0x90>)
 8002304:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <serialUSART+0x94>)
 800230a:	611a      	str	r2, [r3, #16]
	return TRUE;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	080021bd 	.word	0x080021bd
 800231c:	08002221 	.word	0x08002221

08002320 <actLogStartTransfer>:

#ifdef __PIF_DEBUG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <actLogStartTransfer+0x48>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <actLogStartTransfer+0x48>)
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f00f ff67 	bl	801220a <pifComm_StartGetTxData>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <actLogStartTransfer+0x48>)
 800234e:	8812      	ldrh	r2, [r2, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <actLogStartTransfer+0x4c>)
 8002354:	f01e fb44 	bl	80209e0 <HAL_UART_Transmit_IT>
		return TRUE;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <actLogStartTransfer+0x3e>
	}
	return FALSE;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200006c8 	.word	0x200006c8
 800236c:	20001830 	.word	0x20001830

08002370 <logOpen>:

BOOL logOpen()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	pifLog_Init();
 8002374:	f011 f81a 	bl	80133ac <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8002378:	2100      	movs	r1, #0
 800237a:	4815      	ldr	r0, [pc, #84]	; (80023d0 <logOpen+0x60>)
 800237c:	f00f fe30 	bl	8011fe0 <pifComm_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <logOpen+0x1a>
 8002386:	2300      	movs	r3, #0
 8002388:	e020      	b.n	80023cc <logOpen+0x5c>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE)) return FALSE;			// 1ms
 800238a:	2301      	movs	r3, #1
 800238c:	2201      	movs	r2, #1
 800238e:	2102      	movs	r1, #2
 8002390:	480f      	ldr	r0, [pc, #60]	; (80023d0 <logOpen+0x60>)
 8002392:	f00f ffcf 	bl	8012334 <pifComm_AttachTask>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <logOpen+0x30>
 800239c:	2300      	movs	r3, #0
 800239e:	e015      	b.n	80023cc <logOpen+0x5c>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 80023a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a4:	480a      	ldr	r0, [pc, #40]	; (80023d0 <logOpen+0x60>)
 80023a6:	f00f feaf 	bl	8012108 <pifComm_AllocTxBuffer>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <logOpen+0x44>
 80023b0:	2300      	movs	r3, #0
 80023b2:	e00b      	b.n	80023cc <logOpen+0x5c>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <logOpen+0x60>)
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <logOpen+0x64>)
 80023b8:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <logOpen+0x60>)
 80023bc:	f011 f978 	bl	80136b0 <pifLog_AttachComm>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <logOpen+0x5a>
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <logOpen+0x5c>
	return TRUE;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000698 	.word	0x20000698
 80023d4:	08002321 	.word	0x08002321

080023d8 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	71fb      	strb	r3, [r7, #7]
    uartPort_t *s = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]

    if (port == UART_PORT_1) {
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d109      	bne.n	8002404 <uartOpen+0x2c>
        s = &uartPort[0];
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <uartOpen+0x98>)
 80023f2:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart1;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <uartOpen+0x9c>)
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2219      	movs	r2, #25
 80023fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002402:	e00e      	b.n	8002422 <uartOpen+0x4a>
        s = &uartPort[1];
        s->p_huart = &huart2;
        s->rx_threshold = 10;
    }
#endif
    else if (port == UART_PORT_3) {
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d109      	bne.n	800241e <uartOpen+0x46>
        s = &uartPort[2];
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <uartOpen+0xa0>)
 800240c:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart6;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a1a      	ldr	r2, [pc, #104]	; (800247c <uartOpen+0xa4>)
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2219      	movs	r2, #25
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	e001      	b.n	8002422 <uartOpen+0x4a>
    }
    else return NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	e021      	b.n	8002466 <uartOpen+0x8e>

    if (!serialUSART(s, baudRate, PIF_ID_UART(port - 1))) return FALSE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	b29b      	uxth	r3, r3
 8002426:	33ff      	adds	r3, #255	; 0xff
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff2a 	bl	8002288 <serialUSART>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <uartOpen+0x66>
 800243a:	2300      	movs	r3, #0
 800243c:	e013      	b.n	8002466 <uartOpen+0x8e>

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f8e8 	bl	8002618 <serialSetBaudRate>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <uartOpen+0x84>
    	pifComm_Clear(&s->port.comm);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3304      	adds	r3, #4
 8002452:	4618      	mov	r0, r3
 8002454:	f00f fdee 	bl	8012034 <pifComm_Clear>
    	return FALSE;
 8002458:	2300      	movs	r3, #0
 800245a:	e004      	b.n	8002466 <uartOpen+0x8e>
    }

	s->init = FALSE;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return (serialPort_t *)s;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200006cc 	.word	0x200006cc
 8002474:	200016a0 	.word	0x200016a0
 8002478:	20000754 	.word	0x20000754
 800247c:	200017a4 	.word	0x200017a4

08002480 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a39      	ldr	r2, [pc, #228]	; (8002574 <HAL_UART_TxCpltCallback+0xf4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d102      	bne.n	8002498 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_UART_TxCpltCallback+0xf8>)
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e035      	b.n	8002504 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a37      	ldr	r2, [pc, #220]	; (800257c <HAL_UART_TxCpltCallback+0xfc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d129      	bne.n	80024f6 <HAL_UART_TxCpltCallback+0x76>
#ifdef __PIF_DEBUG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 80024a2:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_UART_TxCpltCallback+0x100>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <HAL_UART_TxCpltCallback+0x104>)
 80024aa:	f00f fee6 	bl	801227a <pifComm_EndGetTxData>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 80024bc:	4831      	ldr	r0, [pc, #196]	; (8002584 <HAL_UART_TxCpltCallback+0x104>)
 80024be:	f00f fef5 	bl	80122ac <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 80024c2:	e050      	b.n	8002566 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_UART_TxCpltCallback+0x100>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HAL_UART_TxCpltCallback+0x100>)
 80024d0:	4619      	mov	r1, r3
 80024d2:	482c      	ldr	r0, [pc, #176]	; (8002584 <HAL_UART_TxCpltCallback+0x104>)
 80024d4:	f00f fe99 	bl	801220a <pifComm_StartGetTxData>
 80024d8:	4603      	mov	r3, r0
 80024da:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03f      	beq.n	8002566 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_UART_TxCpltCallback+0x100>)
 80024ea:	8812      	ldrh	r2, [r2, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f01e fa76 	bl	80209e0 <HAL_UART_Transmit_IT>
		return;
 80024f4:	e037      	b.n	8002566 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_UART_TxCpltCallback+0x108>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d134      	bne.n	800256a <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_UART_TxCpltCallback+0x10c>)
 8002502:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f00f feb3 	bl	801227a <pifComm_EndGetTxData>
 8002514:	4603      	mov	r3, r0
 8002516:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f00f fec0 	bl	80122ac <pifComm_FinishTransfer>
 800252c:	e01e      	b.n	800256c <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2208      	movs	r2, #8
 8002532:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1d18      	adds	r0, r3, #4
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4619      	mov	r1, r3
 8002544:	f00f fe61 	bl	801220a <pifComm_StartGetTxData>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800255c:	461a      	mov	r2, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f01e fa3e 	bl	80209e0 <HAL_UART_Transmit_IT>
 8002564:	e002      	b.n	800256c <HAL_UART_TxCpltCallback+0xec>
		return;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <HAL_UART_TxCpltCallback+0xec>
	else return;
 800256a:	bf00      	nop
		}
	}
}
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40011000 	.word	0x40011000
 8002578:	200006cc 	.word	0x200006cc
 800257c:	40004400 	.word	0x40004400
 8002580:	200006c8 	.word	0x200006c8
 8002584:	20000698 	.word	0x20000698
 8002588:	40011400 	.word	0x40011400
 800258c:	20000754 	.word	0x20000754

08002590 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_UART_RxCpltCallback+0x70>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d102      	bne.n	80025a8 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_RxCpltCallback+0x74>)
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e00e      	b.n	80025c6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_UART_RxCpltCallback+0x78>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_UART_RxCpltCallback+0x7c>)
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e006      	b.n	80025c6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_UART_RxCpltCallback+0x80>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d117      	bne.n	80025f2 <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_UART_RxCpltCallback+0x84>)
 80025c4:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d112      	bne.n	80025f6 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f00f fde8 	bl	80121b2 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	333e      	adds	r3, #62	; 0x3e
 80025e6:	2201      	movs	r2, #1
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f01e fa3d 	bl	8020a6a <HAL_UART_Receive_IT>
 80025f0:	e002      	b.n	80025f8 <HAL_UART_RxCpltCallback+0x68>
	else return;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 80025f6:	bf00      	nop
}
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40011000 	.word	0x40011000
 8002604:	200006cc 	.word	0x200006cc
 8002608:	40004400 	.word	0x40004400
 800260c:	20000710 	.word	0x20000710
 8002610:	40011400 	.word	0x40011400
 8002614:	20000754 	.word	0x20000754

08002618 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	3204      	adds	r2, #4
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8a1b      	ldrh	r3, [r3, #16]
 8002648:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <serialStartReceiveFunc+0x44>)
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	333e      	adds	r3, #62	; 0x3e
 8002662:	2201      	movs	r2, #1
 8002664:	4619      	mov	r1, r3
 8002666:	f01e fa00 	bl	8020a6a <HAL_UART_Receive_IT>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <serialStartReceiveFunc+0x38>
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <serialStartReceiveFunc+0x3a>
	return TRUE;
 8002674:	2301      	movs	r3, #1
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200006cc 	.word	0x200006cc

08002684 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8a1b      	ldrh	r3, [r3, #16]
 8002690:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <serialStopReceiveFunc+0x34>)
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	4618      	mov	r0, r3
 80026a8:	f01e fa10 	bl	8020acc <HAL_UART_Abort_IT>
	return TRUE;
 80026ac:	2301      	movs	r3, #1
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200006cc 	.word	0x200006cc

080026bc <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <micros+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	200017e8 	.word	0x200017e8

080026d4 <featureDefault>:

static void featureDefault(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 80026d8:	2002      	movs	r0, #2
 80026da:	f004 fc99 	bl	8007010 <featureSet>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <actTaskMeasureLoop>:

#ifdef __PIF_DEBUG__

void actTaskMeasureLoop()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	static int sw = 0;

	sw ^= 1;
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <actTaskMeasureLoop+0x24>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <actTaskMeasureLoop+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, sw);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <actTaskMeasureLoop+0x24>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	2120      	movs	r1, #32
 80026fe:	4803      	ldr	r0, [pc, #12]	; (800270c <actTaskMeasureLoop+0x28>)
 8002700:	f019 fca4 	bl	801c04c <HAL_GPIO_WritePin>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200007a4 	.word	0x200007a4
 800270c:	40020000 	.word	0x40020000

08002710 <actTaskMeasureYield>:

void actTaskMeasureYield()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	static int sw = 0;

	sw ^= 1;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <actTaskMeasureYield+0x24>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	4a05      	ldr	r2, [pc, #20]	; (8002734 <actTaskMeasureYield+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, sw);
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <actTaskMeasureYield+0x24>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	2120      	movs	r1, #32
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <actTaskMeasureYield+0x28>)
 800272c:	f019 fc8e 	bl	801c04c <HAL_GPIO_WritePin>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200007a8 	.word	0x200007a8
 8002738:	40020000 	.word	0x40020000

0800273c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b08d      	sub	sp, #52	; 0x34
 8002740:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 8002742:	2300      	movs	r3, #0
 8002744:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002746:	f018 f845 	bl	801a7d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800274a:	f000 fb1f 	bl	8002d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800274e:	f000 fdd7 	bl	8003300 <MX_GPIO_Init>
  MX_DMA_Init();
 8002752:	f000 fd97 	bl	8003284 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002756:	f000 fd41 	bl	80031dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800275a:	f000 fbfd 	bl	8002f58 <MX_I2C1_Init>
  MX_TIM3_Init();
 800275e:	f000 fc75 	bl	800304c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002762:	f000 fd11 	bl	8003188 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002766:	f000 fd63 	bl	8003230 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800276a:	f000 fb79 	bl	8002e60 <MX_ADC1_Init>
  MX_TIM2_Init();
 800276e:	f000 fc21 	bl	8002fb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002772:	2100      	movs	r1, #0
 8002774:	48c0      	ldr	r0, [pc, #768]	; (8002a78 <main+0x33c>)
 8002776:	f01d f98b 	bl	801fa90 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 800277a:	48c0      	ldr	r0, [pc, #768]	; (8002a7c <main+0x340>)
 800277c:	f00e fdce 	bl	801131c <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 8002780:	2014      	movs	r0, #20
 8002782:	f012 f837 	bl	80147f4 <pifTaskManager_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <main+0x56>
 800278c:	23b6      	movs	r3, #182	; 0xb6
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	e2b5      	b.n	8002cfe <main+0x5c2>

#ifdef __PIF_DEBUG__
    pif_act_task_loop = actTaskMeasureLoop;
 8002792:	4bbb      	ldr	r3, [pc, #748]	; (8002a80 <main+0x344>)
 8002794:	4abb      	ldr	r2, [pc, #748]	; (8002a84 <main+0x348>)
 8002796:	601a      	str	r2, [r3, #0]
    pif_act_task_yield = actTaskMeasureYield;
 8002798:	4bbb      	ldr	r3, [pc, #748]	; (8002a88 <main+0x34c>)
 800279a:	4abc      	ldr	r2, [pc, #752]	; (8002a8c <main+0x350>)
 800279c:	601a      	str	r2, [r3, #0]

    logOpen();
 800279e:	f7ff fde7 	bl	8002370 <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80027a2:	2303      	movs	r3, #3
 80027a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a8:	2100      	movs	r1, #0
 80027aa:	48b9      	ldr	r0, [pc, #740]	; (8002a90 <main+0x354>)
 80027ac:	f012 fa26 	bl	8014bfc <pifTimerManager_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <main+0x80>
 80027b6:	23bf      	movs	r3, #191	; 0xbf
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	e2a0      	b.n	8002cfe <main+0x5c2>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 80027bc:	f240 526c 	movw	r2, #1388	; 0x56c
 80027c0:	49b4      	ldr	r1, [pc, #720]	; (8002a94 <main+0x358>)
 80027c2:	2002      	movs	r0, #2
 80027c4:	f010 fee2 	bl	801358c <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 80027c8:	f001 fc00 	bl	8003fcc <buzzerInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <main+0xa2>
 80027d8:	23c5      	movs	r3, #197	; 0xc5
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	e28f      	b.n	8002cfe <main+0x5c2>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80027de:	4bae      	ldr	r3, [pc, #696]	; (8002a98 <main+0x35c>)
 80027e0:	4aae      	ldr	r2, [pc, #696]	; (8002a9c <main+0x360>)
 80027e2:	601a      	str	r2, [r3, #0]

    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) FAIL;
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	2205      	movs	r2, #5
 80027e8:	2100      	movs	r1, #0
 80027ea:	48ad      	ldr	r0, [pc, #692]	; (8002aa0 <main+0x364>)
 80027ec:	f00f fdc2 	bl	8012374 <pifI2cPort_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <main+0xc0>
 80027f6:	23cc      	movs	r3, #204	; 0xcc
 80027f8:	623b      	str	r3, [r7, #32]
 80027fa:	e280      	b.n	8002cfe <main+0x5c2>
    g_i2c_port.act_read = actI2cRead;
 80027fc:	4ba8      	ldr	r3, [pc, #672]	; (8002aa0 <main+0x364>)
 80027fe:	4aa9      	ldr	r2, [pc, #676]	; (8002aa4 <main+0x368>)
 8002800:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8002802:	4ba7      	ldr	r3, [pc, #668]	; (8002aa0 <main+0x364>)
 8002804:	4aa8      	ldr	r2, [pc, #672]	; (8002aa8 <main+0x36c>)
 8002806:	609a      	str	r2, [r3, #8]

    if (!initEEPROM()) FAIL;
 8002808:	f003 fe4e 	bl	80064a8 <initEEPROM>
 800280c:	4603      	mov	r3, r0
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <main+0xe2>
 8002818:	23d0      	movs	r3, #208	; 0xd0
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	e26f      	b.n	8002cfe <main+0x5c2>
    if (!checkFirstTime(false)) FAIL;
 800281e:	2000      	movs	r0, #0
 8002820:	f004 f880 	bl	8006924 <checkFirstTime>
 8002824:	4603      	mov	r3, r0
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <main+0xfa>
 8002830:	23d1      	movs	r3, #209	; 0xd1
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	e263      	b.n	8002cfe <main+0x5c2>
    readEEPROM();
 8002836:	f003 fedf 	bl	80065f8 <readEEPROM>

    systemInit();
 800283a:	f7ff fb8b 	bl	8001f54 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 800283e:	2064      	movs	r0, #100	; 0x64
 8002840:	f00e fe4a 	bl	80114d8 <pif_Delay1ms>

    activateConfig();
 8002844:	f003 ff22 	bl	800668c <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002848:	4b98      	ldr	r3, [pc, #608]	; (8002aac <main+0x370>)
 800284a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01b      	beq.n	800288a <main+0x14e>
 8002852:	4b96      	ldr	r3, [pc, #600]	; (8002aac <main+0x370>)
 8002854:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002858:	2b01      	cmp	r3, #1
 800285a:	d009      	beq.n	8002870 <main+0x134>
 800285c:	4b93      	ldr	r3, [pc, #588]	; (8002aac <main+0x370>)
 800285e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002862:	2b09      	cmp	r3, #9
 8002864:	d004      	beq.n	8002870 <main+0x134>
 8002866:	4b91      	ldr	r3, [pc, #580]	; (8002aac <main+0x370>)
 8002868:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800286c:	2b05      	cmp	r3, #5
 800286e:	d10c      	bne.n	800288a <main+0x14e>
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <main+0x370>)
 8002872:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002876:	4b8d      	ldr	r3, [pc, #564]	; (8002aac <main+0x370>)
 8002878:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800287c:	429a      	cmp	r2, r3
 800287e:	d004      	beq.n	800288a <main+0x14e>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002880:	4b8a      	ldr	r3, [pc, #552]	; (8002aac <main+0x370>)
 8002882:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002886:	707b      	strb	r3, [r7, #1]
 8002888:	e005      	b.n	8002896 <main+0x15a>
    else {
        adc_params.rssiAdcChannel = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	707b      	strb	r3, [r7, #1]
        mcfg.rssi_adc_channel = 0;
 800288e:	4b87      	ldr	r3, [pc, #540]	; (8002aac <main+0x370>)
 8002890:	2200      	movs	r2, #0
 8002892:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 8002896:	463b      	mov	r3, r7
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fc77 	bl	800118c <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 800289e:	2002      	movs	r0, #2
 80028a0:	f004 fba0 	bl	8006fe4 <feature>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <main+0x172>
        batteryInit();
 80028aa:	f00b fe3b 	bl	800e524 <batteryInit>
    initBoardAlignment();
 80028ae:	f001 fa33 	bl	8003d18 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80028b2:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <main+0x374>)
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <main+0x378>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <main+0x37c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	487f      	ldr	r0, [pc, #508]	; (8002abc <main+0x380>)
 80028c0:	f00b fcd4 	bl	800e26c <sensorsAutodetect>
 80028c4:	4603      	mov	r3, r0
 80028c6:	77fb      	strb	r3, [r7, #31]
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 80028c8:	f004 fb80 	bl	8006fcc <sensorsMask>
 80028cc:	4602      	mov	r2, r0
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	497b      	ldr	r1, [pc, #492]	; (8002ac0 <main+0x384>)
 80028d2:	2002      	movs	r0, #2
 80028d4:	f010 fe5a 	bl	801358c <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <main+0x1ae>
        failureMode(3);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f7ff fb44 	bl	8001f72 <failureMode>

    actLed1State(ON);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff fbba 	bl	8002064 <actLed1State>
    actLed0State(OFF);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7ff fb8b 	bl	800200c <actLed0State>
    for (i = 0; i < 10; i++) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028fc:	e018      	b.n	8002930 <main+0x1f4>
        actLed1Toggle();
 80028fe:	f7ff fbc7 	bl	8002090 <actLed1Toggle>
        actLed0Toggle();
 8002902:	f7ff fb99 	bl	8002038 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 8002906:	2019      	movs	r0, #25
 8002908:	f012 f8f2 	bl	8014af0 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 800290c:	2101      	movs	r1, #1
 800290e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002912:	f7ff fbd3 	bl	80020bc <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 8002916:	2019      	movs	r0, #25
 8002918:	f012 f8ea 	bl	8014af0 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 800291c:	2100      	movs	r1, #0
 800291e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002922:	f7ff fbcb 	bl	80020bc <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292a:	3301      	adds	r3, #1
 800292c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002934:	2b09      	cmp	r3, #9
 8002936:	d9e2      	bls.n	80028fe <main+0x1c2>
    }
    actLed0State(OFF);
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff fb67 	bl	800200c <actLed0State>
    actLed1State(OFF);
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff fb90 	bl	8002064 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002944:	f006 ff48 	bl	80097d8 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 8002948:	f008 fa26 	bl	800ad98 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <main+0x370>)
 800294e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002952:	461a      	mov	r2, r3
 8002954:	495b      	ldr	r1, [pc, #364]	; (8002ac4 <main+0x388>)
 8002956:	2002      	movs	r0, #2
 8002958:	f010 fe18 	bl	801358c <pifLog_Printf>
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <main+0x370>)
 800295e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002962:	2200      	movs	r2, #0
 8002964:	4619      	mov	r1, r3
 8002966:	2001      	movs	r0, #1
 8002968:	f00c fd40 	bl	800f3ec <serialInit>

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <main+0x370>)
 800296e:	795b      	ldrb	r3, [r3, #5]
 8002970:	2b0e      	cmp	r3, #14
 8002972:	d007      	beq.n	8002984 <main+0x248>
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <main+0x370>)
 8002976:	795b      	ldrb	r3, [r3, #5]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d003      	beq.n	8002984 <main+0x248>
 800297c:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <main+0x370>)
 800297e:	795b      	ldrb	r3, [r3, #5]
 8002980:	2b18      	cmp	r3, #24
 8002982:	d102      	bne.n	800298a <main+0x24e>
        pwm_params.airplane = true;
 8002984:	2301      	movs	r3, #1
 8002986:	72bb      	strb	r3, [r7, #10]
 8002988:	e001      	b.n	800298e <main+0x252>
    else
        pwm_params.airplane = false;
 800298a:	2300      	movs	r3, #0
 800298c:	72bb      	strb	r3, [r7, #10]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800298e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002992:	f004 fb27 	bl	8006fe4 <feature>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <main+0x26c>
 800299c:	2008      	movs	r0, #8
 800299e:	f004 fb21 	bl	8006fe4 <feature>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <main+0x270>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <main+0x272>
 80029ac:	2300      	movs	r3, #0
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	71bb      	strb	r3, [r7, #6]
    pwm_params.useSoftSerial = false;
 80029b6:	2300      	movs	r3, #0
 80029b8:	71fb      	strb	r3, [r7, #7]
    pwm_params.usePPM = feature(FEATURE_PPM);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f004 fb12 	bl	8006fe4 <feature>
 80029c0:	4603      	mov	r3, r0
 80029c2:	717b      	strb	r3, [r7, #5]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80029c4:	2008      	movs	r0, #8
 80029c6:	f004 fb0d 	bl	8006fe4 <feature>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	713b      	strb	r3, [r7, #4]
    pwm_params.useServos = core.useServo;
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <main+0x38c>)
 80029e6:	7d5b      	ldrb	r3, [r3, #21]
 80029e8:	723b      	strb	r3, [r7, #8]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <main+0x390>)
 80029ec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	727b      	strb	r3, [r7, #9]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <main+0x370>)
 8002a02:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002a06:	81fb      	strh	r3, [r7, #14]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <main+0x370>)
 8002a0a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002a0e:	823b      	strh	r3, [r7, #16]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <main+0x370>)
 8002a12:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002a16:	72fb      	strb	r3, [r7, #11]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1c:	827b      	strh	r3, [r7, #18]
    if (feature(FEATURE_3D))
 8002a1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a22:	f004 fadf 	bl	8006fe4 <feature>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <main+0x2f8>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <main+0x370>)
 8002a2e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002a32:	827b      	strh	r3, [r7, #18]
    if (pwm_params.motorPwmRate > 500)
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a3a:	d901      	bls.n	8002a40 <main+0x304>
        pwm_params.idlePulse = 0; // brushed motors
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	827b      	strh	r3, [r7, #18]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002a40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002a44:	f004 face 	bl	8006fe4 <feature>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	763b      	strb	r3, [r7, #24]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002a4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a50:	f004 fac8 	bl	8006fe4 <feature>
 8002a54:	4603      	mov	r3, r0
 8002a56:	767b      	strb	r3, [r7, #25]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <main+0x370>)
 8002a5a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002a5e:	82bb      	strh	r3, [r7, #20]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <main+0x390>)
 8002a62:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002a66:	82fb      	strh	r3, [r7, #22]
    switch (mcfg.power_adc_channel) {
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <main+0x370>)
 8002a6a:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d02e      	beq.n	8002ad0 <main+0x394>
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d02f      	beq.n	8002ad6 <main+0x39a>
 8002a76:	e031      	b.n	8002adc <main+0x3a0>
 8002a78:	200017e8 	.word	0x200017e8
 8002a7c:	080026bd 	.word	0x080026bd
 8002a80:	20001404 	.word	0x20001404
 8002a84:	080026e5 	.word	0x080026e5
 8002a88:	20001408 	.word	0x20001408
 8002a8c:	08002711 	.word	0x08002711
 8002a90:	20002068 	.word	0x20002068
 8002a94:	0802499c 	.word	0x0802499c
 8002a98:	2000217c 	.word	0x2000217c
 8002a9c:	080026d5 	.word	0x080026d5
 8002aa0:	20002120 	.word	0x20002120
 8002aa4:	08001959 	.word	0x08001959
 8002aa8:	080019d5 	.word	0x080019d5
 8002aac:	200019c8 	.word	0x200019c8
 8002ab0:	20000798 	.word	0x20000798
 8002ab4:	2000079c 	.word	0x2000079c
 8002ab8:	200007a0 	.word	0x200007a0
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	080249b4 	.word	0x080249b4
 8002ac4:	080249c8 	.word	0x080249c8
 8002ac8:	20001640 	.word	0x20001640
 8002acc:	20001890 	.word	0x20001890
        case 1:
            pwm_params.adcChannel = PWM2;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	733b      	strb	r3, [r7, #12]
            break;
 8002ad4:	e005      	b.n	8002ae2 <main+0x3a6>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	733b      	strb	r3, [r7, #12]
            break;
 8002ada:	e002      	b.n	8002ae2 <main+0x3a6>
        default:
            pwm_params.adcChannel = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	733b      	strb	r3, [r7, #12]
            break;
 8002ae0:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f8bb 	bl	8001c60 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002aea:	7eba      	ldrb	r2, [r7, #26]
 8002aec:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <main+0x5e4>)
 8002aee:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002af6:	e00b      	b.n	8002b10 <main+0x3d4>
        rcData[i] = 1502;
 8002af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002afc:	4a89      	ldr	r2, [pc, #548]	; (8002d24 <main+0x5e8>)
 8002afe:	f240 51de 	movw	r1, #1502	; 0x5de
 8002b02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b14:	2b11      	cmp	r3, #17
 8002b16:	d9ef      	bls.n	8002af8 <main+0x3bc>
    rcReadRawFunc = pwmReadRawRC;
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <main+0x5ec>)
 8002b1a:	4a84      	ldr	r2, [pc, #528]	; (8002d2c <main+0x5f0>)
 8002b1c:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002b1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b22:	f004 fa5f 	bl	8006fe4 <feature>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <main+0x400>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002b2c:	4b80      	ldr	r3, [pc, #512]	; (8002d30 <main+0x5f4>)
 8002b2e:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4619      	mov	r1, r3
 8002b36:	2003      	movs	r0, #3
 8002b38:	f005 f9ae 	bl	8007e98 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002b3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b40:	f004 fa50 	bl	8006fe4 <feature>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <main+0x416>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4879      	ldr	r0, [pc, #484]	; (8002d34 <main+0x5f8>)
 8002b4e:	f00c fa8f 	bl	800f070 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002b52:	4b77      	ldr	r3, [pc, #476]	; (8002d30 <main+0x5f4>)
 8002b54:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002b58:	3b04      	subs	r3, #4
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f8be 	bl	8003ce0 <constrain>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <main+0x5e4>)
 8002b6a:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    previousTime = (*pif_act_timer1us)();
 8002b6c:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <main+0x5fc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4798      	blx	r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <main+0x600>)
 8002b76:	6013      	str	r3, [r2, #0]
    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <main+0x5f4>)
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d103      	bne.n	8002b88 <main+0x44c>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002b80:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <main+0x604>)
 8002b82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b86:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002b88:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <main+0x608>)
 8002b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b8e:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002b90:	4b6d      	ldr	r3, [pc, #436]	; (8002d48 <main+0x60c>)
 8002b92:	22c8      	movs	r2, #200	; 0xc8
 8002b94:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <main+0x610>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	735a      	strb	r2, [r3, #13]

    if (!pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE)) FAIL;         								// 1ms
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4a6b      	ldr	r2, [pc, #428]	; (8002d50 <main+0x614>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f011 fe4a 	bl	8014840 <pifTaskManager_Add>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <main+0x47e>
 8002bb2:	f240 1369 	movw	r3, #361	; 0x169
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	e0a1      	b.n	8002cfe <main+0x5c2>

    if (mcfg.looptime) {
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <main+0x5f4>)
 8002bbc:	899b      	ldrh	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <main+0x4a0>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <main+0x5f4>)
 8002bc4:	8999      	ldrh	r1, [r3, #12]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	4a61      	ldr	r2, [pc, #388]	; (8002d54 <main+0x618>)
 8002bce:	2003      	movs	r0, #3
 8002bd0:	f011 fe36 	bl	8014840 <pifTaskManager_Add>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <main+0x61c>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00a      	b.n	8002bf2 <main+0x4b6>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_RATIO, 100, taskComputeImu, NULL, TRUE);	       	 			// 100%
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	4a5c      	ldr	r2, [pc, #368]	; (8002d54 <main+0x618>)
 8002be4:	2164      	movs	r1, #100	; 0x64
 8002be6:	2000      	movs	r0, #0
 8002be8:	f011 fe2a 	bl	8014840 <pifTaskManager_Add>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4a5a      	ldr	r2, [pc, #360]	; (8002d58 <main+0x61c>)
 8002bf0:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002bf2:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <main+0x61c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <main+0x4c6>
 8002bfa:	f240 1371 	movw	r3, #369	; 0x171
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	e07d      	b.n	8002cfe <main+0x5c2>
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c02:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <main+0x61c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	709a      	strb	r2, [r3, #2]

    g_task_compute_rc = pifTaskManager_Add(TM_PERIOD_MS, 20, taskComputeRc, NULL, TRUE);							// 20ms - 50Hz
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <main+0x620>)
 8002c12:	2114      	movs	r1, #20
 8002c14:	2002      	movs	r0, #2
 8002c16:	f011 fe13 	bl	8014840 <pifTaskManager_Add>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <main+0x624>)
 8002c1e:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002c20:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <main+0x624>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <main+0x4f4>
 8002c28:	f240 1375 	movw	r3, #373	; 0x175
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	e066      	b.n	8002cfe <main+0x5c2>

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002c30:	2008      	movs	r0, #8
 8002c32:	f004 f98f 	bl	8006f54 <sensors>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <main+0x52e>
        sensor_set.mag.p_m_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <main+0x628>)
 8002c44:	2164      	movs	r1, #100	; 0x64
 8002c46:	2002      	movs	r0, #2
 8002c48:	f011 fdfa 	bl	8014840 <pifTaskManager_Add>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <main+0x62c>)
 8002c50:	6553      	str	r3, [r2, #84]	; 0x54
        if (!sensor_set.mag.p_m_task) FAIL;
 8002c52:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <main+0x62c>)
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <main+0x526>
 8002c5a:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	e04d      	b.n	8002cfe <main+0x5c2>
        sensor_set.mag.p_m_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <main+0x62c>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	2201      	movs	r2, #1
 8002c68:	709a      	strb	r2, [r3, #2]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002c6a:	2004      	movs	r0, #4
 8002c6c:	f004 f972 	bl	8006f54 <sensors>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <main+0x560>
        sensor_set.baro.p_b_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskGetEstimatedAltitude, NULL, FALSE);// Use immediate
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <main+0x630>)
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	2002      	movs	r0, #2
 8002c82:	f011 fddd 	bl	8014840 <pifTaskManager_Add>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <main+0x62c>)
 8002c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (!sensor_set.baro.p_b_task) FAIL;
 8002c8c:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <main+0x62c>)
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <main+0x560>
 8002c94:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	e030      	b.n	8002cfe <main+0x5c2>
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_PERIOD_MS, 100, taskGpsNewData, NULL, FALSE);                			// Use immediate
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <main+0x634>)
 8002ca4:	2164      	movs	r1, #100	; 0x64
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f011 fdca 	bl	8014840 <pifTaskManager_Add>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <main+0x638>)
 8002cb0:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <main+0x638>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <main+0x586>
 8002cba:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	e01d      	b.n	8002cfe <main+0x5c2>
#endif

    if (!pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE)) FAIL;									// 50ms
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <main+0x63c>)
 8002cca:	2132      	movs	r1, #50	; 0x32
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f011 fdb7 	bl	8014840 <pifTaskManager_Add>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <main+0x5a4>
 8002cd8:	f240 138b 	movw	r3, #395	; 0x18b
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	e00e      	b.n	8002cfe <main+0x5c2>

#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002ce0:	f011 fe1a 	bl	8014918 <pifTaskManager_Count>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	4825      	ldr	r0, [pc, #148]	; (8002d7c <main+0x640>)
 8002ce8:	f012 f81f 	bl	8014d2a <pifTimerManager_Count>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4923      	ldr	r1, [pc, #140]	; (8002d80 <main+0x644>)
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f010 fc4a 	bl	801358c <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002cf8:	f011 fe18 	bl	801492c <pifTaskManager_Loop>
 8002cfc:	e7fc      	b.n	8002cf8 <main+0x5bc>
  }
  return 0;

fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <main+0x648>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	4920      	ldr	r1, [pc, #128]	; (8002d88 <main+0x64c>)
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f010 fc3f 	bl	801358c <pifLog_Printf>
	pifLog_SendAndExit();
 8002d0e:	f010 fd09 	bl	8013724 <pifLog_SendAndExit>
#endif
  return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	372c      	adds	r7, #44	; 0x2c
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20001640 	.word	0x20001640
 8002d24:	20002184 	.word	0x20002184
 8002d28:	20000e88 	.word	0x20000e88
 8002d2c:	0800c859 	.word	0x0800c859
 8002d30:	200019c8 	.word	0x200019c8
 8002d34:	080018f9 	.word	0x080018f9
 8002d38:	2000137c 	.word	0x2000137c
 8002d3c:	20000e7c 	.word	0x20000e7c
 8002d40:	20000fbe 	.word	0x20000fbe
 8002d44:	20000fc2 	.word	0x20000fc2
 8002d48:	20000fc0 	.word	0x20000fc0
 8002d4c:	20002014 	.word	0x20002014
 8002d50:	0800dc3d 	.word	0x0800dc3d
 8002d54:	0800dca5 	.word	0x0800dca5
 8002d58:	200021ac 	.word	0x200021ac
 8002d5c:	0800d081 	.word	0x0800d081
 8002d60:	200021d8 	.word	0x200021d8
 8002d64:	0800ede5 	.word	0x0800ede5
 8002d68:	20000fcc 	.word	0x20000fcc
 8002d6c:	0800a619 	.word	0x0800a619
 8002d70:	080087dd 	.word	0x080087dd
 8002d74:	200021dc 	.word	0x200021dc
 8002d78:	0800c5a9 	.word	0x0800c5a9
 8002d7c:	20002068 	.word	0x20002068
 8002d80:	080249d4 	.word	0x080249d4
 8002d84:	20001365 	.word	0x20001365
 8002d88:	080249ec 	.word	0x080249ec

08002d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b094      	sub	sp, #80	; 0x50
 8002d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d92:	f107 0320 	add.w	r3, r7, #32
 8002d96:	2230      	movs	r2, #48	; 0x30
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f01e feac 	bl	8021af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <SystemClock_Config+0xcc>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <SystemClock_Config+0xcc>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <SystemClock_Config+0xcc>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <SystemClock_Config+0xd0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <SystemClock_Config+0xd0>)
 8002dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <SystemClock_Config+0xd0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002de8:	2302      	movs	r3, #2
 8002dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002df0:	230d      	movs	r3, #13
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df4:	2302      	movs	r3, #2
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e06:	2304      	movs	r3, #4
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e0e:	f107 0320 	add.w	r3, r7, #32
 8002e12:	4618      	mov	r0, r3
 8002e14:	f01c f870 	bl	801eef8 <HAL_RCC_OscConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e1e:	f000 fb31 	bl	8003484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e22:	230f      	movs	r3, #15
 8002e24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e26:	2302      	movs	r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f01c fad2 	bl	801f3e8 <HAL_RCC_ClockConfig>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e4a:	f000 fb1b 	bl	8003484 <Error_Handler>
  }
}
 8002e4e:	bf00      	nop
 8002e50:	3750      	adds	r7, #80	; 0x50
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000

08002e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e66:	463b      	mov	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e74:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <MX_ADC1_Init+0xf0>)
 8002e76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <MX_ADC1_Init+0xf4>)
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002eae:	2204      	movs	r2, #4
 8002eb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ec0:	4822      	ldr	r0, [pc, #136]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002ec2:	f017 fcf9 	bl	801a8b8 <HAL_ADC_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ecc:	f000 fada 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ed0:	2306      	movs	r3, #6
 8002ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002edc:	463b      	mov	r3, r7
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481a      	ldr	r0, [pc, #104]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002ee2:	f017 fe3b 	bl	801ab5c <HAL_ADC_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002eec:	f000 faca 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef8:	463b      	mov	r3, r7
 8002efa:	4619      	mov	r1, r3
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002efe:	f017 fe2d 	bl	801ab5c <HAL_ADC_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002f08:	f000 fabc 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f10:	2303      	movs	r3, #3
 8002f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002f1a:	f017 fe1f 	bl	801ab5c <HAL_ADC_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f24:	f000 faae 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f28:	230c      	movs	r3, #12
 8002f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_ADC1_Init+0xec>)
 8002f36:	f017 fe11 	bl	801ab5c <HAL_ADC_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002f40:	f000 faa0 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20001658 	.word	0x20001658
 8002f50:	40012000 	.word	0x40012000
 8002f54:	0f000001 	.word	0x0f000001

08002f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <MX_I2C1_Init+0x54>)
 8002f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_I2C1_Init+0x58>)
 8002f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f96:	f019 f88b 	bl	801c0b0 <HAL_I2C_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fa0:	f000 fa70 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200015a4 	.word	0x200015a4
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	00061a80 	.word	0x00061a80

08002fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MX_TIM2_Init+0x94>)
 8002fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <MX_TIM2_Init+0x94>)
 8002fda:	2253      	movs	r2, #83	; 0x53
 8002fdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_TIM2_Init+0x94>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <MX_TIM2_Init+0x94>)
 8002fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <MX_TIM2_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_TIM2_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ff8:	4813      	ldr	r0, [pc, #76]	; (8003048 <MX_TIM2_Init+0x94>)
 8002ffa:	f01c fbf1 	bl	801f7e0 <HAL_TIM_Base_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003004:	f000 fa3e 	bl	8003484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4619      	mov	r1, r3
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <MX_TIM2_Init+0x94>)
 8003016:	f01d f81f 	bl	8020058 <HAL_TIM_ConfigClockSource>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003020:	f000 fa30 	bl	8003484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_TIM2_Init+0x94>)
 8003032:	f01d fbd7 	bl	80207e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800303c:	f000 fa22 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200017e8 	.word	0x200017e8

0800304c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08e      	sub	sp, #56	; 0x38
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	f107 0320 	add.w	r3, r7, #32
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
 8003078:	615a      	str	r2, [r3, #20]
 800307a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <MX_TIM3_Init+0x134>)
 800307e:	4a41      	ldr	r2, [pc, #260]	; (8003184 <MX_TIM3_Init+0x138>)
 8003080:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <MX_TIM3_Init+0x134>)
 8003084:	2253      	movs	r2, #83	; 0x53
 8003086:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <MX_TIM3_Init+0x134>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <MX_TIM3_Init+0x134>)
 8003090:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003094:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <MX_TIM3_Init+0x134>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <MX_TIM3_Init+0x134>)
 800309e:	2200      	movs	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030a2:	4837      	ldr	r0, [pc, #220]	; (8003180 <MX_TIM3_Init+0x134>)
 80030a4:	f01c fb9c 	bl	801f7e0 <HAL_TIM_Base_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030ae:	f000 f9e9 	bl	8003484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030bc:	4619      	mov	r1, r3
 80030be:	4830      	ldr	r0, [pc, #192]	; (8003180 <MX_TIM3_Init+0x134>)
 80030c0:	f01c ffca 	bl	8020058 <HAL_TIM_ConfigClockSource>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030ca:	f000 f9db 	bl	8003484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030ce:	482c      	ldr	r0, [pc, #176]	; (8003180 <MX_TIM3_Init+0x134>)
 80030d0:	f01c fbd5 	bl	801f87e <HAL_TIM_PWM_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030da:	f000 f9d3 	bl	8003484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030e6:	f107 0320 	add.w	r3, r7, #32
 80030ea:	4619      	mov	r1, r3
 80030ec:	4824      	ldr	r0, [pc, #144]	; (8003180 <MX_TIM3_Init+0x134>)
 80030ee:	f01d fb79 	bl	80207e4 <HAL_TIMEx_MasterConfigSynchronization>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030f8:	f000 f9c4 	bl	8003484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030fc:	2360      	movs	r3, #96	; 0x60
 80030fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003104:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	2200      	movs	r2, #0
 8003112:	4619      	mov	r1, r3
 8003114:	481a      	ldr	r0, [pc, #104]	; (8003180 <MX_TIM3_Init+0x134>)
 8003116:	f01c fedd 	bl	801fed4 <HAL_TIM_PWM_ConfigChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003120:	f000 f9b0 	bl	8003484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2204      	movs	r2, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4815      	ldr	r0, [pc, #84]	; (8003180 <MX_TIM3_Init+0x134>)
 800312c:	f01c fed2 	bl	801fed4 <HAL_TIM_PWM_ConfigChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003136:	f000 f9a5 	bl	8003484 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2208      	movs	r2, #8
 8003142:	4619      	mov	r1, r3
 8003144:	480e      	ldr	r0, [pc, #56]	; (8003180 <MX_TIM3_Init+0x134>)
 8003146:	f01c fec5 	bl	801fed4 <HAL_TIM_PWM_ConfigChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003150:	f000 f998 	bl	8003484 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8003154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	220c      	movs	r2, #12
 800315e:	4619      	mov	r1, r3
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <MX_TIM3_Init+0x134>)
 8003162:	f01c feb7 	bl	801fed4 <HAL_TIM_PWM_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 800316c:	f000 f98a 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003170:	4803      	ldr	r0, [pc, #12]	; (8003180 <MX_TIM3_Init+0x134>)
 8003172:	f000 fb5d 	bl	8003830 <HAL_TIM_MspPostInit>

}
 8003176:	bf00      	nop
 8003178:	3738      	adds	r7, #56	; 0x38
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200015f8 	.word	0x200015f8
 8003184:	40000400 	.word	0x40000400

08003188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <MX_USART1_UART_Init+0x50>)
 8003190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 8003194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031ae:	220c      	movs	r2, #12
 80031b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031c0:	f01d fb92 	bl	80208e8 <HAL_UART_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031ca:	f000 f95b 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200016a0 	.word	0x200016a0
 80031d8:	40011000 	.word	0x40011000

080031dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 80031e2:	4a12      	ldr	r2, [pc, #72]	; (800322c <MX_USART2_UART_Init+0x50>)
 80031e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 80031e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 8003202:	220c      	movs	r2, #12
 8003204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003212:	4805      	ldr	r0, [pc, #20]	; (8003228 <MX_USART2_UART_Init+0x4c>)
 8003214:	f01d fb68 	bl	80208e8 <HAL_UART_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800321e:	f000 f931 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20001830 	.word	0x20001830
 800322c:	40004400 	.word	0x40004400

08003230 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <MX_USART6_UART_Init+0x50>)
 8003238:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <MX_USART6_UART_Init+0x4c>)
 800323c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003240:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <MX_USART6_UART_Init+0x4c>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003256:	220c      	movs	r2, #12
 8003258:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <MX_USART6_UART_Init+0x4c>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <MX_USART6_UART_Init+0x4c>)
 8003268:	f01d fb3e 	bl	80208e8 <HAL_UART_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003272:	f000 f907 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200017a4 	.word	0x200017a4
 8003280:	40011400 	.word	0x40011400

08003284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <MX_DMA_Init+0x78>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <MX_DMA_Init+0x78>)
 8003294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <MX_DMA_Init+0x78>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_DMA_Init+0x78>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <MX_DMA_Init+0x78>)
 80032b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <MX_DMA_Init+0x78>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	200b      	movs	r0, #11
 80032c8:	f017 fff7 	bl	801b2ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80032cc:	200b      	movs	r0, #11
 80032ce:	f018 f810 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	200c      	movs	r0, #12
 80032d8:	f017 ffef 	bl	801b2ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80032dc:	200c      	movs	r0, #12
 80032de:	f018 f808 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	2038      	movs	r0, #56	; 0x38
 80032e8:	f017 ffe7 	bl	801b2ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032ec:	2038      	movs	r0, #56	; 0x38
 80032ee:	f018 f800 	bl	801b2f2 <HAL_NVIC_EnableIRQ>

}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <MX_GPIO_Init+0x174>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <MX_GPIO_Init+0x174>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <MX_GPIO_Init+0x174>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <MX_GPIO_Init+0x174>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <MX_GPIO_Init+0x174>)
 800333c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <MX_GPIO_Init+0x174>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b48      	ldr	r3, [pc, #288]	; (8003474 <MX_GPIO_Init+0x174>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a47      	ldr	r2, [pc, #284]	; (8003474 <MX_GPIO_Init+0x174>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b45      	ldr	r3, [pc, #276]	; (8003474 <MX_GPIO_Init+0x174>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <MX_GPIO_Init+0x174>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a40      	ldr	r2, [pc, #256]	; (8003474 <MX_GPIO_Init+0x174>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <MX_GPIO_Init+0x174>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003386:	2200      	movs	r2, #0
 8003388:	2131      	movs	r1, #49	; 0x31
 800338a:	483b      	ldr	r0, [pc, #236]	; (8003478 <MX_GPIO_Init+0x178>)
 800338c:	f018 fe5e 	bl	801c04c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003390:	2200      	movs	r2, #0
 8003392:	2120      	movs	r1, #32
 8003394:	4839      	ldr	r0, [pc, #228]	; (800347c <MX_GPIO_Init+0x17c>)
 8003396:	f018 fe59 	bl	801c04c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800339a:	2200      	movs	r2, #0
 800339c:	2104      	movs	r1, #4
 800339e:	4838      	ldr	r0, [pc, #224]	; (8003480 <MX_GPIO_Init+0x180>)
 80033a0:	f018 fe54 	bl	801c04c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4619      	mov	r1, r3
 80033ba:	482f      	ldr	r0, [pc, #188]	; (8003478 <MX_GPIO_Init+0x178>)
 80033bc:	f018 fbde 	bl	801bb7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 80033c0:	2331      	movs	r3, #49	; 0x31
 80033c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c4:	2301      	movs	r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4619      	mov	r1, r3
 80033d6:	4828      	ldr	r0, [pc, #160]	; (8003478 <MX_GPIO_Init+0x178>)
 80033d8:	f018 fbd0 	bl	801bb7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 80033dc:	2302      	movs	r3, #2
 80033de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80033e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	4821      	ldr	r0, [pc, #132]	; (8003478 <MX_GPIO_Init+0x178>)
 80033f2:	f018 fbc3 	bl	801bb7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033f6:	2320      	movs	r3, #32
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	481b      	ldr	r0, [pc, #108]	; (800347c <MX_GPIO_Init+0x17c>)
 800340e:	f018 fbb5 	bl	801bb7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003412:	2304      	movs	r3, #4
 8003414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4815      	ldr	r0, [pc, #84]	; (8003480 <MX_GPIO_Init+0x180>)
 800342a:	f018 fba7 	bl	801bb7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 800342e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003434:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_GPIO_Init+0x178>)
 8003446:	f018 fb99 	bl	801bb7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2007      	movs	r0, #7
 8003450:	f017 ff33 	bl	801b2ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003454:	2007      	movs	r0, #7
 8003456:	f017 ff4c 	bl	801b2f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	2028      	movs	r0, #40	; 0x28
 8003460:	f017 ff2b 	bl	801b2ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003464:	2028      	movs	r0, #40	; 0x28
 8003466:	f017 ff44 	bl	801b2f2 <HAL_NVIC_EnableIRQ>

}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40020800 	.word	0x40020800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400

08003484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003488:	b672      	cpsid	i
}
 800348a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800348c:	e7fe      	b.n	800348c <Error_Handler+0x8>
	...

08003490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_MspInit+0x4c>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <HAL_MspInit+0x4c>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_MspInit+0x4c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_MspInit+0x4c>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_MspInit+0x4c>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_MspInit+0x4c>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034ce:	2007      	movs	r0, #7
 80034d0:	f017 fee8 	bl	801b2a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_ADC_MspInit+0x144>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 808c 	bne.w	800361c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	6453      	str	r3, [r2, #68]	; 0x44
 8003514:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a38      	ldr	r2, [pc, #224]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b36      	ldr	r3, [pc, #216]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_ADC_MspInit+0x148>)
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6313      	str	r3, [r2, #48]	; 0x30
 8003568:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <HAL_ADC_MspInit+0x148>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 8003574:	2304      	movs	r3, #4
 8003576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003578:	2303      	movs	r3, #3
 800357a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	4619      	mov	r1, r3
 8003586:	4829      	ldr	r0, [pc, #164]	; (800362c <HAL_ADC_MspInit+0x14c>)
 8003588:	f018 faf8 	bl	801bb7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 800358c:	23c0      	movs	r3, #192	; 0xc0
 800358e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003590:	2303      	movs	r3, #3
 8003592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4824      	ldr	r0, [pc, #144]	; (8003630 <HAL_ADC_MspInit+0x150>)
 80035a0:	f018 faec 	bl	801bb7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 80035a4:	2302      	movs	r3, #2
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a8:	2303      	movs	r3, #3
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	481f      	ldr	r0, [pc, #124]	; (8003634 <HAL_ADC_MspInit+0x154>)
 80035b8:	f018 fae0 	bl	801bb7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035be:	4a1f      	ldr	r2, [pc, #124]	; (800363c <HAL_ADC_MspInit+0x15c>)
 80035c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_ADC_MspInit+0x158>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <HAL_ADC_MspInit+0x158>)
 8003602:	f017 fe9f 	bl	801b344 <HAL_DMA_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800360c:	f7ff ff3a 	bl	8003484 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_ADC_MspInit+0x158>)
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <HAL_ADC_MspInit+0x158>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800361c:	bf00      	nop
 800361e:	3730      	adds	r7, #48	; 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012000 	.word	0x40012000
 8003628:	40023800 	.word	0x40023800
 800362c:	40020800 	.word	0x40020800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400
 8003638:	200016e4 	.word	0x200016e4
 800363c:	40026410 	.word	0x40026410

08003640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a4f      	ldr	r2, [pc, #316]	; (800379c <HAL_I2C_MspInit+0x15c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f040 8097 	bne.w	8003792 <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	4a4c      	ldr	r2, [pc, #304]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	6313      	str	r3, [r2, #48]	; 0x30
 8003674:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003680:	23c0      	movs	r3, #192	; 0xc0
 8003682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003684:	2312      	movs	r3, #18
 8003686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003690:	2304      	movs	r3, #4
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4619      	mov	r1, r3
 800369a:	4842      	ldr	r0, [pc, #264]	; (80037a4 <HAL_I2C_MspInit+0x164>)
 800369c:	f018 fa6e 	bl	801bb7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4a3d      	ldr	r2, [pc, #244]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 80036aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_I2C_MspInit+0x160>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036be:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <HAL_I2C_MspInit+0x16c>)
 80036c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80036fc:	482a      	ldr	r0, [pc, #168]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 80036fe:	f017 fe21 	bl	801b344 <HAL_DMA_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003708:	f7ff febc 	bl	8003484 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_I2C_MspInit+0x168>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800371a:	4a26      	ldr	r2, [pc, #152]	; (80037b4 <HAL_I2C_MspInit+0x174>)
 800371c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003736:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800373a:	2200      	movs	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003746:	2200      	movs	r2, #0
 8003748:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800374c:	2200      	movs	r2, #0
 800374e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003752:	2200      	movs	r2, #0
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003756:	4816      	ldr	r0, [pc, #88]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 8003758:	f017 fdf4 	bl	801b344 <HAL_DMA_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8003762:	f7ff fe8f 	bl	8003484 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
 800376c:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_I2C_MspInit+0x170>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	201f      	movs	r0, #31
 8003778:	f017 fd9f 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800377c:	201f      	movs	r0, #31
 800377e:	f017 fdb8 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	2020      	movs	r0, #32
 8003788:	f017 fd97 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800378c:	2020      	movs	r0, #32
 800378e:	f017 fdb0 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40005400 	.word	0x40005400
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020400 	.word	0x40020400
 80037a8:	20001744 	.word	0x20001744
 80037ac:	40026010 	.word	0x40026010
 80037b0:	20001544 	.word	0x20001544
 80037b4:	40026028 	.word	0x40026028

080037b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037e6:	e01a      	b.n	800381e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d115      	bne.n	800381e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	201d      	movs	r0, #29
 8003814:	f017 fd51 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003818:	201d      	movs	r0, #29
 800381a:	f017 fd6a 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40000400 	.word	0x40000400

08003830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <HAL_TIM_MspPostInit+0xa4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d13c      	bne.n	80038cc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_TIM_MspPostInit+0xa8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800388a:	2301      	movs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800389a:	2302      	movs	r3, #2
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	480d      	ldr	r0, [pc, #52]	; (80038dc <HAL_TIM_MspPostInit+0xac>)
 80038a6:	f018 f969 	bl	801bb7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80038aa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80038ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038bc:	2302      	movs	r3, #2
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	4806      	ldr	r0, [pc, #24]	; (80038e0 <HAL_TIM_MspPostInit+0xb0>)
 80038c8:	f018 f958 	bl	801bb7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038cc:	bf00      	nop
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800

080038e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08e      	sub	sp, #56	; 0x38
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_UART_MspInit+0x180>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d135      	bne.n	8003972 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <HAL_UART_MspInit+0x184>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003910:	f043 0310 	orr.w	r3, r3, #16
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <HAL_UART_MspInit+0x184>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800393e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003950:	2307      	movs	r3, #7
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003958:	4619      	mov	r1, r3
 800395a:	4844      	ldr	r0, [pc, #272]	; (8003a6c <HAL_UART_MspInit+0x188>)
 800395c:	f018 f90e 	bl	801bb7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	2100      	movs	r1, #0
 8003964:	2025      	movs	r0, #37	; 0x25
 8003966:	f017 fca8 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800396a:	2025      	movs	r0, #37	; 0x25
 800396c:	f017 fcc1 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003970:	e073      	b.n	8003a5a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <HAL_UART_MspInit+0x18c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d134      	bne.n	80039e6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_UART_MspInit+0x184>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_UART_MspInit+0x184>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_UART_MspInit+0x184>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6313      	str	r3, [r2, #48]	; 0x30
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_UART_MspInit+0x184>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039b4:	230c      	movs	r3, #12
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039c4:	2307      	movs	r3, #7
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039cc:	4619      	mov	r1, r3
 80039ce:	4827      	ldr	r0, [pc, #156]	; (8003a6c <HAL_UART_MspInit+0x188>)
 80039d0:	f018 f8d4 	bl	801bb7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2026      	movs	r0, #38	; 0x26
 80039da:	f017 fc6e 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039de:	2026      	movs	r0, #38	; 0x26
 80039e0:	f017 fc87 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
}
 80039e4:	e039      	b.n	8003a5a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <HAL_UART_MspInit+0x190>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d134      	bne.n	8003a5a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_UART_MspInit+0x184>)
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_UART_MspInit+0x184>)
 80039fa:	f043 0320 	orr.w	r3, r3, #32
 80039fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_UART_MspInit+0x184>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a36:	2303      	movs	r3, #3
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a42:	4619      	mov	r1, r3
 8003a44:	4809      	ldr	r0, [pc, #36]	; (8003a6c <HAL_UART_MspInit+0x188>)
 8003a46:	f018 f899 	bl	801bb7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2047      	movs	r0, #71	; 0x47
 8003a50:	f017 fc33 	bl	801b2ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a54:	2047      	movs	r0, #71	; 0x47
 8003a56:	f017 fc4c 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3738      	adds	r7, #56	; 0x38
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40011000 	.word	0x40011000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40011400 	.word	0x40011400

08003a78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_UART_MspDeInit+0x84>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10e      	bne.n	8003aa8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003a96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a9a:	481a      	ldr	r0, [pc, #104]	; (8003b04 <HAL_UART_MspDeInit+0x8c>)
 8003a9c:	f018 f9f2 	bl	801be84 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003aa0:	2025      	movs	r0, #37	; 0x25
 8003aa2:	f017 fc34 	bl	801b30e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003aa6:	e025      	b.n	8003af4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <HAL_UART_MspDeInit+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10d      	bne.n	8003ace <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003abe:	210c      	movs	r1, #12
 8003ac0:	4810      	ldr	r0, [pc, #64]	; (8003b04 <HAL_UART_MspDeInit+0x8c>)
 8003ac2:	f018 f9df 	bl	801be84 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003ac6:	2026      	movs	r0, #38	; 0x26
 8003ac8:	f017 fc21 	bl	801b30e <HAL_NVIC_DisableIRQ>
}
 8003acc:	e012      	b.n	8003af4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_UART_MspDeInit+0x94>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10d      	bne.n	8003af4 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_UART_MspDeInit+0x88>)
 8003ade:	f023 0320 	bic.w	r3, r3, #32
 8003ae2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003ae4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <HAL_UART_MspDeInit+0x8c>)
 8003aea:	f018 f9cb 	bl	801be84 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003aee:	2047      	movs	r0, #71	; 0x47
 8003af0:	f017 fc0d 	bl	801b30e <HAL_NVIC_DisableIRQ>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40011000 	.word	0x40011000
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020000 	.word	0x40020000
 8003b08:	40004400 	.word	0x40004400
 8003b0c:	40011400 	.word	0x40011400

08003b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <NMI_Handler+0x4>

08003b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b1a:	e7fe      	b.n	8003b1a <HardFault_Handler+0x4>

08003b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b20:	e7fe      	b.n	8003b20 <MemManage_Handler+0x4>

08003b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b26:	e7fe      	b.n	8003b26 <BusFault_Handler+0x4>

08003b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <UsageFault_Handler+0x4>

08003b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003b5c:	f00d fbf6 	bl	801134c <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003b60:	4803      	ldr	r0, [pc, #12]	; (8003b70 <SysTick_Handler+0x18>)
 8003b62:	f011 f946 	bl	8014df2 <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b66:	f016 fe87 	bl	801a878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20002068 	.word	0x20002068

08003b74 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003b78:	2002      	movs	r0, #2
 8003b7a:	f018 fa81 	bl	801c080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <DMA1_Stream0_IRQHandler+0x10>)
 8003b8a:	f017 fd73 	bl	801b674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20001744 	.word	0x20001744

08003b98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <DMA1_Stream1_IRQHandler+0x10>)
 8003b9e:	f017 fd69 	bl	801b674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20001544 	.word	0x20001544

08003bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <TIM3_IRQHandler+0x10>)
 8003bb2:	f01c f887 	bl	801fcc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200015f8 	.word	0x200015f8

08003bc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <I2C1_EV_IRQHandler+0x10>)
 8003bc6:	f019 f90d 	bl	801cde4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200015a4 	.word	0x200015a4

08003bd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <I2C1_ER_IRQHandler+0x10>)
 8003bda:	f019 fa74 	bl	801d0c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200015a4 	.word	0x200015a4

08003be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <USART1_IRQHandler+0x10>)
 8003bee:	f01d f881 	bl	8020cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200016a0 	.word	0x200016a0

08003bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <USART2_IRQHandler+0x10>)
 8003c02:	f01d f877 	bl	8020cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20001830 	.word	0x20001830

08003c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003c14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c18:	f018 fa32 	bl	801c080 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c20:	f018 fa2e 	bl	801c080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <DMA2_Stream0_IRQHandler+0x10>)
 8003c2e:	f017 fd21 	bl	801b674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200016e4 	.word	0x200016e4

08003c3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <USART6_IRQHandler+0x10>)
 8003c42:	f01d f857 	bl	8020cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200017a4 	.word	0x200017a4

08003c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <_sbrk+0x5c>)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_sbrk+0x60>)
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_sbrk+0x64>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_sbrk+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c80:	f01d fef2 	bl	8021a68 <__errno>
 8003c84:	4603      	mov	r3, r0
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e009      	b.n	8003ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <_sbrk+0x64>)
 8003ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20020000 	.word	0x20020000
 8003cb0:	00000400 	.word	0x00000400
 8003cb4:	200007ac 	.word	0x200007ac
 8003cb8:	20002290 	.word	0x20002290

08003cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <SystemInit+0x20>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <SystemInit+0x20>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	da01      	bge.n	8003cf8 <constrain+0x18>
        return low;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	e006      	b.n	8003d06 <constrain+0x26>
    else if (amt > high)
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	dd01      	ble.n	8003d04 <constrain+0x24>
        return high;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	e000      	b.n	8003d06 <constrain+0x26>
    else
        return amt;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	0000      	movs	r0, r0
 8003d14:	0000      	movs	r0, r0
	...

08003d18 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003d1e:	4b8a      	ldr	r3, [pc, #552]	; (8003f48 <initBoardAlignment+0x230>)
 8003d20:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <initBoardAlignment+0x26>
 8003d28:	4b87      	ldr	r3, [pc, #540]	; (8003f48 <initBoardAlignment+0x230>)
 8003d2a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <initBoardAlignment+0x26>
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <initBoardAlignment+0x230>)
 8003d34:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80fd 	beq.w	8003f38 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003d3e:	4b83      	ldr	r3, [pc, #524]	; (8003f4c <initBoardAlignment+0x234>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003d44:	4b80      	ldr	r3, [pc, #512]	; (8003f48 <initBoardAlignment+0x230>)
 8003d46:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fba8 	bl	80004a0 <__aeabi_i2d>
 8003d50:	a37b      	add	r3, pc, #492	; (adr r3, 8003f40 <initBoardAlignment+0x228>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fc0d 	bl	8000574 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <initBoardAlignment+0x238>)
 8003d68:	f7fc fd2e 	bl	80007c8 <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fc fee0 	bl	8000b38 <__aeabi_d2f>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003d7c:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <initBoardAlignment+0x230>)
 8003d7e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fb8c 	bl	80004a0 <__aeabi_i2d>
 8003d88:	a36d      	add	r3, pc, #436	; (adr r3, 8003f40 <initBoardAlignment+0x228>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f7fc fbf1 	bl	8000574 <__aeabi_dmul>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <initBoardAlignment+0x238>)
 8003da0:	f7fc fd12 	bl	80007c8 <__aeabi_ddiv>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fc fec4 	bl	8000b38 <__aeabi_d2f>
 8003db0:	4603      	mov	r3, r0
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003db4:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <initBoardAlignment+0x230>)
 8003db6:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fb70 	bl	80004a0 <__aeabi_i2d>
 8003dc0:	a35f      	add	r3, pc, #380	; (adr r3, 8003f40 <initBoardAlignment+0x228>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fbd5 	bl	8000574 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <initBoardAlignment+0x238>)
 8003dd8:	f7fc fcf6 	bl	80007c8 <__aeabi_ddiv>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f7fc fea8 	bl	8000b38 <__aeabi_d2f>
 8003de8:	4603      	mov	r3, r0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003dec:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003df0:	f01e f922 	bl	8022038 <cosf>
 8003df4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003df8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003dfc:	f01e f99c 	bl	8022138 <sinf>
 8003e00:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003e04:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e08:	f01e f916 	bl	8022038 <cosf>
 8003e0c:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003e10:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e14:	f01e f990 	bl	8022138 <sinf>
 8003e18:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003e1c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e20:	f01e f90a 	bl	8022038 <cosf>
 8003e24:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003e28:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e2c:	f01e f984 	bl	8022138 <sinf>
 8003e30:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003e34:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e40:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003e44:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e48:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e50:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e60:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003e64:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e70:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003e74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003e84:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <initBoardAlignment+0x23c>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003e8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e8e:	eeb1 7a67 	vneg.f32	s14, s15
 8003e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <initBoardAlignment+0x23c>)
 8003e9c:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003ea0:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <initBoardAlignment+0x23c>)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003ea6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003eaa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <initBoardAlignment+0x23c>)
 8003ebc:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003ec0:	ed97 7a00 	vldr	s14, [r7]
 8003ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <initBoardAlignment+0x23c>)
 8003ed6:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003eda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ede:	eeb1 7a67 	vneg.f32	s14, s15
 8003ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <initBoardAlignment+0x23c>)
 8003eec:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003ef0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ef4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efc:	ed97 7a00 	vldr	s14, [r7]
 8003f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <initBoardAlignment+0x23c>)
 8003f06:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003f0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <initBoardAlignment+0x23c>)
 8003f20:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003f24:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <initBoardAlignment+0x23c>)
 8003f32:	edc3 7a08 	vstr	s15, [r3, #32]
 8003f36:	e000      	b.n	8003f3a <initBoardAlignment+0x222>
        return;
 8003f38:	bf00      	nop
}
 8003f3a:	3738      	adds	r7, #56	; 0x38
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	54442d18 	.word	0x54442d18
 8003f44:	400921fb 	.word	0x400921fb
 8003f48:	200019c8 	.word	0x200019c8
 8003f4c:	20000024 	.word	0x20000024
 8003f50:	40668000 	.word	0x40668000
 8003f54:	200007b0 	.word	0x200007b0

08003f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f5c:	480d      	ldr	r0, [pc, #52]	; (8003f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f5e:	490e      	ldr	r1, [pc, #56]	; (8003f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f64:	e002      	b.n	8003f6c <LoopCopyDataInit>

08003f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f6a:	3304      	adds	r3, #4

08003f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f70:	d3f9      	bcc.n	8003f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f72:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f74:	4c0b      	ldr	r4, [pc, #44]	; (8003fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f78:	e001      	b.n	8003f7e <LoopFillZerobss>

08003f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f7c:	3204      	adds	r2, #4

08003f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f80:	d3fb      	bcc.n	8003f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f82:	f7ff fe9b 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f86:	f01d fd75 	bl	8021a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f8a:	f7fe fbd7 	bl	800273c <main>
  bx  lr    
 8003f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f98:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003f9c:	080286c8 	.word	0x080286c8
  ldr r2, =_sbss
 8003fa0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003fa4:	20002290 	.word	0x20002290

08003fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fa8:	e7fe      	b.n	8003fa8 <ADC_IRQHandler>
	...

08003fac <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <_evtBuzzerFinish+0x1c>)
 8003fb8:	220d      	movs	r2, #13
 8003fba:	701a      	strb	r2, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000025 	.word	0x20000025

08003fcc <buzzerInit>:

bool buzzerInit()
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <buzzerInit+0x28>)
 8003fd2:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003fd6:	4808      	ldr	r0, [pc, #32]	; (8003ff8 <buzzerInit+0x2c>)
 8003fd8:	f015 fcbe 	bl	8019958 <pifBuzzer_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <buzzerInit+0x1a>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e003      	b.n	8003fee <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <buzzerInit+0x2c>)
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <buzzerInit+0x30>)
 8003fea:	601a      	str	r2, [r3, #0]
    return true;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	080020bd 	.word	0x080020bd
 8003ff8:	20001874 	.word	0x20001874
 8003ffc:	08003fad 	.word	0x08003fad

08004000 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 800400e:	4b62      	ldr	r3, [pc, #392]	; (8004198 <buzzer+0x198>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	79fa      	ldrb	r2, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	f080 80b7 	bcs.w	8004188 <buzzer+0x188>
        return;

    switch (mode) {
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f200 80b5 	bhi.w	800418c <buzzer+0x18c>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <buzzer+0x28>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800405d 	.word	0x0800405d
 800402c:	080040db 	.word	0x080040db
 8004030:	080040cb 	.word	0x080040cb
 8004034:	080040bb 	.word	0x080040bb
 8004038:	080040eb 	.word	0x080040eb
 800403c:	0800408b 	.word	0x0800408b
 8004040:	0800408b 	.word	0x0800408b
 8004044:	080040fb 	.word	0x080040fb
 8004048:	0800410b 	.word	0x0800410b
 800404c:	080040eb 	.word	0x080040eb
 8004050:	0800409b 	.word	0x0800409b
 8004054:	080040ab 	.word	0x080040ab
 8004058:	0800406b 	.word	0x0800406b
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 800405c:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <buzzer+0x198>)
 800405e:	220d      	movs	r2, #13
 8004060:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8004062:	484e      	ldr	r0, [pc, #312]	; (800419c <buzzer+0x19c>)
 8004064:	f015 fcde 	bl	8019a24 <pifBuzzer_Stop>
            break;
 8004068:	e093      	b.n	8004192 <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <buzzer+0x1a0>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 808e 	bne.w	8004190 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8004074:	494b      	ldr	r1, [pc, #300]	; (80041a4 <buzzer+0x1a4>)
 8004076:	4849      	ldr	r0, [pc, #292]	; (800419c <buzzer+0x19c>)
 8004078:	f015 fcb2 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 800407c:	4a46      	ldr	r2, [pc, #280]	; (8004198 <buzzer+0x198>)
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <buzzer+0x1a0>)
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
            break;
 8004088:	e083      	b.n	8004192 <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 800408a:	4947      	ldr	r1, [pc, #284]	; (80041a8 <buzzer+0x1a8>)
 800408c:	4843      	ldr	r0, [pc, #268]	; (800419c <buzzer+0x19c>)
 800408e:	f015 fca7 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 8004092:	4a41      	ldr	r2, [pc, #260]	; (8004198 <buzzer+0x198>)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	7013      	strb	r3, [r2, #0]
            break;
 8004098:	e07b      	b.n	8004192 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 800409a:	4944      	ldr	r1, [pc, #272]	; (80041ac <buzzer+0x1ac>)
 800409c:	483f      	ldr	r0, [pc, #252]	; (800419c <buzzer+0x19c>)
 800409e:	f015 fc9f 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040a2:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <buzzer+0x198>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	7013      	strb	r3, [r2, #0]
            break;
 80040a8:	e073      	b.n	8004192 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 80040aa:	4941      	ldr	r1, [pc, #260]	; (80041b0 <buzzer+0x1b0>)
 80040ac:	483b      	ldr	r0, [pc, #236]	; (800419c <buzzer+0x19c>)
 80040ae:	f015 fc97 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040b2:	4a39      	ldr	r2, [pc, #228]	; (8004198 <buzzer+0x198>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	7013      	strb	r3, [r2, #0]
            break;
 80040b8:	e06b      	b.n	8004192 <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 80040ba:	493e      	ldr	r1, [pc, #248]	; (80041b4 <buzzer+0x1b4>)
 80040bc:	4837      	ldr	r0, [pc, #220]	; (800419c <buzzer+0x19c>)
 80040be:	f015 fc8f 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040c2:	4a35      	ldr	r2, [pc, #212]	; (8004198 <buzzer+0x198>)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	7013      	strb	r3, [r2, #0]
            break;
 80040c8:	e063      	b.n	8004192 <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 80040ca:	493b      	ldr	r1, [pc, #236]	; (80041b8 <buzzer+0x1b8>)
 80040cc:	4833      	ldr	r0, [pc, #204]	; (800419c <buzzer+0x19c>)
 80040ce:	f015 fc87 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040d2:	4a31      	ldr	r2, [pc, #196]	; (8004198 <buzzer+0x198>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	7013      	strb	r3, [r2, #0]
            break;
 80040d8:	e05b      	b.n	8004192 <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 80040da:	4938      	ldr	r1, [pc, #224]	; (80041bc <buzzer+0x1bc>)
 80040dc:	482f      	ldr	r0, [pc, #188]	; (800419c <buzzer+0x19c>)
 80040de:	f015 fc7f 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040e2:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <buzzer+0x198>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	7013      	strb	r3, [r2, #0]
            break;
 80040e8:	e053      	b.n	8004192 <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 80040ea:	4935      	ldr	r1, [pc, #212]	; (80041c0 <buzzer+0x1c0>)
 80040ec:	482b      	ldr	r0, [pc, #172]	; (800419c <buzzer+0x19c>)
 80040ee:	f015 fc77 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 80040f2:	4a29      	ldr	r2, [pc, #164]	; (8004198 <buzzer+0x198>)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	7013      	strb	r3, [r2, #0]
            break;
 80040f8:	e04b      	b.n	8004192 <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 80040fa:	4932      	ldr	r1, [pc, #200]	; (80041c4 <buzzer+0x1c4>)
 80040fc:	4827      	ldr	r0, [pc, #156]	; (800419c <buzzer+0x19c>)
 80040fe:	f015 fc6f 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 8004102:	4a25      	ldr	r2, [pc, #148]	; (8004198 <buzzer+0x198>)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	7013      	strb	r3, [r2, #0]
            break;
 8004108:	e043      	b.n	8004192 <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 800410a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800410e:	f002 ff69 	bl	8006fe4 <feature>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02f      	beq.n	8004178 <buzzer+0x178>
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <buzzer+0x1c8>)
 800411a:	7adb      	ldrb	r3, [r3, #11]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02b      	beq.n	8004178 <buzzer+0x178>
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <buzzer+0x1cc>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d927      	bls.n	8004178 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <buzzer+0x1d0>)
 800412c:	2105      	movs	r1, #5
 800412e:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	3301      	adds	r3, #1
 8004134:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <buzzer+0x1d0>)
 8004136:	210f      	movs	r1, #15
 8004138:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	3302      	adds	r3, #2
 800413e:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b13      	cmp	r3, #19
 8004144:	d806      	bhi.n	8004154 <buzzer+0x154>
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <buzzer+0x1cc>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d3e9      	bcc.n	8004128 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	3301      	adds	r3, #1
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <buzzer+0x1d0>)
 800415a:	2164      	movs	r1, #100	; 0x64
 800415c:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3302      	adds	r3, #2
 8004162:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <buzzer+0x1d0>)
 8004164:	21f0      	movs	r1, #240	; 0xf0
 8004166:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004168:	4919      	ldr	r1, [pc, #100]	; (80041d0 <buzzer+0x1d0>)
 800416a:	480c      	ldr	r0, [pc, #48]	; (800419c <buzzer+0x19c>)
 800416c:	f015 fc38 	bl	80199e0 <pifBuzzer_Start>
                buzzerMode = mode;
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <buzzer+0x198>)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	7013      	strb	r3, [r2, #0]
                break;
 8004176:	e00c      	b.n	8004192 <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8004178:	4916      	ldr	r1, [pc, #88]	; (80041d4 <buzzer+0x1d4>)
 800417a:	4808      	ldr	r0, [pc, #32]	; (800419c <buzzer+0x19c>)
 800417c:	f015 fc30 	bl	80199e0 <pifBuzzer_Start>
            buzzerMode = mode;
 8004180:	4a05      	ldr	r2, [pc, #20]	; (8004198 <buzzer+0x198>)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	7013      	strb	r3, [r2, #0]
            break;
 8004186:	e004      	b.n	8004192 <buzzer+0x192>
        return;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <buzzer+0x192>

        default:
            return;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <buzzer+0x192>
                return;
 8004190:	bf00      	nop
    }
}
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000025 	.word	0x20000025
 800419c:	20001874 	.word	0x20001874
 80041a0:	200007ea 	.word	0x200007ea
 80041a4:	08026914 	.word	0x08026914
 80041a8:	080268e8 	.word	0x080268e8
 80041ac:	08026924 	.word	0x08026924
 80041b0:	0802692c 	.word	0x0802692c
 80041b4:	080268f4 	.word	0x080268f4
 80041b8:	080268f0 	.word	0x080268f0
 80041bc:	080268e4 	.word	0x080268e4
 80041c0:	080268ec 	.word	0x080268ec
 80041c4:	08026908 	.word	0x08026908
 80041c8:	20002014 	.word	0x20002014
 80041cc:	20002176 	.word	0x20002176
 80041d0:	200007d4 	.word	0x200007d4
 80041d4:	080268e0 	.word	0x080268e0

080041d8 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <buzzerUpdate+0x20>)
 80041de:	7b5b      	ldrb	r3, [r3, #13]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <buzzerUpdate+0x24>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d902      	bls.n	80041f2 <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 80041ec:	2008      	movs	r0, #8
 80041ee:	f7ff ff07 	bl	8004000 <buzzer>
    }
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200020dc 	.word	0x200020dc
 80041fc:	20000025 	.word	0x20000025

08004200 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d309      	bcc.n	8004228 <i2a+0x28>
        a = i2a(i / r, a, r);
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ffed 	bl	8004200 <i2a>
 8004226:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	fb01 f202 	mul.w	r2, r1, r2
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <i2a+0x4c>)
 800423a:	5cd2      	ldrb	r2, [r2, r3]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	3301      	adds	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	0802568c 	.word	0x0802568c

08004250 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	dd02      	ble.n	8004268 <itoa+0x18>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b24      	cmp	r3, #36	; 0x24
 8004266:	dd01      	ble.n	800426c <itoa+0x1c>
        r = 10;
 8004268:	230a      	movs	r3, #10
 800426a:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da0e      	bge.n	8004290 <itoa+0x40>
        *a = '-';
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	222d      	movs	r2, #45	; 0x2d
 8004276:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4258      	negs	r0, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3301      	adds	r3, #1
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4619      	mov	r1, r3
 8004284:	f7ff ffbc 	bl	8004200 <i2a>
 8004288:	4603      	mov	r3, r0
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e008      	b.n	80042a2 <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ffb2 	bl	8004200 <i2a>
 800429c:	4603      	mov	r3, r0
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
    return a;
 80042a2:	68bb      	ldr	r3, [r7, #8]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80042b8:	e002      	b.n	80042c0 <_atof+0x14>
        p += 1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3301      	adds	r3, #1
 80042be:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d0f8      	beq.n	80042ba <_atof+0xe>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	d0f4      	beq.n	80042ba <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80042d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042d4:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b2d      	cmp	r3, #45	; 0x2d
 80042dc:	d105      	bne.n	80042ea <_atof+0x3e>
        sign = -1.0f;
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <_atof+0x1dc>)
 80042e0:	61bb      	str	r3, [r7, #24]
        p += 1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3301      	adds	r3, #1
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e006      	b.n	80042f8 <_atof+0x4c>

    } else if (*p == '+') {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b2b      	cmp	r3, #43	; 0x2b
 80042f0:	d102      	bne.n	80042f8 <_atof+0x4c>
        p += 1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3301      	adds	r3, #1
 80042f6:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 80042fe:	e013      	b.n	8004328 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004300:	edd7 7a05 	vldr	s15, [r7, #20]
 8004304:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	3b30      	subs	r3, #48	; 0x30
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431e:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3301      	adds	r3, #1
 8004326:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b2f      	cmp	r3, #47	; 0x2f
 800432e:	d903      	bls.n	8004338 <_atof+0x8c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b39      	cmp	r3, #57	; 0x39
 8004336:	d9e3      	bls.n	8004300 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b2e      	cmp	r3, #46	; 0x2e
 800433e:	d129      	bne.n	8004394 <_atof+0xe8>
        float pow10 = 10.0f;
 8004340:	4b52      	ldr	r3, [pc, #328]	; (800448c <_atof+0x1e0>)
 8004342:	60fb      	str	r3, [r7, #12]
        p += 1;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3301      	adds	r3, #1
 8004348:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 800434a:	e01b      	b.n	8004384 <_atof+0xd8>
            value += (*p - '0') / pow10;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	3b30      	subs	r3, #48	; 0x30
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800435a:	ed97 7a03 	vldr	s14, [r7, #12]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	ed97 7a05 	vldr	s14, [r7, #20]
 8004366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436a:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 800436e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004372:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437a:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3301      	adds	r3, #1
 8004382:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b2f      	cmp	r3, #47	; 0x2f
 800438a:	d903      	bls.n	8004394 <_atof+0xe8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b39      	cmp	r3, #57	; 0x39
 8004392:	d9db      	bls.n	800434c <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 8004394:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004398:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b65      	cmp	r3, #101	; 0x65
 80043a0:	d003      	beq.n	80043aa <_atof+0xfe>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b45      	cmp	r3, #69	; 0x45
 80043a8:	d153      	bne.n	8004452 <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3301      	adds	r3, #1
 80043ae:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b2d      	cmp	r3, #45	; 0x2d
 80043ba:	d105      	bne.n	80043c8 <_atof+0x11c>
            frac = 1;
 80043bc:	2301      	movs	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
            p += 1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	e006      	b.n	80043d6 <_atof+0x12a>

        } else if (*p == '+') {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b2b      	cmp	r3, #43	; 0x2b
 80043ce:	d102      	bne.n	80043d6 <_atof+0x12a>
            p += 1;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 80043da:	e00d      	b.n	80043f8 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	3b30      	subs	r3, #48	; 0x30
 80043f0:	60bb      	str	r3, [r7, #8]
            p += 1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3301      	adds	r3, #1
 80043f6:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b2f      	cmp	r3, #47	; 0x2f
 80043fe:	d903      	bls.n	8004408 <_atof+0x15c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b39      	cmp	r3, #57	; 0x39
 8004406:	d9e9      	bls.n	80043dc <_atof+0x130>
        }
        if (expon > 308)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800440e:	d90e      	bls.n	800442e <_atof+0x182>
            expon = 308;
 8004410:	f44f 739a 	mov.w	r3, #308	; 0x134
 8004414:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 8004416:	e00a      	b.n	800442e <_atof+0x182>
            scale *= 1E8f;
 8004418:	edd7 7a04 	vldr	s15, [r7, #16]
 800441c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004490 <_atof+0x1e4>
 8004420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004424:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3b08      	subs	r3, #8
 800442c:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b07      	cmp	r3, #7
 8004432:	d8f1      	bhi.n	8004418 <_atof+0x16c>
        }
        while (expon >   0) {
 8004434:	e00a      	b.n	800444c <_atof+0x1a0>
            scale *= 10.0f;
 8004436:	edd7 7a04 	vldr	s15, [r7, #16]
 800443a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800443e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004442:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3b01      	subs	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f1      	bne.n	8004436 <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <_atof+0x1ba>
 8004458:	edd7 6a05 	vldr	s13, [r7, #20]
 800445c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004464:	e005      	b.n	8004472 <_atof+0x1c6>
 8004466:	ed97 7a05 	vldr	s14, [r7, #20]
 800446a:	edd7 7a04 	vldr	s15, [r7, #16]
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	ed97 7a06 	vldr	s14, [r7, #24]
 8004476:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	3724      	adds	r7, #36	; 0x24
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	bf800000 	.word	0xbf800000
 800448c:	41200000 	.word	0x41200000
 8004490:	4cbebc20 	.word	0x4cbebc20

08004494 <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af00      	add	r7, sp, #0
 800449a:	ed87 0a01 	vstr	s0, [r7, #4]
 800449e:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <ftoa+0x16c>)
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80044b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	dd08      	ble.n	80044d2 <ftoa+0x3e>
        x += 0.0005f;
 80044c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80044c4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004604 <ftoa+0x170>
 80044c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80044d0:	e007      	b.n	80044e2 <ftoa+0x4e>
    else
        x -= 0.0005f;
 80044d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044d6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004604 <ftoa+0x170>
 80044da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044de:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 80044e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004608 <ftoa+0x174>
 80044ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f2:	ee17 3a90 	vmov	r3, s15
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bfb8      	it	lt
 80044fe:	425b      	neglt	r3, r3
 8004500:	f107 0118 	add.w	r1, r7, #24
 8004504:	220a      	movs	r2, #10
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fea2 	bl	8004250 <itoa>

    if (value >= 0)
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	db02      	blt.n	8004518 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 8004512:	2320      	movs	r3, #32
 8004514:	733b      	strb	r3, [r7, #12]
 8004516:	e001      	b.n	800451c <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004518:	232d      	movs	r3, #45	; 0x2d
 800451a:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 800451c:	f107 0318 	add.w	r3, r7, #24
 8004520:	4618      	mov	r0, r3
 8004522:	f7fb fe63 	bl	80001ec <strlen>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10e      	bne.n	800454a <ftoa+0xb6>
        intString2[1] = '0';
 800452c:	2330      	movs	r3, #48	; 0x30
 800452e:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004530:	2330      	movs	r3, #48	; 0x30
 8004532:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004538:	f107 0218 	add.w	r2, r7, #24
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f01d fbc6 	bl	8021cd4 <strcat>
 8004548:	e02f      	b.n	80045aa <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 800454a:	f107 0318 	add.w	r3, r7, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb fe4c 	bl	80001ec <strlen>
 8004554:	4603      	mov	r3, r0
 8004556:	2b02      	cmp	r3, #2
 8004558:	d10c      	bne.n	8004574 <ftoa+0xe0>
        intString2[1] = '0';
 800455a:	2330      	movs	r3, #48	; 0x30
 800455c:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 800455e:	2330      	movs	r3, #48	; 0x30
 8004560:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 8004562:	f107 0218 	add.w	r2, r7, #24
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f01d fbb1 	bl	8021cd4 <strcat>
 8004572:	e01a      	b.n	80045aa <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 8004574:	f107 0318 	add.w	r3, r7, #24
 8004578:	4618      	mov	r0, r3
 800457a:	f7fb fe37 	bl	80001ec <strlen>
 800457e:	4603      	mov	r3, r0
 8004580:	2b03      	cmp	r3, #3
 8004582:	d10a      	bne.n	800459a <ftoa+0x106>
        intString2[1] = '0';
 8004584:	2330      	movs	r3, #48	; 0x30
 8004586:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004588:	f107 0218 	add.w	r2, r7, #24
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f01d fb9e 	bl	8021cd4 <strcat>
 8004598:	e007      	b.n	80045aa <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 800459a:	f107 0218 	add.w	r2, r7, #24
 800459e:	f107 030c 	add.w	r3, r7, #12
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f01d fb95 	bl	8021cd4 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80045aa:	f107 030c 	add.w	r3, r7, #12
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb fe1c 	bl	80001ec <strlen>
 80045b4:	4603      	mov	r3, r0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3b03      	subs	r3, #3
 80045ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80045be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	4619      	mov	r1, r3
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f01d fbc9 	bl	8021d60 <strncpy>
    floatString[dpLocation] = '\0';
 80045ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4413      	add	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 80045da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045dc:	6838      	ldr	r0, [r7, #0]
 80045de:	f01d fb79 	bl	8021cd4 <strcat>
    strcat(floatString, intString2 + dpLocation);
 80045e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e6:	f107 020c 	add.w	r2, r7, #12
 80045ea:	4413      	add	r3, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	f01d fb70 	bl	8021cd4 <strcat>

    return floatString;
 80045f4:	683b      	ldr	r3, [r7, #0]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	; 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	080256b4 	.word	0x080256b4
 8004604:	3a03126f 	.word	0x3a03126f
 8004608:	447a0000 	.word	0x447a0000

0800460c <cliAux>:

static int cliAux(int argc, char *argv[])
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d114      	bne.n	800464a <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e00d      	b.n	8004642 <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <cliAux+0x94>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3312      	adds	r3, #18
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	491b      	ldr	r1, [pc, #108]	; (80046a4 <cliAux+0x98>)
 8004636:	2000      	movs	r0, #0
 8004638:	f00e ffa8 	bl	801358c <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b18      	cmp	r3, #24
 8004646:	ddee      	ble.n	8004626 <cliAux+0x1a>
 8004648:	e024      	b.n	8004694 <cliAux+0x88>
    } else if (argc > 2) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b02      	cmp	r3, #2
 800464e:	dd1e      	ble.n	800468e <cliAux+0x82>
        i = atoi(argv[1]);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	3304      	adds	r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f01d f9fa 	bl	8021a50 <atoi>
 800465c:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b18      	cmp	r3, #24
 8004662:	dc0e      	bgt.n	8004682 <cliAux+0x76>
            val = atoi(argv[2]);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3308      	adds	r3, #8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f01d f9f0 	bl	8021a50 <atoi>
 8004670:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	490a      	ldr	r1, [pc, #40]	; (80046a0 <cliAux+0x94>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3312      	adds	r3, #18
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	e008      	b.n	8004694 <cliAux+0x88>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 8004682:	2219      	movs	r2, #25
 8004684:	4908      	ldr	r1, [pc, #32]	; (80046a8 <cliAux+0x9c>)
 8004686:	2000      	movs	r0, #0
 8004688:	f00e ff80 	bl	801358c <pifLog_Printf>
 800468c:	e002      	b.n	8004694 <cliAux+0x88>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 800468e:	f06f 0302 	mvn.w	r3, #2
 8004692:	e000      	b.n	8004696 <cliAux+0x8a>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20001890 	.word	0x20001890
 80046a4:	080256b8 	.word	0x080256b8
 80046a8:	080256c4 	.word	0x080256c4

080046ac <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 1) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 80d9 	bne.w	8004878 <cliCMix+0x1cc>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80046c6:	499a      	ldr	r1, [pc, #616]	; (8004930 <cliCMix+0x284>)
 80046c8:	2000      	movs	r0, #0
 80046ca:	f00e fecd 	bl	8013468 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	e069      	b.n	80047a8 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80046d4:	4a97      	ldr	r2, [pc, #604]	; (8004934 <cliCMix+0x288>)
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	3301      	adds	r3, #1
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	4413      	add	r3, r2
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	d061      	beq.n	80047b0 <cliCMix+0x104>
                break;
            num_motors++;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	3301      	adds	r3, #1
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	3301      	adds	r3, #1
 80046f6:	461a      	mov	r2, r3
 80046f8:	498f      	ldr	r1, [pc, #572]	; (8004938 <cliCMix+0x28c>)
 80046fa:	2000      	movs	r0, #0
 80046fc:	f00e ff46 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 8004700:	4a8c      	ldr	r2, [pc, #560]	; (8004934 <cliCMix+0x288>)
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	3301      	adds	r3, #1
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	f107 0314 	add.w	r3, r7, #20
 8004712:	4618      	mov	r0, r3
 8004714:	eeb0 0a67 	vmov.f32	s0, s15
 8004718:	f7ff febc 	bl	8004494 <ftoa>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	4986      	ldr	r1, [pc, #536]	; (800493c <cliCMix+0x290>)
 8004722:	2000      	movs	r0, #0
 8004724:	f00e ff32 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 8004728:	4a82      	ldr	r2, [pc, #520]	; (8004934 <cliCMix+0x288>)
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	3301      	adds	r3, #1
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	4413      	add	r3, r2
 8004732:	3304      	adds	r3, #4
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4618      	mov	r0, r3
 800473e:	eeb0 0a67 	vmov.f32	s0, s15
 8004742:	f7ff fea7 	bl	8004494 <ftoa>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	497c      	ldr	r1, [pc, #496]	; (800493c <cliCMix+0x290>)
 800474c:	2000      	movs	r0, #0
 800474e:	f00e ff1d 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 8004752:	4a78      	ldr	r2, [pc, #480]	; (8004934 <cliCMix+0x288>)
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4413      	add	r3, r2
 800475a:	3318      	adds	r3, #24
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	4618      	mov	r0, r3
 8004766:	eeb0 0a67 	vmov.f32	s0, s15
 800476a:	f7ff fe93 	bl	8004494 <ftoa>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	4972      	ldr	r1, [pc, #456]	; (800493c <cliCMix+0x290>)
 8004774:	2000      	movs	r0, #0
 8004776:	f00e ff09 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 800477a:	4a6e      	ldr	r2, [pc, #440]	; (8004934 <cliCMix+0x288>)
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4413      	add	r3, r2
 8004782:	331c      	adds	r3, #28
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4618      	mov	r0, r3
 800478e:	eeb0 0a67 	vmov.f32	s0, s15
 8004792:	f7ff fe7f 	bl	8004494 <ftoa>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	4969      	ldr	r1, [pc, #420]	; (8004940 <cliCMix+0x294>)
 800479c:	2000      	movs	r0, #0
 800479e:	f00e fef5 	bl	801358c <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	3301      	adds	r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	2b0b      	cmp	r3, #11
 80047ac:	dd92      	ble.n	80046d4 <cliCMix+0x28>
 80047ae:	e000      	b.n	80047b2 <cliCMix+0x106>
                break;
 80047b0:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c4:	e02a      	b.n	800481c <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80047c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80047ca:	4a5a      	ldr	r2, [pc, #360]	; (8004934 <cliCMix+0x288>)
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	3301      	adds	r3, #1
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4413      	add	r3, r2
 80047d4:	3304      	adds	r3, #4
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047de:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 80047e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80047e6:	4a53      	ldr	r2, [pc, #332]	; (8004934 <cliCMix+0x288>)
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	3318      	adds	r3, #24
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f8:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 80047fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004800:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <cliCMix+0x288>)
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	4413      	add	r3, r2
 8004808:	331c      	adds	r3, #28
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004812:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	3301      	adds	r3, #1
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	429a      	cmp	r2, r3
 8004822:	dbd0      	blt.n	80047c6 <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004824:	4947      	ldr	r1, [pc, #284]	; (8004944 <cliCMix+0x298>)
 8004826:	2000      	movs	r0, #0
 8004828:	f00e fe1e 	bl	8013468 <pifLog_Print>
        for (i = 0; i < 3; i++)
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004830:	e01a      	b.n	8004868 <cliCMix+0x1bc>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800483a:	4413      	add	r3, r2
 800483c:	3b28      	subs	r3, #40	; 0x28
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	eef0 7ae7 	vabs.f32	s15, s15
 8004846:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004948 <cliCMix+0x29c>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	dd01      	ble.n	8004858 <cliCMix+0x1ac>
 8004854:	4b3d      	ldr	r3, [pc, #244]	; (800494c <cliCMix+0x2a0>)
 8004856:	e000      	b.n	800485a <cliCMix+0x1ae>
 8004858:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <cliCMix+0x2a4>)
 800485a:	4619      	mov	r1, r3
 800485c:	2000      	movs	r0, #0
 800485e:	f00e fe03 	bl	8013468 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	3301      	adds	r3, #1
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b02      	cmp	r3, #2
 800486c:	dde1      	ble.n	8004832 <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 800486e:	4939      	ldr	r1, [pc, #228]	; (8004954 <cliCMix+0x2a8>)
 8004870:	2000      	movs	r0, #0
 8004872:	f00e fdf9 	bl	8013468 <pifLog_Print>
 8004876:	e0ed      	b.n	8004a54 <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4936      	ldr	r1, [pc, #216]	; (8004958 <cliCMix+0x2ac>)
 8004880:	4618      	mov	r0, r3
 8004882:	f01d fa0b 	bl	8021c9c <strcasecmp>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d111      	bne.n	80048b0 <cliCMix+0x204>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004890:	e00a      	b.n	80048a8 <cliCMix+0x1fc>
            mcfg.customMixer[i].throttle = 0.0f;
 8004892:	4a28      	ldr	r2, [pc, #160]	; (8004934 <cliCMix+0x288>)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	3301      	adds	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4413      	add	r3, r2
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	3301      	adds	r3, #1
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	2b0b      	cmp	r3, #11
 80048ac:	ddf1      	ble.n	8004892 <cliCMix+0x1e6>
 80048ae:	e0d1      	b.n	8004a54 <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "load") == 0) {
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	3304      	adds	r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4929      	ldr	r1, [pc, #164]	; (800495c <cliCMix+0x2b0>)
 80048b8:	4618      	mov	r0, r3
 80048ba:	f01d f9ef 	bl	8021c9c <strcasecmp>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d153      	bne.n	800496c <cliCMix+0x2c0>
        if (argc > 2) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	dd2f      	ble.n	800492a <cliCMix+0x27e>
            for (i = 0; ; i++) {
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80048ce:	4a24      	ldr	r2, [pc, #144]	; (8004960 <cliCMix+0x2b4>)
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <cliCMix+0x238>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <cliCMix+0x2b8>)
 80048dc:	2000      	movs	r0, #0
 80048de:	f00e fdc3 	bl	8013468 <pifLog_Print>
                    break;
 80048e2:	e0b7      	b.n	8004a54 <cliCMix+0x3a8>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	491d      	ldr	r1, [pc, #116]	; (8004960 <cliCMix+0x2b4>)
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f01d f9d1 	bl	8021c9c <strcasecmp>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d110      	bne.n	8004922 <cliCMix+0x276>
                    mixerLoadMix(i);
 8004900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004902:	f006 fc17 	bl	800b134 <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004906:	4a16      	ldr	r2, [pc, #88]	; (8004960 <cliCMix+0x2b4>)
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	461a      	mov	r2, r3
 8004910:	4915      	ldr	r1, [pc, #84]	; (8004968 <cliCMix+0x2bc>)
 8004912:	2000      	movs	r0, #0
 8004914:	f00e fe3a 	bl	801358c <pifLog_Printf>
                    cliCMix(1, NULL);
 8004918:	2100      	movs	r1, #0
 800491a:	2001      	movs	r0, #1
 800491c:	f7ff fec6 	bl	80046ac <cliCMix>
                    break;
 8004920:	e098      	b.n	8004a54 <cliCMix+0x3a8>
            for (i = 0; ; i++) {
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	3301      	adds	r3, #1
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004928:	e7d1      	b.n	80048ce <cliCMix+0x222>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 800492a:	f06f 0302 	mvn.w	r3, #2
 800492e:	e092      	b.n	8004a56 <cliCMix+0x3aa>
 8004930:	080256ec 	.word	0x080256ec
 8004934:	200019c8 	.word	0x200019c8
 8004938:	08025718 	.word	0x08025718
 800493c:	08025720 	.word	0x08025720
 8004940:	08025724 	.word	0x08025724
 8004944:	0802572c 	.word	0x0802572c
 8004948:	3c23d70a 	.word	0x3c23d70a
 800494c:	0802573c 	.word	0x0802573c
 8004950:	08025740 	.word	0x08025740
 8004954:	08025744 	.word	0x08025744
 8004958:	08025748 	.word	0x08025748
 800495c:	08025750 	.word	0x08025750
 8004960:	08026934 	.word	0x08026934
 8004964:	08025758 	.word	0x08025758
 8004968:	08025770 	.word	0x08025770
        }
    } else {
        i = atoi(argv[1]); // get motor number
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f01d f86c 	bl	8021a50 <atoi>
 8004978:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	3b01      	subs	r3, #1
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b0b      	cmp	r3, #11
 8004984:	dc61      	bgt.n	8004a4a <cliCMix+0x39e>
            if (argc > 2) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	dd11      	ble.n	80049b0 <cliCMix+0x304>
                mcfg.customMixer[i].throttle = _atof(argv[2]);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fc8a 	bl	80042ac <_atof>
 8004998:	eef0 7a40 	vmov.f32	s15, s0
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <cliCMix+0x3b4>)
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	3301      	adds	r3, #1
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	4413      	add	r3, r2
 80049a6:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	3301      	adds	r3, #1
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	dd12      	ble.n	80049dc <cliCMix+0x330>
                mcfg.customMixer[i].roll = _atof(argv[3]);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fc75 	bl	80042ac <_atof>
 80049c2:	eef0 7a40 	vmov.f32	s15, s0
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <cliCMix+0x3b4>)
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	3301      	adds	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	3301      	adds	r3, #1
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	dd11      	ble.n	8004a06 <cliCMix+0x35a>
                mcfg.customMixer[i].pitch = _atof(argv[4]);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	3310      	adds	r3, #16
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fc5f 	bl	80042ac <_atof>
 80049ee:	eef0 7a40 	vmov.f32	s15, s0
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <cliCMix+0x3b4>)
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	3318      	adds	r3, #24
 80049fc:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	3301      	adds	r3, #1
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 5) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	dd11      	ble.n	8004a30 <cliCMix+0x384>
                mcfg.customMixer[i].yaw = _atof(argv[5]);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fc4a 	bl	80042ac <_atof>
 8004a18:	eef0 7a40 	vmov.f32	s15, s0
 8004a1c:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <cliCMix+0x3b4>)
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	4413      	add	r3, r2
 8004a24:	331c      	adds	r3, #28
 8004a26:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d004      	beq.n	8004a40 <cliCMix+0x394>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004a36:	490b      	ldr	r1, [pc, #44]	; (8004a64 <cliCMix+0x3b8>)
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f00e fd15 	bl	8013468 <pifLog_Print>
 8004a3e:	e009      	b.n	8004a54 <cliCMix+0x3a8>
            } else {
                cliCMix(1, NULL);
 8004a40:	2100      	movs	r1, #0
 8004a42:	2001      	movs	r0, #1
 8004a44:	f7ff fe32 	bl	80046ac <cliCMix>
 8004a48:	e004      	b.n	8004a54 <cliCMix+0x3a8>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	4906      	ldr	r1, [pc, #24]	; (8004a68 <cliCMix+0x3bc>)
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f00e fd9c 	bl	801358c <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200019c8 	.word	0x200019c8
 8004a64:	08025784 	.word	0x08025784
 8004a68:	080257c0 	.word	0x080257c0

08004a6c <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	; 0x30
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004a76:	4aa2      	ldr	r2, [pc, #648]	; (8004d00 <cliServo+0x294>)
 8004a78:	f107 0320 	add.w	r3, r7, #32
 8004a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a80:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 1) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d15c      	bne.n	8004b44 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 8004a8a:	499e      	ldr	r1, [pc, #632]	; (8004d04 <cliServo+0x298>)
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f00e fceb 	bl	8013468 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a96:	e049      	b.n	8004b2c <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	499a      	ldr	r1, [pc, #616]	; (8004d08 <cliServo+0x29c>)
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f00e fd73 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004aa6:	4999      	ldr	r1, [pc, #612]	; (8004d0c <cliServo+0x2a0>)
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	440b      	add	r3, r1
 8004ab4:	33b8      	adds	r3, #184	; 0xb8
 8004ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aba:	461a      	mov	r2, r3
 8004abc:	4994      	ldr	r1, [pc, #592]	; (8004d10 <cliServo+0x2a4>)
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f00e fd64 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004ac4:	4991      	ldr	r1, [pc, #580]	; (8004d0c <cliServo+0x2a0>)
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	440b      	add	r3, r1
 8004ad2:	33bc      	adds	r3, #188	; 0xbc
 8004ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	498d      	ldr	r1, [pc, #564]	; (8004d10 <cliServo+0x2a4>)
 8004adc:	2000      	movs	r0, #0
 8004ade:	f00e fd55 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004ae2:	498a      	ldr	r1, [pc, #552]	; (8004d0c <cliServo+0x2a0>)
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	440b      	add	r3, r1
 8004af0:	33ba      	adds	r3, #186	; 0xba
 8004af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4985      	ldr	r1, [pc, #532]	; (8004d10 <cliServo+0x2a4>)
 8004afa:	2000      	movs	r0, #0
 8004afc:	f00e fd46 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004b00:	4982      	ldr	r1, [pc, #520]	; (8004d0c <cliServo+0x2a0>)
 8004b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	440b      	add	r3, r1
 8004b0e:	33be      	adds	r3, #190	; 0xbe
 8004b10:	f993 3000 	ldrsb.w	r3, [r3]
 8004b14:	461a      	mov	r2, r3
 8004b16:	497e      	ldr	r1, [pc, #504]	; (8004d10 <cliServo+0x2a4>)
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f00e fd37 	bl	801358c <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004b1e:	497d      	ldr	r1, [pc, #500]	; (8004d14 <cliServo+0x2a8>)
 8004b20:	2000      	movs	r0, #0
 8004b22:	f00e fca1 	bl	8013468 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	3301      	adds	r3, #1
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	2b07      	cmp	r3, #7
 8004b30:	ddb2      	ble.n	8004a98 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004b32:	4978      	ldr	r1, [pc, #480]	; (8004d14 <cliServo+0x2a8>)
 8004b34:	2000      	movs	r0, #0
 8004b36:	f00e fc97 	bl	8013468 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004b3a:	4977      	ldr	r1, [pc, #476]	; (8004d18 <cliServo+0x2ac>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f00e fc93 	bl	8013468 <pifLog_Print>
 8004b42:	e0d8      	b.n	8004cf6 <cliServo+0x28a>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	3304      	adds	r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4974      	ldr	r1, [pc, #464]	; (8004d1c <cliServo+0x2b0>)
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f01d f8a5 	bl	8021c9c <strcasecmp>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d13a      	bne.n	8004bce <cliServo+0x162>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5c:	e033      	b.n	8004bc6 <cliServo+0x15a>
            cfg.servoConf[i].min = 1020;
 8004b5e:	496b      	ldr	r1, [pc, #428]	; (8004d0c <cliServo+0x2a0>)
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	440b      	add	r3, r1
 8004b6c:	33b8      	adds	r3, #184	; 0xb8
 8004b6e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004b72:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004b74:	4965      	ldr	r1, [pc, #404]	; (8004d0c <cliServo+0x2a0>)
 8004b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	440b      	add	r3, r1
 8004b82:	33ba      	adds	r3, #186	; 0xba
 8004b84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b88:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004b8a:	4960      	ldr	r1, [pc, #384]	; (8004d0c <cliServo+0x2a0>)
 8004b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	440b      	add	r3, r1
 8004b98:	33bc      	adds	r3, #188	; 0xbc
 8004b9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b9e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004ba0:	f107 0220 	add.w	r2, r7, #32
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f993 0000 	ldrsb.w	r0, [r3]
 8004bac:	4957      	ldr	r1, [pc, #348]	; (8004d0c <cliServo+0x2a0>)
 8004bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	440b      	add	r3, r1
 8004bba:	33be      	adds	r3, #190	; 0xbe
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	ddc8      	ble.n	8004b5e <cliServo+0xf2>
 8004bcc:	e093      	b.n	8004cf6 <cliServo+0x28a>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check + 1 < argc && check < ARGS_COUNT) {
 8004bd2:	e013      	b.n	8004bfc <cliServo+0x190>
            args[check] = atoi(argv[check + 1]);
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f01c ff35 	bl	8021a50 <atoi>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	3301      	adds	r3, #1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	dd02      	ble.n	8004c0c <cliServo+0x1a0>
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	dde3      	ble.n	8004bd4 <cliServo+0x168>
        }

        if (check != ARGS_COUNT) {
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d005      	beq.n	8004c1e <cliServo+0x1b2>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004c12:	4943      	ldr	r1, [pc, #268]	; (8004d20 <cliServo+0x2b4>)
 8004c14:	2000      	movs	r0, #0
 8004c16:	f00e fc27 	bl	8013468 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e06c      	b.n	8004cf8 <cliServo+0x28c>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dd60      	ble.n	8004ce6 <cliServo+0x27a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	dc5d      	bgt.n	8004ce6 <cliServo+0x27a>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c2a:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c2c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c30:	db59      	blt.n	8004ce6 <cliServo+0x27a>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f640 0234 	movw	r2, #2100	; 0x834
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	dc54      	bgt.n	8004ce6 <cliServo+0x27a>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c3c:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c3e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c42:	db50      	blt.n	8004ce6 <cliServo+0x27a>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f640 0234 	movw	r2, #2100	; 0x834
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	dc4b      	bgt.n	8004ce6 <cliServo+0x27a>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c4e:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c50:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c54:	db47      	blt.n	8004ce6 <cliServo+0x27a>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f640 0234 	movw	r2, #2100	; 0x834
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	dc42      	bgt.n	8004ce6 <cliServo+0x27a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c60:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c62:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004c66:	db3e      	blt.n	8004ce6 <cliServo+0x27a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	dc3b      	bgt.n	8004ce6 <cliServo+0x27a>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c72:	429a      	cmp	r2, r3
 8004c74:	dc37      	bgt.n	8004ce6 <cliServo+0x27a>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	dc33      	bgt.n	8004ce6 <cliServo+0x27a>
            args[SERVO]--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	b218      	sxth	r0, r3
 8004c8a:	4920      	ldr	r1, [pc, #128]	; (8004d0c <cliServo+0x2a0>)
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	440b      	add	r3, r1
 8004c96:	33b8      	adds	r3, #184	; 0xb8
 8004c98:	4602      	mov	r2, r0
 8004c9a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	b218      	sxth	r0, r3
 8004ca2:	491a      	ldr	r1, [pc, #104]	; (8004d0c <cliServo+0x2a0>)
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	440b      	add	r3, r1
 8004cae:	33ba      	adds	r3, #186	; 0xba
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	b218      	sxth	r0, r3
 8004cba:	4914      	ldr	r1, [pc, #80]	; (8004d0c <cliServo+0x2a0>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	440b      	add	r3, r1
 8004cc6:	33bc      	adds	r3, #188	; 0xbc
 8004cc8:	4602      	mov	r2, r0
 8004cca:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	b258      	sxtb	r0, r3
 8004cd2:	490e      	ldr	r1, [pc, #56]	; (8004d0c <cliServo+0x2a0>)
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	440b      	add	r3, r1
 8004cde:	33be      	adds	r3, #190	; 0xbe
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e003      	b.n	8004cee <cliServo+0x282>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004ce6:	490f      	ldr	r1, [pc, #60]	; (8004d24 <cliServo+0x2b8>)
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f00e fbbd 	bl	8013468 <pifLog_Print>
        cliServo(1, NULL);
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f7ff febb 	bl	8004a6c <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3730      	adds	r7, #48	; 0x30
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	080258fc 	.word	0x080258fc
 8004d04:	080257e8 	.word	0x080257e8
 8004d08:	08025718 	.word	0x08025718
 8004d0c:	20001890 	.word	0x20001890
 8004d10:	08025814 	.word	0x08025814
 8004d14:	08025744 	.word	0x08025744
 8004d18:	08025818 	.word	0x08025818
 8004d1c:	08025748 	.word	0x08025748
 8004d20:	08025834 	.word	0x08025834
 8004d24:	08025880 	.word	0x08025880

08004d28 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b090      	sub	sp, #64	; 0x40
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 1) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	f040 808a 	bne.w	8004e52 <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004d3e:	49ab      	ldr	r1, [pc, #684]	; (8004fec <cliServoMix+0x2c4>)
 8004d40:	2000      	movs	r0, #0
 8004d42:	f00e fb91 	bl	8013468 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004d46:	49aa      	ldr	r1, [pc, #680]	; (8004ff0 <cliServoMix+0x2c8>)
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f00e fb8d 	bl	8013468 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d52:	e074      	b.n	8004e3e <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004d54:	49a7      	ldr	r1, [pc, #668]	; (8004ff4 <cliServoMix+0x2cc>)
 8004d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	440b      	add	r3, r1
 8004d60:	33d2      	adds	r3, #210	; 0xd2
 8004d62:	f993 3000 	ldrsb.w	r3, [r3]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d06d      	beq.n	8004e46 <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	461a      	mov	r2, r3
 8004d70:	49a1      	ldr	r1, [pc, #644]	; (8004ff8 <cliServoMix+0x2d0>)
 8004d72:	2000      	movs	r0, #0
 8004d74:	f00e fc0a 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004d78:	499e      	ldr	r1, [pc, #632]	; (8004ff4 <cliServoMix+0x2cc>)
 8004d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	440b      	add	r3, r1
 8004d84:	33d0      	adds	r3, #208	; 0xd0
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	499b      	ldr	r1, [pc, #620]	; (8004ffc <cliServoMix+0x2d4>)
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f00e fbfc 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004d94:	4997      	ldr	r1, [pc, #604]	; (8004ff4 <cliServoMix+0x2cc>)
 8004d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	440b      	add	r3, r1
 8004da0:	33d1      	adds	r3, #209	; 0xd1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	461a      	mov	r2, r3
 8004da8:	4994      	ldr	r1, [pc, #592]	; (8004ffc <cliServoMix+0x2d4>)
 8004daa:	2000      	movs	r0, #0
 8004dac:	f00e fbee 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004db0:	4990      	ldr	r1, [pc, #576]	; (8004ff4 <cliServoMix+0x2cc>)
 8004db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	33d2      	adds	r3, #210	; 0xd2
 8004dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	498d      	ldr	r1, [pc, #564]	; (8004ffc <cliServoMix+0x2d4>)
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f00e fbe0 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004dcc:	4989      	ldr	r1, [pc, #548]	; (8004ff4 <cliServoMix+0x2cc>)
 8004dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	33d3      	adds	r3, #211	; 0xd3
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4987      	ldr	r1, [pc, #540]	; (8004ffc <cliServoMix+0x2d4>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f00e fbd3 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004de6:	4983      	ldr	r1, [pc, #524]	; (8004ff4 <cliServoMix+0x2cc>)
 8004de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	33d4      	adds	r3, #212	; 0xd4
 8004df4:	f993 3000 	ldrsb.w	r3, [r3]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4980      	ldr	r1, [pc, #512]	; (8004ffc <cliServoMix+0x2d4>)
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f00e fbc5 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004e02:	497c      	ldr	r1, [pc, #496]	; (8004ff4 <cliServoMix+0x2cc>)
 8004e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	33d5      	adds	r3, #213	; 0xd5
 8004e10:	f993 3000 	ldrsb.w	r3, [r3]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4979      	ldr	r1, [pc, #484]	; (8004ffc <cliServoMix+0x2d4>)
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f00e fbb7 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004e1e:	4975      	ldr	r1, [pc, #468]	; (8004ff4 <cliServoMix+0x2cc>)
 8004e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	440b      	add	r3, r1
 8004e2a:	33d6      	adds	r3, #214	; 0xd6
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4973      	ldr	r1, [pc, #460]	; (8005000 <cliServoMix+0x2d8>)
 8004e32:	2000      	movs	r0, #0
 8004e34:	f00e fbaa 	bl	801358c <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	dd87      	ble.n	8004d54 <cliServoMix+0x2c>
 8004e44:	e000      	b.n	8004e48 <cliServoMix+0x120>
                break;
 8004e46:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004e48:	496e      	ldr	r1, [pc, #440]	; (8005004 <cliServoMix+0x2dc>)
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f00e fb0c 	bl	8013468 <pifLog_Print>
 8004e50:	e23d      	b.n	80052ce <cliServoMix+0x5a6>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	496b      	ldr	r1, [pc, #428]	; (8005008 <cliServoMix+0x2e0>)
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f01c ff1e 	bl	8021c9c <strcasecmp>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <cliServoMix+0x170>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004e66:	2270      	movs	r2, #112	; 0x70
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4868      	ldr	r0, [pc, #416]	; (800500c <cliServoMix+0x2e4>)
 8004e6c:	f01c fe44 	bl	8021af8 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004e70:	2300      	movs	r3, #0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	e00c      	b.n	8004e90 <cliServoMix+0x168>
            cfg.servoConf[i].direction = 0;
 8004e76:	4966      	ldr	r1, [pc, #408]	; (8005010 <cliServoMix+0x2e8>)
 8004e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	440b      	add	r3, r1
 8004e84:	33c0      	adds	r3, #192	; 0xc0
 8004e86:	2200      	movs	r2, #0
 8004e88:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	2b07      	cmp	r3, #7
 8004e94:	ddef      	ble.n	8004e76 <cliServoMix+0x14e>
 8004e96:	e21a      	b.n	80052ce <cliServoMix+0x5a6>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	495d      	ldr	r1, [pc, #372]	; (8005014 <cliServoMix+0x2ec>)
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f01c fefb 	bl	8021c9c <strcasecmp>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d135      	bne.n	8004f18 <cliServoMix+0x1f0>
        if (argc > 2) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	dd2f      	ble.n	8004f12 <cliServoMix+0x1ea>
            for (i = 0; ; i++) {
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004eb6:	4a58      	ldr	r2, [pc, #352]	; (8005018 <cliServoMix+0x2f0>)
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <cliServoMix+0x1a4>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004ec2:	4956      	ldr	r1, [pc, #344]	; (800501c <cliServoMix+0x2f4>)
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f00e facf 	bl	8013468 <pifLog_Print>
                    break;
 8004eca:	e200      	b.n	80052ce <cliServoMix+0x5a6>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4951      	ldr	r1, [pc, #324]	; (8005018 <cliServoMix+0x2f0>)
 8004ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f01c fedd 	bl	8021c9c <strcasecmp>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <cliServoMix+0x1e2>
                    servoMixerLoadMix(i);
 8004ee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004eea:	f006 f8ab 	bl	800b044 <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004eee:	4a4a      	ldr	r2, [pc, #296]	; (8005018 <cliServoMix+0x2f0>)
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4949      	ldr	r1, [pc, #292]	; (8005020 <cliServoMix+0x2f8>)
 8004efa:	2000      	movs	r0, #0
 8004efc:	f00e fb46 	bl	801358c <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004f00:	2100      	movs	r1, #0
 8004f02:	2001      	movs	r0, #1
 8004f04:	f7ff ff10 	bl	8004d28 <cliServoMix>
                    break;
 8004f08:	e1e1      	b.n	80052ce <cliServoMix+0x5a6>
            for (i = 0; ; i++) {
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004f10:	e7d1      	b.n	8004eb6 <cliServoMix+0x18e>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004f12:	f06f 0302 	mvn.w	r3, #2
 8004f16:	e1db      	b.n	80052d0 <cliServoMix+0x5a8>
        }
    } else if (strcasecmp(argv[1], "direction") == 0) {
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4941      	ldr	r1, [pc, #260]	; (8005024 <cliServoMix+0x2fc>)
 8004f20:	4618      	mov	r0, r3
 8004f22:	f01c febb 	bl	8021c9c <strcasecmp>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 812a 	bne.w	8005182 <cliServoMix+0x45a>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004f2e:	4a3e      	ldr	r2, [pc, #248]	; (8005028 <cliServoMix+0x300>)
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f38:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 2) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	f040 8096 	bne.w	8005070 <cliServoMix+0x348>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004f44:	4939      	ldr	r1, [pc, #228]	; (800502c <cliServoMix+0x304>)
 8004f46:	2000      	movs	r0, #0
 8004f48:	f00e fa8e 	bl	8013468 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004f4c:	4938      	ldr	r1, [pc, #224]	; (8005030 <cliServoMix+0x308>)
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f00e fa8a 	bl	8013468 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 8004f58:	e009      	b.n	8004f6e <cliServoMix+0x246>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4934      	ldr	r1, [pc, #208]	; (8005034 <cliServoMix+0x30c>)
 8004f62:	2000      	movs	r0, #0
 8004f64:	f00e fb12 	bl	801358c <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b0b      	cmp	r3, #11
 8004f72:	ddf2      	ble.n	8004f5a <cliServoMix+0x232>
            pifLog_Print(LT_NONE, "\r\n");
 8004f74:	4923      	ldr	r1, [pc, #140]	; (8005004 <cliServoMix+0x2dc>)
 8004f76:	2000      	movs	r0, #0
 8004f78:	f00e fa76 	bl	8013468 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	e02f      	b.n	8004fe2 <cliServoMix+0x2ba>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	3301      	adds	r3, #1
 8004f86:	461a      	mov	r2, r3
 8004f88:	492b      	ldr	r1, [pc, #172]	; (8005038 <cliServoMix+0x310>)
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f00e fafe 	bl	801358c <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30
 8004f94:	e01b      	b.n	8004fce <cliServoMix+0x2a6>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004f96:	491e      	ldr	r1, [pc, #120]	; (8005010 <cliServoMix+0x2e8>)
 8004f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	440b      	add	r3, r1
 8004fa4:	33c0      	adds	r3, #192	; 0xc0
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	fa42 f303 	asr.w	r3, r2, r3
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <cliServoMix+0x294>
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <cliServoMix+0x314>)
 8004fba:	e000      	b.n	8004fbe <cliServoMix+0x296>
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <cliServoMix+0x318>)
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4920      	ldr	r1, [pc, #128]	; (8005044 <cliServoMix+0x31c>)
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f00e fae2 	bl	801358c <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	3301      	adds	r3, #1
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	2b0b      	cmp	r3, #11
 8004fd2:	dde0      	ble.n	8004f96 <cliServoMix+0x26e>
                pifLog_Print(LT_NONE, "\r\n");
 8004fd4:	490b      	ldr	r1, [pc, #44]	; (8005004 <cliServoMix+0x2dc>)
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f00e fa46 	bl	8013468 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	3301      	adds	r3, #1
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	ddcc      	ble.n	8004f82 <cliServoMix+0x25a>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e171      	b.n	80052d0 <cliServoMix+0x5a8>
 8004fec:	08025904 	.word	0x08025904
 8004ff0:	0802596c 	.word	0x0802596c
 8004ff4:	200019c8 	.word	0x200019c8
 8004ff8:	08025718 	.word	0x08025718
 8004ffc:	08025814 	.word	0x08025814
 8005000:	080259cc 	.word	0x080259cc
 8005004:	08025744 	.word	0x08025744
 8005008:	08025748 	.word	0x08025748
 800500c:	20001a98 	.word	0x20001a98
 8005010:	20001890 	.word	0x20001890
 8005014:	08025750 	.word	0x08025750
 8005018:	08026934 	.word	0x08026934
 800501c:	08025758 	.word	0x08025758
 8005020:	08025770 	.word	0x08025770
 8005024:	08024a08 	.word	0x08024a08
 8005028:	08025b08 	.word	0x08025b08
 800502c:	080259d4 	.word	0x080259d4
 8005030:	08025a24 	.word	0x08025a24
 8005034:	08025a28 	.word	0x08025a28
 8005038:	08025a30 	.word	0x08025a30
 800503c:	08025a34 	.word	0x08025a34
 8005040:	08025a38 	.word	0x08025a38
 8005044:	08025a3c 	.word	0x08025a3c
        }

        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	3301      	adds	r3, #1
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4413      	add	r3, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f01c fcfb 	bl	8021a50 <atoi>
 800505a:	4602      	mov	r2, r0
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005064:	440b      	add	r3, r1
 8005066:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	3301      	adds	r3, #1
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	3301      	adds	r3, #1
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	dd02      	ble.n	8005080 <cliServoMix+0x358>
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	2b02      	cmp	r3, #2
 800507e:	dde3      	ble.n	8005048 <cliServoMix+0x320>
        }

        if (check != ARGS_COUNT) {
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2b03      	cmp	r3, #3
 8005084:	d005      	beq.n	8005092 <cliServoMix+0x36a>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8005086:	4994      	ldr	r1, [pc, #592]	; (80052d8 <cliServoMix+0x5b0>)
 8005088:	2000      	movs	r0, #0
 800508a:	f00e f9ed 	bl	8013468 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 800508e:	2300      	movs	r3, #0
 8005090:	e11e      	b.n	80052d0 <cliServoMix+0x5a8>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dd55      	ble.n	8005144 <cliServoMix+0x41c>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b08      	cmp	r3, #8
 800509c:	dc52      	bgt.n	8005144 <cliServoMix+0x41c>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dd4f      	ble.n	8005144 <cliServoMix+0x41c>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	dc4c      	bgt.n	8005144 <cliServoMix+0x41c>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d002      	beq.n	80050b8 <cliServoMix+0x390>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d145      	bne.n	8005144 <cliServoMix+0x41c>
            args[SERVO] -= 1;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d11c      	bne.n	8005106 <cliServoMix+0x3de>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4983      	ldr	r1, [pc, #524]	; (80052dc <cliServoMix+0x5b4>)
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	440b      	add	r3, r1
 80050da:	33c0      	adds	r3, #192	; 0xc0
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b21a      	sxth	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	b298      	uxth	r0, r3
 80050f2:	497a      	ldr	r1, [pc, #488]	; (80052dc <cliServoMix+0x5b4>)
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	440b      	add	r3, r1
 80050fe:	33c0      	adds	r3, #192	; 0xc0
 8005100:	4602      	mov	r2, r0
 8005102:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005104:	e022      	b.n	800514c <cliServoMix+0x424>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4974      	ldr	r1, [pc, #464]	; (80052dc <cliServoMix+0x5b4>)
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	440b      	add	r3, r1
 8005114:	33c0      	adds	r3, #192	; 0xc0
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b21a      	sxth	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	b21b      	sxth	r3, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	b21b      	sxth	r3, r3
 8005128:	4013      	ands	r3, r2
 800512a:	b21b      	sxth	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	b298      	uxth	r0, r3
 8005130:	496a      	ldr	r1, [pc, #424]	; (80052dc <cliServoMix+0x5b4>)
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	440b      	add	r3, r1
 800513c:	33c0      	adds	r3, #192	; 0xc0
 800513e:	4602      	mov	r2, r0
 8005140:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005142:	e003      	b.n	800514c <cliServoMix+0x424>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8005144:	4966      	ldr	r1, [pc, #408]	; (80052e0 <cliServoMix+0x5b8>)
 8005146:	2000      	movs	r0, #0
 8005148:	f00e f98e 	bl	8013468 <pifLog_Print>

        cliServoMix(2, smix_dir);
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	4619      	mov	r1, r3
 8005152:	2002      	movs	r0, #2
 8005154:	f7ff fde8 	bl	8004d28 <cliServoMix>
 8005158:	e0b9      	b.n	80052ce <cliServoMix+0x5a6>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	3301      	adds	r3, #1
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	4413      	add	r3, r2
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f01c fc72 	bl	8021a50 <atoi>
 800516c:	4602      	mov	r2, r0
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005176:	440b      	add	r3, r1
 8005178:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	3301      	adds	r3, #1
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	3301      	adds	r3, #1
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	dd02      	ble.n	8005192 <cliServoMix+0x46a>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	2b07      	cmp	r3, #7
 8005190:	dde3      	ble.n	800515a <cliServoMix+0x432>
        }

        if (check != ARGS_COUNT) {
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b08      	cmp	r3, #8
 8005196:	d005      	beq.n	80051a4 <cliServoMix+0x47c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 8005198:	4952      	ldr	r1, [pc, #328]	; (80052e4 <cliServoMix+0x5bc>)
 800519a:	2000      	movs	r0, #0
 800519c:	f00e f964 	bl	8013468 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e095      	b.n	80052d0 <cliServoMix+0x5a8>
        }

        i = args[RULE] - 1;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f2c0 808a 	blt.w	80052c6 <cliServoMix+0x59e>
 80051b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b4:	2b0f      	cmp	r3, #15
 80051b6:	f300 8086 	bgt.w	80052c6 <cliServoMix+0x59e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051ba:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f340 8082 	ble.w	80052c6 <cliServoMix+0x59e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	dc7e      	bgt.n	80052c6 <cliServoMix+0x59e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051c8:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd7b      	ble.n	80052c6 <cliServoMix+0x59e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	dc78      	bgt.n	80052c6 <cliServoMix+0x59e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051d4:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051d6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80051da:	db74      	blt.n	80052c6 <cliServoMix+0x59e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	dc71      	bgt.n	80052c6 <cliServoMix+0x59e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051e2:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db6e      	blt.n	80052c6 <cliServoMix+0x59e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2bff      	cmp	r3, #255	; 0xff
 80051ec:	dc6b      	bgt.n	80052c6 <cliServoMix+0x59e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db68      	blt.n	80052c6 <cliServoMix+0x59e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	dc65      	bgt.n	80052c6 <cliServoMix+0x59e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db62      	blt.n	80052c6 <cliServoMix+0x59e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	dc5f      	bgt.n	80052c6 <cliServoMix+0x59e>
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	429a      	cmp	r2, r3
 800520c:	da5b      	bge.n	80052c6 <cliServoMix+0x59e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005210:	2b00      	cmp	r3, #0
 8005212:	db58      	blt.n	80052c6 <cliServoMix+0x59e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2b03      	cmp	r3, #3
 8005218:	dc55      	bgt.n	80052c6 <cliServoMix+0x59e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b2d8      	uxtb	r0, r3
 8005222:	4931      	ldr	r1, [pc, #196]	; (80052e8 <cliServoMix+0x5c0>)
 8005224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	440b      	add	r3, r1
 800522e:	33d0      	adds	r3, #208	; 0xd0
 8005230:	4602      	mov	r2, r0
 8005232:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b2d8      	uxtb	r0, r3
 800523c:	492a      	ldr	r1, [pc, #168]	; (80052e8 <cliServoMix+0x5c0>)
 800523e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	440b      	add	r3, r1
 8005248:	33d1      	adds	r3, #209	; 0xd1
 800524a:	4602      	mov	r2, r0
 800524c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	b258      	sxtb	r0, r3
 8005252:	4925      	ldr	r1, [pc, #148]	; (80052e8 <cliServoMix+0x5c0>)
 8005254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	440b      	add	r3, r1
 800525e:	33d2      	adds	r3, #210	; 0xd2
 8005260:	4602      	mov	r2, r0
 8005262:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	b2d8      	uxtb	r0, r3
 8005268:	491f      	ldr	r1, [pc, #124]	; (80052e8 <cliServoMix+0x5c0>)
 800526a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	440b      	add	r3, r1
 8005274:	33d3      	adds	r3, #211	; 0xd3
 8005276:	4602      	mov	r2, r0
 8005278:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	b258      	sxtb	r0, r3
 800527e:	491a      	ldr	r1, [pc, #104]	; (80052e8 <cliServoMix+0x5c0>)
 8005280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	440b      	add	r3, r1
 800528a:	33d4      	adds	r3, #212	; 0xd4
 800528c:	4602      	mov	r2, r0
 800528e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	b258      	sxtb	r0, r3
 8005294:	4914      	ldr	r1, [pc, #80]	; (80052e8 <cliServoMix+0x5c0>)
 8005296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	440b      	add	r3, r1
 80052a0:	33d5      	adds	r3, #213	; 0xd5
 80052a2:	4602      	mov	r2, r0
 80052a4:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	b2d8      	uxtb	r0, r3
 80052aa:	490f      	ldr	r1, [pc, #60]	; (80052e8 <cliServoMix+0x5c0>)
 80052ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ae:	4613      	mov	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	440b      	add	r3, r1
 80052b6:	33d6      	adds	r3, #214	; 0xd6
 80052b8:	4602      	mov	r2, r0
 80052ba:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 80052bc:	2100      	movs	r1, #0
 80052be:	2001      	movs	r0, #1
 80052c0:	f7ff fd32 	bl	8004d28 <cliServoMix>
 80052c4:	e003      	b.n	80052ce <cliServoMix+0x5a6>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 80052c6:	4906      	ldr	r1, [pc, #24]	; (80052e0 <cliServoMix+0x5b8>)
 80052c8:	2000      	movs	r0, #0
 80052ca:	f00e f8cd 	bl	8013468 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3740      	adds	r7, #64	; 0x40
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	08025a44 	.word	0x08025a44
 80052dc:	20001890 	.word	0x20001890
 80052e0:	08025a80 	.word	0x08025a80
 80052e4:	08025aa4 	.word	0x08025aa4
 80052e8:	200019c8 	.word	0x200019c8

080052ec <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80052f6:	490b      	ldr	r1, [pc, #44]	; (8005324 <cliDefaults+0x38>)
 80052f8:	2000      	movs	r0, #0
 80052fa:	f00e f8b5 	bl	8013468 <pifLog_Print>
    checkFirstTime(true);
 80052fe:	2001      	movs	r0, #1
 8005300:	f001 fb10 	bl	8006924 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005304:	4908      	ldr	r1, [pc, #32]	; (8005328 <cliDefaults+0x3c>)
 8005306:	2000      	movs	r0, #0
 8005308:	f00e f8ae 	bl	8013468 <pifLog_Print>
    pif_Delay1ms(10);
 800530c:	200a      	movs	r0, #10
 800530e:	f00c f8e3 	bl	80114d8 <pif_Delay1ms>
    systemReset(false);
 8005312:	2000      	movs	r0, #0
 8005314:	f7fc fe5e 	bl	8001fd4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	08025b10 	.word	0x08025b10
 8005328:	08025b2c 	.word	0x08025b2c

0800532c <cliDump>:

static int cliDump(int argc, char *argv[])
{
 800532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532e:	b093      	sub	sp, #76	; 0x4c
 8005330:	af04      	add	r7, sp, #16
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 8005336:	2100      	movs	r1, #0
 8005338:	2001      	movs	r0, #1
 800533a:	f001 f86d 	bl	8006418 <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 800533e:	49bc      	ldr	r1, [pc, #752]	; (8005630 <cliDump+0x304>)
 8005340:	2000      	movs	r0, #0
 8005342:	f00e f891 	bl	8013468 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 8005346:	2100      	movs	r1, #0
 8005348:	2001      	movs	r0, #1
 800534a:	f7ff f95f 	bl	800460c <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 800534e:	4bb9      	ldr	r3, [pc, #740]	; (8005634 <cliDump+0x308>)
 8005350:	795b      	ldrb	r3, [r3, #5]
 8005352:	3b01      	subs	r3, #1
 8005354:	4ab8      	ldr	r2, [pc, #736]	; (8005638 <cliDump+0x30c>)
 8005356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535a:	461a      	mov	r2, r3
 800535c:	49b7      	ldr	r1, [pc, #732]	; (800563c <cliDump+0x310>)
 800535e:	2000      	movs	r0, #0
 8005360:	f00e f914 	bl	801358c <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005364:	4bb3      	ldr	r3, [pc, #716]	; (8005634 <cliDump+0x308>)
 8005366:	edd3 7a04 	vldr	s15, [r3, #16]
 800536a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800536e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005372:	f000 80a4 	beq.w	80054be <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 8005376:	2300      	movs	r3, #0
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	e093      	b.n	80054a4 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 800537c:	4aad      	ldr	r2, [pc, #692]	; (8005634 <cliDump+0x308>)
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	3301      	adds	r3, #1
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4413      	add	r3, r2
 8005386:	edd3 7a00 	vldr	s15, [r3]
 800538a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	f000 808c 	beq.w	80054ae <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 8005396:	4aa7      	ldr	r2, [pc, #668]	; (8005634 <cliDump+0x308>)
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	3301      	adds	r3, #1
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	4413      	add	r3, r2
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80053a4:	4aa3      	ldr	r2, [pc, #652]	; (8005634 <cliDump+0x308>)
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	3301      	adds	r3, #1
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	4413      	add	r3, r2
 80053ae:	3304      	adds	r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 80053b4:	4a9f      	ldr	r2, [pc, #636]	; (8005634 <cliDump+0x308>)
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	4413      	add	r3, r2
 80053bc:	3318      	adds	r3, #24
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 80053c2:	4a9c      	ldr	r2, [pc, #624]	; (8005634 <cliDump+0x308>)
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	331c      	adds	r3, #28
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	3301      	adds	r3, #1
 80053d4:	461a      	mov	r2, r3
 80053d6:	499a      	ldr	r1, [pc, #616]	; (8005640 <cliDump+0x314>)
 80053d8:	2000      	movs	r0, #0
 80053da:	f00e f8d7 	bl	801358c <pifLog_Printf>
            if (thr < 0)
 80053de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	d503      	bpl.n	80053f4 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80053ec:	4995      	ldr	r1, [pc, #596]	; (8005644 <cliDump+0x318>)
 80053ee:	2000      	movs	r0, #0
 80053f0:	f00e f83a 	bl	8013468 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80053f4:	f107 0308 	add.w	r3, r7, #8
 80053f8:	4618      	mov	r0, r3
 80053fa:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80053fe:	f7ff f849 	bl	8004494 <ftoa>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	4990      	ldr	r1, [pc, #576]	; (8005648 <cliDump+0x31c>)
 8005408:	2000      	movs	r0, #0
 800540a:	f00e f8bf 	bl	801358c <pifLog_Printf>
            if (roll < 0)
 800540e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	d503      	bpl.n	8005424 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 800541c:	4989      	ldr	r1, [pc, #548]	; (8005644 <cliDump+0x318>)
 800541e:	2000      	movs	r0, #0
 8005420:	f00e f822 	bl	8013468 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005424:	f107 0308 	add.w	r3, r7, #8
 8005428:	4618      	mov	r0, r3
 800542a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800542e:	f7ff f831 	bl	8004494 <ftoa>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	4984      	ldr	r1, [pc, #528]	; (8005648 <cliDump+0x31c>)
 8005438:	2000      	movs	r0, #0
 800543a:	f00e f8a7 	bl	801358c <pifLog_Printf>
            if (pitch < 0)
 800543e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d503      	bpl.n	8005454 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 800544c:	497d      	ldr	r1, [pc, #500]	; (8005644 <cliDump+0x318>)
 800544e:	2000      	movs	r0, #0
 8005450:	f00e f80a 	bl	8013468 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005454:	f107 0308 	add.w	r3, r7, #8
 8005458:	4618      	mov	r0, r3
 800545a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800545e:	f7ff f819 	bl	8004494 <ftoa>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	4978      	ldr	r1, [pc, #480]	; (8005648 <cliDump+0x31c>)
 8005468:	2000      	movs	r0, #0
 800546a:	f00e f88f 	bl	801358c <pifLog_Printf>
            if (yaw < 0)
 800546e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547a:	d503      	bpl.n	8005484 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 800547c:	4971      	ldr	r1, [pc, #452]	; (8005644 <cliDump+0x318>)
 800547e:	2000      	movs	r0, #0
 8005480:	f00d fff2 	bl	8013468 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4618      	mov	r0, r3
 800548a:	ed97 0a08 	vldr	s0, [r7, #32]
 800548e:	f7ff f801 	bl	8004494 <ftoa>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	496d      	ldr	r1, [pc, #436]	; (800564c <cliDump+0x320>)
 8005498:	2000      	movs	r0, #0
 800549a:	f00e f877 	bl	801358c <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	3301      	adds	r3, #1
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	2b0b      	cmp	r3, #11
 80054a8:	f67f af68 	bls.w	800537c <cliDump+0x50>
 80054ac:	e000      	b.n	80054b0 <cliDump+0x184>
                break;
 80054ae:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	3301      	adds	r3, #1
 80054b4:	461a      	mov	r2, r3
 80054b6:	4966      	ldr	r1, [pc, #408]	; (8005650 <cliDump+0x324>)
 80054b8:	2000      	movs	r0, #0
 80054ba:	f00e f867 	bl	801358c <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 80054be:	4b5d      	ldr	r3, [pc, #372]	; (8005634 <cliDump+0x308>)
 80054c0:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8084 	beq.w	80055d2 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80054ca:	2300      	movs	r3, #0
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
 80054ce:	e074      	b.n	80055ba <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80054d0:	4958      	ldr	r1, [pc, #352]	; (8005634 <cliDump+0x308>)
 80054d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	440b      	add	r3, r1
 80054dc:	33d2      	adds	r3, #210	; 0xd2
 80054de:	f993 3000 	ldrsb.w	r3, [r3]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d06d      	beq.n	80055c2 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	3301      	adds	r3, #1
 80054ea:	461a      	mov	r2, r3
 80054ec:	4959      	ldr	r1, [pc, #356]	; (8005654 <cliDump+0x328>)
 80054ee:	2000      	movs	r0, #0
 80054f0:	f00e f84c 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80054f4:	494f      	ldr	r1, [pc, #316]	; (8005634 <cliDump+0x308>)
 80054f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	440b      	add	r3, r1
 8005500:	33d0      	adds	r3, #208	; 0xd0
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	461a      	mov	r2, r3
 8005508:	4953      	ldr	r1, [pc, #332]	; (8005658 <cliDump+0x32c>)
 800550a:	2000      	movs	r0, #0
 800550c:	f00e f83e 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 8005510:	4948      	ldr	r1, [pc, #288]	; (8005634 <cliDump+0x308>)
 8005512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	440b      	add	r3, r1
 800551c:	33d1      	adds	r3, #209	; 0xd1
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	461a      	mov	r2, r3
 8005524:	494c      	ldr	r1, [pc, #304]	; (8005658 <cliDump+0x32c>)
 8005526:	2000      	movs	r0, #0
 8005528:	f00e f830 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 800552c:	4941      	ldr	r1, [pc, #260]	; (8005634 <cliDump+0x308>)
 800552e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	440b      	add	r3, r1
 8005538:	33d2      	adds	r3, #210	; 0xd2
 800553a:	f993 3000 	ldrsb.w	r3, [r3]
 800553e:	461a      	mov	r2, r3
 8005540:	4945      	ldr	r1, [pc, #276]	; (8005658 <cliDump+0x32c>)
 8005542:	2000      	movs	r0, #0
 8005544:	f00e f822 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 8005548:	493a      	ldr	r1, [pc, #232]	; (8005634 <cliDump+0x308>)
 800554a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	440b      	add	r3, r1
 8005554:	33d3      	adds	r3, #211	; 0xd3
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	493f      	ldr	r1, [pc, #252]	; (8005658 <cliDump+0x32c>)
 800555c:	2000      	movs	r0, #0
 800555e:	f00e f815 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005562:	4934      	ldr	r1, [pc, #208]	; (8005634 <cliDump+0x308>)
 8005564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	440b      	add	r3, r1
 800556e:	33d4      	adds	r3, #212	; 0xd4
 8005570:	f993 3000 	ldrsb.w	r3, [r3]
 8005574:	461a      	mov	r2, r3
 8005576:	4938      	ldr	r1, [pc, #224]	; (8005658 <cliDump+0x32c>)
 8005578:	2000      	movs	r0, #0
 800557a:	f00e f807 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 800557e:	492d      	ldr	r1, [pc, #180]	; (8005634 <cliDump+0x308>)
 8005580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	440b      	add	r3, r1
 800558a:	33d5      	adds	r3, #213	; 0xd5
 800558c:	f993 3000 	ldrsb.w	r3, [r3]
 8005590:	461a      	mov	r2, r3
 8005592:	4931      	ldr	r1, [pc, #196]	; (8005658 <cliDump+0x32c>)
 8005594:	2000      	movs	r0, #0
 8005596:	f00d fff9 	bl	801358c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800559a:	4926      	ldr	r1, [pc, #152]	; (8005634 <cliDump+0x308>)
 800559c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	440b      	add	r3, r1
 80055a6:	33d6      	adds	r3, #214	; 0xd6
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	492b      	ldr	r1, [pc, #172]	; (800565c <cliDump+0x330>)
 80055ae:	2000      	movs	r0, #0
 80055b0:	f00d ffec 	bl	801358c <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	3301      	adds	r3, #1
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d987      	bls.n	80054d0 <cliDump+0x1a4>
 80055c0:	e000      	b.n	80055c4 <cliDump+0x298>
                break;
 80055c2:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	3301      	adds	r3, #1
 80055c8:	461a      	mov	r2, r3
 80055ca:	4925      	ldr	r1, [pc, #148]	; (8005660 <cliDump+0x334>)
 80055cc:	2000      	movs	r0, #0
 80055ce:	f00d ffdd 	bl	801358c <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	e024      	b.n	8005622 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80055d8:	2300      	movs	r3, #0
 80055da:	633b      	str	r3, [r7, #48]	; 0x30
 80055dc:	e01b      	b.n	8005616 <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80055de:	4921      	ldr	r1, [pc, #132]	; (8005664 <cliDump+0x338>)
 80055e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	33c0      	adds	r3, #192	; 0xc0
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	fa42 f303 	asr.w	r3, r2, r3
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	3301      	adds	r3, #1
 8005608:	4917      	ldr	r1, [pc, #92]	; (8005668 <cliDump+0x33c>)
 800560a:	2000      	movs	r0, #0
 800560c:	f00d ffbe 	bl	801358c <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	3301      	adds	r3, #1
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b0b      	cmp	r3, #11
 800561a:	d9e0      	bls.n	80055de <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	3301      	adds	r3, #1
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	2b07      	cmp	r3, #7
 8005626:	d9d7      	bls.n	80055d8 <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
 800562c:	e057      	b.n	80056de <cliDump+0x3b2>
 800562e:	bf00      	nop
 8005630:	08025b3c 	.word	0x08025b3c
 8005634:	200019c8 	.word	0x200019c8
 8005638:	08026934 	.word	0x08026934
 800563c:	08025b6c 	.word	0x08025b6c
 8005640:	08025b78 	.word	0x08025b78
 8005644:	08025b80 	.word	0x08025b80
 8005648:	08025b84 	.word	0x08025b84
 800564c:	08025724 	.word	0x08025724
 8005650:	08025b88 	.word	0x08025b88
 8005654:	08025b9c 	.word	0x08025b9c
 8005658:	08025ba8 	.word	0x08025ba8
 800565c:	080259cc 	.word	0x080259cc
 8005660:	08025bac 	.word	0x08025bac
 8005664:	20001890 	.word	0x20001890
 8005668:	08025bc0 	.word	0x08025bc0
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	1c59      	adds	r1, r3, #1
 8005670:	4863      	ldr	r0, [pc, #396]	; (8005800 <cliDump+0x4d4>)
 8005672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4403      	add	r3, r0
 800567e:	33b8      	adds	r3, #184	; 0xb8
 8005680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005684:	461e      	mov	r6, r3
 8005686:	485e      	ldr	r0, [pc, #376]	; (8005800 <cliDump+0x4d4>)
 8005688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4403      	add	r3, r0
 8005694:	33bc      	adds	r3, #188	; 0xbc
 8005696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800569a:	461c      	mov	r4, r3
 800569c:	4858      	ldr	r0, [pc, #352]	; (8005800 <cliDump+0x4d4>)
 800569e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4403      	add	r3, r0
 80056aa:	33ba      	adds	r3, #186	; 0xba
 80056ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b0:	461d      	mov	r5, r3
 80056b2:	4853      	ldr	r0, [pc, #332]	; (8005800 <cliDump+0x4d4>)
 80056b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4403      	add	r3, r0
 80056c0:	33be      	adds	r3, #190	; 0xbe
 80056c2:	f993 3000 	ldrsb.w	r3, [r3]
 80056c6:	9302      	str	r3, [sp, #8]
 80056c8:	9501      	str	r5, [sp, #4]
 80056ca:	9400      	str	r4, [sp, #0]
 80056cc:	4633      	mov	r3, r6
 80056ce:	460a      	mov	r2, r1
 80056d0:	494c      	ldr	r1, [pc, #304]	; (8005804 <cliDump+0x4d8>)
 80056d2:	2000      	movs	r0, #0
 80056d4:	f00d ff5a 	bl	801358c <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	3301      	adds	r3, #1
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d9c3      	bls.n	800566c <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80056e4:	f001 fcc6 	bl	8007074 <featureMask>
 80056e8:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80056ee:	4a46      	ldr	r2, [pc, #280]	; (8005808 <cliDump+0x4dc>)
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80056fa:	4a43      	ldr	r2, [pc, #268]	; (8005808 <cliDump+0x4dc>)
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005702:	461a      	mov	r2, r3
 8005704:	4941      	ldr	r1, [pc, #260]	; (800580c <cliDump+0x4e0>)
 8005706:	2000      	movs	r0, #0
 8005708:	f00d ff40 	bl	801358c <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	3301      	adds	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005712:	e7ec      	b.n	80056ee <cliDump+0x3c2>
            break;
 8005714:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800571a:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <cliDump+0x4dc>)
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d015      	beq.n	8005752 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 8005726:	2201      	movs	r2, #1
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	461a      	mov	r2, r3
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 8005738:	4a33      	ldr	r2, [pc, #204]	; (8005808 <cliDump+0x4dc>)
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005740:	461a      	mov	r2, r3
 8005742:	4933      	ldr	r1, [pc, #204]	; (8005810 <cliDump+0x4e4>)
 8005744:	2000      	movs	r0, #0
 8005746:	f00d ff21 	bl	801358c <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	3301      	adds	r3, #1
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005750:	e7e3      	b.n	800571a <cliDump+0x3ee>
            break;
 8005752:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005754:	2300      	movs	r3, #0
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
 8005758:	e012      	b.n	8005780 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <cliDump+0x4e8>)
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	4413      	add	r3, r2
 8005760:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	4619      	mov	r1, r3
 8005768:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <cliDump+0x4ec>)
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	4413      	add	r3, r2
 800576e:	781a      	ldrb	r2, [r3, #0]
 8005770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005774:	440b      	add	r3, r1
 8005776:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	3301      	adds	r3, #1
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <cliDump+0x4e8>)
 8005782:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005786:	461a      	mov	r2, r3
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	4293      	cmp	r3, r2
 800578c:	d3e5      	bcc.n	800575a <cliDump+0x42e>
    buf[i] = '\0';
 800578e:	f107 0208 	add.w	r2, r7, #8
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	4413      	add	r3, r2
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	461a      	mov	r2, r3
 80057a0:	491e      	ldr	r1, [pc, #120]	; (800581c <cliDump+0x4f0>)
 80057a2:	2000      	movs	r0, #0
 80057a4:	f00d fef2 	bl	801358c <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80057a8:	2300      	movs	r3, #0
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
 80057ac:	e01f      	b.n	80057ee <cliDump+0x4c2>
        setval = &valueTable[i];
 80057ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4a19      	ldr	r2, [pc, #100]	; (8005820 <cliDump+0x4f4>)
 80057ba:	4413      	add	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 80057be:	4918      	ldr	r1, [pc, #96]	; (8005820 <cliDump+0x4f4>)
 80057c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	4914      	ldr	r1, [pc, #80]	; (8005824 <cliDump+0x4f8>)
 80057d2:	2000      	movs	r0, #0
 80057d4:	f00d feda 	bl	801358c <pifLog_Printf>
        cliPrintVar(setval, 0);
 80057d8:	2100      	movs	r1, #0
 80057da:	69b8      	ldr	r0, [r7, #24]
 80057dc:	f000 fb58 	bl	8005e90 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80057e0:	4911      	ldr	r1, [pc, #68]	; (8005828 <cliDump+0x4fc>)
 80057e2:	2000      	movs	r0, #0
 80057e4:	f00d fe40 	bl	8013468 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	3301      	adds	r3, #1
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	2b8e      	cmp	r3, #142	; 0x8e
 80057f2:	d9dc      	bls.n	80057ae <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	373c      	adds	r7, #60	; 0x3c
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fe:	bf00      	nop
 8005800:	20001890 	.word	0x20001890
 8005804:	08025bdc 	.word	0x08025bdc
 8005808:	08026998 	.word	0x08026998
 800580c:	08025bf4 	.word	0x08025bf4
 8005810:	08025c04 	.word	0x08025c04
 8005814:	200019c8 	.word	0x200019c8
 8005818:	08027608 	.word	0x08027608
 800581c:	08025c14 	.word	0x08025c14
 8005820:	08026adc 	.word	0x08026adc
 8005824:	08025c20 	.word	0x08025c20
 8005828:	08025744 	.word	0x08025744

0800582c <cliExit>:

static int cliExit(int argc, char *argv[])
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 8005836:	490c      	ldr	r1, [pc, #48]	; (8005868 <cliExit+0x3c>)
 8005838:	2000      	movs	r0, #0
 800583a:	f00d fe15 	bl	8013468 <pifLog_Print>
    *cliBuffer = '\0';
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <cliExit+0x40>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <cliExit+0x44>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <cliExit+0x48>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005850:	f005 fbce 	bl	800aff0 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fafa 	bl	8005e50 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	08025c2c 	.word	0x08025c2c
 800586c:	200007ec 	.word	0x200007ec
 8005870:	2000081c 	.word	0x2000081c
 8005874:	200007eb 	.word	0x200007eb

08005878 <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005882:	f001 fbf7 	bl	8007074 <featureMask>
 8005886:	60f8      	str	r0, [r7, #12]

    if (argc == 1) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d127      	bne.n	80058de <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 800588e:	4952      	ldr	r1, [pc, #328]	; (80059d8 <cliFeature+0x160>)
 8005890:	2000      	movs	r0, #0
 8005892:	f00d fde9 	bl	8013468 <pifLog_Print>
        for (i = 0; ; i++) {
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800589a:	4a50      	ldr	r2, [pc, #320]	; (80059dc <cliFeature+0x164>)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80058a6:	2201      	movs	r2, #1
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80058b8:	4a48      	ldr	r2, [pc, #288]	; (80059dc <cliFeature+0x164>)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c0:	461a      	mov	r2, r3
 80058c2:	4947      	ldr	r1, [pc, #284]	; (80059e0 <cliFeature+0x168>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	f00d fe61 	bl	801358c <pifLog_Printf>
        for (i = 0; ; i++) {
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	3301      	adds	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058d0:	e7e3      	b.n	800589a <cliFeature+0x22>
                break;
 80058d2:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80058d4:	4943      	ldr	r1, [pc, #268]	; (80059e4 <cliFeature+0x16c>)
 80058d6:	2000      	movs	r0, #0
 80058d8:	f00d fdc6 	bl	8013468 <pifLog_Print>
 80058dc:	e076      	b.n	80059cc <cliFeature+0x154>
    } else if (strcasecmp(argv[1], "list") == 0) {
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4940      	ldr	r1, [pc, #256]	; (80059e8 <cliFeature+0x170>)
 80058e6:	4618      	mov	r0, r3
 80058e8:	f01c f9d8 	bl	8021c9c <strcasecmp>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11e      	bne.n	8005930 <cliFeature+0xb8>
        pifLog_Print(LT_NONE, "Available features: ");
 80058f2:	493e      	ldr	r1, [pc, #248]	; (80059ec <cliFeature+0x174>)
 80058f4:	2000      	movs	r0, #0
 80058f6:	f00d fdb7 	bl	8013468 <pifLog_Print>
        for (i = 0; ; i++) {
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058fe:	4a37      	ldr	r2, [pc, #220]	; (80059dc <cliFeature+0x164>)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <cliFeature+0xac>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800590a:	4a34      	ldr	r2, [pc, #208]	; (80059dc <cliFeature+0x164>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	461a      	mov	r2, r3
 8005914:	4932      	ldr	r1, [pc, #200]	; (80059e0 <cliFeature+0x168>)
 8005916:	2000      	movs	r0, #0
 8005918:	f00d fe38 	bl	801358c <pifLog_Printf>
        for (i = 0; ; i++) {
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	3301      	adds	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005922:	e7ec      	b.n	80058fe <cliFeature+0x86>
                break;
 8005924:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005926:	492f      	ldr	r1, [pc, #188]	; (80059e4 <cliFeature+0x16c>)
 8005928:	2000      	movs	r0, #0
 800592a:	f00d fd9d 	bl	8013468 <pifLog_Print>
 800592e:	e04d      	b.n	80059cc <cliFeature+0x154>
    } else {
        bool remove = false;
 8005930:	2300      	movs	r3, #0
 8005932:	74fb      	strb	r3, [r7, #19]
        if (argv[1][0] == '-') {
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3304      	adds	r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b2d      	cmp	r3, #45	; 0x2d
 800593e:	d101      	bne.n	8005944 <cliFeature+0xcc>
            // remove feature
            remove = true;
 8005940:	2301      	movs	r3, #1
 8005942:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005948:	4a24      	ldr	r2, [pc, #144]	; (80059dc <cliFeature+0x164>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <cliFeature+0xe6>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005954:	4926      	ldr	r1, [pc, #152]	; (80059f0 <cliFeature+0x178>)
 8005956:	2000      	movs	r0, #0
 8005958:	f00d fd86 	bl	8013468 <pifLog_Print>
                break;
 800595c:	e036      	b.n	80059cc <cliFeature+0x154>
            }
            if (strcasecmp(argv[1] + 1, featureNames[i]) == 0) {
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	3304      	adds	r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	491d      	ldr	r1, [pc, #116]	; (80059dc <cliFeature+0x164>)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f01c f993 	bl	8021c9c <strcasecmp>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d123      	bne.n	80059c4 <cliFeature+0x14c>
                if (remove) {
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <cliFeature+0x122>
                    featureClear(1 << i);
 8005982:	2201      	movs	r2, #1
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fb52 	bl	8007034 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 8005990:	4918      	ldr	r1, [pc, #96]	; (80059f4 <cliFeature+0x17c>)
 8005992:	2000      	movs	r0, #0
 8005994:	f00d fd68 	bl	8013468 <pifLog_Print>
 8005998:	e00a      	b.n	80059b0 <cliFeature+0x138>
                } else {
                    featureSet(1 << i);
 800599a:	2201      	movs	r2, #1
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 fb34 	bl	8007010 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80059a8:	4913      	ldr	r1, [pc, #76]	; (80059f8 <cliFeature+0x180>)
 80059aa:	2000      	movs	r0, #0
 80059ac:	f00d fd5c 	bl	8013468 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <cliFeature+0x164>)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4910      	ldr	r1, [pc, #64]	; (80059fc <cliFeature+0x184>)
 80059bc:	2000      	movs	r0, #0
 80059be:	f00d fde5 	bl	801358c <pifLog_Printf>
                break;
 80059c2:	e003      	b.n	80059cc <cliFeature+0x154>
        for (i = 0; ; i++) {
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	3301      	adds	r3, #1
 80059c8:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80059ca:	e7bd      	b.n	8005948 <cliFeature+0xd0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	08025c44 	.word	0x08025c44
 80059dc:	08026998 	.word	0x08026998
 80059e0:	08025c58 	.word	0x08025c58
 80059e4:	08025744 	.word	0x08025744
 80059e8:	08025c5c 	.word	0x08025c5c
 80059ec:	08025c64 	.word	0x08025c64
 80059f0:	08025c7c 	.word	0x08025c7c
 80059f4:	08025c98 	.word	0x08025c98
 80059f8:	08025ca4 	.word	0x08025ca4
 80059fc:	08025724 	.word	0x08025724

08005a00 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005a0a:	f003 fa2b 	bl	8008e64 <gpsSetPassthrough>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <cliGpsPassthrough+0x1a>
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d005      	beq.n	8005a24 <cliGpsPassthrough+0x24>
 8005a18:	e009      	b.n	8005a2e <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <cliGpsPassthrough+0x44>)
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f00d fd23 	bl	8013468 <pifLog_Print>
        break;
 8005a22:	e009      	b.n	8005a38 <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005a24:	4908      	ldr	r1, [pc, #32]	; (8005a48 <cliGpsPassthrough+0x48>)
 8005a26:	2000      	movs	r0, #0
 8005a28:	f00d fd1e 	bl	8013468 <pifLog_Print>
        break;
 8005a2c:	e004      	b.n	8005a38 <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 8005a2e:	4907      	ldr	r1, [pc, #28]	; (8005a4c <cliGpsPassthrough+0x4c>)
 8005a30:	2000      	movs	r0, #0
 8005a32:	f00d fd19 	bl	8013468 <pifLog_Print>
        break;
 8005a36:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08025cb0 	.word	0x08025cb0
 8005a48:	08025cd0 	.word	0x08025cd0
 8005a4c:	08025cf0 	.word	0x08025cf0

08005a50 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 2) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	dc02      	bgt.n	8005a66 <cliMap+0x16>
 8005a60:	f06f 0302 	mvn.w	r3, #2
 8005a64:	e09d      	b.n	8005ba2 <cliMap+0x152>

    len = strlen(argv[1]);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fa fbbd 	bl	80001ec <strlen>
 8005a72:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005a74:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <cliMap+0x15c>)
 8005a76:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d160      	bne.n	8005b44 <cliMap+0xf4>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	e01d      	b.n	8005ac4 <cliMap+0x74>
            argv[1][i] = toupper((unsigned char)argv[1][i]);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	75fb      	strb	r3, [r7, #23]
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a45      	ldr	r2, [pc, #276]	; (8005bb0 <cliMap+0x160>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d102      	bne.n	8005aae <cliMap+0x5e>
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	3b20      	subs	r3, #32
 8005aac:	e000      	b.n	8005ab0 <cliMap+0x60>
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	3204      	adds	r2, #4
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	440a      	add	r2, r1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	4b39      	ldr	r3, [pc, #228]	; (8005bac <cliMap+0x15c>)
 8005ac6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005aca:	461a      	mov	r2, r3
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d3da      	bcc.n	8005a88 <cliMap+0x38>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e028      	b.n	8005b2a <cliMap+0xda>
            if (strchr(rcChannelLetters, argv[1][i]) && !strchr(argv[1] + i + 1, argv[1][i]))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4833      	ldr	r0, [pc, #204]	; (8005bb4 <cliMap+0x164>)
 8005ae8:	f01c f903 	bl	8021cf2 <strchr>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d015      	beq.n	8005b1e <cliMap+0xce>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3304      	adds	r3, #4
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	18d0      	adds	r0, r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3304      	adds	r3, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f01c f8f1 	bl	8021cf2 <strchr>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <cliMap+0xce>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e005      	b.n	8005b2a <cliMap+0xda>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005b1e:	4926      	ldr	r1, [pc, #152]	; (8005bb8 <cliMap+0x168>)
 8005b20:	2000      	movs	r0, #0
 8005b22:	f00d fca1 	bl	8013468 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e03b      	b.n	8005ba2 <cliMap+0x152>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b2a:	4b20      	ldr	r3, [pc, #128]	; (8005bac <cliMap+0x15c>)
 8005b2c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b30:	461a      	mov	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d3cf      	bcc.n	8005ad8 <cliMap+0x88>
        }
        parseRcChannels(argv[1]);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fcc4 	bl	80064cc <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005b44:	491d      	ldr	r1, [pc, #116]	; (8005bbc <cliMap+0x16c>)
 8005b46:	2000      	movs	r0, #0
 8005b48:	f00d fc8e 	bl	8013468 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e012      	b.n	8005b78 <cliMap+0x128>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <cliMap+0x15c>)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <cliMap+0x164>)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	f107 0320 	add.w	r3, r7, #32
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <cliMap+0x15c>)
 8005b7a:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b7e:	461a      	mov	r2, r3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d3e5      	bcc.n	8005b52 <cliMap+0x102>
    out[i] = '\0';
 8005b86:	f107 020c 	add.w	r2, r7, #12
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	461a      	mov	r2, r3
 8005b98:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <cliMap+0x170>)
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f00d fcf6 	bl	801358c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200019c8 	.word	0x200019c8
 8005bb0:	08027fa4 	.word	0x08027fa4
 8005bb4:	08027608 	.word	0x08027608
 8005bb8:	08025d18 	.word	0x08025d18
 8005bbc:	08025d38 	.word	0x08025d38
 8005bc0:	08025724 	.word	0x08025724

08005bc4 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d10c      	bne.n	8005bee <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005bd4:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <cliMixer+0x130>)
 8005bd6:	795b      	ldrb	r3, [r3, #5]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4a47      	ldr	r2, [pc, #284]	; (8005cf8 <cliMixer+0x134>)
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	461a      	mov	r2, r3
 8005be2:	4946      	ldr	r1, [pc, #280]	; (8005cfc <cliMixer+0x138>)
 8005be4:	2000      	movs	r0, #0
 8005be6:	f00d fcd1 	bl	801358c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e07d      	b.n	8005cea <cliMixer+0x126>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4942      	ldr	r1, [pc, #264]	; (8005d00 <cliMixer+0x13c>)
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f01c f850 	bl	8021c9c <strcasecmp>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11f      	bne.n	8005c42 <cliMixer+0x7e>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005c02:	4940      	ldr	r1, [pc, #256]	; (8005d04 <cliMixer+0x140>)
 8005c04:	2000      	movs	r0, #0
 8005c06:	f00d fc2f 	bl	8013468 <pifLog_Print>
        for (i = 0; ; i++) {
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	; (8005cf8 <cliMixer+0x134>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <cliMixer+0x70>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005c1a:	4a37      	ldr	r2, [pc, #220]	; (8005cf8 <cliMixer+0x134>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c22:	461a      	mov	r2, r3
 8005c24:	4938      	ldr	r1, [pc, #224]	; (8005d08 <cliMixer+0x144>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	f00d fcb0 	bl	801358c <pifLog_Printf>
        for (i = 0; ; i++) {
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c32:	e7ec      	b.n	8005c0e <cliMixer+0x4a>
                break;
 8005c34:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005c36:	4935      	ldr	r1, [pc, #212]	; (8005d0c <cliMixer+0x148>)
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f00d fc15 	bl	8013468 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e053      	b.n	8005cea <cliMixer+0x126>
    }

    for (i = 0; ; i++) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005c46:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <cliMixer+0x134>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <cliMixer+0x9a>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005c52:	492f      	ldr	r1, [pc, #188]	; (8005d10 <cliMixer+0x14c>)
 8005c54:	2000      	movs	r0, #0
 8005c56:	f00d fc07 	bl	8013468 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e045      	b.n	8005cea <cliMixer+0x126>
        }
        if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3304      	adds	r3, #4
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4924      	ldr	r1, [pc, #144]	; (8005cf8 <cliMixer+0x134>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f01c f814 	bl	8021c9c <strcasecmp>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d131      	bne.n	8005cde <cliMixer+0x11a>
            mcfg.mixerConfiguration = i + 1;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <cliMixer+0x130>)
 8005c84:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005c86:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <cliMixer+0x134>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4920      	ldr	r1, [pc, #128]	; (8005d14 <cliMixer+0x150>)
 8005c92:	2000      	movs	r0, #0
 8005c94:	f00d fc7a 	bl	801358c <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005c98:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <cliMixer+0x130>)
 8005c9a:	795b      	ldrb	r3, [r3, #5]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d003      	beq.n	8005ca8 <cliMixer+0xe4>
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <cliMixer+0x130>)
 8005ca2:	795b      	ldrb	r3, [r3, #5]
 8005ca4:	2b0e      	cmp	r3, #14
 8005ca6:	d11e      	bne.n	8005ce6 <cliMixer+0x122>
                cfg.dynThrPID = 90;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <cliMixer+0x154>)
 8005caa:	225a      	movs	r2, #90	; 0x5a
 8005cac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <cliMixer+0x154>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005cb8:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <cliMixer+0x154>)
 8005cba:	221e      	movs	r2, #30
 8005cbc:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <cliMixer+0x154>)
 8005cc0:	2214      	movs	r2, #20
 8005cc2:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <cliMixer+0x154>)
 8005cc6:	222d      	movs	r2, #45	; 0x2d
 8005cc8:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005cca:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <cliMixer+0x154>)
 8005ccc:	221e      	movs	r2, #30
 8005cce:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <cliMixer+0x154>)
 8005cd2:	2214      	movs	r2, #20
 8005cd4:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <cliMixer+0x154>)
 8005cd8:	222d      	movs	r2, #45	; 0x2d
 8005cda:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005cdc:	e003      	b.n	8005ce6 <cliMixer+0x122>
    for (i = 0; ; i++) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005ce4:	e7af      	b.n	8005c46 <cliMixer+0x82>
            break;
 8005ce6:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200019c8 	.word	0x200019c8
 8005cf8:	08026934 	.word	0x08026934
 8005cfc:	08025d50 	.word	0x08025d50
 8005d00:	08025c5c 	.word	0x08025c5c
 8005d04:	08025d64 	.word	0x08025d64
 8005d08:	08025c58 	.word	0x08025c58
 8005d0c:	08025744 	.word	0x08025744
 8005d10:	08025758 	.word	0x08025758
 8005d14:	08025d78 	.word	0x08025d78
 8005d18:	20001890 	.word	0x20001890

08005d1c <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d105      	bne.n	8005d40 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005d34:	4926      	ldr	r1, [pc, #152]	; (8005dd0 <cliMotor+0xb4>)
 8005d36:	2000      	movs	r0, #0
 8005d38:	f00d fb96 	bl	8013468 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e043      	b.n	8005dc8 <cliMotor+0xac>
    }

    if (argc < 3) {
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	dc0a      	bgt.n	8005d5c <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005d46:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <cliMotor+0xb8>)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4921      	ldr	r1, [pc, #132]	; (8005dd8 <cliMotor+0xbc>)
 8005d52:	2000      	movs	r0, #0
 8005d54:	f00d fc1a 	bl	801358c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e035      	b.n	8005dc8 <cliMotor+0xac>
    }

    motor_index = atoi(argv[1]);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f01b fe74 	bl	8021a50 <atoi>
 8005d68:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[2]);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f01b fe6d 	bl	8021a50 <atoi>
 8005d76:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	db02      	blt.n	8005d84 <cliMotor+0x68>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b0b      	cmp	r3, #11
 8005d82:	dd06      	ble.n	8005d92 <cliMotor+0x76>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005d84:	220c      	movs	r2, #12
 8005d86:	4915      	ldr	r1, [pc, #84]	; (8005ddc <cliMotor+0xc0>)
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f00d fbff 	bl	801358c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e01a      	b.n	8005dc8 <cliMotor+0xac>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d98:	db03      	blt.n	8005da2 <cliMotor+0x86>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005da0:	dd05      	ble.n	8005dae <cliMotor+0x92>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005da2:	490f      	ldr	r1, [pc, #60]	; (8005de0 <cliMotor+0xc4>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f00d fb5f 	bl	8013468 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e00c      	b.n	8005dc8 <cliMotor+0xac>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	490c      	ldr	r1, [pc, #48]	; (8005de4 <cliMotor+0xc8>)
 8005db4:	2000      	movs	r0, #0
 8005db6:	f00d fbe9 	bl	801358c <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	b219      	sxth	r1, r3
 8005dbe:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <cliMotor+0xb8>)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	08025d8c 	.word	0x08025d8c
 8005dd4:	20001fd8 	.word	0x20001fd8
 8005dd8:	08025dc8 	.word	0x08025dc8
 8005ddc:	08025de0 	.word	0x08025de0
 8005de0:	08025e08 	.word	0x08025e08
 8005de4:	08025e2c 	.word	0x08025e2c

08005de8 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d108      	bne.n	8005e0a <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005df8:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <cliProfile+0x60>)
 8005dfa:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4912      	ldr	r1, [pc, #72]	; (8005e4c <cliProfile+0x64>)
 8005e02:	2000      	movs	r0, #0
 8005e04:	f00d fbc2 	bl	801358c <pifLog_Printf>
 8005e08:	e019      	b.n	8005e3e <cliProfile+0x56>
    } else {
        i = atoi(argv[1]);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f01b fe1d 	bl	8021a50 <atoi>
 8005e16:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db0f      	blt.n	8005e3e <cliProfile+0x56>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	dc0c      	bgt.n	8005e3e <cliProfile+0x56>
            mcfg.current_profile = i;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <cliProfile+0x60>)
 8005e2a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	2000      	movs	r0, #0
 8005e32:	f000 fcf5 	bl	8006820 <writeEEPROM>
            cliProfile(1, NULL);
 8005e36:	2100      	movs	r1, #0
 8005e38:	2001      	movs	r0, #1
 8005e3a:	f7ff ffd5 	bl	8005de8 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200019c8 	.word	0x200019c8
 8005e4c:	08025e48 	.word	0x08025e48

08005e50 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005e5a:	490b      	ldr	r1, [pc, #44]	; (8005e88 <cliSave+0x38>)
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f00d fb03 	bl	8013468 <pifLog_Print>
    writeEEPROM(0, true);
 8005e62:	2101      	movs	r1, #1
 8005e64:	2000      	movs	r0, #0
 8005e66:	f000 fcdb 	bl	8006820 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005e6a:	4908      	ldr	r1, [pc, #32]	; (8005e8c <cliSave+0x3c>)
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f00d fafb 	bl	8013468 <pifLog_Print>
    pif_Delay1ms(10);
 8005e72:	200a      	movs	r0, #10
 8005e74:	f00b fb30 	bl	80114d8 <pif_Delay1ms>
    systemReset(false);
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f7fc f8ab 	bl	8001fd4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08025e60 	.word	0x08025e60
 8005e8c:	08025e6c 	.word	0x08025e6c

08005e90 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d864      	bhi.n	8005f70 <cliPrintVar+0xe0>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <cliPrintVar+0x1c>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ec5 	.word	0x08005ec5
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005efb 	.word	0x08005efb
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	617b      	str	r3, [r7, #20]
            break;
 8005ecc:	e050      	b.n	8005f70 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8005ed6:	617b      	str	r3, [r7, #20]
            break;
 8005ed8:	e04a      	b.n	8005f70 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	617b      	str	r3, [r7, #20]
            break;
 8005ee2:	e045      	b.n	8005f70 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eec:	617b      	str	r3, [r7, #20]
            break;
 8005eee:	e03f      	b.n	8005f70 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	617b      	str	r3, [r7, #20]
            break;
 8005ef8:	e03a      	b.n	8005f70 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	f107 030c 	add.w	r3, r7, #12
 8005f06:	4618      	mov	r0, r3
 8005f08:	eeb0 0a67 	vmov.f32	s0, s15
 8005f0c:	f7fe fac2 	bl	8004494 <ftoa>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	4921      	ldr	r1, [pc, #132]	; (8005f9c <cliPrintVar+0x10c>)
 8005f16:	2000      	movs	r0, #0
 8005f18:	f00d fb38 	bl	801358c <pifLog_Printf>
            if (full) {
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d037      	beq.n	8005f92 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f2e:	f107 030c 	add.w	r3, r7, #12
 8005f32:	4618      	mov	r0, r3
 8005f34:	eeb0 0a67 	vmov.f32	s0, s15
 8005f38:	f7fe faac 	bl	8004494 <ftoa>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4917      	ldr	r1, [pc, #92]	; (8005fa0 <cliPrintVar+0x110>)
 8005f42:	2000      	movs	r0, #0
 8005f44:	f00d fb22 	bl	801358c <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f54:	f107 030c 	add.w	r3, r7, #12
 8005f58:	4618      	mov	r0, r3
 8005f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f5e:	f7fe fa99 	bl	8004494 <ftoa>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <cliPrintVar+0x110>)
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f00d fb0f 	bl	801358c <pifLog_Printf>
 8005f6e:	e011      	b.n	8005f94 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	490c      	ldr	r1, [pc, #48]	; (8005fa4 <cliPrintVar+0x114>)
 8005f74:	2000      	movs	r0, #0
 8005f76:	f00d fb09 	bl	801358c <pifLog_Printf>
    if (full)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <cliPrintVar+0x118>)
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f00d fafe 	bl	801358c <pifLog_Printf>
 8005f90:	e000      	b.n	8005f94 <cliPrintVar+0x104>
            return; // return from case for float only
 8005f92:	bf00      	nop
}
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08025b84 	.word	0x08025b84
 8005fa0:	08025e7c 	.word	0x08025e7c
 8005fa4:	08025a30 	.word	0x08025a30
 8005fa8:	08025e80 	.word	0x08025e80

08005fac <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	791b      	ldrb	r3, [r3, #4]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d824      	bhi.n	8006008 <cliSetVar+0x5c>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <cliSetVar+0x18>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fdd 	.word	0x08005fdd
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005fff 	.word	0x08005fff
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
            break;
 8005fe6:	e00f      	b.n	8006008 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	b212      	sxth	r2, r2
 8005ff0:	801a      	strh	r2, [r3, #0]
            break;
 8005ff2:	e009      	b.n	8006008 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	601a      	str	r2, [r3, #0]
            break;
 8005ffc:	e004      	b.n	8006008 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	601a      	str	r2, [r3, #0]
            break;
 8006006:	bf00      	nop
    }
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8006014:	b5b0      	push	{r4, r5, r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	613b      	str	r3, [r7, #16]

    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d008      	beq.n	8006044 <cliSet+0x30>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d137      	bne.n	80060a8 <cliSet+0x94>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	3304      	adds	r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b2a      	cmp	r3, #42	; 0x2a
 8006042:	d131      	bne.n	80060a8 <cliSet+0x94>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8006044:	4988      	ldr	r1, [pc, #544]	; (8006268 <cliSet+0x254>)
 8006046:	2000      	movs	r0, #0
 8006048:	f00d fa0e 	bl	8013468 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e026      	b.n	80060a0 <cliSet+0x8c>
            val = &valueTable[i];
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a83      	ldr	r2, [pc, #524]	; (800626c <cliSet+0x258>)
 800605e:	4413      	add	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006062:	4982      	ldr	r1, [pc, #520]	; (800626c <cliSet+0x258>)
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	497e      	ldr	r1, [pc, #504]	; (8006270 <cliSet+0x25c>)
 8006076:	2000      	movs	r0, #0
 8006078:	f00d fa88 	bl	801358c <pifLog_Printf>
            cliPrintVar(val, strlen(argv[1])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3304      	adds	r3, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa f8b2 	bl	80001ec <strlen>
 8006088:	4603      	mov	r3, r0
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff feff 	bl	8005e90 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8006092:	4978      	ldr	r1, [pc, #480]	; (8006274 <cliSet+0x260>)
 8006094:	2000      	movs	r0, #0
 8006096:	f00d f9e7 	bl	8013468 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	3301      	adds	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b8e      	cmp	r3, #142	; 0x8e
 80060a4:	d9d5      	bls.n	8006052 <cliSet+0x3e>
    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 80060a6:	e0da      	b.n	800625e <cliSet+0x24a>
        }
    } else if ((eqptr = strstr(argv[1], "=")) != NULL) {
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	3304      	adds	r3, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	213d      	movs	r1, #61	; 0x3d
 80060b0:	4618      	mov	r0, r3
 80060b2:	f01b fe1e 	bl	8021cf2 <strchr>
 80060b6:	61b8      	str	r0, [r7, #24]
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8097 	beq.w	80061ee <cliSet+0x1da>
        // has equal, set var
        eqptr++;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 80060c6:	69b8      	ldr	r0, [r7, #24]
 80060c8:	f01b fcc2 	bl	8021a50 <atoi>
 80060cc:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 80060ce:	69b8      	ldr	r0, [r7, #24]
 80060d0:	f7fe f8ec 	bl	80042ac <_atof>
 80060d4:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e07d      	b.n	80061da <cliSet+0x1c6>
            val = &valueTable[i];
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a60      	ldr	r2, [pc, #384]	; (800626c <cliSet+0x258>)
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[1], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	3304      	adds	r3, #4
 80060f2:	681c      	ldr	r4, [r3, #0]
 80060f4:	495d      	ldr	r1, [pc, #372]	; (800626c <cliSet+0x258>)
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	681d      	ldr	r5, [r3, #0]
 8006104:	4959      	ldr	r1, [pc, #356]	; (800626c <cliSet+0x258>)
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fa f869 	bl	80001ec <strlen>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	4629      	mov	r1, r5
 8006120:	4620      	mov	r0, r4
 8006122:	f01b fdfb 	bl	8021d1c <strncasecmp>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d153      	bne.n	80061d4 <cliSet+0x1c0>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 800612c:	494f      	ldr	r1, [pc, #316]	; (800626c <cliSet+0x258>)
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	330c      	adds	r3, #12
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006146:	ed97 7a04 	vldr	s14, [r7, #16]
 800614a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	db39      	blt.n	80061c8 <cliSet+0x1b4>
 8006154:	4945      	ldr	r1, [pc, #276]	; (800626c <cliSet+0x258>)
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	3310      	adds	r3, #16
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617a:	d825      	bhi.n	80061c8 <cliSet+0x1b4>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 800617c:	493b      	ldr	r1, [pc, #236]	; (800626c <cliSet+0x258>)
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3304      	adds	r3, #4
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b05      	cmp	r3, #5
 8006190:	d102      	bne.n	8006198 <cliSet+0x184>
                        tmp.float_value = valuef;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	e001      	b.n	800619c <cliSet+0x188>
                    else
                        tmp.int_value = value;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff ff04 	bl	8005fac <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 80061a4:	4931      	ldr	r1, [pc, #196]	; (800626c <cliSet+0x258>)
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	4930      	ldr	r1, [pc, #192]	; (8006278 <cliSet+0x264>)
 80061b8:	2000      	movs	r0, #0
 80061ba:	f00d f9e7 	bl	801358c <pifLog_Printf>
                    cliPrintVar(val, 0);
 80061be:	2100      	movs	r1, #0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fe65 	bl	8005e90 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80061c6:	e003      	b.n	80061d0 <cliSet+0x1bc>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 80061c8:	492c      	ldr	r1, [pc, #176]	; (800627c <cliSet+0x268>)
 80061ca:	2000      	movs	r0, #0
 80061cc:	f00d f94c 	bl	8013468 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e045      	b.n	8006260 <cliSet+0x24c>
        for (i = 0; i < VALUE_COUNT; i++) {
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b8e      	cmp	r3, #142	; 0x8e
 80061de:	f67f af7e 	bls.w	80060de <cliSet+0xca>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 80061e2:	4927      	ldr	r1, [pc, #156]	; (8006280 <cliSet+0x26c>)
 80061e4:	2000      	movs	r0, #0
 80061e6:	f00d f93f 	bl	8013468 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e038      	b.n	8006260 <cliSet+0x24c>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e031      	b.n	8006258 <cliSet+0x244>
            if (strstr(valueTable[i].name, argv[1])) {
 80061f4:	491d      	ldr	r1, [pc, #116]	; (800626c <cliSet+0x258>)
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	3304      	adds	r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f01b fdba 	bl	8021d86 <strstr>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01c      	beq.n	8006252 <cliSet+0x23e>
                val = &valueTable[i];
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4a12      	ldr	r2, [pc, #72]	; (800626c <cliSet+0x258>)
 8006224:	4413      	add	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006228:	4910      	ldr	r1, [pc, #64]	; (800626c <cliSet+0x258>)
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	490d      	ldr	r1, [pc, #52]	; (8006270 <cliSet+0x25c>)
 800623c:	2000      	movs	r0, #0
 800623e:	f00d f9a5 	bl	801358c <pifLog_Printf>
                cliPrintVar(val, 0);
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe23 	bl	8005e90 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 800624a:	490a      	ldr	r1, [pc, #40]	; (8006274 <cliSet+0x260>)
 800624c:	2000      	movs	r0, #0
 800624e:	f00d f90b 	bl	8013468 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b8e      	cmp	r3, #142	; 0x8e
 800625c:	d9ca      	bls.n	80061f4 <cliSet+0x1e0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bdb0      	pop	{r4, r5, r7, pc}
 8006268:	08025e88 	.word	0x08025e88
 800626c:	08026adc 	.word	0x08026adc
 8006270:	08025ea0 	.word	0x08025ea0
 8006274:	08025744 	.word	0x08025744
 8006278:	08025ea8 	.word	0x08025ea8
 800627c:	08025eb4 	.word	0x08025eb4
 8006280:	08025edc 	.word	0x08025edc

08006284 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <cliStatus+0x13c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <cliStatus+0x140>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	099a      	lsrs	r2, r3, #6
 800629a:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <cliStatus+0x144>)
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	4619      	mov	r1, r3
 80062a0:	4b4a      	ldr	r3, [pc, #296]	; (80063cc <cliStatus+0x148>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	460b      	mov	r3, r1
 80062a8:	4949      	ldr	r1, [pc, #292]	; (80063d0 <cliStatus+0x14c>)
 80062aa:	2000      	movs	r0, #0
 80062ac:	f00d f96e 	bl	801358c <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 80062b0:	f000 fe8c 	bl	8006fcc <sensorsMask>
 80062b4:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 80062b6:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <cliStatus+0x150>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a47      	ldr	r2, [pc, #284]	; (80063d8 <cliStatus+0x154>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	0c9b      	lsrs	r3, r3, #18
 80062c2:	4a46      	ldr	r2, [pc, #280]	; (80063dc <cliStatus+0x158>)
 80062c4:	4946      	ldr	r1, [pc, #280]	; (80063e0 <cliStatus+0x15c>)
 80062c6:	2000      	movs	r0, #0
 80062c8:	f00d f960 	bl	801358c <pifLog_Printf>
    for (i = 0; ; i++) {
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	4a44      	ldr	r2, [pc, #272]	; (80063e4 <cliStatus+0x160>)
 80062d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d015      	beq.n	8006308 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2201      	movs	r2, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	4a3c      	ldr	r2, [pc, #240]	; (80063e4 <cliStatus+0x160>)
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	461a      	mov	r2, r3
 80062f8:	493b      	ldr	r1, [pc, #236]	; (80063e8 <cliStatus+0x164>)
 80062fa:	2000      	movs	r0, #0
 80062fc:	f00d f946 	bl	801358c <pifLog_Printf>
    for (i = 0; ; i++) {
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	3301      	adds	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 8006306:	e7e3      	b.n	80062d0 <cliStatus+0x4c>
            break;
 8006308:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 800630a:	4938      	ldr	r1, [pc, #224]	; (80063ec <cliStatus+0x168>)
 800630c:	2000      	movs	r0, #0
 800630e:	f00d f8ab 	bl	8013468 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 8006312:	2001      	movs	r0, #1
 8006314:	f000 fe1e 	bl	8006f54 <sensors>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 800631e:	4b34      	ldr	r3, [pc, #208]	; (80063f0 <cliStatus+0x16c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4933      	ldr	r1, [pc, #204]	; (80063f4 <cliStatus+0x170>)
 8006326:	2000      	movs	r0, #0
 8006328:	f00d f930 	bl	801358c <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 800632c:	2002      	movs	r0, #2
 800632e:	f000 fe11 	bl	8006f54 <sensors>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <cliStatus+0xc2>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <cliStatus+0x16c>)
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	461a      	mov	r2, r3
 800633e:	492e      	ldr	r1, [pc, #184]	; (80063f8 <cliStatus+0x174>)
 8006340:	2000      	movs	r0, #0
 8006342:	f00d f923 	bl	801358c <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 8006346:	2008      	movs	r0, #8
 8006348:	f000 fe04 	bl	8006f54 <sensors>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <cliStatus+0xdc>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006352:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <cliStatus+0x16c>)
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	461a      	mov	r2, r3
 8006358:	4928      	ldr	r1, [pc, #160]	; (80063fc <cliStatus+0x178>)
 800635a:	2000      	movs	r0, #0
 800635c:	f00d f916 	bl	801358c <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006360:	2004      	movs	r0, #4
 8006362:	f000 fdf7 	bl	8006f54 <sensors>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d006      	beq.n	800637a <cliStatus+0xf6>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 800636c:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <cliStatus+0x16c>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	461a      	mov	r2, r3
 8006372:	4923      	ldr	r1, [pc, #140]	; (8006400 <cliStatus+0x17c>)
 8006374:	2000      	movs	r0, #0
 8006376:	f00d f909 	bl	801358c <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 800637a:	491c      	ldr	r1, [pc, #112]	; (80063ec <cliStatus+0x168>)
 800637c:	2000      	movs	r0, #0
 800637e:	f00d f873 	bl	8013468 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006382:	4b20      	ldr	r3, [pc, #128]	; (8006404 <cliStatus+0x180>)
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <cliStatus+0x184>)
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	4619      	mov	r1, r3
 800638e:	f240 536c 	movw	r3, #1388	; 0x56c
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	460b      	mov	r3, r1
 8006396:	491d      	ldr	r1, [pc, #116]	; (800640c <cliStatus+0x188>)
 8006398:	2000      	movs	r0, #0
 800639a:	f00d f8f7 	bl	801358c <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 800639e:	481c      	ldr	r0, [pc, #112]	; (8006410 <cliStatus+0x18c>)
 80063a0:	f00e fcc3 	bl	8014d2a <pifTimerManager_Count>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	491a      	ldr	r1, [pc, #104]	; (8006414 <cliStatus+0x190>)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f00d f8ee 	bl	801358c <pifLog_Printf>

    cliStatusCallback();
 80063b0:	f000 f872 	bl	8006498 <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	2000136c 	.word	0x2000136c
 80063c4:	10624dd3 	.word	0x10624dd3
 80063c8:	200020b8 	.word	0x200020b8
 80063cc:	20000054 	.word	0x20000054
 80063d0:	08025efc 	.word	0x08025efc
 80063d4:	2000208c 	.word	0x2000208c
 80063d8:	431bde83 	.word	0x431bde83
 80063dc:	080268b8 	.word	0x080268b8
 80063e0:	08025f3c 	.word	0x08025f3c
 80063e4:	080269e4 	.word	0x080269e4
 80063e8:	08025c58 	.word	0x08025c58
 80063ec:	08025744 	.word	0x08025744
 80063f0:	20000fcc 	.word	0x20000fcc
 80063f4:	08025f68 	.word	0x08025f68
 80063f8:	08025f78 	.word	0x08025f78
 80063fc:	08025f84 	.word	0x08025f84
 8006400:	08025f94 	.word	0x08025f94
 8006404:	20000e80 	.word	0x20000e80
 8006408:	20002120 	.word	0x20002120
 800640c:	08025fa4 	.word	0x08025fa4
 8006410:	20002068 	.word	0x20002068
 8006414:	08025fd8 	.word	0x08025fd8

08006418 <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 8006422:	4904      	ldr	r1, [pc, #16]	; (8006434 <cliVersion+0x1c>)
 8006424:	2000      	movs	r0, #0
 8006426:	f00d f8b1 	bl	801358c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08025ff0 	.word	0x08025ff0

08006438 <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <cliInit+0x50>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d119      	bne.n	800647c <cliInit+0x44>
        cliMode = 1;
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <cliInit+0x50>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 800644e:	f00d f955 	bl	80136fc <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f00d f92c 	bl	80136b0 <pifLog_AttachComm>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <cliInit+0x2a>
 800645e:	2300      	movs	r3, #0
 8006460:	e00d      	b.n	800647e <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006462:	490a      	ldr	r1, [pc, #40]	; (800648c <cliInit+0x54>)
 8006464:	480a      	ldr	r0, [pc, #40]	; (8006490 <cliInit+0x58>)
 8006466:	f00c ffc5 	bl	80133f4 <pifLog_UseCommand>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <cliInit+0x3c>
 8006470:	2300      	movs	r3, #0
 8006472:	e004      	b.n	800647e <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006474:	4907      	ldr	r1, [pc, #28]	; (8006494 <cliInit+0x5c>)
 8006476:	2000      	movs	r0, #0
 8006478:	f00c fff6 	bl	8013468 <pifLog_Print>
    }
    return TRUE;
 800647c:	2301      	movs	r3, #1
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200007eb 	.word	0x200007eb
 800648c:	08026020 	.word	0x08026020
 8006490:	08026a04 	.word	0x08026a04
 8006494:	08026028 	.word	0x08026028

08006498 <cliStatusCallback>:

__attribute__ ((weak)) void cliStatusCallback()
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0

}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
	p_storage = storageInit();
 80064ac:	f7fb fe30 	bl	8002110 <storageInit>
 80064b0:	4603      	mov	r3, r0
 80064b2:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <initEEPROM+0x20>)
 80064b4:	6013      	str	r3, [r2, #0]
	return p_storage != NULL;
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <initEEPROM+0x20>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bf14      	ite	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	2300      	moveq	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000824 	.word	0x20000824

080064cc <parseRcChannels>:

void parseRcChannels(const char *input)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e018      	b.n	800650c <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	480f      	ldr	r0, [pc, #60]	; (8006520 <parseRcChannels+0x54>)
 80064e2:	f01b fc06 	bl	8021cf2 <strchr>
 80064e6:	60b8      	str	r0, [r7, #8]
        if (s)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1ad1      	subs	r1, r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <parseRcChannels+0x54>)
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	b2c9      	uxtb	r1, r1
 80064fc:	4a09      	ldr	r2, [pc, #36]	; (8006524 <parseRcChannels+0x58>)
 80064fe:	4413      	add	r3, r2
 8006500:	460a      	mov	r2, r1
 8006502:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e2      	bne.n	80064da <parseRcChannels+0xe>
    }
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	08027608 	.word	0x08027608
 8006524:	200019c8 	.word	0x200019c8

08006528 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 8006536:	f240 506c 	movw	r0, #1388	; 0x56c
 800653a:	f01b fabf 	bl	8021abc <malloc>
 800653e:	4603      	mov	r3, r0
 8006540:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <validEEPROM+0x24>
 8006548:	2300      	movs	r3, #0
 800654a:	e04e      	b.n	80065ea <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 800654c:	4b29      	ldr	r3, [pc, #164]	; (80065f4 <validEEPROM+0xcc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	214c      	movs	r1, #76	; 0x4c
 8006552:	4618      	mov	r0, r3
 8006554:	f013 fbb9 	bl	8019cca <pifStorage_Open>
 8006558:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d037      	beq.n	80065d0 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006560:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <validEEPROM+0xcc>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	f240 536c 	movw	r3, #1388	; 0x56c
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	f013 fbbe 	bl	8019cec <pifStorage_Read>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d02e      	beq.n	80065d4 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	224c      	movs	r2, #76	; 0x4c
 800657c:	4293      	cmp	r3, r2
 800657e:	d12b      	bne.n	80065d8 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	885b      	ldrh	r3, [r3, #2]
 8006584:	f240 526c 	movw	r2, #1388	; 0x56c
 8006588:	4293      	cmp	r3, r2
 800658a:	d127      	bne.n	80065dc <validEEPROM+0xb4>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	791b      	ldrb	r3, [r3, #4]
 8006590:	2bbe      	cmp	r3, #190	; 0xbe
 8006592:	d123      	bne.n	80065dc <validEEPROM+0xb4>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 800659a:	2bef      	cmp	r3, #239	; 0xef
 800659c:	d11e      	bne.n	80065dc <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e007      	b.n	80065b4 <validEEPROM+0x8c>
        chk ^= *p;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	4053      	eors	r3, r2
 80065ac:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3f1      	bcc.n	80065a4 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f01b fa80 	bl	8021acc <free>

    // looks good, let's roll!
    return 1;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e00c      	b.n	80065ea <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 80065d0:	bf00      	nop
 80065d2:	e006      	b.n	80065e2 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 80065d4:	bf00      	nop
 80065d6:	e004      	b.n	80065e2 <validEEPROM+0xba>
        goto fail;
 80065d8:	bf00      	nop
 80065da:	e002      	b.n	80065e2 <validEEPROM+0xba>
        goto fail;
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <validEEPROM+0xba>
        goto fail;
 80065e0:	bf00      	nop

fail:
    free(temp);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f01b fa72 	bl	8021acc <free>
    return 0;    
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000824 	.word	0x20000824

080065f8 <readEEPROM>:

void readEEPROM(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80065fe:	f7ff ff93 	bl	8006528 <validEEPROM>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d030      	beq.n	800666a <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006608:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <readEEPROM+0x88>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	214c      	movs	r1, #76	; 0x4c
 800660e:	4618      	mov	r0, r3
 8006610:	f013 fb5b 	bl	8019cca <pifStorage_Open>
 8006614:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d028      	beq.n	800666e <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800661c:	4b18      	ldr	r3, [pc, #96]	; (8006680 <readEEPROM+0x88>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	f240 536c 	movw	r3, #1388	; 0x56c
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4917      	ldr	r1, [pc, #92]	; (8006684 <readEEPROM+0x8c>)
 8006628:	f013 fb60 	bl	8019cec <pifStorage_Read>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01f      	beq.n	8006672 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <readEEPROM+0x8c>)
 8006634:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006638:	2b02      	cmp	r3, #2
 800663a:	d903      	bls.n	8006644 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <readEEPROM+0x8c>)
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <readEEPROM+0x8c>)
 8006646:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800664a:	461a      	mov	r2, r3
 800664c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006650:	fb03 f302 	mul.w	r3, r3, r2
 8006654:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006658:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <readEEPROM+0x8c>)
 800665a:	4413      	add	r3, r2
 800665c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006660:	4619      	mov	r1, r3
 8006662:	4809      	ldr	r0, [pc, #36]	; (8006688 <readEEPROM+0x90>)
 8006664:	f01b fa3a 	bl	8021adc <memcpy>
    return;
 8006668:	e007      	b.n	800667a <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006672:	bf00      	nop

fail:    
    failureMode(10);
 8006674:	200a      	movs	r0, #10
 8006676:	f7fb fc7c 	bl	8001f72 <failureMode>
}
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000824 	.word	0x20000824
 8006684:	200019c8 	.word	0x200019c8
 8006688:	20001890 	.word	0x20001890

0800668c <activateConfig>:

void activateConfig(void)
{
 800668c:	b5b0      	push	{r4, r5, r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	71fb      	strb	r3, [r7, #7]
 8006696:	e021      	b.n	80066dc <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 8006698:	4b56      	ldr	r3, [pc, #344]	; (80067f4 <activateConfig+0x168>)
 800669a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800669e:	4619      	mov	r1, r3
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	3b19      	subs	r3, #25
 80066aa:	fb03 f301 	mul.w	r3, r3, r1
 80066ae:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80066b2:	79fa      	ldrb	r2, [r7, #7]
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <activateConfig+0x168>)
 80066ba:	7fd2      	ldrb	r2, [r2, #31]
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	4a4d      	ldr	r2, [pc, #308]	; (80067f8 <activateConfig+0x16c>)
 80066c2:	fb82 1203 	smull	r1, r2, r2, r3
 80066c6:	1292      	asrs	r2, r2, #10
 80066c8:	17db      	asrs	r3, r3, #31
 80066ca:	1ad2      	subs	r2, r2, r3
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	b211      	sxth	r1, r2
 80066d0:	4a4a      	ldr	r2, [pc, #296]	; (80067fc <activateConfig+0x170>)
 80066d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	3301      	adds	r3, #1
 80066da:	71fb      	strb	r3, [r7, #7]
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d9da      	bls.n	8006698 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80066e2:	2300      	movs	r3, #0
 80066e4:	71fb      	strb	r3, [r7, #7]
 80066e6:	e076      	b.n	80067d6 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	0092      	lsls	r2, r2, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	4b3f      	ldr	r3, [pc, #252]	; (80067f4 <activateConfig+0x168>)
 80066f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	b29b      	uxth	r3, r3
 8006702:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 8006704:	2301      	movs	r3, #1
 8006706:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 8006708:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd05      	ble.n	800671c <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 8006710:	4b38      	ldr	r3, [pc, #224]	; (80067f4 <activateConfig+0x168>)
 8006712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006716:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800671a:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 800671c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	da03      	bge.n	800672c <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <activateConfig+0x168>)
 8006726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800672a:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 800672c:	4b31      	ldr	r3, [pc, #196]	; (80067f4 <activateConfig+0x168>)
 800672e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	4413      	add	r3, r2
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006742:	492c      	ldr	r1, [pc, #176]	; (80067f4 <activateConfig+0x168>)
 8006744:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006748:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 800674c:	4929      	ldr	r1, [pc, #164]	; (80067f4 <activateConfig+0x168>)
 800674e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006752:	460d      	mov	r5, r1
 8006754:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006758:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800675c:	fb04 f101 	mul.w	r1, r4, r1
 8006760:	fb01 f405 	mul.w	r4, r1, r5
 8006764:	79b9      	ldrb	r1, [r7, #6]
 8006766:	79bd      	ldrb	r5, [r7, #6]
 8006768:	fb05 f101 	mul.w	r1, r5, r1
 800676c:	fb94 f1f1 	sdiv	r1, r4, r1
 8006770:	4401      	add	r1, r0
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4922      	ldr	r1, [pc, #136]	; (8006800 <activateConfig+0x174>)
 8006778:	fb81 0103 	smull	r0, r1, r1, r3
 800677c:	1089      	asrs	r1, r1, #2
 800677e:	17db      	asrs	r3, r3, #31
 8006780:	1acb      	subs	r3, r1, r3
 8006782:	b29b      	uxth	r3, r3
 8006784:	4413      	add	r3, r2
 8006786:	b29a      	uxth	r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	b211      	sxth	r1, r2
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <activateConfig+0x178>)
 800678e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <activateConfig+0x17c>)
 8006794:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <activateConfig+0x17c>)
 800679a:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800679e:	4619      	mov	r1, r3
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <activateConfig+0x17c>)
 80067a2:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80067a6:	1acb      	subs	r3, r1, r3
 80067a8:	79f9      	ldrb	r1, [r7, #7]
 80067aa:	4816      	ldr	r0, [pc, #88]	; (8006804 <activateConfig+0x178>)
 80067ac:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4915      	ldr	r1, [pc, #84]	; (800680c <activateConfig+0x180>)
 80067b6:	fb81 0103 	smull	r0, r1, r1, r3
 80067ba:	1189      	asrs	r1, r1, #6
 80067bc:	17db      	asrs	r3, r3, #31
 80067be:	1acb      	subs	r3, r1, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	b211      	sxth	r1, r2
 80067ca:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <activateConfig+0x178>)
 80067cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	3301      	adds	r3, #1
 80067d4:	71fb      	strb	r3, [r7, #7]
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b0b      	cmp	r3, #11
 80067da:	d985      	bls.n	80066e8 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <activateConfig+0x168>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f006 fc31 	bl	800d048 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80067e6:	f002 fa75 	bl	8008cd4 <gpsSetPIDs>
#endif
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bdb0      	pop	{r4, r5, r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20001890 	.word	0x20001890
 80067f8:	68db8bad 	.word	0x68db8bad
 80067fc:	200021e0 	.word	0x200021e0
 8006800:	66666667 	.word	0x66666667
 8006804:	20002034 	.word	0x20002034
 8006808:	200019c8 	.word	0x200019c8
 800680c:	10624dd3 	.word	0x10624dd3

08006810 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
    readEEPROM();
 8006814:	f7ff fef0 	bl	80065f8 <readEEPROM>
    activateConfig();
 8006818:	f7ff ff38 	bl	800668c <activateConfig>
}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}

08006820 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	460a      	mov	r2, r1
 800682a:	71fb      	strb	r3, [r7, #7]
 800682c:	4613      	mov	r3, r2
 800682e:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 8006838:	224c      	movs	r2, #76	; 0x4c
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <writeEEPROM+0xf4>)
 800683c:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 800683e:	4b35      	ldr	r3, [pc, #212]	; (8006914 <writeEEPROM+0xf4>)
 8006840:	f240 526c 	movw	r2, #1388	; 0x56c
 8006844:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 8006846:	4b33      	ldr	r3, [pc, #204]	; (8006914 <writeEEPROM+0xf4>)
 8006848:	22be      	movs	r2, #190	; 0xbe
 800684a:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 800684c:	4b31      	ldr	r3, [pc, #196]	; (8006914 <writeEEPROM+0xf4>)
 800684e:	22ef      	movs	r2, #239	; 0xef
 8006850:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006854:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <writeEEPROM+0xf4>)
 8006856:	2200      	movs	r2, #0
 8006858:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 800685c:	79bb      	ldrb	r3, [r7, #6]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006862:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <writeEEPROM+0xf4>)
 8006864:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006868:	461a      	mov	r2, r3
 800686a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800686e:	fb03 f302 	mul.w	r3, r3, r2
 8006872:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <writeEEPROM+0xf4>)
 8006878:	4413      	add	r3, r2
 800687a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800687e:	4926      	ldr	r1, [pc, #152]	; (8006918 <writeEEPROM+0xf8>)
 8006880:	4618      	mov	r0, r3
 8006882:	f01b f92b 	bl	8021adc <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <writeEEPROM+0xf4>)
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	e007      	b.n	800689c <writeEEPROM+0x7c>
        chk ^= *p;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	7dbb      	ldrb	r3, [r7, #22]
 8006892:	4053      	eors	r3, r2
 8006894:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	3301      	adds	r3, #1
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <writeEEPROM+0xfc>)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d3f3      	bcc.n	800688c <writeEEPROM+0x6c>
    mcfg.chk = chk;
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <writeEEPROM+0xf4>)
 80068a6:	7dbb      	ldrb	r3, [r7, #22]
 80068a8:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80068ac:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <writeEEPROM+0x100>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	214c      	movs	r1, #76	; 0x4c
 80068b2:	4618      	mov	r0, r3
 80068b4:	f013 fa09 	bl	8019cca <pifStorage_Open>
 80068b8:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00c      	beq.n	80068da <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80068c0:	4b17      	ldr	r3, [pc, #92]	; (8006920 <writeEEPROM+0x100>)
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	f240 536c 	movw	r3, #1388	; 0x56c
 80068c8:	4a12      	ldr	r2, [pc, #72]	; (8006914 <writeEEPROM+0xf4>)
 80068ca:	68f9      	ldr	r1, [r7, #12]
 80068cc:	f013 fa21 	bl	8019d12 <pifStorage_Write>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <writeEEPROM+0xba>
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	f083 0301 	eor.w	r3, r3, #1
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <writeEEPROM+0xd0>
 80068e6:	f7ff fe1f 	bl	8006528 <validEEPROM>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <writeEEPROM+0xd6>
        failureMode(10);
 80068f0:	200a      	movs	r0, #10
 80068f2:	f7fb fb3e 	bl	8001f72 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80068f6:	f7ff ff8b 	bl	8006810 <loadAndActivateConfig>
    if (b)
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 8006900:	2201      	movs	r2, #1
 8006902:	2114      	movs	r1, #20
 8006904:	200f      	movs	r0, #15
 8006906:	f005 fb6f 	bl	800bfe8 <blinkLED>
}
 800690a:	bf00      	nop
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	200019c8 	.word	0x200019c8
 8006918:	20001890 	.word	0x20001890
 800691c:	20001f34 	.word	0x20001f34
 8006920:	20000824 	.word	0x20000824

08006924 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <checkFirstTime+0xa0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f013 f99a 	bl	8019c70 <pifStorage_IsFormat>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10c      	bne.n	800695c <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <checkFirstTime+0xa0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f013 f99f 	bl	8019c8a <pifStorage_Format>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <checkFirstTime+0x32>
 8006952:	2300      	movs	r3, #0
 8006954:	e032      	b.n	80069bc <checkFirstTime+0x98>
        alloc = false;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e00b      	b.n	8006974 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 800695c:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <checkFirstTime+0xa0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	214c      	movs	r1, #76	; 0x4c
 8006962:	4618      	mov	r0, r3
 8006964:	f013 f9b1 	bl	8019cca <pifStorage_Open>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf14      	ite	ne
 800696e:	2301      	movne	r3, #1
 8006970:	2300      	moveq	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	f083 0301 	eor.w	r3, r3, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 8006980:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <checkFirstTime+0xa0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f240 526c 	movw	r2, #1388	; 0x56c
 8006988:	214c      	movs	r1, #76	; 0x4c
 800698a:	4618      	mov	r0, r3
 800698c:	f013 f98a 	bl	8019ca4 <pifStorage_Create>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <checkFirstTime+0x76>
 8006996:	2300      	movs	r3, #0
 8006998:	e010      	b.n	80069bc <checkFirstTime+0x98>
        reset = true;
 800699a:	2301      	movs	r3, #1
 800699c:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 800699e:	f7ff fdc3 	bl	8006528 <validEEPROM>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <checkFirstTime+0x8a>
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <checkFirstTime+0x96>
        resetConf();
 80069ae:	f000 f80b 	bl	80069c8 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 80069b2:	2100      	movs	r1, #0
 80069b4:	2000      	movs	r0, #0
 80069b6:	f7ff ff33 	bl	8006820 <writeEEPROM>
    }
    return true;
 80069ba:	2301      	movs	r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000824 	.word	0x20000824

080069c8 <resetConf>:

// Default settings
static void resetConf(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 80069ce:	4ac7      	ldr	r2, [pc, #796]	; (8006cec <resetConf+0x324>)
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069d6:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 80069da:	f240 526c 	movw	r2, #1388	; 0x56c
 80069de:	2100      	movs	r1, #0
 80069e0:	48c3      	ldr	r0, [pc, #780]	; (8006cf0 <resetConf+0x328>)
 80069e2:	f01b f889 	bl	8021af8 <memset>
    memset(&cfg, 0, sizeof(config_t));
 80069e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80069ea:	2100      	movs	r1, #0
 80069ec:	48c1      	ldr	r0, [pc, #772]	; (8006cf4 <resetConf+0x32c>)
 80069ee:	f01b f883 	bl	8021af8 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 80069f2:	224c      	movs	r2, #76	; 0x4c
 80069f4:	4bbe      	ldr	r3, [pc, #760]	; (8006cf0 <resetConf+0x328>)
 80069f6:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80069f8:	4bbd      	ldr	r3, [pc, #756]	; (8006cf0 <resetConf+0x328>)
 80069fa:	2203      	movs	r2, #3
 80069fc:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80069fe:	f000 fb2d 	bl	800705c <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 8006a02:	4bbd      	ldr	r3, [pc, #756]	; (8006cf8 <resetConf+0x330>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <resetConf+0x48>
 8006a0a:	4bbb      	ldr	r3, [pc, #748]	; (8006cf8 <resetConf+0x330>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 8006a10:	4bb7      	ldr	r3, [pc, #732]	; (8006cf0 <resetConf+0x328>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006a18:	4bb5      	ldr	r3, [pc, #724]	; (8006cf0 <resetConf+0x328>)
 8006a1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a1e:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 8006a22:	4bb3      	ldr	r3, [pc, #716]	; (8006cf0 <resetConf+0x328>)
 8006a24:	22fa      	movs	r2, #250	; 0xfa
 8006a26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006a2a:	4bb1      	ldr	r3, [pc, #708]	; (8006cf0 <resetConf+0x328>)
 8006a2c:	222a      	movs	r2, #42	; 0x2a
 8006a2e:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 8006a32:	4baf      	ldr	r3, [pc, #700]	; (8006cf0 <resetConf+0x328>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006a3a:	4bad      	ldr	r3, [pc, #692]	; (8006cf0 <resetConf+0x328>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006a42:	4bab      	ldr	r3, [pc, #684]	; (8006cf0 <resetConf+0x328>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006a4a:	4ba9      	ldr	r3, [pc, #676]	; (8006cf0 <resetConf+0x328>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006a52:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <resetConf+0x328>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006a5a:	4ba5      	ldr	r3, [pc, #660]	; (8006cf0 <resetConf+0x328>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006a62:	4ba3      	ldr	r3, [pc, #652]	; (8006cf0 <resetConf+0x328>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006a6a:	4ba1      	ldr	r3, [pc, #644]	; (8006cf0 <resetConf+0x328>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006a72:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <resetConf+0x328>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006a7a:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <resetConf+0x328>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006a82:	4b9b      	ldr	r3, [pc, #620]	; (8006cf0 <resetConf+0x328>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006a8a:	4b99      	ldr	r3, [pc, #612]	; (8006cf0 <resetConf+0x328>)
 8006a8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006a90:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006a94:	4b96      	ldr	r3, [pc, #600]	; (8006cf0 <resetConf+0x328>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006a9c:	4b94      	ldr	r3, [pc, #592]	; (8006cf0 <resetConf+0x328>)
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006aa4:	4b92      	ldr	r3, [pc, #584]	; (8006cf0 <resetConf+0x328>)
 8006aa6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006aaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006aae:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <resetConf+0x328>)
 8006ab0:	226e      	movs	r2, #110	; 0x6e
 8006ab2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006ab6:	4b8e      	ldr	r3, [pc, #568]	; (8006cf0 <resetConf+0x328>)
 8006ab8:	222b      	movs	r2, #43	; 0x2b
 8006aba:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006abe:	4b8c      	ldr	r3, [pc, #560]	; (8006cf0 <resetConf+0x328>)
 8006ac0:	2221      	movs	r2, #33	; 0x21
 8006ac2:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006ac6:	4b8a      	ldr	r3, [pc, #552]	; (8006cf0 <resetConf+0x328>)
 8006ac8:	2223      	movs	r2, #35	; 0x23
 8006aca:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <resetConf+0x328>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006ad6:	4b86      	ldr	r3, [pc, #536]	; (8006cf0 <resetConf+0x328>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006ade:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <resetConf+0x328>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006ae6:	4b82      	ldr	r3, [pc, #520]	; (8006cf0 <resetConf+0x328>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006aee:	4b80      	ldr	r3, [pc, #512]	; (8006cf0 <resetConf+0x328>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006af6:	4b7e      	ldr	r3, [pc, #504]	; (8006cf0 <resetConf+0x328>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006afe:	4b7c      	ldr	r3, [pc, #496]	; (8006cf0 <resetConf+0x328>)
 8006b00:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b04:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006b08:	4b79      	ldr	r3, [pc, #484]	; (8006cf0 <resetConf+0x328>)
 8006b0a:	f240 424c 	movw	r2, #1100	; 0x44c
 8006b0e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006b12:	4b77      	ldr	r3, [pc, #476]	; (8006cf0 <resetConf+0x328>)
 8006b14:	f240 726c 	movw	r2, #1900	; 0x76c
 8006b18:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006b1c:	4b74      	ldr	r3, [pc, #464]	; (8006cf0 <resetConf+0x328>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006b24:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <resetConf+0x328>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006b2c:	4b70      	ldr	r3, [pc, #448]	; (8006cf0 <resetConf+0x328>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006b34:	4b6e      	ldr	r3, [pc, #440]	; (8006cf0 <resetConf+0x328>)
 8006b36:	f240 427e 	movw	r2, #1150	; 0x47e
 8006b3a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006b3e:	4b6c      	ldr	r3, [pc, #432]	; (8006cf0 <resetConf+0x328>)
 8006b40:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b44:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006b48:	4b69      	ldr	r3, [pc, #420]	; (8006cf0 <resetConf+0x328>)
 8006b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b4e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <resetConf+0x328>)
 8006b54:	f240 527e 	movw	r2, #1406	; 0x57e
 8006b58:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006b5c:	4b64      	ldr	r3, [pc, #400]	; (8006cf0 <resetConf+0x328>)
 8006b5e:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006b62:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006b66:	4b62      	ldr	r3, [pc, #392]	; (8006cf0 <resetConf+0x328>)
 8006b68:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006b6c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006b70:	4b5f      	ldr	r3, [pc, #380]	; (8006cf0 <resetConf+0x328>)
 8006b72:	2232      	movs	r2, #50	; 0x32
 8006b74:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006b78:	4b5d      	ldr	r3, [pc, #372]	; (8006cf0 <resetConf+0x328>)
 8006b7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b7e:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006b82:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <resetConf+0x328>)
 8006b84:	2232      	movs	r2, #50	; 0x32
 8006b86:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006b8a:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <resetConf+0x328>)
 8006b8c:	2205      	movs	r2, #5
 8006b8e:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006b92:	4b57      	ldr	r3, [pc, #348]	; (8006cf0 <resetConf+0x328>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006b9a:	4b55      	ldr	r3, [pc, #340]	; (8006cf0 <resetConf+0x328>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006ba2:	4b53      	ldr	r3, [pc, #332]	; (8006cf0 <resetConf+0x328>)
 8006ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ba8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006bac:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <resetConf+0x328>)
 8006bae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006bb2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006bb6:	4b4e      	ldr	r3, [pc, #312]	; (8006cf0 <resetConf+0x328>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006bbe:	4b4c      	ldr	r3, [pc, #304]	; (8006cf0 <resetConf+0x328>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <resetConf+0x328>)
 8006bc8:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006bcc:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006bce:	4b48      	ldr	r3, [pc, #288]	; (8006cf0 <resetConf+0x328>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006bd4:	4b46      	ldr	r3, [pc, #280]	; (8006cf0 <resetConf+0x328>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006bdc:	4b44      	ldr	r3, [pc, #272]	; (8006cf0 <resetConf+0x328>)
 8006bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be2:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006be6:	4b42      	ldr	r3, [pc, #264]	; (8006cf0 <resetConf+0x328>)
 8006be8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006bec:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <resetConf+0x328>)
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006bf8:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <resetConf+0x32c>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006bfe:	4b3d      	ldr	r3, [pc, #244]	; (8006cf4 <resetConf+0x32c>)
 8006c00:	2228      	movs	r2, #40	; 0x28
 8006c02:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006c04:	4b3b      	ldr	r3, [pc, #236]	; (8006cf4 <resetConf+0x32c>)
 8006c06:	221e      	movs	r2, #30
 8006c08:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006c0a:	4b3a      	ldr	r3, [pc, #232]	; (8006cf4 <resetConf+0x32c>)
 8006c0c:	2217      	movs	r2, #23
 8006c0e:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006c10:	4b38      	ldr	r3, [pc, #224]	; (8006cf4 <resetConf+0x32c>)
 8006c12:	2228      	movs	r2, #40	; 0x28
 8006c14:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <resetConf+0x32c>)
 8006c18:	221e      	movs	r2, #30
 8006c1a:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006c1c:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <resetConf+0x32c>)
 8006c1e:	2217      	movs	r2, #23
 8006c20:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006c22:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <resetConf+0x32c>)
 8006c24:	2255      	movs	r2, #85	; 0x55
 8006c26:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006c28:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <resetConf+0x32c>)
 8006c2a:	222d      	movs	r2, #45	; 0x2d
 8006c2c:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006c2e:	4b31      	ldr	r3, [pc, #196]	; (8006cf4 <resetConf+0x32c>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006c34:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <resetConf+0x32c>)
 8006c36:	2232      	movs	r2, #50	; 0x32
 8006c38:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <resetConf+0x32c>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006c40:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <resetConf+0x32c>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <resetConf+0x32c>)
 8006c48:	220b      	movs	r2, #11
 8006c4a:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006c4c:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <resetConf+0x32c>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006c52:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <resetConf+0x32c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006c58:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <resetConf+0x32c>)
 8006c5a:	2214      	movs	r2, #20
 8006c5c:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006c5e:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <resetConf+0x32c>)
 8006c60:	2208      	movs	r2, #8
 8006c62:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006c64:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <resetConf+0x32c>)
 8006c66:	222d      	movs	r2, #45	; 0x2d
 8006c68:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006c6a:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <resetConf+0x32c>)
 8006c6c:	220e      	movs	r2, #14
 8006c6e:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006c70:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <resetConf+0x32c>)
 8006c72:	2214      	movs	r2, #20
 8006c74:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006c76:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <resetConf+0x32c>)
 8006c78:	2250      	movs	r2, #80	; 0x50
 8006c7a:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <resetConf+0x32c>)
 8006c7e:	225a      	movs	r2, #90	; 0x5a
 8006c80:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006c82:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <resetConf+0x32c>)
 8006c84:	220a      	movs	r2, #10
 8006c86:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006c88:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <resetConf+0x32c>)
 8006c8a:	2264      	movs	r2, #100	; 0x64
 8006c8c:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006c8e:	4b19      	ldr	r3, [pc, #100]	; (8006cf4 <resetConf+0x32c>)
 8006c90:	2228      	movs	r2, #40	; 0x28
 8006c92:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <resetConf+0x32c>)
 8006c96:	2278      	movs	r2, #120	; 0x78
 8006c98:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006c9a:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <resetConf+0x32c>)
 8006c9c:	222d      	movs	r2, #45	; 0x2d
 8006c9e:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006ca0:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <resetConf+0x32c>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <resetConf+0x32c>)
 8006ca8:	225a      	movs	r2, #90	; 0x5a
 8006caa:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <resetConf+0x32c>)
 8006cae:	2241      	movs	r2, #65	; 0x41
 8006cb0:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <resetConf+0x32c>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <resetConf+0x32c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <resetConf+0x32c>)
 8006cc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <resetConf+0x32c>)
 8006cce:	2232      	movs	r2, #50	; 0x32
 8006cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006cd4:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <resetConf+0x32c>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <resetConf+0x32c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <resetConf+0x32c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006ce8:	e008      	b.n	8006cfc <resetConf+0x334>
 8006cea:	bf00      	nop
 8006cec:	08026074 	.word	0x08026074
 8006cf0:	200019c8 	.word	0x200019c8
 8006cf4:	20001890 	.word	0x20001890
 8006cf8:	2000217c 	.word	0x2000217c
    cfg.locked_in = 0;
 8006cfc:	4b8e      	ldr	r3, [pc, #568]	; (8006f38 <resetConf+0x570>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006d04:	4b8c      	ldr	r3, [pc, #560]	; (8006f38 <resetConf+0x570>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006d0a:	4b8b      	ldr	r3, [pc, #556]	; (8006f38 <resetConf+0x570>)
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006d12:	4b89      	ldr	r3, [pc, #548]	; (8006f38 <resetConf+0x570>)
 8006d14:	2228      	movs	r2, #40	; 0x28
 8006d16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006d1a:	4b87      	ldr	r3, [pc, #540]	; (8006f38 <resetConf+0x570>)
 8006d1c:	2228      	movs	r2, #40	; 0x28
 8006d1e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006d22:	4b85      	ldr	r3, [pc, #532]	; (8006f38 <resetConf+0x570>)
 8006d24:	2215      	movs	r2, #21
 8006d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006d2a:	4b83      	ldr	r3, [pc, #524]	; (8006f38 <resetConf+0x570>)
 8006d2c:	4a83      	ldr	r2, [pc, #524]	; (8006f3c <resetConf+0x574>)
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006d30:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <resetConf+0x570>)
 8006d32:	4a83      	ldr	r2, [pc, #524]	; (8006f40 <resetConf+0x578>)
 8006d34:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006d36:	4b80      	ldr	r3, [pc, #512]	; (8006f38 <resetConf+0x570>)
 8006d38:	4a82      	ldr	r2, [pc, #520]	; (8006f44 <resetConf+0x57c>)
 8006d3a:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	; (8006f38 <resetConf+0x570>)
 8006d3e:	4a82      	ldr	r2, [pc, #520]	; (8006f48 <resetConf+0x580>)
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006d42:	4b7d      	ldr	r3, [pc, #500]	; (8006f38 <resetConf+0x570>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <resetConf+0x570>)
 8006d4c:	2219      	movs	r2, #25
 8006d4e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006d52:	487e      	ldr	r0, [pc, #504]	; (8006f4c <resetConf+0x584>)
 8006d54:	f7ff fbba 	bl	80064cc <parseRcChannels>
    cfg.deadband = 0;
 8006d58:	4b77      	ldr	r3, [pc, #476]	; (8006f38 <resetConf+0x570>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006d60:	4b75      	ldr	r3, [pc, #468]	; (8006f38 <resetConf+0x570>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006d68:	4b73      	ldr	r3, [pc, #460]	; (8006f38 <resetConf+0x570>)
 8006d6a:	2228      	movs	r2, #40	; 0x28
 8006d6c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006d70:	4b71      	ldr	r3, [pc, #452]	; (8006f38 <resetConf+0x570>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006d78:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <resetConf+0x570>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006d80:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <resetConf+0x570>)
 8006d82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006d86:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006d8a:	4b6b      	ldr	r3, [pc, #428]	; (8006f38 <resetConf+0x570>)
 8006d8c:	220a      	movs	r2, #10
 8006d8e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006d92:	4b69      	ldr	r3, [pc, #420]	; (8006f38 <resetConf+0x570>)
 8006d94:	22c8      	movs	r2, #200	; 0xc8
 8006d96:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006d9a:	4b67      	ldr	r3, [pc, #412]	; (8006f38 <resetConf+0x570>)
 8006d9c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006da0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006da4:	4b64      	ldr	r3, [pc, #400]	; (8006f38 <resetConf+0x570>)
 8006da6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006daa:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e032      	b.n	8006e1a <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006db4:	4960      	ldr	r1, [pc, #384]	; (8006f38 <resetConf+0x570>)
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	440b      	add	r3, r1
 8006dc2:	33b8      	adds	r3, #184	; 0xb8
 8006dc4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006dc8:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006dca:	495b      	ldr	r1, [pc, #364]	; (8006f38 <resetConf+0x570>)
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	440b      	add	r3, r1
 8006dd8:	33ba      	adds	r3, #186	; 0xba
 8006dda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006dde:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006de0:	4955      	ldr	r1, [pc, #340]	; (8006f38 <resetConf+0x570>)
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	440b      	add	r3, r1
 8006dee:	33bc      	adds	r3, #188	; 0xbc
 8006df0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006df4:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006df6:	1d3a      	adds	r2, r7, #4
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f993 0000 	ldrsb.w	r0, [r3]
 8006e00:	494d      	ldr	r1, [pc, #308]	; (8006f38 <resetConf+0x570>)
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	440b      	add	r3, r1
 8006e0e:	33be      	adds	r3, #190	; 0xbe
 8006e10:	4602      	mov	r2, r0
 8006e12:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	ddc9      	ble.n	8006db4 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006e20:	4b45      	ldr	r3, [pc, #276]	; (8006f38 <resetConf+0x570>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006e28:	4b43      	ldr	r3, [pc, #268]	; (8006f38 <resetConf+0x570>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006e30:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <resetConf+0x570>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006e38:	4b3f      	ldr	r3, [pc, #252]	; (8006f38 <resetConf+0x570>)
 8006e3a:	22c8      	movs	r2, #200	; 0xc8
 8006e3c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006e40:	4b3d      	ldr	r3, [pc, #244]	; (8006f38 <resetConf+0x570>)
 8006e42:	2214      	movs	r2, #20
 8006e44:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006e48:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <resetConf+0x570>)
 8006e4a:	221e      	movs	r2, #30
 8006e4c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <resetConf+0x570>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006e58:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <resetConf+0x570>)
 8006e5a:	2264      	movs	r2, #100	; 0x64
 8006e5c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006e60:	4b35      	ldr	r3, [pc, #212]	; (8006f38 <resetConf+0x570>)
 8006e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e66:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006e6a:	4b33      	ldr	r3, [pc, #204]	; (8006f38 <resetConf+0x570>)
 8006e6c:	2228      	movs	r2, #40	; 0x28
 8006e6e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006e72:	4b31      	ldr	r3, [pc, #196]	; (8006f38 <resetConf+0x570>)
 8006e74:	2214      	movs	r2, #20
 8006e76:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006e7a:	4b2f      	ldr	r3, [pc, #188]	; (8006f38 <resetConf+0x570>)
 8006e7c:	220f      	movs	r2, #15
 8006e7e:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006e82:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <resetConf+0x570>)
 8006e84:	220f      	movs	r2, #15
 8006e86:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006e8a:	4b2b      	ldr	r3, [pc, #172]	; (8006f38 <resetConf+0x570>)
 8006e8c:	220f      	movs	r2, #15
 8006e8e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006e92:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <resetConf+0x570>)
 8006e94:	f240 726c 	movw	r2, #1900	; 0x76c
 8006e98:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006e9c:	4b26      	ldr	r3, [pc, #152]	; (8006f38 <resetConf+0x570>)
 8006e9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ea2:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006ea6:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <resetConf+0x570>)
 8006ea8:	f240 5214 	movw	r2, #1300	; 0x514
 8006eac:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006eb0:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <resetConf+0x570>)
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006eb8:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <resetConf+0x570>)
 8006eba:	2264      	movs	r2, #100	; 0x64
 8006ebc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006ec0:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <resetConf+0x570>)
 8006ec2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006ec6:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006eca:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <resetConf+0x570>)
 8006ecc:	2232      	movs	r2, #50	; 0x32
 8006ece:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	; (8006f50 <resetConf+0x588>)
 8006ed4:	2252      	movs	r2, #82	; 0x52
 8006ed6:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e00a      	b.n	8006ef6 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <resetConf+0x588>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	4413      	add	r3, r2
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b0b      	cmp	r3, #11
 8006efa:	ddf1      	ble.n	8006ee0 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e011      	b.n	8006f26 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <resetConf+0x588>)
 8006f12:	4413      	add	r3, r2
 8006f14:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <resetConf+0x570>)
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f01a fdde 	bl	8021adc <memcpy>
    for (i = 0; i < 3; i++)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	ddea      	ble.n	8006f02 <resetConf+0x53a>
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20001890 	.word	0x20001890
 8006f3c:	3f19999a 	.word	0x3f19999a
 8006f40:	3f7c28f6 	.word	0x3f7c28f6
 8006f44:	3f770a3d 	.word	0x3f770a3d
 8006f48:	40a00000 	.word	0x40a00000
 8006f4c:	08026060 	.word	0x08026060
 8006f50:	200019c8 	.word	0x200019c8

08006f54 <sensors>:

bool sensors(uint32_t mask)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <sensors+0x28>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20000820 	.word	0x20000820

08006f80 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <sensorsSet+0x20>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	4a03      	ldr	r2, [pc, #12]	; (8006fa0 <sensorsSet+0x20>)
 8006f92:	6013      	str	r3, [r2, #0]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000820 	.word	0x20000820

08006fa4 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	43da      	mvns	r2, r3
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <sensorsClear+0x24>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <sensorsClear+0x24>)
 8006fb8:	6013      	str	r3, [r2, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000820 	.word	0x20000820

08006fcc <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006fd0:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <sensorsMask+0x14>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000820 	.word	0x20000820

08006fe4 <feature>:

bool feature(uint32_t mask)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <feature+0x28>)
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	200019c8 	.word	0x200019c8

08007010 <featureSet>:

void featureSet(uint32_t mask)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <featureSet+0x20>)
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4313      	orrs	r3, r2
 8007020:	4a03      	ldr	r2, [pc, #12]	; (8007030 <featureSet+0x20>)
 8007022:	6093      	str	r3, [r2, #8]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200019c8 	.word	0x200019c8

08007034 <featureClear>:

void featureClear(uint32_t mask)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <featureClear+0x24>)
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	43db      	mvns	r3, r3
 8007044:	4013      	ands	r3, r2
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <featureClear+0x24>)
 8007048:	6093      	str	r3, [r2, #8]
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	200019c8 	.word	0x200019c8

0800705c <featureClearAll>:

void featureClearAll()
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <featureClearAll+0x14>)
 8007062:	2200      	movs	r2, #0
 8007064:	609a      	str	r2, [r3, #8]
}
 8007066:	bf00      	nop
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	200019c8 	.word	0x200019c8

08007074 <featureMask>:

uint32_t featureMask(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8007078:	4b03      	ldr	r3, [pc, #12]	; (8007088 <featureMask+0x14>)
 800707a:	689b      	ldr	r3, [r3, #8]
}
 800707c:	4618      	mov	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	200019c8 	.word	0x200019c8

0800708c <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <fw_nav_reset+0x5c>)
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 800709a:	4b14      	ldr	r3, [pc, #80]	; (80070ec <fw_nav_reset+0x60>)
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <fw_nav_reset+0x64>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <fw_nav_reset+0x68>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <fw_nav_reset+0x6c>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 80070b4:	2300      	movs	r3, #0
 80070b6:	71fb      	strb	r3, [r7, #7]
 80070b8:	e00c      	b.n	80070d4 <fw_nav_reset+0x48>
        altHist[i] = 0;
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <fw_nav_reset+0x70>)
 80070be:	2100      	movs	r1, #0
 80070c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <fw_nav_reset+0x74>)
 80070c8:	2100      	movs	r1, #0
 80070ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	3301      	adds	r3, #1
 80070d2:	71fb      	strb	r3, [r7, #7]
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d9ef      	bls.n	80070ba <fw_nav_reset+0x2e>
    }
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20001f34 	.word	0x20001f34
 80070ec:	20001f38 	.word	0x20001f38
 80070f0:	20000828 	.word	0x20000828
 80070f4:	2000082a 	.word	0x2000082a
 80070f8:	2000082c 	.word	0x2000082c
 80070fc:	20000830 	.word	0x20000830
 8007100:	2000083c 	.word	0x2000083c

08007104 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8007104:	b5b0      	push	{r4, r5, r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 800710a:	4b48      	ldr	r3, [pc, #288]	; (800722c <fw_FlyTo+0x128>)
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	4a48      	ldr	r2, [pc, #288]	; (8007230 <fw_FlyTo+0x12c>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	08db      	lsrs	r3, r3, #3
 8007116:	b29b      	uxth	r3, r3
 8007118:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2bb4      	cmp	r3, #180	; 0xb4
 800711e:	dd03      	ble.n	8007128 <fw_FlyTo+0x24>
        holdHeading -= 360;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007126:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8007128:	4b42      	ldr	r3, [pc, #264]	; (8007234 <fw_FlyTo+0x130>)
 800712a:	edd3 7a00 	vldr	s15, [r3]
 800712e:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007238 <fw_FlyTo+0x134>
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b41      	ldr	r3, [pc, #260]	; (800723c <fw_FlyTo+0x138>)
 8007138:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007148:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007156:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007240 <fw_FlyTo+0x13c>
 800715a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800715e:	ee17 0a90 	vmov	r0, s15
 8007162:	f7f9 f9af 	bl	80004c4 <__aeabi_f2d>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	ec43 2b10 	vmov	d0, r2, r3
 800716e:	f01a febf 	bl	8021ef0 <cos>
 8007172:	ec53 2b10 	vmov	r2, r3, d0
 8007176:	4610      	mov	r0, r2
 8007178:	4619      	mov	r1, r3
 800717a:	f7f9 fcdd 	bl	8000b38 <__aeabi_d2f>
 800717e:	4603      	mov	r3, r0
 8007180:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007240 <fw_FlyTo+0x13c>
 8007190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007194:	ee17 0a90 	vmov	r0, s15
 8007198:	f7f9 f994 	bl	80004c4 <__aeabi_f2d>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	ec43 2b10 	vmov	d0, r2, r3
 80071a4:	f01a fef4 	bl	8021f90 <sin>
 80071a8:	ec55 4b10 	vmov	r4, r5, d0
 80071ac:	4b21      	ldr	r3, [pc, #132]	; (8007234 <fw_FlyTo+0x130>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7f9 f987 	bl	80004c4 <__aeabi_f2d>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f7f9 f9d9 	bl	8000574 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	f7f9 fcb5 	bl	8000b38 <__aeabi_d2f>
 80071ce:	4603      	mov	r3, r0
 80071d0:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 80071d2:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <fw_FlyTo+0x140>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071de:	edd7 6a01 	vldr	s13, [r7, #4]
 80071e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80071e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f2:	ee17 2a90 	vmov	r2, s15
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <fw_FlyTo+0x140>)
 80071f8:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <fw_FlyTo+0x140>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007206:	edd7 6a00 	vldr	s13, [r7]
 800720a:	edd7 7a02 	vldr	s15, [r7, #8]
 800720e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800721a:	ee17 2a90 	vmov	r2, s15
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <fw_FlyTo+0x140>)
 8007220:	605a      	str	r2, [r3, #4]
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bdb0      	pop	{r4, r5, r7, pc}
 800722a:	bf00      	nop
 800722c:	20000e96 	.word	0x20000e96
 8007230:	cccccccd 	.word	0xcccccccd
 8007234:	20000028 	.word	0x20000028
 8007238:	42b3a9fc 	.word	0x42b3a9fc
 800723c:	20001890 	.word	0x20001890
 8007240:	3c8efa35 	.word	0x3c8efa35
 8007244:	20001f6c 	.word	0x20001f6c

08007248 <fw_nav>:

void fw_nav(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 800724e:	4b56      	ldr	r3, [pc, #344]	; (80073a8 <fw_nav+0x160>)
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007258:	4b54      	ldr	r3, [pc, #336]	; (80073ac <fw_nav+0x164>)
 800725a:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800725e:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007260:	2300      	movs	r3, #0
 8007262:	80bb      	strh	r3, [r7, #4]
 8007264:	2300      	movs	r3, #0
 8007266:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007268:	4b51      	ldr	r3, [pc, #324]	; (80073b0 <fw_nav+0x168>)
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800726e:	4b51      	ldr	r3, [pc, #324]	; (80073b4 <fw_nav+0x16c>)
 8007270:	881a      	ldrh	r2, [r3, #0]
 8007272:	4b51      	ldr	r3, [pc, #324]	; (80073b8 <fw_nav+0x170>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	b29b      	uxth	r3, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	b29b      	uxth	r3, r3
 800727c:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 800727e:	4b4f      	ldr	r3, [pc, #316]	; (80073bc <fw_nav+0x174>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b4c      	ldr	r3, [pc, #304]	; (80073b8 <fw_nav+0x170>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	b29b      	uxth	r3, r3
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	b29b      	uxth	r3, r3
 800728e:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 8007290:	4b4b      	ldr	r3, [pc, #300]	; (80073c0 <fw_nav+0x178>)
 8007292:	7cdb      	ldrb	r3, [r3, #19]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <fw_nav+0x66>
 8007298:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800729c:	7f7b      	ldrb	r3, [r7, #29]
 800729e:	429a      	cmp	r2, r3
 80072a0:	da05      	bge.n	80072ae <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 80072a2:	4b45      	ldr	r3, [pc, #276]	; (80073b8 <fw_nav+0x170>)
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	7f7b      	ldrb	r3, [r7, #29]
 80072a8:	4413      	add	r3, r2
 80072aa:	4a44      	ldr	r2, [pc, #272]	; (80073bc <fw_nav+0x174>)
 80072ac:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 80072ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f002 fa4c 	bl	8009758 <wrap_18000>
 80072c0:	4603      	mov	r3, r0
 80072c2:	4a40      	ldr	r2, [pc, #256]	; (80073c4 <fw_nav+0x17c>)
 80072c4:	fb82 1203 	smull	r1, r2, r2, r3
 80072c8:	1092      	asrs	r2, r2, #2
 80072ca:	17db      	asrs	r3, r3, #31
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 80072d0:	2008      	movs	r0, #8
 80072d2:	f7ff fe3f 	bl	8006f54 <sensors>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d024      	beq.n	8007326 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 80072dc:	4b3a      	ldr	r3, [pc, #232]	; (80073c8 <fw_nav+0x180>)
 80072de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e2:	4619      	mov	r1, r3
 80072e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80072e8:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <fw_nav+0x17c>)
 80072ea:	fb82 0203 	smull	r0, r2, r2, r3
 80072ee:	1092      	asrs	r2, r2, #2
 80072f0:	17db      	asrs	r3, r3, #31
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	1acb      	subs	r3, r1, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfb8      	it	lt
 80072fc:	425b      	neglt	r3, r3
 80072fe:	2b0a      	cmp	r3, #10
 8007300:	dd0d      	ble.n	800731e <fw_nav+0xd6>
 8007302:	4b32      	ldr	r3, [pc, #200]	; (80073cc <fw_nav+0x184>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	2bc8      	cmp	r3, #200	; 0xc8
 8007308:	d909      	bls.n	800731e <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 800730a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800730e:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <fw_nav+0x17c>)
 8007310:	fb82 1203 	smull	r1, r2, r2, r3
 8007314:	1092      	asrs	r2, r2, #2
 8007316:	17db      	asrs	r3, r3, #31
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800731c:	e00c      	b.n	8007338 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 800731e:	4b2a      	ldr	r3, [pc, #168]	; (80073c8 <fw_nav+0x180>)
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007324:	e008      	b.n	8007338 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 8007326:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <fw_nav+0x17c>)
 800732c:	fb82 1203 	smull	r1, r2, r2, r3
 8007330:	1092      	asrs	r2, r2, #2
 8007332:	17db      	asrs	r3, r3, #31
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <fw_nav+0x188>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a25      	ldr	r2, [pc, #148]	; (80073d4 <fw_nav+0x18c>)
 800733e:	fb82 1203 	smull	r1, r2, r2, r3
 8007342:	1152      	asrs	r2, r2, #5
 8007344:	17db      	asrs	r3, r3, #31
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b21a      	sxth	r2, r3
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <fw_nav+0x190>)
 800734c:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 800734e:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <fw_nav+0x190>)
 8007350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007354:	b29a      	uxth	r2, r3
 8007356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800735e:	8b3a      	ldrh	r2, [r7, #24]
 8007360:	8afb      	ldrh	r3, [r7, #22]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	b21a      	sxth	r2, r3
 8007368:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <fw_nav+0x194>)
 800736a:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 800736c:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <fw_nav+0x198>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <fw_nav+0x19c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <fw_nav+0x1a0>)
 8007378:	8812      	ldrh	r2, [r2, #0]
 800737a:	4293      	cmp	r3, r2
 800737c:	f0c0 83e9 	bcc.w	8007b52 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <fw_nav+0x198>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <fw_nav+0x19c>)
 8007386:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 8007388:	4b14      	ldr	r3, [pc, #80]	; (80073dc <fw_nav+0x194>)
 800738a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb8      	it	lt
 8007392:	425b      	neglt	r3, r3
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d12a      	bne.n	80073f0 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <fw_nav+0x164>)
 800739c:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073a0:	b21a      	sxth	r2, r3
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <fw_nav+0x1a4>)
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e03f      	b.n	8007428 <fw_nav+0x1e0>
 80073a8:	20000e96 	.word	0x20000e96
 80073ac:	20001890 	.word	0x20001890
 80073b0:	20002184 	.word	0x20002184
 80073b4:	2000202a 	.word	0x2000202a
 80073b8:	200020cc 	.word	0x200020cc
 80073bc:	20002054 	.word	0x20002054
 80073c0:	20002014 	.word	0x20002014
 80073c4:	66666667 	.word	0x66666667
 80073c8:	20002270 	.word	0x20002270
 80073cc:	20002050 	.word	0x20002050
 80073d0:	20001f3c 	.word	0x20001f3c
 80073d4:	51eb851f 	.word	0x51eb851f
 80073d8:	20000848 	.word	0x20000848
 80073dc:	2000084a 	.word	0x2000084a
 80073e0:	2000136c 	.word	0x2000136c
 80073e4:	2000084c 	.word	0x2000084c
 80073e8:	20000026 	.word	0x20000026
 80073ec:	20000850 	.word	0x20000850
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80073f0:	4b99      	ldr	r3, [pc, #612]	; (8007658 <fw_nav+0x410>)
 80073f2:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073f6:	461a      	mov	r2, r3
 80073f8:	4b98      	ldr	r3, [pc, #608]	; (800765c <fw_nav+0x414>)
 80073fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073fe:	4619      	mov	r1, r3
 8007400:	4b95      	ldr	r3, [pc, #596]	; (8007658 <fw_nav+0x410>)
 8007402:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007406:	fb03 f301 	mul.w	r3, r3, r1
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	4a92      	ldr	r2, [pc, #584]	; (8007658 <fw_nav+0x410>)
 800740e:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 8007412:	4611      	mov	r1, r2
 8007414:	4a90      	ldr	r2, [pc, #576]	; (8007658 <fw_nav+0x410>)
 8007416:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 800741a:	4618      	mov	r0, r3
 800741c:	f7fc fc60 	bl	8003ce0 <constrain>
 8007420:	4603      	mov	r3, r0
 8007422:	b21a      	sxth	r2, r3
 8007424:	4b8e      	ldr	r3, [pc, #568]	; (8007660 <fw_nav+0x418>)
 8007426:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 8007428:	4b8e      	ldr	r3, [pc, #568]	; (8007664 <fw_nav+0x41c>)
 800742a:	7cdb      	ldrb	r3, [r3, #19]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <fw_nav+0x1f8>
 8007430:	4b8a      	ldr	r3, [pc, #552]	; (800765c <fw_nav+0x414>)
 8007432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007436:	2b00      	cmp	r3, #0
 8007438:	db02      	blt.n	8007440 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 800743a:	4b8a      	ldr	r3, [pc, #552]	; (8007664 <fw_nav+0x41c>)
 800743c:	2200      	movs	r2, #0
 800743e:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 8007440:	4b88      	ldr	r3, [pc, #544]	; (8007664 <fw_nav+0x41c>)
 8007442:	79db      	ldrb	r3, [r3, #7]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d02c      	beq.n	80074a2 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 8007448:	4b86      	ldr	r3, [pc, #536]	; (8007664 <fw_nav+0x41c>)
 800744a:	7cdb      	ldrb	r3, [r3, #19]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d019      	beq.n	8007484 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 8007450:	4b81      	ldr	r3, [pc, #516]	; (8007658 <fw_nav+0x410>)
 8007452:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	0352      	lsls	r2, r2, #13
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	b29b      	uxth	r3, r3
 8007466:	b21a      	sxth	r2, r3
 8007468:	4b7c      	ldr	r3, [pc, #496]	; (800765c <fw_nav+0x414>)
 800746a:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 800746c:	4b7a      	ldr	r3, [pc, #488]	; (8007658 <fw_nav+0x410>)
 800746e:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007472:	b21a      	sxth	r2, r3
 8007474:	4b7a      	ldr	r3, [pc, #488]	; (8007660 <fw_nav+0x418>)
 8007476:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 8007478:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800747c:	2b18      	cmp	r3, #24
 800747e:	dc01      	bgt.n	8007484 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 8007480:	2300      	movs	r3, #0
 8007482:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007484:	4b78      	ldr	r3, [pc, #480]	; (8007668 <fw_nav+0x420>)
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	2b31      	cmp	r3, #49	; 0x31
 800748a:	d80a      	bhi.n	80074a2 <fw_nav+0x25a>
 800748c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007490:	7f7b      	ldrb	r3, [r7, #29]
 8007492:	429a      	cmp	r2, r3
 8007494:	dd05      	ble.n	80074a2 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 8007496:	4b75      	ldr	r3, [pc, #468]	; (800766c <fw_nav+0x424>)
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	7f7b      	ldrb	r3, [r7, #29]
 800749c:	4413      	add	r3, r2
 800749e:	4a74      	ldr	r2, [pc, #464]	; (8007670 <fw_nav+0x428>)
 80074a0:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 80074a2:	4b70      	ldr	r3, [pc, #448]	; (8007664 <fw_nav+0x41c>)
 80074a4:	7c9b      	ldrb	r3, [r3, #18]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <fw_nav+0x280>
 80074aa:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <fw_nav+0x420>)
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d80a      	bhi.n	80074c8 <fw_nav+0x280>
            f.ARMED = 0;
 80074b2:	4b6c      	ldr	r3, [pc, #432]	; (8007664 <fw_nav+0x41c>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80074b8:	4b6a      	ldr	r3, [pc, #424]	; (8007664 <fw_nav+0x41c>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80074be:	4b6b      	ldr	r3, [pc, #428]	; (800766c <fw_nav+0x424>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	3305      	adds	r3, #5
 80074c4:	4a6a      	ldr	r2, [pc, #424]	; (8007670 <fw_nav+0x428>)
 80074c6:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80074c8:	4b67      	ldr	r3, [pc, #412]	; (8007668 <fw_nav+0x420>)
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d80e      	bhi.n	80074ee <fw_nav+0x2a6>
            navDiff *= 0.1f;
 80074d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074d4:	ee07 3a90 	vmov	s15, r3
 80074d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074dc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007674 <fw_nav+0x42c>
 80074e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e8:	ee17 3a90 	vmov	r3, s15
 80074ec:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80074ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074f2:	2264      	movs	r2, #100	; 0x64
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 f92d 	bl	8009758 <wrap_18000>
 80074fe:	4603      	mov	r3, r0
 8007500:	4a5d      	ldr	r2, [pc, #372]	; (8007678 <fw_nav+0x430>)
 8007502:	fb82 1203 	smull	r1, r2, r2, r3
 8007506:	1152      	asrs	r2, r2, #5
 8007508:	17db      	asrs	r3, r3, #31
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 800750e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfb8      	it	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	b29b      	uxth	r3, r3
 800751a:	2baa      	cmp	r3, #170	; 0xaa
 800751c:	d901      	bls.n	8007522 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 800751e:	23af      	movs	r3, #175	; 0xaf
 8007520:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 8007522:	4b56      	ldr	r3, [pc, #344]	; (800767c <fw_nav+0x434>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b56      	ldr	r3, [pc, #344]	; (8007680 <fw_nav+0x438>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007534:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007684 <fw_nav+0x43c>
 8007538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800753c:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 8007540:	4b4e      	ldr	r3, [pc, #312]	; (800767c <fw_nav+0x434>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a4e      	ldr	r2, [pc, #312]	; (8007680 <fw_nav+0x438>)
 8007546:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 8007548:	4b44      	ldr	r3, [pc, #272]	; (800765c <fw_nav+0x414>)
 800754a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb8      	it	lt
 8007552:	425b      	neglt	r3, r3
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d809      	bhi.n	800756e <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 800755a:	4b4b      	ldr	r3, [pc, #300]	; (8007688 <fw_nav+0x440>)
 800755c:	ed93 7a00 	vldr	s14, [r3]
 8007560:	edd7 7a04 	vldr	s15, [r7, #16]
 8007564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007568:	4b47      	ldr	r3, [pc, #284]	; (8007688 <fw_nav+0x440>)
 800756a:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800756e:	4b3b      	ldr	r3, [pc, #236]	; (800765c <fw_nav+0x414>)
 8007570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007574:	b29b      	uxth	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	4413      	add	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	b29b      	uxth	r3, r3
 8007580:	b21a      	sxth	r2, r3
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <fw_nav+0x414>)
 8007584:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 8007586:	4b35      	ldr	r3, [pc, #212]	; (800765c <fw_nav+0x414>)
 8007588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007594:	4b3d      	ldr	r3, [pc, #244]	; (800768c <fw_nav+0x444>)
 8007596:	edd3 7a01 	vldr	s15, [r3, #4]
 800759a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800759e:	edd7 7a04 	vldr	s15, [r7, #16]
 80075a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075a6:	4b38      	ldr	r3, [pc, #224]	; (8007688 <fw_nav+0x440>)
 80075a8:	edd3 7a00 	vldr	s15, [r3]
 80075ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075b0:	4b35      	ldr	r3, [pc, #212]	; (8007688 <fw_nav+0x440>)
 80075b2:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80075b6:	4b34      	ldr	r3, [pc, #208]	; (8007688 <fw_nav+0x440>)
 80075b8:	edd3 7a00 	vldr	s15, [r3]
 80075bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80075c4:	4932      	ldr	r1, [pc, #200]	; (8007690 <fw_nav+0x448>)
 80075c6:	ee17 0a90 	vmov	r0, s15
 80075ca:	f7fc fb89 	bl	8003ce0 <constrain>
 80075ce:	ee07 0a90 	vmov	s15, r0
 80075d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075d6:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <fw_nav+0x440>)
 80075d8:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <fw_nav+0x414>)
 80075de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <fw_nav+0x44c>)
 80075e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b21b      	sxth	r3, r3
 80075f2:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80075f4:	4b19      	ldr	r3, [pc, #100]	; (800765c <fw_nav+0x414>)
 80075f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <fw_nav+0x44c>)
 80075fc:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80075fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bfb8      	it	lt
 8007606:	425b      	neglt	r3, r3
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b64      	cmp	r3, #100	; 0x64
 800760c:	d901      	bls.n	8007612 <fw_nav+0x3ca>
            delta[0] = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 8007612:	2300      	movs	r3, #0
 8007614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007618:	e00f      	b.n	800763a <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 800761a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007624:	491c      	ldr	r1, [pc, #112]	; (8007698 <fw_nav+0x450>)
 8007626:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800762a:	4a1b      	ldr	r2, [pc, #108]	; (8007698 <fw_nav+0x450>)
 800762c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007634:	3301      	adds	r3, #1
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800763e:	2b04      	cmp	r3, #4
 8007640:	d9eb      	bls.n	800761a <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 8007642:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <fw_nav+0x450>)
 8007648:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <fw_nav+0x454>)
 800764c:	2200      	movs	r2, #0
 800764e:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007656:	e037      	b.n	80076c8 <fw_nav+0x480>
 8007658:	20001890 	.word	0x20001890
 800765c:	2000084a 	.word	0x2000084a
 8007660:	20000850 	.word	0x20000850
 8007664:	20002014 	.word	0x20002014
 8007668:	200020ca 	.word	0x200020ca
 800766c:	200020cc 	.word	0x200020cc
 8007670:	20002054 	.word	0x20002054
 8007674:	3dcccccd 	.word	0x3dcccccd
 8007678:	51eb851f 	.word	0x51eb851f
 800767c:	2000136c 	.word	0x2000136c
 8007680:	20000854 	.word	0x20000854
 8007684:	447a0000 	.word	0x447a0000
 8007688:	20001f38 	.word	0x20001f38
 800768c:	20001f50 	.word	0x20001f50
 8007690:	fffffe0c 	.word	0xfffffe0c
 8007694:	20000828 	.word	0x20000828
 8007698:	20000830 	.word	0x20000830
 800769c:	20000858 	.word	0x20000858
            ALT_deltaSum += altHist[i];
 80076a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a4:	4a64      	ldr	r2, [pc, #400]	; (8007838 <fw_nav+0x5f0>)
 80076a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	4b63      	ldr	r3, [pc, #396]	; (800783c <fw_nav+0x5f4>)
 80076ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4413      	add	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b21a      	sxth	r2, r3
 80076ba:	4b60      	ldr	r3, [pc, #384]	; (800783c <fw_nav+0x5f4>)
 80076bc:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c2:	3301      	adds	r3, #1
 80076c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d9e7      	bls.n	80076a0 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 80076d0:	4b5a      	ldr	r3, [pc, #360]	; (800783c <fw_nav+0x5f4>)
 80076d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076de:	4b58      	ldr	r3, [pc, #352]	; (8007840 <fw_nav+0x5f8>)
 80076e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80076e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80076e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80076ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076f4:	ee17 3a90 	vmov	r3, s15
 80076f8:	b21a      	sxth	r2, r3
 80076fa:	4b50      	ldr	r3, [pc, #320]	; (800783c <fw_nav+0x5f4>)
 80076fc:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80076fe:	4b51      	ldr	r3, [pc, #324]	; (8007844 <fw_nav+0x5fc>)
 8007700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800770c:	4b4c      	ldr	r3, [pc, #304]	; (8007840 <fw_nav+0x5f8>)
 800770e:	edd3 7a00 	vldr	s15, [r3]
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800771a:	ee17 3a90 	vmov	r3, s15
 800771e:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 8007720:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800772c:	4b46      	ldr	r3, [pc, #280]	; (8007848 <fw_nav+0x600>)
 800772e:	edd3 7a00 	vldr	s15, [r3]
 8007732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800773a:	ee17 3a90 	vmov	r3, s15
 800773e:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 8007740:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfb8      	it	lt
 8007748:	425b      	neglt	r3, r3
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b03      	cmp	r3, #3
 800774e:	d809      	bhi.n	8007764 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 8007750:	4b3e      	ldr	r3, [pc, #248]	; (800784c <fw_nav+0x604>)
 8007752:	ed93 7a00 	vldr	s14, [r3]
 8007756:	edd7 7a04 	vldr	s15, [r7, #16]
 800775a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775e:	4b3b      	ldr	r3, [pc, #236]	; (800784c <fw_nav+0x604>)
 8007760:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007766:	461a      	mov	r2, r3
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	4413      	add	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	b29b      	uxth	r3, r3
 8007770:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 8007772:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800777e:	4b34      	ldr	r3, [pc, #208]	; (8007850 <fw_nav+0x608>)
 8007780:	edd3 7a01 	vldr	s15, [r3, #4]
 8007784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007788:	edd7 7a04 	vldr	s15, [r7, #16]
 800778c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007790:	4b2e      	ldr	r3, [pc, #184]	; (800784c <fw_nav+0x604>)
 8007792:	edd3 7a00 	vldr	s15, [r3]
 8007796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779a:	4b2c      	ldr	r3, [pc, #176]	; (800784c <fw_nav+0x604>)
 800779c:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 80077a0:	4b2a      	ldr	r3, [pc, #168]	; (800784c <fw_nav+0x604>)
 80077a2:	edd3 7a00 	vldr	s15, [r3]
 80077a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80077ae:	4929      	ldr	r1, [pc, #164]	; (8007854 <fw_nav+0x60c>)
 80077b0:	ee17 0a90 	vmov	r0, s15
 80077b4:	f7fc fa94 	bl	8003ce0 <constrain>
 80077b8:	ee07 0a90 	vmov	s15, r0
 80077bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <fw_nav+0x604>)
 80077c2:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80077c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077c8:	4b23      	ldr	r3, [pc, #140]	; (8007858 <fw_nav+0x610>)
 80077ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	b21b      	sxth	r3, r3
 80077d6:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 80077d8:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <fw_nav+0x610>)
 80077da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077dc:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 80077de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfb8      	it	lt
 80077e6:	425b      	neglt	r3, r3
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <fw_nav+0x5aa>
            delta[1] = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f8:	e00f      	b.n	800781a <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80077fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007804:	4915      	ldr	r1, [pc, #84]	; (800785c <fw_nav+0x614>)
 8007806:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800780a:	4a14      	ldr	r2, [pc, #80]	; (800785c <fw_nav+0x614>)
 800780c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007814:	3301      	adds	r3, #1
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800781e:	2b04      	cmp	r3, #4
 8007820:	d9eb      	bls.n	80077fa <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 8007822:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007826:	4b0d      	ldr	r3, [pc, #52]	; (800785c <fw_nav+0x614>)
 8007828:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <fw_nav+0x618>)
 800782c:	2200      	movs	r2, #0
 800782e:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007836:	e029      	b.n	800788c <fw_nav+0x644>
 8007838:	20000830 	.word	0x20000830
 800783c:	20000858 	.word	0x20000858
 8007840:	20001f50 	.word	0x20001f50
 8007844:	2000084a 	.word	0x2000084a
 8007848:	20001f38 	.word	0x20001f38
 800784c:	20001f34 	.word	0x20001f34
 8007850:	20001f40 	.word	0x20001f40
 8007854:	fffffe0c 	.word	0xfffffe0c
 8007858:	2000082a 	.word	0x2000082a
 800785c:	2000083c 	.word	0x2000083c
 8007860:	2000085a 	.word	0x2000085a
            NAV_deltaSum += navDif[i];
 8007864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007868:	4abe      	ldr	r2, [pc, #760]	; (8007b64 <fw_nav+0x91c>)
 800786a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800786e:	b29a      	uxth	r2, r3
 8007870:	4bbd      	ldr	r3, [pc, #756]	; (8007b68 <fw_nav+0x920>)
 8007872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007876:	b29b      	uxth	r3, r3
 8007878:	4413      	add	r3, r2
 800787a:	b29b      	uxth	r3, r3
 800787c:	b21a      	sxth	r2, r3
 800787e:	4bba      	ldr	r3, [pc, #744]	; (8007b68 <fw_nav+0x920>)
 8007880:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007886:	3301      	adds	r3, #1
 8007888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007890:	2b04      	cmp	r3, #4
 8007892:	d9e7      	bls.n	8007864 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007894:	4bb4      	ldr	r3, [pc, #720]	; (8007b68 <fw_nav+0x920>)
 8007896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078a2:	4bb2      	ldr	r3, [pc, #712]	; (8007b6c <fw_nav+0x924>)
 80078a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80078a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80078ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80078b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b8:	ee17 3a90 	vmov	r3, s15
 80078bc:	b21a      	sxth	r2, r3
 80078be:	4baa      	ldr	r3, [pc, #680]	; (8007b68 <fw_nav+0x920>)
 80078c0:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80078c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078ce:	4ba7      	ldr	r3, [pc, #668]	; (8007b6c <fw_nav+0x924>)
 80078d0:	edd3 7a00 	vldr	s15, [r3]
 80078d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078dc:	ee17 3a90 	vmov	r3, s15
 80078e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 80078e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078ee:	4ba0      	ldr	r3, [pc, #640]	; (8007b70 <fw_nav+0x928>)
 80078f0:	edd3 7a00 	vldr	s15, [r3]
 80078f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fc:	ee17 3a90 	vmov	r3, s15
 8007900:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 8007902:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007906:	4a9b      	ldr	r2, [pc, #620]	; (8007b74 <fw_nav+0x92c>)
 8007908:	fb82 1203 	smull	r1, r2, r2, r3
 800790c:	1092      	asrs	r2, r2, #2
 800790e:	17db      	asrs	r3, r3, #31
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	b21b      	sxth	r3, r3
 8007914:	4618      	mov	r0, r3
 8007916:	4b98      	ldr	r3, [pc, #608]	; (8007b78 <fw_nav+0x930>)
 8007918:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 800791c:	461a      	mov	r2, r3
 800791e:	f06f 0309 	mvn.w	r3, #9
 8007922:	fb03 f102 	mul.w	r1, r3, r2
 8007926:	4b94      	ldr	r3, [pc, #592]	; (8007b78 <fw_nav+0x930>)
 8007928:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 800792c:	461a      	mov	r2, r3
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	461a      	mov	r2, r3
 8007938:	f7fc f9d2 	bl	8003ce0 <constrain>
 800793c:	4603      	mov	r3, r0
 800793e:	b29a      	uxth	r2, r3
 8007940:	4b8e      	ldr	r3, [pc, #568]	; (8007b7c <fw_nav+0x934>)
 8007942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007946:	b29b      	uxth	r3, r3
 8007948:	4413      	add	r3, r2
 800794a:	b29b      	uxth	r3, r3
 800794c:	b21a      	sxth	r2, r3
 800794e:	4b8c      	ldr	r3, [pc, #560]	; (8007b80 <fw_nav+0x938>)
 8007950:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007952:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007956:	4a87      	ldr	r2, [pc, #540]	; (8007b74 <fw_nav+0x92c>)
 8007958:	fb82 1203 	smull	r1, r2, r2, r3
 800795c:	1092      	asrs	r2, r2, #2
 800795e:	17db      	asrs	r3, r3, #31
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	b21b      	sxth	r3, r3
 8007964:	4618      	mov	r0, r3
 8007966:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <fw_nav+0x930>)
 8007968:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 800796c:	461a      	mov	r2, r3
 800796e:	f06f 0309 	mvn.w	r3, #9
 8007972:	fb03 f102 	mul.w	r1, r3, r2
 8007976:	4b80      	ldr	r3, [pc, #512]	; (8007b78 <fw_nav+0x930>)
 8007978:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 800797c:	461a      	mov	r2, r3
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	461a      	mov	r2, r3
 8007988:	f7fc f9aa 	bl	8003ce0 <constrain>
 800798c:	4603      	mov	r3, r0
 800798e:	b29a      	uxth	r2, r3
 8007990:	4b75      	ldr	r3, [pc, #468]	; (8007b68 <fw_nav+0x920>)
 8007992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007996:	b29b      	uxth	r3, r3
 8007998:	4413      	add	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	b21a      	sxth	r2, r3
 800799e:	4b78      	ldr	r3, [pc, #480]	; (8007b80 <fw_nav+0x938>)
 80079a0:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 80079a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079a6:	4a73      	ldr	r2, [pc, #460]	; (8007b74 <fw_nav+0x92c>)
 80079a8:	fb82 1203 	smull	r1, r2, r2, r3
 80079ac:	1092      	asrs	r2, r2, #2
 80079ae:	17db      	asrs	r3, r3, #31
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	4b70      	ldr	r3, [pc, #448]	; (8007b78 <fw_nav+0x930>)
 80079b8:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80079bc:	461a      	mov	r2, r3
 80079be:	f06f 0309 	mvn.w	r3, #9
 80079c2:	fb03 f102 	mul.w	r1, r3, r2
 80079c6:	4b6c      	ldr	r3, [pc, #432]	; (8007b78 <fw_nav+0x930>)
 80079c8:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80079cc:	461a      	mov	r2, r3
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7fc f982 	bl	8003ce0 <constrain>
 80079dc:	4603      	mov	r3, r0
 80079de:	b29a      	uxth	r2, r3
 80079e0:	4b61      	ldr	r3, [pc, #388]	; (8007b68 <fw_nav+0x920>)
 80079e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	b21a      	sxth	r2, r3
 80079ee:	4b64      	ldr	r3, [pc, #400]	; (8007b80 <fw_nav+0x938>)
 80079f0:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 80079f2:	4b64      	ldr	r3, [pc, #400]	; (8007b84 <fw_nav+0x93c>)
 80079f4:	7c5b      	ldrb	r3, [r3, #17]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80079fa:	4b61      	ldr	r3, [pc, #388]	; (8007b80 <fw_nav+0x938>)
 80079fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a00:	4618      	mov	r0, r3
 8007a02:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <fw_nav+0x930>)
 8007a04:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007a08:	4259      	negs	r1, r3
 8007a0a:	4b5b      	ldr	r3, [pc, #364]	; (8007b78 <fw_nav+0x930>)
 8007a0c:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007a10:	461a      	mov	r2, r3
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f7fc f960 	bl	8003ce0 <constrain>
 8007a20:	4603      	mov	r3, r0
 8007a22:	b21a      	sxth	r2, r3
 8007a24:	4b56      	ldr	r3, [pc, #344]	; (8007b80 <fw_nav+0x938>)
 8007a26:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007a28:	4b56      	ldr	r3, [pc, #344]	; (8007b84 <fw_nav+0x93c>)
 8007a2a:	7cdb      	ldrb	r3, [r3, #19]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11b      	bne.n	8007a68 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 8007a30:	4b53      	ldr	r3, [pc, #332]	; (8007b80 <fw_nav+0x938>)
 8007a32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	4b53      	ldr	r3, [pc, #332]	; (8007b88 <fw_nav+0x940>)
 8007a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	425b      	neglt	r3, r3
 8007a44:	b299      	uxth	r1, r3
 8007a46:	4b4c      	ldr	r3, [pc, #304]	; (8007b78 <fw_nav+0x930>)
 8007a48:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007a4c:	484f      	ldr	r0, [pc, #316]	; (8007b8c <fw_nav+0x944>)
 8007a4e:	fba0 0303 	umull	r0, r3, r0, r3
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	fb11 f303 	smulbb	r3, r1, r3
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	b21a      	sxth	r2, r3
 8007a64:	4b46      	ldr	r3, [pc, #280]	; (8007b80 <fw_nav+0x938>)
 8007a66:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007a68:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <fw_nav+0x940>)
 8007a6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a82:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007a86:	2100      	movs	r1, #0
 8007a88:	ee17 0a90 	vmov	r0, s15
 8007a8c:	f7fc f928 	bl	8003ce0 <constrain>
 8007a90:	4601      	mov	r1, r0
 8007a92:	4b3f      	ldr	r3, [pc, #252]	; (8007b90 <fw_nav+0x948>)
 8007a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	b28b      	uxth	r3, r1
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b21a      	sxth	r2, r3
 8007aa2:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <fw_nav+0x948>)
 8007aa4:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007aa6:	4b3b      	ldr	r3, [pc, #236]	; (8007b94 <fw_nav+0x94c>)
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ab0:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007ab4:	ee07 3a90 	vmov	s15, r3
 8007ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007abc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007b98 <fw_nav+0x950>
 8007ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ac8:	ee17 3a90 	vmov	r3, s15
 8007acc:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007ace:	4b31      	ldr	r3, [pc, #196]	; (8007b94 <fw_nav+0x94c>)
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007ad6:	d305      	bcc.n	8007ae4 <fw_nav+0x89c>
 8007ad8:	4b2e      	ldr	r3, [pc, #184]	; (8007b94 <fw_nav+0x94c>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	f240 2226 	movw	r2, #550	; 0x226
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d90a      	bls.n	8007afa <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	4b2c      	ldr	r3, [pc, #176]	; (8007b9c <fw_nav+0x954>)
 8007aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	4413      	add	r3, r2
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b21a      	sxth	r2, r3
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <fw_nav+0x954>)
 8007af8:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007afa:	4b28      	ldr	r3, [pc, #160]	; (8007b9c <fw_nav+0x954>)
 8007afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fc f8ea 	bl	8003ce0 <constrain>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	b21a      	sxth	r2, r3
 8007b10:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <fw_nav+0x954>)
 8007b12:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007b14:	4b1e      	ldr	r3, [pc, #120]	; (8007b90 <fw_nav+0x948>)
 8007b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <fw_nav+0x954>)
 8007b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4413      	add	r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	b21a      	sxth	r2, r3
 8007b2a:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <fw_nav+0x948>)
 8007b2c:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007b2e:	4b18      	ldr	r3, [pc, #96]	; (8007b90 <fw_nav+0x948>)
 8007b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b34:	4618      	mov	r0, r3
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <fw_nav+0x930>)
 8007b38:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <fw_nav+0x930>)
 8007b40:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007b44:	461a      	mov	r2, r3
 8007b46:	f7fc f8cb 	bl	8003ce0 <constrain>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	b21a      	sxth	r2, r3
 8007b4e:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <fw_nav+0x948>)
 8007b50:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007b52:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <fw_nav+0x93c>)
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d122      	bne.n	8007ba0 <fw_nav+0x958>
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <fw_nav+0x93c>)
 8007b5c:	791b      	ldrb	r3, [r3, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d026      	beq.n	8007bb0 <fw_nav+0x968>
 8007b62:	e01d      	b.n	8007ba0 <fw_nav+0x958>
 8007b64:	2000083c 	.word	0x2000083c
 8007b68:	2000085a 	.word	0x2000085a
 8007b6c:	20001f40 	.word	0x20001f40
 8007b70:	20001f34 	.word	0x20001f34
 8007b74:	66666667 	.word	0x66666667
 8007b78:	20001890 	.word	0x20001890
 8007b7c:	20000858 	.word	0x20000858
 8007b80:	20000e90 	.word	0x20000e90
 8007b84:	20002014 	.word	0x20002014
 8007b88:	20000cd8 	.word	0x20000cd8
 8007b8c:	51eb851f 	.word	0x51eb851f
 8007b90:	20000850 	.word	0x20000850
 8007b94:	20002050 	.word	0x20002050
 8007b98:	3dcccccd 	.word	0x3dcccccd
 8007b9c:	2000082c 	.word	0x2000082c
 8007ba0:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <fw_nav+0x9ac>)
 8007ba2:	7a9b      	ldrb	r3, [r3, #10]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00f      	beq.n	8007bc8 <fw_nav+0x980>
 8007ba8:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <fw_nav+0x9ac>)
 8007baa:	7c9b      	ldrb	r3, [r3, #18]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007bb0:	4a11      	ldr	r2, [pc, #68]	; (8007bf8 <fw_nav+0x9b0>)
 8007bb2:	8b7b      	ldrh	r3, [r7, #26]
 8007bb4:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007bb6:	4b11      	ldr	r3, [pc, #68]	; (8007bfc <fw_nav+0x9b4>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <fw_nav+0x9b4>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <fw_nav+0x9b4>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <fw_nav+0x9b0>)
 8007bca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <fw_nav+0x9b8>)
 8007bd0:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <fw_nav+0x9b8>)
 8007bd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <fw_nav+0x9b4>)
 8007bdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	b21a      	sxth	r2, r3
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <fw_nav+0x9b8>)
 8007bea:	809a      	strh	r2, [r3, #4]
}
 8007bec:	bf00      	nop
 8007bee:	3728      	adds	r7, #40	; 0x28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20002014 	.word	0x20002014
 8007bf8:	20000850 	.word	0x20000850
 8007bfc:	20000e90 	.word	0x20000e90
 8007c00:	200020b0 	.word	0x200020b0

08007c04 <gpsSetState>:
static PifGpsNmea gps_nmea;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007c0e:	4a0b      	ldr	r2, [pc, #44]	; (8007c3c <gpsSetState+0x38>)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007c14:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <gpsSetState+0x38>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <gpsSetState+0x3c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <gpsSetState+0x38>)
 8007c20:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007c22:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <gpsSetState+0x38>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <gpsSetState+0x38>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	761a      	strb	r2, [r3, #24]
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	2000085c 	.word	0x2000085c
 8007c40:	2000136c 	.word	0x2000136c

08007c44 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <_evtGpsUbloxCfgResult+0x16>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <_evtGpsUbloxCfgResult+0x18>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	4a03      	ldr	r2, [pc, #12]	; (8007c6c <_evtGpsUbloxCfgResult+0x28>)
 8007c5e:	61d3      	str	r3, [r2, #28]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	2000085c 	.word	0x2000085c

08007c70 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	4b5c      	ldr	r3, [pc, #368]	; (8007df8 <_evtGpsReceive+0x188>)
 8007c88:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007c8a:	4b5b      	ldr	r3, [pc, #364]	; (8007df8 <_evtGpsReceive+0x188>)
 8007c8c:	7adb      	ldrb	r3, [r3, #11]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d049      	beq.n	8007d26 <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007c98:	a355      	add	r3, pc, #340	; (adr r3, 8007df0 <_evtGpsReceive+0x180>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fc69 	bl	8000574 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f7f8 fefd 	bl	8000aa8 <__aeabi_d2iz>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4a52      	ldr	r2, [pc, #328]	; (8007dfc <_evtGpsReceive+0x18c>)
 8007cb2:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007cba:	a34d      	add	r3, pc, #308	; (adr r3, 8007df0 <_evtGpsReceive+0x180>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fc58 	bl	8000574 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7f8 feec 	bl	8000aa8 <__aeabi_d2iz>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4a4a      	ldr	r2, [pc, #296]	; (8007dfc <_evtGpsReceive+0x18c>)
 8007cd4:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007cdc:	4b48      	ldr	r3, [pc, #288]	; (8007e00 <_evtGpsReceive+0x190>)
 8007cde:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7f8 ff05 	bl	8000af8 <__aeabi_d2uiz>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	4b44      	ldr	r3, [pc, #272]	; (8007e04 <_evtGpsReceive+0x194>)
 8007cf4:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007cf6:	2004      	movs	r0, #4
 8007cf8:	f7ff f92c 	bl	8006f54 <sensors>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f083 0301 	eor.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <_evtGpsReceive+0xb6>
 8007d08:	4b3b      	ldr	r3, [pc, #236]	; (8007df8 <_evtGpsReceive+0x188>)
 8007d0a:	7c1b      	ldrb	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007d10:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <_evtGpsReceive+0x194>)
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b3c      	ldr	r3, [pc, #240]	; (8007e08 <_evtGpsReceive+0x198>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2264      	movs	r2, #100	; 0x64
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	4a3a      	ldr	r2, [pc, #232]	; (8007e0c <_evtGpsReceive+0x19c>)
 8007d24:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <_evtGpsReceive+0x1a0>)
 8007d32:	f7f8 fd49 	bl	80007c8 <__aeabi_ddiv>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f7f8 fedb 	bl	8000af8 <__aeabi_d2uiz>
 8007d42:	4603      	mov	r3, r0
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <_evtGpsReceive+0x1a4>)
 8007d48:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	4b2e      	ldr	r3, [pc, #184]	; (8007e10 <_evtGpsReceive+0x1a0>)
 8007d56:	f7f8 fc0d 	bl	8000574 <__aeabi_dmul>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7f8 fec9 	bl	8000af8 <__aeabi_d2uiz>
 8007d66:	4603      	mov	r3, r0
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <_evtGpsReceive+0x1a8>)
 8007d6c:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007d6e:	2008      	movs	r0, #8
 8007d70:	f7ff f8f0 	bl	8006f54 <sensors>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f083 0301 	eor.w	r3, r3, #1
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d021      	beq.n	8007dc4 <_evtGpsReceive+0x154>
 8007d80:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <_evtGpsReceive+0x1a4>)
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	2b64      	cmp	r3, #100	; 0x64
 8007d86:	d91d      	bls.n	8007dc4 <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007d88:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <_evtGpsReceive+0x1a8>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fcde 	bl	8009758 <wrap_18000>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <_evtGpsReceive+0x1ac>)
 8007da0:	fb82 1203 	smull	r1, r2, r2, r3
 8007da4:	1092      	asrs	r2, r2, #2
 8007da6:	17db      	asrs	r3, r3, #31
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <_evtGpsReceive+0x1a8>)
 8007dae:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007db0:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <_evtGpsReceive+0x1a8>)
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <_evtGpsReceive+0x1b0>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	08db      	lsrs	r3, r3, #3
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	b21a      	sxth	r2, r3
 8007dc0:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <_evtGpsReceive+0x1b4>)
 8007dc2:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <_evtGpsReceive+0x1b8>)
 8007dca:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd0:	4a16      	ldr	r2, [pc, #88]	; (8007e2c <_evtGpsReceive+0x1bc>)
 8007dd2:	6013      	str	r3, [r2, #0]

    g_task_gps->immediate = TRUE;
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <_evtGpsReceive+0x1c0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	705a      	strb	r2, [r3, #1]
    gpsData.receive = TRUE;
 8007ddc:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <_evtGpsReceive+0x1c4>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	761a      	strb	r2, [r3, #24]
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w
 8007df0:	00000000 	.word	0x00000000
 8007df4:	416312d0 	.word	0x416312d0
 8007df8:	20002014 	.word	0x20002014
 8007dfc:	20002118 	.word	0x20002118
 8007e00:	20002176 	.word	0x20002176
 8007e04:	2000202a 	.word	0x2000202a
 8007e08:	200020cc 	.word	0x200020cc
 8007e0c:	20001f94 	.word	0x20001f94
 8007e10:	40240000 	.word	0x40240000
 8007e14:	20002050 	.word	0x20002050
 8007e18:	20000e96 	.word	0x20000e96
 8007e1c:	66666667 	.word	0x66666667
 8007e20:	cccccccd 	.word	0xcccccccd
 8007e24:	20002270 	.word	0x20002270
 8007e28:	200020ac 	.word	0x200020ac
 8007e2c:	200020bc 	.word	0x200020bc
 8007e30:	200021dc 	.word	0x200021dc
 8007e34:	2000085c 	.word	0x2000085c

08007e38 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <_evtGpsTimeout+0x4c>)
 8007e42:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d108      	bne.n	8007e5c <_evtGpsTimeout+0x24>
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <_evtGpsTimeout+0x50>)
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	; (8007e8c <_evtGpsTimeout+0x54>)
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4413      	add	r3, r2
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007e5a:	d005      	beq.n	8007e68 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <_evtGpsTimeout+0x58>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fa fc0e 	bl	8002684 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007e68:	2020      	movs	r0, #32
 8007e6a:	f7ff f89b 	bl	8006fa4 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007e6e:	2006      	movs	r0, #6
 8007e70:	f7ff fec8 	bl	8007c04 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007e74:	4907      	ldr	r1, [pc, #28]	; (8007e94 <_evtGpsTimeout+0x5c>)
 8007e76:	2002      	movs	r0, #2
 8007e78:	f00b faf6 	bl	8013468 <pifLog_Print>
#endif
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	200019c8 	.word	0x200019c8
 8007e88:	2000085c 	.word	0x2000085c
 8007e8c:	0802761c 	.word	0x0802761c
 8007e90:	20001640 	.word	0x20001640
 8007e94:	0802607c 	.word	0x0802607c

08007e98 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	71fb      	strb	r3, [r7, #7]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7ff feab 	bl	8007c04 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007eae:	4a32      	ldr	r2, [pc, #200]	; (8007f78 <gpsInit+0xe0>)
 8007eb0:	79bb      	ldrb	r3, [r7, #6]
 8007eb2:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007eb4:	4b31      	ldr	r3, [pc, #196]	; (8007f7c <gpsInit+0xe4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2f      	ldr	r2, [pc, #188]	; (8007f78 <gpsInit+0xe0>)
 8007eba:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007ebc:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <gpsInit+0xe0>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007ec2:	f000 ff07 	bl	8008cd4 <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX);    // signal GPS "thread" to initialize when it gets to it
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fa fa82 	bl	80023d8 <uartOpen>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	; (8007f80 <gpsInit+0xe8>)
 8007ed8:	6093      	str	r3, [r2, #8]
    if (mcfg.gps_type == GPS_NMEA && gpsInitData[baudrateIndex].baudrate == 9600) {
 8007eda:	4b2a      	ldr	r3, [pc, #168]	; (8007f84 <gpsInit+0xec>)
 8007edc:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d125      	bne.n	8007f30 <gpsInit+0x98>
 8007ee4:	79bb      	ldrb	r3, [r7, #6]
 8007ee6:	4a28      	ldr	r2, [pc, #160]	; (8007f88 <gpsInit+0xf0>)
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007ef2:	d11d      	bne.n	8007f30 <gpsInit+0x98>
    	serialStartReceiveFunc(&core.gpsport->comm);
 8007ef4:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <gpsInit+0xe8>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa fb9e 	bl	800263c <serialStartReceiveFunc>

        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007f00:	2100      	movs	r1, #0
 8007f02:	4822      	ldr	r0, [pc, #136]	; (8007f8c <gpsInit+0xf4>)
 8007f04:	f00e fa72 	bl	80163ec <pifGpsNmea_Init>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d02e      	beq.n	8007f6c <gpsInit+0xd4>
        gps_nmea._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007f0e:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <gpsInit+0xf4>)
 8007f10:	2203      	movs	r2, #3
 8007f12:	701a      	strb	r2, [r3, #0]
        pifGpsNmea_AttachComm(&gps_nmea, &core.gpsport->comm);
 8007f14:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <gpsInit+0xe8>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	481b      	ldr	r0, [pc, #108]	; (8007f8c <gpsInit+0xf4>)
 8007f1e:	f00e fa9b 	bl	8016458 <pifGpsNmea_AttachComm>
        gps_nmea._gps.evt_receive = _evtGpsReceive;
 8007f22:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <gpsInit+0xf4>)
 8007f24:	4a1a      	ldr	r2, [pc, #104]	; (8007f90 <gpsInit+0xf8>)
 8007f26:	605a      	str	r2, [r3, #4]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_CONFIGURATION);
 8007f28:	2004      	movs	r0, #4
 8007f2a:	f7ff fe6b 	bl	8007c04 <gpsSetState>
 8007f2e:	e013      	b.n	8007f58 <gpsInit+0xc0>
    }
    else {
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007f30:	2100      	movs	r1, #0
 8007f32:	4818      	ldr	r0, [pc, #96]	; (8007f94 <gpsInit+0xfc>)
 8007f34:	f00f f86a 	bl	801700c <pifGpsUblox_Init>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d018      	beq.n	8007f70 <gpsInit+0xd8>
        pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007f3e:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <gpsInit+0xe8>)
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4813      	ldr	r0, [pc, #76]	; (8007f94 <gpsInit+0xfc>)
 8007f48:	f00f f8ba 	bl	80170c0 <pifGpsUblox_AttachComm>
        gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <gpsInit+0xfc>)
 8007f4e:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <gpsInit+0xf8>)
 8007f50:	615a      	str	r2, [r3, #20]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_INITIALIZING);
 8007f52:	2001      	movs	r0, #1
 8007f54:	f7ff fe56 	bl	8007c04 <gpsSetState>
    }

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <gpsInit+0xec>)
 8007f5a:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	dd07      	ble.n	8007f72 <gpsInit+0xda>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007f62:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <gpsInit+0xec>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8007f6a:	e002      	b.n	8007f72 <gpsInit+0xda>
        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <gpsInit+0xda>
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007f70:	bf00      	nop
}
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	2000085c 	.word	0x2000085c
 8007f7c:	2000136c 	.word	0x2000136c
 8007f80:	20001640 	.word	0x20001640
 8007f84:	200019c8 	.word	0x200019c8
 8007f88:	0802761c 	.word	0x0802761c
 8007f8c:	20000880 	.word	0x20000880
 8007f90:	08007c71 	.word	0x08007c71
 8007f94:	200008f0 	.word	0x200008f0

08007f98 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
    if (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <gpsInitNmea+0x44>)
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <gpsInitNmea+0x48>)
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007fac:	d107      	bne.n	8007fbe <gpsInitNmea+0x26>
        pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <gpsInitNmea+0x4c>)
 8007fb0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fb4:	490c      	ldr	r1, [pc, #48]	; (8007fe8 <gpsInitNmea+0x50>)
 8007fb6:	480d      	ldr	r0, [pc, #52]	; (8007fec <gpsInitNmea+0x54>)
 8007fb8:	f00d fcc8 	bl	801594c <pifGps_SetTimeout>
 8007fbc:	e009      	b.n	8007fd2 <gpsInitNmea+0x3a>
    }
    else {
        gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <gpsInitNmea+0x58>)
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	741a      	strb	r2, [r3, #16]
        pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007fc4:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <gpsInitNmea+0x4c>)
 8007fc6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fca:	4907      	ldr	r1, [pc, #28]	; (8007fe8 <gpsInitNmea+0x50>)
 8007fcc:	4809      	ldr	r0, [pc, #36]	; (8007ff4 <gpsInitNmea+0x5c>)
 8007fce:	f00d fcbd 	bl	801594c <pifGps_SetTimeout>
    }
    gpsSetState(GPS_RECEIVINGDATA);
 8007fd2:	2005      	movs	r0, #5
 8007fd4:	f7ff fe16 	bl	8007c04 <gpsSetState>
}
 8007fd8:	bf00      	nop
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	2000085c 	.word	0x2000085c
 8007fe0:	0802761c 	.word	0x0802761c
 8007fe4:	08007e39 	.word	0x08007e39
 8007fe8:	20002068 	.word	0x20002068
 8007fec:	20000880 	.word	0x20000880
 8007ff0:	200008f0 	.word	0x200008f0
 8007ff4:	20000900 	.word	0x20000900

08007ff8 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 8008002:	4b9c      	ldr	r3, [pc, #624]	; (8008274 <gpsInitUblox+0x27c>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b13      	cmp	r3, #19
 8008008:	dd30      	ble.n	800806c <gpsInitUblox+0x74>
		if (gpsData.cfg_result == GUCR_ACK) {
 800800a:	4b9a      	ldr	r3, [pc, #616]	; (8008274 <gpsInitUblox+0x27c>)
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d112      	bne.n	8008038 <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 8008012:	4b98      	ldr	r3, [pc, #608]	; (8008274 <gpsInitUblox+0x27c>)
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	3b13      	subs	r3, #19
 8008018:	4a96      	ldr	r2, [pc, #600]	; (8008274 <gpsInitUblox+0x27c>)
 800801a:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 800801c:	4b95      	ldr	r3, [pc, #596]	; (8008274 <gpsInitUblox+0x27c>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4a95      	ldr	r2, [pc, #596]	; (8008278 <gpsInitUblox+0x280>)
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	4293      	cmp	r3, r2
 8008026:	d102      	bne.n	800802e <gpsInitUblox+0x36>
 8008028:	4b92      	ldr	r3, [pc, #584]	; (8008274 <gpsInitUblox+0x27c>)
 800802a:	220f      	movs	r2, #15
 800802c:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 800802e:	4b93      	ldr	r3, [pc, #588]	; (800827c <gpsInitUblox+0x284>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a90      	ldr	r2, [pc, #576]	; (8008274 <gpsInitUblox+0x27c>)
 8008034:	6153      	str	r3, [r2, #20]
 8008036:	e102      	b.n	800823e <gpsInitUblox+0x246>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8008038:	4b8e      	ldr	r3, [pc, #568]	; (8008274 <gpsInitUblox+0x27c>)
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d106      	bne.n	800804e <gpsInitUblox+0x56>
			pif_error = E_RECEIVE_NACK;
 8008040:	4b8f      	ldr	r3, [pc, #572]	; (8008280 <gpsInitUblox+0x288>)
 8008042:	2210      	movs	r2, #16
 8008044:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 8008046:	f240 1303 	movw	r3, #259	; 0x103
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e0f7      	b.n	800823e <gpsInitUblox+0x246>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 800804e:	4b8b      	ldr	r3, [pc, #556]	; (800827c <gpsInitUblox+0x284>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b88      	ldr	r3, [pc, #544]	; (8008274 <gpsInitUblox+0x27c>)
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2bc7      	cmp	r3, #199	; 0xc7
 800805a:	f240 80f0 	bls.w	800823e <gpsInitUblox+0x246>
				pif_error = E_TIMEOUT;
 800805e:	4b88      	ldr	r3, [pc, #544]	; (8008280 <gpsInitUblox+0x288>)
 8008060:	2207      	movs	r2, #7
 8008062:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008064:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	e0e8      	b.n	800823e <gpsInitUblox+0x246>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 800806c:	4b82      	ldr	r3, [pc, #520]	; (8008278 <gpsInitUblox+0x280>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d109      	bne.n	8008088 <gpsInitUblox+0x90>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 8008074:	4b80      	ldr	r3, [pc, #512]	; (8008278 <gpsInitUblox+0x280>)
 8008076:	220a      	movs	r2, #10
 8008078:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 800807a:	4b82      	ldr	r3, [pc, #520]	; (8008284 <gpsInitUblox+0x28c>)
 800807c:	4a82      	ldr	r2, [pc, #520]	; (8008288 <gpsInitUblox+0x290>)
 800807e:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8008080:	4b7e      	ldr	r3, [pc, #504]	; (800827c <gpsInitUblox+0x284>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a7b      	ldr	r2, [pc, #492]	; (8008274 <gpsInitUblox+0x27c>)
 8008086:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008088:	4b7c      	ldr	r3, [pc, #496]	; (800827c <gpsInitUblox+0x284>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	4b79      	ldr	r3, [pc, #484]	; (8008274 <gpsInitUblox+0x27c>)
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b04      	cmp	r3, #4
 8008094:	f240 80e9 	bls.w	800826a <gpsInitUblox+0x272>
		if (gpsData.step < cfg_msg_size) {
 8008098:	4b76      	ldr	r3, [pc, #472]	; (8008274 <gpsInitUblox+0x27c>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4a76      	ldr	r2, [pc, #472]	; (8008278 <gpsInitUblox+0x280>)
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	da26      	bge.n	80080f2 <gpsInitUblox+0xfa>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 80080a4:	4b73      	ldr	r3, [pc, #460]	; (8008274 <gpsInitUblox+0x27c>)
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	4613      	mov	r3, r2
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	4413      	add	r3, r2
 80080ae:	4a77      	ldr	r2, [pc, #476]	; (800828c <gpsInitUblox+0x294>)
 80080b0:	4413      	add	r3, r2
 80080b2:	2200      	movs	r2, #0
 80080b4:	9201      	str	r2, [sp, #4]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	2303      	movs	r3, #3
 80080ba:	2201      	movs	r2, #1
 80080bc:	2106      	movs	r1, #6
 80080be:	4871      	ldr	r0, [pc, #452]	; (8008284 <gpsInitUblox+0x28c>)
 80080c0:	f00f f84c 	bl	801715c <pifGpsUblox_SendUbxMsg>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <gpsInitUblox+0xec>
                gpsData.cfg_result = GUCR_NONE;
 80080ca:	4b6a      	ldr	r3, [pc, #424]	; (8008274 <gpsInitUblox+0x27c>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80080d0:	4b68      	ldr	r3, [pc, #416]	; (8008274 <gpsInitUblox+0x27c>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	3314      	adds	r3, #20
 80080d6:	4a67      	ldr	r2, [pc, #412]	; (8008274 <gpsInitUblox+0x27c>)
 80080d8:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080da:	4b68      	ldr	r3, [pc, #416]	; (800827c <gpsInitUblox+0x284>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a65      	ldr	r2, [pc, #404]	; (8008274 <gpsInitUblox+0x27c>)
 80080e0:	6153      	str	r3, [r2, #20]
 80080e2:	e0ac      	b.n	800823e <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080e4:	4b66      	ldr	r3, [pc, #408]	; (8008280 <gpsInitUblox+0x288>)
 80080e6:	220a      	movs	r2, #10
 80080e8:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080ea:	f240 131b 	movw	r3, #283	; 0x11b
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e0a5      	b.n	800823e <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 15) {
 80080f2:	4b60      	ldr	r3, [pc, #384]	; (8008274 <gpsInitUblox+0x27c>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d120      	bne.n	800813c <gpsInitUblox+0x144>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 80080fa:	2300      	movs	r3, #0
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	4b64      	ldr	r3, [pc, #400]	; (8008290 <gpsInitUblox+0x298>)
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2306      	movs	r3, #6
 8008104:	2208      	movs	r2, #8
 8008106:	2106      	movs	r1, #6
 8008108:	485e      	ldr	r0, [pc, #376]	; (8008284 <gpsInitUblox+0x28c>)
 800810a:	f00f f827 	bl	801715c <pifGpsUblox_SendUbxMsg>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00c      	beq.n	800812e <gpsInitUblox+0x136>
                gpsData.cfg_result = GUCR_NONE;
 8008114:	4b57      	ldr	r3, [pc, #348]	; (8008274 <gpsInitUblox+0x27c>)
 8008116:	2200      	movs	r2, #0
 8008118:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 800811a:	4b56      	ldr	r3, [pc, #344]	; (8008274 <gpsInitUblox+0x27c>)
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	3314      	adds	r3, #20
 8008120:	4a54      	ldr	r2, [pc, #336]	; (8008274 <gpsInitUblox+0x27c>)
 8008122:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008124:	4b55      	ldr	r3, [pc, #340]	; (800827c <gpsInitUblox+0x284>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a52      	ldr	r2, [pc, #328]	; (8008274 <gpsInitUblox+0x27c>)
 800812a:	6153      	str	r3, [r2, #20]
 800812c:	e087      	b.n	800823e <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 800812e:	4b54      	ldr	r3, [pc, #336]	; (8008280 <gpsInitUblox+0x288>)
 8008130:	220a      	movs	r2, #10
 8008132:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008134:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	e080      	b.n	800823e <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 16) {
 800813c:	4b4d      	ldr	r3, [pc, #308]	; (8008274 <gpsInitUblox+0x27c>)
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	2b10      	cmp	r3, #16
 8008142:	d120      	bne.n	8008186 <gpsInitUblox+0x18e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8008144:	2300      	movs	r3, #0
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	4b52      	ldr	r3, [pc, #328]	; (8008294 <gpsInitUblox+0x29c>)
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2324      	movs	r3, #36	; 0x24
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	2106      	movs	r1, #6
 8008152:	484c      	ldr	r0, [pc, #304]	; (8008284 <gpsInitUblox+0x28c>)
 8008154:	f00f f802 	bl	801715c <pifGpsUblox_SendUbxMsg>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <gpsInitUblox+0x180>
                gpsData.cfg_result = GUCR_NONE;
 800815e:	4b45      	ldr	r3, [pc, #276]	; (8008274 <gpsInitUblox+0x27c>)
 8008160:	2200      	movs	r2, #0
 8008162:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008164:	4b43      	ldr	r3, [pc, #268]	; (8008274 <gpsInitUblox+0x27c>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	3314      	adds	r3, #20
 800816a:	4a42      	ldr	r2, [pc, #264]	; (8008274 <gpsInitUblox+0x27c>)
 800816c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800816e:	4b43      	ldr	r3, [pc, #268]	; (800827c <gpsInitUblox+0x284>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a40      	ldr	r2, [pc, #256]	; (8008274 <gpsInitUblox+0x27c>)
 8008174:	6153      	str	r3, [r2, #20]
 8008176:	e062      	b.n	800823e <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008178:	4b41      	ldr	r3, [pc, #260]	; (8008280 <gpsInitUblox+0x288>)
 800817a:	220a      	movs	r2, #10
 800817c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800817e:	f240 1331 	movw	r3, #305	; 0x131
 8008182:	607b      	str	r3, [r7, #4]
 8008184:	e05b      	b.n	800823e <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 17) {
 8008186:	4b3b      	ldr	r3, [pc, #236]	; (8008274 <gpsInitUblox+0x27c>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b11      	cmp	r3, #17
 800818c:	d12f      	bne.n	80081ee <gpsInitUblox+0x1f6>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 800818e:	4b42      	ldr	r3, [pc, #264]	; (8008298 <gpsInitUblox+0x2a0>)
 8008190:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008194:	2b00      	cmp	r3, #0
 8008196:	db04      	blt.n	80081a2 <gpsInitUblox+0x1aa>
 8008198:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <gpsInitUblox+0x2a0>)
 800819a:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e000      	b.n	80081a4 <gpsInitUblox+0x1ac>
 80081a2:	2305      	movs	r3, #5
 80081a4:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4a3c      	ldr	r2, [pc, #240]	; (800829c <gpsInitUblox+0x2a4>)
 80081ac:	4413      	add	r3, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	9201      	str	r2, [sp, #4]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2308      	movs	r3, #8
 80081b6:	2216      	movs	r2, #22
 80081b8:	2106      	movs	r1, #6
 80081ba:	4832      	ldr	r0, [pc, #200]	; (8008284 <gpsInitUblox+0x28c>)
 80081bc:	f00e ffce 	bl	801715c <pifGpsUblox_SendUbxMsg>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00c      	beq.n	80081e0 <gpsInitUblox+0x1e8>
                gpsData.cfg_result = GUCR_NONE;
 80081c6:	4b2b      	ldr	r3, [pc, #172]	; (8008274 <gpsInitUblox+0x27c>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80081cc:	4b29      	ldr	r3, [pc, #164]	; (8008274 <gpsInitUblox+0x27c>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	3314      	adds	r3, #20
 80081d2:	4a28      	ldr	r2, [pc, #160]	; (8008274 <gpsInitUblox+0x27c>)
 80081d4:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80081d6:	4b29      	ldr	r3, [pc, #164]	; (800827c <gpsInitUblox+0x284>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a26      	ldr	r2, [pc, #152]	; (8008274 <gpsInitUblox+0x27c>)
 80081dc:	6153      	str	r3, [r2, #20]
 80081de:	e02e      	b.n	800823e <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80081e0:	4b27      	ldr	r3, [pc, #156]	; (8008280 <gpsInitUblox+0x288>)
 80081e2:	220a      	movs	r2, #10
 80081e4:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081e6:	f240 133d 	movw	r3, #317	; 0x13d
 80081ea:	607b      	str	r3, [r7, #4]
 80081ec:	e027      	b.n	800823e <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 18) {
 80081ee:	4b21      	ldr	r3, [pc, #132]	; (8008274 <gpsInitUblox+0x27c>)
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b12      	cmp	r3, #18
 80081f4:	d123      	bne.n	800823e <gpsInitUblox+0x246>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 80081f6:	4b21      	ldr	r3, [pc, #132]	; (800827c <gpsInitUblox+0x284>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <gpsInitUblox+0x27c>)
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	f242 720f 	movw	r2, #9999	; 0x270f
 8008204:	4293      	cmp	r3, r2
 8008206:	d814      	bhi.n	8008232 <gpsInitUblox+0x23a>
				if (gpsData.receive) {
 8008208:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <gpsInitUblox+0x27c>)
 800820a:	7e1b      	ldrb	r3, [r3, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d016      	beq.n	800823e <gpsInitUblox+0x246>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 8008210:	4b23      	ldr	r3, [pc, #140]	; (80082a0 <gpsInitUblox+0x2a8>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	3304      	adds	r3, #4
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa fa10 	bl	800263c <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 800821c:	4b21      	ldr	r3, [pc, #132]	; (80082a4 <gpsInitUblox+0x2ac>)
 800821e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008222:	4921      	ldr	r1, [pc, #132]	; (80082a8 <gpsInitUblox+0x2b0>)
 8008224:	4821      	ldr	r0, [pc, #132]	; (80082ac <gpsInitUblox+0x2b4>)
 8008226:	f00d fb91 	bl	801594c <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 800822a:	2005      	movs	r0, #5
 800822c:	f7ff fcea 	bl	8007c04 <gpsSetState>
 8008230:	e005      	b.n	800823e <gpsInitUblox+0x246>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <gpsInitUblox+0x288>)
 8008234:	2207      	movs	r2, #7
 8008236:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008238:	f240 134b 	movw	r3, #331	; 0x14b
 800823c:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d013      	beq.n	800826c <gpsInitUblox+0x274>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <gpsInitUblox+0x280>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <gpsInitUblox+0x27c>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <gpsInitUblox+0x288>)
 8008250:	7812      	ldrb	r2, [r2, #0]
 8008252:	9201      	str	r2, [sp, #4]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	460b      	mov	r3, r1
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	4915      	ldr	r1, [pc, #84]	; (80082b0 <gpsInitUblox+0x2b8>)
 800825c:	2004      	movs	r0, #4
 800825e:	f00b f995 	bl	801358c <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008262:	4812      	ldr	r0, [pc, #72]	; (80082ac <gpsInitUblox+0x2b4>)
 8008264:	f7ff fde8 	bl	8007e38 <_evtGpsTimeout>
 8008268:	e000      	b.n	800826c <gpsInitUblox+0x274>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 800826a:	bf00      	nop
	}
}
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2000085c 	.word	0x2000085c
 8008278:	20000c7a 	.word	0x20000c7a
 800827c:	2000136c 	.word	0x2000136c
 8008280:	20001365 	.word	0x20001365
 8008284:	200008f0 	.word	0x200008f0
 8008288:	08007c45 	.word	0x08007c45
 800828c:	08027644 	.word	0x08027644
 8008290:	08027664 	.word	0x08027664
 8008294:	0802766c 	.word	0x0802766c
 8008298:	200019c8 	.word	0x200019c8
 800829c:	08027690 	.word	0x08027690
 80082a0:	20001640 	.word	0x20001640
 80082a4:	08007e39 	.word	0x08007e39
 80082a8:	20002068 	.word	0x20002068
 80082ac:	20000900 	.word	0x20000900
 80082b0:	0802608c 	.word	0x0802608c

080082b4 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <gpsInitHardware+0x34>)
 80082ba:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80082be:	2b03      	cmp	r3, #3
 80082c0:	dc0d      	bgt.n	80082de <gpsInitHardware+0x2a>
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	da0a      	bge.n	80082dc <gpsInitHardware+0x28>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <gpsInitHardware+0x1c>
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d003      	beq.n	80082d6 <gpsInitHardware+0x22>
 80082ce:	e006      	b.n	80082de <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80082d0:	f7ff fe62 	bl	8007f98 <gpsInitNmea>
            break;
 80082d4:	e003      	b.n	80082de <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80082d6:	f7ff fe8f 	bl	8007ff8 <gpsInitUblox>
            break;
 80082da:	e000      	b.n	80082de <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80082dc:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <gpsInitHardware+0x38>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	605a      	str	r2, [r3, #4]
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200019c8 	.word	0x200019c8
 80082ec:	2000085c 	.word	0x2000085c

080082f0 <gpsThread>:

void gpsThread(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 80082f6:	4b70      	ldr	r3, [pc, #448]	; (80084b8 <gpsThread+0x1c8>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b06      	cmp	r3, #6
 80082fc:	f200 80d8 	bhi.w	80084b0 <gpsThread+0x1c0>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <gpsThread+0x18>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	080084b1 	.word	0x080084b1
 800830c:	08008325 	.word	0x08008325
 8008310:	0800837f 	.word	0x0800837f
 8008314:	080083d7 	.word	0x080083d7
 8008318:	08008415 	.word	0x08008415
 800831c:	080084b1 	.word	0x080084b1
 8008320:	0800841b 	.word	0x0800841b
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 8008324:	4b65      	ldr	r3, [pc, #404]	; (80084bc <gpsThread+0x1cc>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 800832a:	4b63      	ldr	r3, [pc, #396]	; (80084b8 <gpsThread+0x1c8>)
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	4a61      	ldr	r2, [pc, #388]	; (80084b8 <gpsThread+0x1c8>)
 8008334:	6912      	ldr	r2, [r2, #16]
 8008336:	2a00      	cmp	r2, #0
 8008338:	d001      	beq.n	800833e <gpsThread+0x4e>
 800833a:	22c8      	movs	r2, #200	; 0xc8
 800833c:	e001      	b.n	8008342 <gpsThread+0x52>
 800833e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008342:	429a      	cmp	r2, r3
 8008344:	f200 80af 	bhi.w	80084a6 <gpsThread+0x1b6>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008348:	4b5b      	ldr	r3, [pc, #364]	; (80084b8 <gpsThread+0x1c8>)
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b04      	cmp	r3, #4
 800834e:	dc12      	bgt.n	8008376 <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008350:	4b5b      	ldr	r3, [pc, #364]	; (80084c0 <gpsThread+0x1d0>)
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	4b58      	ldr	r3, [pc, #352]	; (80084b8 <gpsThread+0x1c8>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	495a      	ldr	r1, [pc, #360]	; (80084c4 <gpsThread+0x1d4>)
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	440b      	add	r3, r1
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f7fa f958 	bl	8002618 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008368:	4b53      	ldr	r3, [pc, #332]	; (80084b8 <gpsThread+0x1c8>)
 800836a:	2202      	movs	r2, #2
 800836c:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 800836e:	4a52      	ldr	r2, [pc, #328]	; (80084b8 <gpsThread+0x1c8>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 8008374:	e09c      	b.n	80084b0 <gpsThread+0x1c0>
                gpsSetState(GPS_SETBAUD);
 8008376:	2003      	movs	r0, #3
 8008378:	f7ff fc44 	bl	8007c04 <gpsSetState>
            break;
 800837c:	e098      	b.n	80084b0 <gpsThread+0x1c0>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 800837e:	4b4f      	ldr	r3, [pc, #316]	; (80084bc <gpsThread+0x1cc>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 8008384:	4b4c      	ldr	r3, [pc, #304]	; (80084b8 <gpsThread+0x1c8>)
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2bc7      	cmp	r3, #199	; 0xc7
 800838e:	f240 808c 	bls.w	80084aa <gpsThread+0x1ba>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 8008392:	4b49      	ldr	r3, [pc, #292]	; (80084b8 <gpsThread+0x1c8>)
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	4a4b      	ldr	r2, [pc, #300]	; (80084c4 <gpsThread+0x1d4>)
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	9201      	str	r2, [sp, #4]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2303      	movs	r3, #3
 80083a6:	2207      	movs	r2, #7
 80083a8:	2101      	movs	r1, #1
 80083aa:	4847      	ldr	r0, [pc, #284]	; (80084c8 <gpsThread+0x1d8>)
 80083ac:	f00e fea0 	bl	80170f0 <pifGpsUblox_SetPubxConfig>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <gpsThread+0xde>
                gpsData.state_position++;
 80083b6:	4b40      	ldr	r3, [pc, #256]	; (80084b8 <gpsThread+0x1c8>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a3e      	ldr	r2, [pc, #248]	; (80084b8 <gpsThread+0x1c8>)
 80083be:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 80083c0:	4b3d      	ldr	r3, [pc, #244]	; (80084b8 <gpsThread+0x1c8>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80083c6:	4a3c      	ldr	r2, [pc, #240]	; (80084b8 <gpsThread+0x1c8>)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80083cc:	e070      	b.n	80084b0 <gpsThread+0x1c0>
        		gpsSetState(GPS_INITIALIZING);
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7ff fc18 	bl	8007c04 <gpsSetState>
            break;
 80083d4:	e06c      	b.n	80084b0 <gpsThread+0x1c0>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <gpsThread+0x1cc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <gpsThread+0x1c8>)
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2bc7      	cmp	r3, #199	; 0xc7
 80083e6:	d962      	bls.n	80084ae <gpsThread+0x1be>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80083e8:	4b35      	ldr	r3, [pc, #212]	; (80084c0 <gpsThread+0x1d0>)
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <gpsThread+0x1c8>)
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	4934      	ldr	r1, [pc, #208]	; (80084c4 <gpsThread+0x1d4>)
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	440b      	add	r3, r1
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fa f90c 	bl	8002618 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008400:	4b2f      	ldr	r3, [pc, #188]	; (80084c0 <gpsThread+0x1d0>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fa f918 	bl	800263c <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 800840c:	2004      	movs	r0, #4
 800840e:	f7ff fbf9 	bl	8007c04 <gpsSetState>
            break;
 8008412:	e04d      	b.n	80084b0 <gpsThread+0x1c0>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 8008414:	f7ff ff4e 	bl	80082b4 <gpsInitHardware>
            break;
 8008418:	e04a      	b.n	80084b0 <gpsThread+0x1c0>

        case GPS_LOSTCOMMS:
            if (mcfg.gps_type == GPS_NMEA && gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 800841a:	4b2c      	ldr	r3, [pc, #176]	; (80084cc <gpsThread+0x1dc>)
 800841c:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10f      	bne.n	8008444 <gpsThread+0x154>
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <gpsThread+0x1c8>)
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	4a26      	ldr	r2, [pc, #152]	; (80084c4 <gpsThread+0x1d4>)
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008434:	d106      	bne.n	8008444 <gpsThread+0x154>
                pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, 0, NULL);
 8008436:	2300      	movs	r3, #0
 8008438:	2200      	movs	r2, #0
 800843a:	4925      	ldr	r1, [pc, #148]	; (80084d0 <gpsThread+0x1e0>)
 800843c:	4825      	ldr	r0, [pc, #148]	; (80084d4 <gpsThread+0x1e4>)
 800843e:	f00d fa85 	bl	801594c <pifGps_SetTimeout>
 8008442:	e005      	b.n	8008450 <gpsThread+0x160>
            }
            else {
                pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 8008444:	2300      	movs	r3, #0
 8008446:	2200      	movs	r2, #0
 8008448:	4921      	ldr	r1, [pc, #132]	; (80084d0 <gpsThread+0x1e0>)
 800844a:	4823      	ldr	r0, [pc, #140]	; (80084d8 <gpsThread+0x1e8>)
 800844c:	f00d fa7e 	bl	801594c <pifGps_SetTimeout>
            }
            gpsData.errors++;
 8008450:	4b19      	ldr	r3, [pc, #100]	; (80084b8 <gpsThread+0x1c8>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	3301      	adds	r3, #1
 8008456:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <gpsThread+0x1c8>)
 8008458:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 800845a:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <gpsThread+0x1dc>)
 800845c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008460:	2b00      	cmp	r3, #0
 8008462:	d012      	beq.n	800848a <gpsThread+0x19a>
                gpsData.baudrateIndex++;
 8008464:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <gpsThread+0x1c8>)
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	3301      	adds	r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <gpsThread+0x1c8>)
 800846e:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008470:	4b11      	ldr	r3, [pc, #68]	; (80084b8 <gpsThread+0x1c8>)
 8008472:	785a      	ldrb	r2, [r3, #1]
 8008474:	4b19      	ldr	r3, [pc, #100]	; (80084dc <gpsThread+0x1ec>)
 8008476:	fba3 1302 	umull	r1, r3, r3, r2
 800847a:	0899      	lsrs	r1, r3, #2
 800847c:	460b      	mov	r3, r1
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	b2da      	uxtb	r2, r3
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <gpsThread+0x1c8>)
 8008488:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <gpsThread+0x1cc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <gpsThread+0x1c8>)
 8008490:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 8008492:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <gpsThread+0x1f0>)
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008498:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <gpsThread+0x1f4>)
 800849a:	2200      	movs	r2, #0
 800849c:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 800849e:	2001      	movs	r0, #1
 80084a0:	f7ff fbb0 	bl	8007c04 <gpsSetState>
            break;
 80084a4:	e004      	b.n	80084b0 <gpsThread+0x1c0>
                return;
 80084a6:	bf00      	nop
 80084a8:	e002      	b.n	80084b0 <gpsThread+0x1c0>
                return;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <gpsThread+0x1c0>
                return;
 80084ae:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000085c 	.word	0x2000085c
 80084bc:	2000136c 	.word	0x2000136c
 80084c0:	20001640 	.word	0x20001640
 80084c4:	0802761c 	.word	0x0802761c
 80084c8:	200008f0 	.word	0x200008f0
 80084cc:	200019c8 	.word	0x200019c8
 80084d0:	20002068 	.word	0x20002068
 80084d4:	20000880 	.word	0x20000880
 80084d8:	20000900 	.word	0x20000900
 80084dc:	cccccccd 	.word	0xcccccccd
 80084e0:	20002176 	.word	0x20002176
 80084e4:	20002014 	.word	0x20002014

080084e8 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80084ee:	4b2b      	ldr	r3, [pc, #172]	; (800859c <gpsPollSvinfo+0xb4>)
 80084f0:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d14d      	bne.n	8008594 <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80084f8:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <gpsPollSvinfo+0xb8>)
 80084fa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <gpsPollSvinfo+0xbc>)
 8008500:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e02a      	b.n	800855e <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 8008508:	4a25      	ldr	r2, [pc, #148]	; (80085a0 <gpsPollSvinfo+0xb8>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3379      	adds	r3, #121	; 0x79
 8008510:	7819      	ldrb	r1, [r3, #0]
 8008512:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <gpsPollSvinfo+0xc0>)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	460a      	mov	r2, r1
 800851a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 800851c:	4a20      	ldr	r2, [pc, #128]	; (80085a0 <gpsPollSvinfo+0xb8>)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	3389      	adds	r3, #137	; 0x89
 8008524:	7819      	ldrb	r1, [r3, #0]
 8008526:	4a21      	ldr	r2, [pc, #132]	; (80085ac <gpsPollSvinfo+0xc4>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4413      	add	r3, r2
 800852c:	460a      	mov	r2, r1
 800852e:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008530:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <gpsPollSvinfo+0xb8>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	3399      	adds	r3, #153	; 0x99
 8008538:	7819      	ldrb	r1, [r3, #0]
 800853a:	4a1d      	ldr	r2, [pc, #116]	; (80085b0 <gpsPollSvinfo+0xc8>)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4413      	add	r3, r2
 8008540:	460a      	mov	r2, r1
 8008542:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 8008544:	4a16      	ldr	r2, [pc, #88]	; (80085a0 <gpsPollSvinfo+0xb8>)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	33a9      	adds	r3, #169	; 0xa9
 800854c:	7819      	ldrb	r1, [r3, #0]
 800854e:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <gpsPollSvinfo+0xcc>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	460a      	mov	r2, r1
 8008556:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3301      	adds	r3, #1
 800855c:	607b      	str	r3, [r7, #4]
 800855e:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <gpsPollSvinfo+0xbc>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4293      	cmp	r3, r2
 8008568:	dbce      	blt.n	8008508 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 800856a:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <gpsPollSvinfo+0xb8>)
 800856c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008570:	4a11      	ldr	r2, [pc, #68]	; (80085b8 <gpsPollSvinfo+0xd0>)
 8008572:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <gpsPollSvinfo+0xb8>)
 8008576:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800857a:	4a0f      	ldr	r2, [pc, #60]	; (80085b8 <gpsPollSvinfo+0xd0>)
 800857c:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 800857e:	2300      	movs	r3, #0
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	2300      	movs	r3, #0
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	2300      	movs	r3, #0
 8008588:	2230      	movs	r2, #48	; 0x30
 800858a:	2101      	movs	r1, #1
 800858c:	4804      	ldr	r0, [pc, #16]	; (80085a0 <gpsPollSvinfo+0xb8>)
 800858e:	f00e fde5 	bl	801715c <pifGpsUblox_SendUbxMsg>
 8008592:	e000      	b.n	8008596 <gpsPollSvinfo+0xae>
        return;
 8008594:	bf00      	nop
}
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	200019c8 	.word	0x200019c8
 80085a0:	200008f0 	.word	0x200008f0
 80085a4:	20002177 	.word	0x20002177
 80085a8:	20001ff0 	.word	0x20001ff0
 80085ac:	200020f8 	.word	0x200020f8
 80085b0:	20002150 	.word	0x20002150
 80085b4:	200021b8 	.word	0x200021b8
 80085b8:	200020a4 	.word	0x200020a4

080085bc <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	edd3 7a00 	vldr	s15, [r3]
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085de:	ee17 3a90 	vmov	r3, s15
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	ed93 7a00 	vldr	s14, [r3]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008612:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	edd3 7a00 	vldr	s15, [r3]
 800861c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	edd3 7a00 	vldr	s15, [r3]
 8008630:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	edd3 7a03 	vldr	s15, [r3, #12]
 800863a:	eef1 7a67 	vneg.f32	s15, s15
 800863e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	edd3 7a03 	vldr	s15, [r3, #12]
 8008648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800864c:	ee17 2a90 	vmov	r2, s15
 8008650:	ee16 1a90 	vmov	r1, s13
 8008654:	ee17 0a10 	vmov	r0, s14
 8008658:	f7fb fb42 	bl	8003ce0 <constrain>
 800865c:	ee07 0a90 	vmov	s15, r0
 8008660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	edd3 7a00 	vldr	s15, [r3]
 8008670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008674:	ee17 3a90 	vmov	r3, s15
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	ed93 7a00 	vldr	s14, [r3]
 80086a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7f7 ff05 	bl	80004c4 <__aeabi_f2d>
 80086ba:	4604      	mov	r4, r0
 80086bc:	460d      	mov	r5, r1
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f7 fefe 	bl	80004c4 <__aeabi_f2d>
 80086c8:	4680      	mov	r8, r0
 80086ca:	4689      	mov	r9, r1
 80086cc:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <get_D+0x128>)
 80086ce:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	ee17 0a90 	vmov	r0, s15
 80086de:	f7f7 fef1 	bl	80004c4 <__aeabi_f2d>
 80086e2:	a32f      	add	r3, pc, #188	; (adr r3, 80087a0 <get_D+0x120>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 ff44 	bl	8000574 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	f04f 0000 	mov.w	r0, #0
 80086f4:	492d      	ldr	r1, [pc, #180]	; (80087ac <get_D+0x12c>)
 80086f6:	f7f8 f867 	bl	80007c8 <__aeabi_ddiv>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4692      	mov	sl, r2
 8008700:	469b      	mov	fp, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7f7 fedc 	bl	80004c4 <__aeabi_f2d>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	f7f7 fd78 	bl	8000208 <__adddf3>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 f852 	bl	80007c8 <__aeabi_ddiv>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4690      	mov	r8, r2
 800872a:	4699      	mov	r9, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	edd3 7a02 	vldr	s15, [r3, #8]
 8008738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800873c:	ee17 0a90 	vmov	r0, s15
 8008740:	f7f7 fec0 	bl	80004c4 <__aeabi_f2d>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4640      	mov	r0, r8
 800874a:	4649      	mov	r1, r9
 800874c:	f7f7 ff12 	bl	8000574 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 fd56 	bl	8000208 <__adddf3>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4610      	mov	r0, r2
 8008762:	4619      	mov	r1, r3
 8008764:	f7f8 f9e8 	bl	8000b38 <__aeabi_d2f>
 8008768:	4602      	mov	r2, r0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	edd3 7a04 	vldr	s15, [r3, #16]
 8008788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008790:	ee17 3a90 	vmov	r3, s15
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800879e:	bf00      	nop
 80087a0:	54442d18 	.word	0x54442d18
 80087a4:	401921fb 	.word	0x401921fb
 80087a8:	20001890 	.word	0x20001890
 80087ac:	3ff00000 	.word	0x3ff00000

080087b0 <reset_PID>:

static void reset_PID(PID *pid)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	609a      	str	r2, [r3, #8]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b089      	sub	sp, #36	; 0x24
 80087e0:	af02      	add	r7, sp, #8
 80087e2:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80087e4:	4b84      	ldr	r3, [pc, #528]	; (80089f8 <taskGpsNewData+0x21c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a84      	ldr	r2, [pc, #528]	; (80089fc <taskGpsNewData+0x220>)
 80087ea:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 80087ec:	2020      	movs	r0, #32
 80087ee:	f7fe fbc7 	bl	8006f80 <sensorsSet>
        if (GPS_update == 1)
 80087f2:	4b83      	ldr	r3, [pc, #524]	; (8008a00 <taskGpsNewData+0x224>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d103      	bne.n	8008802 <taskGpsNewData+0x26>
            GPS_update = 0;
 80087fa:	4b81      	ldr	r3, [pc, #516]	; (8008a00 <taskGpsNewData+0x224>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e002      	b.n	8008808 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 8008802:	4b7f      	ldr	r3, [pc, #508]	; (8008a00 <taskGpsNewData+0x224>)
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008808:	4b7e      	ldr	r3, [pc, #504]	; (8008a04 <taskGpsNewData+0x228>)
 800880a:	7adb      	ldrb	r3, [r3, #11]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 81ae 	beq.w	8008b6e <taskGpsNewData+0x392>
 8008812:	4b7d      	ldr	r3, [pc, #500]	; (8008a08 <taskGpsNewData+0x22c>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b04      	cmp	r3, #4
 8008818:	f240 81a9 	bls.w	8008b6e <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 800881c:	4b79      	ldr	r3, [pc, #484]	; (8008a04 <taskGpsNewData+0x228>)
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <taskGpsNewData+0x56>
 8008824:	4b77      	ldr	r3, [pc, #476]	; (8008a04 <taskGpsNewData+0x228>)
 8008826:	7c1b      	ldrb	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 800882c:	4b75      	ldr	r3, [pc, #468]	; (8008a04 <taskGpsNewData+0x228>)
 800882e:	2200      	movs	r2, #0
 8008830:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 8008832:	4b74      	ldr	r3, [pc, #464]	; (8008a04 <taskGpsNewData+0x228>)
 8008834:	7b1b      	ldrb	r3, [r3, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <taskGpsNewData+0x6a>
 800883a:	4b72      	ldr	r3, [pc, #456]	; (8008a04 <taskGpsNewData+0x228>)
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 8008842:	f000 f9c1 	bl	8008bc8 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 8008846:	4b71      	ldr	r3, [pc, #452]	; (8008a0c <taskGpsNewData+0x230>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	4b70      	ldr	r3, [pc, #448]	; (8008a10 <taskGpsNewData+0x234>)
 800884e:	fb83 1302 	smull	r1, r3, r3, r2
 8008852:	1059      	asrs	r1, r3, #1
 8008854:	17d3      	asrs	r3, r2, #31
 8008856:	1ac9      	subs	r1, r1, r3
 8008858:	460b      	mov	r3, r1
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	1ad1      	subs	r1, r2, r3
 8008860:	b2ca      	uxtb	r2, r1
 8008862:	4b6a      	ldr	r3, [pc, #424]	; (8008a0c <taskGpsNewData+0x230>)
 8008864:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	e09f      	b.n	80089ac <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 800886c:	4a69      	ldr	r2, [pc, #420]	; (8008a14 <taskGpsNewData+0x238>)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008874:	4968      	ldr	r1, [pc, #416]	; (8008a18 <taskGpsNewData+0x23c>)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 800887c:	4a66      	ldr	r2, [pc, #408]	; (8008a18 <taskGpsNewData+0x23c>)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008884:	4a65      	ldr	r2, [pc, #404]	; (8008a1c <taskGpsNewData+0x240>)
 8008886:	fb82 1203 	smull	r1, r2, r2, r3
 800888a:	1592      	asrs	r2, r2, #22
 800888c:	17db      	asrs	r3, r3, #31
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	4963      	ldr	r1, [pc, #396]	; (8008a20 <taskGpsNewData+0x244>)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008898:	4a5f      	ldr	r2, [pc, #380]	; (8008a18 <taskGpsNewData+0x23c>)
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088a0:	495f      	ldr	r1, [pc, #380]	; (8008a20 <taskGpsNewData+0x244>)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088a8:	495e      	ldr	r1, [pc, #376]	; (8008a24 <taskGpsNewData+0x248>)
 80088aa:	fb01 f303 	mul.w	r3, r1, r3
 80088ae:	4413      	add	r3, r2
 80088b0:	4a5d      	ldr	r2, [pc, #372]	; (8008a28 <taskGpsNewData+0x24c>)
 80088b2:	fb82 1203 	smull	r1, r2, r2, r3
 80088b6:	1312      	asrs	r2, r2, #12
 80088b8:	17db      	asrs	r3, r3, #31
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	b299      	uxth	r1, r3
 80088be:	4a5b      	ldr	r2, [pc, #364]	; (8008a2c <taskGpsNewData+0x250>)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 80088c6:	4a5a      	ldr	r2, [pc, #360]	; (8008a30 <taskGpsNewData+0x254>)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088ce:	4b4f      	ldr	r3, [pc, #316]	; (8008a0c <taskGpsNewData+0x230>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	461c      	mov	r4, r3
 80088d4:	4857      	ldr	r0, [pc, #348]	; (8008a34 <taskGpsNewData+0x258>)
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	4423      	add	r3, r4
 80088e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088e4:	1aca      	subs	r2, r1, r3
 80088e6:	4952      	ldr	r1, [pc, #328]	; (8008a30 <taskGpsNewData+0x254>)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 80088ee:	4a4a      	ldr	r2, [pc, #296]	; (8008a18 <taskGpsNewData+0x23c>)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f6:	494a      	ldr	r1, [pc, #296]	; (8008a20 <taskGpsNewData+0x244>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088fe:	4949      	ldr	r1, [pc, #292]	; (8008a24 <taskGpsNewData+0x248>)
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	4941      	ldr	r1, [pc, #260]	; (8008a0c <taskGpsNewData+0x230>)
 8008906:	7809      	ldrb	r1, [r1, #0]
 8008908:	460c      	mov	r4, r1
 800890a:	18d1      	adds	r1, r2, r3
 800890c:	4849      	ldr	r0, [pc, #292]	; (8008a34 <taskGpsNewData+0x258>)
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	4423      	add	r3, r4
 8008918:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 800891c:	4a44      	ldr	r2, [pc, #272]	; (8008a30 <taskGpsNewData+0x254>)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008924:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <taskGpsNewData+0x230>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	461c      	mov	r4, r3
 800892a:	4842      	ldr	r0, [pc, #264]	; (8008a34 <taskGpsNewData+0x258>)
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	4423      	add	r3, r4
 8008936:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800893a:	18ca      	adds	r2, r1, r3
 800893c:	493c      	ldr	r1, [pc, #240]	; (8008a30 <taskGpsNewData+0x254>)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 8008944:	4a3a      	ldr	r2, [pc, #232]	; (8008a30 <taskGpsNewData+0x254>)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	4a30      	ldr	r2, [pc, #192]	; (8008a10 <taskGpsNewData+0x234>)
 800894e:	fb82 1203 	smull	r1, r2, r2, r3
 8008952:	1052      	asrs	r2, r2, #1
 8008954:	17db      	asrs	r3, r3, #31
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	4931      	ldr	r1, [pc, #196]	; (8008a20 <taskGpsNewData+0x244>)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008960:	4935      	ldr	r1, [pc, #212]	; (8008a38 <taskGpsNewData+0x25c>)
 8008962:	fb01 f303 	mul.w	r3, r1, r3
 8008966:	441a      	add	r2, r3
 8008968:	4934      	ldr	r1, [pc, #208]	; (8008a3c <taskGpsNewData+0x260>)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008970:	4b33      	ldr	r3, [pc, #204]	; (8008a40 <taskGpsNewData+0x264>)
 8008972:	f993 3000 	ldrsb.w	r3, [r3]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d115      	bne.n	80089a6 <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 800897a:	4a2c      	ldr	r2, [pc, #176]	; (8008a2c <taskGpsNewData+0x250>)
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d90f      	bls.n	80089a6 <taskGpsNewData+0x1ca>
 8008986:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <taskGpsNewData+0x250>)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800898e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8008992:	4293      	cmp	r3, r2
 8008994:	d807      	bhi.n	80089a6 <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 8008996:	4a29      	ldr	r2, [pc, #164]	; (8008a3c <taskGpsNewData+0x260>)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800899e:	491d      	ldr	r1, [pc, #116]	; (8008a14 <taskGpsNewData+0x238>)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	3301      	adds	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	f77f af5c 	ble.w	800886c <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 80089b4:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <taskGpsNewData+0x21c>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b22      	ldr	r3, [pc, #136]	; (8008a44 <taskGpsNewData+0x268>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089c6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008a48 <taskGpsNewData+0x26c>
 80089ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089ce:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <taskGpsNewData+0x270>)
 80089d0:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 80089d4:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <taskGpsNewData+0x21c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <taskGpsNewData+0x268>)
 80089da:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 80089dc:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <taskGpsNewData+0x270>)
 80089de:	edd3 7a00 	vldr	s15, [r3]
 80089e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ee:	d52f      	bpl.n	8008a50 <taskGpsNewData+0x274>
 80089f0:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <taskGpsNewData+0x270>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	e02e      	b.n	8008a54 <taskGpsNewData+0x278>
 80089f6:	bf00      	nop
 80089f8:	2000136c 	.word	0x2000136c
 80089fc:	2000085c 	.word	0x2000085c
 8008a00:	20000e8c 	.word	0x20000e8c
 8008a04:	20002014 	.word	0x20002014
 8008a08:	20002176 	.word	0x20002176
 8008a0c:	20000c28 	.word	0x20000c28
 8008a10:	66666667 	.word	0x66666667
 8008a14:	20002118 	.word	0x20002118
 8008a18:	20000c5c 	.word	0x20000c5c
 8008a1c:	6b5fca6b 	.word	0x6b5fca6b
 8008a20:	20000c6c 	.word	0x20000c6c
 8008a24:	ff676980 	.word	0xff676980
 8008a28:	68db8bad 	.word	0x68db8bad
 8008a2c:	20000c74 	.word	0x20000c74
 8008a30:	20000c54 	.word	0x20000c54
 8008a34:	20000c2c 	.word	0x20000c2c
 8008a38:	00989680 	.word	0x00989680
 8008a3c:	20000c64 	.word	0x20000c64
 8008a40:	20000e98 	.word	0x20000e98
 8008a44:	20000c7c 	.word	0x20000c7c
 8008a48:	447a0000 	.word	0x447a0000
 8008a4c:	20000c08 	.word	0x20000c08
 8008a50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008a54:	4a4a      	ldr	r2, [pc, #296]	; (8008b80 <taskGpsNewData+0x3a4>)
 8008a56:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008a58:	f107 0308 	add.w	r3, r7, #8
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	4b47      	ldr	r3, [pc, #284]	; (8008b84 <taskGpsNewData+0x3a8>)
 8008a66:	4a48      	ldr	r2, [pc, #288]	; (8008b88 <taskGpsNewData+0x3ac>)
 8008a68:	4948      	ldr	r1, [pc, #288]	; (8008b8c <taskGpsNewData+0x3b0>)
 8008a6a:	4849      	ldr	r0, [pc, #292]	; (8008b90 <taskGpsNewData+0x3b4>)
 8008a6c:	f000 faec 	bl	8009048 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a48      	ldr	r2, [pc, #288]	; (8008b94 <taskGpsNewData+0x3b8>)
 8008a74:	fb82 1203 	smull	r1, r2, r2, r3
 8008a78:	1152      	asrs	r2, r2, #5
 8008a7a:	17db      	asrs	r3, r3, #31
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	4b45      	ldr	r3, [pc, #276]	; (8008b98 <taskGpsNewData+0x3bc>)
 8008a82:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4a43      	ldr	r2, [pc, #268]	; (8008b94 <taskGpsNewData+0x3b8>)
 8008a88:	fb82 1203 	smull	r1, r2, r2, r3
 8008a8c:	1152      	asrs	r2, r2, #5
 8008a8e:	17db      	asrs	r3, r3, #31
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	b21a      	sxth	r2, r3
 8008a94:	4b41      	ldr	r3, [pc, #260]	; (8008b9c <taskGpsNewData+0x3c0>)
 8008a96:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008a98:	4b41      	ldr	r3, [pc, #260]	; (8008ba0 <taskGpsNewData+0x3c4>)
 8008a9a:	7b1b      	ldrb	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d105      	bne.n	8008aac <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008aa0:	4b3d      	ldr	r3, [pc, #244]	; (8008b98 <taskGpsNewData+0x3bc>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008aa6:	4b3d      	ldr	r3, [pc, #244]	; (8008b9c <taskGpsNewData+0x3c0>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008aac:	f000 fb3a 	bl	8009124 <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008ab0:	4b3b      	ldr	r3, [pc, #236]	; (8008ba0 <taskGpsNewData+0x3c4>)
 8008ab2:	7a1b      	ldrb	r3, [r3, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <taskGpsNewData+0x2e4>
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <taskGpsNewData+0x3c4>)
 8008aba:	79db      	ldrb	r3, [r3, #7]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d056      	beq.n	8008b6e <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008ac0:	4b38      	ldr	r3, [pc, #224]	; (8008ba4 <taskGpsNewData+0x3c8>)
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	4b38      	ldr	r3, [pc, #224]	; (8008ba8 <taskGpsNewData+0x3cc>)
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4b38      	ldr	r3, [pc, #224]	; (8008bac <taskGpsNewData+0x3d0>)
 8008aca:	4a39      	ldr	r2, [pc, #228]	; (8008bb0 <taskGpsNewData+0x3d4>)
 8008acc:	492f      	ldr	r1, [pc, #188]	; (8008b8c <taskGpsNewData+0x3b0>)
 8008ace:	4830      	ldr	r0, [pc, #192]	; (8008b90 <taskGpsNewData+0x3b4>)
 8008ad0:	f000 faba 	bl	8009048 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008ad4:	4b2d      	ldr	r3, [pc, #180]	; (8008b8c <taskGpsNewData+0x3b0>)
 8008ad6:	4a2e      	ldr	r2, [pc, #184]	; (8008b90 <taskGpsNewData+0x3b4>)
 8008ad8:	4934      	ldr	r1, [pc, #208]	; (8008bac <taskGpsNewData+0x3d0>)
 8008ada:	4835      	ldr	r0, [pc, #212]	; (8008bb0 <taskGpsNewData+0x3d4>)
 8008adc:	f000 fba4 	bl	8009228 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008ae0:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <taskGpsNewData+0x3c4>)
 8008ae2:	7c1b      	ldrb	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008ae8:	4b32      	ldr	r3, [pc, #200]	; (8008bb4 <taskGpsNewData+0x3d8>)
 8008aea:	2202      	movs	r2, #2
 8008aec:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <taskGpsNewData+0x3d8>)
 8008af0:	f993 3000 	ldrsb.w	r3, [r3]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d002      	beq.n	8008afe <taskGpsNewData+0x322>
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d003      	beq.n	8008b04 <taskGpsNewData+0x328>
 8008afc:	e03a      	b.n	8008b74 <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008afe:	f000 fbbf 	bl	8009280 <GPS_calc_poshold>
                        break;
 8008b02:	e037      	b.n	8008b74 <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008b04:	4b2c      	ldr	r3, [pc, #176]	; (8008bb8 <taskGpsNewData+0x3dc>)
 8008b06:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fdc6 	bl	80096a0 <GPS_calc_desired_speed>
 8008b14:	4603      	mov	r3, r0
 8008b16:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008b18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fc67 	bl	80093f0 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008b22:	4b25      	ldr	r3, [pc, #148]	; (8008bb8 <taskGpsNewData+0x3dc>)
 8008b24:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008b2c:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <taskGpsNewData+0x3e0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <taskGpsNewData+0x3b8>)
 8008b32:	fb82 1203 	smull	r1, r2, r2, r3
 8008b36:	1152      	asrs	r2, r2, #5
 8008b38:	17db      	asrs	r3, r3, #31
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	b21a      	sxth	r2, r3
 8008b3e:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <taskGpsNewData+0x3e4>)
 8008b40:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008b42:	4b1d      	ldr	r3, [pc, #116]	; (8008bb8 <taskGpsNewData+0x3dc>)
 8008b44:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <taskGpsNewData+0x3cc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	da04      	bge.n	8008b5c <taskGpsNewData+0x380>
 8008b52:	f000 fa59 	bl	8009008 <check_missed_wp>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008b5c:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <taskGpsNewData+0x3d8>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008b62:	4b18      	ldr	r3, [pc, #96]	; (8008bc4 <taskGpsNewData+0x3e8>)
 8008b64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008b68:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <taskGpsNewData+0x3e4>)
 8008b6a:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008b6c:	e001      	b.n	8008b72 <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008b6e:	bf00      	nop
 8008b70:	e000      	b.n	8008b74 <taskGpsNewData+0x398>
                        break;
 8008b72:	bf00      	nop
        }

    return 0;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd90      	pop	{r4, r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000c08 	.word	0x20000c08
 8008b84:	200020d0 	.word	0x200020d0
 8008b88:	200020cc 	.word	0x200020cc
 8008b8c:	2000211c 	.word	0x2000211c
 8008b90:	20002118 	.word	0x20002118
 8008b94:	51eb851f 	.word	0x51eb851f
 8008b98:	200020ca 	.word	0x200020ca
 8008b9c:	200020d8 	.word	0x200020d8
 8008ba0:	20002014 	.word	0x20002014
 8008ba4:	20000c1c 	.word	0x20000c1c
 8008ba8:	20001f64 	.word	0x20001f64
 8008bac:	20001f70 	.word	0x20001f70
 8008bb0:	20001f6c 	.word	0x20001f6c
 8008bb4:	20000e98 	.word	0x20000e98
 8008bb8:	20001890 	.word	0x20001890
 8008bbc:	20001f3c 	.word	0x20001f3c
 8008bc0:	200021f0 	.word	0x200021f0
 8008bc4:	20000c78 	.word	0x20000c78

08008bc8 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <GPS_reset_home_position+0x4c>)
 8008bce:	7adb      	ldrb	r3, [r3, #11]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01d      	beq.n	8008c10 <GPS_reset_home_position+0x48>
 8008bd4:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <GPS_reset_home_position+0x50>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d919      	bls.n	8008c10 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <GPS_reset_home_position+0x54>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0f      	ldr	r2, [pc, #60]	; (8008c20 <GPS_reset_home_position+0x58>)
 8008be2:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <GPS_reset_home_position+0x54>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a0d      	ldr	r2, [pc, #52]	; (8008c20 <GPS_reset_home_position+0x58>)
 8008bea:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <GPS_reset_home_position+0x54>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 f981 	bl	8008ef8 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <GPS_reset_home_position+0x5c>)
 8008bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <GPS_reset_home_position+0x60>)
 8008bfe:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <GPS_reset_home_position+0x64>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <GPS_reset_home_position+0x58>)
 8008c08:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008c0a:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <GPS_reset_home_position+0x4c>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	731a      	strb	r2, [r3, #12]
    }
}
 8008c10:	bf00      	nop
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20002014 	.word	0x20002014
 8008c18:	20002176 	.word	0x20002176
 8008c1c:	20002118 	.word	0x20002118
 8008c20:	200020cc 	.word	0x200020cc
 8008c24:	20002270 	.word	0x20002270
 8008c28:	20000c78 	.word	0x20000c78
 8008c2c:	2000202a 	.word	0x2000202a

08008c30 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
 8008c3a:	e02f      	b.n	8008c9c <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008c3c:	4a1e      	ldr	r2, [pc, #120]	; (8008cb8 <GPS_reset_nav+0x88>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2100      	movs	r1, #0
 8008c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008c46:	4a1d      	ldr	r2, [pc, #116]	; (8008cbc <GPS_reset_nav+0x8c>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008c50:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <GPS_reset_nav+0x90>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2100      	movs	r1, #0
 8008c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4a17      	ldr	r2, [pc, #92]	; (8008cc4 <GPS_reset_nav+0x94>)
 8008c66:	4413      	add	r3, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fda1 	bl	80087b0 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <GPS_reset_nav+0x98>)
 8008c7a:	4413      	add	r3, r2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fd97 	bl	80087b0 <reset_PID>
        reset_PID(&navPID[i]);
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4a0f      	ldr	r2, [pc, #60]	; (8008ccc <GPS_reset_nav+0x9c>)
 8008c8e:	4413      	add	r3, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fd8d 	bl	80087b0 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	ddcc      	ble.n	8008c3c <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <GPS_reset_nav+0xa0>)
 8008ca4:	7c1b      	ldrb	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008caa:	f7fe f9ef 	bl	800708c <fw_nav_reset>

}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000e90 	.word	0x20000e90
 8008cbc:	20002030 	.word	0x20002030
 8008cc0:	2000204c 	.word	0x2000204c
 8008cc4:	20000b90 	.word	0x20000b90
 8008cc8:	20000bb8 	.word	0x20000bb8
 8008ccc:	20000be0 	.word	0x20000be0
 8008cd0:	20002014 	.word	0x20002014

08008cd4 <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008cd8:	4b50      	ldr	r3, [pc, #320]	; (8008e1c <gpsSetPIDs+0x148>)
 8008cda:	795b      	ldrb	r3, [r3, #5]
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ce4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e20 <gpsSetPIDs+0x14c>
 8008ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cec:	4b4d      	ldr	r3, [pc, #308]	; (8008e24 <gpsSetPIDs+0x150>)
 8008cee:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008cf2:	4b4a      	ldr	r3, [pc, #296]	; (8008e1c <gpsSetPIDs+0x148>)
 8008cf4:	7bdb      	ldrb	r3, [r3, #15]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e20 <gpsSetPIDs+0x14c>
 8008d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d06:	4b47      	ldr	r3, [pc, #284]	; (8008e24 <gpsSetPIDs+0x150>)
 8008d08:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d0c:	4b45      	ldr	r3, [pc, #276]	; (8008e24 <gpsSetPIDs+0x150>)
 8008d0e:	4a46      	ldr	r2, [pc, #280]	; (8008e28 <gpsSetPIDs+0x154>)
 8008d10:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008d12:	4b42      	ldr	r3, [pc, #264]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d14:	799b      	ldrb	r3, [r3, #6]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d26:	4b41      	ldr	r3, [pc, #260]	; (8008e2c <gpsSetPIDs+0x158>)
 8008d28:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008d2c:	4b3b      	ldr	r3, [pc, #236]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d2e:	7c1b      	ldrb	r3, [r3, #16]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d38:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008e20 <gpsSetPIDs+0x14c>
 8008d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d40:	4b3a      	ldr	r3, [pc, #232]	; (8008e2c <gpsSetPIDs+0x158>)
 8008d42:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008d46:	4b35      	ldr	r3, [pc, #212]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d48:	7e9b      	ldrb	r3, [r3, #26]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d52:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008e30 <gpsSetPIDs+0x15c>
 8008d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d5a:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <gpsSetPIDs+0x158>)
 8008d5c:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d60:	4b32      	ldr	r3, [pc, #200]	; (8008e2c <gpsSetPIDs+0x158>)
 8008d62:	4a31      	ldr	r2, [pc, #196]	; (8008e28 <gpsSetPIDs+0x154>)
 8008d64:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008d66:	4b2d      	ldr	r3, [pc, #180]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d68:	79db      	ldrb	r3, [r3, #7]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d72:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d7a:	4b2e      	ldr	r3, [pc, #184]	; (8008e34 <gpsSetPIDs+0x160>)
 8008d7c:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008d80:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d82:	7c5b      	ldrb	r3, [r3, #17]
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d8c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008e20 <gpsSetPIDs+0x14c>
 8008d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d94:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <gpsSetPIDs+0x160>)
 8008d96:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008d9a:	4b20      	ldr	r3, [pc, #128]	; (8008e1c <gpsSetPIDs+0x148>)
 8008d9c:	7edb      	ldrb	r3, [r3, #27]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008e30 <gpsSetPIDs+0x15c>
 8008daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dae:	4b21      	ldr	r3, [pc, #132]	; (8008e34 <gpsSetPIDs+0x160>)
 8008db0:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008db4:	4b1f      	ldr	r3, [pc, #124]	; (8008e34 <gpsSetPIDs+0x160>)
 8008db6:	4a1c      	ldr	r2, [pc, #112]	; (8008e28 <gpsSetPIDs+0x154>)
 8008db8:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008dba:	4b1f      	ldr	r3, [pc, #124]	; (8008e38 <gpsSetPIDs+0x164>)
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d026      	beq.n	8008e10 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008dc2:	4b16      	ldr	r3, [pc, #88]	; (8008e1c <gpsSetPIDs+0x148>)
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dd6:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <gpsSetPIDs+0x168>)
 8008dd8:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <gpsSetPIDs+0x148>)
 8008dde:	7b9b      	ldrb	r3, [r3, #14]
 8008de0:	ee07 3a90 	vmov	s15, r3
 8008de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008de8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008e20 <gpsSetPIDs+0x14c>
 8008dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008df0:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <gpsSetPIDs+0x168>)
 8008df2:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <gpsSetPIDs+0x148>)
 8008df8:	7e1b      	ldrb	r3, [r3, #24]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e02:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e30 <gpsSetPIDs+0x15c>
 8008e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <gpsSetPIDs+0x168>)
 8008e0c:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20001890 	.word	0x20001890
 8008e20:	42c80000 	.word	0x42c80000
 8008e24:	20000b70 	.word	0x20000b70
 8008e28:	44fa0000 	.word	0x44fa0000
 8008e2c:	20000b80 	.word	0x20000b80
 8008e30:	447a0000 	.word	0x447a0000
 8008e34:	20001f40 	.word	0x20001f40
 8008e38:	20002014 	.word	0x20002014
 8008e3c:	20001f50 	.word	0x20001f50

08008e40 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008e48:	2001      	movs	r0, #1
 8008e4a:	f7f9 f8df 	bl	800200c <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	2000      	movs	r0, #0
 8008e52:	f00a fb09 	bl	8013468 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7f9 f8d8 	bl	800200c <actLed0State>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
    static bool state = false;
	PifGps* p_gps;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <gpsSetPassthrough+0x78>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d002      	beq.n	8008e78 <gpsSetPassthrough+0x14>
        return -1;
 8008e72:	f04f 33ff 	mov.w	r3, #4294967295
 8008e76:	e02d      	b.n	8008ed4 <gpsSetPassthrough+0x70>

    actLed0State(OFF);
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f7f9 f8c7 	bl	800200c <actLed0State>
    actLed1State(OFF);
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f7f9 f8f0 	bl	8002064 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <gpsSetPassthrough+0x7c>)
 8008e86:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d120      	bne.n	8008ed0 <gpsSetPassthrough+0x6c>
		p_gps = (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) ? &gps_nmea._gps : &gps_ublox._gps;
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <gpsSetPassthrough+0x78>)
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	4a14      	ldr	r2, [pc, #80]	; (8008ee4 <gpsSetPassthrough+0x80>)
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008e9e:	d101      	bne.n	8008ea4 <gpsSetPassthrough+0x40>
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <gpsSetPassthrough+0x84>)
 8008ea2:	e000      	b.n	8008ea6 <gpsSetPassthrough+0x42>
 8008ea4:	4b11      	ldr	r3, [pc, #68]	; (8008eec <gpsSetPassthrough+0x88>)
 8008ea6:	607b      	str	r3, [r7, #4]
        if (state) {
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <gpsSetPassthrough+0x8c>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <gpsSetPassthrough+0x5c>
            p_gps->evt_frame = NULL;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	609a      	str	r2, [r3, #8]
            state = false;
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <gpsSetPassthrough+0x8c>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
            return 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e009      	b.n	8008ed4 <gpsSetPassthrough+0x70>
        }
        else {
            p_gps->evt_frame = _EvtPrintFrame;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a0c      	ldr	r2, [pc, #48]	; (8008ef4 <gpsSetPassthrough+0x90>)
 8008ec4:	609a      	str	r2, [r3, #8]
            state = true;
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <gpsSetPassthrough+0x8c>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
            return 1;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e001      	b.n	8008ed4 <gpsSetPassthrough+0x70>
        }
    }
    return -1;
 8008ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	2000085c 	.word	0x2000085c
 8008ee0:	200019c8 	.word	0x200019c8
 8008ee4:	0802761c 	.word	0x0802761c
 8008ee8:	20000880 	.word	0x20000880
 8008eec:	20000900 	.word	0x20000900
 8008ef0:	20000c80 	.word	0x20000c80
 8008ef4:	08008e41 	.word	0x08008e41

08008ef8 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f12:	dd05      	ble.n	8008f20 <GPS_calc_longitude_scaling+0x28>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f1e:	e006      	b.n	8008f2e <GPS_calc_longitude_scaling+0x36>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f2a:	eef1 7a67 	vneg.f32	s15, s15
 8008f2e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008f5c <GPS_calc_longitude_scaling+0x64>
 8008f32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f36:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008f60 <GPS_calc_longitude_scaling+0x68>
 8008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3e:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008f42:	ed97 0a03 	vldr	s0, [r7, #12]
 8008f46:	f019 f877 	bl	8022038 <cosf>
 8008f4a:	eef0 7a40 	vmov.f32	s15, s0
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <GPS_calc_longitude_scaling+0x6c>)
 8008f50:	edc3 7a00 	vstr	s15, [r3]
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	4b189680 	.word	0x4b189680
 8008f60:	3c8efa35 	.word	0x3c8efa35
 8008f64:	20000028 	.word	0x20000028

08008f68 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <GPS_set_next_wp+0x74>)
 8008f78:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a17      	ldr	r2, [pc, #92]	; (8008fdc <GPS_set_next_wp+0x74>)
 8008f80:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff ffb6 	bl	8008ef8 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008f8c:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <GPS_set_next_wp+0x78>)
 8008f8e:	7d1b      	ldrb	r3, [r3, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008f94:	f7fe f8b6 	bl	8007104 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008f98:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <GPS_set_next_wp+0x7c>)
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <GPS_set_next_wp+0x80>)
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <GPS_set_next_wp+0x84>)
 8008fa2:	4a0e      	ldr	r2, [pc, #56]	; (8008fdc <GPS_set_next_wp+0x74>)
 8008fa4:	4912      	ldr	r1, [pc, #72]	; (8008ff0 <GPS_set_next_wp+0x88>)
 8008fa6:	4813      	ldr	r0, [pc, #76]	; (8008ff4 <GPS_set_next_wp+0x8c>)
 8008fa8:	f000 f84e 	bl	8009048 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <GPS_set_next_wp+0x7c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a11      	ldr	r2, [pc, #68]	; (8008ff8 <GPS_set_next_wp+0x90>)
 8008fb2:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <GPS_set_next_wp+0x88>)
 8008fb6:	4a0f      	ldr	r2, [pc, #60]	; (8008ff4 <GPS_set_next_wp+0x8c>)
 8008fb8:	490c      	ldr	r1, [pc, #48]	; (8008fec <GPS_set_next_wp+0x84>)
 8008fba:	4808      	ldr	r0, [pc, #32]	; (8008fdc <GPS_set_next_wp+0x74>)
 8008fbc:	f000 f934 	bl	8009228 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008fc0:	4b08      	ldr	r3, [pc, #32]	; (8008fe4 <GPS_set_next_wp+0x7c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <GPS_set_next_wp+0x94>)
 8008fc6:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <GPS_set_next_wp+0x98>)
 8008fca:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008fce:	b21a      	sxth	r2, r3
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <GPS_set_next_wp+0x9c>)
 8008fd2:	801a      	strh	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20001f6c 	.word	0x20001f6c
 8008fe0:	20002014 	.word	0x20002014
 8008fe4:	20000c1c 	.word	0x20000c1c
 8008fe8:	20001f64 	.word	0x20001f64
 8008fec:	20001f70 	.word	0x20001f70
 8008ff0:	2000211c 	.word	0x2000211c
 8008ff4:	20002118 	.word	0x20002118
 8008ff8:	20001f3c 	.word	0x20001f3c
 8008ffc:	20000c20 	.word	0x20000c20
 8009000:	20001890 	.word	0x20001890
 8009004:	20000c26 	.word	0x20000c26

08009008 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 800900e:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <check_missed_wp+0x38>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <check_missed_wp+0x3c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fb9c 	bl	8009758 <wrap_18000>
 8009020:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfb8      	it	lt
 8009028:	425b      	neglt	r3, r3
 800902a:	f242 7210 	movw	r2, #10000	; 0x2710
 800902e:	4293      	cmp	r3, r2
 8009030:	bfcc      	ite	gt
 8009032:	2301      	movgt	r3, #1
 8009034:	2300      	movle	r3, #0
 8009036:	b2db      	uxtb	r3, r3
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000c1c 	.word	0x20000c1c
 8009044:	20000c20 	.word	0x20000c20

08009048 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	ee07 3a90 	vmov	s15, r3
 8009064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009068:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800907e:	4b25      	ldr	r3, [pc, #148]	; (8009114 <GPS_distance_cm_bearing+0xcc>)
 8009080:	edd3 7a00 	vldr	s15, [r3]
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 800908c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009090:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009094:	edd7 7a04 	vldr	s15, [r7, #16]
 8009098:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800909c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090a0:	eeb0 0a67 	vmov.f32	s0, s15
 80090a4:	f019 f956 	bl	8022354 <sqrtf>
 80090a8:	eef0 7a40 	vmov.f32	s15, s0
 80090ac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009118 <GPS_distance_cm_bearing+0xd0>
 80090b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090b8:	ee17 2a90 	vmov	r2, s15
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 80090c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80090c4:	eef1 7a67 	vneg.f32	s15, s15
 80090c8:	edd7 0a04 	vldr	s1, [r7, #16]
 80090cc:	eeb0 0a67 	vmov.f32	s0, s15
 80090d0:	f019 f8a6 	bl	8022220 <atan2f>
 80090d4:	eef0 7a40 	vmov.f32	s15, s0
 80090d8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800911c <GPS_distance_cm_bearing+0xd4>
 80090dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009120 <GPS_distance_cm_bearing+0xd8>
 80090e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ec:	ee17 2a90 	vmov	r2, s15
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da06      	bge.n	800910a <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009104:	33a0      	adds	r3, #160	; 0xa0
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	6013      	str	r3, [r2, #0]
}
 800910a:	bf00      	nop
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000028 	.word	0x20000028
 8009118:	3f8e7d2c 	.word	0x3f8e7d2c
 800911c:	45b30ca0 	.word	0x45b30ca0
 8009120:	460ca000 	.word	0x460ca000

08009124 <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 800912a:	4b38      	ldr	r3, [pc, #224]	; (800920c <GPS_calc_velocity+0xe8>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d05b      	beq.n	80091ea <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 8009132:	4b37      	ldr	r3, [pc, #220]	; (8009210 <GPS_calc_velocity+0xec>)
 8009134:	ed93 7a00 	vldr	s14, [r3]
 8009138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800913c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009140:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8009144:	4b33      	ldr	r3, [pc, #204]	; (8009214 <GPS_calc_velocity+0xf0>)
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	4b33      	ldr	r3, [pc, #204]	; (8009218 <GPS_calc_velocity+0xf4>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009156:	4b31      	ldr	r3, [pc, #196]	; (800921c <GPS_calc_velocity+0xf8>)
 8009158:	edd3 7a00 	vldr	s15, [r3]
 800915c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009160:	edd7 7a01 	vldr	s15, [r7, #4]
 8009164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800916c:	ee17 3a90 	vmov	r3, s15
 8009170:	b21a      	sxth	r2, r3
 8009172:	4b2b      	ldr	r3, [pc, #172]	; (8009220 <GPS_calc_velocity+0xfc>)
 8009174:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 8009176:	4b27      	ldr	r3, [pc, #156]	; (8009214 <GPS_calc_velocity+0xf0>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b27      	ldr	r3, [pc, #156]	; (8009218 <GPS_calc_velocity+0xf4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009188:	edd7 7a01 	vldr	s15, [r7, #4]
 800918c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009194:	ee17 3a90 	vmov	r3, s15
 8009198:	b21a      	sxth	r2, r3
 800919a:	4b21      	ldr	r3, [pc, #132]	; (8009220 <GPS_calc_velocity+0xfc>)
 800919c:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 800919e:	4b20      	ldr	r3, [pc, #128]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091a4:	461a      	mov	r2, r3
 80091a6:	4b1f      	ldr	r3, [pc, #124]	; (8009224 <GPS_calc_velocity+0x100>)
 80091a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091ac:	4413      	add	r3, r2
 80091ae:	0fda      	lsrs	r2, r3, #31
 80091b0:	4413      	add	r3, r2
 80091b2:	105b      	asrs	r3, r3, #1
 80091b4:	b21a      	sxth	r2, r3
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091b8:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 80091ba:	4b19      	ldr	r3, [pc, #100]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b18      	ldr	r3, [pc, #96]	; (8009224 <GPS_calc_velocity+0x100>)
 80091c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c8:	4413      	add	r3, r2
 80091ca:	0fda      	lsrs	r2, r3, #31
 80091cc:	4413      	add	r3, r2
 80091ce:	105b      	asrs	r3, r3, #1
 80091d0:	b21a      	sxth	r2, r3
 80091d2:	4b13      	ldr	r3, [pc, #76]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091d4:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 80091d6:	4b12      	ldr	r3, [pc, #72]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80091dc:	4b11      	ldr	r3, [pc, #68]	; (8009224 <GPS_calc_velocity+0x100>)
 80091de:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <GPS_calc_velocity+0xfc>)
 80091e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80091e6:	4b0f      	ldr	r3, [pc, #60]	; (8009224 <GPS_calc_velocity+0x100>)
 80091e8:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 80091ea:	4b08      	ldr	r3, [pc, #32]	; (800920c <GPS_calc_velocity+0xe8>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 80091f0:	4b08      	ldr	r3, [pc, #32]	; (8009214 <GPS_calc_velocity+0xf0>)
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	4a08      	ldr	r2, [pc, #32]	; (8009218 <GPS_calc_velocity+0xf4>)
 80091f6:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <GPS_calc_velocity+0xf0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a06      	ldr	r2, [pc, #24]	; (8009218 <GPS_calc_velocity+0xf4>)
 80091fe:	6013      	str	r3, [r2, #0]
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000c81 	.word	0x20000c81
 8009210:	20000c08 	.word	0x20000c08
 8009214:	20002118 	.word	0x20002118
 8009218:	20000c84 	.word	0x20000c84
 800921c:	20000028 	.word	0x20000028
 8009220:	20000c0c 	.word	0x20000c0c
 8009224:	20000c8c 	.word	0x20000c8c

08009228 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <GPS_calc_location_error+0x50>)
 800924a:	edd3 7a00 	vldr	s15, [r3]
 800924e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009256:	ee17 2a90 	vmov	r2, s15
 800925a:	4b08      	ldr	r3, [pc, #32]	; (800927c <GPS_calc_location_error+0x54>)
 800925c:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	4a04      	ldr	r2, [pc, #16]	; (800927c <GPS_calc_location_error+0x54>)
 800926a:	6013      	str	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	20000028 	.word	0x20000028
 800927c:	20000c14 	.word	0x20000c14

08009280 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 8009286:	2300      	movs	r3, #0
 8009288:	60bb      	str	r3, [r7, #8]
 800928a:	e092      	b.n	80093b2 <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 800928c:	4a4d      	ldr	r2, [pc, #308]	; (80093c4 <GPS_calc_poshold+0x144>)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009294:	494c      	ldr	r1, [pc, #304]	; (80093c8 <GPS_calc_poshold+0x148>)
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff f990 	bl	80085bc <get_P>
 800929c:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	494a      	ldr	r1, [pc, #296]	; (80093cc <GPS_calc_poshold+0x14c>)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	b219      	sxth	r1, r3
 80092b2:	4a47      	ldr	r2, [pc, #284]	; (80093d0 <GPS_calc_poshold+0x150>)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80092ba:	4a45      	ldr	r2, [pc, #276]	; (80093d0 <GPS_calc_poshold+0x150>)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092c2:	4944      	ldr	r1, [pc, #272]	; (80093d4 <GPS_calc_poshold+0x154>)
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff f979 	bl	80085bc <get_P>
 80092ca:	4603      	mov	r3, r0
 80092cc:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80092ce:	4a40      	ldr	r2, [pc, #256]	; (80093d0 <GPS_calc_poshold+0x150>)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092d6:	4619      	mov	r1, r3
 80092d8:	4a3a      	ldr	r2, [pc, #232]	; (80093c4 <GPS_calc_poshold+0x144>)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e0:	18c8      	adds	r0, r1, r3
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4a3a      	ldr	r2, [pc, #232]	; (80093d8 <GPS_calc_poshold+0x158>)
 80092ee:	441a      	add	r2, r3
 80092f0:	4b38      	ldr	r3, [pc, #224]	; (80093d4 <GPS_calc_poshold+0x154>)
 80092f2:	493a      	ldr	r1, [pc, #232]	; (80093dc <GPS_calc_poshold+0x15c>)
 80092f4:	f7ff f97b 	bl	80085ee <get_I>
 80092f8:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4423      	add	r3, r4
 80092fe:	b29b      	uxth	r3, r3
 8009300:	b219      	sxth	r1, r3
 8009302:	4a37      	ldr	r2, [pc, #220]	; (80093e0 <GPS_calc_poshold+0x160>)
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800930a:	4a2e      	ldr	r2, [pc, #184]	; (80093c4 <GPS_calc_poshold+0x144>)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a2e      	ldr	r2, [pc, #184]	; (80093d8 <GPS_calc_poshold+0x158>)
 800931e:	441a      	add	r2, r3
 8009320:	4b2c      	ldr	r3, [pc, #176]	; (80093d4 <GPS_calc_poshold+0x154>)
 8009322:	492e      	ldr	r1, [pc, #184]	; (80093dc <GPS_calc_poshold+0x15c>)
 8009324:	f7ff f9ac 	bl	8008680 <get_D>
 8009328:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 800932a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800932e:	492d      	ldr	r1, [pc, #180]	; (80093e4 <GPS_calc_poshold+0x164>)
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7fa fcd5 	bl	8003ce0 <constrain>
 8009336:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009338:	4a24      	ldr	r2, [pc, #144]	; (80093cc <GPS_calc_poshold+0x14c>)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009340:	2b00      	cmp	r3, #0
 8009342:	bfb8      	it	lt
 8009344:	425b      	neglt	r3, r3
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b31      	cmp	r3, #49	; 0x31
 800934a:	d801      	bhi.n	8009350 <GPS_calc_poshold+0xd0>
            d = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009350:	4a23      	ldr	r2, [pc, #140]	; (80093e0 <GPS_calc_poshold+0x160>)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	b29b      	uxth	r3, r3
 800935e:	4413      	add	r3, r2
 8009360:	b29b      	uxth	r3, r3
 8009362:	b219      	sxth	r1, r3
 8009364:	4a1e      	ldr	r2, [pc, #120]	; (80093e0 <GPS_calc_poshold+0x160>)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 800936c:	4a1c      	ldr	r2, [pc, #112]	; (80093e0 <GPS_calc_poshold+0x160>)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009374:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009378:	491b      	ldr	r1, [pc, #108]	; (80093e8 <GPS_calc_poshold+0x168>)
 800937a:	4618      	mov	r0, r3
 800937c:	f7fa fcb0 	bl	8003ce0 <constrain>
 8009380:	4603      	mov	r3, r0
 8009382:	b219      	sxth	r1, r3
 8009384:	4a16      	ldr	r2, [pc, #88]	; (80093e0 <GPS_calc_poshold+0x160>)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 800938c:	4912      	ldr	r1, [pc, #72]	; (80093d8 <GPS_calc_poshold+0x158>)
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	6819      	ldr	r1, [r3, #0]
 800939c:	4813      	ldr	r0, [pc, #76]	; (80093ec <GPS_calc_poshold+0x16c>)
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4403      	add	r3, r0
 80093aa:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	f77f af69 	ble.w	800928c <GPS_calc_poshold+0xc>
    }
}
 80093ba:	bf00      	nop
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}
 80093c4:	20000c14 	.word	0x20000c14
 80093c8:	20000b70 	.word	0x20000b70
 80093cc:	20000c0c 	.word	0x20000c0c
 80093d0:	20000c10 	.word	0x20000c10
 80093d4:	20000b80 	.word	0x20000b80
 80093d8:	20000bb8 	.word	0x20000bb8
 80093dc:	20000c08 	.word	0x20000c08
 80093e0:	2000204c 	.word	0x2000204c
 80093e4:	fffff830 	.word	0xfffff830
 80093e8:	fffff448 	.word	0xfffff448
 80093ec:	20000be0 	.word	0x20000be0

080093f0 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80093f8:	f000 f8ce 	bl	8009598 <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80093fc:	4b5b      	ldr	r3, [pc, #364]	; (800956c <GPS_calc_nav_rate+0x17c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8009404:	3328      	adds	r3, #40	; 0x28
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800940e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8009570 <GPS_calc_nav_rate+0x180>
 8009412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009416:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 800941a:	ed97 0a04 	vldr	s0, [r7, #16]
 800941e:	f018 fe0b 	bl	8022038 <cosf>
 8009422:	eef0 7a40 	vmov.f32	s15, s0
 8009426:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 800942a:	ed97 0a04 	vldr	s0, [r7, #16]
 800942e:	f018 fe83 	bl	8022138 <sinf>
 8009432:	eef0 7a40 	vmov.f32	s15, s0
 8009436:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e08b      	b.n	8009558 <GPS_calc_nav_rate+0x168>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	f107 0218 	add.w	r2, r7, #24
 8009448:	4413      	add	r3, r2
 800944a:	3b10      	subs	r3, #16
 800944c:	ed93 7a00 	vldr	s14, [r3]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800945a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800945e:	4a45      	ldr	r2, [pc, #276]	; (8009574 <GPS_calc_nav_rate+0x184>)
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009476:	ee17 3a90 	vmov	r3, s15
 800947a:	b219      	sxth	r1, r3
 800947c:	4a3e      	ldr	r2, [pc, #248]	; (8009578 <GPS_calc_nav_rate+0x188>)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 8009484:	4a3c      	ldr	r2, [pc, #240]	; (8009578 <GPS_calc_nav_rate+0x188>)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800948c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009490:	493a      	ldr	r1, [pc, #232]	; (800957c <GPS_calc_nav_rate+0x18c>)
 8009492:	4618      	mov	r0, r3
 8009494:	f7fa fc24 	bl	8003ce0 <constrain>
 8009498:	4603      	mov	r3, r0
 800949a:	b219      	sxth	r1, r3
 800949c:	4a36      	ldr	r2, [pc, #216]	; (8009578 <GPS_calc_nav_rate+0x188>)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094a4:	4a34      	ldr	r2, [pc, #208]	; (8009578 <GPS_calc_nav_rate+0x188>)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094ac:	4934      	ldr	r1, [pc, #208]	; (8009580 <GPS_calc_nav_rate+0x190>)
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f884 	bl	80085bc <get_P>
 80094b4:	4603      	mov	r3, r0
 80094b6:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80094b8:	4a2f      	ldr	r2, [pc, #188]	; (8009578 <GPS_calc_nav_rate+0x188>)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094c0:	4618      	mov	r0, r3
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a2d      	ldr	r2, [pc, #180]	; (8009584 <GPS_calc_nav_rate+0x194>)
 80094ce:	441a      	add	r2, r3
 80094d0:	4b2b      	ldr	r3, [pc, #172]	; (8009580 <GPS_calc_nav_rate+0x190>)
 80094d2:	492d      	ldr	r1, [pc, #180]	; (8009588 <GPS_calc_nav_rate+0x198>)
 80094d4:	f7ff f88b 	bl	80085ee <get_I>
 80094d8:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094da:	b29b      	uxth	r3, r3
 80094dc:	4423      	add	r3, r4
 80094de:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 80094e0:	4a25      	ldr	r2, [pc, #148]	; (8009578 <GPS_calc_nav_rate+0x188>)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094e8:	4618      	mov	r0, r3
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4a23      	ldr	r2, [pc, #140]	; (8009584 <GPS_calc_nav_rate+0x194>)
 80094f6:	441a      	add	r2, r3
 80094f8:	4b21      	ldr	r3, [pc, #132]	; (8009580 <GPS_calc_nav_rate+0x190>)
 80094fa:	4923      	ldr	r1, [pc, #140]	; (8009588 <GPS_calc_nav_rate+0x198>)
 80094fc:	f7ff f8c0 	bl	8008680 <get_D>
 8009500:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009502:	b29b      	uxth	r3, r3
 8009504:	4423      	add	r3, r4
 8009506:	b29b      	uxth	r3, r3
 8009508:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 800950a:	4a20      	ldr	r2, [pc, #128]	; (800958c <GPS_calc_nav_rate+0x19c>)
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009512:	4a1e      	ldr	r2, [pc, #120]	; (800958c <GPS_calc_nav_rate+0x19c>)
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800951a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800951e:	491c      	ldr	r1, [pc, #112]	; (8009590 <GPS_calc_nav_rate+0x1a0>)
 8009520:	4618      	mov	r0, r3
 8009522:	f7fa fbdd 	bl	8003ce0 <constrain>
 8009526:	4603      	mov	r3, r0
 8009528:	b219      	sxth	r1, r3
 800952a:	4a18      	ldr	r2, [pc, #96]	; (800958c <GPS_calc_nav_rate+0x19c>)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009532:	4914      	ldr	r1, [pc, #80]	; (8009584 <GPS_calc_nav_rate+0x194>)
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	4814      	ldr	r0, [pc, #80]	; (8009594 <GPS_calc_nav_rate+0x1a4>)
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4403      	add	r3, r0
 8009550:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	3301      	adds	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b01      	cmp	r3, #1
 800955c:	f77f af70 	ble.w	8009440 <GPS_calc_nav_rate+0x50>
    }
}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}
 800956a:	bf00      	nop
 800956c:	20001f3c 	.word	0x20001f3c
 8009570:	393702d3 	.word	0x393702d3
 8009574:	20000c0c 	.word	0x20000c0c
 8009578:	20000c10 	.word	0x20000c10
 800957c:	fffffc18 	.word	0xfffffc18
 8009580:	20001f40 	.word	0x20001f40
 8009584:	20000be0 	.word	0x20000be0
 8009588:	20000c08 	.word	0x20000c08
 800958c:	2000204c 	.word	0x2000204c
 8009590:	fffff448 	.word	0xfffff448
 8009594:	20000bb8 	.word	0x20000bb8

08009598 <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 800959e:	4b38      	ldr	r3, [pc, #224]	; (8009680 <GPS_update_crosstrack+0xe8>)
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	4b38      	ldr	r3, [pc, #224]	; (8009684 <GPS_update_crosstrack+0xec>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f8d5 	bl	8009758 <wrap_18000>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dd10      	ble.n	80095d6 <GPS_update_crosstrack+0x3e>
 80095b4:	4b32      	ldr	r3, [pc, #200]	; (8009680 <GPS_update_crosstrack+0xe8>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	4b32      	ldr	r3, [pc, #200]	; (8009684 <GPS_update_crosstrack+0xec>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f8ca 	bl	8009758 <wrap_18000>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f241 1293 	movw	r2, #4499	; 0x1193
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bfd4      	ite	le
 80095ce:	2301      	movle	r3, #1
 80095d0:	2300      	movgt	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	e00e      	b.n	80095f4 <GPS_update_crosstrack+0x5c>
 80095d6:	4b2a      	ldr	r3, [pc, #168]	; (8009680 <GPS_update_crosstrack+0xe8>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <GPS_update_crosstrack+0xec>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f8b9 	bl	8009758 <wrap_18000>
 80095e6:	4603      	mov	r3, r0
 80095e8:	4a27      	ldr	r2, [pc, #156]	; (8009688 <GPS_update_crosstrack+0xf0>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	bfac      	ite	ge
 80095ee:	2301      	movge	r3, #1
 80095f0:	2300      	movlt	r3, #0
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d03b      	beq.n	8009670 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80095f8:	4b21      	ldr	r3, [pc, #132]	; (8009680 <GPS_update_crosstrack+0xe8>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4b21      	ldr	r3, [pc, #132]	; (8009684 <GPS_update_crosstrack+0xec>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800960a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800968c <GPS_update_crosstrack+0xf4>
 800960e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009612:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 8009616:	ed97 0a01 	vldr	s0, [r7, #4]
 800961a:	f018 fd8d 	bl	8022138 <sinf>
 800961e:	eeb0 7a40 	vmov.f32	s14, s0
 8009622:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <GPS_update_crosstrack+0xf8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800962e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009636:	ee17 3a90 	vmov	r3, s15
 800963a:	b21a      	sxth	r2, r3
 800963c:	4b15      	ldr	r3, [pc, #84]	; (8009694 <GPS_update_crosstrack+0xfc>)
 800963e:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 8009640:	4b14      	ldr	r3, [pc, #80]	; (8009694 <GPS_update_crosstrack+0xfc>)
 8009642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009646:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800964a:	4913      	ldr	r1, [pc, #76]	; (8009698 <GPS_update_crosstrack+0x100>)
 800964c:	4618      	mov	r0, r3
 800964e:	f7fa fb47 	bl	8003ce0 <constrain>
 8009652:	4602      	mov	r2, r0
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <GPS_update_crosstrack+0xe8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4413      	add	r3, r2
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <GPS_update_crosstrack+0x104>)
 800965c:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <GPS_update_crosstrack+0x104>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f898 	bl	8009798 <wrap_36000>
 8009668:	4603      	mov	r3, r0
 800966a:	4a0c      	ldr	r2, [pc, #48]	; (800969c <GPS_update_crosstrack+0x104>)
 800966c:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 800966e:	e003      	b.n	8009678 <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <GPS_update_crosstrack+0xe8>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a09      	ldr	r2, [pc, #36]	; (800969c <GPS_update_crosstrack+0x104>)
 8009676:	6013      	str	r3, [r2, #0]
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20000c1c 	.word	0x20000c1c
 8009684:	20000c20 	.word	0x20000c20
 8009688:	ffffee6d 	.word	0xffffee6d
 800968c:	393702d3 	.word	0x393702d3
 8009690:	20001f64 	.word	0x20001f64
 8009694:	20000c24 	.word	0x20000c24
 8009698:	fffff448 	.word	0xfffff448
 800969c:	20001f3c 	.word	0x20001f3c

080096a0 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	460a      	mov	r2, r1
 80096aa:	80fb      	strh	r3, [r7, #6]
 80096ac:	4613      	mov	r3, r2
 80096ae:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 80096b0:	797b      	ldrb	r3, [r7, #5]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00c      	beq.n	80096d0 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 80096b6:	4b23      	ldr	r3, [pc, #140]	; (8009744 <GPS_calc_desired_speed+0xa4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	0fda      	lsrs	r2, r3, #31
 80096bc:	4413      	add	r3, r2
 80096be:	105b      	asrs	r3, r3, #1
 80096c0:	461a      	mov	r2, r3
 80096c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096c6:	4293      	cmp	r3, r2
 80096c8:	bfa8      	it	ge
 80096ca:	4613      	movge	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
 80096ce:	e011      	b.n	80096f4 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80096d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096d4:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <GPS_calc_desired_speed+0xa4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4293      	cmp	r3, r2
 80096da:	bfa8      	it	ge
 80096dc:	4613      	movge	r3, r2
 80096de:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 80096e0:	4b19      	ldr	r3, [pc, #100]	; (8009748 <GPS_calc_desired_speed+0xa8>)
 80096e2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80096e6:	461a      	mov	r2, r3
 80096e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	bfb8      	it	lt
 80096f0:	4613      	movlt	r3, r2
 80096f2:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80096f4:	4b15      	ldr	r3, [pc, #84]	; (800974c <GPS_calc_desired_speed+0xac>)
 80096f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096fe:	429a      	cmp	r2, r3
 8009700:	dd17      	ble.n	8009732 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 8009702:	4b13      	ldr	r3, [pc, #76]	; (8009750 <GPS_calc_desired_speed+0xb0>)
 8009704:	edd3 7a00 	vldr	s15, [r3]
 8009708:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009754 <GPS_calc_desired_speed+0xb4>
 800970c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009714:	ee17 3a90 	vmov	r3, s15
 8009718:	b29a      	uxth	r2, r3
 800971a:	4b0c      	ldr	r3, [pc, #48]	; (800974c <GPS_calc_desired_speed+0xac>)
 800971c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009720:	b29b      	uxth	r3, r3
 8009722:	4413      	add	r3, r2
 8009724:	b29b      	uxth	r3, r3
 8009726:	b21a      	sxth	r2, r3
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <GPS_calc_desired_speed+0xac>)
 800972a:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <GPS_calc_desired_speed+0xac>)
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 8009732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20001f64 	.word	0x20001f64
 8009748:	20001890 	.word	0x20001890
 800974c:	20000c26 	.word	0x20000c26
 8009750:	20000c08 	.word	0x20000c08
 8009754:	42c80000 	.word	0x42c80000

08009758 <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f244 6250 	movw	r2, #18000	; 0x4650
 8009766:	4293      	cmp	r3, r2
 8009768:	dd04      	ble.n	8009774 <wrap_18000+0x1c>
        err -= 36000;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009770:	3ba0      	subs	r3, #160	; 0xa0
 8009772:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a07      	ldr	r2, [pc, #28]	; (8009794 <wrap_18000+0x3c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	da04      	bge.n	8009786 <wrap_18000+0x2e>
        err += 36000;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009782:	33a0      	adds	r3, #160	; 0xa0
 8009784:	607b      	str	r3, [r7, #4]
    return err;
 8009786:	687b      	ldr	r3, [r7, #4]
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	ffffb9b0 	.word	0xffffb9b0

08009798 <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80097a6:	4293      	cmp	r3, r2
 80097a8:	dd04      	ble.n	80097b4 <wrap_36000+0x1c>
        deg -= 36000;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80097b0:	3ba0      	subs	r3, #160	; 0xa0
 80097b2:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da04      	bge.n	80097c4 <wrap_36000+0x2c>
        deg += 36000;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80097c0:	33a0      	adds	r3, #160	; 0xa0
 80097c2:	607b      	str	r3, [r7, #4]
    return deg;
 80097c4:	687b      	ldr	r3, [r7, #4]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	0000      	movs	r0, r0
 80097d4:	0000      	movs	r0, r0
	...

080097d8 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	ed2d 8b02 	vpush	{d8}
 80097de:	af00      	add	r7, sp, #0
    smallAngle = lrintf(acc_1G * cosf(RAD * cfg.small_angle));
 80097e0:	4b45      	ldr	r3, [pc, #276]	; (80098f8 <imuInit+0x120>)
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80097ec:	4b43      	ldr	r3, [pc, #268]	; (80098fc <imuInit+0x124>)
 80097ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f6 fe54 	bl	80004a0 <__aeabi_i2d>
 80097f8:	a339      	add	r3, pc, #228	; (adr r3, 80098e0 <imuInit+0x108>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f6 feb9 	bl	8000574 <__aeabi_dmul>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f995 	bl	8000b38 <__aeabi_d2f>
 800980e:	4603      	mov	r3, r0
 8009810:	ee00 3a10 	vmov	s0, r3
 8009814:	f018 fc10 	bl	8022038 <cosf>
 8009818:	eef0 7a40 	vmov.f32	s15, s0
 800981c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009820:	eeb0 0a67 	vmov.f32	s0, s15
 8009824:	f018 fc48 	bl	80220b8 <lrintf>
 8009828:	4603      	mov	r3, r0
 800982a:	b21a      	sxth	r2, r3
 800982c:	4b34      	ldr	r3, [pc, #208]	; (8009900 <imuInit+0x128>)
 800982e:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / acc_1G / 10000.0f;
 8009830:	4b31      	ldr	r3, [pc, #196]	; (80098f8 <imuInit+0x120>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	ee07 3a90 	vmov	s15, r3
 8009838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800983c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8009904 <imuInit+0x12c>
 8009840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009844:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009908 <imuInit+0x130>
 8009848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800984c:	4b2f      	ldr	r3, [pc, #188]	; (800990c <imuInit+0x134>)
 800984e:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009852:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <imuInit+0x124>)
 8009854:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009860:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009910 <imuInit+0x138>
 8009864:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009868:	ee16 0a90 	vmov	r0, s13
 800986c:	f7f6 fe2a 	bl	80004c4 <__aeabi_f2d>
 8009870:	a31d      	add	r3, pc, #116	; (adr r3, 80098e8 <imuInit+0x110>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fe7d 	bl	8000574 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f7f7 f959 	bl	8000b38 <__aeabi_d2f>
 8009886:	4603      	mov	r3, r0
 8009888:	4a22      	ldr	r2, [pc, #136]	; (8009914 <imuInit+0x13c>)
 800988a:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 800988c:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <imuInit+0x124>)
 800988e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009890:	4618      	mov	r0, r3
 8009892:	f7f6 fe17 	bl	80004c4 <__aeabi_f2d>
 8009896:	a316      	add	r3, pc, #88	; (adr r3, 80098f0 <imuInit+0x118>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 fe6a 	bl	8000574 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	f04f 0000 	mov.w	r0, #0
 80098a8:	491b      	ldr	r1, [pc, #108]	; (8009918 <imuInit+0x140>)
 80098aa:	f7f6 ff8d 	bl	80007c8 <__aeabi_ddiv>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7f7 f93f 	bl	8000b38 <__aeabi_d2f>
 80098ba:	4603      	mov	r3, r0
 80098bc:	4a17      	ldr	r2, [pc, #92]	; (800991c <imuInit+0x144>)
 80098be:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80098c0:	2008      	movs	r0, #8
 80098c2:	f7fd fb47 	bl	8006f54 <sensors>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <imuInit+0xf8>
        Mag_init();
 80098cc:	f005 fa62 	bl	800ed94 <Mag_init>
#endif
}
 80098d0:	bf00      	nop
 80098d2:	46bd      	mov	sp, r7
 80098d4:	ecbd 8b02 	vpop	{d8}
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w
 80098e0:	a2529d39 	.word	0xa2529d39
 80098e4:	3f91df46 	.word	0x3f91df46
 80098e8:	907e593b 	.word	0x907e593b
 80098ec:	4081e7a9 	.word	0x4081e7a9
 80098f0:	54442d18 	.word	0x54442d18
 80098f4:	400921fb 	.word	0x400921fb
 80098f8:	2000005a 	.word	0x2000005a
 80098fc:	20001890 	.word	0x20001890
 8009900:	20000c98 	.word	0x20000c98
 8009904:	411ce80a 	.word	0x411ce80a
 8009908:	461c4000 	.word	0x461c4000
 800990c:	20001f88 	.word	0x20001f88
 8009910:	44610000 	.word	0x44610000
 8009914:	20001fac 	.word	0x20001fac
 8009918:	3fe00000 	.word	0x3fe00000
 800991c:	20001fb0 	.word	0x20001fb0

08009920 <computeIMU>:

int computeIMU(int step)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b02      	cmp	r3, #2
 800992c:	d02c      	beq.n	8009988 <computeIMU+0x68>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b02      	cmp	r3, #2
 8009932:	dc2d      	bgt.n	8009990 <computeIMU+0x70>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <computeIMU+0x22>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d01a      	beq.n	8009976 <computeIMU+0x56>
 8009940:	e026      	b.n	8009990 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009942:	f005 fa13 	bl	800ed6c <Gyro_getADC>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d012      	beq.n	8009972 <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 800994c:	2002      	movs	r0, #2
 800994e:	f7fd fb01 	bl	8006f54 <sensors>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <computeIMU+0x3c>
 8009958:	2301      	movs	r3, #1
 800995a:	e043      	b.n	80099e4 <computeIMU+0xc4>

			accADC[X] = 0;
 800995c:	4b23      	ldr	r3, [pc, #140]	; (80099ec <computeIMU+0xcc>)
 800995e:	2200      	movs	r2, #0
 8009960:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009962:	4b22      	ldr	r3, [pc, #136]	; (80099ec <computeIMU+0xcc>)
 8009964:	2200      	movs	r2, #0
 8009966:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009968:	4b20      	ldr	r3, [pc, #128]	; (80099ec <computeIMU+0xcc>)
 800996a:	2200      	movs	r2, #0
 800996c:	809a      	strh	r2, [r3, #4]
			return 3;
 800996e:	2303      	movs	r3, #3
 8009970:	e038      	b.n	80099e4 <computeIMU+0xc4>
		}
		return step;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	e036      	b.n	80099e4 <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009976:	f004 ffdf 	bl	800e938 <ACC_getADC>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <computeIMU+0x64>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	e02f      	b.n	80099e4 <computeIMU+0xc4>
 8009984:	2302      	movs	r3, #2
 8009986:	e02d      	b.n	80099e4 <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009988:	f000 fbba 	bl	800a100 <getEstimatedAttitude>
		return 3;
 800998c:	2303      	movs	r3, #3
 800998e:	e029      	b.n	80099e4 <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 8009990:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <computeIMU+0xd0>)
 8009992:	795b      	ldrb	r3, [r3, #5]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d115      	bne.n	80099c4 <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 8009998:	4b16      	ldr	r3, [pc, #88]	; (80099f4 <computeIMU+0xd4>)
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <computeIMU+0xd8>)
 80099a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80099a6:	4413      	add	r3, r2
 80099a8:	4a14      	ldr	r2, [pc, #80]	; (80099fc <computeIMU+0xdc>)
 80099aa:	fb82 1203 	smull	r1, r2, r2, r3
 80099ae:	17db      	asrs	r3, r3, #31
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	b21a      	sxth	r2, r3
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <computeIMU+0xe0>)
 80099b6:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <computeIMU+0xe0>)
 80099ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <computeIMU+0xd4>)
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	e004      	b.n	80099ce <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <computeIMU+0xd8>)
 80099c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <computeIMU+0xe0>)
 80099cc:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 80099ce:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <computeIMU+0xd8>)
 80099d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099d4:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <computeIMU+0xe0>)
 80099d6:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 80099d8:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <computeIMU+0xd8>)
 80099da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <computeIMU+0xe0>)
 80099e0:	805a      	strh	r2, [r3, #2]
	return 4;
 80099e2:	2304      	movs	r3, #4
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20001f8c 	.word	0x20001f8c
 80099f0:	200019c8 	.word	0x200019c8
 80099f4:	20000ce4 	.word	0x20000ce4
 80099f8:	20001f74 	.word	0x20001f74
 80099fc:	55555556 	.word	0x55555556
 8009a00:	20000cc8 	.word	0x20000cc8

08009a04 <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	ed93 7a00 	vldr	s14, [r3]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	edd3 7a00 	vldr	s15, [r3]
 8009a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a46:	eeb0 0a67 	vmov.f32	s0, s15
 8009a4a:	f018 fc83 	bl	8022354 <sqrtf>
 8009a4e:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	d01d      	beq.n	8009a9c <normalizeV+0x98>
        dest->X = src->X / length;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	edd3 6a00 	vldr	s13, [r3]
 8009a66:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009a9c:	bf00      	nop
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b098      	sub	sp, #96	; 0x60
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	edd3 7a00 	vldr	s15, [r3]
 8009ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac4:	f018 fab8 	bl	8022038 <cosf>
 8009ac8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	edd3 7a00 	vldr	s15, [r3]
 8009ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad6:	f018 fb2f 	bl	8022138 <sinf>
 8009ada:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	edd3 7a00 	vldr	s15, [r3]
 8009ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8009aea:	f018 faa5 	bl	8022038 <cosf>
 8009aee:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	3304      	adds	r3, #4
 8009af6:	edd3 7a00 	vldr	s15, [r3]
 8009afa:	eeb0 0a67 	vmov.f32	s0, s15
 8009afe:	f018 fb1b 	bl	8022138 <sinf>
 8009b02:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	edd3 7a00 	vldr	s15, [r3]
 8009b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b12:	f018 fa91 	bl	8022038 <cosf>
 8009b16:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	edd3 7a00 	vldr	s15, [r3]
 8009b22:	eeb0 0a67 	vmov.f32	s0, s15
 8009b26:	f018 fb07 	bl	8022138 <sinf>
 8009b2a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009b2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b32:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009b3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009b4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b52:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009b5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009b6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b72:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009b7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b82:	eeb1 7a67 	vneg.f32	s14, s15
 8009b86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8e:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b94:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009b96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009b9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ba2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009baa:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009bae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bb2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bba:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc2:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009bc6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009bca:	eeb1 7a67 	vneg.f32	s14, s15
 8009bce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009bda:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bde:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bee:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009bf2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009bf6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bfe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009c0a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c0e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009c1a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c26:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c36:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009c4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c58:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c68:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009c7e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c8a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c9a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009cb0:	bf00      	nop
 8009cb2:	3760      	adds	r7, #96	; 0x60
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfb8      	it	lt
 8009cc8:	425b      	neglt	r3, r3
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	dd02      	ble.n	8009cd6 <applyDeadband+0x1e>
        value = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	607b      	str	r3, [r7, #4]
 8009cd4:	e00e      	b.n	8009cf4 <applyDeadband+0x3c>
    } else if (value > 0) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dd04      	ble.n	8009ce6 <applyDeadband+0x2e>
        value -= deadband;
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	e006      	b.n	8009cf4 <applyDeadband+0x3c>
    } else if (value < 0) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	da03      	bge.n	8009cf4 <applyDeadband+0x3c>
        value += deadband;
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009cf4:	687b      	ldr	r3, [r7, #4]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	0000      	movs	r0, r0
 8009d04:	0000      	movs	r0, r0
	...

08009d08 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009d10:	f04f 0300 	mov.w	r3, #0
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d20:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009f28 <acc_calc+0x220>
 8009d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009d2c:	4b7f      	ldr	r3, [pc, #508]	; (8009f2c <acc_calc+0x224>)
 8009d2e:	edd3 7a00 	vldr	s15, [r3]
 8009d32:	eef1 7a67 	vneg.f32	s15, s15
 8009d36:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009d3a:	4b7c      	ldr	r3, [pc, #496]	; (8009f2c <acc_calc+0x224>)
 8009d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d40:	eef1 7a67 	vneg.f32	s15, s15
 8009d44:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009d48:	4b79      	ldr	r3, [pc, #484]	; (8009f30 <acc_calc+0x228>)
 8009d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d56:	eef1 7a67 	vneg.f32	s15, s15
 8009d5a:	ee17 3a90 	vmov	r3, s15
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f6 fbb0 	bl	80004c4 <__aeabi_f2d>
 8009d64:	a36e      	add	r3, pc, #440	; (adr r3, 8009f20 <acc_calc+0x218>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fc03 	bl	8000574 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4610      	mov	r0, r2
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7f6 fedf 	bl	8000b38 <__aeabi_d2f>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009d7e:	4b6d      	ldr	r3, [pc, #436]	; (8009f34 <acc_calc+0x22c>)
 8009d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d8c:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009d90:	4b68      	ldr	r3, [pc, #416]	; (8009f34 <acc_calc+0x22c>)
 8009d92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9e:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009da2:	4b64      	ldr	r3, [pc, #400]	; (8009f34 <acc_calc+0x22c>)
 8009da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009da8:	ee07 3a90 	vmov	s15, r3
 8009dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009db0:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009db4:	f107 0218 	add.w	r2, r7, #24
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fe70 	bl	8009aa4 <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009dc4:	4b5c      	ldr	r3, [pc, #368]	; (8009f38 <acc_calc+0x230>)
 8009dc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d131      	bne.n	8009e32 <acc_calc+0x12a>
        if (!f.ARMED) {
 8009dce:	4b5b      	ldr	r3, [pc, #364]	; (8009f3c <acc_calc+0x234>)
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d11c      	bne.n	8009e10 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009dd6:	4b5a      	ldr	r3, [pc, #360]	; (8009f40 <acc_calc+0x238>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da00      	bge.n	8009de0 <acc_calc+0xd8>
 8009dde:	333f      	adds	r3, #63	; 0x3f
 8009de0:	119b      	asrs	r3, r3, #6
 8009de2:	425b      	negs	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b56      	ldr	r3, [pc, #344]	; (8009f40 <acc_calc+0x238>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4413      	add	r3, r2
 8009dec:	4a54      	ldr	r2, [pc, #336]	; (8009f40 <acc_calc+0x238>)
 8009dee:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009df0:	4b53      	ldr	r3, [pc, #332]	; (8009f40 <acc_calc+0x238>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e08:	ee17 2a90 	vmov	r2, s15
 8009e0c:	4b4c      	ldr	r3, [pc, #304]	; (8009f40 <acc_calc+0x238>)
 8009e0e:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009e10:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e14:	4b4a      	ldr	r3, [pc, #296]	; (8009f40 <acc_calc+0x238>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da00      	bge.n	8009e1e <acc_calc+0x116>
 8009e1c:	333f      	adds	r3, #63	; 0x3f
 8009e1e:	119b      	asrs	r3, r3, #6
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e2c:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e30:	e00b      	b.n	8009e4a <acc_calc+0x142>
    } else
        accel_ned.V.Z -= acc_1G;
 8009e32:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e36:	4b43      	ldr	r3, [pc, #268]	; (8009f44 <acc_calc+0x23c>)
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e46:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e4a:	4b3f      	ldr	r3, [pc, #252]	; (8009f48 <acc_calc+0x240>)
 8009e4c:	ed93 7a00 	vldr	s14, [r3]
 8009e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e58:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e60:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e64:	4b39      	ldr	r3, [pc, #228]	; (8009f4c <acc_calc+0x244>)
 8009e66:	edd3 7a00 	vldr	s15, [r3]
 8009e6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e72:	4b36      	ldr	r3, [pc, #216]	; (8009f4c <acc_calc+0x244>)
 8009e74:	edd3 7a00 	vldr	s15, [r3]
 8009e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e7c:	4b33      	ldr	r3, [pc, #204]	; (8009f4c <acc_calc+0x244>)
 8009e7e:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e86:	eeb0 0a67 	vmov.f32	s0, s15
 8009e8a:	f018 f915 	bl	80220b8 <lrintf>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4a29      	ldr	r2, [pc, #164]	; (8009f38 <acc_calc+0x230>)
 8009e92:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009e96:	4611      	mov	r1, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff ff0d 	bl	8009cb8 <applyDeadband>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b2b      	ldr	r3, [pc, #172]	; (8009f50 <acc_calc+0x248>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	4a2a      	ldr	r2, [pc, #168]	; (8009f50 <acc_calc+0x248>)
 8009ea8:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009eaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8009eae:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb2:	f018 f901 	bl	80220b8 <lrintf>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <acc_calc+0x230>)
 8009eba:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff fef9 	bl	8009cb8 <applyDeadband>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <acc_calc+0x248>)
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <acc_calc+0x248>)
 8009ed0:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009ed2:	4b1e      	ldr	r3, [pc, #120]	; (8009f4c <acc_calc+0x244>)
 8009ed4:	edd3 7a00 	vldr	s15, [r3]
 8009ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8009edc:	f018 f8ec 	bl	80220b8 <lrintf>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <acc_calc+0x230>)
 8009ee4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fee4 	bl	8009cb8 <applyDeadband>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <acc_calc+0x248>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	4a15      	ldr	r2, [pc, #84]	; (8009f50 <acc_calc+0x248>)
 8009efa:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009efc:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <acc_calc+0x24c>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4413      	add	r3, r2
 8009f04:	4a13      	ldr	r2, [pc, #76]	; (8009f54 <acc_calc+0x24c>)
 8009f06:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <acc_calc+0x250>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	4a12      	ldr	r2, [pc, #72]	; (8009f58 <acc_calc+0x250>)
 8009f10:	6013      	str	r3, [r2, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3728      	adds	r7, #40	; 0x28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	f3af 8000 	nop.w
 8009f20:	a2529d39 	.word	0xa2529d39
 8009f24:	3f91df46 	.word	0x3f91df46
 8009f28:	358637bd 	.word	0x358637bd
 8009f2c:	20000cdc 	.word	0x20000cdc
 8009f30:	20002270 	.word	0x20002270
 8009f34:	20001fa4 	.word	0x20001fa4
 8009f38:	20001890 	.word	0x20001890
 8009f3c:	20002014 	.word	0x20002014
 8009f40:	20000ce8 	.word	0x20000ce8
 8009f44:	2000005a 	.word	0x2000005a
 8009f48:	20001fb0 	.word	0x20001fb0
 8009f4c:	20000cec 	.word	0x20000cec
 8009f50:	20001f7c 	.word	0x20001f7c
 8009f54:	20000c90 	.word	0x20000c90
 8009f58:	20000c94 	.word	0x20000c94

08009f5c <accSum_reset>:

void accSum_reset(void)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009f60:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <accSum_reset+0x2c>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009f66:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <accSum_reset+0x2c>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <accSum_reset+0x2c>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <accSum_reset+0x30>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009f78:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <accSum_reset+0x34>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	20001f7c 	.word	0x20001f7c
 8009f8c:	20000c94 	.word	0x20000c94
 8009f90:	20000c90 	.word	0x20000c90
 8009f94:	00000000 	.word	0x00000000

08009f98 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009f98:	b5b0      	push	{r4, r5, r7, lr}
 8009f9a:	b08a      	sub	sp, #40	; 0x28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009fa0:	4b53      	ldr	r3, [pc, #332]	; (800a0f0 <calculateHeading+0x158>)
 8009fa2:	edd3 7a00 	vldr	s15, [r3]
 8009fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8009faa:	f018 f845 	bl	8022038 <cosf>
 8009fae:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009fb2:	4b4f      	ldr	r3, [pc, #316]	; (800a0f0 <calculateHeading+0x158>)
 8009fb4:	edd3 7a00 	vldr	s15, [r3]
 8009fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fbc:	f018 f8bc 	bl	8022138 <sinf>
 8009fc0:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009fc4:	4b4a      	ldr	r3, [pc, #296]	; (800a0f0 <calculateHeading+0x158>)
 8009fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fca:	eeb0 0a67 	vmov.f32	s0, s15
 8009fce:	f018 f833 	bl	8022038 <cosf>
 8009fd2:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009fd6:	4b46      	ldr	r3, [pc, #280]	; (800a0f0 <calculateHeading+0x158>)
 8009fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8009fe0:	f018 f8aa 	bl	8022138 <sinf>
 8009fe4:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	ed93 7a00 	vldr	s14, [r3]
 8009fee:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	edd3 6a01 	vldr	s13, [r3, #4]
 8009ffc:	edd7 7a07 	vldr	s15, [r7, #28]
 800a000:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a004:	edd7 7a05 	vldr	s15, [r7, #20]
 800a008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a00c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	edd3 6a02 	vldr	s13, [r3, #8]
 800a016:	edd7 7a05 	vldr	s15, [r7, #20]
 800a01a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a01e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a02a:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	ed93 7a01 	vldr	s14, [r3, #4]
 800a034:	edd7 7a08 	vldr	s15, [r7, #32]
 800a038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a042:	edd7 7a07 	vldr	s15, [r7, #28]
 800a046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a04a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a04e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a052:	edd7 0a04 	vldr	s1, [r7, #16]
 800a056:	ed97 0a03 	vldr	s0, [r7, #12]
 800a05a:	f018 f8e1 	bl	8022220 <atan2f>
 800a05e:	eef0 7a40 	vmov.f32	s15, s0
 800a062:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a0f4 <calculateHeading+0x15c>
 800a066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a06a:	ee17 0a90 	vmov	r0, s15
 800a06e:	f7f6 fa29 	bl	80004c4 <__aeabi_f2d>
 800a072:	a31d      	add	r3, pc, #116	; (adr r3, 800a0e8 <calculateHeading+0x150>)
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f7f6 fba6 	bl	80007c8 <__aeabi_ddiv>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4614      	mov	r4, r2
 800a082:	461d      	mov	r5, r3
 800a084:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <calculateHeading+0x160>)
 800a086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f6 fa1b 	bl	80004c4 <__aeabi_f2d>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 f8b7 	bl	8000208 <__adddf3>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f04f 0200 	mov.w	r2, #0
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <calculateHeading+0x164>)
 800a0a8:	f7f6 fb8e 	bl	80007c8 <__aeabi_ddiv>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f7f6 fd40 	bl	8000b38 <__aeabi_d2f>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a0bc:	ed97 0a02 	vldr	s0, [r7, #8]
 800a0c0:	f017 fffa 	bl	80220b8 <lrintf>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a0c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da04      	bge.n	800a0da <calculateHeading+0x142>
        head += 360;
 800a0d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a0da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3728      	adds	r7, #40	; 0x28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	54442d18 	.word	0x54442d18
 800a0ec:	400921fb 	.word	0x400921fb
 800a0f0:	20000cdc 	.word	0x20000cdc
 800a0f4:	44e10000 	.word	0x44e10000
 800a0f8:	20000fcc 	.word	0x20000fcc
 800a0fc:	40240000 	.word	0x40240000

0800a100 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	ed2d 8b02 	vpush	{d8}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a10e:	4bbe      	ldr	r3, [pc, #760]	; (800a408 <getEstimatedAttitude+0x308>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4798      	blx	r3
 800a114:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a116:	4bbd      	ldr	r3, [pc, #756]	; (800a40c <getEstimatedAttitude+0x30c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a12a:	4bb9      	ldr	r3, [pc, #740]	; (800a410 <getEstimatedAttitude+0x310>)
 800a12c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a134:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a138:	4ab4      	ldr	r2, [pc, #720]	; (800a40c <getEstimatedAttitude+0x30c>)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	e075      	b.n	800a230 <getEstimatedAttitude+0x130>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a144:	4ab3      	ldr	r2, [pc, #716]	; (800a414 <getEstimatedAttitude+0x314>)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a154:	edd7 7a04 	vldr	s15, [r7, #16]
 800a158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a164:	4413      	add	r3, r2
 800a166:	3b28      	subs	r3, #40	; 0x28
 800a168:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a16c:	4baa      	ldr	r3, [pc, #680]	; (800a418 <getEstimatedAttitude+0x318>)
 800a16e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a172:	2b00      	cmp	r3, #0
 800a174:	d043      	beq.n	800a1fe <getEstimatedAttitude+0xfe>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a176:	4aa9      	ldr	r2, [pc, #676]	; (800a41c <getEstimatedAttitude+0x31c>)
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	ed93 7a00 	vldr	s14, [r3]
 800a182:	4ba5      	ldr	r3, [pc, #660]	; (800a418 <getEstimatedAttitude+0x318>)
 800a184:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a190:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a194:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a19c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1a4:	4a9e      	ldr	r2, [pc, #632]	; (800a420 <getEstimatedAttitude+0x320>)
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1b4:	4b98      	ldr	r3, [pc, #608]	; (800a418 <getEstimatedAttitude+0x318>)
 800a1b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a1c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a1c6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a1ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1d2:	4a92      	ldr	r2, [pc, #584]	; (800a41c <getEstimatedAttitude+0x31c>)
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a1de:	4a8f      	ldr	r2, [pc, #572]	; (800a41c <getEstimatedAttitude+0x31c>)
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	edd3 7a00 	vldr	s15, [r3]
 800a1ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1ee:	ee17 3a90 	vmov	r3, s15
 800a1f2:	b219      	sxth	r1, r3
 800a1f4:	4a8b      	ldr	r2, [pc, #556]	; (800a424 <getEstimatedAttitude+0x324>)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a1fc:	e007      	b.n	800a20e <getEstimatedAttitude+0x10e>
        } else {
            accSmooth[axis] = accADC[axis];
 800a1fe:	4a88      	ldr	r2, [pc, #544]	; (800a420 <getEstimatedAttitude+0x320>)
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a206:	4a87      	ldr	r2, [pc, #540]	; (800a424 <getEstimatedAttitude+0x324>)
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a20e:	4a85      	ldr	r2, [pc, #532]	; (800a424 <getEstimatedAttitude+0x324>)
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a216:	4619      	mov	r1, r3
 800a218:	4a82      	ldr	r2, [pc, #520]	; (800a424 <getEstimatedAttitude+0x324>)
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a220:	fb03 f301 	mul.w	r3, r3, r1
 800a224:	6a3a      	ldr	r2, [r7, #32]
 800a226:	4413      	add	r3, r2
 800a228:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	3301      	adds	r3, #1
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	2b02      	cmp	r3, #2
 800a234:	dd86      	ble.n	800a144 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)acc_1G * acc_1G);
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2264      	movs	r2, #100	; 0x64
 800a23a:	fb02 f203 	mul.w	r2, r2, r3
 800a23e:	4b7a      	ldr	r3, [pc, #488]	; (800a428 <getEstimatedAttitude+0x328>)
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	4619      	mov	r1, r3
 800a244:	4b78      	ldr	r3, [pc, #480]	; (800a428 <getEstimatedAttitude+0x328>)
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	fb03 f301 	mul.w	r3, r3, r1
 800a24c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a250:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a252:	463b      	mov	r3, r7
 800a254:	4619      	mov	r1, r3
 800a256:	4875      	ldr	r0, [pc, #468]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a258:	f7ff fc24 	bl	8009aa4 <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	2b48      	cmp	r3, #72	; 0x48
 800a262:	d93c      	bls.n	800a2de <getEstimatedAttitude+0x1de>
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b84      	cmp	r3, #132	; 0x84
 800a26a:	d838      	bhi.n	800a2de <getEstimatedAttitude+0x1de>
        for (axis = 0; axis < 3; axis++)
 800a26c:	2300      	movs	r3, #0
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
 800a270:	e032      	b.n	800a2d8 <getEstimatedAttitude+0x1d8>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a272:	4a6e      	ldr	r2, [pc, #440]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	ed93 7a00 	vldr	s14, [r3]
 800a27e:	4b6c      	ldr	r3, [pc, #432]	; (800a430 <getEstimatedAttitude+0x330>)
 800a280:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a284:	ee07 3a90 	vmov	s15, r3
 800a288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a290:	4a64      	ldr	r2, [pc, #400]	; (800a424 <getEstimatedAttitude+0x324>)
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2a4:	4b62      	ldr	r3, [pc, #392]	; (800a430 <getEstimatedAttitude+0x330>)
 800a2a6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2aa:	ee07 3a90 	vmov	s15, r3
 800a2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2b6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a2ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c6:	4a59      	ldr	r2, [pc, #356]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	ddc9      	ble.n	800a272 <getEstimatedAttitude+0x172>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a2de:	4b53      	ldr	r3, [pc, #332]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a2e0:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2e4:	4b53      	ldr	r3, [pc, #332]	; (800a434 <getEstimatedAttitude+0x334>)
 800a2e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fa:	bfcc      	ite	gt
 800a2fc:	2301      	movgt	r3, #1
 800a2fe:	2300      	movle	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	4b4c      	ldr	r3, [pc, #304]	; (800a438 <getEstimatedAttitude+0x338>)
 800a306:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a308:	4b48      	ldr	r3, [pc, #288]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a30a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a30e:	4b47      	ldr	r3, [pc, #284]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a310:	ed93 7a02 	vldr	s14, [r3, #8]
 800a314:	eef0 0a47 	vmov.f32	s1, s14
 800a318:	eeb0 0a67 	vmov.f32	s0, s15
 800a31c:	f017 ff80 	bl	8022220 <atan2f>
 800a320:	eef0 7a40 	vmov.f32	s15, s0
 800a324:	4b45      	ldr	r3, [pc, #276]	; (800a43c <getEstimatedAttitude+0x33c>)
 800a326:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a32a:	4b40      	ldr	r3, [pc, #256]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a32c:	edd3 7a00 	vldr	s15, [r3]
 800a330:	eeb1 8a67 	vneg.f32	s16, s15
 800a334:	4b3d      	ldr	r3, [pc, #244]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a336:	ed93 7a01 	vldr	s14, [r3, #4]
 800a33a:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a33c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a340:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a344:	4b39      	ldr	r3, [pc, #228]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a346:	edd3 6a02 	vldr	s13, [r3, #8]
 800a34a:	4b38      	ldr	r3, [pc, #224]	; (800a42c <getEstimatedAttitude+0x32c>)
 800a34c:	edd3 7a02 	vldr	s15, [r3, #8]
 800a350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a354:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a358:	eeb0 0a67 	vmov.f32	s0, s15
 800a35c:	f017 fffa 	bl	8022354 <sqrtf>
 800a360:	eef0 7a40 	vmov.f32	s15, s0
 800a364:	eef0 0a67 	vmov.f32	s1, s15
 800a368:	eeb0 0a48 	vmov.f32	s0, s16
 800a36c:	f017 ff58 	bl	8022220 <atan2f>
 800a370:	eef0 7a40 	vmov.f32	s15, s0
 800a374:	4b31      	ldr	r3, [pc, #196]	; (800a43c <getEstimatedAttitude+0x33c>)
 800a376:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a37a:	4b30      	ldr	r3, [pc, #192]	; (800a43c <getEstimatedAttitude+0x33c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f6 f8a0 	bl	80004c4 <__aeabi_f2d>
 800a384:	a31e      	add	r3, pc, #120	; (adr r3, 800a400 <getEstimatedAttitude+0x300>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f6 f8f3 	bl	8000574 <__aeabi_dmul>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4610      	mov	r0, r2
 800a394:	4619      	mov	r1, r3
 800a396:	f7f6 fbcf 	bl	8000b38 <__aeabi_d2f>
 800a39a:	4603      	mov	r3, r0
 800a39c:	ee00 3a10 	vmov	s0, r3
 800a3a0:	f017 fe8a 	bl	80220b8 <lrintf>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	b21a      	sxth	r2, r3
 800a3a8:	4b25      	ldr	r3, [pc, #148]	; (800a440 <getEstimatedAttitude+0x340>)
 800a3aa:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a3ac:	4b23      	ldr	r3, [pc, #140]	; (800a43c <getEstimatedAttitude+0x33c>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7f6 f887 	bl	80004c4 <__aeabi_f2d>
 800a3b6:	a312      	add	r3, pc, #72	; (adr r3, 800a400 <getEstimatedAttitude+0x300>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f6 f8da 	bl	8000574 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f7f6 fbb6 	bl	8000b38 <__aeabi_d2f>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	ee00 3a10 	vmov	s0, r3
 800a3d2:	f017 fe71 	bl	80220b8 <lrintf>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	b21a      	sxth	r2, r3
 800a3da:	4b19      	ldr	r3, [pc, #100]	; (800a440 <getEstimatedAttitude+0x340>)
 800a3dc:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a3de:	2008      	movs	r0, #8
 800a3e0:	f7fc fdb8 	bl	8006f54 <sensors>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d06c      	beq.n	800a4c4 <getEstimatedAttitude+0x3c4>
        rotateV(&EstM.V, deltaGyroAngle);
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4815      	ldr	r0, [pc, #84]	; (800a444 <getEstimatedAttitude+0x344>)
 800a3f0:	f7ff fb58 	bl	8009aa4 <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f8:	e059      	b.n	800a4ae <getEstimatedAttitude+0x3ae>
 800a3fa:	bf00      	nop
 800a3fc:	f3af 8000 	nop.w
 800a400:	907e593b 	.word	0x907e593b
 800a404:	4081e7a9 	.word	0x4081e7a9
 800a408:	2000137c 	.word	0x2000137c
 800a40c:	20000cf0 	.word	0x20000cf0
 800a410:	20000fcc 	.word	0x20000fcc
 800a414:	20001f74 	.word	0x20001f74
 800a418:	20001890 	.word	0x20001890
 800a41c:	20000cf4 	.word	0x20000cf4
 800a420:	20001f8c 	.word	0x20001f8c
 800a424:	20001fa4 	.word	0x20001fa4
 800a428:	2000005a 	.word	0x2000005a
 800a42c:	20001fb4 	.word	0x20001fb4
 800a430:	200019c8 	.word	0x200019c8
 800a434:	20000c98 	.word	0x20000c98
 800a438:	20002014 	.word	0x20002014
 800a43c:	20000cdc 	.word	0x20000cdc
 800a440:	20000cd8 	.word	0x20000cd8
 800a444:	20000d00 	.word	0x20000d00
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a448:	4a69      	ldr	r2, [pc, #420]	; (800a5f0 <getEstimatedAttitude+0x4f0>)
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	ed93 7a00 	vldr	s14, [r3]
 800a454:	4b67      	ldr	r3, [pc, #412]	; (800a5f4 <getEstimatedAttitude+0x4f4>)
 800a456:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a45a:	ee07 3a90 	vmov	s15, r3
 800a45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a462:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a466:	4a64      	ldr	r2, [pc, #400]	; (800a5f8 <getEstimatedAttitude+0x4f8>)
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a47a:	4b5e      	ldr	r3, [pc, #376]	; (800a5f4 <getEstimatedAttitude+0x4f4>)
 800a47c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a480:	ee07 3a90 	vmov	s15, r3
 800a484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a48c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a490:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a494:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49c:	4a54      	ldr	r2, [pc, #336]	; (800a5f0 <getEstimatedAttitude+0x4f0>)
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	ddc9      	ble.n	800a448 <getEstimatedAttitude+0x348>
        heading = calculateHeading(&EstM);
 800a4b4:	484e      	ldr	r0, [pc, #312]	; (800a5f0 <getEstimatedAttitude+0x4f0>)
 800a4b6:	f7ff fd6f 	bl	8009f98 <calculateHeading>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4b4f      	ldr	r3, [pc, #316]	; (800a5fc <getEstimatedAttitude+0x4fc>)
 800a4c0:	801a      	strh	r2, [r3, #0]
 800a4c2:	e00f      	b.n	800a4e4 <getEstimatedAttitude+0x3e4>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	484d      	ldr	r0, [pc, #308]	; (800a600 <getEstimatedAttitude+0x500>)
 800a4ca:	f7ff faeb 	bl	8009aa4 <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a4ce:	494c      	ldr	r1, [pc, #304]	; (800a600 <getEstimatedAttitude+0x500>)
 800a4d0:	484b      	ldr	r0, [pc, #300]	; (800a600 <getEstimatedAttitude+0x500>)
 800a4d2:	f7ff fa97 	bl	8009a04 <normalizeV>
        heading = calculateHeading(&EstN);
 800a4d6:	484a      	ldr	r0, [pc, #296]	; (800a600 <getEstimatedAttitude+0x500>)
 800a4d8:	f7ff fd5e 	bl	8009f98 <calculateHeading>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4b46      	ldr	r3, [pc, #280]	; (800a5fc <getEstimatedAttitude+0x4fc>)
 800a4e2:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a4e4:	6978      	ldr	r0, [r7, #20]
 800a4e6:	f7ff fc0f 	bl	8009d08 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a4ea:	4b46      	ldr	r3, [pc, #280]	; (800a604 <getEstimatedAttitude+0x504>)
 800a4ec:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d072      	beq.n	800a5da <getEstimatedAttitude+0x4da>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a4f4:	4b44      	ldr	r3, [pc, #272]	; (800a608 <getEstimatedAttitude+0x508>)
 800a4f6:	ed93 8a02 	vldr	s16, [r3, #8]
 800a4fa:	4b43      	ldr	r3, [pc, #268]	; (800a608 <getEstimatedAttitude+0x508>)
 800a4fc:	ed93 7a00 	vldr	s14, [r3]
 800a500:	4b41      	ldr	r3, [pc, #260]	; (800a608 <getEstimatedAttitude+0x508>)
 800a502:	edd3 7a00 	vldr	s15, [r3]
 800a506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a50a:	4b3f      	ldr	r3, [pc, #252]	; (800a608 <getEstimatedAttitude+0x508>)
 800a50c:	edd3 6a01 	vldr	s13, [r3, #4]
 800a510:	4b3d      	ldr	r3, [pc, #244]	; (800a608 <getEstimatedAttitude+0x508>)
 800a512:	edd3 7a01 	vldr	s15, [r3, #4]
 800a516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a51a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a51e:	4b3a      	ldr	r3, [pc, #232]	; (800a608 <getEstimatedAttitude+0x508>)
 800a520:	edd3 6a02 	vldr	s13, [r3, #8]
 800a524:	4b38      	ldr	r3, [pc, #224]	; (800a608 <getEstimatedAttitude+0x508>)
 800a526:	edd3 7a02 	vldr	s15, [r3, #8]
 800a52a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a532:	eeb0 0a67 	vmov.f32	s0, s15
 800a536:	f017 ff0d 	bl	8022354 <sqrtf>
 800a53a:	eeb0 7a40 	vmov.f32	s14, s0
 800a53e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a542:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a546:	edd7 7a03 	vldr	s15, [r7, #12]
 800a54a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a60c <getEstimatedAttitude+0x50c>
 800a54e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a556:	d803      	bhi.n	800a560 <getEstimatedAttitude+0x460>
            throttleAngleCorrection = 0;
 800a558:	4b2d      	ldr	r3, [pc, #180]	; (800a610 <getEstimatedAttitude+0x510>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a55e:	e03c      	b.n	800a5da <getEstimatedAttitude+0x4da>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a560:	ed97 0a03 	vldr	s0, [r7, #12]
 800a564:	f017 fe2a 	bl	80221bc <acosf>
 800a568:	eeb0 7a40 	vmov.f32	s14, s0
 800a56c:	4b29      	ldr	r3, [pc, #164]	; (800a614 <getEstimatedAttitude+0x514>)
 800a56e:	edd3 7a00 	vldr	s15, [r3]
 800a572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a576:	eeb0 0a67 	vmov.f32	s0, s15
 800a57a:	f017 fd9d 	bl	80220b8 <lrintf>
 800a57e:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a586:	dd02      	ble.n	800a58e <getEstimatedAttitude+0x48e>
                deg = 900;
 800a588:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a58c:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a58e:	4b1d      	ldr	r3, [pc, #116]	; (800a604 <getEstimatedAttitude+0x504>)
 800a590:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a59c:	69f8      	ldr	r0, [r7, #28]
 800a59e:	f7f5 ff7f 	bl	80004a0 <__aeabi_i2d>
 800a5a2:	a311      	add	r3, pc, #68	; (adr r3, 800a5e8 <getEstimatedAttitude+0x4e8>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f6 f90e 	bl	80007c8 <__aeabi_ddiv>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f7f6 fac0 	bl	8000b38 <__aeabi_d2f>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	ee00 3a10 	vmov	s0, r3
 800a5be:	f017 fdbb 	bl	8022138 <sinf>
 800a5c2:	eef0 7a40 	vmov.f32	s15, s0
 800a5c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ce:	f017 fd73 	bl	80220b8 <lrintf>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	b21a      	sxth	r2, r3
 800a5d6:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <getEstimatedAttitude+0x510>)
 800a5d8:	801a      	strh	r2, [r3, #0]
}
 800a5da:	bf00      	nop
 800a5dc:	3728      	adds	r7, #40	; 0x28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	ecbd 8b02 	vpop	{d8}
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	e50feba2 	.word	0xe50feba2
 800a5ec:	409616dd 	.word	0x409616dd
 800a5f0:	20000d00 	.word	0x20000d00
 800a5f4:	200019c8 	.word	0x200019c8
 800a5f8:	20001f98 	.word	0x20001f98
 800a5fc:	20002270 	.word	0x20002270
 800a600:	20000034 	.word	0x20000034
 800a604:	20001890 	.word	0x20001890
 800a608:	20001fb4 	.word	0x20001fb4
 800a60c:	3c75c28f 	.word	0x3c75c28f
 800a610:	20000cc4 	.word	0x20000cc4
 800a614:	20001fac 	.word	0x20001fac

0800a618 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	; 0x38
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a620:	4b84      	ldr	r3, [pc, #528]	; (800a834 <taskGetEstimatedAltitude+0x21c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4798      	blx	r3
 800a626:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a628:	4b83      	ldr	r3, [pc, #524]	; (800a838 <taskGetEstimatedAltitude+0x220>)
 800a62a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfb8      	it	lt
 800a632:	425b      	neglt	r3, r3
 800a634:	b29a      	uxth	r2, r3
 800a636:	4b80      	ldr	r3, [pc, #512]	; (800a838 <taskGetEstimatedAltitude+0x220>)
 800a638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfb8      	it	lt
 800a640:	425b      	neglt	r3, r3
 800a642:	b29b      	uxth	r3, r3
 800a644:	4293      	cmp	r3, r2
 800a646:	bf38      	it	cc
 800a648:	4613      	movcc	r3, r2
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a64e:	4b7b      	ldr	r3, [pc, #492]	; (800a83c <taskGetEstimatedAltitude+0x224>)
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a654:	4b7a      	ldr	r3, [pc, #488]	; (800a840 <taskGetEstimatedAltitude+0x228>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a65e:	4a78      	ldr	r2, [pc, #480]	; (800a840 <taskGetEstimatedAltitude+0x228>)
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a664:	4b77      	ldr	r3, [pc, #476]	; (800a844 <taskGetEstimatedAltitude+0x22c>)
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d058      	beq.n	800a71e <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a66c:	4b76      	ldr	r3, [pc, #472]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	da00      	bge.n	800a676 <taskGetEstimatedAltitude+0x5e>
 800a674:	3307      	adds	r3, #7
 800a676:	10db      	asrs	r3, r3, #3
 800a678:	425b      	negs	r3, r3
 800a67a:	461a      	mov	r2, r3
 800a67c:	4b72      	ldr	r3, [pc, #456]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4413      	add	r3, r2
 800a682:	4a71      	ldr	r2, [pc, #452]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a684:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a686:	4b71      	ldr	r3, [pc, #452]	; (800a84c <taskGetEstimatedAltitude+0x234>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a71      	ldr	r2, [pc, #452]	; (800a850 <taskGetEstimatedAltitude+0x238>)
 800a68c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a690:	3a01      	subs	r2, #1
 800a692:	fbb3 f3f2 	udiv	r3, r3, r2
 800a696:	4a6c      	ldr	r2, [pc, #432]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a698:	6812      	ldr	r2, [r2, #0]
 800a69a:	4413      	add	r3, r2
 800a69c:	461a      	mov	r2, r3
 800a69e:	4b6a      	ldr	r3, [pc, #424]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a6a0:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a6a2:	4b69      	ldr	r3, [pc, #420]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da00      	bge.n	800a6ac <taskGetEstimatedAltitude+0x94>
 800a6aa:	3307      	adds	r3, #7
 800a6ac:	10db      	asrs	r3, r3, #3
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6b6:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a854 <taskGetEstimatedAltitude+0x23c>
 800a6ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a6be:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a858 <taskGetEstimatedAltitude+0x240>
 800a6c2:	eeb0 0a47 	vmov.f32	s0, s14
 800a6c6:	f017 fdad 	bl	8022224 <powf>
 800a6ca:	eef0 7a40 	vmov.f32	s15, s0
 800a6ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6d6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a85c <taskGetEstimatedAltitude+0x244>
 800a6da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6e2:	ee17 2a90 	vmov	r2, s15
 800a6e6:	4b5e      	ldr	r3, [pc, #376]	; (800a860 <taskGetEstimatedAltitude+0x248>)
 800a6e8:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a6ea:	4b5e      	ldr	r3, [pc, #376]	; (800a864 <taskGetEstimatedAltitude+0x24c>)
 800a6ec:	f04f 0200 	mov.w	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a6f2:	4b5d      	ldr	r3, [pc, #372]	; (800a868 <taskGetEstimatedAltitude+0x250>)
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a6fa:	4b52      	ldr	r3, [pc, #328]	; (800a844 <taskGetEstimatedAltitude+0x22c>)
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	4b50      	ldr	r3, [pc, #320]	; (800a844 <taskGetEstimatedAltitude+0x22c>)
 800a704:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a706:	4b4f      	ldr	r3, [pc, #316]	; (800a844 <taskGetEstimatedAltitude+0x22c>)
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d107      	bne.n	800a71e <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a70e:	4b4e      	ldr	r3, [pc, #312]	; (800a848 <taskGetEstimatedAltitude+0x230>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b53      	ldr	r3, [pc, #332]	; (800a860 <taskGetEstimatedAltitude+0x248>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4955      	ldr	r1, [pc, #340]	; (800a86c <taskGetEstimatedAltitude+0x254>)
 800a718:	2002      	movs	r0, #2
 800a71a:	f008 ff37 	bl	801358c <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a71e:	4b4b      	ldr	r3, [pc, #300]	; (800a84c <taskGetEstimatedAltitude+0x234>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a4b      	ldr	r2, [pc, #300]	; (800a850 <taskGetEstimatedAltitude+0x238>)
 800a724:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a728:	3a01      	subs	r2, #1
 800a72a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a736:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a854 <taskGetEstimatedAltitude+0x23c>
 800a73a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a73e:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a858 <taskGetEstimatedAltitude+0x240>
 800a742:	eeb0 0a47 	vmov.f32	s0, s14
 800a746:	f017 fd6d 	bl	8022224 <powf>
 800a74a:	eef0 7a40 	vmov.f32	s15, s0
 800a74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a752:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a756:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a85c <taskGetEstimatedAltitude+0x244>
 800a75a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a75e:	eeb0 0a67 	vmov.f32	s0, s15
 800a762:	f017 fca9 	bl	80220b8 <lrintf>
 800a766:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a768:	4b3d      	ldr	r3, [pc, #244]	; (800a860 <taskGetEstimatedAltitude+0x248>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a772:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <taskGetEstimatedAltitude+0x258>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a77e:	4b34      	ldr	r3, [pc, #208]	; (800a850 <taskGetEstimatedAltitude+0x238>)
 800a780:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a784:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a792:	4b2f      	ldr	r3, [pc, #188]	; (800a850 <taskGetEstimatedAltitude+0x238>)
 800a794:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a798:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a79c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ac:	f017 fc84 	bl	80220b8 <lrintf>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	4a2f      	ldr	r2, [pc, #188]	; (800a870 <taskGetEstimatedAltitude+0x258>)
 800a7b4:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a7b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7ba:	2bfa      	cmp	r3, #250	; 0xfa
 800a7bc:	dc04      	bgt.n	800a7c8 <taskGetEstimatedAltitude+0x1b0>
 800a7be:	4b2d      	ldr	r3, [pc, #180]	; (800a874 <taskGetEstimatedAltitude+0x25c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c6:	d104      	bne.n	800a7d2 <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a7c8:	4b2b      	ldr	r3, [pc, #172]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	e01b      	b.n	800a80a <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a7d2:	4b28      	ldr	r3, [pc, #160]	; (800a874 <taskGetEstimatedAltitude+0x25c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7ea:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a87c <taskGetEstimatedAltitude+0x264>
 800a7ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a87c <taskGetEstimatedAltitude+0x264>
 800a7fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a802:	ee17 2a90 	vmov	r2, s15
 800a806:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a808:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a80a:	4b1b      	ldr	r3, [pc, #108]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dd38      	ble.n	800a884 <taskGetEstimatedAltitude+0x26c>
 800a812:	4b19      	ldr	r3, [pc, #100]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2bc7      	cmp	r3, #199	; 0xc7
 800a818:	dc34      	bgt.n	800a884 <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a81a:	4b15      	ldr	r3, [pc, #84]	; (800a870 <taskGetEstimatedAltitude+0x258>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b16      	ldr	r3, [pc, #88]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	4a16      	ldr	r2, [pc, #88]	; (800a880 <taskGetEstimatedAltitude+0x268>)
 800a826:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a828:	4b13      	ldr	r3, [pc, #76]	; (800a878 <taskGetEstimatedAltitude+0x260>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a10      	ldr	r2, [pc, #64]	; (800a870 <taskGetEstimatedAltitude+0x258>)
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	e064      	b.n	800a8fc <taskGetEstimatedAltitude+0x2e4>
 800a832:	bf00      	nop
 800a834:	2000137c 	.word	0x2000137c
 800a838:	20000cd8 	.word	0x20000cd8
 800a83c:	20000ca4 	.word	0x20000ca4
 800a840:	20000d0c 	.word	0x20000d0c
 800a844:	20000fc0 	.word	0x20000fc0
 800a848:	20000d10 	.word	0x20000d10
 800a84c:	20000c9c 	.word	0x20000c9c
 800a850:	20001890 	.word	0x20001890
 800a854:	47c5e680 	.word	0x47c5e680
 800a858:	3e42dcb1 	.word	0x3e42dcb1
 800a85c:	4a8748d0 	.word	0x4a8748d0
 800a860:	20000d14 	.word	0x20000d14
 800a864:	20000d18 	.word	0x20000d18
 800a868:	20000d1c 	.word	0x20000d1c
 800a86c:	080260a4 	.word	0x080260a4
 800a870:	20000ca0 	.word	0x20000ca0
 800a874:	2000002c 	.word	0x2000002c
 800a878:	20000030 	.word	0x20000030
 800a87c:	44610000 	.word	0x44610000
 800a880:	20000cac 	.word	0x20000cac
    } else {
        BaroAlt -= baroAlt_offset;
 800a884:	4ba0      	ldr	r3, [pc, #640]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	4ba0      	ldr	r3, [pc, #640]	; (800ab0c <taskGetEstimatedAltitude+0x4f4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	4a9e      	ldr	r2, [pc, #632]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a890:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a892:	4b9f      	ldr	r3, [pc, #636]	; (800ab10 <taskGetEstimatedAltitude+0x4f8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd30      	ble.n	800a8fc <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a89a:	4b9d      	ldr	r3, [pc, #628]	; (800ab10 <taskGetEstimatedAltitude+0x4f8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8aa:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800ab14 <taskGetEstimatedAltitude+0x4fc>
 800a8ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8b2:	4b99      	ldr	r3, [pc, #612]	; (800ab18 <taskGetEstimatedAltitude+0x500>)
 800a8b4:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a8b8:	4b95      	ldr	r3, [pc, #596]	; (800ab10 <taskGetEstimatedAltitude+0x4f8>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	ee07 3a90 	vmov	s15, r3
 800a8c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8c4:	4b94      	ldr	r3, [pc, #592]	; (800ab18 <taskGetEstimatedAltitude+0x500>)
 800a8c6:	edd3 7a00 	vldr	s15, [r3]
 800a8ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ce:	4b8e      	ldr	r3, [pc, #568]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8da:	4b8f      	ldr	r3, [pc, #572]	; (800ab18 <taskGetEstimatedAltitude+0x500>)
 800a8dc:	edd3 7a00 	vldr	s15, [r3]
 800a8e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8f4:	ee17 2a90 	vmov	r2, s15
 800a8f8:	4b83      	ldr	r3, [pc, #524]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a8fa:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a8fc:	4b87      	ldr	r3, [pc, #540]	; (800ab1c <taskGetEstimatedAltitude+0x504>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a908:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ab20 <taskGetEstimatedAltitude+0x508>
 800a90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a910:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a914:	4b83      	ldr	r3, [pc, #524]	; (800ab24 <taskGetEstimatedAltitude+0x50c>)
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a920:	4b81      	ldr	r3, [pc, #516]	; (800ab28 <taskGetEstimatedAltitude+0x510>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	ee07 3a90 	vmov	s15, r3
 800a928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a930:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a934:	4b7d      	ldr	r3, [pc, #500]	; (800ab2c <taskGetEstimatedAltitude+0x514>)
 800a936:	ed93 7a00 	vldr	s14, [r3]
 800a93a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a93e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a942:	4b76      	ldr	r3, [pc, #472]	; (800ab1c <taskGetEstimatedAltitude+0x504>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a952:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a956:	edd7 7a06 	vldr	s15, [r7, #24]
 800a95a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a95e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a962:	edd7 7a08 	vldr	s15, [r7, #32]
 800a966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a96a:	4b71      	ldr	r3, [pc, #452]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800a96c:	edd3 6a00 	vldr	s13, [r3]
 800a970:	edd7 7a08 	vldr	s15, [r7, #32]
 800a974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a97c:	4b6d      	ldr	r3, [pc, #436]	; (800ab34 <taskGetEstimatedAltitude+0x51c>)
 800a97e:	edd3 7a00 	vldr	s15, [r3]
 800a982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a986:	4b6b      	ldr	r3, [pc, #428]	; (800ab34 <taskGetEstimatedAltitude+0x51c>)
 800a988:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a98c:	4b6a      	ldr	r3, [pc, #424]	; (800ab38 <taskGetEstimatedAltitude+0x520>)
 800a98e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a992:	4b68      	ldr	r3, [pc, #416]	; (800ab34 <taskGetEstimatedAltitude+0x51c>)
 800a994:	edd3 7a00 	vldr	s15, [r3]
 800a998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a99c:	4b5a      	ldr	r3, [pc, #360]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9a8:	4b63      	ldr	r3, [pc, #396]	; (800ab38 <taskGetEstimatedAltitude+0x520>)
 800a9aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a9ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9be:	4b5d      	ldr	r3, [pc, #372]	; (800ab34 <taskGetEstimatedAltitude+0x51c>)
 800a9c0:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a9c4:	4b52      	ldr	r3, [pc, #328]	; (800ab10 <taskGetEstimatedAltitude+0x4f8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dd08      	ble.n	800a9de <taskGetEstimatedAltitude+0x3c6>
 800a9cc:	4b50      	ldr	r3, [pc, #320]	; (800ab10 <taskGetEstimatedAltitude+0x4f8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2bc7      	cmp	r3, #199	; 0xc7
 800a9d2:	dc04      	bgt.n	800a9de <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800a9d4:	4b4c      	ldr	r3, [pc, #304]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a58      	ldr	r2, [pc, #352]	; (800ab3c <taskGetEstimatedAltitude+0x524>)
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	e008      	b.n	800a9f0 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800a9de:	4b55      	ldr	r3, [pc, #340]	; (800ab34 <taskGetEstimatedAltitude+0x51c>)
 800a9e0:	edd3 7a00 	vldr	s15, [r3]
 800a9e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9e8:	ee17 2a90 	vmov	r2, s15
 800a9ec:	4b53      	ldr	r3, [pc, #332]	; (800ab3c <taskGetEstimatedAltitude+0x524>)
 800a9ee:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a9f0:	4b4f      	ldr	r3, [pc, #316]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800a9f2:	ed93 7a00 	vldr	s14, [r3]
 800a9f6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a9fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9fe:	4b4c      	ldr	r3, [pc, #304]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800aa00:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800aa04:	f7ff faaa 	bl	8009f5c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800aa08:	4b3f      	ldr	r3, [pc, #252]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	4b4c      	ldr	r3, [pc, #304]	; (800ab40 <taskGetEstimatedAltitude+0x528>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa1a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab44 <taskGetEstimatedAltitude+0x52c>
 800aa1e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa34:	ee17 3a90 	vmov	r3, s15
 800aa38:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa3a:	4b33      	ldr	r3, [pc, #204]	; (800ab08 <taskGetEstimatedAltitude+0x4f0>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a40      	ldr	r2, [pc, #256]	; (800ab40 <taskGetEstimatedAltitude+0x528>)
 800aa40:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa46:	4940      	ldr	r1, [pc, #256]	; (800ab48 <taskGetEstimatedAltitude+0x530>)
 800aa48:	6978      	ldr	r0, [r7, #20]
 800aa4a:	f7f9 f949 	bl	8003ce0 <constrain>
 800aa4e:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa50:	210a      	movs	r1, #10
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	f7ff f930 	bl	8009cb8 <applyDeadband>
 800aa58:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aa5a:	4b37      	ldr	r3, [pc, #220]	; (800ab38 <taskGetEstimatedAltitude+0x520>)
 800aa5c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aa60:	4b33      	ldr	r3, [pc, #204]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800aa62:	edd3 7a00 	vldr	s15, [r3]
 800aa66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa74:	4b30      	ldr	r3, [pc, #192]	; (800ab38 <taskGetEstimatedAltitude+0x520>)
 800aa76:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aa7a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8a:	4b29      	ldr	r3, [pc, #164]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800aa8c:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aa90:	4b27      	ldr	r3, [pc, #156]	; (800ab30 <taskGetEstimatedAltitude+0x518>)
 800aa92:	edd3 7a00 	vldr	s15, [r3]
 800aa96:	eeb0 0a67 	vmov.f32	s0, s15
 800aa9a:	f017 fb0d 	bl	80220b8 <lrintf>
 800aa9e:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aaa0:	2105      	movs	r1, #5
 800aaa2:	6938      	ldr	r0, [r7, #16]
 800aaa4:	f7ff f908 	bl	8009cb8 <applyDeadband>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4a28      	ldr	r2, [pc, #160]	; (800ab4c <taskGetEstimatedAltitude+0x534>)
 800aaac:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aaae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aab2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aab6:	f280 80b2 	bge.w	800ac1e <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800aaba:	4b25      	ldr	r3, [pc, #148]	; (800ab50 <taskGetEstimatedAltitude+0x538>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d14e      	bne.n	800ab60 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aac2:	4b24      	ldr	r3, [pc, #144]	; (800ab54 <taskGetEstimatedAltitude+0x53c>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <taskGetEstimatedAltitude+0x524>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aad0:	4921      	ldr	r1, [pc, #132]	; (800ab58 <taskGetEstimatedAltitude+0x540>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7f9 f904 	bl	8003ce0 <constrain>
 800aad8:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aada:	210a      	movs	r1, #10
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff f8eb 	bl	8009cb8 <applyDeadband>
 800aae2:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aae4:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <taskGetEstimatedAltitude+0x520>)
 800aae6:	791b      	ldrb	r3, [r3, #4]
 800aae8:	461a      	mov	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	fb03 f302 	mul.w	r3, r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da00      	bge.n	800aaf6 <taskGetEstimatedAltitude+0x4de>
 800aaf4:	337f      	adds	r3, #127	; 0x7f
 800aaf6:	11db      	asrs	r3, r3, #7
 800aaf8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aafc:	4917      	ldr	r1, [pc, #92]	; (800ab5c <taskGetEstimatedAltitude+0x544>)
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f9 f8ee 	bl	8003ce0 <constrain>
 800ab04:	6378      	str	r0, [r7, #52]	; 0x34
 800ab06:	e02e      	b.n	800ab66 <taskGetEstimatedAltitude+0x54e>
 800ab08:	20000ca0 	.word	0x20000ca0
 800ab0c:	20000cac 	.word	0x20000cac
 800ab10:	20000030 	.word	0x20000030
 800ab14:	42c80000 	.word	0x42c80000
 800ab18:	20000ca8 	.word	0x20000ca8
 800ab1c:	20000c90 	.word	0x20000c90
 800ab20:	358637bd 	.word	0x358637bd
 800ab24:	20001f7c 	.word	0x20001f7c
 800ab28:	20000c94 	.word	0x20000c94
 800ab2c:	20001f88 	.word	0x20001f88
 800ab30:	20000d18 	.word	0x20000d18
 800ab34:	20000d1c 	.word	0x20000d1c
 800ab38:	20001890 	.word	0x20001890
 800ab3c:	20001f94 	.word	0x20001f94
 800ab40:	20000d20 	.word	0x20000d20
 800ab44:	49742400 	.word	0x49742400
 800ab48:	fffffa24 	.word	0xfffffa24
 800ab4c:	20000cc0 	.word	0x20000cc0
 800ab50:	20000cb8 	.word	0x20000cb8
 800ab54:	20001fa0 	.word	0x20001fa0
 800ab58:	fffffe0c 	.word	0xfffffe0c
 800ab5c:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ab60:	4b34      	ldr	r3, [pc, #208]	; (800ac34 <taskGetEstimatedAltitude+0x61c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ab66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ab6e:	4b32      	ldr	r3, [pc, #200]	; (800ac38 <taskGetEstimatedAltitude+0x620>)
 800ab70:	7a9b      	ldrb	r3, [r3, #10]
 800ab72:	461a      	mov	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	fb03 f302 	mul.w	r3, r3, r2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da00      	bge.n	800ab80 <taskGetEstimatedAltitude+0x568>
 800ab7e:	331f      	adds	r3, #31
 800ab80:	115b      	asrs	r3, r3, #5
 800ab82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab86:	492d      	ldr	r1, [pc, #180]	; (800ac3c <taskGetEstimatedAltitude+0x624>)
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f9 f8a9 	bl	8003ce0 <constrain>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4a2b      	ldr	r2, [pc, #172]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800ab92:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800ab94:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <taskGetEstimatedAltitude+0x620>)
 800ab96:	7d1b      	ldrb	r3, [r3, #20]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	fb03 f202 	mul.w	r2, r3, r2
 800aba0:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <taskGetEstimatedAltitude+0x62c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4413      	add	r3, r2
 800aba6:	4a27      	ldr	r2, [pc, #156]	; (800ac44 <taskGetEstimatedAltitude+0x62c>)
 800aba8:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800abaa:	4b26      	ldr	r3, [pc, #152]	; (800ac44 <taskGetEstimatedAltitude+0x62c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a26      	ldr	r2, [pc, #152]	; (800ac48 <taskGetEstimatedAltitude+0x630>)
 800abb0:	4926      	ldr	r1, [pc, #152]	; (800ac4c <taskGetEstimatedAltitude+0x634>)
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7f9 f894 	bl	8003ce0 <constrain>
 800abb8:	4603      	mov	r3, r0
 800abba:	4a22      	ldr	r2, [pc, #136]	; (800ac44 <taskGetEstimatedAltitude+0x62c>)
 800abbc:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800abbe:	4b21      	ldr	r3, [pc, #132]	; (800ac44 <taskGetEstimatedAltitude+0x62c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <taskGetEstimatedAltitude+0x638>)
 800abc4:	fb82 1203 	smull	r1, r2, r2, r3
 800abc8:	10d2      	asrs	r2, r2, #3
 800abca:	17db      	asrs	r3, r3, #31
 800abcc:	1ad2      	subs	r2, r2, r3
 800abce:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4413      	add	r3, r2
 800abd4:	4a1a      	ldr	r2, [pc, #104]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800abd6:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800abd8:	4b17      	ldr	r3, [pc, #92]	; (800ac38 <taskGetEstimatedAltitude+0x620>)
 800abda:	7f9b      	ldrb	r3, [r3, #30]
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abe4:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <taskGetEstimatedAltitude+0x63c>)
 800abe6:	edd3 6a00 	vldr	s13, [r3]
 800abea:	edd7 7a07 	vldr	s15, [r7, #28]
 800abee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abf6:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ac58 <taskGetEstimatedAltitude+0x640>
 800abfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac02:	2296      	movs	r2, #150	; 0x96
 800ac04:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ac08:	ee17 0a90 	vmov	r0, s15
 800ac0c:	f7f9 f868 	bl	8003ce0 <constrain>
 800ac10:	4602      	mov	r2, r0
 800ac12:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	e002      	b.n	800ac24 <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800ac1e:	4b08      	ldr	r3, [pc, #32]	; (800ac40 <taskGetEstimatedAltitude+0x628>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ac24:	4a0b      	ldr	r2, [pc, #44]	; (800ac54 <taskGetEstimatedAltitude+0x63c>)
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	6013      	str	r3, [r2, #0]

    return 1;
 800ac2a:	2301      	movs	r3, #1
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3738      	adds	r7, #56	; 0x38
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20000cb4 	.word	0x20000cb4
 800ac38:	20001890 	.word	0x20001890
 800ac3c:	fffffed4 	.word	0xfffffed4
 800ac40:	20000cb0 	.word	0x20000cb0
 800ac44:	20000cbc 	.word	0x20000cbc
 800ac48:	00190320 	.word	0x00190320
 800ac4c:	ffe6fce0 	.word	0xffe6fce0
 800ac50:	003ff801 	.word	0x003ff801
 800ac54:	20000d24 	.word	0x20000d24
 800ac58:	44000000 	.word	0x44000000

0800ac5c <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ac64:	4916      	ldr	r1, [pc, #88]	; (800acc0 <servoMiddle+0x64>)
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	440b      	add	r3, r1
 800ac72:	33bc      	adds	r3, #188	; 0xbc
 800ac74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac78:	2b11      	cmp	r3, #17
 800ac7a:	dc11      	bgt.n	800aca0 <servoMiddle+0x44>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b07      	cmp	r3, #7
 800ac80:	dc0e      	bgt.n	800aca0 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ac82:	490f      	ldr	r1, [pc, #60]	; (800acc0 <servoMiddle+0x64>)
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	440b      	add	r3, r1
 800ac90:	33bc      	adds	r3, #188	; 0xbc
 800ac92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac96:	461a      	mov	r2, r3
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <servoMiddle+0x68>)
 800ac9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ac9e:	e009      	b.n	800acb4 <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800aca0:	4907      	ldr	r1, [pc, #28]	; (800acc0 <servoMiddle+0x64>)
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	440b      	add	r3, r1
 800acae:	33bc      	adds	r3, #188	; 0xbc
 800acb0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	20001890 	.word	0x20001890
 800acc4:	20002184 	.word	0x20002184

0800acc8 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800acd2:	490d      	ldr	r1, [pc, #52]	; (800ad08 <servoDirection+0x40>)
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	440b      	add	r3, r1
 800ace0:	33c0      	adds	r3, #192	; 0xc0
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	fa42 f303 	asr.w	r3, r2, r3
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <servoDirection+0x32>
        return -1;
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295
 800acf8:	e000      	b.n	800acfc <servoDirection+0x34>
    else
        return 1;
 800acfa:	2301      	movs	r3, #1
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20001890 	.word	0x20001890

0800ad0c <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ad12:	4b1e      	ldr	r3, [pc, #120]	; (800ad8c <loadCustomServoMixer+0x80>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ad18:	2270      	movs	r2, #112	; 0x70
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	481c      	ldr	r0, [pc, #112]	; (800ad90 <loadCustomServoMixer+0x84>)
 800ad1e:	f016 feeb 	bl	8021af8 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad22:	2300      	movs	r3, #0
 800ad24:	71fb      	strb	r3, [r7, #7]
 800ad26:	e028      	b.n	800ad7a <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ad28:	79fa      	ldrb	r2, [r7, #7]
 800ad2a:	491a      	ldr	r1, [pc, #104]	; (800ad94 <loadCustomServoMixer+0x88>)
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	1a9b      	subs	r3, r3, r2
 800ad32:	440b      	add	r3, r1
 800ad34:	33d2      	adds	r3, #210	; 0xd2
 800ad36:	f993 3000 	ldrsb.w	r3, [r3]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d021      	beq.n	800ad82 <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad3e:	79fa      	ldrb	r2, [r7, #7]
 800ad40:	79f9      	ldrb	r1, [r7, #7]
 800ad42:	4813      	ldr	r0, [pc, #76]	; (800ad90 <loadCustomServoMixer+0x84>)
 800ad44:	460b      	mov	r3, r1
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	1a5b      	subs	r3, r3, r1
 800ad4a:	4418      	add	r0, r3
 800ad4c:	4911      	ldr	r1, [pc, #68]	; (800ad94 <loadCustomServoMixer+0x88>)
 800ad4e:	4613      	mov	r3, r2
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	440b      	add	r3, r1
 800ad56:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	6811      	ldr	r1, [r2, #0]
 800ad5e:	6019      	str	r1, [r3, #0]
 800ad60:	8891      	ldrh	r1, [r2, #4]
 800ad62:	7992      	ldrb	r2, [r2, #6]
 800ad64:	8099      	strh	r1, [r3, #4]
 800ad66:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ad68:	4b08      	ldr	r3, [pc, #32]	; (800ad8c <loadCustomServoMixer+0x80>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	4b06      	ldr	r3, [pc, #24]	; (800ad8c <loadCustomServoMixer+0x80>)
 800ad72:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	3301      	adds	r3, #1
 800ad78:	71fb      	strb	r3, [r7, #7]
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	2b0f      	cmp	r3, #15
 800ad7e:	d9d3      	bls.n	800ad28 <loadCustomServoMixer+0x1c>
    }
}
 800ad80:	e000      	b.n	800ad84 <loadCustomServoMixer+0x78>
            break;
 800ad82:	bf00      	nop
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000d29 	.word	0x20000d29
 800ad90:	20000dec 	.word	0x20000dec
 800ad94:	200019c8 	.word	0x200019c8

0800ad98 <mixerInit>:

void mixerInit(void)
{
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800ad9e:	4b8b      	ldr	r3, [pc, #556]	; (800afcc <mixerInit+0x234>)
 800ada0:	795b      	ldrb	r3, [r3, #5]
 800ada2:	4a8b      	ldr	r2, [pc, #556]	; (800afd0 <mixerInit+0x238>)
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	4413      	add	r3, r2
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bf14      	ite	ne
 800adae:	2301      	movne	r3, #1
 800adb0:	2300      	moveq	r3, #0
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	4b87      	ldr	r3, [pc, #540]	; (800afd4 <mixerInit+0x23c>)
 800adb6:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800adb8:	2020      	movs	r0, #32
 800adba:	f7fc f913 	bl	8006fe4 <feature>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <mixerInit+0x32>
        core.useServo = 1;
 800adc4:	4b83      	ldr	r3, [pc, #524]	; (800afd4 <mixerInit+0x23c>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800adca:	4b80      	ldr	r3, [pc, #512]	; (800afcc <mixerInit+0x234>)
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	2b17      	cmp	r3, #23
 800add0:	d128      	bne.n	800ae24 <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800add2:	2300      	movs	r3, #0
 800add4:	607b      	str	r3, [r7, #4]
 800add6:	e021      	b.n	800ae1c <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800add8:	4a7c      	ldr	r2, [pc, #496]	; (800afcc <mixerInit+0x234>)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3301      	adds	r3, #1
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	4413      	add	r3, r2
 800ade2:	edd3 7a00 	vldr	s15, [r3]
 800ade6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adee:	d048      	beq.n	800ae82 <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800adf0:	4a79      	ldr	r2, [pc, #484]	; (800afd8 <mixerInit+0x240>)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	18d1      	adds	r1, r2, r3
 800adf8:	4a74      	ldr	r2, [pc, #464]	; (800afcc <mixerInit+0x234>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3301      	adds	r3, #1
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	4413      	add	r3, r2
 800ae02:	460c      	mov	r4, r1
 800ae04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ae0a:	4b74      	ldr	r3, [pc, #464]	; (800afdc <mixerInit+0x244>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	4b72      	ldr	r3, [pc, #456]	; (800afdc <mixerInit+0x244>)
 800ae14:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	607b      	str	r3, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b0b      	cmp	r3, #11
 800ae20:	ddda      	ble.n	800add8 <mixerInit+0x40>
 800ae22:	e02f      	b.n	800ae84 <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ae24:	4b69      	ldr	r3, [pc, #420]	; (800afcc <mixerInit+0x234>)
 800ae26:	795b      	ldrb	r3, [r3, #5]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b69      	ldr	r3, [pc, #420]	; (800afd0 <mixerInit+0x238>)
 800ae2c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae30:	4b6a      	ldr	r3, [pc, #424]	; (800afdc <mixerInit+0x244>)
 800ae32:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ae34:	4b65      	ldr	r3, [pc, #404]	; (800afcc <mixerInit+0x234>)
 800ae36:	795b      	ldrb	r3, [r3, #5]
 800ae38:	4a65      	ldr	r2, [pc, #404]	; (800afd0 <mixerInit+0x238>)
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01f      	beq.n	800ae84 <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae44:	2300      	movs	r3, #0
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	e014      	b.n	800ae74 <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae4a:	4b60      	ldr	r3, [pc, #384]	; (800afcc <mixerInit+0x234>)
 800ae4c:	795b      	ldrb	r3, [r3, #5]
 800ae4e:	4a60      	ldr	r2, [pc, #384]	; (800afd0 <mixerInit+0x238>)
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	4413      	add	r3, r2
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	18d1      	adds	r1, r2, r3
 800ae5c:	4a5e      	ldr	r2, [pc, #376]	; (800afd8 <mixerInit+0x240>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	4413      	add	r3, r2
 800ae64:	461c      	mov	r4, r3
 800ae66:	460b      	mov	r3, r1
 800ae68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3301      	adds	r3, #1
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	4b59      	ldr	r3, [pc, #356]	; (800afdc <mixerInit+0x244>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	dbe4      	blt.n	800ae4a <mixerInit+0xb2>
 800ae80:	e000      	b.n	800ae84 <mixerInit+0xec>
                break;
 800ae82:	bf00      	nop
        }
    }

    if (core.useServo) {
 800ae84:	4b53      	ldr	r3, [pc, #332]	; (800afd4 <mixerInit+0x23c>)
 800ae86:	7d5b      	ldrb	r3, [r3, #21]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d033      	beq.n	800aef4 <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800ae8c:	4b4f      	ldr	r3, [pc, #316]	; (800afcc <mixerInit+0x234>)
 800ae8e:	795b      	ldrb	r3, [r3, #5]
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b53      	ldr	r3, [pc, #332]	; (800afe0 <mixerInit+0x248>)
 800ae94:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae98:	4b52      	ldr	r3, [pc, #328]	; (800afe4 <mixerInit+0x24c>)
 800ae9a:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800ae9c:	4b4b      	ldr	r3, [pc, #300]	; (800afcc <mixerInit+0x234>)
 800ae9e:	795b      	ldrb	r3, [r3, #5]
 800aea0:	4a4f      	ldr	r2, [pc, #316]	; (800afe0 <mixerInit+0x248>)
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d023      	beq.n	800aef4 <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800aeac:	2300      	movs	r3, #0
 800aeae:	607b      	str	r3, [r7, #4]
 800aeb0:	e01a      	b.n	800aee8 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800aeb2:	4b46      	ldr	r3, [pc, #280]	; (800afcc <mixerInit+0x234>)
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	4a4a      	ldr	r2, [pc, #296]	; (800afe0 <mixerInit+0x248>)
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	4413      	add	r3, r2
 800aebc:	6859      	ldr	r1, [r3, #4]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4613      	mov	r3, r2
 800aec2:	00db      	lsls	r3, r3, #3
 800aec4:	1a9b      	subs	r3, r3, r2
 800aec6:	18c8      	adds	r0, r1, r3
 800aec8:	4947      	ldr	r1, [pc, #284]	; (800afe8 <mixerInit+0x250>)
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	1a9b      	subs	r3, r3, r2
 800aed2:	440b      	add	r3, r1
 800aed4:	4602      	mov	r2, r0
 800aed6:	6811      	ldr	r1, [r2, #0]
 800aed8:	6019      	str	r1, [r3, #0]
 800aeda:	8891      	ldrh	r1, [r2, #4]
 800aedc:	7992      	ldrb	r2, [r2, #6]
 800aede:	8099      	strh	r1, [r3, #4]
 800aee0:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3301      	adds	r3, #1
 800aee6:	607b      	str	r3, [r7, #4]
 800aee8:	4b3e      	ldr	r3, [pc, #248]	; (800afe4 <mixerInit+0x24c>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	dbde      	blt.n	800aeb2 <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800aef4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800aef8:	f7fc f874 	bl	8006fe4 <feature>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d045      	beq.n	800af8e <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800af02:	4b36      	ldr	r3, [pc, #216]	; (800afdc <mixerInit+0x244>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d941      	bls.n	800af8e <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800af0a:	2300      	movs	r3, #0
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	e038      	b.n	800af82 <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800af10:	4a31      	ldr	r2, [pc, #196]	; (800afd8 <mixerInit+0x240>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	011b      	lsls	r3, r3, #4
 800af16:	4413      	add	r3, r2
 800af18:	3308      	adds	r3, #8
 800af1a:	edd3 7a00 	vldr	s15, [r3]
 800af1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af26:	4a2c      	ldr	r2, [pc, #176]	; (800afd8 <mixerInit+0x240>)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	4413      	add	r3, r2
 800af2e:	3308      	adds	r3, #8
 800af30:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800af34:	4a28      	ldr	r2, [pc, #160]	; (800afd8 <mixerInit+0x240>)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	011b      	lsls	r3, r3, #4
 800af3a:	4413      	add	r3, r2
 800af3c:	3304      	adds	r3, #4
 800af3e:	edd3 7a00 	vldr	s15, [r3]
 800af42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af4a:	4a23      	ldr	r2, [pc, #140]	; (800afd8 <mixerInit+0x240>)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	011b      	lsls	r3, r3, #4
 800af50:	4413      	add	r3, r2
 800af52:	3304      	adds	r3, #4
 800af54:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800af58:	4a1f      	ldr	r2, [pc, #124]	; (800afd8 <mixerInit+0x240>)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	4413      	add	r3, r2
 800af60:	330c      	adds	r3, #12
 800af62:	edd3 7a00 	vldr	s15, [r3]
 800af66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af6e:	4a1a      	ldr	r2, [pc, #104]	; (800afd8 <mixerInit+0x240>)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	4413      	add	r3, r2
 800af76:	330c      	adds	r3, #12
 800af78:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3301      	adds	r3, #1
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	4b16      	ldr	r3, [pc, #88]	; (800afdc <mixerInit+0x244>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4293      	cmp	r3, r2
 800af8c:	dbc0      	blt.n	800af10 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <mixerInit+0x234>)
 800af90:	795b      	ldrb	r3, [r3, #5]
 800af92:	2b08      	cmp	r3, #8
 800af94:	d007      	beq.n	800afa6 <mixerInit+0x20e>
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <mixerInit+0x234>)
 800af98:	795b      	ldrb	r3, [r3, #5]
 800af9a:	2b0e      	cmp	r3, #14
 800af9c:	d003      	beq.n	800afa6 <mixerInit+0x20e>
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <mixerInit+0x234>)
 800afa0:	795b      	ldrb	r3, [r3, #5]
 800afa2:	2b18      	cmp	r3, #24
 800afa4:	d109      	bne.n	800afba <mixerInit+0x222>
        f.FIXED_WING = 1;
 800afa6:	4b11      	ldr	r3, [pc, #68]	; (800afec <mixerInit+0x254>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afac:	4b07      	ldr	r3, [pc, #28]	; (800afcc <mixerInit+0x234>)
 800afae:	795b      	ldrb	r3, [r3, #5]
 800afb0:	2b18      	cmp	r3, #24
 800afb2:	d105      	bne.n	800afc0 <mixerInit+0x228>
            loadCustomServoMixer();
 800afb4:	f7ff feaa 	bl	800ad0c <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afb8:	e002      	b.n	800afc0 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800afba:	4b0c      	ldr	r3, [pc, #48]	; (800afec <mixerInit+0x254>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800afc0:	f000 f816 	bl	800aff0 <mixerResetMotors>
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	200019c8 	.word	0x200019c8
 800afd0:	08027b90 	.word	0x08027b90
 800afd4:	20001640 	.word	0x20001640
 800afd8:	20000d2c 	.word	0x20000d2c
 800afdc:	20000d28 	.word	0x20000d28
 800afe0:	08027cfc 	.word	0x08027cfc
 800afe4:	20000d29 	.word	0x20000d29
 800afe8:	20000dec 	.word	0x20000dec
 800afec:	20002014 	.word	0x20002014

0800aff0 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
 800affa:	e016      	b.n	800b02a <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800affc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b000:	f7fb fff0 	bl	8006fe4 <feature>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <mixerResetMotors+0x24>
 800b00a:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <mixerResetMotors+0x4c>)
 800b00c:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b010:	b21b      	sxth	r3, r3
 800b012:	e003      	b.n	800b01c <mixerResetMotors+0x2c>
 800b014:	4b09      	ldr	r3, [pc, #36]	; (800b03c <mixerResetMotors+0x4c>)
 800b016:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b01a:	b21b      	sxth	r3, r3
 800b01c:	4908      	ldr	r1, [pc, #32]	; (800b040 <mixerResetMotors+0x50>)
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3301      	adds	r3, #1
 800b028:	607b      	str	r3, [r7, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b0b      	cmp	r3, #11
 800b02e:	dde5      	ble.n	800affc <mixerResetMotors+0xc>
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200019c8 	.word	0x200019c8
 800b040:	20001fd8 	.word	0x20001fd8

0800b044 <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3301      	adds	r3, #1
 800b050:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	e038      	b.n	800b0ca <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b058:	4934      	ldr	r1, [pc, #208]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	440b      	add	r3, r1
 800b064:	33d6      	adds	r3, #214	; 0xd6
 800b066:	2200      	movs	r2, #0
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	4930      	ldr	r1, [pc, #192]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4613      	mov	r3, r2
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	1a9b      	subs	r3, r3, r2
 800b074:	440b      	add	r3, r1
 800b076:	33d2      	adds	r3, #210	; 0xd2
 800b078:	2200      	movs	r2, #0
 800b07a:	701a      	strb	r2, [r3, #0]
 800b07c:	492b      	ldr	r1, [pc, #172]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	4613      	mov	r3, r2
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	440b      	add	r3, r1
 800b088:	33d2      	adds	r3, #210	; 0xd2
 800b08a:	f993 3000 	ldrsb.w	r3, [r3]
 800b08e:	b2d8      	uxtb	r0, r3
 800b090:	4926      	ldr	r1, [pc, #152]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	1a9b      	subs	r3, r3, r2
 800b09a:	440b      	add	r3, r1
 800b09c:	33d1      	adds	r3, #209	; 0xd1
 800b09e:	4602      	mov	r2, r0
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	4922      	ldr	r1, [pc, #136]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	33d1      	adds	r3, #209	; 0xd1
 800b0b0:	7818      	ldrb	r0, [r3, #0]
 800b0b2:	491e      	ldr	r1, [pc, #120]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	440b      	add	r3, r1
 800b0be:	33d0      	adds	r3, #208	; 0xd0
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b0f      	cmp	r3, #15
 800b0ce:	ddc3      	ble.n	800b058 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	e01a      	b.n	800b10c <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b0d6:	4a16      	ldr	r2, [pc, #88]	; (800b130 <servoMixerLoadMix+0xec>)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	4413      	add	r3, r2
 800b0de:	6859      	ldr	r1, [r3, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	1a9b      	subs	r3, r3, r2
 800b0e8:	18c8      	adds	r0, r1, r3
 800b0ea:	4910      	ldr	r1, [pc, #64]	; (800b12c <servoMixerLoadMix+0xe8>)
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	33d0      	adds	r3, #208	; 0xd0
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	6811      	ldr	r1, [r2, #0]
 800b0fc:	6019      	str	r1, [r3, #0]
 800b0fe:	8891      	ldrh	r1, [r2, #4]
 800b100:	7992      	ldrb	r2, [r2, #6]
 800b102:	8099      	strh	r1, [r3, #4]
 800b104:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	4a08      	ldr	r2, [pc, #32]	; (800b130 <servoMixerLoadMix+0xec>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b114:	461a      	mov	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	4293      	cmp	r3, r2
 800b11a:	dbdc      	blt.n	800b0d6 <servoMixerLoadMix+0x92>
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	200019c8 	.word	0x200019c8
 800b130:	08027cfc 	.word	0x08027cfc

0800b134 <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b134:	b490      	push	{r4, r7}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3301      	adds	r3, #1
 800b140:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	e00a      	b.n	800b15e <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b148:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <mixerLoadMix+0x88>)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	011b      	lsls	r3, r3, #4
 800b150:	4413      	add	r3, r2
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b0b      	cmp	r3, #11
 800b162:	ddf1      	ble.n	800b148 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b164:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <mixerLoadMix+0x8c>)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	4413      	add	r3, r2
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01f      	beq.n	800b1b2 <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	e014      	b.n	800b1a2 <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b178:	4a11      	ldr	r2, [pc, #68]	; (800b1c0 <mixerLoadMix+0x8c>)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	4413      	add	r3, r2
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	011b      	lsls	r3, r3, #4
 800b186:	18d1      	adds	r1, r2, r3
 800b188:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <mixerLoadMix+0x88>)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	4413      	add	r3, r2
 800b192:	461c      	mov	r4, r3
 800b194:	460b      	mov	r3, r1
 800b196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	4a07      	ldr	r2, [pc, #28]	; (800b1c0 <mixerLoadMix+0x8c>)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	dbe2      	blt.n	800b178 <mixerLoadMix+0x44>
    }
}
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc90      	pop	{r4, r7}
 800b1ba:	4770      	bx	lr
 800b1bc:	200019c8 	.word	0x200019c8
 800b1c0:	08027b90 	.word	0x08027b90

0800b1c4 <writeServos>:

void writeServos(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b1c8:	4b95      	ldr	r3, [pc, #596]	; (800b420 <writeServos+0x25c>)
 800b1ca:	7d5b      	ldrb	r3, [r3, #21]
 800b1cc:	f083 0301 	eor.w	r3, r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f040 811d 	bne.w	800b412 <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b1d8:	4b92      	ldr	r3, [pc, #584]	; (800b424 <writeServos+0x260>)
 800b1da:	795b      	ldrb	r3, [r3, #5]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	2b17      	cmp	r3, #23
 800b1e0:	f200 8100 	bhi.w	800b3e4 <writeServos+0x220>
 800b1e4:	a201      	add	r2, pc, #4	; (adr r2, 800b1ec <writeServos+0x28>)
 800b1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b26f 	.word	0x0800b26f
 800b1f0:	0800b3e5 	.word	0x0800b3e5
 800b1f4:	0800b3e5 	.word	0x0800b3e5
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b2af 	.word	0x0800b2af
 800b200:	0800b3e5 	.word	0x0800b3e5
 800b204:	0800b3e5 	.word	0x0800b3e5
 800b208:	0800b2f3 	.word	0x0800b2f3
 800b20c:	0800b3e5 	.word	0x0800b3e5
 800b210:	0800b3e5 	.word	0x0800b3e5
 800b214:	0800b3e5 	.word	0x0800b3e5
 800b218:	0800b3e5 	.word	0x0800b3e5
 800b21c:	0800b3e5 	.word	0x0800b3e5
 800b220:	0800b315 	.word	0x0800b315
 800b224:	0800b3e5 	.word	0x0800b3e5
 800b228:	0800b3e5 	.word	0x0800b3e5
 800b22c:	0800b3e5 	.word	0x0800b3e5
 800b230:	0800b3e5 	.word	0x0800b3e5
 800b234:	0800b3e5 	.word	0x0800b3e5
 800b238:	0800b2d1 	.word	0x0800b2d1
 800b23c:	0800b315 	.word	0x0800b315
 800b240:	0800b3e5 	.word	0x0800b3e5
 800b244:	0800b3e5 	.word	0x0800b3e5
 800b248:	0800b357 	.word	0x0800b357
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b24c:	4b76      	ldr	r3, [pc, #472]	; (800b428 <writeServos+0x264>)
 800b24e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b252:	b29b      	uxth	r3, r3
 800b254:	4619      	mov	r1, r3
 800b256:	2000      	movs	r0, #0
 800b258:	f7f6 fe5c 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b25c:	4b72      	ldr	r3, [pc, #456]	; (800b428 <writeServos+0x264>)
 800b25e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b262:	b29b      	uxth	r3, r3
 800b264:	4619      	mov	r1, r3
 800b266:	2001      	movs	r0, #1
 800b268:	f7f6 fe54 	bl	8001f14 <actPwmWriteServo>
            break;
 800b26c:	e0d6      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b26e:	4b6f      	ldr	r3, [pc, #444]	; (800b42c <writeServos+0x268>)
 800b270:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b278:	4b6b      	ldr	r3, [pc, #428]	; (800b428 <writeServos+0x264>)
 800b27a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	2000      	movs	r0, #0
 800b284:	f7f6 fe46 	bl	8001f14 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b288:	e0c8      	b.n	800b41c <writeServos+0x258>
                if (f.ARMED)
 800b28a:	4b69      	ldr	r3, [pc, #420]	; (800b430 <writeServos+0x26c>)
 800b28c:	785b      	ldrb	r3, [r3, #1]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d008      	beq.n	800b2a4 <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b292:	4b65      	ldr	r3, [pc, #404]	; (800b428 <writeServos+0x264>)
 800b294:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	2000      	movs	r0, #0
 800b29e:	f7f6 fe39 	bl	8001f14 <actPwmWriteServo>
            break;
 800b2a2:	e0bb      	b.n	800b41c <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f7f6 fe34 	bl	8001f14 <actPwmWriteServo>
            break;
 800b2ac:	e0b6      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b2ae:	4b5e      	ldr	r3, [pc, #376]	; (800b428 <writeServos+0x264>)
 800b2b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	f7f6 fe2b 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b2be:	4b5a      	ldr	r3, [pc, #360]	; (800b428 <writeServos+0x264>)
 800b2c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f7f6 fe23 	bl	8001f14 <actPwmWriteServo>
            break;
 800b2ce:	e0a5      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b2d0:	4b55      	ldr	r3, [pc, #340]	; (800b428 <writeServos+0x264>)
 800b2d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	2000      	movs	r0, #0
 800b2dc:	f7f6 fe1a 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b2e0:	4b51      	ldr	r3, [pc, #324]	; (800b428 <writeServos+0x264>)
 800b2e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	f7f6 fe12 	bl	8001f14 <actPwmWriteServo>
            break;
 800b2f0:	e094      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b2f2:	4b4d      	ldr	r3, [pc, #308]	; (800b428 <writeServos+0x264>)
 800b2f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	f7f6 fe09 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b302:	4b49      	ldr	r3, [pc, #292]	; (800b428 <writeServos+0x264>)
 800b304:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	4619      	mov	r1, r3
 800b30c:	2001      	movs	r0, #1
 800b30e:	f7f6 fe01 	bl	8001f14 <actPwmWriteServo>
            break;
 800b312:	e083      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b314:	4b44      	ldr	r3, [pc, #272]	; (800b428 <writeServos+0x264>)
 800b316:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	4619      	mov	r1, r3
 800b31e:	2000      	movs	r0, #0
 800b320:	f7f6 fdf8 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b324:	4b40      	ldr	r3, [pc, #256]	; (800b428 <writeServos+0x264>)
 800b326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	4619      	mov	r1, r3
 800b32e:	2001      	movs	r0, #1
 800b330:	f7f6 fdf0 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b334:	4b3c      	ldr	r3, [pc, #240]	; (800b428 <writeServos+0x264>)
 800b336:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	4619      	mov	r1, r3
 800b33e:	2002      	movs	r0, #2
 800b340:	f7f6 fde8 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b344:	4b38      	ldr	r3, [pc, #224]	; (800b428 <writeServos+0x264>)
 800b346:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	2003      	movs	r0, #3
 800b350:	f7f6 fde0 	bl	8001f14 <actPwmWriteServo>
            break;
 800b354:	e062      	b.n	800b41c <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b356:	4b34      	ldr	r3, [pc, #208]	; (800b428 <writeServos+0x264>)
 800b358:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4619      	mov	r1, r3
 800b360:	2000      	movs	r0, #0
 800b362:	f7f6 fdd7 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b366:	4b30      	ldr	r3, [pc, #192]	; (800b428 <writeServos+0x264>)
 800b368:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	4619      	mov	r1, r3
 800b370:	2001      	movs	r0, #1
 800b372:	f7f6 fdcf 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b376:	4b2c      	ldr	r3, [pc, #176]	; (800b428 <writeServos+0x264>)
 800b378:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	4619      	mov	r1, r3
 800b380:	2002      	movs	r0, #2
 800b382:	f7f6 fdc7 	bl	8001f14 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b386:	4b28      	ldr	r3, [pc, #160]	; (800b428 <writeServos+0x264>)
 800b388:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	4619      	mov	r1, r3
 800b390:	2003      	movs	r0, #3
 800b392:	f7f6 fdbf 	bl	8001f14 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b396:	2001      	movs	r0, #1
 800b398:	f7fb fe24 	bl	8006fe4 <feature>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d039      	beq.n	800b416 <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b3a2:	4b21      	ldr	r3, [pc, #132]	; (800b428 <writeServos+0x264>)
 800b3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	2004      	movs	r0, #4
 800b3ae:	f7f6 fdb1 	bl	8001f14 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <writeServos+0x264>)
 800b3b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	2005      	movs	r0, #5
 800b3be:	f7f6 fda9 	bl	8001f14 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b3c2:	4b19      	ldr	r3, [pc, #100]	; (800b428 <writeServos+0x264>)
 800b3c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	2006      	movs	r0, #6
 800b3ce:	f7f6 fda1 	bl	8001f14 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b3d2:	4b15      	ldr	r3, [pc, #84]	; (800b428 <writeServos+0x264>)
 800b3d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4619      	mov	r1, r3
 800b3dc:	2007      	movs	r0, #7
 800b3de:	f7f6 fd99 	bl	8001f14 <actPwmWriteServo>
            }
            break;
 800b3e2:	e018      	b.n	800b416 <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b3e4:	2020      	movs	r0, #32
 800b3e6:	f7fb fdfd 	bl	8006fe4 <feature>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d014      	beq.n	800b41a <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <writeServos+0x264>)
 800b3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f7f6 fd8a 	bl	8001f14 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b400:	4b09      	ldr	r3, [pc, #36]	; (800b428 <writeServos+0x264>)
 800b402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b406:	b29b      	uxth	r3, r3
 800b408:	4619      	mov	r1, r3
 800b40a:	2001      	movs	r0, #1
 800b40c:	f7f6 fd82 	bl	8001f14 <actPwmWriteServo>
            }
            break;
 800b410:	e003      	b.n	800b41a <writeServos+0x256>
        return;
 800b412:	bf00      	nop
 800b414:	e002      	b.n	800b41c <writeServos+0x258>
            break;
 800b416:	bf00      	nop
 800b418:	e000      	b.n	800b41c <writeServos+0x258>
            break;
 800b41a:	bf00      	nop
    }
}
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20001640 	.word	0x20001640
 800b424:	200019c8 	.word	0x200019c8
 800b428:	20000040 	.word	0x20000040
 800b42c:	20001890 	.word	0x20001890
 800b430:	20002014 	.word	0x20002014

0800b434 <writeMotors>:

void writeMotors(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b43a:	2300      	movs	r3, #0
 800b43c:	71fb      	strb	r3, [r7, #7]
 800b43e:	e00c      	b.n	800b45a <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	4a0b      	ldr	r2, [pc, #44]	; (800b470 <writeMotors+0x3c>)
 800b444:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b448:	b29a      	uxth	r2, r3
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f6 fd44 	bl	8001edc <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	3301      	adds	r3, #1
 800b458:	71fb      	strb	r3, [r7, #7]
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <writeMotors+0x40>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	79fa      	ldrb	r2, [r7, #7]
 800b460:	429a      	cmp	r2, r3
 800b462:	d3ed      	bcc.n	800b440 <writeMotors+0xc>
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20001fc0 	.word	0x20001fc0
 800b474:	20000d28 	.word	0x20000d28

0800b478 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b08b      	sub	sp, #44	; 0x2c
 800b47c:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b47e:	4bb0      	ldr	r3, [pc, #704]	; (800b740 <servoMixer+0x2c8>)
 800b480:	7a9b      	ldrb	r3, [r3, #10]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00c      	beq.n	800b4a0 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b486:	4baf      	ldr	r3, [pc, #700]	; (800b744 <servoMixer+0x2cc>)
 800b488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b48c:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b48e:	4bad      	ldr	r3, [pc, #692]	; (800b744 <servoMixer+0x2cc>)
 800b490:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b494:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b496:	4bab      	ldr	r3, [pc, #684]	; (800b744 <servoMixer+0x2cc>)
 800b498:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b49c:	813b      	strh	r3, [r7, #8]
 800b49e:	e00b      	b.n	800b4b8 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b4a0:	4ba9      	ldr	r3, [pc, #676]	; (800b748 <servoMixer+0x2d0>)
 800b4a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4a6:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b4a8:	4ba7      	ldr	r3, [pc, #668]	; (800b748 <servoMixer+0x2d0>)
 800b4aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4ae:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b4b0:	4ba5      	ldr	r3, [pc, #660]	; (800b748 <servoMixer+0x2d0>)
 800b4b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4b6:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b4b8:	4ba4      	ldr	r3, [pc, #656]	; (800b74c <servoMixer+0x2d4>)
 800b4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4be:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b4c0:	4ba3      	ldr	r3, [pc, #652]	; (800b750 <servoMixer+0x2d8>)
 800b4c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	4ba2      	ldr	r3, [pc, #648]	; (800b754 <servoMixer+0x2dc>)
 800b4ca:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b4d6:	4b9e      	ldr	r3, [pc, #632]	; (800b750 <servoMixer+0x2d8>)
 800b4d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	4b9d      	ldr	r3, [pc, #628]	; (800b754 <servoMixer+0x2dc>)
 800b4e0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	b21b      	sxth	r3, r3
 800b4ea:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b4ec:	4b98      	ldr	r3, [pc, #608]	; (800b750 <servoMixer+0x2d8>)
 800b4ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	4b97      	ldr	r3, [pc, #604]	; (800b754 <servoMixer+0x2dc>)
 800b4f6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	b21b      	sxth	r3, r3
 800b500:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b502:	4b93      	ldr	r3, [pc, #588]	; (800b750 <servoMixer+0x2d8>)
 800b504:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	4b92      	ldr	r3, [pc, #584]	; (800b754 <servoMixer+0x2dc>)
 800b50c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	b29b      	uxth	r3, r3
 800b514:	b21b      	sxth	r3, r3
 800b516:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b518:	4b8d      	ldr	r3, [pc, #564]	; (800b750 <servoMixer+0x2d8>)
 800b51a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	4b8c      	ldr	r3, [pc, #560]	; (800b754 <servoMixer+0x2dc>)
 800b522:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	b29b      	uxth	r3, r3
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b52e:	4b88      	ldr	r3, [pc, #544]	; (800b750 <servoMixer+0x2d8>)
 800b530:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b534:	b29a      	uxth	r2, r3
 800b536:	4b87      	ldr	r3, [pc, #540]	; (800b754 <servoMixer+0x2dc>)
 800b538:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	b29b      	uxth	r3, r3
 800b540:	b21b      	sxth	r3, r3
 800b542:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b544:	4b82      	ldr	r3, [pc, #520]	; (800b750 <servoMixer+0x2d8>)
 800b546:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	4b81      	ldr	r3, [pc, #516]	; (800b754 <servoMixer+0x2dc>)
 800b54e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	b29b      	uxth	r3, r3
 800b556:	b21b      	sxth	r3, r3
 800b558:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b55a:	4b7d      	ldr	r3, [pc, #500]	; (800b750 <servoMixer+0x2d8>)
 800b55c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b560:	b29a      	uxth	r2, r3
 800b562:	4b7c      	ldr	r3, [pc, #496]	; (800b754 <servoMixer+0x2dc>)
 800b564:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	b21b      	sxth	r3, r3
 800b56e:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b576:	e00a      	b.n	800b58e <servoMixer+0x116>
        servo[i] = 0;
 800b578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b57c:	4a76      	ldr	r2, [pc, #472]	; (800b758 <servoMixer+0x2e0>)
 800b57e:	2100      	movs	r1, #0
 800b580:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b588:	3301      	adds	r3, #1
 800b58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b592:	2b07      	cmp	r3, #7
 800b594:	d9f0      	bls.n	800b578 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b596:	2300      	movs	r3, #0
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b59c:	e165      	b.n	800b86a <servoMixer+0x3f2>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b59e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5a2:	496e      	ldr	r1, [pc, #440]	; (800b75c <servoMixer+0x2e4>)
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3306      	adds	r3, #6
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00e      	beq.n	800b5d2 <servoMixer+0x15a>
 800b5b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5b8:	4968      	ldr	r1, [pc, #416]	; (800b75c <servoMixer+0x2e4>)
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	00db      	lsls	r3, r3, #3
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	3306      	adds	r3, #6
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	3314      	adds	r3, #20
 800b5c8:	4a65      	ldr	r2, [pc, #404]	; (800b760 <servoMixer+0x2e8>)
 800b5ca:	5cd3      	ldrb	r3, [r2, r3]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8141 	beq.w	800b854 <servoMixer+0x3dc>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5d6:	4961      	ldr	r1, [pc, #388]	; (800b75c <servoMixer+0x2e4>)
 800b5d8:	4613      	mov	r3, r2
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	1a9b      	subs	r3, r3, r2
 800b5de:	440b      	add	r3, r1
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b5e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5ea:	495c      	ldr	r1, [pc, #368]	; (800b75c <servoMixer+0x2e4>)
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b5fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b600:	4958      	ldr	r1, [pc, #352]	; (800b764 <servoMixer+0x2ec>)
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	440b      	add	r3, r1
 800b60c:	33ba      	adds	r3, #186	; 0xba
 800b60e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b612:	b299      	uxth	r1, r3
 800b614:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b618:	4852      	ldr	r0, [pc, #328]	; (800b764 <servoMixer+0x2ec>)
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4403      	add	r3, r0
 800b624:	33b8      	adds	r3, #184	; 0xb8
 800b626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	1acb      	subs	r3, r1, r3
 800b62e:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b630:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b634:	4949      	ldr	r1, [pc, #292]	; (800b75c <servoMixer+0x2e4>)
 800b636:	4613      	mov	r3, r2
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	440b      	add	r3, r1
 800b63e:	3304      	adds	r3, #4
 800b640:	f993 3000 	ldrsb.w	r3, [r3]
 800b644:	461a      	mov	r2, r3
 800b646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b648:	fb03 f302 	mul.w	r3, r3, r2
 800b64c:	4a46      	ldr	r2, [pc, #280]	; (800b768 <servoMixer+0x2f0>)
 800b64e:	fb82 1203 	smull	r1, r2, r2, r3
 800b652:	1152      	asrs	r2, r2, #5
 800b654:	17db      	asrs	r3, r3, #31
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	b29a      	uxth	r2, r3
 800b65a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b65c:	085b      	lsrs	r3, r3, #1
 800b65e:	b29b      	uxth	r3, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	b29b      	uxth	r3, r3
 800b664:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b666:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b66a:	493c      	ldr	r1, [pc, #240]	; (800b75c <servoMixer+0x2e4>)
 800b66c:	4613      	mov	r3, r2
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	440b      	add	r3, r1
 800b674:	3305      	adds	r3, #5
 800b676:	f993 3000 	ldrsb.w	r3, [r3]
 800b67a:	461a      	mov	r2, r3
 800b67c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b67e:	fb03 f302 	mul.w	r3, r3, r2
 800b682:	4a39      	ldr	r2, [pc, #228]	; (800b768 <servoMixer+0x2f0>)
 800b684:	fb82 1203 	smull	r1, r2, r2, r3
 800b688:	1152      	asrs	r2, r2, #5
 800b68a:	17db      	asrs	r3, r3, #31
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	b29a      	uxth	r2, r3
 800b690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b692:	085b      	lsrs	r3, r3, #1
 800b694:	b29b      	uxth	r3, r3
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29b      	uxth	r3, r3
 800b69a:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b69c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6a0:	492e      	ldr	r1, [pc, #184]	; (800b75c <servoMixer+0x2e4>)
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	3303      	adds	r3, #3
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10d      	bne.n	800b6ce <servoMixer+0x256>
                currentOutput[i] = input[from];
 800b6b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b6c0:	440b      	add	r3, r1
 800b6c2:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b6c6:	4b29      	ldr	r3, [pc, #164]	; (800b76c <servoMixer+0x2f4>)
 800b6c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b6cc:	e087      	b.n	800b7de <servoMixer+0x366>
            else {
                if (currentOutput[i] < input[from])
 800b6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d2:	4a26      	ldr	r2, [pc, #152]	; (800b76c <servoMixer+0x2f4>)
 800b6d4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b6d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	da41      	bge.n	800b770 <servoMixer+0x2f8>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f0:	4a1e      	ldr	r2, [pc, #120]	; (800b76c <servoMixer+0x2f4>)
 800b6f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6fc:	4917      	ldr	r1, [pc, #92]	; (800b75c <servoMixer+0x2e4>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	440b      	add	r3, r1
 800b706:	3303      	adds	r3, #3
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4418      	add	r0, r3
 800b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b710:	4a16      	ldr	r2, [pc, #88]	; (800b76c <servoMixer+0x2f4>)
 800b712:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b716:	4619      	mov	r1, r3
 800b718:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b722:	4413      	add	r3, r2
 800b724:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b728:	461a      	mov	r2, r3
 800b72a:	f7f8 fad9 	bl	8003ce0 <constrain>
 800b72e:	4602      	mov	r2, r0
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b734:	b211      	sxth	r1, r2
 800b736:	4a0d      	ldr	r2, [pc, #52]	; (800b76c <servoMixer+0x2f4>)
 800b738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b73c:	e04f      	b.n	800b7de <servoMixer+0x366>
 800b73e:	bf00      	nop
 800b740:	20002014 	.word	0x20002014
 800b744:	200020b0 	.word	0x200020b0
 800b748:	200020c4 	.word	0x200020c4
 800b74c:	20001fc0 	.word	0x20001fc0
 800b750:	20002184 	.word	0x20002184
 800b754:	200019c8 	.word	0x200019c8
 800b758:	20000040 	.word	0x20000040
 800b75c:	20000dec 	.word	0x20000dec
 800b760:	200020dc 	.word	0x200020dc
 800b764:	20001890 	.word	0x20001890
 800b768:	51eb851f 	.word	0x51eb851f
 800b76c:	20000e5c 	.word	0x20000e5c
                else if (currentOutput[i] > input[from])
 800b770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b774:	4a64      	ldr	r2, [pc, #400]	; (800b908 <servoMixer+0x490>)
 800b776:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b77a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b784:	440b      	add	r3, r1
 800b786:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	dd27      	ble.n	800b7de <servoMixer+0x366>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b78e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b792:	4a5d      	ldr	r2, [pc, #372]	; (800b908 <servoMixer+0x490>)
 800b794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b798:	4618      	mov	r0, r3
 800b79a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b79e:	495b      	ldr	r1, [pc, #364]	; (800b90c <servoMixer+0x494>)
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3303      	adds	r3, #3
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	1ac0      	subs	r0, r0, r3
 800b7ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c4:	4a50      	ldr	r2, [pc, #320]	; (800b908 <servoMixer+0x490>)
 800b7c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f7f8 fa88 	bl	8003ce0 <constrain>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d6:	b211      	sxth	r1, r2
 800b7d8:	4a4b      	ldr	r2, [pc, #300]	; (800b908 <servoMixer+0x490>)
 800b7da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b7de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7e2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fa6d 	bl	800acc8 <servoDirection>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f4:	4a44      	ldr	r2, [pc, #272]	; (800b908 <servoMixer+0x490>)
 800b7f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b800:	4942      	ldr	r1, [pc, #264]	; (800b90c <servoMixer+0x494>)
 800b802:	4613      	mov	r3, r2
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	440b      	add	r3, r1
 800b80a:	3302      	adds	r3, #2
 800b80c:	f993 3000 	ldrsb.w	r3, [r3]
 800b810:	fb03 f300 	mul.w	r3, r3, r0
 800b814:	4a3e      	ldr	r2, [pc, #248]	; (800b910 <servoMixer+0x498>)
 800b816:	fb82 1203 	smull	r1, r2, r2, r3
 800b81a:	1152      	asrs	r2, r2, #5
 800b81c:	17db      	asrs	r3, r3, #31
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b824:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f8 fa59 	bl	8003ce0 <constrain>
 800b82e:	4603      	mov	r3, r0
 800b830:	fb03 f104 	mul.w	r1, r3, r4
 800b834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b838:	4a36      	ldr	r2, [pc, #216]	; (800b914 <servoMixer+0x49c>)
 800b83a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b83e:	b29a      	uxth	r2, r3
 800b840:	b28b      	uxth	r3, r1
 800b842:	4413      	add	r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b84a:	b211      	sxth	r1, r2
 800b84c:	4a31      	ldr	r2, [pc, #196]	; (800b914 <servoMixer+0x49c>)
 800b84e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b852:	e005      	b.n	800b860 <servoMixer+0x3e8>
        } else
            currentOutput[i] = 0;
 800b854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b858:	4a2b      	ldr	r2, [pc, #172]	; (800b908 <servoMixer+0x490>)
 800b85a:	2100      	movs	r1, #0
 800b85c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b864:	3301      	adds	r3, #1
 800b866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b86a:	4b2b      	ldr	r3, [pc, #172]	; (800b918 <servoMixer+0x4a0>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b872:	429a      	cmp	r2, r3
 800b874:	f4ff ae93 	bcc.w	800b59e <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b878:	2300      	movs	r3, #0
 800b87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b87e:	e039      	b.n	800b8f4 <servoMixer+0x47c>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b884:	4925      	ldr	r1, [pc, #148]	; (800b91c <servoMixer+0x4a4>)
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	440b      	add	r3, r1
 800b890:	33be      	adds	r3, #190	; 0xbe
 800b892:	f993 3000 	ldrsb.w	r3, [r3]
 800b896:	4619      	mov	r1, r3
 800b898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b89c:	4a1d      	ldr	r2, [pc, #116]	; (800b914 <servoMixer+0x49c>)
 800b89e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8a2:	fb03 f301 	mul.w	r3, r3, r1
 800b8a6:	4a1a      	ldr	r2, [pc, #104]	; (800b910 <servoMixer+0x498>)
 800b8a8:	fb82 1203 	smull	r1, r2, r2, r3
 800b8ac:	1152      	asrs	r2, r2, #5
 800b8ae:	17db      	asrs	r3, r3, #31
 800b8b0:	1ad2      	subs	r2, r2, r3
 800b8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b6:	b211      	sxth	r1, r2
 800b8b8:	4a16      	ldr	r2, [pc, #88]	; (800b914 <servoMixer+0x49c>)
 800b8ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b8be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff f9ca 	bl	800ac5c <servoMiddle>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d0:	4a10      	ldr	r2, [pc, #64]	; (800b914 <servoMixer+0x49c>)
 800b8d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	b28b      	uxth	r3, r1
 800b8da:	4413      	add	r3, r2
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e2:	b211      	sxth	r1, r2
 800b8e4:	4a0b      	ldr	r2, [pc, #44]	; (800b914 <servoMixer+0x49c>)
 800b8e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f8:	2b07      	cmp	r3, #7
 800b8fa:	d9c1      	bls.n	800b880 <servoMixer+0x408>
    }
}
 800b8fc:	bf00      	nop
 800b8fe:	bf00      	nop
 800b900:	372c      	adds	r7, #44	; 0x2c
 800b902:	46bd      	mov	sp, r7
 800b904:	bd90      	pop	{r4, r7, pc}
 800b906:	bf00      	nop
 800b908:	20000e5c 	.word	0x20000e5c
 800b90c:	20000dec 	.word	0x20000dec
 800b910:	51eb851f 	.word	0x51eb851f
 800b914:	20000040 	.word	0x20000040
 800b918:	20000d29 	.word	0x20000d29
 800b91c:	20001890 	.word	0x20001890

0800b920 <mixTable>:

void mixTable(void)
{
 800b920:	b590      	push	{r4, r7, lr}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b926:	4b7e      	ldr	r3, [pc, #504]	; (800bb20 <mixTable+0x200>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d91d      	bls.n	800b96a <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b92e:	4b7d      	ldr	r3, [pc, #500]	; (800bb24 <mixTable+0x204>)
 800b930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b934:	4618      	mov	r0, r3
 800b936:	4b7c      	ldr	r3, [pc, #496]	; (800bb28 <mixTable+0x208>)
 800b938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfb8      	it	lt
 800b940:	425b      	neglt	r3, r3
 800b942:	b29b      	uxth	r3, r3
 800b944:	461a      	mov	r2, r3
 800b946:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b94a:	1a9b      	subs	r3, r3, r2
 800b94c:	4a76      	ldr	r2, [pc, #472]	; (800bb28 <mixTable+0x208>)
 800b94e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b952:	2a00      	cmp	r2, #0
 800b954:	bfb8      	it	lt
 800b956:	4252      	neglt	r2, r2
 800b958:	b292      	uxth	r2, r2
 800b95a:	3264      	adds	r2, #100	; 0x64
 800b95c:	4619      	mov	r1, r3
 800b95e:	f7f8 f9bf 	bl	8003ce0 <constrain>
 800b962:	4603      	mov	r3, r0
 800b964:	b21a      	sxth	r2, r3
 800b966:	4b6f      	ldr	r3, [pc, #444]	; (800bb24 <mixTable+0x204>)
 800b968:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b96a:	4b6d      	ldr	r3, [pc, #436]	; (800bb20 <mixTable+0x200>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	f240 809a 	bls.w	800baa8 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b974:	2300      	movs	r3, #0
 800b976:	60bb      	str	r3, [r7, #8]
 800b978:	e08f      	b.n	800ba9a <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b97a:	4b6b      	ldr	r3, [pc, #428]	; (800bb28 <mixTable+0x208>)
 800b97c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b988:	4a68      	ldr	r2, [pc, #416]	; (800bb2c <mixTable+0x20c>)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	4413      	add	r3, r2
 800b990:	edd3 7a00 	vldr	s15, [r3]
 800b994:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b998:	4b62      	ldr	r3, [pc, #392]	; (800bb24 <mixTable+0x204>)
 800b99a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b99e:	ee07 3a90 	vmov	s15, r3
 800b9a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9a6:	4a61      	ldr	r2, [pc, #388]	; (800bb2c <mixTable+0x20c>)
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	4413      	add	r3, r2
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	edd3 7a00 	vldr	s15, [r3]
 800b9b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9bc:	4b59      	ldr	r3, [pc, #356]	; (800bb24 <mixTable+0x204>)
 800b9be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c2:	ee07 3a90 	vmov	s15, r3
 800b9c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9ca:	4a58      	ldr	r2, [pc, #352]	; (800bb2c <mixTable+0x20c>)
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	011b      	lsls	r3, r3, #4
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	edd3 7a00 	vldr	s15, [r3]
 800b9d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9e0:	4b53      	ldr	r3, [pc, #332]	; (800bb30 <mixTable+0x210>)
 800b9e2:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b9e6:	425b      	negs	r3, r3
 800b9e8:	4a4e      	ldr	r2, [pc, #312]	; (800bb24 <mixTable+0x204>)
 800b9ea:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b9ee:	fb02 f303 	mul.w	r3, r2, r3
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9fa:	4a4c      	ldr	r2, [pc, #304]	; (800bb2c <mixTable+0x20c>)
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	4413      	add	r3, r2
 800ba02:	330c      	adds	r3, #12
 800ba04:	edd3 7a00 	vldr	s15, [r3]
 800ba08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba14:	ee17 3a90 	vmov	r3, s15
 800ba18:	b219      	sxth	r1, r3
 800ba1a:	4a46      	ldr	r2, [pc, #280]	; (800bb34 <mixTable+0x214>)
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800ba22:	4b45      	ldr	r3, [pc, #276]	; (800bb38 <mixTable+0x218>)
 800ba24:	7c1b      	ldrb	r3, [r3, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d034      	beq.n	800ba94 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800ba2a:	4b41      	ldr	r3, [pc, #260]	; (800bb30 <mixTable+0x210>)
 800ba2c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d028      	beq.n	800ba86 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800ba34:	4b40      	ldr	r3, [pc, #256]	; (800bb38 <mixTable+0x218>)
 800ba36:	7a9b      	ldrb	r3, [r3, #10]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d02b      	beq.n	800ba94 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800ba3c:	4b3a      	ldr	r3, [pc, #232]	; (800bb28 <mixTable+0x208>)
 800ba3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba4a:	4b37      	ldr	r3, [pc, #220]	; (800bb28 <mixTable+0x208>)
 800ba4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ba66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ba6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba76:	ee17 3a90 	vmov	r3, s15
 800ba7a:	b219      	sxth	r1, r3
 800ba7c:	4a2d      	ldr	r2, [pc, #180]	; (800bb34 <mixTable+0x214>)
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ba84:	e006      	b.n	800ba94 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800ba86:	4b28      	ldr	r3, [pc, #160]	; (800bb28 <mixTable+0x208>)
 800ba88:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800ba8c:	4a29      	ldr	r2, [pc, #164]	; (800bb34 <mixTable+0x214>)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60bb      	str	r3, [r7, #8]
 800ba9a:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <mixTable+0x200>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	f4ff af69 	bcc.w	800b97a <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800baa8:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <mixTable+0x21c>)
 800baaa:	795b      	ldrb	r3, [r3, #5]
 800baac:	3b01      	subs	r3, #1
 800baae:	2b17      	cmp	r3, #23
 800bab0:	d87b      	bhi.n	800bbaa <mixTable+0x28a>
 800bab2:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <mixTable+0x198>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bb19 	.word	0x0800bb19
 800babc:	0800bbab 	.word	0x0800bbab
 800bac0:	0800bbab 	.word	0x0800bbab
 800bac4:	0800bb19 	.word	0x0800bb19
 800bac8:	0800bb41 	.word	0x0800bb41
 800bacc:	0800bbab 	.word	0x0800bbab
 800bad0:	0800bbab 	.word	0x0800bbab
 800bad4:	0800bb19 	.word	0x0800bb19
 800bad8:	0800bbab 	.word	0x0800bbab
 800badc:	0800bbab 	.word	0x0800bbab
 800bae0:	0800bbab 	.word	0x0800bbab
 800bae4:	0800bbab 	.word	0x0800bbab
 800bae8:	0800bbab 	.word	0x0800bbab
 800baec:	0800bb19 	.word	0x0800bb19
 800baf0:	0800bbab 	.word	0x0800bbab
 800baf4:	0800bbab 	.word	0x0800bbab
 800baf8:	0800bbab 	.word	0x0800bbab
 800bafc:	0800bbab 	.word	0x0800bbab
 800bb00:	0800bbab 	.word	0x0800bbab
 800bb04:	0800bb19 	.word	0x0800bb19
 800bb08:	0800bb19 	.word	0x0800bb19
 800bb0c:	0800bbab 	.word	0x0800bbab
 800bb10:	0800bbab 	.word	0x0800bbab
 800bb14:	0800bb19 	.word	0x0800bb19
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bb18:	f7ff fcae 	bl	800b478 <servoMixer>
            break;
 800bb1c:	e045      	b.n	800bbaa <mixTable+0x28a>
 800bb1e:	bf00      	nop
 800bb20:	20000d28 	.word	0x20000d28
 800bb24:	200020c4 	.word	0x200020c4
 800bb28:	200020b0 	.word	0x200020b0
 800bb2c:	20000d2c 	.word	0x20000d2c
 800bb30:	20001890 	.word	0x20001890
 800bb34:	20001fc0 	.word	0x20001fc0
 800bb38:	20002014 	.word	0x20002014
 800bb3c:	200019c8 	.word	0x200019c8
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bb40:	4ba7      	ldr	r3, [pc, #668]	; (800bde0 <mixTable+0x4c0>)
 800bb42:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb46:	461a      	mov	r2, r3
 800bb48:	4ba6      	ldr	r3, [pc, #664]	; (800bde4 <mixTable+0x4c4>)
 800bb4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb4e:	fb03 f302 	mul.w	r3, r3, r2
 800bb52:	4aa5      	ldr	r2, [pc, #660]	; (800bde8 <mixTable+0x4c8>)
 800bb54:	fb82 1203 	smull	r1, r2, r2, r3
 800bb58:	1112      	asrs	r2, r2, #4
 800bb5a:	17db      	asrs	r3, r3, #31
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	b29c      	uxth	r4, r3
 800bb60:	2000      	movs	r0, #0
 800bb62:	f7ff f87b 	bl	800ac5c <servoMiddle>
 800bb66:	4603      	mov	r3, r0
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	4423      	add	r3, r4
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	b21a      	sxth	r2, r3
 800bb70:	4b9e      	ldr	r3, [pc, #632]	; (800bdec <mixTable+0x4cc>)
 800bb72:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bb74:	4b9a      	ldr	r3, [pc, #616]	; (800bde0 <mixTable+0x4c0>)
 800bb76:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b99      	ldr	r3, [pc, #612]	; (800bde4 <mixTable+0x4c4>)
 800bb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb82:	fb03 f302 	mul.w	r3, r3, r2
 800bb86:	4a98      	ldr	r2, [pc, #608]	; (800bde8 <mixTable+0x4c8>)
 800bb88:	fb82 1203 	smull	r1, r2, r2, r3
 800bb8c:	1112      	asrs	r2, r2, #4
 800bb8e:	17db      	asrs	r3, r3, #31
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	b29c      	uxth	r4, r3
 800bb94:	2001      	movs	r0, #1
 800bb96:	f7ff f861 	bl	800ac5c <servoMiddle>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	4423      	add	r3, r4
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	b21a      	sxth	r2, r3
 800bba4:	4b91      	ldr	r3, [pc, #580]	; (800bdec <mixTable+0x4cc>)
 800bba6:	805a      	strh	r2, [r3, #2]
            break;
 800bba8:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bbaa:	2020      	movs	r0, #32
 800bbac:	f7fb fa1a 	bl	8006fe4 <feature>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80a3 	beq.w	800bcfe <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f7ff f84f 	bl	800ac5c <servoMiddle>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	4b8a      	ldr	r3, [pc, #552]	; (800bdec <mixTable+0x4cc>)
 800bbc4:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f7ff f848 	bl	800ac5c <servoMiddle>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4b86      	ldr	r3, [pc, #536]	; (800bdec <mixTable+0x4cc>)
 800bbd2:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bbd4:	4b86      	ldr	r3, [pc, #536]	; (800bdf0 <mixTable+0x4d0>)
 800bbd6:	7a1b      	ldrb	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8090 	beq.w	800bcfe <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bbde:	4b80      	ldr	r3, [pc, #512]	; (800bde0 <mixTable+0x4c0>)
 800bbe0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d056      	beq.n	800bc9a <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bbec:	4b7f      	ldr	r3, [pc, #508]	; (800bdec <mixTable+0x4cc>)
 800bbee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	4b7a      	ldr	r3, [pc, #488]	; (800bde0 <mixTable+0x4c0>)
 800bbf6:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbfa:	425b      	negs	r3, r3
 800bbfc:	4979      	ldr	r1, [pc, #484]	; (800bde4 <mixTable+0x4c4>)
 800bbfe:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc02:	fb01 f303 	mul.w	r3, r1, r3
 800bc06:	4978      	ldr	r1, [pc, #480]	; (800bde8 <mixTable+0x4c8>)
 800bc08:	fb81 0103 	smull	r0, r1, r1, r3
 800bc0c:	1109      	asrs	r1, r1, #4
 800bc0e:	17db      	asrs	r3, r3, #31
 800bc10:	1acb      	subs	r3, r1, r3
 800bc12:	b299      	uxth	r1, r3
 800bc14:	4b72      	ldr	r3, [pc, #456]	; (800bde0 <mixTable+0x4c0>)
 800bc16:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	4b71      	ldr	r3, [pc, #452]	; (800bde4 <mixTable+0x4c4>)
 800bc1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc22:	fb03 f300 	mul.w	r3, r3, r0
 800bc26:	4870      	ldr	r0, [pc, #448]	; (800bde8 <mixTable+0x4c8>)
 800bc28:	fb80 4003 	smull	r4, r0, r0, r3
 800bc2c:	1100      	asrs	r0, r0, #4
 800bc2e:	17db      	asrs	r3, r3, #31
 800bc30:	1a1b      	subs	r3, r3, r0
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	440b      	add	r3, r1
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	b21a      	sxth	r2, r3
 800bc3e:	4b6b      	ldr	r3, [pc, #428]	; (800bdec <mixTable+0x4cc>)
 800bc40:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc42:	4b6a      	ldr	r3, [pc, #424]	; (800bdec <mixTable+0x4cc>)
 800bc44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	4b65      	ldr	r3, [pc, #404]	; (800bde0 <mixTable+0x4c0>)
 800bc4c:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc50:	425b      	negs	r3, r3
 800bc52:	4964      	ldr	r1, [pc, #400]	; (800bde4 <mixTable+0x4c4>)
 800bc54:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc58:	fb01 f303 	mul.w	r3, r1, r3
 800bc5c:	4962      	ldr	r1, [pc, #392]	; (800bde8 <mixTable+0x4c8>)
 800bc5e:	fb81 0103 	smull	r0, r1, r1, r3
 800bc62:	1109      	asrs	r1, r1, #4
 800bc64:	17db      	asrs	r3, r3, #31
 800bc66:	1acb      	subs	r3, r1, r3
 800bc68:	b299      	uxth	r1, r3
 800bc6a:	4b5d      	ldr	r3, [pc, #372]	; (800bde0 <mixTable+0x4c0>)
 800bc6c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc70:	4618      	mov	r0, r3
 800bc72:	4b5c      	ldr	r3, [pc, #368]	; (800bde4 <mixTable+0x4c4>)
 800bc74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc78:	fb03 f300 	mul.w	r3, r3, r0
 800bc7c:	485a      	ldr	r0, [pc, #360]	; (800bde8 <mixTable+0x4c8>)
 800bc7e:	fb80 4003 	smull	r4, r0, r0, r3
 800bc82:	1100      	asrs	r0, r0, #4
 800bc84:	17db      	asrs	r3, r3, #31
 800bc86:	1ac3      	subs	r3, r0, r3
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	440b      	add	r3, r1
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4413      	add	r3, r2
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	b21a      	sxth	r2, r3
 800bc94:	4b55      	ldr	r3, [pc, #340]	; (800bdec <mixTable+0x4cc>)
 800bc96:	805a      	strh	r2, [r3, #2]
 800bc98:	e031      	b.n	800bcfe <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bc9a:	4b54      	ldr	r3, [pc, #336]	; (800bdec <mixTable+0x4cc>)
 800bc9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	4b4f      	ldr	r3, [pc, #316]	; (800bde0 <mixTable+0x4c0>)
 800bca4:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4b4e      	ldr	r3, [pc, #312]	; (800bde4 <mixTable+0x4c4>)
 800bcac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcb0:	fb03 f301 	mul.w	r3, r3, r1
 800bcb4:	494c      	ldr	r1, [pc, #304]	; (800bde8 <mixTable+0x4c8>)
 800bcb6:	fb81 0103 	smull	r0, r1, r1, r3
 800bcba:	1109      	asrs	r1, r1, #4
 800bcbc:	17db      	asrs	r3, r3, #31
 800bcbe:	1acb      	subs	r3, r1, r3
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	4413      	add	r3, r2
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	b21a      	sxth	r2, r3
 800bcc8:	4b48      	ldr	r3, [pc, #288]	; (800bdec <mixTable+0x4cc>)
 800bcca:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bccc:	4b47      	ldr	r3, [pc, #284]	; (800bdec <mixTable+0x4cc>)
 800bcce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	4b42      	ldr	r3, [pc, #264]	; (800bde0 <mixTable+0x4c0>)
 800bcd6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4b41      	ldr	r3, [pc, #260]	; (800bde4 <mixTable+0x4c4>)
 800bcde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bce2:	fb03 f301 	mul.w	r3, r3, r1
 800bce6:	4940      	ldr	r1, [pc, #256]	; (800bde8 <mixTable+0x4c8>)
 800bce8:	fb81 0103 	smull	r0, r1, r1, r3
 800bcec:	1109      	asrs	r1, r1, #4
 800bcee:	17db      	asrs	r3, r3, #31
 800bcf0:	1acb      	subs	r3, r1, r3
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	b21a      	sxth	r2, r3
 800bcfa:	4b3c      	ldr	r3, [pc, #240]	; (800bdec <mixTable+0x4cc>)
 800bcfc:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
 800bd02:	e026      	b.n	800bd52 <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bd04:	4a39      	ldr	r2, [pc, #228]	; (800bdec <mixTable+0x4cc>)
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	4934      	ldr	r1, [pc, #208]	; (800bde0 <mixTable+0x4c0>)
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	440b      	add	r3, r1
 800bd1c:	33b8      	adds	r3, #184	; 0xb8
 800bd1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd22:	461c      	mov	r4, r3
 800bd24:	492e      	ldr	r1, [pc, #184]	; (800bde0 <mixTable+0x4c0>)
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	440b      	add	r3, r1
 800bd32:	33ba      	adds	r3, #186	; 0xba
 800bd34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	f7f7 ffd0 	bl	8003ce0 <constrain>
 800bd40:	4603      	mov	r3, r0
 800bd42:	b219      	sxth	r1, r3
 800bd44:	4a29      	ldr	r2, [pc, #164]	; (800bdec <mixTable+0x4cc>)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	60bb      	str	r3, [r7, #8]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b07      	cmp	r3, #7
 800bd56:	d9d5      	bls.n	800bd04 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd58:	4b21      	ldr	r3, [pc, #132]	; (800bde0 <mixTable+0x4c0>)
 800bd5a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd5e:	f003 0304 	and.w	r3, r3, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d01c      	beq.n	800bda0 <mixTable+0x480>
        int offset = core.numServos - 4;
 800bd66:	4b23      	ldr	r3, [pc, #140]	; (800bdf4 <mixTable+0x4d4>)
 800bd68:	7d9b      	ldrb	r3, [r3, #22]
 800bd6a:	3b04      	subs	r3, #4
 800bd6c:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
 800bd72:	e012      	b.n	800bd9a <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	3304      	adds	r3, #4
 800bd84:	491c      	ldr	r1, [pc, #112]	; (800bdf8 <mixTable+0x4d8>)
 800bd86:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4610      	mov	r0, r2
 800bd90:	f7f6 f8c0 	bl	8001f14 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	3301      	adds	r3, #1
 800bd98:	60bb      	str	r3, [r7, #8]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d9e9      	bls.n	800bd74 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bda0:	4b16      	ldr	r3, [pc, #88]	; (800bdfc <mixTable+0x4dc>)
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bda6:	2301      	movs	r3, #1
 800bda8:	60bb      	str	r3, [r7, #8]
 800bdaa:	e00f      	b.n	800bdcc <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bdac:	4a13      	ldr	r2, [pc, #76]	; (800bdfc <mixTable+0x4dc>)
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdb4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	da04      	bge.n	800bdc6 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bdbc:	4a0f      	ldr	r2, [pc, #60]	; (800bdfc <mixTable+0x4dc>)
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60bb      	str	r3, [r7, #8]
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <mixTable+0x4e0>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d3e9      	bcc.n	800bdac <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60bb      	str	r3, [r7, #8]
 800bddc:	e0e8      	b.n	800bfb0 <mixTable+0x690>
 800bdde:	bf00      	nop
 800bde0:	20001890 	.word	0x20001890
 800bde4:	20000cd8 	.word	0x20000cd8
 800bde8:	51eb851f 	.word	0x51eb851f
 800bdec:	20000040 	.word	0x20000040
 800bdf0:	200020dc 	.word	0x200020dc
 800bdf4:	20001640 	.word	0x20001640
 800bdf8:	20002184 	.word	0x20002184
 800bdfc:	20001fc0 	.word	0x20001fc0
 800be00:	20000d28 	.word	0x20000d28
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800be04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be08:	4a6f      	ldr	r2, [pc, #444]	; (800bfc8 <mixTable+0x6a8>)
 800be0a:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800be0e:	4293      	cmp	r3, r2
 800be10:	dd15      	ble.n	800be3e <mixTable+0x51e>
 800be12:	4b6e      	ldr	r3, [pc, #440]	; (800bfcc <mixTable+0x6ac>)
 800be14:	7c1b      	ldrb	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d111      	bne.n	800be3e <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800be1a:	4a6d      	ldr	r2, [pc, #436]	; (800bfd0 <mixTable+0x6b0>)
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be22:	b29a      	uxth	r2, r3
 800be24:	4b68      	ldr	r3, [pc, #416]	; (800bfc8 <mixTable+0x6a8>)
 800be26:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800be2a:	89fb      	ldrh	r3, [r7, #14]
 800be2c:	1acb      	subs	r3, r1, r3
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4413      	add	r3, r2
 800be32:	b29b      	uxth	r3, r3
 800be34:	b219      	sxth	r1, r3
 800be36:	4a66      	ldr	r2, [pc, #408]	; (800bfd0 <mixTable+0x6b0>)
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800be3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be42:	f7fb f8cf 	bl	8006fe4 <feature>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d060      	beq.n	800bf0e <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be4c:	4b61      	ldr	r3, [pc, #388]	; (800bfd4 <mixTable+0x6b4>)
 800be4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be52:	461a      	mov	r2, r3
 800be54:	4b5c      	ldr	r3, [pc, #368]	; (800bfc8 <mixTable+0x6a8>)
 800be56:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be5a:	429a      	cmp	r2, r3
 800be5c:	dd2b      	ble.n	800beb6 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be5e:	4a5c      	ldr	r2, [pc, #368]	; (800bfd0 <mixTable+0x6b0>)
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be66:	4618      	mov	r0, r3
 800be68:	4b57      	ldr	r3, [pc, #348]	; (800bfc8 <mixTable+0x6a8>)
 800be6a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800be6e:	4619      	mov	r1, r3
 800be70:	4b55      	ldr	r3, [pc, #340]	; (800bfc8 <mixTable+0x6a8>)
 800be72:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be76:	461a      	mov	r2, r3
 800be78:	f7f7 ff32 	bl	8003ce0 <constrain>
 800be7c:	4603      	mov	r3, r0
 800be7e:	b219      	sxth	r1, r3
 800be80:	4a53      	ldr	r2, [pc, #332]	; (800bfd0 <mixTable+0x6b0>)
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be88:	4b4f      	ldr	r3, [pc, #316]	; (800bfc8 <mixTable+0x6a8>)
 800be8a:	795b      	ldrb	r3, [r3, #5]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d17d      	bne.n	800bf8c <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800be90:	4b51      	ldr	r3, [pc, #324]	; (800bfd8 <mixTable+0x6b8>)
 800be92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be96:	4618      	mov	r0, r3
 800be98:	4b50      	ldr	r3, [pc, #320]	; (800bfdc <mixTable+0x6bc>)
 800be9a:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be9e:	4619      	mov	r1, r3
 800bea0:	4b4e      	ldr	r3, [pc, #312]	; (800bfdc <mixTable+0x6bc>)
 800bea2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f7 ff1a 	bl	8003ce0 <constrain>
 800beac:	4603      	mov	r3, r0
 800beae:	b21a      	sxth	r2, r3
 800beb0:	4b49      	ldr	r3, [pc, #292]	; (800bfd8 <mixTable+0x6b8>)
 800beb2:	815a      	strh	r2, [r3, #10]
 800beb4:	e06a      	b.n	800bf8c <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800beb6:	4a46      	ldr	r2, [pc, #280]	; (800bfd0 <mixTable+0x6b0>)
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bebe:	4618      	mov	r0, r3
 800bec0:	4b41      	ldr	r3, [pc, #260]	; (800bfc8 <mixTable+0x6a8>)
 800bec2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bec6:	4619      	mov	r1, r3
 800bec8:	4b3f      	ldr	r3, [pc, #252]	; (800bfc8 <mixTable+0x6a8>)
 800beca:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800bece:	461a      	mov	r2, r3
 800bed0:	f7f7 ff06 	bl	8003ce0 <constrain>
 800bed4:	4603      	mov	r3, r0
 800bed6:	b219      	sxth	r1, r3
 800bed8:	4a3d      	ldr	r2, [pc, #244]	; (800bfd0 <mixTable+0x6b0>)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bee0:	4b39      	ldr	r3, [pc, #228]	; (800bfc8 <mixTable+0x6a8>)
 800bee2:	795b      	ldrb	r3, [r3, #5]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d151      	bne.n	800bf8c <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bee8:	4b3b      	ldr	r3, [pc, #236]	; (800bfd8 <mixTable+0x6b8>)
 800beea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800beee:	4618      	mov	r0, r3
 800bef0:	4b3a      	ldr	r3, [pc, #232]	; (800bfdc <mixTable+0x6bc>)
 800bef2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bef6:	4619      	mov	r1, r3
 800bef8:	4b38      	ldr	r3, [pc, #224]	; (800bfdc <mixTable+0x6bc>)
 800befa:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800befe:	461a      	mov	r2, r3
 800bf00:	f7f7 feee 	bl	8003ce0 <constrain>
 800bf04:	4603      	mov	r3, r0
 800bf06:	b21a      	sxth	r2, r3
 800bf08:	4b33      	ldr	r3, [pc, #204]	; (800bfd8 <mixTable+0x6b8>)
 800bf0a:	815a      	strh	r2, [r3, #10]
 800bf0c:	e03e      	b.n	800bf8c <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800bf0e:	4a30      	ldr	r2, [pc, #192]	; (800bfd0 <mixTable+0x6b0>)
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf16:	4618      	mov	r0, r3
 800bf18:	4b2b      	ldr	r3, [pc, #172]	; (800bfc8 <mixTable+0x6a8>)
 800bf1a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4b29      	ldr	r3, [pc, #164]	; (800bfc8 <mixTable+0x6a8>)
 800bf22:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f7 feda 	bl	8003ce0 <constrain>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	b219      	sxth	r1, r3
 800bf30:	4a27      	ldr	r2, [pc, #156]	; (800bfd0 <mixTable+0x6b0>)
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bf38:	4b26      	ldr	r3, [pc, #152]	; (800bfd4 <mixTable+0x6b4>)
 800bf3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <mixTable+0x6a8>)
 800bf42:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf46:	429a      	cmp	r2, r3
 800bf48:	da1d      	bge.n	800bf86 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f7fb f84a 	bl	8006fe4 <feature>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f083 0301 	eor.w	r3, r3, #1
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d008      	beq.n	800bf6e <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <mixTable+0x6a8>)
 800bf5e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf62:	b219      	sxth	r1, r3
 800bf64:	4a1a      	ldr	r2, [pc, #104]	; (800bfd0 <mixTable+0x6b0>)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf6c:	e00e      	b.n	800bf8c <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bf6e:	4b16      	ldr	r3, [pc, #88]	; (800bfc8 <mixTable+0x6a8>)
 800bf70:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf74:	b219      	sxth	r1, r3
 800bf76:	4a16      	ldr	r2, [pc, #88]	; (800bfd0 <mixTable+0x6b0>)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <mixTable+0x6ac>)
 800bf80:	2201      	movs	r2, #1
 800bf82:	745a      	strb	r2, [r3, #17]
 800bf84:	e002      	b.n	800bf8c <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <mixTable+0x6ac>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bf8c:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <mixTable+0x6ac>)
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bf94:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <mixTable+0x6c0>)
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bf9c:	4a0c      	ldr	r2, [pc, #48]	; (800bfd0 <mixTable+0x6b0>)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <mixTable+0x6ac>)
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60bb      	str	r3, [r7, #8]
 800bfb0:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <mixTable+0x6c4>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	f4ff af23 	bcc.w	800be04 <mixTable+0x4e4>
        }
    }
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}
 800bfc8:	200019c8 	.word	0x200019c8
 800bfcc:	20002014 	.word	0x20002014
 800bfd0:	20001fc0 	.word	0x20001fc0
 800bfd4:	20002184 	.word	0x20002184
 800bfd8:	20000040 	.word	0x20000040
 800bfdc:	20001890 	.word	0x20001890
 800bfe0:	20001fd8 	.word	0x20001fd8
 800bfe4:	20000d28 	.word	0x20000d28

0800bfe8 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	4603      	mov	r3, r0
 800bff0:	71fb      	strb	r3, [r7, #7]
 800bff2:	460b      	mov	r3, r1
 800bff4:	71bb      	strb	r3, [r7, #6]
 800bff6:	4613      	mov	r3, r2
 800bff8:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bffa:	2300      	movs	r3, #0
 800bffc:	73bb      	strb	r3, [r7, #14]
 800bffe:	e020      	b.n	800c042 <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
 800c004:	e013      	b.n	800c02e <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c006:	f7f6 f817 	bl	8002038 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c00a:	2101      	movs	r1, #1
 800c00c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c010:	f7f6 f854 	bl	80020bc <actBuzzerAction>
            pif_Delay1ms(wait);
 800c014:	79bb      	ldrb	r3, [r7, #6]
 800c016:	b29b      	uxth	r3, r3
 800c018:	4618      	mov	r0, r3
 800c01a:	f005 fa5d 	bl	80114d8 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c01e:	2100      	movs	r1, #0
 800c020:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c024:	f7f6 f84a 	bl	80020bc <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	3301      	adds	r3, #1
 800c02c:	73fb      	strb	r3, [r7, #15]
 800c02e:	7bfa      	ldrb	r2, [r7, #15]
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	429a      	cmp	r2, r3
 800c034:	d3e7      	bcc.n	800c006 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c036:	203c      	movs	r0, #60	; 0x3c
 800c038:	f005 fa4e 	bl	80114d8 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	3301      	adds	r3, #1
 800c040:	73bb      	strb	r3, [r7, #14]
 800c042:	7bba      	ldrb	r2, [r7, #14]
 800c044:	797b      	ldrb	r3, [r7, #5]
 800c046:	429a      	cmp	r2, r3
 800c048:	d3da      	bcc.n	800c000 <blinkLED+0x18>
    }
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	0000      	movs	r0, r0
	...

0800c058 <annexCode>:

void annexCode(void)
{
 800c058:	b590      	push	{r4, r7, lr}
 800c05a:	b08b      	sub	sp, #44	; 0x2c
 800c05c:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c05e:	4b98      	ldr	r3, [pc, #608]	; (800c2c0 <annexCode+0x268>)
 800c060:	7c1b      	ldrb	r3, [r3, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d12e      	bne.n	800c0c4 <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c066:	4b97      	ldr	r3, [pc, #604]	; (800c2c4 <annexCode+0x26c>)
 800c068:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c06c:	461a      	mov	r2, r3
 800c06e:	4b96      	ldr	r3, [pc, #600]	; (800c2c8 <annexCode+0x270>)
 800c070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c072:	429a      	cmp	r2, r3
 800c074:	da02      	bge.n	800c07c <annexCode+0x24>
            prop2 = 100;
 800c076:	2364      	movs	r3, #100	; 0x64
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	e07b      	b.n	800c174 <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c07c:	4b91      	ldr	r3, [pc, #580]	; (800c2c4 <annexCode+0x26c>)
 800c07e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c082:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c086:	da16      	bge.n	800c0b6 <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c088:	4b8f      	ldr	r3, [pc, #572]	; (800c2c8 <annexCode+0x270>)
 800c08a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c08e:	461a      	mov	r2, r3
 800c090:	4b8c      	ldr	r3, [pc, #560]	; (800c2c4 <annexCode+0x26c>)
 800c092:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c096:	4619      	mov	r1, r3
 800c098:	4b8b      	ldr	r3, [pc, #556]	; (800c2c8 <annexCode+0x270>)
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09c:	1acb      	subs	r3, r1, r3
 800c09e:	fb03 f202 	mul.w	r2, r3, r2
 800c0a2:	4b89      	ldr	r3, [pc, #548]	; (800c2c8 <annexCode+0x270>)
 800c0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a6:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c0aa:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0ae:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0b2:	61bb      	str	r3, [r7, #24]
 800c0b4:	e05e      	b.n	800c174 <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c0b6:	4b84      	ldr	r3, [pc, #528]	; (800c2c8 <annexCode+0x270>)
 800c0b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0bc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0c0:	61bb      	str	r3, [r7, #24]
 800c0c2:	e057      	b.n	800c174 <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c0c4:	2380      	movs	r3, #128	; 0x80
 800c0c6:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c0c8:	4b7e      	ldr	r3, [pc, #504]	; (800c2c4 <annexCode+0x26c>)
 800c0ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	4b7d      	ldr	r3, [pc, #500]	; (800c2c8 <annexCode+0x270>)
 800c0d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	da02      	bge.n	800c0de <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c0d8:	2380      	movs	r3, #128	; 0x80
 800c0da:	61bb      	str	r3, [r7, #24]
 800c0dc:	e028      	b.n	800c130 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c0de:	4b7b      	ldr	r3, [pc, #492]	; (800c2cc <annexCode+0x274>)
 800c0e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4b78      	ldr	r3, [pc, #480]	; (800c2c8 <annexCode+0x270>)
 800c0e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	dd1f      	ble.n	800c130 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c0f0:	4b76      	ldr	r3, [pc, #472]	; (800c2cc <annexCode+0x274>)
 800c0f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0fa:	da12      	bge.n	800c122 <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c0fc:	4b72      	ldr	r3, [pc, #456]	; (800c2c8 <annexCode+0x270>)
 800c0fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c102:	461a      	mov	r2, r3
 800c104:	4b71      	ldr	r3, [pc, #452]	; (800c2cc <annexCode+0x274>)
 800c106:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c10a:	4619      	mov	r1, r3
 800c10c:	4b6e      	ldr	r3, [pc, #440]	; (800c2c8 <annexCode+0x270>)
 800c10e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c112:	1acb      	subs	r3, r1, r3
 800c114:	fb03 f302 	mul.w	r3, r3, r2
 800c118:	125b      	asrs	r3, r3, #9
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	e006      	b.n	800c130 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c122:	4b69      	ldr	r3, [pc, #420]	; (800c2c8 <annexCode+0x270>)
 800c124:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c128:	461a      	mov	r2, r3
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	1a9b      	subs	r3, r3, r2
 800c12e:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c130:	4b67      	ldr	r3, [pc, #412]	; (800c2d0 <annexCode+0x278>)
 800c132:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c136:	2b14      	cmp	r3, #20
 800c138:	dd12      	ble.n	800c160 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c13a:	4b63      	ldr	r3, [pc, #396]	; (800c2c8 <annexCode+0x270>)
 800c13c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c140:	461a      	mov	r2, r3
 800c142:	4b64      	ldr	r3, [pc, #400]	; (800c2d4 <annexCode+0x27c>)
 800c144:	881b      	ldrh	r3, [r3, #0]
 800c146:	4619      	mov	r1, r3
 800c148:	4b61      	ldr	r3, [pc, #388]	; (800c2d0 <annexCode+0x278>)
 800c14a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c14e:	428b      	cmp	r3, r1
 800c150:	bfa8      	it	ge
 800c152:	460b      	movge	r3, r1
 800c154:	fb03 f302 	mul.w	r3, r3, r2
 800c158:	121b      	asrs	r3, r3, #8
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c160:	4b59      	ldr	r3, [pc, #356]	; (800c2c8 <annexCode+0x270>)
 800c162:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c166:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	4293      	cmp	r3, r2
 800c16e:	bfb8      	it	lt
 800c170:	4613      	movlt	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c174:	2300      	movs	r3, #0
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	e131      	b.n	800c3de <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c17a:	4a52      	ldr	r2, [pc, #328]	; (800c2c4 <annexCode+0x26c>)
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c182:	461a      	mov	r2, r3
 800c184:	4b54      	ldr	r3, [pc, #336]	; (800c2d8 <annexCode+0x280>)
 800c186:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c190:	dd18      	ble.n	800c1c4 <annexCode+0x16c>
 800c192:	4a4c      	ldr	r2, [pc, #304]	; (800c2c4 <annexCode+0x26c>)
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c19a:	461a      	mov	r2, r3
 800c19c:	4b4e      	ldr	r3, [pc, #312]	; (800c2d8 <annexCode+0x280>)
 800c19e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c1a8:	da0c      	bge.n	800c1c4 <annexCode+0x16c>
 800c1aa:	4a46      	ldr	r2, [pc, #280]	; (800c2c4 <annexCode+0x26c>)
 800c1ac:	6a3b      	ldr	r3, [r7, #32]
 800c1ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	4b48      	ldr	r3, [pc, #288]	; (800c2d8 <annexCode+0x280>)
 800c1b6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bfb8      	it	lt
 800c1c0:	425b      	neglt	r3, r3
 800c1c2:	e001      	b.n	800c1c8 <annexCode+0x170>
 800c1c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d063      	beq.n	800c298 <annexCode+0x240>
            if (cfg.deadband) {
 800c1d0:	4b3d      	ldr	r3, [pc, #244]	; (800c2c8 <annexCode+0x270>)
 800c1d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d010      	beq.n	800c1fc <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c1da:	4b3b      	ldr	r3, [pc, #236]	; (800c2c8 <annexCode+0x270>)
 800c1dc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	dd07      	ble.n	800c1f8 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c1e8:	4b37      	ldr	r3, [pc, #220]	; (800c2c8 <annexCode+0x270>)
 800c1ea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f6:	e001      	b.n	800c1fc <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	4a37      	ldr	r2, [pc, #220]	; (800c2dc <annexCode+0x284>)
 800c200:	fb82 1203 	smull	r1, r2, r2, r3
 800c204:	1152      	asrs	r2, r2, #5
 800c206:	17db      	asrs	r3, r3, #31
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c20c:	4a34      	ldr	r2, [pc, #208]	; (800c2e0 <annexCode+0x288>)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c214:	b29a      	uxth	r2, r3
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c21c:	fb01 f103 	mul.w	r1, r1, r3
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	440b      	add	r3, r1
 800c224:	6979      	ldr	r1, [r7, #20]
 800c226:	3101      	adds	r1, #1
 800c228:	482d      	ldr	r0, [pc, #180]	; (800c2e0 <annexCode+0x288>)
 800c22a:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c22e:	460c      	mov	r4, r1
 800c230:	482b      	ldr	r0, [pc, #172]	; (800c2e0 <annexCode+0x288>)
 800c232:	6979      	ldr	r1, [r7, #20]
 800c234:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c238:	1a61      	subs	r1, r4, r1
 800c23a:	fb01 f303 	mul.w	r3, r1, r3
 800c23e:	4927      	ldr	r1, [pc, #156]	; (800c2dc <annexCode+0x284>)
 800c240:	fb81 0103 	smull	r0, r1, r1, r3
 800c244:	1149      	asrs	r1, r1, #5
 800c246:	17db      	asrs	r3, r3, #31
 800c248:	1acb      	subs	r3, r1, r3
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	4413      	add	r3, r2
 800c24e:	b29b      	uxth	r3, r3
 800c250:	b219      	sxth	r1, r3
 800c252:	4a1e      	ldr	r2, [pc, #120]	; (800c2cc <annexCode+0x274>)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c25a:	4a1b      	ldr	r2, [pc, #108]	; (800c2c8 <annexCode+0x270>)
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	4413      	add	r3, r2
 800c260:	3323      	adds	r3, #35	; 0x23
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	fb03 f302 	mul.w	r3, r3, r2
 800c26c:	4a1d      	ldr	r2, [pc, #116]	; (800c2e4 <annexCode+0x28c>)
 800c26e:	fb82 1203 	smull	r1, r2, r2, r3
 800c272:	1152      	asrs	r2, r2, #5
 800c274:	17db      	asrs	r3, r3, #31
 800c276:	1a9b      	subs	r3, r3, r2
 800c278:	3364      	adds	r3, #100	; 0x64
 800c27a:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	461a      	mov	r2, r3
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	fb03 f302 	mul.w	r3, r3, r2
 800c288:	4a14      	ldr	r2, [pc, #80]	; (800c2dc <annexCode+0x284>)
 800c28a:	fb82 1203 	smull	r1, r2, r2, r3
 800c28e:	1152      	asrs	r2, r2, #5
 800c290:	17db      	asrs	r3, r3, #31
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	e04a      	b.n	800c32e <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c298:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <annexCode+0x270>)
 800c29a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d024      	beq.n	800c2ec <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c2a2:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <annexCode+0x270>)
 800c2a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	dd1b      	ble.n	800c2e8 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c2b0:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <annexCode+0x270>)
 800c2b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	1a9b      	subs	r3, r3, r2
 800c2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c2be:	e015      	b.n	800c2ec <annexCode+0x294>
 800c2c0:	20002014 	.word	0x20002014
 800c2c4:	20002184 	.word	0x20002184
 800c2c8:	20001890 	.word	0x20001890
 800c2cc:	200020b0 	.word	0x200020b0
 800c2d0:	20000cd8 	.word	0x20000cd8
 800c2d4:	20000056 	.word	0x20000056
 800c2d8:	200019c8 	.word	0x200019c8
 800c2dc:	51eb851f 	.word	0x51eb851f
 800c2e0:	200021e0 	.word	0x200021e0
 800c2e4:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c2ec:	4ba0      	ldr	r3, [pc, #640]	; (800c570 <annexCode+0x518>)
 800c2ee:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c2f2:	425b      	negs	r3, r3
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	fb12 f303 	smulbb	r3, r2, r3
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	b219      	sxth	r1, r3
 800c302:	4a9c      	ldr	r2, [pc, #624]	; (800c574 <annexCode+0x51c>)
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c30a:	4b9b      	ldr	r3, [pc, #620]	; (800c578 <annexCode+0x520>)
 800c30c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c310:	461a      	mov	r2, r3
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb8      	it	lt
 800c318:	425b      	neglt	r3, r3
 800c31a:	fb03 f302 	mul.w	r3, r3, r2
 800c31e:	4a97      	ldr	r2, [pc, #604]	; (800c57c <annexCode+0x524>)
 800c320:	fb82 1203 	smull	r1, r2, r2, r3
 800c324:	1152      	asrs	r2, r2, #5
 800c326:	17db      	asrs	r3, r3, #31
 800c328:	1a9b      	subs	r3, r3, r2
 800c32a:	3364      	adds	r3, #100	; 0x64
 800c32c:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c32e:	4a92      	ldr	r2, [pc, #584]	; (800c578 <annexCode+0x520>)
 800c330:	6a3b      	ldr	r3, [r7, #32]
 800c332:	4413      	add	r3, r2
 800c334:	3301      	adds	r3, #1
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	461a      	mov	r2, r3
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	fb03 f302 	mul.w	r3, r3, r2
 800c340:	4a8f      	ldr	r2, [pc, #572]	; (800c580 <annexCode+0x528>)
 800c342:	fb82 1203 	smull	r1, r2, r2, r3
 800c346:	1152      	asrs	r2, r2, #5
 800c348:	17db      	asrs	r3, r3, #31
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	b2d9      	uxtb	r1, r3
 800c34e:	4a8d      	ldr	r2, [pc, #564]	; (800c584 <annexCode+0x52c>)
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	4413      	add	r3, r2
 800c354:	460a      	mov	r2, r1
 800c356:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c358:	4a87      	ldr	r2, [pc, #540]	; (800c578 <annexCode+0x520>)
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	4413      	add	r3, r2
 800c35e:	330b      	adds	r3, #11
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	fb03 f302 	mul.w	r3, r3, r2
 800c36a:	4a85      	ldr	r2, [pc, #532]	; (800c580 <annexCode+0x528>)
 800c36c:	fb82 1203 	smull	r1, r2, r2, r3
 800c370:	1152      	asrs	r2, r2, #5
 800c372:	17db      	asrs	r3, r3, #31
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	b2d9      	uxtb	r1, r3
 800c378:	4a83      	ldr	r2, [pc, #524]	; (800c588 <annexCode+0x530>)
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	4413      	add	r3, r2
 800c37e:	460a      	mov	r2, r1
 800c380:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c382:	4a7d      	ldr	r2, [pc, #500]	; (800c578 <annexCode+0x520>)
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	4413      	add	r3, r2
 800c388:	3315      	adds	r3, #21
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	461a      	mov	r2, r3
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	fb03 f302 	mul.w	r3, r3, r2
 800c394:	4a7a      	ldr	r2, [pc, #488]	; (800c580 <annexCode+0x528>)
 800c396:	fb82 1203 	smull	r1, r2, r2, r3
 800c39a:	1152      	asrs	r2, r2, #5
 800c39c:	17db      	asrs	r3, r3, #31
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	b2d9      	uxtb	r1, r3
 800c3a2:	4a7a      	ldr	r2, [pc, #488]	; (800c58c <annexCode+0x534>)
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	460a      	mov	r2, r1
 800c3aa:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c3ac:	4a78      	ldr	r2, [pc, #480]	; (800c590 <annexCode+0x538>)
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4b6e      	ldr	r3, [pc, #440]	; (800c570 <annexCode+0x518>)
 800c3b8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	da0b      	bge.n	800c3d8 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c3c0:	4a6c      	ldr	r2, [pc, #432]	; (800c574 <annexCode+0x51c>)
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	425b      	negs	r3, r3
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	b219      	sxth	r1, r3
 800c3d0:	4a68      	ldr	r2, [pc, #416]	; (800c574 <annexCode+0x51c>)
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	623b      	str	r3, [r7, #32]
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	f77f aeca 	ble.w	800c17a <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c3e6:	4b6a      	ldr	r3, [pc, #424]	; (800c590 <annexCode+0x538>)
 800c3e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4b60      	ldr	r3, [pc, #384]	; (800c570 <annexCode+0x518>)
 800c3f0:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	f7f7 fc71 	bl	8003ce0 <constrain>
 800c3fe:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c400:	4b5b      	ldr	r3, [pc, #364]	; (800c570 <annexCode+0x518>)
 800c402:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c406:	461a      	mov	r2, r3
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	1a9b      	subs	r3, r3, r2
 800c40c:	461a      	mov	r2, r3
 800c40e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c412:	fb03 f302 	mul.w	r3, r3, r2
 800c416:	4a56      	ldr	r2, [pc, #344]	; (800c570 <annexCode+0x518>)
 800c418:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c41c:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c420:	fbb3 f3f2 	udiv	r3, r3, r2
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c428:	4a55      	ldr	r2, [pc, #340]	; (800c580 <annexCode+0x528>)
 800c42a:	fb82 1203 	smull	r1, r2, r2, r3
 800c42e:	1152      	asrs	r2, r2, #5
 800c430:	17db      	asrs	r3, r3, #31
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c436:	4a57      	ldr	r2, [pc, #348]	; (800c594 <annexCode+0x53c>)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c446:	fb01 f103 	mul.w	r1, r1, r3
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	440b      	add	r3, r1
 800c44e:	6979      	ldr	r1, [r7, #20]
 800c450:	3101      	adds	r1, #1
 800c452:	4850      	ldr	r0, [pc, #320]	; (800c594 <annexCode+0x53c>)
 800c454:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c458:	460c      	mov	r4, r1
 800c45a:	484e      	ldr	r0, [pc, #312]	; (800c594 <annexCode+0x53c>)
 800c45c:	6979      	ldr	r1, [r7, #20]
 800c45e:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c462:	1a61      	subs	r1, r4, r1
 800c464:	fb01 f303 	mul.w	r3, r1, r3
 800c468:	4945      	ldr	r1, [pc, #276]	; (800c580 <annexCode+0x528>)
 800c46a:	fb81 0103 	smull	r0, r1, r1, r3
 800c46e:	1149      	asrs	r1, r1, #5
 800c470:	17db      	asrs	r3, r3, #31
 800c472:	1acb      	subs	r3, r1, r3
 800c474:	b29b      	uxth	r3, r3
 800c476:	4413      	add	r3, r2
 800c478:	b29b      	uxth	r3, r3
 800c47a:	b21a      	sxth	r2, r3
 800c47c:	4b3d      	ldr	r3, [pc, #244]	; (800c574 <annexCode+0x51c>)
 800c47e:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c480:	4b45      	ldr	r3, [pc, #276]	; (800c598 <annexCode+0x540>)
 800c482:	7a5b      	ldrb	r3, [r3, #9]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d06b      	beq.n	800c560 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c488:	4b44      	ldr	r3, [pc, #272]	; (800c59c <annexCode+0x544>)
 800c48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c48e:	461a      	mov	r2, r3
 800c490:	4b43      	ldr	r3, [pc, #268]	; (800c5a0 <annexCode+0x548>)
 800c492:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	4618      	mov	r0, r3
 800c49a:	f7f4 f801 	bl	80004a0 <__aeabi_i2d>
 800c49e:	a332      	add	r3, pc, #200	; (adr r3, 800c568 <annexCode+0x510>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f4 f866 	bl	8000574 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f04f 0200 	mov.w	r2, #0
 800c4b4:	4b3b      	ldr	r3, [pc, #236]	; (800c5a4 <annexCode+0x54c>)
 800c4b6:	f7f4 f987 	bl	80007c8 <__aeabi_ddiv>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7f4 fb39 	bl	8000b38 <__aeabi_d2f>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c4ca:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4ce:	f015 fdb3 	bl	8022038 <cosf>
 800c4d2:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c4d6:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4da:	f015 fe2d 	bl	8022138 <sinf>
 800c4de:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <annexCode+0x51c>)
 800c4e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4e8:	ee07 3a90 	vmov	s15, r3
 800c4ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f8:	4b1e      	ldr	r3, [pc, #120]	; (800c574 <annexCode+0x51c>)
 800c4fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c506:	edd7 7a02 	vldr	s15, [r7, #8]
 800c50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c516:	ee17 3a90 	vmov	r3, s15
 800c51a:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c51c:	4b15      	ldr	r3, [pc, #84]	; (800c574 <annexCode+0x51c>)
 800c51e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c52a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c52e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c532:	4b10      	ldr	r3, [pc, #64]	; (800c574 <annexCode+0x51c>)
 800c534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c538:	ee07 3a90 	vmov	s15, r3
 800c53c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c540:	edd7 7a02 	vldr	s15, [r7, #8]
 800c544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c54c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c550:	ee17 3a90 	vmov	r3, s15
 800c554:	b21a      	sxth	r2, r3
 800c556:	4b07      	ldr	r3, [pc, #28]	; (800c574 <annexCode+0x51c>)
 800c558:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c55a:	4a06      	ldr	r2, [pc, #24]	; (800c574 <annexCode+0x51c>)
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	8053      	strh	r3, [r2, #2]
    }
}
 800c560:	bf00      	nop
 800c562:	372c      	adds	r7, #44	; 0x2c
 800c564:	46bd      	mov	sp, r7
 800c566:	bd90      	pop	{r4, r7, pc}
 800c568:	54442d18 	.word	0x54442d18
 800c56c:	400921fb 	.word	0x400921fb
 800c570:	200019c8 	.word	0x200019c8
 800c574:	200020b0 	.word	0x200020b0
 800c578:	20001890 	.word	0x20001890
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	51eb851f 	.word	0x51eb851f
 800c584:	200021b4 	.word	0x200021b4
 800c588:	20002170 	.word	0x20002170
 800c58c:	200021a8 	.word	0x200021a8
 800c590:	20002184 	.word	0x20002184
 800c594:	20002034 	.word	0x20002034
 800c598:	20002014 	.word	0x20002014
 800c59c:	20002270 	.word	0x20002270
 800c5a0:	20002180 	.word	0x20002180
 800c5a4:	40668000 	.word	0x40668000

0800c5a8 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c5a8:	b5b0      	push	{r4, r5, r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c5b0:	2002      	movs	r0, #2
 800c5b2:	f7fa fd17 	bl	8006fe4 <feature>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 80ba 	beq.w	800c732 <taskLedState+0x18a>
        vbatCycleTime += cycleTime;
 800c5be:	4b8f      	ldr	r3, [pc, #572]	; (800c7fc <taskLedState+0x254>)
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4b8e      	ldr	r3, [pc, #568]	; (800c800 <taskLedState+0x258>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	4a8d      	ldr	r2, [pc, #564]	; (800c800 <taskLedState+0x258>)
 800c5cc:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c5ce:	4b8d      	ldr	r3, [pc, #564]	; (800c804 <taskLedState+0x25c>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	4b8b      	ldr	r3, [pc, #556]	; (800c804 <taskLedState+0x25c>)
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	4b8a      	ldr	r3, [pc, #552]	; (800c804 <taskLedState+0x25c>)
 800c5dc:	781a      	ldrb	r2, [r3, #0]
 800c5de:	4b8a      	ldr	r3, [pc, #552]	; (800c808 <taskLedState+0x260>)
 800c5e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c5e4:	0899      	lsrs	r1, r3, #2
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	440b      	add	r3, r1
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f040 808a 	bne.w	800c70c <taskLedState+0x164>
            vbatRaw -= vbatRaw / 8;
 800c5f8:	4b84      	ldr	r3, [pc, #528]	; (800c80c <taskLedState+0x264>)
 800c5fa:	ed93 7a00 	vldr	s14, [r3]
 800c5fe:	4b83      	ldr	r3, [pc, #524]	; (800c80c <taskLedState+0x264>)
 800c600:	edd3 6a00 	vldr	s13, [r3]
 800c604:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c608:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c60c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c610:	4b7e      	ldr	r3, [pc, #504]	; (800c80c <taskLedState+0x264>)
 800c612:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c616:	f7f4 fddd 	bl	80011d4 <actGetBatteryVoltage>
 800c61a:	eeb0 7a40 	vmov.f32	s14, s0
 800c61e:	4b7c      	ldr	r3, [pc, #496]	; (800c810 <taskLedState+0x268>)
 800c620:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c62c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c630:	4b76      	ldr	r3, [pc, #472]	; (800c80c <taskLedState+0x264>)
 800c632:	edd3 7a00 	vldr	s15, [r3]
 800c636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c63a:	4b74      	ldr	r3, [pc, #464]	; (800c80c <taskLedState+0x264>)
 800c63c:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c640:	4b72      	ldr	r3, [pc, #456]	; (800c80c <taskLedState+0x264>)
 800c642:	ed93 7a00 	vldr	s14, [r3]
 800c646:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c64a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c64e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c652:	ee17 3a90 	vmov	r3, s15
 800c656:	b29a      	uxth	r2, r3
 800c658:	4b6e      	ldr	r3, [pc, #440]	; (800c814 <taskLedState+0x26c>)
 800c65a:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c65c:	4b6c      	ldr	r3, [pc, #432]	; (800c810 <taskLedState+0x268>)
 800c65e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c662:	2b00      	cmp	r3, #0
 800c664:	d052      	beq.n	800c70c <taskLedState+0x164>
                amperageRaw -= amperageRaw / 8;
 800c666:	4b6c      	ldr	r3, [pc, #432]	; (800c818 <taskLedState+0x270>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da00      	bge.n	800c670 <taskLedState+0xc8>
 800c66e:	3307      	adds	r3, #7
 800c670:	10db      	asrs	r3, r3, #3
 800c672:	425b      	negs	r3, r3
 800c674:	461a      	mov	r2, r3
 800c676:	4b68      	ldr	r3, [pc, #416]	; (800c818 <taskLedState+0x270>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4413      	add	r3, r2
 800c67c:	4a66      	ldr	r2, [pc, #408]	; (800c818 <taskLedState+0x270>)
 800c67e:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c680:	f7f4 fdc6 	bl	8001210 <actGetBatteryCurrent>
 800c684:	4603      	mov	r3, r0
 800c686:	4a62      	ldr	r2, [pc, #392]	; (800c810 <taskLedState+0x268>)
 800c688:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c692:	fb02 f303 	mul.w	r3, r2, r3
 800c696:	4a5e      	ldr	r2, [pc, #376]	; (800c810 <taskLedState+0x268>)
 800c698:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c69c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a0:	4a5d      	ldr	r2, [pc, #372]	; (800c818 <taskLedState+0x270>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	4b5b      	ldr	r3, [pc, #364]	; (800c818 <taskLedState+0x270>)
 800c6aa:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c6ac:	4b5a      	ldr	r3, [pc, #360]	; (800c818 <taskLedState+0x270>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da00      	bge.n	800c6b6 <taskLedState+0x10e>
 800c6b4:	3307      	adds	r3, #7
 800c6b6:	10db      	asrs	r3, r3, #3
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	4b58      	ldr	r3, [pc, #352]	; (800c81c <taskLedState+0x274>)
 800c6bc:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c6be:	4b57      	ldr	r3, [pc, #348]	; (800c81c <taskLedState+0x274>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a4f      	ldr	r2, [pc, #316]	; (800c800 <taskLedState+0x258>)
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	4a55      	ldr	r2, [pc, #340]	; (800c820 <taskLedState+0x278>)
 800c6cc:	fb82 1203 	smull	r1, r2, r2, r3
 800c6d0:	1192      	asrs	r2, r2, #6
 800c6d2:	17db      	asrs	r3, r3, #31
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c6dc:	4b51      	ldr	r3, [pc, #324]	; (800c824 <taskLedState+0x27c>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	1884      	adds	r4, r0, r2
 800c6e4:	eb41 0503 	adc.w	r5, r1, r3
 800c6e8:	4b4e      	ldr	r3, [pc, #312]	; (800c824 <taskLedState+0x27c>)
 800c6ea:	e9c3 4500 	strd	r4, r5, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c6ee:	4b4d      	ldr	r3, [pc, #308]	; (800c824 <taskLedState+0x27c>)
 800c6f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6f4:	4a4c      	ldr	r2, [pc, #304]	; (800c828 <taskLedState+0x280>)
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	f7f4 fb7b 	bl	8000df4 <__aeabi_ldivmod>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4b4a      	ldr	r3, [pc, #296]	; (800c82c <taskLedState+0x284>)
 800c704:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c706:	4b3e      	ldr	r3, [pc, #248]	; (800c800 <taskLedState+0x258>)
 800c708:	2200      	movs	r2, #0
 800c70a:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c70c:	4b41      	ldr	r3, [pc, #260]	; (800c814 <taskLedState+0x26c>)
 800c70e:	881a      	ldrh	r2, [r3, #0]
 800c710:	4b47      	ldr	r3, [pc, #284]	; (800c830 <taskLedState+0x288>)
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d803      	bhi.n	800c720 <taskLedState+0x178>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c718:	2001      	movs	r0, #1
 800c71a:	f7f7 fc71 	bl	8004000 <buzzer>
 800c71e:	e008      	b.n	800c732 <taskLedState+0x18a>
        else if (vbat <= batteryWarningVoltage)
 800c720:	4b3c      	ldr	r3, [pc, #240]	; (800c814 <taskLedState+0x26c>)
 800c722:	881a      	ldrh	r2, [r3, #0]
 800c724:	4b43      	ldr	r3, [pc, #268]	; (800c834 <taskLedState+0x28c>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d802      	bhi.n	800c732 <taskLedState+0x18a>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c72c:	2002      	movs	r0, #2
 800c72e:	f7f7 fc67 	bl	8004000 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c732:	f7f7 fd51 	bl	80041d8 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c736:	f004 fdcd 	bl	80112d4 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c73a:	4b3f      	ldr	r3, [pc, #252]	; (800c838 <taskLedState+0x290>)
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <taskLedState+0x1a2>
        sensor_set.gyro.temperature(&telemTemperature1);
 800c742:	4b3d      	ldr	r3, [pc, #244]	; (800c838 <taskLedState+0x290>)
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	483d      	ldr	r0, [pc, #244]	; (800c83c <taskLedState+0x294>)
 800c748:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c74a:	4b3d      	ldr	r3, [pc, #244]	; (800c840 <taskLedState+0x298>)
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <taskLedState+0x1b6>
 800c752:	2002      	movs	r0, #2
 800c754:	f7fa fbfe 	bl	8006f54 <sensors>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d103      	bne.n	800c766 <taskLedState+0x1be>
 800c75e:	4b39      	ldr	r3, [pc, #228]	; (800c844 <taskLedState+0x29c>)
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <taskLedState+0x1c4>
        actLed0Toggle();
 800c766:	f7f5 fc67 	bl	8002038 <actLed0Toggle>
 800c76a:	e00d      	b.n	800c788 <taskLedState+0x1e0>
    } else {
        if (f.ACC_CALIBRATED)
 800c76c:	4b36      	ldr	r3, [pc, #216]	; (800c848 <taskLedState+0x2a0>)
 800c76e:	789b      	ldrb	r3, [r3, #2]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <taskLedState+0x1d2>
            actLed0State(OFF);
 800c774:	2000      	movs	r0, #0
 800c776:	f7f5 fc49 	bl	800200c <actLed0State>
        if (f.ARMED)
 800c77a:	4b33      	ldr	r3, [pc, #204]	; (800c848 <taskLedState+0x2a0>)
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d002      	beq.n	800c788 <taskLedState+0x1e0>
            actLed0State(ON);
 800c782:	2001      	movs	r0, #1
 800c784:	f7f5 fc42 	bl	800200c <actLed0State>
        ledringState();
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c788:	4b30      	ldr	r3, [pc, #192]	; (800c84c <taskLedState+0x2a4>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <taskLedState+0x1f6>
 800c790:	4b2e      	ldr	r3, [pc, #184]	; (800c84c <taskLedState+0x2a4>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	3b01      	subs	r3, #1
 800c796:	b2da      	uxtb	r2, r3
 800c798:	4b2c      	ldr	r3, [pc, #176]	; (800c84c <taskLedState+0x2a4>)
 800c79a:	701a      	strb	r2, [r3, #0]
 800c79c:	e00f      	b.n	800c7be <taskLedState+0x216>
    else {
        if (!f.SMALL_ANGLE) {
 800c79e:	4b2a      	ldr	r3, [pc, #168]	; (800c848 <taskLedState+0x2a0>)
 800c7a0:	7b5b      	ldrb	r3, [r3, #13]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d105      	bne.n	800c7b2 <taskLedState+0x20a>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c7a6:	4b28      	ldr	r3, [pc, #160]	; (800c848 <taskLedState+0x2a0>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c7ac:	f7f5 fc44 	bl	8002038 <actLed0Toggle>
 800c7b0:	e002      	b.n	800c7b8 <taskLedState+0x210>
        } else {
            f.ACC_CALIBRATED = 1;
 800c7b2:	4b25      	ldr	r3, [pc, #148]	; (800c848 <taskLedState+0x2a0>)
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c7b8:	4b24      	ldr	r3, [pc, #144]	; (800c84c <taskLedState+0x2a4>)
 800c7ba:	2209      	movs	r2, #9
 800c7bc:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c7be:	2020      	movs	r0, #32
 800c7c0:	f7fa fbc8 	bl	8006f54 <sensors>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d013      	beq.n	800c7f2 <taskLedState+0x24a>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c7ca:	4b21      	ldr	r3, [pc, #132]	; (800c850 <taskLedState+0x2a8>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d006      	beq.n	800c7e0 <taskLedState+0x238>
 800c7d2:	4b1f      	ldr	r3, [pc, #124]	; (800c850 <taskLedState+0x2a8>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <taskLedState+0x2a8>)
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e008      	b.n	800c7f2 <taskLedState+0x24a>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <taskLedState+0x2ac>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d901      	bls.n	800c7ec <taskLedState+0x244>
 800c7e8:	f7f5 fc52 	bl	8002090 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c7ec:	4b18      	ldr	r3, [pc, #96]	; (800c850 <taskLedState+0x2a8>)
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c7fc:	20000e80 	.word	0x20000e80
 800c800:	20000ebc 	.word	0x20000ebc
 800c804:	20000ec0 	.word	0x20000ec0
 800c808:	aaaaaaab 	.word	0xaaaaaaab
 800c80c:	20000ec4 	.word	0x20000ec4
 800c810:	200019c8 	.word	0x200019c8
 800c814:	200020b8 	.word	0x200020b8
 800c818:	20000ec8 	.word	0x20000ec8
 800c81c:	20002178 	.word	0x20002178
 800c820:	10624dd3 	.word	0x10624dd3
 800c824:	20000ed0 	.word	0x20000ed0
 800c828:	00057e40 	.word	0x00057e40
 800c82c:	2000202c 	.word	0x2000202c
 800c830:	20002182 	.word	0x20002182
 800c834:	200020c0 	.word	0x200020c0
 800c838:	20000fcc 	.word	0x20000fcc
 800c83c:	20002010 	.word	0x20002010
 800c840:	20000fbe 	.word	0x20000fbe
 800c844:	20000fc2 	.word	0x20000fc2
 800c848:	20002014 	.word	0x20002014
 800c84c:	20000ed8 	.word	0x20000ed8
 800c850:	20000ed9 	.word	0x20000ed9
 800c854:	20002176 	.word	0x20002176

0800c858 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	4a05      	ldr	r2, [pc, #20]	; (800c87c <pwmReadRawRC+0x24>)
 800c866:	4413      	add	r3, r2
 800c868:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7f5 fb5f 	bl	8001f30 <actPwmRead>
 800c872:	4603      	mov	r3, r0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200019c8 	.word	0x200019c8

0800c880 <computeRC>:

void computeRC(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c886:	2008      	movs	r0, #8
 800c888:	f7fa fbac 	bl	8006fe4 <feature>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d019      	beq.n	800c8c6 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c892:	2300      	movs	r3, #0
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e00e      	b.n	800c8b6 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c898:	4b41      	ldr	r3, [pc, #260]	; (800c9a0 <computeRC+0x120>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	b219      	sxth	r1, r3
 800c8a8:	4a3e      	ldr	r2, [pc, #248]	; (800c9a4 <computeRC+0x124>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	607b      	str	r3, [r7, #4]
 800c8b6:	4b3c      	ldr	r3, [pc, #240]	; (800c9a8 <computeRC+0x128>)
 800c8b8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8bc:	461a      	mov	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	dbe9      	blt.n	800c898 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c8c4:	e068      	b.n	800c998 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	e059      	b.n	800c980 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c8cc:	4b34      	ldr	r3, [pc, #208]	; (800c9a0 <computeRC+0x120>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	4603      	mov	r3, r0
 800c8da:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d904      	bls.n	800c8f0 <computeRC+0x70>
 800c8e6:	89fb      	ldrh	r3, [r7, #14]
 800c8e8:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d903      	bls.n	800c8f8 <computeRC+0x78>
                capture = mcfg.midrc;
 800c8f0:	4b2d      	ldr	r3, [pc, #180]	; (800c9a8 <computeRC+0x128>)
 800c8f2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c8f6:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c8f8:	4b2c      	ldr	r3, [pc, #176]	; (800c9ac <computeRC+0x12c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	425a      	negs	r2, r3
 800c8fe:	f003 0303 	and.w	r3, r3, #3
 800c902:	f002 0203 	and.w	r2, r2, #3
 800c906:	bf58      	it	pl
 800c908:	4253      	negpl	r3, r2
 800c90a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c90e:	4928      	ldr	r1, [pc, #160]	; (800c9b0 <computeRC+0x130>)
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	0092      	lsls	r2, r2, #2
 800c914:	4413      	add	r3, r2
 800c916:	4602      	mov	r2, r0
 800c918:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c91c:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <computeRC+0x124>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2100      	movs	r1, #0
 800c922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	e016      	b.n	800c95a <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c92c:	4a1d      	ldr	r2, [pc, #116]	; (800c9a4 <computeRC+0x124>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c934:	b29a      	uxth	r2, r3
 800c936:	481e      	ldr	r0, [pc, #120]	; (800c9b0 <computeRC+0x130>)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	0099      	lsls	r1, r3, #2
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	440b      	add	r3, r1
 800c940:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c944:	b29b      	uxth	r3, r3
 800c946:	4413      	add	r3, r2
 800c948:	b29b      	uxth	r3, r3
 800c94a:	b219      	sxth	r1, r3
 800c94c:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <computeRC+0x124>)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3301      	adds	r3, #1
 800c958:	60bb      	str	r3, [r7, #8]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	dde5      	ble.n	800c92c <computeRC+0xac>
            rcData[chan] /= 4;
 800c960:	4a10      	ldr	r2, [pc, #64]	; (800c9a4 <computeRC+0x124>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da00      	bge.n	800c96e <computeRC+0xee>
 800c96c:	3303      	adds	r3, #3
 800c96e:	109b      	asrs	r3, r3, #2
 800c970:	b219      	sxth	r1, r3
 800c972:	4a0c      	ldr	r2, [pc, #48]	; (800c9a4 <computeRC+0x124>)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3301      	adds	r3, #1
 800c97e:	607b      	str	r3, [r7, #4]
 800c980:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <computeRC+0x128>)
 800c982:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c986:	461a      	mov	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4293      	cmp	r3, r2
 800c98c:	db9e      	blt.n	800c8cc <computeRC+0x4c>
        rcAverageIndex++;
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <computeRC+0x12c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <computeRC+0x12c>)
 800c996:	6013      	str	r3, [r2, #0]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20000e88 	.word	0x20000e88
 800c9a4:	20002184 	.word	0x20002184
 800c9a8:	200019c8 	.word	0x200019c8
 800c9ac:	20000edc 	.word	0x20000edc
 800c9b0:	20000ee0 	.word	0x20000ee0

0800c9b4 <mwArm>:

static void mwArm(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c9b8:	4b1b      	ldr	r3, [pc, #108]	; (800ca28 <mwArm+0x74>)
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d126      	bne.n	800ca0e <mwArm+0x5a>
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <mwArm+0x78>)
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d022      	beq.n	800ca0e <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c9c8:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <mwArm+0x78>)
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d128      	bne.n	800ca22 <mwArm+0x6e>
            f.ARMED = 1;
 800c9d0:	4b16      	ldr	r3, [pc, #88]	; (800ca2c <mwArm+0x78>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <mwArm+0x7c>)
 800c9d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9dc:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <mwArm+0x80>)
 800c9de:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c9e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c9e4:	f7fa fafe 	bl	8006fe4 <feature>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <mwArm+0x52>
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <mwArm+0x78>)
 800c9f0:	7adb      	ldrb	r3, [r3, #11]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <mwArm+0x52>
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <mwArm+0x84>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d903      	bls.n	800ca06 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c9fe:	2007      	movs	r0, #7
 800ca00:	f7f7 fafe 	bl	8004000 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca04:	e00d      	b.n	800ca22 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800ca06:	2006      	movs	r0, #6
 800ca08:	f7f7 fafa 	bl	8004000 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca0c:	e009      	b.n	800ca22 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <mwArm+0x78>)
 800ca10:	785b      	ldrb	r3, [r3, #1]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d105      	bne.n	800ca22 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ca16:	2201      	movs	r2, #1
 800ca18:	21ff      	movs	r1, #255	; 0xff
 800ca1a:	2002      	movs	r0, #2
 800ca1c:	f7ff fae4 	bl	800bfe8 <blinkLED>
    }
}
 800ca20:	e7ff      	b.n	800ca22 <mwArm+0x6e>
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20000fc2 	.word	0x20000fc2
 800ca2c:	20002014 	.word	0x20002014
 800ca30:	20002270 	.word	0x20002270
 800ca34:	20002180 	.word	0x20002180
 800ca38:	20002176 	.word	0x20002176

0800ca3c <mwDisarm>:

static void mwDisarm(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <mwDisarm+0x2c>)
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <mwDisarm+0x26>
        f.ARMED = 0;
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <mwDisarm+0x2c>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca4e:	2005      	movs	r0, #5
 800ca50:	f7f7 fad6 	bl	8004000 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca54:	4b05      	ldr	r3, [pc, #20]	; (800ca6c <mwDisarm+0x30>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <mwDisarm+0x26>
            disarmTime = 0;
 800ca5c:	4b03      	ldr	r3, [pc, #12]	; (800ca6c <mwDisarm+0x30>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
    }
}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20002014 	.word	0x20002014
 800ca6c:	20000ea0 	.word	0x20000ea0

0800ca70 <mwVario>:

static void mwVario(void)
{
 800ca70:	b480      	push	{r7}
 800ca72:	af00      	add	r7, sp, #0

}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
	...

0800ca80 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08e      	sub	sp, #56	; 0x38
 800ca84:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800ca86:	2300      	movs	r3, #0
 800ca88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8e:	2300      	movs	r3, #0
 800ca90:	623b      	str	r3, [r7, #32]
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800ca96:	4b91      	ldr	r3, [pc, #580]	; (800ccdc <pidMultiWii+0x25c>)
 800ca98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfb8      	it	lt
 800caa0:	425b      	neglt	r3, r3
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	4b8d      	ldr	r3, [pc, #564]	; (800ccdc <pidMultiWii+0x25c>)
 800caa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfb8      	it	lt
 800caae:	425b      	neglt	r3, r3
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf38      	it	cc
 800cab6:	4613      	movcc	r3, r2
 800cab8:	b29b      	uxth	r3, r3
 800caba:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cabc:	2300      	movs	r3, #0
 800cabe:	637b      	str	r3, [r7, #52]	; 0x34
 800cac0:	e189      	b.n	800cdd6 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800cac2:	4b87      	ldr	r3, [pc, #540]	; (800cce0 <pidMultiWii+0x260>)
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <pidMultiWii+0x52>
 800caca:	4b85      	ldr	r3, [pc, #532]	; (800cce0 <pidMultiWii+0x260>)
 800cacc:	791b      	ldrb	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d060      	beq.n	800cb94 <pidMultiWii+0x114>
 800cad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	dc5d      	bgt.n	800cb94 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cad8:	4a80      	ldr	r2, [pc, #512]	; (800ccdc <pidMultiWii+0x25c>)
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4980      	ldr	r1, [pc, #512]	; (800cce4 <pidMultiWii+0x264>)
 800cae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cae6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800caea:	4413      	add	r3, r2
 800caec:	4a7e      	ldr	r2, [pc, #504]	; (800cce8 <pidMultiWii+0x268>)
 800caee:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800caf2:	4251      	negs	r1, r2
 800caf4:	4a7c      	ldr	r2, [pc, #496]	; (800cce8 <pidMultiWii+0x268>)
 800caf6:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7f7 f8f0 	bl	8003ce0 <constrain>
 800cb00:	4602      	mov	r2, r0
 800cb02:	497a      	ldr	r1, [pc, #488]	; (800ccec <pidMultiWii+0x26c>)
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	4978      	ldr	r1, [pc, #480]	; (800ccf0 <pidMultiWii+0x270>)
 800cb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb10:	3314      	adds	r3, #20
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	440b      	add	r3, r1
 800cb16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cb1e:	4b74      	ldr	r3, [pc, #464]	; (800ccf0 <pidMultiWii+0x270>)
 800cb20:	7a1b      	ldrb	r3, [r3, #8]
 800cb22:	461a      	mov	r2, r3
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	fb03 f302 	mul.w	r3, r3, r2
 800cb2a:	4a72      	ldr	r2, [pc, #456]	; (800ccf4 <pidMultiWii+0x274>)
 800cb2c:	fb82 1203 	smull	r1, r2, r2, r3
 800cb30:	1152      	asrs	r2, r2, #5
 800cb32:	17db      	asrs	r3, r3, #31
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cb38:	4b6d      	ldr	r3, [pc, #436]	; (800ccf0 <pidMultiWii+0x270>)
 800cb3a:	7f1b      	ldrb	r3, [r3, #28]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	4613      	mov	r3, r2
 800cb40:	079b      	lsls	r3, r3, #30
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	1a99      	subs	r1, r3, r2
 800cb48:	4b69      	ldr	r3, [pc, #420]	; (800ccf0 <pidMultiWii+0x270>)
 800cb4a:	7f1b      	ldrb	r3, [r3, #28]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	461a      	mov	r2, r3
 800cb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb58:	f7f7 f8c2 	bl	8003ce0 <constrain>
 800cb5c:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cb5e:	4a66      	ldr	r2, [pc, #408]	; (800ccf8 <pidMultiWii+0x278>)
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb6e:	4963      	ldr	r1, [pc, #396]	; (800ccfc <pidMultiWii+0x27c>)
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f7 f8b5 	bl	8003ce0 <constrain>
 800cb76:	4602      	mov	r2, r0
 800cb78:	495f      	ldr	r1, [pc, #380]	; (800ccf8 <pidMultiWii+0x278>)
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cb80:	4a5d      	ldr	r2, [pc, #372]	; (800ccf8 <pidMultiWii+0x278>)
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb88:	4a59      	ldr	r2, [pc, #356]	; (800ccf0 <pidMultiWii+0x270>)
 800cb8a:	7c92      	ldrb	r2, [r2, #18]
 800cb8c:	fb02 f303 	mul.w	r3, r2, r3
 800cb90:	131b      	asrs	r3, r3, #12
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cb94:	4b52      	ldr	r3, [pc, #328]	; (800cce0 <pidMultiWii+0x260>)
 800cb96:	78db      	ldrb	r3, [r3, #3]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <pidMultiWii+0x12a>
 800cb9c:	4b50      	ldr	r3, [pc, #320]	; (800cce0 <pidMultiWii+0x260>)
 800cb9e:	791b      	ldrb	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <pidMultiWii+0x12a>
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d15f      	bne.n	800cc6a <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cbaa:	4a4c      	ldr	r2, [pc, #304]	; (800ccdc <pidMultiWii+0x25c>)
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4a4c      	ldr	r2, [pc, #304]	; (800ccf0 <pidMultiWii+0x270>)
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	fb91 f3f3 	sdiv	r3, r1, r3
 800cbcc:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cbce:	4a4c      	ldr	r2, [pc, #304]	; (800cd00 <pidMultiWii+0x280>)
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <pidMultiWii+0x25c>)
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbe6:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cbe8:	4a46      	ldr	r2, [pc, #280]	; (800cd04 <pidMultiWii+0x284>)
 800cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cbf8:	4943      	ldr	r1, [pc, #268]	; (800cd08 <pidMultiWii+0x288>)
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f7 f870 	bl	8003ce0 <constrain>
 800cc00:	4602      	mov	r2, r0
 800cc02:	4940      	ldr	r1, [pc, #256]	; (800cd04 <pidMultiWii+0x284>)
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cc0a:	4a3d      	ldr	r2, [pc, #244]	; (800cd00 <pidMultiWii+0x280>)
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bfb8      	it	lt
 800cc16:	425b      	neglt	r3, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc1e:	d80c      	bhi.n	800cc3a <pidMultiWii+0x1ba>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d10e      	bne.n	800cc44 <pidMultiWii+0x1c4>
 800cc26:	4a2d      	ldr	r2, [pc, #180]	; (800ccdc <pidMultiWii+0x25c>)
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	425b      	neglt	r3, r3
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	2b64      	cmp	r3, #100	; 0x64
 800cc38:	d904      	bls.n	800cc44 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cc3a:	4a32      	ldr	r2, [pc, #200]	; (800cd04 <pidMultiWii+0x284>)
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc44:	4a2f      	ldr	r2, [pc, #188]	; (800cd04 <pidMultiWii+0x284>)
 800cc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4c:	4a2f      	ldr	r2, [pc, #188]	; (800cd0c <pidMultiWii+0x28c>)
 800cc4e:	fb82 1203 	smull	r1, r2, r2, r3
 800cc52:	10d2      	asrs	r2, r2, #3
 800cc54:	17db      	asrs	r3, r3, #31
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	4925      	ldr	r1, [pc, #148]	; (800ccf0 <pidMultiWii+0x270>)
 800cc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc5c:	440a      	add	r2, r1
 800cc5e:	320b      	adds	r2, #11
 800cc60:	7812      	ldrb	r2, [r2, #0]
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	119b      	asrs	r3, r3, #6
 800cc68:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cc6a:	4b1d      	ldr	r3, [pc, #116]	; (800cce0 <pidMultiWii+0x260>)
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d027      	beq.n	800ccc2 <pidMultiWii+0x242>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	dc24      	bgt.n	800ccc2 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc80:	fb02 f203 	mul.w	r2, r2, r3
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	69b9      	ldr	r1, [r7, #24]
 800cc88:	fb01 f303 	mul.w	r3, r1, r3
 800cc8c:	4413      	add	r3, r2
 800cc8e:	4a1f      	ldr	r2, [pc, #124]	; (800cd0c <pidMultiWii+0x28c>)
 800cc90:	fb82 1203 	smull	r1, r2, r2, r3
 800cc94:	1152      	asrs	r2, r2, #5
 800cc96:	17db      	asrs	r3, r3, #31
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca4:	fb02 f203 	mul.w	r2, r2, r3
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	69b9      	ldr	r1, [r7, #24]
 800ccac:	fb01 f303 	mul.w	r3, r1, r3
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4a16      	ldr	r2, [pc, #88]	; (800cd0c <pidMultiWii+0x28c>)
 800ccb4:	fb82 1203 	smull	r1, r2, r2, r3
 800ccb8:	1152      	asrs	r2, r2, #5
 800ccba:	17db      	asrs	r3, r3, #31
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc0:	e02a      	b.n	800cd18 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pidMultiWii+0x260>)
 800ccc4:	78db      	ldrb	r3, [r3, #3]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d022      	beq.n	800cd10 <pidMultiWii+0x290>
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	dc1f      	bgt.n	800cd10 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd8:	e01e      	b.n	800cd18 <pidMultiWii+0x298>
 800ccda:	bf00      	nop
 800ccdc:	200020b0 	.word	0x200020b0
 800cce0:	20002014 	.word	0x20002014
 800cce4:	20000e90 	.word	0x20000e90
 800cce8:	200019c8 	.word	0x200019c8
 800ccec:	20000cd8 	.word	0x20000cd8
 800ccf0:	20001890 	.word	0x20001890
 800ccf4:	51eb851f 	.word	0x51eb851f
 800ccf8:	20000eb0 	.word	0x20000eb0
 800ccfc:	ffffd8f0 	.word	0xffffd8f0
 800cd00:	20000cc8 	.word	0x20000cc8
 800cd04:	20000ea4 	.word	0x20000ea4
 800cd08:	ffffc180 	.word	0xffffc180
 800cd0c:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cd18:	4a33      	ldr	r2, [pc, #204]	; (800cde8 <pidMultiWii+0x368>)
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd20:	4619      	mov	r1, r3
 800cd22:	4a32      	ldr	r2, [pc, #200]	; (800cdec <pidMultiWii+0x36c>)
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	fb03 f301 	mul.w	r3, r3, r1
 800cd2e:	4a30      	ldr	r2, [pc, #192]	; (800cdf0 <pidMultiWii+0x370>)
 800cd30:	fb82 1203 	smull	r1, r2, r2, r3
 800cd34:	1152      	asrs	r2, r2, #5
 800cd36:	17db      	asrs	r3, r3, #31
 800cd38:	1a9b      	subs	r3, r3, r2
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3c:	4413      	add	r3, r2
 800cd3e:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd40:	4a29      	ldr	r2, [pc, #164]	; (800cde8 <pidMultiWii+0x368>)
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <pidMultiWii+0x374>)
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd52:	1acb      	subs	r3, r1, r3
 800cd54:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd56:	4a24      	ldr	r2, [pc, #144]	; (800cde8 <pidMultiWii+0x368>)
 800cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cd5e:	4a25      	ldr	r2, [pc, #148]	; (800cdf4 <pidMultiWii+0x374>)
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cd66:	4a24      	ldr	r2, [pc, #144]	; (800cdf8 <pidMultiWii+0x378>)
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd6e:	4923      	ldr	r1, [pc, #140]	; (800cdfc <pidMultiWii+0x37c>)
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd76:	4413      	add	r3, r2
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cd7e:	4a1e      	ldr	r2, [pc, #120]	; (800cdf8 <pidMultiWii+0x378>)
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd86:	491d      	ldr	r1, [pc, #116]	; (800cdfc <pidMultiWii+0x37c>)
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cd8e:	491a      	ldr	r1, [pc, #104]	; (800cdf8 <pidMultiWii+0x378>)
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cd98:	4a19      	ldr	r2, [pc, #100]	; (800ce00 <pidMultiWii+0x380>)
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	4413      	add	r3, r2
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	fb03 f302 	mul.w	r3, r3, r2
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da00      	bge.n	800cdae <pidMultiWii+0x32e>
 800cdac:	331f      	adds	r3, #31
 800cdae:	115b      	asrs	r3, r3, #5
 800cdb0:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	b219      	sxth	r1, r3
 800cdc8:	4a0e      	ldr	r2, [pc, #56]	; (800ce04 <pidMultiWii+0x384>)
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f77f ae72 	ble.w	800cac2 <pidMultiWii+0x42>
    }
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	3738      	adds	r7, #56	; 0x38
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20000cc8 	.word	0x20000cc8
 800cdec:	200021b4 	.word	0x200021b4
 800cdf0:	66666667 	.word	0x66666667
 800cdf4:	20000f70 	.word	0x20000f70
 800cdf8:	20000f78 	.word	0x20000f78
 800cdfc:	20000f84 	.word	0x20000f84
 800ce00:	200021a8 	.word	0x200021a8
 800ce04:	200020c4 	.word	0x200020c4

0800ce08 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800ce12:	2300      	movs	r3, #0
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
 800ce16:	e0f2      	b.n	800cffe <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d10b      	bne.n	800ce36 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800ce1e:	4b7c      	ldr	r3, [pc, #496]	; (800d010 <pidRewrite+0x208>)
 800ce20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ce24:	331b      	adds	r3, #27
 800ce26:	4a7b      	ldr	r2, [pc, #492]	; (800d014 <pidRewrite+0x20c>)
 800ce28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	115b      	asrs	r3, r3, #5
 800ce32:	623b      	str	r3, [r7, #32]
 800ce34:	e053      	b.n	800cede <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800ce36:	4a77      	ldr	r2, [pc, #476]	; (800d014 <pidRewrite+0x20c>)
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4a75      	ldr	r2, [pc, #468]	; (800d018 <pidRewrite+0x210>)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce48:	440b      	add	r3, r1
 800ce4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce4e:	4973      	ldr	r1, [pc, #460]	; (800d01c <pidRewrite+0x214>)
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7f6 ff45 	bl	8003ce0 <constrain>
 800ce56:	4602      	mov	r2, r0
 800ce58:	4971      	ldr	r1, [pc, #452]	; (800d020 <pidRewrite+0x218>)
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ce60:	1ad2      	subs	r2, r2, r3
 800ce62:	496b      	ldr	r1, [pc, #428]	; (800d010 <pidRewrite+0x208>)
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	3314      	adds	r3, #20
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce7a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ce7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce86:	ee17 3a90 	vmov	r3, s15
 800ce8a:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ce8c:	4b65      	ldr	r3, [pc, #404]	; (800d024 <pidRewrite+0x21c>)
 800ce8e:	78db      	ldrb	r3, [r3, #3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11c      	bne.n	800cece <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800ce94:	4a5e      	ldr	r2, [pc, #376]	; (800d010 <pidRewrite+0x208>)
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	4413      	add	r3, r2
 800ce9a:	3323      	adds	r3, #35	; 0x23
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	331b      	adds	r3, #27
 800cea0:	495c      	ldr	r1, [pc, #368]	; (800d014 <pidRewrite+0x20c>)
 800cea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	111b      	asrs	r3, r3, #4
 800ceae:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800ceb0:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <pidRewrite+0x21c>)
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800ceb8:	4b55      	ldr	r3, [pc, #340]	; (800d010 <pidRewrite+0x208>)
 800ceba:	7c9b      	ldrb	r3, [r3, #18]
 800cebc:	461a      	mov	r2, r3
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	fb03 f302 	mul.w	r3, r3, r2
 800cec4:	121b      	asrs	r3, r3, #8
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4413      	add	r3, r2
 800ceca:	623b      	str	r3, [r7, #32]
 800cecc:	e007      	b.n	800cede <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cece:	4b50      	ldr	r3, [pc, #320]	; (800d010 <pidRewrite+0x208>)
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	461a      	mov	r2, r3
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	fb03 f302 	mul.w	r3, r3, r2
 800ceda:	111b      	asrs	r3, r3, #4
 800cedc:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cede:	4a52      	ldr	r2, [pc, #328]	; (800d028 <pidRewrite+0x220>)
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cee6:	461a      	mov	r2, r3
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ceee:	4a48      	ldr	r2, [pc, #288]	; (800d010 <pidRewrite+0x208>)
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	4413      	add	r3, r2
 800cef4:	3301      	adds	r3, #1
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	461a      	mov	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	fb03 f302 	mul.w	r3, r3, r2
 800cf00:	11db      	asrs	r3, r3, #7
 800cf02:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cf04:	4a49      	ldr	r2, [pc, #292]	; (800d02c <pidRewrite+0x224>)
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf0c:	4b48      	ldr	r3, [pc, #288]	; (800d030 <pidRewrite+0x228>)
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	fb03 f301 	mul.w	r3, r3, r1
 800cf18:	12db      	asrs	r3, r3, #11
 800cf1a:	483d      	ldr	r0, [pc, #244]	; (800d010 <pidRewrite+0x208>)
 800cf1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf1e:	4401      	add	r1, r0
 800cf20:	310b      	adds	r1, #11
 800cf22:	7809      	ldrb	r1, [r1, #0]
 800cf24:	fb01 f303 	mul.w	r3, r1, r3
 800cf28:	441a      	add	r2, r3
 800cf2a:	4940      	ldr	r1, [pc, #256]	; (800d02c <pidRewrite+0x224>)
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cf32:	4a3e      	ldr	r2, [pc, #248]	; (800d02c <pidRewrite+0x224>)
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf3e:	493d      	ldr	r1, [pc, #244]	; (800d034 <pidRewrite+0x22c>)
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f6 fecd 	bl	8003ce0 <constrain>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4938      	ldr	r1, [pc, #224]	; (800d02c <pidRewrite+0x224>)
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf50:	4a36      	ldr	r2, [pc, #216]	; (800d02c <pidRewrite+0x224>)
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	135b      	asrs	r3, r3, #13
 800cf5a:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cf5c:	4a36      	ldr	r2, [pc, #216]	; (800d038 <pidRewrite+0x230>)
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cf6a:	4933      	ldr	r1, [pc, #204]	; (800d038 <pidRewrite+0x230>)
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cf74:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <pidRewrite+0x228>)
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	091b      	lsrs	r3, r3, #4
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	461a      	mov	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	fb03 f302 	mul.w	r3, r3, r2
 800cf8e:	119b      	asrs	r3, r3, #6
 800cf90:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cf92:	4a2a      	ldr	r2, [pc, #168]	; (800d03c <pidRewrite+0x234>)
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf9a:	4929      	ldr	r1, [pc, #164]	; (800d040 <pidRewrite+0x238>)
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cfaa:	4a24      	ldr	r2, [pc, #144]	; (800d03c <pidRewrite+0x234>)
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfb2:	4923      	ldr	r1, [pc, #140]	; (800d040 <pidRewrite+0x238>)
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cfba:	4920      	ldr	r1, [pc, #128]	; (800d03c <pidRewrite+0x234>)
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cfc4:	4a12      	ldr	r2, [pc, #72]	; (800d010 <pidRewrite+0x208>)
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	4413      	add	r3, r2
 800cfca:	3315      	adds	r3, #21
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	fb03 f302 	mul.w	r3, r3, r2
 800cfd6:	121b      	asrs	r3, r3, #8
 800cfd8:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	b219      	sxth	r1, r3
 800cff0:	4a14      	ldr	r2, [pc, #80]	; (800d044 <pidRewrite+0x23c>)
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	3301      	adds	r3, #1
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	2b02      	cmp	r3, #2
 800d002:	f77f af09 	ble.w	800ce18 <pidRewrite+0x10>
    }
}
 800d006:	bf00      	nop
 800d008:	bf00      	nop
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20001890 	.word	0x20001890
 800d014:	200020b0 	.word	0x200020b0
 800d018:	20000e90 	.word	0x20000e90
 800d01c:	fffffe0c 	.word	0xfffffe0c
 800d020:	20000cd8 	.word	0x20000cd8
 800d024:	20002014 	.word	0x20002014
 800d028:	20000cc8 	.word	0x20000cc8
 800d02c:	20000ea4 	.word	0x20000ea4
 800d030:	20000e80 	.word	0x20000e80
 800d034:	ffe00000 	.word	0xffe00000
 800d038:	20000f90 	.word	0x20000f90
 800d03c:	20000f9c 	.word	0x20000f9c
 800d040:	20000fa8 	.word	0x20000fa8
 800d044:	200020c4 	.word	0x200020c4

0800d048 <setPIDController>:

void setPIDController(int type)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d003      	beq.n	800d05e <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d056:	4b07      	ldr	r3, [pc, #28]	; (800d074 <setPIDController+0x2c>)
 800d058:	4a07      	ldr	r2, [pc, #28]	; (800d078 <setPIDController+0x30>)
 800d05a:	601a      	str	r2, [r3, #0]
            break;
 800d05c:	e003      	b.n	800d066 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d05e:	4b05      	ldr	r3, [pc, #20]	; (800d074 <setPIDController+0x2c>)
 800d060:	4a06      	ldr	r2, [pc, #24]	; (800d07c <setPIDController+0x34>)
 800d062:	601a      	str	r2, [r3, #0]
            break;
 800d064:	bf00      	nop
    }
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000050 	.word	0x20000050
 800d078:	0800ca81 	.word	0x0800ca81
 800d07c:	0800ce09 	.word	0x0800ce09

0800d080 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)	// 50Hz
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d090:	2300      	movs	r3, #0
 800d092:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d094:	f7ff fbf4 	bl	800c880 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d09c:	f7f9 ffa2 	bl	8006fe4 <feature>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d0a6:	4bb2      	ldr	r3, [pc, #712]	; (800d370 <taskComputeRc+0x2f0>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <taskComputeRc+0x32>
                mwDisarm();
 800d0ae:	f7ff fcc5 	bl	800ca3c <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d0b2:	f001 f9d7 	bl	800e464 <RSSI_getValue>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4bae      	ldr	r3, [pc, #696]	; (800d374 <taskComputeRc+0x2f4>)
 800d0bc:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d0be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0c2:	f7f9 ff8f 	bl	8006fe4 <feature>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d106      	bne.n	800d0da <taskComputeRc+0x5a>
 800d0cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d0d0:	f7f9 ff88 	bl	8006fe4 <feature>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d072      	beq.n	800d1c0 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d0da:	4ba7      	ldr	r3, [pc, #668]	; (800d378 <taskComputeRc+0x2f8>)
 800d0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4ba6      	ldr	r3, [pc, #664]	; (800d37c <taskComputeRc+0x2fc>)
 800d0e4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	dd43      	ble.n	800d17c <taskComputeRc+0xfc>
 800d0f4:	4ba2      	ldr	r3, [pc, #648]	; (800d380 <taskComputeRc+0x300>)
 800d0f6:	785b      	ldrb	r3, [r3, #1]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d03f      	beq.n	800d17c <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	613b      	str	r3, [r7, #16]
 800d100:	e00a      	b.n	800d118 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d102:	4ba0      	ldr	r3, [pc, #640]	; (800d384 <taskComputeRc+0x304>)
 800d104:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d108:	b219      	sxth	r1, r3
 800d10a:	4a9f      	ldr	r2, [pc, #636]	; (800d388 <taskComputeRc+0x308>)
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3301      	adds	r3, #1
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	ddf1      	ble.n	800d102 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d11e:	4b97      	ldr	r3, [pc, #604]	; (800d37c <taskComputeRc+0x2fc>)
 800d120:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d124:	b21a      	sxth	r2, r3
 800d126:	4b98      	ldr	r3, [pc, #608]	; (800d388 <taskComputeRc+0x308>)
 800d128:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d12a:	2003      	movs	r0, #3
 800d12c:	f7f6 ff68 	bl	8004000 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d130:	4b91      	ldr	r3, [pc, #580]	; (800d378 <taskComputeRc+0x2f8>)
 800d132:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d136:	4619      	mov	r1, r3
 800d138:	4b90      	ldr	r3, [pc, #576]	; (800d37c <taskComputeRc+0x2fc>)
 800d13a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d13e:	461a      	mov	r2, r3
 800d140:	4b8e      	ldr	r3, [pc, #568]	; (800d37c <taskComputeRc+0x2fc>)
 800d142:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d146:	441a      	add	r2, r3
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	4299      	cmp	r1, r3
 800d150:	dd0b      	ble.n	800d16a <taskComputeRc+0xea>
 800d152:	4b8b      	ldr	r3, [pc, #556]	; (800d380 <taskComputeRc+0x300>)
 800d154:	7c9b      	ldrb	r3, [r3, #18]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d15a:	f7ff fc6f 	bl	800ca3c <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d15e:	4b88      	ldr	r3, [pc, #544]	; (800d380 <taskComputeRc+0x300>)
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d164:	2004      	movs	r0, #4
 800d166:	f7f6 ff4b 	bl	8004000 <buzzer>
                }
                failsafeEvents++;
 800d16a:	4b88      	ldr	r3, [pc, #544]	; (800d38c <taskComputeRc+0x30c>)
 800d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d170:	b29b      	uxth	r3, r3
 800d172:	3301      	adds	r3, #1
 800d174:	b29b      	uxth	r3, r3
 800d176:	b21a      	sxth	r2, r3
 800d178:	4b84      	ldr	r3, [pc, #528]	; (800d38c <taskComputeRc+0x30c>)
 800d17a:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d17c:	4b7e      	ldr	r3, [pc, #504]	; (800d378 <taskComputeRc+0x2f8>)
 800d17e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d182:	4619      	mov	r1, r3
 800d184:	4b7d      	ldr	r3, [pc, #500]	; (800d37c <taskComputeRc+0x2fc>)
 800d186:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d18a:	461a      	mov	r2, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	4299      	cmp	r1, r3
 800d194:	dd0b      	ble.n	800d1ae <taskComputeRc+0x12e>
 800d196:	4b7a      	ldr	r3, [pc, #488]	; (800d380 <taskComputeRc+0x300>)
 800d198:	785b      	ldrb	r3, [r3, #1]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d19e:	f7ff fc4d 	bl	800ca3c <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1a2:	4b77      	ldr	r3, [pc, #476]	; (800d380 <taskComputeRc+0x300>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d1a8:	2004      	movs	r0, #4
 800d1aa:	f7f6 ff29 	bl	8004000 <buzzer>
            }
            failsafeCnt++;
 800d1ae:	4b72      	ldr	r3, [pc, #456]	; (800d378 <taskComputeRc+0x2f8>)
 800d1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b21a      	sxth	r2, r3
 800d1bc:	4b6e      	ldr	r3, [pc, #440]	; (800d378 <taskComputeRc+0x2f8>)
 800d1be:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	e021      	b.n	800d20a <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	089b      	lsrs	r3, r3, #2
 800d1ca:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d1cc:	4a6e      	ldr	r2, [pc, #440]	; (800d388 <taskComputeRc+0x308>)
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b6b      	ldr	r3, [pc, #428]	; (800d384 <taskComputeRc+0x304>)
 800d1d8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	dd03      	ble.n	800d1e8 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1e6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d1e8:	4a67      	ldr	r2, [pc, #412]	; (800d388 <taskComputeRc+0x308>)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b64      	ldr	r3, [pc, #400]	; (800d384 <taskComputeRc+0x304>)
 800d1f4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	da03      	bge.n	800d204 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d202:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	3301      	adds	r3, #1
 800d208:	613b      	str	r3, [r7, #16]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	ddda      	ble.n	800d1c6 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d210:	4b5f      	ldr	r3, [pc, #380]	; (800d390 <taskComputeRc+0x310>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	7dfa      	ldrb	r2, [r7, #23]
 800d216:	429a      	cmp	r2, r3
 800d218:	d10a      	bne.n	800d230 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d21a:	4b5e      	ldr	r3, [pc, #376]	; (800d394 <taskComputeRc+0x314>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2bf9      	cmp	r3, #249	; 0xf9
 800d220:	d809      	bhi.n	800d236 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d222:	4b5c      	ldr	r3, [pc, #368]	; (800d394 <taskComputeRc+0x314>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b5a      	ldr	r3, [pc, #360]	; (800d394 <taskComputeRc+0x314>)
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e002      	b.n	800d236 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d230:	4b58      	ldr	r3, [pc, #352]	; (800d394 <taskComputeRc+0x314>)
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d236:	4a56      	ldr	r2, [pc, #344]	; (800d390 <taskComputeRc+0x310>)
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d23c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d240:	f7f9 fed0 	bl	8006fe4 <feature>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01e      	beq.n	800d288 <taskComputeRc+0x208>
 800d24a:	4b4f      	ldr	r3, [pc, #316]	; (800d388 <taskComputeRc+0x308>)
 800d24c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d250:	461a      	mov	r2, r3
 800d252:	4b4c      	ldr	r3, [pc, #304]	; (800d384 <taskComputeRc+0x304>)
 800d254:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d258:	4619      	mov	r1, r3
 800d25a:	4b4a      	ldr	r3, [pc, #296]	; (800d384 <taskComputeRc+0x304>)
 800d25c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d260:	1acb      	subs	r3, r1, r3
 800d262:	429a      	cmp	r2, r3
 800d264:	dd10      	ble.n	800d288 <taskComputeRc+0x208>
 800d266:	4b48      	ldr	r3, [pc, #288]	; (800d388 <taskComputeRc+0x308>)
 800d268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d26c:	461a      	mov	r2, r3
 800d26e:	4b45      	ldr	r3, [pc, #276]	; (800d384 <taskComputeRc+0x304>)
 800d270:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d274:	4619      	mov	r1, r3
 800d276:	4b43      	ldr	r3, [pc, #268]	; (800d384 <taskComputeRc+0x304>)
 800d278:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d27c:	440b      	add	r3, r1
 800d27e:	429a      	cmp	r2, r3
 800d280:	da02      	bge.n	800d288 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d282:	2301      	movs	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
 800d286:	e014      	b.n	800d2b2 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d28c:	f7f9 feaa 	bl	8006fe4 <feature>
 800d290:	4603      	mov	r3, r0
 800d292:	f083 0301 	eor.w	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <taskComputeRc+0x232>
 800d29c:	4b3a      	ldr	r3, [pc, #232]	; (800d388 <taskComputeRc+0x308>)
 800d29e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	4b37      	ldr	r3, [pc, #220]	; (800d384 <taskComputeRc+0x304>)
 800d2a6:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	da01      	bge.n	800d2b2 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d2b2:	7afb      	ldrb	r3, [r7, #11]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01c      	beq.n	800d2f2 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d2b8:	4b37      	ldr	r3, [pc, #220]	; (800d398 <taskComputeRc+0x318>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d2be:	4b36      	ldr	r3, [pc, #216]	; (800d398 <taskComputeRc+0x318>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d2c4:	4b34      	ldr	r3, [pc, #208]	; (800d398 <taskComputeRc+0x318>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d2ca:	4b34      	ldr	r3, [pc, #208]	; (800d39c <taskComputeRc+0x31c>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d2d0:	4b32      	ldr	r3, [pc, #200]	; (800d39c <taskComputeRc+0x31c>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d2d6:	4b29      	ldr	r3, [pc, #164]	; (800d37c <taskComputeRc+0x2fc>)
 800d2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d009      	beq.n	800d2f2 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d2de:	4b24      	ldr	r3, [pc, #144]	; (800d370 <taskComputeRc+0x2f0>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <taskComputeRc+0x272>
 800d2e6:	4b26      	ldr	r3, [pc, #152]	; (800d380 <taskComputeRc+0x300>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <taskComputeRc+0x272>
                    mwArm();
 800d2ee:	f7ff fb61 	bl	800c9b4 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d2f2:	4b22      	ldr	r3, [pc, #136]	; (800d37c <taskComputeRc+0x2fc>)
 800d2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d014      	beq.n	800d324 <taskComputeRc+0x2a4>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d2fa:	4b1d      	ldr	r3, [pc, #116]	; (800d370 <taskComputeRc+0x2f0>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d110      	bne.n	800d324 <taskComputeRc+0x2a4>
 800d302:	4b1f      	ldr	r3, [pc, #124]	; (800d380 <taskComputeRc+0x300>)
 800d304:	785b      	ldrb	r3, [r3, #1]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00c      	beq.n	800d324 <taskComputeRc+0x2a4>
                if (mcfg.disarm_kill_switch) {
 800d30a:	4b1e      	ldr	r3, [pc, #120]	; (800d384 <taskComputeRc+0x304>)
 800d30c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <taskComputeRc+0x29a>
                    mwDisarm();
 800d314:	f7ff fb92 	bl	800ca3c <mwDisarm>
 800d318:	e004      	b.n	800d324 <taskComputeRc+0x2a4>
                } else if (isThrottleLow) {
 800d31a:	7afb      	ldrb	r3, [r7, #11]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <taskComputeRc+0x2a4>
                    mwDisarm();
 800d320:	f7ff fb8c 	bl	800ca3c <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d324:	4b1b      	ldr	r3, [pc, #108]	; (800d394 <taskComputeRc+0x314>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b14      	cmp	r3, #20
 800d32a:	f040 8130 	bne.w	800d58e <taskComputeRc+0x50e>
            if (f.ARMED) {      // actions during armed
 800d32e:	4b14      	ldr	r3, [pc, #80]	; (800d380 <taskComputeRc+0x300>)
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d034      	beq.n	800d3a0 <taskComputeRc+0x320>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d336:	4b11      	ldr	r3, [pc, #68]	; (800d37c <taskComputeRc+0x2fc>)
 800d338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d105      	bne.n	800d34a <taskComputeRc+0x2ca>
 800d33e:	4b14      	ldr	r3, [pc, #80]	; (800d390 <taskComputeRc+0x310>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b5f      	cmp	r3, #95	; 0x5f
 800d344:	d101      	bne.n	800d34a <taskComputeRc+0x2ca>
                    mwDisarm();
 800d346:	f7ff fb79 	bl	800ca3c <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d34a:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <taskComputeRc+0x304>)
 800d34c:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 811c 	beq.w	800d58e <taskComputeRc+0x50e>
 800d356:	4b09      	ldr	r3, [pc, #36]	; (800d37c <taskComputeRc+0x2fc>)
 800d358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 8117 	bne.w	800d58e <taskComputeRc+0x50e>
 800d360:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <taskComputeRc+0x310>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b7d      	cmp	r3, #125	; 0x7d
 800d366:	f040 8112 	bne.w	800d58e <taskComputeRc+0x50e>
                    mwDisarm();
 800d36a:	f7ff fb67 	bl	800ca3c <mwDisarm>
 800d36e:	e10e      	b.n	800d58e <taskComputeRc+0x50e>
 800d370:	200020dc 	.word	0x200020dc
 800d374:	20002174 	.word	0x20002174
 800d378:	20000e82 	.word	0x20000e82
 800d37c:	20001890 	.word	0x20001890
 800d380:	20002014 	.word	0x20002014
 800d384:	200019c8 	.word	0x200019c8
 800d388:	20002184 	.word	0x20002184
 800d38c:	20000e84 	.word	0x20000e84
 800d390:	20000fb4 	.word	0x20000fb4
 800d394:	20000fb5 	.word	0x20000fb5
 800d398:	20000ea4 	.word	0x20000ea4
 800d39c:	20000eb0 	.word	0x20000eb0
            } else {            // actions during not armed
                i = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d3a4:	4b9f      	ldr	r3, [pc, #636]	; (800d624 <taskComputeRc+0x5a4>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b57      	cmp	r3, #87	; 0x57
 800d3aa:	d122      	bne.n	800d3f2 <taskComputeRc+0x372>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d3ac:	4b9e      	ldr	r3, [pc, #632]	; (800d628 <taskComputeRc+0x5a8>)
 800d3ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b2:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d3b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d3b8:	f7f9 fe14 	bl	8006fe4 <feature>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <taskComputeRc+0x346>
                        GPS_reset_home_position();
 800d3c2:	f7fb fc01 	bl	8008bc8 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d3c6:	2004      	movs	r0, #4
 800d3c8:	f7f9 fdc4 	bl	8006f54 <sensors>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <taskComputeRc+0x358>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d3d2:	4b96      	ldr	r3, [pc, #600]	; (800d62c <taskComputeRc+0x5ac>)
 800d3d4:	220a      	movs	r2, #10
 800d3d6:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d3d8:	2008      	movs	r0, #8
 800d3da:	f7f9 fdbb 	bl	8006f54 <sensors>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f083 0301 	eor.w	r3, r3, #1
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d032      	beq.n	800d450 <taskComputeRc+0x3d0>
                        heading = 0; // reset heading to zero after gyro calibration
 800d3ea:	4b91      	ldr	r3, [pc, #580]	; (800d630 <taskComputeRc+0x5b0>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	801a      	strh	r2, [r3, #0]
 800d3f0:	e02e      	b.n	800d450 <taskComputeRc+0x3d0>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d3f2:	2004      	movs	r0, #4
 800d3f4:	f7f9 fdf6 	bl	8006fe4 <feature>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d028      	beq.n	800d450 <taskComputeRc+0x3d0>
 800d3fe:	4b89      	ldr	r3, [pc, #548]	; (800d624 <taskComputeRc+0x5a4>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b5a      	cmp	r3, #90	; 0x5a
 800d404:	d124      	bne.n	800d450 <taskComputeRc+0x3d0>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d406:	4b8b      	ldr	r3, [pc, #556]	; (800d634 <taskComputeRc+0x5b4>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d006      	beq.n	800d41c <taskComputeRc+0x39c>
                        AccInflightCalibrationMeasurementDone = false;
 800d40e:	4b89      	ldr	r3, [pc, #548]	; (800d634 <taskComputeRc+0x5b4>)
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d414:	4b88      	ldr	r3, [pc, #544]	; (800d638 <taskComputeRc+0x5b8>)
 800d416:	2201      	movs	r2, #1
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	e019      	b.n	800d450 <taskComputeRc+0x3d0>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d41c:	4b87      	ldr	r3, [pc, #540]	; (800d63c <taskComputeRc+0x5bc>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	bf14      	ite	ne
 800d424:	2301      	movne	r3, #1
 800d426:	2300      	moveq	r3, #0
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	f083 0301 	eor.w	r3, r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	b2da      	uxtb	r2, r3
 800d436:	4b81      	ldr	r3, [pc, #516]	; (800d63c <taskComputeRc+0x5bc>)
 800d438:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d43a:	4b80      	ldr	r3, [pc, #512]	; (800d63c <taskComputeRc+0x5bc>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <taskComputeRc+0x3ca>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d442:	200a      	movs	r0, #10
 800d444:	f7f6 fddc 	bl	8004000 <buzzer>
 800d448:	e002      	b.n	800d450 <taskComputeRc+0x3d0>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d44a:	200b      	movs	r0, #11
 800d44c:	f7f6 fdd8 	bl	8004000 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d450:	4b74      	ldr	r3, [pc, #464]	; (800d624 <taskComputeRc+0x5a4>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b5d      	cmp	r3, #93	; 0x5d
 800d456:	d102      	bne.n	800d45e <taskComputeRc+0x3de>
                    i = 1;
 800d458:	2301      	movs	r3, #1
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	e00c      	b.n	800d478 <taskComputeRc+0x3f8>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d45e:	4b71      	ldr	r3, [pc, #452]	; (800d624 <taskComputeRc+0x5a4>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2b5b      	cmp	r3, #91	; 0x5b
 800d464:	d102      	bne.n	800d46c <taskComputeRc+0x3ec>
                    i = 2;
 800d466:	2302      	movs	r3, #2
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	e005      	b.n	800d478 <taskComputeRc+0x3f8>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d46c:	4b6d      	ldr	r3, [pc, #436]	; (800d624 <taskComputeRc+0x5a4>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b5e      	cmp	r3, #94	; 0x5e
 800d472:	d101      	bne.n	800d478 <taskComputeRc+0x3f8>
                    i = 3;
 800d474:	2303      	movs	r3, #3
 800d476:	613b      	str	r3, [r7, #16]
                if (i) {
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d011      	beq.n	800d4a2 <taskComputeRc+0x422>
                    mcfg.current_profile = i - 1;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b2da      	uxtb	r2, r3
 800d486:	4b6e      	ldr	r3, [pc, #440]	; (800d640 <taskComputeRc+0x5c0>)
 800d488:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d48c:	2100      	movs	r1, #0
 800d48e:	2000      	movs	r0, #0
 800d490:	f7f9 f9c6 	bl	8006820 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	b2db      	uxtb	r3, r3
 800d498:	461a      	mov	r2, r3
 800d49a:	2128      	movs	r1, #40	; 0x28
 800d49c:	2002      	movs	r0, #2
 800d49e:	f7fe fda3 	bl	800bfe8 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d4a2:	4b68      	ldr	r3, [pc, #416]	; (800d644 <taskComputeRc+0x5c4>)
 800d4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <taskComputeRc+0x438>
 800d4aa:	4b5e      	ldr	r3, [pc, #376]	; (800d624 <taskComputeRc+0x5a4>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b6f      	cmp	r3, #111	; 0x6f
 800d4b0:	d102      	bne.n	800d4b8 <taskComputeRc+0x438>
                    mwArm();
 800d4b2:	f7ff fa7f 	bl	800c9b4 <mwArm>
 800d4b6:	e01f      	b.n	800d4f8 <taskComputeRc+0x478>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d4b8:	4b61      	ldr	r3, [pc, #388]	; (800d640 <taskComputeRc+0x5c0>)
 800d4ba:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <taskComputeRc+0x458>
 800d4c2:	4b60      	ldr	r3, [pc, #384]	; (800d644 <taskComputeRc+0x5c4>)
 800d4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d106      	bne.n	800d4d8 <taskComputeRc+0x458>
 800d4ca:	4b56      	ldr	r3, [pc, #344]	; (800d624 <taskComputeRc+0x5a4>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b7e      	cmp	r3, #126	; 0x7e
 800d4d0:	d102      	bne.n	800d4d8 <taskComputeRc+0x458>
                    mwArm();
 800d4d2:	f7ff fa6f 	bl	800c9b4 <mwArm>
 800d4d6:	e00f      	b.n	800d4f8 <taskComputeRc+0x478>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d4d8:	4b52      	ldr	r3, [pc, #328]	; (800d624 <taskComputeRc+0x5a4>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b97      	cmp	r3, #151	; 0x97
 800d4de:	d104      	bne.n	800d4ea <taskComputeRc+0x46a>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d4e0:	4b59      	ldr	r3, [pc, #356]	; (800d648 <taskComputeRc+0x5c8>)
 800d4e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d4e6:	801a      	strh	r2, [r3, #0]
 800d4e8:	e006      	b.n	800d4f8 <taskComputeRc+0x478>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d4ea:	4b4e      	ldr	r3, [pc, #312]	; (800d624 <taskComputeRc+0x5a4>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2ba7      	cmp	r3, #167	; 0xa7
 800d4f0:	d102      	bne.n	800d4f8 <taskComputeRc+0x478>
                    f.CALIBRATE_MAG = 1;
 800d4f2:	4b56      	ldr	r3, [pc, #344]	; (800d64c <taskComputeRc+0x5cc>)
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d4fc:	4b49      	ldr	r3, [pc, #292]	; (800d624 <taskComputeRc+0x5a4>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2bbb      	cmp	r3, #187	; 0xbb
 800d502:	d10b      	bne.n	800d51c <taskComputeRc+0x49c>
                    cfg.angleTrim[PITCH] += 2;
 800d504:	4b4f      	ldr	r3, [pc, #316]	; (800d644 <taskComputeRc+0x5c4>)
 800d506:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	3302      	adds	r3, #2
 800d50e:	b29b      	uxth	r3, r3
 800d510:	b21a      	sxth	r2, r3
 800d512:	4b4c      	ldr	r3, [pc, #304]	; (800d644 <taskComputeRc+0x5c4>)
 800d514:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d516:	2301      	movs	r3, #1
 800d518:	613b      	str	r3, [r7, #16]
 800d51a:	e02e      	b.n	800d57a <taskComputeRc+0x4fa>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d51c:	4b41      	ldr	r3, [pc, #260]	; (800d624 <taskComputeRc+0x5a4>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2bb7      	cmp	r3, #183	; 0xb7
 800d522:	d10b      	bne.n	800d53c <taskComputeRc+0x4bc>
                    cfg.angleTrim[PITCH] -= 2;
 800d524:	4b47      	ldr	r3, [pc, #284]	; (800d644 <taskComputeRc+0x5c4>)
 800d526:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	3b02      	subs	r3, #2
 800d52e:	b29b      	uxth	r3, r3
 800d530:	b21a      	sxth	r2, r3
 800d532:	4b44      	ldr	r3, [pc, #272]	; (800d644 <taskComputeRc+0x5c4>)
 800d534:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d536:	2301      	movs	r3, #1
 800d538:	613b      	str	r3, [r7, #16]
 800d53a:	e01e      	b.n	800d57a <taskComputeRc+0x4fa>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d53c:	4b39      	ldr	r3, [pc, #228]	; (800d624 <taskComputeRc+0x5a4>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2bbe      	cmp	r3, #190	; 0xbe
 800d542:	d10b      	bne.n	800d55c <taskComputeRc+0x4dc>
                    cfg.angleTrim[ROLL] += 2;
 800d544:	4b3f      	ldr	r3, [pc, #252]	; (800d644 <taskComputeRc+0x5c4>)
 800d546:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	3302      	adds	r3, #2
 800d54e:	b29b      	uxth	r3, r3
 800d550:	b21a      	sxth	r2, r3
 800d552:	4b3c      	ldr	r3, [pc, #240]	; (800d644 <taskComputeRc+0x5c4>)
 800d554:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d556:	2301      	movs	r3, #1
 800d558:	613b      	str	r3, [r7, #16]
 800d55a:	e00e      	b.n	800d57a <taskComputeRc+0x4fa>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d55c:	4b31      	ldr	r3, [pc, #196]	; (800d624 <taskComputeRc+0x5a4>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2bbd      	cmp	r3, #189	; 0xbd
 800d562:	d10a      	bne.n	800d57a <taskComputeRc+0x4fa>
                    cfg.angleTrim[ROLL] -= 2;
 800d564:	4b37      	ldr	r3, [pc, #220]	; (800d644 <taskComputeRc+0x5c4>)
 800d566:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	3b02      	subs	r3, #2
 800d56e:	b29b      	uxth	r3, r3
 800d570:	b21a      	sxth	r2, r3
 800d572:	4b34      	ldr	r3, [pc, #208]	; (800d644 <taskComputeRc+0x5c4>)
 800d574:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d576:	2301      	movs	r3, #1
 800d578:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d006      	beq.n	800d58e <taskComputeRc+0x50e>
                    writeEEPROM(1, true);
 800d580:	2101      	movs	r1, #1
 800d582:	2001      	movs	r0, #1
 800d584:	f7f9 f94c 	bl	8006820 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d588:	4b31      	ldr	r3, [pc, #196]	; (800d650 <taskComputeRc+0x5d0>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d58e:	2004      	movs	r0, #4
 800d590:	f7f9 fd28 	bl	8006fe4 <feature>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d041      	beq.n	800d61e <taskComputeRc+0x59e>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d59a:	4b28      	ldr	r3, [pc, #160]	; (800d63c <taskComputeRc+0x5bc>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d016      	beq.n	800d5d0 <taskComputeRc+0x550>
 800d5a2:	4b2a      	ldr	r3, [pc, #168]	; (800d64c <taskComputeRc+0x5cc>)
 800d5a4:	785b      	ldrb	r3, [r3, #1]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d012      	beq.n	800d5d0 <taskComputeRc+0x550>
 800d5aa:	4b2a      	ldr	r3, [pc, #168]	; (800d654 <taskComputeRc+0x5d4>)
 800d5ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4b23      	ldr	r3, [pc, #140]	; (800d640 <taskComputeRc+0x5c0>)
 800d5b4:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	dd09      	ble.n	800d5d0 <taskComputeRc+0x550>
 800d5bc:	4b26      	ldr	r3, [pc, #152]	; (800d658 <taskComputeRc+0x5d8>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d105      	bne.n	800d5d0 <taskComputeRc+0x550>
                InflightcalibratingA = 50;
 800d5c4:	4b25      	ldr	r3, [pc, #148]	; (800d65c <taskComputeRc+0x5dc>)
 800d5c6:	2232      	movs	r2, #50	; 0x32
 800d5c8:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d5ca:	4b1c      	ldr	r3, [pc, #112]	; (800d63c <taskComputeRc+0x5bc>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d5d0:	4b21      	ldr	r3, [pc, #132]	; (800d658 <taskComputeRc+0x5d8>)
 800d5d2:	7c5b      	ldrb	r3, [r3, #17]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d014      	beq.n	800d602 <taskComputeRc+0x582>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d5d8:	4b21      	ldr	r3, [pc, #132]	; (800d660 <taskComputeRc+0x5e0>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	f083 0301 	eor.w	r3, r3, #1
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d009      	beq.n	800d5fa <taskComputeRc+0x57a>
 800d5e6:	4b13      	ldr	r3, [pc, #76]	; (800d634 <taskComputeRc+0x5b4>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	f083 0301 	eor.w	r3, r3, #1
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <taskComputeRc+0x57a>
                    InflightcalibratingA = 50;
 800d5f4:	4b19      	ldr	r3, [pc, #100]	; (800d65c <taskComputeRc+0x5dc>)
 800d5f6:	2232      	movs	r2, #50	; 0x32
 800d5f8:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d5fa:	4b19      	ldr	r3, [pc, #100]	; (800d660 <taskComputeRc+0x5e0>)
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	e00d      	b.n	800d61e <taskComputeRc+0x59e>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d602:	4b0c      	ldr	r3, [pc, #48]	; (800d634 <taskComputeRc+0x5b4>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d009      	beq.n	800d61e <taskComputeRc+0x59e>
 800d60a:	4b10      	ldr	r3, [pc, #64]	; (800d64c <taskComputeRc+0x5cc>)
 800d60c:	785b      	ldrb	r3, [r3, #1]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d105      	bne.n	800d61e <taskComputeRc+0x59e>
                AccInflightCalibrationMeasurementDone = false;
 800d612:	4b08      	ldr	r3, [pc, #32]	; (800d634 <taskComputeRc+0x5b4>)
 800d614:	2200      	movs	r2, #0
 800d616:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d618:	4b07      	ldr	r3, [pc, #28]	; (800d638 <taskComputeRc+0x5b8>)
 800d61a:	2201      	movs	r2, #1
 800d61c:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d61e:	2300      	movs	r3, #0
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	e06a      	b.n	800d6fa <taskComputeRc+0x67a>
 800d624:	20000fb4 	.word	0x20000fb4
 800d628:	20000fc2 	.word	0x20000fc2
 800d62c:	20000fc0 	.word	0x20000fc0
 800d630:	20002270 	.word	0x20002270
 800d634:	20000e9a 	.word	0x20000e9a
 800d638:	20000e9b 	.word	0x20000e9b
 800d63c:	20000e99 	.word	0x20000e99
 800d640:	200019c8 	.word	0x200019c8
 800d644:	20001890 	.word	0x20001890
 800d648:	20000fbe 	.word	0x20000fbe
 800d64c:	20002014 	.word	0x20002014
 800d650:	20000fb5 	.word	0x20000fb5
 800d654:	20002184 	.word	0x20002184
 800d658:	200020dc 	.word	0x200020dc
 800d65c:	20000e9e 	.word	0x20000e9e
 800d660:	20000e9c 	.word	0x20000e9c
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3304      	adds	r3, #4
 800d668:	4aab      	ldr	r2, [pc, #684]	; (800d918 <taskComputeRc+0x898>)
 800d66a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d66e:	f240 5213 	movw	r2, #1299	; 0x513
 800d672:	4293      	cmp	r3, r2
 800d674:	bfd4      	ite	le
 800d676:	2301      	movle	r3, #1
 800d678:	2300      	movgt	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	4619      	mov	r1, r3
 800d67e:	693a      	ldr	r2, [r7, #16]
 800d680:	4613      	mov	r3, r2
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	4413      	add	r3, r2
 800d686:	4099      	lsls	r1, r3
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4aa2      	ldr	r2, [pc, #648]	; (800d918 <taskComputeRc+0x898>)
 800d68e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d692:	f240 5214 	movw	r2, #1300	; 0x514
 800d696:	4293      	cmp	r3, r2
 800d698:	dd0a      	ble.n	800d6b0 <taskComputeRc+0x630>
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	3304      	adds	r3, #4
 800d69e:	4a9e      	ldr	r2, [pc, #632]	; (800d918 <taskComputeRc+0x898>)
 800d6a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6a4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	dc01      	bgt.n	800d6b0 <taskComputeRc+0x630>
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	e000      	b.n	800d6b2 <taskComputeRc+0x632>
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	4413      	add	r3, r2
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	fa00 f303 	lsl.w	r3, r0, r3
 800d6c0:	4319      	orrs	r1, r3
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4a94      	ldr	r2, [pc, #592]	; (800d918 <taskComputeRc+0x898>)
 800d6c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6cc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	bfcc      	ite	gt
 800d6d4:	2301      	movgt	r3, #1
 800d6d6:	2300      	movle	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	4618      	mov	r0, r3
 800d6dc:	693a      	ldr	r2, [r7, #16]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3302      	adds	r3, #2
 800d6e6:	fa00 f303 	lsl.w	r3, r0, r3
 800d6ea:	430b      	orrs	r3, r1
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	613b      	str	r3, [r7, #16]
 800d6fa:	4b88      	ldr	r3, [pc, #544]	; (800d91c <taskComputeRc+0x89c>)
 800d6fc:	7d1b      	ldrb	r3, [r3, #20]
 800d6fe:	461a      	mov	r2, r3
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	4293      	cmp	r3, r2
 800d704:	dbae      	blt.n	800d664 <taskComputeRc+0x5e4>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d706:	2300      	movs	r3, #0
 800d708:	613b      	str	r3, [r7, #16]
 800d70a:	e015      	b.n	800d738 <taskComputeRc+0x6b8>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d70c:	4a84      	ldr	r2, [pc, #528]	; (800d920 <taskComputeRc+0x8a0>)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	3312      	adds	r3, #18
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	4013      	ands	r3, r2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bf14      	ite	ne
 800d720:	2301      	movne	r3, #1
 800d722:	2300      	moveq	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	4619      	mov	r1, r3
 800d728:	4a7e      	ldr	r2, [pc, #504]	; (800d924 <taskComputeRc+0x8a4>)
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	4413      	add	r3, r2
 800d72e:	460a      	mov	r2, r1
 800d730:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3301      	adds	r3, #1
 800d736:	613b      	str	r3, [r7, #16]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b18      	cmp	r3, #24
 800d73c:	dde6      	ble.n	800d70c <taskComputeRc+0x68c>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d73e:	4b79      	ldr	r3, [pc, #484]	; (800d924 <taskComputeRc+0x8a4>)
 800d740:	7e1a      	ldrb	r2, [r3, #24]
 800d742:	4b79      	ldr	r3, [pc, #484]	; (800d928 <taskComputeRc+0x8a8>)
 800d744:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d746:	4b78      	ldr	r3, [pc, #480]	; (800d928 <taskComputeRc+0x8a8>)
 800d748:	7d1b      	ldrb	r3, [r3, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <taskComputeRc+0x6da>
            rcOptions[BOXGPSHOLD] = true;
 800d74e:	4b75      	ldr	r3, [pc, #468]	; (800d924 <taskComputeRc+0x8a4>)
 800d750:	2201      	movs	r2, #1
 800d752:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d754:	4b73      	ldr	r3, [pc, #460]	; (800d924 <taskComputeRc+0x8a4>)
 800d756:	2201      	movs	r2, #1
 800d758:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d75a:	4b72      	ldr	r3, [pc, #456]	; (800d924 <taskComputeRc+0x8a4>)
 800d75c:	785b      	ldrb	r3, [r3, #1]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10c      	bne.n	800d77c <taskComputeRc+0x6fc>
 800d762:	4b72      	ldr	r3, [pc, #456]	; (800d92c <taskComputeRc+0x8ac>)
 800d764:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d768:	4619      	mov	r1, r3
 800d76a:	4b6d      	ldr	r3, [pc, #436]	; (800d920 <taskComputeRc+0x8a0>)
 800d76c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d770:	461a      	mov	r2, r3
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	4299      	cmp	r1, r3
 800d77a:	dd30      	ble.n	800d7de <taskComputeRc+0x75e>
 800d77c:	2002      	movs	r0, #2
 800d77e:	f7f9 fbe9 	bl	8006f54 <sensors>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d02a      	beq.n	800d7de <taskComputeRc+0x75e>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d788:	4b67      	ldr	r3, [pc, #412]	; (800d928 <taskComputeRc+0x8a8>)
 800d78a:	78db      	ldrb	r3, [r3, #3]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d108      	bne.n	800d7a2 <taskComputeRc+0x722>
                errorAngleI[ROLL] = 0;
 800d790:	4b67      	ldr	r3, [pc, #412]	; (800d930 <taskComputeRc+0x8b0>)
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d796:	4b66      	ldr	r3, [pc, #408]	; (800d930 <taskComputeRc+0x8b0>)
 800d798:	2200      	movs	r2, #0
 800d79a:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d79c:	4b62      	ldr	r3, [pc, #392]	; (800d928 <taskComputeRc+0x8a8>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d7a6:	f7f9 fc1d 	bl	8006fe4 <feature>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01d      	beq.n	800d7ec <taskComputeRc+0x76c>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d7b0:	4b5e      	ldr	r3, [pc, #376]	; (800d92c <taskComputeRc+0x8ac>)
 800d7b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4b59      	ldr	r3, [pc, #356]	; (800d920 <taskComputeRc+0x8a0>)
 800d7ba:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7be:	461a      	mov	r2, r3
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	4299      	cmp	r1, r3
 800d7c8:	dd10      	ble.n	800d7ec <taskComputeRc+0x76c>
 800d7ca:	2020      	movs	r0, #32
 800d7cc:	f7f9 fbc2 	bl	8006f54 <sensors>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00a      	beq.n	800d7ec <taskComputeRc+0x76c>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d7d6:	4b54      	ldr	r3, [pc, #336]	; (800d928 <taskComputeRc+0x8a8>)
 800d7d8:	2201      	movs	r2, #1
 800d7da:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7dc:	e006      	b.n	800d7ec <taskComputeRc+0x76c>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d7de:	4b52      	ldr	r3, [pc, #328]	; (800d928 <taskComputeRc+0x8a8>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d7e4:	4b50      	ldr	r3, [pc, #320]	; (800d928 <taskComputeRc+0x8a8>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	749a      	strb	r2, [r3, #18]
 800d7ea:	e000      	b.n	800d7ee <taskComputeRc+0x76e>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7ec:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d7ee:	4b4d      	ldr	r3, [pc, #308]	; (800d924 <taskComputeRc+0x8a4>)
 800d7f0:	789b      	ldrb	r3, [r3, #2]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d010      	beq.n	800d818 <taskComputeRc+0x798>
            f.ANGLE_MODE = 0;
 800d7f6:	4b4c      	ldr	r3, [pc, #304]	; (800d928 <taskComputeRc+0x8a8>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d7fc:	4b4a      	ldr	r3, [pc, #296]	; (800d928 <taskComputeRc+0x8a8>)
 800d7fe:	791b      	ldrb	r3, [r3, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10c      	bne.n	800d81e <taskComputeRc+0x79e>
                errorAngleI[ROLL] = 0;
 800d804:	4b4a      	ldr	r3, [pc, #296]	; (800d930 <taskComputeRc+0x8b0>)
 800d806:	2200      	movs	r2, #0
 800d808:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d80a:	4b49      	ldr	r3, [pc, #292]	; (800d930 <taskComputeRc+0x8b0>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d810:	4b45      	ldr	r3, [pc, #276]	; (800d928 <taskComputeRc+0x8a8>)
 800d812:	2201      	movs	r2, #1
 800d814:	711a      	strb	r2, [r3, #4]
 800d816:	e002      	b.n	800d81e <taskComputeRc+0x79e>
            }
        } else {
            f.HORIZON_MODE = 0;
 800d818:	4b43      	ldr	r3, [pc, #268]	; (800d928 <taskComputeRc+0x8a8>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d81e:	4b41      	ldr	r3, [pc, #260]	; (800d924 <taskComputeRc+0x8a4>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <taskComputeRc+0x7ac>
            f.OK_TO_ARM = 1;
 800d826:	4b40      	ldr	r3, [pc, #256]	; (800d928 <taskComputeRc+0x8a8>)
 800d828:	2201      	movs	r2, #1
 800d82a:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d82c:	4b3e      	ldr	r3, [pc, #248]	; (800d928 <taskComputeRc+0x8a8>)
 800d82e:	78db      	ldrb	r3, [r3, #3]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <taskComputeRc+0x7bc>
 800d834:	4b3c      	ldr	r3, [pc, #240]	; (800d928 <taskComputeRc+0x8a8>)
 800d836:	791b      	ldrb	r3, [r3, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <taskComputeRc+0x7c4>
            actLed1State(ON);
 800d83c:	2001      	movs	r0, #1
 800d83e:	f7f4 fc11 	bl	8002064 <actLed1State>
 800d842:	e002      	b.n	800d84a <taskComputeRc+0x7ca>
        } else {
            actLed1State(OFF);
 800d844:	2000      	movs	r0, #0
 800d846:	f7f4 fc0d 	bl	8002064 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d84a:	2004      	movs	r0, #4
 800d84c:	f7f9 fb82 	bl	8006f54 <sensors>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d033      	beq.n	800d8be <taskComputeRc+0x83e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d856:	4b33      	ldr	r3, [pc, #204]	; (800d924 <taskComputeRc+0x8a4>)
 800d858:	78db      	ldrb	r3, [r3, #3]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d016      	beq.n	800d88c <taskComputeRc+0x80c>
                if (!f.BARO_MODE) {
 800d85e:	4b32      	ldr	r3, [pc, #200]	; (800d928 <taskComputeRc+0x8a8>)
 800d860:	799b      	ldrb	r3, [r3, #6]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d115      	bne.n	800d892 <taskComputeRc+0x812>
                    f.BARO_MODE = 1;
 800d866:	4b30      	ldr	r3, [pc, #192]	; (800d928 <taskComputeRc+0x8a8>)
 800d868:	2201      	movs	r2, #1
 800d86a:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d86c:	4b31      	ldr	r3, [pc, #196]	; (800d934 <taskComputeRc+0x8b4>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a31      	ldr	r2, [pc, #196]	; (800d938 <taskComputeRc+0x8b8>)
 800d872:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d874:	4b31      	ldr	r3, [pc, #196]	; (800d93c <taskComputeRc+0x8bc>)
 800d876:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d87a:	4b31      	ldr	r3, [pc, #196]	; (800d940 <taskComputeRc+0x8c0>)
 800d87c:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d87e:	4b31      	ldr	r3, [pc, #196]	; (800d944 <taskComputeRc+0x8c4>)
 800d880:	2200      	movs	r2, #0
 800d882:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d884:	4b30      	ldr	r3, [pc, #192]	; (800d948 <taskComputeRc+0x8c8>)
 800d886:	2200      	movs	r2, #0
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	e002      	b.n	800d892 <taskComputeRc+0x812>
                }
            } else {
                f.BARO_MODE = 0;
 800d88c:	4b26      	ldr	r3, [pc, #152]	; (800d928 <taskComputeRc+0x8a8>)
 800d88e:	2200      	movs	r2, #0
 800d890:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d892:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d896:	f7f9 fba5 	bl	8006fe4 <feature>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00e      	beq.n	800d8be <taskComputeRc+0x83e>
                if (rcOptions[BOXVARIO]) {
 800d8a0:	4b20      	ldr	r3, [pc, #128]	; (800d924 <taskComputeRc+0x8a4>)
 800d8a2:	791b      	ldrb	r3, [r3, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <taskComputeRc+0x838>
                    if (!f.VARIO_MODE) {
 800d8a8:	4b1f      	ldr	r3, [pc, #124]	; (800d928 <taskComputeRc+0x8a8>)
 800d8aa:	7bdb      	ldrb	r3, [r3, #15]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d106      	bne.n	800d8be <taskComputeRc+0x83e>
                        f.VARIO_MODE = 1;
 800d8b0:	4b1d      	ldr	r3, [pc, #116]	; (800d928 <taskComputeRc+0x8a8>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	73da      	strb	r2, [r3, #15]
 800d8b6:	e002      	b.n	800d8be <taskComputeRc+0x83e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d8b8:	4b1b      	ldr	r3, [pc, #108]	; (800d928 <taskComputeRc+0x8a8>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d8be:	2002      	movs	r0, #2
 800d8c0:	f7f9 fb48 	bl	8006f54 <sensors>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d105      	bne.n	800d8d6 <taskComputeRc+0x856>
 800d8ca:	2008      	movs	r0, #8
 800d8cc:	f7f9 fb42 	bl	8006f54 <sensors>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d04a      	beq.n	800d96c <taskComputeRc+0x8ec>
            if (rcOptions[BOXMAG]) {
 800d8d6:	4b13      	ldr	r3, [pc, #76]	; (800d924 <taskComputeRc+0x8a4>)
 800d8d8:	795b      	ldrb	r3, [r3, #5]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00c      	beq.n	800d8f8 <taskComputeRc+0x878>
                if (!f.MAG_MODE) {
 800d8de:	4b12      	ldr	r3, [pc, #72]	; (800d928 <taskComputeRc+0x8a8>)
 800d8e0:	795b      	ldrb	r3, [r3, #5]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10b      	bne.n	800d8fe <taskComputeRc+0x87e>
                    f.MAG_MODE = 1;
 800d8e6:	4b10      	ldr	r3, [pc, #64]	; (800d928 <taskComputeRc+0x8a8>)
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d8ec:	4b17      	ldr	r3, [pc, #92]	; (800d94c <taskComputeRc+0x8cc>)
 800d8ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d8f2:	4b17      	ldr	r3, [pc, #92]	; (800d950 <taskComputeRc+0x8d0>)
 800d8f4:	801a      	strh	r2, [r3, #0]
 800d8f6:	e002      	b.n	800d8fe <taskComputeRc+0x87e>
                }
            } else {
                f.MAG_MODE = 0;
 800d8f8:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <taskComputeRc+0x8a8>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d8fe:	4b09      	ldr	r3, [pc, #36]	; (800d924 <taskComputeRc+0x8a4>)
 800d900:	799b      	ldrb	r3, [r3, #6]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d026      	beq.n	800d954 <taskComputeRc+0x8d4>
                if (!f.HEADFREE_MODE) {
 800d906:	4b08      	ldr	r3, [pc, #32]	; (800d928 <taskComputeRc+0x8a8>)
 800d908:	7a5b      	ldrb	r3, [r3, #9]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d125      	bne.n	800d95a <taskComputeRc+0x8da>
                    f.HEADFREE_MODE = 1;
 800d90e:	4b06      	ldr	r3, [pc, #24]	; (800d928 <taskComputeRc+0x8a8>)
 800d910:	2201      	movs	r2, #1
 800d912:	725a      	strb	r2, [r3, #9]
 800d914:	e021      	b.n	800d95a <taskComputeRc+0x8da>
 800d916:	bf00      	nop
 800d918:	20002184 	.word	0x20002184
 800d91c:	20001640 	.word	0x20001640
 800d920:	20001890 	.word	0x20001890
 800d924:	200020dc 	.word	0x200020dc
 800d928:	20002014 	.word	0x20002014
 800d92c:	20000e82 	.word	0x20000e82
 800d930:	20000eb0 	.word	0x20000eb0
 800d934:	20001f94 	.word	0x20001f94
 800d938:	20001fa0 	.word	0x20001fa0
 800d93c:	200020b0 	.word	0x200020b0
 800d940:	20000eb8 	.word	0x20000eb8
 800d944:	20000cbc 	.word	0x20000cbc
 800d948:	20000cb0 	.word	0x20000cb0
 800d94c:	20002270 	.word	0x20002270
 800d950:	200021f0 	.word	0x200021f0
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d954:	4ba5      	ldr	r3, [pc, #660]	; (800dbec <taskComputeRc+0xb6c>)
 800d956:	2200      	movs	r2, #0
 800d958:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d95a:	4ba5      	ldr	r3, [pc, #660]	; (800dbf0 <taskComputeRc+0xb70>)
 800d95c:	79db      	ldrb	r3, [r3, #7]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <taskComputeRc+0x8ec>
                headFreeModeHold = heading; // acquire new heading
 800d962:	4ba4      	ldr	r3, [pc, #656]	; (800dbf4 <taskComputeRc+0xb74>)
 800d964:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d968:	4ba3      	ldr	r3, [pc, #652]	; (800dbf8 <taskComputeRc+0xb78>)
 800d96a:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d96c:	2020      	movs	r0, #32
 800d96e:	f7f9 faf1 	bl	8006f54 <sensors>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 809c 	beq.w	800dab2 <taskComputeRc+0xa32>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d97a:	4b9c      	ldr	r3, [pc, #624]	; (800dbec <taskComputeRc+0xb6c>)
 800d97c:	7adb      	ldrb	r3, [r3, #11]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 808e 	beq.w	800daa0 <taskComputeRc+0xa20>
 800d984:	4b9d      	ldr	r3, [pc, #628]	; (800dbfc <taskComputeRc+0xb7c>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b04      	cmp	r3, #4
 800d98a:	f240 8089 	bls.w	800daa0 <taskComputeRc+0xa20>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d98e:	4b9c      	ldr	r3, [pc, #624]	; (800dc00 <taskComputeRc+0xb80>)
 800d990:	f993 3000 	ldrsb.w	r3, [r3]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00a      	beq.n	800d9ae <taskComputeRc+0x92e>
 800d998:	4b94      	ldr	r3, [pc, #592]	; (800dbec <taskComputeRc+0xb6c>)
 800d99a:	791b      	ldrb	r3, [r3, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d106      	bne.n	800d9ae <taskComputeRc+0x92e>
 800d9a0:	4b92      	ldr	r3, [pc, #584]	; (800dbec <taskComputeRc+0xb6c>)
 800d9a2:	78db      	ldrb	r3, [r3, #3]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d102      	bne.n	800d9ae <taskComputeRc+0x92e>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d9a8:	4b90      	ldr	r3, [pc, #576]	; (800dbec <taskComputeRc+0xb6c>)
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d9ae:	4b90      	ldr	r3, [pc, #576]	; (800dbf0 <taskComputeRc+0xb70>)
 800d9b0:	7a9b      	ldrb	r3, [r3, #10]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d103      	bne.n	800d9be <taskComputeRc+0x93e>
 800d9b6:	4b8d      	ldr	r3, [pc, #564]	; (800dbec <taskComputeRc+0xb6c>)
 800d9b8:	7c9b      	ldrb	r3, [r3, #18]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d01c      	beq.n	800d9f8 <taskComputeRc+0x978>
                    if (!f.GPS_HOME_MODE) {
 800d9be:	4b8b      	ldr	r3, [pc, #556]	; (800dbec <taskComputeRc+0xb6c>)
 800d9c0:	79db      	ldrb	r3, [r3, #7]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d168      	bne.n	800da98 <taskComputeRc+0xa18>
                        f.GPS_HOME_MODE = 1;
 800d9c6:	4b89      	ldr	r3, [pc, #548]	; (800dbec <taskComputeRc+0xb6c>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d9cc:	4b87      	ldr	r3, [pc, #540]	; (800dbec <taskComputeRc+0xb6c>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d9d2:	4b8c      	ldr	r3, [pc, #560]	; (800dc04 <taskComputeRc+0xb84>)
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d9d8:	498b      	ldr	r1, [pc, #556]	; (800dc08 <taskComputeRc+0xb88>)
 800d9da:	488c      	ldr	r0, [pc, #560]	; (800dc0c <taskComputeRc+0xb8c>)
 800d9dc:	f7fb fac4 	bl	8008f68 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d9e0:	4b87      	ldr	r3, [pc, #540]	; (800dc00 <taskComputeRc+0xb80>)
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d9e6:	4b8a      	ldr	r3, [pc, #552]	; (800dc10 <taskComputeRc+0xb90>)
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	4b89      	ldr	r3, [pc, #548]	; (800dc14 <taskComputeRc+0xb94>)
 800d9ee:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d9f0:	4b7e      	ldr	r3, [pc, #504]	; (800dbec <taskComputeRc+0xb6c>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d9f6:	e04f      	b.n	800da98 <taskComputeRc+0xa18>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d9f8:	4b7c      	ldr	r3, [pc, #496]	; (800dbec <taskComputeRc+0xb6c>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d9fe:	4b7c      	ldr	r3, [pc, #496]	; (800dbf0 <taskComputeRc+0xb70>)
 800da00:	7adb      	ldrb	r3, [r3, #11]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d039      	beq.n	800da7a <taskComputeRc+0x9fa>
 800da06:	4b84      	ldr	r3, [pc, #528]	; (800dc18 <taskComputeRc+0xb98>)
 800da08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	bfb8      	it	lt
 800da10:	425b      	neglt	r3, r3
 800da12:	b29a      	uxth	r2, r3
 800da14:	4b81      	ldr	r3, [pc, #516]	; (800dc1c <taskComputeRc+0xb9c>)
 800da16:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d22d      	bcs.n	800da7a <taskComputeRc+0x9fa>
 800da1e:	4b7e      	ldr	r3, [pc, #504]	; (800dc18 <taskComputeRc+0xb98>)
 800da20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da24:	2b00      	cmp	r3, #0
 800da26:	bfb8      	it	lt
 800da28:	425b      	neglt	r3, r3
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	4b7b      	ldr	r3, [pc, #492]	; (800dc1c <taskComputeRc+0xb9c>)
 800da2e:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da32:	429a      	cmp	r2, r3
 800da34:	d221      	bcs.n	800da7a <taskComputeRc+0x9fa>
                        if (!f.GPS_HOLD_MODE) {
 800da36:	4b6d      	ldr	r3, [pc, #436]	; (800dbec <taskComputeRc+0xb6c>)
 800da38:	7a1b      	ldrb	r3, [r3, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d12c      	bne.n	800da98 <taskComputeRc+0xa18>
                            f.GPS_HOLD_MODE = 1;
 800da3e:	4b6b      	ldr	r3, [pc, #428]	; (800dbec <taskComputeRc+0xb6c>)
 800da40:	2201      	movs	r2, #1
 800da42:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800da44:	4b6f      	ldr	r3, [pc, #444]	; (800dc04 <taskComputeRc+0xb84>)
 800da46:	2200      	movs	r2, #0
 800da48:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800da4a:	4b75      	ldr	r3, [pc, #468]	; (800dc20 <taskComputeRc+0xba0>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a71      	ldr	r2, [pc, #452]	; (800dc14 <taskComputeRc+0xb94>)
 800da50:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da52:	4b73      	ldr	r3, [pc, #460]	; (800dc20 <taskComputeRc+0xba0>)
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	4a6f      	ldr	r2, [pc, #444]	; (800dc14 <taskComputeRc+0xb94>)
 800da58:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da5a:	4972      	ldr	r1, [pc, #456]	; (800dc24 <taskComputeRc+0xba4>)
 800da5c:	486d      	ldr	r0, [pc, #436]	; (800dc14 <taskComputeRc+0xb94>)
 800da5e:	f7fb fa83 	bl	8008f68 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da62:	4b67      	ldr	r3, [pc, #412]	; (800dc00 <taskComputeRc+0xb80>)
 800da64:	2201      	movs	r2, #1
 800da66:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da68:	4b69      	ldr	r3, [pc, #420]	; (800dc10 <taskComputeRc+0xb90>)
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	461a      	mov	r2, r3
 800da6e:	4b69      	ldr	r3, [pc, #420]	; (800dc14 <taskComputeRc+0xb94>)
 800da70:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800da72:	4b5e      	ldr	r3, [pc, #376]	; (800dbec <taskComputeRc+0xb6c>)
 800da74:	2200      	movs	r2, #0
 800da76:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800da78:	e00e      	b.n	800da98 <taskComputeRc+0xa18>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800da7a:	4b5c      	ldr	r3, [pc, #368]	; (800dbec <taskComputeRc+0xb6c>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800da80:	4b60      	ldr	r3, [pc, #384]	; (800dc04 <taskComputeRc+0xb84>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d107      	bne.n	800da98 <taskComputeRc+0xa18>
                            GPSNavReset = 1;
 800da88:	4b5e      	ldr	r3, [pc, #376]	; (800dc04 <taskComputeRc+0xb84>)
 800da8a:	2201      	movs	r2, #1
 800da8c:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800da8e:	f7fb f8cf 	bl	8008c30 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800da92:	4b56      	ldr	r3, [pc, #344]	; (800dbec <taskComputeRc+0xb6c>)
 800da94:	2200      	movs	r2, #0
 800da96:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800da98:	200c      	movs	r0, #12
 800da9a:	f7f6 fab1 	bl	8004000 <buzzer>
 800da9e:	e008      	b.n	800dab2 <taskComputeRc+0xa32>
            } else {
                f.GPS_HOME_MODE = 0;
 800daa0:	4b52      	ldr	r3, [pc, #328]	; (800dbec <taskComputeRc+0xb6c>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800daa6:	4b51      	ldr	r3, [pc, #324]	; (800dbec <taskComputeRc+0xb6c>)
 800daa8:	2200      	movs	r2, #0
 800daaa:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800daac:	4b54      	ldr	r3, [pc, #336]	; (800dc00 <taskComputeRc+0xb80>)
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800dab2:	4b4f      	ldr	r3, [pc, #316]	; (800dbf0 <taskComputeRc+0xb70>)
 800dab4:	7b1b      	ldrb	r3, [r3, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d007      	beq.n	800daca <taskComputeRc+0xa4a>
 800daba:	4b4c      	ldr	r3, [pc, #304]	; (800dbec <taskComputeRc+0xb6c>)
 800dabc:	7c9b      	ldrb	r3, [r3, #18]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <taskComputeRc+0xa4a>
            f.PASSTHRU_MODE = 1;
 800dac2:	4b4a      	ldr	r3, [pc, #296]	; (800dbec <taskComputeRc+0xb6c>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	729a      	strb	r2, [r3, #10]
 800dac8:	e002      	b.n	800dad0 <taskComputeRc+0xa50>
        } else {
            f.PASSTHRU_MODE = 0;
 800daca:	4b48      	ldr	r3, [pc, #288]	; (800dbec <taskComputeRc+0xb6c>)
 800dacc:	2200      	movs	r2, #0
 800dace:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800dad0:	4b46      	ldr	r3, [pc, #280]	; (800dbec <taskComputeRc+0xb6c>)
 800dad2:	7c1b      	ldrb	r3, [r3, #16]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d047      	beq.n	800db68 <taskComputeRc+0xae8>
            f.HEADFREE_MODE = 0;
 800dad8:	4b44      	ldr	r3, [pc, #272]	; (800dbec <taskComputeRc+0xb6c>)
 800dada:	2200      	movs	r2, #0
 800dadc:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800dade:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dae2:	f7f9 fa7f 	bl	8006fe4 <feature>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d03d      	beq.n	800db68 <taskComputeRc+0xae8>
 800daec:	4b4e      	ldr	r3, [pc, #312]	; (800dc28 <taskComputeRc+0xba8>)
 800daee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf2:	4619      	mov	r1, r3
 800daf4:	4b49      	ldr	r3, [pc, #292]	; (800dc1c <taskComputeRc+0xb9c>)
 800daf6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800dafa:	461a      	mov	r2, r3
 800dafc:	4613      	mov	r3, r2
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	4413      	add	r3, r2
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	4299      	cmp	r1, r3
 800db06:	dd2f      	ble.n	800db68 <taskComputeRc+0xae8>
                f.PASSTHRU_MODE = 0;
 800db08:	4b38      	ldr	r3, [pc, #224]	; (800dbec <taskComputeRc+0xb6c>)
 800db0a:	2200      	movs	r2, #0
 800db0c:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db0e:	4b37      	ldr	r3, [pc, #220]	; (800dbec <taskComputeRc+0xb6c>)
 800db10:	2201      	movs	r2, #1
 800db12:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db14:	2300      	movs	r3, #0
 800db16:	613b      	str	r3, [r7, #16]
 800db18:	e00a      	b.n	800db30 <taskComputeRc+0xab0>
                    rcData[i] = mcfg.midrc;
 800db1a:	4b44      	ldr	r3, [pc, #272]	; (800dc2c <taskComputeRc+0xbac>)
 800db1c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db20:	b219      	sxth	r1, r3
 800db22:	4a43      	ldr	r2, [pc, #268]	; (800dc30 <taskComputeRc+0xbb0>)
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3301      	adds	r3, #1
 800db2e:	613b      	str	r3, [r7, #16]
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2b02      	cmp	r3, #2
 800db34:	ddf1      	ble.n	800db1a <taskComputeRc+0xa9a>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800db36:	4b39      	ldr	r3, [pc, #228]	; (800dc1c <taskComputeRc+0xb9c>)
 800db38:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800db3c:	b21a      	sxth	r2, r3
 800db3e:	4b3c      	ldr	r3, [pc, #240]	; (800dc30 <taskComputeRc+0xbb0>)
 800db40:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800db42:	4b2a      	ldr	r3, [pc, #168]	; (800dbec <taskComputeRc+0xb6c>)
 800db44:	7adb      	ldrb	r3, [r3, #11]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10e      	bne.n	800db68 <taskComputeRc+0xae8>
 800db4a:	4b2c      	ldr	r3, [pc, #176]	; (800dbfc <taskComputeRc+0xb7c>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b05      	cmp	r3, #5
 800db50:	d80a      	bhi.n	800db68 <taskComputeRc+0xae8>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800db52:	4b26      	ldr	r3, [pc, #152]	; (800dbec <taskComputeRc+0xb6c>)
 800db54:	2200      	movs	r2, #0
 800db56:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800db58:	4b34      	ldr	r3, [pc, #208]	; (800dc2c <taskComputeRc+0xbac>)
 800db5a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db5e:	3b32      	subs	r3, #50	; 0x32
 800db60:	b29b      	uxth	r3, r3
 800db62:	b21a      	sxth	r2, r3
 800db64:	4b32      	ldr	r3, [pc, #200]	; (800dc30 <taskComputeRc+0xbb0>)
 800db66:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800db68:	2010      	movs	r0, #16
 800db6a:	f7f9 fa3b 	bl	8006fe4 <feature>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d035      	beq.n	800dbe0 <taskComputeRc+0xb60>
 800db74:	4b1d      	ldr	r3, [pc, #116]	; (800dbec <taskComputeRc+0xb6c>)
 800db76:	785b      	ldrb	r3, [r3, #1]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d031      	beq.n	800dbe0 <taskComputeRc+0xb60>
 800db7c:	4b1b      	ldr	r3, [pc, #108]	; (800dbec <taskComputeRc+0xb6c>)
 800db7e:	7c1b      	ldrb	r3, [r3, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d12d      	bne.n	800dbe0 <taskComputeRc+0xb60>
            if (isThrottleLow) {
 800db84:	7afb      	ldrb	r3, [r7, #11]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d023      	beq.n	800dbd2 <taskComputeRc+0xb52>
                if (disarmTime == 0)
 800db8a:	4b2a      	ldr	r3, [pc, #168]	; (800dc34 <taskComputeRc+0xbb4>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10e      	bne.n	800dbb0 <taskComputeRc+0xb30>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800db92:	4b26      	ldr	r3, [pc, #152]	; (800dc2c <taskComputeRc+0xbac>)
 800db94:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800db98:	461a      	mov	r2, r3
 800db9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db9e:	fb03 f302 	mul.w	r3, r3, r2
 800dba2:	461a      	mov	r2, r3
 800dba4:	4b24      	ldr	r3, [pc, #144]	; (800dc38 <taskComputeRc+0xbb8>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4413      	add	r3, r2
 800dbaa:	4a22      	ldr	r2, [pc, #136]	; (800dc34 <taskComputeRc+0xbb4>)
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	e00c      	b.n	800dbca <taskComputeRc+0xb4a>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dbb0:	4b20      	ldr	r3, [pc, #128]	; (800dc34 <taskComputeRc+0xbb4>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	4b20      	ldr	r3, [pc, #128]	; (800dc38 <taskComputeRc+0xbb8>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d206      	bcs.n	800dbca <taskComputeRc+0xb4a>
 800dbbc:	4b1b      	ldr	r3, [pc, #108]	; (800dc2c <taskComputeRc+0xbac>)
 800dbbe:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <taskComputeRc+0xb4a>
                    mwDisarm();
 800dbc6:	f7fe ff39 	bl	800ca3c <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dbca:	2009      	movs	r0, #9
 800dbcc:	f7f6 fa18 	bl	8004000 <buzzer>
 800dbd0:	e006      	b.n	800dbe0 <taskComputeRc+0xb60>
            } else if (disarmTime != 0)
 800dbd2:	4b18      	ldr	r3, [pc, #96]	; (800dc34 <taskComputeRc+0xbb4>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <taskComputeRc+0xb60>
                disarmTime = 0;
 800dbda:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <taskComputeRc+0xbb4>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3718      	adds	r7, #24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	20002014 	.word	0x20002014
 800dbf0:	200020dc 	.word	0x200020dc
 800dbf4:	20002270 	.word	0x20002270
 800dbf8:	20002180 	.word	0x20002180
 800dbfc:	20002176 	.word	0x20002176
 800dc00:	20000e98 	.word	0x20000e98
 800dc04:	20000058 	.word	0x20000058
 800dc08:	200020d0 	.word	0x200020d0
 800dc0c:	200020cc 	.word	0x200020cc
 800dc10:	2000202a 	.word	0x2000202a
 800dc14:	20002054 	.word	0x20002054
 800dc18:	200020b0 	.word	0x200020b0
 800dc1c:	20001890 	.word	0x20001890
 800dc20:	20002118 	.word	0x20002118
 800dc24:	20002058 	.word	0x20002058
 800dc28:	20000e82 	.word	0x20000e82
 800dc2c:	200019c8 	.word	0x200019c8
 800dc30:	20002184 	.word	0x20002184
 800dc34:	20000ea0 	.word	0x20000ea0
 800dc38:	2000136c 	.word	0x2000136c

0800dc3c <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc44:	4b15      	ldr	r3, [pc, #84]	; (800dc9c <taskLoop+0x60>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <taskLoop+0x16>
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d00f      	beq.n	800dc70 <taskLoop+0x34>
 800dc50:	e01f      	b.n	800dc92 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dc52:	4b12      	ldr	r3, [pc, #72]	; (800dc9c <taskLoop+0x60>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	4a10      	ldr	r2, [pc, #64]	; (800dc9c <taskLoop+0x60>)
 800dc5a:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dc5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc60:	f7f9 f9c0 	bl	8006fe4 <feature>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <taskLoop+0x34>
				gpsThread();
 800dc6a:	f7fa fb41 	bl	80082f0 <gpsThread>
				break;
 800dc6e:	e010      	b.n	800dc92 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dc70:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <taskLoop+0x60>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dc76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dc7a:	f7f9 f9b3 	bl	8006fe4 <feature>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <taskLoop+0x54>
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <taskLoop+0x64>)
 800dc86:	7bdb      	ldrb	r3, [r3, #15]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <taskLoop+0x54>
				mwVario();
 800dc8c:	f7fe fef0 	bl	800ca70 <mwVario>
			break;
 800dc90:	bf00      	nop
	}
    return 0;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20000fb8 	.word	0x20000fb8
 800dca0:	20002014 	.word	0x20002014

0800dca4 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
	uint32_t current;
	static uint8_t step = 0;

    (void)p_task;

    step = computeIMU(step);
 800dcac:	4b99      	ldr	r3, [pc, #612]	; (800df14 <taskComputeImu+0x270>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fb fe35 	bl	8009920 <computeIMU>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	4b96      	ldr	r3, [pc, #600]	; (800df14 <taskComputeImu+0x270>)
 800dcbc:	701a      	strb	r2, [r3, #0]
    if (step < 4) {
 800dcbe:	4b95      	ldr	r3, [pc, #596]	; (800df14 <taskComputeImu+0x270>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b03      	cmp	r3, #3
 800dcc4:	d803      	bhi.n	800dcce <taskComputeImu+0x2a>
		p_task->immediate = TRUE;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	705a      	strb	r2, [r3, #1]
 800dccc:	e29d      	b.n	800e20a <taskComputeImu+0x566>
    }
    else {
        // Measure loop rate just afer reading the sensors
        current = (*pif_act_timer1us)();
 800dcce:	4b92      	ldr	r3, [pc, #584]	; (800df18 <taskComputeImu+0x274>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4798      	blx	r3
 800dcd4:	6138      	str	r0, [r7, #16]
        cycleTime = (int32_t)(current - previousTime);
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	4b90      	ldr	r3, [pc, #576]	; (800df1c <taskComputeImu+0x278>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	4b8e      	ldr	r3, [pc, #568]	; (800df20 <taskComputeImu+0x27c>)
 800dce6:	801a      	strh	r2, [r3, #0]
        previousTime = current;
 800dce8:	4a8c      	ldr	r2, [pc, #560]	; (800df1c <taskComputeImu+0x278>)
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	6013      	str	r3, [r2, #0]
        // non IMU critical, temeperatur
        annexCode();
 800dcee:	f7fe f9b3 	bl	800c058 <annexCode>
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dcf2:	2008      	movs	r0, #8
 800dcf4:	f7f9 f92e 	bl	8006f54 <sensors>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d057      	beq.n	800ddae <taskComputeImu+0x10a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dcfe:	4b89      	ldr	r3, [pc, #548]	; (800df24 <taskComputeImu+0x280>)
 800dd00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bfb8      	it	lt
 800dd08:	425b      	neglt	r3, r3
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	2b45      	cmp	r3, #69	; 0x45
 800dd0e:	d847      	bhi.n	800dda0 <taskComputeImu+0xfc>
 800dd10:	4b85      	ldr	r3, [pc, #532]	; (800df28 <taskComputeImu+0x284>)
 800dd12:	795b      	ldrb	r3, [r3, #5]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d043      	beq.n	800dda0 <taskComputeImu+0xfc>
                int16_t dif = heading - magHold;
 800dd18:	4b84      	ldr	r3, [pc, #528]	; (800df2c <taskComputeImu+0x288>)
 800dd1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	4b83      	ldr	r3, [pc, #524]	; (800df30 <taskComputeImu+0x28c>)
 800dd22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dd2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd32:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dd36:	da04      	bge.n	800dd42 <taskComputeImu+0x9e>
                    dif += 360;
 800dd38:	8afb      	ldrh	r3, [r7, #22]
 800dd3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dd42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd46:	2bb3      	cmp	r3, #179	; 0xb3
 800dd48:	dd04      	ble.n	800dd54 <taskComputeImu+0xb0>
                    dif -= 360;
 800dd4a:	8afb      	ldrh	r3, [r7, #22]
 800dd4c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dd54:	4b77      	ldr	r3, [pc, #476]	; (800df34 <taskComputeImu+0x290>)
 800dd56:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dd5a:	425b      	negs	r3, r3
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	8afb      	ldrh	r3, [r7, #22]
 800dd60:	fb12 f303 	smulbb	r3, r2, r3
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dd68:	4b6f      	ldr	r3, [pc, #444]	; (800df28 <taskComputeImu+0x284>)
 800dd6a:	7b5b      	ldrb	r3, [r3, #13]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01d      	beq.n	800ddac <taskComputeImu+0x108>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dd70:	4b6c      	ldr	r3, [pc, #432]	; (800df24 <taskComputeImu+0x280>)
 800dd72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd7c:	496e      	ldr	r1, [pc, #440]	; (800df38 <taskComputeImu+0x294>)
 800dd7e:	7a49      	ldrb	r1, [r1, #9]
 800dd80:	fb01 f303 	mul.w	r3, r1, r3
 800dd84:	496d      	ldr	r1, [pc, #436]	; (800df3c <taskComputeImu+0x298>)
 800dd86:	fb81 0103 	smull	r0, r1, r1, r3
 800dd8a:	4419      	add	r1, r3
 800dd8c:	1109      	asrs	r1, r1, #4
 800dd8e:	17db      	asrs	r3, r3, #31
 800dd90:	1a5b      	subs	r3, r3, r1
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4413      	add	r3, r2
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	b21a      	sxth	r2, r3
 800dd9a:	4b62      	ldr	r3, [pc, #392]	; (800df24 <taskComputeImu+0x280>)
 800dd9c:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd9e:	e005      	b.n	800ddac <taskComputeImu+0x108>
            } else
                magHold = heading;
 800dda0:	4b62      	ldr	r3, [pc, #392]	; (800df2c <taskComputeImu+0x288>)
 800dda2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dda6:	4b62      	ldr	r3, [pc, #392]	; (800df30 <taskComputeImu+0x28c>)
 800dda8:	801a      	strh	r2, [r3, #0]
 800ddaa:	e000      	b.n	800ddae <taskComputeImu+0x10a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddac:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800ddae:	2004      	movs	r0, #4
 800ddb0:	f7f9 f8d0 	bl	8006f54 <sensors>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 80e5 	beq.w	800df86 <taskComputeImu+0x2e2>
            if (f.BARO_MODE) {
 800ddbc:	4b5a      	ldr	r3, [pc, #360]	; (800df28 <taskComputeImu+0x284>)
 800ddbe:	799b      	ldrb	r3, [r3, #6]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 80e0 	beq.w	800df86 <taskComputeImu+0x2e2>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800ddc6:	4b58      	ldr	r3, [pc, #352]	; (800df28 <taskComputeImu+0x284>)
 800ddc8:	7c1b      	ldrb	r3, [r3, #16]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f040 80c8 	bne.w	800df60 <taskComputeImu+0x2bc>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800ddd0:	4b59      	ldr	r3, [pc, #356]	; (800df38 <taskComputeImu+0x294>)
 800ddd2:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d053      	beq.n	800de82 <taskComputeImu+0x1de>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800ddda:	4b52      	ldr	r3, [pc, #328]	; (800df24 <taskComputeImu+0x280>)
 800dddc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b57      	ldr	r3, [pc, #348]	; (800df40 <taskComputeImu+0x29c>)
 800dde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bfb8      	it	lt
 800ddee:	425b      	neglt	r3, r3
 800ddf0:	4a51      	ldr	r2, [pc, #324]	; (800df38 <taskComputeImu+0x294>)
 800ddf2:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	dd22      	ble.n	800de40 <taskComputeImu+0x19c>
                            errorVelocityI = 0;
 800ddfa:	4b52      	ldr	r3, [pc, #328]	; (800df44 <taskComputeImu+0x2a0>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de00:	4b51      	ldr	r3, [pc, #324]	; (800df48 <taskComputeImu+0x2a4>)
 800de02:	2201      	movs	r2, #1
 800de04:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de06:	4b47      	ldr	r3, [pc, #284]	; (800df24 <taskComputeImu+0x280>)
 800de08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	4b45      	ldr	r3, [pc, #276]	; (800df24 <taskComputeImu+0x280>)
 800de10:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de14:	4b4a      	ldr	r3, [pc, #296]	; (800df40 <taskComputeImu+0x29c>)
 800de16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de1a:	4299      	cmp	r1, r3
 800de1c:	dd06      	ble.n	800de2c <taskComputeImu+0x188>
 800de1e:	4b46      	ldr	r3, [pc, #280]	; (800df38 <taskComputeImu+0x294>)
 800de20:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de24:	b29b      	uxth	r3, r3
 800de26:	425b      	negs	r3, r3
 800de28:	b29b      	uxth	r3, r3
 800de2a:	e003      	b.n	800de34 <taskComputeImu+0x190>
 800de2c:	4b42      	ldr	r3, [pc, #264]	; (800df38 <taskComputeImu+0x294>)
 800de2e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de32:	b29b      	uxth	r3, r3
 800de34:	4413      	add	r3, r2
 800de36:	b29b      	uxth	r3, r3
 800de38:	b21a      	sxth	r2, r3
 800de3a:	4b3a      	ldr	r3, [pc, #232]	; (800df24 <taskComputeImu+0x280>)
 800de3c:	80da      	strh	r2, [r3, #6]
 800de3e:	e0a2      	b.n	800df86 <taskComputeImu+0x2e2>
                        } else {
                            if (isAltHoldChanged) {
 800de40:	4b41      	ldr	r3, [pc, #260]	; (800df48 <taskComputeImu+0x2a4>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d006      	beq.n	800de56 <taskComputeImu+0x1b2>
                                AltHold = EstAlt;
 800de48:	4b40      	ldr	r3, [pc, #256]	; (800df4c <taskComputeImu+0x2a8>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a40      	ldr	r2, [pc, #256]	; (800df50 <taskComputeImu+0x2ac>)
 800de4e:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800de50:	4b3d      	ldr	r3, [pc, #244]	; (800df48 <taskComputeImu+0x2a4>)
 800de52:	2200      	movs	r2, #0
 800de54:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de56:	4b3a      	ldr	r3, [pc, #232]	; (800df40 <taskComputeImu+0x29c>)
 800de58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de5c:	461a      	mov	r2, r3
 800de5e:	4b3d      	ldr	r3, [pc, #244]	; (800df54 <taskComputeImu+0x2b0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4413      	add	r3, r2
 800de64:	4a33      	ldr	r2, [pc, #204]	; (800df34 <taskComputeImu+0x290>)
 800de66:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800de6a:	4611      	mov	r1, r2
 800de6c:	4a31      	ldr	r2, [pc, #196]	; (800df34 <taskComputeImu+0x290>)
 800de6e:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800de72:	4618      	mov	r0, r3
 800de74:	f7f5 ff34 	bl	8003ce0 <constrain>
 800de78:	4603      	mov	r3, r0
 800de7a:	b21a      	sxth	r2, r3
 800de7c:	4b29      	ldr	r3, [pc, #164]	; (800df24 <taskComputeImu+0x280>)
 800de7e:	80da      	strh	r2, [r3, #6]
 800de80:	e081      	b.n	800df86 <taskComputeImu+0x2e2>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de82:	4b28      	ldr	r3, [pc, #160]	; (800df24 <taskComputeImu+0x280>)
 800de84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de88:	461a      	mov	r2, r3
 800de8a:	4b2d      	ldr	r3, [pc, #180]	; (800df40 <taskComputeImu+0x29c>)
 800de8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	bfb8      	it	lt
 800de96:	425b      	neglt	r3, r3
 800de98:	4a27      	ldr	r2, [pc, #156]	; (800df38 <taskComputeImu+0x294>)
 800de9a:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de9e:	4293      	cmp	r3, r2
 800dea0:	dd14      	ble.n	800decc <taskComputeImu+0x228>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800dea2:	4b20      	ldr	r3, [pc, #128]	; (800df24 <taskComputeImu+0x280>)
 800dea4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b25      	ldr	r3, [pc, #148]	; (800df40 <taskComputeImu+0x29c>)
 800deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	0fda      	lsrs	r2, r3, #31
 800deb4:	4413      	add	r3, r2
 800deb6:	105b      	asrs	r3, r3, #1
 800deb8:	461a      	mov	r2, r3
 800deba:	4b27      	ldr	r3, [pc, #156]	; (800df58 <taskComputeImu+0x2b4>)
 800debc:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800debe:	4b27      	ldr	r3, [pc, #156]	; (800df5c <taskComputeImu+0x2b8>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800dec4:	4b20      	ldr	r3, [pc, #128]	; (800df48 <taskComputeImu+0x2a4>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	e00d      	b.n	800dee8 <taskComputeImu+0x244>
                        } else if (isAltHoldChanged) {
 800decc:	4b1e      	ldr	r3, [pc, #120]	; (800df48 <taskComputeImu+0x2a4>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d009      	beq.n	800dee8 <taskComputeImu+0x244>
                            AltHold = EstAlt;
 800ded4:	4b1d      	ldr	r3, [pc, #116]	; (800df4c <taskComputeImu+0x2a8>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a1d      	ldr	r2, [pc, #116]	; (800df50 <taskComputeImu+0x2ac>)
 800deda:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800dedc:	4b1f      	ldr	r3, [pc, #124]	; (800df5c <taskComputeImu+0x2b8>)
 800dede:	2200      	movs	r2, #0
 800dee0:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800dee2:	4b19      	ldr	r3, [pc, #100]	; (800df48 <taskComputeImu+0x2a4>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800dee8:	4b15      	ldr	r3, [pc, #84]	; (800df40 <taskComputeImu+0x29c>)
 800deea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deee:	461a      	mov	r2, r3
 800def0:	4b18      	ldr	r3, [pc, #96]	; (800df54 <taskComputeImu+0x2b0>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4413      	add	r3, r2
 800def6:	4a0f      	ldr	r2, [pc, #60]	; (800df34 <taskComputeImu+0x290>)
 800def8:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800defc:	4611      	mov	r1, r2
 800defe:	4a0d      	ldr	r2, [pc, #52]	; (800df34 <taskComputeImu+0x290>)
 800df00:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df04:	4618      	mov	r0, r3
 800df06:	f7f5 feeb 	bl	8003ce0 <constrain>
 800df0a:	4603      	mov	r3, r0
 800df0c:	b21a      	sxth	r2, r3
 800df0e:	4b05      	ldr	r3, [pc, #20]	; (800df24 <taskComputeImu+0x280>)
 800df10:	80da      	strh	r2, [r3, #6]
 800df12:	e038      	b.n	800df86 <taskComputeImu+0x2e2>
 800df14:	20000fbc 	.word	0x20000fbc
 800df18:	2000137c 	.word	0x2000137c
 800df1c:	20000e7c 	.word	0x20000e7c
 800df20:	20000e80 	.word	0x20000e80
 800df24:	200020b0 	.word	0x200020b0
 800df28:	20002014 	.word	0x20002014
 800df2c:	20002270 	.word	0x20002270
 800df30:	200021f0 	.word	0x200021f0
 800df34:	200019c8 	.word	0x200019c8
 800df38:	20001890 	.word	0x20001890
 800df3c:	88888889 	.word	0x88888889
 800df40:	20000eb8 	.word	0x20000eb8
 800df44:	20000cbc 	.word	0x20000cbc
 800df48:	20000fbd 	.word	0x20000fbd
 800df4c:	20001f94 	.word	0x20001f94
 800df50:	20001fa0 	.word	0x20001fa0
 800df54:	20000cb0 	.word	0x20000cb0
 800df58:	20000cb4 	.word	0x20000cb4
 800df5c:	20000cb8 	.word	0x20000cb8
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800df60:	4bac      	ldr	r3, [pc, #688]	; (800e214 <taskComputeImu+0x570>)
 800df62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df66:	b29a      	uxth	r2, r3
 800df68:	4bab      	ldr	r3, [pc, #684]	; (800e218 <taskComputeImu+0x574>)
 800df6a:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800df6e:	b299      	uxth	r1, r3
 800df70:	4baa      	ldr	r3, [pc, #680]	; (800e21c <taskComputeImu+0x578>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	b29b      	uxth	r3, r3
 800df76:	fb11 f303 	smulbb	r3, r1, r3
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	4413      	add	r3, r2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	b21a      	sxth	r2, r3
 800df82:	4ba4      	ldr	r3, [pc, #656]	; (800e214 <taskComputeImu+0x570>)
 800df84:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800df86:	4ba6      	ldr	r3, [pc, #664]	; (800e220 <taskComputeImu+0x57c>)
 800df88:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d014      	beq.n	800dfba <taskComputeImu+0x316>
 800df90:	4ba4      	ldr	r3, [pc, #656]	; (800e224 <taskComputeImu+0x580>)
 800df92:	78db      	ldrb	r3, [r3, #3]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d103      	bne.n	800dfa0 <taskComputeImu+0x2fc>
 800df98:	4ba2      	ldr	r3, [pc, #648]	; (800e224 <taskComputeImu+0x580>)
 800df9a:	791b      	ldrb	r3, [r3, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00c      	beq.n	800dfba <taskComputeImu+0x316>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dfa0:	4b9c      	ldr	r3, [pc, #624]	; (800e214 <taskComputeImu+0x570>)
 800dfa2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	4b9f      	ldr	r3, [pc, #636]	; (800e228 <taskComputeImu+0x584>)
 800dfaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	b21a      	sxth	r2, r3
 800dfb6:	4b97      	ldr	r3, [pc, #604]	; (800e214 <taskComputeImu+0x570>)
 800dfb8:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800dfba:	2020      	movs	r0, #32
 800dfbc:	f7f8 ffca 	bl	8006f54 <sensors>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 8115 	beq.w	800e1f2 <taskComputeImu+0x54e>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800dfc8:	4b96      	ldr	r3, [pc, #600]	; (800e224 <taskComputeImu+0x580>)
 800dfca:	79db      	ldrb	r3, [r3, #7]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d104      	bne.n	800dfda <taskComputeImu+0x336>
 800dfd0:	4b94      	ldr	r3, [pc, #592]	; (800e224 <taskComputeImu+0x580>)
 800dfd2:	7a1b      	ldrb	r3, [r3, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f000 8103 	beq.w	800e1e0 <taskComputeImu+0x53c>
 800dfda:	4b92      	ldr	r3, [pc, #584]	; (800e224 <taskComputeImu+0x580>)
 800dfdc:	7b1b      	ldrb	r3, [r3, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 80fe 	beq.w	800e1e0 <taskComputeImu+0x53c>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800dfe4:	4b91      	ldr	r3, [pc, #580]	; (800e22c <taskComputeImu+0x588>)
 800dfe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfea:	ee07 3a90 	vmov	s15, r3
 800dfee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dff2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800e230 <taskComputeImu+0x58c>
 800dff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dffa:	eeb0 0a67 	vmov.f32	s0, s15
 800dffe:	f014 f89b 	bl	8022138 <sinf>
 800e002:	ed87 0a03 	vstr	s0, [r7, #12]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e006:	4b89      	ldr	r3, [pc, #548]	; (800e22c <taskComputeImu+0x588>)
 800e008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e014:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800e230 <taskComputeImu+0x58c>
 800e018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e01c:	eeb0 0a67 	vmov.f32	s0, s15
 800e020:	f014 f80a 	bl	8022038 <cosf>
 800e024:	ed87 0a02 	vstr	s0, [r7, #8]
                if (!f.FIXED_WING) {
 800e028:	4b7e      	ldr	r3, [pc, #504]	; (800e224 <taskComputeImu+0x580>)
 800e02a:	7c1b      	ldrb	r3, [r3, #16]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f040 80d4 	bne.w	800e1da <taskComputeImu+0x536>
                    if (cfg.nav_slew_rate) {
 800e032:	4b7b      	ldr	r3, [pc, #492]	; (800e220 <taskComputeImu+0x57c>)
 800e034:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 8087 	beq.w	800e14c <taskComputeImu+0x4a8>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e03e:	4b7d      	ldr	r3, [pc, #500]	; (800e234 <taskComputeImu+0x590>)
 800e040:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e044:	461a      	mov	r2, r3
 800e046:	4b7c      	ldr	r3, [pc, #496]	; (800e238 <taskComputeImu+0x594>)
 800e048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fb fb82 	bl	8009758 <wrap_18000>
 800e054:	4b72      	ldr	r3, [pc, #456]	; (800e220 <taskComputeImu+0x57c>)
 800e056:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e05a:	425b      	negs	r3, r3
 800e05c:	4a70      	ldr	r2, [pc, #448]	; (800e220 <taskComputeImu+0x57c>)
 800e05e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e062:	4619      	mov	r1, r3
 800e064:	f7f5 fe3c 	bl	8003ce0 <constrain>
 800e068:	4601      	mov	r1, r0
 800e06a:	4b73      	ldr	r3, [pc, #460]	; (800e238 <taskComputeImu+0x594>)
 800e06c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e070:	b29a      	uxth	r2, r3
 800e072:	b28b      	uxth	r3, r1
 800e074:	4413      	add	r3, r2
 800e076:	b29b      	uxth	r3, r3
 800e078:	b21a      	sxth	r2, r3
 800e07a:	4b6f      	ldr	r3, [pc, #444]	; (800e238 <taskComputeImu+0x594>)
 800e07c:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e07e:	4b6d      	ldr	r3, [pc, #436]	; (800e234 <taskComputeImu+0x590>)
 800e080:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e084:	461a      	mov	r2, r3
 800e086:	4b6c      	ldr	r3, [pc, #432]	; (800e238 <taskComputeImu+0x594>)
 800e088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fb62 	bl	8009758 <wrap_18000>
 800e094:	4b62      	ldr	r3, [pc, #392]	; (800e220 <taskComputeImu+0x57c>)
 800e096:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e09a:	425b      	negs	r3, r3
 800e09c:	4a60      	ldr	r2, [pc, #384]	; (800e220 <taskComputeImu+0x57c>)
 800e09e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f7f5 fe1c 	bl	8003ce0 <constrain>
 800e0a8:	4601      	mov	r1, r0
 800e0aa:	4b63      	ldr	r3, [pc, #396]	; (800e238 <taskComputeImu+0x594>)
 800e0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	b28b      	uxth	r3, r1
 800e0b4:	4413      	add	r3, r2
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	b21a      	sxth	r2, r3
 800e0ba:	4b5f      	ldr	r3, [pc, #380]	; (800e238 <taskComputeImu+0x594>)
 800e0bc:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e0be:	4b5e      	ldr	r3, [pc, #376]	; (800e238 <taskComputeImu+0x594>)
 800e0c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0c4:	ee07 3a90 	vmov	s15, r3
 800e0c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800e0d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0d4:	4b58      	ldr	r3, [pc, #352]	; (800e238 <taskComputeImu+0x594>)
 800e0d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0da:	ee07 3a90 	vmov	s15, r3
 800e0de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e0f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0fa:	ee17 3a90 	vmov	r3, s15
 800e0fe:	b21a      	sxth	r2, r3
 800e100:	4b4e      	ldr	r3, [pc, #312]	; (800e23c <taskComputeImu+0x598>)
 800e102:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e104:	4b4c      	ldr	r3, [pc, #304]	; (800e238 <taskComputeImu+0x594>)
 800e106:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e10a:	ee07 3a90 	vmov	s15, r3
 800e10e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e112:	edd7 7a03 	vldr	s15, [r7, #12]
 800e116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e11a:	4b47      	ldr	r3, [pc, #284]	; (800e238 <taskComputeImu+0x594>)
 800e11c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e120:	ee07 3a90 	vmov	s15, r3
 800e124:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e128:	edd7 7a02 	vldr	s15, [r7, #8]
 800e12c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e130:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e134:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e13c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e140:	ee17 3a90 	vmov	r3, s15
 800e144:	b21a      	sxth	r2, r3
 800e146:	4b3d      	ldr	r3, [pc, #244]	; (800e23c <taskComputeImu+0x598>)
 800e148:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e14a:	e052      	b.n	800e1f2 <taskComputeImu+0x54e>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e14c:	4b39      	ldr	r3, [pc, #228]	; (800e234 <taskComputeImu+0x590>)
 800e14e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e152:	ee07 3a90 	vmov	s15, r3
 800e156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e15a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e15e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e162:	4b34      	ldr	r3, [pc, #208]	; (800e234 <taskComputeImu+0x590>)
 800e164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e168:	ee07 3a90 	vmov	s15, r3
 800e16c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e170:	edd7 7a03 	vldr	s15, [r7, #12]
 800e174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e17c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e188:	ee17 3a90 	vmov	r3, s15
 800e18c:	b21a      	sxth	r2, r3
 800e18e:	4b2b      	ldr	r3, [pc, #172]	; (800e23c <taskComputeImu+0x598>)
 800e190:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e192:	4b28      	ldr	r3, [pc, #160]	; (800e234 <taskComputeImu+0x590>)
 800e194:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e198:	ee07 3a90 	vmov	s15, r3
 800e19c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1a8:	4b22      	ldr	r3, [pc, #136]	; (800e234 <taskComputeImu+0x590>)
 800e1aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1ae:	ee07 3a90 	vmov	s15, r3
 800e1b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e1ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1ce:	ee17 3a90 	vmov	r3, s15
 800e1d2:	b21a      	sxth	r2, r3
 800e1d4:	4b19      	ldr	r3, [pc, #100]	; (800e23c <taskComputeImu+0x598>)
 800e1d6:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1d8:	e00b      	b.n	800e1f2 <taskComputeImu+0x54e>
                    }
                } else fw_nav();
 800e1da:	f7f9 f835 	bl	8007248 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1de:	e008      	b.n	800e1f2 <taskComputeImu+0x54e>
            } else {
                GPS_angle[ROLL] = 0;
 800e1e0:	4b16      	ldr	r3, [pc, #88]	; (800e23c <taskComputeImu+0x598>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e1e6:	4b15      	ldr	r3, [pc, #84]	; (800e23c <taskComputeImu+0x598>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e1ec:	4b13      	ldr	r3, [pc, #76]	; (800e23c <taskComputeImu+0x598>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	809a      	strh	r2, [r3, #4]
            }
        }
#endif

        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e1f2:	4b13      	ldr	r3, [pc, #76]	; (800e240 <taskComputeImu+0x59c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4798      	blx	r3

        mixTable();
 800e1f8:	f7fd fb92 	bl	800b920 <mixTable>
        writeServos();
 800e1fc:	f7fc ffe2 	bl	800b1c4 <writeServos>
        writeMotors();
 800e200:	f7fd f918 	bl	800b434 <writeMotors>
        step = 0;
 800e204:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <taskComputeImu+0x5a0>)
 800e206:	2200      	movs	r2, #0
 800e208:	701a      	strb	r2, [r3, #0]
	}

    return 0;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	200020b0 	.word	0x200020b0
 800e218:	200019c8 	.word	0x200019c8
 800e21c:	20000cb0 	.word	0x20000cb0
 800e220:	20001890 	.word	0x20001890
 800e224:	20002014 	.word	0x20002014
 800e228:	20000cc4 	.word	0x20000cc4
 800e22c:	20002270 	.word	0x20002270
 800e230:	3c8efa35 	.word	0x3c8efa35
 800e234:	2000204c 	.word	0x2000204c
 800e238:	20002030 	.word	0x20002030
 800e23c:	20000e90 	.word	0x20000e90
 800e240:	20000050 	.word	0x20000050
 800e244:	20000fbc 	.word	0x20000fbc

0800e248 <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e248:	b480      	push	{r7}
 800e24a:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e24c:	4b05      	ldr	r3, [pc, #20]	; (800e264 <mspFrameRecieve+0x1c>)
 800e24e:	2200      	movs	r2, #0
 800e250:	801a      	strh	r2, [r3, #0]

    g_task_compute_rc->immediate = TRUE;
 800e252:	4b05      	ldr	r3, [pc, #20]	; (800e268 <mspFrameRecieve+0x20>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2201      	movs	r2, #1
 800e258:	705a      	strb	r2, [r3, #1]
}
 800e25a:	bf00      	nop
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20000e82 	.word	0x20000e82
 800e268:	200021d8 	.word	0x200021d8

0800e26c <sensorsAutodetect>:
	.baro.hardware = NULL		// barometer access functions
};
PifImuSensor imu_sensor;

bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&imu_sensor);
 800e27a:	4874      	ldr	r0, [pc, #464]	; (800e44c <sensorsAutodetect+0x1e0>)
 800e27c:	f00a fa32 	bl	80186e4 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e280:	4b73      	ldr	r3, [pc, #460]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e282:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e286:	4b72      	ldr	r3, [pc, #456]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e288:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e28c:	4b70      	ldr	r3, [pc, #448]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e28e:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e292:	486e      	ldr	r0, [pc, #440]	; (800e44c <sensorsAutodetect+0x1e0>)
 800e294:	f00a fa34 	bl	8018700 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e298:	4b6d      	ldr	r3, [pc, #436]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e29a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e29e:	4b6d      	ldr	r3, [pc, #436]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e2a0:	821a      	strh	r2, [r3, #16]

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e2a2:	e010      	b.n	800e2c6 <sensorsAutodetect+0x5a>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	6852      	ldr	r2, [r2, #4]
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	4869      	ldr	r0, [pc, #420]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e2b0:	4798      	blx	r3
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <sensorsAutodetect+0x54>
    	    sensorsSet(SENSOR_GYRO);
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	f7f8 fe61 	bl	8006f80 <sensorsSet>
    		break;
 800e2be:	e006      	b.n	800e2ce <sensorsAutodetect+0x62>
    	}
    	gyroDetect++;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1ea      	bne.n	800e2a4 <sensorsAutodetect+0x38>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e2ce:	4b61      	ldr	r3, [pc, #388]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <sensorsAutodetect+0x6e>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e0b3      	b.n	800e442 <sensorsAutodetect+0x1d6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e2da:	4b5e      	ldr	r3, [pc, #376]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <sensorsAutodetect+0x7e>
    	sensorsSet(SENSOR_ACC);
 800e2e2:	2002      	movs	r0, #2
 800e2e4:	f7f8 fe4c 	bl	8006f80 <sensorsSet>
 800e2e8:	e018      	b.n	800e31c <sensorsAutodetect+0xb0>
    }
    else if (accDetect) {
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d015      	beq.n	800e31c <sensorsAutodetect+0xb0>
        while (accDetect->p_func) {
 800e2f0:	e010      	b.n	800e314 <sensorsAutodetect+0xa8>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	6852      	ldr	r2, [r2, #4]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4855      	ldr	r0, [pc, #340]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e2fe:	4798      	blx	r3
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <sensorsAutodetect+0xa2>
            	sensorsSet(SENSOR_ACC);
 800e306:	2002      	movs	r0, #2
 800e308:	f7f8 fe3a 	bl	8006f80 <sensorsSet>
        		break;
 800e30c:	e006      	b.n	800e31c <sensorsAutodetect+0xb0>
        	}
        	accDetect++;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	3308      	adds	r3, #8
 800e312:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1ea      	bne.n	800e2f2 <sensorsAutodetect+0x86>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e31c:	4b4d      	ldr	r3, [pc, #308]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e320:	2b00      	cmp	r3, #0
 800e322:	d003      	beq.n	800e32c <sensorsAutodetect+0xc0>
    	sensorsSet(SENSOR_BARO);
 800e324:	2004      	movs	r0, #4
 800e326:	f7f8 fe2b 	bl	8006f80 <sensorsSet>
 800e32a:	e018      	b.n	800e35e <sensorsAutodetect+0xf2>
    }
    else if (baroDetect) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d015      	beq.n	800e35e <sensorsAutodetect+0xf2>
		while (baroDetect->p_func) {
 800e332:	e010      	b.n	800e356 <sensorsAutodetect+0xea>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	6852      	ldr	r2, [r2, #4]
 800e33c:	4611      	mov	r1, r2
 800e33e:	4845      	ldr	r0, [pc, #276]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e340:	4798      	blx	r3
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d003      	beq.n	800e350 <sensorsAutodetect+0xe4>
				sensorsSet(SENSOR_BARO);
 800e348:	2004      	movs	r0, #4
 800e34a:	f7f8 fe19 	bl	8006f80 <sensorsSet>
				break;
 800e34e:	e006      	b.n	800e35e <sensorsAutodetect+0xf2>
			}
			baroDetect++;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3308      	adds	r3, #8
 800e354:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1ea      	bne.n	800e334 <sensorsAutodetect+0xc8>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e35e:	2002      	movs	r0, #2
 800e360:	f7f8 fdf8 	bl	8006f54 <sensors>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d006      	beq.n	800e378 <sensorsAutodetect+0x10c>
        sensor_set.acc.init(mcfg.acc_align);
 800e36a:	4b3a      	ldr	r3, [pc, #232]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e36c:	69db      	ldr	r3, [r3, #28]
 800e36e:	4a38      	ldr	r2, [pc, #224]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e370:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e374:	4610      	mov	r0, r2
 800e376:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(mcfg.gyro_align);
 800e378:	4b36      	ldr	r3, [pc, #216]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	4a34      	ldr	r2, [pc, #208]	; (800e450 <sensorsAutodetect+0x1e4>)
 800e37e:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e382:	4610      	mov	r0, r2
 800e384:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e386:	4b33      	ldr	r3, [pc, #204]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d003      	beq.n	800e396 <sensorsAutodetect+0x12a>
    	sensorsSet(SENSOR_MAG);
 800e38e:	2008      	movs	r0, #8
 800e390:	f7f8 fdf6 	bl	8006f80 <sensorsSet>
 800e394:	e018      	b.n	800e3c8 <sensorsAutodetect+0x15c>
    }
    else if (magDetect) {
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d015      	beq.n	800e3c8 <sensorsAutodetect+0x15c>
		while (magDetect->p_func) {
 800e39c:	e010      	b.n	800e3c0 <sensorsAutodetect+0x154>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	6852      	ldr	r2, [r2, #4]
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	482a      	ldr	r0, [pc, #168]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e3aa:	4798      	blx	r3
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <sensorsAutodetect+0x14e>
				sensorsSet(SENSOR_MAG);
 800e3b2:	2008      	movs	r0, #8
 800e3b4:	f7f8 fde4 	bl	8006f80 <sensorsSet>
				break;
 800e3b8:	e006      	b.n	800e3c8 <sensorsAutodetect+0x15c>
			}
			magDetect++;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1ea      	bne.n	800e39e <sensorsAutodetect+0x132>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e3c8:	4b23      	ldr	r3, [pc, #140]	; (800e458 <sensorsAutodetect+0x1ec>)
 800e3ca:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3ce:	4a23      	ldr	r2, [pc, #140]	; (800e45c <sensorsAutodetect+0x1f0>)
 800e3d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e3d4:	1152      	asrs	r2, r2, #5
 800e3d6:	17db      	asrs	r3, r3, #31
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e3dc:	4b1e      	ldr	r3, [pc, #120]	; (800e458 <sensorsAutodetect+0x1ec>)
 800e3de:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3e2:	4a1e      	ldr	r2, [pc, #120]	; (800e45c <sensorsAutodetect+0x1f0>)
 800e3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800e3e8:	1151      	asrs	r1, r2, #5
 800e3ea:	17da      	asrs	r2, r3, #31
 800e3ec:	1a8a      	subs	r2, r1, r2
 800e3ee:	2164      	movs	r1, #100	; 0x64
 800e3f0:	fb01 f202 	mul.w	r2, r1, r2
 800e3f4:	1a9b      	subs	r3, r3, r2
 800e3f6:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e3f8:	2008      	movs	r0, #8
 800e3fa:	f7f8 fdab 	bl	8006f54 <sensors>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d019      	beq.n	800e438 <sensorsAutodetect+0x1cc>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e408:	ee07 3a90 	vmov	s15, r3
 800e40c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e410:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e414:	ee07 3a90 	vmov	s15, r3
 800e418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e41c:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e460 <sensorsAutodetect+0x1f4>
 800e420:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e42c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e430:	4b08      	ldr	r3, [pc, #32]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e432:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800e436:	e003      	b.n	800e440 <sensorsAutodetect+0x1d4>
    else
        sensor_set.mag.declination = 0.0f;
 800e438:	4b06      	ldr	r3, [pc, #24]	; (800e454 <sensorsAutodetect+0x1e8>)
 800e43a:	f04f 0200 	mov.w	r2, #0
 800e43e:	659a      	str	r2, [r3, #88]	; 0x58

    return true;
 800e440:	2301      	movs	r3, #1
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	200021f8 	.word	0x200021f8
 800e450:	200019c8 	.word	0x200019c8
 800e454:	20000fcc 	.word	0x20000fcc
 800e458:	20001890 	.word	0x20001890
 800e45c:	51eb851f 	.word	0x51eb851f
 800e460:	3c888889 	.word	0x3c888889

0800e464 <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e46e:	4b2a      	ldr	r3, [pc, #168]	; (800e518 <RSSI_getValue+0xb4>)
 800e470:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e474:	2b00      	cmp	r3, #0
 800e476:	d029      	beq.n	800e4cc <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e478:	4b27      	ldr	r3, [pc, #156]	; (800e518 <RSSI_getValue+0xb4>)
 800e47a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e47e:	3303      	adds	r3, #3
 800e480:	4a26      	ldr	r2, [pc, #152]	; (800e51c <RSSI_getValue+0xb8>)
 800e482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e486:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e48c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e490:	4a21      	ldr	r2, [pc, #132]	; (800e518 <RSSI_getValue+0xb4>)
 800e492:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e496:	2100      	movs	r1, #0
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f5 fc21 	bl	8003ce0 <constrain>
 800e49e:	ee07 0a90 	vmov	s15, r0
 800e4a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e4a6:	4b1c      	ldr	r3, [pc, #112]	; (800e518 <RSSI_getValue+0xb4>)
 800e4a8:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e4ac:	ee07 3a90 	vmov	s15, r3
 800e4b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4b8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e520 <RSSI_getValue+0xbc>
 800e4bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4c4:	ee17 3a90 	vmov	r3, s15
 800e4c8:	80fb      	strh	r3, [r7, #6]
 800e4ca:	e020      	b.n	800e50e <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e4cc:	4b12      	ldr	r3, [pc, #72]	; (800e518 <RSSI_getValue+0xb4>)
 800e4ce:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d01b      	beq.n	800e50e <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e4d6:	2003      	movs	r0, #3
 800e4d8:	f7f2 fe6a 	bl	80011b0 <actGetAdcChannel>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	461a      	mov	r2, r3
 800e4e0:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <RSSI_getValue+0xb4>)
 800e4e2:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	029b      	lsls	r3, r3, #10
 800e4ec:	1a9b      	subs	r3, r3, r2
 800e4ee:	4a0a      	ldr	r2, [pc, #40]	; (800e518 <RSSI_getValue+0xb4>)
 800e4f0:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4f8:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e4fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e4fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e502:	2100      	movs	r1, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f7f5 fbeb 	bl	8003ce0 <constrain>
 800e50a:	4603      	mov	r3, r0
 800e50c:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e50e:	88fb      	ldrh	r3, [r7, #6]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	200019c8 	.word	0x200019c8
 800e51c:	20002184 	.word	0x20002184
 800e520:	447fc000 	.word	0x447fc000

0800e524 <batteryInit>:

void batteryInit(void)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e52a:	f04f 0300 	mov.w	r3, #0
 800e52e:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e530:	2300      	movs	r3, #0
 800e532:	607b      	str	r3, [r7, #4]
 800e534:	e018      	b.n	800e568 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e536:	f7f2 fe4d 	bl	80011d4 <actGetBatteryVoltage>
 800e53a:	eeb0 7a40 	vmov.f32	s14, s0
 800e53e:	4b35      	ldr	r3, [pc, #212]	; (800e614 <batteryInit+0xf0>)
 800e540:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e544:	ee07 3a90 	vmov	s15, r3
 800e548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e550:	ed97 7a00 	vldr	s14, [r7]
 800e554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e558:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e55c:	200a      	movs	r0, #10
 800e55e:	f002 ffbb 	bl	80114d8 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3301      	adds	r3, #1
 800e566:	607b      	str	r3, [r7, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b1f      	cmp	r3, #31
 800e56c:	d9e3      	bls.n	800e536 <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e56e:	ed97 7a00 	vldr	s14, [r7]
 800e572:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e618 <batteryInit+0xf4>
 800e576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e57a:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e57e:	edd7 7a00 	vldr	s15, [r7]
 800e582:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e586:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e58a:	ee16 0a90 	vmov	r0, s13
 800e58e:	f7f1 ff99 	bl	80004c4 <__aeabi_f2d>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4921      	ldr	r1, [pc, #132]	; (800e61c <batteryInit+0xf8>)
 800e598:	2002      	movs	r0, #2
 800e59a:	f004 fff7 	bl	801358c <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e59e:	2301      	movs	r3, #1
 800e5a0:	607b      	str	r3, [r7, #4]
 800e5a2:	e014      	b.n	800e5ce <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e5a4:	4b1b      	ldr	r3, [pc, #108]	; (800e614 <batteryInit+0xf0>)
 800e5a6:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	fb03 f302 	mul.w	r3, r3, r2
 800e5b2:	ee07 3a90 	vmov	s15, r3
 800e5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ba:	ed97 7a00 	vldr	s14, [r7]
 800e5be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c6:	d406      	bmi.n	800e5d6 <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	607b      	str	r3, [r7, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b07      	cmp	r3, #7
 800e5d2:	d9e7      	bls.n	800e5a4 <batteryInit+0x80>
 800e5d4:	e000      	b.n	800e5d8 <batteryInit+0xb4>
            break;
 800e5d6:	bf00      	nop
    }
    batteryCellCount = i;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	4b10      	ldr	r3, [pc, #64]	; (800e620 <batteryInit+0xfc>)
 800e5de:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e5e0:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <batteryInit+0xf0>)
 800e5e2:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	fb12 f303 	smulbb	r3, r2, r3
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	4b0c      	ldr	r3, [pc, #48]	; (800e624 <batteryInit+0x100>)
 800e5f4:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <batteryInit+0xf0>)
 800e5f8:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	b29b      	uxth	r3, r3
 800e602:	fb12 f303 	smulbb	r3, r2, r3
 800e606:	b29a      	uxth	r2, r3
 800e608:	4b07      	ldr	r3, [pc, #28]	; (800e628 <batteryInit+0x104>)
 800e60a:	801a      	strh	r2, [r3, #0]
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	200019c8 	.word	0x200019c8
 800e618:	42000000 	.word	0x42000000
 800e61c:	080260bc 	.word	0x080260bc
 800e620:	20000054 	.word	0x20000054
 800e624:	200020c0 	.word	0x200020c0
 800e628:	20002182 	.word	0x20002182

0800e62c <ACC_Common>:

static void ACC_Common(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e632:	4b4d      	ldr	r3, [pc, #308]	; (800e768 <ACC_Common+0x13c>)
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d06b      	beq.n	800e712 <ACC_Common+0xe6>
        for (axis = 0; axis < 3; axis++) {
 800e63a:	2300      	movs	r3, #0
 800e63c:	607b      	str	r3, [r7, #4]
 800e63e:	e025      	b.n	800e68c <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e640:	4b49      	ldr	r3, [pc, #292]	; (800e768 <ACC_Common+0x13c>)
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e648:	d104      	bne.n	800e654 <ACC_Common+0x28>
                a[axis] = 0;
 800e64a:	4a48      	ldr	r2, [pc, #288]	; (800e76c <ACC_Common+0x140>)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2100      	movs	r1, #0
 800e650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e654:	4a45      	ldr	r2, [pc, #276]	; (800e76c <ACC_Common+0x140>)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e65c:	4944      	ldr	r1, [pc, #272]	; (800e770 <ACC_Common+0x144>)
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e664:	441a      	add	r2, r3
 800e666:	4941      	ldr	r1, [pc, #260]	; (800e76c <ACC_Common+0x140>)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e66e:	4a40      	ldr	r2, [pc, #256]	; (800e770 <ACC_Common+0x144>)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2100      	movs	r1, #0
 800e674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e678:	4a3e      	ldr	r2, [pc, #248]	; (800e774 <ACC_Common+0x148>)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	33b4      	adds	r3, #180	; 0xb4
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	4413      	add	r3, r2
 800e682:	2200      	movs	r2, #0
 800e684:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3301      	adds	r3, #1
 800e68a:	607b      	str	r3, [r7, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b02      	cmp	r3, #2
 800e690:	ddd6      	ble.n	800e640 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e692:	4b35      	ldr	r3, [pc, #212]	; (800e768 <ACC_Common+0x13c>)
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d135      	bne.n	800e706 <ACC_Common+0xda>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e69a:	4b34      	ldr	r3, [pc, #208]	; (800e76c <ACC_Common+0x140>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	33c8      	adds	r3, #200	; 0xc8
 800e6a0:	4a35      	ldr	r2, [pc, #212]	; (800e778 <ACC_Common+0x14c>)
 800e6a2:	fb82 1203 	smull	r1, r2, r2, r3
 800e6a6:	11d2      	asrs	r2, r2, #7
 800e6a8:	17db      	asrs	r3, r3, #31
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	4b31      	ldr	r3, [pc, #196]	; (800e774 <ACC_Common+0x148>)
 800e6b0:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <ACC_Common+0x140>)
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	33c8      	adds	r3, #200	; 0xc8
 800e6ba:	4a2f      	ldr	r2, [pc, #188]	; (800e778 <ACC_Common+0x14c>)
 800e6bc:	fb82 1203 	smull	r1, r2, r2, r3
 800e6c0:	11d2      	asrs	r2, r2, #7
 800e6c2:	17db      	asrs	r3, r3, #31
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	b21a      	sxth	r2, r3
 800e6c8:	4b2a      	ldr	r3, [pc, #168]	; (800e774 <ACC_Common+0x148>)
 800e6ca:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc_1G;
 800e6ce:	4b27      	ldr	r3, [pc, #156]	; (800e76c <ACC_Common+0x140>)
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	33c8      	adds	r3, #200	; 0xc8
 800e6d4:	4a28      	ldr	r2, [pc, #160]	; (800e778 <ACC_Common+0x14c>)
 800e6d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e6da:	11d2      	asrs	r2, r2, #7
 800e6dc:	17db      	asrs	r3, r3, #31
 800e6de:	1ad3      	subs	r3, r2, r3
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	4b26      	ldr	r3, [pc, #152]	; (800e77c <ACC_Common+0x150>)
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	b21a      	sxth	r2, r3
 800e6ec:	4b21      	ldr	r3, [pc, #132]	; (800e774 <ACC_Common+0x148>)
 800e6ee:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e6f2:	4b23      	ldr	r3, [pc, #140]	; (800e780 <ACC_Common+0x154>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e6f8:	4b21      	ldr	r3, [pc, #132]	; (800e780 <ACC_Common+0x154>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e6fe:	2101      	movs	r1, #1
 800e700:	2001      	movs	r0, #1
 800e702:	f7f8 f88d 	bl	8006820 <writeEEPROM>
        }
        calibratingA--;
 800e706:	4b18      	ldr	r3, [pc, #96]	; (800e768 <ACC_Common+0x13c>)
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	4b16      	ldr	r3, [pc, #88]	; (800e768 <ACC_Common+0x13c>)
 800e710:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e712:	2004      	movs	r0, #4
 800e714:	f7f8 fc66 	bl	8006fe4 <feature>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80c9 	beq.w	800e8b2 <ACC_Common+0x286>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e720:	4b18      	ldr	r3, [pc, #96]	; (800e784 <ACC_Common+0x158>)
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	2b32      	cmp	r3, #50	; 0x32
 800e726:	d118      	bne.n	800e75a <ACC_Common+0x12e>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e728:	4b12      	ldr	r3, [pc, #72]	; (800e774 <ACC_Common+0x148>)
 800e72a:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e72e:	4b16      	ldr	r3, [pc, #88]	; (800e788 <ACC_Common+0x15c>)
 800e730:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <ACC_Common+0x148>)
 800e734:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e738:	4b13      	ldr	r3, [pc, #76]	; (800e788 <ACC_Common+0x15c>)
 800e73a:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e73c:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <ACC_Common+0x148>)
 800e73e:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e742:	4b11      	ldr	r3, [pc, #68]	; (800e788 <ACC_Common+0x15c>)
 800e744:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e746:	4b0e      	ldr	r3, [pc, #56]	; (800e780 <ACC_Common+0x154>)
 800e748:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e74c:	4b0f      	ldr	r3, [pc, #60]	; (800e78c <ACC_Common+0x160>)
 800e74e:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e750:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <ACC_Common+0x154>)
 800e752:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e756:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <ACC_Common+0x160>)
 800e758:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e75a:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <ACC_Common+0x158>)
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d06d      	beq.n	800e83e <ACC_Common+0x212>
            for (axis = 0; axis < 3; axis++) {
 800e762:	2300      	movs	r3, #0
 800e764:	607b      	str	r3, [r7, #4]
 800e766:	e038      	b.n	800e7da <ACC_Common+0x1ae>
 800e768:	20000fbe 	.word	0x20000fbe
 800e76c:	20001034 	.word	0x20001034
 800e770:	20001f8c 	.word	0x20001f8c
 800e774:	200019c8 	.word	0x200019c8
 800e778:	51eb851f 	.word	0x51eb851f
 800e77c:	2000005a 	.word	0x2000005a
 800e780:	20001890 	.word	0x20001890
 800e784:	20000e9e 	.word	0x20000e9e
 800e788:	20001040 	.word	0x20001040
 800e78c:	20001048 	.word	0x20001048
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e790:	4b5d      	ldr	r3, [pc, #372]	; (800e908 <ACC_Common+0x2dc>)
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	2b32      	cmp	r3, #50	; 0x32
 800e796:	d104      	bne.n	800e7a2 <ACC_Common+0x176>
                    b[axis] = 0;
 800e798:	4a5c      	ldr	r2, [pc, #368]	; (800e90c <ACC_Common+0x2e0>)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2100      	movs	r1, #0
 800e79e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e7a2:	4a5a      	ldr	r2, [pc, #360]	; (800e90c <ACC_Common+0x2e0>)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7aa:	4959      	ldr	r1, [pc, #356]	; (800e910 <ACC_Common+0x2e4>)
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e7b2:	441a      	add	r2, r3
 800e7b4:	4955      	ldr	r1, [pc, #340]	; (800e90c <ACC_Common+0x2e0>)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e7bc:	4a54      	ldr	r2, [pc, #336]	; (800e910 <ACC_Common+0x2e4>)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e7c6:	4a53      	ldr	r2, [pc, #332]	; (800e914 <ACC_Common+0x2e8>)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	33b4      	adds	r3, #180	; 0xb4
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	4413      	add	r3, r2
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	607b      	str	r3, [r7, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	ddd7      	ble.n	800e790 <ACC_Common+0x164>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e7e0:	4b49      	ldr	r3, [pc, #292]	; (800e908 <ACC_Common+0x2dc>)
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d124      	bne.n	800e832 <ACC_Common+0x206>
                AccInflightCalibrationActive = false;
 800e7e8:	4b4b      	ldr	r3, [pc, #300]	; (800e918 <ACC_Common+0x2ec>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e7ee:	4b4b      	ldr	r3, [pc, #300]	; (800e91c <ACC_Common+0x2f0>)
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e7f4:	200a      	movs	r0, #10
 800e7f6:	f7f5 fc03 	bl	8004000 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e7fa:	4b49      	ldr	r3, [pc, #292]	; (800e920 <ACC_Common+0x2f4>)
 800e7fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e800:	4b44      	ldr	r3, [pc, #272]	; (800e914 <ACC_Common+0x2e8>)
 800e802:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e806:	4b46      	ldr	r3, [pc, #280]	; (800e920 <ACC_Common+0x2f4>)
 800e808:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e80c:	4b41      	ldr	r3, [pc, #260]	; (800e914 <ACC_Common+0x2e8>)
 800e80e:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e812:	4b43      	ldr	r3, [pc, #268]	; (800e920 <ACC_Common+0x2f4>)
 800e814:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e818:	4b3e      	ldr	r3, [pc, #248]	; (800e914 <ACC_Common+0x2e8>)
 800e81a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e81e:	4b41      	ldr	r3, [pc, #260]	; (800e924 <ACC_Common+0x2f8>)
 800e820:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e824:	4b40      	ldr	r3, [pc, #256]	; (800e928 <ACC_Common+0x2fc>)
 800e826:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e828:	4b3e      	ldr	r3, [pc, #248]	; (800e924 <ACC_Common+0x2f8>)
 800e82a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e82e:	4b3e      	ldr	r3, [pc, #248]	; (800e928 <ACC_Common+0x2fc>)
 800e830:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e832:	4b35      	ldr	r3, [pc, #212]	; (800e908 <ACC_Common+0x2dc>)
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	3b01      	subs	r3, #1
 800e838:	b29a      	uxth	r2, r3
 800e83a:	4b33      	ldr	r3, [pc, #204]	; (800e908 <ACC_Common+0x2dc>)
 800e83c:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e83e:	4b3b      	ldr	r3, [pc, #236]	; (800e92c <ACC_Common+0x300>)
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d035      	beq.n	800e8b2 <ACC_Common+0x286>
            AccInflightCalibrationSavetoEEProm = false;
 800e846:	4b39      	ldr	r3, [pc, #228]	; (800e92c <ACC_Common+0x300>)
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e84c:	4b2f      	ldr	r3, [pc, #188]	; (800e90c <ACC_Common+0x2e0>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a37      	ldr	r2, [pc, #220]	; (800e930 <ACC_Common+0x304>)
 800e852:	fb82 1203 	smull	r1, r2, r2, r3
 800e856:	1112      	asrs	r2, r2, #4
 800e858:	17db      	asrs	r3, r3, #31
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	b21a      	sxth	r2, r3
 800e85e:	4b2d      	ldr	r3, [pc, #180]	; (800e914 <ACC_Common+0x2e8>)
 800e860:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e864:	4b29      	ldr	r3, [pc, #164]	; (800e90c <ACC_Common+0x2e0>)
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4a31      	ldr	r2, [pc, #196]	; (800e930 <ACC_Common+0x304>)
 800e86a:	fb82 1203 	smull	r1, r2, r2, r3
 800e86e:	1112      	asrs	r2, r2, #4
 800e870:	17db      	asrs	r3, r3, #31
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	b21a      	sxth	r2, r3
 800e876:	4b27      	ldr	r3, [pc, #156]	; (800e914 <ACC_Common+0x2e8>)
 800e878:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - acc_1G;    // for nunchuk 200=1G
 800e87c:	4b23      	ldr	r3, [pc, #140]	; (800e90c <ACC_Common+0x2e0>)
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	4a2b      	ldr	r2, [pc, #172]	; (800e930 <ACC_Common+0x304>)
 800e882:	fb82 1203 	smull	r1, r2, r2, r3
 800e886:	1112      	asrs	r2, r2, #4
 800e888:	17db      	asrs	r3, r3, #31
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	4b29      	ldr	r3, [pc, #164]	; (800e934 <ACC_Common+0x308>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	b29b      	uxth	r3, r3
 800e896:	b21a      	sxth	r2, r3
 800e898:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <ACC_Common+0x2e8>)
 800e89a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e89e:	4b22      	ldr	r3, [pc, #136]	; (800e928 <ACC_Common+0x2fc>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8a4:	4b20      	ldr	r3, [pc, #128]	; (800e928 <ACC_Common+0x2fc>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e8aa:	2101      	movs	r1, #1
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	f7f7 ffb7 	bl	8006820 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e8b2:	4b17      	ldr	r3, [pc, #92]	; (800e910 <ACC_Common+0x2e4>)
 800e8b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	4b16      	ldr	r3, [pc, #88]	; (800e914 <ACC_Common+0x2e8>)
 800e8bc:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	b21a      	sxth	r2, r3
 800e8c8:	4b11      	ldr	r3, [pc, #68]	; (800e910 <ACC_Common+0x2e4>)
 800e8ca:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e8cc:	4b10      	ldr	r3, [pc, #64]	; (800e910 <ACC_Common+0x2e4>)
 800e8ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <ACC_Common+0x2e8>)
 800e8d6:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	b21a      	sxth	r2, r3
 800e8e2:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <ACC_Common+0x2e4>)
 800e8e4:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e8e6:	4b0a      	ldr	r3, [pc, #40]	; (800e910 <ACC_Common+0x2e4>)
 800e8e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	4b09      	ldr	r3, [pc, #36]	; (800e914 <ACC_Common+0x2e8>)
 800e8f0:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	b21a      	sxth	r2, r3
 800e8fc:	4b04      	ldr	r3, [pc, #16]	; (800e910 <ACC_Common+0x2e4>)
 800e8fe:	809a      	strh	r2, [r3, #4]
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20000e9e 	.word	0x20000e9e
 800e90c:	2000104c 	.word	0x2000104c
 800e910:	20001f8c 	.word	0x20001f8c
 800e914:	200019c8 	.word	0x200019c8
 800e918:	20000e9c 	.word	0x20000e9c
 800e91c:	20000e9a 	.word	0x20000e9a
 800e920:	20001040 	.word	0x20001040
 800e924:	20001048 	.word	0x20001048
 800e928:	20001890 	.word	0x20001890
 800e92c:	20000e9b 	.word	0x20000e9b
 800e930:	51eb851f 	.word	0x51eb851f
 800e934:	2000005a 	.word	0x2000005a

0800e938 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(accADC)) {
 800e93c:	4b06      	ldr	r3, [pc, #24]	; (800e958 <ACC_getADC+0x20>)
 800e93e:	6a1b      	ldr	r3, [r3, #32]
 800e940:	4806      	ldr	r0, [pc, #24]	; (800e95c <ACC_getADC+0x24>)
 800e942:	4798      	blx	r3
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d003      	beq.n	800e952 <ACC_getADC+0x1a>
    	ACC_Common();
 800e94a:	f7ff fe6f 	bl	800e62c <ACC_Common>
    	return TRUE;
 800e94e:	2301      	movs	r3, #1
 800e950:	e000      	b.n	800e954 <ACC_getADC+0x1c>
    }
	return FALSE;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20000fcc 	.word	0x20000fcc
 800e95c:	20001f8c 	.word	0x20001f8c

0800e960 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800e966:	4b18      	ldr	r3, [pc, #96]	; (800e9c8 <Baro_Common+0x68>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3301      	adds	r3, #1
 800e96c:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800e96e:	4b17      	ldr	r3, [pc, #92]	; (800e9cc <Baro_Common+0x6c>)
 800e970:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e974:	461a      	mov	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4293      	cmp	r3, r2
 800e97a:	db01      	blt.n	800e980 <Baro_Common+0x20>
        indexplus1 = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <Baro_Common+0x68>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a12      	ldr	r2, [pc, #72]	; (800e9d0 <Baro_Common+0x70>)
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	4912      	ldr	r1, [pc, #72]	; (800e9d4 <Baro_Common+0x74>)
 800e98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800e98e:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <Baro_Common+0x68>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a10      	ldr	r2, [pc, #64]	; (800e9d4 <Baro_Common+0x74>)
 800e994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e998:	461a      	mov	r2, r3
 800e99a:	4b0f      	ldr	r3, [pc, #60]	; (800e9d8 <Baro_Common+0x78>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4413      	add	r3, r2
 800e9a0:	4a0d      	ldr	r2, [pc, #52]	; (800e9d8 <Baro_Common+0x78>)
 800e9a2:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800e9a4:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <Baro_Common+0x78>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	490a      	ldr	r1, [pc, #40]	; (800e9d4 <Baro_Common+0x74>)
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e9b0:	1a9b      	subs	r3, r3, r2
 800e9b2:	4a09      	ldr	r2, [pc, #36]	; (800e9d8 <Baro_Common+0x78>)
 800e9b4:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800e9b6:	4a04      	ldr	r2, [pc, #16]	; (800e9c8 <Baro_Common+0x68>)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6013      	str	r3, [r2, #0]
}
 800e9bc:	bf00      	nop
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	20001058 	.word	0x20001058
 800e9cc:	20001890 	.word	0x20001890
 800e9d0:	20000fc4 	.word	0x20000fc4
 800e9d4:	2000105c 	.word	0x2000105c
 800e9d8:	20000c9c 	.word	0x20000c9c

0800e9dc <evtBaroRead>:

void evtBaroRead(int32_t pressure, float temperature)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	ed87 0a00 	vstr	s0, [r7]
    baroPressure = pressure;
 800e9e8:	4a0c      	ldr	r2, [pc, #48]	; (800ea1c <evtBaroRead+0x40>)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6013      	str	r3, [r2, #0]
    baroTemperature = temperature * 100;
 800e9ee:	edd7 7a00 	vldr	s15, [r7]
 800e9f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ea20 <evtBaroRead+0x44>
 800e9f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9fe:	ee17 2a90 	vmov	r2, s15
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <evtBaroRead+0x48>)
 800ea04:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ea06:	f7ff ffab 	bl	800e960 <Baro_Common>
    sensor_set.baro.p_b_task->immediate = TRUE;
 800ea0a:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <evtBaroRead+0x4c>)
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	2201      	movs	r2, #1
 800ea10:	705a      	strb	r2, [r3, #1]
}
 800ea12:	bf00      	nop
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20000fc4 	.word	0x20000fc4
 800ea20:	42c80000 	.word	0x42c80000
 800ea24:	20000fc8 	.word	0x20000fc8
 800ea28:	20000fcc 	.word	0x20000fcc

0800ea2c <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	611a      	str	r2, [r3, #16]
}
 800ea3a:	bf00      	nop
 800ea3c:	370c      	adds	r7, #12
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b083      	sub	sp, #12
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
 800ea4e:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	1c5a      	adds	r2, r3, #1
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d10b      	bne.n	800ea7c <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	605a      	str	r2, [r3, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f04f 0200 	mov.w	r2, #0
 800ea78:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ea7a:	e036      	b.n	800eaea <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	ed93 7a00 	vldr	s14, [r3]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	edd3 7a00 	vldr	s15, [r3]
 800ea88:	edd7 6a00 	vldr	s13, [r7]
 800ea8c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	ee07 3a90 	vmov	s15, r3
 800ea98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ea9c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eaa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	ed93 7a02 	vldr	s14, [r3, #8]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	edd3 7a00 	vldr	s15, [r3]
 800eab6:	edd7 6a00 	vldr	s13, [r7]
 800eaba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	edd3 7a01 	vldr	s15, [r3, #4]
 800eac4:	ed97 6a00 	vldr	s12, [r7]
 800eac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eacc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ead0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	685a      	ldr	r2, [r3, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	68da      	ldr	r2, [r3, #12]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	609a      	str	r2, [r3, #8]
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	dd0c      	ble.n	800eb22 <devVariance+0x2a>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	ee07 3a90 	vmov	s15, r3
 800eb18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eb20:	e001      	b.n	800eb26 <devVariance+0x2e>
 800eb22:	eddf 6a05 	vldr	s13, [pc, #20]	; 800eb38 <devVariance+0x40>
 800eb26:	eef0 7a66 	vmov.f32	s15, s13
}
 800eb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	00000000 	.word	0x00000000

0800eb3c <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff ffd7 	bl	800eaf8 <devVariance>
 800eb4a:	eef0 7a40 	vmov.f32	s15, s0
 800eb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb52:	f013 fbff 	bl	8022354 <sqrtf>
 800eb56:	eef0 7a40 	vmov.f32	s15, s0
}
 800eb5a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <GYRO_Common>:

static void GYRO_Common(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800eb6a:	4b75      	ldr	r3, [pc, #468]	; (800ed40 <GYRO_Common+0x1dc>)
 800eb6c:	881b      	ldrh	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f000 80c6 	beq.w	800ed00 <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800eb74:	2300      	movs	r3, #0
 800eb76:	607b      	str	r3, [r7, #4]
 800eb78:	e0a3      	b.n	800ecc2 <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800eb7a:	4b71      	ldr	r3, [pc, #452]	; (800ed40 <GYRO_Common+0x1dc>)
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb82:	d10e      	bne.n	800eba2 <GYRO_Common+0x3e>
                g[axis] = 0;
 800eb84:	4a6f      	ldr	r2, [pc, #444]	; (800ed44 <GYRO_Common+0x1e0>)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2100      	movs	r1, #0
 800eb8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4a6b      	ldr	r2, [pc, #428]	; (800ed48 <GYRO_Common+0x1e4>)
 800eb9a:	4413      	add	r3, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff45 	bl	800ea2c <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800eba2:	4a68      	ldr	r2, [pc, #416]	; (800ed44 <GYRO_Common+0x1e0>)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebaa:	4968      	ldr	r1, [pc, #416]	; (800ed4c <GYRO_Common+0x1e8>)
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ebb2:	441a      	add	r2, r3
 800ebb4:	4963      	ldr	r1, [pc, #396]	; (800ed44 <GYRO_Common+0x1e0>)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	4413      	add	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4a60      	ldr	r2, [pc, #384]	; (800ed48 <GYRO_Common+0x1e4>)
 800ebc8:	441a      	add	r2, r3
 800ebca:	4960      	ldr	r1, [pc, #384]	; (800ed4c <GYRO_Common+0x1e8>)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ebd2:	ee07 3a90 	vmov	s15, r3
 800ebd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebda:	eeb0 0a67 	vmov.f32	s0, s15
 800ebde:	4610      	mov	r0, r2
 800ebe0:	f7ff ff31 	bl	800ea46 <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ebe4:	4a59      	ldr	r2, [pc, #356]	; (800ed4c <GYRO_Common+0x1e8>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ebee:	4a58      	ldr	r2, [pc, #352]	; (800ed50 <GYRO_Common+0x1ec>)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ebf8:	4b51      	ldr	r3, [pc, #324]	; (800ed40 <GYRO_Common+0x1dc>)
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d15d      	bne.n	800ecbc <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	4613      	mov	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	4413      	add	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4a4f      	ldr	r2, [pc, #316]	; (800ed48 <GYRO_Common+0x1e4>)
 800ec0c:	4413      	add	r3, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff ff94 	bl	800eb3c <devStandardDeviation>
 800ec14:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ec18:	4b4e      	ldr	r3, [pc, #312]	; (800ed54 <GYRO_Common+0x1f0>)
 800ec1a:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d036      	beq.n	800ec90 <GYRO_Common+0x12c>
 800ec22:	4b4c      	ldr	r3, [pc, #304]	; (800ed54 <GYRO_Common+0x1f0>)
 800ec24:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec28:	ee07 3a90 	vmov	s15, r3
 800ec2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec30:	ed97 7a00 	vldr	s14, [r7]
 800ec34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3c:	dd28      	ble.n	800ec90 <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ec3e:	6838      	ldr	r0, [r7, #0]
 800ec40:	f7f1 fc40 	bl	80004c4 <__aeabi_f2d>
 800ec44:	4602      	mov	r2, r0
 800ec46:	460b      	mov	r3, r1
 800ec48:	4942      	ldr	r1, [pc, #264]	; (800ed54 <GYRO_Common+0x1f0>)
 800ec4a:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ec4e:	9102      	str	r1, [sp, #8]
 800ec50:	e9cd 2300 	strd	r2, r3, [sp]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	4940      	ldr	r1, [pc, #256]	; (800ed58 <GYRO_Common+0x1f4>)
 800ec58:	2002      	movs	r0, #2
 800ec5a:	f004 fc97 	bl	801358c <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ec5e:	4b38      	ldr	r3, [pc, #224]	; (800ed40 <GYRO_Common+0x1dc>)
 800ec60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec64:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ec66:	4838      	ldr	r0, [pc, #224]	; (800ed48 <GYRO_Common+0x1e4>)
 800ec68:	f7ff fee0 	bl	800ea2c <devClear>
                    devClear(&var[1]);
 800ec6c:	483b      	ldr	r0, [pc, #236]	; (800ed5c <GYRO_Common+0x1f8>)
 800ec6e:	f7ff fedd 	bl	800ea2c <devClear>
                    devClear(&var[2]);
 800ec72:	483b      	ldr	r0, [pc, #236]	; (800ed60 <GYRO_Common+0x1fc>)
 800ec74:	f7ff feda 	bl	800ea2c <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ec78:	4b32      	ldr	r3, [pc, #200]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	609a      	str	r2, [r3, #8]
 800ec7e:	4b31      	ldr	r3, [pc, #196]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	4a30      	ldr	r2, [pc, #192]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec84:	6053      	str	r3, [r2, #4]
 800ec86:	4b2f      	ldr	r3, [pc, #188]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4a2e      	ldr	r2, [pc, #184]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec8c:	6013      	str	r3, [r2, #0]
                    continue;
 800ec8e:	e015      	b.n	800ecbc <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ec90:	4a2c      	ldr	r2, [pc, #176]	; (800ed44 <GYRO_Common+0x1e0>)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ec9c:	4a31      	ldr	r2, [pc, #196]	; (800ed64 <GYRO_Common+0x200>)
 800ec9e:	fb82 1203 	smull	r1, r2, r2, r3
 800eca2:	1192      	asrs	r2, r2, #6
 800eca4:	17db      	asrs	r3, r3, #31
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	b219      	sxth	r1, r3
 800ecaa:	4a29      	ldr	r2, [pc, #164]	; (800ed50 <GYRO_Common+0x1ec>)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	210f      	movs	r1, #15
 800ecb6:	200a      	movs	r0, #10
 800ecb8:	f7fd f996 	bl	800bfe8 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	607b      	str	r3, [r7, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	f77f af58 	ble.w	800eb7a <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800ecca:	4b1d      	ldr	r3, [pc, #116]	; (800ed40 <GYRO_Common+0x1dc>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	4b1b      	ldr	r3, [pc, #108]	; (800ed40 <GYRO_Common+0x1dc>)
 800ecd4:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800ecd6:	4b1a      	ldr	r3, [pc, #104]	; (800ed40 <GYRO_Common+0x1dc>)
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d110      	bne.n	800ed00 <GYRO_Common+0x19c>
 800ecde:	4b1c      	ldr	r3, [pc, #112]	; (800ed50 <GYRO_Common+0x1ec>)
 800ece0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ece4:	461a      	mov	r2, r3
 800ece6:	4b1a      	ldr	r3, [pc, #104]	; (800ed50 <GYRO_Common+0x1ec>)
 800ece8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecec:	4619      	mov	r1, r3
 800ecee:	4b18      	ldr	r3, [pc, #96]	; (800ed50 <GYRO_Common+0x1ec>)
 800ecf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	491b      	ldr	r1, [pc, #108]	; (800ed68 <GYRO_Common+0x204>)
 800ecfa:	2002      	movs	r0, #2
 800ecfc:	f004 fc46 	bl	801358c <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800ed00:	2300      	movs	r3, #0
 800ed02:	607b      	str	r3, [r7, #4]
 800ed04:	e013      	b.n	800ed2e <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800ed06:	4a11      	ldr	r2, [pc, #68]	; (800ed4c <GYRO_Common+0x1e8>)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	490f      	ldr	r1, [pc, #60]	; (800ed50 <GYRO_Common+0x1ec>)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	b219      	sxth	r1, r3
 800ed20:	4a0a      	ldr	r2, [pc, #40]	; (800ed4c <GYRO_Common+0x1e8>)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	607b      	str	r3, [r7, #4]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	dde8      	ble.n	800ed06 <GYRO_Common+0x1a2>
}
 800ed34:	bf00      	nop
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20000fc2 	.word	0x20000fc2
 800ed44:	2000111c 	.word	0x2000111c
 800ed48:	20001128 	.word	0x20001128
 800ed4c:	20001f74 	.word	0x20001f74
 800ed50:	20000cd0 	.word	0x20000cd0
 800ed54:	200019c8 	.word	0x200019c8
 800ed58:	080260cc 	.word	0x080260cc
 800ed5c:	2000113c 	.word	0x2000113c
 800ed60:	20001150 	.word	0x20001150
 800ed64:	10624dd3 	.word	0x10624dd3
 800ed68:	080260e4 	.word	0x080260e4

0800ed6c <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(gyroADC)) {
 800ed70:	4b06      	ldr	r3, [pc, #24]	; (800ed8c <Gyro_getADC+0x20>)
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	4806      	ldr	r0, [pc, #24]	; (800ed90 <Gyro_getADC+0x24>)
 800ed76:	4798      	blx	r3
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d003      	beq.n	800ed86 <Gyro_getADC+0x1a>
    	GYRO_Common();
 800ed7e:	f7ff fef1 	bl	800eb64 <GYRO_Common>
    	return TRUE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <Gyro_getADC+0x1c>
    }
    return FALSE;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20000fcc 	.word	0x20000fcc
 800ed90:	20001f74 	.word	0x20001f74

0800ed94 <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7f3 f963 	bl	8002064 <actLed1State>
    if (!sensor_set.mag.init(mcfg.mag_align)) {
 800ed9e:	4b0c      	ldr	r3, [pc, #48]	; (800edd0 <Mag_init+0x3c>)
 800eda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda2:	4a0c      	ldr	r2, [pc, #48]	; (800edd4 <Mag_init+0x40>)
 800eda4:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800eda8:	4610      	mov	r0, r2
 800edaa:	4798      	blx	r3
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <Mag_init+0x2c>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800edb2:	4b09      	ldr	r3, [pc, #36]	; (800edd8 <Mag_init+0x44>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	4908      	ldr	r1, [pc, #32]	; (800eddc <Mag_init+0x48>)
 800edba:	2002      	movs	r0, #2
 800edbc:	f004 fbe6 	bl	801358c <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800edc0:	2000      	movs	r0, #0
 800edc2:	f7f3 f94f 	bl	8002064 <actLed1State>
    magInit = 1;
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <Mag_init+0x4c>)
 800edc8:	2201      	movs	r2, #1
 800edca:	701a      	strb	r2, [r3, #0]
}
 800edcc:	bf00      	nop
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	20000fcc 	.word	0x20000fcc
 800edd4:	200019c8 	.word	0x200019c8
 800edd8:	20001365 	.word	0x20001365
 800eddc:	080260f8 	.word	0x080260f8
 800ede0:	2000102c 	.word	0x2000102c

0800ede4 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(magADC)) {
 800edec:	4b64      	ldr	r3, [pc, #400]	; (800ef80 <taskMagGetAdc+0x19c>)
 800edee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf0:	4864      	ldr	r0, [pc, #400]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800edf2:	4798      	blx	r3
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d104      	bne.n	800ee04 <taskMagGetAdc+0x20>
    	p_task->immediate = TRUE;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2201      	movs	r2, #1
 800edfe:	705a      	strb	r2, [r3, #1]
    	return 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e0b8      	b.n	800ef76 <taskMagGetAdc+0x192>
    }

    if (f.CALIBRATE_MAG) {
 800ee04:	4b60      	ldr	r3, [pc, #384]	; (800ef88 <taskMagGetAdc+0x1a4>)
 800ee06:	7b9b      	ldrb	r3, [r3, #14]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d027      	beq.n	800ee5c <taskMagGetAdc+0x78>
        tCal = (*pif_act_timer1us)();
 800ee0c:	4b5f      	ldr	r3, [pc, #380]	; (800ef8c <taskMagGetAdc+0x1a8>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4798      	blx	r3
 800ee12:	4603      	mov	r3, r0
 800ee14:	4a5e      	ldr	r2, [pc, #376]	; (800ef90 <taskMagGetAdc+0x1ac>)
 800ee16:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800ee18:	2300      	movs	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	e018      	b.n	800ee50 <taskMagGetAdc+0x6c>
            mcfg.magZero[axis] = 0;
 800ee1e:	4a5d      	ldr	r2, [pc, #372]	; (800ef94 <taskMagGetAdc+0x1b0>)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	33b8      	adds	r3, #184	; 0xb8
 800ee24:	2100      	movs	r1, #0
 800ee26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800ee2a:	4a56      	ldr	r2, [pc, #344]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee32:	4a59      	ldr	r2, [pc, #356]	; (800ef98 <taskMagGetAdc+0x1b4>)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800ee3a:	4a52      	ldr	r2, [pc, #328]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee42:	4a56      	ldr	r2, [pc, #344]	; (800ef9c <taskMagGetAdc+0x1b8>)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d9e3      	bls.n	800ee1e <taskMagGetAdc+0x3a>
        }
        f.CALIBRATE_MAG = 0;
 800ee56:	4b4c      	ldr	r3, [pc, #304]	; (800ef88 <taskMagGetAdc+0x1a4>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ee5c:	4b50      	ldr	r3, [pc, #320]	; (800efa0 <taskMagGetAdc+0x1bc>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d026      	beq.n	800eeb2 <taskMagGetAdc+0xce>
        magADC[X] -= mcfg.magZero[X];
 800ee64:	4b47      	ldr	r3, [pc, #284]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	4b49      	ldr	r3, [pc, #292]	; (800ef94 <taskMagGetAdc+0x1b0>)
 800ee6e:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	b21a      	sxth	r2, r3
 800ee7a:	4b42      	ldr	r3, [pc, #264]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee7c:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800ee7e:	4b41      	ldr	r3, [pc, #260]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	4b43      	ldr	r3, [pc, #268]	; (800ef94 <taskMagGetAdc+0x1b0>)
 800ee88:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	b21a      	sxth	r2, r3
 800ee94:	4b3b      	ldr	r3, [pc, #236]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee96:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800ee98:	4b3a      	ldr	r3, [pc, #232]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ee9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	4b3c      	ldr	r3, [pc, #240]	; (800ef94 <taskMagGetAdc+0x1b0>)
 800eea2:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	b21a      	sxth	r2, r3
 800eeae:	4b35      	ldr	r3, [pc, #212]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800eeb0:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800eeb2:	4b37      	ldr	r3, [pc, #220]	; (800ef90 <taskMagGetAdc+0x1ac>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d05c      	beq.n	800ef74 <taskMagGetAdc+0x190>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800eeba:	4b34      	ldr	r3, [pc, #208]	; (800ef8c <taskMagGetAdc+0x1a8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4798      	blx	r3
 800eec0:	4602      	mov	r2, r0
 800eec2:	4b33      	ldr	r3, [pc, #204]	; (800ef90 <taskMagGetAdc+0x1ac>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	4a36      	ldr	r2, [pc, #216]	; (800efa4 <taskMagGetAdc+0x1c0>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d82f      	bhi.n	800ef2e <taskMagGetAdc+0x14a>
            actLed0Toggle();
 800eece:	f7f3 f8b3 	bl	8002038 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800eed2:	2300      	movs	r3, #0
 800eed4:	60fb      	str	r3, [r7, #12]
 800eed6:	e026      	b.n	800ef26 <taskMagGetAdc+0x142>
                if (magADC[axis] < magZeroTempMin[axis])
 800eed8:	4a2a      	ldr	r2, [pc, #168]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800eee0:	492d      	ldr	r1, [pc, #180]	; (800ef98 <taskMagGetAdc+0x1b4>)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	da07      	bge.n	800eefc <taskMagGetAdc+0x118>
                    magZeroTempMin[axis] = magADC[axis];
 800eeec:	4a25      	ldr	r2, [pc, #148]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eef4:	4a28      	ldr	r2, [pc, #160]	; (800ef98 <taskMagGetAdc+0x1b4>)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800eefc:	4a21      	ldr	r2, [pc, #132]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800ef04:	4925      	ldr	r1, [pc, #148]	; (800ef9c <taskMagGetAdc+0x1b8>)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	dd07      	ble.n	800ef20 <taskMagGetAdc+0x13c>
                    magZeroTempMax[axis] = magADC[axis];
 800ef10:	4a1c      	ldr	r2, [pc, #112]	; (800ef84 <taskMagGetAdc+0x1a0>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef18:	4a20      	ldr	r2, [pc, #128]	; (800ef9c <taskMagGetAdc+0x1b8>)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3301      	adds	r3, #1
 800ef24:	60fb      	str	r3, [r7, #12]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d9d5      	bls.n	800eed8 <taskMagGetAdc+0xf4>
 800ef2c:	e022      	b.n	800ef74 <taskMagGetAdc+0x190>
            }
        } else {
            tCal = 0;
 800ef2e:	4b18      	ldr	r3, [pc, #96]	; (800ef90 <taskMagGetAdc+0x1ac>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800ef34:	2300      	movs	r3, #0
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	e015      	b.n	800ef66 <taskMagGetAdc+0x182>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800ef3a:	4a17      	ldr	r2, [pc, #92]	; (800ef98 <taskMagGetAdc+0x1b4>)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef42:	4619      	mov	r1, r3
 800ef44:	4a15      	ldr	r2, [pc, #84]	; (800ef9c <taskMagGetAdc+0x1b8>)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef4c:	440b      	add	r3, r1
 800ef4e:	0fda      	lsrs	r2, r3, #31
 800ef50:	4413      	add	r3, r2
 800ef52:	105b      	asrs	r3, r3, #1
 800ef54:	b219      	sxth	r1, r3
 800ef56:	4a0f      	ldr	r2, [pc, #60]	; (800ef94 <taskMagGetAdc+0x1b0>)
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	33b8      	adds	r3, #184	; 0xb8
 800ef5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3301      	adds	r3, #1
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d9e6      	bls.n	800ef3a <taskMagGetAdc+0x156>
            writeEEPROM(1, true);
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	2001      	movs	r0, #1
 800ef70:	f7f7 fc56 	bl	8006820 <writeEEPROM>
        }
    }
    return 0;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20000fcc 	.word	0x20000fcc
 800ef84:	20001f98 	.word	0x20001f98
 800ef88:	20002014 	.word	0x20002014
 800ef8c:	2000137c 	.word	0x2000137c
 800ef90:	20001164 	.word	0x20001164
 800ef94:	200019c8 	.word	0x200019c8
 800ef98:	20001168 	.word	0x20001168
 800ef9c:	20001170 	.word	0x20001170
 800efa0:	2000102c 	.word	0x2000102c
 800efa4:	01c9c37f 	.word	0x01c9c37f

0800efa8 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800efb6:	dd02      	ble.n	800efbe <getSonarDistance+0x16>
		distance = -1;
 800efb8:	f04f 33ff 	mov.w	r3, #4294967295
 800efbc:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800efbe:	4a0d      	ldr	r2, [pc, #52]	; (800eff4 <getSonarDistance+0x4c>)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800efc4:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <getSonarDistance+0x50>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f7f1 fa69 	bl	80004a0 <__aeabi_i2d>
 800efce:	f04f 0200 	mov.w	r2, #0
 800efd2:	4b0a      	ldr	r3, [pc, #40]	; (800effc <getSonarDistance+0x54>)
 800efd4:	f7f1 fbf8 	bl	80007c8 <__aeabi_ddiv>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4610      	mov	r0, r2
 800efde:	4619      	mov	r1, r3
 800efe0:	f7f1 fdaa 	bl	8000b38 <__aeabi_d2f>
 800efe4:	4603      	mov	r3, r0
 800efe6:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800efea:	eeb0 0a67 	vmov.f32	s0, s15
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	2000002c 	.word	0x2000002c
 800eff8:	20000fc8 	.word	0x20000fc8
 800effc:	40590000 	.word	0x40590000

0800f000 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <getSonarDistanceFilter+0x60>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	1d3a      	adds	r2, r7, #4
 800f00e:	4611      	mov	r1, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f005 ffbf 	bl	8014f94 <pifNoiseFilter_Process>
 800f016:	4603      	mov	r3, r0
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f022:	dd02      	ble.n	800f02a <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f024:	f04f 33ff 	mov.w	r3, #4294967295
 800f028:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a0d      	ldr	r2, [pc, #52]	; (800f064 <getSonarDistanceFilter+0x64>)
 800f02e:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f030:	4b0d      	ldr	r3, [pc, #52]	; (800f068 <getSonarDistanceFilter+0x68>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4618      	mov	r0, r3
 800f036:	f7f1 fa33 	bl	80004a0 <__aeabi_i2d>
 800f03a:	f04f 0200 	mov.w	r2, #0
 800f03e:	4b0b      	ldr	r3, [pc, #44]	; (800f06c <getSonarDistanceFilter+0x6c>)
 800f040:	f7f1 fbc2 	bl	80007c8 <__aeabi_ddiv>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4610      	mov	r0, r2
 800f04a:	4619      	mov	r1, r3
 800f04c:	f7f1 fd74 	bl	8000b38 <__aeabi_d2f>
 800f050:	4603      	mov	r3, r0
 800f052:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f056:	eeb0 0a67 	vmov.f32	s0, s15
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	20001030 	.word	0x20001030
 800f064:	2000002c 	.word	0x2000002c
 800f068:	20000fc8 	.word	0x20000fc8
 800f06c:	40590000 	.word	0x40590000

0800f070 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	460b      	mov	r3, r1
 800f07a:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d002      	beq.n	800f088 <Sonar_init+0x18>
 800f082:	2b02      	cmp	r3, #2
 800f084:	d00b      	beq.n	800f09e <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f086:	e01e      	b.n	800f0c6 <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f088:	2105      	movs	r1, #5
 800f08a:	4820      	ldr	r0, [pc, #128]	; (800f10c <Sonar_init+0x9c>)
 800f08c:	f006 f932 	bl	80152f4 <pifNoiseFilterInt32_Init>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d014      	beq.n	800f0c0 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f096:	4b1e      	ldr	r3, [pc, #120]	; (800f110 <Sonar_init+0xa0>)
 800f098:	4a1c      	ldr	r2, [pc, #112]	; (800f10c <Sonar_init+0x9c>)
 800f09a:	601a      	str	r2, [r3, #0]
		break;
 800f09c:	e010      	b.n	800f0c0 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f09e:	2107      	movs	r1, #7
 800f0a0:	481a      	ldr	r0, [pc, #104]	; (800f10c <Sonar_init+0x9c>)
 800f0a2:	f006 f927 	bl	80152f4 <pifNoiseFilterInt32_Init>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00b      	beq.n	800f0c4 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f0ac:	4817      	ldr	r0, [pc, #92]	; (800f10c <Sonar_init+0x9c>)
 800f0ae:	f006 f961 	bl	8015374 <pifNoiseFilterInt32_SetNoiseCancel>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f0b8:	4b15      	ldr	r3, [pc, #84]	; (800f110 <Sonar_init+0xa0>)
 800f0ba:	4a14      	ldr	r2, [pc, #80]	; (800f10c <Sonar_init+0x9c>)
 800f0bc:	601a      	str	r2, [r3, #0]
		break;
 800f0be:	e001      	b.n	800f0c4 <Sonar_init+0x54>
		break;
 800f0c0:	bf00      	nop
 800f0c2:	e000      	b.n	800f0c6 <Sonar_init+0x56>
		break;
 800f0c4:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f0c6:	4b12      	ldr	r3, [pc, #72]	; (800f110 <Sonar_init+0xa0>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d007      	beq.n	800f0de <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4910      	ldr	r1, [pc, #64]	; (800f114 <Sonar_init+0xa4>)
 800f0d2:	203c      	movs	r0, #60	; 0x3c
 800f0d4:	4798      	blx	r3
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d107      	bne.n	800f0ec <Sonar_init+0x7c>
 800f0dc:	e013      	b.n	800f106 <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	490d      	ldr	r1, [pc, #52]	; (800f118 <Sonar_init+0xa8>)
 800f0e2:	203c      	movs	r0, #60	; 0x3c
 800f0e4:	4798      	blx	r3
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f0ec:	2010      	movs	r0, #16
 800f0ee:	f7f7 ff47 	bl	8006f80 <sensorsSet>
    sonarDistance = -1;
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <Sonar_init+0xac>)
 800f0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f8:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f0fa:	4909      	ldr	r1, [pc, #36]	; (800f120 <Sonar_init+0xb0>)
 800f0fc:	2002      	movs	r0, #2
 800f0fe:	f004 f9b3 	bl	8013468 <pifLog_Print>
 800f102:	e000      	b.n	800f106 <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f104:	bf00      	nop
#endif
}
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	20001178 	.word	0x20001178
 800f110:	20001030 	.word	0x20001030
 800f114:	0800f001 	.word	0x0800f001
 800f118:	0800efa9 	.word	0x0800efa9
 800f11c:	2000002c 	.word	0x2000002c
 800f120:	08026108 	.word	0x08026108

0800f124 <_Read8>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data);

static uint8_t _Read8(mspPortState_t* p_port)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
	uint8_t data = p_port->p_rx_packet[0];
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	73fb      	strb	r3, [r7, #15]
	p_port->p_rx_packet++;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <_Read16>:

static uint16_t _Read16(mspPortState_t* p_port)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
	uint16_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f160:	3301      	adds	r3, #1
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	b29b      	uxth	r3, r3
 800f166:	021b      	lsls	r3, r3, #8
 800f168:	b29b      	uxth	r3, r3
 800f16a:	4413      	add	r3, r2
 800f16c:	81fb      	strh	r3, [r7, #14]
	p_port->p_rx_packet += 2;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f172:	1c9a      	adds	r2, r3, #2
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f178:	89fb      	ldrh	r3, [r7, #14]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <_Read32>:

static uint16_t _Read32(mspPortState_t* p_port)
{
 800f186:	b480      	push	{r7}
 800f188:	b085      	sub	sp, #20
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f19a:	3301      	adds	r3, #1
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	4413      	add	r3, r2
 800f1a2:	461a      	mov	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1a8:	3302      	adds	r3, #2
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	041b      	lsls	r3, r3, #16
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1ae:	441a      	add	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b4:	3303      	adds	r3, #3
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	061b      	lsls	r3, r3, #24
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1ba:	4413      	add	r3, r2
 800f1bc:	60fb      	str	r3, [r7, #12]
	p_port->p_rx_packet += 4;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c2:	1d1a      	adds	r2, r3, #4
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	b29b      	uxth	r3, r3
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <_Serialize8>:

static void _Serialize8(mspPortState_t* p_port, uint8_t a)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
    p_port->p_tx_packet[0] = a;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1ea:	78fa      	ldrb	r2, [r7, #3]
 800f1ec:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet++;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f1fc:	bf00      	nop
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <_Serialize16>:

static void _Serialize16(mspPortState_t* p_port, int16_t a)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	807b      	strh	r3, [r7, #2]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f21a:	887a      	ldrh	r2, [r7, #2]
 800f21c:	b2d2      	uxtb	r2, r2
 800f21e:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f220:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f224:	121b      	asrs	r3, r3, #8
 800f226:	b21a      	sxth	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f22e:	3301      	adds	r3, #1
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 2;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f23a:	1c9a      	adds	r2, r3, #2
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f242:	bf00      	nop
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <_Serialize32>:

static void _Serialize32(mspPortState_t* p_port, uint32_t a)
{
 800f24e:	b480      	push	{r7}
 800f250:	b083      	sub	sp, #12
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	b2d2      	uxtb	r2, r2
 800f262:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	0a1a      	lsrs	r2, r3, #8
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f26e:	3301      	adds	r3, #1
 800f270:	b2d2      	uxtb	r2, r2
 800f272:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[2] = (a >> 16) & 0xFF;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	0c1a      	lsrs	r2, r3, #16
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f27e:	3302      	adds	r3, #2
 800f280:	b2d2      	uxtb	r2, r2
 800f282:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[3] = (a >> 24) & 0xFF;
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	0e1a      	lsrs	r2, r3, #24
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f28e:	3303      	adds	r3, #3
 800f290:	b2d2      	uxtb	r2, r2
 800f292:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 4;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f29a:	1d1a      	adds	r2, r3, #4
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f2a2:	bf00      	nop
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <_SerializeStruct>:

static void _SerializeStruct(mspPortState_t* p_port, uint8_t *cb, uint8_t siz)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b085      	sub	sp, #20
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	60f8      	str	r0, [r7, #12]
 800f2b6:	60b9      	str	r1, [r7, #8]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	71fb      	strb	r3, [r7, #7]
    while (siz--)
 800f2bc:	e00b      	b.n	800f2d6 <_SerializeStruct+0x28>
        *p_port->p_tx_packet++ = *cb++;
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	1c53      	adds	r3, r2, #1
 800f2c2:	60bb      	str	r3, [r7, #8]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2ca:	1c58      	adds	r0, r3, #1
 800f2cc:	68f9      	ldr	r1, [r7, #12]
 800f2ce:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f2d2:	7812      	ldrb	r2, [r2, #0]
 800f2d4:	701a      	strb	r2, [r3, #0]
    while (siz--)
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	1e5a      	subs	r2, r3, #1
 800f2da:	71fa      	strb	r2, [r7, #7]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1ee      	bne.n	800f2be <_SerializeStruct+0x10>
}
 800f2e0:	bf00      	nop
 800f2e2:	bf00      	nop
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <_SerializeNames>:

static void _SerializeNames(mspPortState_t* p_port, const char *s)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
    const char *c;
    for (c = s; *c; c++)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	e00c      	b.n	800f318 <_SerializeNames+0x2a>
        *p_port->p_tx_packet++ = *c;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f304:	1c59      	adds	r1, r3, #1
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	7812      	ldrb	r2, [r2, #0]
 800f310:	701a      	strb	r2, [r3, #0]
    for (c = s; *c; c++)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	3301      	adds	r3, #1
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1ee      	bne.n	800f2fe <_SerializeNames+0x10>
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
	...

0800f330 <_SerializeBoxNamesReply>:

static int _SerializeBoxNamesReply(mspPortState_t* p_port)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b088      	sub	sp, #32
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
    int i, idx, j, flag = 1, count = 0, len;
 800f338:	2301      	movs	r3, #1
 800f33a:	617b      	str	r3, [r7, #20]
 800f33c:	2300      	movs	r3, #0
 800f33e:	613b      	str	r3, [r7, #16]

reset:
    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f340:	2300      	movs	r3, #0
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	e03b      	b.n	800f3be <_SerializeBoxNamesReply+0x8e>
        idx = availableBoxes[i];
 800f346:	4a26      	ldr	r2, [pc, #152]	; (800f3e0 <_SerializeBoxNamesReply+0xb0>)
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	4413      	add	r3, r2
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	60fb      	str	r3, [r7, #12]
        len = strlen(boxes[idx].boxName);
 800f350:	4924      	ldr	r1, [pc, #144]	; (800f3e4 <_SerializeBoxNamesReply+0xb4>)
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	4613      	mov	r3, r2
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	4413      	add	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	3304      	adds	r3, #4
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4618      	mov	r0, r3
 800f364:	f7f0 ff42 	bl	80001ec <strlen>
 800f368:	4603      	mov	r3, r0
 800f36a:	60bb      	str	r3, [r7, #8]
        if (flag) {
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d004      	beq.n	800f37c <_SerializeBoxNamesReply+0x4c>
            count += len;
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	4413      	add	r3, r2
 800f378:	613b      	str	r3, [r7, #16]
 800f37a:	e01d      	b.n	800f3b8 <_SerializeBoxNamesReply+0x88>
        } else {
            for (j = 0; j < len; j++)
 800f37c:	2300      	movs	r3, #0
 800f37e:	61bb      	str	r3, [r7, #24]
 800f380:	e016      	b.n	800f3b0 <_SerializeBoxNamesReply+0x80>
                *p_port->p_tx_packet++ = boxes[idx].boxName[j];
 800f382:	4918      	ldr	r1, [pc, #96]	; (800f3e4 <_SerializeBoxNamesReply+0xb4>)
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	4613      	mov	r3, r2
 800f388:	005b      	lsls	r3, r3, #1
 800f38a:	4413      	add	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	440b      	add	r3, r1
 800f390:	3304      	adds	r3, #4
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	441a      	add	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f39e:	1c58      	adds	r0, r3, #1
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f3a6:	7812      	ldrb	r2, [r2, #0]
 800f3a8:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < len; j++)
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	61bb      	str	r3, [r7, #24]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	dbe4      	blt.n	800f382 <_SerializeBoxNamesReply+0x52>
    for (i = 0; i < numberBoxItems; i++) {
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	4b0a      	ldr	r3, [pc, #40]	; (800f3e8 <_SerializeBoxNamesReply+0xb8>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	dbbd      	blt.n	800f346 <_SerializeBoxNamesReply+0x16>
        }
    }

    if (flag) {
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d002      	beq.n	800f3d6 <_SerializeBoxNamesReply+0xa6>
        flag = 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	617b      	str	r3, [r7, #20]
        goto reset;
 800f3d4:	e7b4      	b.n	800f340 <_SerializeBoxNamesReply+0x10>
    }
    return count;
 800f3d6:	693b      	ldr	r3, [r7, #16]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3720      	adds	r7, #32
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20001198 	.word	0x20001198
 800f3e4:	08027dc4 	.word	0x08027dc4
 800f3e8:	200011b1 	.word	0x200011b1

0800f3ec <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	6039      	str	r1, [r7, #0]
 800f3f6:	71fb      	strb	r3, [r7, #7]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX);
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2203      	movs	r2, #3
 800f400:	6839      	ldr	r1, [r7, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f7f2 ffe8 	bl	80023d8 <uartOpen>
 800f408:	4603      	mov	r3, r0
 800f40a:	4a92      	ldr	r2, [pc, #584]	; (800f654 <serialInit+0x268>)
 800f40c:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f40e:	4b91      	ldr	r3, [pc, #580]	; (800f654 <serialInit+0x268>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a91      	ldr	r2, [pc, #580]	; (800f658 <serialInit+0x26c>)
 800f414:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f416:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f41a:	4990      	ldr	r1, [pc, #576]	; (800f65c <serialInit+0x270>)
 800f41c:	4890      	ldr	r0, [pc, #576]	; (800f660 <serialInit+0x274>)
 800f41e:	f008 f8b1 	bl	8017584 <pifMsp_Init>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 810f 	beq.w	800f648 <serialInit+0x25c>
    ports[0].pif_msp.evt_receive = evtMspReceive;
 800f42a:	4b8b      	ldr	r3, [pc, #556]	; (800f658 <serialInit+0x26c>)
 800f42c:	4a8d      	ldr	r2, [pc, #564]	; (800f664 <serialInit+0x278>)
 800f42e:	605a      	str	r2, [r3, #4]
    ports[0].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f430:	4b89      	ldr	r3, [pc, #548]	; (800f658 <serialInit+0x26c>)
 800f432:	4a8d      	ldr	r2, [pc, #564]	; (800f668 <serialInit+0x27c>)
 800f434:	609a      	str	r2, [r3, #8]
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f436:	4b87      	ldr	r3, [pc, #540]	; (800f654 <serialInit+0x268>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	3304      	adds	r3, #4
 800f43c:	4619      	mov	r1, r3
 800f43e:	4888      	ldr	r0, [pc, #544]	; (800f660 <serialInit+0x274>)
 800f440:	f008 f92e 	bl	80176a0 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f444:	4b83      	ldr	r3, [pc, #524]	; (800f654 <serialInit+0x268>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3304      	adds	r3, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7f3 f8f6 	bl	800263c <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f450:	79bb      	ldrb	r3, [r7, #6]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d02c      	beq.n	800f4b0 <serialInit+0xc4>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX);
 800f456:	79bb      	ldrb	r3, [r7, #6]
 800f458:	2203      	movs	r2, #3
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f2 ffbb 	bl	80023d8 <uartOpen>
 800f462:	4603      	mov	r3, r0
 800f464:	4a7b      	ldr	r2, [pc, #492]	; (800f654 <serialInit+0x268>)
 800f466:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f468:	4b7a      	ldr	r3, [pc, #488]	; (800f654 <serialInit+0x268>)
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	4a7a      	ldr	r2, [pc, #488]	; (800f658 <serialInit+0x26c>)
 800f46e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f472:	f240 1211 	movw	r2, #273	; 0x111
 800f476:	4979      	ldr	r1, [pc, #484]	; (800f65c <serialInit+0x270>)
 800f478:	487c      	ldr	r0, [pc, #496]	; (800f66c <serialInit+0x280>)
 800f47a:	f008 f883 	bl	8017584 <pifMsp_Init>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	f000 80e3 	beq.w	800f64c <serialInit+0x260>
        ports[1].pif_msp.evt_receive = evtMspReceive;
 800f486:	4b74      	ldr	r3, [pc, #464]	; (800f658 <serialInit+0x26c>)
 800f488:	4a76      	ldr	r2, [pc, #472]	; (800f664 <serialInit+0x278>)
 800f48a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        ports[1].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f48e:	4b72      	ldr	r3, [pc, #456]	; (800f658 <serialInit+0x26c>)
 800f490:	4a75      	ldr	r2, [pc, #468]	; (800f668 <serialInit+0x27c>)
 800f492:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f496:	4b6f      	ldr	r3, [pc, #444]	; (800f654 <serialInit+0x268>)
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	3304      	adds	r3, #4
 800f49c:	4619      	mov	r1, r3
 800f49e:	4873      	ldr	r0, [pc, #460]	; (800f66c <serialInit+0x280>)
 800f4a0:	f008 f8fe 	bl	80176a0 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f4a4:	4b6b      	ldr	r3, [pc, #428]	; (800f654 <serialInit+0x268>)
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f3 f8c6 	bl	800263c <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f4b0:	2219      	movs	r2, #25
 800f4b2:	21ff      	movs	r1, #255	; 0xff
 800f4b4:	486e      	ldr	r0, [pc, #440]	; (800f670 <serialInit+0x284>)
 800f4b6:	f012 fb1f 	bl	8021af8 <memset>

    idx = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	1c5a      	adds	r2, r3, #1
 800f4c2:	60fa      	str	r2, [r7, #12]
 800f4c4:	4a6a      	ldr	r2, [pc, #424]	; (800f670 <serialInit+0x284>)
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f4ca:	2002      	movs	r0, #2
 800f4cc:	f7f7 fd42 	bl	8006f54 <sensors>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00b      	beq.n	800f4ee <serialInit+0x102>
        availableBoxes[idx++] = BOXANGLE;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	60fa      	str	r2, [r7, #12]
 800f4dc:	4a64      	ldr	r2, [pc, #400]	; (800f670 <serialInit+0x284>)
 800f4de:	2101      	movs	r1, #1
 800f4e0:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	1c5a      	adds	r2, r3, #1
 800f4e6:	60fa      	str	r2, [r7, #12]
 800f4e8:	4a61      	ldr	r2, [pc, #388]	; (800f670 <serialInit+0x284>)
 800f4ea:	2102      	movs	r1, #2
 800f4ec:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f4ee:	2004      	movs	r0, #4
 800f4f0:	f7f7 fd30 	bl	8006f54 <sensors>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d012      	beq.n	800f520 <serialInit+0x134>
        availableBoxes[idx++] = BOXBARO;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	60fa      	str	r2, [r7, #12]
 800f500:	4a5b      	ldr	r2, [pc, #364]	; (800f670 <serialInit+0x284>)
 800f502:	2103      	movs	r1, #3
 800f504:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f506:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f50a:	f7f7 fd6b 	bl	8006fe4 <feature>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d005      	beq.n	800f520 <serialInit+0x134>
            availableBoxes[idx++] = BOXVARIO;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	60fa      	str	r2, [r7, #12]
 800f51a:	4a55      	ldr	r2, [pc, #340]	; (800f670 <serialInit+0x284>)
 800f51c:	2104      	movs	r1, #4
 800f51e:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f520:	2002      	movs	r0, #2
 800f522:	f7f7 fd17 	bl	8006f54 <sensors>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <serialInit+0x14c>
 800f52c:	2008      	movs	r0, #8
 800f52e:	f7f7 fd11 	bl	8006f54 <sensors>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d011      	beq.n	800f55c <serialInit+0x170>
        availableBoxes[idx++] = BOXMAG;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	60fa      	str	r2, [r7, #12]
 800f53e:	4a4c      	ldr	r2, [pc, #304]	; (800f670 <serialInit+0x284>)
 800f540:	2105      	movs	r1, #5
 800f542:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	60fa      	str	r2, [r7, #12]
 800f54a:	4a49      	ldr	r2, [pc, #292]	; (800f670 <serialInit+0x284>)
 800f54c:	2106      	movs	r1, #6
 800f54e:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	60fa      	str	r2, [r7, #12]
 800f556:	4a46      	ldr	r2, [pc, #280]	; (800f670 <serialInit+0x284>)
 800f558:	2107      	movs	r1, #7
 800f55a:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f55c:	2020      	movs	r0, #32
 800f55e:	f7f7 fd41 	bl	8006fe4 <feature>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d005      	beq.n	800f574 <serialInit+0x188>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	60fa      	str	r2, [r7, #12]
 800f56e:	4a40      	ldr	r2, [pc, #256]	; (800f670 <serialInit+0x284>)
 800f570:	2108      	movs	r1, #8
 800f572:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f574:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f578:	f7f7 fd34 	bl	8006fe4 <feature>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00b      	beq.n	800f59a <serialInit+0x1ae>
        availableBoxes[idx++] = BOXGPSHOME;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	1c5a      	adds	r2, r3, #1
 800f586:	60fa      	str	r2, [r7, #12]
 800f588:	4a39      	ldr	r2, [pc, #228]	; (800f670 <serialInit+0x284>)
 800f58a:	210a      	movs	r1, #10
 800f58c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	1c5a      	adds	r2, r3, #1
 800f592:	60fa      	str	r2, [r7, #12]
 800f594:	4a36      	ldr	r2, [pc, #216]	; (800f670 <serialInit+0x284>)
 800f596:	210b      	movs	r1, #11
 800f598:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f59a:	4b36      	ldr	r3, [pc, #216]	; (800f674 <serialInit+0x288>)
 800f59c:	7c1b      	ldrb	r3, [r3, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00b      	beq.n	800f5ba <serialInit+0x1ce>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	60fa      	str	r2, [r7, #12]
 800f5a8:	4a31      	ldr	r2, [pc, #196]	; (800f670 <serialInit+0x284>)
 800f5aa:	210c      	movs	r1, #12
 800f5ac:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	60fa      	str	r2, [r7, #12]
 800f5b4:	4a2e      	ldr	r2, [pc, #184]	; (800f670 <serialInit+0x284>)
 800f5b6:	2118      	movs	r1, #24
 800f5b8:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	60fa      	str	r2, [r7, #12]
 800f5c0:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <serialInit+0x284>)
 800f5c2:	210d      	movs	r1, #13
 800f5c4:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f5c6:	2004      	movs	r0, #4
 800f5c8:	f7f7 fd0c 	bl	8006fe4 <feature>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <serialInit+0x1f2>
        availableBoxes[idx++] = BOXCALIB;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	60fa      	str	r2, [r7, #12]
 800f5d8:	4a25      	ldr	r2, [pc, #148]	; (800f670 <serialInit+0x284>)
 800f5da:	2111      	movs	r1, #17
 800f5dc:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	60fa      	str	r2, [r7, #12]
 800f5e4:	4a22      	ldr	r2, [pc, #136]	; (800f670 <serialInit+0x284>)
 800f5e6:	2113      	movs	r1, #19
 800f5e8:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f5ea:	4b23      	ldr	r3, [pc, #140]	; (800f678 <serialInit+0x28c>)
 800f5ec:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bf14      	ite	ne
 800f5f4:	2301      	movne	r3, #1
 800f5f6:	2300      	moveq	r3, #0
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f7 fcf2 	bl	8006fe4 <feature>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d005      	beq.n	800f612 <serialInit+0x226>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	60fa      	str	r2, [r7, #12]
 800f60c:	4a18      	ldr	r2, [pc, #96]	; (800f670 <serialInit+0x284>)
 800f60e:	2114      	movs	r1, #20
 800f610:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f612:	4b19      	ldr	r3, [pc, #100]	; (800f678 <serialInit+0x28c>)
 800f614:	795b      	ldrb	r3, [r3, #5]
 800f616:	2b18      	cmp	r3, #24
 800f618:	d111      	bne.n	800f63e <serialInit+0x252>
        availableBoxes[idx++] = BOXSERVO1;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	60fa      	str	r2, [r7, #12]
 800f620:	4a13      	ldr	r2, [pc, #76]	; (800f670 <serialInit+0x284>)
 800f622:	2115      	movs	r1, #21
 800f624:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	60fa      	str	r2, [r7, #12]
 800f62c:	4a10      	ldr	r2, [pc, #64]	; (800f670 <serialInit+0x284>)
 800f62e:	2116      	movs	r1, #22
 800f630:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	60fa      	str	r2, [r7, #12]
 800f638:	4a0d      	ldr	r2, [pc, #52]	; (800f670 <serialInit+0x284>)
 800f63a:	2117      	movs	r1, #23
 800f63c:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	b2da      	uxtb	r2, r3
 800f642:	4b0e      	ldr	r3, [pc, #56]	; (800f67c <serialInit+0x290>)
 800f644:	701a      	strb	r2, [r3, #0]
 800f646:	e002      	b.n	800f64e <serialInit+0x262>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f648:	bf00      	nop
 800f64a:	e000      	b.n	800f64e <serialInit+0x262>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f64c:	bf00      	nop
}
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20001640 	.word	0x20001640
 800f658:	200011b4 	.word	0x200011b4
 800f65c:	20002068 	.word	0x20002068
 800f660:	200011b8 	.word	0x200011b8
 800f664:	0800f681 	.word	0x0800f681
 800f668:	08011289 	.word	0x08011289
 800f66c:	20001290 	.word	0x20001290
 800f670:	20001198 	.word	0x20001198
 800f674:	20002014 	.word	0x20002014
 800f678:	200019c8 	.word	0x200019c8
 800f67c:	200011b1 	.word	0x200011b1

0800f680 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet)
{
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b091      	sub	sp, #68	; 0x44
 800f684:	af02      	add	r7, sp, #8
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f68e:	2300      	movs	r3, #0
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
 800f692:	2300      	movs	r3, #0
 800f694:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f696:	4be7      	ldr	r3, [pc, #924]	; (800fa34 <evtMspReceive+0x3b4>)
 800f698:	61fb      	str	r3, [r7, #28]
    mspPortState_t* p_port = &ports[PIF_ID_MSP_2_IDX(p_owner->_id)];
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	891b      	ldrh	r3, [r3, #8]
 800f69e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f6a2:	22d8      	movs	r2, #216	; 0xd8
 800f6a4:	fb02 f303 	mul.w	r3, r2, r3
 800f6a8:	4ae3      	ldr	r2, [pc, #908]	; (800fa38 <evtMspReceive+0x3b8>)
 800f6aa:	4413      	add	r3, r2
 800f6ac:	61bb      	str	r3, [r7, #24]

    p_port->p_rx_packet = p_packet->p_data;
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	685a      	ldr	r2, [r3, #4]
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	651a      	str	r2, [r3, #80]	; 0x50
    p_port->p_tx_packet = p_port->tx_packet;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    switch (p_packet->command) {
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	3b40      	subs	r3, #64	; 0x40
 800f6c8:	2bbe      	cmp	r3, #190	; 0xbe
 800f6ca:	f201 85cd 	bhi.w	8011268 <evtMspReceive+0x1be8>
 800f6ce:	a201      	add	r2, pc, #4	; (adr r2, 800f6d4 <evtMspReceive+0x54>)
 800f6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d4:	080111a1 	.word	0x080111a1
 800f6d8:	080111d9 	.word	0x080111d9
 800f6dc:	080110b9 	.word	0x080110b9
 800f6e0:	08010f35 	.word	0x08010f35
 800f6e4:	08011211 	.word	0x08011211
 800f6e8:	08011225 	.word	0x08011225
 800f6ec:	08011269 	.word	0x08011269
 800f6f0:	08011269 	.word	0x08011269
 800f6f4:	08011269 	.word	0x08011269
 800f6f8:	08011269 	.word	0x08011269
 800f6fc:	08011269 	.word	0x08011269
 800f700:	08011269 	.word	0x08011269
 800f704:	08011269 	.word	0x08011269
 800f708:	08011269 	.word	0x08011269
 800f70c:	08011269 	.word	0x08011269
 800f710:	08011269 	.word	0x08011269
 800f714:	08011269 	.word	0x08011269
 800f718:	08011269 	.word	0x08011269
 800f71c:	08011269 	.word	0x08011269
 800f720:	08011269 	.word	0x08011269
 800f724:	08011269 	.word	0x08011269
 800f728:	08011269 	.word	0x08011269
 800f72c:	08011269 	.word	0x08011269
 800f730:	08011269 	.word	0x08011269
 800f734:	08011269 	.word	0x08011269
 800f738:	08011269 	.word	0x08011269
 800f73c:	08011269 	.word	0x08011269
 800f740:	08011269 	.word	0x08011269
 800f744:	08011269 	.word	0x08011269
 800f748:	08011269 	.word	0x08011269
 800f74c:	08011269 	.word	0x08011269
 800f750:	08011269 	.word	0x08011269
 800f754:	08011269 	.word	0x08011269
 800f758:	08011269 	.word	0x08011269
 800f75c:	08011269 	.word	0x08011269
 800f760:	08011269 	.word	0x08011269
 800f764:	0800fde7 	.word	0x0800fde7
 800f768:	0800fe1f 	.word	0x0800fe1f
 800f76c:	0800ffbd 	.word	0x0800ffbd
 800f770:	0801009f 	.word	0x0801009f
 800f774:	080105a7 	.word	0x080105a7
 800f778:	080105c5 	.word	0x080105c5
 800f77c:	0801060d 	.word	0x0801060d
 800f780:	0801067b 	.word	0x0801067b
 800f784:	080106bd 	.word	0x080106bd
 800f788:	08010701 	.word	0x08010701
 800f78c:	0801072f 	.word	0x0801072f
 800f790:	080107e3 	.word	0x080107e3
 800f794:	08010857 	.word	0x08010857
 800f798:	08010951 	.word	0x08010951
 800f79c:	08010a3d 	.word	0x08010a3d
 800f7a0:	08010b45 	.word	0x08010b45
 800f7a4:	080109a1 	.word	0x080109a1
 800f7a8:	08010935 	.word	0x08010935
 800f7ac:	08010b79 	.word	0x08010b79
 800f7b0:	080109c1 	.word	0x080109c1
 800f7b4:	080100bd 	.word	0x080100bd
 800f7b8:	08011269 	.word	0x08011269
 800f7bc:	08011269 	.word	0x08011269
 800f7c0:	08010401 	.word	0x08010401
 800f7c4:	08011269 	.word	0x08011269
 800f7c8:	08011269 	.word	0x08011269
 800f7cc:	08011269 	.word	0x08011269
 800f7d0:	08011269 	.word	0x08011269
 800f7d4:	08011269 	.word	0x08011269
 800f7d8:	08011269 	.word	0x08011269
 800f7dc:	08011269 	.word	0x08011269
 800f7e0:	08011269 	.word	0x08011269
 800f7e4:	08011269 	.word	0x08011269
 800f7e8:	08011269 	.word	0x08011269
 800f7ec:	08011269 	.word	0x08011269
 800f7f0:	08011269 	.word	0x08011269
 800f7f4:	08011269 	.word	0x08011269
 800f7f8:	08011269 	.word	0x08011269
 800f7fc:	08011269 	.word	0x08011269
 800f800:	08011269 	.word	0x08011269
 800f804:	08011269 	.word	0x08011269
 800f808:	08011269 	.word	0x08011269
 800f80c:	08011269 	.word	0x08011269
 800f810:	08011269 	.word	0x08011269
 800f814:	08011269 	.word	0x08011269
 800f818:	08011269 	.word	0x08011269
 800f81c:	08011269 	.word	0x08011269
 800f820:	08011269 	.word	0x08011269
 800f824:	08011269 	.word	0x08011269
 800f828:	08011269 	.word	0x08011269
 800f82c:	08011269 	.word	0x08011269
 800f830:	08011269 	.word	0x08011269
 800f834:	08011269 	.word	0x08011269
 800f838:	08011269 	.word	0x08011269
 800f83c:	08011269 	.word	0x08011269
 800f840:	08011269 	.word	0x08011269
 800f844:	08011269 	.word	0x08011269
 800f848:	08011269 	.word	0x08011269
 800f84c:	08011269 	.word	0x08011269
 800f850:	08011269 	.word	0x08011269
 800f854:	08010dd3 	.word	0x08010dd3
 800f858:	08011269 	.word	0x08011269
 800f85c:	08011269 	.word	0x08011269
 800f860:	08011269 	.word	0x08011269
 800f864:	08010e09 	.word	0x08010e09
 800f868:	08011269 	.word	0x08011269
 800f86c:	08010ec9 	.word	0x08010ec9
 800f870:	08011269 	.word	0x08011269
 800f874:	08011269 	.word	0x08011269
 800f878:	08011269 	.word	0x08011269
 800f87c:	08011269 	.word	0x08011269
 800f880:	08011269 	.word	0x08011269
 800f884:	08011269 	.word	0x08011269
 800f888:	08011269 	.word	0x08011269
 800f88c:	08011269 	.word	0x08011269
 800f890:	08011269 	.word	0x08011269
 800f894:	08011269 	.word	0x08011269
 800f898:	08011269 	.word	0x08011269
 800f89c:	08011269 	.word	0x08011269
 800f8a0:	08011269 	.word	0x08011269
 800f8a4:	08011269 	.word	0x08011269
 800f8a8:	08011269 	.word	0x08011269
 800f8ac:	08011269 	.word	0x08011269
 800f8b0:	08011269 	.word	0x08011269
 800f8b4:	08011269 	.word	0x08011269
 800f8b8:	08011269 	.word	0x08011269
 800f8bc:	08011269 	.word	0x08011269
 800f8c0:	08011269 	.word	0x08011269
 800f8c4:	08011269 	.word	0x08011269
 800f8c8:	08011269 	.word	0x08011269
 800f8cc:	08011269 	.word	0x08011269
 800f8d0:	08011269 	.word	0x08011269
 800f8d4:	08011269 	.word	0x08011269
 800f8d8:	08011269 	.word	0x08011269
 800f8dc:	08011269 	.word	0x08011269
 800f8e0:	08011269 	.word	0x08011269
 800f8e4:	08011269 	.word	0x08011269
 800f8e8:	08011269 	.word	0x08011269
 800f8ec:	08011269 	.word	0x08011269
 800f8f0:	08011269 	.word	0x08011269
 800f8f4:	0800f9d1 	.word	0x0800f9d1
 800f8f8:	0800fa45 	.word	0x0800fa45
 800f8fc:	0800fab7 	.word	0x0800fab7
 800f900:	0800fb4d 	.word	0x0800fb4d
 800f904:	0800fb91 	.word	0x0800fb91
 800f908:	08010cdb 	.word	0x08010cdb
 800f90c:	08010cf9 	.word	0x08010cf9
 800f910:	0800fc05 	.word	0x0800fc05
 800f914:	08010cbf 	.word	0x08010cbf
 800f918:	08010c1f 	.word	0x08010c1f
 800f91c:	0800fd87 	.word	0x0800fd87
 800f920:	0800fdc9 	.word	0x0800fdc9
 800f924:	08010171 	.word	0x08010171
 800f928:	08011269 	.word	0x08011269
 800f92c:	0800fd27 	.word	0x0800fd27
 800f930:	08011269 	.word	0x08011269
 800f934:	080104d9 	.word	0x080104d9
 800f938:	08011269 	.word	0x08011269
 800f93c:	08011269 	.word	0x08011269
 800f940:	08011269 	.word	0x08011269
 800f944:	08011269 	.word	0x08011269
 800f948:	08011269 	.word	0x08011269
 800f94c:	08011269 	.word	0x08011269
 800f950:	08011269 	.word	0x08011269
 800f954:	08011269 	.word	0x08011269
 800f958:	08011269 	.word	0x08011269
 800f95c:	08011269 	.word	0x08011269
 800f960:	08011269 	.word	0x08011269
 800f964:	08011269 	.word	0x08011269
 800f968:	08011269 	.word	0x08011269
 800f96c:	08011269 	.word	0x08011269
 800f970:	08011269 	.word	0x08011269
 800f974:	08011269 	.word	0x08011269
 800f978:	08011269 	.word	0x08011269
 800f97c:	08011269 	.word	0x08011269
 800f980:	08011269 	.word	0x08011269
 800f984:	08011269 	.word	0x08011269
 800f988:	08011269 	.word	0x08011269
 800f98c:	08011269 	.word	0x08011269
 800f990:	0800fa09 	.word	0x0800fa09
 800f994:	08010da5 	.word	0x08010da5
 800f998:	08010229 	.word	0x08010229
 800f99c:	08010303 	.word	0x08010303
 800f9a0:	08011269 	.word	0x08011269
 800f9a4:	08011269 	.word	0x08011269
 800f9a8:	08011269 	.word	0x08011269
 800f9ac:	08011269 	.word	0x08011269
 800f9b0:	08011269 	.word	0x08011269
 800f9b4:	08011269 	.word	0x08011269
 800f9b8:	08011269 	.word	0x08011269
 800f9bc:	08010d15 	.word	0x08010d15
 800f9c0:	08011269 	.word	0x08011269
 800f9c4:	08011269 	.word	0x08011269
 800f9c8:	08011269 	.word	0x08011269
 800f9cc:	08010d3d 	.word	0x08010d3d
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800f9d4:	e00b      	b.n	800f9ee <evtMspReceive+0x36e>
            rcData[i] = _Read16(p_port);
 800f9d6:	69b8      	ldr	r0, [r7, #24]
 800f9d8:	f7ff fbb8 	bl	800f14c <_Read16>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	b219      	sxth	r1, r3
 800f9e0:	4a16      	ldr	r2, [pc, #88]	; (800fa3c <evtMspReceive+0x3bc>)
 800f9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f0:	2b07      	cmp	r3, #7
 800f9f2:	d9f0      	bls.n	800f9d6 <evtMspReceive+0x356>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f007 fe76 	bl	80176ec <pifMsp_MakeAnswer>
        mspFrameRecieve();
 800fa00:	f7fe fc22 	bl	800e248 <mspFrameRecieve>
        break;
 800fa04:	f001 bc35 	b.w	8011272 <evtMspReceive+0x1bf2>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = _Read16(p_port);
 800fa08:	69b8      	ldr	r0, [r7, #24]
 800fa0a:	f7ff fb9f 	bl	800f14c <_Read16>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	b21a      	sxth	r2, r3
 800fa12:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <evtMspReceive+0x3c0>)
 800fa14:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = _Read16(p_port);
 800fa16:	69b8      	ldr	r0, [r7, #24]
 800fa18:	f7ff fb98 	bl	800f14c <_Read16>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	b21a      	sxth	r2, r3
 800fa20:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <evtMspReceive+0x3c0>)
 800fa22:	859a      	strh	r2, [r3, #44]	; 0x2c
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fa24:	2300      	movs	r3, #0
 800fa26:	2200      	movs	r2, #0
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f007 fe5e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fa30:	f001 bc1f 	b.w	8011272 <evtMspReceive+0x1bf2>
 800fa34:	08026214 	.word	0x08026214
 800fa38:	200011b4 	.word	0x200011b4
 800fa3c:	20002184 	.word	0x20002184
 800fa40:	20001890 	.word	0x20001890

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = _Read8(p_port);
 800fa44:	69b8      	ldr	r0, [r7, #24]
 800fa46:	f7ff fb6d 	bl	800f124 <_Read8>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4bb7      	ldr	r3, [pc, #732]	; (800fd2c <evtMspReceive+0x6ac>)
 800fa50:	72da      	strb	r2, [r3, #11]
        GPS_numSat = _Read8(p_port);
 800fa52:	69b8      	ldr	r0, [r7, #24]
 800fa54:	f7ff fb66 	bl	800f124 <_Read8>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4bb4      	ldr	r3, [pc, #720]	; (800fd30 <evtMspReceive+0x6b0>)
 800fa5e:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = _Read32(p_port);
 800fa60:	69b8      	ldr	r0, [r7, #24]
 800fa62:	f7ff fb90 	bl	800f186 <_Read32>
 800fa66:	4603      	mov	r3, r0
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4bb2      	ldr	r3, [pc, #712]	; (800fd34 <evtMspReceive+0x6b4>)
 800fa6c:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = _Read32(p_port);
 800fa6e:	69b8      	ldr	r0, [r7, #24]
 800fa70:	f7ff fb89 	bl	800f186 <_Read32>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	4bae      	ldr	r3, [pc, #696]	; (800fd34 <evtMspReceive+0x6b4>)
 800fa7a:	605a      	str	r2, [r3, #4]
        GPS_altitude = _Read16(p_port);
 800fa7c:	69b8      	ldr	r0, [r7, #24]
 800fa7e:	f7ff fb65 	bl	800f14c <_Read16>
 800fa82:	4603      	mov	r3, r0
 800fa84:	461a      	mov	r2, r3
 800fa86:	4bac      	ldr	r3, [pc, #688]	; (800fd38 <evtMspReceive+0x6b8>)
 800fa88:	801a      	strh	r2, [r3, #0]
        GPS_speed = _Read16(p_port);
 800fa8a:	69b8      	ldr	r0, [r7, #24]
 800fa8c:	f7ff fb5e 	bl	800f14c <_Read16>
 800fa90:	4603      	mov	r3, r0
 800fa92:	461a      	mov	r2, r3
 800fa94:	4ba9      	ldr	r3, [pc, #676]	; (800fd3c <evtMspReceive+0x6bc>)
 800fa96:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800fa98:	4ba9      	ldr	r3, [pc, #676]	; (800fd40 <evtMspReceive+0x6c0>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	f043 0302 	orr.w	r3, r3, #2
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	4ba7      	ldr	r3, [pc, #668]	; (800fd40 <evtMspReceive+0x6c0>)
 800faa4:	701a      	strb	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800faa6:	2300      	movs	r3, #0
 800faa8:	2200      	movs	r2, #0
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f007 fe1d 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fab2:	f001 bbde 	b.w	8011272 <evtMspReceive+0x1bf2>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800fab6:	2300      	movs	r3, #0
 800fab8:	637b      	str	r3, [r7, #52]	; 0x34
 800faba:	e03c      	b.n	800fb36 <evtMspReceive+0x4b6>
            cfg.P8[i] = _Read8(p_port);
 800fabc:	69b8      	ldr	r0, [r7, #24]
 800fabe:	f7ff fb31 	bl	800f124 <_Read8>
 800fac2:	4603      	mov	r3, r0
 800fac4:	4619      	mov	r1, r3
 800fac6:	4a9f      	ldr	r2, [pc, #636]	; (800fd44 <evtMspReceive+0x6c4>)
 800fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faca:	4413      	add	r3, r2
 800facc:	3301      	adds	r3, #1
 800face:	460a      	mov	r2, r1
 800fad0:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = _Read8(p_port);
 800fad2:	69b8      	ldr	r0, [r7, #24]
 800fad4:	f7ff fb26 	bl	800f124 <_Read8>
 800fad8:	4603      	mov	r3, r0
 800fada:	4619      	mov	r1, r3
 800fadc:	4a99      	ldr	r2, [pc, #612]	; (800fd44 <evtMspReceive+0x6c4>)
 800fade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae0:	4413      	add	r3, r2
 800fae2:	330b      	adds	r3, #11
 800fae4:	460a      	mov	r2, r1
 800fae6:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = _Read8(p_port);
 800fae8:	69b8      	ldr	r0, [r7, #24]
 800faea:	f7ff fb1b 	bl	800f124 <_Read8>
 800faee:	4603      	mov	r3, r0
 800faf0:	4619      	mov	r1, r3
 800faf2:	4a94      	ldr	r2, [pc, #592]	; (800fd44 <evtMspReceive+0x6c4>)
 800faf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf6:	4413      	add	r3, r2
 800faf8:	3315      	adds	r3, #21
 800fafa:	460a      	mov	r2, r1
 800fafc:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fafe:	4a91      	ldr	r2, [pc, #580]	; (800fd44 <evtMspReceive+0x6c4>)
 800fb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb02:	4413      	add	r3, r2
 800fb04:	3301      	adds	r3, #1
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	4a8e      	ldr	r2, [pc, #568]	; (800fd44 <evtMspReceive+0x6c4>)
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	4413      	add	r3, r2
 800fb10:	330b      	adds	r3, #11
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4a8b      	ldr	r2, [pc, #556]	; (800fd44 <evtMspReceive+0x6c4>)
 800fb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1a:	4413      	add	r3, r2
 800fb1c:	3315      	adds	r3, #21
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	9100      	str	r1, [sp, #0]
 800fb24:	4603      	mov	r3, r0
 800fb26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb28:	4987      	ldr	r1, [pc, #540]	; (800fd48 <evtMspReceive+0x6c8>)
 800fb2a:	2002      	movs	r0, #2
 800fb2c:	f003 fd2e 	bl	801358c <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb32:	3301      	adds	r3, #1
 800fb34:	637b      	str	r3, [r7, #52]	; 0x34
 800fb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb38:	2b09      	cmp	r3, #9
 800fb3a:	d9bf      	bls.n	800fabc <evtMspReceive+0x43c>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	2200      	movs	r2, #0
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f007 fdd2 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fb48:	f001 bb93 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fb50:	e010      	b.n	800fb74 <evtMspReceive+0x4f4>
            cfg.activate[availableBoxes[i]] = _Read16(p_port);
 800fb52:	69b8      	ldr	r0, [r7, #24]
 800fb54:	f7ff fafa 	bl	800f14c <_Read16>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4a7b      	ldr	r2, [pc, #492]	; (800fd4c <evtMspReceive+0x6cc>)
 800fb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb60:	4413      	add	r3, r2
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	4a77      	ldr	r2, [pc, #476]	; (800fd44 <evtMspReceive+0x6c4>)
 800fb66:	3312      	adds	r3, #18
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb70:	3301      	adds	r3, #1
 800fb72:	637b      	str	r3, [r7, #52]	; 0x34
 800fb74:	4b76      	ldr	r3, [pc, #472]	; (800fd50 <evtMspReceive+0x6d0>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d3e8      	bcc.n	800fb52 <evtMspReceive+0x4d2>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb80:	2300      	movs	r3, #0
 800fb82:	2200      	movs	r2, #0
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f007 fdb0 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fb8c:	f001 bb71 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = _Read8(p_port);
 800fb90:	69b8      	ldr	r0, [r7, #24]
 800fb92:	f7ff fac7 	bl	800f124 <_Read8>
 800fb96:	4603      	mov	r3, r0
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4b6a      	ldr	r3, [pc, #424]	; (800fd44 <evtMspReceive+0x6c4>)
 800fb9c:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = _Read8(p_port);
 800fb9e:	69b8      	ldr	r0, [r7, #24]
 800fba0:	f7ff fac0 	bl	800f124 <_Read8>
 800fba4:	4603      	mov	r3, r0
 800fba6:	461a      	mov	r2, r3
 800fba8:	4b66      	ldr	r3, [pc, #408]	; (800fd44 <evtMspReceive+0x6c4>)
 800fbaa:	f883 2020 	strb.w	r2, [r3, #32]
        _Read8(p_port); // Legacy pitch-roll rate, read but not set.
 800fbae:	69b8      	ldr	r0, [r7, #24]
 800fbb0:	f7ff fab8 	bl	800f124 <_Read8>
        cfg.yawRate = _Read8(p_port);
 800fbb4:	69b8      	ldr	r0, [r7, #24]
 800fbb6:	f7ff fab5 	bl	800f124 <_Read8>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b61      	ldr	r3, [pc, #388]	; (800fd44 <evtMspReceive+0x6c4>)
 800fbc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = _Read8(p_port);
 800fbc4:	69b8      	ldr	r0, [r7, #24]
 800fbc6:	f7ff faad 	bl	800f124 <_Read8>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	461a      	mov	r2, r3
 800fbce:	4b5d      	ldr	r3, [pc, #372]	; (800fd44 <evtMspReceive+0x6c4>)
 800fbd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = _Read8(p_port);
 800fbd4:	69b8      	ldr	r0, [r7, #24]
 800fbd6:	f7ff faa5 	bl	800f124 <_Read8>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4b59      	ldr	r3, [pc, #356]	; (800fd44 <evtMspReceive+0x6c4>)
 800fbe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = _Read8(p_port);
 800fbe4:	69b8      	ldr	r0, [r7, #24]
 800fbe6:	f7ff fa9d 	bl	800f124 <_Read8>
 800fbea:	4603      	mov	r3, r0
 800fbec:	461a      	mov	r2, r3
 800fbee:	4b55      	ldr	r3, [pc, #340]	; (800fd44 <evtMspReceive+0x6c4>)
 800fbf0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	6839      	ldr	r1, [r7, #0]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f007 fd76 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fc00:	f001 bb37 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_MISC:
        tmp = _Read16(p_port);
 800fc04:	69b8      	ldr	r0, [r7, #24]
 800fc06:	f7ff faa1 	bl	800f14c <_Read16>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	613b      	str	r3, [r7, #16]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc14:	d208      	bcs.n	800fc28 <evtMspReceive+0x5a8>
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fc1c:	d904      	bls.n	800fc28 <evtMspReceive+0x5a8>
            mcfg.midrc = tmp;
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	4b4c      	ldr	r3, [pc, #304]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc24:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = _Read16(p_port);
 800fc28:	69b8      	ldr	r0, [r7, #24]
 800fc2a:	f7ff fa8f 	bl	800f14c <_Read16>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	461a      	mov	r2, r3
 800fc32:	4b48      	ldr	r3, [pc, #288]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc34:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = _Read16(p_port);
 800fc38:	69b8      	ldr	r0, [r7, #24]
 800fc3a:	f7ff fa87 	bl	800f14c <_Read16>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	461a      	mov	r2, r3
 800fc42:	4b44      	ldr	r3, [pc, #272]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc44:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = _Read16(p_port);
 800fc48:	69b8      	ldr	r0, [r7, #24]
 800fc4a:	f7ff fa7f 	bl	800f14c <_Read16>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b40      	ldr	r3, [pc, #256]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc54:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = _Read16(p_port);
 800fc58:	69b8      	ldr	r0, [r7, #24]
 800fc5a:	f7ff fa77 	bl	800f14c <_Read16>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	461a      	mov	r2, r3
 800fc62:	4b38      	ldr	r3, [pc, #224]	; (800fd44 <evtMspReceive+0x6c4>)
 800fc64:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = _Read8(p_port);
 800fc68:	69b8      	ldr	r0, [r7, #24]
 800fc6a:	f7ff fa5b 	bl	800f124 <_Read8>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461a      	mov	r2, r3
 800fc72:	4b38      	ldr	r3, [pc, #224]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc74:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = _Read8(p_port);
 800fc78:	69b8      	ldr	r0, [r7, #24]
 800fc7a:	f7ff fa53 	bl	800f124 <_Read8>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	b25a      	sxtb	r2, r3
 800fc82:	4b34      	ldr	r3, [pc, #208]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc84:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = _Read8(p_port);
 800fc88:	69b8      	ldr	r0, [r7, #24]
 800fc8a:	f7ff fa4b 	bl	800f124 <_Read8>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	b25a      	sxtb	r2, r3
 800fc92:	4b30      	ldr	r3, [pc, #192]	; (800fd54 <evtMspReceive+0x6d4>)
 800fc94:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = _Read8(p_port);
 800fc98:	69b8      	ldr	r0, [r7, #24]
 800fc9a:	f7ff fa43 	bl	800f124 <_Read8>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	461a      	mov	r2, r3
 800fca2:	4b2c      	ldr	r3, [pc, #176]	; (800fd54 <evtMspReceive+0x6d4>)
 800fca4:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = _Read8(p_port);
 800fca8:	69b8      	ldr	r0, [r7, #24]
 800fcaa:	f7ff fa3b 	bl	800f124 <_Read8>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4b28      	ldr	r3, [pc, #160]	; (800fd54 <evtMspReceive+0x6d4>)
 800fcb4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        _Read8(p_port);
 800fcb8:	69b8      	ldr	r0, [r7, #24]
 800fcba:	f7ff fa33 	bl	800f124 <_Read8>
        cfg.mag_declination = _Read16(p_port) * 10;
 800fcbe:	69b8      	ldr	r0, [r7, #24]
 800fcc0:	f7ff fa44 	bl	800f14c <_Read16>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	0092      	lsls	r2, r2, #2
 800fcca:	4413      	add	r3, r2
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b21a      	sxth	r2, r3
 800fcd2:	4b1c      	ldr	r3, [pc, #112]	; (800fd44 <evtMspReceive+0x6c4>)
 800fcd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = _Read8(p_port);           // actual vbatscale as intended
 800fcd6:	69b8      	ldr	r0, [r7, #24]
 800fcd8:	f7ff fa24 	bl	800f124 <_Read8>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	4b1c      	ldr	r3, [pc, #112]	; (800fd54 <evtMspReceive+0x6d4>)
 800fce2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = _Read8(p_port);  // vbatlevel_warn1 in MWC2.3 GUI
 800fce6:	69b8      	ldr	r0, [r7, #24]
 800fce8:	f7ff fa1c 	bl	800f124 <_Read8>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4b18      	ldr	r3, [pc, #96]	; (800fd54 <evtMspReceive+0x6d4>)
 800fcf2:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = _Read8(p_port);  // vbatlevel_warn2 in MWC2.3 GUI
 800fcf6:	69b8      	ldr	r0, [r7, #24]
 800fcf8:	f7ff fa14 	bl	800f124 <_Read8>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4b14      	ldr	r3, [pc, #80]	; (800fd54 <evtMspReceive+0x6d4>)
 800fd02:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = _Read8(p_port); // vbatlevel when buzzer starts to alert
 800fd06:	69b8      	ldr	r0, [r7, #24]
 800fd08:	f7ff fa0c 	bl	800f124 <_Read8>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4b10      	ldr	r3, [pc, #64]	; (800fd54 <evtMspReceive+0x6d4>)
 800fd12:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd16:	2300      	movs	r3, #0
 800fd18:	2200      	movs	r2, #0
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f007 fce5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fd22:	f001 baa6 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fd26:	2300      	movs	r3, #0
 800fd28:	637b      	str	r3, [r7, #52]	; 0x34
 800fd2a:	e021      	b.n	800fd70 <evtMspReceive+0x6f0>
 800fd2c:	20002014 	.word	0x20002014
 800fd30:	20002176 	.word	0x20002176
 800fd34:	20002118 	.word	0x20002118
 800fd38:	2000202a 	.word	0x2000202a
 800fd3c:	20002050 	.word	0x20002050
 800fd40:	20000e8c 	.word	0x20000e8c
 800fd44:	20001890 	.word	0x20001890
 800fd48:	08026220 	.word	0x08026220
 800fd4c:	20001198 	.word	0x20001198
 800fd50:	200011b1 	.word	0x200011b1
 800fd54:	200019c8 	.word	0x200019c8
            motor_disarmed[i] = _Read16(p_port);
 800fd58:	69b8      	ldr	r0, [r7, #24]
 800fd5a:	f7ff f9f7 	bl	800f14c <_Read16>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	b219      	sxth	r1, r3
 800fd62:	4aae      	ldr	r2, [pc, #696]	; (801001c <evtMspReceive+0x99c>)
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd72:	2b07      	cmp	r3, #7
 800fd74:	d9f0      	bls.n	800fd58 <evtMspReceive+0x6d8>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd76:	2300      	movs	r3, #0
 800fd78:	2200      	movs	r2, #0
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f007 fcb5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fd82:	f001 ba76 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fd86:	4ba6      	ldr	r3, [pc, #664]	; (8010020 <evtMspReceive+0x9a0>)
 800fd88:	785b      	ldrb	r3, [r3, #1]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d114      	bne.n	800fdb8 <evtMspReceive+0x738>
            mcfg.current_profile = _Read8(p_port);
 800fd8e:	69b8      	ldr	r0, [r7, #24]
 800fd90:	f7ff f9c8 	bl	800f124 <_Read8>
 800fd94:	4603      	mov	r3, r0
 800fd96:	461a      	mov	r2, r3
 800fd98:	4ba2      	ldr	r3, [pc, #648]	; (8010024 <evtMspReceive+0x9a4>)
 800fd9a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fd9e:	4ba1      	ldr	r3, [pc, #644]	; (8010024 <evtMspReceive+0x9a4>)
 800fda0:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	d903      	bls.n	800fdb0 <evtMspReceive+0x730>
                mcfg.current_profile = 0;
 800fda8:	4b9e      	ldr	r3, [pc, #632]	; (8010024 <evtMspReceive+0x9a4>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	f7f6 fd34 	bl	8006820 <writeEEPROM>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdb8:	2300      	movs	r3, #0
 800fdba:	2200      	movs	r2, #0
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f007 fc94 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fdc4:	f001 ba55 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_HEAD:
        magHold = _Read16(p_port);
 800fdc8:	69b8      	ldr	r0, [r7, #24]
 800fdca:	f7ff f9bf 	bl	800f14c <_Read16>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	b21a      	sxth	r2, r3
 800fdd2:	4b95      	ldr	r3, [pc, #596]	; (8010028 <evtMspReceive+0x9a8>)
 800fdd4:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	2200      	movs	r2, #0
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f007 fc85 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fde2:	f001 ba46 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_IDENT:
        _Serialize8(p_port, VERSION);                    // multiwii version
 800fde6:	21e7      	movs	r1, #231	; 0xe7
 800fde8:	69b8      	ldr	r0, [r7, #24]
 800fdea:	f7ff f9f5 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.mixerConfiguration);    // type of multicopter
 800fdee:	4b8d      	ldr	r3, [pc, #564]	; (8010024 <evtMspReceive+0x9a4>)
 800fdf0:	795b      	ldrb	r3, [r3, #5]
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	69b8      	ldr	r0, [r7, #24]
 800fdf6:	f7ff f9ef 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fdfa:	2104      	movs	r1, #4
 800fdfc:	69b8      	ldr	r0, [r7, #24]
 800fdfe:	f7ff f9eb 	bl	800f1d8 <_Serialize8>
        _Serialize32(p_port, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fe02:	498a      	ldr	r1, [pc, #552]	; (801002c <evtMspReceive+0x9ac>)
 800fe04:	69b8      	ldr	r0, [r7, #24]
 800fe06:	f7ff fa22 	bl	800f24e <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fe10:	2307      	movs	r3, #7
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f007 fc69 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fe1a:	f001 ba2a 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_STATUS:
        _Serialize16(p_port, cycleTime);
 800fe1e:	4b84      	ldr	r3, [pc, #528]	; (8010030 <evtMspReceive+0x9b0>)
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	b21b      	sxth	r3, r3
 800fe24:	4619      	mov	r1, r3
 800fe26:	69b8      	ldr	r0, [r7, #24]
 800fe28:	f7ff f9ee 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, g_i2c_port.error_count);
 800fe2c:	4b81      	ldr	r3, [pc, #516]	; (8010034 <evtMspReceive+0x9b4>)
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	b21b      	sxth	r3, r3
 800fe32:	4619      	mov	r1, r3
 800fe34:	69b8      	ldr	r0, [r7, #24]
 800fe36:	f7ff f9e7 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fe3a:	2002      	movs	r0, #2
 800fe3c:	f7f7 f88a 	bl	8006f54 <sensors>
 800fe40:	4603      	mov	r3, r0
 800fe42:	b21c      	sxth	r4, r3
 800fe44:	2004      	movs	r0, #4
 800fe46:	f7f7 f885 	bl	8006f54 <sensors>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	b21b      	sxth	r3, r3
 800fe50:	4323      	orrs	r3, r4
 800fe52:	b21c      	sxth	r4, r3
 800fe54:	2008      	movs	r0, #8
 800fe56:	f7f7 f87d 	bl	8006f54 <sensors>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	b21b      	sxth	r3, r3
 800fe60:	4323      	orrs	r3, r4
 800fe62:	b21c      	sxth	r4, r3
 800fe64:	2020      	movs	r0, #32
 800fe66:	f7f7 f875 	bl	8006f54 <sensors>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	00db      	lsls	r3, r3, #3
 800fe6e:	b21b      	sxth	r3, r3
 800fe70:	4323      	orrs	r3, r4
 800fe72:	b21c      	sxth	r4, r3
 800fe74:	2010      	movs	r0, #16
 800fe76:	f7f7 f86d 	bl	8006f54 <sensors>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	011b      	lsls	r3, r3, #4
 800fe7e:	b21b      	sxth	r3, r3
 800fe80:	4323      	orrs	r3, r4
 800fe82:	b21b      	sxth	r3, r3
 800fe84:	4619      	mov	r1, r3
 800fe86:	69b8      	ldr	r0, [r7, #24]
 800fe88:	f7ff f9be 	bl	800f208 <_Serialize16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fe90:	4b63      	ldr	r3, [pc, #396]	; (8010020 <evtMspReceive+0x9a0>)
 800fe92:	78db      	ldrb	r3, [r3, #3]
 800fe94:	005a      	lsls	r2, r3, #1
 800fe96:	4b62      	ldr	r3, [pc, #392]	; (8010020 <evtMspReceive+0x9a0>)
 800fe98:	791b      	ldrb	r3, [r3, #4]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fe9e:	4b60      	ldr	r3, [pc, #384]	; (8010020 <evtMspReceive+0x9a0>)
 800fea0:	799b      	ldrb	r3, [r3, #6]
 800fea2:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fea4:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fea6:	4b5e      	ldr	r3, [pc, #376]	; (8010020 <evtMspReceive+0x9a0>)
 800fea8:	795b      	ldrb	r3, [r3, #5]
 800feaa:	015b      	lsls	r3, r3, #5
 800feac:	431a      	orrs	r2, r3
 800feae:	4b5c      	ldr	r3, [pc, #368]	; (8010020 <evtMspReceive+0x9a0>)
 800feb0:	7a5b      	ldrb	r3, [r3, #9]
 800feb2:	019b      	lsls	r3, r3, #6
 800feb4:	431a      	orrs	r2, r3
 800feb6:	4b60      	ldr	r3, [pc, #384]	; (8010038 <evtMspReceive+0x9b8>)
 800feb8:	79db      	ldrb	r3, [r3, #7]
 800feba:	01db      	lsls	r3, r3, #7
 800febc:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800febe:	4b5e      	ldr	r3, [pc, #376]	; (8010038 <evtMspReceive+0x9b8>)
 800fec0:	7a1b      	ldrb	r3, [r3, #8]
 800fec2:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fec4:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fec6:	4b5c      	ldr	r3, [pc, #368]	; (8010038 <evtMspReceive+0x9b8>)
 800fec8:	7a5b      	ldrb	r3, [r3, #9]
 800feca:	025b      	lsls	r3, r3, #9
 800fecc:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fece:	4b54      	ldr	r3, [pc, #336]	; (8010020 <evtMspReceive+0x9a0>)
 800fed0:	79db      	ldrb	r3, [r3, #7]
 800fed2:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fed4:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fed6:	4b52      	ldr	r3, [pc, #328]	; (8010020 <evtMspReceive+0x9a0>)
 800fed8:	7a1b      	ldrb	r3, [r3, #8]
 800feda:	02db      	lsls	r3, r3, #11
 800fedc:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fede:	4b50      	ldr	r3, [pc, #320]	; (8010020 <evtMspReceive+0x9a0>)
 800fee0:	7d1b      	ldrb	r3, [r3, #20]
 800fee2:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fee4:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fee6:	4b4e      	ldr	r3, [pc, #312]	; (8010020 <evtMspReceive+0x9a0>)
 800fee8:	7a9b      	ldrb	r3, [r3, #10]
 800feea:	031b      	lsls	r3, r3, #12
 800feec:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800feee:	4b52      	ldr	r3, [pc, #328]	; (8010038 <evtMspReceive+0x9b8>)
 800fef0:	7b5b      	ldrb	r3, [r3, #13]
 800fef2:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fef4:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fef6:	4b50      	ldr	r3, [pc, #320]	; (8010038 <evtMspReceive+0x9b8>)
 800fef8:	7b9b      	ldrb	r3, [r3, #14]
 800fefa:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fefc:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fefe:	4b4e      	ldr	r3, [pc, #312]	; (8010038 <evtMspReceive+0x9b8>)
 800ff00:	7c1b      	ldrb	r3, [r3, #16]
 800ff02:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800ff04:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff06:	4b4c      	ldr	r3, [pc, #304]	; (8010038 <evtMspReceive+0x9b8>)
 800ff08:	791b      	ldrb	r3, [r3, #4]
 800ff0a:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800ff0c:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff0e:	4b4a      	ldr	r3, [pc, #296]	; (8010038 <evtMspReceive+0x9b8>)
 800ff10:	7c5b      	ldrb	r3, [r3, #17]
 800ff12:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff14:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800ff16:	4b48      	ldr	r3, [pc, #288]	; (8010038 <evtMspReceive+0x9b8>)
 800ff18:	7c9b      	ldrb	r3, [r3, #18]
 800ff1a:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff1c:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800ff1e:	4b46      	ldr	r3, [pc, #280]	; (8010038 <evtMspReceive+0x9b8>)
 800ff20:	7cdb      	ldrb	r3, [r3, #19]
 800ff22:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800ff24:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff26:	4b44      	ldr	r3, [pc, #272]	; (8010038 <evtMspReceive+0x9b8>)
 800ff28:	7d1b      	ldrb	r3, [r3, #20]
 800ff2a:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800ff2c:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff2e:	4b42      	ldr	r3, [pc, #264]	; (8010038 <evtMspReceive+0x9b8>)
 800ff30:	7d5b      	ldrb	r3, [r3, #21]
 800ff32:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff34:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff36:	4b40      	ldr	r3, [pc, #256]	; (8010038 <evtMspReceive+0x9b8>)
 800ff38:	7d9b      	ldrb	r3, [r3, #22]
 800ff3a:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff3c:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff3e:	4b3e      	ldr	r3, [pc, #248]	; (8010038 <evtMspReceive+0x9b8>)
 800ff40:	7ddb      	ldrb	r3, [r3, #23]
 800ff42:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff44:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800ff46:	4a36      	ldr	r2, [pc, #216]	; (8010020 <evtMspReceive+0x9a0>)
 800ff48:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff4a:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800ff4c:	613b      	str	r3, [r7, #16]
        for (i = 0; i < numberBoxItems; i++) {
 800ff4e:	2300      	movs	r3, #0
 800ff50:	637b      	str	r3, [r7, #52]	; 0x34
 800ff52:	e018      	b.n	800ff86 <evtMspReceive+0x906>
            int flag = (tmp & (1 << availableBoxes[i]));
 800ff54:	4a39      	ldr	r2, [pc, #228]	; (801003c <evtMspReceive+0x9bc>)
 800ff56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff58:	4413      	add	r3, r2
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4093      	lsls	r3, r2
 800ff62:	461a      	mov	r2, r3
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	4013      	ands	r3, r2
 800ff68:	60fb      	str	r3, [r7, #12]
            if (flag)
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d007      	beq.n	800ff80 <evtMspReceive+0x900>
                junk |= 1 << i;
 800ff70:	2201      	movs	r2, #1
 800ff72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff74:	fa02 f303 	lsl.w	r3, r2, r3
 800ff78:	461a      	mov	r2, r3
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800ff80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff82:	3301      	adds	r3, #1
 800ff84:	637b      	str	r3, [r7, #52]	; 0x34
 800ff86:	4b2e      	ldr	r3, [pc, #184]	; (8010040 <evtMspReceive+0x9c0>)
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d3e0      	bcc.n	800ff54 <evtMspReceive+0x8d4>
        }
        _Serialize32(p_port, junk);
 800ff92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff94:	69b8      	ldr	r0, [r7, #24]
 800ff96:	f7ff f95a 	bl	800f24e <_Serialize32>
        _Serialize8(p_port, mcfg.current_profile);
 800ff9a:	4b22      	ldr	r3, [pc, #136]	; (8010024 <evtMspReceive+0x9a4>)
 800ff9c:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	69b8      	ldr	r0, [r7, #24]
 800ffa4:	f7ff f918 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11);
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ffae:	230b      	movs	r3, #11
 800ffb0:	6839      	ldr	r1, [r7, #0]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f007 fb9a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800ffb8:	f001 b95b 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (acc_1G > 1024) {
 800ffbc:	4b21      	ldr	r3, [pc, #132]	; (8010044 <evtMspReceive+0x9c4>)
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffc4:	d916      	bls.n	800fff4 <evtMspReceive+0x974>
            for (i = 0; i < 3; i++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	637b      	str	r3, [r7, #52]	; 0x34
 800ffca:	e00f      	b.n	800ffec <evtMspReceive+0x96c>
                _Serialize16(p_port, accSmooth[i] / 8);
 800ffcc:	4a1e      	ldr	r2, [pc, #120]	; (8010048 <evtMspReceive+0x9c8>)
 800ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	da00      	bge.n	800ffda <evtMspReceive+0x95a>
 800ffd8:	3307      	adds	r3, #7
 800ffda:	10db      	asrs	r3, r3, #3
 800ffdc:	b21b      	sxth	r3, r3
 800ffde:	4619      	mov	r1, r3
 800ffe0:	69b8      	ldr	r0, [r7, #24]
 800ffe2:	f7ff f911 	bl	800f208 <_Serialize16>
            for (i = 0; i < 3; i++)
 800ffe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe8:	3301      	adds	r3, #1
 800ffea:	637b      	str	r3, [r7, #52]	; 0x34
 800ffec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d9ec      	bls.n	800ffcc <evtMspReceive+0x94c>
 800fff2:	e010      	b.n	8010016 <evtMspReceive+0x996>
        } else {
            for (i = 0; i < 3; i++)
 800fff4:	2300      	movs	r3, #0
 800fff6:	637b      	str	r3, [r7, #52]	; 0x34
 800fff8:	e00a      	b.n	8010010 <evtMspReceive+0x990>
                _Serialize16(p_port, accSmooth[i]);
 800fffa:	4a13      	ldr	r2, [pc, #76]	; (8010048 <evtMspReceive+0x9c8>)
 800fffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010002:	4619      	mov	r1, r3
 8010004:	69b8      	ldr	r0, [r7, #24]
 8010006:	f7ff f8ff 	bl	800f208 <_Serialize16>
            for (i = 0; i < 3; i++)
 801000a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000c:	3301      	adds	r3, #1
 801000e:	637b      	str	r3, [r7, #52]	; 0x34
 8010010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010012:	2b02      	cmp	r3, #2
 8010014:	d9f1      	bls.n	800fffa <evtMspReceive+0x97a>
        }
        for (i = 0; i < 3; i++)
 8010016:	2300      	movs	r3, #0
 8010018:	637b      	str	r3, [r7, #52]	; 0x34
 801001a:	e022      	b.n	8010062 <evtMspReceive+0x9e2>
 801001c:	20001fd8 	.word	0x20001fd8
 8010020:	20002014 	.word	0x20002014
 8010024:	200019c8 	.word	0x200019c8
 8010028:	200021f0 	.word	0x200021f0
 801002c:	c000000c 	.word	0xc000000c
 8010030:	20000e80 	.word	0x20000e80
 8010034:	20002120 	.word	0x20002120
 8010038:	200020dc 	.word	0x200020dc
 801003c:	20001198 	.word	0x20001198
 8010040:	200011b1 	.word	0x200011b1
 8010044:	2000005a 	.word	0x2000005a
 8010048:	20001fa4 	.word	0x20001fa4
            _Serialize16(p_port, gyroData[i]);
 801004c:	4ab1      	ldr	r2, [pc, #708]	; (8010314 <evtMspReceive+0xc94>)
 801004e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010050:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010054:	4619      	mov	r1, r3
 8010056:	69b8      	ldr	r0, [r7, #24]
 8010058:	f7ff f8d6 	bl	800f208 <_Serialize16>
        for (i = 0; i < 3; i++)
 801005c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005e:	3301      	adds	r3, #1
 8010060:	637b      	str	r3, [r7, #52]	; 0x34
 8010062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010064:	2b02      	cmp	r3, #2
 8010066:	d9f1      	bls.n	801004c <evtMspReceive+0x9cc>
        for (i = 0; i < 3; i++)
 8010068:	2300      	movs	r3, #0
 801006a:	637b      	str	r3, [r7, #52]	; 0x34
 801006c:	e00a      	b.n	8010084 <evtMspReceive+0xa04>
            _Serialize16(p_port, magADC[i]);
 801006e:	4aaa      	ldr	r2, [pc, #680]	; (8010318 <evtMspReceive+0xc98>)
 8010070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010072:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010076:	4619      	mov	r1, r3
 8010078:	69b8      	ldr	r0, [r7, #24]
 801007a:	f7ff f8c5 	bl	800f208 <_Serialize16>
        for (i = 0; i < 3; i++)
 801007e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010080:	3301      	adds	r3, #1
 8010082:	637b      	str	r3, [r7, #52]	; 0x34
 8010084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010086:	2b02      	cmp	r3, #2
 8010088:	d9f1      	bls.n	801006e <evtMspReceive+0x9ee>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010090:	2312      	movs	r3, #18
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f007 fb29 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801009a:	f001 b8ea 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SERVO:
        _SerializeStruct(p_port, (uint8_t *)&servo, 16);
 801009e:	2210      	movs	r2, #16
 80100a0:	499e      	ldr	r1, [pc, #632]	; (801031c <evtMspReceive+0xc9c>)
 80100a2:	69b8      	ldr	r0, [r7, #24]
 80100a4:	f7ff f903 	bl	800f2ae <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80100ae:	2310      	movs	r3, #16
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f007 fb1a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80100b8:	f001 b8db 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 80100bc:	2300      	movs	r3, #0
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
 80100c0:	e049      	b.n	8010156 <evtMspReceive+0xad6>
            _Serialize16(p_port, cfg.servoConf[i].min);
 80100c2:	4997      	ldr	r1, [pc, #604]	; (8010320 <evtMspReceive+0xca0>)
 80100c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100c6:	4613      	mov	r3, r2
 80100c8:	009b      	lsls	r3, r3, #2
 80100ca:	4413      	add	r3, r2
 80100cc:	005b      	lsls	r3, r3, #1
 80100ce:	440b      	add	r3, r1
 80100d0:	33b8      	adds	r3, #184	; 0xb8
 80100d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100d6:	4619      	mov	r1, r3
 80100d8:	69b8      	ldr	r0, [r7, #24]
 80100da:	f7ff f895 	bl	800f208 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].max);
 80100de:	4990      	ldr	r1, [pc, #576]	; (8010320 <evtMspReceive+0xca0>)
 80100e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e2:	4613      	mov	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4413      	add	r3, r2
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	440b      	add	r3, r1
 80100ec:	33ba      	adds	r3, #186	; 0xba
 80100ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100f2:	4619      	mov	r1, r3
 80100f4:	69b8      	ldr	r0, [r7, #24]
 80100f6:	f7ff f887 	bl	800f208 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].middle);
 80100fa:	4989      	ldr	r1, [pc, #548]	; (8010320 <evtMspReceive+0xca0>)
 80100fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100fe:	4613      	mov	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	440b      	add	r3, r1
 8010108:	33bc      	adds	r3, #188	; 0xbc
 801010a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801010e:	4619      	mov	r1, r3
 8010110:	69b8      	ldr	r0, [r7, #24]
 8010112:	f7ff f879 	bl	800f208 <_Serialize16>
            _Serialize8(p_port, cfg.servoConf[i].rate);
 8010116:	4982      	ldr	r1, [pc, #520]	; (8010320 <evtMspReceive+0xca0>)
 8010118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801011a:	4613      	mov	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	440b      	add	r3, r1
 8010124:	33be      	adds	r3, #190	; 0xbe
 8010126:	f993 3000 	ldrsb.w	r3, [r3]
 801012a:	b2db      	uxtb	r3, r3
 801012c:	4619      	mov	r1, r3
 801012e:	69b8      	ldr	r0, [r7, #24]
 8010130:	f7ff f852 	bl	800f1d8 <_Serialize8>
            _Serialize16(p_port, cfg.servoConf[i].direction);
 8010134:	497a      	ldr	r1, [pc, #488]	; (8010320 <evtMspReceive+0xca0>)
 8010136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	440b      	add	r3, r1
 8010142:	33c0      	adds	r3, #192	; 0xc0
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	b21b      	sxth	r3, r3
 8010148:	4619      	mov	r1, r3
 801014a:	69b8      	ldr	r0, [r7, #24]
 801014c:	f7ff f85c 	bl	800f208 <_Serialize16>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010152:	3301      	adds	r3, #1
 8010154:	637b      	str	r3, [r7, #52]	; 0x34
 8010156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010158:	2b07      	cmp	r3, #7
 801015a:	d9b2      	bls.n	80100c2 <evtMspReceive+0xa42>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVOS * 9);
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010162:	2348      	movs	r3, #72	; 0x48
 8010164:	6839      	ldr	r1, [r7, #0]
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f007 fac0 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801016c:	f001 b881 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_SERVO_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010170:	2300      	movs	r3, #0
 8010172:	2200      	movs	r2, #0
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f007 fab8 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVOS; i++) {
 801017c:	2300      	movs	r3, #0
 801017e:	637b      	str	r3, [r7, #52]	; 0x34
 8010180:	e04d      	b.n	801021e <evtMspReceive+0xb9e>
            cfg.servoConf[i].min = _Read16(p_port);
 8010182:	69b8      	ldr	r0, [r7, #24]
 8010184:	f7fe ffe2 	bl	800f14c <_Read16>
 8010188:	4603      	mov	r3, r0
 801018a:	b218      	sxth	r0, r3
 801018c:	4964      	ldr	r1, [pc, #400]	; (8010320 <evtMspReceive+0xca0>)
 801018e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010190:	4613      	mov	r3, r2
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4413      	add	r3, r2
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	440b      	add	r3, r1
 801019a:	33b8      	adds	r3, #184	; 0xb8
 801019c:	4602      	mov	r2, r0
 801019e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = _Read16(p_port);
 80101a0:	69b8      	ldr	r0, [r7, #24]
 80101a2:	f7fe ffd3 	bl	800f14c <_Read16>
 80101a6:	4603      	mov	r3, r0
 80101a8:	b218      	sxth	r0, r3
 80101aa:	495d      	ldr	r1, [pc, #372]	; (8010320 <evtMspReceive+0xca0>)
 80101ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ae:	4613      	mov	r3, r2
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	440b      	add	r3, r1
 80101b8:	33ba      	adds	r3, #186	; 0xba
 80101ba:	4602      	mov	r2, r0
 80101bc:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = _Read16(p_port);
 80101be:	69b8      	ldr	r0, [r7, #24]
 80101c0:	f7fe ffc4 	bl	800f14c <_Read16>
 80101c4:	4603      	mov	r3, r0
 80101c6:	b218      	sxth	r0, r3
 80101c8:	4955      	ldr	r1, [pc, #340]	; (8010320 <evtMspReceive+0xca0>)
 80101ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101cc:	4613      	mov	r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4413      	add	r3, r2
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	440b      	add	r3, r1
 80101d6:	33bc      	adds	r3, #188	; 0xbc
 80101d8:	4602      	mov	r2, r0
 80101da:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = _Read8(p_port);
 80101dc:	69b8      	ldr	r0, [r7, #24]
 80101de:	f7fe ffa1 	bl	800f124 <_Read8>
 80101e2:	4603      	mov	r3, r0
 80101e4:	b258      	sxtb	r0, r3
 80101e6:	494e      	ldr	r1, [pc, #312]	; (8010320 <evtMspReceive+0xca0>)
 80101e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ea:	4613      	mov	r3, r2
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4413      	add	r3, r2
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	440b      	add	r3, r1
 80101f4:	33be      	adds	r3, #190	; 0xbe
 80101f6:	4602      	mov	r2, r0
 80101f8:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = _Read16(p_port);
 80101fa:	69b8      	ldr	r0, [r7, #24]
 80101fc:	f7fe ffa6 	bl	800f14c <_Read16>
 8010200:	4603      	mov	r3, r0
 8010202:	4618      	mov	r0, r3
 8010204:	4946      	ldr	r1, [pc, #280]	; (8010320 <evtMspReceive+0xca0>)
 8010206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010208:	4613      	mov	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	440b      	add	r3, r1
 8010212:	33c0      	adds	r3, #192	; 0xc0
 8010214:	4602      	mov	r2, r0
 8010216:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021a:	3301      	adds	r3, #1
 801021c:	637b      	str	r3, [r7, #52]	; 0x34
 801021e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010220:	2b07      	cmp	r3, #7
 8010222:	d9ae      	bls.n	8010182 <evtMspReceive+0xb02>
        }
        break;
 8010224:	f001 b825 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010228:	2300      	movs	r3, #0
 801022a:	637b      	str	r3, [r7, #52]	; 0x34
 801022c:	e05c      	b.n	80102e8 <evtMspReceive+0xc68>
            _Serialize8(p_port, mcfg.customServoMixer[i].targetChannel);
 801022e:	493d      	ldr	r1, [pc, #244]	; (8010324 <evtMspReceive+0xca4>)
 8010230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010232:	4613      	mov	r3, r2
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	440b      	add	r3, r1
 801023a:	33d0      	adds	r3, #208	; 0xd0
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	4619      	mov	r1, r3
 8010240:	69b8      	ldr	r0, [r7, #24]
 8010242:	f7fe ffc9 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].fromChannel);
 8010246:	4937      	ldr	r1, [pc, #220]	; (8010324 <evtMspReceive+0xca4>)
 8010248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801024a:	4613      	mov	r3, r2
 801024c:	00db      	lsls	r3, r3, #3
 801024e:	1a9b      	subs	r3, r3, r2
 8010250:	440b      	add	r3, r1
 8010252:	33d1      	adds	r3, #209	; 0xd1
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	4619      	mov	r1, r3
 8010258:	69b8      	ldr	r0, [r7, #24]
 801025a:	f7fe ffbd 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].rate);
 801025e:	4931      	ldr	r1, [pc, #196]	; (8010324 <evtMspReceive+0xca4>)
 8010260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010262:	4613      	mov	r3, r2
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	1a9b      	subs	r3, r3, r2
 8010268:	440b      	add	r3, r1
 801026a:	33d2      	adds	r3, #210	; 0xd2
 801026c:	f993 3000 	ldrsb.w	r3, [r3]
 8010270:	b2db      	uxtb	r3, r3
 8010272:	4619      	mov	r1, r3
 8010274:	69b8      	ldr	r0, [r7, #24]
 8010276:	f7fe ffaf 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].speed);
 801027a:	492a      	ldr	r1, [pc, #168]	; (8010324 <evtMspReceive+0xca4>)
 801027c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801027e:	4613      	mov	r3, r2
 8010280:	00db      	lsls	r3, r3, #3
 8010282:	1a9b      	subs	r3, r3, r2
 8010284:	440b      	add	r3, r1
 8010286:	33d3      	adds	r3, #211	; 0xd3
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	4619      	mov	r1, r3
 801028c:	69b8      	ldr	r0, [r7, #24]
 801028e:	f7fe ffa3 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].min);
 8010292:	4924      	ldr	r1, [pc, #144]	; (8010324 <evtMspReceive+0xca4>)
 8010294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010296:	4613      	mov	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	440b      	add	r3, r1
 801029e:	33d4      	adds	r3, #212	; 0xd4
 80102a0:	f993 3000 	ldrsb.w	r3, [r3]
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	4619      	mov	r1, r3
 80102a8:	69b8      	ldr	r0, [r7, #24]
 80102aa:	f7fe ff95 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].max);
 80102ae:	491d      	ldr	r1, [pc, #116]	; (8010324 <evtMspReceive+0xca4>)
 80102b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b2:	4613      	mov	r3, r2
 80102b4:	00db      	lsls	r3, r3, #3
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	440b      	add	r3, r1
 80102ba:	33d5      	adds	r3, #213	; 0xd5
 80102bc:	f993 3000 	ldrsb.w	r3, [r3]
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	4619      	mov	r1, r3
 80102c4:	69b8      	ldr	r0, [r7, #24]
 80102c6:	f7fe ff87 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].box);
 80102ca:	4916      	ldr	r1, [pc, #88]	; (8010324 <evtMspReceive+0xca4>)
 80102cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ce:	4613      	mov	r3, r2
 80102d0:	00db      	lsls	r3, r3, #3
 80102d2:	1a9b      	subs	r3, r3, r2
 80102d4:	440b      	add	r3, r1
 80102d6:	33d6      	adds	r3, #214	; 0xd6
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	4619      	mov	r1, r3
 80102dc:	69b8      	ldr	r0, [r7, #24]
 80102de:	f7fe ff7b 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80102e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e4:	3301      	adds	r3, #1
 80102e6:	637b      	str	r3, [r7, #52]	; 0x34
 80102e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ea:	2b0f      	cmp	r3, #15
 80102ec:	d99f      	bls.n	801022e <evtMspReceive+0xbae>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVO_RULES * sizeof(servoMixer_t));
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80102f4:	2370      	movs	r3, #112	; 0x70
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f007 f9f7 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80102fe:	f000 bfb8 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_SERVOMIX_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010302:	2300      	movs	r3, #0
 8010304:	2200      	movs	r2, #0
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f007 f9ef 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801030e:	2300      	movs	r3, #0
 8010310:	637b      	str	r3, [r7, #52]	; 0x34
 8010312:	e06e      	b.n	80103f2 <evtMspReceive+0xd72>
 8010314:	20000cc8 	.word	0x20000cc8
 8010318:	20001f98 	.word	0x20001f98
 801031c:	20000040 	.word	0x20000040
 8010320:	20001890 	.word	0x20001890
 8010324:	200019c8 	.word	0x200019c8
            mcfg.customServoMixer[i].targetChannel = _Read8(p_port);
 8010328:	69b8      	ldr	r0, [r7, #24]
 801032a:	f7fe fefb 	bl	800f124 <_Read8>
 801032e:	4603      	mov	r3, r0
 8010330:	4618      	mov	r0, r3
 8010332:	49b2      	ldr	r1, [pc, #712]	; (80105fc <evtMspReceive+0xf7c>)
 8010334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010336:	4613      	mov	r3, r2
 8010338:	00db      	lsls	r3, r3, #3
 801033a:	1a9b      	subs	r3, r3, r2
 801033c:	440b      	add	r3, r1
 801033e:	33d0      	adds	r3, #208	; 0xd0
 8010340:	4602      	mov	r2, r0
 8010342:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = _Read8(p_port);
 8010344:	69b8      	ldr	r0, [r7, #24]
 8010346:	f7fe feed 	bl	800f124 <_Read8>
 801034a:	4603      	mov	r3, r0
 801034c:	4618      	mov	r0, r3
 801034e:	49ab      	ldr	r1, [pc, #684]	; (80105fc <evtMspReceive+0xf7c>)
 8010350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010352:	4613      	mov	r3, r2
 8010354:	00db      	lsls	r3, r3, #3
 8010356:	1a9b      	subs	r3, r3, r2
 8010358:	440b      	add	r3, r1
 801035a:	33d1      	adds	r3, #209	; 0xd1
 801035c:	4602      	mov	r2, r0
 801035e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = _Read8(p_port);
 8010360:	69b8      	ldr	r0, [r7, #24]
 8010362:	f7fe fedf 	bl	800f124 <_Read8>
 8010366:	4603      	mov	r3, r0
 8010368:	b258      	sxtb	r0, r3
 801036a:	49a4      	ldr	r1, [pc, #656]	; (80105fc <evtMspReceive+0xf7c>)
 801036c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801036e:	4613      	mov	r3, r2
 8010370:	00db      	lsls	r3, r3, #3
 8010372:	1a9b      	subs	r3, r3, r2
 8010374:	440b      	add	r3, r1
 8010376:	33d2      	adds	r3, #210	; 0xd2
 8010378:	4602      	mov	r2, r0
 801037a:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = _Read8(p_port);
 801037c:	69b8      	ldr	r0, [r7, #24]
 801037e:	f7fe fed1 	bl	800f124 <_Read8>
 8010382:	4603      	mov	r3, r0
 8010384:	4618      	mov	r0, r3
 8010386:	499d      	ldr	r1, [pc, #628]	; (80105fc <evtMspReceive+0xf7c>)
 8010388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801038a:	4613      	mov	r3, r2
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	440b      	add	r3, r1
 8010392:	33d3      	adds	r3, #211	; 0xd3
 8010394:	4602      	mov	r2, r0
 8010396:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = _Read8(p_port);
 8010398:	69b8      	ldr	r0, [r7, #24]
 801039a:	f7fe fec3 	bl	800f124 <_Read8>
 801039e:	4603      	mov	r3, r0
 80103a0:	b258      	sxtb	r0, r3
 80103a2:	4996      	ldr	r1, [pc, #600]	; (80105fc <evtMspReceive+0xf7c>)
 80103a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	1a9b      	subs	r3, r3, r2
 80103ac:	440b      	add	r3, r1
 80103ae:	33d4      	adds	r3, #212	; 0xd4
 80103b0:	4602      	mov	r2, r0
 80103b2:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = _Read8(p_port);
 80103b4:	69b8      	ldr	r0, [r7, #24]
 80103b6:	f7fe feb5 	bl	800f124 <_Read8>
 80103ba:	4603      	mov	r3, r0
 80103bc:	b258      	sxtb	r0, r3
 80103be:	498f      	ldr	r1, [pc, #572]	; (80105fc <evtMspReceive+0xf7c>)
 80103c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c2:	4613      	mov	r3, r2
 80103c4:	00db      	lsls	r3, r3, #3
 80103c6:	1a9b      	subs	r3, r3, r2
 80103c8:	440b      	add	r3, r1
 80103ca:	33d5      	adds	r3, #213	; 0xd5
 80103cc:	4602      	mov	r2, r0
 80103ce:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = _Read8(p_port);
 80103d0:	69b8      	ldr	r0, [r7, #24]
 80103d2:	f7fe fea7 	bl	800f124 <_Read8>
 80103d6:	4603      	mov	r3, r0
 80103d8:	4618      	mov	r0, r3
 80103da:	4988      	ldr	r1, [pc, #544]	; (80105fc <evtMspReceive+0xf7c>)
 80103dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103de:	4613      	mov	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	1a9b      	subs	r3, r3, r2
 80103e4:	440b      	add	r3, r1
 80103e6:	33d6      	adds	r3, #214	; 0xd6
 80103e8:	4602      	mov	r2, r0
 80103ea:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80103ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ee:	3301      	adds	r3, #1
 80103f0:	637b      	str	r3, [r7, #52]	; 0x34
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	2b0f      	cmp	r3, #15
 80103f6:	d997      	bls.n	8010328 <evtMspReceive+0xca8>
        }
        loadCustomServoMixer();
 80103f8:	f7fa fc88 	bl	800ad0c <loadCustomServoMixer>
        break;
 80103fc:	f000 bf39 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_FW_CONFIG:
        _Serialize8(p_port, mcfg.fw_althold_dir);
 8010400:	4b7e      	ldr	r3, [pc, #504]	; (80105fc <evtMspReceive+0xf7c>)
 8010402:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010406:	b2db      	uxtb	r3, r3
 8010408:	4619      	mov	r1, r3
 801040a:	69b8      	ldr	r0, [r7, #24]
 801040c:	f7fe fee4 	bl	800f1d8 <_Serialize8>
        // _Serialize8(p_port, cfg.fw_vector_thrust); // Future Gui setting?
        _Serialize16(p_port, cfg.fw_gps_maxcorr);
 8010410:	4b7b      	ldr	r3, [pc, #492]	; (8010600 <evtMspReceive+0xf80>)
 8010412:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010416:	4619      	mov	r1, r3
 8010418:	69b8      	ldr	r0, [r7, #24]
 801041a:	f7fe fef5 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_rudder);
 801041e:	4b78      	ldr	r3, [pc, #480]	; (8010600 <evtMspReceive+0xf80>)
 8010420:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010424:	4619      	mov	r1, r3
 8010426:	69b8      	ldr	r0, [r7, #24]
 8010428:	f7fe feee 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxclimb);
 801042c:	4b74      	ldr	r3, [pc, #464]	; (8010600 <evtMspReceive+0xf80>)
 801042e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010432:	4619      	mov	r1, r3
 8010434:	69b8      	ldr	r0, [r7, #24]
 8010436:	f7fe fee7 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxdive);
 801043a:	4b71      	ldr	r3, [pc, #452]	; (8010600 <evtMspReceive+0xf80>)
 801043c:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8010440:	4619      	mov	r1, r3
 8010442:	69b8      	ldr	r0, [r7, #24]
 8010444:	f7fe fee0 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_climb_throttle);
 8010448:	4b6d      	ldr	r3, [pc, #436]	; (8010600 <evtMspReceive+0xf80>)
 801044a:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801044e:	b21b      	sxth	r3, r3
 8010450:	4619      	mov	r1, r3
 8010452:	69b8      	ldr	r0, [r7, #24]
 8010454:	f7fe fed8 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_cruise_throttle);
 8010458:	4b69      	ldr	r3, [pc, #420]	; (8010600 <evtMspReceive+0xf80>)
 801045a:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 801045e:	b21b      	sxth	r3, r3
 8010460:	4619      	mov	r1, r3
 8010462:	69b8      	ldr	r0, [r7, #24]
 8010464:	f7fe fed0 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_idle_throttle);
 8010468:	4b65      	ldr	r3, [pc, #404]	; (8010600 <evtMspReceive+0xf80>)
 801046a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 801046e:	b21b      	sxth	r3, r3
 8010470:	4619      	mov	r1, r3
 8010472:	69b8      	ldr	r0, [r7, #24]
 8010474:	f7fe fec8 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.fw_scaler_throttle);
 8010478:	4b61      	ldr	r3, [pc, #388]	; (8010600 <evtMspReceive+0xf80>)
 801047a:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 801047e:	b21b      	sxth	r3, r3
 8010480:	4619      	mov	r1, r3
 8010482:	69b8      	ldr	r0, [r7, #24]
 8010484:	f7fe fec0 	bl	800f208 <_Serialize16>
        _Serialize32(p_port, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 8010488:	4b5d      	ldr	r3, [pc, #372]	; (8010600 <evtMspReceive+0xf80>)
 801048a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 801048e:	4619      	mov	r1, r3
 8010490:	69b8      	ldr	r0, [r7, #24]
 8010492:	f7fe fedc 	bl	800f24e <_Serialize32>
        _Serialize8(p_port, cfg.fw_rth_alt);
 8010496:	4b5a      	ldr	r3, [pc, #360]	; (8010600 <evtMspReceive+0xf80>)
 8010498:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801049c:	4619      	mov	r1, r3
 801049e:	69b8      	ldr	r0, [r7, #24]
 80104a0:	f7fe fe9a 	bl	800f1d8 <_Serialize8>
        // next added for future use
        _Serialize32(p_port, 0);
 80104a4:	2100      	movs	r1, #0
 80104a6:	69b8      	ldr	r0, [r7, #24]
 80104a8:	f7fe fed1 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, 0);
 80104ac:	2100      	movs	r1, #0
 80104ae:	69b8      	ldr	r0, [r7, #24]
 80104b0:	f7fe fecd 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, 0);
 80104b4:	2100      	movs	r1, #0
 80104b6:	69b8      	ldr	r0, [r7, #24]
 80104b8:	f7fe fec9 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, 0);
 80104bc:	2100      	movs	r1, #0
 80104be:	69b8      	ldr	r0, [r7, #24]
 80104c0:	f7fe fec5 	bl	800f24e <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 38);
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80104ca:	2326      	movs	r3, #38	; 0x26
 80104cc:	6839      	ldr	r1, [r7, #0]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f007 f90c 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80104d4:	f000 becd 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_FW_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80104d8:	2300      	movs	r3, #0
 80104da:	2200      	movs	r2, #0
 80104dc:	6839      	ldr	r1, [r7, #0]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f007 f904 	bl	80176ec <pifMsp_MakeAnswer>
        mcfg.fw_althold_dir = _Read8(p_port);
 80104e4:	69b8      	ldr	r0, [r7, #24]
 80104e6:	f7fe fe1d 	bl	800f124 <_Read8>
 80104ea:	4603      	mov	r3, r0
 80104ec:	b25a      	sxtb	r2, r3
 80104ee:	4b43      	ldr	r3, [pc, #268]	; (80105fc <evtMspReceive+0xf7c>)
 80104f0:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = _Read8(p_port); // Future Gui setting?
        cfg.fw_gps_maxcorr = _Read16(p_port);
 80104f4:	69b8      	ldr	r0, [r7, #24]
 80104f6:	f7fe fe29 	bl	800f14c <_Read16>
 80104fa:	4603      	mov	r3, r0
 80104fc:	b21a      	sxth	r2, r3
 80104fe:	4b40      	ldr	r3, [pc, #256]	; (8010600 <evtMspReceive+0xf80>)
 8010500:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = _Read16(p_port);
 8010504:	69b8      	ldr	r0, [r7, #24]
 8010506:	f7fe fe21 	bl	800f14c <_Read16>
 801050a:	4603      	mov	r3, r0
 801050c:	b21a      	sxth	r2, r3
 801050e:	4b3c      	ldr	r3, [pc, #240]	; (8010600 <evtMspReceive+0xf80>)
 8010510:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = _Read16(p_port);
 8010514:	69b8      	ldr	r0, [r7, #24]
 8010516:	f7fe fe19 	bl	800f14c <_Read16>
 801051a:	4603      	mov	r3, r0
 801051c:	b21a      	sxth	r2, r3
 801051e:	4b38      	ldr	r3, [pc, #224]	; (8010600 <evtMspReceive+0xf80>)
 8010520:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = _Read16(p_port);
 8010524:	69b8      	ldr	r0, [r7, #24]
 8010526:	f7fe fe11 	bl	800f14c <_Read16>
 801052a:	4603      	mov	r3, r0
 801052c:	b21a      	sxth	r2, r3
 801052e:	4b34      	ldr	r3, [pc, #208]	; (8010600 <evtMspReceive+0xf80>)
 8010530:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = _Read16(p_port);
 8010534:	69b8      	ldr	r0, [r7, #24]
 8010536:	f7fe fe09 	bl	800f14c <_Read16>
 801053a:	4603      	mov	r3, r0
 801053c:	461a      	mov	r2, r3
 801053e:	4b30      	ldr	r3, [pc, #192]	; (8010600 <evtMspReceive+0xf80>)
 8010540:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = _Read16(p_port);
 8010544:	69b8      	ldr	r0, [r7, #24]
 8010546:	f7fe fe01 	bl	800f14c <_Read16>
 801054a:	4603      	mov	r3, r0
 801054c:	461a      	mov	r2, r3
 801054e:	4b2c      	ldr	r3, [pc, #176]	; (8010600 <evtMspReceive+0xf80>)
 8010550:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = _Read16(p_port);
 8010554:	69b8      	ldr	r0, [r7, #24]
 8010556:	f7fe fdf9 	bl	800f14c <_Read16>
 801055a:	4603      	mov	r3, r0
 801055c:	461a      	mov	r2, r3
 801055e:	4b28      	ldr	r3, [pc, #160]	; (8010600 <evtMspReceive+0xf80>)
 8010560:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = _Read16(p_port);
 8010564:	69b8      	ldr	r0, [r7, #24]
 8010566:	f7fe fdf1 	bl	800f14c <_Read16>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	4b24      	ldr	r3, [pc, #144]	; (8010600 <evtMspReceive+0xf80>)
 8010570:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = _Read32(p_port);// Wrong when using float in MSP!... Change to _Read8
        _Read32(p_port); // Just read and skip
 8010574:	69b8      	ldr	r0, [r7, #24]
 8010576:	f7fe fe06 	bl	800f186 <_Read32>
        cfg.fw_rth_alt = _Read8(p_port);
 801057a:	69b8      	ldr	r0, [r7, #24]
 801057c:	f7fe fdd2 	bl	800f124 <_Read8>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	4b1e      	ldr	r3, [pc, #120]	; (8010600 <evtMspReceive+0xf80>)
 8010586:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        _Read32(p_port);
 801058a:	69b8      	ldr	r0, [r7, #24]
 801058c:	f7fe fdfb 	bl	800f186 <_Read32>
        _Read32(p_port);
 8010590:	69b8      	ldr	r0, [r7, #24]
 8010592:	f7fe fdf8 	bl	800f186 <_Read32>
        _Read32(p_port);
 8010596:	69b8      	ldr	r0, [r7, #24]
 8010598:	f7fe fdf5 	bl	800f186 <_Read32>
        _Read32(p_port);
 801059c:	69b8      	ldr	r0, [r7, #24]
 801059e:	f7fe fdf2 	bl	800f186 <_Read32>
        break;
 80105a2:	f000 be66 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_MOTOR:
        _SerializeStruct(p_port, (uint8_t *)&motor, 16);
 80105a6:	2210      	movs	r2, #16
 80105a8:	4916      	ldr	r1, [pc, #88]	; (8010604 <evtMspReceive+0xf84>)
 80105aa:	69b8      	ldr	r0, [r7, #24]
 80105ac:	f7fe fe7f 	bl	800f2ae <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80105b6:	2310      	movs	r3, #16
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f007 f896 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80105c0:	f000 be57 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80105c4:	2300      	movs	r3, #0
 80105c6:	637b      	str	r3, [r7, #52]	; 0x34
 80105c8:	e00a      	b.n	80105e0 <evtMspReceive+0xf60>
            _Serialize16(p_port, rcData[i]);
 80105ca:	4a0f      	ldr	r2, [pc, #60]	; (8010608 <evtMspReceive+0xf88>)
 80105cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80105d2:	4619      	mov	r1, r3
 80105d4:	69b8      	ldr	r0, [r7, #24]
 80105d6:	f7fe fe17 	bl	800f208 <_Serialize16>
        for (i = 0; i < 8; i++)
 80105da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105dc:	3301      	adds	r3, #1
 80105de:	637b      	str	r3, [r7, #52]	; 0x34
 80105e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e2:	2b07      	cmp	r3, #7
 80105e4:	d9f1      	bls.n	80105ca <evtMspReceive+0xf4a>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80105ec:	2310      	movs	r3, #16
 80105ee:	6839      	ldr	r1, [r7, #0]
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f007 f87b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80105f6:	f000 be3c 	b.w	8011272 <evtMspReceive+0x1bf2>
 80105fa:	bf00      	nop
 80105fc:	200019c8 	.word	0x200019c8
 8010600:	20001890 	.word	0x20001890
 8010604:	20001fc0 	.word	0x20001fc0
 8010608:	20002184 	.word	0x20002184

    case MSP_RAW_GPS:
        _Serialize8(p_port, f.GPS_FIX);
 801060c:	4bb5      	ldr	r3, [pc, #724]	; (80108e4 <evtMspReceive+0x1264>)
 801060e:	7adb      	ldrb	r3, [r3, #11]
 8010610:	4619      	mov	r1, r3
 8010612:	69b8      	ldr	r0, [r7, #24]
 8010614:	f7fe fde0 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, GPS_numSat);
 8010618:	4bb3      	ldr	r3, [pc, #716]	; (80108e8 <evtMspReceive+0x1268>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	4619      	mov	r1, r3
 801061e:	69b8      	ldr	r0, [r7, #24]
 8010620:	f7fe fdda 	bl	800f1d8 <_Serialize8>
        _Serialize32(p_port, GPS_coord[LAT]);
 8010624:	4bb1      	ldr	r3, [pc, #708]	; (80108ec <evtMspReceive+0x126c>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4619      	mov	r1, r3
 801062a:	69b8      	ldr	r0, [r7, #24]
 801062c:	f7fe fe0f 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, GPS_coord[LON]);
 8010630:	4bae      	ldr	r3, [pc, #696]	; (80108ec <evtMspReceive+0x126c>)
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	4619      	mov	r1, r3
 8010636:	69b8      	ldr	r0, [r7, #24]
 8010638:	f7fe fe09 	bl	800f24e <_Serialize32>
        _Serialize16(p_port, GPS_altitude);
 801063c:	4bac      	ldr	r3, [pc, #688]	; (80108f0 <evtMspReceive+0x1270>)
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	b21b      	sxth	r3, r3
 8010642:	4619      	mov	r1, r3
 8010644:	69b8      	ldr	r0, [r7, #24]
 8010646:	f7fe fddf 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, GPS_speed);
 801064a:	4baa      	ldr	r3, [pc, #680]	; (80108f4 <evtMspReceive+0x1274>)
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	b21b      	sxth	r3, r3
 8010650:	4619      	mov	r1, r3
 8010652:	69b8      	ldr	r0, [r7, #24]
 8010654:	f7fe fdd8 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, GPS_ground_course);
 8010658:	4ba7      	ldr	r3, [pc, #668]	; (80108f8 <evtMspReceive+0x1278>)
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	b21b      	sxth	r3, r3
 801065e:	4619      	mov	r1, r3
 8010660:	69b8      	ldr	r0, [r7, #24]
 8010662:	f7fe fdd1 	bl	800f208 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801066c:	2310      	movs	r3, #16
 801066e:	6839      	ldr	r1, [r7, #0]
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f007 f83b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010676:	f000 bdfc 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_COMP_GPS:
        _Serialize16(p_port, GPS_distanceToHome);
 801067a:	4ba0      	ldr	r3, [pc, #640]	; (80108fc <evtMspReceive+0x127c>)
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	b21b      	sxth	r3, r3
 8010680:	4619      	mov	r1, r3
 8010682:	69b8      	ldr	r0, [r7, #24]
 8010684:	f7fe fdc0 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, GPS_directionToHome);
 8010688:	4b9d      	ldr	r3, [pc, #628]	; (8010900 <evtMspReceive+0x1280>)
 801068a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801068e:	4619      	mov	r1, r3
 8010690:	69b8      	ldr	r0, [r7, #24]
 8010692:	f7fe fdb9 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, GPS_update & 1);
 8010696:	4b9b      	ldr	r3, [pc, #620]	; (8010904 <evtMspReceive+0x1284>)
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	4619      	mov	r1, r3
 80106a2:	69b8      	ldr	r0, [r7, #24]
 80106a4:	f7fe fd98 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 5);
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80106ae:	2305      	movs	r3, #5
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f007 f81a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80106b8:	f000 bddb 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80106bc:	2300      	movs	r3, #0
 80106be:	637b      	str	r3, [r7, #52]	; 0x34
 80106c0:	e00a      	b.n	80106d8 <evtMspReceive+0x1058>
            _Serialize16(p_port, angle[i]);
 80106c2:	4a91      	ldr	r2, [pc, #580]	; (8010908 <evtMspReceive+0x1288>)
 80106c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80106ca:	4619      	mov	r1, r3
 80106cc:	69b8      	ldr	r0, [r7, #24]
 80106ce:	f7fe fd9b 	bl	800f208 <_Serialize16>
        for (i = 0; i < 2; i++)
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	3301      	adds	r3, #1
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
 80106d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d9f1      	bls.n	80106c2 <evtMspReceive+0x1042>
        _Serialize16(p_port, heading);
 80106de:	4b8b      	ldr	r3, [pc, #556]	; (801090c <evtMspReceive+0x128c>)
 80106e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106e4:	4619      	mov	r1, r3
 80106e6:	69b8      	ldr	r0, [r7, #24]
 80106e8:	f7fe fd8e 	bl	800f208 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80106f2:	2306      	movs	r3, #6
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f006 fff8 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80106fc:	f000 bdb9 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_ALTITUDE:
        _Serialize32(p_port, EstAlt);
 8010700:	4b83      	ldr	r3, [pc, #524]	; (8010910 <evtMspReceive+0x1290>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4619      	mov	r1, r3
 8010706:	69b8      	ldr	r0, [r7, #24]
 8010708:	f7fe fda1 	bl	800f24e <_Serialize32>
        _Serialize16(p_port, vario);
 801070c:	4b81      	ldr	r3, [pc, #516]	; (8010914 <evtMspReceive+0x1294>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	b21b      	sxth	r3, r3
 8010712:	4619      	mov	r1, r3
 8010714:	69b8      	ldr	r0, [r7, #24]
 8010716:	f7fe fd77 	bl	800f208 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010720:	2306      	movs	r3, #6
 8010722:	6839      	ldr	r1, [r7, #0]
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f006 ffe1 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801072a:	f000 bda2 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_ANALOG:
        _Serialize8(p_port, (uint8_t)constrain((int16_t)vbat, 0, 255));
 801072e:	4b7a      	ldr	r3, [pc, #488]	; (8010918 <evtMspReceive+0x1298>)
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	b21b      	sxth	r3, r3
 8010734:	22ff      	movs	r2, #255	; 0xff
 8010736:	2100      	movs	r1, #0
 8010738:	4618      	mov	r0, r3
 801073a:	f7f3 fad1 	bl	8003ce0 <constrain>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	4619      	mov	r1, r3
 8010744:	69b8      	ldr	r0, [r7, #24]
 8010746:	f7fe fd47 	bl	800f1d8 <_Serialize8>
        _Serialize16(p_port, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 801074a:	4b74      	ldr	r3, [pc, #464]	; (801091c <evtMspReceive+0x129c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010752:	2100      	movs	r1, #0
 8010754:	4618      	mov	r0, r3
 8010756:	f7f3 fac3 	bl	8003ce0 <constrain>
 801075a:	4603      	mov	r3, r0
 801075c:	b21b      	sxth	r3, r3
 801075e:	4619      	mov	r1, r3
 8010760:	69b8      	ldr	r0, [r7, #24]
 8010762:	f7fe fd51 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, rssi);
 8010766:	4b6e      	ldr	r3, [pc, #440]	; (8010920 <evtMspReceive+0x12a0>)
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	b21b      	sxth	r3, r3
 801076c:	4619      	mov	r1, r3
 801076e:	69b8      	ldr	r0, [r7, #24]
 8010770:	f7fe fd4a 	bl	800f208 <_Serialize16>
        if (mcfg.multiwiicurrentoutput)
 8010774:	4b6b      	ldr	r3, [pc, #428]	; (8010924 <evtMspReceive+0x12a4>)
 8010776:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d016      	beq.n	80107ac <evtMspReceive+0x112c>
            _Serialize16(p_port, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 801077e:	4b6a      	ldr	r3, [pc, #424]	; (8010928 <evtMspReceive+0x12a8>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010786:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801078a:	4613      	mov	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	4413      	add	r3, r2
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010796:	2100      	movs	r1, #0
 8010798:	4618      	mov	r0, r3
 801079a:	f7f3 faa1 	bl	8003ce0 <constrain>
 801079e:	4603      	mov	r3, r0
 80107a0:	b21b      	sxth	r3, r3
 80107a2:	4619      	mov	r1, r3
 80107a4:	69b8      	ldr	r0, [r7, #24]
 80107a6:	f7fe fd2f 	bl	800f208 <_Serialize16>
 80107aa:	e010      	b.n	80107ce <evtMspReceive+0x114e>
        else
            _Serialize16(p_port, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 80107ac:	4b5e      	ldr	r3, [pc, #376]	; (8010928 <evtMspReceive+0x12a8>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	bfb8      	it	lt
 80107b4:	425b      	neglt	r3, r3
 80107b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107ba:	2100      	movs	r1, #0
 80107bc:	4618      	mov	r0, r3
 80107be:	f7f3 fa8f 	bl	8003ce0 <constrain>
 80107c2:	4603      	mov	r3, r0
 80107c4:	b21b      	sxth	r3, r3
 80107c6:	4619      	mov	r1, r3
 80107c8:	69b8      	ldr	r0, [r7, #24]
 80107ca:	f7fe fd1d 	bl	800f208 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107d4:	2307      	movs	r3, #7
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f006 ff87 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80107de:	f000 bd48 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_RC_TUNING:
        _Serialize8(p_port, cfg.rcRate8);
 80107e2:	4b52      	ldr	r3, [pc, #328]	; (801092c <evtMspReceive+0x12ac>)
 80107e4:	7fdb      	ldrb	r3, [r3, #31]
 80107e6:	4619      	mov	r1, r3
 80107e8:	69b8      	ldr	r0, [r7, #24]
 80107ea:	f7fe fcf5 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.rcExpo8);
 80107ee:	4b4f      	ldr	r3, [pc, #316]	; (801092c <evtMspReceive+0x12ac>)
 80107f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107f4:	4619      	mov	r1, r3
 80107f6:	69b8      	ldr	r0, [r7, #24]
 80107f8:	f7fe fcee 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[0]); // here for legacy support
 80107fc:	4b4b      	ldr	r3, [pc, #300]	; (801092c <evtMspReceive+0x12ac>)
 80107fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010802:	4619      	mov	r1, r3
 8010804:	69b8      	ldr	r0, [r7, #24]
 8010806:	f7fe fce7 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.yawRate);
 801080a:	4b48      	ldr	r3, [pc, #288]	; (801092c <evtMspReceive+0x12ac>)
 801080c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010810:	4619      	mov	r1, r3
 8010812:	69b8      	ldr	r0, [r7, #24]
 8010814:	f7fe fce0 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.dynThrPID);
 8010818:	4b44      	ldr	r3, [pc, #272]	; (801092c <evtMspReceive+0x12ac>)
 801081a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801081e:	4619      	mov	r1, r3
 8010820:	69b8      	ldr	r0, [r7, #24]
 8010822:	f7fe fcd9 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.thrMid8);
 8010826:	4b41      	ldr	r3, [pc, #260]	; (801092c <evtMspReceive+0x12ac>)
 8010828:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801082c:	4619      	mov	r1, r3
 801082e:	69b8      	ldr	r0, [r7, #24]
 8010830:	f7fe fcd2 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.thrExpo8);
 8010834:	4b3d      	ldr	r3, [pc, #244]	; (801092c <evtMspReceive+0x12ac>)
 8010836:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801083a:	4619      	mov	r1, r3
 801083c:	69b8      	ldr	r0, [r7, #24]
 801083e:	f7fe fccb 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010848:	2307      	movs	r3, #7
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f006 ff4d 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010852:	f000 bd0e 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010856:	2300      	movs	r3, #0
 8010858:	637b      	str	r3, [r7, #52]	; 0x34
 801085a:	e036      	b.n	80108ca <evtMspReceive+0x124a>
            _Serialize8(p_port, cfg.P8[i]);
 801085c:	4a33      	ldr	r2, [pc, #204]	; (801092c <evtMspReceive+0x12ac>)
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010860:	4413      	add	r3, r2
 8010862:	3301      	adds	r3, #1
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	4619      	mov	r1, r3
 8010868:	69b8      	ldr	r0, [r7, #24]
 801086a:	f7fe fcb5 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, cfg.I8[i]);
 801086e:	4a2f      	ldr	r2, [pc, #188]	; (801092c <evtMspReceive+0x12ac>)
 8010870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010872:	4413      	add	r3, r2
 8010874:	330b      	adds	r3, #11
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	4619      	mov	r1, r3
 801087a:	69b8      	ldr	r0, [r7, #24]
 801087c:	f7fe fcac 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, cfg.D8[i]);
 8010880:	4a2a      	ldr	r2, [pc, #168]	; (801092c <evtMspReceive+0x12ac>)
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	4413      	add	r3, r2
 8010886:	3315      	adds	r3, #21
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	4619      	mov	r1, r3
 801088c:	69b8      	ldr	r0, [r7, #24]
 801088e:	f7fe fca3 	bl	800f1d8 <_Serialize8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 8010892:	4a26      	ldr	r2, [pc, #152]	; (801092c <evtMspReceive+0x12ac>)
 8010894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010896:	4413      	add	r3, r2
 8010898:	3301      	adds	r3, #1
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	4618      	mov	r0, r3
 801089e:	4a23      	ldr	r2, [pc, #140]	; (801092c <evtMspReceive+0x12ac>)
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	4413      	add	r3, r2
 80108a4:	330b      	adds	r3, #11
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	4619      	mov	r1, r3
 80108aa:	4a20      	ldr	r2, [pc, #128]	; (801092c <evtMspReceive+0x12ac>)
 80108ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ae:	4413      	add	r3, r2
 80108b0:	3315      	adds	r3, #21
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	9100      	str	r1, [sp, #0]
 80108b8:	4603      	mov	r3, r0
 80108ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108bc:	491c      	ldr	r1, [pc, #112]	; (8010930 <evtMspReceive+0x12b0>)
 80108be:	2002      	movs	r0, #2
 80108c0:	f002 fe64 	bl	801358c <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 80108c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c6:	3301      	adds	r3, #1
 80108c8:	637b      	str	r3, [r7, #52]	; 0x34
 80108ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108cc:	2b09      	cmp	r3, #9
 80108ce:	d9c5      	bls.n	801085c <evtMspReceive+0x11dc>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 3 * PIDITEMS);
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80108d6:	231e      	movs	r3, #30
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f006 ff06 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80108e0:	f000 bcc7 	b.w	8011272 <evtMspReceive+0x1bf2>
 80108e4:	20002014 	.word	0x20002014
 80108e8:	20002176 	.word	0x20002176
 80108ec:	20002118 	.word	0x20002118
 80108f0:	2000202a 	.word	0x2000202a
 80108f4:	20002050 	.word	0x20002050
 80108f8:	20000e96 	.word	0x20000e96
 80108fc:	200020ca 	.word	0x200020ca
 8010900:	200020d8 	.word	0x200020d8
 8010904:	20000e8c 	.word	0x20000e8c
 8010908:	20000cd8 	.word	0x20000cd8
 801090c:	20002270 	.word	0x20002270
 8010910:	20001f94 	.word	0x20001f94
 8010914:	20000cc0 	.word	0x20000cc0
 8010918:	200020b8 	.word	0x200020b8
 801091c:	2000202c 	.word	0x2000202c
 8010920:	20002174 	.word	0x20002174
 8010924:	200019c8 	.word	0x200019c8
 8010928:	20002178 	.word	0x20002178
 801092c:	20001890 	.word	0x20001890
 8010930:	08026238 	.word	0x08026238

    case MSP_PIDNAMES:
        _SerializeNames(p_port, pidnames);
 8010934:	4998      	ldr	r1, [pc, #608]	; (8010b98 <evtMspReceive+0x1518>)
 8010936:	69b8      	ldr	r0, [r7, #24]
 8010938:	f7fe fcd9 	bl	800f2ee <_SerializeNames>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, sizeof(pidnames) - 1);
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010942:	232f      	movs	r3, #47	; 0x2f
 8010944:	6839      	ldr	r1, [r7, #0]
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f006 fed0 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801094c:	f000 bc91 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010950:	2300      	movs	r3, #0
 8010952:	637b      	str	r3, [r7, #52]	; 0x34
 8010954:	e010      	b.n	8010978 <evtMspReceive+0x12f8>
            _Serialize16(p_port, cfg.activate[availableBoxes[i]]);
 8010956:	4a91      	ldr	r2, [pc, #580]	; (8010b9c <evtMspReceive+0x151c>)
 8010958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095a:	4413      	add	r3, r2
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	4a90      	ldr	r2, [pc, #576]	; (8010ba0 <evtMspReceive+0x1520>)
 8010960:	3312      	adds	r3, #18
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	b21b      	sxth	r3, r3
 801096a:	4619      	mov	r1, r3
 801096c:	69b8      	ldr	r0, [r7, #24]
 801096e:	f7fe fc4b 	bl	800f208 <_Serialize16>
        for (i = 0; i < numberBoxItems; i++)
 8010972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010974:	3301      	adds	r3, #1
 8010976:	637b      	str	r3, [r7, #52]	; 0x34
 8010978:	4b8a      	ldr	r3, [pc, #552]	; (8010ba4 <evtMspReceive+0x1524>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	461a      	mov	r2, r3
 801097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010980:	4293      	cmp	r3, r2
 8010982:	d3e8      	bcc.n	8010956 <evtMspReceive+0x12d6>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * numberBoxItems);
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801098a:	4b86      	ldr	r3, [pc, #536]	; (8010ba4 <evtMspReceive+0x1524>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	b29b      	uxth	r3, r3
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	b29b      	uxth	r3, r3
 8010994:	6839      	ldr	r1, [r7, #0]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f006 fea8 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801099c:	f000 bc69 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_BOXNAMES:
        tmp = _SerializeBoxNamesReply(p_port);
 80109a0:	69b8      	ldr	r0, [r7, #24]
 80109a2:	f7fe fcc5 	bl	800f330 <_SerializeBoxNamesReply>
 80109a6:	4603      	mov	r3, r0
 80109a8:	613b      	str	r3, [r7, #16]
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, tmp);
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f006 fe98 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80109bc:	f000 bc59 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80109c0:	2300      	movs	r3, #0
 80109c2:	637b      	str	r3, [r7, #52]	; 0x34
 80109c4:	e028      	b.n	8010a18 <evtMspReceive+0x1398>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80109c6:	2300      	movs	r3, #0
 80109c8:	633b      	str	r3, [r7, #48]	; 0x30
 80109ca:	e01f      	b.n	8010a0c <evtMspReceive+0x138c>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80109cc:	4976      	ldr	r1, [pc, #472]	; (8010ba8 <evtMspReceive+0x1528>)
 80109ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109d0:	4613      	mov	r3, r2
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	440b      	add	r3, r1
 80109da:	3308      	adds	r3, #8
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	496f      	ldr	r1, [pc, #444]	; (8010b9c <evtMspReceive+0x151c>)
 80109e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e2:	440b      	add	r3, r1
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d10d      	bne.n	8010a06 <evtMspReceive+0x1386>
                    _Serialize8(p_port, boxes[j].permanentId);
 80109ea:	496f      	ldr	r1, [pc, #444]	; (8010ba8 <evtMspReceive+0x1528>)
 80109ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ee:	4613      	mov	r3, r2
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4413      	add	r3, r2
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	440b      	add	r3, r1
 80109f8:	3308      	adds	r3, #8
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	4619      	mov	r1, r3
 80109fe:	69b8      	ldr	r0, [r7, #24]
 8010a00:	f7fe fbea 	bl	800f1d8 <_Serialize8>
                    break;
 8010a04:	e005      	b.n	8010a12 <evtMspReceive+0x1392>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a08:	3301      	adds	r3, #1
 8010a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0e:	2b18      	cmp	r3, #24
 8010a10:	d9dc      	bls.n	80109cc <evtMspReceive+0x134c>
        for (i = 0; i < numberBoxItems; i++) {
 8010a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a14:	3301      	adds	r3, #1
 8010a16:	637b      	str	r3, [r7, #52]	; 0x34
 8010a18:	4b62      	ldr	r3, [pc, #392]	; (8010ba4 <evtMspReceive+0x1524>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d3d0      	bcc.n	80109c6 <evtMspReceive+0x1346>
                }
            }
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, numberBoxItems);
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010a2a:	4b5e      	ldr	r3, [pc, #376]	; (8010ba4 <evtMspReceive+0x1524>)
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	6839      	ldr	r1, [r7, #0]
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f006 fe5a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010a38:	f000 bc1b 	b.w	8011272 <evtMspReceive+0x1bf2>

    case MSP_MISC:
        _Serialize16(p_port, mcfg.midrc);
 8010a3c:	4b5b      	ldr	r3, [pc, #364]	; (8010bac <evtMspReceive+0x152c>)
 8010a3e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010a42:	b21b      	sxth	r3, r3
 8010a44:	4619      	mov	r1, r3
 8010a46:	69b8      	ldr	r0, [r7, #24]
 8010a48:	f7fe fbde 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.minthrottle);
 8010a4c:	4b57      	ldr	r3, [pc, #348]	; (8010bac <evtMspReceive+0x152c>)
 8010a4e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8010a52:	b21b      	sxth	r3, r3
 8010a54:	4619      	mov	r1, r3
 8010a56:	69b8      	ldr	r0, [r7, #24]
 8010a58:	f7fe fbd6 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.maxthrottle);
 8010a5c:	4b53      	ldr	r3, [pc, #332]	; (8010bac <evtMspReceive+0x152c>)
 8010a5e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8010a62:	b21b      	sxth	r3, r3
 8010a64:	4619      	mov	r1, r3
 8010a66:	69b8      	ldr	r0, [r7, #24]
 8010a68:	f7fe fbce 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.mincommand);
 8010a6c:	4b4f      	ldr	r3, [pc, #316]	; (8010bac <evtMspReceive+0x152c>)
 8010a6e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010a72:	b21b      	sxth	r3, r3
 8010a74:	4619      	mov	r1, r3
 8010a76:	69b8      	ldr	r0, [r7, #24]
 8010a78:	f7fe fbc6 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.failsafe_throttle);
 8010a7c:	4b48      	ldr	r3, [pc, #288]	; (8010ba0 <evtMspReceive+0x1520>)
 8010a7e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010a82:	b21b      	sxth	r3, r3
 8010a84:	4619      	mov	r1, r3
 8010a86:	69b8      	ldr	r0, [r7, #24]
 8010a88:	f7fe fbbe 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, mcfg.gps_type);
 8010a8c:	4b47      	ldr	r3, [pc, #284]	; (8010bac <evtMspReceive+0x152c>)
 8010a8e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010a92:	4619      	mov	r1, r3
 8010a94:	69b8      	ldr	r0, [r7, #24]
 8010a96:	f7fe fb9f 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_baudrate);
 8010a9a:	4b44      	ldr	r3, [pc, #272]	; (8010bac <evtMspReceive+0x152c>)
 8010a9c:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	69b8      	ldr	r0, [r7, #24]
 8010aa6:	f7fe fb97 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_ubx_sbas);
 8010aaa:	4b40      	ldr	r3, [pc, #256]	; (8010bac <evtMspReceive+0x152c>)
 8010aac:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	69b8      	ldr	r0, [r7, #24]
 8010ab6:	f7fe fb8f 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.multiwiicurrentoutput);
 8010aba:	4b3c      	ldr	r3, [pc, #240]	; (8010bac <evtMspReceive+0x152c>)
 8010abc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	69b8      	ldr	r0, [r7, #24]
 8010ac4:	f7fe fb88 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.rssi_aux_channel);
 8010ac8:	4b38      	ldr	r3, [pc, #224]	; (8010bac <evtMspReceive+0x152c>)
 8010aca:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010ace:	4619      	mov	r1, r3
 8010ad0:	69b8      	ldr	r0, [r7, #24]
 8010ad2:	f7fe fb81 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, 0);
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	69b8      	ldr	r0, [r7, #24]
 8010ada:	f7fe fb7d 	bl	800f1d8 <_Serialize8>
        _Serialize16(p_port, cfg.mag_declination / 10); // TODO check this shit
 8010ade:	4b30      	ldr	r3, [pc, #192]	; (8010ba0 <evtMspReceive+0x1520>)
 8010ae0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010ae4:	4a32      	ldr	r2, [pc, #200]	; (8010bb0 <evtMspReceive+0x1530>)
 8010ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8010aea:	1092      	asrs	r2, r2, #2
 8010aec:	17db      	asrs	r3, r3, #31
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	b21b      	sxth	r3, r3
 8010af2:	4619      	mov	r1, r3
 8010af4:	69b8      	ldr	r0, [r7, #24]
 8010af6:	f7fe fb87 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, mcfg.vbatscale);
 8010afa:	4b2c      	ldr	r3, [pc, #176]	; (8010bac <evtMspReceive+0x152c>)
 8010afc:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010b00:	4619      	mov	r1, r3
 8010b02:	69b8      	ldr	r0, [r7, #24]
 8010b04:	f7fe fb68 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmincellvoltage);
 8010b08:	4b28      	ldr	r3, [pc, #160]	; (8010bac <evtMspReceive+0x152c>)
 8010b0a:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010b0e:	4619      	mov	r1, r3
 8010b10:	69b8      	ldr	r0, [r7, #24]
 8010b12:	f7fe fb61 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmaxcellvoltage);
 8010b16:	4b25      	ldr	r3, [pc, #148]	; (8010bac <evtMspReceive+0x152c>)
 8010b18:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	69b8      	ldr	r0, [r7, #24]
 8010b20:	f7fe fb5a 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatwarningcellvoltage);
 8010b24:	4b21      	ldr	r3, [pc, #132]	; (8010bac <evtMspReceive+0x152c>)
 8010b26:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	69b8      	ldr	r0, [r7, #24]
 8010b2e:	f7fe fb53 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * 6 + 4 + 2 + 4);
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b38:	2316      	movs	r3, #22
 8010b3a:	6839      	ldr	r1, [r7, #0]
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f006 fdd5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010b42:	e396      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010b44:	2300      	movs	r3, #0
 8010b46:	637b      	str	r3, [r7, #52]	; 0x34
 8010b48:	e00a      	b.n	8010b60 <evtMspReceive+0x14e0>
            _Serialize8(p_port, i + 1);
 8010b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	3301      	adds	r3, #1
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	4619      	mov	r1, r3
 8010b54:	69b8      	ldr	r0, [r7, #24]
 8010b56:	f7fe fb3f 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < 8; i++)
 8010b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b62:	2b07      	cmp	r3, #7
 8010b64:	d9f1      	bls.n	8010b4a <evtMspReceive+0x14ca>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b6c:	2308      	movs	r3, #8
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f006 fdbb 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010b76:	e37c      	b.n	8011272 <evtMspReceive+0x1bf2>

#ifdef GPS
    case MSP_WP:
        wp_no = _Read8(p_port);    // get the wp number
 8010b78:	69b8      	ldr	r0, [r7, #24]
 8010b7a:	f7fe fad3 	bl	800f124 <_Read8>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	75fb      	strb	r3, [r7, #23]
        if (wp_no == 0) {
 8010b82:	7dfb      	ldrb	r3, [r7, #23]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d117      	bne.n	8010bb8 <evtMspReceive+0x1538>
            lat = GPS_home[LAT];
 8010b88:	4b0a      	ldr	r3, [pc, #40]	; (8010bb4 <evtMspReceive+0x1534>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010b8e:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <evtMspReceive+0x1534>)
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	627b      	str	r3, [r7, #36]	; 0x24
 8010b94:	e019      	b.n	8010bca <evtMspReceive+0x154a>
 8010b96:	bf00      	nop
 8010b98:	08027efc 	.word	0x08027efc
 8010b9c:	20001198 	.word	0x20001198
 8010ba0:	20001890 	.word	0x20001890
 8010ba4:	200011b1 	.word	0x200011b1
 8010ba8:	08027dc4 	.word	0x08027dc4
 8010bac:	200019c8 	.word	0x200019c8
 8010bb0:	66666667 	.word	0x66666667
 8010bb4:	200020cc 	.word	0x200020cc
        } else if (wp_no == 16) {
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
 8010bba:	2b10      	cmp	r3, #16
 8010bbc:	d105      	bne.n	8010bca <evtMspReceive+0x154a>
            lat = GPS_hold[LAT];
 8010bbe:	4b97      	ldr	r3, [pc, #604]	; (8010e1c <evtMspReceive+0x179c>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010bc4:	4b95      	ldr	r3, [pc, #596]	; (8010e1c <evtMspReceive+0x179c>)
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        _Serialize8(p_port, wp_no);
 8010bca:	7dfb      	ldrb	r3, [r7, #23]
 8010bcc:	4619      	mov	r1, r3
 8010bce:	69b8      	ldr	r0, [r7, #24]
 8010bd0:	f7fe fb02 	bl	800f1d8 <_Serialize8>
        _Serialize32(p_port, lat);
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	69b8      	ldr	r0, [r7, #24]
 8010bda:	f7fe fb38 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, lon);
 8010bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be0:	4619      	mov	r1, r3
 8010be2:	69b8      	ldr	r0, [r7, #24]
 8010be4:	f7fe fb33 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 8010be8:	4b8d      	ldr	r3, [pc, #564]	; (8010e20 <evtMspReceive+0x17a0>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4619      	mov	r1, r3
 8010bee:	69b8      	ldr	r0, [r7, #24]
 8010bf0:	f7fe fb2d 	bl	800f24e <_Serialize32>
        _Serialize16(p_port, 0);                 // heading  will come here (deg)
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	69b8      	ldr	r0, [r7, #24]
 8010bf8:	f7fe fb06 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, 0);                 // time to stay (ms) will come here
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	69b8      	ldr	r0, [r7, #24]
 8010c00:	f7fe fb02 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, 0);                  // nav flag will come here
 8010c04:	2100      	movs	r1, #0
 8010c06:	69b8      	ldr	r0, [r7, #24]
 8010c08:	f7fe fae6 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010c12:	2312      	movs	r3, #18
 8010c14:	6839      	ldr	r1, [r7, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f006 fd68 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010c1c:	e329      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_WP:
        wp_no = _Read8(p_port);    //get the wp number
 8010c1e:	69b8      	ldr	r0, [r7, #24]
 8010c20:	f7fe fa80 	bl	800f124 <_Read8>
 8010c24:	4603      	mov	r3, r0
 8010c26:	75fb      	strb	r3, [r7, #23]
        lat = _Read32(p_port);
 8010c28:	69b8      	ldr	r0, [r7, #24]
 8010c2a:	f7fe faac 	bl	800f186 <_Read32>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = _Read32(p_port);
 8010c32:	69b8      	ldr	r0, [r7, #24]
 8010c34:	f7fe faa7 	bl	800f186 <_Read32>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
        alt = _Read32(p_port);     // to set altitude (cm)
 8010c3c:	69b8      	ldr	r0, [r7, #24]
 8010c3e:	f7fe faa2 	bl	800f186 <_Read32>
 8010c42:	4603      	mov	r3, r0
 8010c44:	623b      	str	r3, [r7, #32]
        _Read16(p_port);           // future: to set heading (deg)
 8010c46:	69b8      	ldr	r0, [r7, #24]
 8010c48:	f7fe fa80 	bl	800f14c <_Read16>
        _Read16(p_port);           // future: to set time to stay (ms)
 8010c4c:	69b8      	ldr	r0, [r7, #24]
 8010c4e:	f7fe fa7d 	bl	800f14c <_Read16>
        _Read8(p_port);            // future: to set nav flag
 8010c52:	69b8      	ldr	r0, [r7, #24]
 8010c54:	f7fe fa66 	bl	800f124 <_Read8>
        if (wp_no == 0) {
 8010c58:	7dfb      	ldrb	r3, [r7, #23]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d112      	bne.n	8010c84 <evtMspReceive+0x1604>
            GPS_home[LAT] = lat;
 8010c5e:	4a71      	ldr	r2, [pc, #452]	; (8010e24 <evtMspReceive+0x17a4>)
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010c64:	4a6f      	ldr	r2, [pc, #444]	; (8010e24 <evtMspReceive+0x17a4>)
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010c6a:	4b6f      	ldr	r3, [pc, #444]	; (8010e28 <evtMspReceive+0x17a8>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010c70:	4b6d      	ldr	r3, [pc, #436]	; (8010e28 <evtMspReceive+0x17a8>)
 8010c72:	2201      	movs	r2, #1
 8010c74:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010c76:	6a3b      	ldr	r3, [r7, #32]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d019      	beq.n	8010cb0 <evtMspReceive+0x1630>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010c7c:	4a68      	ldr	r2, [pc, #416]	; (8010e20 <evtMspReceive+0x17a0>)
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	e015      	b.n	8010cb0 <evtMspReceive+0x1630>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
 8010c86:	2b10      	cmp	r3, #16
 8010c88:	d112      	bne.n	8010cb0 <evtMspReceive+0x1630>
            GPS_hold[LAT] = lat;
 8010c8a:	4a64      	ldr	r2, [pc, #400]	; (8010e1c <evtMspReceive+0x179c>)
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010c90:	4a62      	ldr	r2, [pc, #392]	; (8010e1c <evtMspReceive+0x179c>)
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d002      	beq.n	8010ca2 <evtMspReceive+0x1622>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010c9c:	4a60      	ldr	r2, [pc, #384]	; (8010e20 <evtMspReceive+0x17a0>)
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010ca2:	4b62      	ldr	r3, [pc, #392]	; (8010e2c <evtMspReceive+0x17ac>)
 8010ca4:	2202      	movs	r2, #2
 8010ca6:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010ca8:	4961      	ldr	r1, [pc, #388]	; (8010e30 <evtMspReceive+0x17b0>)
 8010caa:	485c      	ldr	r0, [pc, #368]	; (8010e1c <evtMspReceive+0x179c>)
 8010cac:	f7f8 f95c 	bl	8008f68 <GPS_set_next_wp>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f006 fd18 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010cbc:	e2d9      	b.n	8011272 <evtMspReceive+0x1bf2>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010cbe:	4b5a      	ldr	r3, [pc, #360]	; (8010e28 <evtMspReceive+0x17a8>)
 8010cc0:	785b      	ldrb	r3, [r3, #1]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d102      	bne.n	8010ccc <evtMspReceive+0x164c>
            checkFirstTime(true);
 8010cc6:	2001      	movs	r0, #1
 8010cc8:	f7f5 fe2c 	bl	8006924 <checkFirstTime>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010ccc:	2300      	movs	r3, #0
 8010cce:	2200      	movs	r2, #0
 8010cd0:	6839      	ldr	r1, [r7, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f006 fd0a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010cd8:	e2cb      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010cda:	4b53      	ldr	r3, [pc, #332]	; (8010e28 <evtMspReceive+0x17a8>)
 8010cdc:	785b      	ldrb	r3, [r3, #1]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d103      	bne.n	8010cea <evtMspReceive+0x166a>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010ce2:	4b54      	ldr	r3, [pc, #336]	; (8010e34 <evtMspReceive+0x17b4>)
 8010ce4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010ce8:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cea:	2300      	movs	r3, #0
 8010cec:	2200      	movs	r2, #0
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f006 fcfb 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010cf6:	e2bc      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010cf8:	4b4b      	ldr	r3, [pc, #300]	; (8010e28 <evtMspReceive+0x17a8>)
 8010cfa:	785b      	ldrb	r3, [r3, #1]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d102      	bne.n	8010d06 <evtMspReceive+0x1686>
            f.CALIBRATE_MAG = 1;
 8010d00:	4b49      	ldr	r3, [pc, #292]	; (8010e28 <evtMspReceive+0x17a8>)
 8010d02:	2201      	movs	r2, #1
 8010d04:	739a      	strb	r2, [r3, #14]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d06:	2300      	movs	r3, #0
 8010d08:	2200      	movs	r2, #0
 8010d0a:	6839      	ldr	r1, [r7, #0]
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f006 fced 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010d12:	e2ae      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010d14:	4b44      	ldr	r3, [pc, #272]	; (8010e28 <evtMspReceive+0x17a8>)
 8010d16:	785b      	ldrb	r3, [r3, #1]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d004      	beq.n	8010d26 <evtMspReceive+0x16a6>
            pifMsp_MakeError(p_owner, p_packet);
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f006 fd60 	bl	80177e4 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
        }
        break;
 8010d24:	e2a5      	b.n	8011272 <evtMspReceive+0x1bf2>
            writeEEPROM(0, true);
 8010d26:	2101      	movs	r1, #1
 8010d28:	2000      	movs	r0, #0
 8010d2a:	f7f5 fd79 	bl	8006820 <writeEEPROM>
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d2e:	2300      	movs	r3, #0
 8010d30:	2200      	movs	r2, #0
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f006 fcd9 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010d3a:	e29a      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010d3c:	4b3e      	ldr	r3, [pc, #248]	; (8010e38 <evtMspReceive+0x17b8>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a3e      	ldr	r2, [pc, #248]	; (8010e3c <evtMspReceive+0x17bc>)
 8010d42:	fba2 2303 	umull	r2, r3, r2, r3
 8010d46:	0c9b      	lsrs	r3, r3, #18
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	0152      	lsls	r2, r2, #5
 8010d4e:	1ad2      	subs	r2, r2, r3
 8010d50:	0092      	lsls	r2, r2, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	00db      	lsls	r3, r3, #3
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	4b39      	ldr	r3, [pc, #228]	; (8010e40 <evtMspReceive+0x17c0>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4937      	ldr	r1, [pc, #220]	; (8010e3c <evtMspReceive+0x17bc>)
 8010d5e:	fba1 1303 	umull	r1, r3, r1, r3
 8010d62:	0c9b      	lsrs	r3, r3, #18
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	4413      	add	r3, r2
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	b21a      	sxth	r2, r3
 8010d6c:	4b35      	ldr	r3, [pc, #212]	; (8010e44 <evtMspReceive+0x17c4>)
 8010d6e:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010d70:	2300      	movs	r3, #0
 8010d72:	637b      	str	r3, [r7, #52]	; 0x34
 8010d74:	e00a      	b.n	8010d8c <evtMspReceive+0x170c>
            _Serialize16(p_port, debug[i]);      // 4 variables are here for general monitoring purpose
 8010d76:	4a33      	ldr	r2, [pc, #204]	; (8010e44 <evtMspReceive+0x17c4>)
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	69b8      	ldr	r0, [r7, #24]
 8010d82:	f7fe fa41 	bl	800f208 <_Serialize16>
        for (i = 0; i < 4; i++)
 8010d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d88:	3301      	adds	r3, #1
 8010d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d9f1      	bls.n	8010d76 <evtMspReceive+0x16f6>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010d98:	2308      	movs	r3, #8
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f006 fca5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010da2:	e266      	b.n	8011272 <evtMspReceive+0x1bf2>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        _Serialize16(p_port, cfg.angleTrim[PITCH]);
 8010da4:	4b28      	ldr	r3, [pc, #160]	; (8010e48 <evtMspReceive+0x17c8>)
 8010da6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010daa:	4619      	mov	r1, r3
 8010dac:	69b8      	ldr	r0, [r7, #24]
 8010dae:	f7fe fa2b 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, cfg.angleTrim[ROLL]);
 8010db2:	4b25      	ldr	r3, [pc, #148]	; (8010e48 <evtMspReceive+0x17c8>)
 8010db4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010db8:	4619      	mov	r1, r3
 8010dba:	69b8      	ldr	r0, [r7, #24]
 8010dbc:	f7fe fa24 	bl	800f208 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 4);
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	6839      	ldr	r1, [r7, #0]
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f006 fc8e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010dd0:	e24f      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_UID:
        _Serialize32(p_port, g_unique_id[0]);
 8010dd2:	4b1e      	ldr	r3, [pc, #120]	; (8010e4c <evtMspReceive+0x17cc>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	69b8      	ldr	r0, [r7, #24]
 8010dda:	f7fe fa38 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, g_unique_id[1]);
 8010dde:	4b1b      	ldr	r3, [pc, #108]	; (8010e4c <evtMspReceive+0x17cc>)
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	4619      	mov	r1, r3
 8010de4:	69b8      	ldr	r0, [r7, #24]
 8010de6:	f7fe fa32 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, g_unique_id[2]);
 8010dea:	4b18      	ldr	r3, [pc, #96]	; (8010e4c <evtMspReceive+0x17cc>)
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	4619      	mov	r1, r3
 8010df0:	69b8      	ldr	r0, [r7, #24]
 8010df2:	f7fe fa2c 	bl	800f24e <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 12);
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dfc:	230c      	movs	r3, #12
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f006 fc73 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010e06:	e234      	b.n	8011272 <evtMspReceive+0x1bf2>

#ifdef GPS
    case MSP_GPSSVINFO:
        _Serialize8(p_port, GPS_numCh);
 8010e08:	4b11      	ldr	r3, [pc, #68]	; (8010e50 <evtMspReceive+0x17d0>)
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	69b8      	ldr	r0, [r7, #24]
 8010e10:	f7fe f9e2 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010e14:	2300      	movs	r3, #0
 8010e16:	637b      	str	r3, [r7, #52]	; 0x34
 8010e18:	e03f      	b.n	8010e9a <evtMspReceive+0x181a>
 8010e1a:	bf00      	nop
 8010e1c:	20002054 	.word	0x20002054
 8010e20:	20001fa0 	.word	0x20001fa0
 8010e24:	200020cc 	.word	0x200020cc
 8010e28:	20002014 	.word	0x20002014
 8010e2c:	20000e98 	.word	0x20000e98
 8010e30:	20002058 	.word	0x20002058
 8010e34:	20000fbe 	.word	0x20000fbe
 8010e38:	200021b0 	.word	0x200021b0
 8010e3c:	431bde83 	.word	0x431bde83
 8010e40:	2000208c 	.word	0x2000208c
 8010e44:	20002060 	.word	0x20002060
 8010e48:	20001890 	.word	0x20001890
 8010e4c:	20002090 	.word	0x20002090
 8010e50:	20002177 	.word	0x20002177
            _Serialize8(p_port, GPS_svinfo_chn[i]);
 8010e54:	4a8c      	ldr	r2, [pc, #560]	; (8011088 <evtMspReceive+0x1a08>)
 8010e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e58:	4413      	add	r3, r2
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	69b8      	ldr	r0, [r7, #24]
 8010e60:	f7fe f9ba 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_svid[i]);
 8010e64:	4a89      	ldr	r2, [pc, #548]	; (801108c <evtMspReceive+0x1a0c>)
 8010e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e68:	4413      	add	r3, r2
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	69b8      	ldr	r0, [r7, #24]
 8010e70:	f7fe f9b2 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_quality[i]);
 8010e74:	4a86      	ldr	r2, [pc, #536]	; (8011090 <evtMspReceive+0x1a10>)
 8010e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e78:	4413      	add	r3, r2
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	69b8      	ldr	r0, [r7, #24]
 8010e80:	f7fe f9aa 	bl	800f1d8 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_cno[i]);
 8010e84:	4a83      	ldr	r2, [pc, #524]	; (8011094 <evtMspReceive+0x1a14>)
 8010e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e88:	4413      	add	r3, r2
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	69b8      	ldr	r0, [r7, #24]
 8010e90:	f7fe f9a2 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e96:	3301      	adds	r3, #1
 8010e98:	637b      	str	r3, [r7, #52]	; 0x34
 8010e9a:	4b7f      	ldr	r3, [pc, #508]	; (8011098 <evtMspReceive+0x1a18>)
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d3d6      	bcc.n	8010e54 <evtMspReceive+0x17d4>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + (GPS_numCh * 4));
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010eac:	4b7a      	ldr	r3, [pc, #488]	; (8011098 <evtMspReceive+0x1a18>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	6839      	ldr	r1, [r7, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f006 fc15 	bl	80176ec <pifMsp_MakeAnswer>
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010ec2:	f7f7 fb11 	bl	80084e8 <gpsPollSvinfo>
        break;
 8010ec6:	e1d4      	b.n	8011272 <evtMspReceive+0x1bf2>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010ec8:	2020      	movs	r0, #32
 8010eca:	f7f6 f843 	bl	8006f54 <sensors>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d012      	beq.n	8010efa <evtMspReceive+0x187a>
            _Serialize32(p_port, GPS_update_rate[1] - GPS_update_rate[0]);
 8010ed4:	4b71      	ldr	r3, [pc, #452]	; (801109c <evtMspReceive+0x1a1c>)
 8010ed6:	685a      	ldr	r2, [r3, #4]
 8010ed8:	4b70      	ldr	r3, [pc, #448]	; (801109c <evtMspReceive+0x1a1c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	1ad3      	subs	r3, r2, r3
 8010ede:	4619      	mov	r1, r3
 8010ee0:	69b8      	ldr	r0, [r7, #24]
 8010ee2:	f7fe f9b4 	bl	800f24e <_Serialize32>
            _Serialize32(p_port, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010ee6:	4b6e      	ldr	r3, [pc, #440]	; (80110a0 <evtMspReceive+0x1a20>)
 8010ee8:	685a      	ldr	r2, [r3, #4]
 8010eea:	4b6d      	ldr	r3, [pc, #436]	; (80110a0 <evtMspReceive+0x1a20>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	1ad3      	subs	r3, r2, r3
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	69b8      	ldr	r0, [r7, #24]
 8010ef4:	f7fe f9ab 	bl	800f24e <_Serialize32>
 8010ef8:	e007      	b.n	8010f0a <evtMspReceive+0x188a>
        } else {
            _Serialize32(p_port, 0);
 8010efa:	2100      	movs	r1, #0
 8010efc:	69b8      	ldr	r0, [r7, #24]
 8010efe:	f7fe f9a6 	bl	800f24e <_Serialize32>
            _Serialize32(p_port, 0);
 8010f02:	2100      	movs	r1, #0
 8010f04:	69b8      	ldr	r0, [r7, #24]
 8010f06:	f7fe f9a2 	bl	800f24e <_Serialize32>
        }
        _Serialize32(p_port, GPS_HorizontalAcc);
 8010f0a:	4b66      	ldr	r3, [pc, #408]	; (80110a4 <evtMspReceive+0x1a24>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4619      	mov	r1, r3
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f7fe f99c 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, GPS_VerticalAcc);
 8010f16:	4b64      	ldr	r3, [pc, #400]	; (80110a8 <evtMspReceive+0x1a28>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	69b8      	ldr	r0, [r7, #24]
 8010f1e:	f7fe f996 	bl	800f24e <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010f28:	2310      	movs	r3, #16
 8010f2a:	6839      	ldr	r1, [r7, #0]
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f006 fbdd 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010f32:	e19e      	b.n	8011272 <evtMspReceive+0x1bf2>
#endif  // GPS

    case MSP_SET_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010f34:	2300      	movs	r3, #0
 8010f36:	2200      	movs	r2, #0
 8010f38:	6839      	ldr	r1, [r7, #0]
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f006 fbd6 	bl	80176ec <pifMsp_MakeAnswer>
        mcfg.mixerConfiguration = _Read8(p_port); // multitype
 8010f40:	69b8      	ldr	r0, [r7, #24]
 8010f42:	f7fe f8ef 	bl	800f124 <_Read8>
 8010f46:	4603      	mov	r3, r0
 8010f48:	461a      	mov	r2, r3
 8010f4a:	4b58      	ldr	r3, [pc, #352]	; (80110ac <evtMspReceive+0x1a2c>)
 8010f4c:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010f4e:	f7f6 f885 	bl	800705c <featureClearAll>
        featureSet(_Read32(p_port)); // features bitmap
 8010f52:	69b8      	ldr	r0, [r7, #24]
 8010f54:	f7fe f917 	bl	800f186 <_Read32>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f6 f858 	bl	8007010 <featureSet>
        mcfg.serialrx_type = _Read8(p_port); // serialrx_type
 8010f60:	69b8      	ldr	r0, [r7, #24]
 8010f62:	f7fe f8df 	bl	800f124 <_Read8>
 8010f66:	4603      	mov	r3, r0
 8010f68:	461a      	mov	r2, r3
 8010f6a:	4b50      	ldr	r3, [pc, #320]	; (80110ac <evtMspReceive+0x1a2c>)
 8010f6c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = _Read16(p_port); // board_align_roll
 8010f70:	69b8      	ldr	r0, [r7, #24]
 8010f72:	f7fe f8eb 	bl	800f14c <_Read16>
 8010f76:	4603      	mov	r3, r0
 8010f78:	b21a      	sxth	r2, r3
 8010f7a:	4b4c      	ldr	r3, [pc, #304]	; (80110ac <evtMspReceive+0x1a2c>)
 8010f7c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = _Read16(p_port); // board_align_pitch
 8010f80:	69b8      	ldr	r0, [r7, #24]
 8010f82:	f7fe f8e3 	bl	800f14c <_Read16>
 8010f86:	4603      	mov	r3, r0
 8010f88:	b21a      	sxth	r2, r3
 8010f8a:	4b48      	ldr	r3, [pc, #288]	; (80110ac <evtMspReceive+0x1a2c>)
 8010f8c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = _Read16(p_port); // board_align_yaw
 8010f90:	69b8      	ldr	r0, [r7, #24]
 8010f92:	f7fe f8db 	bl	800f14c <_Read16>
 8010f96:	4603      	mov	r3, r0
 8010f98:	b21a      	sxth	r2, r3
 8010f9a:	4b44      	ldr	r3, [pc, #272]	; (80110ac <evtMspReceive+0x1a2c>)
 8010f9c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = _Read16(p_port);
 8010fa0:	69b8      	ldr	r0, [r7, #24]
 8010fa2:	f7fe f8d3 	bl	800f14c <_Read16>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	461a      	mov	r2, r3
 8010faa:	4b40      	ldr	r3, [pc, #256]	; (80110ac <evtMspReceive+0x1a2c>)
 8010fac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = _Read16(p_port);
 8010fb0:	69b8      	ldr	r0, [r7, #24]
 8010fb2:	f7fe f8cb 	bl	800f14c <_Read16>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4b3c      	ldr	r3, [pc, #240]	; (80110ac <evtMspReceive+0x1a2c>)
 8010fbc:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = _Read16(p_port);
 8010fc0:	69b8      	ldr	r0, [r7, #24]
 8010fc2:	f7fe f8c3 	bl	800f14c <_Read16>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4b38      	ldr	r3, [pc, #224]	; (80110ac <evtMspReceive+0x1a2c>)
 8010fcc:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = _Read8(p_port);
 8010fd0:	69b8      	ldr	r0, [r7, #24]
 8010fd2:	f7fe f8a7 	bl	800f124 <_Read8>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	461a      	mov	r2, r3
 8010fda:	4b35      	ldr	r3, [pc, #212]	; (80110b0 <evtMspReceive+0x1a30>)
 8010fdc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = _Read8(p_port);
 8010fe0:	69b8      	ldr	r0, [r7, #24]
 8010fe2:	f7fe f89f 	bl	800f124 <_Read8>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4b31      	ldr	r3, [pc, #196]	; (80110b0 <evtMspReceive+0x1a30>)
 8010fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = _Read8(p_port);
 8010ff0:	69b8      	ldr	r0, [r7, #24]
 8010ff2:	f7fe f897 	bl	800f124 <_Read8>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4b2c      	ldr	r3, [pc, #176]	; (80110ac <evtMspReceive+0x1a2c>)
 8010ffc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = _Read8(p_port);
 8011000:	69b8      	ldr	r0, [r7, #24]
 8011002:	f7fe f88f 	bl	800f124 <_Read8>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	4b29      	ldr	r3, [pc, #164]	; (80110b0 <evtMspReceive+0x1a30>)
 801100c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = _Read16(p_port);
 8011010:	69b8      	ldr	r0, [r7, #24]
 8011012:	f7fe f89b 	bl	800f14c <_Read16>
 8011016:	4603      	mov	r3, r0
 8011018:	613b      	str	r3, [r7, #16]
        if (tmp != mcfg.looptime) {
 801101a:	4b24      	ldr	r3, [pc, #144]	; (80110ac <evtMspReceive+0x1a2c>)
 801101c:	899b      	ldrh	r3, [r3, #12]
 801101e:	461a      	mov	r2, r3
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	4293      	cmp	r3, r2
 8011024:	d026      	beq.n	8011074 <evtMspReceive+0x19f4>
            if (mcfg.looptime && tmp) {
 8011026:	4b21      	ldr	r3, [pc, #132]	; (80110ac <evtMspReceive+0x1a2c>)
 8011028:	899b      	ldrh	r3, [r3, #12]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00b      	beq.n	8011046 <evtMspReceive+0x19c6>
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d008      	beq.n	8011046 <evtMspReceive+0x19c6>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8011034:	4b1f      	ldr	r3, [pc, #124]	; (80110b4 <evtMspReceive+0x1a34>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	b292      	uxth	r2, r2
 801103c:	4611      	mov	r1, r2
 801103e:	4618      	mov	r0, r3
 8011040:	f003 fbba 	bl	80147b8 <pifTask_ChangePeriod>
 8011044:	e012      	b.n	801106c <evtMspReceive+0x19ec>
            }
            else {
                if (tmp) {
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d008      	beq.n	801105e <evtMspReceive+0x19de>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 801104c:	4b19      	ldr	r3, [pc, #100]	; (80110b4 <evtMspReceive+0x1a34>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	693a      	ldr	r2, [r7, #16]
 8011052:	b292      	uxth	r2, r2
 8011054:	2103      	movs	r1, #3
 8011056:	4618      	mov	r0, r3
 8011058:	f003 fb80 	bl	801475c <pifTask_ChangeMode>
 801105c:	e006      	b.n	801106c <evtMspReceive+0x19ec>
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 801105e:	4b15      	ldr	r3, [pc, #84]	; (80110b4 <evtMspReceive+0x1a34>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2264      	movs	r2, #100	; 0x64
 8011064:	2101      	movs	r1, #1
 8011066:	4618      	mov	r0, r3
 8011068:	f003 fb78 	bl	801475c <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	b29a      	uxth	r2, r3
 8011070:	4b0e      	ldr	r3, [pc, #56]	; (80110ac <evtMspReceive+0x1a2c>)
 8011072:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = _Read8(p_port);
 8011074:	69b8      	ldr	r0, [r7, #24]
 8011076:	f7fe f855 	bl	800f124 <_Read8>
 801107a:	4603      	mov	r3, r0
 801107c:	461a      	mov	r2, r3
 801107e:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <evtMspReceive+0x1a30>)
 8011080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8011084:	e0f5      	b.n	8011272 <evtMspReceive+0x1bf2>
 8011086:	bf00      	nop
 8011088:	20001ff0 	.word	0x20001ff0
 801108c:	200020f8 	.word	0x200020f8
 8011090:	20002150 	.word	0x20002150
 8011094:	200021b8 	.word	0x200021b8
 8011098:	20002177 	.word	0x20002177
 801109c:	2000209c 	.word	0x2000209c
 80110a0:	200020a4 	.word	0x200020a4
 80110a4:	200020ac 	.word	0x200020ac
 80110a8:	200020bc 	.word	0x200020bc
 80110ac:	200019c8 	.word	0x200019c8
 80110b0:	20001890 	.word	0x20001890
 80110b4:	200021ac 	.word	0x200021ac

    case MSP_CONFIG:
        _Serialize8(p_port, mcfg.mixerConfiguration);
 80110b8:	4b70      	ldr	r3, [pc, #448]	; (801127c <evtMspReceive+0x1bfc>)
 80110ba:	795b      	ldrb	r3, [r3, #5]
 80110bc:	4619      	mov	r1, r3
 80110be:	69b8      	ldr	r0, [r7, #24]
 80110c0:	f7fe f88a 	bl	800f1d8 <_Serialize8>
        _Serialize32(p_port, featureMask());
 80110c4:	f7f5 ffd6 	bl	8007074 <featureMask>
 80110c8:	4603      	mov	r3, r0
 80110ca:	4619      	mov	r1, r3
 80110cc:	69b8      	ldr	r0, [r7, #24]
 80110ce:	f7fe f8be 	bl	800f24e <_Serialize32>
        _Serialize8(p_port, mcfg.serialrx_type);
 80110d2:	4b6a      	ldr	r3, [pc, #424]	; (801127c <evtMspReceive+0x1bfc>)
 80110d4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80110d8:	4619      	mov	r1, r3
 80110da:	69b8      	ldr	r0, [r7, #24]
 80110dc:	f7fe f87c 	bl	800f1d8 <_Serialize8>
        _Serialize16(p_port, mcfg.board_align_roll);
 80110e0:	4b66      	ldr	r3, [pc, #408]	; (801127c <evtMspReceive+0x1bfc>)
 80110e2:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 80110e6:	4619      	mov	r1, r3
 80110e8:	69b8      	ldr	r0, [r7, #24]
 80110ea:	f7fe f88d 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_pitch);
 80110ee:	4b63      	ldr	r3, [pc, #396]	; (801127c <evtMspReceive+0x1bfc>)
 80110f0:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 80110f4:	4619      	mov	r1, r3
 80110f6:	69b8      	ldr	r0, [r7, #24]
 80110f8:	f7fe f886 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_yaw);
 80110fc:	4b5f      	ldr	r3, [pc, #380]	; (801127c <evtMspReceive+0x1bfc>)
 80110fe:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8011102:	4619      	mov	r1, r3
 8011104:	69b8      	ldr	r0, [r7, #24]
 8011106:	f7fe f87f 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.currentscale);
 801110a:	4b5c      	ldr	r3, [pc, #368]	; (801127c <evtMspReceive+0x1bfc>)
 801110c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8011110:	b21b      	sxth	r3, r3
 8011112:	4619      	mov	r1, r3
 8011114:	69b8      	ldr	r0, [r7, #24]
 8011116:	f7fe f877 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.currentoffset);
 801111a:	4b58      	ldr	r3, [pc, #352]	; (801127c <evtMspReceive+0x1bfc>)
 801111c:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8011120:	b21b      	sxth	r3, r3
 8011122:	4619      	mov	r1, r3
 8011124:	69b8      	ldr	r0, [r7, #24]
 8011126:	f7fe f86f 	bl	800f208 <_Serialize16>
        _Serialize16(p_port, mcfg.motor_pwm_rate);
 801112a:	4b54      	ldr	r3, [pc, #336]	; (801127c <evtMspReceive+0x1bfc>)
 801112c:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8011130:	b21b      	sxth	r3, r3
 8011132:	4619      	mov	r1, r3
 8011134:	69b8      	ldr	r0, [r7, #24]
 8011136:	f7fe f867 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, cfg.rollPitchRate[0]);
 801113a:	4b51      	ldr	r3, [pc, #324]	; (8011280 <evtMspReceive+0x1c00>)
 801113c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011140:	4619      	mov	r1, r3
 8011142:	69b8      	ldr	r0, [r7, #24]
 8011144:	f7fe f848 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[1]);
 8011148:	4b4d      	ldr	r3, [pc, #308]	; (8011280 <evtMspReceive+0x1c00>)
 801114a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801114e:	4619      	mov	r1, r3
 8011150:	69b8      	ldr	r0, [r7, #24]
 8011152:	f7fe f841 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, mcfg.power_adc_channel);
 8011156:	4b49      	ldr	r3, [pc, #292]	; (801127c <evtMspReceive+0x1bfc>)
 8011158:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 801115c:	4619      	mov	r1, r3
 801115e:	69b8      	ldr	r0, [r7, #24]
 8011160:	f7fe f83a 	bl	800f1d8 <_Serialize8>
        _Serialize8(p_port, cfg.small_angle);
 8011164:	4b46      	ldr	r3, [pc, #280]	; (8011280 <evtMspReceive+0x1c00>)
 8011166:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801116a:	4619      	mov	r1, r3
 801116c:	69b8      	ldr	r0, [r7, #24]
 801116e:	f7fe f833 	bl	800f1d8 <_Serialize8>
        _Serialize16(p_port, mcfg.looptime);
 8011172:	4b42      	ldr	r3, [pc, #264]	; (801127c <evtMspReceive+0x1bfc>)
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b21b      	sxth	r3, r3
 8011178:	4619      	mov	r1, r3
 801117a:	69b8      	ldr	r0, [r7, #24]
 801117c:	f7fe f844 	bl	800f208 <_Serialize16>
        _Serialize8(p_port, cfg.locked_in);
 8011180:	4b3f      	ldr	r3, [pc, #252]	; (8011280 <evtMspReceive+0x1c00>)
 8011182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011186:	4619      	mov	r1, r3
 8011188:	69b8      	ldr	r0, [r7, #24]
 801118a:	f7fe f825 	bl	800f1d8 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + 4 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 2 + 1);
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011194:	2319      	movs	r3, #25
 8011196:	6839      	ldr	r1, [r7, #0]
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f006 faa7 	bl	80176ec <pifMsp_MakeAnswer>
        /// ???
        break;
 801119e:	e068      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111a0:	2300      	movs	r3, #0
 80111a2:	637b      	str	r3, [r7, #52]	; 0x34
 80111a4:	e00c      	b.n	80111c0 <evtMspReceive+0x1b40>
            _Serialize8(p_port, mcfg.rcmap[i]);
 80111a6:	4a35      	ldr	r2, [pc, #212]	; (801127c <evtMspReceive+0x1bfc>)
 80111a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111aa:	4413      	add	r3, r2
 80111ac:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	4619      	mov	r1, r3
 80111b4:	69b8      	ldr	r0, [r7, #24]
 80111b6:	f7fe f80f 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111bc:	3301      	adds	r3, #1
 80111be:	637b      	str	r3, [r7, #52]	; 0x34
 80111c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c2:	2b07      	cmp	r3, #7
 80111c4:	d9ef      	bls.n	80111a6 <evtMspReceive+0x1b26>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERIAL_INPUTS);
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80111cc:	2308      	movs	r3, #8
 80111ce:	6839      	ldr	r1, [r7, #0]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f006 fa8b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80111d6:	e04c      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_SET_RCMAP:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80111d8:	2300      	movs	r3, #0
 80111da:	2200      	movs	r2, #0
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f006 fa84 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111e4:	2300      	movs	r3, #0
 80111e6:	637b      	str	r3, [r7, #52]	; 0x34
 80111e8:	e00e      	b.n	8011208 <evtMspReceive+0x1b88>
            mcfg.rcmap[i] = _Read8(p_port);
 80111ea:	69b8      	ldr	r0, [r7, #24]
 80111ec:	f7fd ff9a 	bl	800f124 <_Read8>
 80111f0:	4603      	mov	r3, r0
 80111f2:	4619      	mov	r1, r3
 80111f4:	4a21      	ldr	r2, [pc, #132]	; (801127c <evtMspReceive+0x1bfc>)
 80111f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f8:	4413      	add	r3, r2
 80111fa:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80111fe:	460a      	mov	r2, r1
 8011200:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011204:	3301      	adds	r3, #1
 8011206:	637b      	str	r3, [r7, #52]	; 0x34
 8011208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120a:	2b07      	cmp	r3, #7
 801120c:	d9ed      	bls.n	80111ea <evtMspReceive+0x1b6a>
        break;
 801120e:	e030      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_REBOOT:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8011210:	2300      	movs	r3, #0
 8011212:	2200      	movs	r2, #0
 8011214:	6839      	ldr	r1, [r7, #0]
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f006 fa68 	bl	80176ec <pifMsp_MakeAnswer>
        pendReboot = true;
 801121c:	4b19      	ldr	r3, [pc, #100]	; (8011284 <evtMspReceive+0x1c04>)
 801121e:	2201      	movs	r2, #1
 8011220:	701a      	strb	r2, [r3, #0]
        break;
 8011222:	e026      	b.n	8011272 <evtMspReceive+0x1bf2>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8011224:	2300      	movs	r3, #0
 8011226:	637b      	str	r3, [r7, #52]	; 0x34
 8011228:	e00a      	b.n	8011240 <evtMspReceive+0x1bc0>
            _Serialize8(p_port, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 801122a:	69fa      	ldr	r2, [r7, #28]
 801122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122e:	4413      	add	r3, r2
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	4619      	mov	r1, r3
 8011234:	69b8      	ldr	r0, [r7, #24]
 8011236:	f7fd ffcf 	bl	800f1d8 <_Serialize8>
        for (i = 0; i < 11; i++)
 801123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123c:	3301      	adds	r3, #1
 801123e:	637b      	str	r3, [r7, #52]	; 0x34
 8011240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011242:	2b0a      	cmp	r3, #10
 8011244:	d9f1      	bls.n	801122a <evtMspReceive+0x1baa>
        _Serialize32(p_port, 0); // future exp
 8011246:	2100      	movs	r1, #0
 8011248:	69b8      	ldr	r0, [r7, #24]
 801124a:	f7fe f800 	bl	800f24e <_Serialize32>
        _Serialize32(p_port, 0); // future exp
 801124e:	2100      	movs	r1, #0
 8011250:	69b8      	ldr	r0, [r7, #24]
 8011252:	f7fd fffc 	bl	800f24e <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11 + 4 + 4);
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801125c:	2313      	movs	r3, #19
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f006 fa43 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8011266:	e004      	b.n	8011272 <evtMspReceive+0x1bf2>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f006 faba 	bl	80177e4 <pifMsp_MakeError>
        break;
 8011270:	bf00      	nop
    }
}
 8011272:	bf00      	nop
 8011274:	373c      	adds	r7, #60	; 0x3c
 8011276:	46bd      	mov	sp, r7
 8011278:	bd90      	pop	{r4, r7, pc}
 801127a:	bf00      	nop
 801127c:	200019c8 	.word	0x200019c8
 8011280:	20001890 	.word	0x20001890
 8011284:	200011b2 	.word	0x200011b2

08011288 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	70fb      	strb	r3, [r7, #3]
    (void)p_owner;

    if (f.ARMED) return;
 8011294:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <evtMspOtherPacket+0x40>)
 8011296:	785b      	ldrb	r3, [r3, #1]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d110      	bne.n	80112be <evtMspOtherPacket+0x36>

    if (data == '#')
 801129c:	78fb      	ldrb	r3, [r7, #3]
 801129e:	2b23      	cmp	r3, #35	; 0x23
 80112a0:	d103      	bne.n	80112aa <evtMspOtherPacket+0x22>
        s_change_cli = TRUE;
 80112a2:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <evtMspOtherPacket+0x44>)
 80112a4:	2201      	movs	r2, #1
 80112a6:	701a      	strb	r2, [r3, #0]
 80112a8:	e00a      	b.n	80112c0 <evtMspOtherPacket+0x38>
    else if (data == mcfg.reboot_character)
 80112aa:	4b09      	ldr	r3, [pc, #36]	; (80112d0 <evtMspOtherPacket+0x48>)
 80112ac:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 80112b0:	78fa      	ldrb	r2, [r7, #3]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d104      	bne.n	80112c0 <evtMspOtherPacket+0x38>
        systemReset(true);      // reboot to bootloader
 80112b6:	2001      	movs	r0, #1
 80112b8:	f7f0 fe8c 	bl	8001fd4 <systemReset>
 80112bc:	e000      	b.n	80112c0 <evtMspOtherPacket+0x38>
    if (f.ARMED) return;
 80112be:	bf00      	nop
}
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20002014 	.word	0x20002014
 80112cc:	20001364 	.word	0x20001364
 80112d0:	200019c8 	.word	0x200019c8

080112d4 <serialCom>:

void serialCom(void)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 80112d8:	4b0c      	ldr	r3, [pc, #48]	; (801130c <serialCom+0x38>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00b      	beq.n	80112f8 <serialCom+0x24>
        s_change_cli = FALSE;
 80112e0:	4b0a      	ldr	r3, [pc, #40]	; (801130c <serialCom+0x38>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 80112e6:	480a      	ldr	r0, [pc, #40]	; (8011310 <serialCom+0x3c>)
 80112e8:	f006 f9f0 	bl	80176cc <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 80112ec:	4b09      	ldr	r3, [pc, #36]	; (8011314 <serialCom+0x40>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	3304      	adds	r3, #4
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f5 f8a0 	bl	8006438 <cliInit>
    };

    if (pendReboot)
 80112f8:	4b07      	ldr	r3, [pc, #28]	; (8011318 <serialCom+0x44>)
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d002      	beq.n	8011306 <serialCom+0x32>
        systemReset(false); // noreturn
 8011300:	2000      	movs	r0, #0
 8011302:	f7f0 fe67 	bl	8001fd4 <systemReset>
}
 8011306:	bf00      	nop
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	20001364 	.word	0x20001364
 8011310:	200011b8 	.word	0x200011b8
 8011314:	20001640 	.word	0x20001640
 8011318:	200011b2 	.word	0x200011b2

0801131c <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8011324:	4a07      	ldr	r2, [pc, #28]	; (8011344 <pif_Init+0x28>)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 801132a:	4b07      	ldr	r3, [pc, #28]	; (8011348 <pif_Init+0x2c>)
 801132c:	2201      	movs	r2, #1
 801132e:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011330:	4b05      	ldr	r3, [pc, #20]	; (8011348 <pif_Init+0x2c>)
 8011332:	2201      	movs	r2, #1
 8011334:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 8011336:	bf00      	nop
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	2000137c 	.word	0x2000137c
 8011348:	20002274 	.word	0x20002274

0801134c <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;
#ifndef __PIF_NO_LOG__
	static uint16_t usTimerPerform = 0;

    if (pif_log_flag.bt.performance) {
 8011352:	4b59      	ldr	r3, [pc, #356]	; (80114b8 <pif_sigTimer1ms+0x16c>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 0301 	and.w	r3, r3, #1
 801135a:	b2db      	uxtb	r3, r3
 801135c:	2b00      	cmp	r3, #0
 801135e:	d010      	beq.n	8011382 <pif_sigTimer1ms+0x36>
		usTimerPerform++;
 8011360:	4b56      	ldr	r3, [pc, #344]	; (80114bc <pif_sigTimer1ms+0x170>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	b29a      	uxth	r2, r3
 8011368:	4b54      	ldr	r3, [pc, #336]	; (80114bc <pif_sigTimer1ms+0x170>)
 801136a:	801a      	strh	r2, [r3, #0]
		if (usTimerPerform >= 1000) {
 801136c:	4b53      	ldr	r3, [pc, #332]	; (80114bc <pif_sigTimer1ms+0x170>)
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011374:	d305      	bcc.n	8011382 <pif_sigTimer1ms+0x36>
			usTimerPerform = 0;
 8011376:	4b51      	ldr	r3, [pc, #324]	; (80114bc <pif_sigTimer1ms+0x170>)
 8011378:	2200      	movs	r2, #0
 801137a:	801a      	strh	r2, [r3, #0]
			pif_performance.__state = TRUE;
 801137c:	4b50      	ldr	r3, [pc, #320]	; (80114c0 <pif_sigTimer1ms+0x174>)
 801137e:	2201      	movs	r2, #1
 8011380:	711a      	strb	r2, [r3, #4]
		}
    }
#endif

	pif_cumulative_timer1ms++;
 8011382:	4b50      	ldr	r3, [pc, #320]	; (80114c4 <pif_sigTimer1ms+0x178>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	3301      	adds	r3, #1
 8011388:	4a4e      	ldr	r2, [pc, #312]	; (80114c4 <pif_sigTimer1ms+0x178>)
 801138a:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 801138c:	4b4e      	ldr	r3, [pc, #312]	; (80114c8 <pif_sigTimer1ms+0x17c>)
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	3301      	adds	r3, #1
 8011394:	b29a      	uxth	r2, r3
 8011396:	4b4c      	ldr	r3, [pc, #304]	; (80114c8 <pif_sigTimer1ms+0x17c>)
 8011398:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 801139a:	4b4b      	ldr	r3, [pc, #300]	; (80114c8 <pif_sigTimer1ms+0x17c>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	b29b      	uxth	r3, r3
 80113a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80113a4:	f0c0 8082 	bcc.w	80114ac <pif_sigTimer1ms+0x160>
        pif_timer1ms = 0;
 80113a8:	4b47      	ldr	r3, [pc, #284]	; (80114c8 <pif_sigTimer1ms+0x17c>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 80113ae:	4b47      	ldr	r3, [pc, #284]	; (80114cc <pif_sigTimer1ms+0x180>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	4a45      	ldr	r2, [pc, #276]	; (80114cc <pif_sigTimer1ms+0x180>)
 80113b6:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 80113b8:	4b45      	ldr	r3, [pc, #276]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113ba:	795b      	ldrb	r3, [r3, #5]
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	3301      	adds	r3, #1
 80113c0:	b2da      	uxtb	r2, r3
 80113c2:	4b43      	ldr	r3, [pc, #268]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113c4:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 80113c6:	4b42      	ldr	r3, [pc, #264]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113c8:	795b      	ldrb	r3, [r3, #5]
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b3b      	cmp	r3, #59	; 0x3b
 80113ce:	d96d      	bls.n	80114ac <pif_sigTimer1ms+0x160>
#ifdef __PIF_DEBUG__
#ifndef __PIF_NO_LOG__
    		pif_performance.__max_loop_time1us = 0UL;
 80113d0:	4b3b      	ldr	r3, [pc, #236]	; (80114c0 <pif_sigTimer1ms+0x174>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	609a      	str	r2, [r3, #8]
#endif
#endif
    		pif_datetime.second = 0;
 80113d6:	4b3e      	ldr	r3, [pc, #248]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113d8:	2200      	movs	r2, #0
 80113da:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 80113dc:	4b3c      	ldr	r3, [pc, #240]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113de:	791b      	ldrb	r3, [r3, #4]
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	3301      	adds	r3, #1
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	4b3a      	ldr	r3, [pc, #232]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113e8:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80113ea:	4b39      	ldr	r3, [pc, #228]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113ec:	791b      	ldrb	r3, [r3, #4]
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	2b3b      	cmp	r3, #59	; 0x3b
 80113f2:	d95b      	bls.n	80114ac <pif_sigTimer1ms+0x160>
    			pif_datetime.minute = 0;
 80113f4:	4b36      	ldr	r3, [pc, #216]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113f6:	2200      	movs	r2, #0
 80113f8:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80113fa:	4b35      	ldr	r3, [pc, #212]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80113fc:	78db      	ldrb	r3, [r3, #3]
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	3301      	adds	r3, #1
 8011402:	b2da      	uxtb	r2, r3
 8011404:	4b32      	ldr	r3, [pc, #200]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011406:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 8011408:	4b31      	ldr	r3, [pc, #196]	; (80114d0 <pif_sigTimer1ms+0x184>)
 801140a:	78db      	ldrb	r3, [r3, #3]
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b17      	cmp	r3, #23
 8011410:	d94c      	bls.n	80114ac <pif_sigTimer1ms+0x160>
    				pif_datetime.hour = 0;
 8011412:	4b2f      	ldr	r3, [pc, #188]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011414:	2200      	movs	r2, #0
 8011416:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 8011418:	4b2d      	ldr	r3, [pc, #180]	; (80114d0 <pif_sigTimer1ms+0x184>)
 801141a:	789b      	ldrb	r3, [r3, #2]
 801141c:	b2db      	uxtb	r3, r3
 801141e:	3301      	adds	r3, #1
 8011420:	b2da      	uxtb	r2, r3
 8011422:	4b2b      	ldr	r3, [pc, #172]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011424:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 8011426:	4b2a      	ldr	r3, [pc, #168]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011428:	785b      	ldrb	r3, [r3, #1]
 801142a:	b2db      	uxtb	r3, r3
 801142c:	3b01      	subs	r3, #1
 801142e:	4a29      	ldr	r2, [pc, #164]	; (80114d4 <pif_sigTimer1ms+0x188>)
 8011430:	5cd3      	ldrb	r3, [r2, r3]
 8011432:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8011434:	4b26      	ldr	r3, [pc, #152]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011436:	785b      	ldrb	r3, [r3, #1]
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b02      	cmp	r3, #2
 801143c:	d117      	bne.n	801146e <pif_sigTimer1ms+0x122>
    					year = 2000 + pif_datetime.year;
 801143e:	4b24      	ldr	r3, [pc, #144]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	b2db      	uxtb	r3, r3
 8011444:	b29b      	uxth	r3, r3
 8011446:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801144a:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 801144c:	88bb      	ldrh	r3, [r7, #4]
 801144e:	2b03      	cmp	r3, #3
 8011450:	d80d      	bhi.n	801146e <pif_sigTimer1ms+0x122>
    						if (year / 100 == 0) {
 8011452:	88bb      	ldrh	r3, [r7, #4]
 8011454:	2b63      	cmp	r3, #99	; 0x63
 8011456:	d807      	bhi.n	8011468 <pif_sigTimer1ms+0x11c>
    							if (year / 400 == 0) days++;
 8011458:	88bb      	ldrh	r3, [r7, #4]
 801145a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801145e:	d206      	bcs.n	801146e <pif_sigTimer1ms+0x122>
 8011460:	79fb      	ldrb	r3, [r7, #7]
 8011462:	3301      	adds	r3, #1
 8011464:	71fb      	strb	r3, [r7, #7]
 8011466:	e002      	b.n	801146e <pif_sigTimer1ms+0x122>
    						}
    						else days++;
 8011468:	79fb      	ldrb	r3, [r7, #7]
 801146a:	3301      	adds	r3, #1
 801146c:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 801146e:	4b18      	ldr	r3, [pc, #96]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011470:	789b      	ldrb	r3, [r3, #2]
 8011472:	b2db      	uxtb	r3, r3
 8011474:	79fa      	ldrb	r2, [r7, #7]
 8011476:	429a      	cmp	r2, r3
 8011478:	d218      	bcs.n	80114ac <pif_sigTimer1ms+0x160>
    					pif_datetime.day = 1;
 801147a:	4b15      	ldr	r3, [pc, #84]	; (80114d0 <pif_sigTimer1ms+0x184>)
 801147c:	2201      	movs	r2, #1
 801147e:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011480:	4b13      	ldr	r3, [pc, #76]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011482:	785b      	ldrb	r3, [r3, #1]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	3301      	adds	r3, #1
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b11      	ldr	r3, [pc, #68]	; (80114d0 <pif_sigTimer1ms+0x184>)
 801148c:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 801148e:	4b10      	ldr	r3, [pc, #64]	; (80114d0 <pif_sigTimer1ms+0x184>)
 8011490:	785b      	ldrb	r3, [r3, #1]
 8011492:	b2db      	uxtb	r3, r3
 8011494:	2b0c      	cmp	r3, #12
 8011496:	d909      	bls.n	80114ac <pif_sigTimer1ms+0x160>
    						pif_datetime.month = 1;
 8011498:	4b0d      	ldr	r3, [pc, #52]	; (80114d0 <pif_sigTimer1ms+0x184>)
 801149a:	2201      	movs	r2, #1
 801149c:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 801149e:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	3301      	adds	r3, #1
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <pif_sigTimer1ms+0x184>)
 80114aa:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}
    	}
    }
}
 80114ac:	bf00      	nop
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	20001384 	.word	0x20001384
 80114bc:	20001380 	.word	0x20001380
 80114c0:	20001370 	.word	0x20001370
 80114c4:	2000136c 	.word	0x2000136c
 80114c8:	20001366 	.word	0x20001366
 80114cc:	20001368 	.word	0x20001368
 80114d0:	20002274 	.word	0x20002274
 80114d4:	08027f2c 	.word	0x08027f2c

080114d8 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	4603      	mov	r3, r0
 80114e0:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80114e2:	4b0a      	ldr	r3, [pc, #40]	; (801150c <pif_Delay1ms+0x34>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80114e8:	4b08      	ldr	r3, [pc, #32]	; (801150c <pif_Delay1ms+0x34>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80114f6:	897a      	ldrh	r2, [r7, #10]
 80114f8:	88fb      	ldrh	r3, [r7, #6]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d3f4      	bcc.n	80114e8 <pif_Delay1ms+0x10>
}
 80114fe:	bf00      	nop
 8011500:	bf00      	nop
 8011502:	3714      	adds	r7, #20
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	2000136c 	.word	0x2000136c

08011510 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 801151a:	4b0b      	ldr	r3, [pc, #44]	; (8011548 <pif_Delay1us+0x38>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4798      	blx	r3
 8011520:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 8011522:	4b09      	ldr	r3, [pc, #36]	; (8011548 <pif_Delay1us+0x38>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4798      	blx	r3
 8011528:	4603      	mov	r3, r0
 801152a:	b29a      	uxth	r2, r3
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	b29b      	uxth	r3, r3
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 8011534:	897a      	ldrh	r2, [r7, #10]
 8011536:	88fb      	ldrh	r3, [r7, #6]
 8011538:	429a      	cmp	r2, r3
 801153a:	d3f2      	bcc.n	8011522 <pif_Delay1us+0x12>
}
 801153c:	bf00      	nop
 801153e:	bf00      	nop
 8011540:	3710      	adds	r7, #16
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	2000137c 	.word	0x2000137c

0801154c <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 801154c:	b480      	push	{r7}
 801154e:	b089      	sub	sp, #36	; 0x24
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	4613      	mov	r3, r2
 8011558:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 801155e:	88fb      	ldrh	r3, [r7, #6]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d01b      	beq.n	801159c <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011564:	88fb      	ldrh	r3, [r7, #6]
 8011566:	3b01      	subs	r3, #1
 8011568:	61fb      	str	r3, [r7, #28]
 801156a:	e013      	b.n	8011594 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	fa22 f303 	lsr.w	r3, r2, r3
 8011574:	b2db      	uxtb	r3, r3
 8011576:	f003 0301 	and.w	r3, r3, #1
 801157a:	b2da      	uxtb	r2, r3
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	1c59      	adds	r1, r3, #1
 8011580:	61b9      	str	r1, [r7, #24]
 8011582:	4619      	mov	r1, r3
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	440b      	add	r3, r1
 8011588:	3230      	adds	r2, #48	; 0x30
 801158a:	b2d2      	uxtb	r2, r2
 801158c:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	3b01      	subs	r3, #1
 8011592:	61fb      	str	r3, [r7, #28]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	2b00      	cmp	r3, #0
 8011598:	dae8      	bge.n	801156c <pif_BinToString+0x20>
 801159a:	e030      	b.n	80115fe <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d025      	beq.n	80115ee <pif_BinToString+0xa2>
    	first = TRUE;
 80115a2:	2301      	movs	r3, #1
 80115a4:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115a6:	231f      	movs	r3, #31
 80115a8:	61fb      	str	r3, [r7, #28]
 80115aa:	e01c      	b.n	80115e6 <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 80115ac:	68ba      	ldr	r2, [r7, #8]
 80115ae:	69fb      	ldr	r3, [r7, #28]
 80115b0:	fa22 f303 	lsr.w	r3, r2, r3
 80115b4:	f003 0301 	and.w	r3, r3, #1
 80115b8:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 80115ba:	7dfb      	ldrb	r3, [r7, #23]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <pif_BinToString+0x7a>
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00c      	beq.n	80115e0 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	b2da      	uxtb	r2, r3
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	1c59      	adds	r1, r3, #1
 80115ce:	61b9      	str	r1, [r7, #24]
 80115d0:	4619      	mov	r1, r3
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	440b      	add	r3, r1
 80115d6:	3230      	adds	r2, #48	; 0x30
 80115d8:	b2d2      	uxtb	r2, r2
 80115da:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80115dc:	2300      	movs	r3, #0
 80115de:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	3b01      	subs	r3, #1
 80115e4:	61fb      	str	r3, [r7, #28]
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dadf      	bge.n	80115ac <pif_BinToString+0x60>
 80115ec:	e007      	b.n	80115fe <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	61ba      	str	r2, [r7, #24]
 80115f4:	461a      	mov	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	4413      	add	r3, r2
 80115fa:	2230      	movs	r2, #48	; 0x30
 80115fc:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80115fe:	69bb      	ldr	r3, [r7, #24]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3724      	adds	r7, #36	; 0x24
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 801160c:	b480      	push	{r7}
 801160e:	b08d      	sub	sp, #52	; 0x34
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	4613      	mov	r3, r2
 8011618:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 801162a:	4a44      	ldr	r2, [pc, #272]	; (801173c <pif_DecToString+0x130>)
 801162c:	f107 0314 	add.w	r3, r7, #20
 8011630:	ca07      	ldmia	r2, {r0, r1, r2}
 8011632:	c303      	stmia	r3!, {r0, r1}
 8011634:	801a      	strh	r2, [r3, #0]
 8011636:	3302      	adds	r3, #2
 8011638:	0c12      	lsrs	r2, r2, #16
 801163a:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d060      	beq.n	8011708 <pif_DecToString+0xfc>
        while (tmp_val) {
 8011646:	e02e      	b.n	80116a6 <pif_DecToString+0x9a>
        	exp_cnt++;
 8011648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801164a:	3301      	adds	r3, #1
 801164c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	2b09      	cmp	r3, #9
 8011652:	d915      	bls.n	8011680 <pif_DecToString+0x74>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011654:	6a39      	ldr	r1, [r7, #32]
 8011656:	4b3a      	ldr	r3, [pc, #232]	; (8011740 <pif_DecToString+0x134>)
 8011658:	fba3 2301 	umull	r2, r3, r3, r1
 801165c:	08da      	lsrs	r2, r3, #3
 801165e:	4613      	mov	r3, r2
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4413      	add	r3, r2
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	1aca      	subs	r2, r1, r3
 8011668:	b2d2      	uxtb	r2, r2
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	1c59      	adds	r1, r3, #1
 801166e:	6279      	str	r1, [r7, #36]	; 0x24
 8011670:	3230      	adds	r2, #48	; 0x30
 8011672:	b2d2      	uxtb	r2, r2
 8011674:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011678:	440b      	add	r3, r1
 801167a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801167e:	e00c      	b.n	801169a <pif_DecToString+0x8e>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011680:	6a3b      	ldr	r3, [r7, #32]
 8011682:	b2da      	uxtb	r2, r3
 8011684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011686:	1c59      	adds	r1, r3, #1
 8011688:	6279      	str	r1, [r7, #36]	; 0x24
 801168a:	3230      	adds	r2, #48	; 0x30
 801168c:	b2d2      	uxtb	r2, r2
 801168e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011692:	440b      	add	r3, r1
 8011694:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 8011698:	e008      	b.n	80116ac <pif_DecToString+0xa0>
            }
            tmp_val = tmp_val / 10;
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	4a28      	ldr	r2, [pc, #160]	; (8011740 <pif_DecToString+0x134>)
 801169e:	fba2 2303 	umull	r2, r3, r2, r3
 80116a2:	08db      	lsrs	r3, r3, #3
 80116a4:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 80116a6:	6a3b      	ldr	r3, [r7, #32]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1cd      	bne.n	8011648 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 80116ac:	88fb      	ldrh	r3, [r7, #6]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d026      	beq.n	8011700 <pif_DecToString+0xf4>
 80116b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116b4:	88fb      	ldrh	r3, [r7, #6]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d222      	bcs.n	8011700 <pif_DecToString+0xf4>
            zero_str_cnt = str_cnt - exp_cnt;
 80116ba:	88fa      	ldrh	r2, [r7, #6]
 80116bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116be:	1ad3      	subs	r3, r2, r3
 80116c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116c2:	e00a      	b.n	80116da <pif_DecToString+0xce>
            	p_buffer[idx++] = '0';
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80116ca:	461a      	mov	r2, r3
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	4413      	add	r3, r2
 80116d0:	2230      	movs	r2, #48	; 0x30
 80116d2:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80116d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116d6:	3b01      	subs	r3, #1
 80116d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1f1      	bne.n	80116c4 <pif_DecToString+0xb8>
            }
        }
        while (idx_inv) {
 80116e0:	e00e      	b.n	8011700 <pif_DecToString+0xf4>
            idx_inv--;
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	3b01      	subs	r3, #1
 80116e6:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80116e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80116ee:	461a      	mov	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	4413      	add	r3, r2
 80116f4:	f107 0114 	add.w	r1, r7, #20
 80116f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116fa:	440a      	add	r2, r1
 80116fc:	7812      	ldrb	r2, [r2, #0]
 80116fe:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1ed      	bne.n	80116e2 <pif_DecToString+0xd6>
 8011706:	e012      	b.n	801172e <pif_DecToString+0x122>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011708:	88fb      	ldrh	r3, [r7, #6]
 801170a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 801170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	62ba      	str	r2, [r7, #40]	; 0x28
 8011712:	461a      	mov	r2, r3
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	4413      	add	r3, r2
 8011718:	2230      	movs	r2, #48	; 0x30
 801171a:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 801171c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801171e:	2b00      	cmp	r3, #0
 8011720:	d002      	beq.n	8011728 <pif_DecToString+0x11c>
 8011722:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011724:	3b01      	subs	r3, #1
 8011726:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801172a:	2b00      	cmp	r3, #0
 801172c:	d1ee      	bne.n	801170c <pif_DecToString+0x100>
    }
    return idx;
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011730:	4618      	mov	r0, r3
 8011732:	3734      	adds	r7, #52	; 0x34
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	080262a8 	.word	0x080262a8
 8011740:	cccccccd 	.word	0xcccccccd

08011744 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011744:	b480      	push	{r7}
 8011746:	b08b      	sub	sp, #44	; 0x2c
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	4611      	mov	r1, r2
 8011750:	461a      	mov	r2, r3
 8011752:	460b      	mov	r3, r1
 8011754:	80fb      	strh	r3, [r7, #6]
 8011756:	4613      	mov	r3, r2
 8011758:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 801175a:	2300      	movs	r3, #0
 801175c:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 801175e:	797b      	ldrb	r3, [r7, #5]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d002      	beq.n	801176a <pif_HexToString+0x26>
 8011764:	4b2f      	ldr	r3, [pc, #188]	; (8011824 <pif_HexToString+0xe0>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	e001      	b.n	801176e <pif_HexToString+0x2a>
 801176a:	4b2f      	ldr	r3, [pc, #188]	; (8011828 <pif_HexToString+0xe4>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011770:	88fb      	ldrh	r3, [r7, #6]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d01d      	beq.n	80117b2 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011776:	88fb      	ldrh	r3, [r7, #6]
 8011778:	3b01      	subs	r3, #1
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	627b      	str	r3, [r7, #36]	; 0x24
 801177e:	e014      	b.n	80117aa <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011784:	fa22 f303 	lsr.w	r3, r2, r3
 8011788:	f003 030f 	and.w	r3, r3, #15
 801178c:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 801178e:	69ba      	ldr	r2, [r7, #24]
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	441a      	add	r2, r3
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	1c59      	adds	r1, r3, #1
 8011798:	6239      	str	r1, [r7, #32]
 801179a:	4619      	mov	r1, r3
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	440b      	add	r3, r1
 80117a0:	7812      	ldrb	r2, [r2, #0]
 80117a2:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 80117a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a6:	3b04      	subs	r3, #4
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	dae7      	bge.n	8011780 <pif_HexToString+0x3c>
 80117b0:	e030      	b.n	8011814 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d025      	beq.n	8011804 <pif_HexToString+0xc0>
    	first = TRUE;
 80117b8:	2301      	movs	r3, #1
 80117ba:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80117bc:	231c      	movs	r3, #28
 80117be:	627b      	str	r3, [r7, #36]	; 0x24
 80117c0:	e01c      	b.n	80117fc <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	fa22 f303 	lsr.w	r3, r2, r3
 80117ca:	f003 030f 	and.w	r3, r3, #15
 80117ce:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80117d0:	7ffb      	ldrb	r3, [r7, #31]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <pif_HexToString+0x98>
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00c      	beq.n	80117f6 <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80117dc:	69ba      	ldr	r2, [r7, #24]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	441a      	add	r2, r3
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	1c59      	adds	r1, r3, #1
 80117e6:	6239      	str	r1, [r7, #32]
 80117e8:	4619      	mov	r1, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	440b      	add	r3, r1
 80117ee:	7812      	ldrb	r2, [r2, #0]
 80117f0:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80117f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f8:	3b04      	subs	r3, #4
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dadf      	bge.n	80117c2 <pif_HexToString+0x7e>
 8011802:	e007      	b.n	8011814 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	623a      	str	r2, [r7, #32]
 801180a:	461a      	mov	r2, r3
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	4413      	add	r3, r2
 8011810:	2230      	movs	r2, #48	; 0x30
 8011812:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011814:	6a3b      	ldr	r3, [r7, #32]
}
 8011816:	4618      	mov	r0, r3
 8011818:	372c      	adds	r7, #44	; 0x2c
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	20000060 	.word	0x20000060
 8011828:	20000064 	.word	0x20000064

0801182c <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 801182c:	b590      	push	{r4, r7, lr}
 801182e:	b087      	sub	sp, #28
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	ed87 0b00 	vstr	d0, [r7]
 8011838:	460b      	mov	r3, r1
 801183a:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011840:	f04f 0200 	mov.w	r2, #0
 8011844:	f04f 0300 	mov.w	r3, #0
 8011848:	e9d7 0100 	ldrd	r0, r1, [r7]
 801184c:	f7ef f904 	bl	8000a58 <__aeabi_dcmplt>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d00d      	beq.n	8011872 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 8011856:	8abb      	ldrh	r3, [r7, #20]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	82ba      	strh	r2, [r7, #20]
 801185c:	461a      	mov	r2, r3
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	4413      	add	r3, r2
 8011862:	222d      	movs	r2, #45	; 0x2d
 8011864:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	603b      	str	r3, [r7, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8011870:	607b      	str	r3, [r7, #4]
	}

	num = (uint32_t)value;
 8011872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011876:	f7ef f93f 	bl	8000af8 <__aeabi_d2uiz>
 801187a:	4603      	mov	r3, r0
 801187c:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 801187e:	8abb      	ldrh	r3, [r7, #20]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	4413      	add	r3, r2
 8011884:	2200      	movs	r2, #0
 8011886:	6939      	ldr	r1, [r7, #16]
 8011888:	4618      	mov	r0, r3
 801188a:	f7ff febf 	bl	801160c <pif_DecToString>
 801188e:	4603      	mov	r3, r0
 8011890:	b29a      	uxth	r2, r3
 8011892:	8abb      	ldrh	r3, [r7, #20]
 8011894:	4413      	add	r3, r2
 8011896:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 8011898:	8abb      	ldrh	r3, [r7, #20]
 801189a:	1c5a      	adds	r2, r3, #1
 801189c:	82ba      	strh	r2, [r7, #20]
 801189e:	461a      	mov	r2, r3
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	4413      	add	r3, r2
 80118a4:	222e      	movs	r2, #46	; 0x2e
 80118a6:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 80118a8:	897b      	ldrh	r3, [r7, #10]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d101      	bne.n	80118b2 <pif_FloatToString+0x86>
 80118ae:	2306      	movs	r3, #6
 80118b0:	817b      	strh	r3, [r7, #10]
	value -= num;
 80118b2:	6938      	ldr	r0, [r7, #16]
 80118b4:	f7ee fde4 	bl	8000480 <__aeabi_ui2d>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118c0:	f7ee fca0 	bl	8000204 <__aeabi_dsub>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80118cc:	2300      	movs	r3, #0
 80118ce:	82fb      	strh	r3, [r7, #22]
 80118d0:	e00d      	b.n	80118ee <pif_FloatToString+0xc2>
 80118d2:	f04f 0200 	mov.w	r2, #0
 80118d6:	4b13      	ldr	r3, [pc, #76]	; (8011924 <pif_FloatToString+0xf8>)
 80118d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118dc:	f7ee fe4a 	bl	8000574 <__aeabi_dmul>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	e9c7 2300 	strd	r2, r3, [r7]
 80118e8:	8afb      	ldrh	r3, [r7, #22]
 80118ea:	3301      	adds	r3, #1
 80118ec:	82fb      	strh	r3, [r7, #22]
 80118ee:	8afa      	ldrh	r2, [r7, #22]
 80118f0:	897b      	ldrh	r3, [r7, #10]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d3ed      	bcc.n	80118d2 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 80118f6:	8abb      	ldrh	r3, [r7, #20]
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	18d4      	adds	r4, r2, r3
 80118fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011900:	f7ef f8fa 	bl	8000af8 <__aeabi_d2uiz>
 8011904:	4601      	mov	r1, r0
 8011906:	897b      	ldrh	r3, [r7, #10]
 8011908:	461a      	mov	r2, r3
 801190a:	4620      	mov	r0, r4
 801190c:	f7ff fe7e 	bl	801160c <pif_DecToString>
 8011910:	4603      	mov	r3, r0
 8011912:	b29a      	uxth	r2, r3
 8011914:	8abb      	ldrh	r3, [r7, #20]
 8011916:	4413      	add	r3, r2
 8011918:	82bb      	strh	r3, [r7, #20]
    return idx;
 801191a:	8abb      	ldrh	r3, [r7, #20]
}
 801191c:	4618      	mov	r0, r3
 801191e:	371c      	adds	r7, #28
 8011920:	46bd      	mov	sp, r7
 8011922:	bd90      	pop	{r4, r7, pc}
 8011924:	40240000 	.word	0x40240000

08011928 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08c      	sub	sp, #48	; 0x30
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011934:	2300      	movs	r3, #0
 8011936:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011938:	e242      	b.n	8011dc0 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	2b25      	cmp	r3, #37	; 0x25
 8011940:	f040 8230 	bne.w	8011da4 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011948:	2300      	movs	r3, #0
 801194a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	3301      	adds	r3, #1
 8011952:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	3b25      	subs	r3, #37	; 0x25
 801195a:	2b53      	cmp	r3, #83	; 0x53
 801195c:	f200 822d 	bhi.w	8011dba <pif_PrintFormat+0x492>
 8011960:	a201      	add	r2, pc, #4	; (adr r2, 8011968 <pif_PrintFormat+0x40>)
 8011962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011966:	bf00      	nop
 8011968:	08011d93 	.word	0x08011d93
 801196c:	08011dbb 	.word	0x08011dbb
 8011970:	08011dbb 	.word	0x08011dbb
 8011974:	08011dbb 	.word	0x08011dbb
 8011978:	08011dbb 	.word	0x08011dbb
 801197c:	08011dbb 	.word	0x08011dbb
 8011980:	08011dbb 	.word	0x08011dbb
 8011984:	08011dbb 	.word	0x08011dbb
 8011988:	08011dbb 	.word	0x08011dbb
 801198c:	08011dbb 	.word	0x08011dbb
 8011990:	08011dbb 	.word	0x08011dbb
 8011994:	08011ab9 	.word	0x08011ab9
 8011998:	08011ab9 	.word	0x08011ab9
 801199c:	08011ab9 	.word	0x08011ab9
 80119a0:	08011ab9 	.word	0x08011ab9
 80119a4:	08011ab9 	.word	0x08011ab9
 80119a8:	08011ab9 	.word	0x08011ab9
 80119ac:	08011ab9 	.word	0x08011ab9
 80119b0:	08011ab9 	.word	0x08011ab9
 80119b4:	08011ab9 	.word	0x08011ab9
 80119b8:	08011ab9 	.word	0x08011ab9
 80119bc:	08011dbb 	.word	0x08011dbb
 80119c0:	08011dbb 	.word	0x08011dbb
 80119c4:	08011dbb 	.word	0x08011dbb
 80119c8:	08011dbb 	.word	0x08011dbb
 80119cc:	08011dbb 	.word	0x08011dbb
 80119d0:	08011dbb 	.word	0x08011dbb
 80119d4:	08011dbb 	.word	0x08011dbb
 80119d8:	08011dbb 	.word	0x08011dbb
 80119dc:	08011dbb 	.word	0x08011dbb
 80119e0:	08011dbb 	.word	0x08011dbb
 80119e4:	08011dbb 	.word	0x08011dbb
 80119e8:	08011dbb 	.word	0x08011dbb
 80119ec:	08011dbb 	.word	0x08011dbb
 80119f0:	08011dbb 	.word	0x08011dbb
 80119f4:	08011dbb 	.word	0x08011dbb
 80119f8:	08011dbb 	.word	0x08011dbb
 80119fc:	08011dbb 	.word	0x08011dbb
 8011a00:	08011dbb 	.word	0x08011dbb
 8011a04:	08011dbb 	.word	0x08011dbb
 8011a08:	08011dbb 	.word	0x08011dbb
 8011a0c:	08011dbb 	.word	0x08011dbb
 8011a10:	08011dbb 	.word	0x08011dbb
 8011a14:	08011dbb 	.word	0x08011dbb
 8011a18:	08011dbb 	.word	0x08011dbb
 8011a1c:	08011dbb 	.word	0x08011dbb
 8011a20:	08011dbb 	.word	0x08011dbb
 8011a24:	08011dbb 	.word	0x08011dbb
 8011a28:	08011dbb 	.word	0x08011dbb
 8011a2c:	08011dbb 	.word	0x08011dbb
 8011a30:	08011dbb 	.word	0x08011dbb
 8011a34:	08011c8f 	.word	0x08011c8f
 8011a38:	08011dbb 	.word	0x08011dbb
 8011a3c:	08011dbb 	.word	0x08011dbb
 8011a40:	08011dbb 	.word	0x08011dbb
 8011a44:	08011dbb 	.word	0x08011dbb
 8011a48:	08011dbb 	.word	0x08011dbb
 8011a4c:	08011dbb 	.word	0x08011dbb
 8011a50:	08011dbb 	.word	0x08011dbb
 8011a54:	08011dbb 	.word	0x08011dbb
 8011a58:	08011dbb 	.word	0x08011dbb
 8011a5c:	08011adf 	.word	0x08011adf
 8011a60:	08011d75 	.word	0x08011d75
 8011a64:	08011b37 	.word	0x08011b37
 8011a68:	08011dbb 	.word	0x08011dbb
 8011a6c:	08011ce7 	.word	0x08011ce7
 8011a70:	08011dbb 	.word	0x08011dbb
 8011a74:	08011dbb 	.word	0x08011dbb
 8011a78:	08011b37 	.word	0x08011b37
 8011a7c:	08011dbb 	.word	0x08011dbb
 8011a80:	08011dbb 	.word	0x08011dbb
 8011a84:	08011ad7 	.word	0x08011ad7
 8011a88:	08011dbb 	.word	0x08011dbb
 8011a8c:	08011dbb 	.word	0x08011dbb
 8011a90:	08011dbb 	.word	0x08011dbb
 8011a94:	08011dbb 	.word	0x08011dbb
 8011a98:	08011dbb 	.word	0x08011dbb
 8011a9c:	08011dbb 	.word	0x08011dbb
 8011aa0:	08011d1d 	.word	0x08011d1d
 8011aa4:	08011dbb 	.word	0x08011dbb
 8011aa8:	08011bdf 	.word	0x08011bdf
 8011aac:	08011dbb 	.word	0x08011dbb
 8011ab0:	08011dbb 	.word	0x08011dbb
 8011ab4:	08011c37 	.word	0x08011c37
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 8011ab8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011aba:	461a      	mov	r2, r3
 8011abc:	0092      	lsls	r2, r2, #2
 8011abe:	4413      	add	r3, r2
 8011ac0:	005b      	lsls	r3, r3, #1
 8011ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011acc:	4413      	add	r3, r2
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	3b30      	subs	r3, #48	; 0x30
 8011ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011ad4:	e73b      	b.n	801194e <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011adc:	e737      	b.n	801194e <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011ade:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d013      	beq.n	8011b0e <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	1d19      	adds	r1, r3, #4
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	6011      	str	r1, [r2, #0]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	68fa      	ldr	r2, [r7, #12]
 8011af8:	4413      	add	r3, r2
 8011afa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011afc:	6979      	ldr	r1, [r7, #20]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff fd24 	bl	801154c <pif_BinToString>
 8011b04:	4602      	mov	r2, r0
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	4413      	add	r3, r2
 8011b0a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011b0c:	e155      	b.n	8011dba <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	1d19      	adds	r1, r3, #4
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	6011      	str	r1, [r2, #0]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011b1c:	6a3b      	ldr	r3, [r7, #32]
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	4413      	add	r3, r2
 8011b22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b24:	69b9      	ldr	r1, [r7, #24]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff fd10 	bl	801154c <pif_BinToString>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	6a3b      	ldr	r3, [r7, #32]
 8011b30:	4413      	add	r3, r2
 8011b32:	623b      	str	r3, [r7, #32]
                    break;
 8011b34:	e141      	b.n	8011dba <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011b36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d027      	beq.n	8011b8e <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	1d19      	adds	r1, r3, #4
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	6011      	str	r1, [r2, #0]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	da10      	bge.n	8011b74 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011b52:	6a3b      	ldr	r3, [r7, #32]
 8011b54:	1c5a      	adds	r2, r3, #1
 8011b56:	623a      	str	r2, [r7, #32]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	222d      	movs	r2, #45	; 0x2d
 8011b60:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b64:	425b      	negs	r3, r3
 8011b66:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <pif_PrintFormat+0x24c>
 8011b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b70:	3b01      	subs	r3, #1
 8011b72:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	68fa      	ldr	r2, [r7, #12]
 8011b78:	4413      	add	r3, r2
 8011b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff fd44 	bl	801160c <pif_DecToString>
 8011b84:	4602      	mov	r2, r0
 8011b86:	6a3b      	ldr	r3, [r7, #32]
 8011b88:	4413      	add	r3, r2
 8011b8a:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011b8c:	e115      	b.n	8011dba <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	1d19      	adds	r1, r3, #4
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	6011      	str	r1, [r2, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	da10      	bge.n	8011bc4 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	1c5a      	adds	r2, r3, #1
 8011ba6:	623a      	str	r2, [r7, #32]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	4413      	add	r3, r2
 8011bae:	222d      	movs	r2, #45	; 0x2d
 8011bb0:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	425b      	negs	r3, r3
 8011bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8011bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d002      	beq.n	8011bc4 <pif_PrintFormat+0x29c>
 8011bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bc0:	3b01      	subs	r3, #1
 8011bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	4413      	add	r3, r2
 8011bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ff fd1c 	bl	801160c <pif_DecToString>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	6a3b      	ldr	r3, [r7, #32]
 8011bd8:	4413      	add	r3, r2
 8011bda:	623b      	str	r3, [r7, #32]
                    break;
 8011bdc:	e0ed      	b.n	8011dba <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011bde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d013      	beq.n	8011c0e <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	1d19      	adds	r1, r3, #4
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	6011      	str	r1, [r2, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011bf4:	6a3b      	ldr	r3, [r7, #32]
 8011bf6:	68fa      	ldr	r2, [r7, #12]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bfc:	6979      	ldr	r1, [r7, #20]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fd04 	bl	801160c <pif_DecToString>
 8011c04:	4602      	mov	r2, r0
 8011c06:	6a3b      	ldr	r3, [r7, #32]
 8011c08:	4413      	add	r3, r2
 8011c0a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011c0c:	e0d5      	b.n	8011dba <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	1d19      	adds	r1, r3, #4
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	6011      	str	r1, [r2, #0]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011c1c:	6a3b      	ldr	r3, [r7, #32]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	4413      	add	r3, r2
 8011c22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c24:	69b9      	ldr	r1, [r7, #24]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7ff fcf0 	bl	801160c <pif_DecToString>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	6a3b      	ldr	r3, [r7, #32]
 8011c30:	4413      	add	r3, r2
 8011c32:	623b      	str	r3, [r7, #32]
                    break;
 8011c34:	e0c1      	b.n	8011dba <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011c36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d013      	beq.n	8011c66 <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	1d19      	adds	r1, r3, #4
 8011c44:	68ba      	ldr	r2, [r7, #8]
 8011c46:	6011      	str	r1, [r2, #0]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8011c4c:	6a3b      	ldr	r3, [r7, #32]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	18d0      	adds	r0, r2, r3
 8011c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c54:	2300      	movs	r3, #0
 8011c56:	6979      	ldr	r1, [r7, #20]
 8011c58:	f7ff fd74 	bl	8011744 <pif_HexToString>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	6a3b      	ldr	r3, [r7, #32]
 8011c60:	4413      	add	r3, r2
 8011c62:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011c64:	e0a9      	b.n	8011dba <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	1d19      	adds	r1, r3, #4
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	6011      	str	r1, [r2, #0]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	18d0      	adds	r0, r2, r3
 8011c7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	69b9      	ldr	r1, [r7, #24]
 8011c80:	f7ff fd60 	bl	8011744 <pif_HexToString>
 8011c84:	4602      	mov	r2, r0
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	4413      	add	r3, r2
 8011c8a:	623b      	str	r3, [r7, #32]
                    break;
 8011c8c:	e095      	b.n	8011dba <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011c8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d013      	beq.n	8011cbe <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	1d19      	adds	r1, r3, #4
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	6011      	str	r1, [r2, #0]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	18d0      	adds	r0, r2, r3
 8011caa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011cac:	2301      	movs	r3, #1
 8011cae:	6979      	ldr	r1, [r7, #20]
 8011cb0:	f7ff fd48 	bl	8011744 <pif_HexToString>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	4413      	add	r3, r2
 8011cba:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011cbc:	e07d      	b.n	8011dba <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	1d19      	adds	r1, r3, #4
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	6011      	str	r1, [r2, #0]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	18d0      	adds	r0, r2, r3
 8011cd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	69b9      	ldr	r1, [r7, #24]
 8011cd8:	f7ff fd34 	bl	8011744 <pif_HexToString>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	623b      	str	r3, [r7, #32]
                    break;
 8011ce4:	e069      	b.n	8011dba <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	18d0      	adds	r0, r2, r3
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	3307      	adds	r3, #7
 8011cf2:	f023 0307 	bic.w	r3, r3, #7
 8011cf6:	f103 0108 	add.w	r1, r3, #8
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	6011      	str	r1, [r2, #0]
 8011cfe:	ed93 7b00 	vldr	d7, [r3]
 8011d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d04:	4619      	mov	r1, r3
 8011d06:	eeb0 0a47 	vmov.f32	s0, s14
 8011d0a:	eef0 0a67 	vmov.f32	s1, s15
 8011d0e:	f7ff fd8d 	bl	801182c <pif_FloatToString>
 8011d12:	4602      	mov	r2, r0
 8011d14:	6a3b      	ldr	r3, [r7, #32]
 8011d16:	4413      	add	r3, r2
 8011d18:	623b      	str	r3, [r7, #32]
                    break;
 8011d1a:	e04e      	b.n	8011dba <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	1d19      	adds	r1, r3, #4
 8011d22:	68ba      	ldr	r2, [r7, #8]
 8011d24:	6011      	str	r1, [r2, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d043      	beq.n	8011db8 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011d30:	6938      	ldr	r0, [r7, #16]
 8011d32:	f7ee fa5b 	bl	80001ec <strlen>
 8011d36:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011d38:	6a3a      	ldr	r2, [r7, #32]
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	2b4e      	cmp	r3, #78	; 0x4e
 8011d40:	d807      	bhi.n	8011d52 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	4413      	add	r3, r2
 8011d48:	6939      	ldr	r1, [r7, #16]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f00f ffde 	bl	8021d0c <strcpy>
 8011d50:	e00b      	b.n	8011d6a <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011d58:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011d5a:	6a3b      	ldr	r3, [r7, #32]
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	4413      	add	r3, r2
 8011d60:	69fa      	ldr	r2, [r7, #28]
 8011d62:	6939      	ldr	r1, [r7, #16]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f00f fffb 	bl	8021d60 <strncpy>
						}
						offset += size;
 8011d6a:	6a3a      	ldr	r2, [r7, #32]
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	4413      	add	r3, r2
 8011d70:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011d72:	e021      	b.n	8011db8 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	1d19      	adds	r1, r3, #4
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	6011      	str	r1, [r2, #0]
 8011d7e:	6819      	ldr	r1, [r3, #0]
 8011d80:	6a3b      	ldr	r3, [r7, #32]
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	623a      	str	r2, [r7, #32]
 8011d86:	461a      	mov	r2, r3
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	b2ca      	uxtb	r2, r1
 8011d8e:	701a      	strb	r2, [r3, #0]
                    break;
 8011d90:	e013      	b.n	8011dba <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011d92:	6a3b      	ldr	r3, [r7, #32]
 8011d94:	1c5a      	adds	r2, r3, #1
 8011d96:	623a      	str	r2, [r7, #32]
 8011d98:	461a      	mov	r2, r3
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	2225      	movs	r2, #37	; 0x25
 8011da0:	701a      	strb	r2, [r3, #0]
                    break;
 8011da2:	e00a      	b.n	8011dba <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	1c5a      	adds	r2, r3, #1
 8011da8:	623a      	str	r2, [r7, #32]
 8011daa:	461a      	mov	r2, r3
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	4413      	add	r3, r2
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	e000      	b.n	8011dba <pif_PrintFormat+0x492>
                    break;
 8011db8:	bf00      	nop
        }
        p_format = p_format + 1;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f47f adb8 	bne.w	801193a <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	4413      	add	r3, r2
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	701a      	strb	r2, [r3, #0]
}
 8011dd4:	bf00      	nop
 8011dd6:	3730      	adds	r7, #48	; 0x30
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011ddc:	b40e      	push	{r1, r2, r3}
 8011dde:	b580      	push	{r7, lr}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011de6:	f107 0320 	add.w	r3, r7, #32
 8011dea:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011dec:	f107 030c 	add.w	r3, r7, #12
 8011df0:	69fa      	ldr	r2, [r7, #28]
 8011df2:	4619      	mov	r1, r3
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff fd97 	bl	8011928 <pif_PrintFormat>
	va_end(data);
}
 8011dfa:	bf00      	nop
 8011dfc:	3714      	adds	r7, #20
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e04:	b003      	add	sp, #12
 8011e06:	4770      	bx	lr

08011e08 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	4603      	mov	r3, r0
 8011e10:	460a      	mov	r2, r1
 8011e12:	80fb      	strh	r3, [r7, #6]
 8011e14:	4613      	mov	r3, r2
 8011e16:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011e18:	797b      	ldrb	r3, [r7, #5]
 8011e1a:	021b      	lsls	r3, r3, #8
 8011e1c:	b21a      	sxth	r2, r3
 8011e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e22:	4053      	eors	r3, r2
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e28:	2300      	movs	r3, #0
 8011e2a:	81fb      	strh	r3, [r7, #14]
 8011e2c:	e013      	b.n	8011e56 <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	da09      	bge.n	8011e4a <pifCrc16_Add+0x42>
 8011e36:	88fb      	ldrh	r3, [r7, #6]
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	b21b      	sxth	r3, r3
 8011e3c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011e40:	f083 0301 	eor.w	r3, r3, #1
 8011e44:	b21b      	sxth	r3, r3
 8011e46:	80fb      	strh	r3, [r7, #6]
 8011e48:	e002      	b.n	8011e50 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011e4a:	88fb      	ldrh	r3, [r7, #6]
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e50:	89fb      	ldrh	r3, [r7, #14]
 8011e52:	3301      	adds	r3, #1
 8011e54:	81fb      	strh	r3, [r7, #14]
 8011e56:	89fb      	ldrh	r3, [r7, #14]
 8011e58:	2b07      	cmp	r3, #7
 8011e5a:	d9e8      	bls.n	8011e2e <pifCrc16_Add+0x26>
    }
	return crc;
 8011e5c:	88fb      	ldrh	r3, [r7, #6]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b084      	sub	sp, #16
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
 8011e72:	460b      	mov	r3, r1
 8011e74:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	81fb      	strh	r3, [r7, #14]
 8011e7e:	e00d      	b.n	8011e9c <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011e80:	89fb      	ldrh	r3, [r7, #14]
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	4413      	add	r3, r2
 8011e86:	781a      	ldrb	r2, [r3, #0]
 8011e88:	89bb      	ldrh	r3, [r7, #12]
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff ffbb 	bl	8011e08 <pifCrc16_Add>
 8011e92:	4603      	mov	r3, r0
 8011e94:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011e96:	89fb      	ldrh	r3, [r7, #14]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	81fb      	strh	r3, [r7, #14]
 8011e9c:	89fa      	ldrh	r2, [r7, #14]
 8011e9e:	887b      	ldrh	r3, [r7, #2]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d3ed      	bcc.n	8011e80 <pifCrc16+0x16>
	}
	return crc;
 8011ea4:	89bb      	ldrh	r3, [r7, #12]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3710      	adds	r7, #16
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011eae:	b480      	push	{r7}
 8011eb0:	b085      	sub	sp, #20
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	81fb      	strh	r3, [r7, #14]
 8011ec2:	e009      	b.n	8011ed8 <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	4413      	add	r3, r2
 8011eca:	781a      	ldrb	r2, [r3, #0]
 8011ecc:	7b7b      	ldrb	r3, [r7, #13]
 8011ece:	4053      	eors	r3, r2
 8011ed0:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011ed2:	89fb      	ldrh	r3, [r7, #14]
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	81fb      	strh	r3, [r7, #14]
 8011ed8:	89fa      	ldrh	r2, [r7, #14]
 8011eda:	887b      	ldrh	r3, [r7, #2]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d3f1      	bcc.n	8011ec4 <pifCheckXor+0x16>
	}
	return xor;
 8011ee0:	7b7b      	ldrb	r3, [r7, #13]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3714      	adds	r7, #20
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	b082      	sub	sp, #8
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	699b      	ldr	r3, [r3, #24]
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f002 f868 	bl	8013fd4 <pifRingBuffer_GetByte>
 8011f04:	4603      	mov	r3, r0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3708      	adds	r7, #8
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b086      	sub	sp, #24
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	60f8      	str	r0, [r7, #12]
 8011f16:	60b9      	str	r1, [r7, #8]
 8011f18:	4613      	mov	r3, r2
 8011f1a:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	695b      	ldr	r3, [r3, #20]
 8011f20:	4618      	mov	r0, r3
 8011f22:	f001 ff4a 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8011f26:	4603      	mov	r3, r0
 8011f28:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011f2a:	8afb      	ldrh	r3, [r7, #22]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d101      	bne.n	8011f34 <_actSendData+0x26>
 8011f30:	2300      	movs	r3, #0
 8011f32:	e012      	b.n	8011f5a <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011f34:	88fa      	ldrh	r2, [r7, #6]
 8011f36:	8afb      	ldrh	r3, [r7, #22]
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d901      	bls.n	8011f40 <_actSendData+0x32>
 8011f3c:	8afb      	ldrh	r3, [r7, #22]
 8011f3e:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	695b      	ldr	r3, [r3, #20]
 8011f44:	88fa      	ldrh	r2, [r7, #6]
 8011f46:	68b9      	ldr	r1, [r7, #8]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f001 ffab 	bl	8013ea4 <pifRingBuffer_PutData>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <_actSendData+0x4a>
		return size;
 8011f54:	88fb      	ldrh	r3, [r7, #6]
 8011f56:	e000      	b.n	8011f5a <_actSendData+0x4c>
	}
	return 0;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3718      	adds	r7, #24
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
	...

08011f64 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	689b      	ldr	r3, [r3, #8]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d008      	beq.n	8011f86 <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	6a10      	ldr	r0, [r2, #32]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	6892      	ldr	r2, [r2, #8]
 8011f80:	4611      	mov	r1, r2
 8011f82:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011f84:	e025      	b.n	8011fd2 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d021      	beq.n	8011fd2 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	6a12      	ldr	r2, [r2, #32]
 8011f96:	4911      	ldr	r1, [pc, #68]	; (8011fdc <_sendData+0x78>)
 8011f98:	4610      	mov	r0, r2
 8011f9a:	4798      	blx	r3
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d017      	beq.n	8011fd2 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d112      	bne.n	8011fd2 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d00a      	beq.n	8011fd2 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	4798      	blx	r3
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d103      	bne.n	8011fd2 <_sendData+0x6e>
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011fd2:	bf00      	nop
 8011fd4:	3708      	adds	r7, #8
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	08011f0f 	.word	0x08011f0f

08011fe0 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	460b      	mov	r3, r1
 8011fea:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d104      	bne.n	8011ffc <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011ff2:	4b0e      	ldr	r3, [pc, #56]	; (801202c <pifComm_Init+0x4c>)
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e012      	b.n	8012022 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011ffc:	2230      	movs	r2, #48	; 0x30
 8011ffe:	2100      	movs	r1, #0
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f00f fd79 	bl	8021af8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8012006:	887b      	ldrh	r3, [r7, #2]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <pifComm_Init+0x3a>
 801200c:	4b08      	ldr	r3, [pc, #32]	; (8012030 <pifComm_Init+0x50>)
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	b291      	uxth	r1, r2
 8012014:	4a06      	ldr	r2, [pc, #24]	; (8012030 <pifComm_Init+0x50>)
 8012016:	8011      	strh	r1, [r2, #0]
 8012018:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	887a      	ldrh	r2, [r7, #2]
 801201e:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8012020:	2301      	movs	r3, #1
}
 8012022:	4618      	mov	r0, r3
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	20001365 	.word	0x20001365
 8012030:	2000005c 	.word	0x2000005c

08012034 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	69db      	ldr	r3, [r3, #28]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d007      	beq.n	8012054 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	69db      	ldr	r3, [r3, #28]
 8012048:	4618      	mov	r0, r3
 801204a:	f002 fc4b 	bl	80148e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	699b      	ldr	r3, [r3, #24]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d004      	beq.n	8012066 <pifComm_Clear+0x32>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	3318      	adds	r3, #24
 8012060:	4618      	mov	r0, r3
 8012062:	f001 fd97 	bl	8013b94 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	695b      	ldr	r3, [r3, #20]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d004      	beq.n	8012078 <pifComm_Clear+0x44>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	3314      	adds	r3, #20
 8012072:	4618      	mov	r0, r3
 8012074:	f001 fd8e 	bl	8013b94 <pifRingBuffer_Destroy>
}
 8012078:	bf00      	nop
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	460b      	mov	r3, r1
 801208a:	807b      	strh	r3, [r7, #2]
 801208c:	4613      	mov	r3, r2
 801208e:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8012090:	887b      	ldrh	r3, [r7, #2]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d104      	bne.n	80120a0 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8012096:	4b1a      	ldr	r3, [pc, #104]	; (8012100 <pifComm_AllocRxBuffer+0x80>)
 8012098:	2201      	movs	r2, #1
 801209a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801209c:	2300      	movs	r3, #0
 801209e:	e02a      	b.n	80120f6 <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 80120a0:	887b      	ldrh	r3, [r7, #2]
 80120a2:	4619      	mov	r1, r3
 80120a4:	2000      	movs	r0, #0
 80120a6:	f001 fd49 	bl	8013b3c <pifRingBuffer_CreateHeap>
 80120aa:	4602      	mov	r2, r0
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <pifComm_AllocRxBuffer+0x3c>
 80120b8:	2300      	movs	r3, #0
 80120ba:	e01c      	b.n	80120f6 <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 80120bc:	787b      	ldrb	r3, [r7, #1]
 80120be:	2b64      	cmp	r3, #100	; 0x64
 80120c0:	d901      	bls.n	80120c6 <pifComm_AllocRxBuffer+0x46>
 80120c2:	2364      	movs	r3, #100	; 0x64
 80120c4:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 80120c6:	887b      	ldrh	r3, [r7, #2]
 80120c8:	2264      	movs	r2, #100	; 0x64
 80120ca:	fb02 f203 	mul.w	r2, r2, r3
 80120ce:	787b      	ldrb	r3, [r7, #1]
 80120d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d102      	bne.n	80120e8 <pifComm_AllocRxBuffer+0x68>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2201      	movs	r2, #1
 80120e6:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	4905      	ldr	r1, [pc, #20]	; (8012104 <pifComm_AllocRxBuffer+0x84>)
 80120ee:	4618      	mov	r0, r3
 80120f0:	f001 fdcb 	bl	8013c8a <pifRingBuffer_SetName>
    return TRUE;
 80120f4:	2301      	movs	r3, #1
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	20001365 	.word	0x20001365
 8012104:	080262b4 	.word	0x080262b4

08012108 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8012114:	887b      	ldrh	r3, [r7, #2]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d104      	bne.n	8012124 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 801211a:	4b0f      	ldr	r3, [pc, #60]	; (8012158 <pifComm_AllocTxBuffer+0x50>)
 801211c:	2201      	movs	r2, #1
 801211e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012120:	2300      	movs	r3, #0
 8012122:	e014      	b.n	801214e <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8012124:	887b      	ldrh	r3, [r7, #2]
 8012126:	4619      	mov	r1, r3
 8012128:	2000      	movs	r0, #0
 801212a:	f001 fd07 	bl	8013b3c <pifRingBuffer_CreateHeap>
 801212e:	4602      	mov	r2, r0
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	695b      	ldr	r3, [r3, #20]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d101      	bne.n	8012140 <pifComm_AllocTxBuffer+0x38>
 801213c:	2300      	movs	r3, #0
 801213e:	e006      	b.n	801214e <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	695b      	ldr	r3, [r3, #20]
 8012144:	4905      	ldr	r1, [pc, #20]	; (801215c <pifComm_AllocTxBuffer+0x54>)
 8012146:	4618      	mov	r0, r3
 8012148:	f001 fd9f 	bl	8013c8a <pifRingBuffer_SetName>
	return TRUE;
 801214c:	2301      	movs	r3, #1
}
 801214e:	4618      	mov	r0, r3
 8012150:	3708      	adds	r7, #8
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	20001365 	.word	0x20001365
 801215c:	080262b8 	.word	0x080262b8

08012160 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	683a      	ldr	r2, [r7, #0]
 801217e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012180:	bf00      	nop
 8012182:	3714      	adds	r7, #20
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2200      	movs	r2, #0
 801219e:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80121a6:	bf00      	nop
 80121a8:	370c      	adds	r7, #12
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr

080121b2 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b082      	sub	sp, #8
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	460b      	mov	r3, r1
 80121bc:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	699b      	ldr	r3, [r3, #24]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d101      	bne.n	80121ca <pifComm_PutRxByte+0x18>
 80121c6:	2300      	movs	r3, #0
 80121c8:	e01b      	b.n	8012202 <pifComm_PutRxByte+0x50>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	699b      	ldr	r3, [r3, #24]
 80121ce:	78fa      	ldrb	r2, [r7, #3]
 80121d0:	4611      	mov	r1, r2
 80121d2:	4618      	mov	r0, r3
 80121d4:	f001 fe32 	bl	8013e3c <pifRingBuffer_PutByte>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <pifComm_PutRxByte+0x30>
 80121de:	2300      	movs	r3, #0
 80121e0:	e00f      	b.n	8012202 <pifComm_PutRxByte+0x50>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) p_owner->_p_task->immediate = TRUE;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	699b      	ldr	r3, [r3, #24]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f001 fd9c 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80121ec:	4603      	mov	r3, r0
 80121ee:	461a      	mov	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d303      	bcc.n	8012200 <pifComm_PutRxByte+0x4e>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	69db      	ldr	r3, [r3, #28]
 80121fc:	2201      	movs	r2, #1
 80121fe:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8012200:	2301      	movs	r3, #1
}
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b086      	sub	sp, #24
 801220e:	af00      	add	r7, sp, #0
 8012210:	60f8      	str	r0, [r7, #12]
 8012212:	60b9      	str	r1, [r7, #8]
 8012214:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d101      	bne.n	8012222 <pifComm_StartGetTxData+0x18>
 801221e:	2300      	movs	r3, #0
 8012220:	e027      	b.n	8012272 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	695b      	ldr	r3, [r3, #20]
 8012226:	4618      	mov	r0, r3
 8012228:	f001 fd69 	bl	8013cfe <pifRingBuffer_IsEmpty>
 801222c:	4603      	mov	r3, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d001      	beq.n	8012236 <pifComm_StartGetTxData+0x2c>
 8012232:	2302      	movs	r3, #2
 8012234:	e01d      	b.n	8012272 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	2100      	movs	r1, #0
 801223c:	4618      	mov	r0, r3
 801223e:	f001 fd32 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8012242:	4602      	mov	r2, r0
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	695b      	ldr	r3, [r3, #20]
 801224c:	2100      	movs	r1, #0
 801224e:	4618      	mov	r0, r3
 8012250:	f001 fd8a 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8012254:	4603      	mov	r3, r0
 8012256:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	881b      	ldrh	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d004      	beq.n	801226a <pifComm_StartGetTxData+0x60>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	881b      	ldrh	r3, [r3, #0]
 8012264:	8afa      	ldrh	r2, [r7, #22]
 8012266:	429a      	cmp	r2, r3
 8012268:	d802      	bhi.n	8012270 <pifComm_StartGetTxData+0x66>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	8afa      	ldrh	r2, [r7, #22]
 801226e:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012270:	2301      	movs	r3, #1
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b082      	sub	sp, #8
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	460b      	mov	r3, r1
 8012284:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	695b      	ldr	r3, [r3, #20]
 801228a:	887a      	ldrh	r2, [r7, #2]
 801228c:	4611      	mov	r1, r2
 801228e:	4618      	mov	r0, r3
 8012290:	f001 ff11 	bl	80140b6 <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	695b      	ldr	r3, [r3, #20]
 8012298:	4618      	mov	r0, r3
 801229a:	f001 fd30 	bl	8013cfe <pifRingBuffer_IsEmpty>
 801229e:	4603      	mov	r3, r0
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	b2db      	uxtb	r3, r3
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	p_owner->_p_task->immediate = TRUE;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	69db      	ldr	r3, [r3, #28]
 80122c0:	2201      	movs	r2, #1
 80122c2:	705a      	strb	r2, [r3, #1]
}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d017      	beq.n	8012316 <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d008      	beq.n	8012300 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	6a10      	ldr	r0, [r2, #32]
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	6852      	ldr	r2, [r2, #4]
 80122fa:	4611      	mov	r1, r2
 80122fc:	4798      	blx	r3
 80122fe:	e00a      	b.n	8012316 <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d006      	beq.n	8012316 <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	6a12      	ldr	r2, [r2, #32]
 8012310:	4907      	ldr	r1, [pc, #28]	; (8012330 <_doTask+0x60>)
 8012312:	4610      	mov	r0, r2
 8012314:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <_doTask+0x54>
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	f7ff fe20 	bl	8011f64 <_sendData>
	return 0;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	08011eef 	.word	0x08011eef

08012334 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af02      	add	r7, sp, #8
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	4608      	mov	r0, r1
 801233e:	4611      	mov	r1, r2
 8012340:	461a      	mov	r2, r3
 8012342:	4603      	mov	r3, r0
 8012344:	70fb      	strb	r3, [r7, #3]
 8012346:	460b      	mov	r3, r1
 8012348:	803b      	strh	r3, [r7, #0]
 801234a:	4613      	mov	r3, r2
 801234c:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 801234e:	8839      	ldrh	r1, [r7, #0]
 8012350:	78f8      	ldrb	r0, [r7, #3]
 8012352:	78bb      	ldrb	r3, [r7, #2]
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4a05      	ldr	r2, [pc, #20]	; (8012370 <pifComm_AttachTask+0x3c>)
 801235a:	f002 fa71 	bl	8014840 <pifTaskManager_Add>
 801235e:	4602      	mov	r2, r0
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	61da      	str	r2, [r3, #28]
	return p_owner->_p_task;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	69db      	ldr	r3, [r3, #28]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	080122d1 	.word	0x080122d1

08012374 <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	4608      	mov	r0, r1
 801237e:	4611      	mov	r1, r2
 8012380:	461a      	mov	r2, r3
 8012382:	4603      	mov	r3, r0
 8012384:	817b      	strh	r3, [r7, #10]
 8012386:	460b      	mov	r3, r1
 8012388:	727b      	strb	r3, [r7, #9]
 801238a:	4613      	mov	r3, r2
 801238c:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d005      	beq.n	80123a0 <pifI2cPort_Init+0x2c>
 8012394:	7a7b      	ldrb	r3, [r7, #9]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d002      	beq.n	80123a0 <pifI2cPort_Init+0x2c>
 801239a:	88fb      	ldrh	r3, [r7, #6]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d104      	bne.n	80123aa <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80123a0:	4b17      	ldr	r3, [pc, #92]	; (8012400 <pifI2cPort_Init+0x8c>)
 80123a2:	2201      	movs	r2, #1
 80123a4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80123a6:	2300      	movs	r3, #0
 80123a8:	e025      	b.n	80123f6 <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80123aa:	2230      	movs	r2, #48	; 0x30
 80123ac:	2100      	movs	r1, #0
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f00f fba2 	bl	8021af8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80123b4:	897b      	ldrh	r3, [r7, #10]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <pifI2cPort_Init+0x54>
 80123ba:	4b12      	ldr	r3, [pc, #72]	; (8012404 <pifI2cPort_Init+0x90>)
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	1c5a      	adds	r2, r3, #1
 80123c0:	b291      	uxth	r1, r2
 80123c2:	4a10      	ldr	r2, [pc, #64]	; (8012404 <pifI2cPort_Init+0x90>)
 80123c4:	8011      	strh	r1, [r2, #0]
 80123c6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	897a      	ldrh	r2, [r7, #10]
 80123cc:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	88fa      	ldrh	r2, [r7, #6]
 80123d2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	3310      	adds	r3, #16
 80123d8:	7a7a      	ldrb	r2, [r7, #9]
 80123da:	2108      	movs	r1, #8
 80123dc:	4618      	mov	r0, r3
 80123de:	f000 fac5 	bl	801296c <pifFixList_Init>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d001      	beq.n	80123ec <pifI2cPort_Init+0x78>
    return TRUE;
 80123e8:	2301      	movs	r3, #1
 80123ea:	e004      	b.n	80123f6 <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123ec:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f000 f80a 	bl	8012408 <pifI2cPort_Clear>
	return FALSE;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	20001365 	.word	0x20001365
 8012404:	2000005c 	.word	0x2000005c

08012408 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	3310      	adds	r3, #16
 8012414:	2100      	movs	r1, #0
 8012416:	4618      	mov	r0, r3
 8012418:	f000 fb08 	bl	8012a2c <pifFixList_Clear>
}
 801241c:	bf00      	nop
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d104      	bne.n	801243c <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 8012432:	4b0d      	ldr	r3, [pc, #52]	; (8012468 <pifI2cPort_AddDevice+0x44>)
 8012434:	2201      	movs	r2, #1
 8012436:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012438:	2300      	movs	r3, #0
 801243a:	e011      	b.n	8012460 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	3310      	adds	r3, #16
 8012440:	4618      	mov	r0, r3
 8012442:	f000 fb26 	bl	8012a92 <pifFixList_AddFirst>
 8012446:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d101      	bne.n	8012452 <pifI2cPort_AddDevice+0x2e>
 801244e:	2300      	movs	r3, #0
 8012450:	e006      	b.n	8012460 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	220a      	movs	r2, #10
 801245c:	705a      	strb	r2, [r3, #1]
    return p_device;
 801245e:	68fb      	ldr	r3, [r7, #12]
}
 8012460:	4618      	mov	r0, r3
 8012462:	3710      	adds	r7, #16
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	20001365 	.word	0x20001365

0801246c <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
	if (p_device) {
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d007      	beq.n	801248c <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	3310      	adds	r3, #16
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	4618      	mov	r0, r3
 8012484:	f000 fb39 	bl	8012afa <pifFixList_Remove>
		p_device = NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	603b      	str	r3, [r7, #0]
	}
}
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012494:	b5b0      	push	{r4, r5, r7, lr}
 8012496:	b08c      	sub	sp, #48	; 0x30
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	60b9      	str	r1, [r7, #8]
 801249e:	603b      	str	r3, [r7, #0]
 80124a0:	4613      	mov	r3, r2
 80124a2:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d101      	bne.n	80124b6 <pifI2cDevice_Read+0x22>
 80124b2:	2300      	movs	r3, #0
 80124b4:	e08e      	b.n	80125d4 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00f      	beq.n	80124de <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	4613      	mov	r3, r2
 80124d0:	2262      	movs	r2, #98	; 0x62
 80124d2:	4942      	ldr	r1, [pc, #264]	; (80125dc <pifI2cDevice_Read+0x148>)
 80124d4:	2002      	movs	r0, #2
 80124d6:	f001 f859 	bl	801358c <pifLog_Printf>
#endif
		return FALSE;
 80124da:	2300      	movs	r3, #0
 80124dc:	e07a      	b.n	80125d4 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	68fa      	ldr	r2, [r7, #12]
 80124e2:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2201      	movs	r2, #1
 80124e8:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80124ee:	e048      	b.n	8012582 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124f4:	461a      	mov	r2, r3
 80124f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f8:	4293      	cmp	r3, r2
 80124fa:	bf28      	it	cs
 80124fc:	4613      	movcs	r3, r2
 80124fe:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	685c      	ldr	r4, [r3, #4]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	7818      	ldrb	r0, [r3, #0]
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	18d1      	adds	r1, r2, r3
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	18d5      	adds	r5, r2, r3
 8012514:	7efb      	ldrb	r3, [r7, #27]
 8012516:	b29b      	uxth	r3, r3
 8012518:	79fa      	ldrb	r2, [r7, #7]
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	462b      	mov	r3, r5
 801251e:	47a0      	blx	r4
 8012520:	4603      	mov	r3, r0
 8012522:	2b02      	cmp	r3, #2
 8012524:	d021      	beq.n	801256a <pifI2cDevice_Read+0xd6>
 8012526:	2b02      	cmp	r3, #2
 8012528:	dc23      	bgt.n	8012572 <pifI2cDevice_Read+0xde>
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <pifI2cDevice_Read+0x9e>
 801252e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012530:	e01f      	b.n	8012572 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012532:	4b2b      	ldr	r3, [pc, #172]	; (80125e0 <pifI2cDevice_Read+0x14c>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012538:	e00a      	b.n	8012550 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801253a:	4b29      	ldr	r3, [pc, #164]	; (80125e0 <pifI2cDevice_Read+0x14c>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	1ad3      	subs	r3, r2, r3
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	7852      	ldrb	r2, [r2, #1]
 8012546:	4293      	cmp	r3, r2
 8012548:	d902      	bls.n	8012550 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 801254a:	2372      	movs	r3, #114	; 0x72
 801254c:	623b      	str	r3, [r7, #32]
					goto fail;
 801254e:	e023      	b.n	8012598 <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	789b      	ldrb	r3, [r3, #2]
 8012554:	b2db      	uxtb	r3, r3
 8012556:	2b01      	cmp	r3, #1
 8012558:	d0ef      	beq.n	801253a <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	789b      	ldrb	r3, [r3, #2]
 801255e:	b2db      	uxtb	r3, r3
 8012560:	2b03      	cmp	r3, #3
 8012562:	d105      	bne.n	8012570 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012564:	2379      	movs	r3, #121	; 0x79
 8012566:	623b      	str	r3, [r7, #32]
				goto fail;
 8012568:	e016      	b.n	8012598 <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801256a:	2384      	movs	r3, #132	; 0x84
 801256c:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 801256e:	e013      	b.n	8012598 <pifI2cDevice_Read+0x104>
			break;
 8012570:	bf00      	nop
		}
		ptr += len;
 8012572:	7efb      	ldrb	r3, [r7, #27]
 8012574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012576:	4413      	add	r3, r2
 8012578:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 801257a:	7efb      	ldrb	r3, [r7, #27]
 801257c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1b3      	bne.n	80124f0 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	2200      	movs	r2, #0
 801258c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2200      	movs	r2, #0
 8012592:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012594:	2301      	movs	r3, #1
 8012596:	e01d      	b.n	80125d4 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	461a      	mov	r2, r3
 801259e:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <pifI2cDevice_Read+0x150>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	9301      	str	r3, [sp, #4]
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	9300      	str	r3, [sp, #0]
 80125a8:	4613      	mov	r3, r2
 80125aa:	6a3a      	ldr	r2, [r7, #32]
 80125ac:	490e      	ldr	r1, [pc, #56]	; (80125e8 <pifI2cDevice_Read+0x154>)
 80125ae:	2004      	movs	r0, #4
 80125b0:	f000 ffec 	bl	801358c <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	2200      	movs	r2, #0
 80125b8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	3301      	adds	r3, #1
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2200      	movs	r2, #0
 80125ca:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80125cc:	4b05      	ldr	r3, [pc, #20]	; (80125e4 <pifI2cDevice_Read+0x150>)
 80125ce:	220a      	movs	r2, #10
 80125d0:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3728      	adds	r7, #40	; 0x28
 80125d8:	46bd      	mov	sp, r7
 80125da:	bdb0      	pop	{r4, r5, r7, pc}
 80125dc:	080262ec 	.word	0x080262ec
 80125e0:	2000136c 	.word	0x2000136c
 80125e4:	20001365 	.word	0x20001365
 80125e8:	0802630c 	.word	0x0802630c

080125ec <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af02      	add	r7, sp, #8
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	460b      	mov	r3, r1
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80125fa:	7af9      	ldrb	r1, [r7, #11]
 80125fc:	2301      	movs	r3, #1
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2201      	movs	r2, #1
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f7ff ff45 	bl	8012494 <pifI2cDevice_Read>
 801260a:	4603      	mov	r3, r0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b088      	sub	sp, #32
 8012618:	af02      	add	r7, sp, #8
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	460b      	mov	r3, r1
 801261e:	607a      	str	r2, [r7, #4]
 8012620:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012622:	7af9      	ldrb	r1, [r7, #11]
 8012624:	f107 0314 	add.w	r3, r7, #20
 8012628:	2202      	movs	r2, #2
 801262a:	9200      	str	r2, [sp, #0]
 801262c:	2201      	movs	r2, #1
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f7ff ff30 	bl	8012494 <pifI2cDevice_Read>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <pifI2cDevice_ReadRegWord+0x2a>
 801263a:	2300      	movs	r3, #0
 801263c:	e00a      	b.n	8012654 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 801263e:	7d3b      	ldrb	r3, [r7, #20]
 8012640:	b29b      	uxth	r3, r3
 8012642:	021b      	lsls	r3, r3, #8
 8012644:	b29a      	uxth	r2, r3
 8012646:	7d7b      	ldrb	r3, [r7, #21]
 8012648:	b29b      	uxth	r3, r3
 801264a:	4413      	add	r3, r2
 801264c:	b29a      	uxth	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012652:	2301      	movs	r3, #1
}
 8012654:	4618      	mov	r0, r3
 8012656:	3718      	adds	r7, #24
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b086      	sub	sp, #24
 8012660:	af02      	add	r7, sp, #8
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	607a      	str	r2, [r7, #4]
 8012666:	603b      	str	r3, [r7, #0]
 8012668:	460b      	mov	r3, r1
 801266a:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 801266c:	7af9      	ldrb	r1, [r7, #11]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2201      	movs	r2, #1
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff ff0c 	bl	8012494 <pifI2cDevice_Read>
 801267c:	4603      	mov	r3, r0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b088      	sub	sp, #32
 801268a:	af02      	add	r7, sp, #8
 801268c:	60f8      	str	r0, [r7, #12]
 801268e:	607b      	str	r3, [r7, #4]
 8012690:	460b      	mov	r3, r1
 8012692:	72fb      	strb	r3, [r7, #11]
 8012694:	4613      	mov	r3, r2
 8012696:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012698:	893b      	ldrh	r3, [r7, #8]
 801269a:	0a1b      	lsrs	r3, r3, #8
 801269c:	b29b      	uxth	r3, r3
 801269e:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 80126a0:	893b      	ldrh	r3, [r7, #8]
 80126a2:	b2db      	uxtb	r3, r3
 80126a4:	2201      	movs	r2, #1
 80126a6:	fa02 f303 	lsl.w	r3, r2, r3
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	3b01      	subs	r3, #1
 80126ae:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80126b0:	7af9      	ldrb	r1, [r7, #11]
 80126b2:	f107 0315 	add.w	r3, r7, #21
 80126b6:	2201      	movs	r2, #1
 80126b8:	9200      	str	r2, [sp, #0]
 80126ba:	2201      	movs	r2, #1
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7ff fee9 	bl	8012494 <pifI2cDevice_Read>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d101      	bne.n	80126cc <pifI2cDevice_ReadRegBit8+0x46>
 80126c8:	2300      	movs	r3, #0
 80126ca:	e00d      	b.n	80126e8 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80126cc:	7d7b      	ldrb	r3, [r7, #21]
 80126ce:	461a      	mov	r2, r3
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	fa42 f303 	asr.w	r3, r2, r3
 80126d6:	b25a      	sxtb	r2, r3
 80126d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80126dc:	4013      	ands	r3, r2
 80126de:	b25b      	sxtb	r3, r3
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80126e6:	2301      	movs	r3, #1
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3718      	adds	r7, #24
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80126f0:	b5b0      	push	{r4, r5, r7, lr}
 80126f2:	b08c      	sub	sp, #48	; 0x30
 80126f4:	af02      	add	r7, sp, #8
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	603b      	str	r3, [r7, #0]
 80126fc:	4613      	mov	r3, r2
 80126fe:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d101      	bne.n	8012712 <pifI2cDevice_Write+0x22>
 801270e:	2300      	movs	r3, #0
 8012710:	e08e      	b.n	8012830 <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00f      	beq.n	801273a <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	461a      	mov	r2, r3
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	b2db      	uxtb	r3, r3
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	4613      	mov	r3, r2
 801272c:	22d3      	movs	r2, #211	; 0xd3
 801272e:	4942      	ldr	r1, [pc, #264]	; (8012838 <pifI2cDevice_Write+0x148>)
 8012730:	2002      	movs	r0, #2
 8012732:	f000 ff2b 	bl	801358c <pifLog_Printf>
#endif
		return FALSE;
 8012736:	2300      	movs	r3, #0
 8012738:	e07a      	b.n	8012830 <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	68fa      	ldr	r2, [r7, #12]
 801273e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2201      	movs	r2, #1
 8012744:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012746:	2300      	movs	r3, #0
 8012748:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801274a:	e048      	b.n	80127de <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012750:	461a      	mov	r2, r3
 8012752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012754:	4293      	cmp	r3, r2
 8012756:	bf28      	it	cs
 8012758:	4613      	movcs	r3, r2
 801275a:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	689c      	ldr	r4, [r3, #8]
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	7818      	ldrb	r0, [r3, #0]
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	18d1      	adds	r1, r2, r3
 801276a:	683a      	ldr	r2, [r7, #0]
 801276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276e:	18d5      	adds	r5, r2, r3
 8012770:	7efb      	ldrb	r3, [r7, #27]
 8012772:	b29b      	uxth	r3, r3
 8012774:	79fa      	ldrb	r2, [r7, #7]
 8012776:	9300      	str	r3, [sp, #0]
 8012778:	462b      	mov	r3, r5
 801277a:	47a0      	blx	r4
 801277c:	4603      	mov	r3, r0
 801277e:	2b02      	cmp	r3, #2
 8012780:	d021      	beq.n	80127c6 <pifI2cDevice_Write+0xd6>
 8012782:	2b02      	cmp	r3, #2
 8012784:	dc23      	bgt.n	80127ce <pifI2cDevice_Write+0xde>
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <pifI2cDevice_Write+0x9e>
 801278a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 801278c:	e01f      	b.n	80127ce <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 801278e:	4b2b      	ldr	r3, [pc, #172]	; (801283c <pifI2cDevice_Write+0x14c>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012794:	e00a      	b.n	80127ac <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012796:	4b29      	ldr	r3, [pc, #164]	; (801283c <pifI2cDevice_Write+0x14c>)
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	7852      	ldrb	r2, [r2, #1]
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d902      	bls.n	80127ac <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 80127a6:	23e3      	movs	r3, #227	; 0xe3
 80127a8:	623b      	str	r3, [r7, #32]
					goto fail;
 80127aa:	e023      	b.n	80127f4 <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	789b      	ldrb	r3, [r3, #2]
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d0ef      	beq.n	8012796 <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	789b      	ldrb	r3, [r3, #2]
 80127ba:	b2db      	uxtb	r3, r3
 80127bc:	2b03      	cmp	r3, #3
 80127be:	d105      	bne.n	80127cc <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 80127c0:	23ea      	movs	r3, #234	; 0xea
 80127c2:	623b      	str	r3, [r7, #32]
				goto fail;
 80127c4:	e016      	b.n	80127f4 <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 80127c6:	23f5      	movs	r3, #245	; 0xf5
 80127c8:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80127ca:	e013      	b.n	80127f4 <pifI2cDevice_Write+0x104>
			break;
 80127cc:	bf00      	nop
		}
		ptr += len;
 80127ce:	7efb      	ldrb	r3, [r7, #27]
 80127d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127d2:	4413      	add	r3, r2
 80127d4:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80127d6:	7efb      	ldrb	r3, [r7, #27]
 80127d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80127de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1b3      	bne.n	801274c <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	2200      	movs	r2, #0
 80127e8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2200      	movs	r2, #0
 80127ee:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80127f0:	2301      	movs	r3, #1
 80127f2:	e01d      	b.n	8012830 <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	461a      	mov	r2, r3
 80127fa:	4b11      	ldr	r3, [pc, #68]	; (8012840 <pifI2cDevice_Write+0x150>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	9301      	str	r3, [sp, #4]
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	9300      	str	r3, [sp, #0]
 8012804:	4613      	mov	r3, r2
 8012806:	6a3a      	ldr	r2, [r7, #32]
 8012808:	490e      	ldr	r1, [pc, #56]	; (8012844 <pifI2cDevice_Write+0x154>)
 801280a:	2004      	movs	r0, #4
 801280c:	f000 febe 	bl	801358c <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	2200      	movs	r2, #0
 8012814:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	3301      	adds	r3, #1
 801281c:	b29a      	uxth	r2, r3
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2200      	movs	r2, #0
 8012826:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012828:	4b05      	ldr	r3, [pc, #20]	; (8012840 <pifI2cDevice_Write+0x150>)
 801282a:	220a      	movs	r2, #10
 801282c:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801282e:	2300      	movs	r3, #0
}
 8012830:	4618      	mov	r0, r3
 8012832:	3728      	adds	r7, #40	; 0x28
 8012834:	46bd      	mov	sp, r7
 8012836:	bdb0      	pop	{r4, r5, r7, pc}
 8012838:	08026328 	.word	0x08026328
 801283c:	2000136c 	.word	0x2000136c
 8012840:	20001365 	.word	0x20001365
 8012844:	08026348 	.word	0x08026348

08012848 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af02      	add	r7, sp, #8
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	460b      	mov	r3, r1
 8012852:	70fb      	strb	r3, [r7, #3]
 8012854:	4613      	mov	r3, r2
 8012856:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012858:	78f9      	ldrb	r1, [r7, #3]
 801285a:	1cbb      	adds	r3, r7, #2
 801285c:	2201      	movs	r2, #1
 801285e:	9200      	str	r2, [sp, #0]
 8012860:	2201      	movs	r2, #1
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff ff44 	bl	80126f0 <pifI2cDevice_Write>
 8012868:	4603      	mov	r3, r0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
	...

08012874 <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af02      	add	r7, sp, #8
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	4608      	mov	r0, r1
 801287e:	4611      	mov	r1, r2
 8012880:	461a      	mov	r2, r3
 8012882:	4603      	mov	r3, r0
 8012884:	70fb      	strb	r3, [r7, #3]
 8012886:	460b      	mov	r3, r1
 8012888:	803b      	strh	r3, [r7, #0]
 801288a:	4613      	mov	r3, r2
 801288c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 801288e:	883b      	ldrh	r3, [r7, #0]
 8012890:	0a1b      	lsrs	r3, r3, #8
 8012892:	b29b      	uxth	r3, r3
 8012894:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 8012896:	883b      	ldrh	r3, [r7, #0]
 8012898:	b2db      	uxtb	r3, r3
 801289a:	2201      	movs	r2, #1
 801289c:	fa02 f303 	lsl.w	r3, r2, r3
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	3b01      	subs	r3, #1
 80128a4:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 80128a6:	78ba      	ldrb	r2, [r7, #2]
 80128a8:	7bbb      	ldrb	r3, [r7, #14]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d904      	bls.n	80128b8 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 80128ae:	4b21      	ldr	r3, [pc, #132]	; (8012934 <pifI2cDevice_WriteRegBit8+0xc0>)
 80128b0:	2206      	movs	r2, #6
 80128b2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80128b4:	2300      	movs	r3, #0
 80128b6:	e039      	b.n	801292c <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 80128b8:	78f9      	ldrb	r1, [r7, #3]
 80128ba:	f107 030c 	add.w	r3, r7, #12
 80128be:	2201      	movs	r2, #1
 80128c0:	9200      	str	r2, [sp, #0]
 80128c2:	2201      	movs	r2, #1
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff fde5 	bl	8012494 <pifI2cDevice_Read>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d101      	bne.n	80128d4 <pifI2cDevice_WriteRegBit8+0x60>
 80128d0:	2300      	movs	r3, #0
 80128d2:	e02b      	b.n	801292c <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 80128d4:	7b3b      	ldrb	r3, [r7, #12]
 80128d6:	461a      	mov	r2, r3
 80128d8:	7bfb      	ldrb	r3, [r7, #15]
 80128da:	411a      	asrs	r2, r3
 80128dc:	7bbb      	ldrb	r3, [r7, #14]
 80128de:	401a      	ands	r2, r3
 80128e0:	78bb      	ldrb	r3, [r7, #2]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d021      	beq.n	801292a <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 80128e6:	7bba      	ldrb	r2, [r7, #14]
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
 80128ea:	fa02 f303 	lsl.w	r3, r2, r3
 80128ee:	b25b      	sxtb	r3, r3
 80128f0:	43db      	mvns	r3, r3
 80128f2:	b25a      	sxtb	r2, r3
 80128f4:	7b3b      	ldrb	r3, [r7, #12]
 80128f6:	b25b      	sxtb	r3, r3
 80128f8:	4013      	ands	r3, r2
 80128fa:	b25a      	sxtb	r2, r3
 80128fc:	78b9      	ldrb	r1, [r7, #2]
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
 8012900:	fa01 f303 	lsl.w	r3, r1, r3
 8012904:	b25b      	sxtb	r3, r3
 8012906:	4313      	orrs	r3, r2
 8012908:	b25b      	sxtb	r3, r3
 801290a:	b2db      	uxtb	r3, r3
 801290c:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 801290e:	78f9      	ldrb	r1, [r7, #3]
 8012910:	f107 030d 	add.w	r3, r7, #13
 8012914:	2201      	movs	r2, #1
 8012916:	9200      	str	r2, [sp, #0]
 8012918:	2201      	movs	r2, #1
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7ff fee8 	bl	80126f0 <pifI2cDevice_Write>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d101      	bne.n	801292a <pifI2cDevice_WriteRegBit8+0xb6>
 8012926:	2300      	movs	r3, #0
 8012928:	e000      	b.n	801292c <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 801292a:	2301      	movs	r3, #1
}
 801292c:	4618      	mov	r0, r3
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	20001365 	.word	0x20001365

08012938 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012948:	2b00      	cmp	r3, #0
 801294a:	d009      	beq.n	8012960 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 801294c:	78fb      	ldrb	r3, [r7, #3]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d001      	beq.n	8012956 <pifI2cPort_sigEndTransfer+0x1e>
 8012952:	2202      	movs	r2, #2
 8012954:	e000      	b.n	8012958 <pifI2cPort_sigEndTransfer+0x20>
 8012956:	2203      	movs	r2, #3
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295c:	709a      	strb	r2, [r3, #2]
 801295e:	e000      	b.n	8012962 <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012960:	bf00      	nop
}
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b088      	sub	sp, #32
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d005      	beq.n	801298a <pifFixList_Init+0x1e>
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <pifFixList_Init+0x1e>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d104      	bne.n	8012994 <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 801298a:	4b27      	ldr	r3, [pc, #156]	; (8012a28 <pifFixList_Init+0xbc>)
 801298c:	2201      	movs	r2, #1
 801298e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012990:	2300      	movs	r3, #0
 8012992:	e045      	b.n	8012a20 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	3308      	adds	r3, #8
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	4611      	mov	r1, r2
 801299c:	4618      	mov	r0, r3
 801299e:	f00f f85b 	bl	8021a58 <calloc>
 80129a2:	4603      	mov	r3, r0
 80129a4:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d033      	beq.n	8012a14 <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	69fa      	ldr	r2, [r7, #28]
 80129b0:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2200      	movs	r2, #0
 80129c8:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	69ba      	ldr	r2, [r7, #24]
 80129d4:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 80129d6:	2301      	movs	r3, #1
 80129d8:	617b      	str	r3, [r7, #20]
 80129da:	e00f      	b.n	80129fc <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	3308      	adds	r3, #8
 80129e0:	69fa      	ldr	r2, [r7, #28]
 80129e2:	4413      	add	r3, r2
 80129e4:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	69fa      	ldr	r2, [r7, #28]
 80129ea:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	2200      	movs	r2, #0
 80129f0:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	3301      	adds	r3, #1
 80129fa:	617b      	str	r3, [r7, #20]
 80129fc:	697a      	ldr	r2, [r7, #20]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	dbeb      	blt.n	80129dc <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012a10:	2301      	movs	r3, #1
 8012a12:	e005      	b.n	8012a20 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012a14:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 8012a16:	2100      	movs	r1, #0
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f000 f807 	bl	8012a2c <pifFixList_Clear>
	return FALSE;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3720      	adds	r7, #32
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	20001365 	.word	0x20001365

08012a2c <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d01f      	beq.n	8012a7e <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d014      	beq.n	8012a6e <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	691b      	ldr	r3, [r3, #16]
 8012a48:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a4a:	e00d      	b.n	8012a68 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	f103 0208 	add.w	r2, r3, #8
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	4610      	mov	r0, r2
 8012a56:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d002      	beq.n	8012a64 <pifFixList_Clear+0x38>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	e000      	b.n	8012a66 <pifFixList_Clear+0x3a>
 8012a64:	2300      	movs	r3, #0
 8012a66:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d1ee      	bne.n	8012a4c <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f00f f82a 	bl	8021acc <free>
		p_owner->p_node = NULL;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	605a      	str	r2, [r3, #4]
}
 8012a8a:	bf00      	nop
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b084      	sub	sp, #16
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	695b      	ldr	r3, [r3, #20]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <pifFixList_AddFirst+0x14>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e025      	b.n	8012af2 <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	695b      	ldr	r3, [r3, #20]
 8012aaa:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	691a      	ldr	r2, [r3, #16]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d003      	beq.n	8012acc <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	68fa      	ldr	r2, [r7, #12]
 8012ad0:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	1c5a      	adds	r2, r3, #1
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	3308      	adds	r3, #8
 8012ae0:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	2100      	movs	r1, #0
 8012aea:	68b8      	ldr	r0, [r7, #8]
 8012aec:	f00f f804 	bl	8021af8 <memset>
    return p;
 8012af0:	68bb      	ldr	r3, [r7, #8]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 8012afa:	b480      	push	{r7}
 8012afc:	b085      	sub	sp, #20
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	3b08      	subs	r3, #8
 8012b08:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d005      	beq.n	8012b1e <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	6812      	ldr	r2, [r2, #0]
 8012b1a:	601a      	str	r2, [r3, #0]
 8012b1c:	e003      	b.n	8012b26 <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d004      	beq.n	8012b38 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68fa      	ldr	r2, [r7, #12]
 8012b34:	6852      	ldr	r2, [r2, #4]
 8012b36:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	695a      	ldr	r2, [r3, #20]
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2200      	movs	r2, #0
 8012b44:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	1e5a      	subs	r2, r3, #1
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	609a      	str	r2, [r3, #8]
}
 8012b56:	bf00      	nop
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012b62:	b480      	push	{r7}
 8012b64:	b083      	sub	sp, #12
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	689b      	ldr	r3, [r3, #8]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	370c      	adds	r7, #12
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr

08012b7a <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b083      	sub	sp, #12
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	691b      	ldr	r3, [r3, #16]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	370c      	adds	r7, #12
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr

08012b92 <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8012b92:	b480      	push	{r7}
 8012b94:	b083      	sub	sp, #12
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <pifFixList_Next+0x14>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	e000      	b.n	8012ba8 <pifFixList_Next+0x16>
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	370c      	adds	r7, #12
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr

08012bb4 <_cmdHelp>:
		{ NULL, NULL, NULL }
};


static int _cmdHelp(int argc, char *argv[])
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
    int i;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available PIF commands:\n");
 8012bbe:	492d      	ldr	r1, [pc, #180]	; (8012c74 <_cmdHelp+0xc0>)
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	f000 fc51 	bl	8013468 <pifLog_Print>
    i = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012bca:	e018      	b.n	8012bfe <_cmdHelp+0x4a>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", c_cmd_table[i].p_name, c_cmd_table[i].p_help);
 8012bcc:	492a      	ldr	r1, [pc, #168]	; (8012c78 <_cmdHelp+0xc4>)
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	005b      	lsls	r3, r3, #1
 8012bd4:	4413      	add	r3, r2
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	440b      	add	r3, r1
 8012bda:	6819      	ldr	r1, [r3, #0]
 8012bdc:	4826      	ldr	r0, [pc, #152]	; (8012c78 <_cmdHelp+0xc4>)
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	4613      	mov	r3, r2
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	4413      	add	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4403      	add	r3, r0
 8012bea:	3308      	adds	r3, #8
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	460a      	mov	r2, r1
 8012bf0:	4922      	ldr	r1, [pc, #136]	; (8012c7c <_cmdHelp+0xc8>)
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	f000 fcca 	bl	801358c <pifLog_Printf>
        i++;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012bfe:	491e      	ldr	r1, [pc, #120]	; (8012c78 <_cmdHelp+0xc4>)
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	4613      	mov	r3, r2
 8012c04:	005b      	lsls	r3, r3, #1
 8012c06:	4413      	add	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	440b      	add	r3, r1
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1dc      	bne.n	8012bcc <_cmdHelp+0x18>
    }

    pifLog_Print(LT_NONE, "\nAvailable user commands:\n");
 8012c12:	491b      	ldr	r1, [pc, #108]	; (8012c80 <_cmdHelp+0xcc>)
 8012c14:	2000      	movs	r0, #0
 8012c16:	f000 fc27 	bl	8013468 <pifLog_Print>
    i = 0;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c1e:	e019      	b.n	8012c54 <_cmdHelp+0xa0>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", s_log.p_cmd_table[1][i].p_name, s_log.p_cmd_table[1][i].p_help);
 8012c20:	4b18      	ldr	r3, [pc, #96]	; (8012c84 <_cmdHelp+0xd0>)
 8012c22:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	009b      	lsls	r3, r3, #2
 8012c2e:	440b      	add	r3, r1
 8012c30:	6818      	ldr	r0, [r3, #0]
 8012c32:	4b14      	ldr	r3, [pc, #80]	; (8012c84 <_cmdHelp+0xd0>)
 8012c34:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c36:	68fa      	ldr	r2, [r7, #12]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	005b      	lsls	r3, r3, #1
 8012c3c:	4413      	add	r3, r2
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	440b      	add	r3, r1
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	4602      	mov	r2, r0
 8012c46:	490d      	ldr	r1, [pc, #52]	; (8012c7c <_cmdHelp+0xc8>)
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f000 fc9f 	bl	801358c <pifLog_Printf>
        i++;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	3301      	adds	r3, #1
 8012c52:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c54:	4b0b      	ldr	r3, [pc, #44]	; (8012c84 <_cmdHelp+0xd0>)
 8012c56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	4413      	add	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	440b      	add	r3, r1
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1da      	bne.n	8012c20 <_cmdHelp+0x6c>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8012c6a:	2300      	movs	r3, #0
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3710      	adds	r7, #16
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	0802640c 	.word	0x0802640c
 8012c78:	08027f6c 	.word	0x08027f6c
 8012c7c:	08026428 	.word	0x08026428
 8012c80:	08026434 	.word	0x08026434
 8012c84:	20001388 	.word	0x20001388

08012c88 <_cmdPrintVersion>:

static int _cmdPrintVersion(int argc, char* argv[])
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af02      	add	r7, sp, #8
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8012c92:	4b07      	ldr	r3, [pc, #28]	; (8012cb0 <_cmdPrintVersion+0x28>)
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	2300      	movs	r3, #0
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	4905      	ldr	r1, [pc, #20]	; (8012cb4 <_cmdPrintVersion+0x2c>)
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	f000 fc73 	bl	801358c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	0802646c 	.word	0x0802646c
 8012cb4:	08026450 	.word	0x08026450

08012cb8 <_cmdSetStatus>:

static int _cmdSetStatus(int argc, char* argv[])
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af02      	add	r7, sp, #8
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 1) {
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2b01      	cmp	r3, #1
 8012cc6:	d137      	bne.n	8012d38 <_cmdSetStatus+0x80>
	   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifTaskManager_Count());
 8012cc8:	f001 fe26 	bl	8014918 <pifTaskManager_Count>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	461a      	mov	r2, r3
 8012cd0:	494a      	ldr	r1, [pc, #296]	; (8012dfc <_cmdSetStatus+0x144>)
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	f000 fc5a 	bl	801358c <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012cd8:	4b49      	ldr	r3, [pc, #292]	; (8012e00 <_cmdSetStatus+0x148>)
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4949      	ldr	r1, [pc, #292]	; (8012e04 <_cmdSetStatus+0x14c>)
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	f000 fc53 	bl	801358c <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012ce6:	4948      	ldr	r1, [pc, #288]	; (8012e08 <_cmdSetStatus+0x150>)
 8012ce8:	2000      	movs	r0, #0
 8012cea:	f000 fc4f 	bl	801358c <pifLog_Printf>
	   	i = 0;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012cf2:	e019      	b.n	8012d28 <_cmdSetStatus+0x70>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012cf4:	4a45      	ldr	r2, [pc, #276]	; (8012e0c <_cmdSetStatus+0x154>)
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012cfc:	4a43      	ldr	r2, [pc, #268]	; (8012e0c <_cmdSetStatus+0x154>)
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	4413      	add	r3, r2
 8012d04:	6858      	ldr	r0, [r3, #4]
 8012d06:	4b42      	ldr	r3, [pc, #264]	; (8012e10 <_cmdSetStatus+0x158>)
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8012d10:	f003 0301 	and.w	r3, r3, #1
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	4603      	mov	r3, r0
 8012d18:	460a      	mov	r2, r1
 8012d1a:	493e      	ldr	r1, [pc, #248]	; (8012e14 <_cmdSetStatus+0x15c>)
 8012d1c:	2000      	movs	r0, #0
 8012d1e:	f000 fc35 	bl	801358c <pifLog_Printf>
			i++;
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	3301      	adds	r3, #1
 8012d26:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d28:	4a38      	ldr	r2, [pc, #224]	; (8012e0c <_cmdSetStatus+0x154>)
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1df      	bne.n	8012cf4 <_cmdSetStatus+0x3c>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012d34:	2300      	movs	r3, #0
 8012d36:	e05d      	b.n	8012df4 <_cmdSetStatus+0x13c>
	}
	else if (argc > 2) {
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	dd58      	ble.n	8012df0 <_cmdSetStatus+0x138>
		switch (argv[2][0]) {
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	3308      	adds	r3, #8
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	2b74      	cmp	r3, #116	; 0x74
 8012d48:	d015      	beq.n	8012d76 <_cmdSetStatus+0xbe>
 8012d4a:	2b74      	cmp	r3, #116	; 0x74
 8012d4c:	dc16      	bgt.n	8012d7c <_cmdSetStatus+0xc4>
 8012d4e:	2b66      	cmp	r3, #102	; 0x66
 8012d50:	d00e      	beq.n	8012d70 <_cmdSetStatus+0xb8>
 8012d52:	2b66      	cmp	r3, #102	; 0x66
 8012d54:	dc12      	bgt.n	8012d7c <_cmdSetStatus+0xc4>
 8012d56:	2b54      	cmp	r3, #84	; 0x54
 8012d58:	d00d      	beq.n	8012d76 <_cmdSetStatus+0xbe>
 8012d5a:	2b54      	cmp	r3, #84	; 0x54
 8012d5c:	dc0e      	bgt.n	8012d7c <_cmdSetStatus+0xc4>
 8012d5e:	2b46      	cmp	r3, #70	; 0x46
 8012d60:	d006      	beq.n	8012d70 <_cmdSetStatus+0xb8>
 8012d62:	2b46      	cmp	r3, #70	; 0x46
 8012d64:	dc0a      	bgt.n	8012d7c <_cmdSetStatus+0xc4>
 8012d66:	2b30      	cmp	r3, #48	; 0x30
 8012d68:	d002      	beq.n	8012d70 <_cmdSetStatus+0xb8>
 8012d6a:	2b31      	cmp	r3, #49	; 0x31
 8012d6c:	d003      	beq.n	8012d76 <_cmdSetStatus+0xbe>
 8012d6e:	e005      	b.n	8012d7c <_cmdSetStatus+0xc4>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012d70:	2300      	movs	r3, #0
 8012d72:	73fb      	strb	r3, [r7, #15]
			break;
 8012d74:	e005      	b.n	8012d82 <_cmdSetStatus+0xca>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012d76:	2301      	movs	r3, #1
 8012d78:	73fb      	strb	r3, [r7, #15]
			break;
 8012d7a:	e002      	b.n	8012d82 <_cmdSetStatus+0xca>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012d7c:	f06f 0303 	mvn.w	r3, #3
 8012d80:	e038      	b.n	8012df4 <_cmdSetStatus+0x13c>
		}
		i = 0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d86:	e02a      	b.n	8012dde <_cmdSetStatus+0x126>
			if (!strcmp(argv[1], c_log_flags[i].p_command)) {
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	491f      	ldr	r1, [pc, #124]	; (8012e0c <_cmdSetStatus+0x154>)
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	00db      	lsls	r3, r3, #3
 8012d94:	440b      	add	r3, r1
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	4619      	mov	r1, r3
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	f7ed fa1c 	bl	80001d8 <strcmp>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d118      	bne.n	8012dd8 <_cmdSetStatus+0x120>
				if (value) {
 8012da6:	7bfb      	ldrb	r3, [r7, #15]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d009      	beq.n	8012dc0 <_cmdSetStatus+0x108>
					pif_log_flag.all |= 1L << i;
 8012dac:	4b18      	ldr	r3, [pc, #96]	; (8012e10 <_cmdSetStatus+0x158>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2101      	movs	r1, #1
 8012db2:	68ba      	ldr	r2, [r7, #8]
 8012db4:	fa01 f202 	lsl.w	r2, r1, r2
 8012db8:	4313      	orrs	r3, r2
 8012dba:	4a15      	ldr	r2, [pc, #84]	; (8012e10 <_cmdSetStatus+0x158>)
 8012dbc:	6013      	str	r3, [r2, #0]
 8012dbe:	e009      	b.n	8012dd4 <_cmdSetStatus+0x11c>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012dc0:	4b13      	ldr	r3, [pc, #76]	; (8012e10 <_cmdSetStatus+0x158>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8012dcc:	43d2      	mvns	r2, r2
 8012dce:	4013      	ands	r3, r2
 8012dd0:	4a0f      	ldr	r2, [pc, #60]	; (8012e10 <_cmdSetStatus+0x158>)
 8012dd2:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e00d      	b.n	8012df4 <_cmdSetStatus+0x13c>
			}
			i++;
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012dde:	4a0b      	ldr	r2, [pc, #44]	; (8012e0c <_cmdSetStatus+0x154>)
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1ce      	bne.n	8012d88 <_cmdSetStatus+0xd0>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012dea:	f06f 0303 	mvn.w	r3, #3
 8012dee:	e001      	b.n	8012df4 <_cmdSetStatus+0x13c>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012df0:	f06f 0302 	mvn.w	r3, #2
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3710      	adds	r7, #16
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	08026478 	.word	0x08026478
 8012e00:	20001365 	.word	0x20001365
 8012e04:	08026488 	.word	0x08026488
 8012e08:	08026494 	.word	0x08026494
 8012e0c:	08027f38 	.word	0x08027f38
 8012e10:	20001384 	.word	0x20001384
 8012e14:	0802649c 	.word	0x0802649c

08012e18 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	6039      	str	r1, [r7, #0]
    char tmp_char;
    BOOL str_get_done_flag = FALSE;
 8012e22:	2300      	movs	r3, #0
 8012e24:	73fb      	strb	r3, [r7, #15]
    static BOOL last_cr = FALSE;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012e26:	e0a7      	b.n	8012f78 <_getDebugString+0x160>
        switch (tmp_char) {
 8012e28:	7bbb      	ldrb	r3, [r7, #14]
 8012e2a:	3b08      	subs	r3, #8
 8012e2c:	2b13      	cmp	r3, #19
 8012e2e:	d861      	bhi.n	8012ef4 <_getDebugString+0xdc>
 8012e30:	a201      	add	r2, pc, #4	; (adr r2, 8012e38 <_getDebugString+0x20>)
 8012e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e36:	bf00      	nop
 8012e38:	08012e89 	.word	0x08012e89
 8012e3c:	08012ef5 	.word	0x08012ef5
 8012e40:	08012ed9 	.word	0x08012ed9
 8012e44:	08012ef5 	.word	0x08012ef5
 8012e48:	08012ef5 	.word	0x08012ef5
 8012e4c:	08012ecd 	.word	0x08012ecd
 8012e50:	08012ef5 	.word	0x08012ef5
 8012e54:	08012ef5 	.word	0x08012ef5
 8012e58:	08012ef5 	.word	0x08012ef5
 8012e5c:	08012ef5 	.word	0x08012ef5
 8012e60:	08012ef5 	.word	0x08012ef5
 8012e64:	08012ef5 	.word	0x08012ef5
 8012e68:	08012ef5 	.word	0x08012ef5
 8012e6c:	08012ef5 	.word	0x08012ef5
 8012e70:	08012ef5 	.word	0x08012ef5
 8012e74:	08012ef5 	.word	0x08012ef5
 8012e78:	08012ef5 	.word	0x08012ef5
 8012e7c:	08012ef5 	.word	0x08012ef5
 8012e80:	08012ef5 	.word	0x08012ef5
 8012e84:	08012eef 	.word	0x08012eef
        case '\b':
            if (p_owner->char_idx > 0) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d058      	beq.n	8012f44 <_getDebugString+0x12c>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012e92:	e001      	b.n	8012e98 <_getDebugString+0x80>
            		pifTaskManager_Yield();
 8012e94:	f001 fdbe 	bl	8014a14 <pifTaskManager_Yield>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e9c:	493e      	ldr	r1, [pc, #248]	; (8012f98 <_getDebugString+0x180>)
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f001 f84a 	bl	8013f38 <pifRingBuffer_PutString>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d0f4      	beq.n	8012e94 <_getDebugString+0x7c>
            	}
                p_owner->char_idx--;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ec4:	4413      	add	r3, r2
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012eca:	e03b      	b.n	8012f44 <_getDebugString+0x12c>

        case '\r':
        	last_cr = TRUE;
 8012ecc:	4b33      	ldr	r3, [pc, #204]	; (8012f9c <_getDebugString+0x184>)
 8012ece:	2201      	movs	r2, #1
 8012ed0:	701a      	strb	r2, [r3, #0]
            str_get_done_flag = TRUE;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	73fb      	strb	r3, [r7, #15]
            break;
 8012ed6:	e038      	b.n	8012f4a <_getDebugString+0x132>

        case '\n':
            if (last_cr == TRUE) {
 8012ed8:	4b30      	ldr	r3, [pc, #192]	; (8012f9c <_getDebugString+0x184>)
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d103      	bne.n	8012ee8 <_getDebugString+0xd0>
            	last_cr = FALSE;
 8012ee0:	4b2e      	ldr	r3, [pc, #184]	; (8012f9c <_getDebugString+0x184>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	701a      	strb	r2, [r3, #0]
            }
            else {
            	str_get_done_flag = TRUE;
            }
            break;
 8012ee6:	e030      	b.n	8012f4a <_getDebugString+0x132>
            	str_get_done_flag = TRUE;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	73fb      	strb	r3, [r7, #15]
            break;
 8012eec:	e02d      	b.n	8012f4a <_getDebugString+0x132>

        case 0x1b:  // ESC-Key pressed
            str_get_done_flag = TRUE;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	73fb      	strb	r3, [r7, #15]
            break;
 8012ef2:	e02a      	b.n	8012f4a <_getDebugString+0x132>

        default:
            if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012efa:	461a      	mov	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f02:	3b03      	subs	r3, #3
 8012f04:	429a      	cmp	r2, r3
 8012f06:	da1f      	bge.n	8012f48 <_getDebugString+0x130>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f08:	e001      	b.n	8012f0e <_getDebugString+0xf6>
                    pifTaskManager_Yield();
 8012f0a:	f001 fd83 	bl	8014a14 <pifTaskManager_Yield>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f12:	7bba      	ldrb	r2, [r7, #14]
 8012f14:	4611      	mov	r1, r2
 8012f16:	4618      	mov	r0, r3
 8012f18:	f000 ff90 	bl	8013e3c <pifRingBuffer_PutByte>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d0f3      	beq.n	8012f0a <_getDebugString+0xf2>
                }
                p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f2c:	4413      	add	r3, r2
 8012f2e:	7bba      	ldrb	r2, [r7, #14]
 8012f30:	701a      	strb	r2, [r3, #0]
                p_owner->char_idx++;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f38:	3301      	adds	r3, #1
 8012f3a:	b2da      	uxtb	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            }
            break;
 8012f42:	e001      	b.n	8012f48 <_getDebugString+0x130>
            break;
 8012f44:	bf00      	nop
 8012f46:	e000      	b.n	8012f4a <_getDebugString+0x132>
            break;
 8012f48:	bf00      	nop
        }

        if (str_get_done_flag == TRUE) {
 8012f4a:	7bfb      	ldrb	r3, [r7, #15]
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d113      	bne.n	8012f78 <_getDebugString+0x160>
        	p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f5a:	4413      	add	r3, r2
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	701a      	strb	r2, [r3, #0]
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f60:	e001      	b.n	8012f66 <_getDebugString+0x14e>
        		pifTaskManager_Yield();
 8012f62:	f001 fd57 	bl	8014a14 <pifTaskManager_Yield>
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f6a:	210a      	movs	r1, #10
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f000 ff65 	bl	8013e3c <pifRingBuffer_PutByte>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d0f4      	beq.n	8012f62 <_getDebugString+0x14a>
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a1a      	ldr	r2, [r3, #32]
 8012f7c:	f107 010e 	add.w	r1, r7, #14
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	4610      	mov	r0, r2
 8012f84:	4798      	blx	r3
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f47f af4d 	bne.w	8012e28 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3710      	adds	r7, #16
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	080264ac 	.word	0x080264ac
 8012f9c:	200013ec 	.word	0x200013ec

08012fa0 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012fa8:	2301      	movs	r3, #1
 8012faa:	76fb      	strb	r3, [r7, #27]
    argc = 0;
 8012fac:	2300      	movs	r3, #0
 8012fae:	617b      	str	r3, [r7, #20]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fb4:	61fb      	str	r3, [r7, #28]

    while (*p_tmp_cmd) {
 8012fb6:	e022      	b.n	8012ffe <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2b20      	cmp	r3, #32
 8012fbe:	d105      	bne.n	8012fcc <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	76fb      	strb	r3, [r7, #27]
 8012fca:	e015      	b.n	8012ff8 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012fcc:	7efb      	ldrb	r3, [r7, #27]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d012      	beq.n	8012ff8 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	2b07      	cmp	r3, #7
 8012fd6:	d80c      	bhi.n	8012ff2 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	330c      	adds	r3, #12
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	4413      	add	r3, r2
 8012fe2:	69fa      	ldr	r2, [r7, #28]
 8012fe4:	605a      	str	r2, [r3, #4]
                	argc++;
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	617b      	str	r3, [r7, #20]
                    find_arg = FALSE;
 8012fec:	2300      	movs	r3, #0
 8012fee:	76fb      	strb	r3, [r7, #27]
 8012ff0:	e002      	b.n	8012ff8 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8012ff2:	f06f 0301 	mvn.w	r3, #1
 8012ff6:	e038      	b.n	801306a <_processDebugCmd+0xca>
                }
            }
        }

        p_tmp_cmd++;
 8012ff8:	69fb      	ldr	r3, [r7, #28]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	61fb      	str	r3, [r7, #28]
    while (*p_tmp_cmd) {
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d1d8      	bne.n	8012fb8 <_processDebugCmd+0x18>
    }

    if (argc) {
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d02d      	beq.n	8013068 <_processDebugCmd+0xc8>
    	for (int i = 0; i < 2; i++) {
 801300c:	2300      	movs	r3, #0
 801300e:	60fb      	str	r3, [r7, #12]
 8013010:	e024      	b.n	801305c <_processDebugCmd+0xbc>
    		p_cmd_entry = p_owner->p_cmd_table[i];
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	3216      	adds	r2, #22
 8013018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801301c:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 801301e:	e016      	b.n	801304e <_processDebugCmd+0xae>
                if (!strcmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4619      	mov	r1, r3
 801302a:	4610      	mov	r0, r2
 801302c:	f7ed f8d4 	bl	80001d8 <strcmp>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d108      	bne.n	8013048 <_processDebugCmd+0xa8>
                    return p_cmd_entry->processor(argc, p_owner->p_argv);
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	6978      	ldr	r0, [r7, #20]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	3234      	adds	r2, #52	; 0x34
 8013040:	4611      	mov	r1, r2
 8013042:	4798      	blx	r3
 8013044:	4603      	mov	r3, r0
 8013046:	e010      	b.n	801306a <_processDebugCmd+0xca>
                }

                p_cmd_entry++;
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	330c      	adds	r3, #12
 801304c:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1e4      	bne.n	8013020 <_processDebugCmd+0x80>
    	for (int i = 0; i < 2; i++) {
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	3301      	adds	r3, #1
 801305a:	60fb      	str	r3, [r7, #12]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2b01      	cmp	r3, #1
 8013060:	ddd7      	ble.n	8013012 <_processDebugCmd+0x72>
            }
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8013062:	f04f 33ff 	mov.w	r3, #4294967295
 8013066:	e000      	b.n	801306a <_processDebugCmd+0xca>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8013068:	2300      	movs	r3, #0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3720      	adds	r7, #32
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b084      	sub	sp, #16
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
 801307a:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10e      	bne.n	80130a8 <_evtParsing+0x36>
        if (_getDebugString(p_owner, act_receive_data)) {
 801308a:	6839      	ldr	r1, [r7, #0]
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7ff fec3 	bl	8012e18 <_getDebugString>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d007      	beq.n	80130a8 <_evtParsing+0x36>
        	p_owner->cmd_done = TRUE;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2201      	movs	r2, #1
 801309c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	p_owner->p_task->immediate = TRUE;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a4:	2201      	movs	r2, #1
 80130a6:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80130a8:	bf00      	nop
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08e      	sub	sp, #56	; 0x38
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 80130b8:	2300      	movs	r3, #0
 80130ba:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	if (s_log.cmd_done == TRUE) {
 80130bc:	4b48      	ldr	r3, [pc, #288]	; (80131e0 <_doTask+0x130>)
 80130be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d17b      	bne.n	80131be <_doTask+0x10e>
		status = _processDebugCmd(&s_log);
 80130c6:	4846      	ldr	r0, [pc, #280]	; (80131e0 <_doTask+0x130>)
 80130c8:	f7ff ff6a 	bl	8012fa0 <_processDebugCmd>
 80130cc:	6338      	str	r0, [r7, #48]	; 0x30

	    while (s_log.char_idx) {
 80130ce:	e00f      	b.n	80130f0 <_doTask+0x40>
	    	s_log.p_rx_buffer[s_log.char_idx] = 0;
 80130d0:	4b43      	ldr	r3, [pc, #268]	; (80131e0 <_doTask+0x130>)
 80130d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130d4:	4a42      	ldr	r2, [pc, #264]	; (80131e0 <_doTask+0x130>)
 80130d6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80130da:	4413      	add	r3, r2
 80130dc:	2200      	movs	r2, #0
 80130de:	701a      	strb	r2, [r3, #0]
	    	s_log.char_idx--;
 80130e0:	4b3f      	ldr	r3, [pc, #252]	; (80131e0 <_doTask+0x130>)
 80130e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130e6:	3b01      	subs	r3, #1
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	4b3d      	ldr	r3, [pc, #244]	; (80131e0 <_doTask+0x130>)
 80130ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	    while (s_log.char_idx) {
 80130f0:	4b3b      	ldr	r3, [pc, #236]	; (80131e0 <_doTask+0x130>)
 80130f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d1ea      	bne.n	80130d0 <_doTask+0x20>
	    }

	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 80130fa:	2300      	movs	r3, #0
 80130fc:	637b      	str	r3, [r7, #52]	; 0x34
 80130fe:	e009      	b.n	8013114 <_doTask+0x64>
	    	s_log.p_argv[i] = 0;
 8013100:	4a37      	ldr	r2, [pc, #220]	; (80131e0 <_doTask+0x130>)
 8013102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013104:	330c      	adds	r3, #12
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	4413      	add	r3, r2
 801310a:	2200      	movs	r2, #0
 801310c:	605a      	str	r2, [r3, #4]
	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 801310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013110:	3301      	adds	r3, #1
 8013112:	637b      	str	r3, [r7, #52]	; 0x34
 8013114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013116:	2b07      	cmp	r3, #7
 8013118:	ddf2      	ble.n	8013100 <_doTask+0x50>
	    }

	    // Handle the case of bad command.
	    if (status == PIF_LOG_CMD_BAD_CMD) {
 801311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013120:	d10c      	bne.n	801313c <_doTask+0x8c>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013122:	e001      	b.n	8013128 <_doTask+0x78>
        		pifTaskManager_Yield();
 8013124:	f001 fc76 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013128:	4b2d      	ldr	r3, [pc, #180]	; (80131e0 <_doTask+0x130>)
 801312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312c:	492d      	ldr	r1, [pc, #180]	; (80131e4 <_doTask+0x134>)
 801312e:	4618      	mov	r0, r3
 8013130:	f000 ff02 	bl	8013f38 <pifRingBuffer_PutString>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d0f4      	beq.n	8013124 <_doTask+0x74>
 801313a:	e039      	b.n	80131b0 <_doTask+0x100>
	    	}
	    }

	    // Handle the case of too many arguments.
	    else if (status == PIF_LOG_CMD_TOO_MANY_ARGS) {
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	f113 0f02 	cmn.w	r3, #2
 8013142:	d10c      	bne.n	801315e <_doTask+0xae>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 8013144:	e001      	b.n	801314a <_doTask+0x9a>
        		pifTaskManager_Yield();
 8013146:	f001 fc65 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 801314a:	4b25      	ldr	r3, [pc, #148]	; (80131e0 <_doTask+0x130>)
 801314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801314e:	4926      	ldr	r1, [pc, #152]	; (80131e8 <_doTask+0x138>)
 8013150:	4618      	mov	r0, r3
 8013152:	f000 fef1 	bl	8013f38 <pifRingBuffer_PutString>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d0f4      	beq.n	8013146 <_doTask+0x96>
 801315c:	e028      	b.n	80131b0 <_doTask+0x100>
	    	}
	    }

	    // Handle the case of too few arguments.
	    else if (status == PIF_LOG_CMD_TOO_FEW_ARGS) {
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	f113 0f03 	cmn.w	r3, #3
 8013164:	d10c      	bne.n	8013180 <_doTask+0xd0>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 8013166:	e001      	b.n	801316c <_doTask+0xbc>
        		pifTaskManager_Yield();
 8013168:	f001 fc54 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 801316c:	4b1c      	ldr	r3, [pc, #112]	; (80131e0 <_doTask+0x130>)
 801316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013170:	491e      	ldr	r1, [pc, #120]	; (80131ec <_doTask+0x13c>)
 8013172:	4618      	mov	r0, r3
 8013174:	f000 fee0 	bl	8013f38 <pifRingBuffer_PutString>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d0f4      	beq.n	8013168 <_doTask+0xb8>
 801317e:	e017      	b.n	80131b0 <_doTask+0x100>
	    	}
	    }

	    // Otherwise the command was executed.  Print the error
	    // code if one was returned.
	    else if (status != PIF_LOG_CMD_NO_ERROR) {
 8013180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013182:	2b00      	cmp	r3, #0
 8013184:	d014      	beq.n	80131b0 <_doTask+0x100>
	    	pif_Printf(msg, "Command returned error code: %d\n", status);
 8013186:	f107 0308 	add.w	r3, r7, #8
 801318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801318c:	4918      	ldr	r1, [pc, #96]	; (80131f0 <_doTask+0x140>)
 801318e:	4618      	mov	r0, r3
 8013190:	f7fe fe24 	bl	8011ddc <pif_Printf>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 8013194:	e001      	b.n	801319a <_doTask+0xea>
        		pifTaskManager_Yield();
 8013196:	f001 fc3d 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 801319a:	4b11      	ldr	r3, [pc, #68]	; (80131e0 <_doTask+0x130>)
 801319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801319e:	f107 0208 	add.w	r2, r7, #8
 80131a2:	4611      	mov	r1, r2
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 fec7 	bl	8013f38 <pifRingBuffer_PutString>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d0f2      	beq.n	8013196 <_doTask+0xe6>
	    	}
	    }

		s_log.cmd_done = FALSE;
 80131b0:	4b0b      	ldr	r3, [pc, #44]	; (80131e0 <_doTask+0x130>)
 80131b2:	2200      	movs	r2, #0
 80131b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 80131b8:	e001      	b.n	80131be <_doTask+0x10e>
		pifTaskManager_Yield();
 80131ba:	f001 fc2b 	bl	8014a14 <pifTaskManager_Yield>
	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 80131be:	4b08      	ldr	r3, [pc, #32]	; (80131e0 <_doTask+0x130>)
 80131c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c2:	4a07      	ldr	r2, [pc, #28]	; (80131e0 <_doTask+0x130>)
 80131c4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80131c6:	4611      	mov	r1, r2
 80131c8:	4618      	mov	r0, r3
 80131ca:	f000 feb5 	bl	8013f38 <pifRingBuffer_PutString>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d0f2      	beq.n	80131ba <_doTask+0x10a>
	}

	return 0;
 80131d4:	2300      	movs	r3, #0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3738      	adds	r7, #56	; 0x38
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	20001388 	.word	0x20001388
 80131e4:	080264b0 	.word	0x080264b0
 80131e8:	080264c8 	.word	0x080264c8
 80131ec:	080264ec 	.word	0x080264ec
 80131f0:	0802650c 	.word	0x0802650c

080131f4 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80131f4:	b5b0      	push	{r4, r5, r7, lr}
 80131f6:	b084      	sub	sp, #16
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013206:	4618      	mov	r0, r3
 8013208:	f000 fd79 	bl	8013cfe <pifRingBuffer_IsEmpty>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d11f      	bne.n	8013252 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	6a1c      	ldr	r4, [r3, #32]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801321a:	2100      	movs	r1, #0
 801321c:	4618      	mov	r0, r3
 801321e:	f000 fd42 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8013222:	4605      	mov	r5, r0
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013228:	2100      	movs	r1, #0
 801322a:	4618      	mov	r0, r3
 801322c:	f000 fd9c 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8013230:	4603      	mov	r3, r0
 8013232:	461a      	mov	r2, r3
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	4629      	mov	r1, r5
 8013238:	4620      	mov	r0, r4
 801323a:	4798      	blx	r3
 801323c:	4603      	mov	r3, r0
 801323e:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013244:	897a      	ldrh	r2, [r7, #10]
 8013246:	4611      	mov	r1, r2
 8013248:	4618      	mov	r0, r3
 801324a:	f000 ff34 	bl	80140b6 <pifRingBuffer_Remove>
		return TRUE;
 801324e:	2301      	movs	r3, #1
 8013250:	e000      	b.n	8013254 <_evtSending+0x60>
	}
	return FALSE;
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bdb0      	pop	{r4, r5, r7, pc}

0801325c <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	460b      	mov	r3, r1
 8013266:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 8013268:	78fb      	ldrb	r3, [r7, #3]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d109      	bne.n	8013282 <_printLog+0x26>
 801326e:	4810      	ldr	r0, [pc, #64]	; (80132b0 <_printLog+0x54>)
 8013270:	f000 fd34 	bl	8013cdc <pifRingBuffer_IsBuffer>
 8013274:	4603      	mov	r3, r0
 8013276:	2b00      	cmp	r3, #0
 8013278:	d003      	beq.n	8013282 <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 801327a:	6879      	ldr	r1, [r7, #4]
 801327c:	480c      	ldr	r0, [pc, #48]	; (80132b0 <_printLog+0x54>)
 801327e:	f000 fe5b 	bl	8013f38 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 8013282:	4b0c      	ldr	r3, [pc, #48]	; (80132b4 <_printLog+0x58>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d105      	bne.n	8013296 <_printLog+0x3a>
 801328a:	78fb      	ldrb	r3, [r7, #3]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00b      	beq.n	80132a8 <_printLog+0x4c>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013290:	e001      	b.n	8013296 <_printLog+0x3a>
        	pifTaskManager_Yield();
 8013292:	f001 fbbf 	bl	8014a14 <pifTaskManager_Yield>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013296:	4b07      	ldr	r3, [pc, #28]	; (80132b4 <_printLog+0x58>)
 8013298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329a:	6879      	ldr	r1, [r7, #4]
 801329c:	4618      	mov	r0, r3
 801329e:	f000 fe4b 	bl	8013f38 <pifRingBuffer_PutString>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d0f4      	beq.n	8013292 <_printLog+0x36>
        }
	}
}
 80132a8:	bf00      	nop
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	2000138c 	.word	0x2000138c
 80132b4:	20001388 	.word	0x20001388

080132b8 <_printTime>:

static void _printTime()
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
	int offset = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	1c5a      	adds	r2, r3, #1
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	4a35      	ldr	r2, [pc, #212]	; (80133a0 <_printTime+0xe8>)
 80132ca:	210a      	movs	r1, #10
 80132cc:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4a33      	ldr	r2, [pc, #204]	; (80133a0 <_printTime+0xe8>)
 80132d2:	4413      	add	r3, r2
 80132d4:	4a33      	ldr	r2, [pc, #204]	; (80133a4 <_printTime+0xec>)
 80132d6:	7952      	ldrb	r2, [r2, #5]
 80132d8:	b2d2      	uxtb	r2, r2
 80132da:	4611      	mov	r1, r2
 80132dc:	2202      	movs	r2, #2
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fe f994 	bl	801160c <pif_DecToString>
 80132e4:	4602      	mov	r2, r0
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4413      	add	r3, r2
 80132ea:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	607a      	str	r2, [r7, #4]
 80132f2:	4a2b      	ldr	r2, [pc, #172]	; (80133a0 <_printTime+0xe8>)
 80132f4:	212e      	movs	r1, #46	; 0x2e
 80132f6:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	4a29      	ldr	r2, [pc, #164]	; (80133a0 <_printTime+0xe8>)
 80132fc:	4413      	add	r3, r2
 80132fe:	4a2a      	ldr	r2, [pc, #168]	; (80133a8 <_printTime+0xf0>)
 8013300:	8812      	ldrh	r2, [r2, #0]
 8013302:	b292      	uxth	r2, r2
 8013304:	4611      	mov	r1, r2
 8013306:	2203      	movs	r2, #3
 8013308:	4618      	mov	r0, r3
 801330a:	f7fe f97f 	bl	801160c <pif_DecToString>
 801330e:	4602      	mov	r2, r0
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4413      	add	r3, r2
 8013314:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	607a      	str	r2, [r7, #4]
 801331c:	4a20      	ldr	r2, [pc, #128]	; (80133a0 <_printTime+0xe8>)
 801331e:	2120      	movs	r1, #32
 8013320:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	1c5a      	adds	r2, r3, #1
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	4a1d      	ldr	r2, [pc, #116]	; (80133a0 <_printTime+0xe8>)
 801332a:	2154      	movs	r1, #84	; 0x54
 801332c:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	1c5a      	adds	r2, r3, #1
 8013332:	607a      	str	r2, [r7, #4]
 8013334:	4a1a      	ldr	r2, [pc, #104]	; (80133a0 <_printTime+0xe8>)
 8013336:	2120      	movs	r1, #32
 8013338:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4a18      	ldr	r2, [pc, #96]	; (80133a0 <_printTime+0xe8>)
 801333e:	4413      	add	r3, r2
 8013340:	4a18      	ldr	r2, [pc, #96]	; (80133a4 <_printTime+0xec>)
 8013342:	78d2      	ldrb	r2, [r2, #3]
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	4611      	mov	r1, r2
 8013348:	2202      	movs	r2, #2
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe f95e 	bl	801160c <pif_DecToString>
 8013350:	4602      	mov	r2, r0
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	4413      	add	r3, r2
 8013356:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	1c5a      	adds	r2, r3, #1
 801335c:	607a      	str	r2, [r7, #4]
 801335e:	4a10      	ldr	r2, [pc, #64]	; (80133a0 <_printTime+0xe8>)
 8013360:	213a      	movs	r1, #58	; 0x3a
 8013362:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4a0e      	ldr	r2, [pc, #56]	; (80133a0 <_printTime+0xe8>)
 8013368:	4413      	add	r3, r2
 801336a:	4a0e      	ldr	r2, [pc, #56]	; (80133a4 <_printTime+0xec>)
 801336c:	7912      	ldrb	r2, [r2, #4]
 801336e:	b2d2      	uxtb	r2, r2
 8013370:	4611      	mov	r1, r2
 8013372:	2202      	movs	r2, #2
 8013374:	4618      	mov	r0, r3
 8013376:	f7fe f949 	bl	801160c <pif_DecToString>
 801337a:	4602      	mov	r2, r0
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4413      	add	r3, r2
 8013380:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	607a      	str	r2, [r7, #4]
 8013388:	4a05      	ldr	r2, [pc, #20]	; (80133a0 <_printTime+0xe8>)
 801338a:	2120      	movs	r1, #32
 801338c:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 801338e:	2100      	movs	r1, #0
 8013390:	4803      	ldr	r0, [pc, #12]	; (80133a0 <_printTime+0xe8>)
 8013392:	f7ff ff63 	bl	801325c <_printLog>
}
 8013396:	bf00      	nop
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	200013f0 	.word	0x200013f0
 80133a4:	20002274 	.word	0x20002274
 80133a8:	20001366 	.word	0x20001366

080133ac <pifLog_Init>:

BOOL pifLog_Init()
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 80133b2:	2264      	movs	r2, #100	; 0x64
 80133b4:	2100      	movs	r1, #0
 80133b6:	480d      	ldr	r0, [pc, #52]	; (80133ec <pifLog_Init+0x40>)
 80133b8:	f00e fb9e 	bl	8021af8 <memset>

	s_log.enable = TRUE;
 80133bc:	4b0b      	ldr	r3, [pc, #44]	; (80133ec <pifLog_Init+0x40>)
 80133be:	2201      	movs	r2, #1
 80133c0:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, &s_log, FALSE);
 80133c2:	2300      	movs	r3, #0
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	4b09      	ldr	r3, [pc, #36]	; (80133ec <pifLog_Init+0x40>)
 80133c8:	4a09      	ldr	r2, [pc, #36]	; (80133f0 <pifLog_Init+0x44>)
 80133ca:	2101      	movs	r1, #1
 80133cc:	2002      	movs	r0, #2
 80133ce:	f001 fa37 	bl	8014840 <pifTaskManager_Add>
 80133d2:	4603      	mov	r3, r0
 80133d4:	4a05      	ldr	r2, [pc, #20]	; (80133ec <pifLog_Init+0x40>)
 80133d6:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 80133d8:	4b04      	ldr	r3, [pc, #16]	; (80133ec <pifLog_Init+0x40>)
 80133da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d101      	bne.n	80133e4 <pifLog_Init+0x38>
 80133e0:	2300      	movs	r3, #0
 80133e2:	e000      	b.n	80133e6 <pifLog_Init+0x3a>
#endif
   	return TRUE;
 80133e4:	2301      	movs	r3, #1
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	20001388 	.word	0x20001388
 80133f0:	080130b1 	.word	0x080130b1

080133f4 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d002      	beq.n	801340a <pifLog_UseCommand+0x16>
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d104      	bne.n	8013414 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 801340a:	4b14      	ldr	r3, [pc, #80]	; (801345c <pifLog_UseCommand+0x68>)
 801340c:	2201      	movs	r2, #1
 801340e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013410:	2300      	movs	r3, #0
 8013412:	e01e      	b.n	8013452 <pifLog_UseCommand+0x5e>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013414:	2120      	movs	r1, #32
 8013416:	2001      	movs	r0, #1
 8013418:	f00e fb1e 	bl	8021a58 <calloc>
 801341c:	4603      	mov	r3, r0
 801341e:	461a      	mov	r2, r3
 8013420:	4b0f      	ldr	r3, [pc, #60]	; (8013460 <pifLog_UseCommand+0x6c>)
 8013422:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013424:	4b0e      	ldr	r3, [pc, #56]	; (8013460 <pifLog_UseCommand+0x6c>)
 8013426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013428:	2b00      	cmp	r3, #0
 801342a:	d104      	bne.n	8013436 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 801342c:	4b0b      	ldr	r3, [pc, #44]	; (801345c <pifLog_UseCommand+0x68>)
 801342e:	2203      	movs	r2, #3
 8013430:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013432:	2300      	movs	r3, #0
 8013434:	e00d      	b.n	8013452 <pifLog_UseCommand+0x5e>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 8013436:	4b0a      	ldr	r3, [pc, #40]	; (8013460 <pifLog_UseCommand+0x6c>)
 8013438:	2220      	movs	r2, #32
 801343a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table[0] = c_cmd_table;
 801343e:	4b08      	ldr	r3, [pc, #32]	; (8013460 <pifLog_UseCommand+0x6c>)
 8013440:	4a08      	ldr	r2, [pc, #32]	; (8013464 <pifLog_UseCommand+0x70>)
 8013442:	659a      	str	r2, [r3, #88]	; 0x58
    s_log.p_cmd_table[1] = p_cmd_table;
 8013444:	4a06      	ldr	r2, [pc, #24]	; (8013460 <pifLog_UseCommand+0x6c>)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	65d3      	str	r3, [r2, #92]	; 0x5c
    s_log.p_prompt = p_prompt;
 801344a:	4a05      	ldr	r2, [pc, #20]	; (8013460 <pifLog_UseCommand+0x6c>)
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	6613      	str	r3, [r2, #96]	; 0x60
    return TRUE;
 8013450:	2301      	movs	r3, #1
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20001365 	.word	0x20001365
 8013460:	20001388 	.word	0x20001388
 8013464:	08027f6c 	.word	0x08027f6c

08013468 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b098      	sub	sp, #96	; 0x60
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	6039      	str	r1, [r7, #0]
 8013472:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013478:	79fb      	ldrb	r3, [r7, #7]
 801347a:	2b01      	cmp	r3, #1
 801347c:	d970      	bls.n	8013560 <pifLog_Print+0xf8>
        if (s_minute != pif_datetime.minute) {
 801347e:	4b3f      	ldr	r3, [pc, #252]	; (801357c <pifLog_Print+0x114>)
 8013480:	791b      	ldrb	r3, [r3, #4]
 8013482:	b2da      	uxtb	r2, r3
 8013484:	4b3e      	ldr	r3, [pc, #248]	; (8013580 <pifLog_Print+0x118>)
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	429a      	cmp	r2, r3
 801348a:	d006      	beq.n	801349a <pifLog_Print+0x32>
        	_printTime();
 801348c:	f7ff ff14 	bl	80132b8 <_printTime>
        	s_minute = pif_datetime.minute;
 8013490:	4b3a      	ldr	r3, [pc, #232]	; (801357c <pifLog_Print+0x114>)
 8013492:	791b      	ldrb	r3, [r3, #4]
 8013494:	b2da      	uxtb	r2, r3
 8013496:	4b3a      	ldr	r3, [pc, #232]	; (8013580 <pifLog_Print+0x118>)
 8013498:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 801349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801349c:	1c5a      	adds	r2, r3, #1
 801349e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80134a4:	4413      	add	r3, r2
 80134a6:	220a      	movs	r2, #10
 80134a8:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80134ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ae:	f107 020c 	add.w	r2, r7, #12
 80134b2:	4413      	add	r3, r2
 80134b4:	4a31      	ldr	r2, [pc, #196]	; (801357c <pifLog_Print+0x114>)
 80134b6:	7952      	ldrb	r2, [r2, #5]
 80134b8:	b2d2      	uxtb	r2, r2
 80134ba:	4611      	mov	r1, r2
 80134bc:	2202      	movs	r2, #2
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fe f8a4 	bl	801160c <pif_DecToString>
 80134c4:	4602      	mov	r2, r0
 80134c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134c8:	4413      	add	r3, r2
 80134ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80134cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ce:	1c5a      	adds	r2, r3, #1
 80134d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80134d6:	4413      	add	r3, r2
 80134d8:	222e      	movs	r2, #46	; 0x2e
 80134da:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80134de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134e0:	f107 020c 	add.w	r2, r7, #12
 80134e4:	4413      	add	r3, r2
 80134e6:	4a27      	ldr	r2, [pc, #156]	; (8013584 <pifLog_Print+0x11c>)
 80134e8:	8812      	ldrh	r2, [r2, #0]
 80134ea:	b292      	uxth	r2, r2
 80134ec:	4611      	mov	r1, r2
 80134ee:	2203      	movs	r2, #3
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7fe f88b 	bl	801160c <pif_DecToString>
 80134f6:	4602      	mov	r2, r0
 80134f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134fa:	4413      	add	r3, r2
 80134fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 80134fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013500:	1c5a      	adds	r2, r3, #1
 8013502:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013504:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8013508:	4413      	add	r3, r2
 801350a:	2220      	movs	r2, #32
 801350c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	1e9a      	subs	r2, r3, #2
 8013514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013516:	1c59      	adds	r1, r3, #1
 8013518:	65f9      	str	r1, [r7, #92]	; 0x5c
 801351a:	491b      	ldr	r1, [pc, #108]	; (8013588 <pifLog_Print+0x120>)
 801351c:	5c8a      	ldrb	r2, [r1, r2]
 801351e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013522:	440b      	add	r3, r1
 8013524:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801352a:	1c5a      	adds	r2, r3, #1
 801352c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801352e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8013532:	4413      	add	r3, r2
 8013534:	2220      	movs	r2, #32
 8013536:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 801353a:	f107 020c 	add.w	r2, r7, #12
 801353e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013540:	4413      	add	r3, r2
 8013542:	2200      	movs	r2, #0
 8013544:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	2b01      	cmp	r3, #1
 801354a:	bf0c      	ite	eq
 801354c:	2301      	moveq	r3, #1
 801354e:	2300      	movne	r3, #0
 8013550:	b2db      	uxtb	r3, r3
 8013552:	461a      	mov	r2, r3
 8013554:	f107 030c 	add.w	r3, r7, #12
 8013558:	4611      	mov	r1, r2
 801355a:	4618      	mov	r0, r3
 801355c:	f7ff fe7e 	bl	801325c <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013560:	79fb      	ldrb	r3, [r7, #7]
 8013562:	2b01      	cmp	r3, #1
 8013564:	bf0c      	ite	eq
 8013566:	2301      	moveq	r3, #1
 8013568:	2300      	movne	r3, #0
 801356a:	b2db      	uxtb	r3, r3
 801356c:	4619      	mov	r1, r3
 801356e:	6838      	ldr	r0, [r7, #0]
 8013570:	f7ff fe74 	bl	801325c <_printLog>
}
 8013574:	bf00      	nop
 8013576:	3760      	adds	r7, #96	; 0x60
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	20002274 	.word	0x20002274
 8013580:	20000068 	.word	0x20000068
 8013584:	20001366 	.word	0x20001366
 8013588:	08027f68 	.word	0x08027f68

0801358c <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 801358c:	b40e      	push	{r1, r2, r3}
 801358e:	b580      	push	{r7, lr}
 8013590:	b09b      	sub	sp, #108	; 0x6c
 8013592:	af00      	add	r7, sp, #0
 8013594:	4603      	mov	r3, r0
 8013596:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 801359c:	79fb      	ldrb	r3, [r7, #7]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d95d      	bls.n	801365e <pifLog_Printf+0xd2>
        if (s_minute != pif_datetime.minute) {
 80135a2:	4b3f      	ldr	r3, [pc, #252]	; (80136a0 <pifLog_Printf+0x114>)
 80135a4:	791b      	ldrb	r3, [r3, #4]
 80135a6:	b2da      	uxtb	r2, r3
 80135a8:	4b3e      	ldr	r3, [pc, #248]	; (80136a4 <pifLog_Printf+0x118>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d006      	beq.n	80135be <pifLog_Printf+0x32>
        	_printTime();
 80135b0:	f7ff fe82 	bl	80132b8 <_printTime>
        	s_minute = pif_datetime.minute;
 80135b4:	4b3a      	ldr	r3, [pc, #232]	; (80136a0 <pifLog_Printf+0x114>)
 80135b6:	791b      	ldrb	r3, [r3, #4]
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	4b3a      	ldr	r3, [pc, #232]	; (80136a4 <pifLog_Printf+0x118>)
 80135bc:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80135be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135c0:	1c5a      	adds	r2, r3, #1
 80135c2:	667a      	str	r2, [r7, #100]	; 0x64
 80135c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80135c8:	4413      	add	r3, r2
 80135ca:	220a      	movs	r2, #10
 80135cc:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80135d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d2:	f107 020c 	add.w	r2, r7, #12
 80135d6:	4413      	add	r3, r2
 80135d8:	4a31      	ldr	r2, [pc, #196]	; (80136a0 <pifLog_Printf+0x114>)
 80135da:	7952      	ldrb	r2, [r2, #5]
 80135dc:	b2d2      	uxtb	r2, r2
 80135de:	4611      	mov	r1, r2
 80135e0:	2202      	movs	r2, #2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fe f812 	bl	801160c <pif_DecToString>
 80135e8:	4602      	mov	r2, r0
 80135ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135ec:	4413      	add	r3, r2
 80135ee:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 80135f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135f2:	1c5a      	adds	r2, r3, #1
 80135f4:	667a      	str	r2, [r7, #100]	; 0x64
 80135f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80135fa:	4413      	add	r3, r2
 80135fc:	222e      	movs	r2, #46	; 0x2e
 80135fe:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013604:	f107 020c 	add.w	r2, r7, #12
 8013608:	4413      	add	r3, r2
 801360a:	4a27      	ldr	r2, [pc, #156]	; (80136a8 <pifLog_Printf+0x11c>)
 801360c:	8812      	ldrh	r2, [r2, #0]
 801360e:	b292      	uxth	r2, r2
 8013610:	4611      	mov	r1, r2
 8013612:	2203      	movs	r2, #3
 8013614:	4618      	mov	r0, r3
 8013616:	f7fd fff9 	bl	801160c <pif_DecToString>
 801361a:	4602      	mov	r2, r0
 801361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361e:	4413      	add	r3, r2
 8013620:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013624:	1c5a      	adds	r2, r3, #1
 8013626:	667a      	str	r2, [r7, #100]	; 0x64
 8013628:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801362c:	4413      	add	r3, r2
 801362e:	2220      	movs	r2, #32
 8013630:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013634:	79fb      	ldrb	r3, [r7, #7]
 8013636:	1e9a      	subs	r2, r3, #2
 8013638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363a:	1c59      	adds	r1, r3, #1
 801363c:	6679      	str	r1, [r7, #100]	; 0x64
 801363e:	491b      	ldr	r1, [pc, #108]	; (80136ac <pifLog_Printf+0x120>)
 8013640:	5c8a      	ldrb	r2, [r1, r2]
 8013642:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8013646:	440b      	add	r3, r1
 8013648:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 801364c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801364e:	1c5a      	adds	r2, r3, #1
 8013650:	667a      	str	r2, [r7, #100]	; 0x64
 8013652:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8013656:	4413      	add	r3, r2
 8013658:	2220      	movs	r2, #32
 801365a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 801365e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013662:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 8013664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013666:	f107 020c 	add.w	r2, r7, #12
 801366a:	4413      	add	r3, r2
 801366c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013670:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe f958 	bl	8011928 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013678:	79fb      	ldrb	r3, [r7, #7]
 801367a:	2b01      	cmp	r3, #1
 801367c:	bf0c      	ite	eq
 801367e:	2301      	moveq	r3, #1
 8013680:	2300      	movne	r3, #0
 8013682:	b2db      	uxtb	r3, r3
 8013684:	461a      	mov	r2, r3
 8013686:	f107 030c 	add.w	r3, r7, #12
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff fde5 	bl	801325c <_printLog>
}
 8013692:	bf00      	nop
 8013694:	376c      	adds	r7, #108	; 0x6c
 8013696:	46bd      	mov	sp, r7
 8013698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801369c:	b003      	add	sp, #12
 801369e:	4770      	bx	lr
 80136a0:	20002274 	.word	0x20002274
 80136a4:	20000068 	.word	0x20000068
 80136a8:	20001366 	.word	0x20001366
 80136ac:	08027f68 	.word	0x08027f68

080136b0 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 80136b8:	2150      	movs	r1, #80	; 0x50
 80136ba:	2000      	movs	r0, #0
 80136bc:	f000 fa3e 	bl	8013b3c <pifRingBuffer_CreateHeap>
 80136c0:	4603      	mov	r3, r0
 80136c2:	4a0b      	ldr	r2, [pc, #44]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136c4:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 80136c6:	4b0a      	ldr	r3, [pc, #40]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d101      	bne.n	80136d2 <pifLog_AttachComm+0x22>
 80136ce:	2300      	movs	r3, #0
 80136d0:	e009      	b.n	80136e6 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80136d2:	4a07      	ldr	r2, [pc, #28]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80136d8:	4b06      	ldr	r3, [pc, #24]	; (80136f4 <pifLog_AttachComm+0x44>)
 80136da:	4a07      	ldr	r2, [pc, #28]	; (80136f8 <pifLog_AttachComm+0x48>)
 80136dc:	4904      	ldr	r1, [pc, #16]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7fe fd3e 	bl	8012160 <pifComm_AttachClient>
    return TRUE;
 80136e4:	2301      	movs	r3, #1
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20001388 	.word	0x20001388
 80136f4:	080131f5 	.word	0x080131f5
 80136f8:	08013073 	.word	0x08013073

080136fc <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013700:	4b06      	ldr	r3, [pc, #24]	; (801371c <pifLog_DetachComm+0x20>)
 8013702:	6a1b      	ldr	r3, [r3, #32]
 8013704:	4618      	mov	r0, r3
 8013706:	f7fe fd41 	bl	801218c <pifComm_DetachClient>
	s_log.p_comm = NULL;
 801370a:	4b04      	ldr	r3, [pc, #16]	; (801371c <pifLog_DetachComm+0x20>)
 801370c:	2200      	movs	r2, #0
 801370e:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013710:	4803      	ldr	r0, [pc, #12]	; (8013720 <pifLog_DetachComm+0x24>)
 8013712:	f000 fa3f 	bl	8013b94 <pifRingBuffer_Destroy>
}
 8013716:	bf00      	nop
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20001388 	.word	0x20001388
 8013720:	200013ac 	.word	0x200013ac

08013724 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013728:	e008      	b.n	801373c <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 801372a:	4b0a      	ldr	r3, [pc, #40]	; (8013754 <pifLog_SendAndExit+0x30>)
 801372c:	6a1b      	ldr	r3, [r3, #32]
 801372e:	69db      	ldr	r3, [r3, #28]
 8013730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013732:	4a08      	ldr	r2, [pc, #32]	; (8013754 <pifLog_SendAndExit+0x30>)
 8013734:	6a12      	ldr	r2, [r2, #32]
 8013736:	69d2      	ldr	r2, [r2, #28]
 8013738:	4610      	mov	r0, r2
 801373a:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 801373c:	4b05      	ldr	r3, [pc, #20]	; (8013754 <pifLog_SendAndExit+0x30>)
 801373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013740:	4618      	mov	r0, r3
 8013742:	f000 faef 	bl	8013d24 <pifRingBuffer_GetFillSize>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1ee      	bne.n	801372a <pifLog_SendAndExit+0x6>
	}
}
 801374c:	bf00      	nop
 801374e:	bf00      	nop
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	20001388 	.word	0x20001388

08013758 <_calcuratePositionModulation>:
	static PifDList s_cs_list;
#endif


static BOOL _calcuratePositionModulation(PifPulse* p_owner, uint16_t diff)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	807b      	strh	r3, [r7, #2]
	BOOL rtn = FALSE;
 8013764:	2300      	movs	r3, #0
 8013766:	73fb      	strb	r3, [r7, #15]

	if (diff < p_owner->__threshold_1us) {
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801376e:	887a      	ldrh	r2, [r7, #2]
 8013770:	429a      	cmp	r2, r3
 8013772:	d23f      	bcs.n	80137f4 <_calcuratePositionModulation+0x9c>
		p_owner->_channel++;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801377a:	b2db      	uxtb	r3, r3
 801377c:	3301      	adds	r3, #1
 801377e:	b2db      	uxtb	r3, r3
 8013780:	b25a      	sxtb	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	71da      	strb	r2, [r3, #7]
		if (p_owner->_channel < p_owner->__channel_count) {
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801378c:	461a      	mov	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013794:	429a      	cmp	r2, r3
 8013796:	da30      	bge.n	80137fa <_calcuratePositionModulation+0xa2>
			if (p_owner->__valid_range[3].check) {
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d019      	beq.n	80137dc <_calcuratePositionModulation+0x84>
				if (diff >= p_owner->__valid_range[3].min && diff <= p_owner->__valid_range[3].max) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80137ac:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	461a      	mov	r2, r3
 80137b4:	887b      	ldrh	r3, [r7, #2]
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d31f      	bcc.n	80137fa <_calcuratePositionModulation+0xa2>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80137be:	887a      	ldrh	r2, [r7, #2]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d81a      	bhi.n	80137fa <_calcuratePositionModulation+0xa2>
					p_owner->__p_position[p_owner->_channel] = diff;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4413      	add	r3, r2
 80137d2:	887a      	ldrh	r2, [r7, #2]
 80137d4:	801a      	strh	r2, [r3, #0]
					rtn = TRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	73fb      	strb	r3, [r7, #15]
 80137da:	e00e      	b.n	80137fa <_calcuratePositionModulation+0xa2>
				}
			}
			else {
				p_owner->__p_position[p_owner->_channel] = diff;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	887a      	ldrh	r2, [r7, #2]
 80137ec:	801a      	strh	r2, [r3, #0]
				rtn = TRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	73fb      	strb	r3, [r7, #15]
 80137f2:	e002      	b.n	80137fa <_calcuratePositionModulation+0xa2>
			}
		}
	}
	else {
		p_owner->_channel = -1;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	22ff      	movs	r2, #255	; 0xff
 80137f8:	71da      	strb	r2, [r3, #7]
	}
	return rtn;
 80137fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <pifPulse_Init>:
}

#endif	// __PIF_COLLECT_SIGNAL__

BOOL pifPulse_Init(PifPulse* p_owner, PifId id)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d104      	bne.n	8013824 <pifPulse_Init+0x1c>
        pif_error = E_INVALID_PARAM;
 801381a:	4b0e      	ldr	r3, [pc, #56]	; (8013854 <pifPulse_Init+0x4c>)
 801381c:	2201      	movs	r2, #1
 801381e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8013820:	2300      	movs	r3, #0
 8013822:	e012      	b.n	801384a <pifPulse_Init+0x42>
    }

	memset(p_owner, 0, sizeof(PifPulse));
 8013824:	224c      	movs	r2, #76	; 0x4c
 8013826:	2100      	movs	r1, #0
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f00e f965 	bl	8021af8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801382e:	887b      	ldrh	r3, [r7, #2]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d106      	bne.n	8013842 <pifPulse_Init+0x3a>
 8013834:	4b08      	ldr	r3, [pc, #32]	; (8013858 <pifPulse_Init+0x50>)
 8013836:	881b      	ldrh	r3, [r3, #0]
 8013838:	1c5a      	adds	r2, r3, #1
 801383a:	b291      	uxth	r1, r2
 801383c:	4a06      	ldr	r2, [pc, #24]	; (8013858 <pifPulse_Init+0x50>)
 801383e:	8011      	strh	r1, [r2, #0]
 8013840:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	887a      	ldrh	r2, [r7, #2]
 8013846:	809a      	strh	r2, [r3, #4]
	PifPulseColSig* p_colsig = pifDList_AddLast(&s_cs_list, sizeof(PifPulseColSig));
	if (!p_colsig) goto fail;
	p_colsig->p_owner = p_owner;
	p_owner->__p_colsig = p_colsig;
#endif
    return TRUE;
 8013848:	2301      	movs	r3, #1
#ifdef __PIF_COLLECT_SIGNAL__
fail:
	pifPulse_Clear(p_owner);
    return FALSE;
#endif
}
 801384a:	4618      	mov	r0, r3
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	20001365 	.word	0x20001365
 8013858:	2000005c 	.word	0x2000005c

0801385c <pifPulse_SetPositionMode>:
{
	p_owner->_measure_mode &= ~measure_mode;
}

BOOL pifPulse_SetPositionMode(PifPulse* p_owner, uint8_t channel_count, uint16_t threshold_1us, uint16_t* p_value)
{
 801385c:	b480      	push	{r7}
 801385e:	b085      	sub	sp, #20
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	607b      	str	r3, [r7, #4]
 8013866:	460b      	mov	r3, r1
 8013868:	72fb      	strb	r3, [r7, #11]
 801386a:	4613      	mov	r3, r2
 801386c:	813b      	strh	r3, [r7, #8]
    if (p_owner->_measure_mode & PIF_PMM_EDGE_MASK) {
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	799b      	ldrb	r3, [r3, #6]
 8013872:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013876:	2b00      	cmp	r3, #0
 8013878:	d004      	beq.n	8013884 <pifPulse_SetPositionMode+0x28>
		pif_error = E_INVALID_PARAM;
 801387a:	4b0f      	ldr	r3, [pc, #60]	; (80138b8 <pifPulse_SetPositionMode+0x5c>)
 801387c:	2201      	movs	r2, #1
 801387e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013880:	2300      	movs	r3, #0
 8013882:	e012      	b.n	80138aa <pifPulse_SetPositionMode+0x4e>
    }

	p_owner->__channel_count = channel_count;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	7afa      	ldrb	r2, [r7, #11]
 8013888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    p_owner->__threshold_1us = threshold_1us;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	893a      	ldrh	r2, [r7, #8]
 8013890:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_owner->__p_position = p_value;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	645a      	str	r2, [r3, #68]	; 0x44
    p_owner->_measure_mode |= PIF_PMM_TICK_POSITION;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	799b      	ldrb	r3, [r3, #6]
 801389e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138a2:	b2da      	uxtb	r2, r3
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	719a      	strb	r2, [r3, #6]
    return TRUE;
 80138a8:	2301      	movs	r3, #1
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3714      	adds	r7, #20
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	20001365 	.word	0x20001365

080138bc <pifPulse_SetValidRange>:

BOOL pifPulse_SetValidRange(PifPulse* p_owner, uint8_t measure_mode, uint32_t min, uint32_t max)
{
 80138bc:	b480      	push	{r7}
 80138be:	b087      	sub	sp, #28
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	603b      	str	r3, [r7, #0]
 80138c8:	460b      	mov	r3, r1
 80138ca:	72fb      	strb	r3, [r7, #11]
	int index = -1;
 80138cc:	f04f 33ff 	mov.w	r3, #4294967295
 80138d0:	617b      	str	r3, [r7, #20]

	switch (measure_mode) {
 80138d2:	7afb      	ldrb	r3, [r7, #11]
 80138d4:	2b40      	cmp	r3, #64	; 0x40
 80138d6:	d013      	beq.n	8013900 <pifPulse_SetValidRange+0x44>
 80138d8:	2b40      	cmp	r3, #64	; 0x40
 80138da:	dc14      	bgt.n	8013906 <pifPulse_SetValidRange+0x4a>
 80138dc:	2b20      	cmp	r3, #32
 80138de:	d00c      	beq.n	80138fa <pifPulse_SetValidRange+0x3e>
 80138e0:	2b20      	cmp	r3, #32
 80138e2:	dc10      	bgt.n	8013906 <pifPulse_SetValidRange+0x4a>
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d002      	beq.n	80138ee <pifPulse_SetValidRange+0x32>
 80138e8:	2b10      	cmp	r3, #16
 80138ea:	d003      	beq.n	80138f4 <pifPulse_SetValidRange+0x38>
 80138ec:	e00b      	b.n	8013906 <pifPulse_SetValidRange+0x4a>
	case PIF_PMM_COMMON_PERIOD:
		index = 0;
 80138ee:	2300      	movs	r3, #0
 80138f0:	617b      	str	r3, [r7, #20]
		break;
 80138f2:	e008      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_LOW_WIDTH:
		index = 1;
 80138f4:	2301      	movs	r3, #1
 80138f6:	617b      	str	r3, [r7, #20]
		break;
 80138f8:	e005      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_HIGH_WIDTH:
		index = 2;
 80138fa:	2302      	movs	r3, #2
 80138fc:	617b      	str	r3, [r7, #20]
		break;
 80138fe:	e002      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_TICK_POSITION:
		index = 3;
 8013900:	2303      	movs	r3, #3
 8013902:	617b      	str	r3, [r7, #20]
		break;
 8013904:	bf00      	nop
	}
	if (index < 0) {
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	da04      	bge.n	8013916 <pifPulse_SetValidRange+0x5a>
		pif_error = E_INVALID_PARAM;
 801390c:	4b15      	ldr	r3, [pc, #84]	; (8013964 <pifPulse_SetValidRange+0xa8>)
 801390e:	2201      	movs	r2, #1
 8013910:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013912:	2300      	movs	r3, #0
 8013914:	e01f      	b.n	8013956 <pifPulse_SetValidRange+0x9a>
	}
	p_owner->__valid_range[index].check = TRUE;
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	330a      	adds	r3, #10
 801391c:	009b      	lsls	r3, r3, #2
 801391e:	4413      	add	r3, r2
 8013920:	791a      	ldrb	r2, [r3, #4]
 8013922:	f042 0201 	orr.w	r2, r2, #1
 8013926:	711a      	strb	r2, [r3, #4]
	p_owner->__valid_range[index].min = min;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801392e:	b299      	uxth	r1, r3
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	330a      	adds	r3, #10
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4413      	add	r3, r2
 801393a:	889a      	ldrh	r2, [r3, #4]
 801393c:	f361 024f 	bfi	r2, r1, #1, #15
 8013940:	809a      	strh	r2, [r3, #4]
	p_owner->__valid_range[index].max = max;
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	b299      	uxth	r1, r3
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	330a      	adds	r3, #10
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	460a      	mov	r2, r1
 8013952:	80da      	strh	r2, [r3, #6]
	return TRUE;
 8013954:	2301      	movs	r3, #1
}
 8013956:	4618      	mov	r0, r3
 8013958:	371c      	adds	r7, #28
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	20001365 	.word	0x20001365

08013968 <pifPulse_sigTick>:

	return rtn;
}

uint8_t pifPulse_sigTick(PifPulse* p_owner, uint32_t time_us)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6039      	str	r1, [r7, #0]
	uint8_t rtn = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	73fb      	strb	r3, [r7, #15]

	p_owner->__data[p_owner->__ptr].falling = time_us;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	3301      	adds	r3, #1
 8013980:	00db      	lsls	r3, r3, #3
 8013982:	4413      	add	r3, r2
 8013984:	683a      	ldr	r2, [r7, #0]
 8013986:	605a      	str	r2, [r3, #4]
	if (p_owner->_measure_mode & PIF_PMM_COMMON_COUNT) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	799b      	ldrb	r3, [r3, #6]
 801398c:	f003 0302 	and.w	r3, r3, #2
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <pifPulse_sigTick+0x36>
		p_owner->falling_count++;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	601a      	str	r2, [r3, #0]
	}
	if (p_owner->_measure_mode & PIF_PMM_TICK_POSITION) {
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	799b      	ldrb	r3, [r3, #6]
 80139a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d01f      	beq.n	80139ea <pifPulse_sigTick+0x82>
		rtn |= _calcuratePositionModulation(p_owner, p_owner->__data[p_owner->__ptr].falling - p_owner->__data[p_owner->__last_ptr].falling) << 4;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	3301      	adds	r3, #1
 80139b4:	00db      	lsls	r3, r3, #3
 80139b6:	4413      	add	r3, r2
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80139c2:	6879      	ldr	r1, [r7, #4]
 80139c4:	3301      	adds	r3, #1
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	4619      	mov	r1, r3
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff febf 	bl	8013758 <_calcuratePositionModulation>
 80139da:	4603      	mov	r3, r0
 80139dc:	011b      	lsls	r3, r3, #4
 80139de:	b25a      	sxtb	r2, r3
 80139e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139e4:	4313      	orrs	r3, r2
 80139e6:	b25b      	sxtb	r3, r3
 80139e8:	73fb      	strb	r3, [r7, #15]
	}
	p_owner->__last_ptr = p_owner->__ptr;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_PULSE_DATA_MASK;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139fc:	3301      	adds	r3, #1
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f003 0303 	and.w	r3, r3, #3
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (p_owner->__count < PIF_PULSE_DATA_SIZE) p_owner->__count++;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d807      	bhi.n	8013a26 <pifPulse_sigTick+0xbe>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (p_owner->__evt.tick) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d005      	beq.n	8013a3a <pifPulse_sigTick+0xd2>
		(*p_owner->__evt.tick)(p_owner->__p_issuer);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013a36:	4610      	mov	r0, r2
 8013a38:	4798      	blx	r3
	}

	return rtn;
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	791b      	ldrb	r3, [r3, #4]
 8013a54:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d002      	beq.n	8013a64 <_chopOff+0x20>
 8013a5e:	2b02      	cmp	r3, #2
 8013a60:	d02e      	beq.n	8013ac0 <_chopOff+0x7c>
 8013a62:	e065      	b.n	8013b30 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013a64:	2300      	movs	r3, #0
 8013a66:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	8adb      	ldrh	r3, [r3, #22]
 8013a6c:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013a6e:	e021      	b.n	8013ab4 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	691a      	ldr	r2, [r3, #16]
 8013a74:	89bb      	ldrh	r3, [r7, #12]
 8013a76:	4413      	add	r3, r2
 8013a78:	781a      	ldrb	r2, [r3, #0]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	7e9b      	ldrb	r3, [r3, #26]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d108      	bne.n	8013a94 <_chopOff+0x50>
				if (size > count) {
 8013a82:	89fa      	ldrh	r2, [r7, #14]
 8013a84:	887b      	ldrh	r3, [r7, #2]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d904      	bls.n	8013a94 <_chopOff+0x50>
					p_owner->__tail = tail;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	89ba      	ldrh	r2, [r7, #12]
 8013a8e:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e04e      	b.n	8013b32 <_chopOff+0xee>
				}
			}
			tail++;
 8013a94:	89bb      	ldrh	r3, [r7, #12]
 8013a96:	3301      	adds	r3, #1
 8013a98:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	891b      	ldrh	r3, [r3, #8]
 8013a9e:	89ba      	ldrh	r2, [r7, #12]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d304      	bcc.n	8013aae <_chopOff+0x6a>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	891b      	ldrh	r3, [r3, #8]
 8013aa8:	89ba      	ldrh	r2, [r7, #12]
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	81bb      	strh	r3, [r7, #12]
			size++;
 8013aae:	89fb      	ldrh	r3, [r7, #14]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	8a9b      	ldrh	r3, [r3, #20]
 8013ab8:	89ba      	ldrh	r2, [r7, #12]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d1d8      	bne.n	8013a70 <_chopOff+0x2c>
		}
		break;
 8013abe:	e037      	b.n	8013b30 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 f92f 	bl	8013d24 <pifRingBuffer_GetFillSize>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	8b5b      	ldrh	r3, [r3, #26]
 8013ace:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013ad0:	e004      	b.n	8013adc <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	8b5a      	ldrh	r2, [r3, #26]
 8013ad6:	89fb      	ldrh	r3, [r7, #14]
 8013ad8:	4413      	add	r3, r2
 8013ada:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013adc:	887a      	ldrh	r2, [r7, #2]
 8013ade:	89fb      	ldrh	r3, [r7, #14]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d8f6      	bhi.n	8013ad2 <_chopOff+0x8e>
		}
		if (size < length) {
 8013ae4:	89fa      	ldrh	r2, [r7, #14]
 8013ae6:	897b      	ldrh	r3, [r7, #10]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d216      	bcs.n	8013b1a <_chopOff+0xd6>
			p_owner->__tail += size;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	8ada      	ldrh	r2, [r3, #22]
 8013af0:	89fb      	ldrh	r3, [r7, #14]
 8013af2:	4413      	add	r3, r2
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8ada      	ldrh	r2, [r3, #22]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	891b      	ldrh	r3, [r3, #8]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d307      	bcc.n	8013b16 <_chopOff+0xd2>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8ada      	ldrh	r2, [r3, #22]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	891b      	ldrh	r3, [r3, #8]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b16:	2301      	movs	r3, #1
 8013b18:	e00b      	b.n	8013b32 <_chopOff+0xee>
		}
		else if (count <= length) {
 8013b1a:	887a      	ldrh	r2, [r7, #2]
 8013b1c:	897b      	ldrh	r3, [r7, #10]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d805      	bhi.n	8013b2e <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	8a9a      	ldrh	r2, [r3, #20]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e001      	b.n	8013b32 <_chopOff+0xee>
		}
		break;
 8013b2e:	bf00      	nop
	}
	return FALSE;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
	...

08013b3c <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	4603      	mov	r3, r0
 8013b44:	460a      	mov	r2, r1
 8013b46:	80fb      	strh	r3, [r7, #6]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013b4c:	201c      	movs	r0, #28
 8013b4e:	f00d ffb5 	bl	8021abc <malloc>
 8013b52:	4603      	mov	r3, r0
 8013b54:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d104      	bne.n	8013b66 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013b5c:	4b0c      	ldr	r3, [pc, #48]	; (8013b90 <pifRingBuffer_CreateHeap+0x54>)
 8013b5e:	2203      	movs	r2, #3
 8013b60:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e010      	b.n	8013b88 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	88ba      	ldrh	r2, [r7, #4]
 8013b6a:	88f9      	ldrh	r1, [r7, #6]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 f829 	bl	8013bc4 <pifRingBuffer_InitHeap>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d106      	bne.n	8013b86 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013b78:	f107 030c 	add.w	r3, r7, #12
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f000 f809 	bl	8013b94 <pifRingBuffer_Destroy>
		return NULL;
 8013b82:	2300      	movs	r3, #0
 8013b84:	e000      	b.n	8013b88 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013b86:	68fb      	ldr	r3, [r7, #12]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3710      	adds	r7, #16
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	20001365 	.word	0x20001365

08013b94 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d00c      	beq.n	8013bbc <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f000 f854 	bl	8013c54 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f00d ff8b 	bl	8021acc <free>
		*pp_owner = NULL;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	601a      	str	r2, [r3, #0]
	}
}
 8013bbc:	bf00      	nop
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	807b      	strh	r3, [r7, #2]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <pifRingBuffer_InitHeap+0x1c>
 8013bda:	883b      	ldrh	r3, [r7, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d104      	bne.n	8013bea <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013be0:	4b1a      	ldr	r3, [pc, #104]	; (8013c4c <pifRingBuffer_InitHeap+0x88>)
 8013be2:	2201      	movs	r2, #1
 8013be4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013be6:	2300      	movs	r3, #0
 8013be8:	e02b      	b.n	8013c42 <pifRingBuffer_InitHeap+0x7e>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013bea:	221c      	movs	r2, #28
 8013bec:	2100      	movs	r1, #0
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f00d ff82 	bl	8021af8 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013bf4:	883b      	ldrh	r3, [r7, #0]
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	f00d ff2d 	bl	8021a58 <calloc>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d108      	bne.n	8013c20 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013c0e:	4b0f      	ldr	r3, [pc, #60]	; (8013c4c <pifRingBuffer_InitHeap+0x88>)
 8013c10:	2203      	movs	r2, #3
 8013c12:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013c14:	bf00      	nop
	p_owner->_id = id;
    p_owner->_size = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f000 f81c 	bl	8013c54 <pifRingBuffer_Clear>
    return FALSE;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	e010      	b.n	8013c42 <pifRingBuffer_InitHeap+0x7e>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013c20:	887b      	ldrh	r3, [r7, #2]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <pifRingBuffer_InitHeap+0x70>
 8013c26:	4b0a      	ldr	r3, [pc, #40]	; (8013c50 <pifRingBuffer_InitHeap+0x8c>)
 8013c28:	881b      	ldrh	r3, [r3, #0]
 8013c2a:	1c5a      	adds	r2, r3, #1
 8013c2c:	b291      	uxth	r1, r2
 8013c2e:	4a08      	ldr	r2, [pc, #32]	; (8013c50 <pifRingBuffer_InitHeap+0x8c>)
 8013c30:	8011      	strh	r1, [r2, #0]
 8013c32:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	887a      	ldrh	r2, [r7, #2]
 8013c38:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	883a      	ldrh	r2, [r7, #0]
 8013c3e:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8013c40:	2301      	movs	r3, #1
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3708      	adds	r7, #8
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	20001365 	.word	0x20001365
 8013c50:	2000005c 	.word	0x2000005c

08013c54 <pifRingBuffer_Clear>:
    p_owner->_size = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	791b      	ldrb	r3, [r3, #4]
 8013c60:	f003 0301 	and.w	r3, r3, #1
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d108      	bne.n	8013c7c <pifRingBuffer_Clear+0x28>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	691b      	ldr	r3, [r3, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d004      	beq.n	8013c7c <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	691b      	ldr	r3, [r3, #16]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f00d ff28 	bl	8021acc <free>
    }
    p_owner->__p_buffer = NULL;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	611a      	str	r2, [r3, #16]
}
 8013c82:	bf00      	nop
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013c8a:	b480      	push	{r7}
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	60da      	str	r2, [r3, #12]
}
 8013c9a:	bf00      	nop
 8013c9c:	370c      	adds	r7, #12
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr

08013ca6 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013ca6:	b480      	push	{r7}
 8013ca8:	b083      	sub	sp, #12
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	460b      	mov	r3, r1
 8013cb0:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6919      	ldr	r1, [r3, #16]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	8adb      	ldrh	r3, [r3, #22]
 8013cba:	461a      	mov	r2, r3
 8013cbc:	887b      	ldrh	r3, [r7, #2]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	8912      	ldrh	r2, [r2, #8]
 8013cc4:	fb93 f0f2 	sdiv	r0, r3, r2
 8013cc8:	fb02 f200 	mul.w	r2, r2, r0
 8013ccc:	1a9b      	subs	r3, r3, r2
 8013cce:	440b      	add	r3, r1
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	691b      	ldr	r3, [r3, #16]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	bf14      	ite	ne
 8013cec:	2301      	movne	r3, #1
 8013cee:	2300      	moveq	r3, #0
 8013cf0:	b2db      	uxtb	r3, r3
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	370c      	adds	r7, #12
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr

08013cfe <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013cfe:	b480      	push	{r7}
 8013d00:	b083      	sub	sp, #12
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	8a9a      	ldrh	r2, [r3, #20]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8adb      	ldrh	r3, [r3, #22]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	bf0c      	ite	eq
 8013d12:	2301      	moveq	r3, #1
 8013d14:	2300      	movne	r3, #0
 8013d16:	b2db      	uxtb	r3, r3
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	370c      	adds	r7, #12
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	8a9a      	ldrh	r2, [r3, #20]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	8adb      	ldrh	r3, [r3, #22]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d306      	bcc.n	8013d46 <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8a9a      	ldrh	r2, [r3, #20]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	8adb      	ldrh	r3, [r3, #22]
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	81fb      	strh	r3, [r7, #14]
 8013d44:	e009      	b.n	8013d5a <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	891a      	ldrh	r2, [r3, #8]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8adb      	ldrh	r3, [r3, #22]
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	b29a      	uxth	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8a9b      	ldrh	r3, [r3, #20]
 8013d56:	4413      	add	r3, r2
 8013d58:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013d5a:	89fb      	ldrh	r3, [r7, #14]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	460b      	mov	r3, r1
 8013d72:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	8adb      	ldrh	r3, [r3, #22]
 8013d78:	461a      	mov	r2, r3
 8013d7a:	887b      	ldrh	r3, [r7, #2]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	8912      	ldrh	r2, [r2, #8]
 8013d82:	fb93 f1f2 	sdiv	r1, r3, r2
 8013d86:	fb02 f201 	mul.w	r2, r2, r1
 8013d8a:	1a9b      	subs	r3, r3, r2
 8013d8c:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8a9b      	ldrh	r3, [r3, #20]
 8013d92:	89fa      	ldrh	r2, [r7, #14]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d805      	bhi.n	8013da4 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	8a9a      	ldrh	r2, [r3, #20]
 8013d9c:	89fb      	ldrh	r3, [r7, #14]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	e004      	b.n	8013dae <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	891a      	ldrh	r2, [r3, #8]
 8013da8:	89fb      	ldrh	r3, [r7, #14]
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	b29b      	uxth	r3, r3
    }
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b085      	sub	sp, #20
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	8a9a      	ldrh	r2, [r3, #20]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	8adb      	ldrh	r3, [r3, #22]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d206      	bcs.n	8013ddc <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	8ada      	ldrh	r2, [r3, #22]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8a9b      	ldrh	r3, [r3, #20]
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	81fb      	strh	r3, [r7, #14]
 8013dda:	e009      	b.n	8013df0 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	891a      	ldrh	r2, [r3, #8]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	8a9b      	ldrh	r3, [r3, #20]
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8adb      	ldrh	r3, [r3, #22]
 8013dec:	4413      	add	r3, r2
 8013dee:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013df0:	89fb      	ldrh	r3, [r7, #14]
 8013df2:	3b01      	subs	r3, #1
 8013df4:	b29b      	uxth	r3, r3
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <pifRingBuffer_BackupHead>:

void pifRingBuffer_BackupHead(PifRingBuffer* p_owner)
{
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->__head;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8a9a      	ldrh	r2, [r3, #20]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	831a      	strh	r2, [r3, #24]
}
 8013e12:	bf00      	nop
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <pifRingBuffer_RestoreHead>:

void pifRingBuffer_RestoreHead(PifRingBuffer* p_owner)
{
 8013e1e:	b480      	push	{r7}
 8013e20:	b083      	sub	sp, #12
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	8b1a      	ldrh	r2, [r3, #24]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	829a      	strh	r2, [r3, #20]
}
 8013e2e:	bf00      	nop
 8013e30:	370c      	adds	r7, #12
 8013e32:	46bd      	mov	sp, r7
 8013e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e38:	4770      	bx	lr
	...

08013e3c <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	460b      	mov	r3, r1
 8013e46:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	8a9b      	ldrh	r3, [r3, #20]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	891b      	ldrh	r3, [r3, #8]
 8013e54:	89fa      	ldrh	r2, [r7, #14]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d301      	bcc.n	8013e5e <pifRingBuffer_PutByte+0x22>
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8adb      	ldrh	r3, [r3, #22]
 8013e62:	89fa      	ldrh	r2, [r7, #14]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d10b      	bne.n	8013e80 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013e68:	2101      	movs	r1, #1
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff fdea 	bl	8013a44 <_chopOff>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d104      	bne.n	8013e80 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013e76:	4b0a      	ldr	r3, [pc, #40]	; (8013ea0 <pifRingBuffer_PutByte+0x64>)
 8013e78:	2204      	movs	r2, #4
 8013e7a:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e00a      	b.n	8013e96 <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	8a92      	ldrh	r2, [r2, #20]
 8013e88:	4413      	add	r3, r2
 8013e8a:	78fa      	ldrb	r2, [r7, #3]
 8013e8c:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	89fa      	ldrh	r2, [r7, #14]
 8013e92:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013e94:	2301      	movs	r3, #1
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	20001365 	.word	0x20001365

08013ea4 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f7ff ff81 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013ebc:	88fa      	ldrh	r2, [r7, #6]
 8013ebe:	8abb      	ldrh	r3, [r7, #20]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d90f      	bls.n	8013ee4 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013ec4:	88fa      	ldrh	r2, [r7, #6]
 8013ec6:	8abb      	ldrh	r3, [r7, #20]
 8013ec8:	1ad3      	subs	r3, r2, r3
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4619      	mov	r1, r3
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f7ff fdb8 	bl	8013a44 <_chopOff>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d104      	bne.n	8013ee4 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013eda:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <pifRingBuffer_PutData+0x90>)
 8013edc:	2204      	movs	r2, #4
 8013ede:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	e023      	b.n	8013f2c <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	82fb      	strh	r3, [r7, #22]
 8013ee8:	e01b      	b.n	8013f22 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013eea:	8afb      	ldrh	r3, [r7, #22]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	441a      	add	r2, r3
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	68f9      	ldr	r1, [r7, #12]
 8013ef6:	8a89      	ldrh	r1, [r1, #20]
 8013ef8:	440b      	add	r3, r1
 8013efa:	7812      	ldrb	r2, [r2, #0]
 8013efc:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	8a9b      	ldrh	r3, [r3, #20]
 8013f02:	3301      	adds	r3, #1
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	8a9a      	ldrh	r2, [r3, #20]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	891b      	ldrh	r3, [r3, #8]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d302      	bcc.n	8013f1c <pifRingBuffer_PutData+0x78>
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013f1c:	8afb      	ldrh	r3, [r7, #22]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	82fb      	strh	r3, [r7, #22]
 8013f22:	8afa      	ldrh	r2, [r7, #22]
 8013f24:	88fb      	ldrh	r3, [r7, #6]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d3df      	bcc.n	8013eea <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013f2a:	2301      	movs	r3, #1
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	20001365 	.word	0x20001365

08013f38 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f7ff ff39 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013f4c:	6838      	ldr	r0, [r7, #0]
 8013f4e:	f7ec f94d 	bl	80001ec <strlen>
 8013f52:	4603      	mov	r3, r0
 8013f54:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013f56:	897a      	ldrh	r2, [r7, #10]
 8013f58:	89bb      	ldrh	r3, [r7, #12]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d90f      	bls.n	8013f7e <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013f5e:	897a      	ldrh	r2, [r7, #10]
 8013f60:	89bb      	ldrh	r3, [r7, #12]
 8013f62:	1ad3      	subs	r3, r2, r3
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff fd6b 	bl	8013a44 <_chopOff>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d104      	bne.n	8013f7e <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013f74:	4b16      	ldr	r3, [pc, #88]	; (8013fd0 <pifRingBuffer_PutString+0x98>)
 8013f76:	2204      	movs	r2, #4
 8013f78:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	e023      	b.n	8013fc6 <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013f7e:	2300      	movs	r3, #0
 8013f80:	81fb      	strh	r3, [r7, #14]
 8013f82:	e01b      	b.n	8013fbc <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013f84:	89fb      	ldrh	r3, [r7, #14]
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	441a      	add	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	6879      	ldr	r1, [r7, #4]
 8013f90:	8a89      	ldrh	r1, [r1, #20]
 8013f92:	440b      	add	r3, r1
 8013f94:	7812      	ldrb	r2, [r2, #0]
 8013f96:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	8a9b      	ldrh	r3, [r3, #20]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	8a9a      	ldrh	r2, [r3, #20]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	891b      	ldrh	r3, [r3, #8]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d302      	bcc.n	8013fb6 <pifRingBuffer_PutString+0x7e>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013fb6:	89fb      	ldrh	r3, [r7, #14]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	81fb      	strh	r3, [r7, #14]
 8013fbc:	89fa      	ldrh	r2, [r7, #14]
 8013fbe:	897b      	ldrh	r3, [r7, #10]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d3df      	bcc.n	8013f84 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013fc4:	2301      	movs	r3, #1
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	20001365 	.word	0x20001365

08013fd4 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8ada      	ldrh	r2, [r3, #22]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8a9b      	ldrh	r3, [r3, #20]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d101      	bne.n	8013fee <pifRingBuffer_GetByte+0x1a>
 8013fea:	2300      	movs	r3, #0
 8013fec:	e017      	b.n	801401e <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	8ad2      	ldrh	r2, [r2, #22]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	781a      	ldrb	r2, [r3, #0]
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8adb      	ldrh	r3, [r3, #22]
 8014002:	3301      	adds	r3, #1
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	8ada      	ldrh	r2, [r3, #22]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	891b      	ldrh	r3, [r3, #8]
 8014012:	429a      	cmp	r2, r3
 8014014:	d302      	bcc.n	801401c <pifRingBuffer_GetByte+0x48>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	82da      	strh	r2, [r3, #22]
	return TRUE;
 801401c:	2301      	movs	r3, #1
}
 801401e:	4618      	mov	r0, r3
 8014020:	370c      	adds	r7, #12
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr

0801402a <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 801402a:	b480      	push	{r7}
 801402c:	b087      	sub	sp, #28
 801402e:	af00      	add	r7, sp, #0
 8014030:	60f8      	str	r0, [r7, #12]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	461a      	mov	r2, r3
 8014036:	460b      	mov	r3, r1
 8014038:	817b      	strh	r3, [r7, #10]
 801403a:	4613      	mov	r3, r2
 801403c:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	8ada      	ldrh	r2, [r3, #22]
 8014042:	893b      	ldrh	r3, [r7, #8]
 8014044:	4413      	add	r3, r2
 8014046:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	891b      	ldrh	r3, [r3, #8]
 801404c:	8afa      	ldrh	r2, [r7, #22]
 801404e:	429a      	cmp	r2, r3
 8014050:	d304      	bcc.n	801405c <pifRingBuffer_CopyToArray+0x32>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	8afa      	ldrh	r2, [r7, #22]
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 801405c:	2300      	movs	r3, #0
 801405e:	82bb      	strh	r3, [r7, #20]
 8014060:	e01e      	b.n	80140a0 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	691a      	ldr	r2, [r3, #16]
 8014066:	8afb      	ldrh	r3, [r7, #22]
 8014068:	441a      	add	r2, r3
 801406a:	8abb      	ldrh	r3, [r7, #20]
 801406c:	68f9      	ldr	r1, [r7, #12]
 801406e:	440b      	add	r3, r1
 8014070:	7812      	ldrb	r2, [r2, #0]
 8014072:	701a      	strb	r2, [r3, #0]
		tail++;
 8014074:	8afb      	ldrh	r3, [r7, #22]
 8014076:	3301      	adds	r3, #1
 8014078:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	891b      	ldrh	r3, [r3, #8]
 801407e:	8afa      	ldrh	r2, [r7, #22]
 8014080:	429a      	cmp	r2, r3
 8014082:	d301      	bcc.n	8014088 <pifRingBuffer_CopyToArray+0x5e>
 8014084:	2300      	movs	r3, #0
 8014086:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8a9b      	ldrh	r3, [r3, #20]
 801408c:	8afa      	ldrh	r2, [r7, #22]
 801408e:	429a      	cmp	r2, r3
 8014090:	d103      	bne.n	801409a <pifRingBuffer_CopyToArray+0x70>
 8014092:	8abb      	ldrh	r3, [r7, #20]
 8014094:	3301      	adds	r3, #1
 8014096:	b29b      	uxth	r3, r3
 8014098:	e007      	b.n	80140aa <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 801409a:	8abb      	ldrh	r3, [r7, #20]
 801409c:	3301      	adds	r3, #1
 801409e:	82bb      	strh	r3, [r7, #20]
 80140a0:	8aba      	ldrh	r2, [r7, #20]
 80140a2:	897b      	ldrh	r3, [r7, #10]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d3dc      	bcc.n	8014062 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 80140a8:	897b      	ldrh	r3, [r7, #10]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	371c      	adds	r7, #28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b084      	sub	sp, #16
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	460b      	mov	r3, r1
 80140c0:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff fe2e 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80140c8:	4603      	mov	r3, r0
 80140ca:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 80140cc:	887a      	ldrh	r2, [r7, #2]
 80140ce:	89fb      	ldrh	r3, [r7, #14]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d304      	bcc.n	80140de <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	8a9a      	ldrh	r2, [r3, #20]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 80140dc:	e00e      	b.n	80140fc <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	8adb      	ldrh	r3, [r3, #22]
 80140e2:	461a      	mov	r2, r3
 80140e4:	887b      	ldrh	r3, [r7, #2]
 80140e6:	4413      	add	r3, r2
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	8912      	ldrh	r2, [r2, #8]
 80140ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80140f0:	fb02 f201 	mul.w	r2, r2, r1
 80140f4:	1a9b      	subs	r3, r3, r2
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	82da      	strh	r2, [r3, #22]
}
 80140fc:	bf00      	nop
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <_setTable>:
static uint32_t s_table[PIF_TASK_TABLE_SIZE];
static uint8_t s_number = 0;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8014104:	b480      	push	{r7}
 8014106:	b089      	sub	sp, #36	; 0x24
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	6039      	str	r1, [r7, #0]
 801410e:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8014110:	f04f 33ff 	mov.w	r3, #4294967295
 8014114:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014116:	2300      	movs	r3, #0
 8014118:	61bb      	str	r3, [r7, #24]
 801411a:	e00f      	b.n	801413c <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 801411c:	2201      	movs	r2, #1
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	fa02 f303 	lsl.w	r3, r2, r3
 8014124:	461a      	mov	r2, r3
 8014126:	4b34      	ldr	r3, [pc, #208]	; (80141f8 <_setTable+0xf4>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4013      	ands	r3, r2
 801412c:	2b00      	cmp	r3, #0
 801412e:	d102      	bne.n	8014136 <_setTable+0x32>
			num = i;
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	617b      	str	r3, [r7, #20]
			break;
 8014134:	e005      	b.n	8014142 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	3301      	adds	r3, #1
 801413a:	61bb      	str	r3, [r7, #24]
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	2b1f      	cmp	r3, #31
 8014140:	ddec      	ble.n	801411c <_setTable+0x18>
		}
	}
	if (num == -1) {
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014148:	d105      	bne.n	8014156 <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 801414a:	4b2c      	ldr	r3, [pc, #176]	; (80141fc <_setTable+0xf8>)
 801414c:	2204      	movs	r2, #4
 801414e:	701a      	strb	r2, [r3, #0]
		return -1;
 8014150:	f04f 33ff 	mov.w	r3, #4294967295
 8014154:	e04a      	b.n	80141ec <_setTable+0xe8>
	}
	bit = 1 << num;
 8014156:	2201      	movs	r2, #1
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	fa02 f303 	lsl.w	r3, r2, r3
 801415e:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8014160:	4b25      	ldr	r3, [pc, #148]	; (80141f8 <_setTable+0xf4>)
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	4313      	orrs	r3, r2
 8014168:	4a23      	ldr	r2, [pc, #140]	; (80141f8 <_setTable+0xf4>)
 801416a:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 801416c:	88fb      	ldrh	r3, [r7, #6]
 801416e:	015b      	lsls	r3, r3, #5
 8014170:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8014172:	4a23      	ldr	r2, [pc, #140]	; (8014200 <_setTable+0xfc>)
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	fb92 f3f3 	sdiv	r3, r2, r3
 801417a:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2b64      	cmp	r3, #100	; 0x64
 8014180:	d930      	bls.n	80141e4 <_setTable+0xe0>
		index = 100 * base;
 8014182:	4b20      	ldr	r3, [pc, #128]	; (8014204 <_setTable+0x100>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2264      	movs	r2, #100	; 0x64
 8014188:	fb02 f303 	mul.w	r3, r2, r3
 801418c:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 801418e:	2300      	movs	r3, #0
 8014190:	61bb      	str	r3, [r7, #24]
 8014192:	e017      	b.n	80141c4 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	4a1c      	ldr	r2, [pc, #112]	; (8014208 <_setTable+0x104>)
 8014198:	fba2 2303 	umull	r2, r3, r2, r3
 801419c:	095b      	lsrs	r3, r3, #5
 801419e:	f003 021f 	and.w	r2, r3, #31
 80141a2:	491a      	ldr	r1, [pc, #104]	; (801420c <_setTable+0x108>)
 80141a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80141a8:	f003 031f 	and.w	r3, r3, #31
 80141ac:	693a      	ldr	r2, [r7, #16]
 80141ae:	430a      	orrs	r2, r1
 80141b0:	4916      	ldr	r1, [pc, #88]	; (801420c <_setTable+0x108>)
 80141b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 80141b6:	69fa      	ldr	r2, [r7, #28]
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	4413      	add	r3, r2
 80141bc:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	3301      	adds	r3, #1
 80141c2:	61bb      	str	r3, [r7, #24]
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4a10      	ldr	r2, [pc, #64]	; (8014208 <_setTable+0x104>)
 80141c8:	fb82 1203 	smull	r1, r2, r2, r3
 80141cc:	1152      	asrs	r2, r2, #5
 80141ce:	17db      	asrs	r3, r3, #31
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	69ba      	ldr	r2, [r7, #24]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	dbdd      	blt.n	8014194 <_setTable+0x90>
		}
		base++;
 80141d8:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <_setTable+0x100>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	3301      	adds	r3, #1
 80141de:	4a09      	ldr	r2, [pc, #36]	; (8014204 <_setTable+0x100>)
 80141e0:	6013      	str	r3, [r2, #0]
 80141e2:	e002      	b.n	80141ea <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	2201      	movs	r2, #1
 80141e8:	701a      	strb	r2, [r3, #0]
	}
	return num;
 80141ea:	697b      	ldr	r3, [r7, #20]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3724      	adds	r7, #36	; 0x24
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	2000142c 	.word	0x2000142c
 80141fc:	20001365 	.word	0x20001365
 8014200:	0004e200 	.word	0x0004e200
 8014204:	200014b4 	.word	0x200014b4
 8014208:	51eb851f 	.word	0x51eb851f
 801420c:	20001430 	.word	0x20001430

08014210 <_resetTable>:

static void _resetTable(int number)
{
 8014210:	b480      	push	{r7}
 8014212:	b085      	sub	sp, #20
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8014218:	2201      	movs	r2, #1
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	fa02 f303 	lsl.w	r3, r2, r3
 8014220:	43db      	mvns	r3, r3
 8014222:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]
 8014228:	e00c      	b.n	8014244 <_resetTable+0x34>
		s_table[i] &= mask;
 801422a:	4a0e      	ldr	r2, [pc, #56]	; (8014264 <_resetTable+0x54>)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	401a      	ands	r2, r3
 8014236:	490b      	ldr	r1, [pc, #44]	; (8014264 <_resetTable+0x54>)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	3301      	adds	r3, #1
 8014242:	60fb      	str	r3, [r7, #12]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2b1f      	cmp	r3, #31
 8014248:	ddef      	ble.n	801422a <_resetTable+0x1a>
	}
	s_table_number &= mask;
 801424a:	4b07      	ldr	r3, [pc, #28]	; (8014268 <_resetTable+0x58>)
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	4013      	ands	r3, r2
 8014252:	4a05      	ldr	r2, [pc, #20]	; (8014268 <_resetTable+0x58>)
 8014254:	6013      	str	r3, [r2, #0]
}
 8014256:	bf00      	nop
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop
 8014264:	20001430 	.word	0x20001430
 8014268:	2000142c 	.word	0x2000142c

0801426c <_processingAlways>:

static void _processingAlways(PifTask* p_owner)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	8c1b      	ldrh	r3, [r3, #32]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d00f      	beq.n	801429c <_processingAlways+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 801427c:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <_processingAlways+0x4c>)
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	69db      	ldr	r3, [r3, #28]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	8c1b      	ldrh	r3, [r3, #32]
 801428c:	461a      	mov	r2, r3
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	4293      	cmp	r3, r2
 8014292:	d30d      	bcc.n	80142b0 <_processingAlways+0x44>
			p_owner->__delay_ms = 0;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	841a      	strh	r2, [r3, #32]
	else {
		p_owner->__running = TRUE;
		(*p_owner->__evt_loop)(p_owner);
		p_owner->__running = FALSE;
	}
}
 801429a:	e009      	b.n	80142b0 <_processingAlways+0x44>
		p_owner->__running = TRUE;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2201      	movs	r2, #1
 80142a0:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	4798      	blx	r3
		p_owner->__running = FALSE;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	761a      	strb	r2, [r3, #24]
}
 80142b0:	bf00      	nop
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	2000136c 	.word	0x2000136c

080142bc <_processingPeriodUs>:

static void _processingPeriodUs(PifTask* p_owner)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 80142c4:	4b0f      	ldr	r3, [pc, #60]	; (8014304 <_processingPeriodUs+0x48>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4798      	blx	r3
 80142ca:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	69db      	ldr	r3, [r3, #28]
 80142d0:	68fa      	ldr	r2, [r7, #12]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	461a      	mov	r2, r3
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	4293      	cmp	r3, r2
 80142e0:	d30c      	bcc.n	80142fc <_processingPeriodUs+0x40>
		p_owner->__running = TRUE;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	4798      	blx	r3
		p_owner->__running = FALSE;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	761a      	strb	r2, [r3, #24]
		p_owner->__pretime = current;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	61da      	str	r2, [r3, #28]
	}
}
 80142fc:	bf00      	nop
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	2000137c 	.word	0x2000137c

08014308 <_processingPeriodMs>:

static void _processingPeriodMs(PifTask* p_owner)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8014310:	4b0f      	ldr	r3, [pc, #60]	; (8014350 <_processingPeriodMs+0x48>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	69db      	ldr	r3, [r3, #28]
 801431a:	68fa      	ldr	r2, [r7, #12]
 801431c:	1ad3      	subs	r3, r2, r3
 801431e:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	891b      	ldrh	r3, [r3, #8]
 8014324:	461a      	mov	r2, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	4293      	cmp	r3, r2
 801432a:	d30c      	bcc.n	8014346 <_processingPeriodMs+0x3e>
		p_owner->__running = TRUE;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2201      	movs	r2, #1
 8014330:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	4798      	blx	r3
		p_owner->__running = FALSE;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2200      	movs	r2, #0
 801433e:	761a      	strb	r2, [r3, #24]
		p_owner->__pretime = current;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	61da      	str	r2, [r3, #28]
	}
}
 8014346:	bf00      	nop
 8014348:	3710      	adds	r7, #16
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	2000136c 	.word	0x2000136c

08014354 <_processingChangeUs>:

static void _processingChangeUs(PifTask* p_owner)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b086      	sub	sp, #24
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 801435c:	4b13      	ldr	r3, [pc, #76]	; (80143ac <_processingChangeUs+0x58>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4798      	blx	r3
 8014362:	6178      	str	r0, [r7, #20]
	gap = current - p_owner->__pretime;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	69db      	ldr	r3, [r3, #28]
 8014368:	697a      	ldr	r2, [r7, #20]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	613b      	str	r3, [r7, #16]
	if (gap >= p_owner->_period) {
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	891b      	ldrh	r3, [r3, #8]
 8014372:	461a      	mov	r2, r3
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	4293      	cmp	r3, r2
 8014378:	d314      	bcc.n	80143a4 <_processingChangeUs+0x50>
		p_owner->__running = TRUE;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2201      	movs	r2, #1
 801437e:	761a      	strb	r2, [r3, #24]
		period = (*p_owner->__evt_loop)(p_owner);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	4798      	blx	r3
 8014388:	4603      	mov	r3, r0
 801438a:	81fb      	strh	r3, [r7, #14]
		p_owner->__running = FALSE;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	761a      	strb	r2, [r3, #24]
		if (period > 0) p_owner->_period = period;
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <_processingChangeUs+0x4a>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	89fa      	ldrh	r2, [r7, #14]
 801439c:	811a      	strh	r2, [r3, #8]
		p_owner->__pretime = current;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	697a      	ldr	r2, [r7, #20]
 80143a2:	61da      	str	r2, [r3, #28]
	}
}
 80143a4:	bf00      	nop
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	2000137c 	.word	0x2000137c

080143b0 <_processingChangeMs>:

static void _processingChangeMs(PifTask* p_owner)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b086      	sub	sp, #24
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 80143b8:	4b13      	ldr	r3, [pc, #76]	; (8014408 <_processingChangeMs+0x58>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	617b      	str	r3, [r7, #20]
	gap = current - p_owner->__pretime;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	69db      	ldr	r3, [r3, #28]
 80143c2:	697a      	ldr	r2, [r7, #20]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	613b      	str	r3, [r7, #16]
	if (gap >= p_owner->_period) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	891b      	ldrh	r3, [r3, #8]
 80143cc:	461a      	mov	r2, r3
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d314      	bcc.n	80143fe <_processingChangeMs+0x4e>
		p_owner->__running = TRUE;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	761a      	strb	r2, [r3, #24]
		period = (*p_owner->__evt_loop)(p_owner);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	81fb      	strh	r3, [r7, #14]
		p_owner->__running = FALSE;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	761a      	strb	r2, [r3, #24]
		if (period > 0) p_owner->_period = period;
 80143ec:	89fb      	ldrh	r3, [r7, #14]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <_processingChangeMs+0x48>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	89fa      	ldrh	r2, [r7, #14]
 80143f6:	811a      	strh	r2, [r3, #8]
		p_owner->__pretime = current;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	61da      	str	r2, [r3, #28]
	}
}
 80143fe:	bf00      	nop
 8014400:	3718      	adds	r7, #24
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	2000136c 	.word	0x2000136c
 801440c:	00000000 	.word	0x00000000

08014410 <_processingRatio>:

static void _processingRatio(PifTask* p_owner)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	8c1b      	ldrh	r3, [r3, #32]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00f      	beq.n	8014440 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014420:	4b2b      	ldr	r3, [pc, #172]	; (80144d0 <_processingRatio+0xc0>)
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	69db      	ldr	r3, [r3, #28]
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	8c1b      	ldrh	r3, [r3, #32]
 8014430:	461a      	mov	r2, r3
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	4293      	cmp	r3, r2
 8014436:	d343      	bcc.n	80144c0 <_processingRatio+0xb0>
			p_owner->__delay_ms = 0;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	841a      	strh	r2, [r3, #32]
		p_owner->__running = FALSE;
#ifdef __PIF_DEBUG__
		p_owner->__count++;
#endif
	}
}
 801443e:	e03f      	b.n	80144c0 <_processingRatio+0xb0>
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014440:	4b24      	ldr	r3, [pc, #144]	; (80144d4 <_processingRatio+0xc4>)
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	461a      	mov	r2, r3
 8014446:	4b24      	ldr	r3, [pc, #144]	; (80144d8 <_processingRatio+0xc8>)
 8014448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	6952      	ldr	r2, [r2, #20]
 8014450:	2101      	movs	r1, #1
 8014452:	fa01 f202 	lsl.w	r2, r1, r2
 8014456:	4013      	ands	r3, r2
 8014458:	2b00      	cmp	r3, #0
 801445a:	d031      	beq.n	80144c0 <_processingRatio+0xb0>
		time = pif_timer1sec;
 801445c:	4b1f      	ldr	r3, [pc, #124]	; (80144dc <_processingRatio+0xcc>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 8014462:	4b1f      	ldr	r3, [pc, #124]	; (80144e0 <_processingRatio+0xd0>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	429a      	cmp	r2, r3
 801446a:	d01a      	beq.n	80144a2 <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014470:	4618      	mov	r0, r3
 8014472:	f7ec f805 	bl	8000480 <__aeabi_ui2d>
 8014476:	4602      	mov	r2, r0
 8014478:	460b      	mov	r3, r1
 801447a:	a113      	add	r1, pc, #76	; (adr r1, 80144c8 <_processingRatio+0xb8>)
 801447c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014480:	f7ec f9a2 	bl	80007c8 <__aeabi_ddiv>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	4610      	mov	r0, r2
 801448a:	4619      	mov	r1, r3
 801448c:	f7ec fb54 	bl	8000b38 <__aeabi_d2f>
 8014490:	4602      	mov	r2, r0
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__count = 0;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	625a      	str	r2, [r3, #36]	; 0x24
			pretime = time;
 801449c:	4a10      	ldr	r2, [pc, #64]	; (80144e0 <_processingRatio+0xd0>)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6013      	str	r3, [r2, #0]
		p_owner->__running = TRUE;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2201      	movs	r2, #1
 80144a6:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	4798      	blx	r3
		p_owner->__running = FALSE;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	761a      	strb	r2, [r3, #24]
		p_owner->__count++;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80144c0:	bf00      	nop
 80144c2:	3710      	adds	r7, #16
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	00000000 	.word	0x00000000
 80144cc:	412e8480 	.word	0x412e8480
 80144d0:	2000136c 	.word	0x2000136c
 80144d4:	200014b0 	.word	0x200014b0
 80144d8:	20001430 	.word	0x20001430
 80144dc:	20001368 	.word	0x20001368
 80144e0:	200014b8 	.word	0x200014b8

080144e4 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	460b      	mov	r3, r1
 80144ee:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b05      	cmp	r3, #5
 80144f6:	d83f      	bhi.n	8014578 <_checkParam+0x94>
 80144f8:	a201      	add	r2, pc, #4	; (adr r2, 8014500 <_checkParam+0x1c>)
 80144fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144fe:	bf00      	nop
 8014500:	08014519 	.word	0x08014519
 8014504:	08014579 	.word	0x08014579
 8014508:	0801453d 	.word	0x0801453d
 801450c:	0801454d 	.word	0x0801454d
 8014510:	0801453d 	.word	0x0801453d
 8014514:	0801454d 	.word	0x0801454d
    case TM_RATIO:
    	if (!period || period > 100) {
 8014518:	887b      	ldrh	r3, [r7, #2]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <_checkParam+0x40>
 801451e:	887b      	ldrh	r3, [r7, #2]
 8014520:	2b64      	cmp	r3, #100	; 0x64
 8014522:	d904      	bls.n	801452e <_checkParam+0x4a>
    		pif_error = E_INVALID_PARAM;
 8014524:	4b18      	ldr	r3, [pc, #96]	; (8014588 <_checkParam+0xa4>)
 8014526:	2201      	movs	r2, #1
 8014528:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801452a:	2300      	movs	r3, #0
 801452c:	e025      	b.n	801457a <_checkParam+0x96>
    	}
    	else if (period == 100) {
 801452e:	887b      	ldrh	r3, [r7, #2]
 8014530:	2b64      	cmp	r3, #100	; 0x64
 8014532:	d11c      	bne.n	801456e <_checkParam+0x8a>
    		*p_mode = TM_ALWAYS;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2201      	movs	r2, #1
 8014538:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 801453a:	e018      	b.n	801456e <_checkParam+0x8a>
    case TM_ALWAYS:
    	break;

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    	if (!period) {
 801453c:	887b      	ldrh	r3, [r7, #2]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d117      	bne.n	8014572 <_checkParam+0x8e>
    		pif_error = E_INVALID_PARAM;
 8014542:	4b11      	ldr	r3, [pc, #68]	; (8014588 <_checkParam+0xa4>)
 8014544:	2201      	movs	r2, #1
 8014546:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014548:	2300      	movs	r3, #0
 801454a:	e016      	b.n	801457a <_checkParam+0x96>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 801454c:	887b      	ldrh	r3, [r7, #2]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d104      	bne.n	801455c <_checkParam+0x78>
    		pif_error = E_INVALID_PARAM;
 8014552:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <_checkParam+0xa4>)
 8014554:	2201      	movs	r2, #1
 8014556:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014558:	2300      	movs	r3, #0
 801455a:	e00e      	b.n	801457a <_checkParam+0x96>
    	}

    	if (!pif_act_timer1us) {
 801455c:	4b0b      	ldr	r3, [pc, #44]	; (801458c <_checkParam+0xa8>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d108      	bne.n	8014576 <_checkParam+0x92>
    		pif_error = E_CANNOT_USE;
 8014564:	4b08      	ldr	r3, [pc, #32]	; (8014588 <_checkParam+0xa4>)
 8014566:	2209      	movs	r2, #9
 8014568:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801456a:	2300      	movs	r3, #0
 801456c:	e005      	b.n	801457a <_checkParam+0x96>
    	break;
 801456e:	bf00      	nop
 8014570:	e002      	b.n	8014578 <_checkParam+0x94>
    	break;
 8014572:	bf00      	nop
 8014574:	e000      	b.n	8014578 <_checkParam+0x94>
        }
    	break;
 8014576:	bf00      	nop
    }
	return TRUE;
 8014578:	2301      	movs	r3, #1
}
 801457a:	4618      	mov	r0, r3
 801457c:	370c      	adds	r7, #12
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	20001365 	.word	0x20001365
 801458c:	2000137c 	.word	0x2000137c

08014590 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	460b      	mov	r3, r1
 801459a:	70fb      	strb	r3, [r7, #3]
 801459c:	4613      	mov	r3, r2
 801459e:	803b      	strh	r3, [r7, #0]
	int num = -1;
 80145a0:	f04f 33ff 	mov.w	r3, #4294967295
 80145a4:	60fb      	str	r3, [r7, #12]

    switch (mode) {
 80145a6:	78fb      	ldrb	r3, [r7, #3]
 80145a8:	2b05      	cmp	r3, #5
 80145aa:	d852      	bhi.n	8014652 <_setParam+0xc2>
 80145ac:	a201      	add	r2, pc, #4	; (adr r2, 80145b4 <_setParam+0x24>)
 80145ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b2:	bf00      	nop
 80145b4:	080145cd 	.word	0x080145cd
 80145b8:	080145ff 	.word	0x080145ff
 80145bc:	0801460b 	.word	0x0801460b
 80145c0:	0801462b 	.word	0x0801462b
 80145c4:	0801461b 	.word	0x0801461b
 80145c8:	0801463f 	.word	0x0801463f
    case TM_RATIO:
    	num = _setTable(period, &mode);
 80145cc:	1cfa      	adds	r2, r7, #3
 80145ce:	883b      	ldrh	r3, [r7, #0]
 80145d0:	4611      	mov	r1, r2
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7ff fd96 	bl	8014104 <_setTable>
 80145d8:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145e0:	d101      	bne.n	80145e6 <_setParam+0x56>
 80145e2:	2300      	movs	r3, #0
 80145e4:	e03d      	b.n	8014662 <_setParam+0xd2>
    	if (mode == TM_ALWAYS) period = 100;
 80145e6:	78fb      	ldrb	r3, [r7, #3]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d101      	bne.n	80145f0 <_setParam+0x60>
 80145ec:	2364      	movs	r3, #100	; 0x64
 80145ee:	803b      	strh	r3, [r7, #0]
    	p_owner->__table_number = num;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	68fa      	ldr	r2, [r7, #12]
 80145f4:	615a      	str	r2, [r3, #20]
    	p_owner->__processing = _processingRatio;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4a1c      	ldr	r2, [pc, #112]	; (801466c <_setParam+0xdc>)
 80145fa:	611a      	str	r2, [r3, #16]
    	break;
 80145fc:	e02a      	b.n	8014654 <_setParam+0xc4>

    case TM_ALWAYS:
    	period = 100;
 80145fe:	2364      	movs	r3, #100	; 0x64
 8014600:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4a1a      	ldr	r2, [pc, #104]	; (8014670 <_setParam+0xe0>)
 8014606:	611a      	str	r2, [r3, #16]
    	break;
 8014608:	e024      	b.n	8014654 <_setParam+0xc4>

    case TM_PERIOD_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801460a:	4b1a      	ldr	r3, [pc, #104]	; (8014674 <_setParam+0xe4>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodMs;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4a18      	ldr	r2, [pc, #96]	; (8014678 <_setParam+0xe8>)
 8014616:	611a      	str	r2, [r3, #16]
    	break;
 8014618:	e01c      	b.n	8014654 <_setParam+0xc4>

    case TM_CHANGE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801461a:	4b16      	ldr	r3, [pc, #88]	; (8014674 <_setParam+0xe4>)
 801461c:	681a      	ldr	r2, [r3, #0]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingChangeMs;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4a15      	ldr	r2, [pc, #84]	; (801467c <_setParam+0xec>)
 8014626:	611a      	str	r2, [r3, #16]
    	break;
 8014628:	e014      	b.n	8014654 <_setParam+0xc4>

    case TM_PERIOD_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801462a:	4b15      	ldr	r3, [pc, #84]	; (8014680 <_setParam+0xf0>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4798      	blx	r3
 8014630:	4602      	mov	r2, r0
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodUs;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	4a12      	ldr	r2, [pc, #72]	; (8014684 <_setParam+0xf4>)
 801463a:	611a      	str	r2, [r3, #16]
    	break;
 801463c:	e00a      	b.n	8014654 <_setParam+0xc4>

    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801463e:	4b10      	ldr	r3, [pc, #64]	; (8014680 <_setParam+0xf0>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4798      	blx	r3
 8014644:	4602      	mov	r2, r0
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingChangeUs;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4a0e      	ldr	r2, [pc, #56]	; (8014688 <_setParam+0xf8>)
 801464e:	611a      	str	r2, [r3, #16]
    	break;
 8014650:	e000      	b.n	8014654 <_setParam+0xc4>

    default:
    	break;
 8014652:	bf00      	nop
    }

    p_owner->_mode = mode;
 8014654:	78fa      	ldrb	r2, [r7, #3]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	719a      	strb	r2, [r3, #6]
    p_owner->_period = period;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	883a      	ldrh	r2, [r7, #0]
 801465e:	811a      	strh	r2, [r3, #8]
	return TRUE;
 8014660:	2301      	movs	r3, #1
}
 8014662:	4618      	mov	r0, r3
 8014664:	3710      	adds	r7, #16
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	08014411 	.word	0x08014411
 8014670:	0801426d 	.word	0x0801426d
 8014674:	2000136c 	.word	0x2000136c
 8014678:	08014309 	.word	0x08014309
 801467c:	080143b1 	.word	0x080143b1
 8014680:	2000137c 	.word	0x2000137c
 8014684:	080142bd 	.word	0x080142bd
 8014688:	08014355 	.word	0x08014355

0801468c <_checkLoopTime>:

#ifndef __PIF_NO_LOG__

static void _checkLoopTime(BOOL yield)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	4603      	mov	r3, r0
 8014694:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
	static int step = 0;
	static uint32_t pretime;
	uint32_t gap;

	if (pif_act_timer1us) {
 8014696:	4b29      	ldr	r3, [pc, #164]	; (801473c <_checkLoopTime+0xb0>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d027      	beq.n	80146ee <_checkLoopTime+0x62>
		if (!step) {
 801469e:	4b28      	ldr	r3, [pc, #160]	; (8014740 <_checkLoopTime+0xb4>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d106      	bne.n	80146b4 <_checkLoopTime+0x28>
			if (!yield) step = 1;
 80146a6:	79fb      	ldrb	r3, [r7, #7]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d11a      	bne.n	80146e2 <_checkLoopTime+0x56>
 80146ac:	4b24      	ldr	r3, [pc, #144]	; (8014740 <_checkLoopTime+0xb4>)
 80146ae:	2201      	movs	r2, #1
 80146b0:	601a      	str	r2, [r3, #0]
 80146b2:	e016      	b.n	80146e2 <_checkLoopTime+0x56>
		}
		else {
			gap = (*pif_act_timer1us)() - pretime;
 80146b4:	4b21      	ldr	r3, [pc, #132]	; (801473c <_checkLoopTime+0xb0>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4798      	blx	r3
 80146ba:	4602      	mov	r2, r0
 80146bc:	4b21      	ldr	r3, [pc, #132]	; (8014744 <_checkLoopTime+0xb8>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	60fb      	str	r3, [r7, #12]
			if (gap > pif_performance.__max_loop_time1us) {
 80146c4:	4b20      	ldr	r3, [pc, #128]	; (8014748 <_checkLoopTime+0xbc>)
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d909      	bls.n	80146e2 <_checkLoopTime+0x56>
				pif_performance.__max_loop_time1us = gap;
 80146ce:	4a1e      	ldr	r2, [pc, #120]	; (8014748 <_checkLoopTime+0xbc>)
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6093      	str	r3, [r2, #8]
				pifLog_Printf(LT_NONE, "\nMLT: %luus", pif_performance.__max_loop_time1us);
 80146d4:	4b1c      	ldr	r3, [pc, #112]	; (8014748 <_checkLoopTime+0xbc>)
 80146d6:	689b      	ldr	r3, [r3, #8]
 80146d8:	461a      	mov	r2, r3
 80146da:	491c      	ldr	r1, [pc, #112]	; (801474c <_checkLoopTime+0xc0>)
 80146dc:	2000      	movs	r0, #0
 80146de:	f7fe ff55 	bl	801358c <pifLog_Printf>
			}
		}
		pretime = (*pif_act_timer1us)();
 80146e2:	4b16      	ldr	r3, [pc, #88]	; (801473c <_checkLoopTime+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4798      	blx	r3
 80146e8:	4603      	mov	r3, r0
 80146ea:	4a16      	ldr	r2, [pc, #88]	; (8014744 <_checkLoopTime+0xb8>)
 80146ec:	6013      	str	r3, [r2, #0]
	}
#else
	(void)yield;
#endif

	if (pif_log_flag.bt.performance) {
 80146ee:	4b18      	ldr	r3, [pc, #96]	; (8014750 <_checkLoopTime+0xc4>)
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d01b      	beq.n	8014734 <_checkLoopTime+0xa8>
		pif_performance._count++;
 80146fc:	4b12      	ldr	r3, [pc, #72]	; (8014748 <_checkLoopTime+0xbc>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3301      	adds	r3, #1
 8014702:	4a11      	ldr	r2, [pc, #68]	; (8014748 <_checkLoopTime+0xbc>)
 8014704:	6013      	str	r3, [r2, #0]
		if (pif_performance.__state) {
 8014706:	4b10      	ldr	r3, [pc, #64]	; (8014748 <_checkLoopTime+0xbc>)
 8014708:	791b      	ldrb	r3, [r3, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d012      	beq.n	8014734 <_checkLoopTime+0xa8>
        	uint32_t value = 1000000L / pif_performance._count;
 801470e:	4b0e      	ldr	r3, [pc, #56]	; (8014748 <_checkLoopTime+0xbc>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a10      	ldr	r2, [pc, #64]	; (8014754 <_checkLoopTime+0xc8>)
 8014714:	fbb2 f3f3 	udiv	r3, r2, r3
 8014718:	60bb      	str	r3, [r7, #8]
        	pifLog_Printf(LT_INFO, "Performance: %lur/s, %uns", pif_performance._count, value);
 801471a:	4b0b      	ldr	r3, [pc, #44]	; (8014748 <_checkLoopTime+0xbc>)
 801471c:	681a      	ldr	r2, [r3, #0]
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	490d      	ldr	r1, [pc, #52]	; (8014758 <_checkLoopTime+0xcc>)
 8014722:	2002      	movs	r0, #2
 8014724:	f7fe ff32 	bl	801358c <pifLog_Printf>
        	pif_performance._count = 0;
 8014728:	4b07      	ldr	r3, [pc, #28]	; (8014748 <_checkLoopTime+0xbc>)
 801472a:	2200      	movs	r2, #0
 801472c:	601a      	str	r2, [r3, #0]
    		pif_performance.__state = FALSE;
 801472e:	4b06      	ldr	r3, [pc, #24]	; (8014748 <_checkLoopTime+0xbc>)
 8014730:	2200      	movs	r2, #0
 8014732:	711a      	strb	r2, [r3, #4]
        }
    }
}
 8014734:	bf00      	nop
 8014736:	3710      	adds	r7, #16
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	2000137c 	.word	0x2000137c
 8014740:	200014bc 	.word	0x200014bc
 8014744:	200014c0 	.word	0x200014c0
 8014748:	20001370 	.word	0x20001370
 801474c:	08026530 	.word	0x08026530
 8014750:	20001384 	.word	0x20001384
 8014754:	000f4240 	.word	0x000f4240
 8014758:	0802653c 	.word	0x0802653c

0801475c <pifTask_ChangeMode>:
    pif_id++;
    p_owner->_id = pif_id;
}

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
 8014768:	4613      	mov	r3, r2
 801476a:	803b      	strh	r3, [r7, #0]
	if (!_checkParam(&mode, period)) return FALSE;
 801476c:	883a      	ldrh	r2, [r7, #0]
 801476e:	1cfb      	adds	r3, r7, #3
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7ff feb6 	bl	80144e4 <_checkParam>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <pifTask_ChangeMode+0x26>
 801477e:	2300      	movs	r3, #0
 8014780:	e016      	b.n	80147b0 <pifTask_ChangeMode+0x54>

	switch (p_owner->_mode) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	799b      	ldrb	r3, [r3, #6]
 8014786:	2b01      	cmp	r3, #1
 8014788:	d805      	bhi.n	8014796 <pifTask_ChangeMode+0x3a>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	695b      	ldr	r3, [r3, #20]
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff fd3e 	bl	8014210 <_resetTable>
		break;
 8014794:	e000      	b.n	8014798 <pifTask_ChangeMode+0x3c>

	default:
		break;
 8014796:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 8014798:	78fb      	ldrb	r3, [r7, #3]
 801479a:	883a      	ldrh	r2, [r7, #0]
 801479c:	4619      	mov	r1, r3
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7ff fef6 	bl	8014590 <_setParam>
 80147a4:	4603      	mov	r3, r0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d101      	bne.n	80147ae <pifTask_ChangeMode+0x52>
 80147aa:	2300      	movs	r3, #0
 80147ac:	e000      	b.n	80147b0 <pifTask_ChangeMode+0x54>

    return TRUE;
 80147ae:	2301      	movs	r3, #1
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	460b      	mov	r3, r1
 80147c2:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	799b      	ldrb	r3, [r3, #6]
 80147c8:	3b02      	subs	r3, #2
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d805      	bhi.n	80147da <pifTask_ChangePeriod+0x22>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
		p_owner->_period = period;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	887a      	ldrh	r2, [r7, #2]
 80147d2:	811a      	strh	r2, [r3, #8]
		break;
 80147d4:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 80147d6:	2301      	movs	r3, #1
 80147d8:	e003      	b.n	80147e2 <pifTask_ChangePeriod+0x2a>
		pif_error = E_CANNOT_USE;
 80147da:	4b05      	ldr	r3, [pc, #20]	; (80147f0 <pifTask_ChangePeriod+0x38>)
 80147dc:	2209      	movs	r2, #9
 80147de:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80147e0:	2300      	movs	r3, #0
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	370c      	adds	r7, #12
 80147e6:	46bd      	mov	sp, r7
 80147e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	20001365 	.word	0x20001365

080147f4 <pifTaskManager_Init>:
	}
}


BOOL pifTaskManager_Init(int max_count)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	2130      	movs	r1, #48	; 0x30
 8014800:	480b      	ldr	r0, [pc, #44]	; (8014830 <pifTaskManager_Init+0x3c>)
 8014802:	f7fe f8b3 	bl	801296c <pifFixList_Init>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d101      	bne.n	8014810 <pifTaskManager_Init+0x1c>
 801480c:	2300      	movs	r3, #0
 801480e:	e00b      	b.n	8014828 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014810:	4b08      	ldr	r3, [pc, #32]	; (8014834 <pifTaskManager_Init+0x40>)
 8014812:	2200      	movs	r2, #0
 8014814:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 8014816:	4b08      	ldr	r3, [pc, #32]	; (8014838 <pifTaskManager_Init+0x44>)
 8014818:	2200      	movs	r2, #0
 801481a:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 801481c:	2280      	movs	r2, #128	; 0x80
 801481e:	2100      	movs	r1, #0
 8014820:	4806      	ldr	r0, [pc, #24]	; (801483c <pifTaskManager_Init+0x48>)
 8014822:	f00d f969 	bl	8021af8 <memset>
	return TRUE;
 8014826:	2301      	movs	r3, #1
}
 8014828:	4618      	mov	r0, r3
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	2000140c 	.word	0x2000140c
 8014834:	20001424 	.word	0x20001424
 8014838:	2000142c 	.word	0x2000142c
 801483c:	20001430 	.word	0x20001430

08014840 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60ba      	str	r2, [r7, #8]
 8014848:	607b      	str	r3, [r7, #4]
 801484a:	4603      	mov	r3, r0
 801484c:	73fb      	strb	r3, [r7, #15]
 801484e:	460b      	mov	r3, r1
 8014850:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d104      	bne.n	8014862 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014858:	4b20      	ldr	r3, [pc, #128]	; (80148dc <pifTaskManager_Add+0x9c>)
 801485a:	2201      	movs	r2, #1
 801485c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801485e:	2300      	movs	r3, #0
 8014860:	e038      	b.n	80148d4 <pifTaskManager_Add+0x94>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014862:	89ba      	ldrh	r2, [r7, #12]
 8014864:	f107 030f 	add.w	r3, r7, #15
 8014868:	4611      	mov	r1, r2
 801486a:	4618      	mov	r0, r3
 801486c:	f7ff fe3a 	bl	80144e4 <_checkParam>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d101      	bne.n	801487a <pifTaskManager_Add+0x3a>
 8014876:	2300      	movs	r3, #0
 8014878:	e02c      	b.n	80148d4 <pifTaskManager_Add+0x94>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801487a:	4819      	ldr	r0, [pc, #100]	; (80148e0 <pifTaskManager_Add+0xa0>)
 801487c:	f7fe f909 	bl	8012a92 <pifFixList_AddFirst>
 8014880:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <pifTaskManager_Add+0x4c>
 8014888:	2300      	movs	r3, #0
 801488a:	e023      	b.n	80148d4 <pifTaskManager_Add+0x94>

	if (!_setParam(p_owner, mode, period)) goto fail;
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	89ba      	ldrh	r2, [r7, #12]
 8014890:	4619      	mov	r1, r3
 8014892:	6978      	ldr	r0, [r7, #20]
 8014894:	f7ff fe7c 	bl	8014590 <_setParam>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d011      	beq.n	80148c2 <pifTaskManager_Add+0x82>

    p_owner->__evt_loop = evt_loop;
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->_p_client = p_client;
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	60da      	str	r2, [r3, #12]
    p_owner->pause = !start;
 80148aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	bf0c      	ite	eq
 80148b2:	2301      	moveq	r3, #1
 80148b4:	2300      	movne	r3, #0
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	461a      	mov	r2, r3
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	701a      	strb	r2, [r3, #0]
    return p_owner;
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	e008      	b.n	80148d4 <pifTaskManager_Add+0x94>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80148c2:	bf00      	nop

fail:
	if (p_owner) {
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d003      	beq.n	80148d2 <pifTaskManager_Add+0x92>
		pifFixList_Remove(&s_tasks, p_owner);
 80148ca:	6979      	ldr	r1, [r7, #20]
 80148cc:	4804      	ldr	r0, [pc, #16]	; (80148e0 <pifTaskManager_Add+0xa0>)
 80148ce:	f7fe f914 	bl	8012afa <pifFixList_Remove>
	}
	return NULL;
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3718      	adds	r7, #24
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	20001365 	.word	0x20001365
 80148e0:	2000140c 	.word	0x2000140c

080148e4 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
	switch (p_task->_mode) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	799b      	ldrb	r3, [r3, #6]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d805      	bhi.n	8014900 <pifTaskManager_Remove+0x1c>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	695b      	ldr	r3, [r3, #20]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff fc89 	bl	8014210 <_resetTable>
		break;
 80148fe:	e000      	b.n	8014902 <pifTaskManager_Remove+0x1e>

	default:
		break;
 8014900:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014902:	6879      	ldr	r1, [r7, #4]
 8014904:	4803      	ldr	r0, [pc, #12]	; (8014914 <pifTaskManager_Remove+0x30>)
 8014906:	f7fe f8f8 	bl	8012afa <pifFixList_Remove>
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	2000140c 	.word	0x2000140c

08014918 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 801491c:	4802      	ldr	r0, [pc, #8]	; (8014928 <pifTaskManager_Count+0x10>)
 801491e:	f7fe f920 	bl	8012b62 <pifFixList_Count>
 8014922:	4603      	mov	r3, r0
}
 8014924:	4618      	mov	r0, r3
 8014926:	bd80      	pop	{r7, pc}
 8014928:	2000140c 	.word	0x2000140c

0801492c <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)
	static uint8_t sec = 0;
#endif

	PifFixListIterator it = s_it_current ? s_it_current : pifFixList_Begin(&s_tasks);
 8014932:	4b31      	ldr	r3, [pc, #196]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d104      	bne.n	8014944 <pifTaskManager_Loop+0x18>
 801493a:	4830      	ldr	r0, [pc, #192]	; (80149fc <pifTaskManager_Loop+0xd0>)
 801493c:	f7fe f91d 	bl	8012b7a <pifFixList_Begin>
 8014940:	4603      	mov	r3, r0
 8014942:	e001      	b.n	8014948 <pifTaskManager_Loop+0x1c>
 8014944:	4b2c      	ldr	r3, [pc, #176]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	607b      	str	r3, [r7, #4]
	while (it) {
 801494a:	e030      	b.n	80149ae <pifTaskManager_Loop+0x82>
		s_it_current = it;
 801494c:	4a2a      	ldr	r2, [pc, #168]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6013      	str	r3, [r2, #0]
		PifTask* p_owner = (PifTask*)it->data;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	3308      	adds	r3, #8
 8014956:	603b      	str	r3, [r7, #0]
		s_current_task = p_owner;
 8014958:	4a29      	ldr	r2, [pc, #164]	; (8014a00 <pifTaskManager_Loop+0xd4>)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	6013      	str	r3, [r2, #0]
		if (p_owner->immediate) {
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	785b      	ldrb	r3, [r3, #1]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d00d      	beq.n	8014982 <pifTaskManager_Loop+0x56>
			p_owner->immediate = FALSE;
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	2200      	movs	r2, #0
 801496a:	705a      	strb	r2, [r3, #1]
			p_owner->__running = TRUE;
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	2201      	movs	r2, #1
 8014970:	761a      	strb	r2, [r3, #24]
			(*p_owner->__evt_loop)(p_owner);
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014976:	6838      	ldr	r0, [r7, #0]
 8014978:	4798      	blx	r3
			p_owner->__running = FALSE;
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2200      	movs	r2, #0
 801497e:	761a      	strb	r2, [r3, #24]
 8014980:	e007      	b.n	8014992 <pifTaskManager_Loop+0x66>
		}
		else if (!p_owner->pause) (*p_owner->__processing)(p_owner);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d103      	bne.n	8014992 <pifTaskManager_Loop+0x66>
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	691b      	ldr	r3, [r3, #16]
 801498e:	6838      	ldr	r0, [r7, #0]
 8014990:	4798      	blx	r3
		s_current_task = NULL;
 8014992:	4b1b      	ldr	r3, [pc, #108]	; (8014a00 <pifTaskManager_Loop+0xd4>)
 8014994:	2200      	movs	r2, #0
 8014996:	601a      	str	r2, [r3, #0]
#ifdef __PIF_DEBUG__
	    if (pif_act_task_loop) (*pif_act_task_loop)();
 8014998:	4b1a      	ldr	r3, [pc, #104]	; (8014a04 <pifTaskManager_Loop+0xd8>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <pifTaskManager_Loop+0x7a>
 80149a0:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <pifTaskManager_Loop+0xd8>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	4798      	blx	r3
#endif
		it = pifFixList_Next(it);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7fe f8f3 	bl	8012b92 <pifFixList_Next>
 80149ac:	6078      	str	r0, [r7, #4]
	while (it) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1cb      	bne.n	801494c <pifTaskManager_Loop+0x20>
	}

	s_number = (s_number + 1) & PIF_TASK_TABLE_MASK;
 80149b4:	4b14      	ldr	r3, [pc, #80]	; (8014a08 <pifTaskManager_Loop+0xdc>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	3301      	adds	r3, #1
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	f003 031f 	and.w	r3, r3, #31
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	4b11      	ldr	r3, [pc, #68]	; (8014a08 <pifTaskManager_Loop+0xdc>)
 80149c4:	701a      	strb	r2, [r3, #0]
	s_it_current = NULL;
 80149c6:	4b0c      	ldr	r3, [pc, #48]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 80149c8:	2200      	movs	r2, #0
 80149ca:	601a      	str	r2, [r3, #0]

#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)
    if (sec != pif_datetime.second) {
 80149cc:	4b0f      	ldr	r3, [pc, #60]	; (8014a0c <pifTaskManager_Loop+0xe0>)
 80149ce:	795b      	ldrb	r3, [r3, #5]
 80149d0:	b2da      	uxtb	r2, r3
 80149d2:	4b0f      	ldr	r3, [pc, #60]	; (8014a10 <pifTaskManager_Loop+0xe4>)
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d006      	beq.n	80149e8 <pifTaskManager_Loop+0xbc>
    	pifTaskManager_Print();
 80149da:	f000 f8a3 	bl	8014b24 <pifTaskManager_Print>
    	sec = pif_datetime.second;
 80149de:	4b0b      	ldr	r3, [pc, #44]	; (8014a0c <pifTaskManager_Loop+0xe0>)
 80149e0:	795b      	ldrb	r3, [r3, #5]
 80149e2:	b2da      	uxtb	r2, r3
 80149e4:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <pifTaskManager_Loop+0xe4>)
 80149e6:	701a      	strb	r2, [r3, #0]
    }
#endif

#ifndef __PIF_NO_LOG__
    _checkLoopTime(FALSE);
 80149e8:	2000      	movs	r0, #0
 80149ea:	f7ff fe4f 	bl	801468c <_checkLoopTime>
#endif
}
 80149ee:	bf00      	nop
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	20001424 	.word	0x20001424
 80149fc:	2000140c 	.word	0x2000140c
 8014a00:	20001428 	.word	0x20001428
 8014a04:	20001404 	.word	0x20001404
 8014a08:	200014b0 	.word	0x200014b0
 8014a0c:	20002274 	.word	0x20002274
 8014a10:	200014c4 	.word	0x200014c4

08014a14 <pifTaskManager_Yield>:

void pifTaskManager_Yield()
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
	if (!pifFixList_Count(&s_tasks)) return;
 8014a1a:	4830      	ldr	r0, [pc, #192]	; (8014adc <pifTaskManager_Yield+0xc8>)
 8014a1c:	f7fe f8a1 	bl	8012b62 <pifFixList_Count>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d053      	beq.n	8014ace <pifTaskManager_Yield+0xba>

	s_it_current = pifFixList_Next(s_it_current);
 8014a26:	4b2e      	ldr	r3, [pc, #184]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe f8b1 	bl	8012b92 <pifFixList_Next>
 8014a30:	4603      	mov	r3, r0
 8014a32:	4a2b      	ldr	r2, [pc, #172]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a34:	6013      	str	r3, [r2, #0]
	if (!s_it_current) {
 8014a36:	4b2a      	ldr	r3, [pc, #168]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d10e      	bne.n	8014a5c <pifTaskManager_Yield+0x48>
		s_number = (s_number + 1) & PIF_TASK_TABLE_MASK;
 8014a3e:	4b29      	ldr	r3, [pc, #164]	; (8014ae4 <pifTaskManager_Yield+0xd0>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	3301      	adds	r3, #1
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	f003 031f 	and.w	r3, r3, #31
 8014a4a:	b2da      	uxtb	r2, r3
 8014a4c:	4b25      	ldr	r3, [pc, #148]	; (8014ae4 <pifTaskManager_Yield+0xd0>)
 8014a4e:	701a      	strb	r2, [r3, #0]
		s_it_current = pifFixList_Begin(&s_tasks);
 8014a50:	4822      	ldr	r0, [pc, #136]	; (8014adc <pifTaskManager_Yield+0xc8>)
 8014a52:	f7fe f892 	bl	8012b7a <pifFixList_Begin>
 8014a56:	4603      	mov	r3, r0
 8014a58:	4a21      	ldr	r2, [pc, #132]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a5a:	6013      	str	r3, [r2, #0]
	}

	PifTask* p_owner = (PifTask*)s_it_current->data;
 8014a5c:	4b20      	ldr	r3, [pc, #128]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	3308      	adds	r3, #8
 8014a62:	607b      	str	r3, [r7, #4]
	if (!p_owner->__running) {
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	7e1b      	ldrb	r3, [r3, #24]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d12c      	bne.n	8014ac6 <pifTaskManager_Yield+0xb2>
		if (s_current_task->disallow_yield_id && s_current_task->disallow_yield_id == p_owner->disallow_yield_id) return;
 8014a6c:	4b1e      	ldr	r3, [pc, #120]	; (8014ae8 <pifTaskManager_Yield+0xd4>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	789b      	ldrb	r3, [r3, #2]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d006      	beq.n	8014a84 <pifTaskManager_Yield+0x70>
 8014a76:	4b1c      	ldr	r3, [pc, #112]	; (8014ae8 <pifTaskManager_Yield+0xd4>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	789a      	ldrb	r2, [r3, #2]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	789b      	ldrb	r3, [r3, #2]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d026      	beq.n	8014ad2 <pifTaskManager_Yield+0xbe>
		if (p_owner->immediate) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	785b      	ldrb	r3, [r3, #1]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d00d      	beq.n	8014aa8 <pifTaskManager_Yield+0x94>
			p_owner->immediate = FALSE;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	705a      	strb	r2, [r3, #1]
			p_owner->__running = TRUE;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2201      	movs	r2, #1
 8014a96:	761a      	strb	r2, [r3, #24]
			(*p_owner->__evt_loop)(p_owner);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	4798      	blx	r3
			p_owner->__running = FALSE;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	761a      	strb	r2, [r3, #24]
 8014aa6:	e007      	b.n	8014ab8 <pifTaskManager_Yield+0xa4>
		}
		else if (!p_owner->pause) (*p_owner->__processing)(p_owner);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d103      	bne.n	8014ab8 <pifTaskManager_Yield+0xa4>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	691b      	ldr	r3, [r3, #16]
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	4798      	blx	r3

#ifdef __PIF_DEBUG__
		if (pif_act_task_yield) (*pif_act_task_yield)();
 8014ab8:	4b0c      	ldr	r3, [pc, #48]	; (8014aec <pifTaskManager_Yield+0xd8>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <pifTaskManager_Yield+0xb2>
 8014ac0:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <pifTaskManager_Yield+0xd8>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4798      	blx	r3
#endif
	}

#ifndef __PIF_NO_LOG__
    _checkLoopTime(TRUE);
 8014ac6:	2001      	movs	r0, #1
 8014ac8:	f7ff fde0 	bl	801468c <_checkLoopTime>
 8014acc:	e002      	b.n	8014ad4 <pifTaskManager_Yield+0xc0>
	if (!pifFixList_Count(&s_tasks)) return;
 8014ace:	bf00      	nop
 8014ad0:	e000      	b.n	8014ad4 <pifTaskManager_Yield+0xc0>
		if (s_current_task->disallow_yield_id && s_current_task->disallow_yield_id == p_owner->disallow_yield_id) return;
 8014ad2:	bf00      	nop
#endif
}
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	2000140c 	.word	0x2000140c
 8014ae0:	20001424 	.word	0x20001424
 8014ae4:	200014b0 	.word	0x200014b0
 8014ae8:	20001428 	.word	0x20001428
 8014aec:	20001408 	.word	0x20001408

08014af0 <pifTaskManager_YieldMs>:

void pifTaskManager_YieldMs(uint32_t time)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00c      	beq.n	8014b18 <pifTaskManager_YieldMs+0x28>

    start = pif_cumulative_timer1ms;
 8014afe:	4b08      	ldr	r3, [pc, #32]	; (8014b20 <pifTaskManager_YieldMs+0x30>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	60fb      	str	r3, [r7, #12]
    do {
		pifTaskManager_Yield();
 8014b04:	f7ff ff86 	bl	8014a14 <pifTaskManager_Yield>
    } while (pif_cumulative_timer1ms - start <= time);
 8014b08:	4b05      	ldr	r3, [pc, #20]	; (8014b20 <pifTaskManager_YieldMs+0x30>)
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	1ad3      	subs	r3, r2, r3
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d2f6      	bcs.n	8014b04 <pifTaskManager_YieldMs+0x14>
 8014b16:	e000      	b.n	8014b1a <pifTaskManager_YieldMs+0x2a>
    if (!time) return;
 8014b18:	bf00      	nop
}
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	2000136c 	.word	0x2000136c

08014b24 <pifTaskManager_Print>:
}

#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)

void pifTaskManager_Print()
{
 8014b24:	b5b0      	push	{r4, r5, r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af02      	add	r7, sp, #8
	PifFixListIterator it;

	if (!pif_log_flag.bt.task) return;
 8014b2a:	4b1a      	ldr	r3, [pc, #104]	; (8014b94 <pifTaskManager_Print+0x70>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	f003 0302 	and.w	r3, r3, #2
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d028      	beq.n	8014b8a <pifTaskManager_Print+0x66>

	it = pifFixList_Begin(&s_tasks);
 8014b38:	4817      	ldr	r0, [pc, #92]	; (8014b98 <pifTaskManager_Print+0x74>)
 8014b3a:	f7fe f81e 	bl	8012b7a <pifFixList_Begin>
 8014b3e:	6078      	str	r0, [r7, #4]
	while (it) {
 8014b40:	e01f      	b.n	8014b82 <pifTaskManager_Print+0x5e>
		PifTask* p_owner = (PifTask*)it->data;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	3308      	adds	r3, #8
 8014b46:	603b      	str	r3, [r7, #0]
		if (p_owner->_mode == TM_RATIO) {
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	799b      	ldrb	r3, [r3, #6]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d114      	bne.n	8014b7a <pifTaskManager_Print+0x56>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	889b      	ldrh	r3, [r3, #4]
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b54:	461c      	mov	r4, r3
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	891b      	ldrh	r3, [r3, #8]
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b5a:	461d      	mov	r5, r3
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7eb fcaf 	bl	80004c4 <__aeabi_f2d>
 8014b66:	4602      	mov	r2, r0
 8014b68:	460b      	mov	r3, r1
 8014b6a:	e9cd 2300 	strd	r2, r3, [sp]
 8014b6e:	462b      	mov	r3, r5
 8014b70:	4622      	mov	r2, r4
 8014b72:	490a      	ldr	r1, [pc, #40]	; (8014b9c <pifTaskManager_Print+0x78>)
 8014b74:	2002      	movs	r0, #2
 8014b76:	f7fe fd09 	bl	801358c <pifLog_Printf>
#endif
		}
		it = pifFixList_Next(it);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f7fe f809 	bl	8012b92 <pifFixList_Next>
 8014b80:	6078      	str	r0, [r7, #4]
	while (it) {
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d1dc      	bne.n	8014b42 <pifTaskManager_Print+0x1e>
 8014b88:	e000      	b.n	8014b8c <pifTaskManager_Print+0x68>
	if (!pif_log_flag.bt.task) return;
 8014b8a:	bf00      	nop
	}
}
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bdb0      	pop	{r4, r5, r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20001384 	.word	0x20001384
 8014b98:	2000140c 	.word	0x2000140c
 8014b9c:	08026558 	.word	0x08026558

08014ba0 <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	3308      	adds	r3, #8
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7fd ffe1 	bl	8012b7a <pifFixList_Begin>
 8014bb8:	6178      	str	r0, [r7, #20]
	while (it) {
 8014bba:	e017      	b.n	8014bec <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	3308      	adds	r3, #8
 8014bc0:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	7f1b      	ldrb	r3, [r3, #28]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00c      	beq.n	8014be4 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6a1b      	ldr	r3, [r3, #32]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d005      	beq.n	8014be4 <_doTask+0x44>
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6a1b      	ldr	r3, [r3, #32]
 8014bdc:	68fa      	ldr	r2, [r7, #12]
 8014bde:	6912      	ldr	r2, [r2, #16]
 8014be0:	4610      	mov	r0, r2
 8014be2:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014be4:	6978      	ldr	r0, [r7, #20]
 8014be6:	f7fd ffd4 	bl	8012b92 <pifFixList_Next>
 8014bea:	6178      	str	r0, [r7, #20]
	while (it) {
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1e4      	bne.n	8014bbc <_doTask+0x1c>
	}
	return 0;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3718      	adds	r7, #24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b086      	sub	sp, #24
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	607a      	str	r2, [r7, #4]
 8014c06:	603b      	str	r3, [r7, #0]
 8014c08:	460b      	mov	r3, r1
 8014c0a:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <pifTimerManager_Init+0x1c>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d104      	bne.n	8014c22 <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014c18:	4b1f      	ldr	r3, [pc, #124]	; (8014c98 <pifTimerManager_Init+0x9c>)
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	e036      	b.n	8014c90 <pifTimerManager_Init+0x94>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014c22:	2224      	movs	r2, #36	; 0x24
 8014c24:	2100      	movs	r1, #0
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f00c ff66 	bl	8021af8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014c2c:	897b      	ldrh	r3, [r7, #10]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <pifTimerManager_Init+0x44>
 8014c32:	4b1a      	ldr	r3, [pc, #104]	; (8014c9c <pifTimerManager_Init+0xa0>)
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	1c5a      	adds	r2, r3, #1
 8014c38:	b291      	uxth	r1, r2
 8014c3a:	4a18      	ldr	r2, [pc, #96]	; (8014c9c <pifTimerManager_Init+0xa0>)
 8014c3c:	8011      	strh	r1, [r2, #0]
 8014c3e:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	897a      	ldrh	r2, [r7, #10]
 8014c44:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3308      	adds	r3, #8
 8014c4a:	683a      	ldr	r2, [r7, #0]
 8014c4c:	2128      	movs	r1, #40	; 0x28
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fd fe8c 	bl	801296c <pifFixList_Init>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d013      	beq.n	8014c82 <pifTimerManager_Init+0x86>
    p_manager->_period1us = period1us;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_ALWAYS, 100, _doTask, p_manager, TRUE);
 8014c60:	2301      	movs	r3, #1
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	4a0e      	ldr	r2, [pc, #56]	; (8014ca0 <pifTimerManager_Init+0xa4>)
 8014c68:	2164      	movs	r1, #100	; 0x64
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	f7ff fde8 	bl	8014840 <pifTaskManager_Add>
 8014c70:	4602      	mov	r2, r0
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6a1b      	ldr	r3, [r3, #32]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d003      	beq.n	8014c86 <pifTimerManager_Init+0x8a>
    return TRUE;
 8014c7e:	2301      	movs	r3, #1
 8014c80:	e006      	b.n	8014c90 <pifTimerManager_Init+0x94>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014c82:	bf00      	nop
 8014c84:	e000      	b.n	8014c88 <pifTimerManager_Init+0x8c>
    if (!p_manager->__p_task) goto fail;
 8014c86:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 f80b 	bl	8014ca4 <pifTimerManager_Clear>
    return FALSE;
 8014c8e:	2300      	movs	r3, #0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20001365 	.word	0x20001365
 8014c9c:	2000005c 	.word	0x2000005c
 8014ca0:	08014ba1 	.word	0x08014ba1

08014ca4 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6a1b      	ldr	r3, [r3, #32]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d007      	beq.n	8014cc4 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6a1b      	ldr	r3, [r3, #32]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7ff fe13 	bl	80148e4 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3308      	adds	r3, #8
 8014cc8:	2100      	movs	r1, #0
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fd feae 	bl	8012a2c <pifFixList_Clear>
}
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7fd fed2 	bl	8012a92 <pifFixList_AddFirst>
 8014cee:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d101      	bne.n	8014cfa <pifTimerManager_Add+0x22>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e006      	b.n	8014d08 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	78fa      	ldrb	r2, [r7, #3]
 8014cfe:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014d06:	68fb      	ldr	r3, [r7, #12]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	725a      	strb	r2, [r3, #9]
}
 8014d1e:	bf00      	nop
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b082      	sub	sp, #8
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3308      	adds	r3, #8
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fd ff13 	bl	8012b62 <pifFixList_Count>
 8014d3c:	4603      	mov	r3, r0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
	...

08014d48 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b083      	sub	sp, #12
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d104      	bne.n	8014d62 <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014d58:	4b11      	ldr	r3, [pc, #68]	; (8014da0 <pifTimer_Start+0x58>)
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	e017      	b.n	8014d92 <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	7a5b      	ldrb	r3, [r3, #9]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d105      	bne.n	8014d76 <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	7a1b      	ldrb	r3, [r3, #8]
 8014d86:	2b02      	cmp	r3, #2
 8014d88:	d102      	bne.n	8014d90 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014d90:	2301      	movs	r3, #1
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
 8014d9e:	bf00      	nop
 8014da0:	20001365 	.word	0x20001365

08014da4 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2200      	movs	r2, #0
 8014db6:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	7a1b      	ldrb	r3, [r3, #8]
 8014dbc:	2b02      	cmp	r3, #2
 8014dbe:	d103      	bne.n	8014dc8 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	4798      	blx	r3
	}
}
 8014dc8:	bf00      	nop
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2201      	movs	r2, #1
 8014de4:	725a      	strb	r2, [r3, #9]
}
 8014de6:	bf00      	nop
 8014de8:	370c      	adds	r7, #12
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr

08014df2 <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8014df2:	b580      	push	{r7, lr}
 8014df4:	b086      	sub	sp, #24
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f000 8092 	beq.w	8014f2a <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3308      	adds	r3, #8
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fd feb5 	bl	8012b7a <pifFixList_Begin>
 8014e10:	6138      	str	r0, [r7, #16]
	while (it) {
 8014e12:	e07c      	b.n	8014f0e <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	3308      	adds	r3, #8
 8014e18:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	7a5b      	ldrb	r3, [r3, #9]
 8014e1e:	2b02      	cmp	r3, #2
 8014e20:	d105      	bne.n	8014e2e <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d16e      	bne.n	8014f06 <pifTimerManager_sigTick+0x114>
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	e06b      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d060      	beq.n	8014ef8 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	1e5a      	subs	r2, r3, #1
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	7a1b      	ldrb	r3, [r3, #8]
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	d031      	beq.n	8014eac <pifTimerManager_sigTick+0xba>
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	dc5c      	bgt.n	8014f06 <pifTimerManager_sigTick+0x114>
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d002      	beq.n	8014e56 <pifTimerManager_sigTick+0x64>
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d015      	beq.n	8014e80 <pifTimerManager_sigTick+0x8e>
 8014e54:	e057      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d14e      	bne.n	8014efc <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2200      	movs	r2, #0
 8014e62:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	2201      	movs	r2, #1
 8014e68:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d044      	beq.n	8014efc <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	6952      	ldr	r2, [r2, #20]
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	4798      	blx	r3
					}
				}
				break;
 8014e7e:	e03d      	b.n	8014efc <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	68db      	ldr	r3, [r3, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d13b      	bne.n	8014f00 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2201      	movs	r2, #1
 8014e94:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d030      	beq.n	8014f00 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	6952      	ldr	r2, [r2, #20]
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	4798      	blx	r3
					}
				}
				break;
 8014eaa:	e029      	b.n	8014f00 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	699a      	ldr	r2, [r3, #24]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d016      	beq.n	8014ee6 <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d107      	bne.n	8014ed0 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	2000      	movs	r0, #0
 8014ec6:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	681a      	ldr	r2, [r3, #0]
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	68da      	ldr	r2, [r3, #12]
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	699b      	ldr	r3, [r3, #24]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d113      	bne.n	8014f04 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	2001      	movs	r0, #1
 8014ee2:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8014ee4:	e00e      	b.n	8014f04 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10a      	bne.n	8014f04 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	60da      	str	r2, [r3, #12]
				break;
 8014ef6:	e005      	b.n	8014f04 <pifTimerManager_sigTick+0x112>
			}
		}
 8014ef8:	bf00      	nop
 8014efa:	e004      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014efc:	bf00      	nop
 8014efe:	e002      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014f00:	bf00      	nop
 8014f02:	e000      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014f04:	bf00      	nop

		it = pifFixList_Next(it);
 8014f06:	6938      	ldr	r0, [r7, #16]
 8014f08:	f7fd fe43 	bl	8012b92 <pifFixList_Next>
 8014f0c:	6138      	str	r0, [r7, #16]
	while (it) {
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f47f af7f 	bne.w	8014e14 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d007      	beq.n	8014f2c <pifTimerManager_sigTick+0x13a>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3308      	adds	r3, #8
 8014f20:	6979      	ldr	r1, [r7, #20]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fd fde9 	bl	8012afa <pifFixList_Remove>
 8014f28:	e000      	b.n	8014f2c <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8014f2a:	bf00      	nop
}
 8014f2c:	3718      	adds	r7, #24
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 8014f32:	b480      	push	{r7}
 8014f34:	b085      	sub	sp, #20
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	60f8      	str	r0, [r7, #12]
 8014f3a:	60b9      	str	r1, [r7, #8]
 8014f3c:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	611a      	str	r2, [r3, #16]
}
 8014f4a:	bf00      	nop
 8014f4c:	3714      	adds	r7, #20
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
	...

08014f58 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	460b      	mov	r3, r1
 8014f62:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d104      	bne.n	8014f74 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8014f6a:	4b09      	ldr	r3, [pc, #36]	; (8014f90 <pifNoiseFilter_Init+0x38>)
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014f70:	2300      	movs	r3, #0
 8014f72:	e008      	b.n	8014f86 <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 8014f74:	2208      	movs	r2, #8
 8014f76:	2100      	movs	r1, #0
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f00c fdbd 	bl	8021af8 <memset>

    p_owner->_type = type;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	78fa      	ldrb	r2, [r7, #3]
 8014f82:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8014f84:	2301      	movs	r3, #1
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	20001365 	.word	0x20001365

08014f94 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	4798      	blx	r3
 8014fa8:	4603      	mov	r3, r0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3708      	adds	r7, #8
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b082      	sub	sp, #8
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d002      	beq.n	8014fc8 <_clear+0x16>
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	d00d      	beq.n	8014fe2 <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 8014fc6:	e01c      	b.n	8015002 <_clear+0x50>
		if (p_owner->__wf.value) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	699b      	ldr	r3, [r3, #24]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d015      	beq.n	8014ffc <_clear+0x4a>
			free(p_owner->__wf.value);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	699b      	ldr	r3, [r3, #24]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f00c fd79 	bl	8021acc <free>
			p_owner->__wf.value = NULL;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	619a      	str	r2, [r3, #24]
		break;
 8014fe0:	e00c      	b.n	8014ffc <_clear+0x4a>
		if (p_owner->__nc.diff) {
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	69db      	ldr	r3, [r3, #28]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00a      	beq.n	8015000 <_clear+0x4e>
			free(p_owner->__nc.diff);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	69db      	ldr	r3, [r3, #28]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f00c fd6c 	bl	8021acc <free>
			p_owner->__nc.diff = NULL;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	61da      	str	r2, [r3, #28]
		break;
 8014ffa:	e001      	b.n	8015000 <_clear+0x4e>
		break;
 8014ffc:	bf00      	nop
 8014ffe:	e000      	b.n	8015002 <_clear+0x50>
		break;
 8015000:	bf00      	nop
	}
}
 8015002:	bf00      	nop
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 801500a:	b480      	push	{r7}
 801500c:	b085      	sub	sp, #20
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
 8015012:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801501e:	3301      	adds	r3, #1
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015026:	fb93 f1f2 	sdiv	r1, r3, r2
 801502a:	fb02 f201 	mul.w	r2, r2, r1
 801502e:	1a9b      	subs	r3, r3, r2
 8015030:	b25a      	sxtb	r2, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	699a      	ldr	r2, [r3, #24]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	6919      	ldr	r1, [r3, #16]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	440b      	add	r3, r1
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	1ad2      	subs	r2, r2, r3
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	691a      	ldr	r2, [r3, #16]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	4413      	add	r3, r2
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	6812      	ldr	r2, [r2, #0]
 8015062:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	699a      	ldr	r2, [r3, #24]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6919      	ldr	r1, [r3, #16]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	440b      	add	r3, r1
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	441a      	add	r2, r3
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	699b      	ldr	r3, [r3, #24]
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015088:	fb93 f2f2 	sdiv	r2, r3, r2
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	330c      	adds	r3, #12
}
 8015094:	4618      	mov	r0, r3
 8015096:	3714      	adds	r7, #20
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b08b      	sub	sp, #44	; 0x2c
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80150ae:	69bb      	ldr	r3, [r7, #24]
 80150b0:	69da      	ldr	r2, [r3, #28]
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80150b8:	4619      	mov	r1, r3
 80150ba:	460b      	mov	r3, r1
 80150bc:	005b      	lsls	r3, r3, #1
 80150be:	440b      	add	r3, r1
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	4413      	add	r3, r2
 80150c4:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	6919      	ldr	r1, [r3, #16]
 80150d0:	69bb      	ldr	r3, [r7, #24]
 80150d2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	440b      	add	r3, r1
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	b21b      	sxth	r3, r3
 80150e4:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 80150e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	b21b      	sxth	r3, r3
 80150fa:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 80150fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015100:	2b00      	cmp	r3, #0
 8015102:	da06      	bge.n	8015112 <_processNoiseCancel+0x72>
 8015104:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015108:	b29b      	uxth	r3, r3
 801510a:	425b      	negs	r3, r3
 801510c:	b29b      	uxth	r3, r3
 801510e:	b21b      	sxth	r3, r3
 8015110:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 8015112:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015116:	b29a      	uxth	r2, r3
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801511e:	b29b      	uxth	r3, r3
 8015120:	4413      	add	r3, r2
 8015122:	b29b      	uxth	r3, r3
 8015124:	b21b      	sxth	r3, r3
 8015126:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801512c:	2b00      	cmp	r3, #0
 801512e:	da06      	bge.n	801513e <_processNoiseCancel+0x9e>
 8015130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015134:	b29b      	uxth	r3, r3
 8015136:	425b      	negs	r3, r3
 8015138:	b29b      	uxth	r3, r3
 801513a:	b21b      	sxth	r3, r3
 801513c:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 801513e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015146:	429a      	cmp	r2, r3
 8015148:	dd6d      	ble.n	8015226 <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	691a      	ldr	r2, [r3, #16]
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	4413      	add	r3, r2
 8015158:	683a      	ldr	r2, [r7, #0]
 801515a:	6812      	ldr	r2, [r2, #0]
 801515c:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	69da      	ldr	r2, [r3, #28]
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	f993 3018 	ldrsb.w	r3, [r3, #24]
 801516c:	4619      	mov	r1, r3
 801516e:	460b      	mov	r3, r1
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	440b      	add	r3, r1
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 801517a:	69bb      	ldr	r3, [r7, #24]
 801517c:	691a      	ldr	r2, [r3, #16]
 801517e:	69bb      	ldr	r3, [r7, #24]
 8015180:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	4413      	add	r3, r2
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	b29a      	uxth	r2, r3
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	6919      	ldr	r1, [r3, #16]
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	440b      	add	r3, r1
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	b29b      	uxth	r3, r3
 801519e:	1ad3      	subs	r3, r2, r3
 80151a0:	b29b      	uxth	r3, r3
 80151a2:	b21a      	sxth	r2, r3
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	3302      	adds	r3, #2
 80151c0:	b212      	sxth	r2, r2
 80151c2:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	3302      	adds	r3, #2
 80151c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	da0a      	bge.n	80151e6 <_processNoiseCancel+0x146>
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	3302      	adds	r3, #2
 80151d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	425b      	negs	r3, r3
 80151dc:	b29a      	uxth	r2, r3
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	3302      	adds	r3, #2
 80151e2:	b212      	sxth	r2, r2
 80151e4:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	4413      	add	r3, r2
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	3304      	adds	r3, #4
 80151fe:	b212      	sxth	r2, r2
 8015200:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	3304      	adds	r3, #4
 8015206:	f9b3 3000 	ldrsh.w	r3, [r3]
 801520a:	2b00      	cmp	r3, #0
 801520c:	da43      	bge.n	8015296 <_processNoiseCancel+0x1f6>
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	3304      	adds	r3, #4
 8015212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015216:	b29b      	uxth	r3, r3
 8015218:	425b      	negs	r3, r3
 801521a:	b29a      	uxth	r2, r3
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	3304      	adds	r3, #4
 8015220:	b212      	sxth	r2, r2
 8015222:	801a      	strh	r2, [r3, #0]
 8015224:	e037      	b.n	8015296 <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	f993 2014 	ldrsb.w	r2, [r3, #20]
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015236:	3301      	adds	r3, #1
 8015238:	69ba      	ldr	r2, [r7, #24]
 801523a:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801523e:	fb93 f1f2 	sdiv	r1, r3, r2
 8015242:	fb02 f201 	mul.w	r2, r2, r1
 8015246:	1a9b      	subs	r3, r3, r2
 8015248:	b25a      	sxtb	r2, r3
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	691a      	ldr	r2, [r3, #16]
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	4413      	add	r3, r2
 801525c:	683a      	ldr	r2, [r7, #0]
 801525e:	6812      	ldr	r2, [r2, #0]
 8015260:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	69da      	ldr	r2, [r3, #28]
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801526c:	4619      	mov	r1, r3
 801526e:	460b      	mov	r3, r1
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	440b      	add	r3, r1
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 801527a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	3302      	adds	r3, #2
 8015286:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801528a:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	3304      	adds	r3, #4
 8015290:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015294:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 8015296:	2300      	movs	r3, #0
 8015298:	61fb      	str	r3, [r7, #28]
	count = 0;
 801529a:	2300      	movs	r3, #0
 801529c:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 801529e:	2300      	movs	r3, #0
 80152a0:	627b      	str	r3, [r7, #36]	; 0x24
 80152a2:	e00e      	b.n	80152c2 <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	691a      	ldr	r2, [r3, #16]
 80152a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152aa:	009b      	lsls	r3, r3, #2
 80152ac:	4413      	add	r3, r2
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	4413      	add	r3, r2
 80152b4:	61fb      	str	r3, [r7, #28]
		count++;
 80152b6:	6a3b      	ldr	r3, [r7, #32]
 80152b8:	3301      	adds	r3, #1
 80152ba:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80152bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152be:	3301      	adds	r3, #1
 80152c0:	627b      	str	r3, [r7, #36]	; 0x24
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80152c8:	461a      	mov	r2, r3
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	4293      	cmp	r3, r2
 80152ce:	dbe9      	blt.n	80152a4 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 80152d0:	6a3b      	ldr	r3, [r7, #32]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	dd05      	ble.n	80152e2 <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 80152d6:	69fa      	ldr	r2, [r7, #28]
 80152d8:	6a3b      	ldr	r3, [r7, #32]
 80152da:	fb92 f2f3 	sdiv	r2, r2, r3
 80152de:	69bb      	ldr	r3, [r7, #24]
 80152e0:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	330c      	adds	r3, #12
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	372c      	adds	r7, #44	; 0x2c
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
	...

080152f4 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d002      	beq.n	801530c <pifNoiseFilterInt32_Init+0x18>
 8015306:	78fb      	ldrb	r3, [r7, #3]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d104      	bne.n	8015316 <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 801530c:	4b17      	ldr	r3, [pc, #92]	; (801536c <pifNoiseFilterInt32_Init+0x78>)
 801530e:	2201      	movs	r2, #1
 8015310:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015312:	2300      	movs	r3, #0
 8015314:	e026      	b.n	8015364 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 8015316:	2220      	movs	r2, #32
 8015318:	2100      	movs	r1, #0
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f00c fbec 	bl	8021af8 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015320:	78fb      	ldrb	r3, [r7, #3]
 8015322:	2104      	movs	r1, #4
 8015324:	4618      	mov	r0, r3
 8015326:	f00c fb97 	bl	8021a58 <calloc>
 801532a:	4603      	mov	r3, r0
 801532c:	461a      	mov	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	691b      	ldr	r3, [r3, #16]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d104      	bne.n	8015344 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 801533a:	4b0c      	ldr	r3, [pc, #48]	; (801536c <pifNoiseFilterInt32_Init+0x78>)
 801533c:	2203      	movs	r2, #3
 801533e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015340:	2300      	movs	r3, #0
 8015342:	e00f      	b.n	8015364 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2100      	movs	r1, #0
 8015348:	4618      	mov	r0, r3
 801534a:	f7ff fe05 	bl	8014f58 <pifNoiseFilter_Init>
    p_owner->_size = size;
 801534e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4a04      	ldr	r2, [pc, #16]	; (8015370 <pifNoiseFilterInt32_Init+0x7c>)
 8015360:	605a      	str	r2, [r3, #4]
    return TRUE;
 8015362:	2301      	movs	r3, #1
}
 8015364:	4618      	mov	r0, r3
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	20001365 	.word	0x20001365
 8015370:	0801500b 	.word	0x0801500b

08015374 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7ff fe18 	bl	8014fb2 <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015388:	2b02      	cmp	r3, #2
 801538a:	dd04      	ble.n	8015396 <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015392:	2b20      	cmp	r3, #32
 8015394:	dd04      	ble.n	80153a0 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 8015396:	4b15      	ldr	r3, [pc, #84]	; (80153ec <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015398:	2201      	movs	r2, #1
 801539a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801539c:	2300      	movs	r3, #0
 801539e:	e021      	b.n	80153e4 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80153a6:	461a      	mov	r2, r3
 80153a8:	4613      	mov	r3, r2
 80153aa:	005b      	lsls	r3, r3, #1
 80153ac:	4413      	add	r3, r2
 80153ae:	2102      	movs	r1, #2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f00c fb51 	bl	8021a58 <calloc>
 80153b6:	4603      	mov	r3, r0
 80153b8:	461a      	mov	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	69db      	ldr	r3, [r3, #28]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d104      	bne.n	80153d0 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80153c6:	4b09      	ldr	r3, [pc, #36]	; (80153ec <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80153c8:	2203      	movs	r2, #3
 80153ca:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80153cc:	2300      	movs	r3, #0
 80153ce:	e009      	b.n	80153e4 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2202      	movs	r2, #2
 80153da:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	4a04      	ldr	r2, [pc, #16]	; (80153f0 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 80153e0:	605a      	str	r2, [r3, #4]
	return TRUE;
 80153e2:	2301      	movs	r3, #1
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	20001365 	.word	0x20001365
 80153f0:	080150a1 	.word	0x080150a1

080153f4 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b083      	sub	sp, #12
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	3b30      	subs	r3, #48	; 0x30
 8015404:	b2db      	uxtb	r3, r3
 8015406:	461a      	mov	r2, r3
 8015408:	0092      	lsls	r2, r2, #2
 801540a:	4413      	add	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	b2da      	uxtb	r2, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3301      	adds	r3, #1
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	4413      	add	r3, r2
 8015418:	b2db      	uxtb	r3, r3
 801541a:	3b30      	subs	r3, #48	; 0x30
 801541c:	b2da      	uxtb	r2, r3
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	3302      	adds	r3, #2
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	3b30      	subs	r3, #48	; 0x30
 801542a:	b2db      	uxtb	r3, r3
 801542c:	461a      	mov	r2, r3
 801542e:	0092      	lsls	r2, r2, #2
 8015430:	4413      	add	r3, r2
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	b2da      	uxtb	r2, r3
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	3303      	adds	r3, #3
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	4413      	add	r3, r2
 801543e:	b2db      	uxtb	r3, r3
 8015440:	3b30      	subs	r3, #48	; 0x30
 8015442:	b2da      	uxtb	r2, r3
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	3304      	adds	r3, #4
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	3b30      	subs	r3, #48	; 0x30
 8015450:	b2db      	uxtb	r3, r3
 8015452:	461a      	mov	r2, r3
 8015454:	0092      	lsls	r2, r2, #2
 8015456:	4413      	add	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	b2da      	uxtb	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	3305      	adds	r3, #5
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	4413      	add	r3, r2
 8015464:	b2db      	uxtb	r3, r3
 8015466:	3b30      	subs	r3, #48	; 0x30
 8015468:	b2da      	uxtb	r2, r3
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	701a      	strb	r2, [r3, #0]
}
 801546e:	bf00      	nop
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
	...

0801547c <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	3b30      	subs	r3, #48	; 0x30
 801548c:	b2db      	uxtb	r3, r3
 801548e:	461a      	mov	r2, r3
 8015490:	0092      	lsls	r2, r2, #2
 8015492:	4413      	add	r3, r2
 8015494:	005b      	lsls	r3, r3, #1
 8015496:	b2da      	uxtb	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3301      	adds	r3, #1
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	4413      	add	r3, r2
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	3b30      	subs	r3, #48	; 0x30
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	3302      	adds	r3, #2
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	3b30      	subs	r3, #48	; 0x30
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	461a      	mov	r2, r3
 80154b6:	0092      	lsls	r2, r2, #2
 80154b8:	4413      	add	r3, r2
 80154ba:	005b      	lsls	r3, r3, #1
 80154bc:	b2da      	uxtb	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	3303      	adds	r3, #3
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	4413      	add	r3, r2
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	3b30      	subs	r3, #48	; 0x30
 80154ca:	b2da      	uxtb	r2, r3
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3304      	adds	r3, #4
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	3b30      	subs	r3, #48	; 0x30
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	461a      	mov	r2, r3
 80154dc:	0092      	lsls	r2, r2, #2
 80154de:	4413      	add	r3, r2
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	b2da      	uxtb	r2, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	3305      	adds	r3, #5
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	4413      	add	r3, r2
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	3b30      	subs	r3, #48	; 0x30
 80154f0:	b2da      	uxtb	r2, r3
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	3306      	adds	r3, #6
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	2b2e      	cmp	r3, #46	; 0x2e
 80154fe:	d134      	bne.n	801556a <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2200      	movs	r2, #0
 8015504:	80da      	strh	r2, [r3, #6]
		digit = 100;
 8015506:	2364      	movs	r3, #100	; 0x64
 8015508:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801550a:	2307      	movs	r3, #7
 801550c:	60fb      	str	r3, [r7, #12]
 801550e:	e027      	b.n	8015560 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	4413      	add	r3, r2
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	3301      	adds	r3, #1
 801551a:	4a17      	ldr	r2, [pc, #92]	; (8015578 <_convertString2Time+0xfc>)
 801551c:	4413      	add	r3, r2
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	f003 0304 	and.w	r3, r3, #4
 8015524:	2b00      	cmp	r3, #0
 8015526:	d01f      	beq.n	8015568 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	88da      	ldrh	r2, [r3, #6]
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	6879      	ldr	r1, [r7, #4]
 8015530:	440b      	add	r3, r1
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	3b30      	subs	r3, #48	; 0x30
 8015536:	b299      	uxth	r1, r3
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	b29b      	uxth	r3, r3
 801553c:	fb11 f303 	smulbb	r3, r1, r3
 8015540:	b29b      	uxth	r3, r3
 8015542:	4413      	add	r3, r2
 8015544:	b29a      	uxth	r2, r3
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	4a0b      	ldr	r2, [pc, #44]	; (801557c <_convertString2Time+0x100>)
 801554e:	fb82 1203 	smull	r1, r2, r2, r3
 8015552:	1092      	asrs	r2, r2, #2
 8015554:	17db      	asrs	r3, r3, #31
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	3301      	adds	r3, #1
 801555e:	60fb      	str	r3, [r7, #12]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2b09      	cmp	r3, #9
 8015564:	ddd4      	ble.n	8015510 <_convertString2Time+0x94>
		}
	}
}
 8015566:	e000      	b.n	801556a <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 8015568:	bf00      	nop
}
 801556a:	bf00      	nop
 801556c:	3714      	adds	r7, #20
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop
 8015578:	08027fa4 	.word	0x08027fa4
 801557c:	66666667 	.word	0x66666667

08015580 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b088      	sub	sp, #32
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 8015588:	f04f 0200 	mov.w	r2, #0
 801558c:	f04f 0300 	mov.w	r3, #0
 8015590:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	2b2d      	cmp	r3, #45	; 0x2d
 801559e:	d120      	bne.n	80155e2 <_convertString2Float+0x62>
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	3301      	adds	r3, #1
 80155a4:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80155a6:	e01c      	b.n	80155e2 <_convertString2Float+0x62>
		value *= 10;
 80155a8:	f04f 0200 	mov.w	r2, #0
 80155ac:	4b38      	ldr	r3, [pc, #224]	; (8015690 <_convertString2Float+0x110>)
 80155ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80155b2:	f7ea ffdf 	bl	8000574 <__aeabi_dmul>
 80155b6:	4602      	mov	r2, r0
 80155b8:	460b      	mov	r3, r1
 80155ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	61fa      	str	r2, [r7, #28]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	3b30      	subs	r3, #48	; 0x30
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ea ff69 	bl	80004a0 <__aeabi_i2d>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80155d6:	f7ea fe17 	bl	8000208 <__adddf3>
 80155da:	4602      	mov	r2, r0
 80155dc:	460b      	mov	r3, r1
 80155de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 80155e2:	69fb      	ldr	r3, [r7, #28]
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	3301      	adds	r3, #1
 80155e8:	4a2a      	ldr	r2, [pc, #168]	; (8015694 <_convertString2Float+0x114>)
 80155ea:	4413      	add	r3, r2
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	f003 0304 	and.w	r3, r3, #4
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d1d8      	bne.n	80155a8 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b2d      	cmp	r3, #45	; 0x2d
 80155fc:	d105      	bne.n	801560a <_convertString2Float+0x8a>
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	613b      	str	r3, [r7, #16]
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015608:	617b      	str	r3, [r7, #20]

	if (*p == '.') {
 801560a:	69fb      	ldr	r3, [r7, #28]
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2b2e      	cmp	r3, #46	; 0x2e
 8015610:	d133      	bne.n	801567a <_convertString2Float+0xfa>
		p++;
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	3301      	adds	r3, #1
 8015616:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015618:	f04f 0200 	mov.w	r2, #0
 801561c:	4b1c      	ldr	r3, [pc, #112]	; (8015690 <_convertString2Float+0x110>)
 801561e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015622:	e020      	b.n	8015666 <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	61fa      	str	r2, [r7, #28]
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	3b30      	subs	r3, #48	; 0x30
 801562e:	4618      	mov	r0, r3
 8015630:	f7ea ff36 	bl	80004a0 <__aeabi_i2d>
 8015634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015638:	f7eb f8c6 	bl	80007c8 <__aeabi_ddiv>
 801563c:	4602      	mov	r2, r0
 801563e:	460b      	mov	r3, r1
 8015640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015644:	f7ea fde0 	bl	8000208 <__adddf3>
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015650:	f04f 0200 	mov.w	r2, #0
 8015654:	4b0e      	ldr	r3, [pc, #56]	; (8015690 <_convertString2Float+0x110>)
 8015656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801565a:	f7ea ff8b 	bl	8000574 <__aeabi_dmul>
 801565e:	4602      	mov	r2, r0
 8015660:	460b      	mov	r3, r1
 8015662:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	3301      	adds	r3, #1
 801566c:	4a09      	ldr	r2, [pc, #36]	; (8015694 <_convertString2Float+0x114>)
 801566e:	4413      	add	r3, r2
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	f003 0304 	and.w	r3, r3, #4
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1d4      	bne.n	8015624 <_convertString2Float+0xa4>
		}
	}
	return value;
 801567a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801567e:	ec43 2b17 	vmov	d7, r2, r3
}
 8015682:	eeb0 0a47 	vmov.f32	s0, s14
 8015686:	eef0 0a67 	vmov.f32	s1, s15
 801568a:	3720      	adds	r7, #32
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	40240000 	.word	0x40240000
 8015694:	08027fa4 	.word	0x08027fa4

08015698 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60bb      	str	r3, [r7, #8]

	p = str;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	2b2d      	cmp	r3, #45	; 0x2d
 80156ae:	d111      	bne.n	80156d4 <_convertString2Interger+0x3c>
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	3301      	adds	r3, #1
 80156b4:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80156b6:	e00d      	b.n	80156d4 <_convertString2Interger+0x3c>
		value *= 10;
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	60fa      	str	r2, [r7, #12]
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	3b30      	subs	r3, #48	; 0x30
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	4413      	add	r3, r2
 80156d2:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	3301      	adds	r3, #1
 80156da:	4a0a      	ldr	r2, [pc, #40]	; (8015704 <_convertString2Interger+0x6c>)
 80156dc:	4413      	add	r3, r2
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	f003 0304 	and.w	r3, r3, #4
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d1e7      	bne.n	80156b8 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	2b2d      	cmp	r3, #45	; 0x2d
 80156ee:	d102      	bne.n	80156f6 <_convertString2Interger+0x5e>
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	425b      	negs	r3, r3
 80156f4:	60bb      	str	r3, [r7, #8]
	return value;
 80156f6:	68bb      	ldr	r3, [r7, #8]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3714      	adds	r7, #20
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr
 8015704:	08027fa4 	.word	0x08027fa4

08015708 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015708:	b5b0      	push	{r4, r5, r7, lr}
 801570a:	b088      	sub	sp, #32
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	75fb      	strb	r3, [r7, #23]
 8015714:	2300      	movs	r3, #0
 8015716:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015718:	2300      	movs	r3, #0
 801571a:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	e002      	b.n	8015728 <_convertString2Degrees+0x20>
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	3301      	adds	r3, #1
 8015726:	61fb      	str	r3, [r7, #28]
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	3301      	adds	r3, #1
 801572e:	4a46      	ldr	r2, [pc, #280]	; (8015848 <_convertString2Degrees+0x140>)
 8015730:	4413      	add	r3, r2
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1f2      	bne.n	8015722 <_convertString2Degrees+0x1a>
	q = s;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015740:	e011      	b.n	8015766 <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015742:	7dfb      	ldrb	r3, [r7, #23]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d005      	beq.n	8015754 <_convertString2Degrees+0x4c>
 8015748:	7dfb      	ldrb	r3, [r7, #23]
 801574a:	461a      	mov	r2, r3
 801574c:	0092      	lsls	r2, r2, #2
 801574e:	4413      	add	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	61ba      	str	r2, [r7, #24]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	3b30      	subs	r3, #48	; 0x30
 801575e:	b2da      	uxtb	r2, r3
 8015760:	7dfb      	ldrb	r3, [r7, #23]
 8015762:	4413      	add	r3, r2
 8015764:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015766:	69fa      	ldr	r2, [r7, #28]
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	2b02      	cmp	r3, #2
 801576e:	dce8      	bgt.n	8015742 <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015770:	e011      	b.n	8015796 <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015772:	7dbb      	ldrb	r3, [r7, #22]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d005      	beq.n	8015784 <_convertString2Degrees+0x7c>
 8015778:	7dbb      	ldrb	r3, [r7, #22]
 801577a:	461a      	mov	r2, r3
 801577c:	0092      	lsls	r2, r2, #2
 801577e:	4413      	add	r3, r2
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	1c5a      	adds	r2, r3, #1
 8015788:	61ba      	str	r2, [r7, #24]
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	3b30      	subs	r3, #48	; 0x30
 801578e:	b2da      	uxtb	r2, r3
 8015790:	7dbb      	ldrb	r3, [r7, #22]
 8015792:	4413      	add	r3, r2
 8015794:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8015796:	69fa      	ldr	r2, [r7, #28]
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	429a      	cmp	r2, r3
 801579c:	d8e9      	bhi.n	8015772 <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	2b2e      	cmp	r3, #46	; 0x2e
 80157a4:	d124      	bne.n	80157f0 <_convertString2Degrees+0xe8>
		q = p + 1;
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	3301      	adds	r3, #1
 80157aa:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80157ac:	2300      	movs	r3, #0
 80157ae:	73fb      	strb	r3, [r7, #15]
 80157b0:	e01b      	b.n	80157ea <_convertString2Degrees+0xe2>
			frac_min *= 10;
 80157b2:	693a      	ldr	r2, [r7, #16]
 80157b4:	4613      	mov	r3, r2
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4413      	add	r3, r2
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	3301      	adds	r3, #1
 80157c4:	4a20      	ldr	r2, [pc, #128]	; (8015848 <_convertString2Degrees+0x140>)
 80157c6:	4413      	add	r3, r2
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	f003 0304 	and.w	r3, r3, #4
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d008      	beq.n	80157e4 <_convertString2Degrees+0xdc>
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	1c5a      	adds	r2, r3, #1
 80157d6:	61ba      	str	r2, [r7, #24]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	461a      	mov	r2, r3
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	4413      	add	r3, r2
 80157e2:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 80157e4:	7bfb      	ldrb	r3, [r7, #15]
 80157e6:	3301      	adds	r3, #1
 80157e8:	73fb      	strb	r3, [r7, #15]
 80157ea:	7bfb      	ldrb	r3, [r7, #15]
 80157ec:	2b03      	cmp	r3, #3
 80157ee:	d9e0      	bls.n	80157b2 <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 80157f0:	7dfb      	ldrb	r3, [r7, #23]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7ea fe54 	bl	80004a0 <__aeabi_i2d>
 80157f8:	4604      	mov	r4, r0
 80157fa:	460d      	mov	r5, r1
 80157fc:	7dbb      	ldrb	r3, [r7, #22]
 80157fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8015802:	fb02 f203 	mul.w	r2, r2, r3
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	4413      	add	r3, r2
 801580a:	4618      	mov	r0, r3
 801580c:	f7ea fe38 	bl	8000480 <__aeabi_ui2d>
 8015810:	a30b      	add	r3, pc, #44	; (adr r3, 8015840 <_convertString2Degrees+0x138>)
 8015812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015816:	f7ea ffd7 	bl	80007c8 <__aeabi_ddiv>
 801581a:	4602      	mov	r2, r0
 801581c:	460b      	mov	r3, r1
 801581e:	4620      	mov	r0, r4
 8015820:	4629      	mov	r1, r5
 8015822:	f7ea fcf1 	bl	8000208 <__adddf3>
 8015826:	4602      	mov	r2, r0
 8015828:	460b      	mov	r3, r1
 801582a:	ec43 2b17 	vmov	d7, r2, r3
}
 801582e:	eeb0 0a47 	vmov.f32	s0, s14
 8015832:	eef0 0a67 	vmov.f32	s1, s15
 8015836:	3720      	adds	r7, #32
 8015838:	46bd      	mov	sp, r7
 801583a:	bdb0      	pop	{r4, r5, r7, pc}
 801583c:	f3af 8000 	nop.w
 8015840:	00000000 	.word	0x00000000
 8015844:	41224f80 	.word	0x41224f80
 8015848:	08027fa4 	.word	0x08027fa4

0801584c <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	4603      	mov	r3, r0
 8015854:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015856:	79fb      	ldrb	r3, [r7, #7]
 8015858:	3b30      	subs	r3, #48	; 0x30
 801585a:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 801585c:	79fb      	ldrb	r3, [r7, #7]
 801585e:	2b09      	cmp	r3, #9
 8015860:	d902      	bls.n	8015868 <_convertAscii2Hex+0x1c>
 8015862:	79fb      	ldrb	r3, [r7, #7]
 8015864:	3b07      	subs	r3, #7
 8015866:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015868:	79fb      	ldrb	r3, [r7, #7]
 801586a:	f003 030f 	and.w	r3, r3, #15
 801586e:	71fb      	strb	r3, [r7, #7]
	return n;
 8015870:	79fb      	ldrb	r3, [r7, #7]
}
 8015872:	4618      	mov	r0, r3
 8015874:	370c      	adds	r7, #12
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr

0801587e <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b084      	sub	sp, #16
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 801588a:	68fa      	ldr	r2, [r7, #12]
 801588c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015890:	f36f 0341 	bfc	r3, #1, #1
 8015894:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 801589e:	f36f 0300 	bfc	r3, #0, #1
 80158a2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d003      	beq.n	80158be <_evtTimerFinish+0x40>
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	4798      	blx	r3
}
 80158be:	bf00      	nop
 80158c0:	3710      	adds	r7, #16
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
	...

080158c8 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
 80158d0:	460b      	mov	r3, r1
 80158d2:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d104      	bne.n	80158e4 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80158da:	4b0e      	ldr	r3, [pc, #56]	; (8015914 <pifGps_Init+0x4c>)
 80158dc:	2201      	movs	r2, #1
 80158de:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80158e0:	2300      	movs	r3, #0
 80158e2:	e012      	b.n	801590a <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 80158e4:	2268      	movs	r2, #104	; 0x68
 80158e6:	2100      	movs	r1, #0
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f00c f905 	bl	8021af8 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80158ee:	887b      	ldrh	r3, [r7, #2]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d106      	bne.n	8015902 <pifGps_Init+0x3a>
 80158f4:	4b08      	ldr	r3, [pc, #32]	; (8015918 <pifGps_Init+0x50>)
 80158f6:	881b      	ldrh	r3, [r3, #0]
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	b291      	uxth	r1, r2
 80158fc:	4a06      	ldr	r2, [pc, #24]	; (8015918 <pifGps_Init+0x50>)
 80158fe:	8011      	strh	r1, [r2, #0]
 8015900:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	887a      	ldrh	r2, [r7, #2]
 8015906:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015908:	2301      	movs	r3, #1
}
 801590a:	4618      	mov	r0, r3
 801590c:	3708      	adds	r7, #8
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	20001365 	.word	0x20001365
 8015918:	2000005c 	.word	0x2000005c

0801591c <pifGps_Clear>:

void pifGps_Clear(PifGps* p_owner)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_txt) {
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015928:	2b00      	cmp	r3, #0
 801592a:	d007      	beq.n	801593c <pifGps_Clear+0x20>
		free(p_owner->__p_txt);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015930:	4618      	mov	r0, r3
 8015932:	f00c f8cb 	bl	8021acc <free>
		p_owner->__p_txt = NULL;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2200      	movs	r2, #0
 801593a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	p_owner->__evt_text = NULL;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2200      	movs	r2, #0
 8015940:	661a      	str	r2, [r3, #96]	; 0x60
}
 8015942:	bf00      	nop
 8015944:	3708      	adds	r7, #8
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
	...

0801594c <pifGps_SetTimeout>:

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	607a      	str	r2, [r7, #4]
 8015958:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d025      	beq.n	80159ac <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015964:	2b00      	cmp	r3, #0
 8015966:	d116      	bne.n	8015996 <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015968:	2100      	movs	r1, #0
 801596a:	68b8      	ldr	r0, [r7, #8]
 801596c:	f7ff f9b4 	bl	8014cd8 <pifTimerManager_Add>
 8015970:	4602      	mov	r2, r0
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801597a:	2b00      	cmp	r3, #0
 801597c:	d101      	bne.n	8015982 <pifGps_SetTimeout+0x36>
 801597e:	2300      	movs	r3, #0
 8015980:	e01e      	b.n	80159c0 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015986:	68fa      	ldr	r2, [r7, #12]
 8015988:	490f      	ldr	r1, [pc, #60]	; (80159c8 <pifGps_SetTimeout+0x7c>)
 801598a:	4618      	mov	r0, r3
 801598c:	f7ff fad1 	bl	8014f32 <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801599a:	6879      	ldr	r1, [r7, #4]
 801599c:	4618      	mov	r0, r3
 801599e:	f7ff f9d3 	bl	8014d48 <pifTimer_Start>
 80159a2:	4603      	mov	r3, r0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d10a      	bne.n	80159be <pifGps_SetTimeout+0x72>
 80159a8:	2300      	movs	r3, #0
 80159aa:	e009      	b.n	80159c0 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d004      	beq.n	80159be <pifGps_SetTimeout+0x72>
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7ff f9f3 	bl	8014da4 <pifTimer_Stop>
	}
    return TRUE;
 80159be:	2301      	movs	r3, #1
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	0801587f 	.word	0x0801587f

080159cc <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159da:	f043 0302 	orr.w	r3, r3, #2
 80159de:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <pifGps_SendEvent+0x26>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d004      	beq.n	8015a04 <pifGps_SendEvent+0x38>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff f9e6 	bl	8014dd0 <pifTimer_Reset>
}
 8015a04:	bf00      	nop
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0000      	movs	r0, r0
	...

08015a10 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015a14:	b090      	sub	sp, #64	; 0x40
 8015a16:	af02      	add	r7, sp, #8
 8015a18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015a20:	2300      	movs	r3, #0
 8015a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a30:	2b24      	cmp	r3, #36	; 0x24
 8015a32:	d11a      	bne.n	8015a6a <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015a34:	4b92      	ldr	r3, [pc, #584]	; (8015c80 <pifGps_ParsingNmea+0x270>)
 8015a36:	2200      	movs	r2, #0
 8015a38:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015a3a:	4b92      	ldr	r3, [pc, #584]	; (8015c84 <pifGps_ParsingNmea+0x274>)
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015a40:	4b91      	ldr	r3, [pc, #580]	; (8015c88 <pifGps_ParsingNmea+0x278>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	689b      	ldr	r3, [r3, #8]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00a      	beq.n	8015a64 <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015a4e:	4a8f      	ldr	r2, [pc, #572]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a54:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015a56:	4b8d      	ldr	r3, [pc, #564]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015a58:	2200      	movs	r2, #0
 8015a5a:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5e:	689b      	ldr	r3, [r3, #8]
 8015a60:	488a      	ldr	r0, [pc, #552]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015a62:	4798      	blx	r3
		}
		return TRUE;
 8015a64:	2301      	movs	r3, #1
 8015a66:	f000 bc92 	b.w	801638e <pifGps_ParsingNmea+0x97e>
	}
	else if (c == ',' || c == '*') {
 8015a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8015a70:	d004      	beq.n	8015a7c <pifGps_ParsingNmea+0x6c>
 8015a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a76:	2b2a      	cmp	r3, #42	; 0x2a
 8015a78:	f040 83e5 	bne.w	8016246 <pifGps_ParsingNmea+0x836>
		string[offset] = 0;
 8015a7c:	4b81      	ldr	r3, [pc, #516]	; (8015c84 <pifGps_ParsingNmea+0x274>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	4619      	mov	r1, r3
 8015a82:	4a82      	ldr	r2, [pc, #520]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015a84:	2300      	movs	r3, #0
 8015a86:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015a88:	4b7d      	ldr	r3, [pc, #500]	; (8015c80 <pifGps_ParsingNmea+0x270>)
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f040 8101 	bne.w	8015c94 <pifGps_ParsingNmea+0x284>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015a92:	4b7f      	ldr	r3, [pc, #508]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015a94:	2200      	movs	r2, #0
 8015a96:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015a98:	4b7c      	ldr	r3, [pc, #496]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015a9a:	789b      	ldrb	r3, [r3, #2]
 8015a9c:	2b44      	cmp	r3, #68	; 0x44
 8015a9e:	d10b      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015aa0:	4b7a      	ldr	r3, [pc, #488]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015aa2:	78db      	ldrb	r3, [r3, #3]
 8015aa4:	2b54      	cmp	r3, #84	; 0x54
 8015aa6:	d107      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015aa8:	4b78      	ldr	r3, [pc, #480]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015aaa:	791b      	ldrb	r3, [r3, #4]
 8015aac:	2b4d      	cmp	r3, #77	; 0x4d
 8015aae:	d103      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015ab0:	4b77      	ldr	r3, [pc, #476]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	801a      	strh	r2, [r3, #0]
 8015ab6:	e382      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015ab8:	4b74      	ldr	r3, [pc, #464]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015aba:	789b      	ldrb	r3, [r3, #2]
 8015abc:	2b47      	cmp	r3, #71	; 0x47
 8015abe:	d10b      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ac0:	4b72      	ldr	r3, [pc, #456]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015ac2:	78db      	ldrb	r3, [r3, #3]
 8015ac4:	2b42      	cmp	r3, #66	; 0x42
 8015ac6:	d107      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ac8:	4b70      	ldr	r3, [pc, #448]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015aca:	791b      	ldrb	r3, [r3, #4]
 8015acc:	2b53      	cmp	r3, #83	; 0x53
 8015ace:	d103      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ad0:	4b6f      	ldr	r3, [pc, #444]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	801a      	strh	r2, [r3, #0]
 8015ad6:	e372      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015ad8:	4b6c      	ldr	r3, [pc, #432]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015ada:	789b      	ldrb	r3, [r3, #2]
 8015adc:	2b47      	cmp	r3, #71	; 0x47
 8015ade:	d10b      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015ae0:	4b6a      	ldr	r3, [pc, #424]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015ae2:	78db      	ldrb	r3, [r3, #3]
 8015ae4:	2b47      	cmp	r3, #71	; 0x47
 8015ae6:	d107      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015ae8:	4b68      	ldr	r3, [pc, #416]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015aea:	791b      	ldrb	r3, [r3, #4]
 8015aec:	2b41      	cmp	r3, #65	; 0x41
 8015aee:	d103      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015af0:	4b67      	ldr	r3, [pc, #412]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015af2:	2203      	movs	r2, #3
 8015af4:	801a      	strh	r2, [r3, #0]
 8015af6:	e362      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015af8:	4b64      	ldr	r3, [pc, #400]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015afa:	789b      	ldrb	r3, [r3, #2]
 8015afc:	2b47      	cmp	r3, #71	; 0x47
 8015afe:	d10b      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b00:	4b62      	ldr	r3, [pc, #392]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b02:	78db      	ldrb	r3, [r3, #3]
 8015b04:	2b4c      	cmp	r3, #76	; 0x4c
 8015b06:	d107      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b08:	4b60      	ldr	r3, [pc, #384]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b0a:	791b      	ldrb	r3, [r3, #4]
 8015b0c:	2b4c      	cmp	r3, #76	; 0x4c
 8015b0e:	d103      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b10:	4b5f      	ldr	r3, [pc, #380]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015b12:	2204      	movs	r2, #4
 8015b14:	801a      	strh	r2, [r3, #0]
 8015b16:	e352      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015b18:	4b5c      	ldr	r3, [pc, #368]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b1a:	789b      	ldrb	r3, [r3, #2]
 8015b1c:	2b47      	cmp	r3, #71	; 0x47
 8015b1e:	d10b      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b20:	4b5a      	ldr	r3, [pc, #360]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b22:	78db      	ldrb	r3, [r3, #3]
 8015b24:	2b4e      	cmp	r3, #78	; 0x4e
 8015b26:	d107      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b28:	4b58      	ldr	r3, [pc, #352]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b2a:	791b      	ldrb	r3, [r3, #4]
 8015b2c:	2b53      	cmp	r3, #83	; 0x53
 8015b2e:	d103      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b30:	4b57      	ldr	r3, [pc, #348]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015b32:	2205      	movs	r2, #5
 8015b34:	801a      	strh	r2, [r3, #0]
 8015b36:	e342      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015b38:	4b54      	ldr	r3, [pc, #336]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b3a:	789b      	ldrb	r3, [r3, #2]
 8015b3c:	2b47      	cmp	r3, #71	; 0x47
 8015b3e:	d10b      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b40:	4b52      	ldr	r3, [pc, #328]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b42:	78db      	ldrb	r3, [r3, #3]
 8015b44:	2b52      	cmp	r3, #82	; 0x52
 8015b46:	d107      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b48:	4b50      	ldr	r3, [pc, #320]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b4a:	791b      	ldrb	r3, [r3, #4]
 8015b4c:	2b53      	cmp	r3, #83	; 0x53
 8015b4e:	d103      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b50:	4b4f      	ldr	r3, [pc, #316]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015b52:	2206      	movs	r2, #6
 8015b54:	801a      	strh	r2, [r3, #0]
 8015b56:	e332      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015b58:	4b4c      	ldr	r3, [pc, #304]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b5a:	789b      	ldrb	r3, [r3, #2]
 8015b5c:	2b47      	cmp	r3, #71	; 0x47
 8015b5e:	d10b      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b60:	4b4a      	ldr	r3, [pc, #296]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b62:	78db      	ldrb	r3, [r3, #3]
 8015b64:	2b53      	cmp	r3, #83	; 0x53
 8015b66:	d107      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b68:	4b48      	ldr	r3, [pc, #288]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b6a:	791b      	ldrb	r3, [r3, #4]
 8015b6c:	2b41      	cmp	r3, #65	; 0x41
 8015b6e:	d103      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b70:	4b47      	ldr	r3, [pc, #284]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015b72:	2207      	movs	r2, #7
 8015b74:	801a      	strh	r2, [r3, #0]
 8015b76:	e322      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015b78:	4b44      	ldr	r3, [pc, #272]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b7a:	789b      	ldrb	r3, [r3, #2]
 8015b7c:	2b47      	cmp	r3, #71	; 0x47
 8015b7e:	d10b      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b80:	4b42      	ldr	r3, [pc, #264]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b82:	78db      	ldrb	r3, [r3, #3]
 8015b84:	2b53      	cmp	r3, #83	; 0x53
 8015b86:	d107      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b88:	4b40      	ldr	r3, [pc, #256]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b8a:	791b      	ldrb	r3, [r3, #4]
 8015b8c:	2b54      	cmp	r3, #84	; 0x54
 8015b8e:	d103      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b90:	4b3f      	ldr	r3, [pc, #252]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015b92:	2208      	movs	r2, #8
 8015b94:	801a      	strh	r2, [r3, #0]
 8015b96:	e312      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015b98:	4b3c      	ldr	r3, [pc, #240]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015b9a:	789b      	ldrb	r3, [r3, #2]
 8015b9c:	2b47      	cmp	r3, #71	; 0x47
 8015b9e:	d10b      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015ba0:	4b3a      	ldr	r3, [pc, #232]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015ba2:	78db      	ldrb	r3, [r3, #3]
 8015ba4:	2b53      	cmp	r3, #83	; 0x53
 8015ba6:	d107      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015ba8:	4b38      	ldr	r3, [pc, #224]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015baa:	791b      	ldrb	r3, [r3, #4]
 8015bac:	2b56      	cmp	r3, #86	; 0x56
 8015bae:	d103      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015bb0:	4b37      	ldr	r3, [pc, #220]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015bb2:	2209      	movs	r2, #9
 8015bb4:	801a      	strh	r2, [r3, #0]
 8015bb6:	e302      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015bb8:	4b34      	ldr	r3, [pc, #208]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bba:	789b      	ldrb	r3, [r3, #2]
 8015bbc:	2b52      	cmp	r3, #82	; 0x52
 8015bbe:	d10b      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bc0:	4b32      	ldr	r3, [pc, #200]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bc2:	78db      	ldrb	r3, [r3, #3]
 8015bc4:	2b4d      	cmp	r3, #77	; 0x4d
 8015bc6:	d107      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bc8:	4b30      	ldr	r3, [pc, #192]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bca:	791b      	ldrb	r3, [r3, #4]
 8015bcc:	2b43      	cmp	r3, #67	; 0x43
 8015bce:	d103      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bd0:	4b2f      	ldr	r3, [pc, #188]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015bd2:	220a      	movs	r2, #10
 8015bd4:	801a      	strh	r2, [r3, #0]
 8015bd6:	e2f2      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015bd8:	4b2c      	ldr	r3, [pc, #176]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bda:	789b      	ldrb	r3, [r3, #2]
 8015bdc:	2b54      	cmp	r3, #84	; 0x54
 8015bde:	d10b      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015be0:	4b2a      	ldr	r3, [pc, #168]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015be2:	78db      	ldrb	r3, [r3, #3]
 8015be4:	2b48      	cmp	r3, #72	; 0x48
 8015be6:	d107      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015be8:	4b28      	ldr	r3, [pc, #160]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bea:	791b      	ldrb	r3, [r3, #4]
 8015bec:	2b53      	cmp	r3, #83	; 0x53
 8015bee:	d103      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015bf0:	4b27      	ldr	r3, [pc, #156]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015bf2:	220b      	movs	r2, #11
 8015bf4:	801a      	strh	r2, [r3, #0]
 8015bf6:	e2e2      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015bf8:	4b24      	ldr	r3, [pc, #144]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015bfa:	789b      	ldrb	r3, [r3, #2]
 8015bfc:	2b54      	cmp	r3, #84	; 0x54
 8015bfe:	d10b      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c00:	4b22      	ldr	r3, [pc, #136]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c02:	78db      	ldrb	r3, [r3, #3]
 8015c04:	2b58      	cmp	r3, #88	; 0x58
 8015c06:	d107      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c08:	4b20      	ldr	r3, [pc, #128]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c0a:	791b      	ldrb	r3, [r3, #4]
 8015c0c:	2b54      	cmp	r3, #84	; 0x54
 8015c0e:	d103      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c10:	4b1f      	ldr	r3, [pc, #124]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015c12:	220c      	movs	r2, #12
 8015c14:	801a      	strh	r2, [r3, #0]
 8015c16:	e2d2      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015c18:	4b1c      	ldr	r3, [pc, #112]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c1a:	789b      	ldrb	r3, [r3, #2]
 8015c1c:	2b56      	cmp	r3, #86	; 0x56
 8015c1e:	d10b      	bne.n	8015c38 <pifGps_ParsingNmea+0x228>
 8015c20:	4b1a      	ldr	r3, [pc, #104]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c22:	78db      	ldrb	r3, [r3, #3]
 8015c24:	2b4c      	cmp	r3, #76	; 0x4c
 8015c26:	d107      	bne.n	8015c38 <pifGps_ParsingNmea+0x228>
 8015c28:	4b18      	ldr	r3, [pc, #96]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c2a:	791b      	ldrb	r3, [r3, #4]
 8015c2c:	2b57      	cmp	r3, #87	; 0x57
 8015c2e:	d103      	bne.n	8015c38 <pifGps_ParsingNmea+0x228>
 8015c30:	4b17      	ldr	r3, [pc, #92]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015c32:	220d      	movs	r2, #13
 8015c34:	801a      	strh	r2, [r3, #0]
 8015c36:	e2c2      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015c38:	4b14      	ldr	r3, [pc, #80]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c3a:	789b      	ldrb	r3, [r3, #2]
 8015c3c:	2b56      	cmp	r3, #86	; 0x56
 8015c3e:	d10b      	bne.n	8015c58 <pifGps_ParsingNmea+0x248>
 8015c40:	4b12      	ldr	r3, [pc, #72]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c42:	78db      	ldrb	r3, [r3, #3]
 8015c44:	2b54      	cmp	r3, #84	; 0x54
 8015c46:	d107      	bne.n	8015c58 <pifGps_ParsingNmea+0x248>
 8015c48:	4b10      	ldr	r3, [pc, #64]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c4a:	791b      	ldrb	r3, [r3, #4]
 8015c4c:	2b47      	cmp	r3, #71	; 0x47
 8015c4e:	d103      	bne.n	8015c58 <pifGps_ParsingNmea+0x248>
 8015c50:	4b0f      	ldr	r3, [pc, #60]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015c52:	220e      	movs	r2, #14
 8015c54:	801a      	strh	r2, [r3, #0]
 8015c56:	e2b2      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015c58:	4b0c      	ldr	r3, [pc, #48]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c5a:	789b      	ldrb	r3, [r3, #2]
 8015c5c:	2b5a      	cmp	r3, #90	; 0x5a
 8015c5e:	f040 82ae 	bne.w	80161be <pifGps_ParsingNmea+0x7ae>
 8015c62:	4b0a      	ldr	r3, [pc, #40]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c64:	78db      	ldrb	r3, [r3, #3]
 8015c66:	2b44      	cmp	r3, #68	; 0x44
 8015c68:	f040 82a9 	bne.w	80161be <pifGps_ParsingNmea+0x7ae>
 8015c6c:	4b07      	ldr	r3, [pc, #28]	; (8015c8c <pifGps_ParsingNmea+0x27c>)
 8015c6e:	791b      	ldrb	r3, [r3, #4]
 8015c70:	2b41      	cmp	r3, #65	; 0x41
 8015c72:	f040 82a4 	bne.w	80161be <pifGps_ParsingNmea+0x7ae>
 8015c76:	4b06      	ldr	r3, [pc, #24]	; (8015c90 <pifGps_ParsingNmea+0x280>)
 8015c78:	220f      	movs	r2, #15
 8015c7a:	801a      	strh	r2, [r3, #0]
 8015c7c:	e29f      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
 8015c7e:	bf00      	nop
 8015c80:	200014c5 	.word	0x200014c5
 8015c84:	200014c6 	.word	0x200014c6
 8015c88:	200014c7 	.word	0x200014c7
 8015c8c:	200014c8 	.word	0x200014c8
 8015c90:	200014e8 	.word	0x200014e8
		}
		else if (offset) {
 8015c94:	4baa      	ldr	r3, [pc, #680]	; (8015f40 <pifGps_ParsingNmea+0x530>)
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	f000 8281 	beq.w	80161a0 <pifGps_ParsingNmea+0x790>
			switch (msg_id) {
 8015c9e:	4ba9      	ldr	r3, [pc, #676]	; (8015f44 <pifGps_ParsingNmea+0x534>)
 8015ca0:	881b      	ldrh	r3, [r3, #0]
 8015ca2:	3b01      	subs	r3, #1
 8015ca4:	2b0e      	cmp	r3, #14
 8015ca6:	f200 828a 	bhi.w	80161be <pifGps_ParsingNmea+0x7ae>
 8015caa:	a201      	add	r2, pc, #4	; (adr r2, 8015cb0 <pifGps_ParsingNmea+0x2a0>)
 8015cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cb0:	080161bf 	.word	0x080161bf
 8015cb4:	080161bf 	.word	0x080161bf
 8015cb8:	08015ced 	.word	0x08015ced
 8015cbc:	08015df5 	.word	0x08015df5
 8015cc0:	08015e9f 	.word	0x08015e9f
 8015cc4:	080161bf 	.word	0x080161bf
 8015cc8:	080161bf 	.word	0x080161bf
 8015ccc:	080161bf 	.word	0x080161bf
 8015cd0:	080161bf 	.word	0x080161bf
 8015cd4:	08015f8d 	.word	0x08015f8d
 8015cd8:	080161bf 	.word	0x080161bf
 8015cdc:	08016087 	.word	0x08016087
 8015ce0:	080161bf 	.word	0x080161bf
 8015ce4:	080160f9 	.word	0x080160f9
 8015ce8:	0801613f 	.word	0x0801613f

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015cec:	4b96      	ldr	r3, [pc, #600]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d106      	bne.n	8015d02 <pifGps_ParsingNmea+0x2f2>
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	330e      	adds	r3, #14
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	4894      	ldr	r0, [pc, #592]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015cfc:	f7ff fbbe 	bl	801547c <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015d00:	e250      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015d02:	4b91      	ldr	r3, [pc, #580]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	2b02      	cmp	r3, #2
 8015d08:	d10a      	bne.n	8015d20 <pifGps_ParsingNmea+0x310>
 8015d0a:	4890      	ldr	r0, [pc, #576]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015d0c:	f7ff fcfc 	bl	8015708 <_convertString2Degrees>
 8015d10:	eeb0 7a40 	vmov.f32	s14, s0
 8015d14:	eef0 7a60 	vmov.f32	s15, s1
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015d1e:	e241      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015d20:	4b89      	ldr	r3, [pc, #548]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2b03      	cmp	r3, #3
 8015d26:	d110      	bne.n	8015d4a <pifGps_ParsingNmea+0x33a>
 8015d28:	4b88      	ldr	r3, [pc, #544]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	2b53      	cmp	r3, #83	; 0x53
 8015d2e:	d10c      	bne.n	8015d4a <pifGps_ParsingNmea+0x33a>
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015d36:	623a      	str	r2, [r7, #32]
 8015d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	ed97 7b08 	vldr	d7, [r7, #32]
 8015d44:	ed83 7b06 	vstr	d7, [r3, #24]
 8015d48:	e053      	b.n	8015df2 <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015d4a:	4b7f      	ldr	r3, [pc, #508]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	2b04      	cmp	r3, #4
 8015d50:	d10a      	bne.n	8015d68 <pifGps_ParsingNmea+0x358>
 8015d52:	487e      	ldr	r0, [pc, #504]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015d54:	f7ff fcd8 	bl	8015708 <_convertString2Degrees>
 8015d58:	eeb0 7a40 	vmov.f32	s14, s0
 8015d5c:	eef0 7a60 	vmov.f32	s15, s1
 8015d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d62:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015d66:	e21d      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015d68:	4b77      	ldr	r3, [pc, #476]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	2b05      	cmp	r3, #5
 8015d6e:	d110      	bne.n	8015d92 <pifGps_ParsingNmea+0x382>
 8015d70:	4b76      	ldr	r3, [pc, #472]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	2b57      	cmp	r3, #87	; 0x57
 8015d76:	d10c      	bne.n	8015d92 <pifGps_ParsingNmea+0x382>
 8015d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d7e:	61ba      	str	r2, [r7, #24]
 8015d80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d88:	ed97 7b06 	vldr	d7, [r7, #24]
 8015d8c:	ed83 7b08 	vstr	d7, [r3, #32]
 8015d90:	e02f      	b.n	8015df2 <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 8015d92:	4b6d      	ldr	r3, [pc, #436]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b06      	cmp	r3, #6
 8015d98:	d10e      	bne.n	8015db8 <pifGps_ParsingNmea+0x3a8>
 8015d9a:	4b6c      	ldr	r3, [pc, #432]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b30      	cmp	r3, #48	; 0x30
 8015da0:	bf8c      	ite	hi
 8015da2:	2301      	movhi	r3, #1
 8015da4:	2300      	movls	r3, #0
 8015da6:	b2d9      	uxtb	r1, r3
 8015da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015daa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015dae:	f361 0300 	bfi	r3, r1, #0, #1
 8015db2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 8015db6:	e1f5      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015db8:	4b63      	ldr	r3, [pc, #396]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015dba:	781b      	ldrb	r3, [r3, #0]
 8015dbc:	2b07      	cmp	r3, #7
 8015dbe:	d108      	bne.n	8015dd2 <pifGps_ParsingNmea+0x3c2>
 8015dc0:	4862      	ldr	r0, [pc, #392]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015dc2:	f7ff fc69 	bl	8015698 <_convertString2Interger>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015dd0:	e1e8      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015dd2:	4b5d      	ldr	r3, [pc, #372]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	2b09      	cmp	r3, #9
 8015dd8:	f040 81e4 	bne.w	80161a4 <pifGps_ParsingNmea+0x794>
 8015ddc:	485b      	ldr	r0, [pc, #364]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015dde:	f7ff fbcf 	bl	8015580 <_convertString2Float>
 8015de2:	eeb0 7a40 	vmov.f32	s14, s0
 8015de6:	eef0 7a60 	vmov.f32	s15, s1
 8015dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dec:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015df0:	e1d8      	b.n	80161a4 <pifGps_ParsingNmea+0x794>
 8015df2:	e1d7      	b.n	80161a4 <pifGps_ParsingNmea+0x794>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015df4:	4b54      	ldr	r3, [pc, #336]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d10a      	bne.n	8015e12 <pifGps_ParsingNmea+0x402>
 8015dfc:	4853      	ldr	r0, [pc, #332]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015dfe:	f7ff fc83 	bl	8015708 <_convertString2Degrees>
 8015e02:	eeb0 7a40 	vmov.f32	s14, s0
 8015e06:	eef0 7a60 	vmov.f32	s15, s1
 8015e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0c:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8015e10:	e1ca      	b.n	80161a8 <pifGps_ParsingNmea+0x798>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015e12:	4b4d      	ldr	r3, [pc, #308]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d110      	bne.n	8015e3c <pifGps_ParsingNmea+0x42c>
 8015e1a:	4b4c      	ldr	r3, [pc, #304]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b53      	cmp	r3, #83	; 0x53
 8015e20:	d10c      	bne.n	8015e3c <pifGps_ParsingNmea+0x42c>
 8015e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015e28:	613a      	str	r2, [r7, #16]
 8015e2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e2e:	617b      	str	r3, [r7, #20]
 8015e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e32:	ed97 7b04 	vldr	d7, [r7, #16]
 8015e36:	ed83 7b06 	vstr	d7, [r3, #24]
 8015e3a:	e02f      	b.n	8015e9c <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015e3c:	4b42      	ldr	r3, [pc, #264]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	2b03      	cmp	r3, #3
 8015e42:	d10a      	bne.n	8015e5a <pifGps_ParsingNmea+0x44a>
 8015e44:	4841      	ldr	r0, [pc, #260]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015e46:	f7ff fc5f 	bl	8015708 <_convertString2Degrees>
 8015e4a:	eeb0 7a40 	vmov.f32	s14, s0
 8015e4e:	eef0 7a60 	vmov.f32	s15, s1
 8015e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e54:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015e58:	e1a6      	b.n	80161a8 <pifGps_ParsingNmea+0x798>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015e5a:	4b3b      	ldr	r3, [pc, #236]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	d110      	bne.n	8015e84 <pifGps_ParsingNmea+0x474>
 8015e62:	4b3a      	ldr	r3, [pc, #232]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	2b57      	cmp	r3, #87	; 0x57
 8015e68:	d10c      	bne.n	8015e84 <pifGps_ParsingNmea+0x474>
 8015e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015e70:	60ba      	str	r2, [r7, #8]
 8015e72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e76:	60fb      	str	r3, [r7, #12]
 8015e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8015e7e:	ed83 7b08 	vstr	d7, [r3, #32]
 8015e82:	e00b      	b.n	8015e9c <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 8015e84:	4b30      	ldr	r3, [pc, #192]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b05      	cmp	r3, #5
 8015e8a:	f040 818d 	bne.w	80161a8 <pifGps_ParsingNmea+0x798>
 8015e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e90:	330e      	adds	r3, #14
 8015e92:	4619      	mov	r1, r3
 8015e94:	482d      	ldr	r0, [pc, #180]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015e96:	f7ff faf1 	bl	801547c <_convertString2Time>
				break;
 8015e9a:	e185      	b.n	80161a8 <pifGps_ParsingNmea+0x798>
 8015e9c:	e184      	b.n	80161a8 <pifGps_ParsingNmea+0x798>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015e9e:	4b2a      	ldr	r3, [pc, #168]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d106      	bne.n	8015eb4 <pifGps_ParsingNmea+0x4a4>
 8015ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea8:	330e      	adds	r3, #14
 8015eaa:	4619      	mov	r1, r3
 8015eac:	4827      	ldr	r0, [pc, #156]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015eae:	f7ff fae5 	bl	801547c <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015eb2:	e17b      	b.n	80161ac <pifGps_ParsingNmea+0x79c>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015eb4:	4b24      	ldr	r3, [pc, #144]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d10a      	bne.n	8015ed2 <pifGps_ParsingNmea+0x4c2>
 8015ebc:	4823      	ldr	r0, [pc, #140]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015ebe:	f7ff fc23 	bl	8015708 <_convertString2Degrees>
 8015ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8015ec6:	eef0 7a60 	vmov.f32	s15, s1
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015ed0:	e16c      	b.n	80161ac <pifGps_ParsingNmea+0x79c>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015ed2:	4b1d      	ldr	r3, [pc, #116]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2b03      	cmp	r3, #3
 8015ed8:	d110      	bne.n	8015efc <pifGps_ParsingNmea+0x4ec>
 8015eda:	4b1c      	ldr	r3, [pc, #112]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	2b53      	cmp	r3, #83	; 0x53
 8015ee0:	d10c      	bne.n	8015efc <pifGps_ParsingNmea+0x4ec>
 8015ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015ee8:	603a      	str	r2, [r7, #0]
 8015eea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015eee:	607b      	str	r3, [r7, #4]
 8015ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef2:	ed97 7b00 	vldr	d7, [r7]
 8015ef6:	ed83 7b06 	vstr	d7, [r3, #24]
 8015efa:	e046      	b.n	8015f8a <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015efc:	4b12      	ldr	r3, [pc, #72]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015efe:	781b      	ldrb	r3, [r3, #0]
 8015f00:	2b04      	cmp	r3, #4
 8015f02:	d10a      	bne.n	8015f1a <pifGps_ParsingNmea+0x50a>
 8015f04:	4811      	ldr	r0, [pc, #68]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015f06:	f7ff fbff 	bl	8015708 <_convertString2Degrees>
 8015f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8015f0e:	eef0 7a60 	vmov.f32	s15, s1
 8015f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f14:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015f18:	e148      	b.n	80161ac <pifGps_ParsingNmea+0x79c>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015f1a:	4b0b      	ldr	r3, [pc, #44]	; (8015f48 <pifGps_ParsingNmea+0x538>)
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	2b05      	cmp	r3, #5
 8015f20:	d116      	bne.n	8015f50 <pifGps_ParsingNmea+0x540>
 8015f22:	4b0a      	ldr	r3, [pc, #40]	; (8015f4c <pifGps_ParsingNmea+0x53c>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b57      	cmp	r3, #87	; 0x57
 8015f28:	d112      	bne.n	8015f50 <pifGps_ParsingNmea+0x540>
 8015f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f30:	4692      	mov	sl, r2
 8015f32:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8015f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f38:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 8015f3c:	e025      	b.n	8015f8a <pifGps_ParsingNmea+0x57a>
 8015f3e:	bf00      	nop
 8015f40:	200014c6 	.word	0x200014c6
 8015f44:	200014e8 	.word	0x200014e8
 8015f48:	200014c5 	.word	0x200014c5
 8015f4c:	200014c8 	.word	0x200014c8
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015f50:	4ba5      	ldr	r3, [pc, #660]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	2b07      	cmp	r3, #7
 8015f56:	d108      	bne.n	8015f6a <pifGps_ParsingNmea+0x55a>
 8015f58:	48a4      	ldr	r0, [pc, #656]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015f5a:	f7ff fb9d 	bl	8015698 <_convertString2Interger>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	b2da      	uxtb	r2, r3
 8015f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015f68:	e120      	b.n	80161ac <pifGps_ParsingNmea+0x79c>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015f6a:	4b9f      	ldr	r3, [pc, #636]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	2b09      	cmp	r3, #9
 8015f70:	f040 811c 	bne.w	80161ac <pifGps_ParsingNmea+0x79c>
 8015f74:	489d      	ldr	r0, [pc, #628]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015f76:	f7ff fb03 	bl	8015580 <_convertString2Float>
 8015f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8015f7e:	eef0 7a60 	vmov.f32	s15, s1
 8015f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f84:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015f88:	e110      	b.n	80161ac <pifGps_ParsingNmea+0x79c>
 8015f8a:	e10f      	b.n	80161ac <pifGps_ParsingNmea+0x79c>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015f8c:	4b96      	ldr	r3, [pc, #600]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d106      	bne.n	8015fa2 <pifGps_ParsingNmea+0x592>
 8015f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f96:	330e      	adds	r3, #14
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4894      	ldr	r0, [pc, #592]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015f9c:	f7ff fa6e 	bl	801547c <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 8015fa0:	e106      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015fa2:	4b91      	ldr	r3, [pc, #580]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	2b03      	cmp	r3, #3
 8015fa8:	d10a      	bne.n	8015fc0 <pifGps_ParsingNmea+0x5b0>
 8015faa:	4890      	ldr	r0, [pc, #576]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015fac:	f7ff fbac 	bl	8015708 <_convertString2Degrees>
 8015fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8015fb4:	eef0 7a60 	vmov.f32	s15, s1
 8015fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fba:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015fbe:	e0f7      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015fc0:	4b89      	ldr	r3, [pc, #548]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2b04      	cmp	r3, #4
 8015fc6:	d10d      	bne.n	8015fe4 <pifGps_ParsingNmea+0x5d4>
 8015fc8:	4b88      	ldr	r3, [pc, #544]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	2b53      	cmp	r3, #83	; 0x53
 8015fce:	d109      	bne.n	8015fe4 <pifGps_ParsingNmea+0x5d4>
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015fd6:	4690      	mov	r8, r2
 8015fd8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fde:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8015fe2:	e04f      	b.n	8016084 <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015fe4:	4b80      	ldr	r3, [pc, #512]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	2b05      	cmp	r3, #5
 8015fea:	d10a      	bne.n	8016002 <pifGps_ParsingNmea+0x5f2>
 8015fec:	487f      	ldr	r0, [pc, #508]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8015fee:	f7ff fb8b 	bl	8015708 <_convertString2Degrees>
 8015ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8015ff6:	eef0 7a60 	vmov.f32	s15, s1
 8015ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffc:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016000:	e0d6      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016002:	4b79      	ldr	r3, [pc, #484]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b06      	cmp	r3, #6
 8016008:	d10d      	bne.n	8016026 <pifGps_ParsingNmea+0x616>
 801600a:	4b78      	ldr	r3, [pc, #480]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801600c:	781b      	ldrb	r3, [r3, #0]
 801600e:	2b57      	cmp	r3, #87	; 0x57
 8016010:	d109      	bne.n	8016026 <pifGps_ParsingNmea+0x616>
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016018:	4614      	mov	r4, r2
 801601a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016020:	e9c3 4508 	strd	r4, r5, [r3, #32]
 8016024:	e02e      	b.n	8016084 <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016026:	4b70      	ldr	r3, [pc, #448]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b07      	cmp	r3, #7
 801602c:	d10f      	bne.n	801604e <pifGps_ParsingNmea+0x63e>
 801602e:	486f      	ldr	r0, [pc, #444]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8016030:	f7ff faa6 	bl	8015580 <_convertString2Float>
 8016034:	ec51 0b10 	vmov	r0, r1, d0
 8016038:	a369      	add	r3, pc, #420	; (adr r3, 80161e0 <pifGps_ParsingNmea+0x7d0>)
 801603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603e:	f7ea fa99 	bl	8000574 <__aeabi_dmul>
 8016042:	4602      	mov	r2, r0
 8016044:	460b      	mov	r3, r1
 8016046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016048:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801604c:	e0b0      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 801604e:	4b66      	ldr	r3, [pc, #408]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	2b08      	cmp	r3, #8
 8016054:	d10a      	bne.n	801606c <pifGps_ParsingNmea+0x65c>
 8016056:	4865      	ldr	r0, [pc, #404]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8016058:	f7ff fa92 	bl	8015580 <_convertString2Float>
 801605c:	eeb0 7a40 	vmov.f32	s14, s0
 8016060:	eef0 7a60 	vmov.f32	s15, s1
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 801606a:	e0a1      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 801606c:	4b5e      	ldr	r3, [pc, #376]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	2b09      	cmp	r3, #9
 8016072:	f040 809d 	bne.w	80161b0 <pifGps_ParsingNmea+0x7a0>
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	330e      	adds	r3, #14
 801607a:	4619      	mov	r1, r3
 801607c:	485b      	ldr	r0, [pc, #364]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801607e:	f7ff f9b9 	bl	80153f4 <_convertString2Date>
				break;
 8016082:	e095      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>
 8016084:	e094      	b.n	80161b0 <pifGps_ParsingNmea+0x7a0>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 8016086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 8092 	beq.w	80161b4 <pifGps_ParsingNmea+0x7a4>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 8016090:	4b55      	ldr	r3, [pc, #340]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d108      	bne.n	80160aa <pifGps_ParsingNmea+0x69a>
 8016098:	4854      	ldr	r0, [pc, #336]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801609a:	f7ff fafd 	bl	8015698 <_convertString2Interger>
 801609e:	4602      	mov	r2, r0
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160a4:	b2d2      	uxtb	r2, r2
 80160a6:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80160a8:	e084      	b.n	80161b4 <pifGps_ParsingNmea+0x7a4>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80160aa:	4b4f      	ldr	r3, [pc, #316]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b02      	cmp	r3, #2
 80160b0:	d108      	bne.n	80160c4 <pifGps_ParsingNmea+0x6b4>
 80160b2:	484e      	ldr	r0, [pc, #312]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 80160b4:	f7ff faf0 	bl	8015698 <_convertString2Interger>
 80160b8:	4602      	mov	r2, r0
 80160ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160be:	b2d2      	uxtb	r2, r2
 80160c0:	705a      	strb	r2, [r3, #1]
				break;
 80160c2:	e077      	b.n	80161b4 <pifGps_ParsingNmea+0x7a4>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 80160c4:	4b48      	ldr	r3, [pc, #288]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2b03      	cmp	r3, #3
 80160ca:	d108      	bne.n	80160de <pifGps_ParsingNmea+0x6ce>
 80160cc:	4847      	ldr	r0, [pc, #284]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 80160ce:	f7ff fae3 	bl	8015698 <_convertString2Interger>
 80160d2:	4602      	mov	r2, r0
 80160d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160d8:	b2d2      	uxtb	r2, r2
 80160da:	709a      	strb	r2, [r3, #2]
				break;
 80160dc:	e06a      	b.n	80161b4 <pifGps_ParsingNmea+0x7a4>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 80160de:	4b42      	ldr	r3, [pc, #264]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b04      	cmp	r3, #4
 80160e4:	d166      	bne.n	80161b4 <pifGps_ParsingNmea+0x7a4>
 80160e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160ea:	3303      	adds	r3, #3
 80160ec:	223f      	movs	r2, #63	; 0x3f
 80160ee:	493f      	ldr	r1, [pc, #252]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 80160f0:	4618      	mov	r0, r3
 80160f2:	f00b fe35 	bl	8021d60 <strncpy>
				break;
 80160f6:	e05d      	b.n	80161b4 <pifGps_ParsingNmea+0x7a4>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 80160f8:	4b3b      	ldr	r3, [pc, #236]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b01      	cmp	r3, #1
 80160fe:	d10a      	bne.n	8016116 <pifGps_ParsingNmea+0x706>
 8016100:	483a      	ldr	r0, [pc, #232]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8016102:	f7ff fa3d 	bl	8015580 <_convertString2Float>
 8016106:	eeb0 7a40 	vmov.f32	s14, s0
 801610a:	eef0 7a60 	vmov.f32	s15, s1
 801610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016110:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 8016114:	e050      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016116:	4b34      	ldr	r3, [pc, #208]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b05      	cmp	r3, #5
 801611c:	d14c      	bne.n	80161b8 <pifGps_ParsingNmea+0x7a8>
 801611e:	4833      	ldr	r0, [pc, #204]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8016120:	f7ff fa2e 	bl	8015580 <_convertString2Float>
 8016124:	ec51 0b10 	vmov	r0, r1, d0
 8016128:	a32d      	add	r3, pc, #180	; (adr r3, 80161e0 <pifGps_ParsingNmea+0x7d0>)
 801612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612e:	f7ea fa21 	bl	8000574 <__aeabi_dmul>
 8016132:	4602      	mov	r2, r0
 8016134:	460b      	mov	r3, r1
 8016136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016138:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801613c:	e03c      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 801613e:	4b2a      	ldr	r3, [pc, #168]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	2b01      	cmp	r3, #1
 8016144:	d106      	bne.n	8016154 <pifGps_ParsingNmea+0x744>
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	330e      	adds	r3, #14
 801614a:	4619      	mov	r1, r3
 801614c:	4827      	ldr	r0, [pc, #156]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801614e:	f7ff f995 	bl	801547c <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 8016152:	e033      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 8016154:	4b24      	ldr	r3, [pc, #144]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	2b02      	cmp	r3, #2
 801615a:	d107      	bne.n	801616c <pifGps_ParsingNmea+0x75c>
 801615c:	4823      	ldr	r0, [pc, #140]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801615e:	f7ff fa9b 	bl	8015698 <_convertString2Interger>
 8016162:	4603      	mov	r3, r0
 8016164:	b2da      	uxtb	r2, r3
 8016166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016168:	741a      	strb	r2, [r3, #16]
				break;
 801616a:	e027      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 801616c:	4b1e      	ldr	r3, [pc, #120]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	2b03      	cmp	r3, #3
 8016172:	d107      	bne.n	8016184 <pifGps_ParsingNmea+0x774>
 8016174:	481d      	ldr	r0, [pc, #116]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 8016176:	f7ff fa8f 	bl	8015698 <_convertString2Interger>
 801617a:	4603      	mov	r3, r0
 801617c:	b2da      	uxtb	r2, r3
 801617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016180:	73da      	strb	r2, [r3, #15]
				break;
 8016182:	e01b      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 8016184:	4b18      	ldr	r3, [pc, #96]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	2b04      	cmp	r3, #4
 801618a:	d117      	bne.n	80161bc <pifGps_ParsingNmea+0x7ac>
 801618c:	4817      	ldr	r0, [pc, #92]	; (80161ec <pifGps_ParsingNmea+0x7dc>)
 801618e:	f7ff fa83 	bl	8015698 <_convertString2Interger>
 8016192:	4603      	mov	r3, r0
 8016194:	b2db      	uxtb	r3, r3
 8016196:	3330      	adds	r3, #48	; 0x30
 8016198:	b2da      	uxtb	r2, r3
 801619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619c:	739a      	strb	r2, [r3, #14]
				break;
 801619e:	e00d      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
			}
		}
 80161a0:	bf00      	nop
 80161a2:	e00c      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161a4:	bf00      	nop
 80161a6:	e00a      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161a8:	bf00      	nop
 80161aa:	e008      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161ac:	bf00      	nop
 80161ae:	e006      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161b0:	bf00      	nop
 80161b2:	e004      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161b4:	bf00      	nop
 80161b6:	e002      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161b8:	bf00      	nop
 80161ba:	e000      	b.n	80161be <pifGps_ParsingNmea+0x7ae>
				break;
 80161bc:	bf00      	nop
		param++;
 80161be:	4b0a      	ldr	r3, [pc, #40]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	3301      	adds	r3, #1
 80161c4:	b2da      	uxtb	r2, r3
 80161c6:	4b08      	ldr	r3, [pc, #32]	; (80161e8 <pifGps_ParsingNmea+0x7d8>)
 80161c8:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 80161ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161ce:	2b2a      	cmp	r3, #42	; 0x2a
 80161d0:	d110      	bne.n	80161f4 <pifGps_ParsingNmea+0x7e4>
 80161d2:	4b07      	ldr	r3, [pc, #28]	; (80161f0 <pifGps_ParsingNmea+0x7e0>)
 80161d4:	2201      	movs	r2, #1
 80161d6:	701a      	strb	r2, [r3, #0]
 80161d8:	e014      	b.n	8016204 <pifGps_ParsingNmea+0x7f4>
 80161da:	bf00      	nop
 80161dc:	f3af 8000 	nop.w
 80161e0:	00000000 	.word	0x00000000
 80161e4:	40e91e80 	.word	0x40e91e80
 80161e8:	200014c5 	.word	0x200014c5
 80161ec:	200014c8 	.word	0x200014c8
 80161f0:	200014ea 	.word	0x200014ea
		else parity ^= c;
 80161f4:	4b68      	ldr	r3, [pc, #416]	; (8016398 <pifGps_ParsingNmea+0x988>)
 80161f6:	781a      	ldrb	r2, [r3, #0]
 80161f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161fc:	4053      	eors	r3, r2
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	4b65      	ldr	r3, [pc, #404]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016202:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016206:	689b      	ldr	r3, [r3, #8]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d018      	beq.n	801623e <pifGps_ParsingNmea+0x82e>
			string[offset++] = c;
 801620c:	4b63      	ldr	r3, [pc, #396]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	1c5a      	adds	r2, r3, #1
 8016212:	b2d1      	uxtb	r1, r2
 8016214:	4a61      	ldr	r2, [pc, #388]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016216:	7011      	strb	r1, [r2, #0]
 8016218:	4619      	mov	r1, r3
 801621a:	4a61      	ldr	r2, [pc, #388]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 801621c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016220:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016222:	4b5e      	ldr	r3, [pc, #376]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	1c5a      	adds	r2, r3, #1
 8016228:	b2d1      	uxtb	r1, r2
 801622a:	4a5c      	ldr	r2, [pc, #368]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801622c:	7011      	strb	r1, [r2, #0]
 801622e:	461a      	mov	r2, r3
 8016230:	4b5b      	ldr	r3, [pc, #364]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016232:	2100      	movs	r1, #0
 8016234:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016238:	689b      	ldr	r3, [r3, #8]
 801623a:	4859      	ldr	r0, [pc, #356]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 801623c:	4798      	blx	r3
		}
		offset = 0;
 801623e:	4b57      	ldr	r3, [pc, #348]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016240:	2200      	movs	r2, #0
 8016242:	701a      	strb	r2, [r3, #0]
 8016244:	e0a2      	b.n	801638c <pifGps_ParsingNmea+0x97c>
	}
	else if (c == '\r' || c == '\n') {
 8016246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801624a:	2b0d      	cmp	r3, #13
 801624c:	d003      	beq.n	8016256 <pifGps_ParsingNmea+0x846>
 801624e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016252:	2b0a      	cmp	r3, #10
 8016254:	d17f      	bne.n	8016356 <pifGps_ParsingNmea+0x946>
		if (msg_id && checksum_param) { //parity checksum
 8016256:	4b53      	ldr	r3, [pc, #332]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016258:	881b      	ldrh	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d04e      	beq.n	80162fc <pifGps_ParsingNmea+0x8ec>
 801625e:	4b52      	ldr	r3, [pc, #328]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d04a      	beq.n	80162fc <pifGps_ParsingNmea+0x8ec>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016266:	4b4e      	ldr	r3, [pc, #312]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	4618      	mov	r0, r3
 801626c:	f7ff faee 	bl	801584c <_convertAscii2Hex>
 8016270:	4603      	mov	r3, r0
 8016272:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 8016276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801627a:	011b      	lsls	r3, r3, #4
 801627c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 8016280:	4b47      	ldr	r3, [pc, #284]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016282:	785b      	ldrb	r3, [r3, #1]
 8016284:	4618      	mov	r0, r3
 8016286:	f7ff fae1 	bl	801584c <_convertAscii2Hex>
 801628a:	4603      	mov	r3, r0
 801628c:	461a      	mov	r2, r3
 801628e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016292:	4413      	add	r3, r2
 8016294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 8016298:	4b3f      	ldr	r3, [pc, #252]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d118      	bne.n	80162d6 <pifGps_ParsingNmea+0x8c6>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	b29a      	uxth	r2, r3
 80162aa:	4b3e      	ldr	r3, [pc, #248]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d102      	bne.n	80162b8 <pifGps_ParsingNmea+0x8a8>
 80162b2:	2301      	movs	r3, #1
 80162b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80162b8:	4b3a      	ldr	r3, [pc, #232]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 80162ba:	881b      	ldrh	r3, [r3, #0]
 80162bc:	2b0c      	cmp	r3, #12
 80162be:	d11a      	bne.n	80162f6 <pifGps_ParsingNmea+0x8e6>
 80162c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d016      	beq.n	80162f6 <pifGps_ParsingNmea+0x8e6>
					(p_owner->__evt_text)(p_owner->__p_txt);
 80162c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80162d0:	4610      	mov	r0, r2
 80162d2:	4798      	blx	r3
 80162d4:	e00f      	b.n	80162f6 <pifGps_ParsingNmea+0x8e6>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 80162d6:	4b33      	ldr	r3, [pc, #204]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 80162d8:	881b      	ldrh	r3, [r3, #0]
 80162da:	4619      	mov	r1, r3
 80162dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80162e0:	4a2d      	ldr	r2, [pc, #180]	; (8016398 <pifGps_ParsingNmea+0x988>)
 80162e2:	7812      	ldrb	r2, [r2, #0]
 80162e4:	9201      	str	r2, [sp, #4]
 80162e6:	9300      	str	r3, [sp, #0]
 80162e8:	460b      	mov	r3, r1
 80162ea:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80162ee:	492f      	ldr	r1, [pc, #188]	; (80163ac <pifGps_ParsingNmea+0x99c>)
 80162f0:	2004      	movs	r0, #4
 80162f2:	f7fd f94b 	bl	801358c <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 80162f6:	2301      	movs	r3, #1
 80162f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 80162fc:	4b2a      	ldr	r3, [pc, #168]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 80162fe:	2200      	movs	r2, #0
 8016300:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	689b      	ldr	r3, [r3, #8]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d018      	beq.n	801633c <pifGps_ParsingNmea+0x92c>
			string[offset++] = c;
 801630a:	4b24      	ldr	r3, [pc, #144]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	1c5a      	adds	r2, r3, #1
 8016310:	b2d1      	uxtb	r1, r2
 8016312:	4a22      	ldr	r2, [pc, #136]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016314:	7011      	strb	r1, [r2, #0]
 8016316:	4619      	mov	r1, r3
 8016318:	4a21      	ldr	r2, [pc, #132]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 801631a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801631e:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016320:	4b1e      	ldr	r3, [pc, #120]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	1c5a      	adds	r2, r3, #1
 8016326:	b2d1      	uxtb	r1, r2
 8016328:	4a1c      	ldr	r2, [pc, #112]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801632a:	7011      	strb	r1, [r2, #0]
 801632c:	461a      	mov	r2, r3
 801632e:	4b1c      	ldr	r3, [pc, #112]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016330:	2100      	movs	r1, #0
 8016332:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016336:	689b      	ldr	r3, [r3, #8]
 8016338:	4819      	ldr	r0, [pc, #100]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 801633a:	4798      	blx	r3
		}
		offset = 0;
 801633c:	4b17      	ldr	r3, [pc, #92]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801633e:	2200      	movs	r2, #0
 8016340:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 8016342:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016346:	2b00      	cmp	r3, #0
 8016348:	d002      	beq.n	8016350 <pifGps_ParsingNmea+0x940>
			pifGps_SendEvent(p_owner);
 801634a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801634c:	f7ff fb3e 	bl	80159cc <pifGps_SendEvent>
		}
		return rtn;
 8016350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016354:	e01b      	b.n	801638e <pifGps_ParsingNmea+0x97e>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016356:	4b11      	ldr	r3, [pc, #68]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	2b1f      	cmp	r3, #31
 801635c:	d80a      	bhi.n	8016374 <pifGps_ParsingNmea+0x964>
 801635e:	4b0f      	ldr	r3, [pc, #60]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	1c5a      	adds	r2, r3, #1
 8016364:	b2d1      	uxtb	r1, r2
 8016366:	4a0d      	ldr	r2, [pc, #52]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016368:	7011      	strb	r1, [r2, #0]
 801636a:	4619      	mov	r1, r3
 801636c:	4a0c      	ldr	r2, [pc, #48]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 801636e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016372:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8016374:	4b0c      	ldr	r3, [pc, #48]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d107      	bne.n	801638c <pifGps_ParsingNmea+0x97c>
 801637c:	4b06      	ldr	r3, [pc, #24]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801637e:	781a      	ldrb	r2, [r3, #0]
 8016380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016384:	4053      	eors	r3, r2
 8016386:	b2da      	uxtb	r2, r3
 8016388:	4b03      	ldr	r3, [pc, #12]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801638a:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 801638c:	2300      	movs	r3, #0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3738      	adds	r7, #56	; 0x38
 8016392:	46bd      	mov	sp, r7
 8016394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016398:	200014c7 	.word	0x200014c7
 801639c:	200014c6 	.word	0x200014c6
 80163a0:	200014c8 	.word	0x200014c8
 80163a4:	200014e8 	.word	0x200014e8
 80163a8:	200014ea 	.word	0x200014ea
 80163ac:	080265a8 	.word	0x080265a8

080163b0 <_evtParsing>:
#include "gps/pif_gps_nmea.h"

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
	PifGpsNmea *p_owner = (PifGpsNmea *)p_client;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	60fb      	str	r3, [r7, #12]
	uint8_t c;

	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80163be:	e005      	b.n	80163cc <_evtParsing+0x1c>
		pifGps_ParsingNmea(&p_owner->_gps, c);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7afa      	ldrb	r2, [r7, #11]
 80163c4:	4611      	mov	r1, r2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7ff fb22 	bl	8015a10 <pifGps_ParsingNmea>
	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80163d0:	f107 010b 	add.w	r1, r7, #11
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	4610      	mov	r0, r2
 80163d8:	4798      	blx	r3
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1ef      	bne.n	80163c0 <_evtParsing+0x10>
	}
}
 80163e0:	bf00      	nop
 80163e2:	bf00      	nop
 80163e4:	3710      	adds	r7, #16
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
	...

080163ec <pifGpsNmea_Init>:

BOOL pifGpsNmea_Init(PifGpsNmea* p_owner, PifId id)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b082      	sub	sp, #8
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	460b      	mov	r3, r1
 80163f6:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d104      	bne.n	8016408 <pifGpsNmea_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80163fe:	4b0f      	ldr	r3, [pc, #60]	; (801643c <pifGpsNmea_Init+0x50>)
 8016400:	2201      	movs	r2, #1
 8016402:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016404:	2300      	movs	r3, #0
 8016406:	e014      	b.n	8016432 <pifGpsNmea_Init+0x46>
	}

	memset(p_owner, 0, sizeof(PifGpsNmea));
 8016408:	2270      	movs	r2, #112	; 0x70
 801640a:	2100      	movs	r1, #0
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f00b fb73 	bl	8021af8 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	887a      	ldrh	r2, [r7, #2]
 8016416:	4611      	mov	r1, r2
 8016418:	4618      	mov	r0, r3
 801641a:	f7ff fa55 	bl	80158c8 <pifGps_Init>
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d001      	beq.n	8016428 <pifGpsNmea_Init+0x3c>
    return TRUE;
 8016424:	2301      	movs	r3, #1
 8016426:	e004      	b.n	8016432 <pifGpsNmea_Init+0x46>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016428:	bf00      	nop

fail:
	pifGpsNmea_Clear(p_owner);
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f000 f808 	bl	8016440 <pifGpsNmea_Clear>
    return FALSE;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	20001365 	.word	0x20001365

08016440 <pifGpsNmea_Clear>:

void pifGpsNmea_Clear(PifGpsNmea* p_owner)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
	pifGps_Clear(&p_owner->_gps);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	4618      	mov	r0, r3
 801644c:	f7ff fa66 	bl	801591c <pifGps_Clear>
}
 8016450:	bf00      	nop
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <pifGpsNmea_AttachComm>:

void pifGpsNmea_AttachComm(PifGpsNmea* p_owner, PifComm* p_comm)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	683a      	ldr	r2, [r7, #0]
 8016466:	669a      	str	r2, [r3, #104]	; 0x68
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8016468:	2300      	movs	r3, #0
 801646a:	4a04      	ldr	r2, [pc, #16]	; (801647c <pifGpsNmea_AttachComm+0x24>)
 801646c:	6879      	ldr	r1, [r7, #4]
 801646e:	6838      	ldr	r0, [r7, #0]
 8016470:	f7fb fe76 	bl	8012160 <pifComm_AttachClient>
}
 8016474:	bf00      	nop
 8016476:	3708      	adds	r7, #8
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	080163b1 	.word	0x080163b1

08016480 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016480:	b480      	push	{r7}
 8016482:	b087      	sub	sp, #28
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	4613      	mov	r3, r2
 801648c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 801648e:	2300      	movs	r3, #0
 8016490:	75fb      	strb	r3, [r7, #23]
 8016492:	2300      	movs	r3, #0
 8016494:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 8016496:	2300      	movs	r3, #0
 8016498:	82bb      	strh	r3, [r7, #20]
 801649a:	e00d      	b.n	80164b8 <_checksumUbx+0x38>
		ck_a += p_header[i];
 801649c:	8abb      	ldrh	r3, [r7, #20]
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	4413      	add	r3, r2
 80164a2:	781a      	ldrb	r2, [r3, #0]
 80164a4:	7dfb      	ldrb	r3, [r7, #23]
 80164a6:	4413      	add	r3, r2
 80164a8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80164aa:	7dba      	ldrb	r2, [r7, #22]
 80164ac:	7dfb      	ldrb	r3, [r7, #23]
 80164ae:	4413      	add	r3, r2
 80164b0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 80164b2:	8abb      	ldrh	r3, [r7, #20]
 80164b4:	3301      	adds	r3, #1
 80164b6:	82bb      	strh	r3, [r7, #20]
 80164b8:	8abb      	ldrh	r3, [r7, #20]
 80164ba:	2b03      	cmp	r3, #3
 80164bc:	d9ee      	bls.n	801649c <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80164be:	2300      	movs	r3, #0
 80164c0:	82bb      	strh	r3, [r7, #20]
 80164c2:	e00d      	b.n	80164e0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80164c4:	8abb      	ldrh	r3, [r7, #20]
 80164c6:	68ba      	ldr	r2, [r7, #8]
 80164c8:	4413      	add	r3, r2
 80164ca:	781a      	ldrb	r2, [r3, #0]
 80164cc:	7dfb      	ldrb	r3, [r7, #23]
 80164ce:	4413      	add	r3, r2
 80164d0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80164d2:	7dba      	ldrb	r2, [r7, #22]
 80164d4:	7dfb      	ldrb	r3, [r7, #23]
 80164d6:	4413      	add	r3, r2
 80164d8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80164da:	8abb      	ldrh	r3, [r7, #20]
 80164dc:	3301      	adds	r3, #1
 80164de:	82bb      	strh	r3, [r7, #20]
 80164e0:	8aba      	ldrh	r2, [r7, #20]
 80164e2:	88fb      	ldrh	r3, [r7, #6]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d3ed      	bcc.n	80164c4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80164e8:	7dfb      	ldrb	r3, [r7, #23]
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	7dbb      	ldrb	r3, [r7, #22]
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	021b      	lsls	r3, r3, #8
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	4413      	add	r3, r2
 80164f6:	b29b      	uxth	r3, r3
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	371c      	adds	r7, #28
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016506:	b08d      	sub	sp, #52	; 0x34
 8016508:	af06      	add	r7, sp, #24
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	33cc      	adds	r3, #204	; 0xcc
 8016512:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016514:	e0da      	b.n	80166cc <_parsingPacket+0x1c8>
		switch (p_owner->__rx.state) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801651c:	2b09      	cmp	r3, #9
 801651e:	f200 80d4 	bhi.w	80166ca <_parsingPacket+0x1c6>
 8016522:	a201      	add	r2, pc, #4	; (adr r2, 8016528 <_parsingPacket+0x24>)
 8016524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016528:	08016551 	.word	0x08016551
 801652c:	0801658d 	.word	0x0801658d
 8016530:	080165a7 	.word	0x080165a7
 8016534:	080165b7 	.word	0x080165b7
 8016538:	080165c7 	.word	0x080165c7
 801653c:	080165d9 	.word	0x080165d9
 8016540:	08016615 	.word	0x08016615
 8016544:	0801664f 	.word	0x0801664f
 8016548:	08016663 	.word	0x08016663
 801654c:	080166ad 	.word	0x080166ad
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8016550:	7afb      	ldrb	r3, [r7, #11]
 8016552:	2bb5      	cmp	r3, #181	; 0xb5
 8016554:	d107      	bne.n	8016566 <_parsingPacket+0x62>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2201      	movs	r2, #1
 801655a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 801655e:	4b85      	ldr	r3, [pc, #532]	; (8016774 <_parsingPacket+0x270>)
 8016560:	2204      	movs	r2, #4
 8016562:	701a      	strb	r2, [r3, #0]
 8016564:	e0b2      	b.n	80166cc <_parsingPacket+0x1c8>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	3310      	adds	r3, #16
 801656a:	7afa      	ldrb	r2, [r7, #11]
 801656c:	4611      	mov	r1, r2
 801656e:	4618      	mov	r0, r3
 8016570:	f7ff fa4e 	bl	8015a10 <pifGps_ParsingNmea>
 8016574:	4603      	mov	r3, r0
 8016576:	2b00      	cmp	r3, #0
 8016578:	f000 80a8 	beq.w	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_NMEA;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2209      	movs	r2, #9
 8016580:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8016584:	4b7b      	ldr	r3, [pc, #492]	; (8016774 <_parsingPacket+0x270>)
 8016586:	2204      	movs	r2, #4
 8016588:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 801658a:	e09f      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 801658c:	7afb      	ldrb	r3, [r7, #11]
 801658e:	2b62      	cmp	r3, #98	; 0x62
 8016590:	d104      	bne.n	801659c <_parsingPacket+0x98>
				p_owner->__rx.state = GURS_CLASS;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2202      	movs	r2, #2
 8016596:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801659a:	e097      	b.n	80166cc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_INVALID_DATA;
 801659c:	2301      	movs	r3, #1
 801659e:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80165a0:	2361      	movs	r3, #97	; 0x61
 80165a2:	613b      	str	r3, [r7, #16]
				goto fail;
 80165a4:	e09f      	b.n	80166e6 <_parsingPacket+0x1e2>

		case GURS_CLASS:
			p_packet->class_id = data;
 80165a6:	7afa      	ldrb	r2, [r7, #11]
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2203      	movs	r2, #3
 80165b0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165b4:	e08a      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_ID:
			p_packet->msg_id = data;
 80165b6:	7afa      	ldrb	r2, [r7, #11]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2204      	movs	r2, #4
 80165c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165c4:	e082      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80165c6:	7afb      	ldrb	r3, [r7, #11]
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2205      	movs	r2, #5
 80165d2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165d6:	e079      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	885b      	ldrh	r3, [r3, #2]
 80165dc:	b21a      	sxth	r2, r3
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	021b      	lsls	r3, r3, #8
 80165e2:	b21b      	sxth	r3, r3
 80165e4:	4313      	orrs	r3, r2
 80165e6:	b21b      	sxth	r3, r3
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	885b      	ldrh	r3, [r3, #2]
 80165f2:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80165f6:	d208      	bcs.n	801660a <_parsingPacket+0x106>
				p_owner->__rx.payload_count = 0;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2200      	movs	r2, #0
 80165fc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2206      	movs	r2, #6
 8016604:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016608:	e060      	b.n	80166cc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_BIG_LENGHT;
 801660a:	2300      	movs	r3, #0
 801660c:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801660e:	237f      	movs	r3, #127	; 0x7f
 8016610:	613b      	str	r3, [r7, #16]
				goto fail;
 8016612:	e068      	b.n	80166e6 <_parsingPacket+0x1e2>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801661a:	4619      	mov	r1, r3
 801661c:	7afa      	ldrb	r2, [r7, #11]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	440b      	add	r3, r1
 8016622:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801662a:	3301      	adds	r3, #1
 801662c:	b2da      	uxtb	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801663a:	b29a      	uxth	r2, r3
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	885b      	ldrh	r3, [r3, #2]
 8016640:	429a      	cmp	r2, r3
 8016642:	d343      	bcc.n	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_CK_A;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2207      	movs	r2, #7
 8016648:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801664c:	e03e      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 801664e:	7afb      	ldrb	r3, [r7, #11]
 8016650:	b29a      	uxth	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2208      	movs	r2, #8
 801665c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016660:	e034      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8016668:	b21a      	sxth	r2, r3
 801666a:	7afb      	ldrb	r3, [r7, #11]
 801666c:	021b      	lsls	r3, r3, #8
 801666e:	b21b      	sxth	r3, r3
 8016670:	4313      	orrs	r3, r2
 8016672:	b21b      	sxth	r3, r3
 8016674:	b29a      	uxth	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	1d19      	adds	r1, r3, #4
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	885b      	ldrh	r3, [r3, #2]
 801668a:	461a      	mov	r2, r3
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff fef7 	bl	8016480 <_checksumUbx>
 8016692:	4603      	mov	r3, r0
 8016694:	429c      	cmp	r4, r3
 8016696:	d104      	bne.n	80166a2 <_parsingPacket+0x19e>
				p_owner->__rx.state = GURS_DONE;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	220a      	movs	r2, #10
 801669c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80166a0:	e064      	b.n	801676c <_parsingPacket+0x268>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 80166a2:	2302      	movs	r3, #2
 80166a4:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80166a6:	239b      	movs	r3, #155	; 0x9b
 80166a8:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80166aa:	e01c      	b.n	80166e6 <_parsingPacket+0x1e2>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	3310      	adds	r3, #16
 80166b0:	7afa      	ldrb	r2, [r7, #11]
 80166b2:	4611      	mov	r1, r2
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7ff f9ab 	bl	8015a10 <pifGps_ParsingNmea>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d005      	beq.n	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80166c8:	e050      	b.n	801676c <_parsingPacket+0x268>
			}
			break;

		default:
			break;
 80166ca:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80166d2:	f107 010b 	add.w	r1, r7, #11
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	4610      	mov	r0, r2
 80166da:	4798      	blx	r3
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	f47f af19 	bne.w	8016516 <_parsingPacket+0x12>
		}
	}
	return;
 80166e4:	e042      	b.n	801676c <_parsingPacket+0x268>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 80166e6:	4b23      	ldr	r3, [pc, #140]	; (8016774 <_parsingPacket+0x270>)
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	7dfa      	ldrb	r2, [r7, #23]
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d039      	beq.n	8016764 <_parsingPacket+0x260>
		if (p_owner->__rx.state) {
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d021      	beq.n	801673e <_parsingPacket+0x23a>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	8b9b      	ldrh	r3, [r3, #28]
 80166fe:	461e      	mov	r6, r3
 8016700:	7dfb      	ldrb	r3, [r7, #23]
 8016702:	4a1d      	ldr	r2, [pc, #116]	; (8016778 <_parsingPacket+0x274>)
 8016704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016708:	7afa      	ldrb	r2, [r7, #11]
 801670a:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016712:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016718:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801671e:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016724:	9205      	str	r2, [sp, #20]
 8016726:	9504      	str	r5, [sp, #16]
 8016728:	9403      	str	r4, [sp, #12]
 801672a:	9002      	str	r0, [sp, #8]
 801672c:	9101      	str	r1, [sp, #4]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	4633      	mov	r3, r6
 8016732:	693a      	ldr	r2, [r7, #16]
 8016734:	4911      	ldr	r1, [pc, #68]	; (801677c <_parsingPacket+0x278>)
 8016736:	2004      	movs	r0, #4
 8016738:	f7fc ff28 	bl	801358c <pifLog_Printf>
 801673c:	e00f      	b.n	801675e <_parsingPacket+0x25a>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	8b9b      	ldrh	r3, [r3, #28]
 8016742:	4619      	mov	r1, r3
 8016744:	7dfb      	ldrb	r3, [r7, #23]
 8016746:	4a0c      	ldr	r2, [pc, #48]	; (8016778 <_parsingPacket+0x274>)
 8016748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801674c:	7afa      	ldrb	r2, [r7, #11]
 801674e:	9201      	str	r2, [sp, #4]
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	460b      	mov	r3, r1
 8016754:	693a      	ldr	r2, [r7, #16]
 8016756:	490a      	ldr	r1, [pc, #40]	; (8016780 <_parsingPacket+0x27c>)
 8016758:	2004      	movs	r0, #4
 801675a:	f7fc ff17 	bl	801358c <pifLog_Printf>
		}
		pre_err = pkt_err;
 801675e:	4a05      	ldr	r2, [pc, #20]	; (8016774 <_parsingPacket+0x270>)
 8016760:	7dfb      	ldrb	r3, [r7, #23]
 8016762:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 801676c:	371c      	adds	r7, #28
 801676e:	46bd      	mov	sp, r7
 8016770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016772:	bf00      	nop
 8016774:	2000007c 	.word	0x2000007c
 8016778:	2000006c 	.word	0x2000006c
 801677c:	080265f8 	.word	0x080265f8
 8016780:	08026628 	.word	0x08026628
 8016784:	00000000 	.word	0x00000000

08016788 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b08c      	sub	sp, #48	; 0x30
 801678c:	af04      	add	r7, sp, #16
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	33cc      	adds	r3, #204	; 0xcc
 801679a:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	3310      	adds	r3, #16
 80167a0:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 80167a2:	2300      	movs	r3, #0
 80167a4:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	695b      	ldr	r3, [r3, #20]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	f000 826b 	beq.w	8016c86 <_evtParsing+0x4fe>

    if (p_owner->__rx.state < GURS_DONE) {
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80167b6:	2b09      	cmp	r3, #9
 80167b8:	d803      	bhi.n	80167c2 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 80167ba:	6839      	ldr	r1, [r7, #0]
 80167bc:	6978      	ldr	r0, [r7, #20]
 80167be:	f7ff fea1 	bl	8016504 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80167c8:	2b0a      	cmp	r3, #10
 80167ca:	f040 825d 	bne.w	8016c88 <_evtParsing+0x500>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	d02a      	beq.n	801682c <_evtParsing+0xa4>
 80167d6:	2b05      	cmp	r3, #5
 80167d8:	f040 821e 	bne.w	8016c18 <_evtParsing+0x490>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	785b      	ldrb	r3, [r3, #1]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d80b      	bhi.n	80167fc <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d01d      	beq.n	8016828 <_evtParsing+0xa0>
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	693a      	ldr	r2, [r7, #16]
 80167f2:	7852      	ldrb	r2, [r2, #1]
 80167f4:	4611      	mov	r1, r2
 80167f6:	6978      	ldr	r0, [r7, #20]
 80167f8:	4798      	blx	r3
        		break;
 80167fa:	e015      	b.n	8016828 <_evtParsing+0xa0>

            default:
            	error = TRUE;
 80167fc:	2301      	movs	r3, #1
 80167fe:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	8b9b      	ldrh	r3, [r3, #28]
 8016804:	4618      	mov	r0, r3
 8016806:	4ba2      	ldr	r3, [pc, #648]	; (8016a90 <_evtParsing+0x308>)
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	693a      	ldr	r2, [r7, #16]
 801680c:	7812      	ldrb	r2, [r2, #0]
 801680e:	4611      	mov	r1, r2
 8016810:	693a      	ldr	r2, [r7, #16]
 8016812:	7852      	ldrb	r2, [r2, #1]
 8016814:	9202      	str	r2, [sp, #8]
 8016816:	9101      	str	r1, [sp, #4]
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	4603      	mov	r3, r0
 801681c:	22e7      	movs	r2, #231	; 0xe7
 801681e:	499d      	ldr	r1, [pc, #628]	; (8016a94 <_evtParsing+0x30c>)
 8016820:	2004      	movs	r0, #4
 8016822:	f7fc feb3 	bl	801358c <pifLog_Printf>
#endif
                break;
 8016826:	e000      	b.n	801682a <_evtParsing+0xa2>
        		break;
 8016828:	bf00      	nop
        	}
        	break;
 801682a:	e208      	b.n	8016c3e <_evtParsing+0x4b6>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	785b      	ldrb	r3, [r3, #1]
 8016830:	3b02      	subs	r3, #2
 8016832:	2b2e      	cmp	r3, #46	; 0x2e
 8016834:	f200 81d5 	bhi.w	8016be2 <_evtParsing+0x45a>
 8016838:	a201      	add	r2, pc, #4	; (adr r2, 8016840 <_evtParsing+0xb8>)
 801683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801683e:	bf00      	nop
 8016840:	080168fd 	.word	0x080168fd
 8016844:	08016a27 	.word	0x08016a27
 8016848:	08016be3 	.word	0x08016be3
 801684c:	08016be3 	.word	0x08016be3
 8016850:	080169e3 	.word	0x080169e3
 8016854:	08016997 	.word	0x08016997
 8016858:	08016be3 	.word	0x08016be3
 801685c:	08016be3 	.word	0x08016be3
 8016860:	08016be3 	.word	0x08016be3
 8016864:	08016be3 	.word	0x08016be3
 8016868:	08016be3 	.word	0x08016be3
 801686c:	08016be3 	.word	0x08016be3
 8016870:	08016be3 	.word	0x08016be3
 8016874:	08016be3 	.word	0x08016be3
 8016878:	08016be3 	.word	0x08016be3
 801687c:	08016be3 	.word	0x08016be3
 8016880:	08016ba9 	.word	0x08016ba9
 8016884:	08016be3 	.word	0x08016be3
 8016888:	08016be3 	.word	0x08016be3
 801688c:	08016be3 	.word	0x08016be3
 8016890:	08016be3 	.word	0x08016be3
 8016894:	08016be3 	.word	0x08016be3
 8016898:	08016be3 	.word	0x08016be3
 801689c:	08016be3 	.word	0x08016be3
 80168a0:	08016be3 	.word	0x08016be3
 80168a4:	08016be3 	.word	0x08016be3
 80168a8:	08016be3 	.word	0x08016be3
 80168ac:	08016be3 	.word	0x08016be3
 80168b0:	08016be3 	.word	0x08016be3
 80168b4:	08016be3 	.word	0x08016be3
 80168b8:	08016be3 	.word	0x08016be3
 80168bc:	08016b51 	.word	0x08016b51
 80168c0:	08016be3 	.word	0x08016be3
 80168c4:	08016be3 	.word	0x08016be3
 80168c8:	08016be3 	.word	0x08016be3
 80168cc:	08016be3 	.word	0x08016be3
 80168d0:	08016be3 	.word	0x08016be3
 80168d4:	08016be3 	.word	0x08016be3
 80168d8:	08016be3 	.word	0x08016be3
 80168dc:	08016be3 	.word	0x08016be3
 80168e0:	08016be3 	.word	0x08016be3
 80168e4:	08016be3 	.word	0x08016be3
 80168e8:	08016be3 	.word	0x08016be3
 80168ec:	08016be3 	.word	0x08016be3
 80168f0:	08016be3 	.word	0x08016be3
 80168f4:	08016be3 	.word	0x08016be3
 80168f8:	08016a61 	.word	0x08016a61
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	689b      	ldr	r3, [r3, #8]
 8016900:	4618      	mov	r0, r3
 8016902:	f7e9 fdcd 	bl	80004a0 <__aeabi_i2d>
 8016906:	a360      	add	r3, pc, #384	; (adr r3, 8016a88 <_evtParsing+0x300>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	f7e9 ff5c 	bl	80007c8 <__aeabi_ddiv>
 8016910:	4602      	mov	r2, r0
 8016912:	460b      	mov	r3, r1
 8016914:	68f9      	ldr	r1, [r7, #12]
 8016916:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	68db      	ldr	r3, [r3, #12]
 801691e:	4618      	mov	r0, r3
 8016920:	f7e9 fdbe 	bl	80004a0 <__aeabi_i2d>
 8016924:	a358      	add	r3, pc, #352	; (adr r3, 8016a88 <_evtParsing+0x300>)
 8016926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692a:	f7e9 ff4d 	bl	80007c8 <__aeabi_ddiv>
 801692e:	4602      	mov	r2, r0
 8016930:	460b      	mov	r3, r1
 8016932:	68f9      	ldr	r1, [r7, #12]
 8016934:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	695b      	ldr	r3, [r3, #20]
 801693c:	4618      	mov	r0, r3
 801693e:	f7e9 fdaf 	bl	80004a0 <__aeabi_i2d>
 8016942:	f04f 0200 	mov.w	r2, #0
 8016946:	4b54      	ldr	r3, [pc, #336]	; (8016a98 <_evtParsing+0x310>)
 8016948:	f7e9 ff3e 	bl	80007c8 <__aeabi_ddiv>
 801694c:	4602      	mov	r2, r0
 801694e:	460b      	mov	r3, r1
 8016950:	68f9      	ldr	r1, [r7, #12]
 8016952:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	699a      	ldr	r2, [r3, #24]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	69da      	ldr	r2, [r3, #28]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016966:	4b4d      	ldr	r3, [pc, #308]	; (8016a9c <_evtParsing+0x314>)
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	f003 0301 	and.w	r3, r3, #1
 801696e:	b2d9      	uxtb	r1, r3
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016976:	f361 0300 	bfi	r3, r1, #0, #1
 801697a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 801697e:	4b48      	ldr	r3, [pc, #288]	; (8016aa0 <_evtParsing+0x318>)
 8016980:	2201      	movs	r2, #1
 8016982:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 801698c:	4b45      	ldr	r3, [pc, #276]	; (8016aa4 <_evtParsing+0x31c>)
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016994:	e13f      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	891b      	ldrh	r3, [r3, #8]
 801699a:	b2db      	uxtb	r3, r3
 801699c:	3344      	adds	r3, #68	; 0x44
 801699e:	b2da      	uxtb	r2, r3
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	7a9a      	ldrb	r2, [r3, #10]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	7ada      	ldrb	r2, [r3, #11]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	7b1a      	ldrb	r2, [r3, #12]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	7b5a      	ldrb	r2, [r3, #13]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	7b9a      	ldrb	r2, [r3, #14]
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	695b      	ldr	r3, [r3, #20]
 80169d0:	461a      	mov	r2, r3
 80169d2:	4b35      	ldr	r3, [pc, #212]	; (8016aa8 <_evtParsing+0x320>)
 80169d4:	fba3 2302 	umull	r2, r3, r3, r2
 80169d8:	0c9b      	lsrs	r3, r3, #18
 80169da:	b29a      	uxth	r2, r3
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	829a      	strh	r2, [r3, #20]
                    break;
 80169e0:	e119      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	7bdb      	ldrb	r3, [r3, #15]
 80169e6:	f003 0301 	and.w	r3, r3, #1
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d005      	beq.n	80169fa <_evtParsing+0x272>
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	7b9b      	ldrb	r3, [r3, #14]
 80169f2:	2b03      	cmp	r3, #3
 80169f4:	d101      	bne.n	80169fa <_evtParsing+0x272>
 80169f6:	2301      	movs	r3, #1
 80169f8:	e000      	b.n	80169fc <_evtParsing+0x274>
 80169fa:	2300      	movs	r3, #0
 80169fc:	b2da      	uxtb	r2, r3
 80169fe:	4b27      	ldr	r3, [pc, #156]	; (8016a9c <_evtParsing+0x314>)
 8016a00:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a02:	4b26      	ldr	r3, [pc, #152]	; (8016a9c <_evtParsing+0x314>)
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d106      	bne.n	8016a18 <_evtParsing+0x290>
                    	p_parent->_fix = FALSE;
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a10:	f36f 0300 	bfc	r3, #0, #1
 8016a14:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016a18:	693b      	ldr	r3, [r7, #16]
 8016a1a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016a24:	e0f7      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	7a5b      	ldrb	r3, [r3, #9]
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d005      	beq.n	8016a3e <_evtParsing+0x2b6>
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	7a1b      	ldrb	r3, [r3, #8]
 8016a36:	2b03      	cmp	r3, #3
 8016a38:	d101      	bne.n	8016a3e <_evtParsing+0x2b6>
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	e000      	b.n	8016a40 <_evtParsing+0x2b8>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	4b16      	ldr	r3, [pc, #88]	; (8016a9c <_evtParsing+0x314>)
 8016a44:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a46:	4b15      	ldr	r3, [pc, #84]	; (8016a9c <_evtParsing+0x314>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f040 80e0 	bne.w	8016c10 <_evtParsing+0x488>
                    	p_parent->_fix = FALSE;
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a56:	f36f 0300 	bfc	r3, #0, #1
 8016a5a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016a5e:	e0d7      	b.n	8016c10 <_evtParsing+0x488>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	7a1a      	ldrb	r2, [r3, #8]
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016a70:	2b10      	cmp	r3, #16
 8016a72:	d903      	bls.n	8016a7c <_evtParsing+0x2f4>
                    	p_owner->_num_ch = 16;
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	2210      	movs	r2, #16
 8016a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	61fb      	str	r3, [r7, #28]
 8016a80:	e053      	b.n	8016b2a <_evtParsing+0x3a2>
 8016a82:	bf00      	nop
 8016a84:	f3af 8000 	nop.w
 8016a88:	00000000 	.word	0x00000000
 8016a8c:	416312d0 	.word	0x416312d0
 8016a90:	2000006c 	.word	0x2000006c
 8016a94:	0802663c 	.word	0x0802663c
 8016a98:	408f4000 	.word	0x408f4000
 8016a9c:	200014eb 	.word	0x200014eb
 8016aa0:	200014ec 	.word	0x200014ec
 8016aa4:	2000136c 	.word	0x2000136c
 8016aa8:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016aac:	6939      	ldr	r1, [r7, #16]
 8016aae:	69fa      	ldr	r2, [r7, #28]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	4413      	add	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	330c      	adds	r3, #12
 8016abc:	7819      	ldrb	r1, [r3, #0]
 8016abe:	697a      	ldr	r2, [r7, #20]
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	3379      	adds	r3, #121	; 0x79
 8016ac6:	460a      	mov	r2, r1
 8016ac8:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016aca:	6939      	ldr	r1, [r7, #16]
 8016acc:	69fa      	ldr	r2, [r7, #28]
 8016ace:	4613      	mov	r3, r2
 8016ad0:	005b      	lsls	r3, r3, #1
 8016ad2:	4413      	add	r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	440b      	add	r3, r1
 8016ad8:	330d      	adds	r3, #13
 8016ada:	7819      	ldrb	r1, [r3, #0]
 8016adc:	697a      	ldr	r2, [r7, #20]
 8016ade:	69fb      	ldr	r3, [r7, #28]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	3389      	adds	r3, #137	; 0x89
 8016ae4:	460a      	mov	r2, r1
 8016ae6:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016ae8:	6939      	ldr	r1, [r7, #16]
 8016aea:	69fa      	ldr	r2, [r7, #28]
 8016aec:	4613      	mov	r3, r2
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	4413      	add	r3, r2
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	440b      	add	r3, r1
 8016af6:	330f      	adds	r3, #15
 8016af8:	7819      	ldrb	r1, [r3, #0]
 8016afa:	697a      	ldr	r2, [r7, #20]
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	4413      	add	r3, r2
 8016b00:	3399      	adds	r3, #153	; 0x99
 8016b02:	460a      	mov	r2, r1
 8016b04:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016b06:	6939      	ldr	r1, [r7, #16]
 8016b08:	69fa      	ldr	r2, [r7, #28]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	4413      	add	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	440b      	add	r3, r1
 8016b14:	3310      	adds	r3, #16
 8016b16:	7819      	ldrb	r1, [r3, #0]
 8016b18:	697a      	ldr	r2, [r7, #20]
 8016b1a:	69fb      	ldr	r3, [r7, #28]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	33a9      	adds	r3, #169	; 0xa9
 8016b20:	460a      	mov	r2, r1
 8016b22:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	3301      	adds	r3, #1
 8016b28:	61fb      	str	r3, [r7, #28]
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016b30:	461a      	mov	r2, r3
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	4293      	cmp	r3, r2
 8016b36:	dbb9      	blt.n	8016aac <_evtParsing+0x324>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016b44:	4b54      	ldr	r3, [pc, #336]	; (8016c98 <_evtParsing+0x510>)
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016b4e:	e062      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	7ddb      	ldrb	r3, [r3, #23]
 8016b54:	f003 0304 	and.w	r3, r3, #4
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d05b      	beq.n	8016c14 <_evtParsing+0x48c>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	8a1b      	ldrh	r3, [r3, #16]
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	3330      	adds	r3, #48	; 0x30
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	7c9a      	ldrb	r2, [r3, #18]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	7cda      	ldrb	r2, [r3, #19]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	7d1a      	ldrb	r2, [r3, #20]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016b82:	693b      	ldr	r3, [r7, #16]
 8016b84:	7d5a      	ldrb	r2, [r3, #21]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	7d9a      	ldrb	r2, [r3, #22]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	68db      	ldr	r3, [r3, #12]
 8016b96:	461a      	mov	r2, r3
 8016b98:	4b40      	ldr	r3, [pc, #256]	; (8016c9c <_evtParsing+0x514>)
 8016b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8016b9e:	0c9b      	lsrs	r3, r3, #18
 8016ba0:	b29a      	uxth	r2, r3
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016ba6:	e035      	b.n	8016c14 <_evtParsing+0x48c>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	695b      	ldr	r3, [r3, #20]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7e9 fc67 	bl	8000480 <__aeabi_ui2d>
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	68f9      	ldr	r1, [r7, #12]
 8016bb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	69db      	ldr	r3, [r3, #28]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7e9 fc6d 	bl	80004a0 <__aeabi_i2d>
 8016bc6:	a332      	add	r3, pc, #200	; (adr r3, 8016c90 <_evtParsing+0x508>)
 8016bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bcc:	f7e9 fdfc 	bl	80007c8 <__aeabi_ddiv>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	68f9      	ldr	r1, [r7, #12]
 8016bd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016bda:	4b31      	ldr	r3, [pc, #196]	; (8016ca0 <_evtParsing+0x518>)
 8016bdc:	2201      	movs	r2, #1
 8016bde:	701a      	strb	r2, [r3, #0]
                    break;
 8016be0:	e019      	b.n	8016c16 <_evtParsing+0x48e>

                default:
                	error = TRUE;
 8016be2:	2301      	movs	r3, #1
 8016be4:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	8b9b      	ldrh	r3, [r3, #28]
 8016bea:	4618      	mov	r0, r3
 8016bec:	4b2d      	ldr	r3, [pc, #180]	; (8016ca4 <_evtParsing+0x51c>)
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	693a      	ldr	r2, [r7, #16]
 8016bf2:	7812      	ldrb	r2, [r2, #0]
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	693a      	ldr	r2, [r7, #16]
 8016bf8:	7852      	ldrb	r2, [r2, #1]
 8016bfa:	9202      	str	r2, [sp, #8]
 8016bfc:	9101      	str	r1, [sp, #4]
 8016bfe:	9300      	str	r3, [sp, #0]
 8016c00:	4603      	mov	r3, r0
 8016c02:	f240 1237 	movw	r2, #311	; 0x137
 8016c06:	4928      	ldr	r1, [pc, #160]	; (8016ca8 <_evtParsing+0x520>)
 8016c08:	2004      	movs	r0, #4
 8016c0a:	f7fc fcbf 	bl	801358c <pifLog_Printf>
#endif
                    break;
 8016c0e:	e002      	b.n	8016c16 <_evtParsing+0x48e>
                    break;
 8016c10:	bf00      	nop
 8016c12:	e014      	b.n	8016c3e <_evtParsing+0x4b6>
                	break;
 8016c14:	bf00      	nop
            }
        	break;
 8016c16:	e012      	b.n	8016c3e <_evtParsing+0x4b6>

		default:
        	error = TRUE;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	8b9b      	ldrh	r3, [r3, #28]
 8016c20:	4619      	mov	r1, r3
 8016c22:	4b20      	ldr	r3, [pc, #128]	; (8016ca4 <_evtParsing+0x51c>)
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	693a      	ldr	r2, [r7, #16]
 8016c28:	7812      	ldrb	r2, [r2, #0]
 8016c2a:	9201      	str	r2, [sp, #4]
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	460b      	mov	r3, r1
 8016c30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016c34:	491d      	ldr	r1, [pc, #116]	; (8016cac <_evtParsing+0x524>)
 8016c36:	2004      	movs	r0, #4
 8016c38:	f7fc fca8 	bl	801358c <pifLog_Printf>
#endif
			break;
 8016c3c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016c3e:	7efb      	ldrb	r3, [r7, #27]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d107      	bne.n	8016c54 <_evtParsing+0x4cc>
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d003      	beq.n	8016c54 <_evtParsing+0x4cc>
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	6938      	ldr	r0, [r7, #16]
 8016c52:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016c54:	4b16      	ldr	r3, [pc, #88]	; (8016cb0 <_evtParsing+0x528>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d00f      	beq.n	8016c7c <_evtParsing+0x4f4>
 8016c5c:	4b10      	ldr	r3, [pc, #64]	; (8016ca0 <_evtParsing+0x518>)
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00b      	beq.n	8016c7c <_evtParsing+0x4f4>
			pifGps_SendEvent(&p_owner->_gps);
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	3310      	adds	r3, #16
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7fe feaf 	bl	80159cc <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016c6e:	4b10      	ldr	r3, [pc, #64]	; (8016cb0 <_evtParsing+0x528>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	701a      	strb	r2, [r3, #0]
 8016c74:	4b0e      	ldr	r3, [pc, #56]	; (8016cb0 <_evtParsing+0x528>)
 8016c76:	781a      	ldrb	r2, [r3, #0]
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <_evtParsing+0x518>)
 8016c7a:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016c84:	e000      	b.n	8016c88 <_evtParsing+0x500>
    if (!p_owner->_gps.evt_receive) return;
 8016c86:	bf00      	nop
    }
}
 8016c88:	3720      	adds	r7, #32
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	00000000 	.word	0x00000000
 8016c94:	40f86a00 	.word	0x40f86a00
 8016c98:	2000136c 	.word	0x2000136c
 8016c9c:	431bde83 	.word	0x431bde83
 8016ca0:	200014ed 	.word	0x200014ed
 8016ca4:	2000006c 	.word	0x2000006c
 8016ca8:	0802663c 	.word	0x0802663c
 8016cac:	08026658 	.word	0x08026658
 8016cb0:	200014ec 	.word	0x200014ec

08016cb4 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b088      	sub	sp, #32
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016cca:	69bb      	ldr	r3, [r7, #24]
 8016ccc:	68ba      	ldr	r2, [r7, #8]
 8016cce:	4413      	add	r3, r2
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8016cd4:	d13a      	bne.n	8016d4c <_makeNmeaPacket+0x98>
			i++;
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	61bb      	str	r3, [r7, #24]
			break;
 8016cdc:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016cde:	4b45      	ldr	r3, [pc, #276]	; (8016df4 <_makeNmeaPacket+0x140>)
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	7ffb      	ldrb	r3, [r7, #31]
 8016ce4:	091b      	lsrs	r3, r3, #4
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	f003 030f 	and.w	r3, r3, #15
 8016cec:	441a      	add	r2, r3
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	68b9      	ldr	r1, [r7, #8]
 8016cf2:	440b      	add	r3, r1
 8016cf4:	7812      	ldrb	r2, [r2, #0]
 8016cf6:	701a      	strb	r2, [r3, #0]
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016cfe:	4b3d      	ldr	r3, [pc, #244]	; (8016df4 <_makeNmeaPacket+0x140>)
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	7ffb      	ldrb	r3, [r7, #31]
 8016d04:	f003 030f 	and.w	r3, r3, #15
 8016d08:	441a      	add	r2, r3
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	68b9      	ldr	r1, [r7, #8]
 8016d0e:	440b      	add	r3, r1
 8016d10:	7812      	ldrb	r2, [r2, #0]
 8016d12:	701a      	strb	r2, [r3, #0]
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	3301      	adds	r3, #1
 8016d18:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	4413      	add	r3, r2
 8016d20:	220d      	movs	r2, #13
 8016d22:	701a      	strb	r2, [r3, #0]
 8016d24:	69bb      	ldr	r3, [r7, #24]
 8016d26:	3301      	adds	r3, #1
 8016d28:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	68ba      	ldr	r2, [r7, #8]
 8016d2e:	4413      	add	r3, r2
 8016d30:	220a      	movs	r2, #10
 8016d32:	701a      	strb	r2, [r3, #0]
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	3301      	adds	r3, #1
 8016d38:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	68ba      	ldr	r2, [r7, #8]
 8016d3e:	4413      	add	r3, r2
 8016d40:	2200      	movs	r2, #0
 8016d42:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016d44:	79fb      	ldrb	r3, [r7, #7]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d016      	beq.n	8016d78 <_makeNmeaPacket+0xc4>
 8016d4a:	e00c      	b.n	8016d66 <_makeNmeaPacket+0xb2>
			parity ^= p_data[i];
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	68ba      	ldr	r2, [r7, #8]
 8016d50:	4413      	add	r3, r2
 8016d52:	781a      	ldrb	r2, [r3, #0]
 8016d54:	7ffb      	ldrb	r3, [r7, #31]
 8016d56:	4053      	eors	r3, r2
 8016d58:	77fb      	strb	r3, [r7, #31]
			i++;
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016d60:	e7b3      	b.n	8016cca <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			pifTaskManager_Yield();
 8016d62:	f7fd fe57 	bl	8014a14 <pifTaskManager_Yield>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7fc ffc6 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d0f4      	beq.n	8016d62 <_makeNmeaPacket+0xae>
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7fd f83f 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = i;
 8016d84:	69bb      	ldr	r3, [r7, #24]
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016d92:	2300      	movs	r3, #0
 8016d94:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d9c:	f107 0114 	add.w	r1, r7, #20
 8016da0:	2204      	movs	r2, #4
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7fd f87e 	bl	8013ea4 <pifRingBuffer_PutData>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d013      	beq.n	8016dd6 <_makeNmeaPacket+0x122>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016db4:	7d3a      	ldrb	r2, [r7, #20]
 8016db6:	b292      	uxth	r2, r2
 8016db8:	68b9      	ldr	r1, [r7, #8]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fd f872 	bl	8013ea4 <pifRingBuffer_PutData>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d009      	beq.n	8016dda <_makeNmeaPacket+0x126>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016dcc:	69db      	ldr	r3, [r3, #28]
 8016dce:	2201      	movs	r2, #1
 8016dd0:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e009      	b.n	8016dea <_makeNmeaPacket+0x136>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016dd6:	bf00      	nop
 8016dd8:	e000      	b.n	8016ddc <_makeNmeaPacket+0x128>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016dda:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fd f81b 	bl	8013e1e <pifRingBuffer_RestoreHead>
	return FALSE;
 8016de8:	2300      	movs	r3, #0
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3720      	adds	r7, #32
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	bf00      	nop
 8016df4:	20000060 	.word	0x20000060

08016df8 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b088      	sub	sp, #32
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	603b      	str	r3, [r7, #0]
 8016e04:	4613      	mov	r3, r2
 8016e06:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	3302      	adds	r3, #2
 8016e0c:	88fa      	ldrh	r2, [r7, #6]
 8016e0e:	6839      	ldr	r1, [r7, #0]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7ff fb35 	bl	8016480 <_checksumUbx>
 8016e16:	4603      	mov	r3, r0
 8016e18:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8016e1a:	8bfb      	ldrh	r3, [r7, #30]
 8016e1c:	b2db      	uxtb	r3, r3
 8016e1e:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8016e20:	8bfb      	ldrh	r3, [r7, #30]
 8016e22:	0a1b      	lsrs	r3, r3, #8
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8016e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d00b      	beq.n	8016e4a <_makeUbxPacket+0x52>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e32:	e001      	b.n	8016e38 <_makeUbxPacket+0x40>
			pifTaskManager_Yield();
 8016e34:	f7fd fdee 	bl	8014a14 <pifTaskManager_Yield>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fc ff5d 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016e44:	4603      	mov	r3, r0
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0f4      	beq.n	8016e34 <_makeUbxPacket+0x3c>
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7fc ffd6 	bl	8013e02 <pifRingBuffer_BackupHead>

	info[0] = length + 8;
 8016e56:	88fb      	ldrh	r3, [r7, #6]
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8016e60:	2300      	movs	r3, #0
 8016e62:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8016e64:	2300      	movs	r3, #0
 8016e66:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e72:	f107 0118 	add.w	r1, r7, #24
 8016e76:	2204      	movs	r2, #4
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fd f813 	bl	8013ea4 <pifRingBuffer_PutData>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d026      	beq.n	8016ed2 <_makeUbxPacket+0xda>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e8a:	2206      	movs	r2, #6
 8016e8c:	68b9      	ldr	r1, [r7, #8]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7fd f808 	bl	8013ea4 <pifRingBuffer_PutData>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d01d      	beq.n	8016ed6 <_makeUbxPacket+0xde>
	if (length > 0) {
 8016e9a:	88fb      	ldrh	r3, [r7, #6]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00a      	beq.n	8016eb6 <_makeUbxPacket+0xbe>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ea6:	88fa      	ldrh	r2, [r7, #6]
 8016ea8:	6839      	ldr	r1, [r7, #0]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7fc fffa 	bl	8013ea4 <pifRingBuffer_PutData>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d011      	beq.n	8016eda <_makeUbxPacket+0xe2>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ebc:	f107 0114 	add.w	r1, r7, #20
 8016ec0:	2202      	movs	r2, #2
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fc ffee 	bl	8013ea4 <pifRingBuffer_PutData>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d007      	beq.n	8016ede <_makeUbxPacket+0xe6>
	return TRUE;
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e00d      	b.n	8016eee <_makeUbxPacket+0xf6>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016ed2:	bf00      	nop
 8016ed4:	e004      	b.n	8016ee0 <_makeUbxPacket+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016ed6:	bf00      	nop
 8016ed8:	e002      	b.n	8016ee0 <_makeUbxPacket+0xe8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016eda:	bf00      	nop
 8016edc:	e000      	b.n	8016ee0 <_makeUbxPacket+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016ede:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fc ff99 	bl	8013e1e <pifRingBuffer_RestoreHead>
	return FALSE;
 8016eec:	2300      	movs	r3, #0
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3720      	adds	r7, #32
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8016ef6:	b5b0      	push	{r4, r5, r7, lr}
 8016ef8:	b084      	sub	sp, #16
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	6078      	str	r0, [r7, #4]
 8016efe:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d05d      	beq.n	8016fca <_evtSending+0xd4>
 8016f0e:	2b02      	cmp	r3, #2
 8016f10:	dc72      	bgt.n	8016ff8 <_evtSending+0x102>
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d002      	beq.n	8016f1c <_evtSending+0x26>
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	d01c      	beq.n	8016f54 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 8016f1a:	e06d      	b.n	8016ff8 <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7fc feeb 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d166      	bne.n	8016ffc <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2104      	movs	r1, #4
 8016f3e:	f7fd f874 	bl	801402a <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2204      	movs	r2, #4
 8016f46:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8016f52:	e053      	b.n	8016ffc <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 8016f66:	b29b      	uxth	r3, r3
 8016f68:	4619      	mov	r1, r3
 8016f6a:	4610      	mov	r0, r2
 8016f6c:	f7fc fe9b 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8016f70:	4605      	mov	r5, r0
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	4619      	mov	r1, r3
 8016f82:	4610      	mov	r0, r2
 8016f84:	f7fc fef0 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	4629      	mov	r1, r5
 8016f90:	4620      	mov	r0, r4
 8016f92:	4798      	blx	r3
 8016f94:	4603      	mov	r3, r0
 8016f96:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 8016f9e:	897b      	ldrh	r3, [r7, #10]
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	4413      	add	r3, r2
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016fb2:	3303      	adds	r3, #3
 8016fb4:	68fa      	ldr	r2, [r7, #12]
 8016fb6:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 8016fba:	4293      	cmp	r3, r2
 8016fbc:	da03      	bge.n	8016fc6 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	e01c      	b.n	8017004 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d115      	bne.n	8017000 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	3304      	adds	r3, #4
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	4619      	mov	r1, r3
 8016fe8:	4610      	mov	r0, r2
 8016fea:	f7fd f864 	bl	80140b6 <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8016ff6:	e003      	b.n	8017000 <_evtSending+0x10a>
		break;
 8016ff8:	bf00      	nop
 8016ffa:	e002      	b.n	8017002 <_evtSending+0x10c>
		break;
 8016ffc:	bf00      	nop
 8016ffe:	e000      	b.n	8017002 <_evtSending+0x10c>
		break;
 8017000:	bf00      	nop
	}
	return FALSE;
 8017002:	2300      	movs	r3, #0
}
 8017004:	4618      	mov	r0, r3
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bdb0      	pop	{r4, r5, r7, pc}

0801700c <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af02      	add	r7, sp, #8
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	460b      	mov	r3, r1
 8017016:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d103      	bne.n	8017026 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 801701e:	4b1e      	ldr	r3, [pc, #120]	; (8017098 <pifGpsUblox_Init+0x8c>)
 8017020:	2201      	movs	r2, #1
 8017022:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017024:	e026      	b.n	8017074 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 8017026:	f44f 7220 	mov.w	r2, #640	; 0x280
 801702a:	2100      	movs	r1, #0
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f00a fd63 	bl	8021af8 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	3310      	adds	r3, #16
 8017036:	887a      	ldrh	r2, [r7, #2]
 8017038:	4611      	mov	r1, r2
 801703a:	4618      	mov	r0, r3
 801703c:	f7fe fc44 	bl	80158c8 <pifGps_Init>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d013      	beq.n	801706e <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801704c:	2240      	movs	r2, #64	; 0x40
 801704e:	2100      	movs	r1, #0
 8017050:	4618      	mov	r0, r3
 8017052:	f7fc fdb7 	bl	8013bc4 <pifRingBuffer_InitHeap>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d00a      	beq.n	8017072 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017062:	490e      	ldr	r1, [pc, #56]	; (801709c <pifGpsUblox_Init+0x90>)
 8017064:	4618      	mov	r0, r3
 8017066:	f7fc fe10 	bl	8013c8a <pifRingBuffer_SetName>
    return TRUE;
 801706a:	2301      	movs	r3, #1
 801706c:	e010      	b.n	8017090 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 801706e:	bf00      	nop
 8017070:	e000      	b.n	8017074 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017072:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 f815 	bl	80170a4 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801707a:	887b      	ldrh	r3, [r7, #2]
 801707c:	4a06      	ldr	r2, [pc, #24]	; (8017098 <pifGpsUblox_Init+0x8c>)
 801707e:	7812      	ldrb	r2, [r2, #0]
 8017080:	9200      	str	r2, [sp, #0]
 8017082:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017086:	4906      	ldr	r1, [pc, #24]	; (80170a0 <pifGpsUblox_Init+0x94>)
 8017088:	2004      	movs	r0, #4
 801708a:	f7fc fa7f 	bl	801358c <pifLog_Printf>
#endif
    return FALSE;
 801708e:	2300      	movs	r3, #0
}
 8017090:	4618      	mov	r0, r3
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	20001365 	.word	0x20001365
 801709c:	0802666c 	.word	0x0802666c
 80170a0:	08026670 	.word	0x08026670

080170a4 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fc fdce 	bl	8013c54 <pifRingBuffer_Clear>
}
 80170b8:	bf00      	nop
 80170ba:	3708      	adds	r7, #8
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	683a      	ldr	r2, [r7, #0]
 80170ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80170d2:	4b05      	ldr	r3, [pc, #20]	; (80170e8 <pifGpsUblox_AttachComm+0x28>)
 80170d4:	4a05      	ldr	r2, [pc, #20]	; (80170ec <pifGpsUblox_AttachComm+0x2c>)
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	6838      	ldr	r0, [r7, #0]
 80170da:	f7fb f841 	bl	8012160 <pifComm_AttachClient>
}
 80170de:	bf00      	nop
 80170e0:	3708      	adds	r7, #8
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	08016ef7 	.word	0x08016ef7
 80170ec:	08016789 	.word	0x08016789

080170f0 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 80170f0:	b590      	push	{r4, r7, lr}
 80170f2:	b091      	sub	sp, #68	; 0x44
 80170f4:	af02      	add	r7, sp, #8
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	4608      	mov	r0, r1
 80170fa:	4611      	mov	r1, r2
 80170fc:	461a      	mov	r2, r3
 80170fe:	4603      	mov	r3, r0
 8017100:	72fb      	strb	r3, [r7, #11]
 8017102:	460b      	mov	r3, r1
 8017104:	813b      	strh	r3, [r7, #8]
 8017106:	4613      	mov	r3, r2
 8017108:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017110:	2b00      	cmp	r3, #0
 8017112:	d004      	beq.n	801711e <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017114:	4b0f      	ldr	r3, [pc, #60]	; (8017154 <pifGpsUblox_SetPubxConfig+0x64>)
 8017116:	2202      	movs	r2, #2
 8017118:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801711a:	2300      	movs	r3, #0
 801711c:	e015      	b.n	801714a <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 801711e:	7af9      	ldrb	r1, [r7, #11]
 8017120:	893c      	ldrh	r4, [r7, #8]
 8017122:	88fb      	ldrh	r3, [r7, #6]
 8017124:	f107 0010 	add.w	r0, r7, #16
 8017128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801712a:	9201      	str	r2, [sp, #4]
 801712c:	9300      	str	r3, [sp, #0]
 801712e:	4623      	mov	r3, r4
 8017130:	460a      	mov	r2, r1
 8017132:	4909      	ldr	r1, [pc, #36]	; (8017158 <pifGpsUblox_SetPubxConfig+0x68>)
 8017134:	f7fa fe52 	bl	8011ddc <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 8017138:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801713c:	f107 0310 	add.w	r3, r7, #16
 8017140:	4619      	mov	r1, r3
 8017142:	68f8      	ldr	r0, [r7, #12]
 8017144:	f7ff fdb6 	bl	8016cb4 <_makeNmeaPacket>
 8017148:	4603      	mov	r3, r0
}
 801714a:	4618      	mov	r0, r3
 801714c:	373c      	adds	r7, #60	; 0x3c
 801714e:	46bd      	mov	sp, r7
 8017150:	bd90      	pop	{r4, r7, pc}
 8017152:	bf00      	nop
 8017154:	20001365 	.word	0x20001365
 8017158:	080266c4 	.word	0x080266c4

0801715c <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b086      	sub	sp, #24
 8017160:	af02      	add	r7, sp, #8
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	4608      	mov	r0, r1
 8017166:	4611      	mov	r1, r2
 8017168:	461a      	mov	r2, r3
 801716a:	4603      	mov	r3, r0
 801716c:	70fb      	strb	r3, [r7, #3]
 801716e:	460b      	mov	r3, r1
 8017170:	70bb      	strb	r3, [r7, #2]
 8017172:	4613      	mov	r3, r2
 8017174:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 8017176:	f246 23b5 	movw	r3, #25269	; 0x62b5
 801717a:	60bb      	str	r3, [r7, #8]
 801717c:	2300      	movs	r3, #0
 801717e:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017186:	2b00      	cmp	r3, #0
 8017188:	d004      	beq.n	8017194 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 801718a:	4b0f      	ldr	r3, [pc, #60]	; (80171c8 <pifGpsUblox_SendUbxMsg+0x6c>)
 801718c:	2202      	movs	r2, #2
 801718e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017190:	2300      	movs	r3, #0
 8017192:	e015      	b.n	80171c0 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 8017194:	78fb      	ldrb	r3, [r7, #3]
 8017196:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 8017198:	78bb      	ldrb	r3, [r7, #2]
 801719a:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 801719c:	883b      	ldrh	r3, [r7, #0]
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 80171a2:	883b      	ldrh	r3, [r7, #0]
 80171a4:	0a1b      	lsrs	r3, r3, #8
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 80171ac:	883a      	ldrh	r2, [r7, #0]
 80171ae:	f107 0108 	add.w	r1, r7, #8
 80171b2:	7f3b      	ldrb	r3, [r7, #28]
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f7ff fe1d 	bl	8016df8 <_makeUbxPacket>
 80171be:	4603      	mov	r3, r0
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3710      	adds	r7, #16
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}
 80171c8:	20001365 	.word	0x20001365

080171cc <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b086      	sub	sp, #24
 80171d0:	af02      	add	r7, sp, #8
 80171d2:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d103      	bne.n	80171e2 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80171da:	4b11      	ldr	r3, [pc, #68]	; (8017220 <_evtTimerRxTimeout+0x54>)
 80171dc:	2201      	movs	r2, #1
 80171de:	701a      	strb	r2, [r3, #0]
		return;
 80171e0:	e01a      	b.n	8017218 <_evtTimerRxTimeout+0x4c>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	891b      	ldrh	r3, [r3, #8]
 80171ea:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	7c1b      	ldrb	r3, [r3, #16]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171f0:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	7f5b      	ldrb	r3, [r3, #29]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171f6:	9301      	str	r3, [sp, #4]
 80171f8:	9200      	str	r2, [sp, #0]
 80171fa:	460b      	mov	r3, r1
 80171fc:	2216      	movs	r2, #22
 80171fe:	4909      	ldr	r1, [pc, #36]	; (8017224 <_evtTimerRxTimeout+0x58>)
 8017200:	2004      	movs	r0, #4
 8017202:	f7fc f9c3 	bl	801358c <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, ASCII_NAK);
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	3328      	adds	r3, #40	; 0x28
 801720a:	2115      	movs	r1, #21
 801720c:	4618      	mov	r0, r3
 801720e:	f7fc fe15 	bl	8013e3c <pifRingBuffer_PutByte>
	p_owner->__rx.state = MRS_IDLE;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	2200      	movs	r2, #0
 8017216:	741a      	strb	r2, [r3, #16]
}
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	20001365 	.word	0x20001365
 8017224:	08026700 	.word	0x08026700

08017228 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017228:	b590      	push	{r4, r7, lr}
 801722a:	b08b      	sub	sp, #44	; 0x2c
 801722c:	af04      	add	r7, sp, #16
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	331c      	adds	r3, #28
 8017236:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017238:	e0b0      	b.n	801739c <_parsingPacket+0x174>
		switch (p_owner->__rx.state) {
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	7c1b      	ldrb	r3, [r3, #16]
 801723e:	2b05      	cmp	r3, #5
 8017240:	f200 80ab 	bhi.w	801739a <_parsingPacket+0x172>
 8017244:	a201      	add	r2, pc, #4	; (adr r2, 801724c <_parsingPacket+0x24>)
 8017246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801724a:	bf00      	nop
 801724c:	08017265 	.word	0x08017265
 8017250:	080172a9 	.word	0x080172a9
 8017254:	080172c1 	.word	0x080172c1
 8017258:	080172d9 	.word	0x080172d9
 801725c:	08017305 	.word	0x08017305
 8017260:	0801732d 	.word	0x0801732d
		case MRS_IDLE:
			if (data == '$') {
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	2b24      	cmp	r3, #36	; 0x24
 8017268:	d109      	bne.n	801727e <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2201      	movs	r2, #1
 801726e:	741a      	strb	r2, [r3, #16]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017274:	21c8      	movs	r1, #200	; 0xc8
 8017276:	4618      	mov	r0, r3
 8017278:	f7fd fd66 	bl	8014d48 <pifTimer_Start>
 801727c:	e08e      	b.n	801739c <_parsingPacket+0x174>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->evt_other_packet) {
 801727e:	4b64      	ldr	r3, [pc, #400]	; (8017410 <_parsingPacket+0x1e8>)
 8017280:	781b      	ldrb	r3, [r3, #0]
 8017282:	2b03      	cmp	r3, #3
 8017284:	d10a      	bne.n	801729c <_parsingPacket+0x74>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d006      	beq.n	801729c <_parsingPacket+0x74>
				(*p_owner->evt_other_packet)(p_owner, data);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	7afa      	ldrb	r2, [r7, #11]
 8017294:	4611      	mov	r1, r2
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	4798      	blx	r3
 801729a:	e004      	b.n	80172a6 <_parsingPacket+0x7e>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 801729c:	2301      	movs	r3, #1
 801729e:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 80172a0:	234c      	movs	r3, #76	; 0x4c
 80172a2:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80172a4:	e089      	b.n	80173ba <_parsingPacket+0x192>
			}
			break;
 80172a6:	e079      	b.n	801739c <_parsingPacket+0x174>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 80172a8:	7afb      	ldrb	r3, [r7, #11]
 80172aa:	2b4d      	cmp	r3, #77	; 0x4d
 80172ac:	d103      	bne.n	80172b6 <_parsingPacket+0x8e>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2202      	movs	r2, #2
 80172b2:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172b4:	e072      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80172b6:	2301      	movs	r3, #1
 80172b8:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172ba:	2359      	movs	r3, #89	; 0x59
 80172bc:	613b      	str	r3, [r7, #16]
				goto fail;
 80172be:	e07c      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 80172c0:	7afb      	ldrb	r3, [r7, #11]
 80172c2:	2b3c      	cmp	r3, #60	; 0x3c
 80172c4:	d103      	bne.n	80172ce <_parsingPacket+0xa6>
				p_owner->__rx.state = MRS_DIRECTION;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2203      	movs	r2, #3
 80172ca:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172cc:	e066      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80172ce:	2301      	movs	r3, #1
 80172d0:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172d2:	2366      	movs	r3, #102	; 0x66
 80172d4:	613b      	str	r3, [r7, #16]
				goto fail;
 80172d6:	e070      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 80172d8:	7afb      	ldrb	r3, [r7, #11]
 80172da:	2b7c      	cmp	r3, #124	; 0x7c
 80172dc:	d80d      	bhi.n	80172fa <_parsingPacket+0xd2>
				p_packet->data_count = data;
 80172de:	7afa      	ldrb	r2, [r7, #11]
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	695b      	ldr	r3, [r3, #20]
 80172e8:	7afa      	ldrb	r2, [r7, #11]
 80172ea:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2201      	movs	r2, #1
 80172f0:	761a      	strb	r2, [r3, #24]
				p_owner->__rx.state = MRS_LENGTH;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2204      	movs	r2, #4
 80172f6:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172f8:	e050      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80172fa:	2300      	movs	r3, #0
 80172fc:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172fe:	2376      	movs	r3, #118	; 0x76
 8017300:	613b      	str	r3, [r7, #16]
				goto fail;
 8017302:	e05a      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_LENGTH:
			p_packet->command = data;
 8017304:	7afa      	ldrb	r2, [r7, #11]
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	695b      	ldr	r3, [r3, #20]
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	7e12      	ldrb	r2, [r2, #24]
 8017312:	4413      	add	r3, r2
 8017314:	7afa      	ldrb	r2, [r7, #11]
 8017316:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	7e1b      	ldrb	r3, [r3, #24]
 801731c:	3301      	adds	r3, #1
 801731e:	b2da      	uxtb	r2, r3
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	761a      	strb	r2, [r3, #24]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2205      	movs	r2, #5
 8017328:	741a      	strb	r2, [r3, #16]
			break;
 801732a:	e037      	b.n	801739c <_parsingPacket+0x174>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	695b      	ldr	r3, [r3, #20]
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	7e12      	ldrb	r2, [r2, #24]
 8017334:	4413      	add	r3, r2
 8017336:	7afa      	ldrb	r2, [r7, #11]
 8017338:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	7e1b      	ldrb	r3, [r3, #24]
 801733e:	3301      	adds	r3, #1
 8017340:	b2da      	uxtb	r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	761a      	strb	r2, [r3, #24]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	785b      	ldrb	r3, [r3, #1]
 801734a:	3302      	adds	r3, #2
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	7e12      	ldrb	r2, [r2, #24]
 8017350:	4293      	cmp	r3, r2
 8017352:	da23      	bge.n	801739c <_parsingPacket+0x174>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	695a      	ldr	r2, [r3, #20]
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	785b      	ldrb	r3, [r3, #1]
 801735c:	b29b      	uxth	r3, r3
 801735e:	3302      	adds	r3, #2
 8017360:	b29b      	uxth	r3, r3
 8017362:	4619      	mov	r1, r3
 8017364:	4610      	mov	r0, r2
 8017366:	f7fa fda2 	bl	8011eae <pifCheckXor>
 801736a:	4603      	mov	r3, r0
 801736c:	461a      	mov	r2, r3
 801736e:	7afb      	ldrb	r3, [r7, #11]
 8017370:	429a      	cmp	r2, r3
 8017372:	d10d      	bne.n	8017390 <_parsingPacket+0x168>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017378:	4618      	mov	r0, r3
 801737a:	f7fd fd13 	bl	8014da4 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	695b      	ldr	r3, [r3, #20]
 8017382:	1c9a      	adds	r2, r3, #2
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2206      	movs	r2, #6
 801738c:	741a      	strb	r2, [r3, #16]
					return;
 801738e:	e03c      	b.n	801740a <_parsingPacket+0x1e2>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 8017390:	2302      	movs	r3, #2
 8017392:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 8017394:	2392      	movs	r3, #146	; 0x92
 8017396:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 8017398:	e00f      	b.n	80173ba <_parsingPacket+0x192>
				}
			}
			break;

		default:
			break;
 801739a:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	68da      	ldr	r2, [r3, #12]
 80173a0:	f107 010b 	add.w	r1, r7, #11
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	4610      	mov	r0, r2
 80173a8:	4798      	blx	r3
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f47f af44 	bne.w	801723a <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 80173b2:	4b17      	ldr	r3, [pc, #92]	; (8017410 <_parsingPacket+0x1e8>)
 80173b4:	2203      	movs	r2, #3
 80173b6:	701a      	strb	r2, [r3, #0]
	return;
 80173b8:	e027      	b.n	801740a <_parsingPacket+0x1e2>

fail:
	if (pkt_err != pre_error) {
 80173ba:	4b15      	ldr	r3, [pc, #84]	; (8017410 <_parsingPacket+0x1e8>)
 80173bc:	781b      	ldrb	r3, [r3, #0]
 80173be:	7dfa      	ldrb	r2, [r7, #23]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d01a      	beq.n	80173fa <_parsingPacket+0x1d2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	891b      	ldrh	r3, [r3, #8]
 80173c8:	461c      	mov	r4, r3
 80173ca:	7dfb      	ldrb	r3, [r7, #23]
 80173cc:	4a11      	ldr	r2, [pc, #68]	; (8017414 <_parsingPacket+0x1ec>)
 80173ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173d2:	7afa      	ldrb	r2, [r7, #11]
 80173d4:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 80173d6:	687a      	ldr	r2, [r7, #4]
 80173d8:	7c12      	ldrb	r2, [r2, #16]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173da:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173e0:	9203      	str	r2, [sp, #12]
 80173e2:	9002      	str	r0, [sp, #8]
 80173e4:	9101      	str	r1, [sp, #4]
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	4623      	mov	r3, r4
 80173ea:	693a      	ldr	r2, [r7, #16]
 80173ec:	490a      	ldr	r1, [pc, #40]	; (8017418 <_parsingPacket+0x1f0>)
 80173ee:	2004      	movs	r0, #4
 80173f0:	f7fc f8cc 	bl	801358c <pifLog_Printf>
#endif
		pre_error = pkt_err;
 80173f4:	4a06      	ldr	r2, [pc, #24]	; (8017410 <_parsingPacket+0x1e8>)
 80173f6:	7dfb      	ldrb	r3, [r7, #23]
 80173f8:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173fe:	4618      	mov	r0, r3
 8017400:	f7fd fcd0 	bl	8014da4 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2200      	movs	r2, #0
 8017408:	741a      	strb	r2, [r3, #16]
}
 801740a:	371c      	adds	r7, #28
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}
 8017410:	2000008c 	.word	0x2000008c
 8017414:	20000080 	.word	0x20000080
 8017418:	0802675c 	.word	0x0802675c

0801741c <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	7c1b      	ldrb	r3, [r3, #16]
 801742e:	2b05      	cmp	r3, #5
 8017430:	d803      	bhi.n	801743a <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 8017432:	6839      	ldr	r1, [r7, #0]
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f7ff fef7 	bl	8017228 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	7c1b      	ldrb	r3, [r3, #16]
 801743e:	2b06      	cmp	r3, #6
 8017440:	d117      	bne.n	8017472 <_evtParsing+0x56>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

    	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner, &p_owner->__rx.packet);
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d006      	beq.n	8017458 <_evtParsing+0x3c>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	68fa      	ldr	r2, [r7, #12]
 8017450:	321c      	adds	r2, #28
 8017452:	4611      	mov	r1, r2
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	4798      	blx	r3
    	if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	68db      	ldr	r3, [r3, #12]
 801745c:	69db      	ldr	r3, [r3, #28]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d004      	beq.n	801746c <_evtParsing+0x50>
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	68db      	ldr	r3, [r3, #12]
 8017466:	69db      	ldr	r3, [r3, #28]
 8017468:	2201      	movs	r2, #1
 801746a:	705a      	strb	r2, [r3, #1]
    	p_owner->__rx.state = MRS_IDLE;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2200      	movs	r2, #0
 8017470:	741a      	strb	r2, [r3, #16]
    }
}
 8017472:	bf00      	nop
 8017474:	3710      	adds	r7, #16
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 801747a:	b5b0      	push	{r4, r5, r7, lr}
 801747c:	b084      	sub	sp, #16
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
 8017482:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	7c1b      	ldrb	r3, [r3, #16]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d001      	beq.n	8017494 <_evtSending+0x1a>
 8017490:	2300      	movs	r3, #0
 8017492:	e073      	b.n	801757c <_evtSending+0x102>

	switch (p_owner->__tx.state) {
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801749a:	2b00      	cmp	r3, #0
 801749c:	d002      	beq.n	80174a4 <_evtSending+0x2a>
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d025      	beq.n	80174ee <_evtSending+0x74>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 80174a2:	e06a      	b.n	801757a <_evtSending+0x100>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	3328      	adds	r3, #40	; 0x28
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7fc fc28 	bl	8013cfe <pifRingBuffer_IsEmpty>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d161      	bne.n	8017578 <_evtSending+0xfe>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	3328      	adds	r3, #40	; 0x28
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7fc fc33 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80174be:	4603      	mov	r3, r0
 80174c0:	461a      	mov	r2, r3
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			p_owner->__tx.pos = 0;
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	2200      	movs	r2, #0
 80174cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			p_owner->__tx.state = MTS_SENDING;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	2201      	movs	r2, #1
 80174d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	69db      	ldr	r3, [r3, #28]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d04a      	beq.n	8017578 <_evtSending+0xfe>
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	69db      	ldr	r3, [r3, #28]
 80174e8:	2201      	movs	r2, #1
 80174ea:	705a      	strb	r2, [r3, #1]
		break;
 80174ec:	e044      	b.n	8017578 <_evtSending+0xfe>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	68dc      	ldr	r4, [r3, #12]
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174fe:	4619      	mov	r1, r3
 8017500:	4610      	mov	r0, r2
 8017502:	f7fc fbd0 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8017506:	4605      	mov	r5, r0
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017514:	4619      	mov	r1, r3
 8017516:	4610      	mov	r0, r2
 8017518:	f7fc fc26 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 801751c:	4603      	mov	r3, r0
 801751e:	461a      	mov	r2, r3
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	4629      	mov	r1, r5
 8017524:	4620      	mov	r0, r4
 8017526:	4798      	blx	r3
 8017528:	4603      	mov	r3, r0
 801752a:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 801752c:	897b      	ldrh	r3, [r7, #10]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d101      	bne.n	8017536 <_evtSending+0xbc>
 8017532:	2300      	movs	r3, #0
 8017534:	e022      	b.n	801757c <_evtSending+0x102>
		p_owner->__tx.pos += length;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801753c:	897b      	ldrh	r3, [r7, #10]
 801753e:	4413      	add	r3, r2
 8017540:	b29a      	uxth	r2, r3
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017554:	429a      	cmp	r2, r3
 8017556:	d30d      	bcc.n	8017574 <_evtSending+0xfa>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017564:	4619      	mov	r1, r3
 8017566:	4610      	mov	r0, r2
 8017568:	f7fc fda5 	bl	80140b6 <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2200      	movs	r2, #0
 8017570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return TRUE;
 8017574:	2301      	movs	r3, #1
 8017576:	e001      	b.n	801757c <_evtSending+0x102>
		break;
 8017578:	bf00      	nop
	}
	return FALSE;
 801757a:	2300      	movs	r3, #0
}
 801757c:	4618      	mov	r0, r3
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bdb0      	pop	{r4, r5, r7, pc}

08017584 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b086      	sub	sp, #24
 8017588:	af02      	add	r7, sp, #8
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	4613      	mov	r3, r2
 8017590:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d103      	bne.n	80175a0 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017598:	4b2c      	ldr	r3, [pc, #176]	; (801764c <pifMsp_Init+0xc8>)
 801759a:	2201      	movs	r2, #1
 801759c:	701a      	strb	r2, [r3, #0]
		goto fail;
 801759e:	e042      	b.n	8017626 <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 80175a0:	224c      	movs	r2, #76	; 0x4c
 80175a2:	2100      	movs	r1, #0
 80175a4:	68f8      	ldr	r0, [r7, #12]
 80175a6:	f00a faa7 	bl	8021af8 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 80175aa:	2180      	movs	r1, #128	; 0x80
 80175ac:	2001      	movs	r0, #1
 80175ae:	f00a fa53 	bl	8021a58 <calloc>
 80175b2:	4603      	mov	r3, r0
 80175b4:	461a      	mov	r2, r3
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	615a      	str	r2, [r3, #20]
    if (!p_owner->__rx.p_packet) {
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	695b      	ldr	r3, [r3, #20]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d103      	bne.n	80175ca <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 80175c2:	4b22      	ldr	r3, [pc, #136]	; (801764c <pifMsp_Init+0xc8>)
 80175c4:	2203      	movs	r2, #3
 80175c6:	701a      	strb	r2, [r3, #0]
        goto fail;
 80175c8:	e02d      	b.n	8017626 <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	3328      	adds	r3, #40	; 0x28
 80175ce:	2280      	movs	r2, #128	; 0x80
 80175d0:	2100      	movs	r1, #0
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7fc faf6 	bl	8013bc4 <pifRingBuffer_InitHeap>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d020      	beq.n	8017620 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 80175de:	2100      	movs	r1, #0
 80175e0:	68b8      	ldr	r0, [r7, #8]
 80175e2:	f7fd fb79 	bl	8014cd8 <pifTimerManager_Add>
 80175e6:	4602      	mov	r2, r0
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (!p_owner->__rx.p_timer) goto fail;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d017      	beq.n	8017624 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	4915      	ldr	r1, [pc, #84]	; (8017650 <pifMsp_Init+0xcc>)
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7fd fc98 	bl	8014f32 <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017602:	88fb      	ldrh	r3, [r7, #6]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d106      	bne.n	8017616 <pifMsp_Init+0x92>
 8017608:	4b12      	ldr	r3, [pc, #72]	; (8017654 <pifMsp_Init+0xd0>)
 801760a:	881b      	ldrh	r3, [r3, #0]
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	b291      	uxth	r1, r2
 8017610:	4a10      	ldr	r2, [pc, #64]	; (8017654 <pifMsp_Init+0xd0>)
 8017612:	8011      	strh	r1, [r2, #0]
 8017614:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	88fa      	ldrh	r2, [r7, #6]
 801761a:	811a      	strh	r2, [r3, #8]
    return TRUE;
 801761c:	2301      	movs	r3, #1
 801761e:	e010      	b.n	8017642 <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017620:	bf00      	nop
 8017622:	e000      	b.n	8017626 <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 8017624:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f000 f818 	bl	801765c <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801762c:	88fb      	ldrh	r3, [r7, #6]
 801762e:	4a07      	ldr	r2, [pc, #28]	; (801764c <pifMsp_Init+0xc8>)
 8017630:	7812      	ldrb	r2, [r2, #0]
 8017632:	9200      	str	r2, [sp, #0]
 8017634:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8017638:	4907      	ldr	r1, [pc, #28]	; (8017658 <pifMsp_Init+0xd4>)
 801763a:	2004      	movs	r0, #4
 801763c:	f7fb ffa6 	bl	801358c <pifLog_Printf>
#endif
    return FALSE;
 8017640:	2300      	movs	r3, #0
}
 8017642:	4618      	mov	r0, r3
 8017644:	3710      	adds	r7, #16
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	20001365 	.word	0x20001365
 8017650:	080171cd 	.word	0x080171cd
 8017654:	2000005c 	.word	0x2000005c
 8017658:	08026780 	.word	0x08026780

0801765c <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	695b      	ldr	r3, [r3, #20]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d007      	beq.n	801767c <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	695b      	ldr	r3, [r3, #20]
 8017670:	4618      	mov	r0, r3
 8017672:	f00a fa2b 	bl	8021acc <free>
		p_owner->__rx.p_packet = NULL;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2200      	movs	r2, #0
 801767a:	615a      	str	r2, [r3, #20]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	3328      	adds	r3, #40	; 0x28
 8017680:	4618      	mov	r0, r3
 8017682:	f7fc fae7 	bl	8013c54 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801768a:	2b00      	cmp	r3, #0
 801768c:	d004      	beq.n	8017698 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017692:	4618      	mov	r0, r3
 8017694:	f7fd fb3c 	bl	8014d10 <pifTimerManager_Remove>
	}
#endif
}
 8017698:	bf00      	nop
 801769a:	3708      	adds	r7, #8
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	60da      	str	r2, [r3, #12]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80176b0:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <pifMsp_AttachComm+0x24>)
 80176b2:	4a05      	ldr	r2, [pc, #20]	; (80176c8 <pifMsp_AttachComm+0x28>)
 80176b4:	6879      	ldr	r1, [r7, #4]
 80176b6:	6838      	ldr	r0, [r7, #0]
 80176b8:	f7fa fd52 	bl	8012160 <pifComm_AttachClient>
}
 80176bc:	bf00      	nop
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	0801747b 	.word	0x0801747b
 80176c8:	0801741d 	.word	0x0801741d

080176cc <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	4618      	mov	r0, r3
 80176da:	f7fa fd57 	bl	801218c <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2200      	movs	r2, #0
 80176e2:	60da      	str	r2, [r3, #12]
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <pifMsp_MakeAnswer>:

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question, uint8_t* p_data, uint16_t data_size)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b08a      	sub	sp, #40	; 0x28
 80176f0:	af04      	add	r7, sp, #16
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	60b9      	str	r1, [r7, #8]
 80176f6:	607a      	str	r2, [r7, #4]
 80176f8:	807b      	strh	r3, [r7, #2]
	uint8_t header[5], check_xor;

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	3328      	adds	r3, #40	; 0x28
 80176fe:	4618      	mov	r0, r3
 8017700:	f7fc fb7f 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = '$';
 8017704:	2324      	movs	r3, #36	; 0x24
 8017706:	743b      	strb	r3, [r7, #16]
	header[1] = 'M';
 8017708:	234d      	movs	r3, #77	; 0x4d
 801770a:	747b      	strb	r3, [r7, #17]
	header[2] = '>';
 801770c:	233e      	movs	r3, #62	; 0x3e
 801770e:	74bb      	strb	r3, [r7, #18]
	header[3] = data_size;
 8017710:	887b      	ldrh	r3, [r7, #2]
 8017712:	b2db      	uxtb	r3, r3
 8017714:	74fb      	strb	r3, [r7, #19]
	header[4] = p_question->command;
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	753b      	strb	r3, [r7, #20]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	3328      	adds	r3, #40	; 0x28
 8017720:	f107 0110 	add.w	r1, r7, #16
 8017724:	2205      	movs	r2, #5
 8017726:	4618      	mov	r0, r3
 8017728:	f7fc fbbc 	bl	8013ea4 <pifRingBuffer_PutData>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d02b      	beq.n	801778a <pifMsp_MakeAnswer+0x9e>
	check_xor = header[3] ^ header[4];
 8017732:	7cfa      	ldrb	r2, [r7, #19]
 8017734:	7d3b      	ldrb	r3, [r7, #20]
 8017736:	4053      	eors	r3, r2
 8017738:	75fb      	strb	r3, [r7, #23]
	if (data_size > 0) {
 801773a:	887b      	ldrh	r3, [r7, #2]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d013      	beq.n	8017768 <pifMsp_MakeAnswer+0x7c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	3328      	adds	r3, #40	; 0x28
 8017744:	887a      	ldrh	r2, [r7, #2]
 8017746:	6879      	ldr	r1, [r7, #4]
 8017748:	4618      	mov	r0, r3
 801774a:	f7fc fbab 	bl	8013ea4 <pifRingBuffer_PutData>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d01c      	beq.n	801778e <pifMsp_MakeAnswer+0xa2>
		check_xor ^= pifCheckXor(p_data, data_size);
 8017754:	887b      	ldrh	r3, [r7, #2]
 8017756:	4619      	mov	r1, r3
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f7fa fba8 	bl	8011eae <pifCheckXor>
 801775e:	4603      	mov	r3, r0
 8017760:	461a      	mov	r2, r3
 8017762:	7dfb      	ldrb	r3, [r7, #23]
 8017764:	4053      	eors	r3, r2
 8017766:	75fb      	strb	r3, [r7, #23]
	}
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	3328      	adds	r3, #40	; 0x28
 801776c:	7dfa      	ldrb	r2, [r7, #23]
 801776e:	4611      	mov	r1, r2
 8017770:	4618      	mov	r0, r3
 8017772:	f7fc fb63 	bl	8013e3c <pifRingBuffer_PutByte>
 8017776:	4603      	mov	r3, r0
 8017778:	2b00      	cmp	r3, #0
 801777a:	d00a      	beq.n	8017792 <pifMsp_MakeAnswer+0xa6>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	69db      	ldr	r3, [r3, #28]
 8017782:	2201      	movs	r2, #1
 8017784:	705a      	strb	r2, [r3, #1]

#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], check_xor);
#endif
	return TRUE;
 8017786:	2301      	movs	r3, #1
 8017788:	e024      	b.n	80177d4 <pifMsp_MakeAnswer+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801778a:	bf00      	nop
 801778c:	e002      	b.n	8017794 <pifMsp_MakeAnswer+0xa8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 801778e:	bf00      	nop
 8017790:	e000      	b.n	8017794 <pifMsp_MakeAnswer+0xa8>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 8017792:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3328      	adds	r3, #40	; 0x28
 8017798:	4618      	mov	r0, r3
 801779a:	f7fc fb40 	bl	8013e1e <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801779e:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d102      	bne.n	80177ac <pifMsp_MakeAnswer+0xc0>
 80177a6:	4b0d      	ldr	r3, [pc, #52]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177a8:	2204      	movs	r2, #4
 80177aa:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u D:%u EC:%d", __LINE__, p_owner->_id, p_question->command, data_size, pif_error);
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	891b      	ldrh	r3, [r3, #8]
 80177b0:	4618      	mov	r0, r3
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	781b      	ldrb	r3, [r3, #0]
 80177b6:	4619      	mov	r1, r3
 80177b8:	887b      	ldrh	r3, [r7, #2]
 80177ba:	4a08      	ldr	r2, [pc, #32]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177bc:	7812      	ldrb	r2, [r2, #0]
 80177be:	9202      	str	r2, [sp, #8]
 80177c0:	9301      	str	r3, [sp, #4]
 80177c2:	9100      	str	r1, [sp, #0]
 80177c4:	4603      	mov	r3, r0
 80177c6:	f240 1247 	movw	r2, #327	; 0x147
 80177ca:	4905      	ldr	r1, [pc, #20]	; (80177e0 <pifMsp_MakeAnswer+0xf4>)
 80177cc:	2004      	movs	r0, #4
 80177ce:	f7fb fedd 	bl	801358c <pifLog_Printf>
#endif
	return FALSE;
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3718      	adds	r7, #24
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	20001365 	.word	0x20001365
 80177e0:	08026794 	.word	0x08026794

080177e4 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af02      	add	r7, sp, #8
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
	uint8_t header[6];

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	3328      	adds	r3, #40	; 0x28
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7fc fb05 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = '$';
 80177f8:	2324      	movs	r3, #36	; 0x24
 80177fa:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 80177fc:	234d      	movs	r3, #77	; 0x4d
 80177fe:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017800:	2321      	movs	r3, #33	; 0x21
 8017802:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017804:	2300      	movs	r3, #0
 8017806:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	733b      	strb	r3, [r7, #12]
	header[5] = header[3] ^ header[4];
 801780e:	7afa      	ldrb	r2, [r7, #11]
 8017810:	7b3b      	ldrb	r3, [r7, #12]
 8017812:	4053      	eors	r3, r2
 8017814:	b2db      	uxtb	r3, r3
 8017816:	737b      	strb	r3, [r7, #13]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	3328      	adds	r3, #40	; 0x28
 801781c:	f107 0108 	add.w	r1, r7, #8
 8017820:	2206      	movs	r2, #6
 8017822:	4618      	mov	r0, r3
 8017824:	f7fc fb3e 	bl	8013ea4 <pifRingBuffer_PutData>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d006      	beq.n	801783c <pifMsp_MakeError+0x58>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	69db      	ldr	r3, [r3, #28]
 8017834:	2201      	movs	r2, #1
 8017836:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], header[5]);
#endif
#endif
	return TRUE;
 8017838:	2301      	movs	r3, #1
 801783a:	e01e      	b.n	801787a <pifMsp_MakeError+0x96>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 801783c:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	3328      	adds	r3, #40	; 0x28
 8017842:	4618      	mov	r0, r3
 8017844:	f7fc faeb 	bl	8013e1e <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017848:	4b0e      	ldr	r3, [pc, #56]	; (8017884 <pifMsp_MakeError+0xa0>)
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d102      	bne.n	8017856 <pifMsp_MakeError+0x72>
 8017850:	4b0c      	ldr	r3, [pc, #48]	; (8017884 <pifMsp_MakeError+0xa0>)
 8017852:	2204      	movs	r2, #4
 8017854:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	891b      	ldrh	r3, [r3, #8]
 801785a:	4619      	mov	r1, r3
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	461a      	mov	r2, r3
 8017862:	4b08      	ldr	r3, [pc, #32]	; (8017884 <pifMsp_MakeError+0xa0>)
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	9301      	str	r3, [sp, #4]
 8017868:	9200      	str	r2, [sp, #0]
 801786a:	460b      	mov	r3, r1
 801786c:	f240 1267 	movw	r2, #359	; 0x167
 8017870:	4905      	ldr	r1, [pc, #20]	; (8017888 <pifMsp_MakeError+0xa4>)
 8017872:	2004      	movs	r0, #4
 8017874:	f7fb fe8a 	bl	801358c <pifLog_Printf>
#endif
	return FALSE;
 8017878:	2300      	movs	r3, #0
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
 8017882:	bf00      	nop
 8017884:	20001365 	.word	0x20001365
 8017888:	080267b0 	.word	0x080267b0

0801788c <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b090      	sub	sp, #64	; 0x40
 8017890:	af02      	add	r7, sp, #8
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	607a      	str	r2, [r7, #4]
 8017896:	603b      	str	r3, [r7, #0]
 8017898:	460b      	mov	r3, r1
 801789a:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d005      	beq.n	80178ae <pifGy86_Init+0x22>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d002      	beq.n	80178ae <pifGy86_Init+0x22>
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d104      	bne.n	80178b8 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80178ae:	4b48      	ldr	r3, [pc, #288]	; (80179d0 <pifGy86_Init+0x144>)
 80178b0:	2201      	movs	r2, #1
 80178b2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80178b4:	2300      	movs	r3, #0
 80178b6:	e1dd      	b.n	8017c74 <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 80178b8:	2260      	movs	r2, #96	; 0x60
 80178ba:	2100      	movs	r1, #0
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	f00a f91b 	bl	8021af8 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	1d18      	adds	r0, r3, #4
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	9300      	str	r3, [sp, #0]
 80178ca:	2368      	movs	r3, #104	; 0x68
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	2100      	movs	r1, #0
 80178d0:	f001 f92c 	bl	8018b2c <pifMpu60x0_Init>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 81a5 	beq.w	8017c26 <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	2200      	movs	r2, #0
 80178e2:	2119      	movs	r1, #25
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7fa ffaf 	bl	8012848 <pifI2cDevice_WriteRegByte>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	f000 819c 	beq.w	8017c2a <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 80178f2:	2300      	movs	r3, #0
 80178f4:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 80178f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <pifGy86_Init+0x7c>
 80178fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178fe:	789b      	ldrb	r3, [r3, #2]
 8017900:	f003 0307 	and.w	r3, r3, #7
 8017904:	b2da      	uxtb	r2, r3
 8017906:	e000      	b.n	801790a <pifGy86_Init+0x7e>
 8017908:	2203      	movs	r2, #3
 801790a:	7d3b      	ldrb	r3, [r7, #20]
 801790c:	f362 0302 	bfi	r3, r2, #0, #3
 8017910:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	68db      	ldr	r3, [r3, #12]
 8017916:	7d3a      	ldrb	r2, [r7, #20]
 8017918:	216b      	movs	r1, #107	; 0x6b
 801791a:	4618      	mov	r0, r3
 801791c:	f7fa ff94 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	f000 8183 	beq.w	8017c2e <pifGy86_Init+0x3a2>

    if (p_config) {
 8017928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801792a:	2b00      	cmp	r3, #0
 801792c:	d043      	beq.n	80179b6 <pifGy86_Init+0x12a>
    	config.byte = 0;
 801792e:	2300      	movs	r3, #0
 8017930:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8017934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017936:	78db      	ldrb	r3, [r3, #3]
 8017938:	f003 0307 	and.w	r3, r3, #7
 801793c:	b2da      	uxtb	r2, r3
 801793e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017942:	f362 0302 	bfi	r3, r2, #0, #3
 8017946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017952:	211a      	movs	r1, #26
 8017954:	4618      	mov	r0, r3
 8017956:	f7fa ff77 	bl	8012848 <pifI2cDevice_WriteRegByte>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	f000 8168 	beq.w	8017c32 <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8017968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801796a:	791b      	ldrb	r3, [r3, #4]
 801796c:	f003 0303 	and.w	r3, r3, #3
 8017970:	b2da      	uxtb	r2, r3
 8017972:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017976:	f362 03c4 	bfi	r3, r2, #3, #2
 801797a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	3304      	adds	r3, #4
 8017982:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8017986:	4618      	mov	r0, r3
 8017988:	f001 f9ec 	bl	8018d64 <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 801798c:	2300      	movs	r3, #0
 801798e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8017992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017994:	785b      	ldrb	r3, [r3, #1]
 8017996:	f003 0303 	and.w	r3, r3, #3
 801799a:	b2da      	uxtb	r2, r3
 801799c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80179a0:	f362 03c4 	bfi	r3, r2, #3, #2
 80179a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	3304      	adds	r3, #4
 80179ac:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80179b0:	4618      	mov	r0, r3
 80179b2:	f001 f9f7 	bl	8018da4 <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 80179b6:	2300      	movs	r3, #0
 80179b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 80179bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d008      	beq.n	80179d4 <pifGy86_Init+0x148>
 80179c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179c4:	795b      	ldrb	r3, [r3, #5]
 80179c6:	f003 030f 	and.w	r3, r3, #15
 80179ca:	b2da      	uxtb	r2, r3
 80179cc:	e003      	b.n	80179d6 <pifGy86_Init+0x14a>
 80179ce:	bf00      	nop
 80179d0:	20001365 	.word	0x20001365
 80179d4:	220d      	movs	r2, #13
 80179d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179da:	f362 0303 	bfi	r3, r2, #0, #4
 80179de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	68db      	ldr	r3, [r3, #12]
 80179e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80179ea:	2124      	movs	r1, #36	; 0x24
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7fa ff2b 	bl	8012848 <pifI2cDevice_WriteRegByte>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	f000 811e 	beq.w	8017c36 <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 80179fa:	2300      	movs	r3, #0
 80179fc:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 80179fe:	7e3b      	ldrb	r3, [r7, #24]
 8017a00:	f043 0310 	orr.w	r3, r3, #16
 8017a04:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8017a06:	7e3b      	ldrb	r3, [r7, #24]
 8017a08:	f043 0302 	orr.w	r3, r3, #2
 8017a0c:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	7e3a      	ldrb	r2, [r7, #24]
 8017a14:	2137      	movs	r1, #55	; 0x37
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fa ff16 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	f000 810b 	beq.w	8017c3a <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8017a24:	2300      	movs	r3, #0
 8017a26:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8017a28:	7f3b      	ldrb	r3, [r7, #28]
 8017a2a:	f043 0301 	orr.w	r3, r3, #1
 8017a2e:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	68db      	ldr	r3, [r3, #12]
 8017a34:	7f3a      	ldrb	r2, [r7, #28]
 8017a36:	2138      	movs	r1, #56	; 0x38
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7fa ff05 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	f000 80fc 	beq.w	8017c3e <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f103 0014 	add.w	r0, r3, #20
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	2100      	movs	r1, #0
 8017a52:	f000 fb4b 	bl	80180ec <pifHmc5883_Init>
 8017a56:	4603      	mov	r3, r0
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	f000 80f2 	beq.w	8017c42 <pifGy86_Init+0x3b6>

    if (p_config) {
 8017a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d039      	beq.n	8017ad8 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8017a64:	7c3b      	ldrb	r3, [r7, #16]
 8017a66:	f36f 0301 	bfc	r3, #0, #2
 8017a6a:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8017a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a6e:	7a5b      	ldrb	r3, [r3, #9]
 8017a70:	f003 0303 	and.w	r3, r3, #3
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	7c3b      	ldrb	r3, [r7, #16]
 8017a78:	f362 1346 	bfi	r3, r2, #5, #2
 8017a7c:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8017a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a80:	799b      	ldrb	r3, [r3, #6]
 8017a82:	f003 0307 	and.w	r3, r3, #7
 8017a86:	b2da      	uxtb	r2, r3
 8017a88:	7c3b      	ldrb	r3, [r7, #16]
 8017a8a:	f362 0384 	bfi	r3, r2, #2, #3
 8017a8e:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a94:	7c3a      	ldrb	r2, [r7, #16]
 8017a96:	2100      	movs	r1, #0
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7fa fed5 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	f000 80d0 	beq.w	8017c46 <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f103 0214 	add.w	r2, r3, #20
 8017aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aae:	79db      	ldrb	r3, [r3, #7]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	4610      	mov	r0, r2
 8017ab4:	f000 fbf0 	bl	8018298 <pifHmc5883_SetGain>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	f000 80c5 	beq.w	8017c4a <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac6:	7a1b      	ldrb	r3, [r3, #8]
 8017ac8:	2202      	movs	r2, #2
 8017aca:	2102      	movs	r1, #2
 8017acc:	f7fa fed2 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	f000 80bb 	beq.w	8017c4e <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	68d8      	ldr	r0, [r3, #12]
 8017adc:	2300      	movs	r3, #0
 8017ade:	f240 1201 	movw	r2, #257	; 0x101
 8017ae2:	2137      	movs	r1, #55	; 0x37
 8017ae4:	f7fa fec6 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f000 80b1 	beq.w	8017c52 <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	2201      	movs	r2, #1
 8017af6:	2138      	movs	r1, #56	; 0x38
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fa fea5 	bl	8012848 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	68d8      	ldr	r0, [r3, #12]
 8017b02:	2301      	movs	r3, #1
 8017b04:	f240 5201 	movw	r2, #1281	; 0x501
 8017b08:	216a      	movs	r1, #106	; 0x6a
 8017b0a:	f7fa feb3 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	f000 80a0 	beq.w	8017c56 <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 8017b16:	2300      	movs	r3, #0
 8017b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8017b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b20:	221e      	movs	r2, #30
 8017b22:	f362 0306 	bfi	r3, r2, #0, #7
 8017b26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8017b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017b3e:	2125      	movs	r1, #37	; 0x25
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7fa fe81 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f000 8086 	beq.w	8017c5a <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	2203      	movs	r2, #3
 8017b54:	2126      	movs	r1, #38	; 0x26
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fa fe76 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d07d      	beq.n	8017c5e <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8017b68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017b6c:	2206      	movs	r2, #6
 8017b6e:	f362 0303 	bfi	r3, r2, #0, #4
 8017b72:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8017b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b7e:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	68db      	ldr	r3, [r3, #12]
 8017b86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017b8a:	2127      	movs	r1, #39	; 0x27
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7fa fe5b 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8017b92:	4603      	mov	r3, r0
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d064      	beq.n	8017c62 <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8017b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d02a      	beq.n	8017bf4 <pifGy86_Init+0x368>
 8017b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba0:	691b      	ldr	r3, [r3, #16]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d026      	beq.n	8017bf4 <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017bac:	2377      	movs	r3, #119	; 0x77
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	f001 fd25 	bl	8019600 <pifMs5611_Init>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d054      	beq.n	8017c66 <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8017bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bc4:	7a9b      	ldrb	r3, [r3, #10]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4610      	mov	r0, r2
 8017bcc:	f001 fdb8 	bl	8019740 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bd8:	8999      	ldrh	r1, [r3, #12]
 8017bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bdc:	691b      	ldr	r3, [r3, #16]
 8017bde:	461a      	mov	r2, r3
 8017be0:	f001 fdea 	bl	80197b8 <pifMs5611_AddTaskForReading>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d03f      	beq.n	8017c6a <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017bf0:	7812      	ldrb	r2, [r2, #0]
 8017bf2:	709a      	strb	r2, [r3, #2]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017bf4:	897b      	ldrh	r3, [r7, #10]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d106      	bne.n	8017c08 <pifGy86_Init+0x37c>
 8017bfa:	4b20      	ldr	r3, [pc, #128]	; (8017c7c <pifGy86_Init+0x3f0>)
 8017bfc:	881b      	ldrh	r3, [r3, #0]
 8017bfe:	1c5a      	adds	r2, r3, #1
 8017c00:	b291      	uxth	r1, r2
 8017c02:	4a1e      	ldr	r2, [pc, #120]	; (8017c7c <pifGy86_Init+0x3f0>)
 8017c04:	8011      	strh	r1, [r2, #0]
 8017c06:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	897a      	ldrh	r2, [r7, #10]
 8017c0c:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	2200      	movs	r2, #0
 8017c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	4a19      	ldr	r2, [pc, #100]	; (8017c80 <pifGy86_Init+0x3f4>)
 8017c1a:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	68fa      	ldr	r2, [r7, #12]
 8017c20:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8017c22:	2301      	movs	r3, #1
 8017c24:	e026      	b.n	8017c74 <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8017c26:	bf00      	nop
 8017c28:	e020      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8017c2a:	bf00      	nop
 8017c2c:	e01e      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017c2e:	bf00      	nop
 8017c30:	e01c      	b.n	8017c6c <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8017c32:	bf00      	nop
 8017c34:	e01a      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8017c36:	bf00      	nop
 8017c38:	e018      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017c3a:	bf00      	nop
 8017c3c:	e016      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017c3e:	bf00      	nop
 8017c40:	e014      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017c42:	bf00      	nop
 8017c44:	e012      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017c46:	bf00      	nop
 8017c48:	e010      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017c4a:	bf00      	nop
 8017c4c:	e00e      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017c4e:	bf00      	nop
 8017c50:	e00c      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017c52:	bf00      	nop
 8017c54:	e00a      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017c56:	bf00      	nop
 8017c58:	e008      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017c5a:	bf00      	nop
 8017c5c:	e006      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017c5e:	bf00      	nop
 8017c60:	e004      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017c62:	bf00      	nop
 8017c64:	e002      	b.n	8017c6c <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017c66:	bf00      	nop
 8017c68:	e000      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017c6a:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8017c6c:	68f8      	ldr	r0, [r7, #12]
 8017c6e:	f000 f809 	bl	8017c84 <pifGy86_Clear>
	return FALSE;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3738      	adds	r7, #56	; 0x38
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	2000005c 	.word	0x2000005c
 8017c80:	08017cb3 	.word	0x08017cb3

08017c84 <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	332c      	adds	r3, #44	; 0x2c
 8017c90:	4618      	mov	r0, r3
 8017c92:	f001 fd31 	bl	80196f8 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	3314      	adds	r3, #20
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f000 fae4 	bl	8018268 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	3304      	adds	r3, #4
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f001 f845 	bl	8018d34 <pifMpu60x0_Clear>
}
 8017caa:	bf00      	nop
 8017cac:	3708      	adds	r7, #8
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}

08017cb2 <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8017cb2:	b580      	push	{r7, lr}
 8017cb4:	b084      	sub	sp, #16
 8017cb6:	af00      	add	r7, sp, #0
 8017cb8:	6078      	str	r0, [r7, #4]
 8017cba:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	68d8      	ldr	r0, [r3, #12]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017cc6:	3349      	adds	r3, #73	; 0x49
 8017cc8:	b2d9      	uxtb	r1, r3
 8017cca:	f107 0208 	add.w	r2, r7, #8
 8017cce:	2306      	movs	r3, #6
 8017cd0:	f7fa fcc4 	bl	801265c <pifI2cDevice_ReadRegBytes>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d101      	bne.n	8017cde <pifGy86_ReadMag+0x2c>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e04d      	b.n	8017d7a <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8017cde:	7a3b      	ldrb	r3, [r7, #8]
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	021b      	lsls	r3, r3, #8
 8017ce4:	b29a      	uxth	r2, r3
 8017ce6:	7a7b      	ldrb	r3, [r7, #9]
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	4413      	add	r3, r2
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	b21b      	sxth	r3, r3
 8017cf0:	ee07 3a90 	vmov	s15, r3
 8017cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8017cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d06:	ee17 3a90 	vmov	r3, s15
 8017d0a:	b21a      	sxth	r2, r3
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8017d10:	7abb      	ldrb	r3, [r7, #10]
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	021b      	lsls	r3, r3, #8
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	7afb      	ldrb	r3, [r7, #11]
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	4413      	add	r3, r2
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	b21b      	sxth	r3, r3
 8017d22:	ee07 3a90 	vmov	s15, r3
 8017d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8017d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	3304      	adds	r3, #4
 8017d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d3c:	ee17 2a90 	vmov	r2, s15
 8017d40:	b212      	sxth	r2, r2
 8017d42:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8017d44:	7b3b      	ldrb	r3, [r7, #12]
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	021b      	lsls	r3, r3, #8
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	7b7b      	ldrb	r3, [r7, #13]
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	4413      	add	r3, r2
 8017d52:	b29b      	uxth	r3, r3
 8017d54:	b21b      	sxth	r3, r3
 8017d56:	ee07 3a90 	vmov	s15, r3
 8017d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8017d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	3302      	adds	r3, #2
 8017d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d70:	ee17 2a90 	vmov	r2, s15
 8017d74:	b212      	sxth	r2, r2
 8017d76:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8017d78:	2301      	movs	r3, #1
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3710      	adds	r7, #16
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}

08017d82 <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8017d82:	b580      	push	{r7, lr}
 8017d84:	b084      	sub	sp, #16
 8017d86:	af00      	add	r7, sp, #0
 8017d88:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	60fb      	str	r3, [r7, #12]

	if (p_owner->__timer) p_owner->__timer--; else p_owner->__timer = 0;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d009      	beq.n	8017dae <_doTask+0x2c>
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	3b01      	subs	r3, #1
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	b21a      	sxth	r2, r3
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	831a      	strh	r2, [r3, #24]
 8017dac:	e002      	b.n	8017db4 <_doTask+0x32>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	2200      	movs	r2, #0
 8017db2:	831a      	strh	r2, [r3, #24]
	if (p_owner->__period > -1 && !p_owner->__timer) {
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	db2c      	blt.n	8017e18 <_doTask+0x96>
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d127      	bne.n	8017e18 <_doTask+0x96>
		if (p_owner->__state == HSS_HIGH) {
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	7d1b      	ldrb	r3, [r3, #20]
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	d11b      	bne.n	8017e08 <_doTask+0x86>
			if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__period * 1000L / p_owner->_transform_const);
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	685b      	ldr	r3, [r3, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d017      	beq.n	8017e08 <_doTask+0x86>
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	68fa      	ldr	r2, [r7, #12]
 8017dde:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8017de2:	4611      	mov	r1, r2
 8017de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017de8:	fb02 f201 	mul.w	r2, r2, r1
 8017dec:	ee07 2a90 	vmov	s15, r2
 8017df0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017df4:	68fa      	ldr	r2, [r7, #12]
 8017df6:	ed92 7a04 	vldr	s14, [r2, #16]
 8017dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e02:	ee17 0a90 	vmov	r0, s15
 8017e06:	4798      	blx	r3
	    }
		pifHcSr04_Trigger(p_owner);
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	f000 f867 	bl	8017edc <pifHcSr04_Trigger>
		p_owner->__timer = p_owner->__period;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	831a      	strh	r2, [r3, #24]
	}

	if (p_owner->__state == HSS_LOW) {
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	7d1b      	ldrb	r3, [r3, #20]
 8017e1c:	2b03      	cmp	r3, #3
 8017e1e:	d10c      	bne.n	8017e3a <_doTask+0xb8>
		if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__distance);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	685b      	ldr	r3, [r3, #4]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d005      	beq.n	8017e34 <_doTask+0xb2>
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	685b      	ldr	r3, [r3, #4]
 8017e2c:	68fa      	ldr	r2, [r7, #12]
 8017e2e:	6a12      	ldr	r2, [r2, #32]
 8017e30:	4610      	mov	r0, r2
 8017e32:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2200      	movs	r2, #0
 8017e38:	751a      	strb	r2, [r3, #20]
    }
	return 0;
 8017e3a:	2300      	movs	r3, #0
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3710      	adds	r7, #16
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}

08017e44 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b084      	sub	sp, #16
 8017e48:	af02      	add	r7, sp, #8
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	460b      	mov	r3, r1
 8017e4e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d104      	bne.n	8017e60 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017e56:	4b1d      	ldr	r3, [pc, #116]	; (8017ecc <pifHcSr04_Init+0x88>)
 8017e58:	2201      	movs	r2, #1
 8017e5a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	e031      	b.n	8017ec4 <pifHcSr04_Init+0x80>
	}

	if (!pif_act_timer1us) {
 8017e60:	4b1b      	ldr	r3, [pc, #108]	; (8017ed0 <pifHcSr04_Init+0x8c>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d104      	bne.n	8017e72 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8017e68:	4b18      	ldr	r3, [pc, #96]	; (8017ecc <pifHcSr04_Init+0x88>)
 8017e6a:	2209      	movs	r2, #9
 8017e6c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e028      	b.n	8017ec4 <pifHcSr04_Init+0x80>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8017e72:	2224      	movs	r2, #36	; 0x24
 8017e74:	2100      	movs	r1, #0
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f009 fe3e 	bl	8021af8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, p_owner, TRUE);
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	9300      	str	r3, [sp, #0]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	4a14      	ldr	r2, [pc, #80]	; (8017ed4 <pifHcSr04_Init+0x90>)
 8017e84:	2101      	movs	r1, #1
 8017e86:	2002      	movs	r0, #2
 8017e88:	f7fc fcda 	bl	8014840 <pifTaskManager_Add>
 8017e8c:	4602      	mov	r2, r0
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d101      	bne.n	8017e9e <pifHcSr04_Init+0x5a>
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	e012      	b.n	8017ec4 <pifHcSr04_Init+0x80>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017e9e:	887b      	ldrh	r3, [r7, #2]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d106      	bne.n	8017eb2 <pifHcSr04_Init+0x6e>
 8017ea4:	4b0c      	ldr	r3, [pc, #48]	; (8017ed8 <pifHcSr04_Init+0x94>)
 8017ea6:	881b      	ldrh	r3, [r3, #0]
 8017ea8:	1c5a      	adds	r2, r3, #1
 8017eaa:	b291      	uxth	r1, r2
 8017eac:	4a0a      	ldr	r2, [pc, #40]	; (8017ed8 <pifHcSr04_Init+0x94>)
 8017eae:	8011      	strh	r1, [r2, #0]
 8017eb0:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	887a      	ldrh	r2, [r7, #2]
 8017eb6:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8017eb8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f000 f847 	bl	8017f50 <pifHcSr04_SetTemperature>

    return TRUE;
 8017ec2:	2301      	movs	r3, #1
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}
 8017ecc:	20001365 	.word	0x20001365
 8017ed0:	2000137c 	.word	0x2000137c
 8017ed4:	08017d83 	.word	0x08017d83
 8017ed8:	2000005c 	.word	0x2000005c

08017edc <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	2001      	movs	r0, #1
 8017eea:	4798      	blx	r3
	pif_Delay1us(10);
 8017eec:	200a      	movs	r0, #10
 8017eee:	f7f9 fb0f 	bl	8011510 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	2000      	movs	r0, #0
 8017ef8:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2201      	movs	r2, #1
 8017efe:	751a      	strb	r2, [r3, #20]
}
 8017f00:	bf00      	nop
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b083      	sub	sp, #12
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	460b      	mov	r3, r1
 8017f12:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d002      	beq.n	8017f20 <pifHcSr04_StartTrigger+0x18>
 8017f1a:	887b      	ldrh	r3, [r7, #2]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d104      	bne.n	8017f2a <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 8017f20:	4b09      	ldr	r3, [pc, #36]	; (8017f48 <pifHcSr04_StartTrigger+0x40>)
 8017f22:	2201      	movs	r2, #1
 8017f24:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017f26:	2300      	movs	r3, #0
 8017f28:	e007      	b.n	8017f3a <pifHcSr04_StartTrigger+0x32>
	}

	p_owner->__period = period;
 8017f2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	82da      	strh	r2, [r3, #22]
	p_owner->__timer = 0;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2200      	movs	r2, #0
 8017f36:	831a      	strh	r2, [r3, #24]
	return TRUE;
 8017f38:	2301      	movs	r3, #1
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	370c      	adds	r7, #12
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	20001365 	.word	0x20001365
 8017f4c:	00000000 	.word	0x00000000

08017f50 <pifHcSr04_SetTemperature>:
{
	p_owner->__period = -1;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0 / ((331.6 + 0.6 * temperature) / 10000.0);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8017f5c:	6838      	ldr	r0, [r7, #0]
 8017f5e:	f7e8 fab1 	bl	80004c4 <__aeabi_f2d>
 8017f62:	a317      	add	r3, pc, #92	; (adr r3, 8017fc0 <pifHcSr04_SetTemperature+0x70>)
 8017f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f68:	f7e8 fb04 	bl	8000574 <__aeabi_dmul>
 8017f6c:	4602      	mov	r2, r0
 8017f6e:	460b      	mov	r3, r1
 8017f70:	4610      	mov	r0, r2
 8017f72:	4619      	mov	r1, r3
 8017f74:	a314      	add	r3, pc, #80	; (adr r3, 8017fc8 <pifHcSr04_SetTemperature+0x78>)
 8017f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f7a:	f7e8 f945 	bl	8000208 <__adddf3>
 8017f7e:	4602      	mov	r2, r0
 8017f80:	460b      	mov	r3, r1
 8017f82:	4610      	mov	r0, r2
 8017f84:	4619      	mov	r1, r3
 8017f86:	a312      	add	r3, pc, #72	; (adr r3, 8017fd0 <pifHcSr04_SetTemperature+0x80>)
 8017f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8c:	f7e8 fc1c 	bl	80007c8 <__aeabi_ddiv>
 8017f90:	4602      	mov	r2, r0
 8017f92:	460b      	mov	r3, r1
 8017f94:	f04f 0000 	mov.w	r0, #0
 8017f98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017f9c:	f7e8 fc14 	bl	80007c8 <__aeabi_ddiv>
 8017fa0:	4602      	mov	r2, r0
 8017fa2:	460b      	mov	r3, r1
 8017fa4:	4610      	mov	r0, r2
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	f7e8 fdc6 	bl	8000b38 <__aeabi_d2f>
 8017fac:	4602      	mov	r2, r0
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	611a      	str	r2, [r3, #16]
}
 8017fb2:	bf00      	nop
 8017fb4:	3708      	adds	r7, #8
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	f3af 8000 	nop.w
 8017fc0:	33333333 	.word	0x33333333
 8017fc4:	3fe33333 	.word	0x3fe33333
 8017fc8:	9999999a 	.word	0x9999999a
 8017fcc:	4074b999 	.word	0x4074b999
 8017fd0:	00000000 	.word	0x00000000
 8017fd4:	40c38800 	.word	0x40c38800

08017fd8 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	460b      	mov	r3, r1
 8017fe2:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	7d1b      	ldrb	r3, [r3, #20]
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d002      	beq.n	8017ff2 <pifHcSr04_sigReceiveEcho+0x1a>
 8017fec:	2b02      	cmp	r3, #2
 8017fee:	d00d      	beq.n	801800c <pifHcSr04_sigReceiveEcho+0x34>
			p_owner->__state = HSS_LOW;
		}
		break;

	default:
		break;
 8017ff0:	e02c      	b.n	801804c <pifHcSr04_sigReceiveEcho+0x74>
		if (state) {
 8017ff2:	78fb      	ldrb	r3, [r7, #3]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d026      	beq.n	8018046 <pifHcSr04_sigReceiveEcho+0x6e>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8017ff8:	4b16      	ldr	r3, [pc, #88]	; (8018054 <pifHcSr04_sigReceiveEcho+0x7c>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4798      	blx	r3
 8017ffe:	4602      	mov	r2, r0
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_HIGH;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2202      	movs	r2, #2
 8018008:	751a      	strb	r2, [r3, #20]
		break;
 801800a:	e01c      	b.n	8018046 <pifHcSr04_sigReceiveEcho+0x6e>
		if (!state) {
 801800c:	78fb      	ldrb	r3, [r7, #3]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d11b      	bne.n	801804a <pifHcSr04_sigReceiveEcho+0x72>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 8018012:	4b10      	ldr	r3, [pc, #64]	; (8018054 <pifHcSr04_sigReceiveEcho+0x7c>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4798      	blx	r3
 8018018:	4602      	mov	r2, r0
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	69db      	ldr	r3, [r3, #28]
 801801e:	1ad3      	subs	r3, r2, r3
 8018020:	ee07 3a90 	vmov	s15, r3
 8018024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	ed93 7a04 	vldr	s14, [r3, #16]
 801802e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018036:	ee17 2a90 	vmov	r2, s15
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	621a      	str	r2, [r3, #32]
			p_owner->__state = HSS_LOW;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2203      	movs	r2, #3
 8018042:	751a      	strb	r2, [r3, #20]
		break;
 8018044:	e001      	b.n	801804a <pifHcSr04_sigReceiveEcho+0x72>
		break;
 8018046:	bf00      	nop
 8018048:	e000      	b.n	801804c <pifHcSr04_sigReceiveEcho+0x74>
		break;
 801804a:	bf00      	nop
	}
}
 801804c:	bf00      	nop
 801804e:	3708      	adds	r7, #8
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}
 8018054:	2000137c 	.word	0x2000137c

08018058 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8018058:	b480      	push	{r7}
 801805a:	b083      	sub	sp, #12
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	460b      	mov	r3, r1
 8018062:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8018064:	78fb      	ldrb	r3, [r7, #3]
 8018066:	2b07      	cmp	r3, #7
 8018068:	d839      	bhi.n	80180de <_changeGain+0x86>
 801806a:	a201      	add	r2, pc, #4	; (adr r2, 8018070 <_changeGain+0x18>)
 801806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018070:	08018091 	.word	0x08018091
 8018074:	0801809b 	.word	0x0801809b
 8018078:	080180a5 	.word	0x080180a5
 801807c:	080180af 	.word	0x080180af
 8018080:	080180b9 	.word	0x080180b9
 8018084:	080180c3 	.word	0x080180c3
 8018088:	080180cd 	.word	0x080180cd
 801808c:	080180d7 	.word	0x080180d7
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f240 525a 	movw	r2, #1370	; 0x55a
 8018096:	825a      	strh	r2, [r3, #18]
 8018098:	e021      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	f240 4242 	movw	r2, #1090	; 0x442
 80180a0:	825a      	strh	r2, [r3, #18]
 80180a2:	e01c      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f44f 724d 	mov.w	r2, #820	; 0x334
 80180aa:	825a      	strh	r2, [r3, #18]
 80180ac:	e017      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80180b4:	825a      	strh	r2, [r3, #18]
 80180b6:	e012      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80180be:	825a      	strh	r2, [r3, #18]
 80180c0:	e00d      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80180c8:	825a      	strh	r2, [r3, #18]
 80180ca:	e008      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80180d2:	825a      	strh	r2, [r3, #18]
 80180d4:	e003      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	22e6      	movs	r2, #230	; 0xe6
 80180da:	825a      	strh	r2, [r3, #18]
 80180dc:	bf00      	nop
	}
}
 80180de:	bf00      	nop
 80180e0:	370c      	adds	r7, #12
 80180e2:	46bd      	mov	sp, r7
 80180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop

080180ec <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 80180ec:	b590      	push	{r4, r7, lr}
 80180ee:	b08d      	sub	sp, #52	; 0x34
 80180f0:	af02      	add	r7, sp, #8
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	607a      	str	r2, [r7, #4]
 80180f6:	603b      	str	r3, [r7, #0]
 80180f8:	460b      	mov	r3, r1
 80180fa:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 80180fc:	4b54      	ldr	r3, [pc, #336]	; (8018250 <pifHmc5883_Init+0x164>)
 80180fe:	f107 0418 	add.w	r4, r7, #24
 8018102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d005      	beq.n	801811a <pifHmc5883_Init+0x2e>
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d002      	beq.n	801811a <pifHmc5883_Init+0x2e>
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d104      	bne.n	8018124 <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 801811a:	4b4e      	ldr	r3, [pc, #312]	; (8018254 <pifHmc5883_Init+0x168>)
 801811c:	2201      	movs	r2, #1
 801811e:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018120:	2300      	movs	r3, #0
 8018122:	e091      	b.n	8018248 <pifHmc5883_Init+0x15c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 8018124:	2218      	movs	r2, #24
 8018126:	2100      	movs	r1, #0
 8018128:	68f8      	ldr	r0, [r7, #12]
 801812a:	f009 fce5 	bl	8021af8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7fa f978 	bl	8012424 <pifI2cPort_AddDevice>
 8018134:	4602      	mov	r2, r0
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	691b      	ldr	r3, [r3, #16]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d101      	bne.n	8018146 <pifHmc5883_Init+0x5a>
 8018142:	2300      	movs	r3, #0
 8018144:	e080      	b.n	8018248 <pifHmc5883_Init+0x15c>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	691b      	ldr	r3, [r3, #16]
 801814a:	221e      	movs	r2, #30
 801814c:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	6918      	ldr	r0, [r3, #16]
 8018152:	f107 0214 	add.w	r2, r7, #20
 8018156:	2303      	movs	r3, #3
 8018158:	210a      	movs	r1, #10
 801815a:	f7fa fa7f 	bl	801265c <pifI2cDevice_ReadRegBytes>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d06a      	beq.n	801823a <pifHmc5883_Init+0x14e>
	if (data[0] != 'H') {
 8018164:	7d3b      	ldrb	r3, [r7, #20]
 8018166:	2b48      	cmp	r3, #72	; 0x48
 8018168:	d003      	beq.n	8018172 <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 801816a:	4b3a      	ldr	r3, [pc, #232]	; (8018254 <pifHmc5883_Init+0x168>)
 801816c:	2211      	movs	r2, #17
 801816e:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018170:	e066      	b.n	8018240 <pifHmc5883_Init+0x154>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 8018172:	7d3b      	ldrb	r3, [r7, #20]
 8018174:	2b1f      	cmp	r3, #31
 8018176:	d905      	bls.n	8018184 <pifHmc5883_Init+0x98>
 8018178:	7d7b      	ldrb	r3, [r7, #21]
 801817a:	2b1f      	cmp	r3, #31
 801817c:	d902      	bls.n	8018184 <pifHmc5883_Init+0x98>
 801817e:	7dbb      	ldrb	r3, [r7, #22]
 8018180:	2b1f      	cmp	r3, #31
 8018182:	d80e      	bhi.n	80181a2 <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 8018184:	7d3b      	ldrb	r3, [r7, #20]
 8018186:	4618      	mov	r0, r3
 8018188:	7d7b      	ldrb	r3, [r7, #21]
 801818a:	7dba      	ldrb	r2, [r7, #22]
 801818c:	4611      	mov	r1, r2
 801818e:	f107 0218 	add.w	r2, r7, #24
 8018192:	9101      	str	r1, [sp, #4]
 8018194:	9300      	str	r3, [sp, #0]
 8018196:	4603      	mov	r3, r0
 8018198:	492f      	ldr	r1, [pc, #188]	; (8018258 <pifHmc5883_Init+0x16c>)
 801819a:	2002      	movs	r0, #2
 801819c:	f7fb f9f6 	bl	801358c <pifLog_Printf>
 80181a0:	e00d      	b.n	80181be <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 80181a2:	7d3b      	ldrb	r3, [r7, #20]
 80181a4:	4618      	mov	r0, r3
 80181a6:	7d7b      	ldrb	r3, [r7, #21]
 80181a8:	7dba      	ldrb	r2, [r7, #22]
 80181aa:	4611      	mov	r1, r2
 80181ac:	f107 0218 	add.w	r2, r7, #24
 80181b0:	9101      	str	r1, [sp, #4]
 80181b2:	9300      	str	r3, [sp, #0]
 80181b4:	4603      	mov	r3, r0
 80181b6:	4929      	ldr	r1, [pc, #164]	; (801825c <pifHmc5883_Init+0x170>)
 80181b8:	2002      	movs	r0, #2
 80181ba:	f7fb f9e7 	bl	801358c <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	6918      	ldr	r0, [r3, #16]
 80181c2:	f107 0314 	add.w	r3, r7, #20
 80181c6:	f240 5203 	movw	r2, #1283	; 0x503
 80181ca:	2101      	movs	r1, #1
 80181cc:	f7fa fa5b 	bl	8012686 <pifI2cDevice_ReadRegBit8>
 80181d0:	4603      	mov	r3, r0
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d033      	beq.n	801823e <pifHmc5883_Init+0x152>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 80181d6:	f107 0314 	add.w	r3, r7, #20
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	4619      	mov	r1, r3
 80181de:	6838      	ldr	r0, [r7, #0]
 80181e0:	f7ff ff3a 	bl	8018058 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80181e4:	897b      	ldrh	r3, [r7, #10]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d106      	bne.n	80181f8 <pifHmc5883_Init+0x10c>
 80181ea:	4b1d      	ldr	r3, [pc, #116]	; (8018260 <pifHmc5883_Init+0x174>)
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	1c5a      	adds	r2, r3, #1
 80181f0:	b291      	uxth	r1, r2
 80181f2:	4a1b      	ldr	r2, [pc, #108]	; (8018260 <pifHmc5883_Init+0x174>)
 80181f4:	8011      	strh	r1, [r2, #0]
 80181f6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	897a      	ldrh	r2, [r7, #10]
 80181fc:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018204:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801820c:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018214:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	683a      	ldr	r2, [r7, #0]
 801821a:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	f043 0304 	orr.w	r3, r3, #4
 8018224:	b2da      	uxtb	r2, r3
 8018226:	683b      	ldr	r3, [r7, #0]
 8018228:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	4a0d      	ldr	r2, [pc, #52]	; (8018264 <pifHmc5883_Init+0x178>)
 801822e:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	68fa      	ldr	r2, [r7, #12]
 8018234:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8018236:	2301      	movs	r3, #1
 8018238:	e006      	b.n	8018248 <pifHmc5883_Init+0x15c>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801823a:	bf00      	nop
 801823c:	e000      	b.n	8018240 <pifHmc5883_Init+0x154>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 801823e:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8018240:	68f8      	ldr	r0, [r7, #12]
 8018242:	f000 f811 	bl	8018268 <pifHmc5883_Clear>
	return FALSE;
 8018246:	2300      	movs	r3, #0
}
 8018248:	4618      	mov	r0, r3
 801824a:	372c      	adds	r7, #44	; 0x2c
 801824c:	46bd      	mov	sp, r7
 801824e:	bd90      	pop	{r4, r7, pc}
 8018250:	080267e8 	.word	0x080267e8
 8018254:	20001365 	.word	0x20001365
 8018258:	080267c8 	.word	0x080267c8
 801825c:	080267dc 	.word	0x080267dc
 8018260:	2000005c 	.word	0x2000005c
 8018264:	080182d7 	.word	0x080182d7

08018268 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	691b      	ldr	r3, [r3, #16]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d00b      	beq.n	8018290 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	691b      	ldr	r3, [r3, #16]
 801827c:	685a      	ldr	r2, [r3, #4]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	691b      	ldr	r3, [r3, #16]
 8018282:	4619      	mov	r1, r3
 8018284:	4610      	mov	r0, r2
 8018286:	f7fa f8f1 	bl	801246c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2200      	movs	r2, #0
 801828e:	611a      	str	r2, [r3, #16]
	}
}
 8018290:	bf00      	nop
 8018292:	3708      	adds	r7, #8
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	460b      	mov	r3, r1
 80182a2:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	6918      	ldr	r0, [r3, #16]
 80182a8:	78fb      	ldrb	r3, [r7, #3]
 80182aa:	f240 5203 	movw	r2, #1283	; 0x503
 80182ae:	2101      	movs	r1, #1
 80182b0:	f7fa fae0 	bl	8012874 <pifI2cDevice_WriteRegBit8>
 80182b4:	4603      	mov	r3, r0
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d101      	bne.n	80182be <pifHmc5883_SetGain+0x26>
 80182ba:	2300      	movs	r3, #0
 80182bc:	e007      	b.n	80182ce <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	695b      	ldr	r3, [r3, #20]
 80182c2:	78fa      	ldrb	r2, [r7, #3]
 80182c4:	4611      	mov	r1, r2
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7ff fec6 	bl	8018058 <_changeGain>
    return TRUE;
 80182cc:	2301      	movs	r3, #1
}
 80182ce:	4618      	mov	r0, r3
 80182d0:	3708      	adds	r7, #8
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd80      	pop	{r7, pc}

080182d6 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 80182d6:	b580      	push	{r7, lr}
 80182d8:	b084      	sub	sp, #16
 80182da:	af00      	add	r7, sp, #0
 80182dc:	6078      	str	r0, [r7, #4]
 80182de:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	691b      	ldr	r3, [r3, #16]
 80182e4:	f107 0208 	add.w	r2, r7, #8
 80182e8:	2109      	movs	r1, #9
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7fa f97e 	bl	80125ec <pifI2cDevice_ReadRegByte>
 80182f0:	4603      	mov	r3, r0
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d101      	bne.n	80182fa <pifHmc5883_ReadMag+0x24>
 80182f6:	2300      	movs	r3, #0
 80182f8:	e061      	b.n	80183be <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 80182fa:	7a3b      	ldrb	r3, [r7, #8]
 80182fc:	f003 0301 	and.w	r3, r3, #1
 8018300:	2b00      	cmp	r3, #0
 8018302:	d101      	bne.n	8018308 <pifHmc5883_ReadMag+0x32>
 8018304:	2300      	movs	r3, #0
 8018306:	e05a      	b.n	80183be <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6918      	ldr	r0, [r3, #16]
 801830c:	f107 0208 	add.w	r2, r7, #8
 8018310:	2306      	movs	r3, #6
 8018312:	2103      	movs	r1, #3
 8018314:	f7fa f9a2 	bl	801265c <pifI2cDevice_ReadRegBytes>
 8018318:	4603      	mov	r3, r0
 801831a:	2b00      	cmp	r3, #0
 801831c:	d101      	bne.n	8018322 <pifHmc5883_ReadMag+0x4c>
 801831e:	2300      	movs	r3, #0
 8018320:	e04d      	b.n	80183be <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 8018322:	7a3b      	ldrb	r3, [r7, #8]
 8018324:	b29b      	uxth	r3, r3
 8018326:	021b      	lsls	r3, r3, #8
 8018328:	b29a      	uxth	r2, r3
 801832a:	7a7b      	ldrb	r3, [r7, #9]
 801832c:	b29b      	uxth	r3, r3
 801832e:	4413      	add	r3, r2
 8018330:	b29b      	uxth	r3, r3
 8018332:	b21b      	sxth	r3, r3
 8018334:	ee07 3a90 	vmov	s15, r3
 8018338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	edd3 7a00 	vldr	s15, [r3]
 8018342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801834a:	ee17 3a90 	vmov	r3, s15
 801834e:	b21a      	sxth	r2, r3
 8018350:	683b      	ldr	r3, [r7, #0]
 8018352:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 8018354:	7abb      	ldrb	r3, [r7, #10]
 8018356:	b29b      	uxth	r3, r3
 8018358:	021b      	lsls	r3, r3, #8
 801835a:	b29a      	uxth	r2, r3
 801835c:	7afb      	ldrb	r3, [r7, #11]
 801835e:	b29b      	uxth	r3, r3
 8018360:	4413      	add	r3, r2
 8018362:	b29b      	uxth	r3, r3
 8018364:	b21b      	sxth	r3, r3
 8018366:	ee07 3a90 	vmov	s15, r3
 801836a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	edd3 7a02 	vldr	s15, [r3, #8]
 8018374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	3304      	adds	r3, #4
 801837c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018380:	ee17 2a90 	vmov	r2, s15
 8018384:	b212      	sxth	r2, r2
 8018386:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 8018388:	7b3b      	ldrb	r3, [r7, #12]
 801838a:	b29b      	uxth	r3, r3
 801838c:	021b      	lsls	r3, r3, #8
 801838e:	b29a      	uxth	r2, r3
 8018390:	7b7b      	ldrb	r3, [r7, #13]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4413      	add	r3, r2
 8018396:	b29b      	uxth	r3, r3
 8018398:	b21b      	sxth	r3, r3
 801839a:	ee07 3a90 	vmov	s15, r3
 801839e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80183a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	3302      	adds	r3, #2
 80183b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183b4:	ee17 2a90 	vmov	r2, s15
 80183b8:	b212      	sxth	r2, r2
 80183ba:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80183bc:	2301      	movs	r3, #1
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3710      	adds	r7, #16
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}

080183c6 <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, int16_t *vec)
{
 80183c6:	b580      	push	{r7, lr}
 80183c8:	b084      	sub	sp, #16
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	6078      	str	r0, [r7, #4]
 80183ce:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 80183d0:	683b      	ldr	r3, [r7, #0]
 80183d2:	881b      	ldrh	r3, [r3, #0]
 80183d4:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	885b      	ldrh	r3, [r3, #2]
 80183da:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	889b      	ldrh	r3, [r3, #4]
 80183e0:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80183e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80183ec:	ee07 3a90 	vmov	s15, r3
 80183f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80183fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018402:	ee07 3a90 	vmov	s15, r3
 8018406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801840a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801840e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8018418:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801841c:	ee07 3a90 	vmov	s15, r3
 8018420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801842c:	eeb0 0a67 	vmov.f32	s0, s15
 8018430:	f009 fe42 	bl	80220b8 <lrintf>
 8018434:	4603      	mov	r3, r0
 8018436:	b21a      	sxth	r2, r3
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018446:	ee07 3a90 	vmov	s15, r3
 801844a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801844e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8018458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801845c:	ee07 3a90 	vmov	s15, r3
 8018460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018468:	ee37 7a27 	vadd.f32	s14, s14, s15
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8018472:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018476:	ee07 3a90 	vmov	s15, r3
 801847a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801847e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018486:	eeb0 0a67 	vmov.f32	s0, s15
 801848a:	f009 fe15 	bl	80220b8 <lrintf>
 801848e:	4602      	mov	r2, r0
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	3302      	adds	r3, #2
 8018494:	b212      	sxth	r2, r2
 8018496:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801849e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80184a2:	ee07 3a90 	vmov	s15, r3
 80184a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80184b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80184b8:	ee07 3a90 	vmov	s15, r3
 80184bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80184ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80184d2:	ee07 3a90 	vmov	s15, r3
 80184d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184e2:	eeb0 0a67 	vmov.f32	s0, s15
 80184e6:	f009 fde7 	bl	80220b8 <lrintf>
 80184ea:	4602      	mov	r2, r0
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	3304      	adds	r3, #4
 80184f0:	b212      	sxth	r2, r2
 80184f2:	801a      	strh	r2, [r3, #0]
}
 80184f4:	bf00      	nop
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b084      	sub	sp, #16
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
 8018508:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 801850a:	78fb      	ldrb	r3, [r7, #3]
 801850c:	3b02      	subs	r3, #2
 801850e:	2b06      	cmp	r3, #6
 8018510:	f200 80c8 	bhi.w	80186a4 <_alignSensors+0x1a8>
 8018514:	a201      	add	r2, pc, #4	; (adr r2, 801851c <_alignSensors+0x20>)
 8018516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851a:	bf00      	nop
 801851c:	08018539 	.word	0x08018539
 8018520:	08018565 	.word	0x08018565
 8018524:	0801859b 	.word	0x0801859b
 8018528:	080185c9 	.word	0x080185c9
 801852c:	080185ff 	.word	0x080185ff
 8018530:	0801862d 	.word	0x0801862d
 8018534:	08018665 	.word	0x08018665
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018548:	b29b      	uxth	r3, r3
 801854a:	425b      	negs	r3, r3
 801854c:	b29a      	uxth	r2, r3
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	3302      	adds	r3, #2
 8018552:	b212      	sxth	r2, r2
 8018554:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	3304      	adds	r3, #4
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018560:	801a      	strh	r2, [r3, #0]
            break;
 8018562:	e0b1      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801856a:	b29b      	uxth	r3, r3
 801856c:	425b      	negs	r3, r3
 801856e:	b29b      	uxth	r3, r3
 8018570:	b21a      	sxth	r2, r3
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8018576:	68bb      	ldr	r3, [r7, #8]
 8018578:	3302      	adds	r3, #2
 801857a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801857e:	b29b      	uxth	r3, r3
 8018580:	425b      	negs	r3, r3
 8018582:	b29a      	uxth	r2, r3
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	3302      	adds	r3, #2
 8018588:	b212      	sxth	r2, r2
 801858a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	3304      	adds	r3, #4
 8018590:	68ba      	ldr	r2, [r7, #8]
 8018592:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018596:	801a      	strh	r2, [r3, #0]
            break;
 8018598:	e096      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	3302      	adds	r3, #2
 801859e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	425b      	negs	r3, r3
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	b21a      	sxth	r2, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	3302      	adds	r3, #2
 80185b2:	68ba      	ldr	r2, [r7, #8]
 80185b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80185b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	3304      	adds	r3, #4
 80185be:	68ba      	ldr	r2, [r7, #8]
 80185c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80185c4:	801a      	strh	r2, [r3, #0]
            break;
 80185c6:	e07f      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	425b      	negs	r3, r3
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	b21a      	sxth	r2, r3
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	3302      	adds	r3, #2
 80185de:	68ba      	ldr	r2, [r7, #8]
 80185e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80185e4:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	3304      	adds	r3, #4
 80185ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	425b      	negs	r3, r3
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	3304      	adds	r3, #4
 80185f8:	b212      	sxth	r2, r2
 80185fa:	801a      	strh	r2, [r3, #0]
            break;
 80185fc:	e064      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	3302      	adds	r3, #2
 801860c:	68ba      	ldr	r2, [r7, #8]
 801860e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018612:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	3304      	adds	r3, #4
 8018618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801861c:	b29b      	uxth	r3, r3
 801861e:	425b      	negs	r3, r3
 8018620:	b29a      	uxth	r2, r3
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	3304      	adds	r3, #4
 8018626:	b212      	sxth	r2, r2
 8018628:	801a      	strh	r2, [r3, #0]
            break;
 801862a:	e04d      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	3302      	adds	r3, #2
 801863a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801863e:	b29b      	uxth	r3, r3
 8018640:	425b      	negs	r3, r3
 8018642:	b29a      	uxth	r2, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	3302      	adds	r3, #2
 8018648:	b212      	sxth	r2, r2
 801864a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	3304      	adds	r3, #4
 8018650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018654:	b29b      	uxth	r3, r3
 8018656:	425b      	negs	r3, r3
 8018658:	b29a      	uxth	r2, r3
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	3304      	adds	r3, #4
 801865e:	b212      	sxth	r2, r2
 8018660:	801a      	strh	r2, [r3, #0]
            break;
 8018662:	e031      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	3302      	adds	r3, #2
 8018668:	f9b3 3000 	ldrsh.w	r3, [r3]
 801866c:	b29b      	uxth	r3, r3
 801866e:	425b      	negs	r3, r3
 8018670:	b29b      	uxth	r3, r3
 8018672:	b21a      	sxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8018678:	68bb      	ldr	r3, [r7, #8]
 801867a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801867e:	b29b      	uxth	r3, r3
 8018680:	425b      	negs	r3, r3
 8018682:	b29a      	uxth	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	3302      	adds	r3, #2
 8018688:	b212      	sxth	r2, r2
 801868a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	3304      	adds	r3, #4
 8018690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018694:	b29b      	uxth	r3, r3
 8018696:	425b      	negs	r3, r3
 8018698:	b29a      	uxth	r2, r3
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	3304      	adds	r3, #4
 801869e:	b212      	sxth	r2, r2
 80186a0:	801a      	strh	r2, [r3, #0]
            break;
 80186a2:	e011      	b.n	80186c8 <_alignSensors+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	3302      	adds	r3, #2
 80186b2:	68ba      	ldr	r2, [r7, #8]
 80186b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80186b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	3304      	adds	r3, #4
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80186c4:	801a      	strh	r2, [r3, #0]
            break;
 80186c6:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d003      	beq.n	80186da <_alignSensors+0x1de>
        _alignBoard(p_owner, dest);
 80186d2:	6879      	ldr	r1, [r7, #4]
 80186d4:	68f8      	ldr	r0, [r7, #12]
 80186d6:	f7ff fe76 	bl	80183c6 <_alignBoard>
}
 80186da:	bf00      	nop
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
 80186e2:	bf00      	nop

080186e4 <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 80186ec:	2278      	movs	r2, #120	; 0x78
 80186ee:	2100      	movs	r1, #0
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f009 fa01 	bl	8021af8 <memset>
}
 80186f6:	bf00      	nop
 80186f8:	3708      	adds	r7, #8
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
	...

08018700 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b092      	sub	sp, #72	; 0x48
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	4608      	mov	r0, r1
 801870a:	4611      	mov	r1, r2
 801870c:	461a      	mov	r2, r3
 801870e:	4603      	mov	r3, r0
 8018710:	817b      	strh	r3, [r7, #10]
 8018712:	460b      	mov	r3, r1
 8018714:	813b      	strh	r3, [r7, #8]
 8018716:	4613      	mov	r3, r2
 8018718:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801871a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d108      	bne.n	8018734 <pifImuSensor_InitBoardAlignment+0x34>
 8018722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d104      	bne.n	8018734 <pifImuSensor_InitBoardAlignment+0x34>
 801872a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801872e:	2b00      	cmp	r3, #0
 8018730:	f000 80fb 	beq.w	801892a <pifImuSensor_InitBoardAlignment+0x22a>

    p_owner->__board_alignment = TRUE;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2201      	movs	r2, #1
 8018738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * M_PI / 180.0f;
 801873c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018740:	4618      	mov	r0, r3
 8018742:	f7e7 fead 	bl	80004a0 <__aeabi_i2d>
 8018746:	a37c      	add	r3, pc, #496	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 8018748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801874c:	f7e7 ff12 	bl	8000574 <__aeabi_dmul>
 8018750:	4602      	mov	r2, r0
 8018752:	460b      	mov	r3, r1
 8018754:	4610      	mov	r0, r2
 8018756:	4619      	mov	r1, r3
 8018758:	f04f 0200 	mov.w	r2, #0
 801875c:	4b78      	ldr	r3, [pc, #480]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 801875e:	f7e8 f833 	bl	80007c8 <__aeabi_ddiv>
 8018762:	4602      	mov	r2, r0
 8018764:	460b      	mov	r3, r1
 8018766:	4610      	mov	r0, r2
 8018768:	4619      	mov	r1, r3
 801876a:	f7e8 f9e5 	bl	8000b38 <__aeabi_d2f>
 801876e:	4603      	mov	r3, r0
 8018770:	647b      	str	r3, [r7, #68]	; 0x44
    pitch = board_align_pitch * M_PI / 180.0f;
 8018772:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018776:	4618      	mov	r0, r3
 8018778:	f7e7 fe92 	bl	80004a0 <__aeabi_i2d>
 801877c:	a36e      	add	r3, pc, #440	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 801877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018782:	f7e7 fef7 	bl	8000574 <__aeabi_dmul>
 8018786:	4602      	mov	r2, r0
 8018788:	460b      	mov	r3, r1
 801878a:	4610      	mov	r0, r2
 801878c:	4619      	mov	r1, r3
 801878e:	f04f 0200 	mov.w	r2, #0
 8018792:	4b6b      	ldr	r3, [pc, #428]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 8018794:	f7e8 f818 	bl	80007c8 <__aeabi_ddiv>
 8018798:	4602      	mov	r2, r0
 801879a:	460b      	mov	r3, r1
 801879c:	4610      	mov	r0, r2
 801879e:	4619      	mov	r1, r3
 80187a0:	f7e8 f9ca 	bl	8000b38 <__aeabi_d2f>
 80187a4:	4603      	mov	r3, r0
 80187a6:	643b      	str	r3, [r7, #64]	; 0x40
    yaw = board_align_yaw * M_PI / 180.0f;
 80187a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7e7 fe77 	bl	80004a0 <__aeabi_i2d>
 80187b2:	a361      	add	r3, pc, #388	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 80187b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187b8:	f7e7 fedc 	bl	8000574 <__aeabi_dmul>
 80187bc:	4602      	mov	r2, r0
 80187be:	460b      	mov	r3, r1
 80187c0:	4610      	mov	r0, r2
 80187c2:	4619      	mov	r1, r3
 80187c4:	f04f 0200 	mov.w	r2, #0
 80187c8:	4b5d      	ldr	r3, [pc, #372]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 80187ca:	f7e7 fffd 	bl	80007c8 <__aeabi_ddiv>
 80187ce:	4602      	mov	r2, r0
 80187d0:	460b      	mov	r3, r1
 80187d2:	4610      	mov	r0, r2
 80187d4:	4619      	mov	r1, r3
 80187d6:	f7e8 f9af 	bl	8000b38 <__aeabi_d2f>
 80187da:	4603      	mov	r3, r0
 80187dc:	63fb      	str	r3, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 80187de:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80187e2:	f009 fc29 	bl	8022038 <cosf>
 80187e6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 80187ea:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80187ee:	f009 fca3 	bl	8022138 <sinf>
 80187f2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 80187f6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80187fa:	f009 fc1d 	bl	8022038 <cosf>
 80187fe:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8018802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8018806:	f009 fc97 	bl	8022138 <sinf>
 801880a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 801880e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8018812:	f009 fc11 	bl	8022038 <cosf>
 8018816:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 801881a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801881e:	f009 fc8b 	bl	8022138 <sinf>
 8018822:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8018826:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801882a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018832:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8018836:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801883a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801883e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018842:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8018846:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801884a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018852:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8018856:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801885a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018862:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8018866:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801886a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801886e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018872:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	69fa      	ldr	r2, [r7, #28]
 801887a:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 801887c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018880:	eeb1 7a67 	vneg.f32	s14, s15
 8018884:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018888:	ee67 7a27 	vmul.f32	s15, s14, s15
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018896:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8018898:	ed97 7a05 	vldr	s14, [r7, #20]
 801889c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80188a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80188a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 80188b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80188b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188be:	ed97 7a08 	vldr	s14, [r7, #32]
 80188c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 80188cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188d0:	eeb1 7a67 	vneg.f32	s14, s15
 80188d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 80188e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80188e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80188f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 80188fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8018900:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018908:	edd7 7a05 	vldr	s15, [r7, #20]
 801890c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8018916:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801891a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8018928:	e000      	b.n	801892c <pifImuSensor_InitBoardAlignment+0x22c>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801892a:	bf00      	nop
}
 801892c:	3748      	adds	r7, #72	; 0x48
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	f3af 8000 	nop.w
 8018938:	54442d18 	.word	0x54442d18
 801893c:	400921fb 	.word	0x400921fb
 8018940:	40668000 	.word	0x40668000

08018944 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018944:	b480      	push	{r7}
 8018946:	b083      	sub	sp, #12
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	460b      	mov	r3, r1
 801894e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018950:	78fb      	ldrb	r3, [r7, #3]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d002      	beq.n	801895c <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	78fa      	ldrb	r2, [r7, #3]
 801895a:	751a      	strb	r2, [r3, #20]
}
 801895c:	bf00      	nop
 801895e:	370c      	adds	r7, #12
 8018960:	46bd      	mov	sp, r7
 8018962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018966:	4770      	bx	lr

08018968 <pifImuSensor_ReadGyro>:

BOOL pifImuSensor_ReadGyro(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	f003 0301 	and.w	r3, r3, #1
 801897a:	2b00      	cmp	r3, #0
 801897c:	d016      	beq.n	80189ac <pifImuSensor_ReadGyro+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	699b      	ldr	r3, [r3, #24]
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	69d2      	ldr	r2, [r2, #28]
 8018986:	f107 0108 	add.w	r1, r7, #8
 801898a:	4610      	mov	r0, r2
 801898c:	4798      	blx	r3
 801898e:	4603      	mov	r3, r0
 8018990:	2b00      	cmp	r3, #0
 8018992:	d101      	bne.n	8018998 <pifImuSensor_ReadGyro+0x30>
 8018994:	2300      	movs	r3, #0
 8018996:	e00a      	b.n	80189ae <pifImuSensor_ReadGyro+0x46>

		_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	7d1b      	ldrb	r3, [r3, #20]
 801899c:	f107 0108 	add.w	r1, r7, #8
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f7ff fdaa 	bl	80184fc <_alignSensors>
		return TRUE;
 80189a8:	2301      	movs	r3, #1
 80189aa:	e000      	b.n	80189ae <pifImuSensor_ReadGyro+0x46>
	}
	return FALSE;
 80189ac:	2300      	movs	r3, #0
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}

080189b6 <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 80189b6:	b480      	push	{r7}
 80189b8:	b083      	sub	sp, #12
 80189ba:	af00      	add	r7, sp, #0
 80189bc:	6078      	str	r0, [r7, #4]
 80189be:	460b      	mov	r3, r1
 80189c0:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 80189c2:	78fb      	ldrb	r3, [r7, #3]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d003      	beq.n	80189d0 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	78fa      	ldrb	r2, [r7, #3]
 80189cc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80189d0:	bf00      	nop
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189da:	4770      	bx	lr

080189dc <pifImuSensor_ReadAccel>:

BOOL pifImuSensor_ReadAccel(PifImuSensor* p_owner, int16_t* p_accel)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
	int16_t accel[3];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	f003 0302 	and.w	r3, r3, #2
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d017      	beq.n	8018a22 <pifImuSensor_ReadAccel+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80189fa:	f107 0108 	add.w	r1, r7, #8
 80189fe:	4610      	mov	r0, r2
 8018a00:	4798      	blx	r3
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d101      	bne.n	8018a0c <pifImuSensor_ReadAccel+0x30>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	e00b      	b.n	8018a24 <pifImuSensor_ReadAccel+0x48>

		_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a12:	f107 0108 	add.w	r1, r7, #8
 8018a16:	683a      	ldr	r2, [r7, #0]
 8018a18:	6878      	ldr	r0, [r7, #4]
 8018a1a:	f7ff fd6f 	bl	80184fc <_alignSensors>
		return TRUE;
 8018a1e:	2301      	movs	r3, #1
 8018a20:	e000      	b.n	8018a24 <pifImuSensor_ReadAccel+0x48>
	}
	return FALSE;
 8018a22:	2300      	movs	r3, #0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	b083      	sub	sp, #12
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	460b      	mov	r3, r1
 8018a36:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018a38:	78fb      	ldrb	r3, [r7, #3]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d003      	beq.n	8018a46 <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	78fa      	ldrb	r2, [r7, #3]
 8018a42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8018a46:	bf00      	nop
 8018a48:	370c      	adds	r7, #12
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr

08018a52 <pifImuSensor_ReadMag>:

BOOL pifImuSensor_ReadMag(PifImuSensor* p_owner, int16_t* p_mag)
{
 8018a52:	b580      	push	{r7, lr}
 8018a54:	b084      	sub	sp, #16
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	6078      	str	r0, [r7, #4]
 8018a5a:	6039      	str	r1, [r7, #0]
	int16_t mag[3];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	f003 0304 	and.w	r3, r3, #4
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d017      	beq.n	8018a98 <pifImuSensor_ReadMag+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018a70:	f107 0108 	add.w	r1, r7, #8
 8018a74:	4610      	mov	r0, r2
 8018a76:	4798      	blx	r3
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d101      	bne.n	8018a82 <pifImuSensor_ReadMag+0x30>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	e00b      	b.n	8018a9a <pifImuSensor_ReadMag+0x48>

		_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a88:	f107 0108 	add.w	r1, r7, #8
 8018a8c:	683a      	ldr	r2, [r7, #0]
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f7ff fd34 	bl	80184fc <_alignSensors>
		return TRUE;
 8018a94:	2301      	movs	r3, #1
 8018a96:	e000      	b.n	8018a9a <pifImuSensor_ReadMag+0x48>
	}
	return FALSE;
 8018a98:	2300      	movs	r3, #0
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	0000      	movs	r0, r0
 8018aa4:	0000      	movs	r0, r0
	...

08018aa8 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d101      	bne.n	8018abe <_changeFsSel+0x16>
 8018aba:	2300      	movs	r3, #0
 8018abc:	e013      	b.n	8018ae6 <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8018abe:	78fb      	ldrb	r3, [r7, #3]
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7e7 fcea 	bl	80004a0 <__aeabi_i2d>
 8018acc:	4602      	mov	r2, r0
 8018ace:	460b      	mov	r3, r1
 8018ad0:	a107      	add	r1, pc, #28	; (adr r1, 8018af0 <_changeFsSel+0x48>)
 8018ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ad6:	f7e7 fe77 	bl	80007c8 <__aeabi_ddiv>
 8018ada:	4602      	mov	r2, r0
 8018adc:	460b      	mov	r3, r1
 8018ade:	6879      	ldr	r1, [r7, #4]
 8018ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 8018ae4:	2301      	movs	r3, #1
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	00000000 	.word	0x00000000
 8018af4:	40606000 	.word	0x40606000

08018af8 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	460b      	mov	r3, r1
 8018b02:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d101      	bne.n	8018b0e <_changeAfsSel+0x16>
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	e008      	b.n	8018b20 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8018b0e:	78fb      	ldrb	r3, [r7, #3]
 8018b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8018b14:	fa42 f303 	asr.w	r3, r2, r3
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	821a      	strh	r2, [r3, #16]
	return TRUE;
 8018b1e:	2301      	movs	r3, #1
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	370c      	adds	r7, #12
 8018b24:	46bd      	mov	sp, r7
 8018b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2a:	4770      	bx	lr

08018b2c <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8018b2c:	b590      	push	{r4, r7, lr}
 8018b2e:	b08b      	sub	sp, #44	; 0x2c
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	60f8      	str	r0, [r7, #12]
 8018b34:	607a      	str	r2, [r7, #4]
 8018b36:	461a      	mov	r2, r3
 8018b38:	460b      	mov	r3, r1
 8018b3a:	817b      	strh	r3, [r7, #10]
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8018b40:	4b75      	ldr	r3, [pc, #468]	; (8018d18 <pifMpu60x0_Init+0x1ec>)
 8018b42:	f107 0418 	add.w	r4, r7, #24
 8018b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d005      	beq.n	8018b5e <pifMpu60x0_Init+0x32>
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d002      	beq.n	8018b5e <pifMpu60x0_Init+0x32>
 8018b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d104      	bne.n	8018b68 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 8018b5e:	4b6f      	ldr	r3, [pc, #444]	; (8018d1c <pifMpu60x0_Init+0x1f0>)
 8018b60:	2201      	movs	r2, #1
 8018b62:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018b64:	2300      	movs	r3, #0
 8018b66:	e0d3      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8018b68:	2210      	movs	r2, #16
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	68f8      	ldr	r0, [r7, #12]
 8018b6e:	f008 ffc3 	bl	8021af8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7f9 fc56 	bl	8012424 <pifI2cPort_AddDevice>
 8018b78:	4602      	mov	r2, r0
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	689b      	ldr	r3, [r3, #8]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d101      	bne.n	8018b8a <pifMpu60x0_Init+0x5e>
 8018b86:	2300      	movs	r3, #0
 8018b88:	e0c2      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	689b      	ldr	r3, [r3, #8]
 8018b8e:	7a7a      	ldrb	r2, [r7, #9]
 8018b90:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	689b      	ldr	r3, [r3, #8]
 8018b96:	f107 0217 	add.w	r2, r7, #23
 8018b9a:	2175      	movs	r1, #117	; 0x75
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7f9 fd25 	bl	80125ec <pifI2cDevice_ReadRegByte>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	f000 80a4 	beq.w	8018cf2 <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 8018baa:	7dfb      	ldrb	r3, [r7, #23]
 8018bac:	7a7a      	ldrb	r2, [r7, #9]
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d003      	beq.n	8018bba <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 8018bb2:	4b5a      	ldr	r3, [pc, #360]	; (8018d1c <pifMpu60x0_Init+0x1f0>)
 8018bb4:	2211      	movs	r2, #17
 8018bb6:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018bb8:	e0a6      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 8018bba:	7dfb      	ldrb	r3, [r7, #23]
 8018bbc:	2b1f      	cmp	r3, #31
 8018bbe:	d809      	bhi.n	8018bd4 <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 8018bc0:	7dfb      	ldrb	r3, [r7, #23]
 8018bc2:	085b      	lsrs	r3, r3, #1
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	f107 0218 	add.w	r2, r7, #24
 8018bca:	4955      	ldr	r1, [pc, #340]	; (8018d20 <pifMpu60x0_Init+0x1f4>)
 8018bcc:	2002      	movs	r0, #2
 8018bce:	f7fa fcdd 	bl	801358c <pifLog_Printf>
 8018bd2:	e008      	b.n	8018be6 <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 8018bd4:	7dfb      	ldrb	r3, [r7, #23]
 8018bd6:	085b      	lsrs	r3, r3, #1
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	f107 0218 	add.w	r2, r7, #24
 8018bde:	4951      	ldr	r1, [pc, #324]	; (8018d24 <pifMpu60x0_Init+0x1f8>)
 8018be0:	2002      	movs	r0, #2
 8018be2:	f7fa fcd3 	bl	801358c <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8018bea:	7d3b      	ldrb	r3, [r7, #20]
 8018bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bf0:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	689b      	ldr	r3, [r3, #8]
 8018bf6:	7d3a      	ldrb	r2, [r7, #20]
 8018bf8:	216b      	movs	r1, #107	; 0x6b
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7f9 fe24 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8018c00:	4603      	mov	r3, r0
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d077      	beq.n	8018cf6 <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 8018c06:	2064      	movs	r0, #100	; 0x64
 8018c08:	f7fb ff72 	bl	8014af0 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	6898      	ldr	r0, [r3, #8]
 8018c10:	f107 0317 	add.w	r3, r7, #23
 8018c14:	f240 3202 	movw	r2, #770	; 0x302
 8018c18:	211b      	movs	r1, #27
 8018c1a:	f7f9 fd34 	bl	8012686 <pifI2cDevice_ReadRegBit8>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d06a      	beq.n	8018cfa <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018c24:	7dfb      	ldrb	r3, [r7, #23]
 8018c26:	4619      	mov	r1, r3
 8018c28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c2a:	f7ff ff3d 	bl	8018aa8 <_changeFsSel>
 8018c2e:	4603      	mov	r3, r0
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d064      	beq.n	8018cfe <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	6898      	ldr	r0, [r3, #8]
 8018c38:	f107 0317 	add.w	r3, r7, #23
 8018c3c:	f240 3202 	movw	r2, #770	; 0x302
 8018c40:	211c      	movs	r1, #28
 8018c42:	f7f9 fd20 	bl	8012686 <pifI2cDevice_ReadRegBit8>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d05a      	beq.n	8018d02 <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018c4c:	7dfb      	ldrb	r3, [r7, #23]
 8018c4e:	4619      	mov	r1, r3
 8018c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c52:	f7ff ff51 	bl	8018af8 <_changeAfsSel>
 8018c56:	4603      	mov	r3, r0
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d054      	beq.n	8018d06 <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018c5c:	897b      	ldrh	r3, [r7, #10]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d106      	bne.n	8018c70 <pifMpu60x0_Init+0x144>
 8018c62:	4b31      	ldr	r3, [pc, #196]	; (8018d28 <pifMpu60x0_Init+0x1fc>)
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	1c5a      	adds	r2, r3, #1
 8018c68:	b291      	uxth	r1, r2
 8018c6a:	4a2f      	ldr	r2, [pc, #188]	; (8018d28 <pifMpu60x0_Init+0x1fc>)
 8018c6c:	8011      	strh	r1, [r2, #0]
 8018c6e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	897a      	ldrh	r2, [r7, #10]
 8018c74:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	2201      	movs	r2, #1
 8018c7a:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c80:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 8018c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	f043 0303 	orr.w	r3, r3, #3
 8018c8a:	b2da      	uxtb	r2, r3
 8018c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c8e:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 8018c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c92:	2201      	movs	r2, #1
 8018c94:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 8018c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c98:	4a24      	ldr	r2, [pc, #144]	; (8018d2c <pifMpu60x0_Init+0x200>)
 8018c9a:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 8018c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 8018ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca4:	2201      	movs	r2, #1
 8018ca6:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8018caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cac:	4a20      	ldr	r2, [pc, #128]	; (8018d30 <pifMpu60x0_Init+0x204>)
 8018cae:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8018cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb2:	68fa      	ldr	r2, [r7, #12]
 8018cb4:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 8018cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb8:	2200      	movs	r2, #0
 8018cba:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8018cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 8018cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 8018cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cca:	2200      	movs	r2, #0
 8018ccc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 8018cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 8018cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd8:	2200      	movs	r2, #0
 8018cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 8018cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 8018ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce8:	f04f 0200 	mov.w	r2, #0
 8018cec:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 8018cee:	2301      	movs	r3, #1
 8018cf0:	e00e      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018cf2:	bf00      	nop
 8018cf4:	e008      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018cf6:	bf00      	nop
 8018cf8:	e006      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018cfa:	bf00      	nop
 8018cfc:	e004      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018cfe:	bf00      	nop
 8018d00:	e002      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018d02:	bf00      	nop
 8018d04:	e000      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018d06:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 8018d08:	68f8      	ldr	r0, [r7, #12]
 8018d0a:	f000 f813 	bl	8018d34 <pifMpu60x0_Clear>
	return FALSE;
 8018d0e:	2300      	movs	r3, #0
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	372c      	adds	r7, #44	; 0x2c
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd90      	pop	{r4, r7, pc}
 8018d18:	08026808 	.word	0x08026808
 8018d1c:	20001365 	.word	0x20001365
 8018d20:	080267f8 	.word	0x080267f8
 8018d24:	08026800 	.word	0x08026800
 8018d28:	2000005c 	.word	0x2000005c
 8018d2c:	08018de5 	.word	0x08018de5
 8018d30:	08018eab 	.word	0x08018eab

08018d34 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	689b      	ldr	r3, [r3, #8]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d00b      	beq.n	8018d5c <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	689b      	ldr	r3, [r3, #8]
 8018d48:	685a      	ldr	r2, [r3, #4]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	689b      	ldr	r3, [r3, #8]
 8018d4e:	4619      	mov	r1, r3
 8018d50:	4610      	mov	r0, r2
 8018d52:	f7f9 fb8b 	bl	801246c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	609a      	str	r2, [r3, #8]
    }
}
 8018d5c:	bf00      	nop
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	689b      	ldr	r3, [r3, #8]
 8018d72:	783a      	ldrb	r2, [r7, #0]
 8018d74:	211b      	movs	r1, #27
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7f9 fd66 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d101      	bne.n	8018d86 <pifMpu60x0_SetGyroConfig+0x22>
 8018d82:	2300      	movs	r3, #0
 8018d84:	e00a      	b.n	8018d9c <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	68da      	ldr	r2, [r3, #12]
 8018d8a:	783b      	ldrb	r3, [r7, #0]
 8018d8c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	4619      	mov	r1, r3
 8018d94:	4610      	mov	r0, r2
 8018d96:	f7ff fe87 	bl	8018aa8 <_changeFsSel>
	return TRUE;
 8018d9a:	2301      	movs	r3, #1
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	689b      	ldr	r3, [r3, #8]
 8018db2:	783a      	ldrb	r2, [r7, #0]
 8018db4:	211c      	movs	r1, #28
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7f9 fd46 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d101      	bne.n	8018dc6 <pifMpu60x0_SetAccelConfig+0x22>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	e00a      	b.n	8018ddc <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	68da      	ldr	r2, [r3, #12]
 8018dca:	783b      	ldrb	r3, [r7, #0]
 8018dcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	4610      	mov	r0, r2
 8018dd6:	f7ff fe8f 	bl	8018af8 <_changeAfsSel>
	return TRUE;
 8018dda:	2301      	movs	r3, #1
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6898      	ldr	r0, [r3, #8]
 8018df2:	f107 0208 	add.w	r2, r7, #8
 8018df6:	2306      	movs	r3, #6
 8018df8:	2143      	movs	r1, #67	; 0x43
 8018dfa:	f7f9 fc2f 	bl	801265c <pifI2cDevice_ReadRegBytes>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d101      	bne.n	8018e08 <pifMpu60x0_ReadGyro+0x24>
 8018e04:	2300      	movs	r3, #0
 8018e06:	e04c      	b.n	8018ea2 <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 8018e08:	7a3b      	ldrb	r3, [r7, #8]
 8018e0a:	b29b      	uxth	r3, r3
 8018e0c:	021b      	lsls	r3, r3, #8
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	7a7b      	ldrb	r3, [r7, #9]
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	4413      	add	r3, r2
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	b21a      	sxth	r2, r3
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 8018e1e:	7abb      	ldrb	r3, [r7, #10]
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	021b      	lsls	r3, r3, #8
 8018e24:	b29a      	uxth	r2, r3
 8018e26:	7afb      	ldrb	r3, [r7, #11]
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	4413      	add	r3, r2
 8018e2c:	b29a      	uxth	r2, r3
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	3302      	adds	r3, #2
 8018e32:	b212      	sxth	r2, r2
 8018e34:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 8018e36:	7b3b      	ldrb	r3, [r7, #12]
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	021b      	lsls	r3, r3, #8
 8018e3c:	b29a      	uxth	r2, r3
 8018e3e:	7b7b      	ldrb	r3, [r7, #13]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	4413      	add	r3, r2
 8018e44:	b29a      	uxth	r2, r3
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	b212      	sxth	r2, r2
 8018e4c:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d024      	beq.n	8018ea0 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 8018e56:	683b      	ldr	r3, [r7, #0]
 8018e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e5c:	461a      	mov	r2, r3
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e66:	b21a      	sxth	r2, r3
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	3302      	adds	r3, #2
 8018e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e74:	461a      	mov	r2, r3
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	3302      	adds	r3, #2
 8018e82:	b212      	sxth	r2, r2
 8018e84:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	3304      	adds	r3, #4
 8018e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e8e:	461a      	mov	r2, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	fb92 f2f3 	sdiv	r2, r2, r3
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	3304      	adds	r3, #4
 8018e9c:	b212      	sxth	r2, r2
 8018e9e:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8018ea0:	2301      	movs	r3, #1
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b084      	sub	sp, #16
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6898      	ldr	r0, [r3, #8]
 8018eb8:	f107 0208 	add.w	r2, r7, #8
 8018ebc:	2306      	movs	r3, #6
 8018ebe:	213b      	movs	r1, #59	; 0x3b
 8018ec0:	f7f9 fbcc 	bl	801265c <pifI2cDevice_ReadRegBytes>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d101      	bne.n	8018ece <pifMpu60x0_ReadAccel+0x24>
 8018eca:	2300      	movs	r3, #0
 8018ecc:	e04c      	b.n	8018f68 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 8018ece:	7a3b      	ldrb	r3, [r7, #8]
 8018ed0:	b29b      	uxth	r3, r3
 8018ed2:	021b      	lsls	r3, r3, #8
 8018ed4:	b29a      	uxth	r2, r3
 8018ed6:	7a7b      	ldrb	r3, [r7, #9]
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	4413      	add	r3, r2
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	b21a      	sxth	r2, r3
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 8018ee4:	7abb      	ldrb	r3, [r7, #10]
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	021b      	lsls	r3, r3, #8
 8018eea:	b29a      	uxth	r2, r3
 8018eec:	7afb      	ldrb	r3, [r7, #11]
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	4413      	add	r3, r2
 8018ef2:	b29a      	uxth	r2, r3
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	3302      	adds	r3, #2
 8018ef8:	b212      	sxth	r2, r2
 8018efa:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 8018efc:	7b3b      	ldrb	r3, [r7, #12]
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	021b      	lsls	r3, r3, #8
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	7b7b      	ldrb	r3, [r7, #13]
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	4413      	add	r3, r2
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	3304      	adds	r3, #4
 8018f10:	b212      	sxth	r2, r2
 8018f12:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	785b      	ldrb	r3, [r3, #1]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d024      	beq.n	8018f66 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f22:	461a      	mov	r2, r3
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	785b      	ldrb	r3, [r3, #1]
 8018f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f2c:	b21a      	sxth	r2, r3
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	3302      	adds	r3, #2
 8018f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	785b      	ldrb	r3, [r3, #1]
 8018f40:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	3302      	adds	r3, #2
 8018f48:	b212      	sxth	r2, r2
 8018f4a:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	3304      	adds	r3, #4
 8018f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f54:	461a      	mov	r2, r3
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	785b      	ldrb	r3, [r3, #1]
 8018f5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	3304      	adds	r3, #4
 8018f62:	b212      	sxth	r2, r2
 8018f64:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8018f66:	2301      	movs	r3, #1
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3710      	adds	r7, #16
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 8018f70:	b480      	push	{r7}
 8018f72:	b087      	sub	sp, #28
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	8adb      	ldrh	r3, [r3, #22]
 8018f84:	b2db      	uxtb	r3, r3
 8018f86:	f003 030f 	and.w	r3, r3, #15
 8018f8a:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8adb      	ldrh	r3, [r3, #22]
 8018f90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8018f94:	b29a      	uxth	r2, r3
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	617b      	str	r3, [r7, #20]
 8018f9e:	e00b      	b.n	8018fb8 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	697a      	ldr	r2, [r7, #20]
 8018fa4:	3204      	adds	r2, #4
 8018fa6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <_checkPromCrc+0x42>
            zero = 0;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	617b      	str	r3, [r7, #20]
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	2b07      	cmp	r3, #7
 8018fbc:	ddf0      	ble.n	8018fa0 <_checkPromCrc+0x30>
    }
    if (zero)
 8018fbe:	7afb      	ldrb	r3, [r7, #11]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d001      	beq.n	8018fc8 <_checkPromCrc+0x58>
        return FALSE;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	e04b      	b.n	8019060 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 8018fc8:	2300      	movs	r3, #0
 8018fca:	617b      	str	r3, [r7, #20]
 8018fcc:	e033      	b.n	8019036 <_checkPromCrc+0xc6>
        if (i & 1)
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	f003 0301 	and.w	r3, r3, #1
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00a      	beq.n	8018fee <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	105a      	asrs	r2, r3, #1
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	3204      	adds	r2, #4
 8018fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	68fa      	ldr	r2, [r7, #12]
 8018fe8:	4053      	eors	r3, r2
 8018fea:	60fb      	str	r3, [r7, #12]
 8018fec:	e00b      	b.n	8019006 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	105a      	asrs	r2, r3, #1
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	3204      	adds	r2, #4
 8018ff6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018ffa:	0a1b      	lsrs	r3, r3, #8
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	461a      	mov	r2, r3
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	4053      	eors	r3, r2
 8019004:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019006:	2308      	movs	r3, #8
 8019008:	613b      	str	r3, [r7, #16]
 801900a:	e00e      	b.n	801902a <_checkPromCrc+0xba>
            if (res & 0x8000)
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019012:	2b00      	cmp	r3, #0
 8019014:	d003      	beq.n	801901e <_checkPromCrc+0xae>
                res ^= 0x1800;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801901c:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	005b      	lsls	r3, r3, #1
 8019022:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019024:	693b      	ldr	r3, [r7, #16]
 8019026:	3b01      	subs	r3, #1
 8019028:	613b      	str	r3, [r7, #16]
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	2b00      	cmp	r3, #0
 801902e:	dced      	bgt.n	801900c <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	3301      	adds	r3, #1
 8019034:	617b      	str	r3, [r7, #20]
 8019036:	697b      	ldr	r3, [r7, #20]
 8019038:	2b0f      	cmp	r3, #15
 801903a:	ddc8      	ble.n	8018fce <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	8ada      	ldrh	r2, [r3, #22]
 8019040:	7abb      	ldrb	r3, [r7, #10]
 8019042:	b29b      	uxth	r3, r3
 8019044:	4313      	orrs	r3, r2
 8019046:	b29a      	uxth	r2, r3
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801904c:	7aba      	ldrb	r2, [r7, #10]
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	0b1b      	lsrs	r3, r3, #12
 8019052:	f003 030f 	and.w	r3, r3, #15
 8019056:	429a      	cmp	r2, r3
 8019058:	d101      	bne.n	801905e <_checkPromCrc+0xee>
        return TRUE;
 801905a:	2301      	movs	r3, #1
 801905c:	e000      	b.n	8019060 <_checkPromCrc+0xf0>

    return FALSE;
 801905e:	2300      	movs	r3, #0
}
 8019060:	4618      	mov	r0, r3
 8019062:	371c      	adds	r7, #28
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, int32_t* p_pressure, float* p_temperature)
{
 801906c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019070:	b0aa      	sub	sp, #168	; 0xa8
 8019072:	af00      	add	r7, sp, #0
 8019074:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019076:	67b9      	str	r1, [r7, #120]	; 0x78
 8019078:	677a      	str	r2, [r7, #116]	; 0x74
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801907a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801907c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801907e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019080:	8a5b      	ldrh	r3, [r3, #18]
 8019082:	021b      	lsls	r3, r3, #8
 8019084:	1ad3      	subs	r3, r2, r3
 8019086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801908a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801908e:	4618      	mov	r0, r3
 8019090:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019096:	8a9b      	ldrh	r3, [r3, #20]
 8019098:	b29a      	uxth	r2, r3
 801909a:	f04f 0300 	mov.w	r3, #0
 801909e:	fb02 f501 	mul.w	r5, r2, r1
 80190a2:	fb00 f403 	mul.w	r4, r0, r3
 80190a6:	442c      	add	r4, r5
 80190a8:	fba0 0102 	umull	r0, r1, r0, r2
 80190ac:	1863      	adds	r3, r4, r1
 80190ae:	4619      	mov	r1, r3
 80190b0:	f04f 0200 	mov.w	r2, #0
 80190b4:	f04f 0300 	mov.w	r3, #0
 80190b8:	0dc2      	lsrs	r2, r0, #23
 80190ba:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80190be:	15cb      	asrs	r3, r1, #23
 80190c0:	f512 68fa 	adds.w	r8, r2, #2000	; 0x7d0
 80190c4:	f143 0900 	adc.w	r9, r3, #0
 80190c8:	e9c7 8928 	strd	r8, r9, [r7, #160]	; 0xa0

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 80190cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190ce:	899b      	ldrh	r3, [r3, #12]
 80190d0:	b29a      	uxth	r2, r3
 80190d2:	f04f 0300 	mov.w	r3, #0
 80190d6:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80190da:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80190de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190e0:	8a1b      	ldrh	r3, [r3, #16]
 80190e2:	b298      	uxth	r0, r3
 80190e4:	f04f 0100 	mov.w	r1, #0
 80190e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80190ec:	461a      	mov	r2, r3
 80190ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80190f2:	fb02 f501 	mul.w	r5, r2, r1
 80190f6:	fb00 f403 	mul.w	r4, r0, r3
 80190fa:	442c      	add	r4, r5
 80190fc:	fba0 0102 	umull	r0, r1, r0, r2
 8019100:	1863      	adds	r3, r4, r1
 8019102:	4619      	mov	r1, r3
 8019104:	f04f 0200 	mov.w	r2, #0
 8019108:	f04f 0300 	mov.w	r3, #0
 801910c:	09c2      	lsrs	r2, r0, #7
 801910e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8019112:	11cb      	asrs	r3, r1, #7
 8019114:	eb1a 0102 	adds.w	r1, sl, r2
 8019118:	6539      	str	r1, [r7, #80]	; 0x50
 801911a:	eb4b 0303 	adc.w	r3, fp, r3
 801911e:	657b      	str	r3, [r7, #84]	; 0x54
 8019120:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8019124:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 8019128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801912a:	895b      	ldrh	r3, [r3, #10]
 801912c:	b29a      	uxth	r2, r3
 801912e:	f04f 0300 	mov.w	r3, #0
 8019132:	f04f 0800 	mov.w	r8, #0
 8019136:	f04f 0900 	mov.w	r9, #0
 801913a:	ea4f 39c3 	mov.w	r9, r3, lsl #15
 801913e:	ea49 4952 	orr.w	r9, r9, r2, lsr #17
 8019142:	ea4f 38c2 	mov.w	r8, r2, lsl #15
 8019146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019148:	89db      	ldrh	r3, [r3, #14]
 801914a:	b298      	uxth	r0, r3
 801914c:	f04f 0100 	mov.w	r1, #0
 8019150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019154:	461a      	mov	r2, r3
 8019156:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801915a:	fb02 f501 	mul.w	r5, r2, r1
 801915e:	fb00 f403 	mul.w	r4, r0, r3
 8019162:	442c      	add	r4, r5
 8019164:	fba0 0102 	umull	r0, r1, r0, r2
 8019168:	1863      	adds	r3, r4, r1
 801916a:	4619      	mov	r1, r3
 801916c:	f04f 0200 	mov.w	r2, #0
 8019170:	f04f 0300 	mov.w	r3, #0
 8019174:	0a02      	lsrs	r2, r0, #8
 8019176:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801917a:	120b      	asrs	r3, r1, #8
 801917c:	eb18 0102 	adds.w	r1, r8, r2
 8019180:	64b9      	str	r1, [r7, #72]	; 0x48
 8019182:	eb49 0303 	adc.w	r3, r9, r3
 8019186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019188:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801918c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	if (temp < 2000) {
 8019190:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8019194:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8019198:	f04f 0300 	mov.w	r3, #0
 801919c:	4282      	cmp	r2, r0
 801919e:	418b      	sbcs	r3, r1
 80191a0:	f2c0 8117 	blt.w	80193d2 <_calcurateBarometric+0x366>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 80191a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80191a8:	4618      	mov	r0, r3
 80191aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80191ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80191b2:	461a      	mov	r2, r3
 80191b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80191b8:	fb02 f501 	mul.w	r5, r2, r1
 80191bc:	fb00 f403 	mul.w	r4, r0, r3
 80191c0:	442c      	add	r4, r5
 80191c2:	fba0 2302 	umull	r2, r3, r0, r2
 80191c6:	18e1      	adds	r1, r4, r3
 80191c8:	460b      	mov	r3, r1
 80191ca:	4610      	mov	r0, r2
 80191cc:	4619      	mov	r1, r3
 80191ce:	2800      	cmp	r0, #0
 80191d0:	f171 0300 	sbcs.w	r3, r1, #0
 80191d4:	da06      	bge.n	80191e4 <_calcurateBarometric+0x178>
 80191d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80191da:	f04f 0300 	mov.w	r3, #0
 80191de:	1880      	adds	r0, r0, r2
 80191e0:	eb43 0101 	adc.w	r1, r3, r1
 80191e4:	f04f 0200 	mov.w	r2, #0
 80191e8:	f04f 0300 	mov.w	r3, #0
 80191ec:	0fc2      	lsrs	r2, r0, #31
 80191ee:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80191f2:	17cb      	asrs	r3, r1, #31
 80191f4:	4252      	negs	r2, r2
 80191f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80191fa:	4610      	mov	r0, r2
 80191fc:	4619      	mov	r1, r3
 80191fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8019202:	1814      	adds	r4, r2, r0
 8019204:	643c      	str	r4, [r7, #64]	; 0x40
 8019206:	414b      	adcs	r3, r1
 8019208:	647b      	str	r3, [r7, #68]	; 0x44
 801920a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801920e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

		delt = temp - 2000;
 8019212:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8019216:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801921a:	63b9      	str	r1, [r7, #56]	; 0x38
 801921c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8019220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019222:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8019226:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
		delt = 5 * delt * delt;
 801922a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801922e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019232:	fb03 f102 	mul.w	r1, r3, r2
 8019236:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801923a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801923e:	fb03 f302 	mul.w	r3, r3, r2
 8019242:	18ca      	adds	r2, r1, r3
 8019244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019248:	fba3 4503 	umull	r4, r5, r3, r3
 801924c:	1953      	adds	r3, r2, r5
 801924e:	461d      	mov	r5, r3
 8019250:	4622      	mov	r2, r4
 8019252:	462b      	mov	r3, r5
 8019254:	f04f 0000 	mov.w	r0, #0
 8019258:	f04f 0100 	mov.w	r1, #0
 801925c:	0099      	lsls	r1, r3, #2
 801925e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8019262:	0090      	lsls	r0, r2, #2
 8019264:	4602      	mov	r2, r0
 8019266:	460b      	mov	r3, r1
 8019268:	1911      	adds	r1, r2, r4
 801926a:	6339      	str	r1, [r7, #48]	; 0x30
 801926c:	416b      	adcs	r3, r5
 801926e:	637b      	str	r3, [r7, #52]	; 0x34
 8019270:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8019274:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
		off -= delt >> 1;
 8019278:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801927c:	f04f 0000 	mov.w	r0, #0
 8019280:	f04f 0100 	mov.w	r1, #0
 8019284:	0850      	lsrs	r0, r2, #1
 8019286:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801928a:	1059      	asrs	r1, r3, #1
 801928c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8019290:	1a14      	subs	r4, r2, r0
 8019292:	62bc      	str	r4, [r7, #40]	; 0x28
 8019294:	eb63 0301 	sbc.w	r3, r3, r1
 8019298:	62fb      	str	r3, [r7, #44]	; 0x2c
 801929a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801929e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		sens -= delt >> 2;
 80192a2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80192a6:	f04f 0000 	mov.w	r0, #0
 80192aa:	f04f 0100 	mov.w	r1, #0
 80192ae:	0890      	lsrs	r0, r2, #2
 80192b0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80192b4:	1099      	asrs	r1, r3, #2
 80192b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80192ba:	1a14      	subs	r4, r2, r0
 80192bc:	623c      	str	r4, [r7, #32]
 80192be:	eb63 0301 	sbc.w	r3, r3, r1
 80192c2:	627b      	str	r3, [r7, #36]	; 0x24
 80192c4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80192c8:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

		if (temp < -1500) {
 80192cc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80192d0:	4a64      	ldr	r2, [pc, #400]	; (8019464 <_calcurateBarometric+0x3f8>)
 80192d2:	f04f 33ff 	mov.w	r3, #4294967295
 80192d6:	4290      	cmp	r0, r2
 80192d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80192dc:	da79      	bge.n	80193d2 <_calcurateBarometric+0x366>
			delt = temp + 1500;
 80192de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80192e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80192e6:	f04f 0300 	mov.w	r3, #0
 80192ea:	1884      	adds	r4, r0, r2
 80192ec:	61bc      	str	r4, [r7, #24]
 80192ee:	eb41 0303 	adc.w	r3, r1, r3
 80192f2:	61fb      	str	r3, [r7, #28]
 80192f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80192f8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			delt = delt * delt;
 80192fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019300:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019304:	fb02 f103 	mul.w	r1, r2, r3
 8019308:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801930c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019310:	fb03 f302 	mul.w	r3, r3, r2
 8019314:	4419      	add	r1, r3
 8019316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801931a:	fba3 2303 	umull	r2, r3, r3, r3
 801931e:	4419      	add	r1, r3
 8019320:	460b      	mov	r3, r1
 8019322:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8019326:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			off -= 7 * delt;
 801932a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801932e:	4604      	mov	r4, r0
 8019330:	460d      	mov	r5, r1
 8019332:	f04f 0200 	mov.w	r2, #0
 8019336:	f04f 0300 	mov.w	r3, #0
 801933a:	00cb      	lsls	r3, r1, #3
 801933c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8019340:	00c2      	lsls	r2, r0, #3
 8019342:	1aa1      	subs	r1, r4, r2
 8019344:	66b9      	str	r1, [r7, #104]	; 0x68
 8019346:	eb65 0303 	sbc.w	r3, r5, r3
 801934a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801934c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8019350:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8019354:	4621      	mov	r1, r4
 8019356:	1851      	adds	r1, r2, r1
 8019358:	6139      	str	r1, [r7, #16]
 801935a:	4629      	mov	r1, r5
 801935c:	eb43 0101 	adc.w	r1, r3, r1
 8019360:	6179      	str	r1, [r7, #20]
 8019362:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019366:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			sens -= (11 * delt) >> 1;
 801936a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801936e:	4602      	mov	r2, r0
 8019370:	460b      	mov	r3, r1
 8019372:	1894      	adds	r4, r2, r2
 8019374:	60bc      	str	r4, [r7, #8]
 8019376:	415b      	adcs	r3, r3
 8019378:	60fb      	str	r3, [r7, #12]
 801937a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801937e:	1812      	adds	r2, r2, r0
 8019380:	eb41 0303 	adc.w	r3, r1, r3
 8019384:	f04f 0400 	mov.w	r4, #0
 8019388:	f04f 0500 	mov.w	r5, #0
 801938c:	009d      	lsls	r5, r3, #2
 801938e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8019392:	0094      	lsls	r4, r2, #2
 8019394:	4622      	mov	r2, r4
 8019396:	462b      	mov	r3, r5
 8019398:	1a14      	subs	r4, r2, r0
 801939a:	663c      	str	r4, [r7, #96]	; 0x60
 801939c:	eb63 0301 	sbc.w	r3, r3, r1
 80193a0:	667b      	str	r3, [r7, #100]	; 0x64
 80193a2:	f04f 0200 	mov.w	r2, #0
 80193a6:	f04f 0300 	mov.w	r3, #0
 80193aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80193ae:	4621      	mov	r1, r4
 80193b0:	084a      	lsrs	r2, r1, #1
 80193b2:	4629      	mov	r1, r5
 80193b4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80193b8:	4629      	mov	r1, r5
 80193ba:	104b      	asrs	r3, r1, #1
 80193bc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80193c0:	1a84      	subs	r4, r0, r2
 80193c2:	603c      	str	r4, [r7, #0]
 80193c4:	eb61 0303 	sbc.w	r3, r1, r3
 80193c8:	607b      	str	r3, [r7, #4]
 80193ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80193ce:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		}
	}

    *p_temperature = temp / 100;
 80193d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80193d6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80193da:	f04f 0300 	mov.w	r3, #0
 80193de:	f7e7 fd09 	bl	8000df4 <__aeabi_ldivmod>
 80193e2:	4602      	mov	r2, r0
 80193e4:	460b      	mov	r3, r1
 80193e6:	4610      	mov	r0, r2
 80193e8:	4619      	mov	r1, r3
 80193ea:	f7e7 fcc5 	bl	8000d78 <__aeabi_l2f>
 80193ee:	4602      	mov	r2, r0
 80193f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80193f2:	601a      	str	r2, [r3, #0]
	*p_pressure = ((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15;
 80193f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80193f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f8:	461a      	mov	r2, r3
 80193fa:	f04f 0300 	mov.w	r3, #0
 80193fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8019402:	fb03 f001 	mul.w	r0, r3, r1
 8019406:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801940a:	fb02 f101 	mul.w	r1, r2, r1
 801940e:	1844      	adds	r4, r0, r1
 8019410:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8019414:	fba1 0102 	umull	r0, r1, r1, r2
 8019418:	1863      	adds	r3, r4, r1
 801941a:	4619      	mov	r1, r3
 801941c:	f04f 0200 	mov.w	r2, #0
 8019420:	f04f 0300 	mov.w	r3, #0
 8019424:	0d42      	lsrs	r2, r0, #21
 8019426:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801942a:	154b      	asrs	r3, r1, #21
 801942c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8019430:	1a14      	subs	r4, r2, r0
 8019432:	65bc      	str	r4, [r7, #88]	; 0x58
 8019434:	eb63 0301 	sbc.w	r3, r3, r1
 8019438:	65fb      	str	r3, [r7, #92]	; 0x5c
 801943a:	f04f 0200 	mov.w	r2, #0
 801943e:	f04f 0300 	mov.w	r3, #0
 8019442:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8019446:	4621      	mov	r1, r4
 8019448:	0bca      	lsrs	r2, r1, #15
 801944a:	4629      	mov	r1, r5
 801944c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8019450:	4629      	mov	r1, r5
 8019452:	13cb      	asrs	r3, r1, #15
 8019454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019456:	601a      	str	r2, [r3, #0]
}
 8019458:	bf00      	nop
 801945a:	37a8      	adds	r7, #168	; 0xa8
 801945c:	46bd      	mov	sp, r7
 801945e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019462:	bf00      	nop
 8019464:	fffffa24 	.word	0xfffffa24

08019468 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b08a      	sub	sp, #40	; 0x28
 801946c:	af02      	add	r7, sp, #8
 801946e:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	68db      	ldr	r3, [r3, #12]
 8019474:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 8019476:	2301      	movs	r3, #1
 8019478:	83fb      	strh	r3, [r7, #30]
	static uint32_t start_time;
	int32_t pressure;
	float temperature;

	switch (p_owner->__state) {
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019480:	3b01      	subs	r3, #1
 8019482:	2b04      	cmp	r3, #4
 8019484:	f200 80b1 	bhi.w	80195ea <_doTask+0x182>
 8019488:	a201      	add	r2, pc, #4	; (adr r2, 8019490 <_doTask+0x28>)
 801948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801948e:	bf00      	nop
 8019490:	080194a5 	.word	0x080194a5
 8019494:	080194e7 	.word	0x080194e7
 8019498:	0801951d 	.word	0x0801951d
 801949c:	08019557 	.word	0x08019557
 80194a0:	0801958d 	.word	0x0801958d
	case MS5611_STATE_TEMPERATURE_START:
		start_time = pif_cumulative_timer1ms;
 80194a4:	4b54      	ldr	r3, [pc, #336]	; (80195f8 <_doTask+0x190>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	4a54      	ldr	r2, [pc, #336]	; (80195fc <_doTask+0x194>)
 80194aa:	6013      	str	r3, [r2, #0]
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 80194ac:	69bb      	ldr	r3, [r7, #24]
 80194ae:	8b1b      	ldrh	r3, [r3, #24]
 80194b0:	b2db      	uxtb	r3, r3
 80194b2:	3350      	adds	r3, #80	; 0x50
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 80194b8:	69bb      	ldr	r3, [r7, #24]
 80194ba:	6858      	ldr	r0, [r3, #4]
 80194bc:	f107 0314 	add.w	r3, r7, #20
 80194c0:	2201      	movs	r2, #1
 80194c2:	9200      	str	r2, [sp, #0]
 80194c4:	2200      	movs	r2, #0
 80194c6:	2100      	movs	r1, #0
 80194c8:	f7f9 f912 	bl	80126f0 <pifI2cDevice_Write>
 80194cc:	4603      	mov	r3, r0
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d101      	bne.n	80194d6 <_doTask+0x6e>
 80194d2:	2301      	movs	r3, #1
 80194d4:	e08b      	b.n	80195ee <_doTask+0x186>
		p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 80194d6:	69bb      	ldr	r3, [r7, #24]
 80194d8:	2202      	movs	r2, #2
 80194da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	7e9b      	ldrb	r3, [r3, #26]
 80194e2:	83fb      	strh	r3, [r7, #30]
		break;
 80194e4:	e082      	b.n	80195ec <_doTask+0x184>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	6858      	ldr	r0, [r3, #4]
 80194ea:	f107 0214 	add.w	r2, r7, #20
 80194ee:	2303      	movs	r3, #3
 80194f0:	2100      	movs	r1, #0
 80194f2:	f7f9 f8b3 	bl	801265c <pifI2cDevice_ReadRegBytes>
 80194f6:	4603      	mov	r3, r0
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d101      	bne.n	8019500 <_doTask+0x98>
 80194fc:	2301      	movs	r3, #1
 80194fe:	e076      	b.n	80195ee <_doTask+0x186>
		p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 8019500:	7d3b      	ldrb	r3, [r7, #20]
 8019502:	041b      	lsls	r3, r3, #16
 8019504:	7d7a      	ldrb	r2, [r7, #21]
 8019506:	0212      	lsls	r2, r2, #8
 8019508:	4413      	add	r3, r2
 801950a:	7dba      	ldrb	r2, [r7, #22]
 801950c:	441a      	add	r2, r3
 801950e:	69bb      	ldr	r3, [r7, #24]
 8019510:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__state = MS5611_STATE_PRESSURE_START;
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	2203      	movs	r2, #3
 8019516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801951a:	e067      	b.n	80195ec <_doTask+0x184>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801951c:	69bb      	ldr	r3, [r7, #24]
 801951e:	8b1b      	ldrh	r3, [r3, #24]
 8019520:	b2db      	uxtb	r3, r3
 8019522:	3340      	adds	r3, #64	; 0x40
 8019524:	b2db      	uxtb	r3, r3
 8019526:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 8019528:	69bb      	ldr	r3, [r7, #24]
 801952a:	6858      	ldr	r0, [r3, #4]
 801952c:	f107 0314 	add.w	r3, r7, #20
 8019530:	2201      	movs	r2, #1
 8019532:	9200      	str	r2, [sp, #0]
 8019534:	2200      	movs	r2, #0
 8019536:	2100      	movs	r1, #0
 8019538:	f7f9 f8da 	bl	80126f0 <pifI2cDevice_Write>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d101      	bne.n	8019546 <_doTask+0xde>
 8019542:	2301      	movs	r3, #1
 8019544:	e053      	b.n	80195ee <_doTask+0x186>
		p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 8019546:	69bb      	ldr	r3, [r7, #24]
 8019548:	2204      	movs	r2, #4
 801954a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	7e9b      	ldrb	r3, [r3, #26]
 8019552:	83fb      	strh	r3, [r7, #30]
		break;
 8019554:	e04a      	b.n	80195ec <_doTask+0x184>

	case MS5611_STATE_PRESSURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 8019556:	69bb      	ldr	r3, [r7, #24]
 8019558:	6858      	ldr	r0, [r3, #4]
 801955a:	f107 0214 	add.w	r2, r7, #20
 801955e:	2303      	movs	r3, #3
 8019560:	2100      	movs	r1, #0
 8019562:	f7f9 f87b 	bl	801265c <pifI2cDevice_ReadRegBytes>
 8019566:	4603      	mov	r3, r0
 8019568:	2b00      	cmp	r3, #0
 801956a:	d101      	bne.n	8019570 <_doTask+0x108>
 801956c:	2301      	movs	r3, #1
 801956e:	e03e      	b.n	80195ee <_doTask+0x186>
		p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 8019570:	7d3b      	ldrb	r3, [r7, #20]
 8019572:	041b      	lsls	r3, r3, #16
 8019574:	7d7a      	ldrb	r2, [r7, #21]
 8019576:	0212      	lsls	r2, r2, #8
 8019578:	4413      	add	r3, r2
 801957a:	7dba      	ldrb	r2, [r7, #22]
 801957c:	441a      	add	r2, r3
 801957e:	69bb      	ldr	r3, [r7, #24]
 8019580:	625a      	str	r2, [r3, #36]	; 0x24
		p_owner->__state = MS5611_STATE_CALCURATE;
 8019582:	69bb      	ldr	r3, [r7, #24]
 8019584:	2205      	movs	r2, #5
 8019586:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801958a:	e02f      	b.n	80195ec <_doTask+0x184>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801958c:	f107 020c 	add.w	r2, r7, #12
 8019590:	f107 0310 	add.w	r3, r7, #16
 8019594:	4619      	mov	r1, r3
 8019596:	69b8      	ldr	r0, [r7, #24]
 8019598:	f7ff fd68 	bl	801906c <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801959c:	69bb      	ldr	r3, [r7, #24]
 801959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d008      	beq.n	80195b6 <_doTask+0x14e>
 80195a4:	69bb      	ldr	r3, [r7, #24]
 80195a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195a8:	693a      	ldr	r2, [r7, #16]
 80195aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80195ae:	eeb0 0a67 	vmov.f32	s0, s15
 80195b2:	4610      	mov	r0, r2
 80195b4:	4798      	blx	r3
		if (pif_cumulative_timer1ms - start_time < p_owner->__read_period) {
 80195b6:	4b10      	ldr	r3, [pc, #64]	; (80195f8 <_doTask+0x190>)
 80195b8:	681a      	ldr	r2, [r3, #0]
 80195ba:	4b10      	ldr	r3, [pc, #64]	; (80195fc <_doTask+0x194>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	1ad3      	subs	r3, r2, r3
 80195c0:	69ba      	ldr	r2, [r7, #24]
 80195c2:	8c12      	ldrh	r2, [r2, #32]
 80195c4:	4293      	cmp	r3, r2
 80195c6:	d20b      	bcs.n	80195e0 <_doTask+0x178>
			delay = p_owner->__read_period - (pif_cumulative_timer1ms - start_time);
 80195c8:	69bb      	ldr	r3, [r7, #24]
 80195ca:	8c1a      	ldrh	r2, [r3, #32]
 80195cc:	4b0b      	ldr	r3, [pc, #44]	; (80195fc <_doTask+0x194>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	b299      	uxth	r1, r3
 80195d2:	4b09      	ldr	r3, [pc, #36]	; (80195f8 <_doTask+0x190>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	1acb      	subs	r3, r1, r3
 80195da:	b29b      	uxth	r3, r3
 80195dc:	4413      	add	r3, r2
 80195de:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 80195e0:	69bb      	ldr	r3, [r7, #24]
 80195e2:	2201      	movs	r2, #1
 80195e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 80195e8:	e000      	b.n	80195ec <_doTask+0x184>

	default:
		break;
 80195ea:	bf00      	nop
	}
	return delay;
 80195ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	3720      	adds	r7, #32
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	2000136c 	.word	0x2000136c
 80195fc:	200014f0 	.word	0x200014f0

08019600 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b086      	sub	sp, #24
 8019604:	af00      	add	r7, sp, #0
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	607a      	str	r2, [r7, #4]
 801960a:	461a      	mov	r2, r3
 801960c:	460b      	mov	r3, r1
 801960e:	817b      	strh	r3, [r7, #10]
 8019610:	4613      	mov	r3, r2
 8019612:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d002      	beq.n	8019620 <pifMs5611_Init+0x20>
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d104      	bne.n	801962a <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 8019620:	4b33      	ldr	r3, [pc, #204]	; (80196f0 <pifMs5611_Init+0xf0>)
 8019622:	2201      	movs	r2, #1
 8019624:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019626:	2300      	movs	r3, #0
 8019628:	e05e      	b.n	80196e8 <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801962a:	2230      	movs	r2, #48	; 0x30
 801962c:	2100      	movs	r1, #0
 801962e:	68f8      	ldr	r0, [r7, #12]
 8019630:	f008 fa62 	bl	8021af8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	f7f8 fef5 	bl	8012424 <pifI2cPort_AddDevice>
 801963a:	4602      	mov	r2, r0
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d101      	bne.n	801964c <pifMs5611_Init+0x4c>
 8019648:	2300      	movs	r3, #0
 801964a:	e04d      	b.n	80196e8 <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	7a7a      	ldrb	r2, [r7, #9]
 8019652:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	685b      	ldr	r3, [r3, #4]
 8019658:	2200      	movs	r2, #0
 801965a:	211e      	movs	r1, #30
 801965c:	4618      	mov	r0, r3
 801965e:	f7f9 f8f3 	bl	8012848 <pifI2cDevice_WriteRegByte>
 8019662:	4603      	mov	r3, r0
 8019664:	2b00      	cmp	r3, #0
 8019666:	d036      	beq.n	80196d6 <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 8019668:	2064      	movs	r0, #100	; 0x64
 801966a:	f7fb fa41 	bl	8014af0 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801966e:	2300      	movs	r3, #0
 8019670:	617b      	str	r3, [r7, #20]
 8019672:	e014      	b.n	801969e <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	6858      	ldr	r0, [r3, #4]
 8019678:	697b      	ldr	r3, [r7, #20]
 801967a:	3350      	adds	r3, #80	; 0x50
 801967c:	b2db      	uxtb	r3, r3
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	b2d9      	uxtb	r1, r3
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	3304      	adds	r3, #4
 8019686:	005b      	lsls	r3, r3, #1
 8019688:	68fa      	ldr	r2, [r7, #12]
 801968a:	4413      	add	r3, r2
 801968c:	461a      	mov	r2, r3
 801968e:	f7f8 ffc1 	bl	8012614 <pifI2cDevice_ReadRegWord>
 8019692:	4603      	mov	r3, r0
 8019694:	2b00      	cmp	r3, #0
 8019696:	d020      	beq.n	80196da <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 8019698:	697b      	ldr	r3, [r7, #20]
 801969a:	3301      	adds	r3, #1
 801969c:	617b      	str	r3, [r7, #20]
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	2b07      	cmp	r3, #7
 80196a2:	dde7      	ble.n	8019674 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 80196a4:	68f8      	ldr	r0, [r7, #12]
 80196a6:	f7ff fc63 	bl	8018f70 <_checkPromCrc>
 80196aa:	4603      	mov	r3, r0
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d016      	beq.n	80196de <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 80196b0:	2104      	movs	r1, #4
 80196b2:	68f8      	ldr	r0, [r7, #12]
 80196b4:	f000 f844 	bl	8019740 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80196b8:	897b      	ldrh	r3, [r7, #10]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d106      	bne.n	80196cc <pifMs5611_Init+0xcc>
 80196be:	4b0d      	ldr	r3, [pc, #52]	; (80196f4 <pifMs5611_Init+0xf4>)
 80196c0:	881b      	ldrh	r3, [r3, #0]
 80196c2:	1c5a      	adds	r2, r3, #1
 80196c4:	b291      	uxth	r1, r2
 80196c6:	4a0b      	ldr	r2, [pc, #44]	; (80196f4 <pifMs5611_Init+0xf4>)
 80196c8:	8011      	strh	r1, [r2, #0]
 80196ca:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	897a      	ldrh	r2, [r7, #10]
 80196d0:	801a      	strh	r2, [r3, #0]
    return TRUE;
 80196d2:	2301      	movs	r3, #1
 80196d4:	e008      	b.n	80196e8 <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 80196d6:	bf00      	nop
 80196d8:	e002      	b.n	80196e0 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 80196da:	bf00      	nop
 80196dc:	e000      	b.n	80196e0 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 80196de:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 80196e0:	68f8      	ldr	r0, [r7, #12]
 80196e2:	f000 f809 	bl	80196f8 <pifMs5611_Clear>
	return FALSE;
 80196e6:	2300      	movs	r3, #0
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3718      	adds	r7, #24
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	20001365 	.word	0x20001365
 80196f4:	2000005c 	.word	0x2000005c

080196f8 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	69db      	ldr	r3, [r3, #28]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d007      	beq.n	8019718 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	69db      	ldr	r3, [r3, #28]
 801970c:	4618      	mov	r0, r3
 801970e:	f7fb f8e9 	bl	80148e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2200      	movs	r2, #0
 8019716:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d00b      	beq.n	8019738 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	685b      	ldr	r3, [r3, #4]
 8019724:	685a      	ldr	r2, [r3, #4]
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	4619      	mov	r1, r3
 801972c:	4610      	mov	r0, r2
 801972e:	f7f8 fe9d 	bl	801246c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	2200      	movs	r2, #0
 8019736:	605a      	str	r2, [r3, #4]
	}
}
 8019738:	bf00      	nop
 801973a:	3708      	adds	r7, #8
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 8019740:	b480      	push	{r7}
 8019742:	b083      	sub	sp, #12
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
 8019748:	460b      	mov	r3, r1
 801974a:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	887a      	ldrh	r2, [r7, #2]
 8019750:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 8019752:	887b      	ldrh	r3, [r7, #2]
 8019754:	2b08      	cmp	r3, #8
 8019756:	d829      	bhi.n	80197ac <pifMs5611_SetOverSamplingRate+0x6c>
 8019758:	a201      	add	r2, pc, #4	; (adr r2, 8019760 <pifMs5611_SetOverSamplingRate+0x20>)
 801975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801975e:	bf00      	nop
 8019760:	08019785 	.word	0x08019785
 8019764:	080197ad 	.word	0x080197ad
 8019768:	0801978d 	.word	0x0801978d
 801976c:	080197ad 	.word	0x080197ad
 8019770:	08019795 	.word	0x08019795
 8019774:	080197ad 	.word	0x080197ad
 8019778:	0801979d 	.word	0x0801979d
 801977c:	080197ad 	.word	0x080197ad
 8019780:	080197a5 	.word	0x080197a5
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2202      	movs	r2, #2
 8019788:	769a      	strb	r2, [r3, #26]
 801978a:	e00f      	b.n	80197ac <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2203      	movs	r2, #3
 8019790:	769a      	strb	r2, [r3, #26]
 8019792:	e00b      	b.n	80197ac <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	2204      	movs	r2, #4
 8019798:	769a      	strb	r2, [r3, #26]
 801979a:	e007      	b.n	80197ac <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2206      	movs	r2, #6
 80197a0:	769a      	strb	r2, [r3, #26]
 80197a2:	e003      	b.n	80197ac <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	220b      	movs	r2, #11
 80197a8:	769a      	strb	r2, [r3, #26]
 80197aa:	bf00      	nop
	}
}
 80197ac:	bf00      	nop
 80197ae:	370c      	adds	r7, #12
 80197b0:	46bd      	mov	sp, r7
 80197b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b6:	4770      	bx	lr

080197b8 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtMs5611Read evt_read)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b086      	sub	sp, #24
 80197bc:	af02      	add	r7, sp, #8
 80197be:	60f8      	str	r0, [r7, #12]
 80197c0:	460b      	mov	r3, r1
 80197c2:	607a      	str	r2, [r7, #4]
 80197c4:	817b      	strh	r3, [r7, #10]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 10, _doTask, p_owner, FALSE);
 80197c6:	2300      	movs	r3, #0
 80197c8:	9300      	str	r3, [sp, #0]
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	4a0e      	ldr	r2, [pc, #56]	; (8019808 <pifMs5611_AddTaskForReading+0x50>)
 80197ce:	210a      	movs	r1, #10
 80197d0:	2004      	movs	r0, #4
 80197d2:	f7fb f835 	bl	8014840 <pifTaskManager_Add>
 80197d6:	4602      	mov	r2, r0
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	69db      	ldr	r3, [r3, #28]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d101      	bne.n	80197e8 <pifMs5611_AddTaskForReading+0x30>
 80197e4:	2300      	movs	r3, #0
 80197e6:	e00a      	b.n	80197fe <pifMs5611_AddTaskForReading+0x46>

    p_owner->__read_period = read_period;
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	897a      	ldrh	r2, [r7, #10]
 80197ec:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	687a      	ldr	r2, [r7, #4]
 80197f2:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	2201      	movs	r2, #1
 80197f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 80197fc:	2301      	movs	r3, #1
}
 80197fe:	4618      	mov	r0, r3
 8019800:	3710      	adds	r7, #16
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}
 8019806:	bf00      	nop
 8019808:	08019469 	.word	0x08019469

0801980c <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b086      	sub	sp, #24
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	68db      	ldr	r3, [r3, #12]
 8019818:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801981a:	2300      	movs	r3, #0
 801981c:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801981e:	693b      	ldr	r3, [r7, #16]
 8019820:	691b      	ldr	r3, [r3, #16]
 8019822:	693a      	ldr	r2, [r7, #16]
 8019824:	7d12      	ldrb	r2, [r2, #20]
 8019826:	4413      	add	r3, r2
 8019828:	781b      	ldrb	r3, [r3, #0]
 801982a:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	7b1b      	ldrb	r3, [r3, #12]
 8019830:	3b01      	subs	r3, #1
 8019832:	2b03      	cmp	r3, #3
 8019834:	d87f      	bhi.n	8019936 <_doTask+0x12a>
 8019836:	a201      	add	r2, pc, #4	; (adr r2, 801983c <_doTask+0x30>)
 8019838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801983c:	0801984d 	.word	0x0801984d
 8019840:	0801986f 	.word	0x0801986f
 8019844:	08019891 	.word	0x08019891
 8019848:	08019903 	.word	0x08019903
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801984c:	693b      	ldr	r3, [r7, #16]
 801984e:	699b      	ldr	r3, [r3, #24]
 8019850:	693a      	ldr	r2, [r7, #16]
 8019852:	8892      	ldrh	r2, [r2, #4]
 8019854:	2101      	movs	r1, #1
 8019856:	4610      	mov	r0, r2
 8019858:	4798      	blx	r3
		p_owner->__pos++;
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	7d1b      	ldrb	r3, [r3, #20]
 801985e:	3301      	adds	r3, #1
 8019860:	b2da      	uxtb	r2, r3
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	2202      	movs	r2, #2
 801986a:	731a      	strb	r2, [r3, #12]
		break;
 801986c:	e064      	b.n	8019938 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801986e:	693b      	ldr	r3, [r7, #16]
 8019870:	699b      	ldr	r3, [r3, #24]
 8019872:	693a      	ldr	r2, [r7, #16]
 8019874:	8892      	ldrh	r2, [r2, #4]
 8019876:	2100      	movs	r1, #0
 8019878:	4610      	mov	r0, r2
 801987a:	4798      	blx	r3
		p_owner->__pos++;
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	7d1b      	ldrb	r3, [r3, #20]
 8019880:	3301      	adds	r3, #1
 8019882:	b2da      	uxtb	r2, r3
 8019884:	693b      	ldr	r3, [r7, #16]
 8019886:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	2203      	movs	r2, #3
 801988c:	731a      	strb	r2, [r3, #12]
		break;
 801988e:	e053      	b.n	8019938 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 8019890:	89fb      	ldrh	r3, [r7, #14]
 8019892:	2bef      	cmp	r3, #239	; 0xef
 8019894:	d810      	bhi.n	80198b8 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	699b      	ldr	r3, [r3, #24]
 801989a:	693a      	ldr	r2, [r7, #16]
 801989c:	8892      	ldrh	r2, [r2, #4]
 801989e:	2101      	movs	r1, #1
 80198a0:	4610      	mov	r0, r2
 80198a2:	4798      	blx	r3
			p_owner->__pos++;
 80198a4:	693b      	ldr	r3, [r7, #16]
 80198a6:	7d1b      	ldrb	r3, [r3, #20]
 80198a8:	3301      	adds	r3, #1
 80198aa:	b2da      	uxtb	r2, r3
 80198ac:	693b      	ldr	r3, [r7, #16]
 80198ae:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 80198b0:	693b      	ldr	r3, [r7, #16]
 80198b2:	2202      	movs	r2, #2
 80198b4:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 80198b6:	e03f      	b.n	8019938 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 80198b8:	89fb      	ldrh	r3, [r7, #14]
 80198ba:	2bf0      	cmp	r3, #240	; 0xf0
 80198bc:	d105      	bne.n	80198ca <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 80198be:	693b      	ldr	r3, [r7, #16]
 80198c0:	2204      	movs	r2, #4
 80198c2:	731a      	strb	r2, [r3, #12]
			delay = 1;
 80198c4:	2301      	movs	r3, #1
 80198c6:	82fb      	strh	r3, [r7, #22]
		break;
 80198c8:	e036      	b.n	8019938 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 80198ca:	89fb      	ldrh	r3, [r7, #14]
 80198cc:	b2db      	uxtb	r3, r3
 80198ce:	3310      	adds	r3, #16
 80198d0:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 80198d2:	693b      	ldr	r3, [r7, #16]
 80198d4:	7d5b      	ldrb	r3, [r3, #21]
 80198d6:	7b7a      	ldrb	r2, [r7, #13]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d90c      	bls.n	80198f6 <_doTask+0xea>
				p_owner->__pos = 0;
 80198dc:	693b      	ldr	r3, [r7, #16]
 80198de:	2200      	movs	r2, #0
 80198e0:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 80198e2:	693b      	ldr	r3, [r7, #16]
 80198e4:	7d5b      	ldrb	r3, [r3, #21]
 80198e6:	3301      	adds	r3, #1
 80198e8:	b2da      	uxtb	r2, r3
 80198ea:	693b      	ldr	r3, [r7, #16]
 80198ec:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 80198ee:	693b      	ldr	r3, [r7, #16]
 80198f0:	2201      	movs	r2, #1
 80198f2:	731a      	strb	r2, [r3, #12]
 80198f4:	e002      	b.n	80198fc <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	2204      	movs	r2, #4
 80198fa:	731a      	strb	r2, [r3, #12]
			delay = 1;
 80198fc:	2301      	movs	r3, #1
 80198fe:	82fb      	strh	r3, [r7, #22]
		break;
 8019900:	e01a      	b.n	8019938 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 8019902:	693b      	ldr	r3, [r7, #16]
 8019904:	699b      	ldr	r3, [r3, #24]
 8019906:	693a      	ldr	r2, [r7, #16]
 8019908:	8892      	ldrh	r2, [r2, #4]
 801990a:	2100      	movs	r1, #0
 801990c:	4610      	mov	r0, r2
 801990e:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 8019910:	693b      	ldr	r3, [r7, #16]
 8019912:	2200      	movs	r2, #0
 8019914:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 8019916:	693b      	ldr	r3, [r7, #16]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d005      	beq.n	801992a <_doTask+0x11e>
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	693a      	ldr	r2, [r7, #16]
 8019924:	8892      	ldrh	r2, [r2, #4]
 8019926:	4610      	mov	r0, r2
 8019928:	4798      	blx	r3
		delay = 1;
 801992a:	2301      	movs	r3, #1
 801992c:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2201      	movs	r2, #1
 8019932:	701a      	strb	r2, [r3, #0]
		break;
 8019934:	e000      	b.n	8019938 <_doTask+0x12c>

	default:
		break;
 8019936:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 8019938:	8afb      	ldrh	r3, [r7, #22]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d106      	bne.n	801994c <_doTask+0x140>
 801993e:	89fb      	ldrh	r3, [r7, #14]
 8019940:	461a      	mov	r2, r3
 8019942:	0092      	lsls	r2, r2, #2
 8019944:	4413      	add	r3, r2
 8019946:	005b      	lsls	r3, r3, #1
 8019948:	b29b      	uxth	r3, r3
 801994a:	e000      	b.n	801994e <_doTask+0x142>
 801994c:	8afb      	ldrh	r3, [r7, #22]
}
 801994e:	4618      	mov	r0, r3
 8019950:	3718      	adds	r7, #24
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop

08019958 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b086      	sub	sp, #24
 801995c:	af02      	add	r7, sp, #8
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	460b      	mov	r3, r1
 8019962:	607a      	str	r2, [r7, #4]
 8019964:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d002      	beq.n	8019972 <pifBuzzer_Init+0x1a>
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d104      	bne.n	801997c <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 8019972:	4b18      	ldr	r3, [pc, #96]	; (80199d4 <pifBuzzer_Init+0x7c>)
 8019974:	2201      	movs	r2, #1
 8019976:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019978:	2300      	movs	r3, #0
 801997a:	e026      	b.n	80199ca <pifBuzzer_Init+0x72>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801997c:	221c      	movs	r2, #28
 801997e:	2100      	movs	r1, #0
 8019980:	68f8      	ldr	r0, [r7, #12]
 8019982:	f008 f8b9 	bl	8021af8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 8019986:	2300      	movs	r3, #0
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	4a12      	ldr	r2, [pc, #72]	; (80199d8 <pifBuzzer_Init+0x80>)
 801998e:	2101      	movs	r1, #1
 8019990:	2004      	movs	r0, #4
 8019992:	f7fa ff55 	bl	8014840 <pifTaskManager_Add>
 8019996:	4602      	mov	r2, r0
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	689b      	ldr	r3, [r3, #8]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d101      	bne.n	80199a8 <pifBuzzer_Init+0x50>
 80199a4:	2300      	movs	r3, #0
 80199a6:	e010      	b.n	80199ca <pifBuzzer_Init+0x72>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80199a8:	897b      	ldrh	r3, [r7, #10]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d106      	bne.n	80199bc <pifBuzzer_Init+0x64>
 80199ae:	4b0b      	ldr	r3, [pc, #44]	; (80199dc <pifBuzzer_Init+0x84>)
 80199b0:	881b      	ldrh	r3, [r3, #0]
 80199b2:	1c5a      	adds	r2, r3, #1
 80199b4:	b291      	uxth	r1, r2
 80199b6:	4a09      	ldr	r2, [pc, #36]	; (80199dc <pifBuzzer_Init+0x84>)
 80199b8:	8011      	strh	r1, [r2, #0]
 80199ba:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	897a      	ldrh	r2, [r7, #10]
 80199c0:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	619a      	str	r2, [r3, #24]
    return TRUE;
 80199c8:	2301      	movs	r3, #1
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3710      	adds	r7, #16
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	20001365 	.word	0x20001365
 80199d8:	0801980d 	.word	0x0801980d
 80199dc:	2000005c 	.word	0x2000005c

080199e0 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 80199e0:	b480      	push	{r7}
 80199e2:	b083      	sub	sp, #12
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
 80199e8:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	689b      	ldr	r3, [r3, #8]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d101      	bne.n	80199f6 <pifBuzzer_Start+0x16>
 80199f2:	2300      	movs	r3, #0
 80199f4:	e010      	b.n	8019a18 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	683a      	ldr	r2, [r7, #0]
 80199fa:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2200      	movs	r2, #0
 8019a06:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	2201      	movs	r2, #1
 8019a0c:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	689b      	ldr	r3, [r3, #8]
 8019a12:	2200      	movs	r2, #0
 8019a14:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8019a16:	2301      	movs	r3, #1
}
 8019a18:	4618      	mov	r0, r3
 8019a1a:	370c      	adds	r7, #12
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a22:	4770      	bx	lr

08019a24 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 8019a24:	b480      	push	{r7}
 8019a26:	b083      	sub	sp, #12
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2204      	movs	r2, #4
 8019a30:	731a      	strb	r2, [r3, #12]
}
 8019a32:	bf00      	nop
 8019a34:	370c      	adds	r7, #12
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr

08019a3e <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019a3e:	b580      	push	{r7, lr}
 8019a40:	b086      	sub	sp, #24
 8019a42:	af02      	add	r7, sp, #8
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	60b9      	str	r1, [r7, #8]
 8019a48:	607a      	str	r2, [r7, #4]
 8019a4a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	7a19      	ldrb	r1, [r3, #8]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	0a1b      	lsrs	r3, r3, #8
 8019a54:	b2da      	uxtb	r2, r3
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	430a      	orrs	r2, r1
 8019a5c:	b2d2      	uxtb	r2, r2
 8019a5e:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	6858      	ldr	r0, [r3, #4]
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	b2d9      	uxtb	r1, r3
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	9300      	str	r3, [sp, #0]
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	2201      	movs	r2, #1
 8019a70:	f7f8 fd10 	bl	8012494 <pifI2cDevice_Read>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d101      	bne.n	8019a7e <_actStorageI2c_Read_1+0x40>
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	e000      	b.n	8019a80 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 8019a7e:	2301      	movs	r3, #1
}
 8019a80:	4618      	mov	r0, r3
 8019a82:	3710      	adds	r7, #16
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}

08019a88 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b086      	sub	sp, #24
 8019a8c:	af02      	add	r7, sp, #8
 8019a8e:	60f8      	str	r0, [r7, #12]
 8019a90:	60b9      	str	r1, [r7, #8]
 8019a92:	607a      	str	r2, [r7, #4]
 8019a94:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	7a19      	ldrb	r1, [r3, #8]
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	0a1b      	lsrs	r3, r3, #8
 8019a9e:	b2da      	uxtb	r2, r3
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	430a      	orrs	r2, r1
 8019aa6:	b2d2      	uxtb	r2, r2
 8019aa8:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	6858      	ldr	r0, [r3, #4]
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	b2d9      	uxtb	r1, r3
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	2201      	movs	r2, #1
 8019aba:	f7f8 fe19 	bl	80126f0 <pifI2cDevice_Write>
 8019abe:	4603      	mov	r3, r0
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d101      	bne.n	8019ac8 <_actStorageI2c_Write_1+0x40>
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	e009      	b.n	8019adc <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	7a5b      	ldrb	r3, [r3, #9]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d004      	beq.n	8019ada <_actStorageI2c_Write_1+0x52>
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	7a5b      	ldrb	r3, [r3, #9]
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7fb f80b 	bl	8014af0 <pifTaskManager_YieldMs>
	return TRUE;
 8019ada:	2301      	movs	r3, #1
}
 8019adc:	4618      	mov	r0, r3
 8019ade:	3710      	adds	r7, #16
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bd80      	pop	{r7, pc}

08019ae4 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b086      	sub	sp, #24
 8019ae8:	af02      	add	r7, sp, #8
 8019aea:	60f8      	str	r0, [r7, #12]
 8019aec:	60b9      	str	r1, [r7, #8]
 8019aee:	607a      	str	r2, [r7, #4]
 8019af0:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	7a19      	ldrb	r1, [r3, #8]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	0c1b      	lsrs	r3, r3, #16
 8019afa:	b2da      	uxtb	r2, r3
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	685b      	ldr	r3, [r3, #4]
 8019b00:	430a      	orrs	r2, r1
 8019b02:	b2d2      	uxtb	r2, r2
 8019b04:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	6858      	ldr	r0, [r3, #4]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	b299      	uxth	r1, r3
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	9300      	str	r3, [sp, #0]
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	2202      	movs	r2, #2
 8019b16:	f7f8 fcbd 	bl	8012494 <pifI2cDevice_Read>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d101      	bne.n	8019b24 <_actStorageI2c_Read_2+0x40>
 8019b20:	2300      	movs	r3, #0
 8019b22:	e000      	b.n	8019b26 <_actStorageI2c_Read_2+0x42>
	return TRUE;
 8019b24:	2301      	movs	r3, #1
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b086      	sub	sp, #24
 8019b32:	af02      	add	r7, sp, #8
 8019b34:	60f8      	str	r0, [r7, #12]
 8019b36:	60b9      	str	r1, [r7, #8]
 8019b38:	607a      	str	r2, [r7, #4]
 8019b3a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	7a19      	ldrb	r1, [r3, #8]
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	0c1b      	lsrs	r3, r3, #16
 8019b44:	b2da      	uxtb	r2, r3
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	430a      	orrs	r2, r1
 8019b4c:	b2d2      	uxtb	r2, r2
 8019b4e:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	6858      	ldr	r0, [r3, #4]
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	b299      	uxth	r1, r3
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	9300      	str	r3, [sp, #0]
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2202      	movs	r2, #2
 8019b60:	f7f8 fdc6 	bl	80126f0 <pifI2cDevice_Write>
 8019b64:	4603      	mov	r3, r0
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d101      	bne.n	8019b6e <_actStorageI2c_Write_2+0x40>
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	e009      	b.n	8019b82 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	7a5b      	ldrb	r3, [r3, #9]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d004      	beq.n	8019b80 <_actStorageI2c_Write_2+0x52>
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	7a5b      	ldrb	r3, [r3, #9]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7fa ffb8 	bl	8014af0 <pifTaskManager_YieldMs>
	return TRUE;
 8019b80:	2301      	movs	r3, #1
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
	...

08019b8c <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	60f8      	str	r0, [r7, #12]
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	4611      	mov	r1, r2
 8019b98:	461a      	mov	r2, r3
 8019b9a:	460b      	mov	r3, r1
 8019b9c:	71fb      	strb	r3, [r7, #7]
 8019b9e:	4613      	mov	r3, r2
 8019ba0:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d002      	beq.n	8019bae <pifStorage_AttachI2c+0x22>
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d104      	bne.n	8019bb8 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 8019bae:	4b1c      	ldr	r3, [pc, #112]	; (8019c20 <pifStorage_AttachI2c+0x94>)
 8019bb0:	2201      	movs	r2, #1
 8019bb2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	e02f      	b.n	8019c18 <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 8019bb8:	68b8      	ldr	r0, [r7, #8]
 8019bba:	f7f8 fc33 	bl	8012424 <pifI2cPort_AddDevice>
 8019bbe:	4602      	mov	r2, r0
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	685b      	ldr	r3, [r3, #4]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <pifStorage_AttachI2c+0x44>
 8019bcc:	2300      	movs	r3, #0
 8019bce:	e023      	b.n	8019c18 <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	79fa      	ldrb	r2, [r7, #7]
 8019bd4:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	685b      	ldr	r3, [r3, #4]
 8019bda:	79fa      	ldrb	r2, [r7, #7]
 8019bdc:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	7e3a      	ldrb	r2, [r7, #24]
 8019be2:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 8019be4:	79bb      	ldrb	r3, [r7, #6]
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d007      	beq.n	8019bfa <pifStorage_AttachI2c+0x6e>
 8019bea:	2b02      	cmp	r3, #2
 8019bec:	d00c      	beq.n	8019c08 <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 8019bee:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 8019bf0:	68f8      	ldr	r0, [r7, #12]
 8019bf2:	f000 f81f 	bl	8019c34 <pifStorage_DetachI2c>
	return FALSE;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	e00e      	b.n	8019c18 <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	4a09      	ldr	r2, [pc, #36]	; (8019c24 <pifStorage_AttachI2c+0x98>)
 8019bfe:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	4a09      	ldr	r2, [pc, #36]	; (8019c28 <pifStorage_AttachI2c+0x9c>)
 8019c04:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019c06:	e006      	b.n	8019c16 <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	4a08      	ldr	r2, [pc, #32]	; (8019c2c <pifStorage_AttachI2c+0xa0>)
 8019c0c:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	4a07      	ldr	r2, [pc, #28]	; (8019c30 <pifStorage_AttachI2c+0xa4>)
 8019c12:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019c14:	bf00      	nop
	return TRUE;
 8019c16:	2301      	movs	r3, #1
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3710      	adds	r7, #16
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	20001365 	.word	0x20001365
 8019c24:	08019a3f 	.word	0x08019a3f
 8019c28:	08019a89 	.word	0x08019a89
 8019c2c:	08019ae5 	.word	0x08019ae5
 8019c30:	08019b2f 	.word	0x08019b2f

08019c34 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	685b      	ldr	r3, [r3, #4]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d00b      	beq.n	8019c5c <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	685b      	ldr	r3, [r3, #4]
 8019c48:	685a      	ldr	r2, [r3, #4]
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	685b      	ldr	r3, [r3, #4]
 8019c4e:	4619      	mov	r1, r3
 8019c50:	4610      	mov	r0, r2
 8019c52:	f7f8 fc0b 	bl	801246c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	2200      	movs	r2, #0
 8019c5a:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	2200      	movs	r2, #0
 8019c60:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2200      	movs	r2, #0
 8019c66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019c68:	bf00      	nop
 8019c6a:	3708      	adds	r7, #8
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}

08019c70 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	68db      	ldr	r3, [r3, #12]
 8019c7c:	6878      	ldr	r0, [r7, #4]
 8019c7e:	4798      	blx	r3
 8019c80:	4603      	mov	r3, r0
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3708      	adds	r7, #8
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}

08019c8a <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 8019c8a:	b580      	push	{r7, lr}
 8019c8c:	b082      	sub	sp, #8
 8019c8e:	af00      	add	r7, sp, #0
 8019c90:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	691b      	ldr	r3, [r3, #16]
 8019c96:	6878      	ldr	r0, [r7, #4]
 8019c98:	4798      	blx	r3
 8019c9a:	4603      	mov	r3, r0
}
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	3708      	adds	r7, #8
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	bd80      	pop	{r7, pc}

08019ca4 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b082      	sub	sp, #8
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	460b      	mov	r3, r1
 8019cae:	807b      	strh	r3, [r7, #2]
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	695b      	ldr	r3, [r3, #20]
 8019cb8:	883a      	ldrh	r2, [r7, #0]
 8019cba:	8879      	ldrh	r1, [r7, #2]
 8019cbc:	6878      	ldr	r0, [r7, #4]
 8019cbe:	4798      	blx	r3
 8019cc0:	4603      	mov	r3, r0
}
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	3708      	adds	r7, #8
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}

08019cca <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 8019cca:	b580      	push	{r7, lr}
 8019ccc:	b082      	sub	sp, #8
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	6078      	str	r0, [r7, #4]
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	69db      	ldr	r3, [r3, #28]
 8019cda:	887a      	ldrh	r2, [r7, #2]
 8019cdc:	4611      	mov	r1, r2
 8019cde:	6878      	ldr	r0, [r7, #4]
 8019ce0:	4798      	blx	r3
 8019ce2:	4603      	mov	r3, r0
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	3708      	adds	r7, #8
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	bd80      	pop	{r7, pc}

08019cec <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 8019cec:	b590      	push	{r4, r7, lr}
 8019cee:	b085      	sub	sp, #20
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	60f8      	str	r0, [r7, #12]
 8019cf4:	60b9      	str	r1, [r7, #8]
 8019cf6:	607a      	str	r2, [r7, #4]
 8019cf8:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	6a1c      	ldr	r4, [r3, #32]
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	687a      	ldr	r2, [r7, #4]
 8019d02:	68b9      	ldr	r1, [r7, #8]
 8019d04:	68f8      	ldr	r0, [r7, #12]
 8019d06:	47a0      	blx	r4
 8019d08:	4603      	mov	r3, r0
}
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	3714      	adds	r7, #20
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd90      	pop	{r4, r7, pc}

08019d12 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 8019d12:	b590      	push	{r4, r7, lr}
 8019d14:	b085      	sub	sp, #20
 8019d16:	af00      	add	r7, sp, #0
 8019d18:	60f8      	str	r0, [r7, #12]
 8019d1a:	60b9      	str	r1, [r7, #8]
 8019d1c:	607a      	str	r2, [r7, #4]
 8019d1e:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	687a      	ldr	r2, [r7, #4]
 8019d28:	68b9      	ldr	r1, [r7, #8]
 8019d2a:	68f8      	ldr	r0, [r7, #12]
 8019d2c:	47a0      	blx	r4
 8019d2e:	4603      	mov	r3, r0
}
 8019d30:	4618      	mov	r0, r3
 8019d32:	3714      	adds	r7, #20
 8019d34:	46bd      	mov	sp, r7
 8019d36:	bd90      	pop	{r4, r7, pc}

08019d38 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 8019d38:	b480      	push	{r7}
 8019d3a:	b085      	sub	sp, #20
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d44:	899b      	ldrh	r3, [r3, #12]
 8019d46:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 8019d48:	89fb      	ldrh	r3, [r7, #14]
 8019d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d4e:	4293      	cmp	r3, r2
 8019d50:	d105      	bne.n	8019d5e <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 8019d52:	4b0c      	ldr	r3, [pc, #48]	; (8019d84 <_getNewDataNode+0x4c>)
 8019d54:	2204      	movs	r2, #4
 8019d56:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 8019d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d5c:	e00c      	b.n	8019d78 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8019d62:	89fa      	ldrh	r2, [r7, #14]
 8019d64:	4613      	mov	r3, r2
 8019d66:	005b      	lsls	r3, r3, #1
 8019d68:	4413      	add	r3, r2
 8019d6a:	009b      	lsls	r3, r3, #2
 8019d6c:	18ca      	adds	r2, r1, r3
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d72:	88d2      	ldrh	r2, [r2, #6]
 8019d74:	819a      	strh	r2, [r3, #12]
	return node;
 8019d76:	89fb      	ldrh	r3, [r7, #14]
}
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3714      	adds	r7, #20
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d82:	4770      	bx	lr
 8019d84:	20001365 	.word	0x20001365

08019d88 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 8019d88:	b590      	push	{r4, r7, lr}
 8019d8a:	b087      	sub	sp, #28
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	607a      	str	r2, [r7, #4]
 8019d94:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 8019d96:	2300      	movs	r3, #0
 8019d98:	617b      	str	r3, [r7, #20]
	while (size) {
 8019d9a:	e01d      	b.n	8019dd8 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 8019d9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019d9e:	683a      	ldr	r2, [r7, #0]
 8019da0:	4293      	cmp	r3, r2
 8019da2:	bf28      	it	cs
 8019da4:	4613      	movcs	r3, r2
 8019da6:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8019dac:	68f8      	ldr	r0, [r7, #12]
 8019dae:	68ba      	ldr	r2, [r7, #8]
 8019db0:	697b      	ldr	r3, [r7, #20]
 8019db2:	18d1      	adds	r1, r2, r3
 8019db4:	687a      	ldr	r2, [r7, #4]
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	441a      	add	r2, r3
 8019dba:	693b      	ldr	r3, [r7, #16]
 8019dbc:	47a0      	blx	r4
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d101      	bne.n	8019dc8 <_readData+0x40>
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	e00b      	b.n	8019de0 <_readData+0x58>

		ptr += len;
 8019dc8:	697a      	ldr	r2, [r7, #20]
 8019dca:	693b      	ldr	r3, [r7, #16]
 8019dcc:	4413      	add	r3, r2
 8019dce:	617b      	str	r3, [r7, #20]
		size -= len;
 8019dd0:	683a      	ldr	r2, [r7, #0]
 8019dd2:	693b      	ldr	r3, [r7, #16]
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	603b      	str	r3, [r7, #0]
	while (size) {
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d1de      	bne.n	8019d9c <_readData+0x14>
	}
	return TRUE;
 8019dde:	2301      	movs	r3, #1
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	371c      	adds	r7, #28
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd90      	pop	{r4, r7, pc}

08019de8 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019de8:	b590      	push	{r4, r7, lr}
 8019dea:	b089      	sub	sp, #36	; 0x24
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	60f8      	str	r0, [r7, #12]
 8019df0:	60b9      	str	r1, [r7, #8]
 8019df2:	607a      	str	r2, [r7, #4]
 8019df4:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019dfa:	88db      	ldrh	r3, [r3, #6]
 8019dfc:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	61fb      	str	r3, [r7, #28]
	while (size) {
 8019e02:	e01d      	b.n	8019e40 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 8019e04:	8b7b      	ldrh	r3, [r7, #26]
 8019e06:	683a      	ldr	r2, [r7, #0]
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	bf28      	it	cs
 8019e0c:	4613      	movcs	r3, r2
 8019e0e:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8019e14:	68f8      	ldr	r0, [r7, #12]
 8019e16:	68ba      	ldr	r2, [r7, #8]
 8019e18:	69fb      	ldr	r3, [r7, #28]
 8019e1a:	18d1      	adds	r1, r2, r3
 8019e1c:	687a      	ldr	r2, [r7, #4]
 8019e1e:	69fb      	ldr	r3, [r7, #28]
 8019e20:	441a      	add	r2, r3
 8019e22:	697b      	ldr	r3, [r7, #20]
 8019e24:	47a0      	blx	r4
 8019e26:	4603      	mov	r3, r0
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d101      	bne.n	8019e30 <_writeData+0x48>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	e00b      	b.n	8019e48 <_writeData+0x60>

		ptr += len;
 8019e30:	69fa      	ldr	r2, [r7, #28]
 8019e32:	697b      	ldr	r3, [r7, #20]
 8019e34:	4413      	add	r3, r2
 8019e36:	61fb      	str	r3, [r7, #28]
		size -= len;
 8019e38:	683a      	ldr	r2, [r7, #0]
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	1ad3      	subs	r3, r2, r3
 8019e3e:	603b      	str	r3, [r7, #0]
	while (size) {
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d1de      	bne.n	8019e04 <_writeData+0x1c>
	}
	return TRUE;
 8019e46:	2301      	movs	r3, #1
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3724      	adds	r7, #36	; 0x24
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd90      	pop	{r4, r7, pc}

08019e50 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
 8019e58:	460b      	mov	r3, r1
 8019e5a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d104      	bne.n	8019e6c <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 8019e62:	4b18      	ldr	r3, [pc, #96]	; (8019ec4 <pifStorageVar_Init+0x74>)
 8019e64:	2201      	movs	r2, #1
 8019e66:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	e027      	b.n	8019ebc <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 8019e6c:	2248      	movs	r2, #72	; 0x48
 8019e6e:	2100      	movs	r1, #0
 8019e70:	6878      	ldr	r0, [r7, #4]
 8019e72:	f007 fe41 	bl	8021af8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8019e76:	887b      	ldrh	r3, [r7, #2]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d106      	bne.n	8019e8a <pifStorageVar_Init+0x3a>
 8019e7c:	4b12      	ldr	r3, [pc, #72]	; (8019ec8 <pifStorageVar_Init+0x78>)
 8019e7e:	881b      	ldrh	r3, [r3, #0]
 8019e80:	1c5a      	adds	r2, r3, #1
 8019e82:	b291      	uxth	r1, r2
 8019e84:	4a10      	ldr	r2, [pc, #64]	; (8019ec8 <pifStorageVar_Init+0x78>)
 8019e86:	8011      	strh	r1, [r2, #0]
 8019e88:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	887a      	ldrh	r2, [r7, #2]
 8019e8e:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	4a0e      	ldr	r2, [pc, #56]	; (8019ecc <pifStorageVar_Init+0x7c>)
 8019e94:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	4a0d      	ldr	r2, [pc, #52]	; (8019ed0 <pifStorageVar_Init+0x80>)
 8019e9a:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	4a0d      	ldr	r2, [pc, #52]	; (8019ed4 <pifStorageVar_Init+0x84>)
 8019ea0:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	4a0c      	ldr	r2, [pc, #48]	; (8019ed8 <pifStorageVar_Init+0x88>)
 8019ea6:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	4a0c      	ldr	r2, [pc, #48]	; (8019edc <pifStorageVar_Init+0x8c>)
 8019eac:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	4a0b      	ldr	r2, [pc, #44]	; (8019ee0 <pifStorageVar_Init+0x90>)
 8019eb2:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	4a0b      	ldr	r2, [pc, #44]	; (8019ee4 <pifStorageVar_Init+0x94>)
 8019eb8:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 8019eba:	2301      	movs	r3, #1
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3708      	adds	r7, #8
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	20001365 	.word	0x20001365
 8019ec8:	2000005c 	.word	0x2000005c
 8019ecc:	0801a113 	.word	0x0801a113
 8019ed0:	0801a12d 	.word	0x0801a12d
 8019ed4:	0801a2d1 	.word	0x0801a2d1
 8019ed8:	0801a57d 	.word	0x0801a57d
 8019edc:	0801a699 	.word	0x0801a699
 8019ee0:	0801a72d 	.word	0x0801a72d
 8019ee4:	0801a785 	.word	0x0801a785

08019ee8 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b082      	sub	sp, #8
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d007      	beq.n	8019f08 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019efc:	4618      	mov	r0, r3
 8019efe:	f007 fde5 	bl	8021acc <free>
        p_owner->__p_info_buffer = NULL;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2200      	movs	r2, #0
 8019f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	2200      	movs	r2, #0
 8019f12:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2200      	movs	r2, #0
 8019f18:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	2200      	movs	r2, #0
 8019f24:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	2200      	movs	r2, #0
 8019f2a:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2200      	movs	r2, #0
 8019f30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8019f32:	bf00      	nop
 8019f34:	3708      	adds	r7, #8
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
	...

08019f3c <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 8019f3c:	b590      	push	{r4, r7, lr}
 8019f3e:	b089      	sub	sp, #36	; 0x24
 8019f40:	af02      	add	r7, sp, #8
 8019f42:	60f8      	str	r0, [r7, #12]
 8019f44:	607a      	str	r2, [r7, #4]
 8019f46:	461a      	mov	r2, r3
 8019f48:	460b      	mov	r3, r1
 8019f4a:	817b      	strh	r3, [r7, #10]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d008      	beq.n	8019f68 <pifStorageVar_SetMedia+0x2c>
 8019f56:	897b      	ldrh	r3, [r7, #10]
 8019f58:	2b0f      	cmp	r3, #15
 8019f5a:	d905      	bls.n	8019f68 <pifStorageVar_SetMedia+0x2c>
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d002      	beq.n	8019f68 <pifStorageVar_SetMedia+0x2c>
 8019f62:	7a7b      	ldrb	r3, [r7, #9]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d104      	bne.n	8019f72 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 8019f68:	4b5c      	ldr	r3, [pc, #368]	; (801a0dc <pifStorageVar_SetMedia+0x1a0>)
 8019f6a:	2201      	movs	r2, #1
 8019f6c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019f6e:	2300      	movs	r3, #0
 8019f70:	e0af      	b.n	801a0d2 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 8019f72:	897b      	ldrh	r3, [r7, #10]
 8019f74:	687a      	ldr	r2, [r7, #4]
 8019f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f7a:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 8019f7c:	697b      	ldr	r3, [r7, #20]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d003      	beq.n	8019f8a <pifStorageVar_SetMedia+0x4e>
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f88:	d304      	bcc.n	8019f94 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 8019f8a:	4b54      	ldr	r3, [pc, #336]	; (801a0dc <pifStorageVar_SetMedia+0x1a0>)
 8019f8c:	2201      	movs	r2, #1
 8019f8e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019f90:	2300      	movs	r3, #0
 8019f92:	e09e      	b.n	801a0d2 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 8019f94:	7a7a      	ldrb	r2, [r7, #9]
 8019f96:	4613      	mov	r3, r2
 8019f98:	005b      	lsls	r3, r3, #1
 8019f9a:	4413      	add	r3, r2
 8019f9c:	009b      	lsls	r3, r3, #2
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	897b      	ldrh	r3, [r7, #10]
 8019fa2:	4413      	add	r3, r2
 8019fa4:	f103 020f 	add.w	r2, r3, #15
 8019fa8:	897b      	ldrh	r3, [r7, #10]
 8019faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8019fb8:	461a      	mov	r2, r3
 8019fba:	897b      	ldrh	r3, [r7, #10]
 8019fbc:	fb03 f302 	mul.w	r3, r3, r2
 8019fc0:	461a      	mov	r2, r3
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fca:	4619      	mov	r1, r3
 8019fcc:	2001      	movs	r0, #1
 8019fce:	f007 fd43 	bl	8021a58 <calloc>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d104      	bne.n	8019fec <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 8019fe2:	4b3e      	ldr	r3, [pc, #248]	; (801a0dc <pifStorageVar_SetMedia+0x1a0>)
 8019fe4:	2203      	movs	r2, #3
 8019fe6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	e072      	b.n	801a0d2 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ff4:	897b      	ldrh	r3, [r7, #10]
 8019ff6:	9300      	str	r3, [sp, #0]
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	68f8      	ldr	r0, [r7, #12]
 8019ffe:	f7ff fec3 	bl	8019d88 <_readData>
 801a002:	4603      	mov	r3, r0
 801a004:	2b00      	cmp	r3, #0
 801a006:	d108      	bne.n	801a01a <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801a008:	4b34      	ldr	r3, [pc, #208]	; (801a0dc <pifStorageVar_SetMedia+0x1a0>)
 801a00a:	220d      	movs	r2, #13
 801a00c:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801a00e:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a014:	2b00      	cmp	r3, #0
 801a016:	d05b      	beq.n	801a0d0 <pifStorageVar_SetMedia+0x194>
 801a018:	e052      	b.n	801a0c0 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a026:	f103 0210 	add.w	r2, r3, #16
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a032:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a034:	693b      	ldr	r3, [r7, #16]
 801a036:	781b      	ldrb	r3, [r3, #0]
 801a038:	2b70      	cmp	r3, #112	; 0x70
 801a03a:	d121      	bne.n	801a080 <pifStorageVar_SetMedia+0x144>
 801a03c:	693b      	ldr	r3, [r7, #16]
 801a03e:	785b      	ldrb	r3, [r3, #1]
 801a040:	2b69      	cmp	r3, #105	; 0x69
 801a042:	d11d      	bne.n	801a080 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a044:	693b      	ldr	r3, [r7, #16]
 801a046:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a048:	2b66      	cmp	r3, #102	; 0x66
 801a04a:	d119      	bne.n	801a080 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a04c:	693b      	ldr	r3, [r7, #16]
 801a04e:	78db      	ldrb	r3, [r3, #3]
 801a050:	2b73      	cmp	r3, #115	; 0x73
 801a052:	d115      	bne.n	801a080 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801a054:	693b      	ldr	r3, [r7, #16]
 801a056:	795b      	ldrb	r3, [r3, #5]
 801a058:	7a7a      	ldrb	r2, [r7, #9]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d112      	bne.n	801a084 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	89dc      	ldrh	r4, [r3, #14]
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a066:	210a      	movs	r1, #10
 801a068:	4618      	mov	r0, r3
 801a06a:	f7f7 fefe 	bl	8011e6a <pifCrc16>
 801a06e:	4603      	mov	r3, r0
 801a070:	429c      	cmp	r4, r3
 801a072:	d109      	bne.n	801a088 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	2201      	movs	r2, #1
 801a078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a07c:	2301      	movs	r3, #1
 801a07e:	e028      	b.n	801a0d2 <pifStorageVar_SetMedia+0x196>
        goto set;
 801a080:	bf00      	nop
 801a082:	e002      	b.n	801a08a <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a084:	bf00      	nop
 801a086:	e000      	b.n	801a08a <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a088:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801a08a:	693b      	ldr	r3, [r7, #16]
 801a08c:	2270      	movs	r2, #112	; 0x70
 801a08e:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	2269      	movs	r2, #105	; 0x69
 801a094:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801a096:	693b      	ldr	r3, [r7, #16]
 801a098:	2266      	movs	r2, #102	; 0x66
 801a09a:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801a09c:	693b      	ldr	r3, [r7, #16]
 801a09e:	2273      	movs	r2, #115	; 0x73
 801a0a0:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801a0a2:	693b      	ldr	r3, [r7, #16]
 801a0a4:	2201      	movs	r2, #1
 801a0a6:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801a0a8:	693b      	ldr	r3, [r7, #16]
 801a0aa:	7a7a      	ldrb	r2, [r7, #9]
 801a0ac:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	897a      	ldrh	r2, [r7, #10]
 801a0b2:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801a0b4:	697b      	ldr	r3, [r7, #20]
 801a0b6:	b29a      	uxth	r2, r3
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801a0bc:	2301      	movs	r3, #1
 801a0be:	e008      	b.n	801a0d2 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f007 fd01 	bl	8021acc <free>
		p_owner->__p_info_buffer = NULL;
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801a0d0:	2300      	movs	r3, #0
}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	371c      	adds	r7, #28
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd90      	pop	{r4, r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	20001365 	.word	0x20001365

0801a0e0 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b086      	sub	sp, #24
 801a0e4:	af02      	add	r7, sp, #8
 801a0e6:	60f8      	str	r0, [r7, #12]
 801a0e8:	60b9      	str	r1, [r7, #8]
 801a0ea:	4611      	mov	r1, r2
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	460b      	mov	r3, r1
 801a0f0:	71fb      	strb	r3, [r7, #7]
 801a0f2:	4613      	mov	r3, r2
 801a0f4:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801a0f6:	68f8      	ldr	r0, [r7, #12]
 801a0f8:	79b9      	ldrb	r1, [r7, #6]
 801a0fa:	79fa      	ldrb	r2, [r7, #7]
 801a0fc:	7e3b      	ldrb	r3, [r7, #24]
 801a0fe:	9300      	str	r3, [sp, #0]
 801a100:	460b      	mov	r3, r1
 801a102:	68b9      	ldr	r1, [r7, #8]
 801a104:	f7ff fd42 	bl	8019b8c <pifStorage_AttachI2c>
 801a108:	4603      	mov	r3, r0
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3710      	adds	r7, #16
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}

0801a112 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801a112:	b480      	push	{r7}
 801a114:	b083      	sub	sp, #12
 801a116:	af00      	add	r7, sp, #0
 801a118:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801a120:	4618      	mov	r0, r3
 801a122:	370c      	adds	r7, #12
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr

0801a12c <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801a12c:	b590      	push	{r4, r7, lr}
 801a12e:	b08d      	sub	sp, #52	; 0x34
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a13c:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a140:	2b00      	cmp	r3, #0
 801a142:	d104      	bne.n	801a14e <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801a144:	4b61      	ldr	r3, [pc, #388]	; (801a2cc <pifStorageVar_Format+0x1a0>)
 801a146:	2201      	movs	r2, #1
 801a148:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a14a:	2300      	movs	r3, #0
 801a14c:	e0b9      	b.n	801a2c2 <pifStorageVar_Format+0x196>
    }

	p_info->first_node = DATA_NODE_NULL;
 801a14e:	6a3b      	ldr	r3, [r7, #32]
 801a150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a154:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801a156:	6a3b      	ldr	r3, [r7, #32]
 801a158:	2200      	movs	r2, #0
 801a15a:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801a15c:	210a      	movs	r1, #10
 801a15e:	6a38      	ldr	r0, [r7, #32]
 801a160:	f7f7 fe83 	bl	8011e6a <pifCrc16>
 801a164:	4603      	mov	r3, r0
 801a166:	461a      	mov	r2, r3
 801a168:	6a3b      	ldr	r3, [r7, #32]
 801a16a:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a170:	f103 0010 	add.w	r0, r3, #16
 801a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a178:	3b10      	subs	r3, #16
 801a17a:	461a      	mov	r2, r3
 801a17c:	21ff      	movs	r1, #255	; 0xff
 801a17e:	f007 fcbb 	bl	8021af8 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a182:	2300      	movs	r3, #0
 801a184:	62bb      	str	r3, [r7, #40]	; 0x28
 801a186:	e019      	b.n	801a1bc <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a18a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a18c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a18e:	4613      	mov	r3, r2
 801a190:	005b      	lsls	r3, r3, #1
 801a192:	4413      	add	r3, r2
 801a194:	009b      	lsls	r3, r3, #2
 801a196:	440b      	add	r3, r1
 801a198:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	3301      	adds	r3, #1
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	69fb      	ldr	r3, [r7, #28]
 801a1a4:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a1a6:	2106      	movs	r1, #6
 801a1a8:	69f8      	ldr	r0, [r7, #28]
 801a1aa:	f7f7 fe5e 	bl	8011e6a <pifCrc16>
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	461a      	mov	r2, r3
 801a1b2:	69fb      	ldr	r3, [r7, #28]
 801a1b4:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1bc:	6a3b      	ldr	r3, [r7, #32]
 801a1be:	795b      	ldrb	r3, [r3, #5]
 801a1c0:	3b01      	subs	r3, #1
 801a1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1c4:	429a      	cmp	r2, r3
 801a1c6:	dbdf      	blt.n	801a188 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a1cc:	6a3b      	ldr	r3, [r7, #32]
 801a1ce:	795b      	ldrb	r3, [r3, #5]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	005b      	lsls	r3, r3, #1
 801a1d6:	440b      	add	r3, r1
 801a1d8:	009b      	lsls	r3, r3, #2
 801a1da:	3b0c      	subs	r3, #12
 801a1dc:	4413      	add	r3, r2
 801a1de:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a1e0:	2106      	movs	r1, #6
 801a1e2:	69f8      	ldr	r0, [r7, #28]
 801a1e4:	f7f7 fe41 	bl	8011e6a <pifCrc16>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	461a      	mov	r2, r3
 801a1ec:	69fb      	ldr	r3, [r7, #28]
 801a1ee:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1f8:	2100      	movs	r1, #0
 801a1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1fc:	f7ff fdf4 	bl	8019de8 <_writeData>
 801a200:	4603      	mov	r3, r0
 801a202:	2b00      	cmp	r3, #0
 801a204:	d104      	bne.n	801a210 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801a206:	4b31      	ldr	r3, [pc, #196]	; (801a2cc <pifStorageVar_Format+0x1a0>)
 801a208:	220d      	movs	r2, #13
 801a20a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801a20c:	2300      	movs	r3, #0
 801a20e:	e058      	b.n	801a2c2 <pifStorageVar_Format+0x196>
    }

    ptr = 0;
 801a210:	2300      	movs	r3, #0
 801a212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a21a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a21e:	e047      	b.n	801a2b0 <pifStorageVar_Format+0x184>
    	len = remain > 16 ? 16 : remain;
 801a220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a224:	2b10      	cmp	r3, #16
 801a226:	bf28      	it	cs
 801a228:	2310      	movcs	r3, #16
 801a22a:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a230:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a234:	7efb      	ldrb	r3, [r7, #27]
 801a236:	f107 0108 	add.w	r1, r7, #8
 801a23a:	6878      	ldr	r0, [r7, #4]
 801a23c:	47a0      	blx	r4
 801a23e:	4603      	mov	r3, r0
 801a240:	2b00      	cmp	r3, #0
 801a242:	d104      	bne.n	801a24e <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801a244:	4b21      	ldr	r3, [pc, #132]	; (801a2cc <pifStorageVar_Format+0x1a0>)
 801a246:	220d      	movs	r2, #13
 801a248:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801a24a:	2300      	movs	r3, #0
 801a24c:	e039      	b.n	801a2c2 <pifStorageVar_Format+0x196>
        }
        for (k = 0; k < len; k++) {
 801a24e:	2300      	movs	r3, #0
 801a250:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a254:	e01b      	b.n	801a28e <pifStorageVar_Format+0x162>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a25a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801a25e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a262:	440a      	add	r2, r1
 801a264:	4413      	add	r3, r2
 801a266:	781a      	ldrb	r2, [r3, #0]
 801a268:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a26c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a270:	440b      	add	r3, r1
 801a272:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801a276:	429a      	cmp	r2, r3
 801a278:	d004      	beq.n	801a284 <pifStorageVar_Format+0x158>
            	pif_error = E_IS_NOT_FORMATED;
 801a27a:	4b14      	ldr	r3, [pc, #80]	; (801a2cc <pifStorageVar_Format+0x1a0>)
 801a27c:	220f      	movs	r2, #15
 801a27e:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801a280:	2300      	movs	r3, #0
 801a282:	e01e      	b.n	801a2c2 <pifStorageVar_Format+0x196>
        for (k = 0; k < len; k++) {
 801a284:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a288:	3301      	adds	r3, #1
 801a28a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a28e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a292:	7efb      	ldrb	r3, [r7, #27]
 801a294:	429a      	cmp	r2, r3
 801a296:	d3de      	bcc.n	801a256 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801a298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a29c:	7efb      	ldrb	r3, [r7, #27]
 801a29e:	4413      	add	r3, r2
 801a2a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801a2a4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801a2a8:	7efb      	ldrb	r3, [r7, #27]
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a2b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d1b3      	bne.n	801a220 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ba:	2201      	movs	r2, #1
 801a2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a2c0:	2301      	movs	r3, #1
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	3734      	adds	r7, #52	; 0x34
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd90      	pop	{r4, r7, pc}
 801a2ca:	bf00      	nop
 801a2cc:	20001365 	.word	0x20001365

0801a2d0 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b08a      	sub	sp, #40	; 0x28
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
 801a2d8:	460b      	mov	r3, r1
 801a2da:	807b      	strh	r3, [r7, #2]
 801a2dc:	4613      	mov	r3, r2
 801a2de:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a2e4:	69fb      	ldr	r3, [r7, #28]
 801a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2e8:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801a2ea:	69bb      	ldr	r3, [r7, #24]
 801a2ec:	88db      	ldrh	r3, [r3, #6]
 801a2ee:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801a2f0:	883a      	ldrh	r2, [r7, #0]
 801a2f2:	8afb      	ldrh	r3, [r7, #22]
 801a2f4:	4413      	add	r3, r2
 801a2f6:	1e5a      	subs	r2, r3, #1
 801a2f8:	8afb      	ldrh	r3, [r7, #22]
 801a2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2fe:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801a300:	69fb      	ldr	r3, [r7, #28]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d002      	beq.n	801a30c <pifStorageVar_Create+0x3c>
 801a306:	887b      	ldrh	r3, [r7, #2]
 801a308:	2bff      	cmp	r3, #255	; 0xff
 801a30a:	d104      	bne.n	801a316 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801a30c:	4b9a      	ldr	r3, [pc, #616]	; (801a578 <pifStorageVar_Create+0x2a8>)
 801a30e:	2201      	movs	r2, #1
 801a310:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801a312:	2300      	movs	r3, #0
 801a314:	e12b      	b.n	801a56e <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801a316:	69fb      	ldr	r3, [r7, #28]
 801a318:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d104      	bne.n	801a32a <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801a320:	4b95      	ldr	r3, [pc, #596]	; (801a578 <pifStorageVar_Create+0x2a8>)
 801a322:	220f      	movs	r2, #15
 801a324:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a326:	2300      	movs	r3, #0
 801a328:	e121      	b.n	801a56e <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801a32a:	69bb      	ldr	r3, [r7, #24]
 801a32c:	895b      	ldrh	r3, [r3, #10]
 801a32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a332:	4293      	cmp	r3, r2
 801a334:	d127      	bne.n	801a386 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801a336:	69fb      	ldr	r3, [r7, #28]
 801a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a33a:	891b      	ldrh	r3, [r3, #8]
 801a33c:	8aba      	ldrh	r2, [r7, #20]
 801a33e:	429a      	cmp	r2, r3
 801a340:	d904      	bls.n	801a34c <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801a342:	4b8d      	ldr	r3, [pc, #564]	; (801a578 <pifStorageVar_Create+0x2a8>)
 801a344:	2204      	movs	r2, #4
 801a346:	701a      	strb	r2, [r3, #0]
			return NULL;
 801a348:	2300      	movs	r3, #0
 801a34a:	e110      	b.n	801a56e <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801a34c:	69fb      	ldr	r3, [r7, #28]
 801a34e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a350:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801a352:	69f8      	ldr	r0, [r7, #28]
 801a354:	f7ff fcf0 	bl	8019d38 <_getNewDataNode>
 801a358:	4603      	mov	r3, r0
 801a35a:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801a35c:	69fb      	ldr	r3, [r7, #28]
 801a35e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a360:	89fa      	ldrh	r2, [r7, #14]
 801a362:	4613      	mov	r3, r2
 801a364:	005b      	lsls	r3, r3, #1
 801a366:	4413      	add	r3, r2
 801a368:	009b      	lsls	r3, r3, #2
 801a36a:	440b      	add	r3, r1
 801a36c:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801a36e:	69bb      	ldr	r3, [r7, #24]
 801a370:	895a      	ldrh	r2, [r3, #10]
 801a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a374:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a37c:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801a37e:	69bb      	ldr	r3, [r7, #24]
 801a380:	89fa      	ldrh	r2, [r7, #14]
 801a382:	815a      	strh	r2, [r3, #10]
		goto save;
 801a384:	e0d1      	b.n	801a52a <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801a386:	69bb      	ldr	r3, [r7, #24]
 801a388:	895b      	ldrh	r3, [r3, #10]
 801a38a:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801a38c:	69fb      	ldr	r3, [r7, #28]
 801a38e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a390:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a392:	4613      	mov	r3, r2
 801a394:	005b      	lsls	r3, r3, #1
 801a396:	4413      	add	r3, r2
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	440b      	add	r3, r1
 801a39c:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801a39e:	69fb      	ldr	r3, [r7, #28]
 801a3a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a3a2:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801a3a4:	693b      	ldr	r3, [r7, #16]
 801a3a6:	889b      	ldrh	r3, [r3, #4]
 801a3a8:	8c3a      	ldrh	r2, [r7, #32]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	f000 80b2 	beq.w	801a514 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801a3b0:	693b      	ldr	r3, [r7, #16]
 801a3b2:	889b      	ldrh	r3, [r3, #4]
 801a3b4:	461a      	mov	r2, r3
 801a3b6:	8c3b      	ldrh	r3, [r7, #32]
 801a3b8:	1ad2      	subs	r2, r2, r3
 801a3ba:	8abb      	ldrh	r3, [r7, #20]
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	f2c0 80a9 	blt.w	801a514 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801a3c2:	69f8      	ldr	r0, [r7, #28]
 801a3c4:	f7ff fcb8 	bl	8019d38 <_getNewDataNode>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801a3cc:	89fb      	ldrh	r3, [r7, #14]
 801a3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d101      	bne.n	801a3da <pifStorageVar_Create+0x10a>
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	e0c9      	b.n	801a56e <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801a3da:	69fb      	ldr	r3, [r7, #28]
 801a3dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a3de:	89fa      	ldrh	r2, [r7, #14]
 801a3e0:	4613      	mov	r3, r2
 801a3e2:	005b      	lsls	r3, r3, #1
 801a3e4:	4413      	add	r3, r2
 801a3e6:	009b      	lsls	r3, r3, #2
 801a3e8:	440b      	add	r3, r1
 801a3ea:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801a3ec:	69bb      	ldr	r3, [r7, #24]
 801a3ee:	895a      	ldrh	r2, [r3, #10]
 801a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f2:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3fa:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801a3fc:	69bb      	ldr	r3, [r7, #24]
 801a3fe:	89fa      	ldrh	r2, [r7, #14]
 801a400:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	89fa      	ldrh	r2, [r7, #14]
 801a406:	811a      	strh	r2, [r3, #8]
				goto save;
 801a408:	e08f      	b.n	801a52a <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801a40a:	69fb      	ldr	r3, [r7, #28]
 801a40c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a40e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a410:	4613      	mov	r3, r2
 801a412:	005b      	lsls	r3, r3, #1
 801a414:	4413      	add	r3, r2
 801a416:	009b      	lsls	r3, r3, #2
 801a418:	440b      	add	r3, r1
 801a41a:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801a41c:	693b      	ldr	r3, [r7, #16]
 801a41e:	889a      	ldrh	r2, [r3, #4]
 801a420:	693b      	ldr	r3, [r7, #16]
 801a422:	885b      	ldrh	r3, [r3, #2]
 801a424:	4619      	mov	r1, r3
 801a426:	8afb      	ldrh	r3, [r7, #22]
 801a428:	440b      	add	r3, r1
 801a42a:	1e59      	subs	r1, r3, #1
 801a42c:	8afb      	ldrh	r3, [r7, #22]
 801a42e:	fb91 f3f3 	sdiv	r3, r1, r3
 801a432:	b29b      	uxth	r3, r3
 801a434:	4413      	add	r3, r2
 801a436:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801a438:	693b      	ldr	r3, [r7, #16]
 801a43a:	88db      	ldrh	r3, [r3, #6]
 801a43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a440:	4293      	cmp	r3, r2
 801a442:	d127      	bne.n	801a494 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801a444:	69bb      	ldr	r3, [r7, #24]
 801a446:	891b      	ldrh	r3, [r3, #8]
 801a448:	461a      	mov	r2, r3
 801a44a:	8c3b      	ldrh	r3, [r7, #32]
 801a44c:	1ad2      	subs	r2, r2, r3
 801a44e:	8abb      	ldrh	r3, [r7, #20]
 801a450:	429a      	cmp	r2, r3
 801a452:	db5c      	blt.n	801a50e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a454:	69f8      	ldr	r0, [r7, #28]
 801a456:	f7ff fc6f 	bl	8019d38 <_getNewDataNode>
 801a45a:	4603      	mov	r3, r0
 801a45c:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a45e:	89fb      	ldrh	r3, [r7, #14]
 801a460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a464:	4293      	cmp	r3, r2
 801a466:	d101      	bne.n	801a46c <pifStorageVar_Create+0x19c>
 801a468:	2300      	movs	r3, #0
 801a46a:	e080      	b.n	801a56e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a46c:	69fb      	ldr	r3, [r7, #28]
 801a46e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a470:	89fa      	ldrh	r2, [r7, #14]
 801a472:	4613      	mov	r3, r2
 801a474:	005b      	lsls	r3, r3, #1
 801a476:	4413      	add	r3, r2
 801a478:	009b      	lsls	r3, r3, #2
 801a47a:	440b      	add	r3, r1
 801a47c:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a47e:	693b      	ldr	r3, [r7, #16]
 801a480:	88da      	ldrh	r2, [r3, #6]
 801a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a484:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a48a:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801a48c:	693b      	ldr	r3, [r7, #16]
 801a48e:	89fa      	ldrh	r2, [r7, #14]
 801a490:	80da      	strh	r2, [r3, #6]
					goto save;
 801a492:	e04a      	b.n	801a52a <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	88db      	ldrh	r3, [r3, #6]
 801a49c:	4619      	mov	r1, r3
 801a49e:	460b      	mov	r3, r1
 801a4a0:	005b      	lsls	r3, r3, #1
 801a4a2:	440b      	add	r3, r1
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	4413      	add	r3, r2
 801a4a8:	889b      	ldrh	r3, [r3, #4]
 801a4aa:	461a      	mov	r2, r3
 801a4ac:	8c3b      	ldrh	r3, [r7, #32]
 801a4ae:	1ad2      	subs	r2, r2, r3
 801a4b0:	8abb      	ldrh	r3, [r7, #20]
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	db2b      	blt.n	801a50e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a4b6:	69f8      	ldr	r0, [r7, #28]
 801a4b8:	f7ff fc3e 	bl	8019d38 <_getNewDataNode>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a4c0:	89fb      	ldrh	r3, [r7, #14]
 801a4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4c6:	4293      	cmp	r3, r2
 801a4c8:	d101      	bne.n	801a4ce <pifStorageVar_Create+0x1fe>
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	e04f      	b.n	801a56e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a4ce:	69fb      	ldr	r3, [r7, #28]
 801a4d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a4d2:	89fa      	ldrh	r2, [r7, #14]
 801a4d4:	4613      	mov	r3, r2
 801a4d6:	005b      	lsls	r3, r3, #1
 801a4d8:	4413      	add	r3, r2
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	440b      	add	r3, r1
 801a4de:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	88da      	ldrh	r2, [r3, #6]
 801a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e6:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a4ec:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801a4ee:	69fb      	ldr	r3, [r7, #28]
 801a4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a4f2:	693b      	ldr	r3, [r7, #16]
 801a4f4:	88db      	ldrh	r3, [r3, #6]
 801a4f6:	4619      	mov	r1, r3
 801a4f8:	460b      	mov	r3, r1
 801a4fa:	005b      	lsls	r3, r3, #1
 801a4fc:	440b      	add	r3, r1
 801a4fe:	009b      	lsls	r3, r3, #2
 801a500:	4413      	add	r3, r2
 801a502:	89fa      	ldrh	r2, [r7, #14]
 801a504:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801a506:	693b      	ldr	r3, [r7, #16]
 801a508:	89fa      	ldrh	r2, [r7, #14]
 801a50a:	80da      	strh	r2, [r3, #6]
					goto save;
 801a50c:	e00d      	b.n	801a52a <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	88db      	ldrh	r3, [r3, #6]
 801a512:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801a514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a51a:	4293      	cmp	r3, r2
 801a51c:	f47f af75 	bne.w	801a40a <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801a520:	4b15      	ldr	r3, [pc, #84]	; (801a578 <pifStorageVar_Create+0x2a8>)
 801a522:	2204      	movs	r2, #4
 801a524:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a526:	2300      	movs	r3, #0
 801a528:	e021      	b.n	801a56e <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a52c:	887a      	ldrh	r2, [r7, #2]
 801a52e:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a532:	883a      	ldrh	r2, [r7, #0]
 801a534:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a538:	8c3a      	ldrh	r2, [r7, #32]
 801a53a:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801a53c:	2106      	movs	r1, #6
 801a53e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a540:	f7f7 fc93 	bl	8011e6a <pifCrc16>
 801a544:	4603      	mov	r3, r0
 801a546:	461a      	mov	r2, r3
 801a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a54a:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a54c:	69fb      	ldr	r3, [r7, #28]
 801a54e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a550:	69fb      	ldr	r3, [r7, #28]
 801a552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a554:	2100      	movs	r1, #0
 801a556:	69f8      	ldr	r0, [r7, #28]
 801a558:	f7ff fc46 	bl	8019de8 <_writeData>
 801a55c:	4603      	mov	r3, r0
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d104      	bne.n	801a56c <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801a562:	4b05      	ldr	r3, [pc, #20]	; (801a578 <pifStorageVar_Create+0x2a8>)
 801a564:	220d      	movs	r2, #13
 801a566:	701a      	strb	r2, [r3, #0]
        return NULL;
 801a568:	2300      	movs	r3, #0
 801a56a:	e000      	b.n	801a56e <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3728      	adds	r7, #40	; 0x28
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}
 801a576:	bf00      	nop
 801a578:	20001365 	.word	0x20001365

0801a57c <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b086      	sub	sp, #24
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	460b      	mov	r3, r1
 801a586:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a58c:	693b      	ldr	r3, [r7, #16]
 801a58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a590:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d104      	bne.n	801a5a6 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a59c:	4b3d      	ldr	r3, [pc, #244]	; (801a694 <pifStorageVar_Delete+0x118>)
 801a59e:	220f      	movs	r2, #15
 801a5a0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	e072      	b.n	801a68c <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	895b      	ldrh	r3, [r3, #10]
 801a5aa:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a5ac:	e065      	b.n	801a67a <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801a5ae:	693b      	ldr	r3, [r7, #16]
 801a5b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a5b2:	8afa      	ldrh	r2, [r7, #22]
 801a5b4:	4613      	mov	r3, r2
 801a5b6:	005b      	lsls	r3, r3, #1
 801a5b8:	4413      	add	r3, r2
 801a5ba:	009b      	lsls	r3, r3, #2
 801a5bc:	440b      	add	r3, r1
 801a5be:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	881b      	ldrh	r3, [r3, #0]
 801a5c4:	887a      	ldrh	r2, [r7, #2]
 801a5c6:	429a      	cmp	r2, r3
 801a5c8:	d154      	bne.n	801a674 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801a5ca:	2206      	movs	r2, #6
 801a5cc:	21ff      	movs	r1, #255	; 0xff
 801a5ce:	68b8      	ldr	r0, [r7, #8]
 801a5d0:	f007 fa92 	bl	8021af8 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801a5d4:	68bb      	ldr	r3, [r7, #8]
 801a5d6:	891b      	ldrh	r3, [r3, #8]
 801a5d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5dc:	4293      	cmp	r3, r2
 801a5de:	d00d      	beq.n	801a5fc <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801a5e0:	693b      	ldr	r3, [r7, #16]
 801a5e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	891b      	ldrh	r3, [r3, #8]
 801a5e8:	4619      	mov	r1, r3
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	005b      	lsls	r3, r3, #1
 801a5ee:	440b      	add	r3, r1
 801a5f0:	009b      	lsls	r3, r3, #2
 801a5f2:	4413      	add	r3, r2
 801a5f4:	68ba      	ldr	r2, [r7, #8]
 801a5f6:	88d2      	ldrh	r2, [r2, #6]
 801a5f8:	80da      	strh	r2, [r3, #6]
 801a5fa:	e003      	b.n	801a604 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	88da      	ldrh	r2, [r3, #6]
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	88db      	ldrh	r3, [r3, #6]
 801a608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d00c      	beq.n	801a62a <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	88db      	ldrh	r3, [r3, #6]
 801a618:	4619      	mov	r1, r3
 801a61a:	460b      	mov	r3, r1
 801a61c:	005b      	lsls	r3, r3, #1
 801a61e:	440b      	add	r3, r1
 801a620:	009b      	lsls	r3, r3, #2
 801a622:	4413      	add	r3, r2
 801a624:	68ba      	ldr	r2, [r7, #8]
 801a626:	8912      	ldrh	r2, [r2, #8]
 801a628:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	899a      	ldrh	r2, [r3, #12]
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801a632:	68bb      	ldr	r3, [r7, #8]
 801a634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a638:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a63a:	2106      	movs	r1, #6
 801a63c:	68b8      	ldr	r0, [r7, #8]
 801a63e:	f7f7 fc14 	bl	8011e6a <pifCrc16>
 801a642:	4603      	mov	r3, r0
 801a644:	461a      	mov	r2, r3
 801a646:	68bb      	ldr	r3, [r7, #8]
 801a648:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	8afa      	ldrh	r2, [r7, #22]
 801a64e:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a650:	693b      	ldr	r3, [r7, #16]
 801a652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a654:	693b      	ldr	r3, [r7, #16]
 801a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a658:	2100      	movs	r1, #0
 801a65a:	6938      	ldr	r0, [r7, #16]
 801a65c:	f7ff fbc4 	bl	8019de8 <_writeData>
 801a660:	4603      	mov	r3, r0
 801a662:	2b00      	cmp	r3, #0
 801a664:	d104      	bne.n	801a670 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801a666:	4b0b      	ldr	r3, [pc, #44]	; (801a694 <pifStorageVar_Delete+0x118>)
 801a668:	220d      	movs	r2, #13
 801a66a:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801a66c:	2300      	movs	r3, #0
 801a66e:	e00d      	b.n	801a68c <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801a670:	2301      	movs	r3, #1
 801a672:	e00b      	b.n	801a68c <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	88db      	ldrh	r3, [r3, #6]
 801a678:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a67a:	8afb      	ldrh	r3, [r7, #22]
 801a67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a680:	4293      	cmp	r3, r2
 801a682:	d194      	bne.n	801a5ae <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a684:	4b03      	ldr	r3, [pc, #12]	; (801a694 <pifStorageVar_Delete+0x118>)
 801a686:	220e      	movs	r2, #14
 801a688:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801a68a:	2300      	movs	r3, #0
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3718      	adds	r7, #24
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}
 801a694:	20001365 	.word	0x20001365

0801a698 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801a698:	b590      	push	{r4, r7, lr}
 801a69a:	b087      	sub	sp, #28
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a6a8:	693b      	ldr	r3, [r7, #16]
 801a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6ac:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d104      	bne.n	801a6c2 <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a6b8:	4b1b      	ldr	r3, [pc, #108]	; (801a728 <pifStorageVar_Open+0x90>)
 801a6ba:	220f      	movs	r2, #15
 801a6bc:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	e02d      	b.n	801a71e <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	895b      	ldrh	r3, [r3, #10]
 801a6c6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a6c8:	e020      	b.n	801a70c <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a6ce:	8afa      	ldrh	r2, [r7, #22]
 801a6d0:	4613      	mov	r3, r2
 801a6d2:	005b      	lsls	r3, r3, #1
 801a6d4:	4413      	add	r3, r2
 801a6d6:	009b      	lsls	r3, r3, #2
 801a6d8:	440b      	add	r3, r1
 801a6da:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	881b      	ldrh	r3, [r3, #0]
 801a6e0:	887a      	ldrh	r2, [r7, #2]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d10f      	bne.n	801a706 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	895c      	ldrh	r4, [r3, #10]
 801a6ea:	2106      	movs	r1, #6
 801a6ec:	68b8      	ldr	r0, [r7, #8]
 801a6ee:	f7f7 fbbc 	bl	8011e6a <pifCrc16>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	429c      	cmp	r4, r3
 801a6f6:	d004      	beq.n	801a702 <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801a6f8:	4b0b      	ldr	r3, [pc, #44]	; (801a728 <pifStorageVar_Open+0x90>)
 801a6fa:	220c      	movs	r2, #12
 801a6fc:	701a      	strb	r2, [r3, #0]
				return NULL;
 801a6fe:	2300      	movs	r3, #0
 801a700:	e00d      	b.n	801a71e <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801a702:	68bb      	ldr	r3, [r7, #8]
 801a704:	e00b      	b.n	801a71e <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	88db      	ldrh	r3, [r3, #6]
 801a70a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a70c:	8afb      	ldrh	r3, [r7, #22]
 801a70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a712:	4293      	cmp	r3, r2
 801a714:	d1d9      	bne.n	801a6ca <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a716:	4b04      	ldr	r3, [pc, #16]	; (801a728 <pifStorageVar_Open+0x90>)
 801a718:	220e      	movs	r2, #14
 801a71a:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a71c:	2300      	movs	r3, #0
}
 801a71e:	4618      	mov	r0, r3
 801a720:	371c      	adds	r7, #28
 801a722:	46bd      	mov	sp, r7
 801a724:	bd90      	pop	{r4, r7, pc}
 801a726:	bf00      	nop
 801a728:	20001365 	.word	0x20001365

0801a72c <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b088      	sub	sp, #32
 801a730:	af02      	add	r7, sp, #8
 801a732:	60f8      	str	r0, [r7, #12]
 801a734:	60b9      	str	r1, [r7, #8]
 801a736:	607a      	str	r2, [r7, #4]
 801a738:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a73e:	697b      	ldr	r3, [r7, #20]
 801a740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a744:	2b00      	cmp	r3, #0
 801a746:	d104      	bne.n	801a752 <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801a748:	4b0d      	ldr	r3, [pc, #52]	; (801a780 <pifStorageVar_Read+0x54>)
 801a74a:	220f      	movs	r2, #15
 801a74c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a74e:	2300      	movs	r3, #0
 801a750:	e012      	b.n	801a778 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	889b      	ldrh	r3, [r3, #4]
 801a756:	461a      	mov	r2, r3
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a75c:	88db      	ldrh	r3, [r3, #6]
 801a75e:	fb03 f302 	mul.w	r3, r3, r2
 801a762:	461a      	mov	r2, r3
 801a764:	697b      	ldr	r3, [r7, #20]
 801a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a768:	88db      	ldrh	r3, [r3, #6]
 801a76a:	9300      	str	r3, [sp, #0]
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	68b9      	ldr	r1, [r7, #8]
 801a770:	6978      	ldr	r0, [r7, #20]
 801a772:	f7ff fb09 	bl	8019d88 <_readData>
 801a776:	4603      	mov	r3, r0
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3718      	adds	r7, #24
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}
 801a780:	20001365 	.word	0x20001365

0801a784 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b086      	sub	sp, #24
 801a788:	af00      	add	r7, sp, #0
 801a78a:	60f8      	str	r0, [r7, #12]
 801a78c:	60b9      	str	r1, [r7, #8]
 801a78e:	607a      	str	r2, [r7, #4]
 801a790:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d104      	bne.n	801a7aa <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801a7a0:	4b0b      	ldr	r3, [pc, #44]	; (801a7d0 <pifStorageVar_Write+0x4c>)
 801a7a2:	220f      	movs	r2, #15
 801a7a4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	e00e      	b.n	801a7c8 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	889b      	ldrh	r3, [r3, #4]
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	697b      	ldr	r3, [r7, #20]
 801a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7b4:	88db      	ldrh	r3, [r3, #6]
 801a7b6:	fb03 f302 	mul.w	r3, r3, r2
 801a7ba:	4619      	mov	r1, r3
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	687a      	ldr	r2, [r7, #4]
 801a7c0:	6978      	ldr	r0, [r7, #20]
 801a7c2:	f7ff fb11 	bl	8019de8 <_writeData>
 801a7c6:	4603      	mov	r3, r0
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3718      	adds	r7, #24
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}
 801a7d0:	20001365 	.word	0x20001365

0801a7d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801a7d8:	4b0e      	ldr	r3, [pc, #56]	; (801a814 <HAL_Init+0x40>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	4a0d      	ldr	r2, [pc, #52]	; (801a814 <HAL_Init+0x40>)
 801a7de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a7e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801a7e4:	4b0b      	ldr	r3, [pc, #44]	; (801a814 <HAL_Init+0x40>)
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	4a0a      	ldr	r2, [pc, #40]	; (801a814 <HAL_Init+0x40>)
 801a7ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a7ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801a7f0:	4b08      	ldr	r3, [pc, #32]	; (801a814 <HAL_Init+0x40>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	4a07      	ldr	r2, [pc, #28]	; (801a814 <HAL_Init+0x40>)
 801a7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a7fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a7fc:	2003      	movs	r0, #3
 801a7fe:	f000 fd51 	bl	801b2a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801a802:	2000      	movs	r0, #0
 801a804:	f000 f808 	bl	801a818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801a808:	f7e8 fe42 	bl	8003490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a80c:	2300      	movs	r3, #0
}
 801a80e:	4618      	mov	r0, r3
 801a810:	bd80      	pop	{r7, pc}
 801a812:	bf00      	nop
 801a814:	40023c00 	.word	0x40023c00

0801a818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b082      	sub	sp, #8
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801a820:	4b12      	ldr	r3, [pc, #72]	; (801a86c <HAL_InitTick+0x54>)
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	4b12      	ldr	r3, [pc, #72]	; (801a870 <HAL_InitTick+0x58>)
 801a826:	781b      	ldrb	r3, [r3, #0]
 801a828:	4619      	mov	r1, r3
 801a82a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a82e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a832:	fbb2 f3f3 	udiv	r3, r2, r3
 801a836:	4618      	mov	r0, r3
 801a838:	f000 fd77 	bl	801b32a <HAL_SYSTICK_Config>
 801a83c:	4603      	mov	r3, r0
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d001      	beq.n	801a846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801a842:	2301      	movs	r3, #1
 801a844:	e00e      	b.n	801a864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	2b0f      	cmp	r3, #15
 801a84a:	d80a      	bhi.n	801a862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a84c:	2200      	movs	r2, #0
 801a84e:	6879      	ldr	r1, [r7, #4]
 801a850:	f04f 30ff 	mov.w	r0, #4294967295
 801a854:	f000 fd31 	bl	801b2ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a858:	4a06      	ldr	r2, [pc, #24]	; (801a874 <HAL_InitTick+0x5c>)
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a85e:	2300      	movs	r3, #0
 801a860:	e000      	b.n	801a864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801a862:	2301      	movs	r3, #1
}
 801a864:	4618      	mov	r0, r3
 801a866:	3708      	adds	r7, #8
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	20000020 	.word	0x20000020
 801a870:	20000094 	.word	0x20000094
 801a874:	20000090 	.word	0x20000090

0801a878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a878:	b480      	push	{r7}
 801a87a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801a87c:	4b06      	ldr	r3, [pc, #24]	; (801a898 <HAL_IncTick+0x20>)
 801a87e:	781b      	ldrb	r3, [r3, #0]
 801a880:	461a      	mov	r2, r3
 801a882:	4b06      	ldr	r3, [pc, #24]	; (801a89c <HAL_IncTick+0x24>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	4413      	add	r3, r2
 801a888:	4a04      	ldr	r2, [pc, #16]	; (801a89c <HAL_IncTick+0x24>)
 801a88a:	6013      	str	r3, [r2, #0]
}
 801a88c:	bf00      	nop
 801a88e:	46bd      	mov	sp, r7
 801a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a894:	4770      	bx	lr
 801a896:	bf00      	nop
 801a898:	20000094 	.word	0x20000094
 801a89c:	2000227c 	.word	0x2000227c

0801a8a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a8a0:	b480      	push	{r7}
 801a8a2:	af00      	add	r7, sp, #0
  return uwTick;
 801a8a4:	4b03      	ldr	r3, [pc, #12]	; (801a8b4 <HAL_GetTick+0x14>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b0:	4770      	bx	lr
 801a8b2:	bf00      	nop
 801a8b4:	2000227c 	.word	0x2000227c

0801a8b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d101      	bne.n	801a8ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801a8ca:	2301      	movs	r3, #1
 801a8cc:	e033      	b.n	801a936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d109      	bne.n	801a8ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	f7e8 fe02 	bl	80034e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	2200      	movs	r2, #0
 801a8e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8ee:	f003 0310 	and.w	r3, r3, #16
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d118      	bne.n	801a928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a8fe:	f023 0302 	bic.w	r3, r3, #2
 801a902:	f043 0202 	orr.w	r2, r3, #2
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f000 fa58 	bl	801adc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a91a:	f023 0303 	bic.w	r3, r3, #3
 801a91e:	f043 0201 	orr.w	r2, r3, #1
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	641a      	str	r2, [r3, #64]	; 0x40
 801a926:	e001      	b.n	801a92c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801a928:	2301      	movs	r3, #1
 801a92a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2200      	movs	r2, #0
 801a930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801a934:	7bfb      	ldrb	r3, [r7, #15]
}
 801a936:	4618      	mov	r0, r3
 801a938:	3710      	adds	r7, #16
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}
	...

0801a940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b086      	sub	sp, #24
 801a944:	af00      	add	r7, sp, #0
 801a946:	60f8      	str	r0, [r7, #12]
 801a948:	60b9      	str	r1, [r7, #8]
 801a94a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801a94c:	2300      	movs	r3, #0
 801a94e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a956:	2b01      	cmp	r3, #1
 801a958:	d101      	bne.n	801a95e <HAL_ADC_Start_DMA+0x1e>
 801a95a:	2302      	movs	r3, #2
 801a95c:	e0ce      	b.n	801aafc <HAL_ADC_Start_DMA+0x1bc>
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	2201      	movs	r2, #1
 801a962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	689b      	ldr	r3, [r3, #8]
 801a96c:	f003 0301 	and.w	r3, r3, #1
 801a970:	2b01      	cmp	r3, #1
 801a972:	d018      	beq.n	801a9a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	689a      	ldr	r2, [r3, #8]
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	f042 0201 	orr.w	r2, r2, #1
 801a982:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801a984:	4b5f      	ldr	r3, [pc, #380]	; (801ab04 <HAL_ADC_Start_DMA+0x1c4>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	4a5f      	ldr	r2, [pc, #380]	; (801ab08 <HAL_ADC_Start_DMA+0x1c8>)
 801a98a:	fba2 2303 	umull	r2, r3, r2, r3
 801a98e:	0c9a      	lsrs	r2, r3, #18
 801a990:	4613      	mov	r3, r2
 801a992:	005b      	lsls	r3, r3, #1
 801a994:	4413      	add	r3, r2
 801a996:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801a998:	e002      	b.n	801a9a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801a99a:	693b      	ldr	r3, [r7, #16]
 801a99c:	3b01      	subs	r3, #1
 801a99e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801a9a0:	693b      	ldr	r3, [r7, #16]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d1f9      	bne.n	801a99a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	689b      	ldr	r3, [r3, #8]
 801a9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a9b4:	d107      	bne.n	801a9c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	689a      	ldr	r2, [r3, #8]
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a9c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	689b      	ldr	r3, [r3, #8]
 801a9cc:	f003 0301 	and.w	r3, r3, #1
 801a9d0:	2b01      	cmp	r3, #1
 801a9d2:	f040 8086 	bne.w	801aae2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801a9de:	f023 0301 	bic.w	r3, r3, #1
 801a9e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d007      	beq.n	801aa08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801aa00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aa10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aa14:	d106      	bne.n	801aa24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa1a:	f023 0206 	bic.w	r2, r3, #6
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	645a      	str	r2, [r3, #68]	; 0x44
 801aa22:	e002      	b.n	801aa2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	2200      	movs	r2, #0
 801aa28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801aa32:	4b36      	ldr	r3, [pc, #216]	; (801ab0c <HAL_ADC_Start_DMA+0x1cc>)
 801aa34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa3a:	4a35      	ldr	r2, [pc, #212]	; (801ab10 <HAL_ADC_Start_DMA+0x1d0>)
 801aa3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa42:	4a34      	ldr	r2, [pc, #208]	; (801ab14 <HAL_ADC_Start_DMA+0x1d4>)
 801aa44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa4a:	4a33      	ldr	r2, [pc, #204]	; (801ab18 <HAL_ADC_Start_DMA+0x1d8>)
 801aa4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801aa56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	685a      	ldr	r2, [r3, #4]
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801aa66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	689a      	ldr	r2, [r3, #8]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801aa76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	334c      	adds	r3, #76	; 0x4c
 801aa82:	4619      	mov	r1, r3
 801aa84:	68ba      	ldr	r2, [r7, #8]
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	f000 fd0a 	bl	801b4a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	685b      	ldr	r3, [r3, #4]
 801aa90:	f003 031f 	and.w	r3, r3, #31
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d10f      	bne.n	801aab8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	689b      	ldr	r3, [r3, #8]
 801aa9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d129      	bne.n	801aafa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	689a      	ldr	r2, [r3, #8]
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801aab4:	609a      	str	r2, [r3, #8]
 801aab6:	e020      	b.n	801aafa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	4a17      	ldr	r2, [pc, #92]	; (801ab1c <HAL_ADC_Start_DMA+0x1dc>)
 801aabe:	4293      	cmp	r3, r2
 801aac0:	d11b      	bne.n	801aafa <HAL_ADC_Start_DMA+0x1ba>
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	689b      	ldr	r3, [r3, #8]
 801aac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d114      	bne.n	801aafa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	689a      	ldr	r2, [r3, #8]
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801aade:	609a      	str	r2, [r3, #8]
 801aae0:	e00b      	b.n	801aafa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aae6:	f043 0210 	orr.w	r2, r3, #16
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aaf2:	f043 0201 	orr.w	r2, r3, #1
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801aafa:	2300      	movs	r3, #0
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	3718      	adds	r7, #24
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}
 801ab04:	20000020 	.word	0x20000020
 801ab08:	431bde83 	.word	0x431bde83
 801ab0c:	40012300 	.word	0x40012300
 801ab10:	0801afb9 	.word	0x0801afb9
 801ab14:	0801b073 	.word	0x0801b073
 801ab18:	0801b08f 	.word	0x0801b08f
 801ab1c:	40012000 	.word	0x40012000

0801ab20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ab20:	b480      	push	{r7}
 801ab22:	b083      	sub	sp, #12
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801ab28:	bf00      	nop
 801ab2a:	370c      	adds	r7, #12
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab32:	4770      	bx	lr

0801ab34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b083      	sub	sp, #12
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801ab3c:	bf00      	nop
 801ab3e:	370c      	adds	r7, #12
 801ab40:	46bd      	mov	sp, r7
 801ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab46:	4770      	bx	lr

0801ab48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801ab48:	b480      	push	{r7}
 801ab4a:	b083      	sub	sp, #12
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801ab50:	bf00      	nop
 801ab52:	370c      	adds	r7, #12
 801ab54:	46bd      	mov	sp, r7
 801ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5a:	4770      	bx	lr

0801ab5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b085      	sub	sp, #20
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801ab66:	2300      	movs	r3, #0
 801ab68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ab70:	2b01      	cmp	r3, #1
 801ab72:	d101      	bne.n	801ab78 <HAL_ADC_ConfigChannel+0x1c>
 801ab74:	2302      	movs	r3, #2
 801ab76:	e113      	b.n	801ada0 <HAL_ADC_ConfigChannel+0x244>
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2201      	movs	r2, #1
 801ab7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	2b09      	cmp	r3, #9
 801ab86:	d925      	bls.n	801abd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	68d9      	ldr	r1, [r3, #12]
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	461a      	mov	r2, r3
 801ab96:	4613      	mov	r3, r2
 801ab98:	005b      	lsls	r3, r3, #1
 801ab9a:	4413      	add	r3, r2
 801ab9c:	3b1e      	subs	r3, #30
 801ab9e:	2207      	movs	r2, #7
 801aba0:	fa02 f303 	lsl.w	r3, r2, r3
 801aba4:	43da      	mvns	r2, r3
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	400a      	ands	r2, r1
 801abac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	68d9      	ldr	r1, [r3, #12]
 801abb4:	683b      	ldr	r3, [r7, #0]
 801abb6:	689a      	ldr	r2, [r3, #8]
 801abb8:	683b      	ldr	r3, [r7, #0]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	b29b      	uxth	r3, r3
 801abbe:	4618      	mov	r0, r3
 801abc0:	4603      	mov	r3, r0
 801abc2:	005b      	lsls	r3, r3, #1
 801abc4:	4403      	add	r3, r0
 801abc6:	3b1e      	subs	r3, #30
 801abc8:	409a      	lsls	r2, r3
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	430a      	orrs	r2, r1
 801abd0:	60da      	str	r2, [r3, #12]
 801abd2:	e022      	b.n	801ac1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	6919      	ldr	r1, [r3, #16]
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	b29b      	uxth	r3, r3
 801abe0:	461a      	mov	r2, r3
 801abe2:	4613      	mov	r3, r2
 801abe4:	005b      	lsls	r3, r3, #1
 801abe6:	4413      	add	r3, r2
 801abe8:	2207      	movs	r2, #7
 801abea:	fa02 f303 	lsl.w	r3, r2, r3
 801abee:	43da      	mvns	r2, r3
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	400a      	ands	r2, r1
 801abf6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	6919      	ldr	r1, [r3, #16]
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	689a      	ldr	r2, [r3, #8]
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	4618      	mov	r0, r3
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	005b      	lsls	r3, r3, #1
 801ac0e:	4403      	add	r3, r0
 801ac10:	409a      	lsls	r2, r3
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	430a      	orrs	r2, r1
 801ac18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	2b06      	cmp	r3, #6
 801ac20:	d824      	bhi.n	801ac6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ac28:	683b      	ldr	r3, [r7, #0]
 801ac2a:	685a      	ldr	r2, [r3, #4]
 801ac2c:	4613      	mov	r3, r2
 801ac2e:	009b      	lsls	r3, r3, #2
 801ac30:	4413      	add	r3, r2
 801ac32:	3b05      	subs	r3, #5
 801ac34:	221f      	movs	r2, #31
 801ac36:	fa02 f303 	lsl.w	r3, r2, r3
 801ac3a:	43da      	mvns	r2, r3
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	400a      	ands	r2, r1
 801ac42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ac4a:	683b      	ldr	r3, [r7, #0]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	4618      	mov	r0, r3
 801ac52:	683b      	ldr	r3, [r7, #0]
 801ac54:	685a      	ldr	r2, [r3, #4]
 801ac56:	4613      	mov	r3, r2
 801ac58:	009b      	lsls	r3, r3, #2
 801ac5a:	4413      	add	r3, r2
 801ac5c:	3b05      	subs	r3, #5
 801ac5e:	fa00 f203 	lsl.w	r2, r0, r3
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	430a      	orrs	r2, r1
 801ac68:	635a      	str	r2, [r3, #52]	; 0x34
 801ac6a:	e04c      	b.n	801ad06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	685b      	ldr	r3, [r3, #4]
 801ac70:	2b0c      	cmp	r3, #12
 801ac72:	d824      	bhi.n	801acbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ac7a:	683b      	ldr	r3, [r7, #0]
 801ac7c:	685a      	ldr	r2, [r3, #4]
 801ac7e:	4613      	mov	r3, r2
 801ac80:	009b      	lsls	r3, r3, #2
 801ac82:	4413      	add	r3, r2
 801ac84:	3b23      	subs	r3, #35	; 0x23
 801ac86:	221f      	movs	r2, #31
 801ac88:	fa02 f303 	lsl.w	r3, r2, r3
 801ac8c:	43da      	mvns	r2, r3
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	400a      	ands	r2, r1
 801ac94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	b29b      	uxth	r3, r3
 801aca2:	4618      	mov	r0, r3
 801aca4:	683b      	ldr	r3, [r7, #0]
 801aca6:	685a      	ldr	r2, [r3, #4]
 801aca8:	4613      	mov	r3, r2
 801acaa:	009b      	lsls	r3, r3, #2
 801acac:	4413      	add	r3, r2
 801acae:	3b23      	subs	r3, #35	; 0x23
 801acb0:	fa00 f203 	lsl.w	r2, r0, r3
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	430a      	orrs	r2, r1
 801acba:	631a      	str	r2, [r3, #48]	; 0x30
 801acbc:	e023      	b.n	801ad06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	685a      	ldr	r2, [r3, #4]
 801acc8:	4613      	mov	r3, r2
 801acca:	009b      	lsls	r3, r3, #2
 801accc:	4413      	add	r3, r2
 801acce:	3b41      	subs	r3, #65	; 0x41
 801acd0:	221f      	movs	r2, #31
 801acd2:	fa02 f303 	lsl.w	r3, r2, r3
 801acd6:	43da      	mvns	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	400a      	ands	r2, r1
 801acde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	b29b      	uxth	r3, r3
 801acec:	4618      	mov	r0, r3
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	685a      	ldr	r2, [r3, #4]
 801acf2:	4613      	mov	r3, r2
 801acf4:	009b      	lsls	r3, r3, #2
 801acf6:	4413      	add	r3, r2
 801acf8:	3b41      	subs	r3, #65	; 0x41
 801acfa:	fa00 f203 	lsl.w	r2, r0, r3
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	430a      	orrs	r2, r1
 801ad04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801ad06:	4b29      	ldr	r3, [pc, #164]	; (801adac <HAL_ADC_ConfigChannel+0x250>)
 801ad08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	4a28      	ldr	r2, [pc, #160]	; (801adb0 <HAL_ADC_ConfigChannel+0x254>)
 801ad10:	4293      	cmp	r3, r2
 801ad12:	d10f      	bne.n	801ad34 <HAL_ADC_ConfigChannel+0x1d8>
 801ad14:	683b      	ldr	r3, [r7, #0]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	2b12      	cmp	r3, #18
 801ad1a:	d10b      	bne.n	801ad34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	685b      	ldr	r3, [r3, #4]
 801ad20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	685b      	ldr	r3, [r3, #4]
 801ad2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	4a1d      	ldr	r2, [pc, #116]	; (801adb0 <HAL_ADC_ConfigChannel+0x254>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d12b      	bne.n	801ad96 <HAL_ADC_ConfigChannel+0x23a>
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	4a1c      	ldr	r2, [pc, #112]	; (801adb4 <HAL_ADC_ConfigChannel+0x258>)
 801ad44:	4293      	cmp	r3, r2
 801ad46:	d003      	beq.n	801ad50 <HAL_ADC_ConfigChannel+0x1f4>
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	2b11      	cmp	r3, #17
 801ad4e:	d122      	bne.n	801ad96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	685b      	ldr	r3, [r3, #4]
 801ad54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4a11      	ldr	r2, [pc, #68]	; (801adb4 <HAL_ADC_ConfigChannel+0x258>)
 801ad6e:	4293      	cmp	r3, r2
 801ad70:	d111      	bne.n	801ad96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801ad72:	4b11      	ldr	r3, [pc, #68]	; (801adb8 <HAL_ADC_ConfigChannel+0x25c>)
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	4a11      	ldr	r2, [pc, #68]	; (801adbc <HAL_ADC_ConfigChannel+0x260>)
 801ad78:	fba2 2303 	umull	r2, r3, r2, r3
 801ad7c:	0c9a      	lsrs	r2, r3, #18
 801ad7e:	4613      	mov	r3, r2
 801ad80:	009b      	lsls	r3, r3, #2
 801ad82:	4413      	add	r3, r2
 801ad84:	005b      	lsls	r3, r3, #1
 801ad86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801ad88:	e002      	b.n	801ad90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	3b01      	subs	r3, #1
 801ad8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d1f9      	bne.n	801ad8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	2200      	movs	r2, #0
 801ad9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801ad9e:	2300      	movs	r3, #0
}
 801ada0:	4618      	mov	r0, r3
 801ada2:	3714      	adds	r7, #20
 801ada4:	46bd      	mov	sp, r7
 801ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adaa:	4770      	bx	lr
 801adac:	40012300 	.word	0x40012300
 801adb0:	40012000 	.word	0x40012000
 801adb4:	10000012 	.word	0x10000012
 801adb8:	20000020 	.word	0x20000020
 801adbc:	431bde83 	.word	0x431bde83

0801adc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801adc0:	b480      	push	{r7}
 801adc2:	b085      	sub	sp, #20
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801adc8:	4b79      	ldr	r3, [pc, #484]	; (801afb0 <ADC_Init+0x1f0>)
 801adca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	685a      	ldr	r2, [r3, #4]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	431a      	orrs	r2, r3
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	685a      	ldr	r2, [r3, #4]
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801adf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	6859      	ldr	r1, [r3, #4]
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	691b      	ldr	r3, [r3, #16]
 801ae00:	021a      	lsls	r2, r3, #8
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	430a      	orrs	r2, r1
 801ae08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	685a      	ldr	r2, [r3, #4]
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801ae18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	6859      	ldr	r1, [r3, #4]
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	689a      	ldr	r2, [r3, #8]
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	430a      	orrs	r2, r1
 801ae2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	689a      	ldr	r2, [r3, #8]
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ae3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	6899      	ldr	r1, [r3, #8]
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	68da      	ldr	r2, [r3, #12]
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	430a      	orrs	r2, r1
 801ae4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae52:	4a58      	ldr	r2, [pc, #352]	; (801afb4 <ADC_Init+0x1f4>)
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d022      	beq.n	801ae9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	689a      	ldr	r2, [r3, #8]
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801ae66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	6899      	ldr	r1, [r3, #8]
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	430a      	orrs	r2, r1
 801ae78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	689a      	ldr	r2, [r3, #8]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801ae88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	6899      	ldr	r1, [r3, #8]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	430a      	orrs	r2, r1
 801ae9a:	609a      	str	r2, [r3, #8]
 801ae9c:	e00f      	b.n	801aebe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	689a      	ldr	r2, [r3, #8]
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801aeac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	689a      	ldr	r2, [r3, #8]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801aebc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	689a      	ldr	r2, [r3, #8]
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f022 0202 	bic.w	r2, r2, #2
 801aecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	6899      	ldr	r1, [r3, #8]
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	7e1b      	ldrb	r3, [r3, #24]
 801aed8:	005a      	lsls	r2, r3, #1
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	430a      	orrs	r2, r1
 801aee0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d01b      	beq.n	801af24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	685a      	ldr	r2, [r3, #4]
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aefa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	685a      	ldr	r2, [r3, #4]
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801af0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	6859      	ldr	r1, [r3, #4]
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af16:	3b01      	subs	r3, #1
 801af18:	035a      	lsls	r2, r3, #13
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	430a      	orrs	r2, r1
 801af20:	605a      	str	r2, [r3, #4]
 801af22:	e007      	b.n	801af34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	685a      	ldr	r2, [r3, #4]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801af32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801af42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	69db      	ldr	r3, [r3, #28]
 801af4e:	3b01      	subs	r3, #1
 801af50:	051a      	lsls	r2, r3, #20
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	430a      	orrs	r2, r1
 801af58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	689a      	ldr	r2, [r3, #8]
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801af68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	6899      	ldr	r1, [r3, #8]
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801af76:	025a      	lsls	r2, r3, #9
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	430a      	orrs	r2, r1
 801af7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	689a      	ldr	r2, [r3, #8]
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801af8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	6899      	ldr	r1, [r3, #8]
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	695b      	ldr	r3, [r3, #20]
 801af9a:	029a      	lsls	r2, r3, #10
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	430a      	orrs	r2, r1
 801afa2:	609a      	str	r2, [r3, #8]
}
 801afa4:	bf00      	nop
 801afa6:	3714      	adds	r7, #20
 801afa8:	46bd      	mov	sp, r7
 801afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afae:	4770      	bx	lr
 801afb0:	40012300 	.word	0x40012300
 801afb4:	0f000001 	.word	0x0f000001

0801afb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b084      	sub	sp, #16
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d13c      	bne.n	801b04c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	689b      	ldr	r3, [r3, #8]
 801afe4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d12b      	bne.n	801b044 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d127      	bne.n	801b044 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801affa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801affe:	2b00      	cmp	r3, #0
 801b000:	d006      	beq.n	801b010 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	689b      	ldr	r3, [r3, #8]
 801b008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d119      	bne.n	801b044 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	685a      	ldr	r2, [r3, #4]
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	f022 0220 	bic.w	r2, r2, #32
 801b01e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b034:	2b00      	cmp	r3, #0
 801b036:	d105      	bne.n	801b044 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b03c:	f043 0201 	orr.w	r2, r3, #1
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b044:	68f8      	ldr	r0, [r7, #12]
 801b046:	f7ff fd6b 	bl	801ab20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b04a:	e00e      	b.n	801b06a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b050:	f003 0310 	and.w	r3, r3, #16
 801b054:	2b00      	cmp	r3, #0
 801b056:	d003      	beq.n	801b060 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801b058:	68f8      	ldr	r0, [r7, #12]
 801b05a:	f7ff fd75 	bl	801ab48 <HAL_ADC_ErrorCallback>
}
 801b05e:	e004      	b.n	801b06a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b066:	6878      	ldr	r0, [r7, #4]
 801b068:	4798      	blx	r3
}
 801b06a:	bf00      	nop
 801b06c:	3710      	adds	r7, #16
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}

0801b072 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801b072:	b580      	push	{r7, lr}
 801b074:	b084      	sub	sp, #16
 801b076:	af00      	add	r7, sp, #0
 801b078:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b07e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b080:	68f8      	ldr	r0, [r7, #12]
 801b082:	f7ff fd57 	bl	801ab34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b086:	bf00      	nop
 801b088:	3710      	adds	r7, #16
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}

0801b08e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801b08e:	b580      	push	{r7, lr}
 801b090:	b084      	sub	sp, #16
 801b092:	af00      	add	r7, sp, #0
 801b094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b09a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	2240      	movs	r2, #64	; 0x40
 801b0a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0a6:	f043 0204 	orr.w	r2, r3, #4
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b0ae:	68f8      	ldr	r0, [r7, #12]
 801b0b0:	f7ff fd4a 	bl	801ab48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b0b4:	bf00      	nop
 801b0b6:	3710      	adds	r7, #16
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	bd80      	pop	{r7, pc}

0801b0bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	f003 0307 	and.w	r3, r3, #7
 801b0ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b0cc:	4b0c      	ldr	r3, [pc, #48]	; (801b100 <__NVIC_SetPriorityGrouping+0x44>)
 801b0ce:	68db      	ldr	r3, [r3, #12]
 801b0d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b0d2:	68ba      	ldr	r2, [r7, #8]
 801b0d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b0d8:	4013      	ands	r3, r2
 801b0da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b0e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b0e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b0ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b0ee:	4a04      	ldr	r2, [pc, #16]	; (801b100 <__NVIC_SetPriorityGrouping+0x44>)
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	60d3      	str	r3, [r2, #12]
}
 801b0f4:	bf00      	nop
 801b0f6:	3714      	adds	r7, #20
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fe:	4770      	bx	lr
 801b100:	e000ed00 	.word	0xe000ed00

0801b104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b104:	b480      	push	{r7}
 801b106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b108:	4b04      	ldr	r3, [pc, #16]	; (801b11c <__NVIC_GetPriorityGrouping+0x18>)
 801b10a:	68db      	ldr	r3, [r3, #12]
 801b10c:	0a1b      	lsrs	r3, r3, #8
 801b10e:	f003 0307 	and.w	r3, r3, #7
}
 801b112:	4618      	mov	r0, r3
 801b114:	46bd      	mov	sp, r7
 801b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11a:	4770      	bx	lr
 801b11c:	e000ed00 	.word	0xe000ed00

0801b120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b120:	b480      	push	{r7}
 801b122:	b083      	sub	sp, #12
 801b124:	af00      	add	r7, sp, #0
 801b126:	4603      	mov	r3, r0
 801b128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	db0b      	blt.n	801b14a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b132:	79fb      	ldrb	r3, [r7, #7]
 801b134:	f003 021f 	and.w	r2, r3, #31
 801b138:	4907      	ldr	r1, [pc, #28]	; (801b158 <__NVIC_EnableIRQ+0x38>)
 801b13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b13e:	095b      	lsrs	r3, r3, #5
 801b140:	2001      	movs	r0, #1
 801b142:	fa00 f202 	lsl.w	r2, r0, r2
 801b146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801b14a:	bf00      	nop
 801b14c:	370c      	adds	r7, #12
 801b14e:	46bd      	mov	sp, r7
 801b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b154:	4770      	bx	lr
 801b156:	bf00      	nop
 801b158:	e000e100 	.word	0xe000e100

0801b15c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b15c:	b480      	push	{r7}
 801b15e:	b083      	sub	sp, #12
 801b160:	af00      	add	r7, sp, #0
 801b162:	4603      	mov	r3, r0
 801b164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	db12      	blt.n	801b194 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b16e:	79fb      	ldrb	r3, [r7, #7]
 801b170:	f003 021f 	and.w	r2, r3, #31
 801b174:	490a      	ldr	r1, [pc, #40]	; (801b1a0 <__NVIC_DisableIRQ+0x44>)
 801b176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b17a:	095b      	lsrs	r3, r3, #5
 801b17c:	2001      	movs	r0, #1
 801b17e:	fa00 f202 	lsl.w	r2, r0, r2
 801b182:	3320      	adds	r3, #32
 801b184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801b188:	f3bf 8f4f 	dsb	sy
}
 801b18c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b18e:	f3bf 8f6f 	isb	sy
}
 801b192:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801b194:	bf00      	nop
 801b196:	370c      	adds	r7, #12
 801b198:	46bd      	mov	sp, r7
 801b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19e:	4770      	bx	lr
 801b1a0:	e000e100 	.word	0xe000e100

0801b1a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b1a4:	b480      	push	{r7}
 801b1a6:	b083      	sub	sp, #12
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	6039      	str	r1, [r7, #0]
 801b1ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b1b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	db0a      	blt.n	801b1ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	b2da      	uxtb	r2, r3
 801b1bc:	490c      	ldr	r1, [pc, #48]	; (801b1f0 <__NVIC_SetPriority+0x4c>)
 801b1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1c2:	0112      	lsls	r2, r2, #4
 801b1c4:	b2d2      	uxtb	r2, r2
 801b1c6:	440b      	add	r3, r1
 801b1c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b1cc:	e00a      	b.n	801b1e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1ce:	683b      	ldr	r3, [r7, #0]
 801b1d0:	b2da      	uxtb	r2, r3
 801b1d2:	4908      	ldr	r1, [pc, #32]	; (801b1f4 <__NVIC_SetPriority+0x50>)
 801b1d4:	79fb      	ldrb	r3, [r7, #7]
 801b1d6:	f003 030f 	and.w	r3, r3, #15
 801b1da:	3b04      	subs	r3, #4
 801b1dc:	0112      	lsls	r2, r2, #4
 801b1de:	b2d2      	uxtb	r2, r2
 801b1e0:	440b      	add	r3, r1
 801b1e2:	761a      	strb	r2, [r3, #24]
}
 801b1e4:	bf00      	nop
 801b1e6:	370c      	adds	r7, #12
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ee:	4770      	bx	lr
 801b1f0:	e000e100 	.word	0xe000e100
 801b1f4:	e000ed00 	.word	0xe000ed00

0801b1f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b1f8:	b480      	push	{r7}
 801b1fa:	b089      	sub	sp, #36	; 0x24
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	60b9      	str	r1, [r7, #8]
 801b202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	f003 0307 	and.w	r3, r3, #7
 801b20a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b20c:	69fb      	ldr	r3, [r7, #28]
 801b20e:	f1c3 0307 	rsb	r3, r3, #7
 801b212:	2b04      	cmp	r3, #4
 801b214:	bf28      	it	cs
 801b216:	2304      	movcs	r3, #4
 801b218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	3304      	adds	r3, #4
 801b21e:	2b06      	cmp	r3, #6
 801b220:	d902      	bls.n	801b228 <NVIC_EncodePriority+0x30>
 801b222:	69fb      	ldr	r3, [r7, #28]
 801b224:	3b03      	subs	r3, #3
 801b226:	e000      	b.n	801b22a <NVIC_EncodePriority+0x32>
 801b228:	2300      	movs	r3, #0
 801b22a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b22c:	f04f 32ff 	mov.w	r2, #4294967295
 801b230:	69bb      	ldr	r3, [r7, #24]
 801b232:	fa02 f303 	lsl.w	r3, r2, r3
 801b236:	43da      	mvns	r2, r3
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	401a      	ands	r2, r3
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b240:	f04f 31ff 	mov.w	r1, #4294967295
 801b244:	697b      	ldr	r3, [r7, #20]
 801b246:	fa01 f303 	lsl.w	r3, r1, r3
 801b24a:	43d9      	mvns	r1, r3
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b250:	4313      	orrs	r3, r2
         );
}
 801b252:	4618      	mov	r0, r3
 801b254:	3724      	adds	r7, #36	; 0x24
 801b256:	46bd      	mov	sp, r7
 801b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b25c:	4770      	bx	lr
	...

0801b260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b260:	b580      	push	{r7, lr}
 801b262:	b082      	sub	sp, #8
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	3b01      	subs	r3, #1
 801b26c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b270:	d301      	bcc.n	801b276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b272:	2301      	movs	r3, #1
 801b274:	e00f      	b.n	801b296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b276:	4a0a      	ldr	r2, [pc, #40]	; (801b2a0 <SysTick_Config+0x40>)
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	3b01      	subs	r3, #1
 801b27c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b27e:	210f      	movs	r1, #15
 801b280:	f04f 30ff 	mov.w	r0, #4294967295
 801b284:	f7ff ff8e 	bl	801b1a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b288:	4b05      	ldr	r3, [pc, #20]	; (801b2a0 <SysTick_Config+0x40>)
 801b28a:	2200      	movs	r2, #0
 801b28c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b28e:	4b04      	ldr	r3, [pc, #16]	; (801b2a0 <SysTick_Config+0x40>)
 801b290:	2207      	movs	r2, #7
 801b292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b294:	2300      	movs	r3, #0
}
 801b296:	4618      	mov	r0, r3
 801b298:	3708      	adds	r7, #8
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd80      	pop	{r7, pc}
 801b29e:	bf00      	nop
 801b2a0:	e000e010 	.word	0xe000e010

0801b2a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b082      	sub	sp, #8
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b2ac:	6878      	ldr	r0, [r7, #4]
 801b2ae:	f7ff ff05 	bl	801b0bc <__NVIC_SetPriorityGrouping>
}
 801b2b2:	bf00      	nop
 801b2b4:	3708      	adds	r7, #8
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd80      	pop	{r7, pc}

0801b2ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801b2ba:	b580      	push	{r7, lr}
 801b2bc:	b086      	sub	sp, #24
 801b2be:	af00      	add	r7, sp, #0
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	60b9      	str	r1, [r7, #8]
 801b2c4:	607a      	str	r2, [r7, #4]
 801b2c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801b2cc:	f7ff ff1a 	bl	801b104 <__NVIC_GetPriorityGrouping>
 801b2d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b2d2:	687a      	ldr	r2, [r7, #4]
 801b2d4:	68b9      	ldr	r1, [r7, #8]
 801b2d6:	6978      	ldr	r0, [r7, #20]
 801b2d8:	f7ff ff8e 	bl	801b1f8 <NVIC_EncodePriority>
 801b2dc:	4602      	mov	r2, r0
 801b2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b2e2:	4611      	mov	r1, r2
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7ff ff5d 	bl	801b1a4 <__NVIC_SetPriority>
}
 801b2ea:	bf00      	nop
 801b2ec:	3718      	adds	r7, #24
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}

0801b2f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b2f2:	b580      	push	{r7, lr}
 801b2f4:	b082      	sub	sp, #8
 801b2f6:	af00      	add	r7, sp, #0
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b2fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b300:	4618      	mov	r0, r3
 801b302:	f7ff ff0d 	bl	801b120 <__NVIC_EnableIRQ>
}
 801b306:	bf00      	nop
 801b308:	3708      	adds	r7, #8
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}

0801b30e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b30e:	b580      	push	{r7, lr}
 801b310:	b082      	sub	sp, #8
 801b312:	af00      	add	r7, sp, #0
 801b314:	4603      	mov	r3, r0
 801b316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801b318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7ff ff1d 	bl	801b15c <__NVIC_DisableIRQ>
}
 801b322:	bf00      	nop
 801b324:	3708      	adds	r7, #8
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}

0801b32a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b32a:	b580      	push	{r7, lr}
 801b32c:	b082      	sub	sp, #8
 801b32e:	af00      	add	r7, sp, #0
 801b330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	f7ff ff94 	bl	801b260 <SysTick_Config>
 801b338:	4603      	mov	r3, r0
}
 801b33a:	4618      	mov	r0, r3
 801b33c:	3708      	adds	r7, #8
 801b33e:	46bd      	mov	sp, r7
 801b340:	bd80      	pop	{r7, pc}
	...

0801b344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b086      	sub	sp, #24
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801b34c:	2300      	movs	r3, #0
 801b34e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801b350:	f7ff faa6 	bl	801a8a0 <HAL_GetTick>
 801b354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d101      	bne.n	801b360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801b35c:	2301      	movs	r3, #1
 801b35e:	e099      	b.n	801b494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	2202      	movs	r2, #2
 801b364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	2200      	movs	r2, #0
 801b36c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	681a      	ldr	r2, [r3, #0]
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f022 0201 	bic.w	r2, r2, #1
 801b37e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b380:	e00f      	b.n	801b3a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b382:	f7ff fa8d 	bl	801a8a0 <HAL_GetTick>
 801b386:	4602      	mov	r2, r0
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	1ad3      	subs	r3, r2, r3
 801b38c:	2b05      	cmp	r3, #5
 801b38e:	d908      	bls.n	801b3a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	2220      	movs	r2, #32
 801b394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	2203      	movs	r2, #3
 801b39a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801b39e:	2303      	movs	r3, #3
 801b3a0:	e078      	b.n	801b494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	f003 0301 	and.w	r3, r3, #1
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d1e8      	bne.n	801b382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801b3b8:	697a      	ldr	r2, [r7, #20]
 801b3ba:	4b38      	ldr	r3, [pc, #224]	; (801b49c <HAL_DMA_Init+0x158>)
 801b3bc:	4013      	ands	r3, r2
 801b3be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	685a      	ldr	r2, [r3, #4]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	689b      	ldr	r3, [r3, #8]
 801b3c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b3ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	691b      	ldr	r3, [r3, #16]
 801b3d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	699b      	ldr	r3, [r3, #24]
 801b3e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	6a1b      	ldr	r3, [r3, #32]
 801b3ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b3ee:	697a      	ldr	r2, [r7, #20]
 801b3f0:	4313      	orrs	r3, r2
 801b3f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3f8:	2b04      	cmp	r3, #4
 801b3fa:	d107      	bne.n	801b40c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b404:	4313      	orrs	r3, r2
 801b406:	697a      	ldr	r2, [r7, #20]
 801b408:	4313      	orrs	r3, r2
 801b40a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	697a      	ldr	r2, [r7, #20]
 801b412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	695b      	ldr	r3, [r3, #20]
 801b41a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	f023 0307 	bic.w	r3, r3, #7
 801b422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b428:	697a      	ldr	r2, [r7, #20]
 801b42a:	4313      	orrs	r3, r2
 801b42c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b432:	2b04      	cmp	r3, #4
 801b434:	d117      	bne.n	801b466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b43a:	697a      	ldr	r2, [r7, #20]
 801b43c:	4313      	orrs	r3, r2
 801b43e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b444:	2b00      	cmp	r3, #0
 801b446:	d00e      	beq.n	801b466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801b448:	6878      	ldr	r0, [r7, #4]
 801b44a:	f000 fb1b 	bl	801ba84 <DMA_CheckFifoParam>
 801b44e:	4603      	mov	r3, r0
 801b450:	2b00      	cmp	r3, #0
 801b452:	d008      	beq.n	801b466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2240      	movs	r2, #64	; 0x40
 801b458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2201      	movs	r2, #1
 801b45e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801b462:	2301      	movs	r3, #1
 801b464:	e016      	b.n	801b494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	697a      	ldr	r2, [r7, #20]
 801b46c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801b46e:	6878      	ldr	r0, [r7, #4]
 801b470:	f000 fad2 	bl	801ba18 <DMA_CalcBaseAndBitshift>
 801b474:	4603      	mov	r3, r0
 801b476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b47c:	223f      	movs	r2, #63	; 0x3f
 801b47e:	409a      	lsls	r2, r3
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2200      	movs	r2, #0
 801b488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2201      	movs	r2, #1
 801b48e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801b492:	2300      	movs	r3, #0
}
 801b494:	4618      	mov	r0, r3
 801b496:	3718      	adds	r7, #24
 801b498:	46bd      	mov	sp, r7
 801b49a:	bd80      	pop	{r7, pc}
 801b49c:	f010803f 	.word	0xf010803f

0801b4a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b086      	sub	sp, #24
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	60b9      	str	r1, [r7, #8]
 801b4aa:	607a      	str	r2, [r7, #4]
 801b4ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b4b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b4be:	2b01      	cmp	r3, #1
 801b4c0:	d101      	bne.n	801b4c6 <HAL_DMA_Start_IT+0x26>
 801b4c2:	2302      	movs	r3, #2
 801b4c4:	e040      	b.n	801b548 <HAL_DMA_Start_IT+0xa8>
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	2201      	movs	r2, #1
 801b4ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d12f      	bne.n	801b53a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	2202      	movs	r2, #2
 801b4de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	687a      	ldr	r2, [r7, #4]
 801b4ec:	68b9      	ldr	r1, [r7, #8]
 801b4ee:	68f8      	ldr	r0, [r7, #12]
 801b4f0:	f000 fa64 	bl	801b9bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4f8:	223f      	movs	r2, #63	; 0x3f
 801b4fa:	409a      	lsls	r2, r3
 801b4fc:	693b      	ldr	r3, [r7, #16]
 801b4fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	681a      	ldr	r2, [r3, #0]
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f042 0216 	orr.w	r2, r2, #22
 801b50e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b514:	2b00      	cmp	r3, #0
 801b516:	d007      	beq.n	801b528 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	681a      	ldr	r2, [r3, #0]
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	f042 0208 	orr.w	r2, r2, #8
 801b526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	681a      	ldr	r2, [r3, #0]
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	f042 0201 	orr.w	r2, r2, #1
 801b536:	601a      	str	r2, [r3, #0]
 801b538:	e005      	b.n	801b546 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	2200      	movs	r2, #0
 801b53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801b542:	2302      	movs	r3, #2
 801b544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801b546:	7dfb      	ldrb	r3, [r7, #23]
}
 801b548:	4618      	mov	r0, r3
 801b54a:	3718      	adds	r7, #24
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}

0801b550 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b084      	sub	sp, #16
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b55c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801b55e:	f7ff f99f 	bl	801a8a0 <HAL_GetTick>
 801b562:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b56a:	b2db      	uxtb	r3, r3
 801b56c:	2b02      	cmp	r3, #2
 801b56e:	d008      	beq.n	801b582 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2280      	movs	r2, #128	; 0x80
 801b574:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2200      	movs	r2, #0
 801b57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801b57e:	2301      	movs	r3, #1
 801b580:	e052      	b.n	801b628 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	681a      	ldr	r2, [r3, #0]
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	f022 0216 	bic.w	r2, r2, #22
 801b590:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	695a      	ldr	r2, [r3, #20]
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b5a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d103      	bne.n	801b5b2 <HAL_DMA_Abort+0x62>
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d007      	beq.n	801b5c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	681a      	ldr	r2, [r3, #0]
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	f022 0208 	bic.w	r2, r2, #8
 801b5c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	681a      	ldr	r2, [r3, #0]
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f022 0201 	bic.w	r2, r2, #1
 801b5d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b5d2:	e013      	b.n	801b5fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b5d4:	f7ff f964 	bl	801a8a0 <HAL_GetTick>
 801b5d8:	4602      	mov	r2, r0
 801b5da:	68bb      	ldr	r3, [r7, #8]
 801b5dc:	1ad3      	subs	r3, r2, r3
 801b5de:	2b05      	cmp	r3, #5
 801b5e0:	d90c      	bls.n	801b5fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	2220      	movs	r2, #32
 801b5e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2203      	movs	r2, #3
 801b5ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801b5f8:	2303      	movs	r3, #3
 801b5fa:	e015      	b.n	801b628 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	f003 0301 	and.w	r3, r3, #1
 801b606:	2b00      	cmp	r3, #0
 801b608:	d1e4      	bne.n	801b5d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b60e:	223f      	movs	r2, #63	; 0x3f
 801b610:	409a      	lsls	r2, r3
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2201      	movs	r2, #1
 801b61a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	2200      	movs	r2, #0
 801b622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801b626:	2300      	movs	r3, #0
}
 801b628:	4618      	mov	r0, r3
 801b62a:	3710      	adds	r7, #16
 801b62c:	46bd      	mov	sp, r7
 801b62e:	bd80      	pop	{r7, pc}

0801b630 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b630:	b480      	push	{r7}
 801b632:	b083      	sub	sp, #12
 801b634:	af00      	add	r7, sp, #0
 801b636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	2b02      	cmp	r3, #2
 801b642:	d004      	beq.n	801b64e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	2280      	movs	r2, #128	; 0x80
 801b648:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801b64a:	2301      	movs	r3, #1
 801b64c:	e00c      	b.n	801b668 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2205      	movs	r2, #5
 801b652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	681a      	ldr	r2, [r3, #0]
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	f022 0201 	bic.w	r2, r2, #1
 801b664:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801b666:	2300      	movs	r3, #0
}
 801b668:	4618      	mov	r0, r3
 801b66a:	370c      	adds	r7, #12
 801b66c:	46bd      	mov	sp, r7
 801b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b672:	4770      	bx	lr

0801b674 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b086      	sub	sp, #24
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801b67c:	2300      	movs	r3, #0
 801b67e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b680:	4b92      	ldr	r3, [pc, #584]	; (801b8cc <HAL_DMA_IRQHandler+0x258>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	4a92      	ldr	r2, [pc, #584]	; (801b8d0 <HAL_DMA_IRQHandler+0x25c>)
 801b686:	fba2 2303 	umull	r2, r3, r2, r3
 801b68a:	0a9b      	lsrs	r3, r3, #10
 801b68c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b692:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801b694:	693b      	ldr	r3, [r7, #16]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b69e:	2208      	movs	r2, #8
 801b6a0:	409a      	lsls	r2, r3
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	4013      	ands	r3, r2
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d01a      	beq.n	801b6e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	f003 0304 	and.w	r3, r3, #4
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d013      	beq.n	801b6e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	681a      	ldr	r2, [r3, #0]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	f022 0204 	bic.w	r2, r2, #4
 801b6c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6cc:	2208      	movs	r2, #8
 801b6ce:	409a      	lsls	r2, r3
 801b6d0:	693b      	ldr	r3, [r7, #16]
 801b6d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b6d8:	f043 0201 	orr.w	r2, r3, #1
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6e4:	2201      	movs	r2, #1
 801b6e6:	409a      	lsls	r2, r3
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	4013      	ands	r3, r2
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d012      	beq.n	801b716 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	695b      	ldr	r3, [r3, #20]
 801b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d00b      	beq.n	801b716 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b702:	2201      	movs	r2, #1
 801b704:	409a      	lsls	r2, r3
 801b706:	693b      	ldr	r3, [r7, #16]
 801b708:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b70e:	f043 0202 	orr.w	r2, r3, #2
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b71a:	2204      	movs	r2, #4
 801b71c:	409a      	lsls	r2, r3
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	4013      	ands	r3, r2
 801b722:	2b00      	cmp	r3, #0
 801b724:	d012      	beq.n	801b74c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f003 0302 	and.w	r3, r3, #2
 801b730:	2b00      	cmp	r3, #0
 801b732:	d00b      	beq.n	801b74c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b738:	2204      	movs	r2, #4
 801b73a:	409a      	lsls	r2, r3
 801b73c:	693b      	ldr	r3, [r7, #16]
 801b73e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b744:	f043 0204 	orr.w	r2, r3, #4
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b750:	2210      	movs	r2, #16
 801b752:	409a      	lsls	r2, r3
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	4013      	ands	r3, r2
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d043      	beq.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	f003 0308 	and.w	r3, r3, #8
 801b766:	2b00      	cmp	r3, #0
 801b768:	d03c      	beq.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b76e:	2210      	movs	r2, #16
 801b770:	409a      	lsls	r2, r3
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b780:	2b00      	cmp	r3, #0
 801b782:	d018      	beq.n	801b7b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d108      	bne.n	801b7a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b796:	2b00      	cmp	r3, #0
 801b798:	d024      	beq.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b79e:	6878      	ldr	r0, [r7, #4]
 801b7a0:	4798      	blx	r3
 801b7a2:	e01f      	b.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d01b      	beq.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	4798      	blx	r3
 801b7b4:	e016      	b.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d107      	bne.n	801b7d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	681a      	ldr	r2, [r3, #0]
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	f022 0208 	bic.w	r2, r2, #8
 801b7d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d003      	beq.n	801b7e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7e0:	6878      	ldr	r0, [r7, #4]
 801b7e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7e8:	2220      	movs	r2, #32
 801b7ea:	409a      	lsls	r2, r3
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	4013      	ands	r3, r2
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	f000 808e 	beq.w	801b912 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	f003 0310 	and.w	r3, r3, #16
 801b800:	2b00      	cmp	r3, #0
 801b802:	f000 8086 	beq.w	801b912 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b80a:	2220      	movs	r2, #32
 801b80c:	409a      	lsls	r2, r3
 801b80e:	693b      	ldr	r3, [r7, #16]
 801b810:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	2b05      	cmp	r3, #5
 801b81c:	d136      	bne.n	801b88c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	681a      	ldr	r2, [r3, #0]
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	f022 0216 	bic.w	r2, r2, #22
 801b82c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	695a      	ldr	r2, [r3, #20]
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b83c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b842:	2b00      	cmp	r3, #0
 801b844:	d103      	bne.n	801b84e <HAL_DMA_IRQHandler+0x1da>
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d007      	beq.n	801b85e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f022 0208 	bic.w	r2, r2, #8
 801b85c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b862:	223f      	movs	r2, #63	; 0x3f
 801b864:	409a      	lsls	r2, r3
 801b866:	693b      	ldr	r3, [r7, #16]
 801b868:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	2201      	movs	r2, #1
 801b86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	2200      	movs	r2, #0
 801b876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d07d      	beq.n	801b97e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b886:	6878      	ldr	r0, [r7, #4]
 801b888:	4798      	blx	r3
        }
        return;
 801b88a:	e078      	b.n	801b97e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b896:	2b00      	cmp	r3, #0
 801b898:	d01c      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d108      	bne.n	801b8ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d030      	beq.n	801b912 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8b4:	6878      	ldr	r0, [r7, #4]
 801b8b6:	4798      	blx	r3
 801b8b8:	e02b      	b.n	801b912 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d027      	beq.n	801b912 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8c6:	6878      	ldr	r0, [r7, #4]
 801b8c8:	4798      	blx	r3
 801b8ca:	e022      	b.n	801b912 <HAL_DMA_IRQHandler+0x29e>
 801b8cc:	20000020 	.word	0x20000020
 801b8d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d10f      	bne.n	801b902 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	f022 0210 	bic.w	r2, r2, #16
 801b8f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	2201      	movs	r2, #1
 801b8f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b906:	2b00      	cmp	r3, #0
 801b908:	d003      	beq.n	801b912 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b90e:	6878      	ldr	r0, [r7, #4]
 801b910:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b916:	2b00      	cmp	r3, #0
 801b918:	d032      	beq.n	801b980 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b91e:	f003 0301 	and.w	r3, r3, #1
 801b922:	2b00      	cmp	r3, #0
 801b924:	d022      	beq.n	801b96c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	2205      	movs	r2, #5
 801b92a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f022 0201 	bic.w	r2, r2, #1
 801b93c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	3301      	adds	r3, #1
 801b942:	60bb      	str	r3, [r7, #8]
 801b944:	697a      	ldr	r2, [r7, #20]
 801b946:	429a      	cmp	r2, r3
 801b948:	d307      	bcc.n	801b95a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	f003 0301 	and.w	r3, r3, #1
 801b954:	2b00      	cmp	r3, #0
 801b956:	d1f2      	bne.n	801b93e <HAL_DMA_IRQHandler+0x2ca>
 801b958:	e000      	b.n	801b95c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801b95a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	2201      	movs	r2, #1
 801b960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2200      	movs	r2, #0
 801b968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b970:	2b00      	cmp	r3, #0
 801b972:	d005      	beq.n	801b980 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b978:	6878      	ldr	r0, [r7, #4]
 801b97a:	4798      	blx	r3
 801b97c:	e000      	b.n	801b980 <HAL_DMA_IRQHandler+0x30c>
        return;
 801b97e:	bf00      	nop
    }
  }
}
 801b980:	3718      	adds	r7, #24
 801b982:	46bd      	mov	sp, r7
 801b984:	bd80      	pop	{r7, pc}
 801b986:	bf00      	nop

0801b988 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801b988:	b480      	push	{r7}
 801b98a:	b083      	sub	sp, #12
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b996:	b2db      	uxtb	r3, r3
}
 801b998:	4618      	mov	r0, r3
 801b99a:	370c      	adds	r7, #12
 801b99c:	46bd      	mov	sp, r7
 801b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a2:	4770      	bx	lr

0801b9a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801b9a4:	b480      	push	{r7}
 801b9a6:	b083      	sub	sp, #12
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	370c      	adds	r7, #12
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ba:	4770      	bx	lr

0801b9bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b9bc:	b480      	push	{r7}
 801b9be:	b085      	sub	sp, #20
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	60f8      	str	r0, [r7, #12]
 801b9c4:	60b9      	str	r1, [r7, #8]
 801b9c6:	607a      	str	r2, [r7, #4]
 801b9c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801b9d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	683a      	ldr	r2, [r7, #0]
 801b9e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	689b      	ldr	r3, [r3, #8]
 801b9e6:	2b40      	cmp	r3, #64	; 0x40
 801b9e8:	d108      	bne.n	801b9fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	687a      	ldr	r2, [r7, #4]
 801b9f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	68ba      	ldr	r2, [r7, #8]
 801b9f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801b9fa:	e007      	b.n	801ba0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801b9fc:	68fb      	ldr	r3, [r7, #12]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	68ba      	ldr	r2, [r7, #8]
 801ba02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	687a      	ldr	r2, [r7, #4]
 801ba0a:	60da      	str	r2, [r3, #12]
}
 801ba0c:	bf00      	nop
 801ba0e:	3714      	adds	r7, #20
 801ba10:	46bd      	mov	sp, r7
 801ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba16:	4770      	bx	lr

0801ba18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b085      	sub	sp, #20
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	b2db      	uxtb	r3, r3
 801ba26:	3b10      	subs	r3, #16
 801ba28:	4a14      	ldr	r2, [pc, #80]	; (801ba7c <DMA_CalcBaseAndBitshift+0x64>)
 801ba2a:	fba2 2303 	umull	r2, r3, r2, r3
 801ba2e:	091b      	lsrs	r3, r3, #4
 801ba30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801ba32:	4a13      	ldr	r2, [pc, #76]	; (801ba80 <DMA_CalcBaseAndBitshift+0x68>)
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	4413      	add	r3, r2
 801ba38:	781b      	ldrb	r3, [r3, #0]
 801ba3a:	461a      	mov	r2, r3
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	2b03      	cmp	r3, #3
 801ba44:	d909      	bls.n	801ba5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ba4e:	f023 0303 	bic.w	r3, r3, #3
 801ba52:	1d1a      	adds	r2, r3, #4
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	659a      	str	r2, [r3, #88]	; 0x58
 801ba58:	e007      	b.n	801ba6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ba62:	f023 0303 	bic.w	r3, r3, #3
 801ba66:	687a      	ldr	r2, [r7, #4]
 801ba68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801ba6e:	4618      	mov	r0, r3
 801ba70:	3714      	adds	r7, #20
 801ba72:	46bd      	mov	sp, r7
 801ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba78:	4770      	bx	lr
 801ba7a:	bf00      	nop
 801ba7c:	aaaaaaab 	.word	0xaaaaaaab
 801ba80:	08027f9c 	.word	0x08027f9c

0801ba84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801ba84:	b480      	push	{r7}
 801ba86:	b085      	sub	sp, #20
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	699b      	ldr	r3, [r3, #24]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d11f      	bne.n	801bade <DMA_CheckFifoParam+0x5a>
 801ba9e:	68bb      	ldr	r3, [r7, #8]
 801baa0:	2b03      	cmp	r3, #3
 801baa2:	d856      	bhi.n	801bb52 <DMA_CheckFifoParam+0xce>
 801baa4:	a201      	add	r2, pc, #4	; (adr r2, 801baac <DMA_CheckFifoParam+0x28>)
 801baa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801baaa:	bf00      	nop
 801baac:	0801babd 	.word	0x0801babd
 801bab0:	0801bacf 	.word	0x0801bacf
 801bab4:	0801babd 	.word	0x0801babd
 801bab8:	0801bb53 	.word	0x0801bb53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d046      	beq.n	801bb56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801bac8:	2301      	movs	r3, #1
 801baca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bacc:	e043      	b.n	801bb56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bad6:	d140      	bne.n	801bb5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801bad8:	2301      	movs	r3, #1
 801bada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801badc:	e03d      	b.n	801bb5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	699b      	ldr	r3, [r3, #24]
 801bae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bae6:	d121      	bne.n	801bb2c <DMA_CheckFifoParam+0xa8>
 801bae8:	68bb      	ldr	r3, [r7, #8]
 801baea:	2b03      	cmp	r3, #3
 801baec:	d837      	bhi.n	801bb5e <DMA_CheckFifoParam+0xda>
 801baee:	a201      	add	r2, pc, #4	; (adr r2, 801baf4 <DMA_CheckFifoParam+0x70>)
 801baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801baf4:	0801bb05 	.word	0x0801bb05
 801baf8:	0801bb0b 	.word	0x0801bb0b
 801bafc:	0801bb05 	.word	0x0801bb05
 801bb00:	0801bb1d 	.word	0x0801bb1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801bb04:	2301      	movs	r3, #1
 801bb06:	73fb      	strb	r3, [r7, #15]
      break;
 801bb08:	e030      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d025      	beq.n	801bb62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801bb16:	2301      	movs	r3, #1
 801bb18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bb1a:	e022      	b.n	801bb62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bb24:	d11f      	bne.n	801bb66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801bb26:	2301      	movs	r3, #1
 801bb28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801bb2a:	e01c      	b.n	801bb66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	2b02      	cmp	r3, #2
 801bb30:	d903      	bls.n	801bb3a <DMA_CheckFifoParam+0xb6>
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	2b03      	cmp	r3, #3
 801bb36:	d003      	beq.n	801bb40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801bb38:	e018      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	73fb      	strb	r3, [r7, #15]
      break;
 801bb3e:	e015      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d00e      	beq.n	801bb6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801bb4c:	2301      	movs	r3, #1
 801bb4e:	73fb      	strb	r3, [r7, #15]
      break;
 801bb50:	e00b      	b.n	801bb6a <DMA_CheckFifoParam+0xe6>
      break;
 801bb52:	bf00      	nop
 801bb54:	e00a      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;
 801bb56:	bf00      	nop
 801bb58:	e008      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;
 801bb5a:	bf00      	nop
 801bb5c:	e006      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;
 801bb5e:	bf00      	nop
 801bb60:	e004      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;
 801bb62:	bf00      	nop
 801bb64:	e002      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;   
 801bb66:	bf00      	nop
 801bb68:	e000      	b.n	801bb6c <DMA_CheckFifoParam+0xe8>
      break;
 801bb6a:	bf00      	nop
    }
  } 
  
  return status; 
 801bb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3714      	adds	r7, #20
 801bb72:	46bd      	mov	sp, r7
 801bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb78:	4770      	bx	lr
 801bb7a:	bf00      	nop

0801bb7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	b089      	sub	sp, #36	; 0x24
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
 801bb84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801bb86:	2300      	movs	r3, #0
 801bb88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801bb8e:	2300      	movs	r3, #0
 801bb90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801bb92:	2300      	movs	r3, #0
 801bb94:	61fb      	str	r3, [r7, #28]
 801bb96:	e159      	b.n	801be4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801bb98:	2201      	movs	r2, #1
 801bb9a:	69fb      	ldr	r3, [r7, #28]
 801bb9c:	fa02 f303 	lsl.w	r3, r2, r3
 801bba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801bba2:	683b      	ldr	r3, [r7, #0]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	697a      	ldr	r2, [r7, #20]
 801bba8:	4013      	ands	r3, r2
 801bbaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801bbac:	693a      	ldr	r2, [r7, #16]
 801bbae:	697b      	ldr	r3, [r7, #20]
 801bbb0:	429a      	cmp	r2, r3
 801bbb2:	f040 8148 	bne.w	801be46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	685b      	ldr	r3, [r3, #4]
 801bbba:	f003 0303 	and.w	r3, r3, #3
 801bbbe:	2b01      	cmp	r3, #1
 801bbc0:	d005      	beq.n	801bbce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801bbca:	2b02      	cmp	r3, #2
 801bbcc:	d130      	bne.n	801bc30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	689b      	ldr	r3, [r3, #8]
 801bbd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801bbd4:	69fb      	ldr	r3, [r7, #28]
 801bbd6:	005b      	lsls	r3, r3, #1
 801bbd8:	2203      	movs	r2, #3
 801bbda:	fa02 f303 	lsl.w	r3, r2, r3
 801bbde:	43db      	mvns	r3, r3
 801bbe0:	69ba      	ldr	r2, [r7, #24]
 801bbe2:	4013      	ands	r3, r2
 801bbe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	68da      	ldr	r2, [r3, #12]
 801bbea:	69fb      	ldr	r3, [r7, #28]
 801bbec:	005b      	lsls	r3, r3, #1
 801bbee:	fa02 f303 	lsl.w	r3, r2, r3
 801bbf2:	69ba      	ldr	r2, [r7, #24]
 801bbf4:	4313      	orrs	r3, r2
 801bbf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	69ba      	ldr	r2, [r7, #24]
 801bbfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	685b      	ldr	r3, [r3, #4]
 801bc02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801bc04:	2201      	movs	r2, #1
 801bc06:	69fb      	ldr	r3, [r7, #28]
 801bc08:	fa02 f303 	lsl.w	r3, r2, r3
 801bc0c:	43db      	mvns	r3, r3
 801bc0e:	69ba      	ldr	r2, [r7, #24]
 801bc10:	4013      	ands	r3, r2
 801bc12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bc14:	683b      	ldr	r3, [r7, #0]
 801bc16:	685b      	ldr	r3, [r3, #4]
 801bc18:	091b      	lsrs	r3, r3, #4
 801bc1a:	f003 0201 	and.w	r2, r3, #1
 801bc1e:	69fb      	ldr	r3, [r7, #28]
 801bc20:	fa02 f303 	lsl.w	r3, r2, r3
 801bc24:	69ba      	ldr	r2, [r7, #24]
 801bc26:	4313      	orrs	r3, r2
 801bc28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	69ba      	ldr	r2, [r7, #24]
 801bc2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	685b      	ldr	r3, [r3, #4]
 801bc34:	f003 0303 	and.w	r3, r3, #3
 801bc38:	2b03      	cmp	r3, #3
 801bc3a:	d017      	beq.n	801bc6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	68db      	ldr	r3, [r3, #12]
 801bc40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801bc42:	69fb      	ldr	r3, [r7, #28]
 801bc44:	005b      	lsls	r3, r3, #1
 801bc46:	2203      	movs	r2, #3
 801bc48:	fa02 f303 	lsl.w	r3, r2, r3
 801bc4c:	43db      	mvns	r3, r3
 801bc4e:	69ba      	ldr	r2, [r7, #24]
 801bc50:	4013      	ands	r3, r2
 801bc52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	689a      	ldr	r2, [r3, #8]
 801bc58:	69fb      	ldr	r3, [r7, #28]
 801bc5a:	005b      	lsls	r3, r3, #1
 801bc5c:	fa02 f303 	lsl.w	r3, r2, r3
 801bc60:	69ba      	ldr	r2, [r7, #24]
 801bc62:	4313      	orrs	r3, r2
 801bc64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	69ba      	ldr	r2, [r7, #24]
 801bc6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	685b      	ldr	r3, [r3, #4]
 801bc70:	f003 0303 	and.w	r3, r3, #3
 801bc74:	2b02      	cmp	r3, #2
 801bc76:	d123      	bne.n	801bcc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bc78:	69fb      	ldr	r3, [r7, #28]
 801bc7a:	08da      	lsrs	r2, r3, #3
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	3208      	adds	r2, #8
 801bc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801bc86:	69fb      	ldr	r3, [r7, #28]
 801bc88:	f003 0307 	and.w	r3, r3, #7
 801bc8c:	009b      	lsls	r3, r3, #2
 801bc8e:	220f      	movs	r2, #15
 801bc90:	fa02 f303 	lsl.w	r3, r2, r3
 801bc94:	43db      	mvns	r3, r3
 801bc96:	69ba      	ldr	r2, [r7, #24]
 801bc98:	4013      	ands	r3, r2
 801bc9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	691a      	ldr	r2, [r3, #16]
 801bca0:	69fb      	ldr	r3, [r7, #28]
 801bca2:	f003 0307 	and.w	r3, r3, #7
 801bca6:	009b      	lsls	r3, r3, #2
 801bca8:	fa02 f303 	lsl.w	r3, r2, r3
 801bcac:	69ba      	ldr	r2, [r7, #24]
 801bcae:	4313      	orrs	r3, r2
 801bcb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bcb2:	69fb      	ldr	r3, [r7, #28]
 801bcb4:	08da      	lsrs	r2, r3, #3
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	3208      	adds	r2, #8
 801bcba:	69b9      	ldr	r1, [r7, #24]
 801bcbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801bcc6:	69fb      	ldr	r3, [r7, #28]
 801bcc8:	005b      	lsls	r3, r3, #1
 801bcca:	2203      	movs	r2, #3
 801bccc:	fa02 f303 	lsl.w	r3, r2, r3
 801bcd0:	43db      	mvns	r3, r3
 801bcd2:	69ba      	ldr	r2, [r7, #24]
 801bcd4:	4013      	ands	r3, r2
 801bcd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bcd8:	683b      	ldr	r3, [r7, #0]
 801bcda:	685b      	ldr	r3, [r3, #4]
 801bcdc:	f003 0203 	and.w	r2, r3, #3
 801bce0:	69fb      	ldr	r3, [r7, #28]
 801bce2:	005b      	lsls	r3, r3, #1
 801bce4:	fa02 f303 	lsl.w	r3, r2, r3
 801bce8:	69ba      	ldr	r2, [r7, #24]
 801bcea:	4313      	orrs	r3, r2
 801bcec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	69ba      	ldr	r2, [r7, #24]
 801bcf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bcf4:	683b      	ldr	r3, [r7, #0]
 801bcf6:	685b      	ldr	r3, [r3, #4]
 801bcf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	f000 80a2 	beq.w	801be46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bd02:	2300      	movs	r3, #0
 801bd04:	60fb      	str	r3, [r7, #12]
 801bd06:	4b57      	ldr	r3, [pc, #348]	; (801be64 <HAL_GPIO_Init+0x2e8>)
 801bd08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd0a:	4a56      	ldr	r2, [pc, #344]	; (801be64 <HAL_GPIO_Init+0x2e8>)
 801bd0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bd10:	6453      	str	r3, [r2, #68]	; 0x44
 801bd12:	4b54      	ldr	r3, [pc, #336]	; (801be64 <HAL_GPIO_Init+0x2e8>)
 801bd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bd1a:	60fb      	str	r3, [r7, #12]
 801bd1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bd1e:	4a52      	ldr	r2, [pc, #328]	; (801be68 <HAL_GPIO_Init+0x2ec>)
 801bd20:	69fb      	ldr	r3, [r7, #28]
 801bd22:	089b      	lsrs	r3, r3, #2
 801bd24:	3302      	adds	r3, #2
 801bd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801bd2c:	69fb      	ldr	r3, [r7, #28]
 801bd2e:	f003 0303 	and.w	r3, r3, #3
 801bd32:	009b      	lsls	r3, r3, #2
 801bd34:	220f      	movs	r2, #15
 801bd36:	fa02 f303 	lsl.w	r3, r2, r3
 801bd3a:	43db      	mvns	r3, r3
 801bd3c:	69ba      	ldr	r2, [r7, #24]
 801bd3e:	4013      	ands	r3, r2
 801bd40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	4a49      	ldr	r2, [pc, #292]	; (801be6c <HAL_GPIO_Init+0x2f0>)
 801bd46:	4293      	cmp	r3, r2
 801bd48:	d019      	beq.n	801bd7e <HAL_GPIO_Init+0x202>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	4a48      	ldr	r2, [pc, #288]	; (801be70 <HAL_GPIO_Init+0x2f4>)
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d013      	beq.n	801bd7a <HAL_GPIO_Init+0x1fe>
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	4a47      	ldr	r2, [pc, #284]	; (801be74 <HAL_GPIO_Init+0x2f8>)
 801bd56:	4293      	cmp	r3, r2
 801bd58:	d00d      	beq.n	801bd76 <HAL_GPIO_Init+0x1fa>
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	4a46      	ldr	r2, [pc, #280]	; (801be78 <HAL_GPIO_Init+0x2fc>)
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	d007      	beq.n	801bd72 <HAL_GPIO_Init+0x1f6>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	4a45      	ldr	r2, [pc, #276]	; (801be7c <HAL_GPIO_Init+0x300>)
 801bd66:	4293      	cmp	r3, r2
 801bd68:	d101      	bne.n	801bd6e <HAL_GPIO_Init+0x1f2>
 801bd6a:	2304      	movs	r3, #4
 801bd6c:	e008      	b.n	801bd80 <HAL_GPIO_Init+0x204>
 801bd6e:	2307      	movs	r3, #7
 801bd70:	e006      	b.n	801bd80 <HAL_GPIO_Init+0x204>
 801bd72:	2303      	movs	r3, #3
 801bd74:	e004      	b.n	801bd80 <HAL_GPIO_Init+0x204>
 801bd76:	2302      	movs	r3, #2
 801bd78:	e002      	b.n	801bd80 <HAL_GPIO_Init+0x204>
 801bd7a:	2301      	movs	r3, #1
 801bd7c:	e000      	b.n	801bd80 <HAL_GPIO_Init+0x204>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	69fa      	ldr	r2, [r7, #28]
 801bd82:	f002 0203 	and.w	r2, r2, #3
 801bd86:	0092      	lsls	r2, r2, #2
 801bd88:	4093      	lsls	r3, r2
 801bd8a:	69ba      	ldr	r2, [r7, #24]
 801bd8c:	4313      	orrs	r3, r2
 801bd8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bd90:	4935      	ldr	r1, [pc, #212]	; (801be68 <HAL_GPIO_Init+0x2ec>)
 801bd92:	69fb      	ldr	r3, [r7, #28]
 801bd94:	089b      	lsrs	r3, r3, #2
 801bd96:	3302      	adds	r3, #2
 801bd98:	69ba      	ldr	r2, [r7, #24]
 801bd9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801bd9e:	4b38      	ldr	r3, [pc, #224]	; (801be80 <HAL_GPIO_Init+0x304>)
 801bda0:	689b      	ldr	r3, [r3, #8]
 801bda2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bda4:	693b      	ldr	r3, [r7, #16]
 801bda6:	43db      	mvns	r3, r3
 801bda8:	69ba      	ldr	r2, [r7, #24]
 801bdaa:	4013      	ands	r3, r2
 801bdac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	685b      	ldr	r3, [r3, #4]
 801bdb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d003      	beq.n	801bdc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801bdba:	69ba      	ldr	r2, [r7, #24]
 801bdbc:	693b      	ldr	r3, [r7, #16]
 801bdbe:	4313      	orrs	r3, r2
 801bdc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801bdc2:	4a2f      	ldr	r2, [pc, #188]	; (801be80 <HAL_GPIO_Init+0x304>)
 801bdc4:	69bb      	ldr	r3, [r7, #24]
 801bdc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801bdc8:	4b2d      	ldr	r3, [pc, #180]	; (801be80 <HAL_GPIO_Init+0x304>)
 801bdca:	68db      	ldr	r3, [r3, #12]
 801bdcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bdce:	693b      	ldr	r3, [r7, #16]
 801bdd0:	43db      	mvns	r3, r3
 801bdd2:	69ba      	ldr	r2, [r7, #24]
 801bdd4:	4013      	ands	r3, r2
 801bdd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bdd8:	683b      	ldr	r3, [r7, #0]
 801bdda:	685b      	ldr	r3, [r3, #4]
 801bddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d003      	beq.n	801bdec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801bde4:	69ba      	ldr	r2, [r7, #24]
 801bde6:	693b      	ldr	r3, [r7, #16]
 801bde8:	4313      	orrs	r3, r2
 801bdea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801bdec:	4a24      	ldr	r2, [pc, #144]	; (801be80 <HAL_GPIO_Init+0x304>)
 801bdee:	69bb      	ldr	r3, [r7, #24]
 801bdf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801bdf2:	4b23      	ldr	r3, [pc, #140]	; (801be80 <HAL_GPIO_Init+0x304>)
 801bdf4:	685b      	ldr	r3, [r3, #4]
 801bdf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bdf8:	693b      	ldr	r3, [r7, #16]
 801bdfa:	43db      	mvns	r3, r3
 801bdfc:	69ba      	ldr	r2, [r7, #24]
 801bdfe:	4013      	ands	r3, r2
 801be00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	685b      	ldr	r3, [r3, #4]
 801be06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d003      	beq.n	801be16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801be0e:	69ba      	ldr	r2, [r7, #24]
 801be10:	693b      	ldr	r3, [r7, #16]
 801be12:	4313      	orrs	r3, r2
 801be14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801be16:	4a1a      	ldr	r2, [pc, #104]	; (801be80 <HAL_GPIO_Init+0x304>)
 801be18:	69bb      	ldr	r3, [r7, #24]
 801be1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801be1c:	4b18      	ldr	r3, [pc, #96]	; (801be80 <HAL_GPIO_Init+0x304>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	43db      	mvns	r3, r3
 801be26:	69ba      	ldr	r2, [r7, #24]
 801be28:	4013      	ands	r3, r2
 801be2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801be34:	2b00      	cmp	r3, #0
 801be36:	d003      	beq.n	801be40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801be38:	69ba      	ldr	r2, [r7, #24]
 801be3a:	693b      	ldr	r3, [r7, #16]
 801be3c:	4313      	orrs	r3, r2
 801be3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801be40:	4a0f      	ldr	r2, [pc, #60]	; (801be80 <HAL_GPIO_Init+0x304>)
 801be42:	69bb      	ldr	r3, [r7, #24]
 801be44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801be46:	69fb      	ldr	r3, [r7, #28]
 801be48:	3301      	adds	r3, #1
 801be4a:	61fb      	str	r3, [r7, #28]
 801be4c:	69fb      	ldr	r3, [r7, #28]
 801be4e:	2b0f      	cmp	r3, #15
 801be50:	f67f aea2 	bls.w	801bb98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801be54:	bf00      	nop
 801be56:	bf00      	nop
 801be58:	3724      	adds	r7, #36	; 0x24
 801be5a:	46bd      	mov	sp, r7
 801be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be60:	4770      	bx	lr
 801be62:	bf00      	nop
 801be64:	40023800 	.word	0x40023800
 801be68:	40013800 	.word	0x40013800
 801be6c:	40020000 	.word	0x40020000
 801be70:	40020400 	.word	0x40020400
 801be74:	40020800 	.word	0x40020800
 801be78:	40020c00 	.word	0x40020c00
 801be7c:	40021000 	.word	0x40021000
 801be80:	40013c00 	.word	0x40013c00

0801be84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801be84:	b480      	push	{r7}
 801be86:	b087      	sub	sp, #28
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801be8e:	2300      	movs	r3, #0
 801be90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801be92:	2300      	movs	r3, #0
 801be94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801be96:	2300      	movs	r3, #0
 801be98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801be9a:	2300      	movs	r3, #0
 801be9c:	617b      	str	r3, [r7, #20]
 801be9e:	e0bb      	b.n	801c018 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801bea0:	2201      	movs	r2, #1
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	fa02 f303 	lsl.w	r3, r2, r3
 801bea8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801beaa:	683a      	ldr	r2, [r7, #0]
 801beac:	693b      	ldr	r3, [r7, #16]
 801beae:	4013      	ands	r3, r2
 801beb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801beb2:	68fa      	ldr	r2, [r7, #12]
 801beb4:	693b      	ldr	r3, [r7, #16]
 801beb6:	429a      	cmp	r2, r3
 801beb8:	f040 80ab 	bne.w	801c012 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801bebc:	4a5c      	ldr	r2, [pc, #368]	; (801c030 <HAL_GPIO_DeInit+0x1ac>)
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	089b      	lsrs	r3, r3, #2
 801bec2:	3302      	adds	r3, #2
 801bec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bec8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801beca:	697b      	ldr	r3, [r7, #20]
 801becc:	f003 0303 	and.w	r3, r3, #3
 801bed0:	009b      	lsls	r3, r3, #2
 801bed2:	220f      	movs	r2, #15
 801bed4:	fa02 f303 	lsl.w	r3, r2, r3
 801bed8:	68ba      	ldr	r2, [r7, #8]
 801beda:	4013      	ands	r3, r2
 801bedc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	4a54      	ldr	r2, [pc, #336]	; (801c034 <HAL_GPIO_DeInit+0x1b0>)
 801bee2:	4293      	cmp	r3, r2
 801bee4:	d019      	beq.n	801bf1a <HAL_GPIO_DeInit+0x96>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	4a53      	ldr	r2, [pc, #332]	; (801c038 <HAL_GPIO_DeInit+0x1b4>)
 801beea:	4293      	cmp	r3, r2
 801beec:	d013      	beq.n	801bf16 <HAL_GPIO_DeInit+0x92>
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	4a52      	ldr	r2, [pc, #328]	; (801c03c <HAL_GPIO_DeInit+0x1b8>)
 801bef2:	4293      	cmp	r3, r2
 801bef4:	d00d      	beq.n	801bf12 <HAL_GPIO_DeInit+0x8e>
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	4a51      	ldr	r2, [pc, #324]	; (801c040 <HAL_GPIO_DeInit+0x1bc>)
 801befa:	4293      	cmp	r3, r2
 801befc:	d007      	beq.n	801bf0e <HAL_GPIO_DeInit+0x8a>
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	4a50      	ldr	r2, [pc, #320]	; (801c044 <HAL_GPIO_DeInit+0x1c0>)
 801bf02:	4293      	cmp	r3, r2
 801bf04:	d101      	bne.n	801bf0a <HAL_GPIO_DeInit+0x86>
 801bf06:	2304      	movs	r3, #4
 801bf08:	e008      	b.n	801bf1c <HAL_GPIO_DeInit+0x98>
 801bf0a:	2307      	movs	r3, #7
 801bf0c:	e006      	b.n	801bf1c <HAL_GPIO_DeInit+0x98>
 801bf0e:	2303      	movs	r3, #3
 801bf10:	e004      	b.n	801bf1c <HAL_GPIO_DeInit+0x98>
 801bf12:	2302      	movs	r3, #2
 801bf14:	e002      	b.n	801bf1c <HAL_GPIO_DeInit+0x98>
 801bf16:	2301      	movs	r3, #1
 801bf18:	e000      	b.n	801bf1c <HAL_GPIO_DeInit+0x98>
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	697a      	ldr	r2, [r7, #20]
 801bf1e:	f002 0203 	and.w	r2, r2, #3
 801bf22:	0092      	lsls	r2, r2, #2
 801bf24:	4093      	lsls	r3, r2
 801bf26:	68ba      	ldr	r2, [r7, #8]
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d132      	bne.n	801bf92 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801bf2c:	4b46      	ldr	r3, [pc, #280]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf2e:	681a      	ldr	r2, [r3, #0]
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	43db      	mvns	r3, r3
 801bf34:	4944      	ldr	r1, [pc, #272]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf36:	4013      	ands	r3, r2
 801bf38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801bf3a:	4b43      	ldr	r3, [pc, #268]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf3c:	685a      	ldr	r2, [r3, #4]
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	43db      	mvns	r3, r3
 801bf42:	4941      	ldr	r1, [pc, #260]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf44:	4013      	ands	r3, r2
 801bf46:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801bf48:	4b3f      	ldr	r3, [pc, #252]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf4a:	68da      	ldr	r2, [r3, #12]
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	43db      	mvns	r3, r3
 801bf50:	493d      	ldr	r1, [pc, #244]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf52:	4013      	ands	r3, r2
 801bf54:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801bf56:	4b3c      	ldr	r3, [pc, #240]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf58:	689a      	ldr	r2, [r3, #8]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	43db      	mvns	r3, r3
 801bf5e:	493a      	ldr	r1, [pc, #232]	; (801c048 <HAL_GPIO_DeInit+0x1c4>)
 801bf60:	4013      	ands	r3, r2
 801bf62:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801bf64:	697b      	ldr	r3, [r7, #20]
 801bf66:	f003 0303 	and.w	r3, r3, #3
 801bf6a:	009b      	lsls	r3, r3, #2
 801bf6c:	220f      	movs	r2, #15
 801bf6e:	fa02 f303 	lsl.w	r3, r2, r3
 801bf72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801bf74:	4a2e      	ldr	r2, [pc, #184]	; (801c030 <HAL_GPIO_DeInit+0x1ac>)
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	089b      	lsrs	r3, r3, #2
 801bf7a:	3302      	adds	r3, #2
 801bf7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bf80:	68bb      	ldr	r3, [r7, #8]
 801bf82:	43da      	mvns	r2, r3
 801bf84:	482a      	ldr	r0, [pc, #168]	; (801c030 <HAL_GPIO_DeInit+0x1ac>)
 801bf86:	697b      	ldr	r3, [r7, #20]
 801bf88:	089b      	lsrs	r3, r3, #2
 801bf8a:	400a      	ands	r2, r1
 801bf8c:	3302      	adds	r3, #2
 801bf8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	681a      	ldr	r2, [r3, #0]
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	005b      	lsls	r3, r3, #1
 801bf9a:	2103      	movs	r1, #3
 801bf9c:	fa01 f303 	lsl.w	r3, r1, r3
 801bfa0:	43db      	mvns	r3, r3
 801bfa2:	401a      	ands	r2, r3
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	08da      	lsrs	r2, r3, #3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	3208      	adds	r2, #8
 801bfb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bfb4:	697b      	ldr	r3, [r7, #20]
 801bfb6:	f003 0307 	and.w	r3, r3, #7
 801bfba:	009b      	lsls	r3, r3, #2
 801bfbc:	220f      	movs	r2, #15
 801bfbe:	fa02 f303 	lsl.w	r3, r2, r3
 801bfc2:	43db      	mvns	r3, r3
 801bfc4:	697a      	ldr	r2, [r7, #20]
 801bfc6:	08d2      	lsrs	r2, r2, #3
 801bfc8:	4019      	ands	r1, r3
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	3208      	adds	r2, #8
 801bfce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	68da      	ldr	r2, [r3, #12]
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	005b      	lsls	r3, r3, #1
 801bfda:	2103      	movs	r1, #3
 801bfdc:	fa01 f303 	lsl.w	r3, r1, r3
 801bfe0:	43db      	mvns	r3, r3
 801bfe2:	401a      	ands	r2, r3
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	685a      	ldr	r2, [r3, #4]
 801bfec:	2101      	movs	r1, #1
 801bfee:	697b      	ldr	r3, [r7, #20]
 801bff0:	fa01 f303 	lsl.w	r3, r1, r3
 801bff4:	43db      	mvns	r3, r3
 801bff6:	401a      	ands	r2, r3
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	689a      	ldr	r2, [r3, #8]
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	005b      	lsls	r3, r3, #1
 801c004:	2103      	movs	r1, #3
 801c006:	fa01 f303 	lsl.w	r3, r1, r3
 801c00a:	43db      	mvns	r3, r3
 801c00c:	401a      	ands	r2, r3
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c012:	697b      	ldr	r3, [r7, #20]
 801c014:	3301      	adds	r3, #1
 801c016:	617b      	str	r3, [r7, #20]
 801c018:	697b      	ldr	r3, [r7, #20]
 801c01a:	2b0f      	cmp	r3, #15
 801c01c:	f67f af40 	bls.w	801bea0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801c020:	bf00      	nop
 801c022:	bf00      	nop
 801c024:	371c      	adds	r7, #28
 801c026:	46bd      	mov	sp, r7
 801c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02c:	4770      	bx	lr
 801c02e:	bf00      	nop
 801c030:	40013800 	.word	0x40013800
 801c034:	40020000 	.word	0x40020000
 801c038:	40020400 	.word	0x40020400
 801c03c:	40020800 	.word	0x40020800
 801c040:	40020c00 	.word	0x40020c00
 801c044:	40021000 	.word	0x40021000
 801c048:	40013c00 	.word	0x40013c00

0801c04c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c04c:	b480      	push	{r7}
 801c04e:	b083      	sub	sp, #12
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	460b      	mov	r3, r1
 801c056:	807b      	strh	r3, [r7, #2]
 801c058:	4613      	mov	r3, r2
 801c05a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c05c:	787b      	ldrb	r3, [r7, #1]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d003      	beq.n	801c06a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c062:	887a      	ldrh	r2, [r7, #2]
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801c068:	e003      	b.n	801c072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801c06a:	887b      	ldrh	r3, [r7, #2]
 801c06c:	041a      	lsls	r2, r3, #16
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	619a      	str	r2, [r3, #24]
}
 801c072:	bf00      	nop
 801c074:	370c      	adds	r7, #12
 801c076:	46bd      	mov	sp, r7
 801c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07c:	4770      	bx	lr
	...

0801c080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b082      	sub	sp, #8
 801c084:	af00      	add	r7, sp, #0
 801c086:	4603      	mov	r3, r0
 801c088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801c08a:	4b08      	ldr	r3, [pc, #32]	; (801c0ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c08c:	695a      	ldr	r2, [r3, #20]
 801c08e:	88fb      	ldrh	r3, [r7, #6]
 801c090:	4013      	ands	r3, r2
 801c092:	2b00      	cmp	r3, #0
 801c094:	d006      	beq.n	801c0a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c096:	4a05      	ldr	r2, [pc, #20]	; (801c0ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c098:	88fb      	ldrh	r3, [r7, #6]
 801c09a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c09c:	88fb      	ldrh	r3, [r7, #6]
 801c09e:	4618      	mov	r0, r3
 801c0a0:	f7e6 f820 	bl	80020e4 <HAL_GPIO_EXTI_Callback>
  }
}
 801c0a4:	bf00      	nop
 801c0a6:	3708      	adds	r7, #8
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	bd80      	pop	{r7, pc}
 801c0ac:	40013c00 	.word	0x40013c00

0801c0b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b084      	sub	sp, #16
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d101      	bne.n	801c0c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c0be:	2301      	movs	r3, #1
 801c0c0:	e12b      	b.n	801c31a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c0c8:	b2db      	uxtb	r3, r3
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d106      	bne.n	801c0dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801c0d6:	6878      	ldr	r0, [r7, #4]
 801c0d8:	f7e7 fab2 	bl	8003640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2224      	movs	r2, #36	; 0x24
 801c0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	f022 0201 	bic.w	r2, r2, #1
 801c0f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	681a      	ldr	r2, [r3, #0]
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801c114:	f003 fb3c 	bl	801f790 <HAL_RCC_GetPCLK1Freq>
 801c118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	685b      	ldr	r3, [r3, #4]
 801c11e:	4a81      	ldr	r2, [pc, #516]	; (801c324 <HAL_I2C_Init+0x274>)
 801c120:	4293      	cmp	r3, r2
 801c122:	d807      	bhi.n	801c134 <HAL_I2C_Init+0x84>
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	4a80      	ldr	r2, [pc, #512]	; (801c328 <HAL_I2C_Init+0x278>)
 801c128:	4293      	cmp	r3, r2
 801c12a:	bf94      	ite	ls
 801c12c:	2301      	movls	r3, #1
 801c12e:	2300      	movhi	r3, #0
 801c130:	b2db      	uxtb	r3, r3
 801c132:	e006      	b.n	801c142 <HAL_I2C_Init+0x92>
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	4a7d      	ldr	r2, [pc, #500]	; (801c32c <HAL_I2C_Init+0x27c>)
 801c138:	4293      	cmp	r3, r2
 801c13a:	bf94      	ite	ls
 801c13c:	2301      	movls	r3, #1
 801c13e:	2300      	movhi	r3, #0
 801c140:	b2db      	uxtb	r3, r3
 801c142:	2b00      	cmp	r3, #0
 801c144:	d001      	beq.n	801c14a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801c146:	2301      	movs	r3, #1
 801c148:	e0e7      	b.n	801c31a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	4a78      	ldr	r2, [pc, #480]	; (801c330 <HAL_I2C_Init+0x280>)
 801c14e:	fba2 2303 	umull	r2, r3, r2, r3
 801c152:	0c9b      	lsrs	r3, r3, #18
 801c154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	685b      	ldr	r3, [r3, #4]
 801c15c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	68ba      	ldr	r2, [r7, #8]
 801c166:	430a      	orrs	r2, r1
 801c168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	6a1b      	ldr	r3, [r3, #32]
 801c170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	685b      	ldr	r3, [r3, #4]
 801c178:	4a6a      	ldr	r2, [pc, #424]	; (801c324 <HAL_I2C_Init+0x274>)
 801c17a:	4293      	cmp	r3, r2
 801c17c:	d802      	bhi.n	801c184 <HAL_I2C_Init+0xd4>
 801c17e:	68bb      	ldr	r3, [r7, #8]
 801c180:	3301      	adds	r3, #1
 801c182:	e009      	b.n	801c198 <HAL_I2C_Init+0xe8>
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c18a:	fb02 f303 	mul.w	r3, r2, r3
 801c18e:	4a69      	ldr	r2, [pc, #420]	; (801c334 <HAL_I2C_Init+0x284>)
 801c190:	fba2 2303 	umull	r2, r3, r2, r3
 801c194:	099b      	lsrs	r3, r3, #6
 801c196:	3301      	adds	r3, #1
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	6812      	ldr	r2, [r2, #0]
 801c19c:	430b      	orrs	r3, r1
 801c19e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	69db      	ldr	r3, [r3, #28]
 801c1a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801c1aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	685b      	ldr	r3, [r3, #4]
 801c1b2:	495c      	ldr	r1, [pc, #368]	; (801c324 <HAL_I2C_Init+0x274>)
 801c1b4:	428b      	cmp	r3, r1
 801c1b6:	d819      	bhi.n	801c1ec <HAL_I2C_Init+0x13c>
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	1e59      	subs	r1, r3, #1
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	005b      	lsls	r3, r3, #1
 801c1c2:	fbb1 f3f3 	udiv	r3, r1, r3
 801c1c6:	1c59      	adds	r1, r3, #1
 801c1c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 801c1cc:	400b      	ands	r3, r1
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d00a      	beq.n	801c1e8 <HAL_I2C_Init+0x138>
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	1e59      	subs	r1, r3, #1
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	685b      	ldr	r3, [r3, #4]
 801c1da:	005b      	lsls	r3, r3, #1
 801c1dc:	fbb1 f3f3 	udiv	r3, r1, r3
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c1e6:	e051      	b.n	801c28c <HAL_I2C_Init+0x1dc>
 801c1e8:	2304      	movs	r3, #4
 801c1ea:	e04f      	b.n	801c28c <HAL_I2C_Init+0x1dc>
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	689b      	ldr	r3, [r3, #8]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d111      	bne.n	801c218 <HAL_I2C_Init+0x168>
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	1e58      	subs	r0, r3, #1
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6859      	ldr	r1, [r3, #4]
 801c1fc:	460b      	mov	r3, r1
 801c1fe:	005b      	lsls	r3, r3, #1
 801c200:	440b      	add	r3, r1
 801c202:	fbb0 f3f3 	udiv	r3, r0, r3
 801c206:	3301      	adds	r3, #1
 801c208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	bf0c      	ite	eq
 801c210:	2301      	moveq	r3, #1
 801c212:	2300      	movne	r3, #0
 801c214:	b2db      	uxtb	r3, r3
 801c216:	e012      	b.n	801c23e <HAL_I2C_Init+0x18e>
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	1e58      	subs	r0, r3, #1
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	6859      	ldr	r1, [r3, #4]
 801c220:	460b      	mov	r3, r1
 801c222:	009b      	lsls	r3, r3, #2
 801c224:	440b      	add	r3, r1
 801c226:	0099      	lsls	r1, r3, #2
 801c228:	440b      	add	r3, r1
 801c22a:	fbb0 f3f3 	udiv	r3, r0, r3
 801c22e:	3301      	adds	r3, #1
 801c230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c234:	2b00      	cmp	r3, #0
 801c236:	bf0c      	ite	eq
 801c238:	2301      	moveq	r3, #1
 801c23a:	2300      	movne	r3, #0
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d001      	beq.n	801c246 <HAL_I2C_Init+0x196>
 801c242:	2301      	movs	r3, #1
 801c244:	e022      	b.n	801c28c <HAL_I2C_Init+0x1dc>
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	689b      	ldr	r3, [r3, #8]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d10e      	bne.n	801c26c <HAL_I2C_Init+0x1bc>
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	1e58      	subs	r0, r3, #1
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	6859      	ldr	r1, [r3, #4]
 801c256:	460b      	mov	r3, r1
 801c258:	005b      	lsls	r3, r3, #1
 801c25a:	440b      	add	r3, r1
 801c25c:	fbb0 f3f3 	udiv	r3, r0, r3
 801c260:	3301      	adds	r3, #1
 801c262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c26a:	e00f      	b.n	801c28c <HAL_I2C_Init+0x1dc>
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	1e58      	subs	r0, r3, #1
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	6859      	ldr	r1, [r3, #4]
 801c274:	460b      	mov	r3, r1
 801c276:	009b      	lsls	r3, r3, #2
 801c278:	440b      	add	r3, r1
 801c27a:	0099      	lsls	r1, r3, #2
 801c27c:	440b      	add	r3, r1
 801c27e:	fbb0 f3f3 	udiv	r3, r0, r3
 801c282:	3301      	adds	r3, #1
 801c284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c28c:	6879      	ldr	r1, [r7, #4]
 801c28e:	6809      	ldr	r1, [r1, #0]
 801c290:	4313      	orrs	r3, r2
 801c292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	69da      	ldr	r2, [r3, #28]
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	6a1b      	ldr	r3, [r3, #32]
 801c2a6:	431a      	orrs	r2, r3
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	430a      	orrs	r2, r1
 801c2ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	689b      	ldr	r3, [r3, #8]
 801c2b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801c2ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	6911      	ldr	r1, [r2, #16]
 801c2c2:	687a      	ldr	r2, [r7, #4]
 801c2c4:	68d2      	ldr	r2, [r2, #12]
 801c2c6:	4311      	orrs	r1, r2
 801c2c8:	687a      	ldr	r2, [r7, #4]
 801c2ca:	6812      	ldr	r2, [r2, #0]
 801c2cc:	430b      	orrs	r3, r1
 801c2ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	68db      	ldr	r3, [r3, #12]
 801c2d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	695a      	ldr	r2, [r3, #20]
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	699b      	ldr	r3, [r3, #24]
 801c2e2:	431a      	orrs	r2, r3
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	430a      	orrs	r2, r1
 801c2ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	681a      	ldr	r2, [r3, #0]
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	f042 0201 	orr.w	r2, r2, #1
 801c2fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2200      	movs	r2, #0
 801c300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	2220      	movs	r2, #32
 801c306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	2200      	movs	r2, #0
 801c30e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	2200      	movs	r2, #0
 801c314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801c318:	2300      	movs	r3, #0
}
 801c31a:	4618      	mov	r0, r3
 801c31c:	3710      	adds	r7, #16
 801c31e:	46bd      	mov	sp, r7
 801c320:	bd80      	pop	{r7, pc}
 801c322:	bf00      	nop
 801c324:	000186a0 	.word	0x000186a0
 801c328:	001e847f 	.word	0x001e847f
 801c32c:	003d08ff 	.word	0x003d08ff
 801c330:	431bde83 	.word	0x431bde83
 801c334:	10624dd3 	.word	0x10624dd3

0801c338 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b086      	sub	sp, #24
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	60f8      	str	r0, [r7, #12]
 801c340:	607a      	str	r2, [r7, #4]
 801c342:	461a      	mov	r2, r3
 801c344:	460b      	mov	r3, r1
 801c346:	817b      	strh	r3, [r7, #10]
 801c348:	4613      	mov	r3, r2
 801c34a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c34c:	2300      	movs	r3, #0
 801c34e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c356:	b2db      	uxtb	r3, r3
 801c358:	2b20      	cmp	r3, #32
 801c35a:	f040 810d 	bne.w	801c578 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c35e:	4b89      	ldr	r3, [pc, #548]	; (801c584 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	08db      	lsrs	r3, r3, #3
 801c364:	4a88      	ldr	r2, [pc, #544]	; (801c588 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801c366:	fba2 2303 	umull	r2, r3, r2, r3
 801c36a:	0a1a      	lsrs	r2, r3, #8
 801c36c:	4613      	mov	r3, r2
 801c36e:	009b      	lsls	r3, r3, #2
 801c370:	4413      	add	r3, r2
 801c372:	009a      	lsls	r2, r3, #2
 801c374:	4413      	add	r3, r2
 801c376:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c378:	693b      	ldr	r3, [r7, #16]
 801c37a:	3b01      	subs	r3, #1
 801c37c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c37e:	693b      	ldr	r3, [r7, #16]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d116      	bne.n	801c3b2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	2200      	movs	r2, #0
 801c388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	2220      	movs	r2, #32
 801c38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	2200      	movs	r2, #0
 801c396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c39e:	f043 0220 	orr.w	r2, r3, #32
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	e0e3      	b.n	801c57a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	699b      	ldr	r3, [r3, #24]
 801c3b8:	f003 0302 	and.w	r3, r3, #2
 801c3bc:	2b02      	cmp	r3, #2
 801c3be:	d0db      	beq.n	801c378 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c3c6:	2b01      	cmp	r3, #1
 801c3c8:	d101      	bne.n	801c3ce <HAL_I2C_Master_Transmit_DMA+0x96>
 801c3ca:	2302      	movs	r3, #2
 801c3cc:	e0d5      	b.n	801c57a <HAL_I2C_Master_Transmit_DMA+0x242>
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	2201      	movs	r2, #1
 801c3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	f003 0301 	and.w	r3, r3, #1
 801c3e0:	2b01      	cmp	r3, #1
 801c3e2:	d007      	beq.n	801c3f4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	681a      	ldr	r2, [r3, #0]
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	f042 0201 	orr.w	r2, r2, #1
 801c3f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	681a      	ldr	r2, [r3, #0]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	2221      	movs	r2, #33	; 0x21
 801c408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	2210      	movs	r2, #16
 801c410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2200      	movs	r2, #0
 801c418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	687a      	ldr	r2, [r7, #4]
 801c41e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	893a      	ldrh	r2, [r7, #8]
 801c424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c42a:	b29a      	uxth	r2, r3
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	4a56      	ldr	r2, [pc, #344]	; (801c58c <HAL_I2C_Master_Transmit_DMA+0x254>)
 801c434:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c436:	897a      	ldrh	r2, [r7, #10]
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c440:	2b00      	cmp	r3, #0
 801c442:	d07b      	beq.n	801c53c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d02a      	beq.n	801c4a2 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c450:	4a4f      	ldr	r2, [pc, #316]	; (801c590 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801c452:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c458:	4a4e      	ldr	r2, [pc, #312]	; (801c594 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801c45a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c460:	2200      	movs	r2, #0
 801c462:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c468:	2200      	movs	r2, #0
 801c46a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c470:	2200      	movs	r2, #0
 801c472:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c478:	2200      	movs	r2, #0
 801c47a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c484:	4619      	mov	r1, r3
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	3310      	adds	r3, #16
 801c48c:	461a      	mov	r2, r3
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c492:	f7ff f805 	bl	801b4a0 <HAL_DMA_Start_IT>
 801c496:	4603      	mov	r3, r0
 801c498:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c49a:	7dfb      	ldrb	r3, [r7, #23]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d139      	bne.n	801c514 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801c4a0:	e013      	b.n	801c4ca <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	2220      	movs	r2, #32
 801c4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	2200      	movs	r2, #0
 801c4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c4c6:	2301      	movs	r3, #1
 801c4c8:	e057      	b.n	801c57a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	685a      	ldr	r2, [r3, #4]
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c4e0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	685a      	ldr	r2, [r3, #4]
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c4f0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	681a      	ldr	r2, [r3, #0]
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c500:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	681a      	ldr	r2, [r3, #0]
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c510:	601a      	str	r2, [r3, #0]
 801c512:	e02f      	b.n	801c574 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	2220      	movs	r2, #32
 801c518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	2200      	movs	r2, #0
 801c520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c528:	f043 0210 	orr.w	r2, r3, #16
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	2200      	movs	r2, #0
 801c534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c538:	2301      	movs	r3, #1
 801c53a:	e01e      	b.n	801c57a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	681a      	ldr	r2, [r3, #0]
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c54a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	681a      	ldr	r2, [r3, #0]
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c55a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	2200      	movs	r2, #0
 801c560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	685a      	ldr	r2, [r3, #4]
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801c572:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801c574:	2300      	movs	r3, #0
 801c576:	e000      	b.n	801c57a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801c578:	2302      	movs	r3, #2
  }
}
 801c57a:	4618      	mov	r0, r3
 801c57c:	3718      	adds	r7, #24
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd80      	pop	{r7, pc}
 801c582:	bf00      	nop
 801c584:	20000020 	.word	0x20000020
 801c588:	14f8b589 	.word	0x14f8b589
 801c58c:	ffff0000 	.word	0xffff0000
 801c590:	0801e85d 	.word	0x0801e85d
 801c594:	0801ea07 	.word	0x0801ea07

0801c598 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b086      	sub	sp, #24
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	60f8      	str	r0, [r7, #12]
 801c5a0:	607a      	str	r2, [r7, #4]
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	817b      	strh	r3, [r7, #10]
 801c5a8:	4613      	mov	r3, r2
 801c5aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	2b20      	cmp	r3, #32
 801c5ba:	f040 810d 	bne.w	801c7d8 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c5be:	4b89      	ldr	r3, [pc, #548]	; (801c7e4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	08db      	lsrs	r3, r3, #3
 801c5c4:	4a88      	ldr	r2, [pc, #544]	; (801c7e8 <HAL_I2C_Master_Receive_DMA+0x250>)
 801c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 801c5ca:	0a1a      	lsrs	r2, r3, #8
 801c5cc:	4613      	mov	r3, r2
 801c5ce:	009b      	lsls	r3, r3, #2
 801c5d0:	4413      	add	r3, r2
 801c5d2:	009a      	lsls	r2, r3, #2
 801c5d4:	4413      	add	r3, r2
 801c5d6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d116      	bne.n	801c612 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	2220      	movs	r2, #32
 801c5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5fe:	f043 0220 	orr.w	r2, r3, #32
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	2200      	movs	r2, #0
 801c60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c60e:	2301      	movs	r3, #1
 801c610:	e0e3      	b.n	801c7da <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	699b      	ldr	r3, [r3, #24]
 801c618:	f003 0302 	and.w	r3, r3, #2
 801c61c:	2b02      	cmp	r3, #2
 801c61e:	d0db      	beq.n	801c5d8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c626:	2b01      	cmp	r3, #1
 801c628:	d101      	bne.n	801c62e <HAL_I2C_Master_Receive_DMA+0x96>
 801c62a:	2302      	movs	r3, #2
 801c62c:	e0d5      	b.n	801c7da <HAL_I2C_Master_Receive_DMA+0x242>
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	2201      	movs	r2, #1
 801c632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	f003 0301 	and.w	r3, r3, #1
 801c640:	2b01      	cmp	r3, #1
 801c642:	d007      	beq.n	801c654 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	681a      	ldr	r2, [r3, #0]
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	f042 0201 	orr.w	r2, r2, #1
 801c652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	681a      	ldr	r2, [r3, #0]
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	2222      	movs	r2, #34	; 0x22
 801c668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	2210      	movs	r2, #16
 801c670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	2200      	movs	r2, #0
 801c678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	687a      	ldr	r2, [r7, #4]
 801c67e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	893a      	ldrh	r2, [r7, #8]
 801c684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c68a:	b29a      	uxth	r2, r3
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	4a56      	ldr	r2, [pc, #344]	; (801c7ec <HAL_I2C_Master_Receive_DMA+0x254>)
 801c694:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c696:	897a      	ldrh	r2, [r7, #10]
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d07b      	beq.n	801c79c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d02a      	beq.n	801c702 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b0:	4a4f      	ldr	r2, [pc, #316]	; (801c7f0 <HAL_I2C_Master_Receive_DMA+0x258>)
 801c6b2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b8:	4a4e      	ldr	r2, [pc, #312]	; (801c7f4 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801c6ba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6c0:	2200      	movs	r2, #0
 801c6c2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6d0:	2200      	movs	r2, #0
 801c6d2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6d8:	2200      	movs	r2, #0
 801c6da:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	3310      	adds	r3, #16
 801c6e6:	4619      	mov	r1, r3
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6ec:	461a      	mov	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6f2:	f7fe fed5 	bl	801b4a0 <HAL_DMA_Start_IT>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c6fa:	7dfb      	ldrb	r3, [r7, #23]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d139      	bne.n	801c774 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801c700:	e013      	b.n	801c72a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2220      	movs	r2, #32
 801c706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2200      	movs	r2, #0
 801c70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c716:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	2200      	movs	r2, #0
 801c722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c726:	2301      	movs	r3, #1
 801c728:	e057      	b.n	801c7da <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	681a      	ldr	r2, [r3, #0]
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c738:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	681a      	ldr	r2, [r3, #0]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c748:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	2200      	movs	r2, #0
 801c74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	685a      	ldr	r2, [r3, #4]
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c760:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	685a      	ldr	r2, [r3, #4]
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c770:	605a      	str	r2, [r3, #4]
 801c772:	e02f      	b.n	801c7d4 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	2220      	movs	r2, #32
 801c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	2200      	movs	r2, #0
 801c780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c788:	f043 0210 	orr.w	r2, r3, #16
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	2200      	movs	r2, #0
 801c794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c798:	2301      	movs	r3, #1
 801c79a:	e01e      	b.n	801c7da <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	685a      	ldr	r2, [r3, #4]
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801c7b2:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	681a      	ldr	r2, [r3, #0]
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c7c2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	681a      	ldr	r2, [r3, #0]
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c7d2:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	e000      	b.n	801c7da <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801c7d8:	2302      	movs	r3, #2
  }
}
 801c7da:	4618      	mov	r0, r3
 801c7dc:	3718      	adds	r7, #24
 801c7de:	46bd      	mov	sp, r7
 801c7e0:	bd80      	pop	{r7, pc}
 801c7e2:	bf00      	nop
 801c7e4:	20000020 	.word	0x20000020
 801c7e8:	14f8b589 	.word	0x14f8b589
 801c7ec:	ffff0000 	.word	0xffff0000
 801c7f0:	0801e85d 	.word	0x0801e85d
 801c7f4:	0801ea07 	.word	0x0801ea07

0801c7f8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b08a      	sub	sp, #40	; 0x28
 801c7fc:	af02      	add	r7, sp, #8
 801c7fe:	60f8      	str	r0, [r7, #12]
 801c800:	4608      	mov	r0, r1
 801c802:	4611      	mov	r1, r2
 801c804:	461a      	mov	r2, r3
 801c806:	4603      	mov	r3, r0
 801c808:	817b      	strh	r3, [r7, #10]
 801c80a:	460b      	mov	r3, r1
 801c80c:	813b      	strh	r3, [r7, #8]
 801c80e:	4613      	mov	r3, r2
 801c810:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801c812:	2300      	movs	r3, #0
 801c814:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801c816:	f7fe f843 	bl	801a8a0 <HAL_GetTick>
 801c81a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c822:	b2db      	uxtb	r3, r3
 801c824:	2b20      	cmp	r3, #32
 801c826:	f040 813a 	bne.w	801ca9e <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c82a:	4b9f      	ldr	r3, [pc, #636]	; (801caa8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	08db      	lsrs	r3, r3, #3
 801c830:	4a9e      	ldr	r2, [pc, #632]	; (801caac <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801c832:	fba2 2303 	umull	r2, r3, r2, r3
 801c836:	0a1a      	lsrs	r2, r3, #8
 801c838:	4613      	mov	r3, r2
 801c83a:	009b      	lsls	r3, r3, #2
 801c83c:	4413      	add	r3, r2
 801c83e:	009a      	lsls	r2, r3, #2
 801c840:	4413      	add	r3, r2
 801c842:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	3b01      	subs	r3, #1
 801c848:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c84a:	697b      	ldr	r3, [r7, #20]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d116      	bne.n	801c87e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	2200      	movs	r2, #0
 801c854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	2220      	movs	r2, #32
 801c85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	2200      	movs	r2, #0
 801c862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c86a:	f043 0220 	orr.w	r2, r3, #32
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	2200      	movs	r2, #0
 801c876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c87a:	2301      	movs	r3, #1
 801c87c:	e110      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	699b      	ldr	r3, [r3, #24]
 801c884:	f003 0302 	and.w	r3, r3, #2
 801c888:	2b02      	cmp	r3, #2
 801c88a:	d0db      	beq.n	801c844 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c892:	2b01      	cmp	r3, #1
 801c894:	d101      	bne.n	801c89a <HAL_I2C_Mem_Write_DMA+0xa2>
 801c896:	2302      	movs	r3, #2
 801c898:	e102      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	2201      	movs	r2, #1
 801c89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	f003 0301 	and.w	r3, r3, #1
 801c8ac:	2b01      	cmp	r3, #1
 801c8ae:	d007      	beq.n	801c8c0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	681a      	ldr	r2, [r3, #0]
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	f042 0201 	orr.w	r2, r2, #1
 801c8be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	681a      	ldr	r2, [r3, #0]
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c8ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	2221      	movs	r2, #33	; 0x21
 801c8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	2240      	movs	r2, #64	; 0x40
 801c8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	2200      	movs	r2, #0
 801c8e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c8ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801c8f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8f6:	b29a      	uxth	r2, r3
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	4a6c      	ldr	r2, [pc, #432]	; (801cab0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801c900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c902:	897a      	ldrh	r2, [r7, #10]
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801c908:	893a      	ldrh	r2, [r7, #8]
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801c90e:	88fa      	ldrh	r2, [r7, #6]
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2200      	movs	r2, #0
 801c918:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c91e:	2b00      	cmp	r3, #0
 801c920:	f000 80a9 	beq.w	801ca76 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d02a      	beq.n	801c982 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c930:	4a60      	ldr	r2, [pc, #384]	; (801cab4 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 801c932:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c938:	4a5f      	ldr	r2, [pc, #380]	; (801cab8 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 801c93a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c940:	2200      	movs	r2, #0
 801c942:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c948:	2200      	movs	r2, #0
 801c94a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c950:	2200      	movs	r2, #0
 801c952:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c958:	2200      	movs	r2, #0
 801c95a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c964:	4619      	mov	r1, r3
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	3310      	adds	r3, #16
 801c96c:	461a      	mov	r2, r3
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c972:	f7fe fd95 	bl	801b4a0 <HAL_DMA_Start_IT>
 801c976:	4603      	mov	r3, r0
 801c978:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c97a:	7efb      	ldrb	r3, [r7, #27]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d166      	bne.n	801ca4e <HAL_I2C_Mem_Write_DMA+0x256>
 801c980:	e013      	b.n	801c9aa <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	2220      	movs	r2, #32
 801c986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	2200      	movs	r2, #0
 801c98e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c996:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c9a6:	2301      	movs	r3, #1
 801c9a8:	e07a      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801c9aa:	88f8      	ldrh	r0, [r7, #6]
 801c9ac:	893a      	ldrh	r2, [r7, #8]
 801c9ae:	8979      	ldrh	r1, [r7, #10]
 801c9b0:	69fb      	ldr	r3, [r7, #28]
 801c9b2:	9301      	str	r3, [sp, #4]
 801c9b4:	2323      	movs	r3, #35	; 0x23
 801c9b6:	9300      	str	r3, [sp, #0]
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	68f8      	ldr	r0, [r7, #12]
 801c9bc:	f001 fdd0 	bl	801e560 <I2C_RequestMemoryWrite>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d022      	beq.n	801ca0c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	f7fe fe30 	bl	801b630 <HAL_DMA_Abort_IT>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9d8:	2200      	movs	r2, #0
 801c9da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	681a      	ldr	r2, [r3, #0]
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c9ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	2200      	movs	r2, #0
 801c9f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	681a      	ldr	r2, [r3, #0]
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	f022 0201 	bic.w	r2, r2, #1
 801ca06:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801ca08:	2301      	movs	r3, #1
 801ca0a:	e049      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	613b      	str	r3, [r7, #16]
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	695b      	ldr	r3, [r3, #20]
 801ca16:	613b      	str	r3, [r7, #16]
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	699b      	ldr	r3, [r3, #24]
 801ca1e:	613b      	str	r3, [r7, #16]
 801ca20:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	2200      	movs	r2, #0
 801ca26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	685a      	ldr	r2, [r3, #4]
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ca38:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	685a      	ldr	r2, [r3, #4]
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ca48:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	e028      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	2220      	movs	r2, #32
 801ca52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	2200      	movs	r2, #0
 801ca5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca62:	f043 0210 	orr.w	r2, r3, #16
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ca72:	2301      	movs	r3, #1
 801ca74:	e014      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	2220      	movs	r2, #32
 801ca7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	2200      	movs	r2, #0
 801ca82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	2200      	movs	r2, #0
 801ca96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	e000      	b.n	801caa0 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 801ca9e:	2302      	movs	r3, #2
  }
}
 801caa0:	4618      	mov	r0, r3
 801caa2:	3720      	adds	r7, #32
 801caa4:	46bd      	mov	sp, r7
 801caa6:	bd80      	pop	{r7, pc}
 801caa8:	20000020 	.word	0x20000020
 801caac:	14f8b589 	.word	0x14f8b589
 801cab0:	ffff0000 	.word	0xffff0000
 801cab4:	0801e85d 	.word	0x0801e85d
 801cab8:	0801ea07 	.word	0x0801ea07

0801cabc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b08c      	sub	sp, #48	; 0x30
 801cac0:	af02      	add	r7, sp, #8
 801cac2:	60f8      	str	r0, [r7, #12]
 801cac4:	4608      	mov	r0, r1
 801cac6:	4611      	mov	r1, r2
 801cac8:	461a      	mov	r2, r3
 801caca:	4603      	mov	r3, r0
 801cacc:	817b      	strh	r3, [r7, #10]
 801cace:	460b      	mov	r3, r1
 801cad0:	813b      	strh	r3, [r7, #8]
 801cad2:	4613      	mov	r3, r2
 801cad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801cad6:	f7fd fee3 	bl	801a8a0 <HAL_GetTick>
 801cada:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801cadc:	2300      	movs	r3, #0
 801cade:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cae6:	b2db      	uxtb	r3, r3
 801cae8:	2b20      	cmp	r3, #32
 801caea:	f040 8176 	bne.w	801cdda <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801caee:	4b95      	ldr	r3, [pc, #596]	; (801cd44 <HAL_I2C_Mem_Read_DMA+0x288>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	08db      	lsrs	r3, r3, #3
 801caf4:	4a94      	ldr	r2, [pc, #592]	; (801cd48 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801caf6:	fba2 2303 	umull	r2, r3, r2, r3
 801cafa:	0a1a      	lsrs	r2, r3, #8
 801cafc:	4613      	mov	r3, r2
 801cafe:	009b      	lsls	r3, r3, #2
 801cb00:	4413      	add	r3, r2
 801cb02:	009a      	lsls	r2, r3, #2
 801cb04:	4413      	add	r3, r2
 801cb06:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801cb08:	69fb      	ldr	r3, [r7, #28]
 801cb0a:	3b01      	subs	r3, #1
 801cb0c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801cb0e:	69fb      	ldr	r3, [r7, #28]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d116      	bne.n	801cb42 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	2200      	movs	r2, #0
 801cb18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	2220      	movs	r2, #32
 801cb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	2200      	movs	r2, #0
 801cb26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb2e:	f043 0220 	orr.w	r2, r3, #32
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	2200      	movs	r2, #0
 801cb3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cb3e:	2301      	movs	r3, #1
 801cb40:	e14c      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	699b      	ldr	r3, [r3, #24]
 801cb48:	f003 0302 	and.w	r3, r3, #2
 801cb4c:	2b02      	cmp	r3, #2
 801cb4e:	d0db      	beq.n	801cb08 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cb56:	2b01      	cmp	r3, #1
 801cb58:	d101      	bne.n	801cb5e <HAL_I2C_Mem_Read_DMA+0xa2>
 801cb5a:	2302      	movs	r3, #2
 801cb5c:	e13e      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	2201      	movs	r2, #1
 801cb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	f003 0301 	and.w	r3, r3, #1
 801cb70:	2b01      	cmp	r3, #1
 801cb72:	d007      	beq.n	801cb84 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	681a      	ldr	r2, [r3, #0]
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	f042 0201 	orr.w	r2, r2, #1
 801cb82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	681a      	ldr	r2, [r3, #0]
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cb92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	2222      	movs	r2, #34	; 0x22
 801cb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	2240      	movs	r2, #64	; 0x40
 801cba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	2200      	movs	r2, #0
 801cba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cbae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801cbb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cbba:	b29a      	uxth	r2, r3
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	4a62      	ldr	r2, [pc, #392]	; (801cd4c <HAL_I2C_Mem_Read_DMA+0x290>)
 801cbc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801cbc6:	897a      	ldrh	r2, [r7, #10]
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801cbcc:	893a      	ldrh	r2, [r7, #8]
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801cbd2:	88fa      	ldrh	r2, [r7, #6]
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f000 80cc 	beq.w	801cd80 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d02d      	beq.n	801cc4c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbf4:	4a56      	ldr	r2, [pc, #344]	; (801cd50 <HAL_I2C_Mem_Read_DMA+0x294>)
 801cbf6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbfc:	4a55      	ldr	r2, [pc, #340]	; (801cd54 <HAL_I2C_Mem_Read_DMA+0x298>)
 801cbfe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc04:	2200      	movs	r2, #0
 801cc06:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc14:	2200      	movs	r2, #0
 801cc16:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	3310      	adds	r3, #16
 801cc2a:	4619      	mov	r1, r3
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc30:	461a      	mov	r2, r3
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cc36:	f7fe fc33 	bl	801b4a0 <HAL_DMA_Start_IT>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801cc40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	f040 8087 	bne.w	801cd58 <HAL_I2C_Mem_Read_DMA+0x29c>
 801cc4a:	e013      	b.n	801cc74 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	2220      	movs	r2, #32
 801cc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	2200      	movs	r2, #0
 801cc58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801cc70:	2301      	movs	r3, #1
 801cc72:	e0b3      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cc74:	88f8      	ldrh	r0, [r7, #6]
 801cc76:	893a      	ldrh	r2, [r7, #8]
 801cc78:	8979      	ldrh	r1, [r7, #10]
 801cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7c:	9301      	str	r3, [sp, #4]
 801cc7e:	2323      	movs	r3, #35	; 0x23
 801cc80:	9300      	str	r3, [sp, #0]
 801cc82:	4603      	mov	r3, r0
 801cc84:	68f8      	ldr	r0, [r7, #12]
 801cc86:	f001 fd01 	bl	801e68c <I2C_RequestMemoryRead>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d023      	beq.n	801ccd8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc94:	4618      	mov	r0, r3
 801cc96:	f7fe fccb 	bl	801b630 <HAL_DMA_Abort_IT>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cca4:	2200      	movs	r2, #0
 801cca6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	681a      	ldr	r2, [r3, #0]
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ccb6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	2200      	movs	r2, #0
 801ccbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	681a      	ldr	r2, [r3, #0]
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	f022 0201 	bic.w	r2, r2, #1
 801ccd2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	e081      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ccdc:	2b01      	cmp	r3, #1
 801ccde:	d108      	bne.n	801ccf2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	681a      	ldr	r2, [r3, #0]
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ccee:	601a      	str	r2, [r3, #0]
 801ccf0:	e007      	b.n	801cd02 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	685a      	ldr	r2, [r3, #4]
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801cd00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cd02:	2300      	movs	r3, #0
 801cd04:	61bb      	str	r3, [r7, #24]
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	695b      	ldr	r3, [r3, #20]
 801cd0c:	61bb      	str	r3, [r7, #24]
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	699b      	ldr	r3, [r3, #24]
 801cd14:	61bb      	str	r3, [r7, #24]
 801cd16:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	2200      	movs	r2, #0
 801cd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	685a      	ldr	r2, [r3, #4]
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cd2e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	685a      	ldr	r2, [r3, #4]
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cd3e:	605a      	str	r2, [r3, #4]
 801cd40:	e049      	b.n	801cdd6 <HAL_I2C_Mem_Read_DMA+0x31a>
 801cd42:	bf00      	nop
 801cd44:	20000020 	.word	0x20000020
 801cd48:	14f8b589 	.word	0x14f8b589
 801cd4c:	ffff0000 	.word	0xffff0000
 801cd50:	0801e85d 	.word	0x0801e85d
 801cd54:	0801ea07 	.word	0x0801ea07
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	2220      	movs	r2, #32
 801cd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	2200      	movs	r2, #0
 801cd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd6c:	f043 0210 	orr.w	r2, r3, #16
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	2200      	movs	r2, #0
 801cd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	e02d      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cd80:	88f8      	ldrh	r0, [r7, #6]
 801cd82:	893a      	ldrh	r2, [r7, #8]
 801cd84:	8979      	ldrh	r1, [r7, #10]
 801cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd88:	9301      	str	r3, [sp, #4]
 801cd8a:	2323      	movs	r3, #35	; 0x23
 801cd8c:	9300      	str	r3, [sp, #0]
 801cd8e:	4603      	mov	r3, r0
 801cd90:	68f8      	ldr	r0, [r7, #12]
 801cd92:	f001 fc7b 	bl	801e68c <I2C_RequestMemoryRead>
 801cd96:	4603      	mov	r3, r0
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d001      	beq.n	801cda0 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	e01d      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cda0:	2300      	movs	r3, #0
 801cda2:	617b      	str	r3, [r7, #20]
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	695b      	ldr	r3, [r3, #20]
 801cdaa:	617b      	str	r3, [r7, #20]
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	699b      	ldr	r3, [r3, #24]
 801cdb2:	617b      	str	r3, [r7, #20]
 801cdb4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	681a      	ldr	r2, [r3, #0]
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cdc4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	2220      	movs	r2, #32
 801cdca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	2200      	movs	r2, #0
 801cdd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	e000      	b.n	801cddc <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801cdda:	2302      	movs	r3, #2
  }
}
 801cddc:	4618      	mov	r0, r3
 801cdde:	3728      	adds	r7, #40	; 0x28
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}

0801cde4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b088      	sub	sp, #32
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801cdec:	2300      	movs	r3, #0
 801cdee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	685b      	ldr	r3, [r3, #4]
 801cdf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ce04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801ce0e:	7bfb      	ldrb	r3, [r7, #15]
 801ce10:	2b10      	cmp	r3, #16
 801ce12:	d003      	beq.n	801ce1c <HAL_I2C_EV_IRQHandler+0x38>
 801ce14:	7bfb      	ldrb	r3, [r7, #15]
 801ce16:	2b40      	cmp	r3, #64	; 0x40
 801ce18:	f040 80c1 	bne.w	801cf9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	699b      	ldr	r3, [r3, #24]
 801ce22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	695b      	ldr	r3, [r3, #20]
 801ce2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	f003 0301 	and.w	r3, r3, #1
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d10d      	bne.n	801ce52 <HAL_I2C_EV_IRQHandler+0x6e>
 801ce36:	693b      	ldr	r3, [r7, #16]
 801ce38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801ce3c:	d003      	beq.n	801ce46 <HAL_I2C_EV_IRQHandler+0x62>
 801ce3e:	693b      	ldr	r3, [r7, #16]
 801ce40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801ce44:	d101      	bne.n	801ce4a <HAL_I2C_EV_IRQHandler+0x66>
 801ce46:	2301      	movs	r3, #1
 801ce48:	e000      	b.n	801ce4c <HAL_I2C_EV_IRQHandler+0x68>
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	2b01      	cmp	r3, #1
 801ce4e:	f000 8132 	beq.w	801d0b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801ce52:	69fb      	ldr	r3, [r7, #28]
 801ce54:	f003 0301 	and.w	r3, r3, #1
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d00c      	beq.n	801ce76 <HAL_I2C_EV_IRQHandler+0x92>
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	0a5b      	lsrs	r3, r3, #9
 801ce60:	f003 0301 	and.w	r3, r3, #1
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d006      	beq.n	801ce76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801ce68:	6878      	ldr	r0, [r7, #4]
 801ce6a:	f002 f82a 	bl	801eec2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f000 fd5b 	bl	801d92a <I2C_Master_SB>
 801ce74:	e092      	b.n	801cf9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801ce76:	69fb      	ldr	r3, [r7, #28]
 801ce78:	08db      	lsrs	r3, r3, #3
 801ce7a:	f003 0301 	and.w	r3, r3, #1
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d009      	beq.n	801ce96 <HAL_I2C_EV_IRQHandler+0xb2>
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	0a5b      	lsrs	r3, r3, #9
 801ce86:	f003 0301 	and.w	r3, r3, #1
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d003      	beq.n	801ce96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801ce8e:	6878      	ldr	r0, [r7, #4]
 801ce90:	f000 fdd1 	bl	801da36 <I2C_Master_ADD10>
 801ce94:	e082      	b.n	801cf9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801ce96:	69fb      	ldr	r3, [r7, #28]
 801ce98:	085b      	lsrs	r3, r3, #1
 801ce9a:	f003 0301 	and.w	r3, r3, #1
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d009      	beq.n	801ceb6 <HAL_I2C_EV_IRQHandler+0xd2>
 801cea2:	697b      	ldr	r3, [r7, #20]
 801cea4:	0a5b      	lsrs	r3, r3, #9
 801cea6:	f003 0301 	and.w	r3, r3, #1
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d003      	beq.n	801ceb6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801ceae:	6878      	ldr	r0, [r7, #4]
 801ceb0:	f000 fdeb 	bl	801da8a <I2C_Master_ADDR>
 801ceb4:	e072      	b.n	801cf9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801ceb6:	69bb      	ldr	r3, [r7, #24]
 801ceb8:	089b      	lsrs	r3, r3, #2
 801ceba:	f003 0301 	and.w	r3, r3, #1
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d03b      	beq.n	801cf3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	685b      	ldr	r3, [r3, #4]
 801cec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ced0:	f000 80f3 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801ced4:	69fb      	ldr	r3, [r7, #28]
 801ced6:	09db      	lsrs	r3, r3, #7
 801ced8:	f003 0301 	and.w	r3, r3, #1
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d00f      	beq.n	801cf00 <HAL_I2C_EV_IRQHandler+0x11c>
 801cee0:	697b      	ldr	r3, [r7, #20]
 801cee2:	0a9b      	lsrs	r3, r3, #10
 801cee4:	f003 0301 	and.w	r3, r3, #1
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d009      	beq.n	801cf00 <HAL_I2C_EV_IRQHandler+0x11c>
 801ceec:	69fb      	ldr	r3, [r7, #28]
 801ceee:	089b      	lsrs	r3, r3, #2
 801cef0:	f003 0301 	and.w	r3, r3, #1
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d103      	bne.n	801cf00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801cef8:	6878      	ldr	r0, [r7, #4]
 801cefa:	f000 f9cb 	bl	801d294 <I2C_MasterTransmit_TXE>
 801cefe:	e04d      	b.n	801cf9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf00:	69fb      	ldr	r3, [r7, #28]
 801cf02:	089b      	lsrs	r3, r3, #2
 801cf04:	f003 0301 	and.w	r3, r3, #1
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	f000 80d6 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
 801cf0e:	697b      	ldr	r3, [r7, #20]
 801cf10:	0a5b      	lsrs	r3, r3, #9
 801cf12:	f003 0301 	and.w	r3, r3, #1
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	f000 80cf 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801cf1c:	7bbb      	ldrb	r3, [r7, #14]
 801cf1e:	2b21      	cmp	r3, #33	; 0x21
 801cf20:	d103      	bne.n	801cf2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801cf22:	6878      	ldr	r0, [r7, #4]
 801cf24:	f000 fa52 	bl	801d3cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf28:	e0c7      	b.n	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801cf2a:	7bfb      	ldrb	r3, [r7, #15]
 801cf2c:	2b40      	cmp	r3, #64	; 0x40
 801cf2e:	f040 80c4 	bne.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801cf32:	6878      	ldr	r0, [r7, #4]
 801cf34:	f000 fac0 	bl	801d4b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf38:	e0bf      	b.n	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	685b      	ldr	r3, [r3, #4]
 801cf40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cf44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cf48:	f000 80b7 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801cf4c:	69fb      	ldr	r3, [r7, #28]
 801cf4e:	099b      	lsrs	r3, r3, #6
 801cf50:	f003 0301 	and.w	r3, r3, #1
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d00f      	beq.n	801cf78 <HAL_I2C_EV_IRQHandler+0x194>
 801cf58:	697b      	ldr	r3, [r7, #20]
 801cf5a:	0a9b      	lsrs	r3, r3, #10
 801cf5c:	f003 0301 	and.w	r3, r3, #1
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d009      	beq.n	801cf78 <HAL_I2C_EV_IRQHandler+0x194>
 801cf64:	69fb      	ldr	r3, [r7, #28]
 801cf66:	089b      	lsrs	r3, r3, #2
 801cf68:	f003 0301 	and.w	r3, r3, #1
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d103      	bne.n	801cf78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	f000 fb35 	bl	801d5e0 <I2C_MasterReceive_RXNE>
 801cf76:	e011      	b.n	801cf9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf78:	69fb      	ldr	r3, [r7, #28]
 801cf7a:	089b      	lsrs	r3, r3, #2
 801cf7c:	f003 0301 	and.w	r3, r3, #1
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	f000 809a 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
 801cf86:	697b      	ldr	r3, [r7, #20]
 801cf88:	0a5b      	lsrs	r3, r3, #9
 801cf8a:	f003 0301 	and.w	r3, r3, #1
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	f000 8093 	beq.w	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801cf94:	6878      	ldr	r0, [r7, #4]
 801cf96:	f000 fbde 	bl	801d756 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf9a:	e08e      	b.n	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
 801cf9c:	e08d      	b.n	801d0ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d004      	beq.n	801cfb0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	695b      	ldr	r3, [r3, #20]
 801cfac:	61fb      	str	r3, [r7, #28]
 801cfae:	e007      	b.n	801cfc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	699b      	ldr	r3, [r3, #24]
 801cfb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	695b      	ldr	r3, [r3, #20]
 801cfbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cfc0:	69fb      	ldr	r3, [r7, #28]
 801cfc2:	085b      	lsrs	r3, r3, #1
 801cfc4:	f003 0301 	and.w	r3, r3, #1
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d012      	beq.n	801cff2 <HAL_I2C_EV_IRQHandler+0x20e>
 801cfcc:	697b      	ldr	r3, [r7, #20]
 801cfce:	0a5b      	lsrs	r3, r3, #9
 801cfd0:	f003 0301 	and.w	r3, r3, #1
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d00c      	beq.n	801cff2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d003      	beq.n	801cfe8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	699b      	ldr	r3, [r3, #24]
 801cfe6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801cfe8:	69b9      	ldr	r1, [r7, #24]
 801cfea:	6878      	ldr	r0, [r7, #4]
 801cfec:	f000 ff9c 	bl	801df28 <I2C_Slave_ADDR>
 801cff0:	e066      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cff2:	69fb      	ldr	r3, [r7, #28]
 801cff4:	091b      	lsrs	r3, r3, #4
 801cff6:	f003 0301 	and.w	r3, r3, #1
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d009      	beq.n	801d012 <HAL_I2C_EV_IRQHandler+0x22e>
 801cffe:	697b      	ldr	r3, [r7, #20]
 801d000:	0a5b      	lsrs	r3, r3, #9
 801d002:	f003 0301 	and.w	r3, r3, #1
 801d006:	2b00      	cmp	r3, #0
 801d008:	d003      	beq.n	801d012 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801d00a:	6878      	ldr	r0, [r7, #4]
 801d00c:	f000 ffd6 	bl	801dfbc <I2C_Slave_STOPF>
 801d010:	e056      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801d012:	7bbb      	ldrb	r3, [r7, #14]
 801d014:	2b21      	cmp	r3, #33	; 0x21
 801d016:	d002      	beq.n	801d01e <HAL_I2C_EV_IRQHandler+0x23a>
 801d018:	7bbb      	ldrb	r3, [r7, #14]
 801d01a:	2b29      	cmp	r3, #41	; 0x29
 801d01c:	d125      	bne.n	801d06a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d01e:	69fb      	ldr	r3, [r7, #28]
 801d020:	09db      	lsrs	r3, r3, #7
 801d022:	f003 0301 	and.w	r3, r3, #1
 801d026:	2b00      	cmp	r3, #0
 801d028:	d00f      	beq.n	801d04a <HAL_I2C_EV_IRQHandler+0x266>
 801d02a:	697b      	ldr	r3, [r7, #20]
 801d02c:	0a9b      	lsrs	r3, r3, #10
 801d02e:	f003 0301 	and.w	r3, r3, #1
 801d032:	2b00      	cmp	r3, #0
 801d034:	d009      	beq.n	801d04a <HAL_I2C_EV_IRQHandler+0x266>
 801d036:	69fb      	ldr	r3, [r7, #28]
 801d038:	089b      	lsrs	r3, r3, #2
 801d03a:	f003 0301 	and.w	r3, r3, #1
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d103      	bne.n	801d04a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801d042:	6878      	ldr	r0, [r7, #4]
 801d044:	f000 feb2 	bl	801ddac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d048:	e039      	b.n	801d0be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d04a:	69fb      	ldr	r3, [r7, #28]
 801d04c:	089b      	lsrs	r3, r3, #2
 801d04e:	f003 0301 	and.w	r3, r3, #1
 801d052:	2b00      	cmp	r3, #0
 801d054:	d033      	beq.n	801d0be <HAL_I2C_EV_IRQHandler+0x2da>
 801d056:	697b      	ldr	r3, [r7, #20]
 801d058:	0a5b      	lsrs	r3, r3, #9
 801d05a:	f003 0301 	and.w	r3, r3, #1
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d02d      	beq.n	801d0be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f000 fedf 	bl	801de26 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d068:	e029      	b.n	801d0be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d06a:	69fb      	ldr	r3, [r7, #28]
 801d06c:	099b      	lsrs	r3, r3, #6
 801d06e:	f003 0301 	and.w	r3, r3, #1
 801d072:	2b00      	cmp	r3, #0
 801d074:	d00f      	beq.n	801d096 <HAL_I2C_EV_IRQHandler+0x2b2>
 801d076:	697b      	ldr	r3, [r7, #20]
 801d078:	0a9b      	lsrs	r3, r3, #10
 801d07a:	f003 0301 	and.w	r3, r3, #1
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d009      	beq.n	801d096 <HAL_I2C_EV_IRQHandler+0x2b2>
 801d082:	69fb      	ldr	r3, [r7, #28]
 801d084:	089b      	lsrs	r3, r3, #2
 801d086:	f003 0301 	and.w	r3, r3, #1
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d103      	bne.n	801d096 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f000 feea 	bl	801de68 <I2C_SlaveReceive_RXNE>
 801d094:	e014      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d096:	69fb      	ldr	r3, [r7, #28]
 801d098:	089b      	lsrs	r3, r3, #2
 801d09a:	f003 0301 	and.w	r3, r3, #1
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d00e      	beq.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 801d0a2:	697b      	ldr	r3, [r7, #20]
 801d0a4:	0a5b      	lsrs	r3, r3, #9
 801d0a6:	f003 0301 	and.w	r3, r3, #1
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d008      	beq.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801d0ae:	6878      	ldr	r0, [r7, #4]
 801d0b0:	f000 ff18 	bl	801dee4 <I2C_SlaveReceive_BTF>
 801d0b4:	e004      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801d0b6:	bf00      	nop
 801d0b8:	e002      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0ba:	bf00      	nop
 801d0bc:	e000      	b.n	801d0c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d0be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801d0c0:	3720      	adds	r7, #32
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}

0801d0c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801d0c6:	b580      	push	{r7, lr}
 801d0c8:	b08a      	sub	sp, #40	; 0x28
 801d0ca:	af00      	add	r7, sp, #0
 801d0cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	695b      	ldr	r3, [r3, #20]
 801d0d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	685b      	ldr	r3, [r3, #4]
 801d0dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d0e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d0ea:	6a3b      	ldr	r3, [r7, #32]
 801d0ec:	0a1b      	lsrs	r3, r3, #8
 801d0ee:	f003 0301 	and.w	r3, r3, #1
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d00e      	beq.n	801d114 <HAL_I2C_ER_IRQHandler+0x4e>
 801d0f6:	69fb      	ldr	r3, [r7, #28]
 801d0f8:	0a1b      	lsrs	r3, r3, #8
 801d0fa:	f003 0301 	and.w	r3, r3, #1
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d008      	beq.n	801d114 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d104:	f043 0301 	orr.w	r3, r3, #1
 801d108:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d112:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d114:	6a3b      	ldr	r3, [r7, #32]
 801d116:	0a5b      	lsrs	r3, r3, #9
 801d118:	f003 0301 	and.w	r3, r3, #1
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d00e      	beq.n	801d13e <HAL_I2C_ER_IRQHandler+0x78>
 801d120:	69fb      	ldr	r3, [r7, #28]
 801d122:	0a1b      	lsrs	r3, r3, #8
 801d124:	f003 0301 	and.w	r3, r3, #1
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d008      	beq.n	801d13e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d12e:	f043 0302 	orr.w	r3, r3, #2
 801d132:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801d13c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d13e:	6a3b      	ldr	r3, [r7, #32]
 801d140:	0a9b      	lsrs	r3, r3, #10
 801d142:	f003 0301 	and.w	r3, r3, #1
 801d146:	2b00      	cmp	r3, #0
 801d148:	d03f      	beq.n	801d1ca <HAL_I2C_ER_IRQHandler+0x104>
 801d14a:	69fb      	ldr	r3, [r7, #28]
 801d14c:	0a1b      	lsrs	r3, r3, #8
 801d14e:	f003 0301 	and.w	r3, r3, #1
 801d152:	2b00      	cmp	r3, #0
 801d154:	d039      	beq.n	801d1ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801d156:	7efb      	ldrb	r3, [r7, #27]
 801d158:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d15e:	b29b      	uxth	r3, r3
 801d160:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d168:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d16e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801d170:	7ebb      	ldrb	r3, [r7, #26]
 801d172:	2b20      	cmp	r3, #32
 801d174:	d112      	bne.n	801d19c <HAL_I2C_ER_IRQHandler+0xd6>
 801d176:	697b      	ldr	r3, [r7, #20]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d10f      	bne.n	801d19c <HAL_I2C_ER_IRQHandler+0xd6>
 801d17c:	7cfb      	ldrb	r3, [r7, #19]
 801d17e:	2b21      	cmp	r3, #33	; 0x21
 801d180:	d008      	beq.n	801d194 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801d182:	7cfb      	ldrb	r3, [r7, #19]
 801d184:	2b29      	cmp	r3, #41	; 0x29
 801d186:	d005      	beq.n	801d194 <HAL_I2C_ER_IRQHandler+0xce>
 801d188:	7cfb      	ldrb	r3, [r7, #19]
 801d18a:	2b28      	cmp	r3, #40	; 0x28
 801d18c:	d106      	bne.n	801d19c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2b21      	cmp	r3, #33	; 0x21
 801d192:	d103      	bne.n	801d19c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f001 f841 	bl	801e21c <I2C_Slave_AF>
 801d19a:	e016      	b.n	801d1ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d1a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a8:	f043 0304 	orr.w	r3, r3, #4
 801d1ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801d1ae:	7efb      	ldrb	r3, [r7, #27]
 801d1b0:	2b10      	cmp	r3, #16
 801d1b2:	d002      	beq.n	801d1ba <HAL_I2C_ER_IRQHandler+0xf4>
 801d1b4:	7efb      	ldrb	r3, [r7, #27]
 801d1b6:	2b40      	cmp	r3, #64	; 0x40
 801d1b8:	d107      	bne.n	801d1ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	681a      	ldr	r2, [r3, #0]
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d1c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d1ca:	6a3b      	ldr	r3, [r7, #32]
 801d1cc:	0adb      	lsrs	r3, r3, #11
 801d1ce:	f003 0301 	and.w	r3, r3, #1
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d00e      	beq.n	801d1f4 <HAL_I2C_ER_IRQHandler+0x12e>
 801d1d6:	69fb      	ldr	r3, [r7, #28]
 801d1d8:	0a1b      	lsrs	r3, r3, #8
 801d1da:	f003 0301 	and.w	r3, r3, #1
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d008      	beq.n	801d1f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1e4:	f043 0308 	orr.w	r3, r3, #8
 801d1e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801d1f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d008      	beq.n	801d20c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d200:	431a      	orrs	r2, r3
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801d206:	6878      	ldr	r0, [r7, #4]
 801d208:	f001 f878 	bl	801e2fc <I2C_ITError>
  }
}
 801d20c:	bf00      	nop
 801d20e:	3728      	adds	r7, #40	; 0x28
 801d210:	46bd      	mov	sp, r7
 801d212:	bd80      	pop	{r7, pc}

0801d214 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d214:	b480      	push	{r7}
 801d216:	b083      	sub	sp, #12
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801d21c:	bf00      	nop
 801d21e:	370c      	adds	r7, #12
 801d220:	46bd      	mov	sp, r7
 801d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d226:	4770      	bx	lr

0801d228 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d228:	b480      	push	{r7}
 801d22a:	b083      	sub	sp, #12
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801d230:	bf00      	nop
 801d232:	370c      	adds	r7, #12
 801d234:	46bd      	mov	sp, r7
 801d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d23a:	4770      	bx	lr

0801d23c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801d23c:	b480      	push	{r7}
 801d23e:	b083      	sub	sp, #12
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	460b      	mov	r3, r1
 801d246:	70fb      	strb	r3, [r7, #3]
 801d248:	4613      	mov	r3, r2
 801d24a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801d24c:	bf00      	nop
 801d24e:	370c      	adds	r7, #12
 801d250:	46bd      	mov	sp, r7
 801d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d256:	4770      	bx	lr

0801d258 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d258:	b480      	push	{r7}
 801d25a:	b083      	sub	sp, #12
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801d260:	bf00      	nop
 801d262:	370c      	adds	r7, #12
 801d264:	46bd      	mov	sp, r7
 801d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d26a:	4770      	bx	lr

0801d26c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801d26c:	b480      	push	{r7}
 801d26e:	b083      	sub	sp, #12
 801d270:	af00      	add	r7, sp, #0
 801d272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801d274:	bf00      	nop
 801d276:	370c      	adds	r7, #12
 801d278:	46bd      	mov	sp, r7
 801d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d27e:	4770      	bx	lr

0801d280 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d280:	b480      	push	{r7}
 801d282:	b083      	sub	sp, #12
 801d284:	af00      	add	r7, sp, #0
 801d286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801d288:	bf00      	nop
 801d28a:	370c      	adds	r7, #12
 801d28c:	46bd      	mov	sp, r7
 801d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d292:	4770      	bx	lr

0801d294 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d2a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d2aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d150      	bne.n	801d35c <I2C_MasterTransmit_TXE+0xc8>
 801d2ba:	7bfb      	ldrb	r3, [r7, #15]
 801d2bc:	2b21      	cmp	r3, #33	; 0x21
 801d2be:	d14d      	bne.n	801d35c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	2b08      	cmp	r3, #8
 801d2c4:	d01d      	beq.n	801d302 <I2C_MasterTransmit_TXE+0x6e>
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	2b20      	cmp	r3, #32
 801d2ca:	d01a      	beq.n	801d302 <I2C_MasterTransmit_TXE+0x6e>
 801d2cc:	68bb      	ldr	r3, [r7, #8]
 801d2ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d2d2:	d016      	beq.n	801d302 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	685a      	ldr	r2, [r3, #4]
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d2e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2211      	movs	r2, #17
 801d2e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	2220      	movs	r2, #32
 801d2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801d2fa:	6878      	ldr	r0, [r7, #4]
 801d2fc:	f7e4 fbe4 	bl	8001ac8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d300:	e060      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	685a      	ldr	r2, [r3, #4]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d310:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	681a      	ldr	r2, [r3, #0]
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d320:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	2200      	movs	r2, #0
 801d326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	2220      	movs	r2, #32
 801d32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d336:	b2db      	uxtb	r3, r3
 801d338:	2b40      	cmp	r3, #64	; 0x40
 801d33a:	d107      	bne.n	801d34c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2200      	movs	r2, #0
 801d340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801d344:	6878      	ldr	r0, [r7, #4]
 801d346:	f7e4 fba9 	bl	8001a9c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d34a:	e03b      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	2200      	movs	r2, #0
 801d350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d354:	6878      	ldr	r0, [r7, #4]
 801d356:	f7e4 fbb7 	bl	8001ac8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d35a:	e033      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801d35c:	7bfb      	ldrb	r3, [r7, #15]
 801d35e:	2b21      	cmp	r3, #33	; 0x21
 801d360:	d005      	beq.n	801d36e <I2C_MasterTransmit_TXE+0xda>
 801d362:	7bbb      	ldrb	r3, [r7, #14]
 801d364:	2b40      	cmp	r3, #64	; 0x40
 801d366:	d12d      	bne.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801d368:	7bfb      	ldrb	r3, [r7, #15]
 801d36a:	2b22      	cmp	r3, #34	; 0x22
 801d36c:	d12a      	bne.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d372:	b29b      	uxth	r3, r3
 801d374:	2b00      	cmp	r3, #0
 801d376:	d108      	bne.n	801d38a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	685a      	ldr	r2, [r3, #4]
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d386:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801d388:	e01c      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d390:	b2db      	uxtb	r3, r3
 801d392:	2b40      	cmp	r3, #64	; 0x40
 801d394:	d103      	bne.n	801d39e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801d396:	6878      	ldr	r0, [r7, #4]
 801d398:	f000 f88e 	bl	801d4b8 <I2C_MemoryTransmit_TXE_BTF>
}
 801d39c:	e012      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3a2:	781a      	ldrb	r2, [r3, #0]
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3ae:	1c5a      	adds	r2, r3, #1
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d3b8:	b29b      	uxth	r3, r3
 801d3ba:	3b01      	subs	r3, #1
 801d3bc:	b29a      	uxth	r2, r3
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d3c2:	e7ff      	b.n	801d3c4 <I2C_MasterTransmit_TXE+0x130>
 801d3c4:	bf00      	nop
 801d3c6:	3710      	adds	r7, #16
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	bd80      	pop	{r7, pc}

0801d3cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b084      	sub	sp, #16
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d3e0:	b2db      	uxtb	r3, r3
 801d3e2:	2b21      	cmp	r3, #33	; 0x21
 801d3e4:	d164      	bne.n	801d4b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d3ea:	b29b      	uxth	r3, r3
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d012      	beq.n	801d416 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3f4:	781a      	ldrb	r2, [r3, #0]
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d400:	1c5a      	adds	r2, r3, #1
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	3b01      	subs	r3, #1
 801d40e:	b29a      	uxth	r2, r3
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801d414:	e04c      	b.n	801d4b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	2b08      	cmp	r3, #8
 801d41a:	d01d      	beq.n	801d458 <I2C_MasterTransmit_BTF+0x8c>
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	2b20      	cmp	r3, #32
 801d420:	d01a      	beq.n	801d458 <I2C_MasterTransmit_BTF+0x8c>
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d428:	d016      	beq.n	801d458 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	685a      	ldr	r2, [r3, #4]
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d438:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	2211      	movs	r2, #17
 801d43e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	2200      	movs	r2, #0
 801d444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	2220      	movs	r2, #32
 801d44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d450:	6878      	ldr	r0, [r7, #4]
 801d452:	f7e4 fb39 	bl	8001ac8 <HAL_I2C_MasterTxCpltCallback>
}
 801d456:	e02b      	b.n	801d4b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	685a      	ldr	r2, [r3, #4]
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d466:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	681a      	ldr	r2, [r3, #0]
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d476:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	2200      	movs	r2, #0
 801d47c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	2220      	movs	r2, #32
 801d482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d48c:	b2db      	uxtb	r3, r3
 801d48e:	2b40      	cmp	r3, #64	; 0x40
 801d490:	d107      	bne.n	801d4a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	2200      	movs	r2, #0
 801d496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801d49a:	6878      	ldr	r0, [r7, #4]
 801d49c:	f7e4 fafe 	bl	8001a9c <HAL_I2C_MemTxCpltCallback>
}
 801d4a0:	e006      	b.n	801d4b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	2200      	movs	r2, #0
 801d4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801d4aa:	6878      	ldr	r0, [r7, #4]
 801d4ac:	f7e4 fb0c 	bl	8001ac8 <HAL_I2C_MasterTxCpltCallback>
}
 801d4b0:	bf00      	nop
 801d4b2:	3710      	adds	r7, #16
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}

0801d4b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b084      	sub	sp, #16
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d4c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d11d      	bne.n	801d50c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d4d4:	2b01      	cmp	r3, #1
 801d4d6:	d10b      	bne.n	801d4f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4dc:	b2da      	uxtb	r2, r3
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d4e8:	1c9a      	adds	r2, r3, #2
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801d4ee:	e073      	b.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4f4:	b29b      	uxth	r3, r3
 801d4f6:	121b      	asrs	r3, r3, #8
 801d4f8:	b2da      	uxtb	r2, r3
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d504:	1c5a      	adds	r2, r3, #1
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d50a:	e065      	b.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d510:	2b01      	cmp	r3, #1
 801d512:	d10b      	bne.n	801d52c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d518:	b2da      	uxtb	r2, r3
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d524:	1c5a      	adds	r2, r3, #1
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d52a:	e055      	b.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d530:	2b02      	cmp	r3, #2
 801d532:	d151      	bne.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801d534:	7bfb      	ldrb	r3, [r7, #15]
 801d536:	2b22      	cmp	r3, #34	; 0x22
 801d538:	d10d      	bne.n	801d556 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	681a      	ldr	r2, [r3, #0]
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d548:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d54e:	1c5a      	adds	r2, r3, #1
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d554:	e040      	b.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d55a:	b29b      	uxth	r3, r3
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d015      	beq.n	801d58c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801d560:	7bfb      	ldrb	r3, [r7, #15]
 801d562:	2b21      	cmp	r3, #33	; 0x21
 801d564:	d112      	bne.n	801d58c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d56a:	781a      	ldrb	r2, [r3, #0]
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d576:	1c5a      	adds	r2, r3, #1
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d580:	b29b      	uxth	r3, r3
 801d582:	3b01      	subs	r3, #1
 801d584:	b29a      	uxth	r2, r3
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d58a:	e025      	b.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d590:	b29b      	uxth	r3, r3
 801d592:	2b00      	cmp	r3, #0
 801d594:	d120      	bne.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801d596:	7bfb      	ldrb	r3, [r7, #15]
 801d598:	2b21      	cmp	r3, #33	; 0x21
 801d59a:	d11d      	bne.n	801d5d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	685a      	ldr	r2, [r3, #4]
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d5aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	681a      	ldr	r2, [r3, #0]
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d5ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	2200      	movs	r2, #0
 801d5c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	2220      	movs	r2, #32
 801d5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801d5d2:	6878      	ldr	r0, [r7, #4]
 801d5d4:	f7e4 fa62 	bl	8001a9c <HAL_I2C_MemTxCpltCallback>
}
 801d5d8:	bf00      	nop
 801d5da:	3710      	adds	r7, #16
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}

0801d5e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b084      	sub	sp, #16
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d5ee:	b2db      	uxtb	r3, r3
 801d5f0:	2b22      	cmp	r3, #34	; 0x22
 801d5f2:	f040 80ac 	bne.w	801d74e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d5fa:	b29b      	uxth	r3, r3
 801d5fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	2b03      	cmp	r3, #3
 801d602:	d921      	bls.n	801d648 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	691a      	ldr	r2, [r3, #16]
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d60e:	b2d2      	uxtb	r2, r2
 801d610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d616:	1c5a      	adds	r2, r3, #1
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d620:	b29b      	uxth	r3, r3
 801d622:	3b01      	subs	r3, #1
 801d624:	b29a      	uxth	r2, r3
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d62e:	b29b      	uxth	r3, r3
 801d630:	2b03      	cmp	r3, #3
 801d632:	f040 808c 	bne.w	801d74e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	685a      	ldr	r2, [r3, #4]
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d644:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801d646:	e082      	b.n	801d74e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d64c:	2b02      	cmp	r3, #2
 801d64e:	d075      	beq.n	801d73c <I2C_MasterReceive_RXNE+0x15c>
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	2b01      	cmp	r3, #1
 801d654:	d002      	beq.n	801d65c <I2C_MasterReceive_RXNE+0x7c>
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d16f      	bne.n	801d73c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d65c:	6878      	ldr	r0, [r7, #4]
 801d65e:	f001 fbcf 	bl	801ee00 <I2C_WaitOnSTOPRequestThroughIT>
 801d662:	4603      	mov	r3, r0
 801d664:	2b00      	cmp	r3, #0
 801d666:	d142      	bne.n	801d6ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	681a      	ldr	r2, [r3, #0]
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d676:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	685a      	ldr	r2, [r3, #4]
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d686:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	691a      	ldr	r2, [r3, #16]
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d692:	b2d2      	uxtb	r2, r2
 801d694:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d69a:	1c5a      	adds	r2, r3, #1
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	3b01      	subs	r3, #1
 801d6a8:	b29a      	uxth	r2, r3
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	2220      	movs	r2, #32
 801d6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d6bc:	b2db      	uxtb	r3, r3
 801d6be:	2b40      	cmp	r3, #64	; 0x40
 801d6c0:	d10a      	bne.n	801d6d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	2200      	movs	r2, #0
 801d6c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	2200      	movs	r2, #0
 801d6ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801d6d0:	6878      	ldr	r0, [r7, #4]
 801d6d2:	f7e4 f9b7 	bl	8001a44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d6d6:	e03a      	b.n	801d74e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	2200      	movs	r2, #0
 801d6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	2212      	movs	r2, #18
 801d6e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801d6e6:	6878      	ldr	r0, [r7, #4]
 801d6e8:	f7e4 f9c2 	bl	8001a70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d6ec:	e02f      	b.n	801d74e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	685a      	ldr	r2, [r3, #4]
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d6fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	691a      	ldr	r2, [r3, #16]
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d708:	b2d2      	uxtb	r2, r2
 801d70a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d710:	1c5a      	adds	r2, r3, #1
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d71a:	b29b      	uxth	r3, r3
 801d71c:	3b01      	subs	r3, #1
 801d71e:	b29a      	uxth	r2, r3
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	2220      	movs	r2, #32
 801d728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	2200      	movs	r2, #0
 801d730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801d734:	6878      	ldr	r0, [r7, #4]
 801d736:	f7ff fd99 	bl	801d26c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d73a:	e008      	b.n	801d74e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	685a      	ldr	r2, [r3, #4]
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d74a:	605a      	str	r2, [r3, #4]
}
 801d74c:	e7ff      	b.n	801d74e <I2C_MasterReceive_RXNE+0x16e>
 801d74e:	bf00      	nop
 801d750:	3710      	adds	r7, #16
 801d752:	46bd      	mov	sp, r7
 801d754:	bd80      	pop	{r7, pc}

0801d756 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801d756:	b580      	push	{r7, lr}
 801d758:	b084      	sub	sp, #16
 801d75a:	af00      	add	r7, sp, #0
 801d75c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d762:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d768:	b29b      	uxth	r3, r3
 801d76a:	2b04      	cmp	r3, #4
 801d76c:	d11b      	bne.n	801d7a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	685a      	ldr	r2, [r3, #4]
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d77c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	691a      	ldr	r2, [r3, #16]
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d788:	b2d2      	uxtb	r2, r2
 801d78a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d790:	1c5a      	adds	r2, r3, #1
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d79a:	b29b      	uxth	r3, r3
 801d79c:	3b01      	subs	r3, #1
 801d79e:	b29a      	uxth	r2, r3
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801d7a4:	e0bd      	b.n	801d922 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	2b03      	cmp	r3, #3
 801d7ae:	d129      	bne.n	801d804 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	685a      	ldr	r2, [r3, #4]
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d7be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	2b04      	cmp	r3, #4
 801d7c4:	d00a      	beq.n	801d7dc <I2C_MasterReceive_BTF+0x86>
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	2b02      	cmp	r3, #2
 801d7ca:	d007      	beq.n	801d7dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	681a      	ldr	r2, [r3, #0]
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d7da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	691a      	ldr	r2, [r3, #16]
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7e6:	b2d2      	uxtb	r2, r2
 801d7e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7ee:	1c5a      	adds	r2, r3, #1
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7f8:	b29b      	uxth	r3, r3
 801d7fa:	3b01      	subs	r3, #1
 801d7fc:	b29a      	uxth	r2, r3
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d802:	e08e      	b.n	801d922 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d808:	b29b      	uxth	r3, r3
 801d80a:	2b02      	cmp	r3, #2
 801d80c:	d176      	bne.n	801d8fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	2b01      	cmp	r3, #1
 801d812:	d002      	beq.n	801d81a <I2C_MasterReceive_BTF+0xc4>
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	2b10      	cmp	r3, #16
 801d818:	d108      	bne.n	801d82c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	681a      	ldr	r2, [r3, #0]
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d828:	601a      	str	r2, [r3, #0]
 801d82a:	e019      	b.n	801d860 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	2b04      	cmp	r3, #4
 801d830:	d002      	beq.n	801d838 <I2C_MasterReceive_BTF+0xe2>
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	2b02      	cmp	r3, #2
 801d836:	d108      	bne.n	801d84a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	681a      	ldr	r2, [r3, #0]
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d846:	601a      	str	r2, [r3, #0]
 801d848:	e00a      	b.n	801d860 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	2b10      	cmp	r3, #16
 801d84e:	d007      	beq.n	801d860 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	681a      	ldr	r2, [r3, #0]
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d85e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	691a      	ldr	r2, [r3, #16]
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d86a:	b2d2      	uxtb	r2, r2
 801d86c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d872:	1c5a      	adds	r2, r3, #1
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d87c:	b29b      	uxth	r3, r3
 801d87e:	3b01      	subs	r3, #1
 801d880:	b29a      	uxth	r2, r3
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	691a      	ldr	r2, [r3, #16]
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d890:	b2d2      	uxtb	r2, r2
 801d892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d898:	1c5a      	adds	r2, r3, #1
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d8a2:	b29b      	uxth	r3, r3
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	b29a      	uxth	r2, r3
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	685a      	ldr	r2, [r3, #4]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801d8ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	2220      	movs	r2, #32
 801d8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d8ca:	b2db      	uxtb	r3, r3
 801d8cc:	2b40      	cmp	r3, #64	; 0x40
 801d8ce:	d10a      	bne.n	801d8e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	2200      	movs	r2, #0
 801d8dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801d8de:	6878      	ldr	r0, [r7, #4]
 801d8e0:	f7e4 f8b0 	bl	8001a44 <HAL_I2C_MemRxCpltCallback>
}
 801d8e4:	e01d      	b.n	801d922 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	2200      	movs	r2, #0
 801d8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	2212      	movs	r2, #18
 801d8f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801d8f4:	6878      	ldr	r0, [r7, #4]
 801d8f6:	f7e4 f8bb 	bl	8001a70 <HAL_I2C_MasterRxCpltCallback>
}
 801d8fa:	e012      	b.n	801d922 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	691a      	ldr	r2, [r3, #16]
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d906:	b2d2      	uxtb	r2, r2
 801d908:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d90e:	1c5a      	adds	r2, r3, #1
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d918:	b29b      	uxth	r3, r3
 801d91a:	3b01      	subs	r3, #1
 801d91c:	b29a      	uxth	r2, r3
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d922:	bf00      	nop
 801d924:	3710      	adds	r7, #16
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}

0801d92a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801d92a:	b480      	push	{r7}
 801d92c:	b083      	sub	sp, #12
 801d92e:	af00      	add	r7, sp, #0
 801d930:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	2b40      	cmp	r3, #64	; 0x40
 801d93c:	d117      	bne.n	801d96e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d942:	2b00      	cmp	r3, #0
 801d944:	d109      	bne.n	801d95a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d94a:	b2db      	uxtb	r3, r3
 801d94c:	461a      	mov	r2, r3
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801d956:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801d958:	e067      	b.n	801da2a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d95e:	b2db      	uxtb	r3, r3
 801d960:	f043 0301 	orr.w	r3, r3, #1
 801d964:	b2da      	uxtb	r2, r3
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	611a      	str	r2, [r3, #16]
}
 801d96c:	e05d      	b.n	801da2a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	691b      	ldr	r3, [r3, #16]
 801d972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d976:	d133      	bne.n	801d9e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d97e:	b2db      	uxtb	r3, r3
 801d980:	2b21      	cmp	r3, #33	; 0x21
 801d982:	d109      	bne.n	801d998 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d988:	b2db      	uxtb	r3, r3
 801d98a:	461a      	mov	r2, r3
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801d994:	611a      	str	r2, [r3, #16]
 801d996:	e008      	b.n	801d9aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d99c:	b2db      	uxtb	r3, r3
 801d99e:	f043 0301 	orr.w	r3, r3, #1
 801d9a2:	b2da      	uxtb	r2, r3
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d004      	beq.n	801d9bc <I2C_Master_SB+0x92>
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d108      	bne.n	801d9ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d032      	beq.n	801da2a <I2C_Master_SB+0x100>
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d02d      	beq.n	801da2a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	685a      	ldr	r2, [r3, #4]
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d9dc:	605a      	str	r2, [r3, #4]
}
 801d9de:	e024      	b.n	801da2a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d10e      	bne.n	801da06 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9ec:	b29b      	uxth	r3, r3
 801d9ee:	11db      	asrs	r3, r3, #7
 801d9f0:	b2db      	uxtb	r3, r3
 801d9f2:	f003 0306 	and.w	r3, r3, #6
 801d9f6:	b2db      	uxtb	r3, r3
 801d9f8:	f063 030f 	orn	r3, r3, #15
 801d9fc:	b2da      	uxtb	r2, r3
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	611a      	str	r2, [r3, #16]
}
 801da04:	e011      	b.n	801da2a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da0a:	2b01      	cmp	r3, #1
 801da0c:	d10d      	bne.n	801da2a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da12:	b29b      	uxth	r3, r3
 801da14:	11db      	asrs	r3, r3, #7
 801da16:	b2db      	uxtb	r3, r3
 801da18:	f003 0306 	and.w	r3, r3, #6
 801da1c:	b2db      	uxtb	r3, r3
 801da1e:	f063 030e 	orn	r3, r3, #14
 801da22:	b2da      	uxtb	r2, r3
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	611a      	str	r2, [r3, #16]
}
 801da2a:	bf00      	nop
 801da2c:	370c      	adds	r7, #12
 801da2e:	46bd      	mov	sp, r7
 801da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da34:	4770      	bx	lr

0801da36 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801da36:	b480      	push	{r7}
 801da38:	b083      	sub	sp, #12
 801da3a:	af00      	add	r7, sp, #0
 801da3c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da42:	b2da      	uxtb	r2, r3
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d004      	beq.n	801da5c <I2C_Master_ADD10+0x26>
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d108      	bne.n	801da6e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da60:	2b00      	cmp	r3, #0
 801da62:	d00c      	beq.n	801da7e <I2C_Master_ADD10+0x48>
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d007      	beq.n	801da7e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	685a      	ldr	r2, [r3, #4]
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801da7c:	605a      	str	r2, [r3, #4]
  }
}
 801da7e:	bf00      	nop
 801da80:	370c      	adds	r7, #12
 801da82:	46bd      	mov	sp, r7
 801da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da88:	4770      	bx	lr

0801da8a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801da8a:	b480      	push	{r7}
 801da8c:	b091      	sub	sp, #68	; 0x44
 801da8e:	af00      	add	r7, sp, #0
 801da90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801da98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daa0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801daa6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801daae:	b2db      	uxtb	r3, r3
 801dab0:	2b22      	cmp	r3, #34	; 0x22
 801dab2:	f040 8169 	bne.w	801dd88 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801daba:	2b00      	cmp	r3, #0
 801dabc:	d10f      	bne.n	801dade <I2C_Master_ADDR+0x54>
 801dabe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801dac2:	2b40      	cmp	r3, #64	; 0x40
 801dac4:	d10b      	bne.n	801dade <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dac6:	2300      	movs	r3, #0
 801dac8:	633b      	str	r3, [r7, #48]	; 0x30
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	695b      	ldr	r3, [r3, #20]
 801dad0:	633b      	str	r3, [r7, #48]	; 0x30
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	699b      	ldr	r3, [r3, #24]
 801dad8:	633b      	str	r3, [r7, #48]	; 0x30
 801dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dadc:	e160      	b.n	801dda0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d11d      	bne.n	801db22 <I2C_Master_ADDR+0x98>
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	691b      	ldr	r3, [r3, #16]
 801daea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801daee:	d118      	bne.n	801db22 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801daf0:	2300      	movs	r3, #0
 801daf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	695b      	ldr	r3, [r3, #20]
 801dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	699b      	ldr	r3, [r3, #24]
 801db02:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	681a      	ldr	r2, [r3, #0]
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801db14:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db1a:	1c5a      	adds	r2, r3, #1
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	651a      	str	r2, [r3, #80]	; 0x50
 801db20:	e13e      	b.n	801dda0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801db26:	b29b      	uxth	r3, r3
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d113      	bne.n	801db54 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801db2c:	2300      	movs	r3, #0
 801db2e:	62bb      	str	r3, [r7, #40]	; 0x28
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	695b      	ldr	r3, [r3, #20]
 801db36:	62bb      	str	r3, [r7, #40]	; 0x28
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	699b      	ldr	r3, [r3, #24]
 801db3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801db40:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	681a      	ldr	r2, [r3, #0]
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801db50:	601a      	str	r2, [r3, #0]
 801db52:	e115      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801db58:	b29b      	uxth	r3, r3
 801db5a:	2b01      	cmp	r3, #1
 801db5c:	f040 808a 	bne.w	801dc74 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801db66:	d137      	bne.n	801dbd8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	681a      	ldr	r2, [r3, #0]
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801db76:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	685b      	ldr	r3, [r3, #4]
 801db7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801db82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801db86:	d113      	bne.n	801dbb0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	681a      	ldr	r2, [r3, #0]
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801db96:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801db98:	2300      	movs	r3, #0
 801db9a:	627b      	str	r3, [r7, #36]	; 0x24
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	695b      	ldr	r3, [r3, #20]
 801dba2:	627b      	str	r3, [r7, #36]	; 0x24
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	699b      	ldr	r3, [r3, #24]
 801dbaa:	627b      	str	r3, [r7, #36]	; 0x24
 801dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbae:	e0e7      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	623b      	str	r3, [r7, #32]
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	695b      	ldr	r3, [r3, #20]
 801dbba:	623b      	str	r3, [r7, #32]
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	699b      	ldr	r3, [r3, #24]
 801dbc2:	623b      	str	r3, [r7, #32]
 801dbc4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	681a      	ldr	r2, [r3, #0]
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dbd4:	601a      	str	r2, [r3, #0]
 801dbd6:	e0d3      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbda:	2b08      	cmp	r3, #8
 801dbdc:	d02e      	beq.n	801dc3c <I2C_Master_ADDR+0x1b2>
 801dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbe0:	2b20      	cmp	r3, #32
 801dbe2:	d02b      	beq.n	801dc3c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801dbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbe6:	2b12      	cmp	r3, #18
 801dbe8:	d102      	bne.n	801dbf0 <I2C_Master_ADDR+0x166>
 801dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbec:	2b01      	cmp	r3, #1
 801dbee:	d125      	bne.n	801dc3c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801dbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbf2:	2b04      	cmp	r3, #4
 801dbf4:	d00e      	beq.n	801dc14 <I2C_Master_ADDR+0x18a>
 801dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbf8:	2b02      	cmp	r3, #2
 801dbfa:	d00b      	beq.n	801dc14 <I2C_Master_ADDR+0x18a>
 801dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbfe:	2b10      	cmp	r3, #16
 801dc00:	d008      	beq.n	801dc14 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	681a      	ldr	r2, [r3, #0]
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dc10:	601a      	str	r2, [r3, #0]
 801dc12:	e007      	b.n	801dc24 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	681a      	ldr	r2, [r3, #0]
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dc22:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dc24:	2300      	movs	r3, #0
 801dc26:	61fb      	str	r3, [r7, #28]
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	695b      	ldr	r3, [r3, #20]
 801dc2e:	61fb      	str	r3, [r7, #28]
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	699b      	ldr	r3, [r3, #24]
 801dc36:	61fb      	str	r3, [r7, #28]
 801dc38:	69fb      	ldr	r3, [r7, #28]
 801dc3a:	e0a1      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	681a      	ldr	r2, [r3, #0]
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dc4a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	61bb      	str	r3, [r7, #24]
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	695b      	ldr	r3, [r3, #20]
 801dc56:	61bb      	str	r3, [r7, #24]
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	699b      	ldr	r3, [r3, #24]
 801dc5e:	61bb      	str	r3, [r7, #24]
 801dc60:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	681a      	ldr	r2, [r3, #0]
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dc70:	601a      	str	r2, [r3, #0]
 801dc72:	e085      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dc78:	b29b      	uxth	r3, r3
 801dc7a:	2b02      	cmp	r3, #2
 801dc7c:	d14d      	bne.n	801dd1a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc80:	2b04      	cmp	r3, #4
 801dc82:	d016      	beq.n	801dcb2 <I2C_Master_ADDR+0x228>
 801dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc86:	2b02      	cmp	r3, #2
 801dc88:	d013      	beq.n	801dcb2 <I2C_Master_ADDR+0x228>
 801dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc8c:	2b10      	cmp	r3, #16
 801dc8e:	d010      	beq.n	801dcb2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	681a      	ldr	r2, [r3, #0]
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dc9e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	681a      	ldr	r2, [r3, #0]
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dcae:	601a      	str	r2, [r3, #0]
 801dcb0:	e007      	b.n	801dcc2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	681a      	ldr	r2, [r3, #0]
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dcc0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	685b      	ldr	r3, [r3, #4]
 801dcc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dcd0:	d117      	bne.n	801dd02 <I2C_Master_ADDR+0x278>
 801dcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dcd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801dcd8:	d00b      	beq.n	801dcf2 <I2C_Master_ADDR+0x268>
 801dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dcdc:	2b01      	cmp	r3, #1
 801dcde:	d008      	beq.n	801dcf2 <I2C_Master_ADDR+0x268>
 801dce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dce2:	2b08      	cmp	r3, #8
 801dce4:	d005      	beq.n	801dcf2 <I2C_Master_ADDR+0x268>
 801dce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dce8:	2b10      	cmp	r3, #16
 801dcea:	d002      	beq.n	801dcf2 <I2C_Master_ADDR+0x268>
 801dcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dcee:	2b20      	cmp	r3, #32
 801dcf0:	d107      	bne.n	801dd02 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	685a      	ldr	r2, [r3, #4]
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dd00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd02:	2300      	movs	r3, #0
 801dd04:	617b      	str	r3, [r7, #20]
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	695b      	ldr	r3, [r3, #20]
 801dd0c:	617b      	str	r3, [r7, #20]
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	699b      	ldr	r3, [r3, #24]
 801dd14:	617b      	str	r3, [r7, #20]
 801dd16:	697b      	ldr	r3, [r7, #20]
 801dd18:	e032      	b.n	801dd80 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	681a      	ldr	r2, [r3, #0]
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dd28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	685b      	ldr	r3, [r3, #4]
 801dd30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dd34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dd38:	d117      	bne.n	801dd6a <I2C_Master_ADDR+0x2e0>
 801dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801dd40:	d00b      	beq.n	801dd5a <I2C_Master_ADDR+0x2d0>
 801dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd44:	2b01      	cmp	r3, #1
 801dd46:	d008      	beq.n	801dd5a <I2C_Master_ADDR+0x2d0>
 801dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd4a:	2b08      	cmp	r3, #8
 801dd4c:	d005      	beq.n	801dd5a <I2C_Master_ADDR+0x2d0>
 801dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd50:	2b10      	cmp	r3, #16
 801dd52:	d002      	beq.n	801dd5a <I2C_Master_ADDR+0x2d0>
 801dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd56:	2b20      	cmp	r3, #32
 801dd58:	d107      	bne.n	801dd6a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	685a      	ldr	r2, [r3, #4]
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dd68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd6a:	2300      	movs	r3, #0
 801dd6c:	613b      	str	r3, [r7, #16]
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	695b      	ldr	r3, [r3, #20]
 801dd74:	613b      	str	r3, [r7, #16]
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	699b      	ldr	r3, [r3, #24]
 801dd7c:	613b      	str	r3, [r7, #16]
 801dd7e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	2200      	movs	r2, #0
 801dd84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801dd86:	e00b      	b.n	801dda0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd88:	2300      	movs	r3, #0
 801dd8a:	60fb      	str	r3, [r7, #12]
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	695b      	ldr	r3, [r3, #20]
 801dd92:	60fb      	str	r3, [r7, #12]
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	699b      	ldr	r3, [r3, #24]
 801dd9a:	60fb      	str	r3, [r7, #12]
 801dd9c:	68fb      	ldr	r3, [r7, #12]
}
 801dd9e:	e7ff      	b.n	801dda0 <I2C_Master_ADDR+0x316>
 801dda0:	bf00      	nop
 801dda2:	3744      	adds	r7, #68	; 0x44
 801dda4:	46bd      	mov	sp, r7
 801dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddaa:	4770      	bx	lr

0801ddac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801ddac:	b580      	push	{r7, lr}
 801ddae:	b084      	sub	sp, #16
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ddba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddc0:	b29b      	uxth	r3, r3
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d02b      	beq.n	801de1e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddca:	781a      	ldrb	r2, [r3, #0]
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddd6:	1c5a      	adds	r2, r3, #1
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dde0:	b29b      	uxth	r3, r3
 801dde2:	3b01      	subs	r3, #1
 801dde4:	b29a      	uxth	r2, r3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddee:	b29b      	uxth	r3, r3
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d114      	bne.n	801de1e <I2C_SlaveTransmit_TXE+0x72>
 801ddf4:	7bfb      	ldrb	r3, [r7, #15]
 801ddf6:	2b29      	cmp	r3, #41	; 0x29
 801ddf8:	d111      	bne.n	801de1e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	685a      	ldr	r2, [r3, #4]
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801de08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	2221      	movs	r2, #33	; 0x21
 801de0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	2228      	movs	r2, #40	; 0x28
 801de14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f7ff f9fb 	bl	801d214 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801de1e:	bf00      	nop
 801de20:	3710      	adds	r7, #16
 801de22:	46bd      	mov	sp, r7
 801de24:	bd80      	pop	{r7, pc}

0801de26 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801de26:	b480      	push	{r7}
 801de28:	b083      	sub	sp, #12
 801de2a:	af00      	add	r7, sp, #0
 801de2c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801de32:	b29b      	uxth	r3, r3
 801de34:	2b00      	cmp	r3, #0
 801de36:	d011      	beq.n	801de5c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de3c:	781a      	ldrb	r2, [r3, #0]
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de48:	1c5a      	adds	r2, r3, #1
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801de52:	b29b      	uxth	r3, r3
 801de54:	3b01      	subs	r3, #1
 801de56:	b29a      	uxth	r2, r3
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801de5c:	bf00      	nop
 801de5e:	370c      	adds	r7, #12
 801de60:	46bd      	mov	sp, r7
 801de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de66:	4770      	bx	lr

0801de68 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801de68:	b580      	push	{r7, lr}
 801de6a:	b084      	sub	sp, #16
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801de7c:	b29b      	uxth	r3, r3
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d02c      	beq.n	801dedc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	691a      	ldr	r2, [r3, #16]
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de8c:	b2d2      	uxtb	r2, r2
 801de8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de94:	1c5a      	adds	r2, r3, #1
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801de9e:	b29b      	uxth	r3, r3
 801dea0:	3b01      	subs	r3, #1
 801dea2:	b29a      	uxth	r2, r3
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801deac:	b29b      	uxth	r3, r3
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d114      	bne.n	801dedc <I2C_SlaveReceive_RXNE+0x74>
 801deb2:	7bfb      	ldrb	r3, [r7, #15]
 801deb4:	2b2a      	cmp	r3, #42	; 0x2a
 801deb6:	d111      	bne.n	801dedc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	685a      	ldr	r2, [r3, #4]
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dec6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	2222      	movs	r2, #34	; 0x22
 801decc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	2228      	movs	r2, #40	; 0x28
 801ded2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801ded6:	6878      	ldr	r0, [r7, #4]
 801ded8:	f7ff f9a6 	bl	801d228 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801dedc:	bf00      	nop
 801dede:	3710      	adds	r7, #16
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}

0801dee4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801dee4:	b480      	push	{r7}
 801dee6:	b083      	sub	sp, #12
 801dee8:	af00      	add	r7, sp, #0
 801deea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801def0:	b29b      	uxth	r3, r3
 801def2:	2b00      	cmp	r3, #0
 801def4:	d012      	beq.n	801df1c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	691a      	ldr	r2, [r3, #16]
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df00:	b2d2      	uxtb	r2, r2
 801df02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df08:	1c5a      	adds	r2, r3, #1
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df12:	b29b      	uxth	r3, r3
 801df14:	3b01      	subs	r3, #1
 801df16:	b29a      	uxth	r2, r3
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801df1c:	bf00      	nop
 801df1e:	370c      	adds	r7, #12
 801df20:	46bd      	mov	sp, r7
 801df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df26:	4770      	bx	lr

0801df28 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b084      	sub	sp, #16
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
 801df30:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801df32:	2300      	movs	r3, #0
 801df34:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df3c:	b2db      	uxtb	r3, r3
 801df3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801df42:	2b28      	cmp	r3, #40	; 0x28
 801df44:	d127      	bne.n	801df96 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	685a      	ldr	r2, [r3, #4]
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801df54:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	089b      	lsrs	r3, r3, #2
 801df5a:	f003 0301 	and.w	r3, r3, #1
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d101      	bne.n	801df66 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801df62:	2301      	movs	r3, #1
 801df64:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801df66:	683b      	ldr	r3, [r7, #0]
 801df68:	09db      	lsrs	r3, r3, #7
 801df6a:	f003 0301 	and.w	r3, r3, #1
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d103      	bne.n	801df7a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	68db      	ldr	r3, [r3, #12]
 801df76:	81bb      	strh	r3, [r7, #12]
 801df78:	e002      	b.n	801df80 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	699b      	ldr	r3, [r3, #24]
 801df7e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	2200      	movs	r2, #0
 801df84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801df88:	89ba      	ldrh	r2, [r7, #12]
 801df8a:	7bfb      	ldrb	r3, [r7, #15]
 801df8c:	4619      	mov	r1, r3
 801df8e:	6878      	ldr	r0, [r7, #4]
 801df90:	f7ff f954 	bl	801d23c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801df94:	e00e      	b.n	801dfb4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801df96:	2300      	movs	r3, #0
 801df98:	60bb      	str	r3, [r7, #8]
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	695b      	ldr	r3, [r3, #20]
 801dfa0:	60bb      	str	r3, [r7, #8]
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	699b      	ldr	r3, [r3, #24]
 801dfa8:	60bb      	str	r3, [r7, #8]
 801dfaa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	2200      	movs	r2, #0
 801dfb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801dfb4:	bf00      	nop
 801dfb6:	3710      	adds	r7, #16
 801dfb8:	46bd      	mov	sp, r7
 801dfba:	bd80      	pop	{r7, pc}

0801dfbc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b084      	sub	sp, #16
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dfca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	685a      	ldr	r2, [r3, #4]
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801dfda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801dfdc:	2300      	movs	r3, #0
 801dfde:	60bb      	str	r3, [r7, #8]
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	695b      	ldr	r3, [r3, #20]
 801dfe6:	60bb      	str	r3, [r7, #8]
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	f042 0201 	orr.w	r2, r2, #1
 801dff6:	601a      	str	r2, [r3, #0]
 801dff8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	681a      	ldr	r2, [r3, #0]
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e008:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	685b      	ldr	r3, [r3, #4]
 801e010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e018:	d172      	bne.n	801e100 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801e01a:	7bfb      	ldrb	r3, [r7, #15]
 801e01c:	2b22      	cmp	r3, #34	; 0x22
 801e01e:	d002      	beq.n	801e026 <I2C_Slave_STOPF+0x6a>
 801e020:	7bfb      	ldrb	r3, [r7, #15]
 801e022:	2b2a      	cmp	r3, #42	; 0x2a
 801e024:	d135      	bne.n	801e092 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	685b      	ldr	r3, [r3, #4]
 801e02e:	b29a      	uxth	r2, r3
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e038:	b29b      	uxth	r3, r3
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d005      	beq.n	801e04a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e042:	f043 0204 	orr.w	r2, r3, #4
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	685a      	ldr	r2, [r3, #4]
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e058:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e05e:	4618      	mov	r0, r3
 801e060:	f7fd fc92 	bl	801b988 <HAL_DMA_GetState>
 801e064:	4603      	mov	r3, r0
 801e066:	2b01      	cmp	r3, #1
 801e068:	d049      	beq.n	801e0fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e06e:	4a69      	ldr	r2, [pc, #420]	; (801e214 <I2C_Slave_STOPF+0x258>)
 801e070:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e076:	4618      	mov	r0, r3
 801e078:	f7fd fada 	bl	801b630 <HAL_DMA_Abort_IT>
 801e07c:	4603      	mov	r3, r0
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d03d      	beq.n	801e0fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e088:	687a      	ldr	r2, [r7, #4]
 801e08a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e08c:	4610      	mov	r0, r2
 801e08e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e090:	e035      	b.n	801e0fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	685b      	ldr	r3, [r3, #4]
 801e09a:	b29a      	uxth	r2, r3
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e0a4:	b29b      	uxth	r3, r3
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d005      	beq.n	801e0b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0ae:	f043 0204 	orr.w	r2, r3, #4
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	685a      	ldr	r2, [r3, #4]
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e0c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f7fd fc5c 	bl	801b988 <HAL_DMA_GetState>
 801e0d0:	4603      	mov	r3, r0
 801e0d2:	2b01      	cmp	r3, #1
 801e0d4:	d014      	beq.n	801e100 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0da:	4a4e      	ldr	r2, [pc, #312]	; (801e214 <I2C_Slave_STOPF+0x258>)
 801e0dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	f7fd faa4 	bl	801b630 <HAL_DMA_Abort_IT>
 801e0e8:	4603      	mov	r3, r0
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d008      	beq.n	801e100 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e0f4:	687a      	ldr	r2, [r7, #4]
 801e0f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e0f8:	4610      	mov	r0, r2
 801e0fa:	4798      	blx	r3
 801e0fc:	e000      	b.n	801e100 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e0fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e104:	b29b      	uxth	r3, r3
 801e106:	2b00      	cmp	r3, #0
 801e108:	d03e      	beq.n	801e188 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	695b      	ldr	r3, [r3, #20]
 801e110:	f003 0304 	and.w	r3, r3, #4
 801e114:	2b04      	cmp	r3, #4
 801e116:	d112      	bne.n	801e13e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	691a      	ldr	r2, [r3, #16]
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e122:	b2d2      	uxtb	r2, r2
 801e124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e12a:	1c5a      	adds	r2, r3, #1
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e134:	b29b      	uxth	r3, r3
 801e136:	3b01      	subs	r3, #1
 801e138:	b29a      	uxth	r2, r3
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	695b      	ldr	r3, [r3, #20]
 801e144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e148:	2b40      	cmp	r3, #64	; 0x40
 801e14a:	d112      	bne.n	801e172 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	691a      	ldr	r2, [r3, #16]
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e156:	b2d2      	uxtb	r2, r2
 801e158:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e15e:	1c5a      	adds	r2, r3, #1
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e168:	b29b      	uxth	r3, r3
 801e16a:	3b01      	subs	r3, #1
 801e16c:	b29a      	uxth	r2, r3
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e176:	b29b      	uxth	r3, r3
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d005      	beq.n	801e188 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e180:	f043 0204 	orr.w	r2, r3, #4
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d003      	beq.n	801e198 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801e190:	6878      	ldr	r0, [r7, #4]
 801e192:	f000 f8b3 	bl	801e2fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801e196:	e039      	b.n	801e20c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801e198:	7bfb      	ldrb	r3, [r7, #15]
 801e19a:	2b2a      	cmp	r3, #42	; 0x2a
 801e19c:	d109      	bne.n	801e1b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	2200      	movs	r2, #0
 801e1a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2228      	movs	r2, #40	; 0x28
 801e1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e1ac:	6878      	ldr	r0, [r7, #4]
 801e1ae:	f7ff f83b 	bl	801d228 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e1b8:	b2db      	uxtb	r3, r3
 801e1ba:	2b28      	cmp	r3, #40	; 0x28
 801e1bc:	d111      	bne.n	801e1e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	4a15      	ldr	r2, [pc, #84]	; (801e218 <I2C_Slave_STOPF+0x25c>)
 801e1c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	2220      	movs	r2, #32
 801e1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	2200      	movs	r2, #0
 801e1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801e1da:	6878      	ldr	r0, [r7, #4]
 801e1dc:	f7ff f83c 	bl	801d258 <HAL_I2C_ListenCpltCallback>
}
 801e1e0:	e014      	b.n	801e20c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1e6:	2b22      	cmp	r3, #34	; 0x22
 801e1e8:	d002      	beq.n	801e1f0 <I2C_Slave_STOPF+0x234>
 801e1ea:	7bfb      	ldrb	r3, [r7, #15]
 801e1ec:	2b22      	cmp	r3, #34	; 0x22
 801e1ee:	d10d      	bne.n	801e20c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	2220      	movs	r2, #32
 801e1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	2200      	movs	r2, #0
 801e202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e206:	6878      	ldr	r0, [r7, #4]
 801e208:	f7ff f80e 	bl	801d228 <HAL_I2C_SlaveRxCpltCallback>
}
 801e20c:	bf00      	nop
 801e20e:	3710      	adds	r7, #16
 801e210:	46bd      	mov	sp, r7
 801e212:	bd80      	pop	{r7, pc}
 801e214:	0801ea81 	.word	0x0801ea81
 801e218:	ffff0000 	.word	0xffff0000

0801e21c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801e21c:	b580      	push	{r7, lr}
 801e21e:	b084      	sub	sp, #16
 801e220:	af00      	add	r7, sp, #0
 801e222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e22a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e230:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801e232:	68bb      	ldr	r3, [r7, #8]
 801e234:	2b08      	cmp	r3, #8
 801e236:	d002      	beq.n	801e23e <I2C_Slave_AF+0x22>
 801e238:	68bb      	ldr	r3, [r7, #8]
 801e23a:	2b20      	cmp	r3, #32
 801e23c:	d129      	bne.n	801e292 <I2C_Slave_AF+0x76>
 801e23e:	7bfb      	ldrb	r3, [r7, #15]
 801e240:	2b28      	cmp	r3, #40	; 0x28
 801e242:	d126      	bne.n	801e292 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	4a2c      	ldr	r2, [pc, #176]	; (801e2f8 <I2C_Slave_AF+0xdc>)
 801e248:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	685a      	ldr	r2, [r3, #4]
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e258:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e262:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	681a      	ldr	r2, [r3, #0]
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e272:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	2200      	movs	r2, #0
 801e278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	2220      	movs	r2, #32
 801e27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	2200      	movs	r2, #0
 801e286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e28a:	6878      	ldr	r0, [r7, #4]
 801e28c:	f7fe ffe4 	bl	801d258 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801e290:	e02e      	b.n	801e2f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e292:	7bfb      	ldrb	r3, [r7, #15]
 801e294:	2b21      	cmp	r3, #33	; 0x21
 801e296:	d126      	bne.n	801e2e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	4a17      	ldr	r2, [pc, #92]	; (801e2f8 <I2C_Slave_AF+0xdc>)
 801e29c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	2221      	movs	r2, #33	; 0x21
 801e2a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	2220      	movs	r2, #32
 801e2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	685a      	ldr	r2, [r3, #4]
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e2c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e2cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	681a      	ldr	r2, [r3, #0]
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e2dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801e2de:	6878      	ldr	r0, [r7, #4]
 801e2e0:	f7fe ff98 	bl	801d214 <HAL_I2C_SlaveTxCpltCallback>
}
 801e2e4:	e004      	b.n	801e2f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e2ee:	615a      	str	r2, [r3, #20]
}
 801e2f0:	bf00      	nop
 801e2f2:	3710      	adds	r7, #16
 801e2f4:	46bd      	mov	sp, r7
 801e2f6:	bd80      	pop	{r7, pc}
 801e2f8:	ffff0000 	.word	0xffff0000

0801e2fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801e2fc:	b580      	push	{r7, lr}
 801e2fe:	b084      	sub	sp, #16
 801e300:	af00      	add	r7, sp, #0
 801e302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e30a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e312:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e314:	7bbb      	ldrb	r3, [r7, #14]
 801e316:	2b10      	cmp	r3, #16
 801e318:	d002      	beq.n	801e320 <I2C_ITError+0x24>
 801e31a:	7bbb      	ldrb	r3, [r7, #14]
 801e31c:	2b40      	cmp	r3, #64	; 0x40
 801e31e:	d10a      	bne.n	801e336 <I2C_ITError+0x3a>
 801e320:	7bfb      	ldrb	r3, [r7, #15]
 801e322:	2b22      	cmp	r3, #34	; 0x22
 801e324:	d107      	bne.n	801e336 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	681a      	ldr	r2, [r3, #0]
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e334:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801e336:	7bfb      	ldrb	r3, [r7, #15]
 801e338:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e33c:	2b28      	cmp	r3, #40	; 0x28
 801e33e:	d107      	bne.n	801e350 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	2200      	movs	r2, #0
 801e344:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	2228      	movs	r2, #40	; 0x28
 801e34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801e34e:	e015      	b.n	801e37c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	685b      	ldr	r3, [r3, #4]
 801e356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e35e:	d00a      	beq.n	801e376 <I2C_ITError+0x7a>
 801e360:	7bfb      	ldrb	r3, [r7, #15]
 801e362:	2b60      	cmp	r3, #96	; 0x60
 801e364:	d007      	beq.n	801e376 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	2220      	movs	r2, #32
 801e36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	2200      	movs	r2, #0
 801e372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	2200      	movs	r2, #0
 801e37a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	685b      	ldr	r3, [r3, #4]
 801e382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e38a:	d162      	bne.n	801e452 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	685a      	ldr	r2, [r3, #4]
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e39a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e3a4:	b2db      	uxtb	r3, r3
 801e3a6:	2b01      	cmp	r3, #1
 801e3a8:	d020      	beq.n	801e3ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3ae:	4a6a      	ldr	r2, [pc, #424]	; (801e558 <I2C_ITError+0x25c>)
 801e3b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f7fd f93a 	bl	801b630 <HAL_DMA_Abort_IT>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	f000 8089 	beq.w	801e4d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	681a      	ldr	r2, [r3, #0]
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	f022 0201 	bic.w	r2, r2, #1
 801e3d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2220      	movs	r2, #32
 801e3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e3e2:	687a      	ldr	r2, [r7, #4]
 801e3e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e3e6:	4610      	mov	r0, r2
 801e3e8:	4798      	blx	r3
 801e3ea:	e074      	b.n	801e4d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3f0:	4a59      	ldr	r2, [pc, #356]	; (801e558 <I2C_ITError+0x25c>)
 801e3f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3f8:	4618      	mov	r0, r3
 801e3fa:	f7fd f919 	bl	801b630 <HAL_DMA_Abort_IT>
 801e3fe:	4603      	mov	r3, r0
 801e400:	2b00      	cmp	r3, #0
 801e402:	d068      	beq.n	801e4d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	695b      	ldr	r3, [r3, #20]
 801e40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e40e:	2b40      	cmp	r3, #64	; 0x40
 801e410:	d10b      	bne.n	801e42a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	691a      	ldr	r2, [r3, #16]
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e41c:	b2d2      	uxtb	r2, r2
 801e41e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e424:	1c5a      	adds	r2, r3, #1
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	681a      	ldr	r2, [r3, #0]
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	f022 0201 	bic.w	r2, r2, #1
 801e438:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	2220      	movs	r2, #32
 801e43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e448:	687a      	ldr	r2, [r7, #4]
 801e44a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e44c:	4610      	mov	r0, r2
 801e44e:	4798      	blx	r3
 801e450:	e041      	b.n	801e4d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e458:	b2db      	uxtb	r3, r3
 801e45a:	2b60      	cmp	r3, #96	; 0x60
 801e45c:	d125      	bne.n	801e4aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	2220      	movs	r2, #32
 801e462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	2200      	movs	r2, #0
 801e46a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	695b      	ldr	r3, [r3, #20]
 801e472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e476:	2b40      	cmp	r3, #64	; 0x40
 801e478:	d10b      	bne.n	801e492 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	691a      	ldr	r2, [r3, #16]
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e484:	b2d2      	uxtb	r2, r2
 801e486:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e48c:	1c5a      	adds	r2, r3, #1
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	681a      	ldr	r2, [r3, #0]
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	f022 0201 	bic.w	r2, r2, #1
 801e4a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801e4a2:	6878      	ldr	r0, [r7, #4]
 801e4a4:	f7fe feec 	bl	801d280 <HAL_I2C_AbortCpltCallback>
 801e4a8:	e015      	b.n	801e4d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	695b      	ldr	r3, [r3, #20]
 801e4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e4b4:	2b40      	cmp	r3, #64	; 0x40
 801e4b6:	d10b      	bne.n	801e4d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	691a      	ldr	r2, [r3, #16]
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4c2:	b2d2      	uxtb	r2, r2
 801e4c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4ca:	1c5a      	adds	r2, r3, #1
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801e4d0:	6878      	ldr	r0, [r7, #4]
 801e4d2:	f7fe fecb 	bl	801d26c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	f003 0301 	and.w	r3, r3, #1
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d10e      	bne.n	801e504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e4e6:	68bb      	ldr	r3, [r7, #8]
 801e4e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d109      	bne.n	801e504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e4f0:	68bb      	ldr	r3, [r7, #8]
 801e4f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d104      	bne.n	801e504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801e4fa:	68bb      	ldr	r3, [r7, #8]
 801e4fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e500:	2b00      	cmp	r3, #0
 801e502:	d007      	beq.n	801e514 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	685a      	ldr	r2, [r3, #4]
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e512:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e51a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e520:	f003 0304 	and.w	r3, r3, #4
 801e524:	2b04      	cmp	r3, #4
 801e526:	d113      	bne.n	801e550 <I2C_ITError+0x254>
 801e528:	7bfb      	ldrb	r3, [r7, #15]
 801e52a:	2b28      	cmp	r3, #40	; 0x28
 801e52c:	d110      	bne.n	801e550 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	4a0a      	ldr	r2, [pc, #40]	; (801e55c <I2C_ITError+0x260>)
 801e532:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	2200      	movs	r2, #0
 801e538:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	2220      	movs	r2, #32
 801e53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	2200      	movs	r2, #0
 801e546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e54a:	6878      	ldr	r0, [r7, #4]
 801e54c:	f7fe fe84 	bl	801d258 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801e550:	bf00      	nop
 801e552:	3710      	adds	r7, #16
 801e554:	46bd      	mov	sp, r7
 801e556:	bd80      	pop	{r7, pc}
 801e558:	0801ea81 	.word	0x0801ea81
 801e55c:	ffff0000 	.word	0xffff0000

0801e560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e560:	b580      	push	{r7, lr}
 801e562:	b088      	sub	sp, #32
 801e564:	af02      	add	r7, sp, #8
 801e566:	60f8      	str	r0, [r7, #12]
 801e568:	4608      	mov	r0, r1
 801e56a:	4611      	mov	r1, r2
 801e56c:	461a      	mov	r2, r3
 801e56e:	4603      	mov	r3, r0
 801e570:	817b      	strh	r3, [r7, #10]
 801e572:	460b      	mov	r3, r1
 801e574:	813b      	strh	r3, [r7, #8]
 801e576:	4613      	mov	r3, r2
 801e578:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	681a      	ldr	r2, [r3, #0]
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e58c:	9300      	str	r3, [sp, #0]
 801e58e:	6a3b      	ldr	r3, [r7, #32]
 801e590:	2200      	movs	r2, #0
 801e592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e596:	68f8      	ldr	r0, [r7, #12]
 801e598:	f000 fb1a 	bl	801ebd0 <I2C_WaitOnFlagUntilTimeout>
 801e59c:	4603      	mov	r3, r0
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d00d      	beq.n	801e5be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e5b0:	d103      	bne.n	801e5ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e5b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e5ba:	2303      	movs	r3, #3
 801e5bc:	e05f      	b.n	801e67e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e5be:	897b      	ldrh	r3, [r7, #10]
 801e5c0:	b2db      	uxtb	r3, r3
 801e5c2:	461a      	mov	r2, r3
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e5cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5d0:	6a3a      	ldr	r2, [r7, #32]
 801e5d2:	492d      	ldr	r1, [pc, #180]	; (801e688 <I2C_RequestMemoryWrite+0x128>)
 801e5d4:	68f8      	ldr	r0, [r7, #12]
 801e5d6:	f000 fb52 	bl	801ec7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d001      	beq.n	801e5e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801e5e0:	2301      	movs	r3, #1
 801e5e2:	e04c      	b.n	801e67e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	617b      	str	r3, [r7, #20]
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	695b      	ldr	r3, [r3, #20]
 801e5ee:	617b      	str	r3, [r7, #20]
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	699b      	ldr	r3, [r3, #24]
 801e5f6:	617b      	str	r3, [r7, #20]
 801e5f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e5fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e5fc:	6a39      	ldr	r1, [r7, #32]
 801e5fe:	68f8      	ldr	r0, [r7, #12]
 801e600:	f000 fbbc 	bl	801ed7c <I2C_WaitOnTXEFlagUntilTimeout>
 801e604:	4603      	mov	r3, r0
 801e606:	2b00      	cmp	r3, #0
 801e608:	d00d      	beq.n	801e626 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e60e:	2b04      	cmp	r3, #4
 801e610:	d107      	bne.n	801e622 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	681a      	ldr	r2, [r3, #0]
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e622:	2301      	movs	r3, #1
 801e624:	e02b      	b.n	801e67e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e626:	88fb      	ldrh	r3, [r7, #6]
 801e628:	2b01      	cmp	r3, #1
 801e62a:	d105      	bne.n	801e638 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e62c:	893b      	ldrh	r3, [r7, #8]
 801e62e:	b2da      	uxtb	r2, r3
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	611a      	str	r2, [r3, #16]
 801e636:	e021      	b.n	801e67c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e638:	893b      	ldrh	r3, [r7, #8]
 801e63a:	0a1b      	lsrs	r3, r3, #8
 801e63c:	b29b      	uxth	r3, r3
 801e63e:	b2da      	uxtb	r2, r3
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e648:	6a39      	ldr	r1, [r7, #32]
 801e64a:	68f8      	ldr	r0, [r7, #12]
 801e64c:	f000 fb96 	bl	801ed7c <I2C_WaitOnTXEFlagUntilTimeout>
 801e650:	4603      	mov	r3, r0
 801e652:	2b00      	cmp	r3, #0
 801e654:	d00d      	beq.n	801e672 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e656:	68fb      	ldr	r3, [r7, #12]
 801e658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e65a:	2b04      	cmp	r3, #4
 801e65c:	d107      	bne.n	801e66e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	681a      	ldr	r2, [r3, #0]
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e66c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801e66e:	2301      	movs	r3, #1
 801e670:	e005      	b.n	801e67e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e672:	893b      	ldrh	r3, [r7, #8]
 801e674:	b2da      	uxtb	r2, r3
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801e67c:	2300      	movs	r3, #0
}
 801e67e:	4618      	mov	r0, r3
 801e680:	3718      	adds	r7, #24
 801e682:	46bd      	mov	sp, r7
 801e684:	bd80      	pop	{r7, pc}
 801e686:	bf00      	nop
 801e688:	00010002 	.word	0x00010002

0801e68c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b088      	sub	sp, #32
 801e690:	af02      	add	r7, sp, #8
 801e692:	60f8      	str	r0, [r7, #12]
 801e694:	4608      	mov	r0, r1
 801e696:	4611      	mov	r1, r2
 801e698:	461a      	mov	r2, r3
 801e69a:	4603      	mov	r3, r0
 801e69c:	817b      	strh	r3, [r7, #10]
 801e69e:	460b      	mov	r3, r1
 801e6a0:	813b      	strh	r3, [r7, #8]
 801e6a2:	4613      	mov	r3, r2
 801e6a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	681a      	ldr	r2, [r3, #0]
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e6b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	681a      	ldr	r2, [r3, #0]
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e6c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6c8:	9300      	str	r3, [sp, #0]
 801e6ca:	6a3b      	ldr	r3, [r7, #32]
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e6d2:	68f8      	ldr	r0, [r7, #12]
 801e6d4:	f000 fa7c 	bl	801ebd0 <I2C_WaitOnFlagUntilTimeout>
 801e6d8:	4603      	mov	r3, r0
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d00d      	beq.n	801e6fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6ec:	d103      	bne.n	801e6f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e6f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e6f6:	2303      	movs	r3, #3
 801e6f8:	e0aa      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e6fa:	897b      	ldrh	r3, [r7, #10]
 801e6fc:	b2db      	uxtb	r3, r3
 801e6fe:	461a      	mov	r2, r3
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e70c:	6a3a      	ldr	r2, [r7, #32]
 801e70e:	4952      	ldr	r1, [pc, #328]	; (801e858 <I2C_RequestMemoryRead+0x1cc>)
 801e710:	68f8      	ldr	r0, [r7, #12]
 801e712:	f000 fab4 	bl	801ec7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e716:	4603      	mov	r3, r0
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d001      	beq.n	801e720 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801e71c:	2301      	movs	r3, #1
 801e71e:	e097      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e720:	2300      	movs	r3, #0
 801e722:	617b      	str	r3, [r7, #20]
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	695b      	ldr	r3, [r3, #20]
 801e72a:	617b      	str	r3, [r7, #20]
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	699b      	ldr	r3, [r3, #24]
 801e732:	617b      	str	r3, [r7, #20]
 801e734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e738:	6a39      	ldr	r1, [r7, #32]
 801e73a:	68f8      	ldr	r0, [r7, #12]
 801e73c:	f000 fb1e 	bl	801ed7c <I2C_WaitOnTXEFlagUntilTimeout>
 801e740:	4603      	mov	r3, r0
 801e742:	2b00      	cmp	r3, #0
 801e744:	d00d      	beq.n	801e762 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e74a:	2b04      	cmp	r3, #4
 801e74c:	d107      	bne.n	801e75e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e74e:	68fb      	ldr	r3, [r7, #12]
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	681a      	ldr	r2, [r3, #0]
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e75c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e75e:	2301      	movs	r3, #1
 801e760:	e076      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e762:	88fb      	ldrh	r3, [r7, #6]
 801e764:	2b01      	cmp	r3, #1
 801e766:	d105      	bne.n	801e774 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e768:	893b      	ldrh	r3, [r7, #8]
 801e76a:	b2da      	uxtb	r2, r3
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	611a      	str	r2, [r3, #16]
 801e772:	e021      	b.n	801e7b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e774:	893b      	ldrh	r3, [r7, #8]
 801e776:	0a1b      	lsrs	r3, r3, #8
 801e778:	b29b      	uxth	r3, r3
 801e77a:	b2da      	uxtb	r2, r3
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e784:	6a39      	ldr	r1, [r7, #32]
 801e786:	68f8      	ldr	r0, [r7, #12]
 801e788:	f000 faf8 	bl	801ed7c <I2C_WaitOnTXEFlagUntilTimeout>
 801e78c:	4603      	mov	r3, r0
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d00d      	beq.n	801e7ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e796:	2b04      	cmp	r3, #4
 801e798:	d107      	bne.n	801e7aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e79a:	68fb      	ldr	r3, [r7, #12]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	681a      	ldr	r2, [r3, #0]
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801e7aa:	2301      	movs	r3, #1
 801e7ac:	e050      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e7ae:	893b      	ldrh	r3, [r7, #8]
 801e7b0:	b2da      	uxtb	r2, r3
 801e7b2:	68fb      	ldr	r3, [r7, #12]
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e7ba:	6a39      	ldr	r1, [r7, #32]
 801e7bc:	68f8      	ldr	r0, [r7, #12]
 801e7be:	f000 fadd 	bl	801ed7c <I2C_WaitOnTXEFlagUntilTimeout>
 801e7c2:	4603      	mov	r3, r0
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d00d      	beq.n	801e7e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7cc:	2b04      	cmp	r3, #4
 801e7ce:	d107      	bne.n	801e7e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	681b      	ldr	r3, [r3, #0]
 801e7d4:	681a      	ldr	r2, [r3, #0]
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	e035      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e7e4:	68fb      	ldr	r3, [r7, #12]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	681a      	ldr	r2, [r3, #0]
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e7f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7f6:	9300      	str	r3, [sp, #0]
 801e7f8:	6a3b      	ldr	r3, [r7, #32]
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e800:	68f8      	ldr	r0, [r7, #12]
 801e802:	f000 f9e5 	bl	801ebd0 <I2C_WaitOnFlagUntilTimeout>
 801e806:	4603      	mov	r3, r0
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d00d      	beq.n	801e828 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e81a:	d103      	bne.n	801e824 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e824:	2303      	movs	r3, #3
 801e826:	e013      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801e828:	897b      	ldrh	r3, [r7, #10]
 801e82a:	b2db      	uxtb	r3, r3
 801e82c:	f043 0301 	orr.w	r3, r3, #1
 801e830:	b2da      	uxtb	r2, r3
 801e832:	68fb      	ldr	r3, [r7, #12]
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e83a:	6a3a      	ldr	r2, [r7, #32]
 801e83c:	4906      	ldr	r1, [pc, #24]	; (801e858 <I2C_RequestMemoryRead+0x1cc>)
 801e83e:	68f8      	ldr	r0, [r7, #12]
 801e840:	f000 fa1d 	bl	801ec7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e844:	4603      	mov	r3, r0
 801e846:	2b00      	cmp	r3, #0
 801e848:	d001      	beq.n	801e84e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801e84a:	2301      	movs	r3, #1
 801e84c:	e000      	b.n	801e850 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801e84e:	2300      	movs	r3, #0
}
 801e850:	4618      	mov	r0, r3
 801e852:	3718      	adds	r7, #24
 801e854:	46bd      	mov	sp, r7
 801e856:	bd80      	pop	{r7, pc}
 801e858:	00010002 	.word	0x00010002

0801e85c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801e85c:	b580      	push	{r7, lr}
 801e85e:	b086      	sub	sp, #24
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e868:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e86a:	697b      	ldr	r3, [r7, #20]
 801e86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e870:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e872:	697b      	ldr	r3, [r7, #20]
 801e874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e878:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e87a:	697b      	ldr	r3, [r7, #20]
 801e87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e87e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e880:	697b      	ldr	r3, [r7, #20]
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	685a      	ldr	r2, [r3, #4]
 801e886:	697b      	ldr	r3, [r7, #20]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801e88e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801e890:	697b      	ldr	r3, [r7, #20]
 801e892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e894:	2b00      	cmp	r3, #0
 801e896:	d003      	beq.n	801e8a0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801e898:	697b      	ldr	r3, [r7, #20]
 801e89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e89c:	2200      	movs	r2, #0
 801e89e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801e8a0:	697b      	ldr	r3, [r7, #20]
 801e8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d003      	beq.n	801e8b0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801e8a8:	697b      	ldr	r3, [r7, #20]
 801e8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8ac:	2200      	movs	r2, #0
 801e8ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801e8b0:	7cfb      	ldrb	r3, [r7, #19]
 801e8b2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801e8b6:	2b21      	cmp	r3, #33	; 0x21
 801e8b8:	d007      	beq.n	801e8ca <I2C_DMAXferCplt+0x6e>
 801e8ba:	7cfb      	ldrb	r3, [r7, #19]
 801e8bc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801e8c0:	2b22      	cmp	r3, #34	; 0x22
 801e8c2:	d131      	bne.n	801e928 <I2C_DMAXferCplt+0xcc>
 801e8c4:	7cbb      	ldrb	r3, [r7, #18]
 801e8c6:	2b20      	cmp	r3, #32
 801e8c8:	d12e      	bne.n	801e928 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e8ca:	697b      	ldr	r3, [r7, #20]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	685a      	ldr	r2, [r3, #4]
 801e8d0:	697b      	ldr	r3, [r7, #20]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e8d8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801e8da:	697b      	ldr	r3, [r7, #20]
 801e8dc:	2200      	movs	r2, #0
 801e8de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801e8e0:	7cfb      	ldrb	r3, [r7, #19]
 801e8e2:	2b29      	cmp	r3, #41	; 0x29
 801e8e4:	d10a      	bne.n	801e8fc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801e8e6:	697b      	ldr	r3, [r7, #20]
 801e8e8:	2221      	movs	r2, #33	; 0x21
 801e8ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e8ec:	697b      	ldr	r3, [r7, #20]
 801e8ee:	2228      	movs	r2, #40	; 0x28
 801e8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801e8f4:	6978      	ldr	r0, [r7, #20]
 801e8f6:	f7fe fc8d 	bl	801d214 <HAL_I2C_SlaveTxCpltCallback>
 801e8fa:	e00c      	b.n	801e916 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801e8fc:	7cfb      	ldrb	r3, [r7, #19]
 801e8fe:	2b2a      	cmp	r3, #42	; 0x2a
 801e900:	d109      	bne.n	801e916 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801e902:	697b      	ldr	r3, [r7, #20]
 801e904:	2222      	movs	r2, #34	; 0x22
 801e906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e908:	697b      	ldr	r3, [r7, #20]
 801e90a:	2228      	movs	r2, #40	; 0x28
 801e90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e910:	6978      	ldr	r0, [r7, #20]
 801e912:	f7fe fc89 	bl	801d228 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e916:	697b      	ldr	r3, [r7, #20]
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	685a      	ldr	r2, [r3, #4]
 801e91c:	697b      	ldr	r3, [r7, #20]
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801e924:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801e926:	e06a      	b.n	801e9fe <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801e928:	697b      	ldr	r3, [r7, #20]
 801e92a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e92e:	b2db      	uxtb	r3, r3
 801e930:	2b00      	cmp	r3, #0
 801e932:	d064      	beq.n	801e9fe <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801e934:	697b      	ldr	r3, [r7, #20]
 801e936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e938:	b29b      	uxth	r3, r3
 801e93a:	2b01      	cmp	r3, #1
 801e93c:	d107      	bne.n	801e94e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e93e:	697b      	ldr	r3, [r7, #20]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	681a      	ldr	r2, [r3, #0]
 801e944:	697b      	ldr	r3, [r7, #20]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e94c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e94e:	697b      	ldr	r3, [r7, #20]
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	685a      	ldr	r2, [r3, #4]
 801e954:	697b      	ldr	r3, [r7, #20]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801e95c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e964:	d009      	beq.n	801e97a <I2C_DMAXferCplt+0x11e>
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	2b08      	cmp	r3, #8
 801e96a:	d006      	beq.n	801e97a <I2C_DMAXferCplt+0x11e>
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801e972:	d002      	beq.n	801e97a <I2C_DMAXferCplt+0x11e>
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	2b20      	cmp	r3, #32
 801e978:	d107      	bne.n	801e98a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e97a:	697b      	ldr	r3, [r7, #20]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	681a      	ldr	r2, [r3, #0]
 801e980:	697b      	ldr	r3, [r7, #20]
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e988:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e98a:	697b      	ldr	r3, [r7, #20]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	685a      	ldr	r2, [r3, #4]
 801e990:	697b      	ldr	r3, [r7, #20]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e998:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e99a:	697b      	ldr	r3, [r7, #20]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	685a      	ldr	r2, [r3, #4]
 801e9a0:	697b      	ldr	r3, [r7, #20]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e9a8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801e9aa:	697b      	ldr	r3, [r7, #20]
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e9b0:	697b      	ldr	r3, [r7, #20]
 801e9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d003      	beq.n	801e9c0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801e9b8:	6978      	ldr	r0, [r7, #20]
 801e9ba:	f7fe fc57 	bl	801d26c <HAL_I2C_ErrorCallback>
}
 801e9be:	e01e      	b.n	801e9fe <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801e9c0:	697b      	ldr	r3, [r7, #20]
 801e9c2:	2220      	movs	r2, #32
 801e9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e9c8:	697b      	ldr	r3, [r7, #20]
 801e9ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e9ce:	b2db      	uxtb	r3, r3
 801e9d0:	2b40      	cmp	r3, #64	; 0x40
 801e9d2:	d10a      	bne.n	801e9ea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e9d4:	697b      	ldr	r3, [r7, #20]
 801e9d6:	2200      	movs	r2, #0
 801e9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801e9dc:	697b      	ldr	r3, [r7, #20]
 801e9de:	2200      	movs	r2, #0
 801e9e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801e9e2:	6978      	ldr	r0, [r7, #20]
 801e9e4:	f7e3 f82e 	bl	8001a44 <HAL_I2C_MemRxCpltCallback>
}
 801e9e8:	e009      	b.n	801e9fe <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e9ea:	697b      	ldr	r3, [r7, #20]
 801e9ec:	2200      	movs	r2, #0
 801e9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801e9f2:	697b      	ldr	r3, [r7, #20]
 801e9f4:	2212      	movs	r2, #18
 801e9f6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801e9f8:	6978      	ldr	r0, [r7, #20]
 801e9fa:	f7e3 f839 	bl	8001a70 <HAL_I2C_MasterRxCpltCallback>
}
 801e9fe:	bf00      	nop
 801ea00:	3718      	adds	r7, #24
 801ea02:	46bd      	mov	sp, r7
 801ea04:	bd80      	pop	{r7, pc}

0801ea06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801ea06:	b580      	push	{r7, lr}
 801ea08:	b084      	sub	sp, #16
 801ea0a:	af00      	add	r7, sp, #0
 801ea0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea12:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d003      	beq.n	801ea24 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ea1c:	68fb      	ldr	r3, [r7, #12]
 801ea1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea20:	2200      	movs	r2, #0
 801ea22:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d003      	beq.n	801ea34 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801ea2c:	68fb      	ldr	r3, [r7, #12]
 801ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea30:	2200      	movs	r2, #0
 801ea32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801ea34:	6878      	ldr	r0, [r7, #4]
 801ea36:	f7fc ffb5 	bl	801b9a4 <HAL_DMA_GetError>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	2b02      	cmp	r3, #2
 801ea3e:	d01b      	beq.n	801ea78 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	681b      	ldr	r3, [r3, #0]
 801ea44:	681a      	ldr	r2, [r3, #0]
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea4e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	2200      	movs	r2, #0
 801ea54:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	2220      	movs	r2, #32
 801ea5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	2200      	movs	r2, #0
 801ea62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea6a:	f043 0210 	orr.w	r2, r3, #16
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801ea72:	68f8      	ldr	r0, [r7, #12]
 801ea74:	f7fe fbfa 	bl	801d26c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ea78:	bf00      	nop
 801ea7a:	3710      	adds	r7, #16
 801ea7c:	46bd      	mov	sp, r7
 801ea7e:	bd80      	pop	{r7, pc}

0801ea80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801ea80:	b580      	push	{r7, lr}
 801ea82:	b086      	sub	sp, #24
 801ea84:	af00      	add	r7, sp, #0
 801ea86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ea88:	2300      	movs	r3, #0
 801ea8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801ea9a:	4b4b      	ldr	r3, [pc, #300]	; (801ebc8 <I2C_DMAAbort+0x148>)
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	08db      	lsrs	r3, r3, #3
 801eaa0:	4a4a      	ldr	r2, [pc, #296]	; (801ebcc <I2C_DMAAbort+0x14c>)
 801eaa2:	fba2 2303 	umull	r2, r3, r2, r3
 801eaa6:	0a1a      	lsrs	r2, r3, #8
 801eaa8:	4613      	mov	r3, r2
 801eaaa:	009b      	lsls	r3, r3, #2
 801eaac:	4413      	add	r3, r2
 801eaae:	00da      	lsls	r2, r3, #3
 801eab0:	1ad3      	subs	r3, r2, r3
 801eab2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d106      	bne.n	801eac8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801eaba:	697b      	ldr	r3, [r7, #20]
 801eabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eabe:	f043 0220 	orr.w	r2, r3, #32
 801eac2:	697b      	ldr	r3, [r7, #20]
 801eac4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801eac6:	e00a      	b.n	801eade <I2C_DMAAbort+0x5e>
    }
    count--;
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	3b01      	subs	r3, #1
 801eacc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801eace:	697b      	ldr	r3, [r7, #20]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ead8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eadc:	d0ea      	beq.n	801eab4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801eade:	697b      	ldr	r3, [r7, #20]
 801eae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d003      	beq.n	801eaee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801eae6:	697b      	ldr	r3, [r7, #20]
 801eae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eaea:	2200      	movs	r2, #0
 801eaec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801eaee:	697b      	ldr	r3, [r7, #20]
 801eaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d003      	beq.n	801eafe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eafa:	2200      	movs	r2, #0
 801eafc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eafe:	697b      	ldr	r3, [r7, #20]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	681a      	ldr	r2, [r3, #0]
 801eb04:	697b      	ldr	r3, [r7, #20]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801eb0e:	697b      	ldr	r3, [r7, #20]
 801eb10:	2200      	movs	r2, #0
 801eb12:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801eb14:	697b      	ldr	r3, [r7, #20]
 801eb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d003      	beq.n	801eb24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801eb1c:	697b      	ldr	r3, [r7, #20]
 801eb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb20:	2200      	movs	r2, #0
 801eb22:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801eb24:	697b      	ldr	r3, [r7, #20]
 801eb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d003      	beq.n	801eb34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801eb2c:	697b      	ldr	r3, [r7, #20]
 801eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb30:	2200      	movs	r2, #0
 801eb32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	681a      	ldr	r2, [r3, #0]
 801eb3a:	697b      	ldr	r3, [r7, #20]
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	f022 0201 	bic.w	r2, r2, #1
 801eb42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801eb44:	697b      	ldr	r3, [r7, #20]
 801eb46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb4a:	b2db      	uxtb	r3, r3
 801eb4c:	2b60      	cmp	r3, #96	; 0x60
 801eb4e:	d10e      	bne.n	801eb6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801eb50:	697b      	ldr	r3, [r7, #20]
 801eb52:	2220      	movs	r2, #32
 801eb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801eb58:	697b      	ldr	r3, [r7, #20]
 801eb5a:	2200      	movs	r2, #0
 801eb5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801eb60:	697b      	ldr	r3, [r7, #20]
 801eb62:	2200      	movs	r2, #0
 801eb64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801eb66:	6978      	ldr	r0, [r7, #20]
 801eb68:	f7fe fb8a 	bl	801d280 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801eb6c:	e027      	b.n	801ebbe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801eb6e:	7cfb      	ldrb	r3, [r7, #19]
 801eb70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801eb74:	2b28      	cmp	r3, #40	; 0x28
 801eb76:	d117      	bne.n	801eba8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801eb78:	697b      	ldr	r3, [r7, #20]
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	681a      	ldr	r2, [r3, #0]
 801eb7e:	697b      	ldr	r3, [r7, #20]
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	f042 0201 	orr.w	r2, r2, #1
 801eb86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eb88:	697b      	ldr	r3, [r7, #20]
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	681a      	ldr	r2, [r3, #0]
 801eb8e:	697b      	ldr	r3, [r7, #20]
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eb96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801eb98:	697b      	ldr	r3, [r7, #20]
 801eb9a:	2200      	movs	r2, #0
 801eb9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801eb9e:	697b      	ldr	r3, [r7, #20]
 801eba0:	2228      	movs	r2, #40	; 0x28
 801eba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801eba6:	e007      	b.n	801ebb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801eba8:	697b      	ldr	r3, [r7, #20]
 801ebaa:	2220      	movs	r2, #32
 801ebac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebb0:	697b      	ldr	r3, [r7, #20]
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801ebb8:	6978      	ldr	r0, [r7, #20]
 801ebba:	f7fe fb57 	bl	801d26c <HAL_I2C_ErrorCallback>
}
 801ebbe:	bf00      	nop
 801ebc0:	3718      	adds	r7, #24
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	20000020 	.word	0x20000020
 801ebcc:	14f8b589 	.word	0x14f8b589

0801ebd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801ebd0:	b580      	push	{r7, lr}
 801ebd2:	b084      	sub	sp, #16
 801ebd4:	af00      	add	r7, sp, #0
 801ebd6:	60f8      	str	r0, [r7, #12]
 801ebd8:	60b9      	str	r1, [r7, #8]
 801ebda:	603b      	str	r3, [r7, #0]
 801ebdc:	4613      	mov	r3, r2
 801ebde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ebe0:	e025      	b.n	801ec2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ebe2:	683b      	ldr	r3, [r7, #0]
 801ebe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebe8:	d021      	beq.n	801ec2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ebea:	f7fb fe59 	bl	801a8a0 <HAL_GetTick>
 801ebee:	4602      	mov	r2, r0
 801ebf0:	69bb      	ldr	r3, [r7, #24]
 801ebf2:	1ad3      	subs	r3, r2, r3
 801ebf4:	683a      	ldr	r2, [r7, #0]
 801ebf6:	429a      	cmp	r2, r3
 801ebf8:	d302      	bcc.n	801ec00 <I2C_WaitOnFlagUntilTimeout+0x30>
 801ebfa:	683b      	ldr	r3, [r7, #0]
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d116      	bne.n	801ec2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	2200      	movs	r2, #0
 801ec04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	2220      	movs	r2, #32
 801ec0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	2200      	movs	r2, #0
 801ec12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec1a:	f043 0220 	orr.w	r2, r3, #32
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	2200      	movs	r2, #0
 801ec26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ec2a:	2301      	movs	r3, #1
 801ec2c:	e023      	b.n	801ec76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ec2e:	68bb      	ldr	r3, [r7, #8]
 801ec30:	0c1b      	lsrs	r3, r3, #16
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	2b01      	cmp	r3, #1
 801ec36:	d10d      	bne.n	801ec54 <I2C_WaitOnFlagUntilTimeout+0x84>
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	695b      	ldr	r3, [r3, #20]
 801ec3e:	43da      	mvns	r2, r3
 801ec40:	68bb      	ldr	r3, [r7, #8]
 801ec42:	4013      	ands	r3, r2
 801ec44:	b29b      	uxth	r3, r3
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	bf0c      	ite	eq
 801ec4a:	2301      	moveq	r3, #1
 801ec4c:	2300      	movne	r3, #0
 801ec4e:	b2db      	uxtb	r3, r3
 801ec50:	461a      	mov	r2, r3
 801ec52:	e00c      	b.n	801ec6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	699b      	ldr	r3, [r3, #24]
 801ec5a:	43da      	mvns	r2, r3
 801ec5c:	68bb      	ldr	r3, [r7, #8]
 801ec5e:	4013      	ands	r3, r2
 801ec60:	b29b      	uxth	r3, r3
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	bf0c      	ite	eq
 801ec66:	2301      	moveq	r3, #1
 801ec68:	2300      	movne	r3, #0
 801ec6a:	b2db      	uxtb	r3, r3
 801ec6c:	461a      	mov	r2, r3
 801ec6e:	79fb      	ldrb	r3, [r7, #7]
 801ec70:	429a      	cmp	r2, r3
 801ec72:	d0b6      	beq.n	801ebe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801ec74:	2300      	movs	r3, #0
}
 801ec76:	4618      	mov	r0, r3
 801ec78:	3710      	adds	r7, #16
 801ec7a:	46bd      	mov	sp, r7
 801ec7c:	bd80      	pop	{r7, pc}

0801ec7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801ec7e:	b580      	push	{r7, lr}
 801ec80:	b084      	sub	sp, #16
 801ec82:	af00      	add	r7, sp, #0
 801ec84:	60f8      	str	r0, [r7, #12]
 801ec86:	60b9      	str	r1, [r7, #8]
 801ec88:	607a      	str	r2, [r7, #4]
 801ec8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801ec8c:	e051      	b.n	801ed32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	695b      	ldr	r3, [r3, #20]
 801ec94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ec98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ec9c:	d123      	bne.n	801ece6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	681b      	ldr	r3, [r3, #0]
 801eca2:	681a      	ldr	r2, [r3, #0]
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ecac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ecae:	68fb      	ldr	r3, [r7, #12]
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ecb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	2200      	movs	r2, #0
 801ecbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801ecbe:	68fb      	ldr	r3, [r7, #12]
 801ecc0:	2220      	movs	r2, #32
 801ecc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	2200      	movs	r2, #0
 801ecca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801ecce:	68fb      	ldr	r3, [r7, #12]
 801ecd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecd2:	f043 0204 	orr.w	r2, r3, #4
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ecda:	68fb      	ldr	r3, [r7, #12]
 801ecdc:	2200      	movs	r2, #0
 801ecde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ece2:	2301      	movs	r3, #1
 801ece4:	e046      	b.n	801ed74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ecec:	d021      	beq.n	801ed32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ecee:	f7fb fdd7 	bl	801a8a0 <HAL_GetTick>
 801ecf2:	4602      	mov	r2, r0
 801ecf4:	683b      	ldr	r3, [r7, #0]
 801ecf6:	1ad3      	subs	r3, r2, r3
 801ecf8:	687a      	ldr	r2, [r7, #4]
 801ecfa:	429a      	cmp	r2, r3
 801ecfc:	d302      	bcc.n	801ed04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d116      	bne.n	801ed32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	2200      	movs	r2, #0
 801ed08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ed0a:	68fb      	ldr	r3, [r7, #12]
 801ed0c:	2220      	movs	r2, #32
 801ed0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2200      	movs	r2, #0
 801ed16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed1e:	f043 0220 	orr.w	r2, r3, #32
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ed26:	68fb      	ldr	r3, [r7, #12]
 801ed28:	2200      	movs	r2, #0
 801ed2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ed2e:	2301      	movs	r3, #1
 801ed30:	e020      	b.n	801ed74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801ed32:	68bb      	ldr	r3, [r7, #8]
 801ed34:	0c1b      	lsrs	r3, r3, #16
 801ed36:	b2db      	uxtb	r3, r3
 801ed38:	2b01      	cmp	r3, #1
 801ed3a:	d10c      	bne.n	801ed56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	695b      	ldr	r3, [r3, #20]
 801ed42:	43da      	mvns	r2, r3
 801ed44:	68bb      	ldr	r3, [r7, #8]
 801ed46:	4013      	ands	r3, r2
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	bf14      	ite	ne
 801ed4e:	2301      	movne	r3, #1
 801ed50:	2300      	moveq	r3, #0
 801ed52:	b2db      	uxtb	r3, r3
 801ed54:	e00b      	b.n	801ed6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	681b      	ldr	r3, [r3, #0]
 801ed5a:	699b      	ldr	r3, [r3, #24]
 801ed5c:	43da      	mvns	r2, r3
 801ed5e:	68bb      	ldr	r3, [r7, #8]
 801ed60:	4013      	ands	r3, r2
 801ed62:	b29b      	uxth	r3, r3
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	bf14      	ite	ne
 801ed68:	2301      	movne	r3, #1
 801ed6a:	2300      	moveq	r3, #0
 801ed6c:	b2db      	uxtb	r3, r3
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d18d      	bne.n	801ec8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801ed72:	2300      	movs	r3, #0
}
 801ed74:	4618      	mov	r0, r3
 801ed76:	3710      	adds	r7, #16
 801ed78:	46bd      	mov	sp, r7
 801ed7a:	bd80      	pop	{r7, pc}

0801ed7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801ed7c:	b580      	push	{r7, lr}
 801ed7e:	b084      	sub	sp, #16
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	60f8      	str	r0, [r7, #12]
 801ed84:	60b9      	str	r1, [r7, #8]
 801ed86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801ed88:	e02d      	b.n	801ede6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801ed8a:	68f8      	ldr	r0, [r7, #12]
 801ed8c:	f000 f86a 	bl	801ee64 <I2C_IsAcknowledgeFailed>
 801ed90:	4603      	mov	r3, r0
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d001      	beq.n	801ed9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801ed96:	2301      	movs	r3, #1
 801ed98:	e02d      	b.n	801edf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ed9a:	68bb      	ldr	r3, [r7, #8]
 801ed9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eda0:	d021      	beq.n	801ede6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801eda2:	f7fb fd7d 	bl	801a8a0 <HAL_GetTick>
 801eda6:	4602      	mov	r2, r0
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	1ad3      	subs	r3, r2, r3
 801edac:	68ba      	ldr	r2, [r7, #8]
 801edae:	429a      	cmp	r2, r3
 801edb0:	d302      	bcc.n	801edb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801edb2:	68bb      	ldr	r3, [r7, #8]
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d116      	bne.n	801ede6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	2200      	movs	r2, #0
 801edbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	2220      	movs	r2, #32
 801edc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	2200      	movs	r2, #0
 801edca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edd2:	f043 0220 	orr.w	r2, r3, #32
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	2200      	movs	r2, #0
 801edde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ede2:	2301      	movs	r3, #1
 801ede4:	e007      	b.n	801edf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	695b      	ldr	r3, [r3, #20]
 801edec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801edf0:	2b80      	cmp	r3, #128	; 0x80
 801edf2:	d1ca      	bne.n	801ed8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801edf4:	2300      	movs	r3, #0
}
 801edf6:	4618      	mov	r0, r3
 801edf8:	3710      	adds	r7, #16
 801edfa:	46bd      	mov	sp, r7
 801edfc:	bd80      	pop	{r7, pc}
	...

0801ee00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801ee00:	b480      	push	{r7}
 801ee02:	b085      	sub	sp, #20
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ee08:	2300      	movs	r3, #0
 801ee0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801ee0c:	4b13      	ldr	r3, [pc, #76]	; (801ee5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	08db      	lsrs	r3, r3, #3
 801ee12:	4a13      	ldr	r2, [pc, #76]	; (801ee60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801ee14:	fba2 2303 	umull	r2, r3, r2, r3
 801ee18:	0a1a      	lsrs	r2, r3, #8
 801ee1a:	4613      	mov	r3, r2
 801ee1c:	009b      	lsls	r3, r3, #2
 801ee1e:	4413      	add	r3, r2
 801ee20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	3b01      	subs	r3, #1
 801ee26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d107      	bne.n	801ee3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee32:	f043 0220 	orr.w	r2, r3, #32
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801ee3a:	2301      	movs	r3, #1
 801ee3c:	e008      	b.n	801ee50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ee48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ee4c:	d0e9      	beq.n	801ee22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801ee4e:	2300      	movs	r3, #0
}
 801ee50:	4618      	mov	r0, r3
 801ee52:	3714      	adds	r7, #20
 801ee54:	46bd      	mov	sp, r7
 801ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee5a:	4770      	bx	lr
 801ee5c:	20000020 	.word	0x20000020
 801ee60:	14f8b589 	.word	0x14f8b589

0801ee64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801ee64:	b480      	push	{r7}
 801ee66:	b083      	sub	sp, #12
 801ee68:	af00      	add	r7, sp, #0
 801ee6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	695b      	ldr	r3, [r3, #20]
 801ee72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ee76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ee7a:	d11b      	bne.n	801eeb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	681b      	ldr	r3, [r3, #0]
 801ee80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ee84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	2200      	movs	r2, #0
 801ee8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	2220      	movs	r2, #32
 801ee90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2200      	movs	r2, #0
 801ee98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eea0:	f043 0204 	orr.w	r2, r3, #4
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	2200      	movs	r2, #0
 801eeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801eeb0:	2301      	movs	r3, #1
 801eeb2:	e000      	b.n	801eeb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801eeb4:	2300      	movs	r3, #0
}
 801eeb6:	4618      	mov	r0, r3
 801eeb8:	370c      	adds	r7, #12
 801eeba:	46bd      	mov	sp, r7
 801eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eec0:	4770      	bx	lr

0801eec2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801eec2:	b480      	push	{r7}
 801eec4:	b083      	sub	sp, #12
 801eec6:	af00      	add	r7, sp, #0
 801eec8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eece:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801eed2:	d103      	bne.n	801eedc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	2201      	movs	r2, #1
 801eed8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801eeda:	e007      	b.n	801eeec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eee0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801eee4:	d102      	bne.n	801eeec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2208      	movs	r2, #8
 801eeea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801eeec:	bf00      	nop
 801eeee:	370c      	adds	r7, #12
 801eef0:	46bd      	mov	sp, r7
 801eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eef6:	4770      	bx	lr

0801eef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b086      	sub	sp, #24
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d101      	bne.n	801ef0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801ef06:	2301      	movs	r3, #1
 801ef08:	e264      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	f003 0301 	and.w	r3, r3, #1
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d075      	beq.n	801f002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801ef16:	4ba3      	ldr	r3, [pc, #652]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef18:	689b      	ldr	r3, [r3, #8]
 801ef1a:	f003 030c 	and.w	r3, r3, #12
 801ef1e:	2b04      	cmp	r3, #4
 801ef20:	d00c      	beq.n	801ef3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801ef22:	4ba0      	ldr	r3, [pc, #640]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef24:	689b      	ldr	r3, [r3, #8]
 801ef26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801ef2a:	2b08      	cmp	r3, #8
 801ef2c:	d112      	bne.n	801ef54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801ef2e:	4b9d      	ldr	r3, [pc, #628]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef30:	685b      	ldr	r3, [r3, #4]
 801ef32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ef36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ef3a:	d10b      	bne.n	801ef54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ef3c:	4b99      	ldr	r3, [pc, #612]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d05b      	beq.n	801f000 <HAL_RCC_OscConfig+0x108>
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	685b      	ldr	r3, [r3, #4]
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d157      	bne.n	801f000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801ef50:	2301      	movs	r3, #1
 801ef52:	e23f      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	685b      	ldr	r3, [r3, #4]
 801ef58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ef5c:	d106      	bne.n	801ef6c <HAL_RCC_OscConfig+0x74>
 801ef5e:	4b91      	ldr	r3, [pc, #580]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	4a90      	ldr	r2, [pc, #576]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ef68:	6013      	str	r3, [r2, #0]
 801ef6a:	e01d      	b.n	801efa8 <HAL_RCC_OscConfig+0xb0>
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	685b      	ldr	r3, [r3, #4]
 801ef70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ef74:	d10c      	bne.n	801ef90 <HAL_RCC_OscConfig+0x98>
 801ef76:	4b8b      	ldr	r3, [pc, #556]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	4a8a      	ldr	r2, [pc, #552]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ef80:	6013      	str	r3, [r2, #0]
 801ef82:	4b88      	ldr	r3, [pc, #544]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	4a87      	ldr	r2, [pc, #540]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ef8c:	6013      	str	r3, [r2, #0]
 801ef8e:	e00b      	b.n	801efa8 <HAL_RCC_OscConfig+0xb0>
 801ef90:	4b84      	ldr	r3, [pc, #528]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	4a83      	ldr	r2, [pc, #524]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ef9a:	6013      	str	r3, [r2, #0]
 801ef9c:	4b81      	ldr	r3, [pc, #516]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	4a80      	ldr	r2, [pc, #512]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801efa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801efa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	685b      	ldr	r3, [r3, #4]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d013      	beq.n	801efd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801efb0:	f7fb fc76 	bl	801a8a0 <HAL_GetTick>
 801efb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801efb6:	e008      	b.n	801efca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801efb8:	f7fb fc72 	bl	801a8a0 <HAL_GetTick>
 801efbc:	4602      	mov	r2, r0
 801efbe:	693b      	ldr	r3, [r7, #16]
 801efc0:	1ad3      	subs	r3, r2, r3
 801efc2:	2b64      	cmp	r3, #100	; 0x64
 801efc4:	d901      	bls.n	801efca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801efc6:	2303      	movs	r3, #3
 801efc8:	e204      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801efca:	4b76      	ldr	r3, [pc, #472]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d0f0      	beq.n	801efb8 <HAL_RCC_OscConfig+0xc0>
 801efd6:	e014      	b.n	801f002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801efd8:	f7fb fc62 	bl	801a8a0 <HAL_GetTick>
 801efdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801efde:	e008      	b.n	801eff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801efe0:	f7fb fc5e 	bl	801a8a0 <HAL_GetTick>
 801efe4:	4602      	mov	r2, r0
 801efe6:	693b      	ldr	r3, [r7, #16]
 801efe8:	1ad3      	subs	r3, r2, r3
 801efea:	2b64      	cmp	r3, #100	; 0x64
 801efec:	d901      	bls.n	801eff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801efee:	2303      	movs	r3, #3
 801eff0:	e1f0      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801eff2:	4b6c      	ldr	r3, [pc, #432]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801effa:	2b00      	cmp	r3, #0
 801effc:	d1f0      	bne.n	801efe0 <HAL_RCC_OscConfig+0xe8>
 801effe:	e000      	b.n	801f002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	f003 0302 	and.w	r3, r3, #2
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d063      	beq.n	801f0d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f00e:	4b65      	ldr	r3, [pc, #404]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f010:	689b      	ldr	r3, [r3, #8]
 801f012:	f003 030c 	and.w	r3, r3, #12
 801f016:	2b00      	cmp	r3, #0
 801f018:	d00b      	beq.n	801f032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f01a:	4b62      	ldr	r3, [pc, #392]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f01c:	689b      	ldr	r3, [r3, #8]
 801f01e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f022:	2b08      	cmp	r3, #8
 801f024:	d11c      	bne.n	801f060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f026:	4b5f      	ldr	r3, [pc, #380]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f028:	685b      	ldr	r3, [r3, #4]
 801f02a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d116      	bne.n	801f060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f032:	4b5c      	ldr	r3, [pc, #368]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	f003 0302 	and.w	r3, r3, #2
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d005      	beq.n	801f04a <HAL_RCC_OscConfig+0x152>
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	68db      	ldr	r3, [r3, #12]
 801f042:	2b01      	cmp	r3, #1
 801f044:	d001      	beq.n	801f04a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f046:	2301      	movs	r3, #1
 801f048:	e1c4      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f04a:	4b56      	ldr	r3, [pc, #344]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	691b      	ldr	r3, [r3, #16]
 801f056:	00db      	lsls	r3, r3, #3
 801f058:	4952      	ldr	r1, [pc, #328]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f05a:	4313      	orrs	r3, r2
 801f05c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f05e:	e03a      	b.n	801f0d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	68db      	ldr	r3, [r3, #12]
 801f064:	2b00      	cmp	r3, #0
 801f066:	d020      	beq.n	801f0aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f068:	4b4f      	ldr	r3, [pc, #316]	; (801f1a8 <HAL_RCC_OscConfig+0x2b0>)
 801f06a:	2201      	movs	r2, #1
 801f06c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f06e:	f7fb fc17 	bl	801a8a0 <HAL_GetTick>
 801f072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f074:	e008      	b.n	801f088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f076:	f7fb fc13 	bl	801a8a0 <HAL_GetTick>
 801f07a:	4602      	mov	r2, r0
 801f07c:	693b      	ldr	r3, [r7, #16]
 801f07e:	1ad3      	subs	r3, r2, r3
 801f080:	2b02      	cmp	r3, #2
 801f082:	d901      	bls.n	801f088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f084:	2303      	movs	r3, #3
 801f086:	e1a5      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f088:	4b46      	ldr	r3, [pc, #280]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	f003 0302 	and.w	r3, r3, #2
 801f090:	2b00      	cmp	r3, #0
 801f092:	d0f0      	beq.n	801f076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f094:	4b43      	ldr	r3, [pc, #268]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	691b      	ldr	r3, [r3, #16]
 801f0a0:	00db      	lsls	r3, r3, #3
 801f0a2:	4940      	ldr	r1, [pc, #256]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f0a4:	4313      	orrs	r3, r2
 801f0a6:	600b      	str	r3, [r1, #0]
 801f0a8:	e015      	b.n	801f0d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f0aa:	4b3f      	ldr	r3, [pc, #252]	; (801f1a8 <HAL_RCC_OscConfig+0x2b0>)
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f0b0:	f7fb fbf6 	bl	801a8a0 <HAL_GetTick>
 801f0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f0b6:	e008      	b.n	801f0ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f0b8:	f7fb fbf2 	bl	801a8a0 <HAL_GetTick>
 801f0bc:	4602      	mov	r2, r0
 801f0be:	693b      	ldr	r3, [r7, #16]
 801f0c0:	1ad3      	subs	r3, r2, r3
 801f0c2:	2b02      	cmp	r3, #2
 801f0c4:	d901      	bls.n	801f0ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f0c6:	2303      	movs	r3, #3
 801f0c8:	e184      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f0ca:	4b36      	ldr	r3, [pc, #216]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	f003 0302 	and.w	r3, r3, #2
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d1f0      	bne.n	801f0b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	f003 0308 	and.w	r3, r3, #8
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d030      	beq.n	801f144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	695b      	ldr	r3, [r3, #20]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d016      	beq.n	801f118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f0ea:	4b30      	ldr	r3, [pc, #192]	; (801f1ac <HAL_RCC_OscConfig+0x2b4>)
 801f0ec:	2201      	movs	r2, #1
 801f0ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f0f0:	f7fb fbd6 	bl	801a8a0 <HAL_GetTick>
 801f0f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f0f6:	e008      	b.n	801f10a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f0f8:	f7fb fbd2 	bl	801a8a0 <HAL_GetTick>
 801f0fc:	4602      	mov	r2, r0
 801f0fe:	693b      	ldr	r3, [r7, #16]
 801f100:	1ad3      	subs	r3, r2, r3
 801f102:	2b02      	cmp	r3, #2
 801f104:	d901      	bls.n	801f10a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f106:	2303      	movs	r3, #3
 801f108:	e164      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f10a:	4b26      	ldr	r3, [pc, #152]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f10e:	f003 0302 	and.w	r3, r3, #2
 801f112:	2b00      	cmp	r3, #0
 801f114:	d0f0      	beq.n	801f0f8 <HAL_RCC_OscConfig+0x200>
 801f116:	e015      	b.n	801f144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f118:	4b24      	ldr	r3, [pc, #144]	; (801f1ac <HAL_RCC_OscConfig+0x2b4>)
 801f11a:	2200      	movs	r2, #0
 801f11c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f11e:	f7fb fbbf 	bl	801a8a0 <HAL_GetTick>
 801f122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f124:	e008      	b.n	801f138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f126:	f7fb fbbb 	bl	801a8a0 <HAL_GetTick>
 801f12a:	4602      	mov	r2, r0
 801f12c:	693b      	ldr	r3, [r7, #16]
 801f12e:	1ad3      	subs	r3, r2, r3
 801f130:	2b02      	cmp	r3, #2
 801f132:	d901      	bls.n	801f138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801f134:	2303      	movs	r3, #3
 801f136:	e14d      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f138:	4b1a      	ldr	r3, [pc, #104]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f13c:	f003 0302 	and.w	r3, r3, #2
 801f140:	2b00      	cmp	r3, #0
 801f142:	d1f0      	bne.n	801f126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	f003 0304 	and.w	r3, r3, #4
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	f000 80a0 	beq.w	801f292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f152:	2300      	movs	r3, #0
 801f154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f156:	4b13      	ldr	r3, [pc, #76]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d10f      	bne.n	801f182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f162:	2300      	movs	r3, #0
 801f164:	60bb      	str	r3, [r7, #8]
 801f166:	4b0f      	ldr	r3, [pc, #60]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f16a:	4a0e      	ldr	r2, [pc, #56]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f170:	6413      	str	r3, [r2, #64]	; 0x40
 801f172:	4b0c      	ldr	r3, [pc, #48]	; (801f1a4 <HAL_RCC_OscConfig+0x2ac>)
 801f174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f17a:	60bb      	str	r3, [r7, #8]
 801f17c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f17e:	2301      	movs	r3, #1
 801f180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f182:	4b0b      	ldr	r3, [pc, #44]	; (801f1b0 <HAL_RCC_OscConfig+0x2b8>)
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d121      	bne.n	801f1d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f18e:	4b08      	ldr	r3, [pc, #32]	; (801f1b0 <HAL_RCC_OscConfig+0x2b8>)
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	4a07      	ldr	r2, [pc, #28]	; (801f1b0 <HAL_RCC_OscConfig+0x2b8>)
 801f194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f19a:	f7fb fb81 	bl	801a8a0 <HAL_GetTick>
 801f19e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f1a0:	e011      	b.n	801f1c6 <HAL_RCC_OscConfig+0x2ce>
 801f1a2:	bf00      	nop
 801f1a4:	40023800 	.word	0x40023800
 801f1a8:	42470000 	.word	0x42470000
 801f1ac:	42470e80 	.word	0x42470e80
 801f1b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f1b4:	f7fb fb74 	bl	801a8a0 <HAL_GetTick>
 801f1b8:	4602      	mov	r2, r0
 801f1ba:	693b      	ldr	r3, [r7, #16]
 801f1bc:	1ad3      	subs	r3, r2, r3
 801f1be:	2b02      	cmp	r3, #2
 801f1c0:	d901      	bls.n	801f1c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801f1c2:	2303      	movs	r3, #3
 801f1c4:	e106      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f1c6:	4b85      	ldr	r3, [pc, #532]	; (801f3dc <HAL_RCC_OscConfig+0x4e4>)
 801f1c8:	681b      	ldr	r3, [r3, #0]
 801f1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d0f0      	beq.n	801f1b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	689b      	ldr	r3, [r3, #8]
 801f1d6:	2b01      	cmp	r3, #1
 801f1d8:	d106      	bne.n	801f1e8 <HAL_RCC_OscConfig+0x2f0>
 801f1da:	4b81      	ldr	r3, [pc, #516]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f1de:	4a80      	ldr	r2, [pc, #512]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f1e0:	f043 0301 	orr.w	r3, r3, #1
 801f1e4:	6713      	str	r3, [r2, #112]	; 0x70
 801f1e6:	e01c      	b.n	801f222 <HAL_RCC_OscConfig+0x32a>
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	689b      	ldr	r3, [r3, #8]
 801f1ec:	2b05      	cmp	r3, #5
 801f1ee:	d10c      	bne.n	801f20a <HAL_RCC_OscConfig+0x312>
 801f1f0:	4b7b      	ldr	r3, [pc, #492]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f1f4:	4a7a      	ldr	r2, [pc, #488]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f1f6:	f043 0304 	orr.w	r3, r3, #4
 801f1fa:	6713      	str	r3, [r2, #112]	; 0x70
 801f1fc:	4b78      	ldr	r3, [pc, #480]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f200:	4a77      	ldr	r2, [pc, #476]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f202:	f043 0301 	orr.w	r3, r3, #1
 801f206:	6713      	str	r3, [r2, #112]	; 0x70
 801f208:	e00b      	b.n	801f222 <HAL_RCC_OscConfig+0x32a>
 801f20a:	4b75      	ldr	r3, [pc, #468]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f20e:	4a74      	ldr	r2, [pc, #464]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f210:	f023 0301 	bic.w	r3, r3, #1
 801f214:	6713      	str	r3, [r2, #112]	; 0x70
 801f216:	4b72      	ldr	r3, [pc, #456]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f21a:	4a71      	ldr	r2, [pc, #452]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f21c:	f023 0304 	bic.w	r3, r3, #4
 801f220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	689b      	ldr	r3, [r3, #8]
 801f226:	2b00      	cmp	r3, #0
 801f228:	d015      	beq.n	801f256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f22a:	f7fb fb39 	bl	801a8a0 <HAL_GetTick>
 801f22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f230:	e00a      	b.n	801f248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f232:	f7fb fb35 	bl	801a8a0 <HAL_GetTick>
 801f236:	4602      	mov	r2, r0
 801f238:	693b      	ldr	r3, [r7, #16]
 801f23a:	1ad3      	subs	r3, r2, r3
 801f23c:	f241 3288 	movw	r2, #5000	; 0x1388
 801f240:	4293      	cmp	r3, r2
 801f242:	d901      	bls.n	801f248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801f244:	2303      	movs	r3, #3
 801f246:	e0c5      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f248:	4b65      	ldr	r3, [pc, #404]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f24c:	f003 0302 	and.w	r3, r3, #2
 801f250:	2b00      	cmp	r3, #0
 801f252:	d0ee      	beq.n	801f232 <HAL_RCC_OscConfig+0x33a>
 801f254:	e014      	b.n	801f280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f256:	f7fb fb23 	bl	801a8a0 <HAL_GetTick>
 801f25a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f25c:	e00a      	b.n	801f274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f25e:	f7fb fb1f 	bl	801a8a0 <HAL_GetTick>
 801f262:	4602      	mov	r2, r0
 801f264:	693b      	ldr	r3, [r7, #16]
 801f266:	1ad3      	subs	r3, r2, r3
 801f268:	f241 3288 	movw	r2, #5000	; 0x1388
 801f26c:	4293      	cmp	r3, r2
 801f26e:	d901      	bls.n	801f274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801f270:	2303      	movs	r3, #3
 801f272:	e0af      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f274:	4b5a      	ldr	r3, [pc, #360]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f278:	f003 0302 	and.w	r3, r3, #2
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d1ee      	bne.n	801f25e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f280:	7dfb      	ldrb	r3, [r7, #23]
 801f282:	2b01      	cmp	r3, #1
 801f284:	d105      	bne.n	801f292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f286:	4b56      	ldr	r3, [pc, #344]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f28a:	4a55      	ldr	r2, [pc, #340]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f28c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	699b      	ldr	r3, [r3, #24]
 801f296:	2b00      	cmp	r3, #0
 801f298:	f000 809b 	beq.w	801f3d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f29c:	4b50      	ldr	r3, [pc, #320]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f29e:	689b      	ldr	r3, [r3, #8]
 801f2a0:	f003 030c 	and.w	r3, r3, #12
 801f2a4:	2b08      	cmp	r3, #8
 801f2a6:	d05c      	beq.n	801f362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	699b      	ldr	r3, [r3, #24]
 801f2ac:	2b02      	cmp	r3, #2
 801f2ae:	d141      	bne.n	801f334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f2b0:	4b4c      	ldr	r3, [pc, #304]	; (801f3e4 <HAL_RCC_OscConfig+0x4ec>)
 801f2b2:	2200      	movs	r2, #0
 801f2b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f2b6:	f7fb faf3 	bl	801a8a0 <HAL_GetTick>
 801f2ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f2bc:	e008      	b.n	801f2d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f2be:	f7fb faef 	bl	801a8a0 <HAL_GetTick>
 801f2c2:	4602      	mov	r2, r0
 801f2c4:	693b      	ldr	r3, [r7, #16]
 801f2c6:	1ad3      	subs	r3, r2, r3
 801f2c8:	2b02      	cmp	r3, #2
 801f2ca:	d901      	bls.n	801f2d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801f2cc:	2303      	movs	r3, #3
 801f2ce:	e081      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f2d0:	4b43      	ldr	r3, [pc, #268]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d1f0      	bne.n	801f2be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	69da      	ldr	r2, [r3, #28]
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	6a1b      	ldr	r3, [r3, #32]
 801f2e4:	431a      	orrs	r2, r3
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2ea:	019b      	lsls	r3, r3, #6
 801f2ec:	431a      	orrs	r2, r3
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2f2:	085b      	lsrs	r3, r3, #1
 801f2f4:	3b01      	subs	r3, #1
 801f2f6:	041b      	lsls	r3, r3, #16
 801f2f8:	431a      	orrs	r2, r3
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2fe:	061b      	lsls	r3, r3, #24
 801f300:	4937      	ldr	r1, [pc, #220]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f302:	4313      	orrs	r3, r2
 801f304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f306:	4b37      	ldr	r3, [pc, #220]	; (801f3e4 <HAL_RCC_OscConfig+0x4ec>)
 801f308:	2201      	movs	r2, #1
 801f30a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f30c:	f7fb fac8 	bl	801a8a0 <HAL_GetTick>
 801f310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f312:	e008      	b.n	801f326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f314:	f7fb fac4 	bl	801a8a0 <HAL_GetTick>
 801f318:	4602      	mov	r2, r0
 801f31a:	693b      	ldr	r3, [r7, #16]
 801f31c:	1ad3      	subs	r3, r2, r3
 801f31e:	2b02      	cmp	r3, #2
 801f320:	d901      	bls.n	801f326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801f322:	2303      	movs	r3, #3
 801f324:	e056      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f326:	4b2e      	ldr	r3, [pc, #184]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d0f0      	beq.n	801f314 <HAL_RCC_OscConfig+0x41c>
 801f332:	e04e      	b.n	801f3d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f334:	4b2b      	ldr	r3, [pc, #172]	; (801f3e4 <HAL_RCC_OscConfig+0x4ec>)
 801f336:	2200      	movs	r2, #0
 801f338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f33a:	f7fb fab1 	bl	801a8a0 <HAL_GetTick>
 801f33e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f340:	e008      	b.n	801f354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f342:	f7fb faad 	bl	801a8a0 <HAL_GetTick>
 801f346:	4602      	mov	r2, r0
 801f348:	693b      	ldr	r3, [r7, #16]
 801f34a:	1ad3      	subs	r3, r2, r3
 801f34c:	2b02      	cmp	r3, #2
 801f34e:	d901      	bls.n	801f354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801f350:	2303      	movs	r3, #3
 801f352:	e03f      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f354:	4b22      	ldr	r3, [pc, #136]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d1f0      	bne.n	801f342 <HAL_RCC_OscConfig+0x44a>
 801f360:	e037      	b.n	801f3d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	699b      	ldr	r3, [r3, #24]
 801f366:	2b01      	cmp	r3, #1
 801f368:	d101      	bne.n	801f36e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801f36a:	2301      	movs	r3, #1
 801f36c:	e032      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f36e:	4b1c      	ldr	r3, [pc, #112]	; (801f3e0 <HAL_RCC_OscConfig+0x4e8>)
 801f370:	685b      	ldr	r3, [r3, #4]
 801f372:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	699b      	ldr	r3, [r3, #24]
 801f378:	2b01      	cmp	r3, #1
 801f37a:	d028      	beq.n	801f3ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f386:	429a      	cmp	r2, r3
 801f388:	d121      	bne.n	801f3ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f394:	429a      	cmp	r2, r3
 801f396:	d11a      	bne.n	801f3ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f398:	68fa      	ldr	r2, [r7, #12]
 801f39a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f39e:	4013      	ands	r3, r2
 801f3a0:	687a      	ldr	r2, [r7, #4]
 801f3a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801f3a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f3a6:	4293      	cmp	r3, r2
 801f3a8:	d111      	bne.n	801f3ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3b4:	085b      	lsrs	r3, r3, #1
 801f3b6:	3b01      	subs	r3, #1
 801f3b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f3ba:	429a      	cmp	r2, r3
 801f3bc:	d107      	bne.n	801f3ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f3ca:	429a      	cmp	r2, r3
 801f3cc:	d001      	beq.n	801f3d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801f3ce:	2301      	movs	r3, #1
 801f3d0:	e000      	b.n	801f3d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801f3d2:	2300      	movs	r3, #0
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3718      	adds	r7, #24
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}
 801f3dc:	40007000 	.word	0x40007000
 801f3e0:	40023800 	.word	0x40023800
 801f3e4:	42470060 	.word	0x42470060

0801f3e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f3e8:	b580      	push	{r7, lr}
 801f3ea:	b084      	sub	sp, #16
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
 801f3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d101      	bne.n	801f3fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f3f8:	2301      	movs	r3, #1
 801f3fa:	e0cc      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f3fc:	4b68      	ldr	r3, [pc, #416]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	f003 0307 	and.w	r3, r3, #7
 801f404:	683a      	ldr	r2, [r7, #0]
 801f406:	429a      	cmp	r2, r3
 801f408:	d90c      	bls.n	801f424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f40a:	4b65      	ldr	r3, [pc, #404]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f40c:	683a      	ldr	r2, [r7, #0]
 801f40e:	b2d2      	uxtb	r2, r2
 801f410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f412:	4b63      	ldr	r3, [pc, #396]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	f003 0307 	and.w	r3, r3, #7
 801f41a:	683a      	ldr	r2, [r7, #0]
 801f41c:	429a      	cmp	r2, r3
 801f41e:	d001      	beq.n	801f424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f420:	2301      	movs	r3, #1
 801f422:	e0b8      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	f003 0302 	and.w	r3, r3, #2
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d020      	beq.n	801f472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	f003 0304 	and.w	r3, r3, #4
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d005      	beq.n	801f448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f43c:	4b59      	ldr	r3, [pc, #356]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f43e:	689b      	ldr	r3, [r3, #8]
 801f440:	4a58      	ldr	r2, [pc, #352]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	f003 0308 	and.w	r3, r3, #8
 801f450:	2b00      	cmp	r3, #0
 801f452:	d005      	beq.n	801f460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f454:	4b53      	ldr	r3, [pc, #332]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f456:	689b      	ldr	r3, [r3, #8]
 801f458:	4a52      	ldr	r2, [pc, #328]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f45a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f45e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f460:	4b50      	ldr	r3, [pc, #320]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f462:	689b      	ldr	r3, [r3, #8]
 801f464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	689b      	ldr	r3, [r3, #8]
 801f46c:	494d      	ldr	r1, [pc, #308]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f46e:	4313      	orrs	r3, r2
 801f470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	f003 0301 	and.w	r3, r3, #1
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d044      	beq.n	801f508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	685b      	ldr	r3, [r3, #4]
 801f482:	2b01      	cmp	r3, #1
 801f484:	d107      	bne.n	801f496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f486:	4b47      	ldr	r3, [pc, #284]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d119      	bne.n	801f4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f492:	2301      	movs	r3, #1
 801f494:	e07f      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	685b      	ldr	r3, [r3, #4]
 801f49a:	2b02      	cmp	r3, #2
 801f49c:	d003      	beq.n	801f4a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f4a2:	2b03      	cmp	r3, #3
 801f4a4:	d107      	bne.n	801f4b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f4a6:	4b3f      	ldr	r3, [pc, #252]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d109      	bne.n	801f4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f4b2:	2301      	movs	r3, #1
 801f4b4:	e06f      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f4b6:	4b3b      	ldr	r3, [pc, #236]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	f003 0302 	and.w	r3, r3, #2
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d101      	bne.n	801f4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f4c2:	2301      	movs	r3, #1
 801f4c4:	e067      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801f4c6:	4b37      	ldr	r3, [pc, #220]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f4c8:	689b      	ldr	r3, [r3, #8]
 801f4ca:	f023 0203 	bic.w	r2, r3, #3
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	685b      	ldr	r3, [r3, #4]
 801f4d2:	4934      	ldr	r1, [pc, #208]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f4d4:	4313      	orrs	r3, r2
 801f4d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801f4d8:	f7fb f9e2 	bl	801a8a0 <HAL_GetTick>
 801f4dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f4de:	e00a      	b.n	801f4f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f4e0:	f7fb f9de 	bl	801a8a0 <HAL_GetTick>
 801f4e4:	4602      	mov	r2, r0
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	1ad3      	subs	r3, r2, r3
 801f4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 801f4ee:	4293      	cmp	r3, r2
 801f4f0:	d901      	bls.n	801f4f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801f4f2:	2303      	movs	r3, #3
 801f4f4:	e04f      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f4f6:	4b2b      	ldr	r3, [pc, #172]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f4f8:	689b      	ldr	r3, [r3, #8]
 801f4fa:	f003 020c 	and.w	r2, r3, #12
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	685b      	ldr	r3, [r3, #4]
 801f502:	009b      	lsls	r3, r3, #2
 801f504:	429a      	cmp	r2, r3
 801f506:	d1eb      	bne.n	801f4e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801f508:	4b25      	ldr	r3, [pc, #148]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	f003 0307 	and.w	r3, r3, #7
 801f510:	683a      	ldr	r2, [r7, #0]
 801f512:	429a      	cmp	r2, r3
 801f514:	d20c      	bcs.n	801f530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f516:	4b22      	ldr	r3, [pc, #136]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f518:	683a      	ldr	r2, [r7, #0]
 801f51a:	b2d2      	uxtb	r2, r2
 801f51c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f51e:	4b20      	ldr	r3, [pc, #128]	; (801f5a0 <HAL_RCC_ClockConfig+0x1b8>)
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	f003 0307 	and.w	r3, r3, #7
 801f526:	683a      	ldr	r2, [r7, #0]
 801f528:	429a      	cmp	r2, r3
 801f52a:	d001      	beq.n	801f530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801f52c:	2301      	movs	r3, #1
 801f52e:	e032      	b.n	801f596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	f003 0304 	and.w	r3, r3, #4
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d008      	beq.n	801f54e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801f53c:	4b19      	ldr	r3, [pc, #100]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f53e:	689b      	ldr	r3, [r3, #8]
 801f540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	68db      	ldr	r3, [r3, #12]
 801f548:	4916      	ldr	r1, [pc, #88]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f54a:	4313      	orrs	r3, r2
 801f54c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	f003 0308 	and.w	r3, r3, #8
 801f556:	2b00      	cmp	r3, #0
 801f558:	d009      	beq.n	801f56e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801f55a:	4b12      	ldr	r3, [pc, #72]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f55c:	689b      	ldr	r3, [r3, #8]
 801f55e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	691b      	ldr	r3, [r3, #16]
 801f566:	00db      	lsls	r3, r3, #3
 801f568:	490e      	ldr	r1, [pc, #56]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f56a:	4313      	orrs	r3, r2
 801f56c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801f56e:	f000 f821 	bl	801f5b4 <HAL_RCC_GetSysClockFreq>
 801f572:	4602      	mov	r2, r0
 801f574:	4b0b      	ldr	r3, [pc, #44]	; (801f5a4 <HAL_RCC_ClockConfig+0x1bc>)
 801f576:	689b      	ldr	r3, [r3, #8]
 801f578:	091b      	lsrs	r3, r3, #4
 801f57a:	f003 030f 	and.w	r3, r3, #15
 801f57e:	490a      	ldr	r1, [pc, #40]	; (801f5a8 <HAL_RCC_ClockConfig+0x1c0>)
 801f580:	5ccb      	ldrb	r3, [r1, r3]
 801f582:	fa22 f303 	lsr.w	r3, r2, r3
 801f586:	4a09      	ldr	r2, [pc, #36]	; (801f5ac <HAL_RCC_ClockConfig+0x1c4>)
 801f588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801f58a:	4b09      	ldr	r3, [pc, #36]	; (801f5b0 <HAL_RCC_ClockConfig+0x1c8>)
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	4618      	mov	r0, r3
 801f590:	f7fb f942 	bl	801a818 <HAL_InitTick>

  return HAL_OK;
 801f594:	2300      	movs	r3, #0
}
 801f596:	4618      	mov	r0, r3
 801f598:	3710      	adds	r7, #16
 801f59a:	46bd      	mov	sp, r7
 801f59c:	bd80      	pop	{r7, pc}
 801f59e:	bf00      	nop
 801f5a0:	40023c00 	.word	0x40023c00
 801f5a4:	40023800 	.word	0x40023800
 801f5a8:	080268c8 	.word	0x080268c8
 801f5ac:	20000020 	.word	0x20000020
 801f5b0:	20000090 	.word	0x20000090

0801f5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f5b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f5b8:	b084      	sub	sp, #16
 801f5ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801f5bc:	2300      	movs	r3, #0
 801f5be:	607b      	str	r3, [r7, #4]
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	60fb      	str	r3, [r7, #12]
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f5cc:	4b67      	ldr	r3, [pc, #412]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f5ce:	689b      	ldr	r3, [r3, #8]
 801f5d0:	f003 030c 	and.w	r3, r3, #12
 801f5d4:	2b08      	cmp	r3, #8
 801f5d6:	d00d      	beq.n	801f5f4 <HAL_RCC_GetSysClockFreq+0x40>
 801f5d8:	2b08      	cmp	r3, #8
 801f5da:	f200 80bd 	bhi.w	801f758 <HAL_RCC_GetSysClockFreq+0x1a4>
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d002      	beq.n	801f5e8 <HAL_RCC_GetSysClockFreq+0x34>
 801f5e2:	2b04      	cmp	r3, #4
 801f5e4:	d003      	beq.n	801f5ee <HAL_RCC_GetSysClockFreq+0x3a>
 801f5e6:	e0b7      	b.n	801f758 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801f5e8:	4b61      	ldr	r3, [pc, #388]	; (801f770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801f5ea:	60bb      	str	r3, [r7, #8]
       break;
 801f5ec:	e0b7      	b.n	801f75e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801f5ee:	4b61      	ldr	r3, [pc, #388]	; (801f774 <HAL_RCC_GetSysClockFreq+0x1c0>)
 801f5f0:	60bb      	str	r3, [r7, #8]
      break;
 801f5f2:	e0b4      	b.n	801f75e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801f5f4:	4b5d      	ldr	r3, [pc, #372]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f5f6:	685b      	ldr	r3, [r3, #4]
 801f5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f5fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801f5fe:	4b5b      	ldr	r3, [pc, #364]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f600:	685b      	ldr	r3, [r3, #4]
 801f602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f606:	2b00      	cmp	r3, #0
 801f608:	d04d      	beq.n	801f6a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f60a:	4b58      	ldr	r3, [pc, #352]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f60c:	685b      	ldr	r3, [r3, #4]
 801f60e:	099b      	lsrs	r3, r3, #6
 801f610:	461a      	mov	r2, r3
 801f612:	f04f 0300 	mov.w	r3, #0
 801f616:	f240 10ff 	movw	r0, #511	; 0x1ff
 801f61a:	f04f 0100 	mov.w	r1, #0
 801f61e:	ea02 0800 	and.w	r8, r2, r0
 801f622:	ea03 0901 	and.w	r9, r3, r1
 801f626:	4640      	mov	r0, r8
 801f628:	4649      	mov	r1, r9
 801f62a:	f04f 0200 	mov.w	r2, #0
 801f62e:	f04f 0300 	mov.w	r3, #0
 801f632:	014b      	lsls	r3, r1, #5
 801f634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801f638:	0142      	lsls	r2, r0, #5
 801f63a:	4610      	mov	r0, r2
 801f63c:	4619      	mov	r1, r3
 801f63e:	ebb0 0008 	subs.w	r0, r0, r8
 801f642:	eb61 0109 	sbc.w	r1, r1, r9
 801f646:	f04f 0200 	mov.w	r2, #0
 801f64a:	f04f 0300 	mov.w	r3, #0
 801f64e:	018b      	lsls	r3, r1, #6
 801f650:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801f654:	0182      	lsls	r2, r0, #6
 801f656:	1a12      	subs	r2, r2, r0
 801f658:	eb63 0301 	sbc.w	r3, r3, r1
 801f65c:	f04f 0000 	mov.w	r0, #0
 801f660:	f04f 0100 	mov.w	r1, #0
 801f664:	00d9      	lsls	r1, r3, #3
 801f666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801f66a:	00d0      	lsls	r0, r2, #3
 801f66c:	4602      	mov	r2, r0
 801f66e:	460b      	mov	r3, r1
 801f670:	eb12 0208 	adds.w	r2, r2, r8
 801f674:	eb43 0309 	adc.w	r3, r3, r9
 801f678:	f04f 0000 	mov.w	r0, #0
 801f67c:	f04f 0100 	mov.w	r1, #0
 801f680:	0259      	lsls	r1, r3, #9
 801f682:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801f686:	0250      	lsls	r0, r2, #9
 801f688:	4602      	mov	r2, r0
 801f68a:	460b      	mov	r3, r1
 801f68c:	4610      	mov	r0, r2
 801f68e:	4619      	mov	r1, r3
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	461a      	mov	r2, r3
 801f694:	f04f 0300 	mov.w	r3, #0
 801f698:	f7e1 fbfc 	bl	8000e94 <__aeabi_uldivmod>
 801f69c:	4602      	mov	r2, r0
 801f69e:	460b      	mov	r3, r1
 801f6a0:	4613      	mov	r3, r2
 801f6a2:	60fb      	str	r3, [r7, #12]
 801f6a4:	e04a      	b.n	801f73c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f6a6:	4b31      	ldr	r3, [pc, #196]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f6a8:	685b      	ldr	r3, [r3, #4]
 801f6aa:	099b      	lsrs	r3, r3, #6
 801f6ac:	461a      	mov	r2, r3
 801f6ae:	f04f 0300 	mov.w	r3, #0
 801f6b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801f6b6:	f04f 0100 	mov.w	r1, #0
 801f6ba:	ea02 0400 	and.w	r4, r2, r0
 801f6be:	ea03 0501 	and.w	r5, r3, r1
 801f6c2:	4620      	mov	r0, r4
 801f6c4:	4629      	mov	r1, r5
 801f6c6:	f04f 0200 	mov.w	r2, #0
 801f6ca:	f04f 0300 	mov.w	r3, #0
 801f6ce:	014b      	lsls	r3, r1, #5
 801f6d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801f6d4:	0142      	lsls	r2, r0, #5
 801f6d6:	4610      	mov	r0, r2
 801f6d8:	4619      	mov	r1, r3
 801f6da:	1b00      	subs	r0, r0, r4
 801f6dc:	eb61 0105 	sbc.w	r1, r1, r5
 801f6e0:	f04f 0200 	mov.w	r2, #0
 801f6e4:	f04f 0300 	mov.w	r3, #0
 801f6e8:	018b      	lsls	r3, r1, #6
 801f6ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801f6ee:	0182      	lsls	r2, r0, #6
 801f6f0:	1a12      	subs	r2, r2, r0
 801f6f2:	eb63 0301 	sbc.w	r3, r3, r1
 801f6f6:	f04f 0000 	mov.w	r0, #0
 801f6fa:	f04f 0100 	mov.w	r1, #0
 801f6fe:	00d9      	lsls	r1, r3, #3
 801f700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801f704:	00d0      	lsls	r0, r2, #3
 801f706:	4602      	mov	r2, r0
 801f708:	460b      	mov	r3, r1
 801f70a:	1912      	adds	r2, r2, r4
 801f70c:	eb45 0303 	adc.w	r3, r5, r3
 801f710:	f04f 0000 	mov.w	r0, #0
 801f714:	f04f 0100 	mov.w	r1, #0
 801f718:	0299      	lsls	r1, r3, #10
 801f71a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801f71e:	0290      	lsls	r0, r2, #10
 801f720:	4602      	mov	r2, r0
 801f722:	460b      	mov	r3, r1
 801f724:	4610      	mov	r0, r2
 801f726:	4619      	mov	r1, r3
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	461a      	mov	r2, r3
 801f72c:	f04f 0300 	mov.w	r3, #0
 801f730:	f7e1 fbb0 	bl	8000e94 <__aeabi_uldivmod>
 801f734:	4602      	mov	r2, r0
 801f736:	460b      	mov	r3, r1
 801f738:	4613      	mov	r3, r2
 801f73a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801f73c:	4b0b      	ldr	r3, [pc, #44]	; (801f76c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801f73e:	685b      	ldr	r3, [r3, #4]
 801f740:	0c1b      	lsrs	r3, r3, #16
 801f742:	f003 0303 	and.w	r3, r3, #3
 801f746:	3301      	adds	r3, #1
 801f748:	005b      	lsls	r3, r3, #1
 801f74a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801f74c:	68fa      	ldr	r2, [r7, #12]
 801f74e:	683b      	ldr	r3, [r7, #0]
 801f750:	fbb2 f3f3 	udiv	r3, r2, r3
 801f754:	60bb      	str	r3, [r7, #8]
      break;
 801f756:	e002      	b.n	801f75e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801f758:	4b05      	ldr	r3, [pc, #20]	; (801f770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801f75a:	60bb      	str	r3, [r7, #8]
      break;
 801f75c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801f75e:	68bb      	ldr	r3, [r7, #8]
}
 801f760:	4618      	mov	r0, r3
 801f762:	3710      	adds	r7, #16
 801f764:	46bd      	mov	sp, r7
 801f766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f76a:	bf00      	nop
 801f76c:	40023800 	.word	0x40023800
 801f770:	00f42400 	.word	0x00f42400
 801f774:	007a1200 	.word	0x007a1200

0801f778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f778:	b480      	push	{r7}
 801f77a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801f77c:	4b03      	ldr	r3, [pc, #12]	; (801f78c <HAL_RCC_GetHCLKFreq+0x14>)
 801f77e:	681b      	ldr	r3, [r3, #0]
}
 801f780:	4618      	mov	r0, r3
 801f782:	46bd      	mov	sp, r7
 801f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f788:	4770      	bx	lr
 801f78a:	bf00      	nop
 801f78c:	20000020 	.word	0x20000020

0801f790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801f790:	b580      	push	{r7, lr}
 801f792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801f794:	f7ff fff0 	bl	801f778 <HAL_RCC_GetHCLKFreq>
 801f798:	4602      	mov	r2, r0
 801f79a:	4b05      	ldr	r3, [pc, #20]	; (801f7b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801f79c:	689b      	ldr	r3, [r3, #8]
 801f79e:	0a9b      	lsrs	r3, r3, #10
 801f7a0:	f003 0307 	and.w	r3, r3, #7
 801f7a4:	4903      	ldr	r1, [pc, #12]	; (801f7b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801f7a6:	5ccb      	ldrb	r3, [r1, r3]
 801f7a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	bd80      	pop	{r7, pc}
 801f7b0:	40023800 	.word	0x40023800
 801f7b4:	080268d8 	.word	0x080268d8

0801f7b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801f7bc:	f7ff ffdc 	bl	801f778 <HAL_RCC_GetHCLKFreq>
 801f7c0:	4602      	mov	r2, r0
 801f7c2:	4b05      	ldr	r3, [pc, #20]	; (801f7d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 801f7c4:	689b      	ldr	r3, [r3, #8]
 801f7c6:	0b5b      	lsrs	r3, r3, #13
 801f7c8:	f003 0307 	and.w	r3, r3, #7
 801f7cc:	4903      	ldr	r1, [pc, #12]	; (801f7dc <HAL_RCC_GetPCLK2Freq+0x24>)
 801f7ce:	5ccb      	ldrb	r3, [r1, r3]
 801f7d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801f7d4:	4618      	mov	r0, r3
 801f7d6:	bd80      	pop	{r7, pc}
 801f7d8:	40023800 	.word	0x40023800
 801f7dc:	080268d8 	.word	0x080268d8

0801f7e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f7e0:	b580      	push	{r7, lr}
 801f7e2:	b082      	sub	sp, #8
 801f7e4:	af00      	add	r7, sp, #0
 801f7e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d101      	bne.n	801f7f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f7ee:	2301      	movs	r3, #1
 801f7f0:	e041      	b.n	801f876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f7f8:	b2db      	uxtb	r3, r3
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d106      	bne.n	801f80c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	2200      	movs	r2, #0
 801f802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f806:	6878      	ldr	r0, [r7, #4]
 801f808:	f7e3 ffd6 	bl	80037b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	2202      	movs	r2, #2
 801f810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	681a      	ldr	r2, [r3, #0]
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	3304      	adds	r3, #4
 801f81c:	4619      	mov	r1, r3
 801f81e:	4610      	mov	r0, r2
 801f820:	f000 fd14 	bl	802024c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	2201      	movs	r2, #1
 801f828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	2201      	movs	r2, #1
 801f830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	2201      	movs	r2, #1
 801f838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	2201      	movs	r2, #1
 801f840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	2201      	movs	r2, #1
 801f848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	2201      	movs	r2, #1
 801f850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	2201      	movs	r2, #1
 801f858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	2201      	movs	r2, #1
 801f860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	2201      	movs	r2, #1
 801f868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	2201      	movs	r2, #1
 801f870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f874:	2300      	movs	r3, #0
}
 801f876:	4618      	mov	r0, r3
 801f878:	3708      	adds	r7, #8
 801f87a:	46bd      	mov	sp, r7
 801f87c:	bd80      	pop	{r7, pc}

0801f87e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f87e:	b580      	push	{r7, lr}
 801f880:	b082      	sub	sp, #8
 801f882:	af00      	add	r7, sp, #0
 801f884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d101      	bne.n	801f890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f88c:	2301      	movs	r3, #1
 801f88e:	e041      	b.n	801f914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f896:	b2db      	uxtb	r3, r3
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d106      	bne.n	801f8aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	2200      	movs	r2, #0
 801f8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f8a4:	6878      	ldr	r0, [r7, #4]
 801f8a6:	f000 f839 	bl	801f91c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	2202      	movs	r2, #2
 801f8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	681a      	ldr	r2, [r3, #0]
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	3304      	adds	r3, #4
 801f8ba:	4619      	mov	r1, r3
 801f8bc:	4610      	mov	r0, r2
 801f8be:	f000 fcc5 	bl	802024c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	2201      	movs	r2, #1
 801f8ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2201      	movs	r2, #1
 801f8d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	2201      	movs	r2, #1
 801f8de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	2201      	movs	r2, #1
 801f8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	2201      	movs	r2, #1
 801f8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	2201      	movs	r2, #1
 801f8f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2201      	movs	r2, #1
 801f8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	2201      	movs	r2, #1
 801f906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	2201      	movs	r2, #1
 801f90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f912:	2300      	movs	r3, #0
}
 801f914:	4618      	mov	r0, r3
 801f916:	3708      	adds	r7, #8
 801f918:	46bd      	mov	sp, r7
 801f91a:	bd80      	pop	{r7, pc}

0801f91c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f91c:	b480      	push	{r7}
 801f91e:	b083      	sub	sp, #12
 801f920:	af00      	add	r7, sp, #0
 801f922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f924:	bf00      	nop
 801f926:	370c      	adds	r7, #12
 801f928:	46bd      	mov	sp, r7
 801f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f92e:	4770      	bx	lr

0801f930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f930:	b580      	push	{r7, lr}
 801f932:	b084      	sub	sp, #16
 801f934:	af00      	add	r7, sp, #0
 801f936:	6078      	str	r0, [r7, #4]
 801f938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801f93a:	683b      	ldr	r3, [r7, #0]
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	d109      	bne.n	801f954 <HAL_TIM_PWM_Start+0x24>
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f946:	b2db      	uxtb	r3, r3
 801f948:	2b01      	cmp	r3, #1
 801f94a:	bf14      	ite	ne
 801f94c:	2301      	movne	r3, #1
 801f94e:	2300      	moveq	r3, #0
 801f950:	b2db      	uxtb	r3, r3
 801f952:	e022      	b.n	801f99a <HAL_TIM_PWM_Start+0x6a>
 801f954:	683b      	ldr	r3, [r7, #0]
 801f956:	2b04      	cmp	r3, #4
 801f958:	d109      	bne.n	801f96e <HAL_TIM_PWM_Start+0x3e>
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f960:	b2db      	uxtb	r3, r3
 801f962:	2b01      	cmp	r3, #1
 801f964:	bf14      	ite	ne
 801f966:	2301      	movne	r3, #1
 801f968:	2300      	moveq	r3, #0
 801f96a:	b2db      	uxtb	r3, r3
 801f96c:	e015      	b.n	801f99a <HAL_TIM_PWM_Start+0x6a>
 801f96e:	683b      	ldr	r3, [r7, #0]
 801f970:	2b08      	cmp	r3, #8
 801f972:	d109      	bne.n	801f988 <HAL_TIM_PWM_Start+0x58>
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f97a:	b2db      	uxtb	r3, r3
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	bf14      	ite	ne
 801f980:	2301      	movne	r3, #1
 801f982:	2300      	moveq	r3, #0
 801f984:	b2db      	uxtb	r3, r3
 801f986:	e008      	b.n	801f99a <HAL_TIM_PWM_Start+0x6a>
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f98e:	b2db      	uxtb	r3, r3
 801f990:	2b01      	cmp	r3, #1
 801f992:	bf14      	ite	ne
 801f994:	2301      	movne	r3, #1
 801f996:	2300      	moveq	r3, #0
 801f998:	b2db      	uxtb	r3, r3
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d001      	beq.n	801f9a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801f99e:	2301      	movs	r3, #1
 801f9a0:	e068      	b.n	801fa74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f9a2:	683b      	ldr	r3, [r7, #0]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d104      	bne.n	801f9b2 <HAL_TIM_PWM_Start+0x82>
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	2202      	movs	r2, #2
 801f9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f9b0:	e013      	b.n	801f9da <HAL_TIM_PWM_Start+0xaa>
 801f9b2:	683b      	ldr	r3, [r7, #0]
 801f9b4:	2b04      	cmp	r3, #4
 801f9b6:	d104      	bne.n	801f9c2 <HAL_TIM_PWM_Start+0x92>
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	2202      	movs	r2, #2
 801f9bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f9c0:	e00b      	b.n	801f9da <HAL_TIM_PWM_Start+0xaa>
 801f9c2:	683b      	ldr	r3, [r7, #0]
 801f9c4:	2b08      	cmp	r3, #8
 801f9c6:	d104      	bne.n	801f9d2 <HAL_TIM_PWM_Start+0xa2>
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	2202      	movs	r2, #2
 801f9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f9d0:	e003      	b.n	801f9da <HAL_TIM_PWM_Start+0xaa>
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	2202      	movs	r2, #2
 801f9d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	2201      	movs	r2, #1
 801f9e0:	6839      	ldr	r1, [r7, #0]
 801f9e2:	4618      	mov	r0, r3
 801f9e4:	f000 fed8 	bl	8020798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	4a23      	ldr	r2, [pc, #140]	; (801fa7c <HAL_TIM_PWM_Start+0x14c>)
 801f9ee:	4293      	cmp	r3, r2
 801f9f0:	d107      	bne.n	801fa02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801fa00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	4a1d      	ldr	r2, [pc, #116]	; (801fa7c <HAL_TIM_PWM_Start+0x14c>)
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	d018      	beq.n	801fa3e <HAL_TIM_PWM_Start+0x10e>
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fa14:	d013      	beq.n	801fa3e <HAL_TIM_PWM_Start+0x10e>
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	4a19      	ldr	r2, [pc, #100]	; (801fa80 <HAL_TIM_PWM_Start+0x150>)
 801fa1c:	4293      	cmp	r3, r2
 801fa1e:	d00e      	beq.n	801fa3e <HAL_TIM_PWM_Start+0x10e>
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	4a17      	ldr	r2, [pc, #92]	; (801fa84 <HAL_TIM_PWM_Start+0x154>)
 801fa26:	4293      	cmp	r3, r2
 801fa28:	d009      	beq.n	801fa3e <HAL_TIM_PWM_Start+0x10e>
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	4a16      	ldr	r2, [pc, #88]	; (801fa88 <HAL_TIM_PWM_Start+0x158>)
 801fa30:	4293      	cmp	r3, r2
 801fa32:	d004      	beq.n	801fa3e <HAL_TIM_PWM_Start+0x10e>
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	4a14      	ldr	r2, [pc, #80]	; (801fa8c <HAL_TIM_PWM_Start+0x15c>)
 801fa3a:	4293      	cmp	r3, r2
 801fa3c:	d111      	bne.n	801fa62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	689b      	ldr	r3, [r3, #8]
 801fa44:	f003 0307 	and.w	r3, r3, #7
 801fa48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	2b06      	cmp	r3, #6
 801fa4e:	d010      	beq.n	801fa72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	681a      	ldr	r2, [r3, #0]
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	f042 0201 	orr.w	r2, r2, #1
 801fa5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fa60:	e007      	b.n	801fa72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	681a      	ldr	r2, [r3, #0]
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	f042 0201 	orr.w	r2, r2, #1
 801fa70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801fa72:	2300      	movs	r3, #0
}
 801fa74:	4618      	mov	r0, r3
 801fa76:	3710      	adds	r7, #16
 801fa78:	46bd      	mov	sp, r7
 801fa7a:	bd80      	pop	{r7, pc}
 801fa7c:	40010000 	.word	0x40010000
 801fa80:	40000400 	.word	0x40000400
 801fa84:	40000800 	.word	0x40000800
 801fa88:	40000c00 	.word	0x40000c00
 801fa8c:	40014000 	.word	0x40014000

0801fa90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fa90:	b580      	push	{r7, lr}
 801fa92:	b084      	sub	sp, #16
 801fa94:	af00      	add	r7, sp, #0
 801fa96:	6078      	str	r0, [r7, #4]
 801fa98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fa9a:	2300      	movs	r3, #0
 801fa9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801fa9e:	683b      	ldr	r3, [r7, #0]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d104      	bne.n	801faae <HAL_TIM_IC_Start_IT+0x1e>
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801faaa:	b2db      	uxtb	r3, r3
 801faac:	e013      	b.n	801fad6 <HAL_TIM_IC_Start_IT+0x46>
 801faae:	683b      	ldr	r3, [r7, #0]
 801fab0:	2b04      	cmp	r3, #4
 801fab2:	d104      	bne.n	801fabe <HAL_TIM_IC_Start_IT+0x2e>
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801faba:	b2db      	uxtb	r3, r3
 801fabc:	e00b      	b.n	801fad6 <HAL_TIM_IC_Start_IT+0x46>
 801fabe:	683b      	ldr	r3, [r7, #0]
 801fac0:	2b08      	cmp	r3, #8
 801fac2:	d104      	bne.n	801face <HAL_TIM_IC_Start_IT+0x3e>
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801faca:	b2db      	uxtb	r3, r3
 801facc:	e003      	b.n	801fad6 <HAL_TIM_IC_Start_IT+0x46>
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fad4:	b2db      	uxtb	r3, r3
 801fad6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801fad8:	683b      	ldr	r3, [r7, #0]
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d104      	bne.n	801fae8 <HAL_TIM_IC_Start_IT+0x58>
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801fae4:	b2db      	uxtb	r3, r3
 801fae6:	e013      	b.n	801fb10 <HAL_TIM_IC_Start_IT+0x80>
 801fae8:	683b      	ldr	r3, [r7, #0]
 801faea:	2b04      	cmp	r3, #4
 801faec:	d104      	bne.n	801faf8 <HAL_TIM_IC_Start_IT+0x68>
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801faf4:	b2db      	uxtb	r3, r3
 801faf6:	e00b      	b.n	801fb10 <HAL_TIM_IC_Start_IT+0x80>
 801faf8:	683b      	ldr	r3, [r7, #0]
 801fafa:	2b08      	cmp	r3, #8
 801fafc:	d104      	bne.n	801fb08 <HAL_TIM_IC_Start_IT+0x78>
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fb04:	b2db      	uxtb	r3, r3
 801fb06:	e003      	b.n	801fb10 <HAL_TIM_IC_Start_IT+0x80>
 801fb08:	687b      	ldr	r3, [r7, #4]
 801fb0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801fb12:	7bbb      	ldrb	r3, [r7, #14]
 801fb14:	2b01      	cmp	r3, #1
 801fb16:	d102      	bne.n	801fb1e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801fb18:	7b7b      	ldrb	r3, [r7, #13]
 801fb1a:	2b01      	cmp	r3, #1
 801fb1c:	d001      	beq.n	801fb22 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801fb1e:	2301      	movs	r3, #1
 801fb20:	e0c2      	b.n	801fca8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fb22:	683b      	ldr	r3, [r7, #0]
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	d104      	bne.n	801fb32 <HAL_TIM_IC_Start_IT+0xa2>
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	2202      	movs	r2, #2
 801fb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fb30:	e013      	b.n	801fb5a <HAL_TIM_IC_Start_IT+0xca>
 801fb32:	683b      	ldr	r3, [r7, #0]
 801fb34:	2b04      	cmp	r3, #4
 801fb36:	d104      	bne.n	801fb42 <HAL_TIM_IC_Start_IT+0xb2>
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	2202      	movs	r2, #2
 801fb3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fb40:	e00b      	b.n	801fb5a <HAL_TIM_IC_Start_IT+0xca>
 801fb42:	683b      	ldr	r3, [r7, #0]
 801fb44:	2b08      	cmp	r3, #8
 801fb46:	d104      	bne.n	801fb52 <HAL_TIM_IC_Start_IT+0xc2>
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	2202      	movs	r2, #2
 801fb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fb50:	e003      	b.n	801fb5a <HAL_TIM_IC_Start_IT+0xca>
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	2202      	movs	r2, #2
 801fb56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fb5a:	683b      	ldr	r3, [r7, #0]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d104      	bne.n	801fb6a <HAL_TIM_IC_Start_IT+0xda>
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	2202      	movs	r2, #2
 801fb64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fb68:	e013      	b.n	801fb92 <HAL_TIM_IC_Start_IT+0x102>
 801fb6a:	683b      	ldr	r3, [r7, #0]
 801fb6c:	2b04      	cmp	r3, #4
 801fb6e:	d104      	bne.n	801fb7a <HAL_TIM_IC_Start_IT+0xea>
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	2202      	movs	r2, #2
 801fb74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fb78:	e00b      	b.n	801fb92 <HAL_TIM_IC_Start_IT+0x102>
 801fb7a:	683b      	ldr	r3, [r7, #0]
 801fb7c:	2b08      	cmp	r3, #8
 801fb7e:	d104      	bne.n	801fb8a <HAL_TIM_IC_Start_IT+0xfa>
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	2202      	movs	r2, #2
 801fb84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fb88:	e003      	b.n	801fb92 <HAL_TIM_IC_Start_IT+0x102>
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	2202      	movs	r2, #2
 801fb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	2b0c      	cmp	r3, #12
 801fb96:	d841      	bhi.n	801fc1c <HAL_TIM_IC_Start_IT+0x18c>
 801fb98:	a201      	add	r2, pc, #4	; (adr r2, 801fba0 <HAL_TIM_IC_Start_IT+0x110>)
 801fb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb9e:	bf00      	nop
 801fba0:	0801fbd5 	.word	0x0801fbd5
 801fba4:	0801fc1d 	.word	0x0801fc1d
 801fba8:	0801fc1d 	.word	0x0801fc1d
 801fbac:	0801fc1d 	.word	0x0801fc1d
 801fbb0:	0801fbe7 	.word	0x0801fbe7
 801fbb4:	0801fc1d 	.word	0x0801fc1d
 801fbb8:	0801fc1d 	.word	0x0801fc1d
 801fbbc:	0801fc1d 	.word	0x0801fc1d
 801fbc0:	0801fbf9 	.word	0x0801fbf9
 801fbc4:	0801fc1d 	.word	0x0801fc1d
 801fbc8:	0801fc1d 	.word	0x0801fc1d
 801fbcc:	0801fc1d 	.word	0x0801fc1d
 801fbd0:	0801fc0b 	.word	0x0801fc0b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	68da      	ldr	r2, [r3, #12]
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	f042 0202 	orr.w	r2, r2, #2
 801fbe2:	60da      	str	r2, [r3, #12]
      break;
 801fbe4:	e01d      	b.n	801fc22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	68da      	ldr	r2, [r3, #12]
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	f042 0204 	orr.w	r2, r2, #4
 801fbf4:	60da      	str	r2, [r3, #12]
      break;
 801fbf6:	e014      	b.n	801fc22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	68da      	ldr	r2, [r3, #12]
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	681b      	ldr	r3, [r3, #0]
 801fc02:	f042 0208 	orr.w	r2, r2, #8
 801fc06:	60da      	str	r2, [r3, #12]
      break;
 801fc08:	e00b      	b.n	801fc22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	681b      	ldr	r3, [r3, #0]
 801fc0e:	68da      	ldr	r2, [r3, #12]
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	f042 0210 	orr.w	r2, r2, #16
 801fc18:	60da      	str	r2, [r3, #12]
      break;
 801fc1a:	e002      	b.n	801fc22 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801fc1c:	2301      	movs	r3, #1
 801fc1e:	73fb      	strb	r3, [r7, #15]
      break;
 801fc20:	bf00      	nop
  }

  if (status == HAL_OK)
 801fc22:	7bfb      	ldrb	r3, [r7, #15]
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d13e      	bne.n	801fca6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	2201      	movs	r2, #1
 801fc2e:	6839      	ldr	r1, [r7, #0]
 801fc30:	4618      	mov	r0, r3
 801fc32:	f000 fdb1 	bl	8020798 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	4a1d      	ldr	r2, [pc, #116]	; (801fcb0 <HAL_TIM_IC_Start_IT+0x220>)
 801fc3c:	4293      	cmp	r3, r2
 801fc3e:	d018      	beq.n	801fc72 <HAL_TIM_IC_Start_IT+0x1e2>
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fc48:	d013      	beq.n	801fc72 <HAL_TIM_IC_Start_IT+0x1e2>
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	4a19      	ldr	r2, [pc, #100]	; (801fcb4 <HAL_TIM_IC_Start_IT+0x224>)
 801fc50:	4293      	cmp	r3, r2
 801fc52:	d00e      	beq.n	801fc72 <HAL_TIM_IC_Start_IT+0x1e2>
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	4a17      	ldr	r2, [pc, #92]	; (801fcb8 <HAL_TIM_IC_Start_IT+0x228>)
 801fc5a:	4293      	cmp	r3, r2
 801fc5c:	d009      	beq.n	801fc72 <HAL_TIM_IC_Start_IT+0x1e2>
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	4a16      	ldr	r2, [pc, #88]	; (801fcbc <HAL_TIM_IC_Start_IT+0x22c>)
 801fc64:	4293      	cmp	r3, r2
 801fc66:	d004      	beq.n	801fc72 <HAL_TIM_IC_Start_IT+0x1e2>
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	4a14      	ldr	r2, [pc, #80]	; (801fcc0 <HAL_TIM_IC_Start_IT+0x230>)
 801fc6e:	4293      	cmp	r3, r2
 801fc70:	d111      	bne.n	801fc96 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	689b      	ldr	r3, [r3, #8]
 801fc78:	f003 0307 	and.w	r3, r3, #7
 801fc7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fc7e:	68bb      	ldr	r3, [r7, #8]
 801fc80:	2b06      	cmp	r3, #6
 801fc82:	d010      	beq.n	801fca6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	681a      	ldr	r2, [r3, #0]
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	f042 0201 	orr.w	r2, r2, #1
 801fc92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fc94:	e007      	b.n	801fca6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	681a      	ldr	r2, [r3, #0]
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	f042 0201 	orr.w	r2, r2, #1
 801fca4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801fca6:	7bfb      	ldrb	r3, [r7, #15]
}
 801fca8:	4618      	mov	r0, r3
 801fcaa:	3710      	adds	r7, #16
 801fcac:	46bd      	mov	sp, r7
 801fcae:	bd80      	pop	{r7, pc}
 801fcb0:	40010000 	.word	0x40010000
 801fcb4:	40000400 	.word	0x40000400
 801fcb8:	40000800 	.word	0x40000800
 801fcbc:	40000c00 	.word	0x40000c00
 801fcc0:	40014000 	.word	0x40014000

0801fcc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801fcc4:	b580      	push	{r7, lr}
 801fcc6:	b082      	sub	sp, #8
 801fcc8:	af00      	add	r7, sp, #0
 801fcca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	691b      	ldr	r3, [r3, #16]
 801fcd2:	f003 0302 	and.w	r3, r3, #2
 801fcd6:	2b02      	cmp	r3, #2
 801fcd8:	d122      	bne.n	801fd20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	68db      	ldr	r3, [r3, #12]
 801fce0:	f003 0302 	and.w	r3, r3, #2
 801fce4:	2b02      	cmp	r3, #2
 801fce6:	d11b      	bne.n	801fd20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	f06f 0202 	mvn.w	r2, #2
 801fcf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801fcf2:	687b      	ldr	r3, [r7, #4]
 801fcf4:	2201      	movs	r2, #1
 801fcf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	699b      	ldr	r3, [r3, #24]
 801fcfe:	f003 0303 	and.w	r3, r3, #3
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d003      	beq.n	801fd0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801fd06:	6878      	ldr	r0, [r7, #4]
 801fd08:	f000 fa81 	bl	802020e <HAL_TIM_IC_CaptureCallback>
 801fd0c:	e005      	b.n	801fd1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801fd0e:	6878      	ldr	r0, [r7, #4]
 801fd10:	f000 fa73 	bl	80201fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fd14:	6878      	ldr	r0, [r7, #4]
 801fd16:	f000 fa84 	bl	8020222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	691b      	ldr	r3, [r3, #16]
 801fd26:	f003 0304 	and.w	r3, r3, #4
 801fd2a:	2b04      	cmp	r3, #4
 801fd2c:	d122      	bne.n	801fd74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	68db      	ldr	r3, [r3, #12]
 801fd34:	f003 0304 	and.w	r3, r3, #4
 801fd38:	2b04      	cmp	r3, #4
 801fd3a:	d11b      	bne.n	801fd74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	f06f 0204 	mvn.w	r2, #4
 801fd44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	2202      	movs	r2, #2
 801fd4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	699b      	ldr	r3, [r3, #24]
 801fd52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d003      	beq.n	801fd62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fd5a:	6878      	ldr	r0, [r7, #4]
 801fd5c:	f000 fa57 	bl	802020e <HAL_TIM_IC_CaptureCallback>
 801fd60:	e005      	b.n	801fd6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fd62:	6878      	ldr	r0, [r7, #4]
 801fd64:	f000 fa49 	bl	80201fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fd68:	6878      	ldr	r0, [r7, #4]
 801fd6a:	f000 fa5a 	bl	8020222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	2200      	movs	r2, #0
 801fd72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	691b      	ldr	r3, [r3, #16]
 801fd7a:	f003 0308 	and.w	r3, r3, #8
 801fd7e:	2b08      	cmp	r3, #8
 801fd80:	d122      	bne.n	801fdc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	68db      	ldr	r3, [r3, #12]
 801fd88:	f003 0308 	and.w	r3, r3, #8
 801fd8c:	2b08      	cmp	r3, #8
 801fd8e:	d11b      	bne.n	801fdc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	f06f 0208 	mvn.w	r2, #8
 801fd98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2204      	movs	r2, #4
 801fd9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	69db      	ldr	r3, [r3, #28]
 801fda6:	f003 0303 	and.w	r3, r3, #3
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d003      	beq.n	801fdb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fdae:	6878      	ldr	r0, [r7, #4]
 801fdb0:	f000 fa2d 	bl	802020e <HAL_TIM_IC_CaptureCallback>
 801fdb4:	e005      	b.n	801fdc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fdb6:	6878      	ldr	r0, [r7, #4]
 801fdb8:	f000 fa1f 	bl	80201fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fdbc:	6878      	ldr	r0, [r7, #4]
 801fdbe:	f000 fa30 	bl	8020222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	2200      	movs	r2, #0
 801fdc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	691b      	ldr	r3, [r3, #16]
 801fdce:	f003 0310 	and.w	r3, r3, #16
 801fdd2:	2b10      	cmp	r3, #16
 801fdd4:	d122      	bne.n	801fe1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	68db      	ldr	r3, [r3, #12]
 801fddc:	f003 0310 	and.w	r3, r3, #16
 801fde0:	2b10      	cmp	r3, #16
 801fde2:	d11b      	bne.n	801fe1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	f06f 0210 	mvn.w	r2, #16
 801fdec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	2208      	movs	r2, #8
 801fdf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	69db      	ldr	r3, [r3, #28]
 801fdfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d003      	beq.n	801fe0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fe02:	6878      	ldr	r0, [r7, #4]
 801fe04:	f000 fa03 	bl	802020e <HAL_TIM_IC_CaptureCallback>
 801fe08:	e005      	b.n	801fe16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fe0a:	6878      	ldr	r0, [r7, #4]
 801fe0c:	f000 f9f5 	bl	80201fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fe10:	6878      	ldr	r0, [r7, #4]
 801fe12:	f000 fa06 	bl	8020222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	2200      	movs	r2, #0
 801fe1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	691b      	ldr	r3, [r3, #16]
 801fe22:	f003 0301 	and.w	r3, r3, #1
 801fe26:	2b01      	cmp	r3, #1
 801fe28:	d10e      	bne.n	801fe48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	68db      	ldr	r3, [r3, #12]
 801fe30:	f003 0301 	and.w	r3, r3, #1
 801fe34:	2b01      	cmp	r3, #1
 801fe36:	d107      	bne.n	801fe48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	681b      	ldr	r3, [r3, #0]
 801fe3c:	f06f 0201 	mvn.w	r2, #1
 801fe40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801fe42:	6878      	ldr	r0, [r7, #4]
 801fe44:	f000 f9cf 	bl	80201e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	691b      	ldr	r3, [r3, #16]
 801fe4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe52:	2b80      	cmp	r3, #128	; 0x80
 801fe54:	d10e      	bne.n	801fe74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	68db      	ldr	r3, [r3, #12]
 801fe5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe60:	2b80      	cmp	r3, #128	; 0x80
 801fe62:	d107      	bne.n	801fe74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801fe6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801fe6e:	6878      	ldr	r0, [r7, #4]
 801fe70:	f000 fd30 	bl	80208d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	691b      	ldr	r3, [r3, #16]
 801fe7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe7e:	2b40      	cmp	r3, #64	; 0x40
 801fe80:	d10e      	bne.n	801fea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	681b      	ldr	r3, [r3, #0]
 801fe86:	68db      	ldr	r3, [r3, #12]
 801fe88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe8c:	2b40      	cmp	r3, #64	; 0x40
 801fe8e:	d107      	bne.n	801fea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801fe98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801fe9a:	6878      	ldr	r0, [r7, #4]
 801fe9c:	f000 f9cb 	bl	8020236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	681b      	ldr	r3, [r3, #0]
 801fea4:	691b      	ldr	r3, [r3, #16]
 801fea6:	f003 0320 	and.w	r3, r3, #32
 801feaa:	2b20      	cmp	r3, #32
 801feac:	d10e      	bne.n	801fecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	68db      	ldr	r3, [r3, #12]
 801feb4:	f003 0320 	and.w	r3, r3, #32
 801feb8:	2b20      	cmp	r3, #32
 801feba:	d107      	bne.n	801fecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	f06f 0220 	mvn.w	r2, #32
 801fec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801fec6:	6878      	ldr	r0, [r7, #4]
 801fec8:	f000 fcfa 	bl	80208c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801fecc:	bf00      	nop
 801fece:	3708      	adds	r7, #8
 801fed0:	46bd      	mov	sp, r7
 801fed2:	bd80      	pop	{r7, pc}

0801fed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801fed4:	b580      	push	{r7, lr}
 801fed6:	b086      	sub	sp, #24
 801fed8:	af00      	add	r7, sp, #0
 801feda:	60f8      	str	r0, [r7, #12]
 801fedc:	60b9      	str	r1, [r7, #8]
 801fede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fee0:	2300      	movs	r3, #0
 801fee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801feea:	2b01      	cmp	r3, #1
 801feec:	d101      	bne.n	801fef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801feee:	2302      	movs	r3, #2
 801fef0:	e0ae      	b.n	8020050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	2201      	movs	r2, #1
 801fef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	2b0c      	cmp	r3, #12
 801fefe:	f200 809f 	bhi.w	8020040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801ff02:	a201      	add	r2, pc, #4	; (adr r2, 801ff08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801ff04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff08:	0801ff3d 	.word	0x0801ff3d
 801ff0c:	08020041 	.word	0x08020041
 801ff10:	08020041 	.word	0x08020041
 801ff14:	08020041 	.word	0x08020041
 801ff18:	0801ff7d 	.word	0x0801ff7d
 801ff1c:	08020041 	.word	0x08020041
 801ff20:	08020041 	.word	0x08020041
 801ff24:	08020041 	.word	0x08020041
 801ff28:	0801ffbf 	.word	0x0801ffbf
 801ff2c:	08020041 	.word	0x08020041
 801ff30:	08020041 	.word	0x08020041
 801ff34:	08020041 	.word	0x08020041
 801ff38:	0801ffff 	.word	0x0801ffff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	68b9      	ldr	r1, [r7, #8]
 801ff42:	4618      	mov	r0, r3
 801ff44:	f000 fa02 	bl	802034c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ff48:	68fb      	ldr	r3, [r7, #12]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	699a      	ldr	r2, [r3, #24]
 801ff4e:	68fb      	ldr	r3, [r7, #12]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	f042 0208 	orr.w	r2, r2, #8
 801ff56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	699a      	ldr	r2, [r3, #24]
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	f022 0204 	bic.w	r2, r2, #4
 801ff66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ff68:	68fb      	ldr	r3, [r7, #12]
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	6999      	ldr	r1, [r3, #24]
 801ff6e:	68bb      	ldr	r3, [r7, #8]
 801ff70:	691a      	ldr	r2, [r3, #16]
 801ff72:	68fb      	ldr	r3, [r7, #12]
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	430a      	orrs	r2, r1
 801ff78:	619a      	str	r2, [r3, #24]
      break;
 801ff7a:	e064      	b.n	8020046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ff7c:	68fb      	ldr	r3, [r7, #12]
 801ff7e:	681b      	ldr	r3, [r3, #0]
 801ff80:	68b9      	ldr	r1, [r7, #8]
 801ff82:	4618      	mov	r0, r3
 801ff84:	f000 fa48 	bl	8020418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	699a      	ldr	r2, [r3, #24]
 801ff8e:	68fb      	ldr	r3, [r7, #12]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ff96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	699a      	ldr	r2, [r3, #24]
 801ff9e:	68fb      	ldr	r3, [r7, #12]
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ffa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ffa8:	68fb      	ldr	r3, [r7, #12]
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	6999      	ldr	r1, [r3, #24]
 801ffae:	68bb      	ldr	r3, [r7, #8]
 801ffb0:	691b      	ldr	r3, [r3, #16]
 801ffb2:	021a      	lsls	r2, r3, #8
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	430a      	orrs	r2, r1
 801ffba:	619a      	str	r2, [r3, #24]
      break;
 801ffbc:	e043      	b.n	8020046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ffbe:	68fb      	ldr	r3, [r7, #12]
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	68b9      	ldr	r1, [r7, #8]
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	f000 fa93 	bl	80204f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	69da      	ldr	r2, [r3, #28]
 801ffd0:	68fb      	ldr	r3, [r7, #12]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	f042 0208 	orr.w	r2, r2, #8
 801ffd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	69da      	ldr	r2, [r3, #28]
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	f022 0204 	bic.w	r2, r2, #4
 801ffe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	69d9      	ldr	r1, [r3, #28]
 801fff0:	68bb      	ldr	r3, [r7, #8]
 801fff2:	691a      	ldr	r2, [r3, #16]
 801fff4:	68fb      	ldr	r3, [r7, #12]
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	430a      	orrs	r2, r1
 801fffa:	61da      	str	r2, [r3, #28]
      break;
 801fffc:	e023      	b.n	8020046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	68b9      	ldr	r1, [r7, #8]
 8020004:	4618      	mov	r0, r3
 8020006:	f000 fadd 	bl	80205c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802000a:	68fb      	ldr	r3, [r7, #12]
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	69da      	ldr	r2, [r3, #28]
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	681b      	ldr	r3, [r3, #0]
 8020014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802001a:	68fb      	ldr	r3, [r7, #12]
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	69da      	ldr	r2, [r3, #28]
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	69d9      	ldr	r1, [r3, #28]
 8020030:	68bb      	ldr	r3, [r7, #8]
 8020032:	691b      	ldr	r3, [r3, #16]
 8020034:	021a      	lsls	r2, r3, #8
 8020036:	68fb      	ldr	r3, [r7, #12]
 8020038:	681b      	ldr	r3, [r3, #0]
 802003a:	430a      	orrs	r2, r1
 802003c:	61da      	str	r2, [r3, #28]
      break;
 802003e:	e002      	b.n	8020046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8020040:	2301      	movs	r3, #1
 8020042:	75fb      	strb	r3, [r7, #23]
      break;
 8020044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	2200      	movs	r2, #0
 802004a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802004e:	7dfb      	ldrb	r3, [r7, #23]
}
 8020050:	4618      	mov	r0, r3
 8020052:	3718      	adds	r7, #24
 8020054:	46bd      	mov	sp, r7
 8020056:	bd80      	pop	{r7, pc}

08020058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020058:	b580      	push	{r7, lr}
 802005a:	b084      	sub	sp, #16
 802005c:	af00      	add	r7, sp, #0
 802005e:	6078      	str	r0, [r7, #4]
 8020060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020062:	2300      	movs	r3, #0
 8020064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802006c:	2b01      	cmp	r3, #1
 802006e:	d101      	bne.n	8020074 <HAL_TIM_ConfigClockSource+0x1c>
 8020070:	2302      	movs	r3, #2
 8020072:	e0b4      	b.n	80201de <HAL_TIM_ConfigClockSource+0x186>
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	2201      	movs	r2, #1
 8020078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	2202      	movs	r2, #2
 8020080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	689b      	ldr	r3, [r3, #8]
 802008a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802008c:	68bb      	ldr	r3, [r7, #8]
 802008e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8020092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020094:	68bb      	ldr	r3, [r7, #8]
 8020096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802009a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	68ba      	ldr	r2, [r7, #8]
 80200a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80200a4:	683b      	ldr	r3, [r7, #0]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80200ac:	d03e      	beq.n	802012c <HAL_TIM_ConfigClockSource+0xd4>
 80200ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80200b2:	f200 8087 	bhi.w	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80200ba:	f000 8086 	beq.w	80201ca <HAL_TIM_ConfigClockSource+0x172>
 80200be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80200c2:	d87f      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200c4:	2b70      	cmp	r3, #112	; 0x70
 80200c6:	d01a      	beq.n	80200fe <HAL_TIM_ConfigClockSource+0xa6>
 80200c8:	2b70      	cmp	r3, #112	; 0x70
 80200ca:	d87b      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200cc:	2b60      	cmp	r3, #96	; 0x60
 80200ce:	d050      	beq.n	8020172 <HAL_TIM_ConfigClockSource+0x11a>
 80200d0:	2b60      	cmp	r3, #96	; 0x60
 80200d2:	d877      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200d4:	2b50      	cmp	r3, #80	; 0x50
 80200d6:	d03c      	beq.n	8020152 <HAL_TIM_ConfigClockSource+0xfa>
 80200d8:	2b50      	cmp	r3, #80	; 0x50
 80200da:	d873      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200dc:	2b40      	cmp	r3, #64	; 0x40
 80200de:	d058      	beq.n	8020192 <HAL_TIM_ConfigClockSource+0x13a>
 80200e0:	2b40      	cmp	r3, #64	; 0x40
 80200e2:	d86f      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200e4:	2b30      	cmp	r3, #48	; 0x30
 80200e6:	d064      	beq.n	80201b2 <HAL_TIM_ConfigClockSource+0x15a>
 80200e8:	2b30      	cmp	r3, #48	; 0x30
 80200ea:	d86b      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200ec:	2b20      	cmp	r3, #32
 80200ee:	d060      	beq.n	80201b2 <HAL_TIM_ConfigClockSource+0x15a>
 80200f0:	2b20      	cmp	r3, #32
 80200f2:	d867      	bhi.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d05c      	beq.n	80201b2 <HAL_TIM_ConfigClockSource+0x15a>
 80200f8:	2b10      	cmp	r3, #16
 80200fa:	d05a      	beq.n	80201b2 <HAL_TIM_ConfigClockSource+0x15a>
 80200fc:	e062      	b.n	80201c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	6818      	ldr	r0, [r3, #0]
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	6899      	ldr	r1, [r3, #8]
 8020106:	683b      	ldr	r3, [r7, #0]
 8020108:	685a      	ldr	r2, [r3, #4]
 802010a:	683b      	ldr	r3, [r7, #0]
 802010c:	68db      	ldr	r3, [r3, #12]
 802010e:	f000 fb23 	bl	8020758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	689b      	ldr	r3, [r3, #8]
 8020118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802011a:	68bb      	ldr	r3, [r7, #8]
 802011c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	68ba      	ldr	r2, [r7, #8]
 8020128:	609a      	str	r2, [r3, #8]
      break;
 802012a:	e04f      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	6818      	ldr	r0, [r3, #0]
 8020130:	683b      	ldr	r3, [r7, #0]
 8020132:	6899      	ldr	r1, [r3, #8]
 8020134:	683b      	ldr	r3, [r7, #0]
 8020136:	685a      	ldr	r2, [r3, #4]
 8020138:	683b      	ldr	r3, [r7, #0]
 802013a:	68db      	ldr	r3, [r3, #12]
 802013c:	f000 fb0c 	bl	8020758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	689a      	ldr	r2, [r3, #8]
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802014e:	609a      	str	r2, [r3, #8]
      break;
 8020150:	e03c      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	6818      	ldr	r0, [r3, #0]
 8020156:	683b      	ldr	r3, [r7, #0]
 8020158:	6859      	ldr	r1, [r3, #4]
 802015a:	683b      	ldr	r3, [r7, #0]
 802015c:	68db      	ldr	r3, [r3, #12]
 802015e:	461a      	mov	r2, r3
 8020160:	f000 fa80 	bl	8020664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	2150      	movs	r1, #80	; 0x50
 802016a:	4618      	mov	r0, r3
 802016c:	f000 fad9 	bl	8020722 <TIM_ITRx_SetConfig>
      break;
 8020170:	e02c      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	6818      	ldr	r0, [r3, #0]
 8020176:	683b      	ldr	r3, [r7, #0]
 8020178:	6859      	ldr	r1, [r3, #4]
 802017a:	683b      	ldr	r3, [r7, #0]
 802017c:	68db      	ldr	r3, [r3, #12]
 802017e:	461a      	mov	r2, r3
 8020180:	f000 fa9f 	bl	80206c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	2160      	movs	r1, #96	; 0x60
 802018a:	4618      	mov	r0, r3
 802018c:	f000 fac9 	bl	8020722 <TIM_ITRx_SetConfig>
      break;
 8020190:	e01c      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	6818      	ldr	r0, [r3, #0]
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	6859      	ldr	r1, [r3, #4]
 802019a:	683b      	ldr	r3, [r7, #0]
 802019c:	68db      	ldr	r3, [r3, #12]
 802019e:	461a      	mov	r2, r3
 80201a0:	f000 fa60 	bl	8020664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	2140      	movs	r1, #64	; 0x40
 80201aa:	4618      	mov	r0, r3
 80201ac:	f000 fab9 	bl	8020722 <TIM_ITRx_SetConfig>
      break;
 80201b0:	e00c      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	681a      	ldr	r2, [r3, #0]
 80201b6:	683b      	ldr	r3, [r7, #0]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	4619      	mov	r1, r3
 80201bc:	4610      	mov	r0, r2
 80201be:	f000 fab0 	bl	8020722 <TIM_ITRx_SetConfig>
      break;
 80201c2:	e003      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80201c4:	2301      	movs	r3, #1
 80201c6:	73fb      	strb	r3, [r7, #15]
      break;
 80201c8:	e000      	b.n	80201cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80201ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	2201      	movs	r2, #1
 80201d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	2200      	movs	r2, #0
 80201d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80201dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80201de:	4618      	mov	r0, r3
 80201e0:	3710      	adds	r7, #16
 80201e2:	46bd      	mov	sp, r7
 80201e4:	bd80      	pop	{r7, pc}

080201e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80201e6:	b480      	push	{r7}
 80201e8:	b083      	sub	sp, #12
 80201ea:	af00      	add	r7, sp, #0
 80201ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80201ee:	bf00      	nop
 80201f0:	370c      	adds	r7, #12
 80201f2:	46bd      	mov	sp, r7
 80201f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201f8:	4770      	bx	lr

080201fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80201fa:	b480      	push	{r7}
 80201fc:	b083      	sub	sp, #12
 80201fe:	af00      	add	r7, sp, #0
 8020200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020202:	bf00      	nop
 8020204:	370c      	adds	r7, #12
 8020206:	46bd      	mov	sp, r7
 8020208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802020c:	4770      	bx	lr

0802020e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802020e:	b480      	push	{r7}
 8020210:	b083      	sub	sp, #12
 8020212:	af00      	add	r7, sp, #0
 8020214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8020216:	bf00      	nop
 8020218:	370c      	adds	r7, #12
 802021a:	46bd      	mov	sp, r7
 802021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020220:	4770      	bx	lr

08020222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8020222:	b480      	push	{r7}
 8020224:	b083      	sub	sp, #12
 8020226:	af00      	add	r7, sp, #0
 8020228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802022a:	bf00      	nop
 802022c:	370c      	adds	r7, #12
 802022e:	46bd      	mov	sp, r7
 8020230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020234:	4770      	bx	lr

08020236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020236:	b480      	push	{r7}
 8020238:	b083      	sub	sp, #12
 802023a:	af00      	add	r7, sp, #0
 802023c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802023e:	bf00      	nop
 8020240:	370c      	adds	r7, #12
 8020242:	46bd      	mov	sp, r7
 8020244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020248:	4770      	bx	lr
	...

0802024c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802024c:	b480      	push	{r7}
 802024e:	b085      	sub	sp, #20
 8020250:	af00      	add	r7, sp, #0
 8020252:	6078      	str	r0, [r7, #4]
 8020254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	4a34      	ldr	r2, [pc, #208]	; (8020330 <TIM_Base_SetConfig+0xe4>)
 8020260:	4293      	cmp	r3, r2
 8020262:	d00f      	beq.n	8020284 <TIM_Base_SetConfig+0x38>
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802026a:	d00b      	beq.n	8020284 <TIM_Base_SetConfig+0x38>
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	4a31      	ldr	r2, [pc, #196]	; (8020334 <TIM_Base_SetConfig+0xe8>)
 8020270:	4293      	cmp	r3, r2
 8020272:	d007      	beq.n	8020284 <TIM_Base_SetConfig+0x38>
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	4a30      	ldr	r2, [pc, #192]	; (8020338 <TIM_Base_SetConfig+0xec>)
 8020278:	4293      	cmp	r3, r2
 802027a:	d003      	beq.n	8020284 <TIM_Base_SetConfig+0x38>
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	4a2f      	ldr	r2, [pc, #188]	; (802033c <TIM_Base_SetConfig+0xf0>)
 8020280:	4293      	cmp	r3, r2
 8020282:	d108      	bne.n	8020296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020284:	68fb      	ldr	r3, [r7, #12]
 8020286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802028a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802028c:	683b      	ldr	r3, [r7, #0]
 802028e:	685b      	ldr	r3, [r3, #4]
 8020290:	68fa      	ldr	r2, [r7, #12]
 8020292:	4313      	orrs	r3, r2
 8020294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	4a25      	ldr	r2, [pc, #148]	; (8020330 <TIM_Base_SetConfig+0xe4>)
 802029a:	4293      	cmp	r3, r2
 802029c:	d01b      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80202a4:	d017      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	4a22      	ldr	r2, [pc, #136]	; (8020334 <TIM_Base_SetConfig+0xe8>)
 80202aa:	4293      	cmp	r3, r2
 80202ac:	d013      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	4a21      	ldr	r2, [pc, #132]	; (8020338 <TIM_Base_SetConfig+0xec>)
 80202b2:	4293      	cmp	r3, r2
 80202b4:	d00f      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	4a20      	ldr	r2, [pc, #128]	; (802033c <TIM_Base_SetConfig+0xf0>)
 80202ba:	4293      	cmp	r3, r2
 80202bc:	d00b      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	4a1f      	ldr	r2, [pc, #124]	; (8020340 <TIM_Base_SetConfig+0xf4>)
 80202c2:	4293      	cmp	r3, r2
 80202c4:	d007      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	4a1e      	ldr	r2, [pc, #120]	; (8020344 <TIM_Base_SetConfig+0xf8>)
 80202ca:	4293      	cmp	r3, r2
 80202cc:	d003      	beq.n	80202d6 <TIM_Base_SetConfig+0x8a>
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	4a1d      	ldr	r2, [pc, #116]	; (8020348 <TIM_Base_SetConfig+0xfc>)
 80202d2:	4293      	cmp	r3, r2
 80202d4:	d108      	bne.n	80202e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80202dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	68db      	ldr	r3, [r3, #12]
 80202e2:	68fa      	ldr	r2, [r7, #12]
 80202e4:	4313      	orrs	r3, r2
 80202e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80202e8:	68fb      	ldr	r3, [r7, #12]
 80202ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80202ee:	683b      	ldr	r3, [r7, #0]
 80202f0:	695b      	ldr	r3, [r3, #20]
 80202f2:	4313      	orrs	r3, r2
 80202f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	68fa      	ldr	r2, [r7, #12]
 80202fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	689a      	ldr	r2, [r3, #8]
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	681a      	ldr	r2, [r3, #0]
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	4a08      	ldr	r2, [pc, #32]	; (8020330 <TIM_Base_SetConfig+0xe4>)
 8020310:	4293      	cmp	r3, r2
 8020312:	d103      	bne.n	802031c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020314:	683b      	ldr	r3, [r7, #0]
 8020316:	691a      	ldr	r2, [r3, #16]
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	2201      	movs	r2, #1
 8020320:	615a      	str	r2, [r3, #20]
}
 8020322:	bf00      	nop
 8020324:	3714      	adds	r7, #20
 8020326:	46bd      	mov	sp, r7
 8020328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802032c:	4770      	bx	lr
 802032e:	bf00      	nop
 8020330:	40010000 	.word	0x40010000
 8020334:	40000400 	.word	0x40000400
 8020338:	40000800 	.word	0x40000800
 802033c:	40000c00 	.word	0x40000c00
 8020340:	40014000 	.word	0x40014000
 8020344:	40014400 	.word	0x40014400
 8020348:	40014800 	.word	0x40014800

0802034c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802034c:	b480      	push	{r7}
 802034e:	b087      	sub	sp, #28
 8020350:	af00      	add	r7, sp, #0
 8020352:	6078      	str	r0, [r7, #4]
 8020354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	6a1b      	ldr	r3, [r3, #32]
 802035a:	f023 0201 	bic.w	r2, r3, #1
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	6a1b      	ldr	r3, [r3, #32]
 8020366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	685b      	ldr	r3, [r3, #4]
 802036c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	699b      	ldr	r3, [r3, #24]
 8020372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802037a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	f023 0303 	bic.w	r3, r3, #3
 8020382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020384:	683b      	ldr	r3, [r7, #0]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	68fa      	ldr	r2, [r7, #12]
 802038a:	4313      	orrs	r3, r2
 802038c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802038e:	697b      	ldr	r3, [r7, #20]
 8020390:	f023 0302 	bic.w	r3, r3, #2
 8020394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020396:	683b      	ldr	r3, [r7, #0]
 8020398:	689b      	ldr	r3, [r3, #8]
 802039a:	697a      	ldr	r2, [r7, #20]
 802039c:	4313      	orrs	r3, r2
 802039e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	4a1c      	ldr	r2, [pc, #112]	; (8020414 <TIM_OC1_SetConfig+0xc8>)
 80203a4:	4293      	cmp	r3, r2
 80203a6:	d10c      	bne.n	80203c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80203a8:	697b      	ldr	r3, [r7, #20]
 80203aa:	f023 0308 	bic.w	r3, r3, #8
 80203ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80203b0:	683b      	ldr	r3, [r7, #0]
 80203b2:	68db      	ldr	r3, [r3, #12]
 80203b4:	697a      	ldr	r2, [r7, #20]
 80203b6:	4313      	orrs	r3, r2
 80203b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	f023 0304 	bic.w	r3, r3, #4
 80203c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	4a13      	ldr	r2, [pc, #76]	; (8020414 <TIM_OC1_SetConfig+0xc8>)
 80203c6:	4293      	cmp	r3, r2
 80203c8:	d111      	bne.n	80203ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80203ca:	693b      	ldr	r3, [r7, #16]
 80203cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80203d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80203d2:	693b      	ldr	r3, [r7, #16]
 80203d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80203d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80203da:	683b      	ldr	r3, [r7, #0]
 80203dc:	695b      	ldr	r3, [r3, #20]
 80203de:	693a      	ldr	r2, [r7, #16]
 80203e0:	4313      	orrs	r3, r2
 80203e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80203e4:	683b      	ldr	r3, [r7, #0]
 80203e6:	699b      	ldr	r3, [r3, #24]
 80203e8:	693a      	ldr	r2, [r7, #16]
 80203ea:	4313      	orrs	r3, r2
 80203ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	693a      	ldr	r2, [r7, #16]
 80203f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	68fa      	ldr	r2, [r7, #12]
 80203f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80203fa:	683b      	ldr	r3, [r7, #0]
 80203fc:	685a      	ldr	r2, [r3, #4]
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	697a      	ldr	r2, [r7, #20]
 8020406:	621a      	str	r2, [r3, #32]
}
 8020408:	bf00      	nop
 802040a:	371c      	adds	r7, #28
 802040c:	46bd      	mov	sp, r7
 802040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020412:	4770      	bx	lr
 8020414:	40010000 	.word	0x40010000

08020418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020418:	b480      	push	{r7}
 802041a:	b087      	sub	sp, #28
 802041c:	af00      	add	r7, sp, #0
 802041e:	6078      	str	r0, [r7, #4]
 8020420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	6a1b      	ldr	r3, [r3, #32]
 8020426:	f023 0210 	bic.w	r2, r3, #16
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	6a1b      	ldr	r3, [r3, #32]
 8020432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	685b      	ldr	r3, [r3, #4]
 8020438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802043a:	687b      	ldr	r3, [r7, #4]
 802043c:	699b      	ldr	r3, [r3, #24]
 802043e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020448:	68fb      	ldr	r3, [r7, #12]
 802044a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802044e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020450:	683b      	ldr	r3, [r7, #0]
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	021b      	lsls	r3, r3, #8
 8020456:	68fa      	ldr	r2, [r7, #12]
 8020458:	4313      	orrs	r3, r2
 802045a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802045c:	697b      	ldr	r3, [r7, #20]
 802045e:	f023 0320 	bic.w	r3, r3, #32
 8020462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020464:	683b      	ldr	r3, [r7, #0]
 8020466:	689b      	ldr	r3, [r3, #8]
 8020468:	011b      	lsls	r3, r3, #4
 802046a:	697a      	ldr	r2, [r7, #20]
 802046c:	4313      	orrs	r3, r2
 802046e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	4a1e      	ldr	r2, [pc, #120]	; (80204ec <TIM_OC2_SetConfig+0xd4>)
 8020474:	4293      	cmp	r3, r2
 8020476:	d10d      	bne.n	8020494 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020478:	697b      	ldr	r3, [r7, #20]
 802047a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802047e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020480:	683b      	ldr	r3, [r7, #0]
 8020482:	68db      	ldr	r3, [r3, #12]
 8020484:	011b      	lsls	r3, r3, #4
 8020486:	697a      	ldr	r2, [r7, #20]
 8020488:	4313      	orrs	r3, r2
 802048a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802048c:	697b      	ldr	r3, [r7, #20]
 802048e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	4a15      	ldr	r2, [pc, #84]	; (80204ec <TIM_OC2_SetConfig+0xd4>)
 8020498:	4293      	cmp	r3, r2
 802049a:	d113      	bne.n	80204c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802049c:	693b      	ldr	r3, [r7, #16]
 802049e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80204a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80204a4:	693b      	ldr	r3, [r7, #16]
 80204a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80204aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80204ac:	683b      	ldr	r3, [r7, #0]
 80204ae:	695b      	ldr	r3, [r3, #20]
 80204b0:	009b      	lsls	r3, r3, #2
 80204b2:	693a      	ldr	r2, [r7, #16]
 80204b4:	4313      	orrs	r3, r2
 80204b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	699b      	ldr	r3, [r3, #24]
 80204bc:	009b      	lsls	r3, r3, #2
 80204be:	693a      	ldr	r2, [r7, #16]
 80204c0:	4313      	orrs	r3, r2
 80204c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	693a      	ldr	r2, [r7, #16]
 80204c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	68fa      	ldr	r2, [r7, #12]
 80204ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80204d0:	683b      	ldr	r3, [r7, #0]
 80204d2:	685a      	ldr	r2, [r3, #4]
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	697a      	ldr	r2, [r7, #20]
 80204dc:	621a      	str	r2, [r3, #32]
}
 80204de:	bf00      	nop
 80204e0:	371c      	adds	r7, #28
 80204e2:	46bd      	mov	sp, r7
 80204e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e8:	4770      	bx	lr
 80204ea:	bf00      	nop
 80204ec:	40010000 	.word	0x40010000

080204f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80204f0:	b480      	push	{r7}
 80204f2:	b087      	sub	sp, #28
 80204f4:	af00      	add	r7, sp, #0
 80204f6:	6078      	str	r0, [r7, #4]
 80204f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	6a1b      	ldr	r3, [r3, #32]
 80204fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	6a1b      	ldr	r3, [r3, #32]
 802050a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	685b      	ldr	r3, [r3, #4]
 8020510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	69db      	ldr	r3, [r3, #28]
 8020516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020518:	68fb      	ldr	r3, [r7, #12]
 802051a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802051e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020520:	68fb      	ldr	r3, [r7, #12]
 8020522:	f023 0303 	bic.w	r3, r3, #3
 8020526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020528:	683b      	ldr	r3, [r7, #0]
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	68fa      	ldr	r2, [r7, #12]
 802052e:	4313      	orrs	r3, r2
 8020530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020532:	697b      	ldr	r3, [r7, #20]
 8020534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802053a:	683b      	ldr	r3, [r7, #0]
 802053c:	689b      	ldr	r3, [r3, #8]
 802053e:	021b      	lsls	r3, r3, #8
 8020540:	697a      	ldr	r2, [r7, #20]
 8020542:	4313      	orrs	r3, r2
 8020544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020546:	687b      	ldr	r3, [r7, #4]
 8020548:	4a1d      	ldr	r2, [pc, #116]	; (80205c0 <TIM_OC3_SetConfig+0xd0>)
 802054a:	4293      	cmp	r3, r2
 802054c:	d10d      	bne.n	802056a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802054e:	697b      	ldr	r3, [r7, #20]
 8020550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020556:	683b      	ldr	r3, [r7, #0]
 8020558:	68db      	ldr	r3, [r3, #12]
 802055a:	021b      	lsls	r3, r3, #8
 802055c:	697a      	ldr	r2, [r7, #20]
 802055e:	4313      	orrs	r3, r2
 8020560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020562:	697b      	ldr	r3, [r7, #20]
 8020564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	4a14      	ldr	r2, [pc, #80]	; (80205c0 <TIM_OC3_SetConfig+0xd0>)
 802056e:	4293      	cmp	r3, r2
 8020570:	d113      	bne.n	802059a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020572:	693b      	ldr	r3, [r7, #16]
 8020574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802057a:	693b      	ldr	r3, [r7, #16]
 802057c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020582:	683b      	ldr	r3, [r7, #0]
 8020584:	695b      	ldr	r3, [r3, #20]
 8020586:	011b      	lsls	r3, r3, #4
 8020588:	693a      	ldr	r2, [r7, #16]
 802058a:	4313      	orrs	r3, r2
 802058c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802058e:	683b      	ldr	r3, [r7, #0]
 8020590:	699b      	ldr	r3, [r3, #24]
 8020592:	011b      	lsls	r3, r3, #4
 8020594:	693a      	ldr	r2, [r7, #16]
 8020596:	4313      	orrs	r3, r2
 8020598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	693a      	ldr	r2, [r7, #16]
 802059e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	68fa      	ldr	r2, [r7, #12]
 80205a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80205a6:	683b      	ldr	r3, [r7, #0]
 80205a8:	685a      	ldr	r2, [r3, #4]
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	697a      	ldr	r2, [r7, #20]
 80205b2:	621a      	str	r2, [r3, #32]
}
 80205b4:	bf00      	nop
 80205b6:	371c      	adds	r7, #28
 80205b8:	46bd      	mov	sp, r7
 80205ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205be:	4770      	bx	lr
 80205c0:	40010000 	.word	0x40010000

080205c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80205c4:	b480      	push	{r7}
 80205c6:	b087      	sub	sp, #28
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	6078      	str	r0, [r7, #4]
 80205cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	6a1b      	ldr	r3, [r3, #32]
 80205d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	6a1b      	ldr	r3, [r3, #32]
 80205de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	685b      	ldr	r3, [r3, #4]
 80205e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	69db      	ldr	r3, [r3, #28]
 80205ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80205f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80205f4:	68fb      	ldr	r3, [r7, #12]
 80205f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80205fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	021b      	lsls	r3, r3, #8
 8020602:	68fa      	ldr	r2, [r7, #12]
 8020604:	4313      	orrs	r3, r2
 8020606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020608:	693b      	ldr	r3, [r7, #16]
 802060a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802060e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020610:	683b      	ldr	r3, [r7, #0]
 8020612:	689b      	ldr	r3, [r3, #8]
 8020614:	031b      	lsls	r3, r3, #12
 8020616:	693a      	ldr	r2, [r7, #16]
 8020618:	4313      	orrs	r3, r2
 802061a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	4a10      	ldr	r2, [pc, #64]	; (8020660 <TIM_OC4_SetConfig+0x9c>)
 8020620:	4293      	cmp	r3, r2
 8020622:	d109      	bne.n	8020638 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020624:	697b      	ldr	r3, [r7, #20]
 8020626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802062a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	695b      	ldr	r3, [r3, #20]
 8020630:	019b      	lsls	r3, r3, #6
 8020632:	697a      	ldr	r2, [r7, #20]
 8020634:	4313      	orrs	r3, r2
 8020636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	697a      	ldr	r2, [r7, #20]
 802063c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	68fa      	ldr	r2, [r7, #12]
 8020642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020644:	683b      	ldr	r3, [r7, #0]
 8020646:	685a      	ldr	r2, [r3, #4]
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	693a      	ldr	r2, [r7, #16]
 8020650:	621a      	str	r2, [r3, #32]
}
 8020652:	bf00      	nop
 8020654:	371c      	adds	r7, #28
 8020656:	46bd      	mov	sp, r7
 8020658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065c:	4770      	bx	lr
 802065e:	bf00      	nop
 8020660:	40010000 	.word	0x40010000

08020664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020664:	b480      	push	{r7}
 8020666:	b087      	sub	sp, #28
 8020668:	af00      	add	r7, sp, #0
 802066a:	60f8      	str	r0, [r7, #12]
 802066c:	60b9      	str	r1, [r7, #8]
 802066e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	6a1b      	ldr	r3, [r3, #32]
 8020674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	6a1b      	ldr	r3, [r3, #32]
 802067a:	f023 0201 	bic.w	r2, r3, #1
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	699b      	ldr	r3, [r3, #24]
 8020686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020688:	693b      	ldr	r3, [r7, #16]
 802068a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802068e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	011b      	lsls	r3, r3, #4
 8020694:	693a      	ldr	r2, [r7, #16]
 8020696:	4313      	orrs	r3, r2
 8020698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802069a:	697b      	ldr	r3, [r7, #20]
 802069c:	f023 030a 	bic.w	r3, r3, #10
 80206a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80206a2:	697a      	ldr	r2, [r7, #20]
 80206a4:	68bb      	ldr	r3, [r7, #8]
 80206a6:	4313      	orrs	r3, r2
 80206a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80206aa:	68fb      	ldr	r3, [r7, #12]
 80206ac:	693a      	ldr	r2, [r7, #16]
 80206ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	697a      	ldr	r2, [r7, #20]
 80206b4:	621a      	str	r2, [r3, #32]
}
 80206b6:	bf00      	nop
 80206b8:	371c      	adds	r7, #28
 80206ba:	46bd      	mov	sp, r7
 80206bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206c0:	4770      	bx	lr

080206c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80206c2:	b480      	push	{r7}
 80206c4:	b087      	sub	sp, #28
 80206c6:	af00      	add	r7, sp, #0
 80206c8:	60f8      	str	r0, [r7, #12]
 80206ca:	60b9      	str	r1, [r7, #8]
 80206cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80206ce:	68fb      	ldr	r3, [r7, #12]
 80206d0:	6a1b      	ldr	r3, [r3, #32]
 80206d2:	f023 0210 	bic.w	r2, r3, #16
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	699b      	ldr	r3, [r3, #24]
 80206de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	6a1b      	ldr	r3, [r3, #32]
 80206e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80206ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80206ee:	687b      	ldr	r3, [r7, #4]
 80206f0:	031b      	lsls	r3, r3, #12
 80206f2:	697a      	ldr	r2, [r7, #20]
 80206f4:	4313      	orrs	r3, r2
 80206f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80206f8:	693b      	ldr	r3, [r7, #16]
 80206fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80206fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020700:	68bb      	ldr	r3, [r7, #8]
 8020702:	011b      	lsls	r3, r3, #4
 8020704:	693a      	ldr	r2, [r7, #16]
 8020706:	4313      	orrs	r3, r2
 8020708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	697a      	ldr	r2, [r7, #20]
 802070e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	693a      	ldr	r2, [r7, #16]
 8020714:	621a      	str	r2, [r3, #32]
}
 8020716:	bf00      	nop
 8020718:	371c      	adds	r7, #28
 802071a:	46bd      	mov	sp, r7
 802071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020720:	4770      	bx	lr

08020722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020722:	b480      	push	{r7}
 8020724:	b085      	sub	sp, #20
 8020726:	af00      	add	r7, sp, #0
 8020728:	6078      	str	r0, [r7, #4]
 802072a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	689b      	ldr	r3, [r3, #8]
 8020730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802073a:	683a      	ldr	r2, [r7, #0]
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	4313      	orrs	r3, r2
 8020740:	f043 0307 	orr.w	r3, r3, #7
 8020744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	68fa      	ldr	r2, [r7, #12]
 802074a:	609a      	str	r2, [r3, #8]
}
 802074c:	bf00      	nop
 802074e:	3714      	adds	r7, #20
 8020750:	46bd      	mov	sp, r7
 8020752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020756:	4770      	bx	lr

08020758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020758:	b480      	push	{r7}
 802075a:	b087      	sub	sp, #28
 802075c:	af00      	add	r7, sp, #0
 802075e:	60f8      	str	r0, [r7, #12]
 8020760:	60b9      	str	r1, [r7, #8]
 8020762:	607a      	str	r2, [r7, #4]
 8020764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	689b      	ldr	r3, [r3, #8]
 802076a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802076c:	697b      	ldr	r3, [r7, #20]
 802076e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020774:	683b      	ldr	r3, [r7, #0]
 8020776:	021a      	lsls	r2, r3, #8
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	431a      	orrs	r2, r3
 802077c:	68bb      	ldr	r3, [r7, #8]
 802077e:	4313      	orrs	r3, r2
 8020780:	697a      	ldr	r2, [r7, #20]
 8020782:	4313      	orrs	r3, r2
 8020784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020786:	68fb      	ldr	r3, [r7, #12]
 8020788:	697a      	ldr	r2, [r7, #20]
 802078a:	609a      	str	r2, [r3, #8]
}
 802078c:	bf00      	nop
 802078e:	371c      	adds	r7, #28
 8020790:	46bd      	mov	sp, r7
 8020792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020796:	4770      	bx	lr

08020798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020798:	b480      	push	{r7}
 802079a:	b087      	sub	sp, #28
 802079c:	af00      	add	r7, sp, #0
 802079e:	60f8      	str	r0, [r7, #12]
 80207a0:	60b9      	str	r1, [r7, #8]
 80207a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80207a4:	68bb      	ldr	r3, [r7, #8]
 80207a6:	f003 031f 	and.w	r3, r3, #31
 80207aa:	2201      	movs	r2, #1
 80207ac:	fa02 f303 	lsl.w	r3, r2, r3
 80207b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	6a1a      	ldr	r2, [r3, #32]
 80207b6:	697b      	ldr	r3, [r7, #20]
 80207b8:	43db      	mvns	r3, r3
 80207ba:	401a      	ands	r2, r3
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	6a1a      	ldr	r2, [r3, #32]
 80207c4:	68bb      	ldr	r3, [r7, #8]
 80207c6:	f003 031f 	and.w	r3, r3, #31
 80207ca:	6879      	ldr	r1, [r7, #4]
 80207cc:	fa01 f303 	lsl.w	r3, r1, r3
 80207d0:	431a      	orrs	r2, r3
 80207d2:	68fb      	ldr	r3, [r7, #12]
 80207d4:	621a      	str	r2, [r3, #32]
}
 80207d6:	bf00      	nop
 80207d8:	371c      	adds	r7, #28
 80207da:	46bd      	mov	sp, r7
 80207dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207e0:	4770      	bx	lr
	...

080207e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80207e4:	b480      	push	{r7}
 80207e6:	b085      	sub	sp, #20
 80207e8:	af00      	add	r7, sp, #0
 80207ea:	6078      	str	r0, [r7, #4]
 80207ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80207f4:	2b01      	cmp	r3, #1
 80207f6:	d101      	bne.n	80207fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80207f8:	2302      	movs	r3, #2
 80207fa:	e050      	b.n	802089e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	2201      	movs	r2, #1
 8020800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	2202      	movs	r2, #2
 8020808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	685b      	ldr	r3, [r3, #4]
 8020812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	689b      	ldr	r3, [r3, #8]
 802081a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802081c:	68fb      	ldr	r3, [r7, #12]
 802081e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020824:	683b      	ldr	r3, [r7, #0]
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	68fa      	ldr	r2, [r7, #12]
 802082a:	4313      	orrs	r3, r2
 802082c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	68fa      	ldr	r2, [r7, #12]
 8020834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	4a1c      	ldr	r2, [pc, #112]	; (80208ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 802083c:	4293      	cmp	r3, r2
 802083e:	d018      	beq.n	8020872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020848:	d013      	beq.n	8020872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	4a18      	ldr	r2, [pc, #96]	; (80208b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8020850:	4293      	cmp	r3, r2
 8020852:	d00e      	beq.n	8020872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	4a16      	ldr	r2, [pc, #88]	; (80208b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 802085a:	4293      	cmp	r3, r2
 802085c:	d009      	beq.n	8020872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	4a15      	ldr	r2, [pc, #84]	; (80208b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8020864:	4293      	cmp	r3, r2
 8020866:	d004      	beq.n	8020872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	4a13      	ldr	r2, [pc, #76]	; (80208bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 802086e:	4293      	cmp	r3, r2
 8020870:	d10c      	bne.n	802088c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020872:	68bb      	ldr	r3, [r7, #8]
 8020874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	685b      	ldr	r3, [r3, #4]
 802087e:	68ba      	ldr	r2, [r7, #8]
 8020880:	4313      	orrs	r3, r2
 8020882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	68ba      	ldr	r2, [r7, #8]
 802088a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	2201      	movs	r2, #1
 8020890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	2200      	movs	r2, #0
 8020898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802089c:	2300      	movs	r3, #0
}
 802089e:	4618      	mov	r0, r3
 80208a0:	3714      	adds	r7, #20
 80208a2:	46bd      	mov	sp, r7
 80208a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a8:	4770      	bx	lr
 80208aa:	bf00      	nop
 80208ac:	40010000 	.word	0x40010000
 80208b0:	40000400 	.word	0x40000400
 80208b4:	40000800 	.word	0x40000800
 80208b8:	40000c00 	.word	0x40000c00
 80208bc:	40014000 	.word	0x40014000

080208c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80208c0:	b480      	push	{r7}
 80208c2:	b083      	sub	sp, #12
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80208c8:	bf00      	nop
 80208ca:	370c      	adds	r7, #12
 80208cc:	46bd      	mov	sp, r7
 80208ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d2:	4770      	bx	lr

080208d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80208d4:	b480      	push	{r7}
 80208d6:	b083      	sub	sp, #12
 80208d8:	af00      	add	r7, sp, #0
 80208da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80208dc:	bf00      	nop
 80208de:	370c      	adds	r7, #12
 80208e0:	46bd      	mov	sp, r7
 80208e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208e6:	4770      	bx	lr

080208e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	b082      	sub	sp, #8
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d101      	bne.n	80208fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80208f6:	2301      	movs	r3, #1
 80208f8:	e03f      	b.n	802097a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020900:	b2db      	uxtb	r3, r3
 8020902:	2b00      	cmp	r3, #0
 8020904:	d106      	bne.n	8020914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	2200      	movs	r2, #0
 802090a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802090e:	6878      	ldr	r0, [r7, #4]
 8020910:	f7e2 ffe8 	bl	80038e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	2224      	movs	r2, #36	; 0x24
 8020918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	68da      	ldr	r2, [r3, #12]
 8020922:	687b      	ldr	r3, [r7, #4]
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802092a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802092c:	6878      	ldr	r0, [r7, #4]
 802092e:	f000 fec7 	bl	80216c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	691a      	ldr	r2, [r3, #16]
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	695a      	ldr	r2, [r3, #20]
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	68da      	ldr	r2, [r3, #12]
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8020960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	2200      	movs	r2, #0
 8020966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	2220      	movs	r2, #32
 802096c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	2220      	movs	r2, #32
 8020974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8020978:	2300      	movs	r3, #0
}
 802097a:	4618      	mov	r0, r3
 802097c:	3708      	adds	r7, #8
 802097e:	46bd      	mov	sp, r7
 8020980:	bd80      	pop	{r7, pc}

08020982 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8020982:	b580      	push	{r7, lr}
 8020984:	b082      	sub	sp, #8
 8020986:	af00      	add	r7, sp, #0
 8020988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d101      	bne.n	8020994 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8020990:	2301      	movs	r3, #1
 8020992:	e021      	b.n	80209d8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	2224      	movs	r2, #36	; 0x24
 8020998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	68da      	ldr	r2, [r3, #12]
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80209aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80209ac:	6878      	ldr	r0, [r7, #4]
 80209ae:	f7e3 f863 	bl	8003a78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	2200      	movs	r2, #0
 80209b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	2200      	movs	r2, #0
 80209bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	2200      	movs	r2, #0
 80209c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2200      	movs	r2, #0
 80209cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	2200      	movs	r2, #0
 80209d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80209d6:	2300      	movs	r3, #0
}
 80209d8:	4618      	mov	r0, r3
 80209da:	3708      	adds	r7, #8
 80209dc:	46bd      	mov	sp, r7
 80209de:	bd80      	pop	{r7, pc}

080209e0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80209e0:	b480      	push	{r7}
 80209e2:	b085      	sub	sp, #20
 80209e4:	af00      	add	r7, sp, #0
 80209e6:	60f8      	str	r0, [r7, #12]
 80209e8:	60b9      	str	r1, [r7, #8]
 80209ea:	4613      	mov	r3, r2
 80209ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80209ee:	68fb      	ldr	r3, [r7, #12]
 80209f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80209f4:	b2db      	uxtb	r3, r3
 80209f6:	2b20      	cmp	r3, #32
 80209f8:	d130      	bne.n	8020a5c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80209fa:	68bb      	ldr	r3, [r7, #8]
 80209fc:	2b00      	cmp	r3, #0
 80209fe:	d002      	beq.n	8020a06 <HAL_UART_Transmit_IT+0x26>
 8020a00:	88fb      	ldrh	r3, [r7, #6]
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d101      	bne.n	8020a0a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8020a06:	2301      	movs	r3, #1
 8020a08:	e029      	b.n	8020a5e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020a10:	2b01      	cmp	r3, #1
 8020a12:	d101      	bne.n	8020a18 <HAL_UART_Transmit_IT+0x38>
 8020a14:	2302      	movs	r3, #2
 8020a16:	e022      	b.n	8020a5e <HAL_UART_Transmit_IT+0x7e>
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	2201      	movs	r2, #1
 8020a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8020a20:	68fb      	ldr	r3, [r7, #12]
 8020a22:	68ba      	ldr	r2, [r7, #8]
 8020a24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8020a26:	68fb      	ldr	r3, [r7, #12]
 8020a28:	88fa      	ldrh	r2, [r7, #6]
 8020a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	88fa      	ldrh	r2, [r7, #6]
 8020a30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	2200      	movs	r2, #0
 8020a36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020a38:	68fb      	ldr	r3, [r7, #12]
 8020a3a:	2221      	movs	r2, #33	; 0x21
 8020a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	2200      	movs	r2, #0
 8020a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	68da      	ldr	r2, [r3, #12]
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020a56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8020a58:	2300      	movs	r3, #0
 8020a5a:	e000      	b.n	8020a5e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8020a5c:	2302      	movs	r3, #2
  }
}
 8020a5e:	4618      	mov	r0, r3
 8020a60:	3714      	adds	r7, #20
 8020a62:	46bd      	mov	sp, r7
 8020a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a68:	4770      	bx	lr

08020a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020a6a:	b580      	push	{r7, lr}
 8020a6c:	b084      	sub	sp, #16
 8020a6e:	af00      	add	r7, sp, #0
 8020a70:	60f8      	str	r0, [r7, #12]
 8020a72:	60b9      	str	r1, [r7, #8]
 8020a74:	4613      	mov	r3, r2
 8020a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020a7e:	b2db      	uxtb	r3, r3
 8020a80:	2b20      	cmp	r3, #32
 8020a82:	d11d      	bne.n	8020ac0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8020a84:	68bb      	ldr	r3, [r7, #8]
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d002      	beq.n	8020a90 <HAL_UART_Receive_IT+0x26>
 8020a8a:	88fb      	ldrh	r3, [r7, #6]
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d101      	bne.n	8020a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8020a90:	2301      	movs	r3, #1
 8020a92:	e016      	b.n	8020ac2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020a94:	68fb      	ldr	r3, [r7, #12]
 8020a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020a9a:	2b01      	cmp	r3, #1
 8020a9c:	d101      	bne.n	8020aa2 <HAL_UART_Receive_IT+0x38>
 8020a9e:	2302      	movs	r3, #2
 8020aa0:	e00f      	b.n	8020ac2 <HAL_UART_Receive_IT+0x58>
 8020aa2:	68fb      	ldr	r3, [r7, #12]
 8020aa4:	2201      	movs	r2, #1
 8020aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	2200      	movs	r2, #0
 8020aae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8020ab0:	88fb      	ldrh	r3, [r7, #6]
 8020ab2:	461a      	mov	r2, r3
 8020ab4:	68b9      	ldr	r1, [r7, #8]
 8020ab6:	68f8      	ldr	r0, [r7, #12]
 8020ab8:	f000 fbca 	bl	8021250 <UART_Start_Receive_IT>
 8020abc:	4603      	mov	r3, r0
 8020abe:	e000      	b.n	8020ac2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8020ac0:	2302      	movs	r3, #2
  }
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3710      	adds	r7, #16
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}
	...

08020acc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b0a2      	sub	sp, #136	; 0x88
 8020ad0:	af00      	add	r7, sp, #0
 8020ad2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8020ad4:	2301      	movs	r3, #1
 8020ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8020ada:	687b      	ldr	r3, [r7, #4]
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	330c      	adds	r3, #12
 8020ae0:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020ae4:	e853 3f00 	ldrex	r3, [r3]
 8020ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8020aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020aec:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8020af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	330c      	adds	r3, #12
 8020afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020afe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8020b00:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8020b04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020b06:	e841 2300 	strex	r3, r2, [r1]
 8020b0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8020b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d1e3      	bne.n	8020ada <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	3314      	adds	r3, #20
 8020b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020b1c:	e853 3f00 	ldrex	r3, [r3]
 8020b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8020b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020b24:	f023 0301 	bic.w	r3, r3, #1
 8020b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	3314      	adds	r3, #20
 8020b30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020b32:	65ba      	str	r2, [r7, #88]	; 0x58
 8020b34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8020b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020b3a:	e841 2300 	strex	r3, r2, [r1]
 8020b3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8020b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d1e5      	bne.n	8020b12 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b4a:	2b01      	cmp	r3, #1
 8020b4c:	d119      	bne.n	8020b82 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	330c      	adds	r3, #12
 8020b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b58:	e853 3f00 	ldrex	r3, [r3]
 8020b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8020b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b60:	f023 0310 	bic.w	r3, r3, #16
 8020b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	681b      	ldr	r3, [r3, #0]
 8020b6a:	330c      	adds	r3, #12
 8020b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8020b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8020b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020b76:	e841 2300 	strex	r3, r2, [r1]
 8020b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8020b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d1e5      	bne.n	8020b4e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d00f      	beq.n	8020baa <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	695b      	ldr	r3, [r3, #20]
 8020b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020b94:	2b80      	cmp	r3, #128	; 0x80
 8020b96:	d104      	bne.n	8020ba2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020b9c:	4a53      	ldr	r2, [pc, #332]	; (8020cec <HAL_UART_Abort_IT+0x220>)
 8020b9e:	651a      	str	r2, [r3, #80]	; 0x50
 8020ba0:	e003      	b.n	8020baa <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ba6:	2200      	movs	r2, #0
 8020ba8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d00f      	beq.n	8020bd2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	695b      	ldr	r3, [r3, #20]
 8020bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020bbc:	2b40      	cmp	r3, #64	; 0x40
 8020bbe:	d104      	bne.n	8020bca <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bc4:	4a4a      	ldr	r2, [pc, #296]	; (8020cf0 <HAL_UART_Abort_IT+0x224>)
 8020bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8020bc8:	e003      	b.n	8020bd2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bce:	2200      	movs	r2, #0
 8020bd0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	695b      	ldr	r3, [r3, #20]
 8020bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020bdc:	2b80      	cmp	r3, #128	; 0x80
 8020bde:	d12d      	bne.n	8020c3c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	3314      	adds	r3, #20
 8020be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bea:	e853 3f00 	ldrex	r3, [r3]
 8020bee:	623b      	str	r3, [r7, #32]
   return(result);
 8020bf0:	6a3b      	ldr	r3, [r7, #32]
 8020bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8020bf8:	687b      	ldr	r3, [r7, #4]
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	3314      	adds	r3, #20
 8020bfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8020c00:	633a      	str	r2, [r7, #48]	; 0x30
 8020c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020c08:	e841 2300 	strex	r3, r2, [r1]
 8020c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8020c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d1e5      	bne.n	8020be0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d00f      	beq.n	8020c3c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c20:	4618      	mov	r0, r3
 8020c22:	f7fa fd05 	bl	801b630 <HAL_DMA_Abort_IT>
 8020c26:	4603      	mov	r3, r0
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d004      	beq.n	8020c36 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c30:	2200      	movs	r2, #0
 8020c32:	651a      	str	r2, [r3, #80]	; 0x50
 8020c34:	e002      	b.n	8020c3c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8020c36:	2300      	movs	r3, #0
 8020c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	695b      	ldr	r3, [r3, #20]
 8020c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020c46:	2b40      	cmp	r3, #64	; 0x40
 8020c48:	d130      	bne.n	8020cac <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	681b      	ldr	r3, [r3, #0]
 8020c4e:	3314      	adds	r3, #20
 8020c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c52:	693b      	ldr	r3, [r7, #16]
 8020c54:	e853 3f00 	ldrex	r3, [r3]
 8020c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020c60:	673b      	str	r3, [r7, #112]	; 0x70
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	3314      	adds	r3, #20
 8020c68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8020c6a:	61fa      	str	r2, [r7, #28]
 8020c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c6e:	69b9      	ldr	r1, [r7, #24]
 8020c70:	69fa      	ldr	r2, [r7, #28]
 8020c72:	e841 2300 	strex	r3, r2, [r1]
 8020c76:	617b      	str	r3, [r7, #20]
   return(result);
 8020c78:	697b      	ldr	r3, [r7, #20]
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	d1e5      	bne.n	8020c4a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d012      	beq.n	8020cac <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	f7fa fcd0 	bl	801b630 <HAL_DMA_Abort_IT>
 8020c90:	4603      	mov	r3, r0
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d007      	beq.n	8020ca6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8020c9e:	2301      	movs	r3, #1
 8020ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020ca4:	e002      	b.n	8020cac <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8020cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020cb0:	2b01      	cmp	r3, #1
 8020cb2:	d116      	bne.n	8020ce2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	2200      	movs	r2, #0
 8020cb8:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	2200      	movs	r2, #0
 8020cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	2220      	movs	r2, #32
 8020cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	2220      	movs	r2, #32
 8020cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	2200      	movs	r2, #0
 8020cda:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8020cdc:	6878      	ldr	r0, [r7, #4]
 8020cde:	f000 faa1 	bl	8021224 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8020ce2:	2300      	movs	r3, #0
}
 8020ce4:	4618      	mov	r0, r3
 8020ce6:	3788      	adds	r7, #136	; 0x88
 8020ce8:	46bd      	mov	sp, r7
 8020cea:	bd80      	pop	{r7, pc}
 8020cec:	080213bb 	.word	0x080213bb
 8020cf0:	0802141b 	.word	0x0802141b

08020cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b0ba      	sub	sp, #232	; 0xe8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	681b      	ldr	r3, [r3, #0]
 8020d00:	681b      	ldr	r3, [r3, #0]
 8020d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	681b      	ldr	r3, [r3, #0]
 8020d0a:	68db      	ldr	r3, [r3, #12]
 8020d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	695b      	ldr	r3, [r3, #20]
 8020d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8020d20:	2300      	movs	r3, #0
 8020d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8020d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020d2a:	f003 030f 	and.w	r3, r3, #15
 8020d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8020d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d10f      	bne.n	8020d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8020d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020d3e:	f003 0320 	and.w	r3, r3, #32
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d009      	beq.n	8020d5a <HAL_UART_IRQHandler+0x66>
 8020d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020d4a:	f003 0320 	and.w	r3, r3, #32
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d003      	beq.n	8020d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8020d52:	6878      	ldr	r0, [r7, #4]
 8020d54:	f000 fbf9 	bl	802154a <UART_Receive_IT>
      return;
 8020d58:	e256      	b.n	8021208 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8020d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	f000 80de 	beq.w	8020f20 <HAL_UART_IRQHandler+0x22c>
 8020d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020d68:	f003 0301 	and.w	r3, r3, #1
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d106      	bne.n	8020d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8020d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020d74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	f000 80d1 	beq.w	8020f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8020d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020d82:	f003 0301 	and.w	r3, r3, #1
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d00b      	beq.n	8020da2 <HAL_UART_IRQHandler+0xae>
 8020d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	d005      	beq.n	8020da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020d9a:	f043 0201 	orr.w	r2, r3, #1
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8020da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020da6:	f003 0304 	and.w	r3, r3, #4
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d00b      	beq.n	8020dc6 <HAL_UART_IRQHandler+0xd2>
 8020dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020db2:	f003 0301 	and.w	r3, r3, #1
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d005      	beq.n	8020dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020dbe:	f043 0202 	orr.w	r2, r3, #2
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8020dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020dca:	f003 0302 	and.w	r3, r3, #2
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d00b      	beq.n	8020dea <HAL_UART_IRQHandler+0xf6>
 8020dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020dd6:	f003 0301 	and.w	r3, r3, #1
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d005      	beq.n	8020dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020de2:	f043 0204 	orr.w	r2, r3, #4
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8020dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020dee:	f003 0308 	and.w	r3, r3, #8
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d011      	beq.n	8020e1a <HAL_UART_IRQHandler+0x126>
 8020df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020dfa:	f003 0320 	and.w	r3, r3, #32
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d105      	bne.n	8020e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8020e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020e06:	f003 0301 	and.w	r3, r3, #1
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d005      	beq.n	8020e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e12:	f043 0208 	orr.w	r2, r3, #8
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	f000 81ed 	beq.w	80211fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8020e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020e28:	f003 0320 	and.w	r3, r3, #32
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d008      	beq.n	8020e42 <HAL_UART_IRQHandler+0x14e>
 8020e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020e34:	f003 0320 	and.w	r3, r3, #32
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d002      	beq.n	8020e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8020e3c:	6878      	ldr	r0, [r7, #4]
 8020e3e:	f000 fb84 	bl	802154a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	695b      	ldr	r3, [r3, #20]
 8020e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e4c:	2b40      	cmp	r3, #64	; 0x40
 8020e4e:	bf0c      	ite	eq
 8020e50:	2301      	moveq	r3, #1
 8020e52:	2300      	movne	r3, #0
 8020e54:	b2db      	uxtb	r3, r3
 8020e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e5e:	f003 0308 	and.w	r3, r3, #8
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d103      	bne.n	8020e6e <HAL_UART_IRQHandler+0x17a>
 8020e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d04f      	beq.n	8020f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8020e6e:	6878      	ldr	r0, [r7, #4]
 8020e70:	f000 fa2c 	bl	80212cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	695b      	ldr	r3, [r3, #20]
 8020e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e7e:	2b40      	cmp	r3, #64	; 0x40
 8020e80:	d141      	bne.n	8020f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	3314      	adds	r3, #20
 8020e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8020e90:	e853 3f00 	ldrex	r3, [r3]
 8020e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8020e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	3314      	adds	r3, #20
 8020eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8020eae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8020eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8020eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020ebe:	e841 2300 	strex	r3, r2, [r1]
 8020ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8020ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d1d9      	bne.n	8020e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d013      	beq.n	8020efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020eda:	4a7d      	ldr	r2, [pc, #500]	; (80210d0 <HAL_UART_IRQHandler+0x3dc>)
 8020edc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	f7fa fba4 	bl	801b630 <HAL_DMA_Abort_IT>
 8020ee8:	4603      	mov	r3, r0
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d016      	beq.n	8020f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020ef4:	687a      	ldr	r2, [r7, #4]
 8020ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8020ef8:	4610      	mov	r0, r2
 8020efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020efc:	e00e      	b.n	8020f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8020efe:	6878      	ldr	r0, [r7, #4]
 8020f00:	f000 f986 	bl	8021210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f04:	e00a      	b.n	8020f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8020f06:	6878      	ldr	r0, [r7, #4]
 8020f08:	f000 f982 	bl	8021210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f0c:	e006      	b.n	8020f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8020f0e:	6878      	ldr	r0, [r7, #4]
 8020f10:	f000 f97e 	bl	8021210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	2200      	movs	r2, #0
 8020f18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8020f1a:	e170      	b.n	80211fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f1c:	bf00      	nop
    return;
 8020f1e:	e16e      	b.n	80211fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f24:	2b01      	cmp	r3, #1
 8020f26:	f040 814a 	bne.w	80211be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8020f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f2e:	f003 0310 	and.w	r3, r3, #16
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	f000 8143 	beq.w	80211be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8020f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020f3c:	f003 0310 	and.w	r3, r3, #16
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	f000 813c 	beq.w	80211be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8020f46:	2300      	movs	r3, #0
 8020f48:	60bb      	str	r3, [r7, #8]
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	60bb      	str	r3, [r7, #8]
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	685b      	ldr	r3, [r3, #4]
 8020f58:	60bb      	str	r3, [r7, #8]
 8020f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	695b      	ldr	r3, [r3, #20]
 8020f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f66:	2b40      	cmp	r3, #64	; 0x40
 8020f68:	f040 80b4 	bne.w	80210d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	685b      	ldr	r3, [r3, #4]
 8020f74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8020f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	f000 8140 	beq.w	8021202 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8020f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8020f8a:	429a      	cmp	r2, r3
 8020f8c:	f080 8139 	bcs.w	8021202 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8020f96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f9c:	69db      	ldr	r3, [r3, #28]
 8020f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020fa2:	f000 8088 	beq.w	80210b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	330c      	adds	r3, #12
 8020fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8020fb4:	e853 3f00 	ldrex	r3, [r3]
 8020fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8020fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	330c      	adds	r3, #12
 8020fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8020fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8020fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8020fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8020fe2:	e841 2300 	strex	r3, r2, [r1]
 8020fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8020fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d1d9      	bne.n	8020fa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	681b      	ldr	r3, [r3, #0]
 8020ff6:	3314      	adds	r3, #20
 8020ff8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8020ffc:	e853 3f00 	ldrex	r3, [r3]
 8021000:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021004:	f023 0301 	bic.w	r3, r3, #1
 8021008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	681b      	ldr	r3, [r3, #0]
 8021010:	3314      	adds	r3, #20
 8021012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8021016:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802101a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802101c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802101e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021022:	e841 2300 	strex	r3, r2, [r1]
 8021026:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8021028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802102a:	2b00      	cmp	r3, #0
 802102c:	d1e1      	bne.n	8020ff2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	681b      	ldr	r3, [r3, #0]
 8021032:	3314      	adds	r3, #20
 8021034:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021038:	e853 3f00 	ldrex	r3, [r3]
 802103c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802103e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	3314      	adds	r3, #20
 802104e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021052:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021054:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021056:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021058:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802105a:	e841 2300 	strex	r3, r2, [r1]
 802105e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021062:	2b00      	cmp	r3, #0
 8021064:	d1e3      	bne.n	802102e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	2220      	movs	r2, #32
 802106a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	2200      	movs	r2, #0
 8021072:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	330c      	adds	r3, #12
 802107a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802107c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802107e:	e853 3f00 	ldrex	r3, [r3]
 8021082:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021086:	f023 0310 	bic.w	r3, r3, #16
 802108a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	330c      	adds	r3, #12
 8021094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021098:	65ba      	str	r2, [r7, #88]	; 0x58
 802109a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802109c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802109e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80210a0:	e841 2300 	strex	r3, r2, [r1]
 80210a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80210a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d1e3      	bne.n	8021074 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210b0:	4618      	mov	r0, r3
 80210b2:	f7fa fa4d 	bl	801b550 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80210b6:	687b      	ldr	r3, [r7, #4]
 80210b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80210be:	b29b      	uxth	r3, r3
 80210c0:	1ad3      	subs	r3, r2, r3
 80210c2:	b29b      	uxth	r3, r3
 80210c4:	4619      	mov	r1, r3
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f000 f8b6 	bl	8021238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80210cc:	e099      	b.n	8021202 <HAL_UART_IRQHandler+0x50e>
 80210ce:	bf00      	nop
 80210d0:	08021393 	.word	0x08021393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80210dc:	b29b      	uxth	r3, r3
 80210de:	1ad3      	subs	r3, r2, r3
 80210e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80210e8:	b29b      	uxth	r3, r3
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	f000 808b 	beq.w	8021206 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80210f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	f000 8086 	beq.w	8021206 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	330c      	adds	r3, #12
 8021100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021104:	e853 3f00 	ldrex	r3, [r3]
 8021108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802110c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	330c      	adds	r3, #12
 802111a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802111e:	647a      	str	r2, [r7, #68]	; 0x44
 8021120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021126:	e841 2300 	strex	r3, r2, [r1]
 802112a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802112c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802112e:	2b00      	cmp	r3, #0
 8021130:	d1e3      	bne.n	80210fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	3314      	adds	r3, #20
 8021138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802113c:	e853 3f00 	ldrex	r3, [r3]
 8021140:	623b      	str	r3, [r7, #32]
   return(result);
 8021142:	6a3b      	ldr	r3, [r7, #32]
 8021144:	f023 0301 	bic.w	r3, r3, #1
 8021148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	3314      	adds	r3, #20
 8021152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8021156:	633a      	str	r2, [r7, #48]	; 0x30
 8021158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802115e:	e841 2300 	strex	r3, r2, [r1]
 8021162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021166:	2b00      	cmp	r3, #0
 8021168:	d1e3      	bne.n	8021132 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	2220      	movs	r2, #32
 802116e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	2200      	movs	r2, #0
 8021176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	330c      	adds	r3, #12
 802117e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021180:	693b      	ldr	r3, [r7, #16]
 8021182:	e853 3f00 	ldrex	r3, [r3]
 8021186:	60fb      	str	r3, [r7, #12]
   return(result);
 8021188:	68fb      	ldr	r3, [r7, #12]
 802118a:	f023 0310 	bic.w	r3, r3, #16
 802118e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	330c      	adds	r3, #12
 8021198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802119c:	61fa      	str	r2, [r7, #28]
 802119e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211a0:	69b9      	ldr	r1, [r7, #24]
 80211a2:	69fa      	ldr	r2, [r7, #28]
 80211a4:	e841 2300 	strex	r3, r2, [r1]
 80211a8:	617b      	str	r3, [r7, #20]
   return(result);
 80211aa:	697b      	ldr	r3, [r7, #20]
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	d1e3      	bne.n	8021178 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80211b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80211b4:	4619      	mov	r1, r3
 80211b6:	6878      	ldr	r0, [r7, #4]
 80211b8:	f000 f83e 	bl	8021238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80211bc:	e023      	b.n	8021206 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80211be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80211c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d009      	beq.n	80211de <HAL_UART_IRQHandler+0x4ea>
 80211ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80211ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d003      	beq.n	80211de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80211d6:	6878      	ldr	r0, [r7, #4]
 80211d8:	f000 f94f 	bl	802147a <UART_Transmit_IT>
    return;
 80211dc:	e014      	b.n	8021208 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80211de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80211e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d00e      	beq.n	8021208 <HAL_UART_IRQHandler+0x514>
 80211ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80211ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	d008      	beq.n	8021208 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80211f6:	6878      	ldr	r0, [r7, #4]
 80211f8:	f000 f98f 	bl	802151a <UART_EndTransmit_IT>
    return;
 80211fc:	e004      	b.n	8021208 <HAL_UART_IRQHandler+0x514>
    return;
 80211fe:	bf00      	nop
 8021200:	e002      	b.n	8021208 <HAL_UART_IRQHandler+0x514>
      return;
 8021202:	bf00      	nop
 8021204:	e000      	b.n	8021208 <HAL_UART_IRQHandler+0x514>
      return;
 8021206:	bf00      	nop
  }
}
 8021208:	37e8      	adds	r7, #232	; 0xe8
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop

08021210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8021210:	b480      	push	{r7}
 8021212:	b083      	sub	sp, #12
 8021214:	af00      	add	r7, sp, #0
 8021216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8021218:	bf00      	nop
 802121a:	370c      	adds	r7, #12
 802121c:	46bd      	mov	sp, r7
 802121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021222:	4770      	bx	lr

08021224 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8021224:	b480      	push	{r7}
 8021226:	b083      	sub	sp, #12
 8021228:	af00      	add	r7, sp, #0
 802122a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 802122c:	bf00      	nop
 802122e:	370c      	adds	r7, #12
 8021230:	46bd      	mov	sp, r7
 8021232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021236:	4770      	bx	lr

08021238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8021238:	b480      	push	{r7}
 802123a:	b083      	sub	sp, #12
 802123c:	af00      	add	r7, sp, #0
 802123e:	6078      	str	r0, [r7, #4]
 8021240:	460b      	mov	r3, r1
 8021242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8021244:	bf00      	nop
 8021246:	370c      	adds	r7, #12
 8021248:	46bd      	mov	sp, r7
 802124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802124e:	4770      	bx	lr

08021250 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021250:	b480      	push	{r7}
 8021252:	b085      	sub	sp, #20
 8021254:	af00      	add	r7, sp, #0
 8021256:	60f8      	str	r0, [r7, #12]
 8021258:	60b9      	str	r1, [r7, #8]
 802125a:	4613      	mov	r3, r2
 802125c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	68ba      	ldr	r2, [r7, #8]
 8021262:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	88fa      	ldrh	r2, [r7, #6]
 8021268:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 802126a:	68fb      	ldr	r3, [r7, #12]
 802126c:	88fa      	ldrh	r2, [r7, #6]
 802126e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	2200      	movs	r2, #0
 8021274:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021276:	68fb      	ldr	r3, [r7, #12]
 8021278:	2222      	movs	r2, #34	; 0x22
 802127a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	2200      	movs	r2, #0
 8021282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	691b      	ldr	r3, [r3, #16]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d007      	beq.n	802129e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802128e:	68fb      	ldr	r3, [r7, #12]
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	68da      	ldr	r2, [r3, #12]
 8021294:	68fb      	ldr	r3, [r7, #12]
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802129c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802129e:	68fb      	ldr	r3, [r7, #12]
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	695a      	ldr	r2, [r3, #20]
 80212a4:	68fb      	ldr	r3, [r7, #12]
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	f042 0201 	orr.w	r2, r2, #1
 80212ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	68da      	ldr	r2, [r3, #12]
 80212b4:	68fb      	ldr	r3, [r7, #12]
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	f042 0220 	orr.w	r2, r2, #32
 80212bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80212be:	2300      	movs	r3, #0
}
 80212c0:	4618      	mov	r0, r3
 80212c2:	3714      	adds	r7, #20
 80212c4:	46bd      	mov	sp, r7
 80212c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ca:	4770      	bx	lr

080212cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80212cc:	b480      	push	{r7}
 80212ce:	b095      	sub	sp, #84	; 0x54
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	330c      	adds	r3, #12
 80212da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212de:	e853 3f00 	ldrex	r3, [r3]
 80212e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80212e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80212ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	330c      	adds	r3, #12
 80212f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80212f4:	643a      	str	r2, [r7, #64]	; 0x40
 80212f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80212fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80212fc:	e841 2300 	strex	r3, r2, [r1]
 8021300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021304:	2b00      	cmp	r3, #0
 8021306:	d1e5      	bne.n	80212d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	3314      	adds	r3, #20
 802130e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021310:	6a3b      	ldr	r3, [r7, #32]
 8021312:	e853 3f00 	ldrex	r3, [r3]
 8021316:	61fb      	str	r3, [r7, #28]
   return(result);
 8021318:	69fb      	ldr	r3, [r7, #28]
 802131a:	f023 0301 	bic.w	r3, r3, #1
 802131e:	64bb      	str	r3, [r7, #72]	; 0x48
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	3314      	adds	r3, #20
 8021326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021328:	62fa      	str	r2, [r7, #44]	; 0x2c
 802132a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802132c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802132e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021330:	e841 2300 	strex	r3, r2, [r1]
 8021334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021338:	2b00      	cmp	r3, #0
 802133a:	d1e5      	bne.n	8021308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021340:	2b01      	cmp	r3, #1
 8021342:	d119      	bne.n	8021378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	330c      	adds	r3, #12
 802134a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	e853 3f00 	ldrex	r3, [r3]
 8021352:	60bb      	str	r3, [r7, #8]
   return(result);
 8021354:	68bb      	ldr	r3, [r7, #8]
 8021356:	f023 0310 	bic.w	r3, r3, #16
 802135a:	647b      	str	r3, [r7, #68]	; 0x44
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	330c      	adds	r3, #12
 8021362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021364:	61ba      	str	r2, [r7, #24]
 8021366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021368:	6979      	ldr	r1, [r7, #20]
 802136a:	69ba      	ldr	r2, [r7, #24]
 802136c:	e841 2300 	strex	r3, r2, [r1]
 8021370:	613b      	str	r3, [r7, #16]
   return(result);
 8021372:	693b      	ldr	r3, [r7, #16]
 8021374:	2b00      	cmp	r3, #0
 8021376:	d1e5      	bne.n	8021344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	2220      	movs	r2, #32
 802137c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	2200      	movs	r2, #0
 8021384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8021386:	bf00      	nop
 8021388:	3754      	adds	r7, #84	; 0x54
 802138a:	46bd      	mov	sp, r7
 802138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021390:	4770      	bx	lr

08021392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021392:	b580      	push	{r7, lr}
 8021394:	b084      	sub	sp, #16
 8021396:	af00      	add	r7, sp, #0
 8021398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802139e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	2200      	movs	r2, #0
 80213a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	2200      	movs	r2, #0
 80213aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80213ac:	68f8      	ldr	r0, [r7, #12]
 80213ae:	f7ff ff2f 	bl	8021210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80213b2:	bf00      	nop
 80213b4:	3710      	adds	r7, #16
 80213b6:	46bd      	mov	sp, r7
 80213b8:	bd80      	pop	{r7, pc}

080213ba <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80213ba:	b580      	push	{r7, lr}
 80213bc:	b084      	sub	sp, #16
 80213be:	af00      	add	r7, sp, #0
 80213c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213c6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80213c8:	68fb      	ldr	r3, [r7, #12]
 80213ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80213cc:	2200      	movs	r2, #0
 80213ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80213d0:	68fb      	ldr	r3, [r7, #12]
 80213d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d004      	beq.n	80213e2 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d117      	bne.n	8021412 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80213e2:	68fb      	ldr	r3, [r7, #12]
 80213e4:	2200      	movs	r2, #0
 80213e6:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	2200      	movs	r2, #0
 80213ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80213ee:	68fb      	ldr	r3, [r7, #12]
 80213f0:	2200      	movs	r2, #0
 80213f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80213f4:	68fb      	ldr	r3, [r7, #12]
 80213f6:	2220      	movs	r2, #32
 80213f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80213fc:	68fb      	ldr	r3, [r7, #12]
 80213fe:	2220      	movs	r2, #32
 8021400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021404:	68fb      	ldr	r3, [r7, #12]
 8021406:	2200      	movs	r2, #0
 8021408:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802140a:	68f8      	ldr	r0, [r7, #12]
 802140c:	f7ff ff0a 	bl	8021224 <HAL_UART_AbortCpltCallback>
 8021410:	e000      	b.n	8021414 <UART_DMATxAbortCallback+0x5a>
      return;
 8021412:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021414:	3710      	adds	r7, #16
 8021416:	46bd      	mov	sp, r7
 8021418:	bd80      	pop	{r7, pc}

0802141a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802141a:	b580      	push	{r7, lr}
 802141c:	b084      	sub	sp, #16
 802141e:	af00      	add	r7, sp, #0
 8021420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021426:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8021428:	68fb      	ldr	r3, [r7, #12]
 802142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802142c:	2200      	movs	r2, #0
 802142e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021434:	2b00      	cmp	r3, #0
 8021436:	d004      	beq.n	8021442 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8021438:	68fb      	ldr	r3, [r7, #12]
 802143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802143c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802143e:	2b00      	cmp	r3, #0
 8021440:	d117      	bne.n	8021472 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	2200      	movs	r2, #0
 8021446:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8021448:	68fb      	ldr	r3, [r7, #12]
 802144a:	2200      	movs	r2, #0
 802144c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	2200      	movs	r2, #0
 8021452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8021454:	68fb      	ldr	r3, [r7, #12]
 8021456:	2220      	movs	r2, #32
 8021458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802145c:	68fb      	ldr	r3, [r7, #12]
 802145e:	2220      	movs	r2, #32
 8021460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021464:	68fb      	ldr	r3, [r7, #12]
 8021466:	2200      	movs	r2, #0
 8021468:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802146a:	68f8      	ldr	r0, [r7, #12]
 802146c:	f7ff feda 	bl	8021224 <HAL_UART_AbortCpltCallback>
 8021470:	e000      	b.n	8021474 <UART_DMARxAbortCallback+0x5a>
      return;
 8021472:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021474:	3710      	adds	r7, #16
 8021476:	46bd      	mov	sp, r7
 8021478:	bd80      	pop	{r7, pc}

0802147a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802147a:	b480      	push	{r7}
 802147c:	b085      	sub	sp, #20
 802147e:	af00      	add	r7, sp, #0
 8021480:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021488:	b2db      	uxtb	r3, r3
 802148a:	2b21      	cmp	r3, #33	; 0x21
 802148c:	d13e      	bne.n	802150c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	689b      	ldr	r3, [r3, #8]
 8021492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021496:	d114      	bne.n	80214c2 <UART_Transmit_IT+0x48>
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	691b      	ldr	r3, [r3, #16]
 802149c:	2b00      	cmp	r3, #0
 802149e:	d110      	bne.n	80214c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	6a1b      	ldr	r3, [r3, #32]
 80214a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	881b      	ldrh	r3, [r3, #0]
 80214aa:	461a      	mov	r2, r3
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80214b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	6a1b      	ldr	r3, [r3, #32]
 80214ba:	1c9a      	adds	r2, r3, #2
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	621a      	str	r2, [r3, #32]
 80214c0:	e008      	b.n	80214d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	6a1b      	ldr	r3, [r3, #32]
 80214c6:	1c59      	adds	r1, r3, #1
 80214c8:	687a      	ldr	r2, [r7, #4]
 80214ca:	6211      	str	r1, [r2, #32]
 80214cc:	781a      	ldrb	r2, [r3, #0]
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80214d8:	b29b      	uxth	r3, r3
 80214da:	3b01      	subs	r3, #1
 80214dc:	b29b      	uxth	r3, r3
 80214de:	687a      	ldr	r2, [r7, #4]
 80214e0:	4619      	mov	r1, r3
 80214e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	d10f      	bne.n	8021508 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	68da      	ldr	r2, [r3, #12]
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	681b      	ldr	r3, [r3, #0]
 80214f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80214f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	68da      	ldr	r2, [r3, #12]
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021506:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8021508:	2300      	movs	r3, #0
 802150a:	e000      	b.n	802150e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802150c:	2302      	movs	r3, #2
  }
}
 802150e:	4618      	mov	r0, r3
 8021510:	3714      	adds	r7, #20
 8021512:	46bd      	mov	sp, r7
 8021514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021518:	4770      	bx	lr

0802151a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802151a:	b580      	push	{r7, lr}
 802151c:	b082      	sub	sp, #8
 802151e:	af00      	add	r7, sp, #0
 8021520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	68da      	ldr	r2, [r3, #12]
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	2220      	movs	r2, #32
 8021536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802153a:	6878      	ldr	r0, [r7, #4]
 802153c:	f7e0 ffa0 	bl	8002480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8021540:	2300      	movs	r3, #0
}
 8021542:	4618      	mov	r0, r3
 8021544:	3708      	adds	r7, #8
 8021546:	46bd      	mov	sp, r7
 8021548:	bd80      	pop	{r7, pc}

0802154a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802154a:	b580      	push	{r7, lr}
 802154c:	b08c      	sub	sp, #48	; 0x30
 802154e:	af00      	add	r7, sp, #0
 8021550:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021558:	b2db      	uxtb	r3, r3
 802155a:	2b22      	cmp	r3, #34	; 0x22
 802155c:	f040 80ab 	bne.w	80216b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	689b      	ldr	r3, [r3, #8]
 8021564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021568:	d117      	bne.n	802159a <UART_Receive_IT+0x50>
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	691b      	ldr	r3, [r3, #16]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d113      	bne.n	802159a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8021572:	2300      	movs	r3, #0
 8021574:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802157a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	685b      	ldr	r3, [r3, #4]
 8021582:	b29b      	uxth	r3, r3
 8021584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021588:	b29a      	uxth	r2, r3
 802158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802158c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021592:	1c9a      	adds	r2, r3, #2
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	629a      	str	r2, [r3, #40]	; 0x28
 8021598:	e026      	b.n	80215e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802159e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80215a0:	2300      	movs	r3, #0
 80215a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	689b      	ldr	r3, [r3, #8]
 80215a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80215ac:	d007      	beq.n	80215be <UART_Receive_IT+0x74>
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	689b      	ldr	r3, [r3, #8]
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d10a      	bne.n	80215cc <UART_Receive_IT+0x82>
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	691b      	ldr	r3, [r3, #16]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d106      	bne.n	80215cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	685b      	ldr	r3, [r3, #4]
 80215c4:	b2da      	uxtb	r2, r3
 80215c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215c8:	701a      	strb	r2, [r3, #0]
 80215ca:	e008      	b.n	80215de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	685b      	ldr	r3, [r3, #4]
 80215d2:	b2db      	uxtb	r3, r3
 80215d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80215d8:	b2da      	uxtb	r2, r3
 80215da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215e2:	1c5a      	adds	r2, r3, #1
 80215e4:	687b      	ldr	r3, [r7, #4]
 80215e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80215ec:	b29b      	uxth	r3, r3
 80215ee:	3b01      	subs	r3, #1
 80215f0:	b29b      	uxth	r3, r3
 80215f2:	687a      	ldr	r2, [r7, #4]
 80215f4:	4619      	mov	r1, r3
 80215f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d15a      	bne.n	80216b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	68da      	ldr	r2, [r3, #12]
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	681b      	ldr	r3, [r3, #0]
 8021606:	f022 0220 	bic.w	r2, r2, #32
 802160a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	68da      	ldr	r2, [r3, #12]
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802161a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	695a      	ldr	r2, [r3, #20]
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	681b      	ldr	r3, [r3, #0]
 8021626:	f022 0201 	bic.w	r2, r2, #1
 802162a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	2220      	movs	r2, #32
 8021630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021638:	2b01      	cmp	r3, #1
 802163a:	d135      	bne.n	80216a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	2200      	movs	r2, #0
 8021640:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	330c      	adds	r3, #12
 8021648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802164a:	697b      	ldr	r3, [r7, #20]
 802164c:	e853 3f00 	ldrex	r3, [r3]
 8021650:	613b      	str	r3, [r7, #16]
   return(result);
 8021652:	693b      	ldr	r3, [r7, #16]
 8021654:	f023 0310 	bic.w	r3, r3, #16
 8021658:	627b      	str	r3, [r7, #36]	; 0x24
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	330c      	adds	r3, #12
 8021660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021662:	623a      	str	r2, [r7, #32]
 8021664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021666:	69f9      	ldr	r1, [r7, #28]
 8021668:	6a3a      	ldr	r2, [r7, #32]
 802166a:	e841 2300 	strex	r3, r2, [r1]
 802166e:	61bb      	str	r3, [r7, #24]
   return(result);
 8021670:	69bb      	ldr	r3, [r7, #24]
 8021672:	2b00      	cmp	r3, #0
 8021674:	d1e5      	bne.n	8021642 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	f003 0310 	and.w	r3, r3, #16
 8021680:	2b10      	cmp	r3, #16
 8021682:	d10a      	bne.n	802169a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021684:	2300      	movs	r3, #0
 8021686:	60fb      	str	r3, [r7, #12]
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	681b      	ldr	r3, [r3, #0]
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	60fb      	str	r3, [r7, #12]
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	685b      	ldr	r3, [r3, #4]
 8021696:	60fb      	str	r3, [r7, #12]
 8021698:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802169e:	4619      	mov	r1, r3
 80216a0:	6878      	ldr	r0, [r7, #4]
 80216a2:	f7ff fdc9 	bl	8021238 <HAL_UARTEx_RxEventCallback>
 80216a6:	e002      	b.n	80216ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80216a8:	6878      	ldr	r0, [r7, #4]
 80216aa:	f7e0 ff71 	bl	8002590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80216ae:	2300      	movs	r3, #0
 80216b0:	e002      	b.n	80216b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80216b2:	2300      	movs	r3, #0
 80216b4:	e000      	b.n	80216b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80216b6:	2302      	movs	r3, #2
  }
}
 80216b8:	4618      	mov	r0, r3
 80216ba:	3730      	adds	r7, #48	; 0x30
 80216bc:	46bd      	mov	sp, r7
 80216be:	bd80      	pop	{r7, pc}

080216c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80216c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c4:	b09f      	sub	sp, #124	; 0x7c
 80216c6:	af00      	add	r7, sp, #0
 80216c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80216ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	691b      	ldr	r3, [r3, #16]
 80216d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80216d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216d6:	68d9      	ldr	r1, [r3, #12]
 80216d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216da:	681a      	ldr	r2, [r3, #0]
 80216dc:	ea40 0301 	orr.w	r3, r0, r1
 80216e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80216e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216e4:	689a      	ldr	r2, [r3, #8]
 80216e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216e8:	691b      	ldr	r3, [r3, #16]
 80216ea:	431a      	orrs	r2, r3
 80216ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216ee:	695b      	ldr	r3, [r3, #20]
 80216f0:	431a      	orrs	r2, r3
 80216f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216f4:	69db      	ldr	r3, [r3, #28]
 80216f6:	4313      	orrs	r3, r2
 80216f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80216fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	68db      	ldr	r3, [r3, #12]
 8021700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8021704:	f021 010c 	bic.w	r1, r1, #12
 8021708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802170a:	681a      	ldr	r2, [r3, #0]
 802170c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802170e:	430b      	orrs	r3, r1
 8021710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021714:	681b      	ldr	r3, [r3, #0]
 8021716:	695b      	ldr	r3, [r3, #20]
 8021718:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802171c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802171e:	6999      	ldr	r1, [r3, #24]
 8021720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021722:	681a      	ldr	r2, [r3, #0]
 8021724:	ea40 0301 	orr.w	r3, r0, r1
 8021728:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802172a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802172c:	681a      	ldr	r2, [r3, #0]
 802172e:	4bc5      	ldr	r3, [pc, #788]	; (8021a44 <UART_SetConfig+0x384>)
 8021730:	429a      	cmp	r2, r3
 8021732:	d004      	beq.n	802173e <UART_SetConfig+0x7e>
 8021734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021736:	681a      	ldr	r2, [r3, #0]
 8021738:	4bc3      	ldr	r3, [pc, #780]	; (8021a48 <UART_SetConfig+0x388>)
 802173a:	429a      	cmp	r2, r3
 802173c:	d103      	bne.n	8021746 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802173e:	f7fe f83b 	bl	801f7b8 <HAL_RCC_GetPCLK2Freq>
 8021742:	6778      	str	r0, [r7, #116]	; 0x74
 8021744:	e002      	b.n	802174c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021746:	f7fe f823 	bl	801f790 <HAL_RCC_GetPCLK1Freq>
 802174a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802174c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802174e:	69db      	ldr	r3, [r3, #28]
 8021750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021754:	f040 80b6 	bne.w	80218c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802175a:	461c      	mov	r4, r3
 802175c:	f04f 0500 	mov.w	r5, #0
 8021760:	4622      	mov	r2, r4
 8021762:	462b      	mov	r3, r5
 8021764:	1891      	adds	r1, r2, r2
 8021766:	6439      	str	r1, [r7, #64]	; 0x40
 8021768:	415b      	adcs	r3, r3
 802176a:	647b      	str	r3, [r7, #68]	; 0x44
 802176c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8021770:	1912      	adds	r2, r2, r4
 8021772:	eb45 0303 	adc.w	r3, r5, r3
 8021776:	f04f 0000 	mov.w	r0, #0
 802177a:	f04f 0100 	mov.w	r1, #0
 802177e:	00d9      	lsls	r1, r3, #3
 8021780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021784:	00d0      	lsls	r0, r2, #3
 8021786:	4602      	mov	r2, r0
 8021788:	460b      	mov	r3, r1
 802178a:	1911      	adds	r1, r2, r4
 802178c:	6639      	str	r1, [r7, #96]	; 0x60
 802178e:	416b      	adcs	r3, r5
 8021790:	667b      	str	r3, [r7, #100]	; 0x64
 8021792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021794:	685b      	ldr	r3, [r3, #4]
 8021796:	461a      	mov	r2, r3
 8021798:	f04f 0300 	mov.w	r3, #0
 802179c:	1891      	adds	r1, r2, r2
 802179e:	63b9      	str	r1, [r7, #56]	; 0x38
 80217a0:	415b      	adcs	r3, r3
 80217a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80217a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80217a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80217ac:	f7df fb72 	bl	8000e94 <__aeabi_uldivmod>
 80217b0:	4602      	mov	r2, r0
 80217b2:	460b      	mov	r3, r1
 80217b4:	4ba5      	ldr	r3, [pc, #660]	; (8021a4c <UART_SetConfig+0x38c>)
 80217b6:	fba3 2302 	umull	r2, r3, r3, r2
 80217ba:	095b      	lsrs	r3, r3, #5
 80217bc:	011e      	lsls	r6, r3, #4
 80217be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80217c0:	461c      	mov	r4, r3
 80217c2:	f04f 0500 	mov.w	r5, #0
 80217c6:	4622      	mov	r2, r4
 80217c8:	462b      	mov	r3, r5
 80217ca:	1891      	adds	r1, r2, r2
 80217cc:	6339      	str	r1, [r7, #48]	; 0x30
 80217ce:	415b      	adcs	r3, r3
 80217d0:	637b      	str	r3, [r7, #52]	; 0x34
 80217d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80217d6:	1912      	adds	r2, r2, r4
 80217d8:	eb45 0303 	adc.w	r3, r5, r3
 80217dc:	f04f 0000 	mov.w	r0, #0
 80217e0:	f04f 0100 	mov.w	r1, #0
 80217e4:	00d9      	lsls	r1, r3, #3
 80217e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80217ea:	00d0      	lsls	r0, r2, #3
 80217ec:	4602      	mov	r2, r0
 80217ee:	460b      	mov	r3, r1
 80217f0:	1911      	adds	r1, r2, r4
 80217f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80217f4:	416b      	adcs	r3, r5
 80217f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80217f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80217fa:	685b      	ldr	r3, [r3, #4]
 80217fc:	461a      	mov	r2, r3
 80217fe:	f04f 0300 	mov.w	r3, #0
 8021802:	1891      	adds	r1, r2, r2
 8021804:	62b9      	str	r1, [r7, #40]	; 0x28
 8021806:	415b      	adcs	r3, r3
 8021808:	62fb      	str	r3, [r7, #44]	; 0x2c
 802180a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802180e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8021812:	f7df fb3f 	bl	8000e94 <__aeabi_uldivmod>
 8021816:	4602      	mov	r2, r0
 8021818:	460b      	mov	r3, r1
 802181a:	4b8c      	ldr	r3, [pc, #560]	; (8021a4c <UART_SetConfig+0x38c>)
 802181c:	fba3 1302 	umull	r1, r3, r3, r2
 8021820:	095b      	lsrs	r3, r3, #5
 8021822:	2164      	movs	r1, #100	; 0x64
 8021824:	fb01 f303 	mul.w	r3, r1, r3
 8021828:	1ad3      	subs	r3, r2, r3
 802182a:	00db      	lsls	r3, r3, #3
 802182c:	3332      	adds	r3, #50	; 0x32
 802182e:	4a87      	ldr	r2, [pc, #540]	; (8021a4c <UART_SetConfig+0x38c>)
 8021830:	fba2 2303 	umull	r2, r3, r2, r3
 8021834:	095b      	lsrs	r3, r3, #5
 8021836:	005b      	lsls	r3, r3, #1
 8021838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802183c:	441e      	add	r6, r3
 802183e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021840:	4618      	mov	r0, r3
 8021842:	f04f 0100 	mov.w	r1, #0
 8021846:	4602      	mov	r2, r0
 8021848:	460b      	mov	r3, r1
 802184a:	1894      	adds	r4, r2, r2
 802184c:	623c      	str	r4, [r7, #32]
 802184e:	415b      	adcs	r3, r3
 8021850:	627b      	str	r3, [r7, #36]	; 0x24
 8021852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021856:	1812      	adds	r2, r2, r0
 8021858:	eb41 0303 	adc.w	r3, r1, r3
 802185c:	f04f 0400 	mov.w	r4, #0
 8021860:	f04f 0500 	mov.w	r5, #0
 8021864:	00dd      	lsls	r5, r3, #3
 8021866:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802186a:	00d4      	lsls	r4, r2, #3
 802186c:	4622      	mov	r2, r4
 802186e:	462b      	mov	r3, r5
 8021870:	1814      	adds	r4, r2, r0
 8021872:	653c      	str	r4, [r7, #80]	; 0x50
 8021874:	414b      	adcs	r3, r1
 8021876:	657b      	str	r3, [r7, #84]	; 0x54
 8021878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802187a:	685b      	ldr	r3, [r3, #4]
 802187c:	461a      	mov	r2, r3
 802187e:	f04f 0300 	mov.w	r3, #0
 8021882:	1891      	adds	r1, r2, r2
 8021884:	61b9      	str	r1, [r7, #24]
 8021886:	415b      	adcs	r3, r3
 8021888:	61fb      	str	r3, [r7, #28]
 802188a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802188e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8021892:	f7df faff 	bl	8000e94 <__aeabi_uldivmod>
 8021896:	4602      	mov	r2, r0
 8021898:	460b      	mov	r3, r1
 802189a:	4b6c      	ldr	r3, [pc, #432]	; (8021a4c <UART_SetConfig+0x38c>)
 802189c:	fba3 1302 	umull	r1, r3, r3, r2
 80218a0:	095b      	lsrs	r3, r3, #5
 80218a2:	2164      	movs	r1, #100	; 0x64
 80218a4:	fb01 f303 	mul.w	r3, r1, r3
 80218a8:	1ad3      	subs	r3, r2, r3
 80218aa:	00db      	lsls	r3, r3, #3
 80218ac:	3332      	adds	r3, #50	; 0x32
 80218ae:	4a67      	ldr	r2, [pc, #412]	; (8021a4c <UART_SetConfig+0x38c>)
 80218b0:	fba2 2303 	umull	r2, r3, r2, r3
 80218b4:	095b      	lsrs	r3, r3, #5
 80218b6:	f003 0207 	and.w	r2, r3, #7
 80218ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	4432      	add	r2, r6
 80218c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80218c2:	e0b9      	b.n	8021a38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80218c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80218c6:	461c      	mov	r4, r3
 80218c8:	f04f 0500 	mov.w	r5, #0
 80218cc:	4622      	mov	r2, r4
 80218ce:	462b      	mov	r3, r5
 80218d0:	1891      	adds	r1, r2, r2
 80218d2:	6139      	str	r1, [r7, #16]
 80218d4:	415b      	adcs	r3, r3
 80218d6:	617b      	str	r3, [r7, #20]
 80218d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80218dc:	1912      	adds	r2, r2, r4
 80218de:	eb45 0303 	adc.w	r3, r5, r3
 80218e2:	f04f 0000 	mov.w	r0, #0
 80218e6:	f04f 0100 	mov.w	r1, #0
 80218ea:	00d9      	lsls	r1, r3, #3
 80218ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80218f0:	00d0      	lsls	r0, r2, #3
 80218f2:	4602      	mov	r2, r0
 80218f4:	460b      	mov	r3, r1
 80218f6:	eb12 0804 	adds.w	r8, r2, r4
 80218fa:	eb43 0905 	adc.w	r9, r3, r5
 80218fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021900:	685b      	ldr	r3, [r3, #4]
 8021902:	4618      	mov	r0, r3
 8021904:	f04f 0100 	mov.w	r1, #0
 8021908:	f04f 0200 	mov.w	r2, #0
 802190c:	f04f 0300 	mov.w	r3, #0
 8021910:	008b      	lsls	r3, r1, #2
 8021912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021916:	0082      	lsls	r2, r0, #2
 8021918:	4640      	mov	r0, r8
 802191a:	4649      	mov	r1, r9
 802191c:	f7df faba 	bl	8000e94 <__aeabi_uldivmod>
 8021920:	4602      	mov	r2, r0
 8021922:	460b      	mov	r3, r1
 8021924:	4b49      	ldr	r3, [pc, #292]	; (8021a4c <UART_SetConfig+0x38c>)
 8021926:	fba3 2302 	umull	r2, r3, r3, r2
 802192a:	095b      	lsrs	r3, r3, #5
 802192c:	011e      	lsls	r6, r3, #4
 802192e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021930:	4618      	mov	r0, r3
 8021932:	f04f 0100 	mov.w	r1, #0
 8021936:	4602      	mov	r2, r0
 8021938:	460b      	mov	r3, r1
 802193a:	1894      	adds	r4, r2, r2
 802193c:	60bc      	str	r4, [r7, #8]
 802193e:	415b      	adcs	r3, r3
 8021940:	60fb      	str	r3, [r7, #12]
 8021942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021946:	1812      	adds	r2, r2, r0
 8021948:	eb41 0303 	adc.w	r3, r1, r3
 802194c:	f04f 0400 	mov.w	r4, #0
 8021950:	f04f 0500 	mov.w	r5, #0
 8021954:	00dd      	lsls	r5, r3, #3
 8021956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802195a:	00d4      	lsls	r4, r2, #3
 802195c:	4622      	mov	r2, r4
 802195e:	462b      	mov	r3, r5
 8021960:	1814      	adds	r4, r2, r0
 8021962:	64bc      	str	r4, [r7, #72]	; 0x48
 8021964:	414b      	adcs	r3, r1
 8021966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802196a:	685b      	ldr	r3, [r3, #4]
 802196c:	4618      	mov	r0, r3
 802196e:	f04f 0100 	mov.w	r1, #0
 8021972:	f04f 0200 	mov.w	r2, #0
 8021976:	f04f 0300 	mov.w	r3, #0
 802197a:	008b      	lsls	r3, r1, #2
 802197c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021980:	0082      	lsls	r2, r0, #2
 8021982:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8021986:	f7df fa85 	bl	8000e94 <__aeabi_uldivmod>
 802198a:	4602      	mov	r2, r0
 802198c:	460b      	mov	r3, r1
 802198e:	4b2f      	ldr	r3, [pc, #188]	; (8021a4c <UART_SetConfig+0x38c>)
 8021990:	fba3 1302 	umull	r1, r3, r3, r2
 8021994:	095b      	lsrs	r3, r3, #5
 8021996:	2164      	movs	r1, #100	; 0x64
 8021998:	fb01 f303 	mul.w	r3, r1, r3
 802199c:	1ad3      	subs	r3, r2, r3
 802199e:	011b      	lsls	r3, r3, #4
 80219a0:	3332      	adds	r3, #50	; 0x32
 80219a2:	4a2a      	ldr	r2, [pc, #168]	; (8021a4c <UART_SetConfig+0x38c>)
 80219a4:	fba2 2303 	umull	r2, r3, r2, r3
 80219a8:	095b      	lsrs	r3, r3, #5
 80219aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80219ae:	441e      	add	r6, r3
 80219b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80219b2:	4618      	mov	r0, r3
 80219b4:	f04f 0100 	mov.w	r1, #0
 80219b8:	4602      	mov	r2, r0
 80219ba:	460b      	mov	r3, r1
 80219bc:	1894      	adds	r4, r2, r2
 80219be:	603c      	str	r4, [r7, #0]
 80219c0:	415b      	adcs	r3, r3
 80219c2:	607b      	str	r3, [r7, #4]
 80219c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80219c8:	1812      	adds	r2, r2, r0
 80219ca:	eb41 0303 	adc.w	r3, r1, r3
 80219ce:	f04f 0400 	mov.w	r4, #0
 80219d2:	f04f 0500 	mov.w	r5, #0
 80219d6:	00dd      	lsls	r5, r3, #3
 80219d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80219dc:	00d4      	lsls	r4, r2, #3
 80219de:	4622      	mov	r2, r4
 80219e0:	462b      	mov	r3, r5
 80219e2:	eb12 0a00 	adds.w	sl, r2, r0
 80219e6:	eb43 0b01 	adc.w	fp, r3, r1
 80219ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80219ec:	685b      	ldr	r3, [r3, #4]
 80219ee:	4618      	mov	r0, r3
 80219f0:	f04f 0100 	mov.w	r1, #0
 80219f4:	f04f 0200 	mov.w	r2, #0
 80219f8:	f04f 0300 	mov.w	r3, #0
 80219fc:	008b      	lsls	r3, r1, #2
 80219fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021a02:	0082      	lsls	r2, r0, #2
 8021a04:	4650      	mov	r0, sl
 8021a06:	4659      	mov	r1, fp
 8021a08:	f7df fa44 	bl	8000e94 <__aeabi_uldivmod>
 8021a0c:	4602      	mov	r2, r0
 8021a0e:	460b      	mov	r3, r1
 8021a10:	4b0e      	ldr	r3, [pc, #56]	; (8021a4c <UART_SetConfig+0x38c>)
 8021a12:	fba3 1302 	umull	r1, r3, r3, r2
 8021a16:	095b      	lsrs	r3, r3, #5
 8021a18:	2164      	movs	r1, #100	; 0x64
 8021a1a:	fb01 f303 	mul.w	r3, r1, r3
 8021a1e:	1ad3      	subs	r3, r2, r3
 8021a20:	011b      	lsls	r3, r3, #4
 8021a22:	3332      	adds	r3, #50	; 0x32
 8021a24:	4a09      	ldr	r2, [pc, #36]	; (8021a4c <UART_SetConfig+0x38c>)
 8021a26:	fba2 2303 	umull	r2, r3, r2, r3
 8021a2a:	095b      	lsrs	r3, r3, #5
 8021a2c:	f003 020f 	and.w	r2, r3, #15
 8021a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	4432      	add	r2, r6
 8021a36:	609a      	str	r2, [r3, #8]
}
 8021a38:	bf00      	nop
 8021a3a:	377c      	adds	r7, #124	; 0x7c
 8021a3c:	46bd      	mov	sp, r7
 8021a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a42:	bf00      	nop
 8021a44:	40011000 	.word	0x40011000
 8021a48:	40011400 	.word	0x40011400
 8021a4c:	51eb851f 	.word	0x51eb851f

08021a50 <atoi>:
 8021a50:	220a      	movs	r2, #10
 8021a52:	2100      	movs	r1, #0
 8021a54:	f000 ba32 	b.w	8021ebc <strtol>

08021a58 <calloc>:
 8021a58:	4b02      	ldr	r3, [pc, #8]	; (8021a64 <calloc+0xc>)
 8021a5a:	460a      	mov	r2, r1
 8021a5c:	4601      	mov	r1, r0
 8021a5e:	6818      	ldr	r0, [r3, #0]
 8021a60:	f000 b852 	b.w	8021b08 <_calloc_r>
 8021a64:	20000098 	.word	0x20000098

08021a68 <__errno>:
 8021a68:	4b01      	ldr	r3, [pc, #4]	; (8021a70 <__errno+0x8>)
 8021a6a:	6818      	ldr	r0, [r3, #0]
 8021a6c:	4770      	bx	lr
 8021a6e:	bf00      	nop
 8021a70:	20000098 	.word	0x20000098

08021a74 <__libc_init_array>:
 8021a74:	b570      	push	{r4, r5, r6, lr}
 8021a76:	4d0d      	ldr	r5, [pc, #52]	; (8021aac <__libc_init_array+0x38>)
 8021a78:	4c0d      	ldr	r4, [pc, #52]	; (8021ab0 <__libc_init_array+0x3c>)
 8021a7a:	1b64      	subs	r4, r4, r5
 8021a7c:	10a4      	asrs	r4, r4, #2
 8021a7e:	2600      	movs	r6, #0
 8021a80:	42a6      	cmp	r6, r4
 8021a82:	d109      	bne.n	8021a98 <__libc_init_array+0x24>
 8021a84:	4d0b      	ldr	r5, [pc, #44]	; (8021ab4 <__libc_init_array+0x40>)
 8021a86:	4c0c      	ldr	r4, [pc, #48]	; (8021ab8 <__libc_init_array+0x44>)
 8021a88:	f002 ff36 	bl	80248f8 <_init>
 8021a8c:	1b64      	subs	r4, r4, r5
 8021a8e:	10a4      	asrs	r4, r4, #2
 8021a90:	2600      	movs	r6, #0
 8021a92:	42a6      	cmp	r6, r4
 8021a94:	d105      	bne.n	8021aa2 <__libc_init_array+0x2e>
 8021a96:	bd70      	pop	{r4, r5, r6, pc}
 8021a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a9c:	4798      	blx	r3
 8021a9e:	3601      	adds	r6, #1
 8021aa0:	e7ee      	b.n	8021a80 <__libc_init_array+0xc>
 8021aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8021aa6:	4798      	blx	r3
 8021aa8:	3601      	adds	r6, #1
 8021aaa:	e7f2      	b.n	8021a92 <__libc_init_array+0x1e>
 8021aac:	080286c0 	.word	0x080286c0
 8021ab0:	080286c0 	.word	0x080286c0
 8021ab4:	080286c0 	.word	0x080286c0
 8021ab8:	080286c4 	.word	0x080286c4

08021abc <malloc>:
 8021abc:	4b02      	ldr	r3, [pc, #8]	; (8021ac8 <malloc+0xc>)
 8021abe:	4601      	mov	r1, r0
 8021ac0:	6818      	ldr	r0, [r3, #0]
 8021ac2:	f000 b881 	b.w	8021bc8 <_malloc_r>
 8021ac6:	bf00      	nop
 8021ac8:	20000098 	.word	0x20000098

08021acc <free>:
 8021acc:	4b02      	ldr	r3, [pc, #8]	; (8021ad8 <free+0xc>)
 8021ace:	4601      	mov	r1, r0
 8021ad0:	6818      	ldr	r0, [r3, #0]
 8021ad2:	f000 b829 	b.w	8021b28 <_free_r>
 8021ad6:	bf00      	nop
 8021ad8:	20000098 	.word	0x20000098

08021adc <memcpy>:
 8021adc:	440a      	add	r2, r1
 8021ade:	4291      	cmp	r1, r2
 8021ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8021ae4:	d100      	bne.n	8021ae8 <memcpy+0xc>
 8021ae6:	4770      	bx	lr
 8021ae8:	b510      	push	{r4, lr}
 8021aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021af2:	4291      	cmp	r1, r2
 8021af4:	d1f9      	bne.n	8021aea <memcpy+0xe>
 8021af6:	bd10      	pop	{r4, pc}

08021af8 <memset>:
 8021af8:	4402      	add	r2, r0
 8021afa:	4603      	mov	r3, r0
 8021afc:	4293      	cmp	r3, r2
 8021afe:	d100      	bne.n	8021b02 <memset+0xa>
 8021b00:	4770      	bx	lr
 8021b02:	f803 1b01 	strb.w	r1, [r3], #1
 8021b06:	e7f9      	b.n	8021afc <memset+0x4>

08021b08 <_calloc_r>:
 8021b08:	b513      	push	{r0, r1, r4, lr}
 8021b0a:	434a      	muls	r2, r1
 8021b0c:	4611      	mov	r1, r2
 8021b0e:	9201      	str	r2, [sp, #4]
 8021b10:	f000 f85a 	bl	8021bc8 <_malloc_r>
 8021b14:	4604      	mov	r4, r0
 8021b16:	b118      	cbz	r0, 8021b20 <_calloc_r+0x18>
 8021b18:	9a01      	ldr	r2, [sp, #4]
 8021b1a:	2100      	movs	r1, #0
 8021b1c:	f7ff ffec 	bl	8021af8 <memset>
 8021b20:	4620      	mov	r0, r4
 8021b22:	b002      	add	sp, #8
 8021b24:	bd10      	pop	{r4, pc}
	...

08021b28 <_free_r>:
 8021b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b2a:	2900      	cmp	r1, #0
 8021b2c:	d048      	beq.n	8021bc0 <_free_r+0x98>
 8021b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b32:	9001      	str	r0, [sp, #4]
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	f1a1 0404 	sub.w	r4, r1, #4
 8021b3a:	bfb8      	it	lt
 8021b3c:	18e4      	addlt	r4, r4, r3
 8021b3e:	f000 f9c7 	bl	8021ed0 <__malloc_lock>
 8021b42:	4a20      	ldr	r2, [pc, #128]	; (8021bc4 <_free_r+0x9c>)
 8021b44:	9801      	ldr	r0, [sp, #4]
 8021b46:	6813      	ldr	r3, [r2, #0]
 8021b48:	4615      	mov	r5, r2
 8021b4a:	b933      	cbnz	r3, 8021b5a <_free_r+0x32>
 8021b4c:	6063      	str	r3, [r4, #4]
 8021b4e:	6014      	str	r4, [r2, #0]
 8021b50:	b003      	add	sp, #12
 8021b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b56:	f000 b9c1 	b.w	8021edc <__malloc_unlock>
 8021b5a:	42a3      	cmp	r3, r4
 8021b5c:	d90b      	bls.n	8021b76 <_free_r+0x4e>
 8021b5e:	6821      	ldr	r1, [r4, #0]
 8021b60:	1862      	adds	r2, r4, r1
 8021b62:	4293      	cmp	r3, r2
 8021b64:	bf04      	itt	eq
 8021b66:	681a      	ldreq	r2, [r3, #0]
 8021b68:	685b      	ldreq	r3, [r3, #4]
 8021b6a:	6063      	str	r3, [r4, #4]
 8021b6c:	bf04      	itt	eq
 8021b6e:	1852      	addeq	r2, r2, r1
 8021b70:	6022      	streq	r2, [r4, #0]
 8021b72:	602c      	str	r4, [r5, #0]
 8021b74:	e7ec      	b.n	8021b50 <_free_r+0x28>
 8021b76:	461a      	mov	r2, r3
 8021b78:	685b      	ldr	r3, [r3, #4]
 8021b7a:	b10b      	cbz	r3, 8021b80 <_free_r+0x58>
 8021b7c:	42a3      	cmp	r3, r4
 8021b7e:	d9fa      	bls.n	8021b76 <_free_r+0x4e>
 8021b80:	6811      	ldr	r1, [r2, #0]
 8021b82:	1855      	adds	r5, r2, r1
 8021b84:	42a5      	cmp	r5, r4
 8021b86:	d10b      	bne.n	8021ba0 <_free_r+0x78>
 8021b88:	6824      	ldr	r4, [r4, #0]
 8021b8a:	4421      	add	r1, r4
 8021b8c:	1854      	adds	r4, r2, r1
 8021b8e:	42a3      	cmp	r3, r4
 8021b90:	6011      	str	r1, [r2, #0]
 8021b92:	d1dd      	bne.n	8021b50 <_free_r+0x28>
 8021b94:	681c      	ldr	r4, [r3, #0]
 8021b96:	685b      	ldr	r3, [r3, #4]
 8021b98:	6053      	str	r3, [r2, #4]
 8021b9a:	4421      	add	r1, r4
 8021b9c:	6011      	str	r1, [r2, #0]
 8021b9e:	e7d7      	b.n	8021b50 <_free_r+0x28>
 8021ba0:	d902      	bls.n	8021ba8 <_free_r+0x80>
 8021ba2:	230c      	movs	r3, #12
 8021ba4:	6003      	str	r3, [r0, #0]
 8021ba6:	e7d3      	b.n	8021b50 <_free_r+0x28>
 8021ba8:	6825      	ldr	r5, [r4, #0]
 8021baa:	1961      	adds	r1, r4, r5
 8021bac:	428b      	cmp	r3, r1
 8021bae:	bf04      	itt	eq
 8021bb0:	6819      	ldreq	r1, [r3, #0]
 8021bb2:	685b      	ldreq	r3, [r3, #4]
 8021bb4:	6063      	str	r3, [r4, #4]
 8021bb6:	bf04      	itt	eq
 8021bb8:	1949      	addeq	r1, r1, r5
 8021bba:	6021      	streq	r1, [r4, #0]
 8021bbc:	6054      	str	r4, [r2, #4]
 8021bbe:	e7c7      	b.n	8021b50 <_free_r+0x28>
 8021bc0:	b003      	add	sp, #12
 8021bc2:	bd30      	pop	{r4, r5, pc}
 8021bc4:	200014f4 	.word	0x200014f4

08021bc8 <_malloc_r>:
 8021bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bca:	1ccd      	adds	r5, r1, #3
 8021bcc:	f025 0503 	bic.w	r5, r5, #3
 8021bd0:	3508      	adds	r5, #8
 8021bd2:	2d0c      	cmp	r5, #12
 8021bd4:	bf38      	it	cc
 8021bd6:	250c      	movcc	r5, #12
 8021bd8:	2d00      	cmp	r5, #0
 8021bda:	4606      	mov	r6, r0
 8021bdc:	db01      	blt.n	8021be2 <_malloc_r+0x1a>
 8021bde:	42a9      	cmp	r1, r5
 8021be0:	d903      	bls.n	8021bea <_malloc_r+0x22>
 8021be2:	230c      	movs	r3, #12
 8021be4:	6033      	str	r3, [r6, #0]
 8021be6:	2000      	movs	r0, #0
 8021be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021bea:	f000 f971 	bl	8021ed0 <__malloc_lock>
 8021bee:	4921      	ldr	r1, [pc, #132]	; (8021c74 <_malloc_r+0xac>)
 8021bf0:	680a      	ldr	r2, [r1, #0]
 8021bf2:	4614      	mov	r4, r2
 8021bf4:	b99c      	cbnz	r4, 8021c1e <_malloc_r+0x56>
 8021bf6:	4f20      	ldr	r7, [pc, #128]	; (8021c78 <_malloc_r+0xb0>)
 8021bf8:	683b      	ldr	r3, [r7, #0]
 8021bfa:	b923      	cbnz	r3, 8021c06 <_malloc_r+0x3e>
 8021bfc:	4621      	mov	r1, r4
 8021bfe:	4630      	mov	r0, r6
 8021c00:	f000 f83c 	bl	8021c7c <_sbrk_r>
 8021c04:	6038      	str	r0, [r7, #0]
 8021c06:	4629      	mov	r1, r5
 8021c08:	4630      	mov	r0, r6
 8021c0a:	f000 f837 	bl	8021c7c <_sbrk_r>
 8021c0e:	1c43      	adds	r3, r0, #1
 8021c10:	d123      	bne.n	8021c5a <_malloc_r+0x92>
 8021c12:	230c      	movs	r3, #12
 8021c14:	6033      	str	r3, [r6, #0]
 8021c16:	4630      	mov	r0, r6
 8021c18:	f000 f960 	bl	8021edc <__malloc_unlock>
 8021c1c:	e7e3      	b.n	8021be6 <_malloc_r+0x1e>
 8021c1e:	6823      	ldr	r3, [r4, #0]
 8021c20:	1b5b      	subs	r3, r3, r5
 8021c22:	d417      	bmi.n	8021c54 <_malloc_r+0x8c>
 8021c24:	2b0b      	cmp	r3, #11
 8021c26:	d903      	bls.n	8021c30 <_malloc_r+0x68>
 8021c28:	6023      	str	r3, [r4, #0]
 8021c2a:	441c      	add	r4, r3
 8021c2c:	6025      	str	r5, [r4, #0]
 8021c2e:	e004      	b.n	8021c3a <_malloc_r+0x72>
 8021c30:	6863      	ldr	r3, [r4, #4]
 8021c32:	42a2      	cmp	r2, r4
 8021c34:	bf0c      	ite	eq
 8021c36:	600b      	streq	r3, [r1, #0]
 8021c38:	6053      	strne	r3, [r2, #4]
 8021c3a:	4630      	mov	r0, r6
 8021c3c:	f000 f94e 	bl	8021edc <__malloc_unlock>
 8021c40:	f104 000b 	add.w	r0, r4, #11
 8021c44:	1d23      	adds	r3, r4, #4
 8021c46:	f020 0007 	bic.w	r0, r0, #7
 8021c4a:	1ac2      	subs	r2, r0, r3
 8021c4c:	d0cc      	beq.n	8021be8 <_malloc_r+0x20>
 8021c4e:	1a1b      	subs	r3, r3, r0
 8021c50:	50a3      	str	r3, [r4, r2]
 8021c52:	e7c9      	b.n	8021be8 <_malloc_r+0x20>
 8021c54:	4622      	mov	r2, r4
 8021c56:	6864      	ldr	r4, [r4, #4]
 8021c58:	e7cc      	b.n	8021bf4 <_malloc_r+0x2c>
 8021c5a:	1cc4      	adds	r4, r0, #3
 8021c5c:	f024 0403 	bic.w	r4, r4, #3
 8021c60:	42a0      	cmp	r0, r4
 8021c62:	d0e3      	beq.n	8021c2c <_malloc_r+0x64>
 8021c64:	1a21      	subs	r1, r4, r0
 8021c66:	4630      	mov	r0, r6
 8021c68:	f000 f808 	bl	8021c7c <_sbrk_r>
 8021c6c:	3001      	adds	r0, #1
 8021c6e:	d1dd      	bne.n	8021c2c <_malloc_r+0x64>
 8021c70:	e7cf      	b.n	8021c12 <_malloc_r+0x4a>
 8021c72:	bf00      	nop
 8021c74:	200014f4 	.word	0x200014f4
 8021c78:	200014f8 	.word	0x200014f8

08021c7c <_sbrk_r>:
 8021c7c:	b538      	push	{r3, r4, r5, lr}
 8021c7e:	4d06      	ldr	r5, [pc, #24]	; (8021c98 <_sbrk_r+0x1c>)
 8021c80:	2300      	movs	r3, #0
 8021c82:	4604      	mov	r4, r0
 8021c84:	4608      	mov	r0, r1
 8021c86:	602b      	str	r3, [r5, #0]
 8021c88:	f7e1 ffe2 	bl	8003c50 <_sbrk>
 8021c8c:	1c43      	adds	r3, r0, #1
 8021c8e:	d102      	bne.n	8021c96 <_sbrk_r+0x1a>
 8021c90:	682b      	ldr	r3, [r5, #0]
 8021c92:	b103      	cbz	r3, 8021c96 <_sbrk_r+0x1a>
 8021c94:	6023      	str	r3, [r4, #0]
 8021c96:	bd38      	pop	{r3, r4, r5, pc}
 8021c98:	20002280 	.word	0x20002280

08021c9c <strcasecmp>:
 8021c9c:	b570      	push	{r4, r5, r6, lr}
 8021c9e:	4d0c      	ldr	r5, [pc, #48]	; (8021cd0 <strcasecmp+0x34>)
 8021ca0:	4604      	mov	r4, r0
 8021ca2:	462e      	mov	r6, r5
 8021ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021ca8:	5d5a      	ldrb	r2, [r3, r5]
 8021caa:	f002 0203 	and.w	r2, r2, #3
 8021cae:	2a01      	cmp	r2, #1
 8021cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021cb4:	5cb0      	ldrb	r0, [r6, r2]
 8021cb6:	f000 0003 	and.w	r0, r0, #3
 8021cba:	bf08      	it	eq
 8021cbc:	3320      	addeq	r3, #32
 8021cbe:	2801      	cmp	r0, #1
 8021cc0:	bf08      	it	eq
 8021cc2:	3220      	addeq	r2, #32
 8021cc4:	1a98      	subs	r0, r3, r2
 8021cc6:	d101      	bne.n	8021ccc <strcasecmp+0x30>
 8021cc8:	2a00      	cmp	r2, #0
 8021cca:	d1eb      	bne.n	8021ca4 <strcasecmp+0x8>
 8021ccc:	bd70      	pop	{r4, r5, r6, pc}
 8021cce:	bf00      	nop
 8021cd0:	08027fa5 	.word	0x08027fa5

08021cd4 <strcat>:
 8021cd4:	b510      	push	{r4, lr}
 8021cd6:	4602      	mov	r2, r0
 8021cd8:	7814      	ldrb	r4, [r2, #0]
 8021cda:	4613      	mov	r3, r2
 8021cdc:	3201      	adds	r2, #1
 8021cde:	2c00      	cmp	r4, #0
 8021ce0:	d1fa      	bne.n	8021cd8 <strcat+0x4>
 8021ce2:	3b01      	subs	r3, #1
 8021ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ce8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021cec:	2a00      	cmp	r2, #0
 8021cee:	d1f9      	bne.n	8021ce4 <strcat+0x10>
 8021cf0:	bd10      	pop	{r4, pc}

08021cf2 <strchr>:
 8021cf2:	b2c9      	uxtb	r1, r1
 8021cf4:	4603      	mov	r3, r0
 8021cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021cfa:	b11a      	cbz	r2, 8021d04 <strchr+0x12>
 8021cfc:	428a      	cmp	r2, r1
 8021cfe:	d1f9      	bne.n	8021cf4 <strchr+0x2>
 8021d00:	4618      	mov	r0, r3
 8021d02:	4770      	bx	lr
 8021d04:	2900      	cmp	r1, #0
 8021d06:	bf18      	it	ne
 8021d08:	2300      	movne	r3, #0
 8021d0a:	e7f9      	b.n	8021d00 <strchr+0xe>

08021d0c <strcpy>:
 8021d0c:	4603      	mov	r3, r0
 8021d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d12:	f803 2b01 	strb.w	r2, [r3], #1
 8021d16:	2a00      	cmp	r2, #0
 8021d18:	d1f9      	bne.n	8021d0e <strcpy+0x2>
 8021d1a:	4770      	bx	lr

08021d1c <strncasecmp>:
 8021d1c:	b570      	push	{r4, r5, r6, lr}
 8021d1e:	4e0f      	ldr	r6, [pc, #60]	; (8021d5c <strncasecmp+0x40>)
 8021d20:	4604      	mov	r4, r0
 8021d22:	440a      	add	r2, r1
 8021d24:	428a      	cmp	r2, r1
 8021d26:	d101      	bne.n	8021d2c <strncasecmp+0x10>
 8021d28:	2000      	movs	r0, #0
 8021d2a:	e013      	b.n	8021d54 <strncasecmp+0x38>
 8021d2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021d30:	5d98      	ldrb	r0, [r3, r6]
 8021d32:	f000 0003 	and.w	r0, r0, #3
 8021d36:	2801      	cmp	r0, #1
 8021d38:	f811 0b01 	ldrb.w	r0, [r1], #1
 8021d3c:	5c35      	ldrb	r5, [r6, r0]
 8021d3e:	f005 0503 	and.w	r5, r5, #3
 8021d42:	bf08      	it	eq
 8021d44:	3320      	addeq	r3, #32
 8021d46:	2d01      	cmp	r5, #1
 8021d48:	bf08      	it	eq
 8021d4a:	3020      	addeq	r0, #32
 8021d4c:	1a1b      	subs	r3, r3, r0
 8021d4e:	d102      	bne.n	8021d56 <strncasecmp+0x3a>
 8021d50:	2800      	cmp	r0, #0
 8021d52:	d1e7      	bne.n	8021d24 <strncasecmp+0x8>
 8021d54:	bd70      	pop	{r4, r5, r6, pc}
 8021d56:	4618      	mov	r0, r3
 8021d58:	e7fc      	b.n	8021d54 <strncasecmp+0x38>
 8021d5a:	bf00      	nop
 8021d5c:	08027fa5 	.word	0x08027fa5

08021d60 <strncpy>:
 8021d60:	b510      	push	{r4, lr}
 8021d62:	3901      	subs	r1, #1
 8021d64:	4603      	mov	r3, r0
 8021d66:	b132      	cbz	r2, 8021d76 <strncpy+0x16>
 8021d68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021d6c:	f803 4b01 	strb.w	r4, [r3], #1
 8021d70:	3a01      	subs	r2, #1
 8021d72:	2c00      	cmp	r4, #0
 8021d74:	d1f7      	bne.n	8021d66 <strncpy+0x6>
 8021d76:	441a      	add	r2, r3
 8021d78:	2100      	movs	r1, #0
 8021d7a:	4293      	cmp	r3, r2
 8021d7c:	d100      	bne.n	8021d80 <strncpy+0x20>
 8021d7e:	bd10      	pop	{r4, pc}
 8021d80:	f803 1b01 	strb.w	r1, [r3], #1
 8021d84:	e7f9      	b.n	8021d7a <strncpy+0x1a>

08021d86 <strstr>:
 8021d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d88:	780c      	ldrb	r4, [r1, #0]
 8021d8a:	b164      	cbz	r4, 8021da6 <strstr+0x20>
 8021d8c:	4603      	mov	r3, r0
 8021d8e:	781a      	ldrb	r2, [r3, #0]
 8021d90:	4618      	mov	r0, r3
 8021d92:	1c5e      	adds	r6, r3, #1
 8021d94:	b90a      	cbnz	r2, 8021d9a <strstr+0x14>
 8021d96:	4610      	mov	r0, r2
 8021d98:	e005      	b.n	8021da6 <strstr+0x20>
 8021d9a:	4294      	cmp	r4, r2
 8021d9c:	d108      	bne.n	8021db0 <strstr+0x2a>
 8021d9e:	460d      	mov	r5, r1
 8021da0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021da4:	b902      	cbnz	r2, 8021da8 <strstr+0x22>
 8021da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021da8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8021dac:	4297      	cmp	r7, r2
 8021dae:	d0f7      	beq.n	8021da0 <strstr+0x1a>
 8021db0:	4633      	mov	r3, r6
 8021db2:	e7ec      	b.n	8021d8e <strstr+0x8>

08021db4 <_strtol_l.isra.0>:
 8021db4:	2b01      	cmp	r3, #1
 8021db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dba:	d001      	beq.n	8021dc0 <_strtol_l.isra.0+0xc>
 8021dbc:	2b24      	cmp	r3, #36	; 0x24
 8021dbe:	d906      	bls.n	8021dce <_strtol_l.isra.0+0x1a>
 8021dc0:	f7ff fe52 	bl	8021a68 <__errno>
 8021dc4:	2316      	movs	r3, #22
 8021dc6:	6003      	str	r3, [r0, #0]
 8021dc8:	2000      	movs	r0, #0
 8021dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dce:	4f3a      	ldr	r7, [pc, #232]	; (8021eb8 <_strtol_l.isra.0+0x104>)
 8021dd0:	468e      	mov	lr, r1
 8021dd2:	4676      	mov	r6, lr
 8021dd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021dd8:	5de5      	ldrb	r5, [r4, r7]
 8021dda:	f015 0508 	ands.w	r5, r5, #8
 8021dde:	d1f8      	bne.n	8021dd2 <_strtol_l.isra.0+0x1e>
 8021de0:	2c2d      	cmp	r4, #45	; 0x2d
 8021de2:	d134      	bne.n	8021e4e <_strtol_l.isra.0+0x9a>
 8021de4:	f89e 4000 	ldrb.w	r4, [lr]
 8021de8:	f04f 0801 	mov.w	r8, #1
 8021dec:	f106 0e02 	add.w	lr, r6, #2
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d05c      	beq.n	8021eae <_strtol_l.isra.0+0xfa>
 8021df4:	2b10      	cmp	r3, #16
 8021df6:	d10c      	bne.n	8021e12 <_strtol_l.isra.0+0x5e>
 8021df8:	2c30      	cmp	r4, #48	; 0x30
 8021dfa:	d10a      	bne.n	8021e12 <_strtol_l.isra.0+0x5e>
 8021dfc:	f89e 4000 	ldrb.w	r4, [lr]
 8021e00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021e04:	2c58      	cmp	r4, #88	; 0x58
 8021e06:	d14d      	bne.n	8021ea4 <_strtol_l.isra.0+0xf0>
 8021e08:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021e0c:	2310      	movs	r3, #16
 8021e0e:	f10e 0e02 	add.w	lr, lr, #2
 8021e12:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021e16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021e1a:	2600      	movs	r6, #0
 8021e1c:	fbbc f9f3 	udiv	r9, ip, r3
 8021e20:	4635      	mov	r5, r6
 8021e22:	fb03 ca19 	mls	sl, r3, r9, ip
 8021e26:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021e2a:	2f09      	cmp	r7, #9
 8021e2c:	d818      	bhi.n	8021e60 <_strtol_l.isra.0+0xac>
 8021e2e:	463c      	mov	r4, r7
 8021e30:	42a3      	cmp	r3, r4
 8021e32:	dd24      	ble.n	8021e7e <_strtol_l.isra.0+0xca>
 8021e34:	2e00      	cmp	r6, #0
 8021e36:	db1f      	blt.n	8021e78 <_strtol_l.isra.0+0xc4>
 8021e38:	45a9      	cmp	r9, r5
 8021e3a:	d31d      	bcc.n	8021e78 <_strtol_l.isra.0+0xc4>
 8021e3c:	d101      	bne.n	8021e42 <_strtol_l.isra.0+0x8e>
 8021e3e:	45a2      	cmp	sl, r4
 8021e40:	db1a      	blt.n	8021e78 <_strtol_l.isra.0+0xc4>
 8021e42:	fb05 4503 	mla	r5, r5, r3, r4
 8021e46:	2601      	movs	r6, #1
 8021e48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021e4c:	e7eb      	b.n	8021e26 <_strtol_l.isra.0+0x72>
 8021e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8021e50:	bf08      	it	eq
 8021e52:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021e56:	46a8      	mov	r8, r5
 8021e58:	bf08      	it	eq
 8021e5a:	f106 0e02 	addeq.w	lr, r6, #2
 8021e5e:	e7c7      	b.n	8021df0 <_strtol_l.isra.0+0x3c>
 8021e60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021e64:	2f19      	cmp	r7, #25
 8021e66:	d801      	bhi.n	8021e6c <_strtol_l.isra.0+0xb8>
 8021e68:	3c37      	subs	r4, #55	; 0x37
 8021e6a:	e7e1      	b.n	8021e30 <_strtol_l.isra.0+0x7c>
 8021e6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021e70:	2f19      	cmp	r7, #25
 8021e72:	d804      	bhi.n	8021e7e <_strtol_l.isra.0+0xca>
 8021e74:	3c57      	subs	r4, #87	; 0x57
 8021e76:	e7db      	b.n	8021e30 <_strtol_l.isra.0+0x7c>
 8021e78:	f04f 36ff 	mov.w	r6, #4294967295
 8021e7c:	e7e4      	b.n	8021e48 <_strtol_l.isra.0+0x94>
 8021e7e:	2e00      	cmp	r6, #0
 8021e80:	da05      	bge.n	8021e8e <_strtol_l.isra.0+0xda>
 8021e82:	2322      	movs	r3, #34	; 0x22
 8021e84:	6003      	str	r3, [r0, #0]
 8021e86:	4665      	mov	r5, ip
 8021e88:	b942      	cbnz	r2, 8021e9c <_strtol_l.isra.0+0xe8>
 8021e8a:	4628      	mov	r0, r5
 8021e8c:	e79d      	b.n	8021dca <_strtol_l.isra.0+0x16>
 8021e8e:	f1b8 0f00 	cmp.w	r8, #0
 8021e92:	d000      	beq.n	8021e96 <_strtol_l.isra.0+0xe2>
 8021e94:	426d      	negs	r5, r5
 8021e96:	2a00      	cmp	r2, #0
 8021e98:	d0f7      	beq.n	8021e8a <_strtol_l.isra.0+0xd6>
 8021e9a:	b10e      	cbz	r6, 8021ea0 <_strtol_l.isra.0+0xec>
 8021e9c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021ea0:	6011      	str	r1, [r2, #0]
 8021ea2:	e7f2      	b.n	8021e8a <_strtol_l.isra.0+0xd6>
 8021ea4:	2430      	movs	r4, #48	; 0x30
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d1b3      	bne.n	8021e12 <_strtol_l.isra.0+0x5e>
 8021eaa:	2308      	movs	r3, #8
 8021eac:	e7b1      	b.n	8021e12 <_strtol_l.isra.0+0x5e>
 8021eae:	2c30      	cmp	r4, #48	; 0x30
 8021eb0:	d0a4      	beq.n	8021dfc <_strtol_l.isra.0+0x48>
 8021eb2:	230a      	movs	r3, #10
 8021eb4:	e7ad      	b.n	8021e12 <_strtol_l.isra.0+0x5e>
 8021eb6:	bf00      	nop
 8021eb8:	08027fa5 	.word	0x08027fa5

08021ebc <strtol>:
 8021ebc:	4613      	mov	r3, r2
 8021ebe:	460a      	mov	r2, r1
 8021ec0:	4601      	mov	r1, r0
 8021ec2:	4802      	ldr	r0, [pc, #8]	; (8021ecc <strtol+0x10>)
 8021ec4:	6800      	ldr	r0, [r0, #0]
 8021ec6:	f7ff bf75 	b.w	8021db4 <_strtol_l.isra.0>
 8021eca:	bf00      	nop
 8021ecc:	20000098 	.word	0x20000098

08021ed0 <__malloc_lock>:
 8021ed0:	4801      	ldr	r0, [pc, #4]	; (8021ed8 <__malloc_lock+0x8>)
 8021ed2:	f000 b809 	b.w	8021ee8 <__retarget_lock_acquire_recursive>
 8021ed6:	bf00      	nop
 8021ed8:	20002288 	.word	0x20002288

08021edc <__malloc_unlock>:
 8021edc:	4801      	ldr	r0, [pc, #4]	; (8021ee4 <__malloc_unlock+0x8>)
 8021ede:	f000 b804 	b.w	8021eea <__retarget_lock_release_recursive>
 8021ee2:	bf00      	nop
 8021ee4:	20002288 	.word	0x20002288

08021ee8 <__retarget_lock_acquire_recursive>:
 8021ee8:	4770      	bx	lr

08021eea <__retarget_lock_release_recursive>:
 8021eea:	4770      	bx	lr
 8021eec:	0000      	movs	r0, r0
	...

08021ef0 <cos>:
 8021ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021ef2:	ec53 2b10 	vmov	r2, r3, d0
 8021ef6:	4824      	ldr	r0, [pc, #144]	; (8021f88 <cos+0x98>)
 8021ef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021efc:	4281      	cmp	r1, r0
 8021efe:	dc06      	bgt.n	8021f0e <cos+0x1e>
 8021f00:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8021f80 <cos+0x90>
 8021f04:	f001 f9f0 	bl	80232e8 <__kernel_cos>
 8021f08:	ec51 0b10 	vmov	r0, r1, d0
 8021f0c:	e007      	b.n	8021f1e <cos+0x2e>
 8021f0e:	481f      	ldr	r0, [pc, #124]	; (8021f8c <cos+0x9c>)
 8021f10:	4281      	cmp	r1, r0
 8021f12:	dd09      	ble.n	8021f28 <cos+0x38>
 8021f14:	ee10 0a10 	vmov	r0, s0
 8021f18:	4619      	mov	r1, r3
 8021f1a:	f7de f973 	bl	8000204 <__aeabi_dsub>
 8021f1e:	ec41 0b10 	vmov	d0, r0, r1
 8021f22:	b005      	add	sp, #20
 8021f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f28:	4668      	mov	r0, sp
 8021f2a:	f000 fa39 	bl	80223a0 <__ieee754_rem_pio2>
 8021f2e:	f000 0003 	and.w	r0, r0, #3
 8021f32:	2801      	cmp	r0, #1
 8021f34:	d007      	beq.n	8021f46 <cos+0x56>
 8021f36:	2802      	cmp	r0, #2
 8021f38:	d012      	beq.n	8021f60 <cos+0x70>
 8021f3a:	b9c0      	cbnz	r0, 8021f6e <cos+0x7e>
 8021f3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021f40:	ed9d 0b00 	vldr	d0, [sp]
 8021f44:	e7de      	b.n	8021f04 <cos+0x14>
 8021f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021f4a:	ed9d 0b00 	vldr	d0, [sp]
 8021f4e:	f001 fdd3 	bl	8023af8 <__kernel_sin>
 8021f52:	ec53 2b10 	vmov	r2, r3, d0
 8021f56:	ee10 0a10 	vmov	r0, s0
 8021f5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8021f5e:	e7de      	b.n	8021f1e <cos+0x2e>
 8021f60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021f64:	ed9d 0b00 	vldr	d0, [sp]
 8021f68:	f001 f9be 	bl	80232e8 <__kernel_cos>
 8021f6c:	e7f1      	b.n	8021f52 <cos+0x62>
 8021f6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021f72:	ed9d 0b00 	vldr	d0, [sp]
 8021f76:	2001      	movs	r0, #1
 8021f78:	f001 fdbe 	bl	8023af8 <__kernel_sin>
 8021f7c:	e7c4      	b.n	8021f08 <cos+0x18>
 8021f7e:	bf00      	nop
	...
 8021f88:	3fe921fb 	.word	0x3fe921fb
 8021f8c:	7fefffff 	.word	0x7fefffff

08021f90 <sin>:
 8021f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021f92:	ec53 2b10 	vmov	r2, r3, d0
 8021f96:	4826      	ldr	r0, [pc, #152]	; (8022030 <sin+0xa0>)
 8021f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021f9c:	4281      	cmp	r1, r0
 8021f9e:	dc07      	bgt.n	8021fb0 <sin+0x20>
 8021fa0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8022028 <sin+0x98>
 8021fa4:	2000      	movs	r0, #0
 8021fa6:	f001 fda7 	bl	8023af8 <__kernel_sin>
 8021faa:	ec51 0b10 	vmov	r0, r1, d0
 8021fae:	e007      	b.n	8021fc0 <sin+0x30>
 8021fb0:	4820      	ldr	r0, [pc, #128]	; (8022034 <sin+0xa4>)
 8021fb2:	4281      	cmp	r1, r0
 8021fb4:	dd09      	ble.n	8021fca <sin+0x3a>
 8021fb6:	ee10 0a10 	vmov	r0, s0
 8021fba:	4619      	mov	r1, r3
 8021fbc:	f7de f922 	bl	8000204 <__aeabi_dsub>
 8021fc0:	ec41 0b10 	vmov	d0, r0, r1
 8021fc4:	b005      	add	sp, #20
 8021fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8021fca:	4668      	mov	r0, sp
 8021fcc:	f000 f9e8 	bl	80223a0 <__ieee754_rem_pio2>
 8021fd0:	f000 0003 	and.w	r0, r0, #3
 8021fd4:	2801      	cmp	r0, #1
 8021fd6:	d008      	beq.n	8021fea <sin+0x5a>
 8021fd8:	2802      	cmp	r0, #2
 8021fda:	d00d      	beq.n	8021ff8 <sin+0x68>
 8021fdc:	b9d0      	cbnz	r0, 8022014 <sin+0x84>
 8021fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021fe2:	ed9d 0b00 	vldr	d0, [sp]
 8021fe6:	2001      	movs	r0, #1
 8021fe8:	e7dd      	b.n	8021fa6 <sin+0x16>
 8021fea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021fee:	ed9d 0b00 	vldr	d0, [sp]
 8021ff2:	f001 f979 	bl	80232e8 <__kernel_cos>
 8021ff6:	e7d8      	b.n	8021faa <sin+0x1a>
 8021ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021ffc:	ed9d 0b00 	vldr	d0, [sp]
 8022000:	2001      	movs	r0, #1
 8022002:	f001 fd79 	bl	8023af8 <__kernel_sin>
 8022006:	ec53 2b10 	vmov	r2, r3, d0
 802200a:	ee10 0a10 	vmov	r0, s0
 802200e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022012:	e7d5      	b.n	8021fc0 <sin+0x30>
 8022014:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022018:	ed9d 0b00 	vldr	d0, [sp]
 802201c:	f001 f964 	bl	80232e8 <__kernel_cos>
 8022020:	e7f1      	b.n	8022006 <sin+0x76>
 8022022:	bf00      	nop
 8022024:	f3af 8000 	nop.w
	...
 8022030:	3fe921fb 	.word	0x3fe921fb
 8022034:	7fefffff 	.word	0x7fefffff

08022038 <cosf>:
 8022038:	ee10 3a10 	vmov	r3, s0
 802203c:	b507      	push	{r0, r1, r2, lr}
 802203e:	4a1c      	ldr	r2, [pc, #112]	; (80220b0 <cosf+0x78>)
 8022040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022044:	4293      	cmp	r3, r2
 8022046:	dc04      	bgt.n	8022052 <cosf+0x1a>
 8022048:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80220b4 <cosf+0x7c>
 802204c:	f001 fe12 	bl	8023c74 <__kernel_cosf>
 8022050:	e004      	b.n	802205c <cosf+0x24>
 8022052:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022056:	db04      	blt.n	8022062 <cosf+0x2a>
 8022058:	ee30 0a40 	vsub.f32	s0, s0, s0
 802205c:	b003      	add	sp, #12
 802205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022062:	4668      	mov	r0, sp
 8022064:	f001 f800 	bl	8023068 <__ieee754_rem_pio2f>
 8022068:	f000 0003 	and.w	r0, r0, #3
 802206c:	2801      	cmp	r0, #1
 802206e:	d007      	beq.n	8022080 <cosf+0x48>
 8022070:	2802      	cmp	r0, #2
 8022072:	d00e      	beq.n	8022092 <cosf+0x5a>
 8022074:	b9a0      	cbnz	r0, 80220a0 <cosf+0x68>
 8022076:	eddd 0a01 	vldr	s1, [sp, #4]
 802207a:	ed9d 0a00 	vldr	s0, [sp]
 802207e:	e7e5      	b.n	802204c <cosf+0x14>
 8022080:	eddd 0a01 	vldr	s1, [sp, #4]
 8022084:	ed9d 0a00 	vldr	s0, [sp]
 8022088:	f002 f8de 	bl	8024248 <__kernel_sinf>
 802208c:	eeb1 0a40 	vneg.f32	s0, s0
 8022090:	e7e4      	b.n	802205c <cosf+0x24>
 8022092:	eddd 0a01 	vldr	s1, [sp, #4]
 8022096:	ed9d 0a00 	vldr	s0, [sp]
 802209a:	f001 fdeb 	bl	8023c74 <__kernel_cosf>
 802209e:	e7f5      	b.n	802208c <cosf+0x54>
 80220a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80220a4:	ed9d 0a00 	vldr	s0, [sp]
 80220a8:	2001      	movs	r0, #1
 80220aa:	f002 f8cd 	bl	8024248 <__kernel_sinf>
 80220ae:	e7d5      	b.n	802205c <cosf+0x24>
 80220b0:	3f490fd8 	.word	0x3f490fd8
 80220b4:	00000000 	.word	0x00000000

080220b8 <lrintf>:
 80220b8:	ee10 3a10 	vmov	r3, s0
 80220bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80220c0:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80220c4:	281e      	cmp	r0, #30
 80220c6:	b082      	sub	sp, #8
 80220c8:	dc2e      	bgt.n	8022128 <lrintf+0x70>
 80220ca:	1c41      	adds	r1, r0, #1
 80220cc:	da02      	bge.n	80220d4 <lrintf+0x1c>
 80220ce:	2000      	movs	r0, #0
 80220d0:	b002      	add	sp, #8
 80220d2:	4770      	bx	lr
 80220d4:	2816      	cmp	r0, #22
 80220d6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80220da:	dd09      	ble.n	80220f0 <lrintf+0x38>
 80220dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80220e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80220e4:	3a96      	subs	r2, #150	; 0x96
 80220e6:	4090      	lsls	r0, r2
 80220e8:	2900      	cmp	r1, #0
 80220ea:	d0f1      	beq.n	80220d0 <lrintf+0x18>
 80220ec:	4240      	negs	r0, r0
 80220ee:	e7ef      	b.n	80220d0 <lrintf+0x18>
 80220f0:	4b10      	ldr	r3, [pc, #64]	; (8022134 <lrintf+0x7c>)
 80220f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80220f6:	ed93 7a00 	vldr	s14, [r3]
 80220fa:	ee37 0a00 	vadd.f32	s0, s14, s0
 80220fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022102:	eddd 7a01 	vldr	s15, [sp, #4]
 8022106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802210a:	ee17 3a90 	vmov	r3, s15
 802210e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022112:	d0dc      	beq.n	80220ce <lrintf+0x16>
 8022114:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022118:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 802211c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022120:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022124:	40d8      	lsrs	r0, r3
 8022126:	e7df      	b.n	80220e8 <lrintf+0x30>
 8022128:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802212c:	ee17 0a90 	vmov	r0, s15
 8022130:	e7ce      	b.n	80220d0 <lrintf+0x18>
 8022132:	bf00      	nop
 8022134:	080280a8 	.word	0x080280a8

08022138 <sinf>:
 8022138:	ee10 3a10 	vmov	r3, s0
 802213c:	b507      	push	{r0, r1, r2, lr}
 802213e:	4a1d      	ldr	r2, [pc, #116]	; (80221b4 <sinf+0x7c>)
 8022140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022144:	4293      	cmp	r3, r2
 8022146:	dc05      	bgt.n	8022154 <sinf+0x1c>
 8022148:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80221b8 <sinf+0x80>
 802214c:	2000      	movs	r0, #0
 802214e:	f002 f87b 	bl	8024248 <__kernel_sinf>
 8022152:	e004      	b.n	802215e <sinf+0x26>
 8022154:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022158:	db04      	blt.n	8022164 <sinf+0x2c>
 802215a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802215e:	b003      	add	sp, #12
 8022160:	f85d fb04 	ldr.w	pc, [sp], #4
 8022164:	4668      	mov	r0, sp
 8022166:	f000 ff7f 	bl	8023068 <__ieee754_rem_pio2f>
 802216a:	f000 0003 	and.w	r0, r0, #3
 802216e:	2801      	cmp	r0, #1
 8022170:	d008      	beq.n	8022184 <sinf+0x4c>
 8022172:	2802      	cmp	r0, #2
 8022174:	d00d      	beq.n	8022192 <sinf+0x5a>
 8022176:	b9b0      	cbnz	r0, 80221a6 <sinf+0x6e>
 8022178:	eddd 0a01 	vldr	s1, [sp, #4]
 802217c:	ed9d 0a00 	vldr	s0, [sp]
 8022180:	2001      	movs	r0, #1
 8022182:	e7e4      	b.n	802214e <sinf+0x16>
 8022184:	eddd 0a01 	vldr	s1, [sp, #4]
 8022188:	ed9d 0a00 	vldr	s0, [sp]
 802218c:	f001 fd72 	bl	8023c74 <__kernel_cosf>
 8022190:	e7e5      	b.n	802215e <sinf+0x26>
 8022192:	eddd 0a01 	vldr	s1, [sp, #4]
 8022196:	ed9d 0a00 	vldr	s0, [sp]
 802219a:	2001      	movs	r0, #1
 802219c:	f002 f854 	bl	8024248 <__kernel_sinf>
 80221a0:	eeb1 0a40 	vneg.f32	s0, s0
 80221a4:	e7db      	b.n	802215e <sinf+0x26>
 80221a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80221aa:	ed9d 0a00 	vldr	s0, [sp]
 80221ae:	f001 fd61 	bl	8023c74 <__kernel_cosf>
 80221b2:	e7f5      	b.n	80221a0 <sinf+0x68>
 80221b4:	3f490fd8 	.word	0x3f490fd8
 80221b8:	00000000 	.word	0x00000000

080221bc <acosf>:
 80221bc:	b508      	push	{r3, lr}
 80221be:	ed2d 8b02 	vpush	{d8}
 80221c2:	eeb0 8a40 	vmov.f32	s16, s0
 80221c6:	f000 faf5 	bl	80227b4 <__ieee754_acosf>
 80221ca:	4b13      	ldr	r3, [pc, #76]	; (8022218 <acosf+0x5c>)
 80221cc:	f993 3000 	ldrsb.w	r3, [r3]
 80221d0:	3301      	adds	r3, #1
 80221d2:	eef0 8a40 	vmov.f32	s17, s0
 80221d6:	d01a      	beq.n	802220e <acosf+0x52>
 80221d8:	eeb4 8a48 	vcmp.f32	s16, s16
 80221dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221e0:	d615      	bvs.n	802220e <acosf+0x52>
 80221e2:	eeb0 0a48 	vmov.f32	s0, s16
 80221e6:	f002 fa5d 	bl	80246a4 <fabsf>
 80221ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80221ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80221f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221f6:	dd0a      	ble.n	802220e <acosf+0x52>
 80221f8:	f7ff fc36 	bl	8021a68 <__errno>
 80221fc:	ecbd 8b02 	vpop	{d8}
 8022200:	2321      	movs	r3, #33	; 0x21
 8022202:	6003      	str	r3, [r0, #0]
 8022204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8022208:	4804      	ldr	r0, [pc, #16]	; (802221c <acosf+0x60>)
 802220a:	f002 baa1 	b.w	8024750 <nanf>
 802220e:	eeb0 0a68 	vmov.f32	s0, s17
 8022212:	ecbd 8b02 	vpop	{d8}
 8022216:	bd08      	pop	{r3, pc}
 8022218:	200000fc 	.word	0x200000fc
 802221c:	080280b0 	.word	0x080280b0

08022220 <atan2f>:
 8022220:	f000 bbc2 	b.w	80229a8 <__ieee754_atan2f>

08022224 <powf>:
 8022224:	b508      	push	{r3, lr}
 8022226:	ed2d 8b04 	vpush	{d8-d9}
 802222a:	eeb0 9a40 	vmov.f32	s18, s0
 802222e:	eef0 8a60 	vmov.f32	s17, s1
 8022232:	f000 fc59 	bl	8022ae8 <__ieee754_powf>
 8022236:	4b43      	ldr	r3, [pc, #268]	; (8022344 <powf+0x120>)
 8022238:	f993 3000 	ldrsb.w	r3, [r3]
 802223c:	3301      	adds	r3, #1
 802223e:	eeb0 8a40 	vmov.f32	s16, s0
 8022242:	d012      	beq.n	802226a <powf+0x46>
 8022244:	eef4 8a68 	vcmp.f32	s17, s17
 8022248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802224c:	d60d      	bvs.n	802226a <powf+0x46>
 802224e:	eeb4 9a49 	vcmp.f32	s18, s18
 8022252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022256:	d70d      	bvc.n	8022274 <powf+0x50>
 8022258:	eef5 8a40 	vcmp.f32	s17, #0.0
 802225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022264:	bf08      	it	eq
 8022266:	eeb0 8a67 	vmoveq.f32	s16, s15
 802226a:	eeb0 0a48 	vmov.f32	s0, s16
 802226e:	ecbd 8b04 	vpop	{d8-d9}
 8022272:	bd08      	pop	{r3, pc}
 8022274:	eddf 9a34 	vldr	s19, [pc, #208]	; 8022348 <powf+0x124>
 8022278:	eeb4 9a69 	vcmp.f32	s18, s19
 802227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022280:	d116      	bne.n	80222b0 <powf+0x8c>
 8022282:	eef4 8a69 	vcmp.f32	s17, s19
 8022286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802228a:	d057      	beq.n	802233c <powf+0x118>
 802228c:	eeb0 0a68 	vmov.f32	s0, s17
 8022290:	f002 fa0f 	bl	80246b2 <finitef>
 8022294:	2800      	cmp	r0, #0
 8022296:	d0e8      	beq.n	802226a <powf+0x46>
 8022298:	eef4 8ae9 	vcmpe.f32	s17, s19
 802229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222a0:	d5e3      	bpl.n	802226a <powf+0x46>
 80222a2:	f7ff fbe1 	bl	8021a68 <__errno>
 80222a6:	2321      	movs	r3, #33	; 0x21
 80222a8:	6003      	str	r3, [r0, #0]
 80222aa:	ed9f 8a28 	vldr	s16, [pc, #160]	; 802234c <powf+0x128>
 80222ae:	e7dc      	b.n	802226a <powf+0x46>
 80222b0:	f002 f9ff 	bl	80246b2 <finitef>
 80222b4:	bb50      	cbnz	r0, 802230c <powf+0xe8>
 80222b6:	eeb0 0a49 	vmov.f32	s0, s18
 80222ba:	f002 f9fa 	bl	80246b2 <finitef>
 80222be:	b328      	cbz	r0, 802230c <powf+0xe8>
 80222c0:	eeb0 0a68 	vmov.f32	s0, s17
 80222c4:	f002 f9f5 	bl	80246b2 <finitef>
 80222c8:	b300      	cbz	r0, 802230c <powf+0xe8>
 80222ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80222ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222d2:	d706      	bvc.n	80222e2 <powf+0xbe>
 80222d4:	f7ff fbc8 	bl	8021a68 <__errno>
 80222d8:	2321      	movs	r3, #33	; 0x21
 80222da:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80222de:	6003      	str	r3, [r0, #0]
 80222e0:	e7c3      	b.n	802226a <powf+0x46>
 80222e2:	f7ff fbc1 	bl	8021a68 <__errno>
 80222e6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80222ea:	2322      	movs	r3, #34	; 0x22
 80222ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222f0:	6003      	str	r3, [r0, #0]
 80222f2:	d508      	bpl.n	8022306 <powf+0xe2>
 80222f4:	eeb0 0a68 	vmov.f32	s0, s17
 80222f8:	f002 fa30 	bl	802475c <rintf>
 80222fc:	eeb4 0a68 	vcmp.f32	s0, s17
 8022300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022304:	d1d1      	bne.n	80222aa <powf+0x86>
 8022306:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8022350 <powf+0x12c>
 802230a:	e7ae      	b.n	802226a <powf+0x46>
 802230c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8022310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022314:	d1a9      	bne.n	802226a <powf+0x46>
 8022316:	eeb0 0a49 	vmov.f32	s0, s18
 802231a:	f002 f9ca 	bl	80246b2 <finitef>
 802231e:	2800      	cmp	r0, #0
 8022320:	d0a3      	beq.n	802226a <powf+0x46>
 8022322:	eeb0 0a68 	vmov.f32	s0, s17
 8022326:	f002 f9c4 	bl	80246b2 <finitef>
 802232a:	2800      	cmp	r0, #0
 802232c:	d09d      	beq.n	802226a <powf+0x46>
 802232e:	f7ff fb9b 	bl	8021a68 <__errno>
 8022332:	2322      	movs	r3, #34	; 0x22
 8022334:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8022348 <powf+0x124>
 8022338:	6003      	str	r3, [r0, #0]
 802233a:	e796      	b.n	802226a <powf+0x46>
 802233c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8022340:	e793      	b.n	802226a <powf+0x46>
 8022342:	bf00      	nop
 8022344:	200000fc 	.word	0x200000fc
 8022348:	00000000 	.word	0x00000000
 802234c:	ff800000 	.word	0xff800000
 8022350:	7f800000 	.word	0x7f800000

08022354 <sqrtf>:
 8022354:	b508      	push	{r3, lr}
 8022356:	ed2d 8b02 	vpush	{d8}
 802235a:	eeb0 8a40 	vmov.f32	s16, s0
 802235e:	f000 ffbf 	bl	80232e0 <__ieee754_sqrtf>
 8022362:	4b0d      	ldr	r3, [pc, #52]	; (8022398 <sqrtf+0x44>)
 8022364:	f993 3000 	ldrsb.w	r3, [r3]
 8022368:	3301      	adds	r3, #1
 802236a:	d011      	beq.n	8022390 <sqrtf+0x3c>
 802236c:	eeb4 8a48 	vcmp.f32	s16, s16
 8022370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022374:	d60c      	bvs.n	8022390 <sqrtf+0x3c>
 8022376:	eddf 8a09 	vldr	s17, [pc, #36]	; 802239c <sqrtf+0x48>
 802237a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022382:	d505      	bpl.n	8022390 <sqrtf+0x3c>
 8022384:	f7ff fb70 	bl	8021a68 <__errno>
 8022388:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802238c:	2321      	movs	r3, #33	; 0x21
 802238e:	6003      	str	r3, [r0, #0]
 8022390:	ecbd 8b02 	vpop	{d8}
 8022394:	bd08      	pop	{r3, pc}
 8022396:	bf00      	nop
 8022398:	200000fc 	.word	0x200000fc
 802239c:	00000000 	.word	0x00000000

080223a0 <__ieee754_rem_pio2>:
 80223a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223a4:	ed2d 8b02 	vpush	{d8}
 80223a8:	ec55 4b10 	vmov	r4, r5, d0
 80223ac:	4bca      	ldr	r3, [pc, #808]	; (80226d8 <__ieee754_rem_pio2+0x338>)
 80223ae:	b08b      	sub	sp, #44	; 0x2c
 80223b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80223b4:	4598      	cmp	r8, r3
 80223b6:	4682      	mov	sl, r0
 80223b8:	9502      	str	r5, [sp, #8]
 80223ba:	dc08      	bgt.n	80223ce <__ieee754_rem_pio2+0x2e>
 80223bc:	2200      	movs	r2, #0
 80223be:	2300      	movs	r3, #0
 80223c0:	ed80 0b00 	vstr	d0, [r0]
 80223c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80223c8:	f04f 0b00 	mov.w	fp, #0
 80223cc:	e028      	b.n	8022420 <__ieee754_rem_pio2+0x80>
 80223ce:	4bc3      	ldr	r3, [pc, #780]	; (80226dc <__ieee754_rem_pio2+0x33c>)
 80223d0:	4598      	cmp	r8, r3
 80223d2:	dc78      	bgt.n	80224c6 <__ieee754_rem_pio2+0x126>
 80223d4:	9b02      	ldr	r3, [sp, #8]
 80223d6:	4ec2      	ldr	r6, [pc, #776]	; (80226e0 <__ieee754_rem_pio2+0x340>)
 80223d8:	2b00      	cmp	r3, #0
 80223da:	ee10 0a10 	vmov	r0, s0
 80223de:	a3b0      	add	r3, pc, #704	; (adr r3, 80226a0 <__ieee754_rem_pio2+0x300>)
 80223e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223e4:	4629      	mov	r1, r5
 80223e6:	dd39      	ble.n	802245c <__ieee754_rem_pio2+0xbc>
 80223e8:	f7dd ff0c 	bl	8000204 <__aeabi_dsub>
 80223ec:	45b0      	cmp	r8, r6
 80223ee:	4604      	mov	r4, r0
 80223f0:	460d      	mov	r5, r1
 80223f2:	d01b      	beq.n	802242c <__ieee754_rem_pio2+0x8c>
 80223f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80226a8 <__ieee754_rem_pio2+0x308>)
 80223f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223fa:	f7dd ff03 	bl	8000204 <__aeabi_dsub>
 80223fe:	4602      	mov	r2, r0
 8022400:	460b      	mov	r3, r1
 8022402:	e9ca 2300 	strd	r2, r3, [sl]
 8022406:	4620      	mov	r0, r4
 8022408:	4629      	mov	r1, r5
 802240a:	f7dd fefb 	bl	8000204 <__aeabi_dsub>
 802240e:	a3a6      	add	r3, pc, #664	; (adr r3, 80226a8 <__ieee754_rem_pio2+0x308>)
 8022410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022414:	f7dd fef6 	bl	8000204 <__aeabi_dsub>
 8022418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802241c:	f04f 0b01 	mov.w	fp, #1
 8022420:	4658      	mov	r0, fp
 8022422:	b00b      	add	sp, #44	; 0x2c
 8022424:	ecbd 8b02 	vpop	{d8}
 8022428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802242c:	a3a0      	add	r3, pc, #640	; (adr r3, 80226b0 <__ieee754_rem_pio2+0x310>)
 802242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022432:	f7dd fee7 	bl	8000204 <__aeabi_dsub>
 8022436:	a3a0      	add	r3, pc, #640	; (adr r3, 80226b8 <__ieee754_rem_pio2+0x318>)
 8022438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802243c:	4604      	mov	r4, r0
 802243e:	460d      	mov	r5, r1
 8022440:	f7dd fee0 	bl	8000204 <__aeabi_dsub>
 8022444:	4602      	mov	r2, r0
 8022446:	460b      	mov	r3, r1
 8022448:	e9ca 2300 	strd	r2, r3, [sl]
 802244c:	4620      	mov	r0, r4
 802244e:	4629      	mov	r1, r5
 8022450:	f7dd fed8 	bl	8000204 <__aeabi_dsub>
 8022454:	a398      	add	r3, pc, #608	; (adr r3, 80226b8 <__ieee754_rem_pio2+0x318>)
 8022456:	e9d3 2300 	ldrd	r2, r3, [r3]
 802245a:	e7db      	b.n	8022414 <__ieee754_rem_pio2+0x74>
 802245c:	f7dd fed4 	bl	8000208 <__adddf3>
 8022460:	45b0      	cmp	r8, r6
 8022462:	4604      	mov	r4, r0
 8022464:	460d      	mov	r5, r1
 8022466:	d016      	beq.n	8022496 <__ieee754_rem_pio2+0xf6>
 8022468:	a38f      	add	r3, pc, #572	; (adr r3, 80226a8 <__ieee754_rem_pio2+0x308>)
 802246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802246e:	f7dd fecb 	bl	8000208 <__adddf3>
 8022472:	4602      	mov	r2, r0
 8022474:	460b      	mov	r3, r1
 8022476:	e9ca 2300 	strd	r2, r3, [sl]
 802247a:	4620      	mov	r0, r4
 802247c:	4629      	mov	r1, r5
 802247e:	f7dd fec1 	bl	8000204 <__aeabi_dsub>
 8022482:	a389      	add	r3, pc, #548	; (adr r3, 80226a8 <__ieee754_rem_pio2+0x308>)
 8022484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022488:	f7dd febe 	bl	8000208 <__adddf3>
 802248c:	f04f 3bff 	mov.w	fp, #4294967295
 8022490:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022494:	e7c4      	b.n	8022420 <__ieee754_rem_pio2+0x80>
 8022496:	a386      	add	r3, pc, #536	; (adr r3, 80226b0 <__ieee754_rem_pio2+0x310>)
 8022498:	e9d3 2300 	ldrd	r2, r3, [r3]
 802249c:	f7dd feb4 	bl	8000208 <__adddf3>
 80224a0:	a385      	add	r3, pc, #532	; (adr r3, 80226b8 <__ieee754_rem_pio2+0x318>)
 80224a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224a6:	4604      	mov	r4, r0
 80224a8:	460d      	mov	r5, r1
 80224aa:	f7dd fead 	bl	8000208 <__adddf3>
 80224ae:	4602      	mov	r2, r0
 80224b0:	460b      	mov	r3, r1
 80224b2:	e9ca 2300 	strd	r2, r3, [sl]
 80224b6:	4620      	mov	r0, r4
 80224b8:	4629      	mov	r1, r5
 80224ba:	f7dd fea3 	bl	8000204 <__aeabi_dsub>
 80224be:	a37e      	add	r3, pc, #504	; (adr r3, 80226b8 <__ieee754_rem_pio2+0x318>)
 80224c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c4:	e7e0      	b.n	8022488 <__ieee754_rem_pio2+0xe8>
 80224c6:	4b87      	ldr	r3, [pc, #540]	; (80226e4 <__ieee754_rem_pio2+0x344>)
 80224c8:	4598      	cmp	r8, r3
 80224ca:	f300 80d9 	bgt.w	8022680 <__ieee754_rem_pio2+0x2e0>
 80224ce:	f001 ff03 	bl	80242d8 <fabs>
 80224d2:	ec55 4b10 	vmov	r4, r5, d0
 80224d6:	ee10 0a10 	vmov	r0, s0
 80224da:	a379      	add	r3, pc, #484	; (adr r3, 80226c0 <__ieee754_rem_pio2+0x320>)
 80224dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224e0:	4629      	mov	r1, r5
 80224e2:	f7de f847 	bl	8000574 <__aeabi_dmul>
 80224e6:	4b80      	ldr	r3, [pc, #512]	; (80226e8 <__ieee754_rem_pio2+0x348>)
 80224e8:	2200      	movs	r2, #0
 80224ea:	f7dd fe8d 	bl	8000208 <__adddf3>
 80224ee:	f7de fadb 	bl	8000aa8 <__aeabi_d2iz>
 80224f2:	4683      	mov	fp, r0
 80224f4:	f7dd ffd4 	bl	80004a0 <__aeabi_i2d>
 80224f8:	4602      	mov	r2, r0
 80224fa:	460b      	mov	r3, r1
 80224fc:	ec43 2b18 	vmov	d8, r2, r3
 8022500:	a367      	add	r3, pc, #412	; (adr r3, 80226a0 <__ieee754_rem_pio2+0x300>)
 8022502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022506:	f7de f835 	bl	8000574 <__aeabi_dmul>
 802250a:	4602      	mov	r2, r0
 802250c:	460b      	mov	r3, r1
 802250e:	4620      	mov	r0, r4
 8022510:	4629      	mov	r1, r5
 8022512:	f7dd fe77 	bl	8000204 <__aeabi_dsub>
 8022516:	a364      	add	r3, pc, #400	; (adr r3, 80226a8 <__ieee754_rem_pio2+0x308>)
 8022518:	e9d3 2300 	ldrd	r2, r3, [r3]
 802251c:	4606      	mov	r6, r0
 802251e:	460f      	mov	r7, r1
 8022520:	ec51 0b18 	vmov	r0, r1, d8
 8022524:	f7de f826 	bl	8000574 <__aeabi_dmul>
 8022528:	f1bb 0f1f 	cmp.w	fp, #31
 802252c:	4604      	mov	r4, r0
 802252e:	460d      	mov	r5, r1
 8022530:	dc0d      	bgt.n	802254e <__ieee754_rem_pio2+0x1ae>
 8022532:	4b6e      	ldr	r3, [pc, #440]	; (80226ec <__ieee754_rem_pio2+0x34c>)
 8022534:	f10b 32ff 	add.w	r2, fp, #4294967295
 8022538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802253c:	4543      	cmp	r3, r8
 802253e:	d006      	beq.n	802254e <__ieee754_rem_pio2+0x1ae>
 8022540:	4622      	mov	r2, r4
 8022542:	462b      	mov	r3, r5
 8022544:	4630      	mov	r0, r6
 8022546:	4639      	mov	r1, r7
 8022548:	f7dd fe5c 	bl	8000204 <__aeabi_dsub>
 802254c:	e00f      	b.n	802256e <__ieee754_rem_pio2+0x1ce>
 802254e:	462b      	mov	r3, r5
 8022550:	4622      	mov	r2, r4
 8022552:	4630      	mov	r0, r6
 8022554:	4639      	mov	r1, r7
 8022556:	f7dd fe55 	bl	8000204 <__aeabi_dsub>
 802255a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802255e:	9303      	str	r3, [sp, #12]
 8022560:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022564:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8022568:	f1b8 0f10 	cmp.w	r8, #16
 802256c:	dc02      	bgt.n	8022574 <__ieee754_rem_pio2+0x1d4>
 802256e:	e9ca 0100 	strd	r0, r1, [sl]
 8022572:	e039      	b.n	80225e8 <__ieee754_rem_pio2+0x248>
 8022574:	a34e      	add	r3, pc, #312	; (adr r3, 80226b0 <__ieee754_rem_pio2+0x310>)
 8022576:	e9d3 2300 	ldrd	r2, r3, [r3]
 802257a:	ec51 0b18 	vmov	r0, r1, d8
 802257e:	f7dd fff9 	bl	8000574 <__aeabi_dmul>
 8022582:	4604      	mov	r4, r0
 8022584:	460d      	mov	r5, r1
 8022586:	4602      	mov	r2, r0
 8022588:	460b      	mov	r3, r1
 802258a:	4630      	mov	r0, r6
 802258c:	4639      	mov	r1, r7
 802258e:	f7dd fe39 	bl	8000204 <__aeabi_dsub>
 8022592:	4602      	mov	r2, r0
 8022594:	460b      	mov	r3, r1
 8022596:	4680      	mov	r8, r0
 8022598:	4689      	mov	r9, r1
 802259a:	4630      	mov	r0, r6
 802259c:	4639      	mov	r1, r7
 802259e:	f7dd fe31 	bl	8000204 <__aeabi_dsub>
 80225a2:	4622      	mov	r2, r4
 80225a4:	462b      	mov	r3, r5
 80225a6:	f7dd fe2d 	bl	8000204 <__aeabi_dsub>
 80225aa:	a343      	add	r3, pc, #268	; (adr r3, 80226b8 <__ieee754_rem_pio2+0x318>)
 80225ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b0:	4604      	mov	r4, r0
 80225b2:	460d      	mov	r5, r1
 80225b4:	ec51 0b18 	vmov	r0, r1, d8
 80225b8:	f7dd ffdc 	bl	8000574 <__aeabi_dmul>
 80225bc:	4622      	mov	r2, r4
 80225be:	462b      	mov	r3, r5
 80225c0:	f7dd fe20 	bl	8000204 <__aeabi_dsub>
 80225c4:	4602      	mov	r2, r0
 80225c6:	460b      	mov	r3, r1
 80225c8:	4604      	mov	r4, r0
 80225ca:	460d      	mov	r5, r1
 80225cc:	4640      	mov	r0, r8
 80225ce:	4649      	mov	r1, r9
 80225d0:	f7dd fe18 	bl	8000204 <__aeabi_dsub>
 80225d4:	9a03      	ldr	r2, [sp, #12]
 80225d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80225da:	1ad3      	subs	r3, r2, r3
 80225dc:	2b31      	cmp	r3, #49	; 0x31
 80225de:	dc24      	bgt.n	802262a <__ieee754_rem_pio2+0x28a>
 80225e0:	e9ca 0100 	strd	r0, r1, [sl]
 80225e4:	4646      	mov	r6, r8
 80225e6:	464f      	mov	r7, r9
 80225e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80225ec:	4630      	mov	r0, r6
 80225ee:	4642      	mov	r2, r8
 80225f0:	464b      	mov	r3, r9
 80225f2:	4639      	mov	r1, r7
 80225f4:	f7dd fe06 	bl	8000204 <__aeabi_dsub>
 80225f8:	462b      	mov	r3, r5
 80225fa:	4622      	mov	r2, r4
 80225fc:	f7dd fe02 	bl	8000204 <__aeabi_dsub>
 8022600:	9b02      	ldr	r3, [sp, #8]
 8022602:	2b00      	cmp	r3, #0
 8022604:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022608:	f6bf af0a 	bge.w	8022420 <__ieee754_rem_pio2+0x80>
 802260c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022610:	f8ca 3004 	str.w	r3, [sl, #4]
 8022614:	f8ca 8000 	str.w	r8, [sl]
 8022618:	f8ca 0008 	str.w	r0, [sl, #8]
 802261c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022620:	f8ca 300c 	str.w	r3, [sl, #12]
 8022624:	f1cb 0b00 	rsb	fp, fp, #0
 8022628:	e6fa      	b.n	8022420 <__ieee754_rem_pio2+0x80>
 802262a:	a327      	add	r3, pc, #156	; (adr r3, 80226c8 <__ieee754_rem_pio2+0x328>)
 802262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022630:	ec51 0b18 	vmov	r0, r1, d8
 8022634:	f7dd ff9e 	bl	8000574 <__aeabi_dmul>
 8022638:	4604      	mov	r4, r0
 802263a:	460d      	mov	r5, r1
 802263c:	4602      	mov	r2, r0
 802263e:	460b      	mov	r3, r1
 8022640:	4640      	mov	r0, r8
 8022642:	4649      	mov	r1, r9
 8022644:	f7dd fdde 	bl	8000204 <__aeabi_dsub>
 8022648:	4602      	mov	r2, r0
 802264a:	460b      	mov	r3, r1
 802264c:	4606      	mov	r6, r0
 802264e:	460f      	mov	r7, r1
 8022650:	4640      	mov	r0, r8
 8022652:	4649      	mov	r1, r9
 8022654:	f7dd fdd6 	bl	8000204 <__aeabi_dsub>
 8022658:	4622      	mov	r2, r4
 802265a:	462b      	mov	r3, r5
 802265c:	f7dd fdd2 	bl	8000204 <__aeabi_dsub>
 8022660:	a31b      	add	r3, pc, #108	; (adr r3, 80226d0 <__ieee754_rem_pio2+0x330>)
 8022662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022666:	4604      	mov	r4, r0
 8022668:	460d      	mov	r5, r1
 802266a:	ec51 0b18 	vmov	r0, r1, d8
 802266e:	f7dd ff81 	bl	8000574 <__aeabi_dmul>
 8022672:	4622      	mov	r2, r4
 8022674:	462b      	mov	r3, r5
 8022676:	f7dd fdc5 	bl	8000204 <__aeabi_dsub>
 802267a:	4604      	mov	r4, r0
 802267c:	460d      	mov	r5, r1
 802267e:	e75f      	b.n	8022540 <__ieee754_rem_pio2+0x1a0>
 8022680:	4b1b      	ldr	r3, [pc, #108]	; (80226f0 <__ieee754_rem_pio2+0x350>)
 8022682:	4598      	cmp	r8, r3
 8022684:	dd36      	ble.n	80226f4 <__ieee754_rem_pio2+0x354>
 8022686:	ee10 2a10 	vmov	r2, s0
 802268a:	462b      	mov	r3, r5
 802268c:	4620      	mov	r0, r4
 802268e:	4629      	mov	r1, r5
 8022690:	f7dd fdb8 	bl	8000204 <__aeabi_dsub>
 8022694:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022698:	e9ca 0100 	strd	r0, r1, [sl]
 802269c:	e694      	b.n	80223c8 <__ieee754_rem_pio2+0x28>
 802269e:	bf00      	nop
 80226a0:	54400000 	.word	0x54400000
 80226a4:	3ff921fb 	.word	0x3ff921fb
 80226a8:	1a626331 	.word	0x1a626331
 80226ac:	3dd0b461 	.word	0x3dd0b461
 80226b0:	1a600000 	.word	0x1a600000
 80226b4:	3dd0b461 	.word	0x3dd0b461
 80226b8:	2e037073 	.word	0x2e037073
 80226bc:	3ba3198a 	.word	0x3ba3198a
 80226c0:	6dc9c883 	.word	0x6dc9c883
 80226c4:	3fe45f30 	.word	0x3fe45f30
 80226c8:	2e000000 	.word	0x2e000000
 80226cc:	3ba3198a 	.word	0x3ba3198a
 80226d0:	252049c1 	.word	0x252049c1
 80226d4:	397b839a 	.word	0x397b839a
 80226d8:	3fe921fb 	.word	0x3fe921fb
 80226dc:	4002d97b 	.word	0x4002d97b
 80226e0:	3ff921fb 	.word	0x3ff921fb
 80226e4:	413921fb 	.word	0x413921fb
 80226e8:	3fe00000 	.word	0x3fe00000
 80226ec:	080280b4 	.word	0x080280b4
 80226f0:	7fefffff 	.word	0x7fefffff
 80226f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80226f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80226fc:	ee10 0a10 	vmov	r0, s0
 8022700:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8022704:	ee10 6a10 	vmov	r6, s0
 8022708:	460f      	mov	r7, r1
 802270a:	f7de f9cd 	bl	8000aa8 <__aeabi_d2iz>
 802270e:	f7dd fec7 	bl	80004a0 <__aeabi_i2d>
 8022712:	4602      	mov	r2, r0
 8022714:	460b      	mov	r3, r1
 8022716:	4630      	mov	r0, r6
 8022718:	4639      	mov	r1, r7
 802271a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802271e:	f7dd fd71 	bl	8000204 <__aeabi_dsub>
 8022722:	4b22      	ldr	r3, [pc, #136]	; (80227ac <__ieee754_rem_pio2+0x40c>)
 8022724:	2200      	movs	r2, #0
 8022726:	f7dd ff25 	bl	8000574 <__aeabi_dmul>
 802272a:	460f      	mov	r7, r1
 802272c:	4606      	mov	r6, r0
 802272e:	f7de f9bb 	bl	8000aa8 <__aeabi_d2iz>
 8022732:	f7dd feb5 	bl	80004a0 <__aeabi_i2d>
 8022736:	4602      	mov	r2, r0
 8022738:	460b      	mov	r3, r1
 802273a:	4630      	mov	r0, r6
 802273c:	4639      	mov	r1, r7
 802273e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022742:	f7dd fd5f 	bl	8000204 <__aeabi_dsub>
 8022746:	4b19      	ldr	r3, [pc, #100]	; (80227ac <__ieee754_rem_pio2+0x40c>)
 8022748:	2200      	movs	r2, #0
 802274a:	f7dd ff13 	bl	8000574 <__aeabi_dmul>
 802274e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022752:	ad04      	add	r5, sp, #16
 8022754:	f04f 0803 	mov.w	r8, #3
 8022758:	46a9      	mov	r9, r5
 802275a:	2600      	movs	r6, #0
 802275c:	2700      	movs	r7, #0
 802275e:	4632      	mov	r2, r6
 8022760:	463b      	mov	r3, r7
 8022762:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8022766:	46c3      	mov	fp, r8
 8022768:	3d08      	subs	r5, #8
 802276a:	f108 38ff 	add.w	r8, r8, #4294967295
 802276e:	f7de f969 	bl	8000a44 <__aeabi_dcmpeq>
 8022772:	2800      	cmp	r0, #0
 8022774:	d1f3      	bne.n	802275e <__ieee754_rem_pio2+0x3be>
 8022776:	4b0e      	ldr	r3, [pc, #56]	; (80227b0 <__ieee754_rem_pio2+0x410>)
 8022778:	9301      	str	r3, [sp, #4]
 802277a:	2302      	movs	r3, #2
 802277c:	9300      	str	r3, [sp, #0]
 802277e:	4622      	mov	r2, r4
 8022780:	465b      	mov	r3, fp
 8022782:	4651      	mov	r1, sl
 8022784:	4648      	mov	r0, r9
 8022786:	f000 fe77 	bl	8023478 <__kernel_rem_pio2>
 802278a:	9b02      	ldr	r3, [sp, #8]
 802278c:	2b00      	cmp	r3, #0
 802278e:	4683      	mov	fp, r0
 8022790:	f6bf ae46 	bge.w	8022420 <__ieee754_rem_pio2+0x80>
 8022794:	f8da 3004 	ldr.w	r3, [sl, #4]
 8022798:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802279c:	f8ca 3004 	str.w	r3, [sl, #4]
 80227a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80227a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80227a8:	e73a      	b.n	8022620 <__ieee754_rem_pio2+0x280>
 80227aa:	bf00      	nop
 80227ac:	41700000 	.word	0x41700000
 80227b0:	08028134 	.word	0x08028134

080227b4 <__ieee754_acosf>:
 80227b4:	b508      	push	{r3, lr}
 80227b6:	ee10 3a10 	vmov	r3, s0
 80227ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80227be:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80227c2:	ed2d 8b0c 	vpush	{d8-d13}
 80227c6:	d10a      	bne.n	80227de <__ieee754_acosf+0x2a>
 80227c8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8022964 <__ieee754_acosf+0x1b0>
 80227cc:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8022968 <__ieee754_acosf+0x1b4>
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	bfd8      	it	le
 80227d4:	eeb0 0a48 	vmovle.f32	s0, s16
 80227d8:	ecbd 8b0c 	vpop	{d8-d13}
 80227dc:	bd08      	pop	{r3, pc}
 80227de:	dd04      	ble.n	80227ea <__ieee754_acosf+0x36>
 80227e0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80227e4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80227e8:	e7f6      	b.n	80227d8 <__ieee754_acosf+0x24>
 80227ea:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80227ee:	da3e      	bge.n	802286e <__ieee754_acosf+0xba>
 80227f0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80227f4:	f340 80b3 	ble.w	802295e <__ieee754_acosf+0x1aa>
 80227f8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80227fc:	eddf 6a5b 	vldr	s13, [pc, #364]	; 802296c <__ieee754_acosf+0x1b8>
 8022800:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8022970 <__ieee754_acosf+0x1bc>
 8022804:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8022974 <__ieee754_acosf+0x1c0>
 8022808:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8022978 <__ieee754_acosf+0x1c4>
 802280c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022810:	eddf 6a5a 	vldr	s13, [pc, #360]	; 802297c <__ieee754_acosf+0x1c8>
 8022814:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022818:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8022980 <__ieee754_acosf+0x1cc>
 802281c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022820:	eddf 6a58 	vldr	s13, [pc, #352]	; 8022984 <__ieee754_acosf+0x1d0>
 8022824:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022828:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8022988 <__ieee754_acosf+0x1d4>
 802282c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022830:	eddf 6a56 	vldr	s13, [pc, #344]	; 802298c <__ieee754_acosf+0x1d8>
 8022834:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8022838:	eddf 6a55 	vldr	s13, [pc, #340]	; 8022990 <__ieee754_acosf+0x1dc>
 802283c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022840:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8022994 <__ieee754_acosf+0x1e0>
 8022844:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802284c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022854:	eef0 7a66 	vmov.f32	s15, s13
 8022858:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802285c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8022998 <__ieee754_acosf+0x1e4>
 8022860:	eea0 8a66 	vfms.f32	s16, s0, s13
 8022864:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022868:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802286c:	e7b4      	b.n	80227d8 <__ieee754_acosf+0x24>
 802286e:	2b00      	cmp	r3, #0
 8022870:	eddf da3e 	vldr	s27, [pc, #248]	; 802296c <__ieee754_acosf+0x1b8>
 8022874:	eddf ca3e 	vldr	s25, [pc, #248]	; 8022970 <__ieee754_acosf+0x1bc>
 8022878:	ed9f ca40 	vldr	s24, [pc, #256]	; 802297c <__ieee754_acosf+0x1c8>
 802287c:	eddf ba40 	vldr	s23, [pc, #256]	; 8022980 <__ieee754_acosf+0x1cc>
 8022880:	ed9f ba40 	vldr	s22, [pc, #256]	; 8022984 <__ieee754_acosf+0x1d0>
 8022884:	eddf 8a40 	vldr	s17, [pc, #256]	; 8022988 <__ieee754_acosf+0x1d4>
 8022888:	ed9f da40 	vldr	s26, [pc, #256]	; 802298c <__ieee754_acosf+0x1d8>
 802288c:	eddf aa39 	vldr	s21, [pc, #228]	; 8022974 <__ieee754_acosf+0x1c0>
 8022890:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8022990 <__ieee754_acosf+0x1dc>
 8022894:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8022994 <__ieee754_acosf+0x1e0>
 8022898:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 802289c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80228a0:	da28      	bge.n	80228f4 <__ieee754_acosf+0x140>
 80228a2:	ee30 0a09 	vadd.f32	s0, s0, s18
 80228a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80228aa:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80228ae:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80228b2:	eeac ca80 	vfma.f32	s24, s25, s0
 80228b6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80228ba:	eeec ba00 	vfma.f32	s23, s24, s0
 80228be:	eeea 9a00 	vfma.f32	s19, s20, s0
 80228c2:	eeab ba80 	vfma.f32	s22, s23, s0
 80228c6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80228ca:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80228ce:	ee68 8a80 	vmul.f32	s17, s17, s0
 80228d2:	f000 fd05 	bl	80232e0 <__ieee754_sqrtf>
 80228d6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80228da:	eddf 7a30 	vldr	s15, [pc, #192]	; 802299c <__ieee754_acosf+0x1e8>
 80228de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80228e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80228e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80228ea:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80229a0 <__ieee754_acosf+0x1ec>
 80228ee:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80228f2:	e771      	b.n	80227d8 <__ieee754_acosf+0x24>
 80228f4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80228f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80228fc:	eeb0 0a48 	vmov.f32	s0, s16
 8022900:	f000 fcee 	bl	80232e0 <__ieee754_sqrtf>
 8022904:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8022908:	eee8 aa0d 	vfma.f32	s21, s16, s26
 802290c:	eeac ca88 	vfma.f32	s24, s25, s16
 8022910:	eeaa aa88 	vfma.f32	s20, s21, s16
 8022914:	eeec ba08 	vfma.f32	s23, s24, s16
 8022918:	ee10 3a10 	vmov	r3, s0
 802291c:	eeab ba88 	vfma.f32	s22, s23, s16
 8022920:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022924:	f023 030f 	bic.w	r3, r3, #15
 8022928:	eeea 9a08 	vfma.f32	s19, s20, s16
 802292c:	ee07 3a90 	vmov	s15, r3
 8022930:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8022934:	eeb0 6a48 	vmov.f32	s12, s16
 8022938:	eea7 6ae7 	vfms.f32	s12, s15, s15
 802293c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8022940:	ee70 6a27 	vadd.f32	s13, s0, s15
 8022944:	ee68 8a88 	vmul.f32	s17, s17, s16
 8022948:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802294c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8022950:	eea0 7a26 	vfma.f32	s14, s0, s13
 8022954:	ee37 0a87 	vadd.f32	s0, s15, s14
 8022958:	ee30 0a00 	vadd.f32	s0, s0, s0
 802295c:	e73c      	b.n	80227d8 <__ieee754_acosf+0x24>
 802295e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80229a4 <__ieee754_acosf+0x1f0>
 8022962:	e739      	b.n	80227d8 <__ieee754_acosf+0x24>
 8022964:	00000000 	.word	0x00000000
 8022968:	40490fdb 	.word	0x40490fdb
 802296c:	3811ef08 	.word	0x3811ef08
 8022970:	3a4f7f04 	.word	0x3a4f7f04
 8022974:	bf303361 	.word	0xbf303361
 8022978:	33a22168 	.word	0x33a22168
 802297c:	bd241146 	.word	0xbd241146
 8022980:	3e4e0aa8 	.word	0x3e4e0aa8
 8022984:	bea6b090 	.word	0xbea6b090
 8022988:	3e2aaaab 	.word	0x3e2aaaab
 802298c:	3d9dc62e 	.word	0x3d9dc62e
 8022990:	4001572d 	.word	0x4001572d
 8022994:	c019d139 	.word	0xc019d139
 8022998:	3fc90fda 	.word	0x3fc90fda
 802299c:	b3a22168 	.word	0xb3a22168
 80229a0:	40490fda 	.word	0x40490fda
 80229a4:	3fc90fdb 	.word	0x3fc90fdb

080229a8 <__ieee754_atan2f>:
 80229a8:	ee10 2a90 	vmov	r2, s1
 80229ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80229b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80229b4:	b510      	push	{r4, lr}
 80229b6:	eef0 7a40 	vmov.f32	s15, s0
 80229ba:	dc06      	bgt.n	80229ca <__ieee754_atan2f+0x22>
 80229bc:	ee10 0a10 	vmov	r0, s0
 80229c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80229c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80229c8:	dd04      	ble.n	80229d4 <__ieee754_atan2f+0x2c>
 80229ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80229ce:	eeb0 0a67 	vmov.f32	s0, s15
 80229d2:	bd10      	pop	{r4, pc}
 80229d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80229d8:	d103      	bne.n	80229e2 <__ieee754_atan2f+0x3a>
 80229da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229de:	f001 bd8d 	b.w	80244fc <atanf>
 80229e2:	1794      	asrs	r4, r2, #30
 80229e4:	f004 0402 	and.w	r4, r4, #2
 80229e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80229ec:	b943      	cbnz	r3, 8022a00 <__ieee754_atan2f+0x58>
 80229ee:	2c02      	cmp	r4, #2
 80229f0:	d05e      	beq.n	8022ab0 <__ieee754_atan2f+0x108>
 80229f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8022ac4 <__ieee754_atan2f+0x11c>
 80229f6:	2c03      	cmp	r4, #3
 80229f8:	bf08      	it	eq
 80229fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80229fe:	e7e6      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022a00:	b941      	cbnz	r1, 8022a14 <__ieee754_atan2f+0x6c>
 8022a02:	eddf 7a31 	vldr	s15, [pc, #196]	; 8022ac8 <__ieee754_atan2f+0x120>
 8022a06:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8022acc <__ieee754_atan2f+0x124>
 8022a0a:	2800      	cmp	r0, #0
 8022a0c:	bfb8      	it	lt
 8022a0e:	eef0 7a40 	vmovlt.f32	s15, s0
 8022a12:	e7dc      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022a14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022a18:	d110      	bne.n	8022a3c <__ieee754_atan2f+0x94>
 8022a1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022a1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8022a22:	d107      	bne.n	8022a34 <__ieee754_atan2f+0x8c>
 8022a24:	2c02      	cmp	r4, #2
 8022a26:	d846      	bhi.n	8022ab6 <__ieee754_atan2f+0x10e>
 8022a28:	4b29      	ldr	r3, [pc, #164]	; (8022ad0 <__ieee754_atan2f+0x128>)
 8022a2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022a2e:	edd4 7a00 	vldr	s15, [r4]
 8022a32:	e7cc      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022a34:	2c02      	cmp	r4, #2
 8022a36:	d841      	bhi.n	8022abc <__ieee754_atan2f+0x114>
 8022a38:	4b26      	ldr	r3, [pc, #152]	; (8022ad4 <__ieee754_atan2f+0x12c>)
 8022a3a:	e7f6      	b.n	8022a2a <__ieee754_atan2f+0x82>
 8022a3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022a40:	d0df      	beq.n	8022a02 <__ieee754_atan2f+0x5a>
 8022a42:	1a5b      	subs	r3, r3, r1
 8022a44:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022a48:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022a4c:	da1a      	bge.n	8022a84 <__ieee754_atan2f+0xdc>
 8022a4e:	2a00      	cmp	r2, #0
 8022a50:	da01      	bge.n	8022a56 <__ieee754_atan2f+0xae>
 8022a52:	313c      	adds	r1, #60	; 0x3c
 8022a54:	db19      	blt.n	8022a8a <__ieee754_atan2f+0xe2>
 8022a56:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022a5a:	f001 fe23 	bl	80246a4 <fabsf>
 8022a5e:	f001 fd4d 	bl	80244fc <atanf>
 8022a62:	eef0 7a40 	vmov.f32	s15, s0
 8022a66:	2c01      	cmp	r4, #1
 8022a68:	d012      	beq.n	8022a90 <__ieee754_atan2f+0xe8>
 8022a6a:	2c02      	cmp	r4, #2
 8022a6c:	d017      	beq.n	8022a9e <__ieee754_atan2f+0xf6>
 8022a6e:	2c00      	cmp	r4, #0
 8022a70:	d0ad      	beq.n	80229ce <__ieee754_atan2f+0x26>
 8022a72:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8022ad8 <__ieee754_atan2f+0x130>
 8022a76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022a7a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8022adc <__ieee754_atan2f+0x134>
 8022a7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022a82:	e7a4      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022a84:	eddf 7a10 	vldr	s15, [pc, #64]	; 8022ac8 <__ieee754_atan2f+0x120>
 8022a88:	e7ed      	b.n	8022a66 <__ieee754_atan2f+0xbe>
 8022a8a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022ae0 <__ieee754_atan2f+0x138>
 8022a8e:	e7ea      	b.n	8022a66 <__ieee754_atan2f+0xbe>
 8022a90:	ee17 3a90 	vmov	r3, s15
 8022a94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022a98:	ee07 3a90 	vmov	s15, r3
 8022a9c:	e797      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022a9e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8022ad8 <__ieee754_atan2f+0x130>
 8022aa2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022aa6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8022adc <__ieee754_atan2f+0x134>
 8022aaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022aae:	e78e      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022ab0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8022adc <__ieee754_atan2f+0x134>
 8022ab4:	e78b      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022ab6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8022ae4 <__ieee754_atan2f+0x13c>
 8022aba:	e788      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022abc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022ae0 <__ieee754_atan2f+0x138>
 8022ac0:	e785      	b.n	80229ce <__ieee754_atan2f+0x26>
 8022ac2:	bf00      	nop
 8022ac4:	c0490fdb 	.word	0xc0490fdb
 8022ac8:	3fc90fdb 	.word	0x3fc90fdb
 8022acc:	bfc90fdb 	.word	0xbfc90fdb
 8022ad0:	0802823c 	.word	0x0802823c
 8022ad4:	08028248 	.word	0x08028248
 8022ad8:	33bbbd2e 	.word	0x33bbbd2e
 8022adc:	40490fdb 	.word	0x40490fdb
 8022ae0:	00000000 	.word	0x00000000
 8022ae4:	3f490fdb 	.word	0x3f490fdb

08022ae8 <__ieee754_powf>:
 8022ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022aec:	ee10 5a90 	vmov	r5, s1
 8022af0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8022af4:	ed2d 8b02 	vpush	{d8}
 8022af8:	eeb0 8a40 	vmov.f32	s16, s0
 8022afc:	eef0 8a60 	vmov.f32	s17, s1
 8022b00:	f000 8291 	beq.w	8023026 <__ieee754_powf+0x53e>
 8022b04:	ee10 8a10 	vmov	r8, s0
 8022b08:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8022b0c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8022b10:	dc06      	bgt.n	8022b20 <__ieee754_powf+0x38>
 8022b12:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8022b16:	dd0a      	ble.n	8022b2e <__ieee754_powf+0x46>
 8022b18:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8022b1c:	f000 8283 	beq.w	8023026 <__ieee754_powf+0x53e>
 8022b20:	ecbd 8b02 	vpop	{d8}
 8022b24:	48d8      	ldr	r0, [pc, #864]	; (8022e88 <__ieee754_powf+0x3a0>)
 8022b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022b2a:	f001 be11 	b.w	8024750 <nanf>
 8022b2e:	f1b8 0f00 	cmp.w	r8, #0
 8022b32:	da1f      	bge.n	8022b74 <__ieee754_powf+0x8c>
 8022b34:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8022b38:	da2e      	bge.n	8022b98 <__ieee754_powf+0xb0>
 8022b3a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8022b3e:	f2c0 827b 	blt.w	8023038 <__ieee754_powf+0x550>
 8022b42:	15fb      	asrs	r3, r7, #23
 8022b44:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022b48:	fa47 f603 	asr.w	r6, r7, r3
 8022b4c:	fa06 f303 	lsl.w	r3, r6, r3
 8022b50:	42bb      	cmp	r3, r7
 8022b52:	f040 8271 	bne.w	8023038 <__ieee754_powf+0x550>
 8022b56:	f006 0601 	and.w	r6, r6, #1
 8022b5a:	f1c6 0602 	rsb	r6, r6, #2
 8022b5e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8022b62:	d120      	bne.n	8022ba6 <__ieee754_powf+0xbe>
 8022b64:	2d00      	cmp	r5, #0
 8022b66:	f280 8264 	bge.w	8023032 <__ieee754_powf+0x54a>
 8022b6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022b6e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8022b72:	e00d      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022b74:	2600      	movs	r6, #0
 8022b76:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8022b7a:	d1f0      	bne.n	8022b5e <__ieee754_powf+0x76>
 8022b7c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8022b80:	f000 8251 	beq.w	8023026 <__ieee754_powf+0x53e>
 8022b84:	dd0a      	ble.n	8022b9c <__ieee754_powf+0xb4>
 8022b86:	2d00      	cmp	r5, #0
 8022b88:	f280 8250 	bge.w	802302c <__ieee754_powf+0x544>
 8022b8c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8022e8c <__ieee754_powf+0x3a4>
 8022b90:	ecbd 8b02 	vpop	{d8}
 8022b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b98:	2602      	movs	r6, #2
 8022b9a:	e7ec      	b.n	8022b76 <__ieee754_powf+0x8e>
 8022b9c:	2d00      	cmp	r5, #0
 8022b9e:	daf5      	bge.n	8022b8c <__ieee754_powf+0xa4>
 8022ba0:	eeb1 0a68 	vneg.f32	s0, s17
 8022ba4:	e7f4      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022ba6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8022baa:	d102      	bne.n	8022bb2 <__ieee754_powf+0xca>
 8022bac:	ee28 0a08 	vmul.f32	s0, s16, s16
 8022bb0:	e7ee      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022bb2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8022bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8022bba:	d108      	bne.n	8022bce <__ieee754_powf+0xe6>
 8022bbc:	f1b8 0f00 	cmp.w	r8, #0
 8022bc0:	db05      	blt.n	8022bce <__ieee754_powf+0xe6>
 8022bc2:	ecbd 8b02 	vpop	{d8}
 8022bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022bca:	f000 bb89 	b.w	80232e0 <__ieee754_sqrtf>
 8022bce:	f001 fd69 	bl	80246a4 <fabsf>
 8022bd2:	b124      	cbz	r4, 8022bde <__ieee754_powf+0xf6>
 8022bd4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8022bd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8022bdc:	d117      	bne.n	8022c0e <__ieee754_powf+0x126>
 8022bde:	2d00      	cmp	r5, #0
 8022be0:	bfbc      	itt	lt
 8022be2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8022be6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8022bea:	f1b8 0f00 	cmp.w	r8, #0
 8022bee:	dacf      	bge.n	8022b90 <__ieee754_powf+0xa8>
 8022bf0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8022bf4:	ea54 0306 	orrs.w	r3, r4, r6
 8022bf8:	d104      	bne.n	8022c04 <__ieee754_powf+0x11c>
 8022bfa:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022bfe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8022c02:	e7c5      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022c04:	2e01      	cmp	r6, #1
 8022c06:	d1c3      	bne.n	8022b90 <__ieee754_powf+0xa8>
 8022c08:	eeb1 0a40 	vneg.f32	s0, s0
 8022c0c:	e7c0      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022c0e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8022c12:	3801      	subs	r0, #1
 8022c14:	ea56 0300 	orrs.w	r3, r6, r0
 8022c18:	d104      	bne.n	8022c24 <__ieee754_powf+0x13c>
 8022c1a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8022c1e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8022c22:	e7b5      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022c24:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8022c28:	dd6b      	ble.n	8022d02 <__ieee754_powf+0x21a>
 8022c2a:	4b99      	ldr	r3, [pc, #612]	; (8022e90 <__ieee754_powf+0x3a8>)
 8022c2c:	429c      	cmp	r4, r3
 8022c2e:	dc06      	bgt.n	8022c3e <__ieee754_powf+0x156>
 8022c30:	2d00      	cmp	r5, #0
 8022c32:	daab      	bge.n	8022b8c <__ieee754_powf+0xa4>
 8022c34:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8022e94 <__ieee754_powf+0x3ac>
 8022c38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8022c3c:	e7a8      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022c3e:	4b96      	ldr	r3, [pc, #600]	; (8022e98 <__ieee754_powf+0x3b0>)
 8022c40:	429c      	cmp	r4, r3
 8022c42:	dd02      	ble.n	8022c4a <__ieee754_powf+0x162>
 8022c44:	2d00      	cmp	r5, #0
 8022c46:	dcf5      	bgt.n	8022c34 <__ieee754_powf+0x14c>
 8022c48:	e7a0      	b.n	8022b8c <__ieee754_powf+0xa4>
 8022c4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022c4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022c52:	eddf 6a92 	vldr	s13, [pc, #584]	; 8022e9c <__ieee754_powf+0x3b4>
 8022c56:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8022c5a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8022c5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022c62:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8022c66:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022c6e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8022ea0 <__ieee754_powf+0x3b8>
 8022c72:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8022c76:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8022ea4 <__ieee754_powf+0x3bc>
 8022c7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022c7e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8022ea8 <__ieee754_powf+0x3c0>
 8022c82:	eef0 6a67 	vmov.f32	s13, s15
 8022c86:	eee0 6a07 	vfma.f32	s13, s0, s14
 8022c8a:	ee16 3a90 	vmov	r3, s13
 8022c8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022c92:	f023 030f 	bic.w	r3, r3, #15
 8022c96:	ee00 3a90 	vmov	s1, r3
 8022c9a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8022c9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022ca2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8022ca6:	f025 050f 	bic.w	r5, r5, #15
 8022caa:	ee07 5a10 	vmov	s14, r5
 8022cae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8022cb2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8022cb6:	ee07 3a90 	vmov	s15, r3
 8022cba:	eee7 0a27 	vfma.f32	s1, s14, s15
 8022cbe:	3e01      	subs	r6, #1
 8022cc0:	ea56 0200 	orrs.w	r2, r6, r0
 8022cc4:	ee07 5a10 	vmov	s14, r5
 8022cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022ccc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8022cd0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8022cd4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8022cd8:	ee17 4a10 	vmov	r4, s14
 8022cdc:	bf08      	it	eq
 8022cde:	eeb0 8a40 	vmoveq.f32	s16, s0
 8022ce2:	2c00      	cmp	r4, #0
 8022ce4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8022ce8:	f340 8184 	ble.w	8022ff4 <__ieee754_powf+0x50c>
 8022cec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8022cf0:	f340 80fc 	ble.w	8022eec <__ieee754_powf+0x404>
 8022cf4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8022e94 <__ieee754_powf+0x3ac>
 8022cf8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8022cfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022d00:	e746      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022d02:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8022d06:	bf01      	itttt	eq
 8022d08:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8022eac <__ieee754_powf+0x3c4>
 8022d0c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8022d10:	f06f 0217 	mvneq.w	r2, #23
 8022d14:	ee17 4a90 	vmoveq	r4, s15
 8022d18:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8022d1c:	bf18      	it	ne
 8022d1e:	2200      	movne	r2, #0
 8022d20:	3b7f      	subs	r3, #127	; 0x7f
 8022d22:	4413      	add	r3, r2
 8022d24:	4a62      	ldr	r2, [pc, #392]	; (8022eb0 <__ieee754_powf+0x3c8>)
 8022d26:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8022d2a:	4294      	cmp	r4, r2
 8022d2c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8022d30:	dd06      	ble.n	8022d40 <__ieee754_powf+0x258>
 8022d32:	4a60      	ldr	r2, [pc, #384]	; (8022eb4 <__ieee754_powf+0x3cc>)
 8022d34:	4294      	cmp	r4, r2
 8022d36:	f340 80a4 	ble.w	8022e82 <__ieee754_powf+0x39a>
 8022d3a:	3301      	adds	r3, #1
 8022d3c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8022d40:	2400      	movs	r4, #0
 8022d42:	4a5d      	ldr	r2, [pc, #372]	; (8022eb8 <__ieee754_powf+0x3d0>)
 8022d44:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8022d48:	ee07 1a90 	vmov	s15, r1
 8022d4c:	ed92 7a00 	vldr	s14, [r2]
 8022d50:	4a5a      	ldr	r2, [pc, #360]	; (8022ebc <__ieee754_powf+0x3d4>)
 8022d52:	ee37 6a27 	vadd.f32	s12, s14, s15
 8022d56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8022d5a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8022d5e:	1049      	asrs	r1, r1, #1
 8022d60:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8022d64:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8022d68:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8022d6c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8022d70:	ee06 1a10 	vmov	s12, r1
 8022d74:	ee65 4a26 	vmul.f32	s9, s10, s13
 8022d78:	ee36 7a47 	vsub.f32	s14, s12, s14
 8022d7c:	ee14 7a90 	vmov	r7, s9
 8022d80:	4017      	ands	r7, r2
 8022d82:	ee05 7a90 	vmov	s11, r7
 8022d86:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8022d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022d8e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8022ec0 <__ieee754_powf+0x3d8>
 8022d92:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8022d96:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8022d9a:	ee25 6a26 	vmul.f32	s12, s10, s13
 8022d9e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8022ec4 <__ieee754_powf+0x3dc>
 8022da2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022da6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8022ec8 <__ieee754_powf+0x3e0>
 8022daa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022dae:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8022e9c <__ieee754_powf+0x3b4>
 8022db2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022db6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8022ecc <__ieee754_powf+0x3e4>
 8022dba:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022dbe:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8022ed0 <__ieee754_powf+0x3e8>
 8022dc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022dc6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8022dca:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8022dce:	ee66 6a86 	vmul.f32	s13, s13, s12
 8022dd2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8022dd6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8022dda:	eef0 7a45 	vmov.f32	s15, s10
 8022dde:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022de6:	ee17 1a90 	vmov	r1, s15
 8022dea:	4011      	ands	r1, r2
 8022dec:	ee07 1a90 	vmov	s15, r1
 8022df0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8022df4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8022df8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8022dfc:	ee27 7a24 	vmul.f32	s14, s14, s9
 8022e00:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022e04:	eeb0 6a47 	vmov.f32	s12, s14
 8022e08:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8022e0c:	ee16 1a10 	vmov	r1, s12
 8022e10:	4011      	ands	r1, r2
 8022e12:	ee06 1a90 	vmov	s13, r1
 8022e16:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8022e1a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8022ed4 <__ieee754_powf+0x3ec>
 8022e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8022ed8 <__ieee754_powf+0x3f0>
 8022e22:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022e26:	ee06 1a10 	vmov	s12, r1
 8022e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022e2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8022edc <__ieee754_powf+0x3f4>
 8022e32:	492b      	ldr	r1, [pc, #172]	; (8022ee0 <__ieee754_powf+0x3f8>)
 8022e34:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022e3c:	edd1 7a00 	vldr	s15, [r1]
 8022e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8022e44:	ee07 3a90 	vmov	s15, r3
 8022e48:	4b26      	ldr	r3, [pc, #152]	; (8022ee4 <__ieee754_powf+0x3fc>)
 8022e4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022e4e:	eef0 7a47 	vmov.f32	s15, s14
 8022e52:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022e56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022e5a:	edd4 0a00 	vldr	s1, [r4]
 8022e5e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022e66:	ee17 3a90 	vmov	r3, s15
 8022e6a:	4013      	ands	r3, r2
 8022e6c:	ee07 3a90 	vmov	s15, r3
 8022e70:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8022e74:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8022e78:	eee6 6a65 	vfms.f32	s13, s12, s11
 8022e7c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8022e80:	e70f      	b.n	8022ca2 <__ieee754_powf+0x1ba>
 8022e82:	2401      	movs	r4, #1
 8022e84:	e75d      	b.n	8022d42 <__ieee754_powf+0x25a>
 8022e86:	bf00      	nop
 8022e88:	080280b0 	.word	0x080280b0
 8022e8c:	00000000 	.word	0x00000000
 8022e90:	3f7ffff7 	.word	0x3f7ffff7
 8022e94:	7149f2ca 	.word	0x7149f2ca
 8022e98:	3f800007 	.word	0x3f800007
 8022e9c:	3eaaaaab 	.word	0x3eaaaaab
 8022ea0:	3fb8aa3b 	.word	0x3fb8aa3b
 8022ea4:	36eca570 	.word	0x36eca570
 8022ea8:	3fb8aa00 	.word	0x3fb8aa00
 8022eac:	4b800000 	.word	0x4b800000
 8022eb0:	001cc471 	.word	0x001cc471
 8022eb4:	005db3d6 	.word	0x005db3d6
 8022eb8:	08028254 	.word	0x08028254
 8022ebc:	fffff000 	.word	0xfffff000
 8022ec0:	3e6c3255 	.word	0x3e6c3255
 8022ec4:	3e53f142 	.word	0x3e53f142
 8022ec8:	3e8ba305 	.word	0x3e8ba305
 8022ecc:	3edb6db7 	.word	0x3edb6db7
 8022ed0:	3f19999a 	.word	0x3f19999a
 8022ed4:	3f76384f 	.word	0x3f76384f
 8022ed8:	3f763800 	.word	0x3f763800
 8022edc:	369dc3a0 	.word	0x369dc3a0
 8022ee0:	08028264 	.word	0x08028264
 8022ee4:	0802825c 	.word	0x0802825c
 8022ee8:	3338aa3c 	.word	0x3338aa3c
 8022eec:	f040 8092 	bne.w	8023014 <__ieee754_powf+0x52c>
 8022ef0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8022ee8 <__ieee754_powf+0x400>
 8022ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022ef8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8022efc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8022f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f04:	f73f aef6 	bgt.w	8022cf4 <__ieee754_powf+0x20c>
 8022f08:	15db      	asrs	r3, r3, #23
 8022f0a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8022f0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8022f12:	4103      	asrs	r3, r0
 8022f14:	4423      	add	r3, r4
 8022f16:	4949      	ldr	r1, [pc, #292]	; (802303c <__ieee754_powf+0x554>)
 8022f18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022f1c:	3a7f      	subs	r2, #127	; 0x7f
 8022f1e:	4111      	asrs	r1, r2
 8022f20:	ea23 0101 	bic.w	r1, r3, r1
 8022f24:	ee07 1a10 	vmov	s14, r1
 8022f28:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022f2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022f30:	f1c2 0217 	rsb	r2, r2, #23
 8022f34:	4110      	asrs	r0, r2
 8022f36:	2c00      	cmp	r4, #0
 8022f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022f3c:	bfb8      	it	lt
 8022f3e:	4240      	neglt	r0, r0
 8022f40:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8022f44:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8023040 <__ieee754_powf+0x558>
 8022f48:	ee17 3a10 	vmov	r3, s14
 8022f4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022f50:	f023 030f 	bic.w	r3, r3, #15
 8022f54:	ee07 3a10 	vmov	s14, r3
 8022f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022f5c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8022f60:	eddf 7a38 	vldr	s15, [pc, #224]	; 8023044 <__ieee754_powf+0x55c>
 8022f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022f68:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8022f6c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8023048 <__ieee754_powf+0x560>
 8022f70:	eeb0 0a67 	vmov.f32	s0, s15
 8022f74:	eea7 0a26 	vfma.f32	s0, s14, s13
 8022f78:	eeb0 6a40 	vmov.f32	s12, s0
 8022f7c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8022f80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022f84:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8022f88:	eddf 6a30 	vldr	s13, [pc, #192]	; 802304c <__ieee754_powf+0x564>
 8022f8c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8023050 <__ieee754_powf+0x568>
 8022f90:	eea7 6a26 	vfma.f32	s12, s14, s13
 8022f94:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8023054 <__ieee754_powf+0x56c>
 8022f98:	eee6 6a07 	vfma.f32	s13, s12, s14
 8022f9c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8023058 <__ieee754_powf+0x570>
 8022fa0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8022fa4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 802305c <__ieee754_powf+0x574>
 8022fa8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8022fac:	eeb0 6a40 	vmov.f32	s12, s0
 8022fb0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8022fb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8022fb8:	eeb0 7a46 	vmov.f32	s14, s12
 8022fbc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8022fc0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8022fc4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8022fc8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8022fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022fd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022fd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022fdc:	ee10 3a10 	vmov	r3, s0
 8022fe0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8022fe4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8022fe8:	da1a      	bge.n	8023020 <__ieee754_powf+0x538>
 8022fea:	f001 fc13 	bl	8024814 <scalbnf>
 8022fee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8022ff2:	e5cd      	b.n	8022b90 <__ieee754_powf+0xa8>
 8022ff4:	4a1a      	ldr	r2, [pc, #104]	; (8023060 <__ieee754_powf+0x578>)
 8022ff6:	4293      	cmp	r3, r2
 8022ff8:	dd02      	ble.n	8023000 <__ieee754_powf+0x518>
 8022ffa:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8023064 <__ieee754_powf+0x57c>
 8022ffe:	e67b      	b.n	8022cf8 <__ieee754_powf+0x210>
 8023000:	d108      	bne.n	8023014 <__ieee754_powf+0x52c>
 8023002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023006:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802300e:	f6ff af7b 	blt.w	8022f08 <__ieee754_powf+0x420>
 8023012:	e7f2      	b.n	8022ffa <__ieee754_powf+0x512>
 8023014:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8023018:	f73f af76 	bgt.w	8022f08 <__ieee754_powf+0x420>
 802301c:	2000      	movs	r0, #0
 802301e:	e78f      	b.n	8022f40 <__ieee754_powf+0x458>
 8023020:	ee00 3a10 	vmov	s0, r3
 8023024:	e7e3      	b.n	8022fee <__ieee754_powf+0x506>
 8023026:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802302a:	e5b1      	b.n	8022b90 <__ieee754_powf+0xa8>
 802302c:	eeb0 0a68 	vmov.f32	s0, s17
 8023030:	e5ae      	b.n	8022b90 <__ieee754_powf+0xa8>
 8023032:	eeb0 0a48 	vmov.f32	s0, s16
 8023036:	e5ab      	b.n	8022b90 <__ieee754_powf+0xa8>
 8023038:	2600      	movs	r6, #0
 802303a:	e590      	b.n	8022b5e <__ieee754_powf+0x76>
 802303c:	007fffff 	.word	0x007fffff
 8023040:	3f317218 	.word	0x3f317218
 8023044:	35bfbe8c 	.word	0x35bfbe8c
 8023048:	3f317200 	.word	0x3f317200
 802304c:	3331bb4c 	.word	0x3331bb4c
 8023050:	b5ddea0e 	.word	0xb5ddea0e
 8023054:	388ab355 	.word	0x388ab355
 8023058:	bb360b61 	.word	0xbb360b61
 802305c:	3e2aaaab 	.word	0x3e2aaaab
 8023060:	43160000 	.word	0x43160000
 8023064:	0da24260 	.word	0x0da24260

08023068 <__ieee754_rem_pio2f>:
 8023068:	b5f0      	push	{r4, r5, r6, r7, lr}
 802306a:	ee10 6a10 	vmov	r6, s0
 802306e:	4b8e      	ldr	r3, [pc, #568]	; (80232a8 <__ieee754_rem_pio2f+0x240>)
 8023070:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023074:	429d      	cmp	r5, r3
 8023076:	b087      	sub	sp, #28
 8023078:	eef0 7a40 	vmov.f32	s15, s0
 802307c:	4604      	mov	r4, r0
 802307e:	dc05      	bgt.n	802308c <__ieee754_rem_pio2f+0x24>
 8023080:	2300      	movs	r3, #0
 8023082:	ed80 0a00 	vstr	s0, [r0]
 8023086:	6043      	str	r3, [r0, #4]
 8023088:	2000      	movs	r0, #0
 802308a:	e01a      	b.n	80230c2 <__ieee754_rem_pio2f+0x5a>
 802308c:	4b87      	ldr	r3, [pc, #540]	; (80232ac <__ieee754_rem_pio2f+0x244>)
 802308e:	429d      	cmp	r5, r3
 8023090:	dc46      	bgt.n	8023120 <__ieee754_rem_pio2f+0xb8>
 8023092:	2e00      	cmp	r6, #0
 8023094:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80232b0 <__ieee754_rem_pio2f+0x248>
 8023098:	4b86      	ldr	r3, [pc, #536]	; (80232b4 <__ieee754_rem_pio2f+0x24c>)
 802309a:	f025 050f 	bic.w	r5, r5, #15
 802309e:	dd1f      	ble.n	80230e0 <__ieee754_rem_pio2f+0x78>
 80230a0:	429d      	cmp	r5, r3
 80230a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80230a6:	d00e      	beq.n	80230c6 <__ieee754_rem_pio2f+0x5e>
 80230a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80232b8 <__ieee754_rem_pio2f+0x250>
 80230ac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80230b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80230b4:	ed80 0a00 	vstr	s0, [r0]
 80230b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80230bc:	2001      	movs	r0, #1
 80230be:	edc4 7a01 	vstr	s15, [r4, #4]
 80230c2:	b007      	add	sp, #28
 80230c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80232bc <__ieee754_rem_pio2f+0x254>
 80230ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80232c0 <__ieee754_rem_pio2f+0x258>
 80230ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80230d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80230d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80230da:	edc0 6a00 	vstr	s13, [r0]
 80230de:	e7eb      	b.n	80230b8 <__ieee754_rem_pio2f+0x50>
 80230e0:	429d      	cmp	r5, r3
 80230e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80230e6:	d00e      	beq.n	8023106 <__ieee754_rem_pio2f+0x9e>
 80230e8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80232b8 <__ieee754_rem_pio2f+0x250>
 80230ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80230f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80230f4:	ed80 0a00 	vstr	s0, [r0]
 80230f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80230fc:	f04f 30ff 	mov.w	r0, #4294967295
 8023100:	edc4 7a01 	vstr	s15, [r4, #4]
 8023104:	e7dd      	b.n	80230c2 <__ieee754_rem_pio2f+0x5a>
 8023106:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80232bc <__ieee754_rem_pio2f+0x254>
 802310a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80232c0 <__ieee754_rem_pio2f+0x258>
 802310e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023112:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023116:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802311a:	edc0 6a00 	vstr	s13, [r0]
 802311e:	e7eb      	b.n	80230f8 <__ieee754_rem_pio2f+0x90>
 8023120:	4b68      	ldr	r3, [pc, #416]	; (80232c4 <__ieee754_rem_pio2f+0x25c>)
 8023122:	429d      	cmp	r5, r3
 8023124:	dc72      	bgt.n	802320c <__ieee754_rem_pio2f+0x1a4>
 8023126:	f001 fabd 	bl	80246a4 <fabsf>
 802312a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80232c8 <__ieee754_rem_pio2f+0x260>
 802312e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023132:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802313a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802313e:	ee17 0a90 	vmov	r0, s15
 8023142:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80232b0 <__ieee754_rem_pio2f+0x248>
 8023146:	eea7 0a67 	vfms.f32	s0, s14, s15
 802314a:	281f      	cmp	r0, #31
 802314c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80232b8 <__ieee754_rem_pio2f+0x250>
 8023150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023154:	eeb1 6a47 	vneg.f32	s12, s14
 8023158:	ee70 6a67 	vsub.f32	s13, s0, s15
 802315c:	ee16 2a90 	vmov	r2, s13
 8023160:	dc1c      	bgt.n	802319c <__ieee754_rem_pio2f+0x134>
 8023162:	495a      	ldr	r1, [pc, #360]	; (80232cc <__ieee754_rem_pio2f+0x264>)
 8023164:	1e47      	subs	r7, r0, #1
 8023166:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802316a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802316e:	428b      	cmp	r3, r1
 8023170:	d014      	beq.n	802319c <__ieee754_rem_pio2f+0x134>
 8023172:	6022      	str	r2, [r4, #0]
 8023174:	ed94 7a00 	vldr	s14, [r4]
 8023178:	ee30 0a47 	vsub.f32	s0, s0, s14
 802317c:	2e00      	cmp	r6, #0
 802317e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023182:	ed84 0a01 	vstr	s0, [r4, #4]
 8023186:	da9c      	bge.n	80230c2 <__ieee754_rem_pio2f+0x5a>
 8023188:	eeb1 7a47 	vneg.f32	s14, s14
 802318c:	eeb1 0a40 	vneg.f32	s0, s0
 8023190:	ed84 7a00 	vstr	s14, [r4]
 8023194:	ed84 0a01 	vstr	s0, [r4, #4]
 8023198:	4240      	negs	r0, r0
 802319a:	e792      	b.n	80230c2 <__ieee754_rem_pio2f+0x5a>
 802319c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80231a0:	15eb      	asrs	r3, r5, #23
 80231a2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80231a6:	2d08      	cmp	r5, #8
 80231a8:	dde3      	ble.n	8023172 <__ieee754_rem_pio2f+0x10a>
 80231aa:	eddf 7a44 	vldr	s15, [pc, #272]	; 80232bc <__ieee754_rem_pio2f+0x254>
 80231ae:	eef0 6a40 	vmov.f32	s13, s0
 80231b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80231b6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80231ba:	eea6 0a27 	vfma.f32	s0, s12, s15
 80231be:	eddf 7a40 	vldr	s15, [pc, #256]	; 80232c0 <__ieee754_rem_pio2f+0x258>
 80231c2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80231c6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80231ca:	eef0 7a40 	vmov.f32	s15, s0
 80231ce:	ee15 2a90 	vmov	r2, s11
 80231d2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80231d6:	1a5b      	subs	r3, r3, r1
 80231d8:	2b19      	cmp	r3, #25
 80231da:	dc04      	bgt.n	80231e6 <__ieee754_rem_pio2f+0x17e>
 80231dc:	edc4 5a00 	vstr	s11, [r4]
 80231e0:	eeb0 0a66 	vmov.f32	s0, s13
 80231e4:	e7c6      	b.n	8023174 <__ieee754_rem_pio2f+0x10c>
 80231e6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80232d0 <__ieee754_rem_pio2f+0x268>
 80231ea:	eeb0 0a66 	vmov.f32	s0, s13
 80231ee:	eea6 0a25 	vfma.f32	s0, s12, s11
 80231f2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80231f6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80232d4 <__ieee754_rem_pio2f+0x26c>
 80231fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80231fe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8023202:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023206:	ed84 7a00 	vstr	s14, [r4]
 802320a:	e7b3      	b.n	8023174 <__ieee754_rem_pio2f+0x10c>
 802320c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8023210:	db06      	blt.n	8023220 <__ieee754_rem_pio2f+0x1b8>
 8023212:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023216:	edc0 7a01 	vstr	s15, [r0, #4]
 802321a:	edc0 7a00 	vstr	s15, [r0]
 802321e:	e733      	b.n	8023088 <__ieee754_rem_pio2f+0x20>
 8023220:	15ea      	asrs	r2, r5, #23
 8023222:	3a86      	subs	r2, #134	; 0x86
 8023224:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8023228:	ee07 3a90 	vmov	s15, r3
 802322c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8023230:	eddf 6a29 	vldr	s13, [pc, #164]	; 80232d8 <__ieee754_rem_pio2f+0x270>
 8023234:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802323c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8023240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023244:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8023248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802324c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023250:	ed8d 7a04 	vstr	s14, [sp, #16]
 8023254:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023258:	eef5 7a40 	vcmp.f32	s15, #0.0
 802325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023260:	edcd 7a05 	vstr	s15, [sp, #20]
 8023264:	d11e      	bne.n	80232a4 <__ieee754_rem_pio2f+0x23c>
 8023266:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802326e:	bf14      	ite	ne
 8023270:	2302      	movne	r3, #2
 8023272:	2301      	moveq	r3, #1
 8023274:	4919      	ldr	r1, [pc, #100]	; (80232dc <__ieee754_rem_pio2f+0x274>)
 8023276:	9101      	str	r1, [sp, #4]
 8023278:	2102      	movs	r1, #2
 802327a:	9100      	str	r1, [sp, #0]
 802327c:	a803      	add	r0, sp, #12
 802327e:	4621      	mov	r1, r4
 8023280:	f000 fd58 	bl	8023d34 <__kernel_rem_pio2f>
 8023284:	2e00      	cmp	r6, #0
 8023286:	f6bf af1c 	bge.w	80230c2 <__ieee754_rem_pio2f+0x5a>
 802328a:	edd4 7a00 	vldr	s15, [r4]
 802328e:	eef1 7a67 	vneg.f32	s15, s15
 8023292:	edc4 7a00 	vstr	s15, [r4]
 8023296:	edd4 7a01 	vldr	s15, [r4, #4]
 802329a:	eef1 7a67 	vneg.f32	s15, s15
 802329e:	edc4 7a01 	vstr	s15, [r4, #4]
 80232a2:	e779      	b.n	8023198 <__ieee754_rem_pio2f+0x130>
 80232a4:	2303      	movs	r3, #3
 80232a6:	e7e5      	b.n	8023274 <__ieee754_rem_pio2f+0x20c>
 80232a8:	3f490fd8 	.word	0x3f490fd8
 80232ac:	4016cbe3 	.word	0x4016cbe3
 80232b0:	3fc90f80 	.word	0x3fc90f80
 80232b4:	3fc90fd0 	.word	0x3fc90fd0
 80232b8:	37354443 	.word	0x37354443
 80232bc:	37354400 	.word	0x37354400
 80232c0:	2e85a308 	.word	0x2e85a308
 80232c4:	43490f80 	.word	0x43490f80
 80232c8:	3f22f984 	.word	0x3f22f984
 80232cc:	0802826c 	.word	0x0802826c
 80232d0:	2e85a300 	.word	0x2e85a300
 80232d4:	248d3132 	.word	0x248d3132
 80232d8:	43800000 	.word	0x43800000
 80232dc:	080282ec 	.word	0x080282ec

080232e0 <__ieee754_sqrtf>:
 80232e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80232e4:	4770      	bx	lr
	...

080232e8 <__kernel_cos>:
 80232e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ec:	ec57 6b10 	vmov	r6, r7, d0
 80232f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80232f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80232f8:	ed8d 1b00 	vstr	d1, [sp]
 80232fc:	da07      	bge.n	802330e <__kernel_cos+0x26>
 80232fe:	ee10 0a10 	vmov	r0, s0
 8023302:	4639      	mov	r1, r7
 8023304:	f7dd fbd0 	bl	8000aa8 <__aeabi_d2iz>
 8023308:	2800      	cmp	r0, #0
 802330a:	f000 8088 	beq.w	802341e <__kernel_cos+0x136>
 802330e:	4632      	mov	r2, r6
 8023310:	463b      	mov	r3, r7
 8023312:	4630      	mov	r0, r6
 8023314:	4639      	mov	r1, r7
 8023316:	f7dd f92d 	bl	8000574 <__aeabi_dmul>
 802331a:	4b51      	ldr	r3, [pc, #324]	; (8023460 <__kernel_cos+0x178>)
 802331c:	2200      	movs	r2, #0
 802331e:	4604      	mov	r4, r0
 8023320:	460d      	mov	r5, r1
 8023322:	f7dd f927 	bl	8000574 <__aeabi_dmul>
 8023326:	a340      	add	r3, pc, #256	; (adr r3, 8023428 <__kernel_cos+0x140>)
 8023328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802332c:	4682      	mov	sl, r0
 802332e:	468b      	mov	fp, r1
 8023330:	4620      	mov	r0, r4
 8023332:	4629      	mov	r1, r5
 8023334:	f7dd f91e 	bl	8000574 <__aeabi_dmul>
 8023338:	a33d      	add	r3, pc, #244	; (adr r3, 8023430 <__kernel_cos+0x148>)
 802333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802333e:	f7dc ff63 	bl	8000208 <__adddf3>
 8023342:	4622      	mov	r2, r4
 8023344:	462b      	mov	r3, r5
 8023346:	f7dd f915 	bl	8000574 <__aeabi_dmul>
 802334a:	a33b      	add	r3, pc, #236	; (adr r3, 8023438 <__kernel_cos+0x150>)
 802334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023350:	f7dc ff58 	bl	8000204 <__aeabi_dsub>
 8023354:	4622      	mov	r2, r4
 8023356:	462b      	mov	r3, r5
 8023358:	f7dd f90c 	bl	8000574 <__aeabi_dmul>
 802335c:	a338      	add	r3, pc, #224	; (adr r3, 8023440 <__kernel_cos+0x158>)
 802335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023362:	f7dc ff51 	bl	8000208 <__adddf3>
 8023366:	4622      	mov	r2, r4
 8023368:	462b      	mov	r3, r5
 802336a:	f7dd f903 	bl	8000574 <__aeabi_dmul>
 802336e:	a336      	add	r3, pc, #216	; (adr r3, 8023448 <__kernel_cos+0x160>)
 8023370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023374:	f7dc ff46 	bl	8000204 <__aeabi_dsub>
 8023378:	4622      	mov	r2, r4
 802337a:	462b      	mov	r3, r5
 802337c:	f7dd f8fa 	bl	8000574 <__aeabi_dmul>
 8023380:	a333      	add	r3, pc, #204	; (adr r3, 8023450 <__kernel_cos+0x168>)
 8023382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023386:	f7dc ff3f 	bl	8000208 <__adddf3>
 802338a:	4622      	mov	r2, r4
 802338c:	462b      	mov	r3, r5
 802338e:	f7dd f8f1 	bl	8000574 <__aeabi_dmul>
 8023392:	4622      	mov	r2, r4
 8023394:	462b      	mov	r3, r5
 8023396:	f7dd f8ed 	bl	8000574 <__aeabi_dmul>
 802339a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802339e:	4604      	mov	r4, r0
 80233a0:	460d      	mov	r5, r1
 80233a2:	4630      	mov	r0, r6
 80233a4:	4639      	mov	r1, r7
 80233a6:	f7dd f8e5 	bl	8000574 <__aeabi_dmul>
 80233aa:	460b      	mov	r3, r1
 80233ac:	4602      	mov	r2, r0
 80233ae:	4629      	mov	r1, r5
 80233b0:	4620      	mov	r0, r4
 80233b2:	f7dc ff27 	bl	8000204 <__aeabi_dsub>
 80233b6:	4b2b      	ldr	r3, [pc, #172]	; (8023464 <__kernel_cos+0x17c>)
 80233b8:	4598      	cmp	r8, r3
 80233ba:	4606      	mov	r6, r0
 80233bc:	460f      	mov	r7, r1
 80233be:	dc10      	bgt.n	80233e2 <__kernel_cos+0xfa>
 80233c0:	4602      	mov	r2, r0
 80233c2:	460b      	mov	r3, r1
 80233c4:	4650      	mov	r0, sl
 80233c6:	4659      	mov	r1, fp
 80233c8:	f7dc ff1c 	bl	8000204 <__aeabi_dsub>
 80233cc:	460b      	mov	r3, r1
 80233ce:	4926      	ldr	r1, [pc, #152]	; (8023468 <__kernel_cos+0x180>)
 80233d0:	4602      	mov	r2, r0
 80233d2:	2000      	movs	r0, #0
 80233d4:	f7dc ff16 	bl	8000204 <__aeabi_dsub>
 80233d8:	ec41 0b10 	vmov	d0, r0, r1
 80233dc:	b003      	add	sp, #12
 80233de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233e2:	4b22      	ldr	r3, [pc, #136]	; (802346c <__kernel_cos+0x184>)
 80233e4:	4920      	ldr	r1, [pc, #128]	; (8023468 <__kernel_cos+0x180>)
 80233e6:	4598      	cmp	r8, r3
 80233e8:	bfcc      	ite	gt
 80233ea:	4d21      	ldrgt	r5, [pc, #132]	; (8023470 <__kernel_cos+0x188>)
 80233ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80233f0:	2400      	movs	r4, #0
 80233f2:	4622      	mov	r2, r4
 80233f4:	462b      	mov	r3, r5
 80233f6:	2000      	movs	r0, #0
 80233f8:	f7dc ff04 	bl	8000204 <__aeabi_dsub>
 80233fc:	4622      	mov	r2, r4
 80233fe:	4680      	mov	r8, r0
 8023400:	4689      	mov	r9, r1
 8023402:	462b      	mov	r3, r5
 8023404:	4650      	mov	r0, sl
 8023406:	4659      	mov	r1, fp
 8023408:	f7dc fefc 	bl	8000204 <__aeabi_dsub>
 802340c:	4632      	mov	r2, r6
 802340e:	463b      	mov	r3, r7
 8023410:	f7dc fef8 	bl	8000204 <__aeabi_dsub>
 8023414:	4602      	mov	r2, r0
 8023416:	460b      	mov	r3, r1
 8023418:	4640      	mov	r0, r8
 802341a:	4649      	mov	r1, r9
 802341c:	e7da      	b.n	80233d4 <__kernel_cos+0xec>
 802341e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8023458 <__kernel_cos+0x170>
 8023422:	e7db      	b.n	80233dc <__kernel_cos+0xf4>
 8023424:	f3af 8000 	nop.w
 8023428:	be8838d4 	.word	0xbe8838d4
 802342c:	bda8fae9 	.word	0xbda8fae9
 8023430:	bdb4b1c4 	.word	0xbdb4b1c4
 8023434:	3e21ee9e 	.word	0x3e21ee9e
 8023438:	809c52ad 	.word	0x809c52ad
 802343c:	3e927e4f 	.word	0x3e927e4f
 8023440:	19cb1590 	.word	0x19cb1590
 8023444:	3efa01a0 	.word	0x3efa01a0
 8023448:	16c15177 	.word	0x16c15177
 802344c:	3f56c16c 	.word	0x3f56c16c
 8023450:	5555554c 	.word	0x5555554c
 8023454:	3fa55555 	.word	0x3fa55555
 8023458:	00000000 	.word	0x00000000
 802345c:	3ff00000 	.word	0x3ff00000
 8023460:	3fe00000 	.word	0x3fe00000
 8023464:	3fd33332 	.word	0x3fd33332
 8023468:	3ff00000 	.word	0x3ff00000
 802346c:	3fe90000 	.word	0x3fe90000
 8023470:	3fd20000 	.word	0x3fd20000
 8023474:	00000000 	.word	0x00000000

08023478 <__kernel_rem_pio2>:
 8023478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802347c:	ed2d 8b02 	vpush	{d8}
 8023480:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8023484:	f112 0f14 	cmn.w	r2, #20
 8023488:	9308      	str	r3, [sp, #32]
 802348a:	9101      	str	r1, [sp, #4]
 802348c:	4bc6      	ldr	r3, [pc, #792]	; (80237a8 <__kernel_rem_pio2+0x330>)
 802348e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8023490:	9009      	str	r0, [sp, #36]	; 0x24
 8023492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023496:	9304      	str	r3, [sp, #16]
 8023498:	9b08      	ldr	r3, [sp, #32]
 802349a:	f103 33ff 	add.w	r3, r3, #4294967295
 802349e:	bfa8      	it	ge
 80234a0:	1ed4      	subge	r4, r2, #3
 80234a2:	9306      	str	r3, [sp, #24]
 80234a4:	bfb2      	itee	lt
 80234a6:	2400      	movlt	r4, #0
 80234a8:	2318      	movge	r3, #24
 80234aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80234ae:	f06f 0317 	mvn.w	r3, #23
 80234b2:	fb04 3303 	mla	r3, r4, r3, r3
 80234b6:	eb03 0a02 	add.w	sl, r3, r2
 80234ba:	9b04      	ldr	r3, [sp, #16]
 80234bc:	9a06      	ldr	r2, [sp, #24]
 80234be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8023798 <__kernel_rem_pio2+0x320>
 80234c2:	eb03 0802 	add.w	r8, r3, r2
 80234c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80234c8:	1aa7      	subs	r7, r4, r2
 80234ca:	ae20      	add	r6, sp, #128	; 0x80
 80234cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80234d0:	2500      	movs	r5, #0
 80234d2:	4545      	cmp	r5, r8
 80234d4:	dd18      	ble.n	8023508 <__kernel_rem_pio2+0x90>
 80234d6:	9b08      	ldr	r3, [sp, #32]
 80234d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80234dc:	aa20      	add	r2, sp, #128	; 0x80
 80234de:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8023798 <__kernel_rem_pio2+0x320>
 80234e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80234e6:	f1c3 0301 	rsb	r3, r3, #1
 80234ea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80234ee:	9307      	str	r3, [sp, #28]
 80234f0:	9b07      	ldr	r3, [sp, #28]
 80234f2:	9a04      	ldr	r2, [sp, #16]
 80234f4:	4443      	add	r3, r8
 80234f6:	429a      	cmp	r2, r3
 80234f8:	db2f      	blt.n	802355a <__kernel_rem_pio2+0xe2>
 80234fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80234fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8023502:	462f      	mov	r7, r5
 8023504:	2600      	movs	r6, #0
 8023506:	e01b      	b.n	8023540 <__kernel_rem_pio2+0xc8>
 8023508:	42ef      	cmn	r7, r5
 802350a:	d407      	bmi.n	802351c <__kernel_rem_pio2+0xa4>
 802350c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023510:	f7dc ffc6 	bl	80004a0 <__aeabi_i2d>
 8023514:	e8e6 0102 	strd	r0, r1, [r6], #8
 8023518:	3501      	adds	r5, #1
 802351a:	e7da      	b.n	80234d2 <__kernel_rem_pio2+0x5a>
 802351c:	ec51 0b18 	vmov	r0, r1, d8
 8023520:	e7f8      	b.n	8023514 <__kernel_rem_pio2+0x9c>
 8023522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023526:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802352a:	f7dd f823 	bl	8000574 <__aeabi_dmul>
 802352e:	4602      	mov	r2, r0
 8023530:	460b      	mov	r3, r1
 8023532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023536:	f7dc fe67 	bl	8000208 <__adddf3>
 802353a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802353e:	3601      	adds	r6, #1
 8023540:	9b06      	ldr	r3, [sp, #24]
 8023542:	429e      	cmp	r6, r3
 8023544:	f1a7 0708 	sub.w	r7, r7, #8
 8023548:	ddeb      	ble.n	8023522 <__kernel_rem_pio2+0xaa>
 802354a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802354e:	3508      	adds	r5, #8
 8023550:	ecab 7b02 	vstmia	fp!, {d7}
 8023554:	f108 0801 	add.w	r8, r8, #1
 8023558:	e7ca      	b.n	80234f0 <__kernel_rem_pio2+0x78>
 802355a:	9b04      	ldr	r3, [sp, #16]
 802355c:	aa0c      	add	r2, sp, #48	; 0x30
 802355e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023562:	930b      	str	r3, [sp, #44]	; 0x2c
 8023564:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8023566:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802356a:	9c04      	ldr	r4, [sp, #16]
 802356c:	930a      	str	r3, [sp, #40]	; 0x28
 802356e:	ab98      	add	r3, sp, #608	; 0x260
 8023570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023574:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8023578:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 802357c:	f8cd b008 	str.w	fp, [sp, #8]
 8023580:	4625      	mov	r5, r4
 8023582:	2d00      	cmp	r5, #0
 8023584:	dc78      	bgt.n	8023678 <__kernel_rem_pio2+0x200>
 8023586:	ec47 6b10 	vmov	d0, r6, r7
 802358a:	4650      	mov	r0, sl
 802358c:	f000 ff30 	bl	80243f0 <scalbn>
 8023590:	ec57 6b10 	vmov	r6, r7, d0
 8023594:	2200      	movs	r2, #0
 8023596:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802359a:	ee10 0a10 	vmov	r0, s0
 802359e:	4639      	mov	r1, r7
 80235a0:	f7dc ffe8 	bl	8000574 <__aeabi_dmul>
 80235a4:	ec41 0b10 	vmov	d0, r0, r1
 80235a8:	f000 fea2 	bl	80242f0 <floor>
 80235ac:	4b7f      	ldr	r3, [pc, #508]	; (80237ac <__kernel_rem_pio2+0x334>)
 80235ae:	ec51 0b10 	vmov	r0, r1, d0
 80235b2:	2200      	movs	r2, #0
 80235b4:	f7dc ffde 	bl	8000574 <__aeabi_dmul>
 80235b8:	4602      	mov	r2, r0
 80235ba:	460b      	mov	r3, r1
 80235bc:	4630      	mov	r0, r6
 80235be:	4639      	mov	r1, r7
 80235c0:	f7dc fe20 	bl	8000204 <__aeabi_dsub>
 80235c4:	460f      	mov	r7, r1
 80235c6:	4606      	mov	r6, r0
 80235c8:	f7dd fa6e 	bl	8000aa8 <__aeabi_d2iz>
 80235cc:	9007      	str	r0, [sp, #28]
 80235ce:	f7dc ff67 	bl	80004a0 <__aeabi_i2d>
 80235d2:	4602      	mov	r2, r0
 80235d4:	460b      	mov	r3, r1
 80235d6:	4630      	mov	r0, r6
 80235d8:	4639      	mov	r1, r7
 80235da:	f7dc fe13 	bl	8000204 <__aeabi_dsub>
 80235de:	f1ba 0f00 	cmp.w	sl, #0
 80235e2:	4606      	mov	r6, r0
 80235e4:	460f      	mov	r7, r1
 80235e6:	dd70      	ble.n	80236ca <__kernel_rem_pio2+0x252>
 80235e8:	1e62      	subs	r2, r4, #1
 80235ea:	ab0c      	add	r3, sp, #48	; 0x30
 80235ec:	9d07      	ldr	r5, [sp, #28]
 80235ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80235f2:	f1ca 0118 	rsb	r1, sl, #24
 80235f6:	fa40 f301 	asr.w	r3, r0, r1
 80235fa:	441d      	add	r5, r3
 80235fc:	408b      	lsls	r3, r1
 80235fe:	1ac0      	subs	r0, r0, r3
 8023600:	ab0c      	add	r3, sp, #48	; 0x30
 8023602:	9507      	str	r5, [sp, #28]
 8023604:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8023608:	f1ca 0317 	rsb	r3, sl, #23
 802360c:	fa40 f303 	asr.w	r3, r0, r3
 8023610:	9302      	str	r3, [sp, #8]
 8023612:	9b02      	ldr	r3, [sp, #8]
 8023614:	2b00      	cmp	r3, #0
 8023616:	dd66      	ble.n	80236e6 <__kernel_rem_pio2+0x26e>
 8023618:	9b07      	ldr	r3, [sp, #28]
 802361a:	2200      	movs	r2, #0
 802361c:	3301      	adds	r3, #1
 802361e:	9307      	str	r3, [sp, #28]
 8023620:	4615      	mov	r5, r2
 8023622:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023626:	4294      	cmp	r4, r2
 8023628:	f300 8099 	bgt.w	802375e <__kernel_rem_pio2+0x2e6>
 802362c:	f1ba 0f00 	cmp.w	sl, #0
 8023630:	dd07      	ble.n	8023642 <__kernel_rem_pio2+0x1ca>
 8023632:	f1ba 0f01 	cmp.w	sl, #1
 8023636:	f000 80a5 	beq.w	8023784 <__kernel_rem_pio2+0x30c>
 802363a:	f1ba 0f02 	cmp.w	sl, #2
 802363e:	f000 80c1 	beq.w	80237c4 <__kernel_rem_pio2+0x34c>
 8023642:	9b02      	ldr	r3, [sp, #8]
 8023644:	2b02      	cmp	r3, #2
 8023646:	d14e      	bne.n	80236e6 <__kernel_rem_pio2+0x26e>
 8023648:	4632      	mov	r2, r6
 802364a:	463b      	mov	r3, r7
 802364c:	4958      	ldr	r1, [pc, #352]	; (80237b0 <__kernel_rem_pio2+0x338>)
 802364e:	2000      	movs	r0, #0
 8023650:	f7dc fdd8 	bl	8000204 <__aeabi_dsub>
 8023654:	4606      	mov	r6, r0
 8023656:	460f      	mov	r7, r1
 8023658:	2d00      	cmp	r5, #0
 802365a:	d044      	beq.n	80236e6 <__kernel_rem_pio2+0x26e>
 802365c:	4650      	mov	r0, sl
 802365e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80237a0 <__kernel_rem_pio2+0x328>
 8023662:	f000 fec5 	bl	80243f0 <scalbn>
 8023666:	4630      	mov	r0, r6
 8023668:	4639      	mov	r1, r7
 802366a:	ec53 2b10 	vmov	r2, r3, d0
 802366e:	f7dc fdc9 	bl	8000204 <__aeabi_dsub>
 8023672:	4606      	mov	r6, r0
 8023674:	460f      	mov	r7, r1
 8023676:	e036      	b.n	80236e6 <__kernel_rem_pio2+0x26e>
 8023678:	4b4e      	ldr	r3, [pc, #312]	; (80237b4 <__kernel_rem_pio2+0x33c>)
 802367a:	2200      	movs	r2, #0
 802367c:	4630      	mov	r0, r6
 802367e:	4639      	mov	r1, r7
 8023680:	f7dc ff78 	bl	8000574 <__aeabi_dmul>
 8023684:	f7dd fa10 	bl	8000aa8 <__aeabi_d2iz>
 8023688:	f7dc ff0a 	bl	80004a0 <__aeabi_i2d>
 802368c:	4b4a      	ldr	r3, [pc, #296]	; (80237b8 <__kernel_rem_pio2+0x340>)
 802368e:	2200      	movs	r2, #0
 8023690:	4680      	mov	r8, r0
 8023692:	4689      	mov	r9, r1
 8023694:	f7dc ff6e 	bl	8000574 <__aeabi_dmul>
 8023698:	4602      	mov	r2, r0
 802369a:	460b      	mov	r3, r1
 802369c:	4630      	mov	r0, r6
 802369e:	4639      	mov	r1, r7
 80236a0:	f7dc fdb0 	bl	8000204 <__aeabi_dsub>
 80236a4:	f7dd fa00 	bl	8000aa8 <__aeabi_d2iz>
 80236a8:	9b02      	ldr	r3, [sp, #8]
 80236aa:	f843 0b04 	str.w	r0, [r3], #4
 80236ae:	3d01      	subs	r5, #1
 80236b0:	9302      	str	r3, [sp, #8]
 80236b2:	ab70      	add	r3, sp, #448	; 0x1c0
 80236b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80236b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236bc:	4640      	mov	r0, r8
 80236be:	4649      	mov	r1, r9
 80236c0:	f7dc fda2 	bl	8000208 <__adddf3>
 80236c4:	4606      	mov	r6, r0
 80236c6:	460f      	mov	r7, r1
 80236c8:	e75b      	b.n	8023582 <__kernel_rem_pio2+0x10a>
 80236ca:	d105      	bne.n	80236d8 <__kernel_rem_pio2+0x260>
 80236cc:	1e63      	subs	r3, r4, #1
 80236ce:	aa0c      	add	r2, sp, #48	; 0x30
 80236d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80236d4:	15c3      	asrs	r3, r0, #23
 80236d6:	e79b      	b.n	8023610 <__kernel_rem_pio2+0x198>
 80236d8:	4b38      	ldr	r3, [pc, #224]	; (80237bc <__kernel_rem_pio2+0x344>)
 80236da:	2200      	movs	r2, #0
 80236dc:	f7dd f9d0 	bl	8000a80 <__aeabi_dcmpge>
 80236e0:	2800      	cmp	r0, #0
 80236e2:	d139      	bne.n	8023758 <__kernel_rem_pio2+0x2e0>
 80236e4:	9002      	str	r0, [sp, #8]
 80236e6:	2200      	movs	r2, #0
 80236e8:	2300      	movs	r3, #0
 80236ea:	4630      	mov	r0, r6
 80236ec:	4639      	mov	r1, r7
 80236ee:	f7dd f9a9 	bl	8000a44 <__aeabi_dcmpeq>
 80236f2:	2800      	cmp	r0, #0
 80236f4:	f000 80b4 	beq.w	8023860 <__kernel_rem_pio2+0x3e8>
 80236f8:	f104 3bff 	add.w	fp, r4, #4294967295
 80236fc:	465b      	mov	r3, fp
 80236fe:	2200      	movs	r2, #0
 8023700:	9904      	ldr	r1, [sp, #16]
 8023702:	428b      	cmp	r3, r1
 8023704:	da65      	bge.n	80237d2 <__kernel_rem_pio2+0x35a>
 8023706:	2a00      	cmp	r2, #0
 8023708:	d07b      	beq.n	8023802 <__kernel_rem_pio2+0x38a>
 802370a:	ab0c      	add	r3, sp, #48	; 0x30
 802370c:	f1aa 0a18 	sub.w	sl, sl, #24
 8023710:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8023714:	2b00      	cmp	r3, #0
 8023716:	f000 80a0 	beq.w	802385a <__kernel_rem_pio2+0x3e2>
 802371a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80237a0 <__kernel_rem_pio2+0x328>
 802371e:	4650      	mov	r0, sl
 8023720:	f000 fe66 	bl	80243f0 <scalbn>
 8023724:	4f23      	ldr	r7, [pc, #140]	; (80237b4 <__kernel_rem_pio2+0x33c>)
 8023726:	ec55 4b10 	vmov	r4, r5, d0
 802372a:	46d8      	mov	r8, fp
 802372c:	2600      	movs	r6, #0
 802372e:	f1b8 0f00 	cmp.w	r8, #0
 8023732:	f280 80cf 	bge.w	80238d4 <__kernel_rem_pio2+0x45c>
 8023736:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8023798 <__kernel_rem_pio2+0x320>
 802373a:	465f      	mov	r7, fp
 802373c:	f04f 0800 	mov.w	r8, #0
 8023740:	2f00      	cmp	r7, #0
 8023742:	f2c0 80fd 	blt.w	8023940 <__kernel_rem_pio2+0x4c8>
 8023746:	ab70      	add	r3, sp, #448	; 0x1c0
 8023748:	f8df a074 	ldr.w	sl, [pc, #116]	; 80237c0 <__kernel_rem_pio2+0x348>
 802374c:	ec55 4b18 	vmov	r4, r5, d8
 8023750:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8023754:	2600      	movs	r6, #0
 8023756:	e0e5      	b.n	8023924 <__kernel_rem_pio2+0x4ac>
 8023758:	2302      	movs	r3, #2
 802375a:	9302      	str	r3, [sp, #8]
 802375c:	e75c      	b.n	8023618 <__kernel_rem_pio2+0x1a0>
 802375e:	f8db 3000 	ldr.w	r3, [fp]
 8023762:	b955      	cbnz	r5, 802377a <__kernel_rem_pio2+0x302>
 8023764:	b123      	cbz	r3, 8023770 <__kernel_rem_pio2+0x2f8>
 8023766:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802376a:	f8cb 3000 	str.w	r3, [fp]
 802376e:	2301      	movs	r3, #1
 8023770:	3201      	adds	r2, #1
 8023772:	f10b 0b04 	add.w	fp, fp, #4
 8023776:	461d      	mov	r5, r3
 8023778:	e755      	b.n	8023626 <__kernel_rem_pio2+0x1ae>
 802377a:	1acb      	subs	r3, r1, r3
 802377c:	f8cb 3000 	str.w	r3, [fp]
 8023780:	462b      	mov	r3, r5
 8023782:	e7f5      	b.n	8023770 <__kernel_rem_pio2+0x2f8>
 8023784:	1e62      	subs	r2, r4, #1
 8023786:	ab0c      	add	r3, sp, #48	; 0x30
 8023788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802378c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023790:	a90c      	add	r1, sp, #48	; 0x30
 8023792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023796:	e754      	b.n	8023642 <__kernel_rem_pio2+0x1ca>
	...
 80237a4:	3ff00000 	.word	0x3ff00000
 80237a8:	08028648 	.word	0x08028648
 80237ac:	40200000 	.word	0x40200000
 80237b0:	3ff00000 	.word	0x3ff00000
 80237b4:	3e700000 	.word	0x3e700000
 80237b8:	41700000 	.word	0x41700000
 80237bc:	3fe00000 	.word	0x3fe00000
 80237c0:	08028608 	.word	0x08028608
 80237c4:	1e62      	subs	r2, r4, #1
 80237c6:	ab0c      	add	r3, sp, #48	; 0x30
 80237c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80237cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80237d0:	e7de      	b.n	8023790 <__kernel_rem_pio2+0x318>
 80237d2:	a90c      	add	r1, sp, #48	; 0x30
 80237d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80237d8:	3b01      	subs	r3, #1
 80237da:	430a      	orrs	r2, r1
 80237dc:	e790      	b.n	8023700 <__kernel_rem_pio2+0x288>
 80237de:	3301      	adds	r3, #1
 80237e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80237e4:	2900      	cmp	r1, #0
 80237e6:	d0fa      	beq.n	80237de <__kernel_rem_pio2+0x366>
 80237e8:	9a08      	ldr	r2, [sp, #32]
 80237ea:	18e3      	adds	r3, r4, r3
 80237ec:	18a6      	adds	r6, r4, r2
 80237ee:	aa20      	add	r2, sp, #128	; 0x80
 80237f0:	1c65      	adds	r5, r4, #1
 80237f2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80237f6:	9302      	str	r3, [sp, #8]
 80237f8:	9b02      	ldr	r3, [sp, #8]
 80237fa:	42ab      	cmp	r3, r5
 80237fc:	da04      	bge.n	8023808 <__kernel_rem_pio2+0x390>
 80237fe:	461c      	mov	r4, r3
 8023800:	e6b5      	b.n	802356e <__kernel_rem_pio2+0xf6>
 8023802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023804:	2301      	movs	r3, #1
 8023806:	e7eb      	b.n	80237e0 <__kernel_rem_pio2+0x368>
 8023808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802380a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802380e:	f7dc fe47 	bl	80004a0 <__aeabi_i2d>
 8023812:	e8e6 0102 	strd	r0, r1, [r6], #8
 8023816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023818:	46b3      	mov	fp, r6
 802381a:	461c      	mov	r4, r3
 802381c:	2700      	movs	r7, #0
 802381e:	f04f 0800 	mov.w	r8, #0
 8023822:	f04f 0900 	mov.w	r9, #0
 8023826:	9b06      	ldr	r3, [sp, #24]
 8023828:	429f      	cmp	r7, r3
 802382a:	dd06      	ble.n	802383a <__kernel_rem_pio2+0x3c2>
 802382c:	ab70      	add	r3, sp, #448	; 0x1c0
 802382e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023832:	e9c3 8900 	strd	r8, r9, [r3]
 8023836:	3501      	adds	r5, #1
 8023838:	e7de      	b.n	80237f8 <__kernel_rem_pio2+0x380>
 802383a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802383e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023842:	f7dc fe97 	bl	8000574 <__aeabi_dmul>
 8023846:	4602      	mov	r2, r0
 8023848:	460b      	mov	r3, r1
 802384a:	4640      	mov	r0, r8
 802384c:	4649      	mov	r1, r9
 802384e:	f7dc fcdb 	bl	8000208 <__adddf3>
 8023852:	3701      	adds	r7, #1
 8023854:	4680      	mov	r8, r0
 8023856:	4689      	mov	r9, r1
 8023858:	e7e5      	b.n	8023826 <__kernel_rem_pio2+0x3ae>
 802385a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802385e:	e754      	b.n	802370a <__kernel_rem_pio2+0x292>
 8023860:	ec47 6b10 	vmov	d0, r6, r7
 8023864:	f1ca 0000 	rsb	r0, sl, #0
 8023868:	f000 fdc2 	bl	80243f0 <scalbn>
 802386c:	ec57 6b10 	vmov	r6, r7, d0
 8023870:	4b9f      	ldr	r3, [pc, #636]	; (8023af0 <__kernel_rem_pio2+0x678>)
 8023872:	ee10 0a10 	vmov	r0, s0
 8023876:	2200      	movs	r2, #0
 8023878:	4639      	mov	r1, r7
 802387a:	f7dd f901 	bl	8000a80 <__aeabi_dcmpge>
 802387e:	b300      	cbz	r0, 80238c2 <__kernel_rem_pio2+0x44a>
 8023880:	4b9c      	ldr	r3, [pc, #624]	; (8023af4 <__kernel_rem_pio2+0x67c>)
 8023882:	2200      	movs	r2, #0
 8023884:	4630      	mov	r0, r6
 8023886:	4639      	mov	r1, r7
 8023888:	f7dc fe74 	bl	8000574 <__aeabi_dmul>
 802388c:	f7dd f90c 	bl	8000aa8 <__aeabi_d2iz>
 8023890:	4605      	mov	r5, r0
 8023892:	f7dc fe05 	bl	80004a0 <__aeabi_i2d>
 8023896:	4b96      	ldr	r3, [pc, #600]	; (8023af0 <__kernel_rem_pio2+0x678>)
 8023898:	2200      	movs	r2, #0
 802389a:	f7dc fe6b 	bl	8000574 <__aeabi_dmul>
 802389e:	460b      	mov	r3, r1
 80238a0:	4602      	mov	r2, r0
 80238a2:	4639      	mov	r1, r7
 80238a4:	4630      	mov	r0, r6
 80238a6:	f7dc fcad 	bl	8000204 <__aeabi_dsub>
 80238aa:	f7dd f8fd 	bl	8000aa8 <__aeabi_d2iz>
 80238ae:	f104 0b01 	add.w	fp, r4, #1
 80238b2:	ab0c      	add	r3, sp, #48	; 0x30
 80238b4:	f10a 0a18 	add.w	sl, sl, #24
 80238b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80238bc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80238c0:	e72b      	b.n	802371a <__kernel_rem_pio2+0x2a2>
 80238c2:	4630      	mov	r0, r6
 80238c4:	4639      	mov	r1, r7
 80238c6:	f7dd f8ef 	bl	8000aa8 <__aeabi_d2iz>
 80238ca:	ab0c      	add	r3, sp, #48	; 0x30
 80238cc:	46a3      	mov	fp, r4
 80238ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80238d2:	e722      	b.n	802371a <__kernel_rem_pio2+0x2a2>
 80238d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80238d6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80238da:	ab0c      	add	r3, sp, #48	; 0x30
 80238dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80238e0:	f7dc fdde 	bl	80004a0 <__aeabi_i2d>
 80238e4:	4622      	mov	r2, r4
 80238e6:	462b      	mov	r3, r5
 80238e8:	f7dc fe44 	bl	8000574 <__aeabi_dmul>
 80238ec:	4632      	mov	r2, r6
 80238ee:	e9c9 0100 	strd	r0, r1, [r9]
 80238f2:	463b      	mov	r3, r7
 80238f4:	4620      	mov	r0, r4
 80238f6:	4629      	mov	r1, r5
 80238f8:	f7dc fe3c 	bl	8000574 <__aeabi_dmul>
 80238fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8023900:	4604      	mov	r4, r0
 8023902:	460d      	mov	r5, r1
 8023904:	e713      	b.n	802372e <__kernel_rem_pio2+0x2b6>
 8023906:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802390a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802390e:	f7dc fe31 	bl	8000574 <__aeabi_dmul>
 8023912:	4602      	mov	r2, r0
 8023914:	460b      	mov	r3, r1
 8023916:	4620      	mov	r0, r4
 8023918:	4629      	mov	r1, r5
 802391a:	f7dc fc75 	bl	8000208 <__adddf3>
 802391e:	3601      	adds	r6, #1
 8023920:	4604      	mov	r4, r0
 8023922:	460d      	mov	r5, r1
 8023924:	9b04      	ldr	r3, [sp, #16]
 8023926:	429e      	cmp	r6, r3
 8023928:	dc01      	bgt.n	802392e <__kernel_rem_pio2+0x4b6>
 802392a:	45b0      	cmp	r8, r6
 802392c:	daeb      	bge.n	8023906 <__kernel_rem_pio2+0x48e>
 802392e:	ab48      	add	r3, sp, #288	; 0x120
 8023930:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023934:	e9c3 4500 	strd	r4, r5, [r3]
 8023938:	3f01      	subs	r7, #1
 802393a:	f108 0801 	add.w	r8, r8, #1
 802393e:	e6ff      	b.n	8023740 <__kernel_rem_pio2+0x2c8>
 8023940:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8023942:	2b02      	cmp	r3, #2
 8023944:	dc0b      	bgt.n	802395e <__kernel_rem_pio2+0x4e6>
 8023946:	2b00      	cmp	r3, #0
 8023948:	dc6e      	bgt.n	8023a28 <__kernel_rem_pio2+0x5b0>
 802394a:	d045      	beq.n	80239d8 <__kernel_rem_pio2+0x560>
 802394c:	9b07      	ldr	r3, [sp, #28]
 802394e:	f003 0007 	and.w	r0, r3, #7
 8023952:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8023956:	ecbd 8b02 	vpop	{d8}
 802395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802395e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8023960:	2b03      	cmp	r3, #3
 8023962:	d1f3      	bne.n	802394c <__kernel_rem_pio2+0x4d4>
 8023964:	ab48      	add	r3, sp, #288	; 0x120
 8023966:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 802396a:	46d0      	mov	r8, sl
 802396c:	46d9      	mov	r9, fp
 802396e:	f1b9 0f00 	cmp.w	r9, #0
 8023972:	f1a8 0808 	sub.w	r8, r8, #8
 8023976:	dc64      	bgt.n	8023a42 <__kernel_rem_pio2+0x5ca>
 8023978:	465c      	mov	r4, fp
 802397a:	2c01      	cmp	r4, #1
 802397c:	f1aa 0a08 	sub.w	sl, sl, #8
 8023980:	dc7e      	bgt.n	8023a80 <__kernel_rem_pio2+0x608>
 8023982:	2000      	movs	r0, #0
 8023984:	2100      	movs	r1, #0
 8023986:	f1bb 0f01 	cmp.w	fp, #1
 802398a:	f300 8097 	bgt.w	8023abc <__kernel_rem_pio2+0x644>
 802398e:	9b02      	ldr	r3, [sp, #8]
 8023990:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8023994:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8023998:	2b00      	cmp	r3, #0
 802399a:	f040 8099 	bne.w	8023ad0 <__kernel_rem_pio2+0x658>
 802399e:	9b01      	ldr	r3, [sp, #4]
 80239a0:	e9c3 5600 	strd	r5, r6, [r3]
 80239a4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80239a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80239ac:	e7ce      	b.n	802394c <__kernel_rem_pio2+0x4d4>
 80239ae:	ab48      	add	r3, sp, #288	; 0x120
 80239b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80239b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239b8:	f7dc fc26 	bl	8000208 <__adddf3>
 80239bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80239c0:	f1bb 0f00 	cmp.w	fp, #0
 80239c4:	daf3      	bge.n	80239ae <__kernel_rem_pio2+0x536>
 80239c6:	9b02      	ldr	r3, [sp, #8]
 80239c8:	b113      	cbz	r3, 80239d0 <__kernel_rem_pio2+0x558>
 80239ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80239ce:	4619      	mov	r1, r3
 80239d0:	9b01      	ldr	r3, [sp, #4]
 80239d2:	e9c3 0100 	strd	r0, r1, [r3]
 80239d6:	e7b9      	b.n	802394c <__kernel_rem_pio2+0x4d4>
 80239d8:	2000      	movs	r0, #0
 80239da:	2100      	movs	r1, #0
 80239dc:	e7f0      	b.n	80239c0 <__kernel_rem_pio2+0x548>
 80239de:	ab48      	add	r3, sp, #288	; 0x120
 80239e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80239e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239e8:	f7dc fc0e 	bl	8000208 <__adddf3>
 80239ec:	3c01      	subs	r4, #1
 80239ee:	2c00      	cmp	r4, #0
 80239f0:	daf5      	bge.n	80239de <__kernel_rem_pio2+0x566>
 80239f2:	9b02      	ldr	r3, [sp, #8]
 80239f4:	b1e3      	cbz	r3, 8023a30 <__kernel_rem_pio2+0x5b8>
 80239f6:	4602      	mov	r2, r0
 80239f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80239fc:	9c01      	ldr	r4, [sp, #4]
 80239fe:	e9c4 2300 	strd	r2, r3, [r4]
 8023a02:	4602      	mov	r2, r0
 8023a04:	460b      	mov	r3, r1
 8023a06:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8023a0a:	f7dc fbfb 	bl	8000204 <__aeabi_dsub>
 8023a0e:	ad4a      	add	r5, sp, #296	; 0x128
 8023a10:	2401      	movs	r4, #1
 8023a12:	45a3      	cmp	fp, r4
 8023a14:	da0f      	bge.n	8023a36 <__kernel_rem_pio2+0x5be>
 8023a16:	9b02      	ldr	r3, [sp, #8]
 8023a18:	b113      	cbz	r3, 8023a20 <__kernel_rem_pio2+0x5a8>
 8023a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023a1e:	4619      	mov	r1, r3
 8023a20:	9b01      	ldr	r3, [sp, #4]
 8023a22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023a26:	e791      	b.n	802394c <__kernel_rem_pio2+0x4d4>
 8023a28:	465c      	mov	r4, fp
 8023a2a:	2000      	movs	r0, #0
 8023a2c:	2100      	movs	r1, #0
 8023a2e:	e7de      	b.n	80239ee <__kernel_rem_pio2+0x576>
 8023a30:	4602      	mov	r2, r0
 8023a32:	460b      	mov	r3, r1
 8023a34:	e7e2      	b.n	80239fc <__kernel_rem_pio2+0x584>
 8023a36:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8023a3a:	f7dc fbe5 	bl	8000208 <__adddf3>
 8023a3e:	3401      	adds	r4, #1
 8023a40:	e7e7      	b.n	8023a12 <__kernel_rem_pio2+0x59a>
 8023a42:	e9d8 4500 	ldrd	r4, r5, [r8]
 8023a46:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8023a4a:	4620      	mov	r0, r4
 8023a4c:	4632      	mov	r2, r6
 8023a4e:	463b      	mov	r3, r7
 8023a50:	4629      	mov	r1, r5
 8023a52:	f7dc fbd9 	bl	8000208 <__adddf3>
 8023a56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023a5a:	4602      	mov	r2, r0
 8023a5c:	460b      	mov	r3, r1
 8023a5e:	4620      	mov	r0, r4
 8023a60:	4629      	mov	r1, r5
 8023a62:	f7dc fbcf 	bl	8000204 <__aeabi_dsub>
 8023a66:	4632      	mov	r2, r6
 8023a68:	463b      	mov	r3, r7
 8023a6a:	f7dc fbcd 	bl	8000208 <__adddf3>
 8023a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8023a72:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8023a76:	ed88 7b00 	vstr	d7, [r8]
 8023a7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8023a7e:	e776      	b.n	802396e <__kernel_rem_pio2+0x4f6>
 8023a80:	e9da 8900 	ldrd	r8, r9, [sl]
 8023a84:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8023a88:	4640      	mov	r0, r8
 8023a8a:	4632      	mov	r2, r6
 8023a8c:	463b      	mov	r3, r7
 8023a8e:	4649      	mov	r1, r9
 8023a90:	f7dc fbba 	bl	8000208 <__adddf3>
 8023a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023a98:	4602      	mov	r2, r0
 8023a9a:	460b      	mov	r3, r1
 8023a9c:	4640      	mov	r0, r8
 8023a9e:	4649      	mov	r1, r9
 8023aa0:	f7dc fbb0 	bl	8000204 <__aeabi_dsub>
 8023aa4:	4632      	mov	r2, r6
 8023aa6:	463b      	mov	r3, r7
 8023aa8:	f7dc fbae 	bl	8000208 <__adddf3>
 8023aac:	ed9d 7b04 	vldr	d7, [sp, #16]
 8023ab0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023ab4:	ed8a 7b00 	vstr	d7, [sl]
 8023ab8:	3c01      	subs	r4, #1
 8023aba:	e75e      	b.n	802397a <__kernel_rem_pio2+0x502>
 8023abc:	ab48      	add	r3, sp, #288	; 0x120
 8023abe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ac6:	f7dc fb9f 	bl	8000208 <__adddf3>
 8023aca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023ace:	e75a      	b.n	8023986 <__kernel_rem_pio2+0x50e>
 8023ad0:	9b01      	ldr	r3, [sp, #4]
 8023ad2:	9a01      	ldr	r2, [sp, #4]
 8023ad4:	601d      	str	r5, [r3, #0]
 8023ad6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023ada:	605c      	str	r4, [r3, #4]
 8023adc:	609f      	str	r7, [r3, #8]
 8023ade:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023ae2:	60d3      	str	r3, [r2, #12]
 8023ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ae8:	6110      	str	r0, [r2, #16]
 8023aea:	6153      	str	r3, [r2, #20]
 8023aec:	e72e      	b.n	802394c <__kernel_rem_pio2+0x4d4>
 8023aee:	bf00      	nop
 8023af0:	41700000 	.word	0x41700000
 8023af4:	3e700000 	.word	0x3e700000

08023af8 <__kernel_sin>:
 8023af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023afc:	ed2d 8b04 	vpush	{d8-d9}
 8023b00:	eeb0 8a41 	vmov.f32	s16, s2
 8023b04:	eef0 8a61 	vmov.f32	s17, s3
 8023b08:	ec55 4b10 	vmov	r4, r5, d0
 8023b0c:	b083      	sub	sp, #12
 8023b0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023b12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023b16:	9001      	str	r0, [sp, #4]
 8023b18:	da06      	bge.n	8023b28 <__kernel_sin+0x30>
 8023b1a:	ee10 0a10 	vmov	r0, s0
 8023b1e:	4629      	mov	r1, r5
 8023b20:	f7dc ffc2 	bl	8000aa8 <__aeabi_d2iz>
 8023b24:	2800      	cmp	r0, #0
 8023b26:	d051      	beq.n	8023bcc <__kernel_sin+0xd4>
 8023b28:	4622      	mov	r2, r4
 8023b2a:	462b      	mov	r3, r5
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	4629      	mov	r1, r5
 8023b30:	f7dc fd20 	bl	8000574 <__aeabi_dmul>
 8023b34:	4682      	mov	sl, r0
 8023b36:	468b      	mov	fp, r1
 8023b38:	4602      	mov	r2, r0
 8023b3a:	460b      	mov	r3, r1
 8023b3c:	4620      	mov	r0, r4
 8023b3e:	4629      	mov	r1, r5
 8023b40:	f7dc fd18 	bl	8000574 <__aeabi_dmul>
 8023b44:	a341      	add	r3, pc, #260	; (adr r3, 8023c4c <__kernel_sin+0x154>)
 8023b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4a:	4680      	mov	r8, r0
 8023b4c:	4689      	mov	r9, r1
 8023b4e:	4650      	mov	r0, sl
 8023b50:	4659      	mov	r1, fp
 8023b52:	f7dc fd0f 	bl	8000574 <__aeabi_dmul>
 8023b56:	a33f      	add	r3, pc, #252	; (adr r3, 8023c54 <__kernel_sin+0x15c>)
 8023b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b5c:	f7dc fb52 	bl	8000204 <__aeabi_dsub>
 8023b60:	4652      	mov	r2, sl
 8023b62:	465b      	mov	r3, fp
 8023b64:	f7dc fd06 	bl	8000574 <__aeabi_dmul>
 8023b68:	a33c      	add	r3, pc, #240	; (adr r3, 8023c5c <__kernel_sin+0x164>)
 8023b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b6e:	f7dc fb4b 	bl	8000208 <__adddf3>
 8023b72:	4652      	mov	r2, sl
 8023b74:	465b      	mov	r3, fp
 8023b76:	f7dc fcfd 	bl	8000574 <__aeabi_dmul>
 8023b7a:	a33a      	add	r3, pc, #232	; (adr r3, 8023c64 <__kernel_sin+0x16c>)
 8023b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b80:	f7dc fb40 	bl	8000204 <__aeabi_dsub>
 8023b84:	4652      	mov	r2, sl
 8023b86:	465b      	mov	r3, fp
 8023b88:	f7dc fcf4 	bl	8000574 <__aeabi_dmul>
 8023b8c:	a337      	add	r3, pc, #220	; (adr r3, 8023c6c <__kernel_sin+0x174>)
 8023b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b92:	f7dc fb39 	bl	8000208 <__adddf3>
 8023b96:	9b01      	ldr	r3, [sp, #4]
 8023b98:	4606      	mov	r6, r0
 8023b9a:	460f      	mov	r7, r1
 8023b9c:	b9eb      	cbnz	r3, 8023bda <__kernel_sin+0xe2>
 8023b9e:	4602      	mov	r2, r0
 8023ba0:	460b      	mov	r3, r1
 8023ba2:	4650      	mov	r0, sl
 8023ba4:	4659      	mov	r1, fp
 8023ba6:	f7dc fce5 	bl	8000574 <__aeabi_dmul>
 8023baa:	a325      	add	r3, pc, #148	; (adr r3, 8023c40 <__kernel_sin+0x148>)
 8023bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb0:	f7dc fb28 	bl	8000204 <__aeabi_dsub>
 8023bb4:	4642      	mov	r2, r8
 8023bb6:	464b      	mov	r3, r9
 8023bb8:	f7dc fcdc 	bl	8000574 <__aeabi_dmul>
 8023bbc:	4602      	mov	r2, r0
 8023bbe:	460b      	mov	r3, r1
 8023bc0:	4620      	mov	r0, r4
 8023bc2:	4629      	mov	r1, r5
 8023bc4:	f7dc fb20 	bl	8000208 <__adddf3>
 8023bc8:	4604      	mov	r4, r0
 8023bca:	460d      	mov	r5, r1
 8023bcc:	ec45 4b10 	vmov	d0, r4, r5
 8023bd0:	b003      	add	sp, #12
 8023bd2:	ecbd 8b04 	vpop	{d8-d9}
 8023bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bda:	4b1b      	ldr	r3, [pc, #108]	; (8023c48 <__kernel_sin+0x150>)
 8023bdc:	ec51 0b18 	vmov	r0, r1, d8
 8023be0:	2200      	movs	r2, #0
 8023be2:	f7dc fcc7 	bl	8000574 <__aeabi_dmul>
 8023be6:	4632      	mov	r2, r6
 8023be8:	ec41 0b19 	vmov	d9, r0, r1
 8023bec:	463b      	mov	r3, r7
 8023bee:	4640      	mov	r0, r8
 8023bf0:	4649      	mov	r1, r9
 8023bf2:	f7dc fcbf 	bl	8000574 <__aeabi_dmul>
 8023bf6:	4602      	mov	r2, r0
 8023bf8:	460b      	mov	r3, r1
 8023bfa:	ec51 0b19 	vmov	r0, r1, d9
 8023bfe:	f7dc fb01 	bl	8000204 <__aeabi_dsub>
 8023c02:	4652      	mov	r2, sl
 8023c04:	465b      	mov	r3, fp
 8023c06:	f7dc fcb5 	bl	8000574 <__aeabi_dmul>
 8023c0a:	ec53 2b18 	vmov	r2, r3, d8
 8023c0e:	f7dc faf9 	bl	8000204 <__aeabi_dsub>
 8023c12:	a30b      	add	r3, pc, #44	; (adr r3, 8023c40 <__kernel_sin+0x148>)
 8023c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c18:	4606      	mov	r6, r0
 8023c1a:	460f      	mov	r7, r1
 8023c1c:	4640      	mov	r0, r8
 8023c1e:	4649      	mov	r1, r9
 8023c20:	f7dc fca8 	bl	8000574 <__aeabi_dmul>
 8023c24:	4602      	mov	r2, r0
 8023c26:	460b      	mov	r3, r1
 8023c28:	4630      	mov	r0, r6
 8023c2a:	4639      	mov	r1, r7
 8023c2c:	f7dc faec 	bl	8000208 <__adddf3>
 8023c30:	4602      	mov	r2, r0
 8023c32:	460b      	mov	r3, r1
 8023c34:	4620      	mov	r0, r4
 8023c36:	4629      	mov	r1, r5
 8023c38:	f7dc fae4 	bl	8000204 <__aeabi_dsub>
 8023c3c:	e7c4      	b.n	8023bc8 <__kernel_sin+0xd0>
 8023c3e:	bf00      	nop
 8023c40:	55555549 	.word	0x55555549
 8023c44:	3fc55555 	.word	0x3fc55555
 8023c48:	3fe00000 	.word	0x3fe00000
 8023c4c:	5acfd57c 	.word	0x5acfd57c
 8023c50:	3de5d93a 	.word	0x3de5d93a
 8023c54:	8a2b9ceb 	.word	0x8a2b9ceb
 8023c58:	3e5ae5e6 	.word	0x3e5ae5e6
 8023c5c:	57b1fe7d 	.word	0x57b1fe7d
 8023c60:	3ec71de3 	.word	0x3ec71de3
 8023c64:	19c161d5 	.word	0x19c161d5
 8023c68:	3f2a01a0 	.word	0x3f2a01a0
 8023c6c:	1110f8a6 	.word	0x1110f8a6
 8023c70:	3f811111 	.word	0x3f811111

08023c74 <__kernel_cosf>:
 8023c74:	ee10 3a10 	vmov	r3, s0
 8023c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023c7c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8023c80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8023c84:	da05      	bge.n	8023c92 <__kernel_cosf+0x1e>
 8023c86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023c8a:	ee17 2a90 	vmov	r2, s15
 8023c8e:	2a00      	cmp	r2, #0
 8023c90:	d03d      	beq.n	8023d0e <__kernel_cosf+0x9a>
 8023c92:	ee60 5a00 	vmul.f32	s11, s0, s0
 8023c96:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8023d14 <__kernel_cosf+0xa0>
 8023c9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8023d18 <__kernel_cosf+0xa4>
 8023c9e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8023d1c <__kernel_cosf+0xa8>
 8023ca2:	4a1f      	ldr	r2, [pc, #124]	; (8023d20 <__kernel_cosf+0xac>)
 8023ca4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8023ca8:	4293      	cmp	r3, r2
 8023caa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8023d24 <__kernel_cosf+0xb0>
 8023cae:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023cb2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8023d28 <__kernel_cosf+0xb4>
 8023cb6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023cba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8023d2c <__kernel_cosf+0xb8>
 8023cbe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023cc2:	eeb0 7a66 	vmov.f32	s14, s13
 8023cc6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023cca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8023cce:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8023cd2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8023cd6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8023cda:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8023cde:	dc04      	bgt.n	8023cea <__kernel_cosf+0x76>
 8023ce0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8023ce4:	ee36 0a47 	vsub.f32	s0, s12, s14
 8023ce8:	4770      	bx	lr
 8023cea:	4a11      	ldr	r2, [pc, #68]	; (8023d30 <__kernel_cosf+0xbc>)
 8023cec:	4293      	cmp	r3, r2
 8023cee:	bfda      	itte	le
 8023cf0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8023cf4:	ee06 3a90 	vmovle	s13, r3
 8023cf8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8023cfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023d00:	ee36 0a66 	vsub.f32	s0, s12, s13
 8023d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023d08:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023d0c:	4770      	bx	lr
 8023d0e:	eeb0 0a46 	vmov.f32	s0, s12
 8023d12:	4770      	bx	lr
 8023d14:	ad47d74e 	.word	0xad47d74e
 8023d18:	310f74f6 	.word	0x310f74f6
 8023d1c:	3d2aaaab 	.word	0x3d2aaaab
 8023d20:	3e999999 	.word	0x3e999999
 8023d24:	b493f27c 	.word	0xb493f27c
 8023d28:	37d00d01 	.word	0x37d00d01
 8023d2c:	bab60b61 	.word	0xbab60b61
 8023d30:	3f480000 	.word	0x3f480000

08023d34 <__kernel_rem_pio2f>:
 8023d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d38:	ed2d 8b04 	vpush	{d8-d9}
 8023d3c:	b0d7      	sub	sp, #348	; 0x15c
 8023d3e:	4616      	mov	r6, r2
 8023d40:	4698      	mov	r8, r3
 8023d42:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8023d44:	4bbb      	ldr	r3, [pc, #748]	; (8024034 <__kernel_rem_pio2f+0x300>)
 8023d46:	9001      	str	r0, [sp, #4]
 8023d48:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8023d4c:	1d33      	adds	r3, r6, #4
 8023d4e:	460d      	mov	r5, r1
 8023d50:	f108 39ff 	add.w	r9, r8, #4294967295
 8023d54:	db29      	blt.n	8023daa <__kernel_rem_pio2f+0x76>
 8023d56:	1ef1      	subs	r1, r6, #3
 8023d58:	bf48      	it	mi
 8023d5a:	1d31      	addmi	r1, r6, #4
 8023d5c:	10c9      	asrs	r1, r1, #3
 8023d5e:	1c4c      	adds	r4, r1, #1
 8023d60:	00e3      	lsls	r3, r4, #3
 8023d62:	9302      	str	r3, [sp, #8]
 8023d64:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8023d66:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8024044 <__kernel_rem_pio2f+0x310>
 8023d6a:	eba1 0009 	sub.w	r0, r1, r9
 8023d6e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8023d72:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8023d76:	eb07 0c09 	add.w	ip, r7, r9
 8023d7a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8023d7e:	2300      	movs	r3, #0
 8023d80:	4563      	cmp	r3, ip
 8023d82:	dd14      	ble.n	8023dae <__kernel_rem_pio2f+0x7a>
 8023d84:	ab1a      	add	r3, sp, #104	; 0x68
 8023d86:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8023d8a:	46cc      	mov	ip, r9
 8023d8c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8023d90:	f1c8 0b01 	rsb	fp, r8, #1
 8023d94:	eb0b 020c 	add.w	r2, fp, ip
 8023d98:	4297      	cmp	r7, r2
 8023d9a:	db27      	blt.n	8023dec <__kernel_rem_pio2f+0xb8>
 8023d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023da0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8024044 <__kernel_rem_pio2f+0x310>
 8023da4:	4618      	mov	r0, r3
 8023da6:	2200      	movs	r2, #0
 8023da8:	e016      	b.n	8023dd8 <__kernel_rem_pio2f+0xa4>
 8023daa:	2100      	movs	r1, #0
 8023dac:	e7d7      	b.n	8023d5e <__kernel_rem_pio2f+0x2a>
 8023dae:	42d8      	cmn	r0, r3
 8023db0:	bf5d      	ittte	pl
 8023db2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8023db6:	ee07 2a90 	vmovpl	s15, r2
 8023dba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8023dbe:	eef0 7a47 	vmovmi.f32	s15, s14
 8023dc2:	ecea 7a01 	vstmia	sl!, {s15}
 8023dc6:	3301      	adds	r3, #1
 8023dc8:	e7da      	b.n	8023d80 <__kernel_rem_pio2f+0x4c>
 8023dca:	ecfe 6a01 	vldmia	lr!, {s13}
 8023dce:	ed90 7a00 	vldr	s14, [r0]
 8023dd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023dd6:	3201      	adds	r2, #1
 8023dd8:	454a      	cmp	r2, r9
 8023dda:	f1a0 0004 	sub.w	r0, r0, #4
 8023dde:	ddf4      	ble.n	8023dca <__kernel_rem_pio2f+0x96>
 8023de0:	ecea 7a01 	vstmia	sl!, {s15}
 8023de4:	3304      	adds	r3, #4
 8023de6:	f10c 0c01 	add.w	ip, ip, #1
 8023dea:	e7d3      	b.n	8023d94 <__kernel_rem_pio2f+0x60>
 8023dec:	ab06      	add	r3, sp, #24
 8023dee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8023df2:	9304      	str	r3, [sp, #16]
 8023df4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8023df6:	eddf 8a92 	vldr	s17, [pc, #584]	; 8024040 <__kernel_rem_pio2f+0x30c>
 8023dfa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802403c <__kernel_rem_pio2f+0x308>
 8023dfe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8023e02:	9303      	str	r3, [sp, #12]
 8023e04:	46ba      	mov	sl, r7
 8023e06:	ab56      	add	r3, sp, #344	; 0x158
 8023e08:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8023e0c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8023e10:	ab06      	add	r3, sp, #24
 8023e12:	4618      	mov	r0, r3
 8023e14:	4652      	mov	r2, sl
 8023e16:	2a00      	cmp	r2, #0
 8023e18:	dc51      	bgt.n	8023ebe <__kernel_rem_pio2f+0x18a>
 8023e1a:	4620      	mov	r0, r4
 8023e1c:	9305      	str	r3, [sp, #20]
 8023e1e:	f000 fcf9 	bl	8024814 <scalbnf>
 8023e22:	eeb0 8a40 	vmov.f32	s16, s0
 8023e26:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8023e2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023e2e:	f000 fc4d 	bl	80246cc <floorf>
 8023e32:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8023e36:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023e3a:	2c00      	cmp	r4, #0
 8023e3c:	9b05      	ldr	r3, [sp, #20]
 8023e3e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8023e42:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8023e46:	edcd 7a00 	vstr	s15, [sp]
 8023e4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023e4e:	dd4b      	ble.n	8023ee8 <__kernel_rem_pio2f+0x1b4>
 8023e50:	f10a 3cff 	add.w	ip, sl, #4294967295
 8023e54:	aa06      	add	r2, sp, #24
 8023e56:	f1c4 0e08 	rsb	lr, r4, #8
 8023e5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023e5e:	ee17 1a90 	vmov	r1, s15
 8023e62:	fa42 f00e 	asr.w	r0, r2, lr
 8023e66:	4401      	add	r1, r0
 8023e68:	9100      	str	r1, [sp, #0]
 8023e6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8023e6e:	a906      	add	r1, sp, #24
 8023e70:	1a12      	subs	r2, r2, r0
 8023e72:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8023e76:	f1c4 0007 	rsb	r0, r4, #7
 8023e7a:	fa42 fb00 	asr.w	fp, r2, r0
 8023e7e:	f1bb 0f00 	cmp.w	fp, #0
 8023e82:	dd43      	ble.n	8023f0c <__kernel_rem_pio2f+0x1d8>
 8023e84:	9a00      	ldr	r2, [sp, #0]
 8023e86:	f04f 0e00 	mov.w	lr, #0
 8023e8a:	3201      	adds	r2, #1
 8023e8c:	9200      	str	r2, [sp, #0]
 8023e8e:	4670      	mov	r0, lr
 8023e90:	45f2      	cmp	sl, lr
 8023e92:	dc6c      	bgt.n	8023f6e <__kernel_rem_pio2f+0x23a>
 8023e94:	2c00      	cmp	r4, #0
 8023e96:	dd04      	ble.n	8023ea2 <__kernel_rem_pio2f+0x16e>
 8023e98:	2c01      	cmp	r4, #1
 8023e9a:	d079      	beq.n	8023f90 <__kernel_rem_pio2f+0x25c>
 8023e9c:	2c02      	cmp	r4, #2
 8023e9e:	f000 8082 	beq.w	8023fa6 <__kernel_rem_pio2f+0x272>
 8023ea2:	f1bb 0f02 	cmp.w	fp, #2
 8023ea6:	d131      	bne.n	8023f0c <__kernel_rem_pio2f+0x1d8>
 8023ea8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023eac:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023eb0:	b360      	cbz	r0, 8023f0c <__kernel_rem_pio2f+0x1d8>
 8023eb2:	4620      	mov	r0, r4
 8023eb4:	f000 fcae 	bl	8024814 <scalbnf>
 8023eb8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023ebc:	e026      	b.n	8023f0c <__kernel_rem_pio2f+0x1d8>
 8023ebe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8023ec2:	3a01      	subs	r2, #1
 8023ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023ec8:	a942      	add	r1, sp, #264	; 0x108
 8023eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023ece:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8023ed2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8023ed6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023eda:	eca0 0a01 	vstmia	r0!, {s0}
 8023ede:	ed9c 0a00 	vldr	s0, [ip]
 8023ee2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023ee6:	e796      	b.n	8023e16 <__kernel_rem_pio2f+0xe2>
 8023ee8:	d107      	bne.n	8023efa <__kernel_rem_pio2f+0x1c6>
 8023eea:	f10a 32ff 	add.w	r2, sl, #4294967295
 8023eee:	a906      	add	r1, sp, #24
 8023ef0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8023ef4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8023ef8:	e7c1      	b.n	8023e7e <__kernel_rem_pio2f+0x14a>
 8023efa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023efe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8023f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f06:	da2f      	bge.n	8023f68 <__kernel_rem_pio2f+0x234>
 8023f08:	f04f 0b00 	mov.w	fp, #0
 8023f0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f14:	f040 8098 	bne.w	8024048 <__kernel_rem_pio2f+0x314>
 8023f18:	f10a 33ff 	add.w	r3, sl, #4294967295
 8023f1c:	469c      	mov	ip, r3
 8023f1e:	2200      	movs	r2, #0
 8023f20:	45bc      	cmp	ip, r7
 8023f22:	da48      	bge.n	8023fb6 <__kernel_rem_pio2f+0x282>
 8023f24:	2a00      	cmp	r2, #0
 8023f26:	d05f      	beq.n	8023fe8 <__kernel_rem_pio2f+0x2b4>
 8023f28:	aa06      	add	r2, sp, #24
 8023f2a:	3c08      	subs	r4, #8
 8023f2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023f30:	2900      	cmp	r1, #0
 8023f32:	d07d      	beq.n	8024030 <__kernel_rem_pio2f+0x2fc>
 8023f34:	4620      	mov	r0, r4
 8023f36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023f3a:	9301      	str	r3, [sp, #4]
 8023f3c:	f000 fc6a 	bl	8024814 <scalbnf>
 8023f40:	9b01      	ldr	r3, [sp, #4]
 8023f42:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024040 <__kernel_rem_pio2f+0x30c>
 8023f46:	4619      	mov	r1, r3
 8023f48:	2900      	cmp	r1, #0
 8023f4a:	f280 80af 	bge.w	80240ac <__kernel_rem_pio2f+0x378>
 8023f4e:	4618      	mov	r0, r3
 8023f50:	2400      	movs	r4, #0
 8023f52:	2800      	cmp	r0, #0
 8023f54:	f2c0 80d0 	blt.w	80240f8 <__kernel_rem_pio2f+0x3c4>
 8023f58:	a942      	add	r1, sp, #264	; 0x108
 8023f5a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8023f5e:	4a36      	ldr	r2, [pc, #216]	; (8024038 <__kernel_rem_pio2f+0x304>)
 8023f60:	eddf 7a38 	vldr	s15, [pc, #224]	; 8024044 <__kernel_rem_pio2f+0x310>
 8023f64:	2100      	movs	r1, #0
 8023f66:	e0bb      	b.n	80240e0 <__kernel_rem_pio2f+0x3ac>
 8023f68:	f04f 0b02 	mov.w	fp, #2
 8023f6c:	e78a      	b.n	8023e84 <__kernel_rem_pio2f+0x150>
 8023f6e:	681a      	ldr	r2, [r3, #0]
 8023f70:	b948      	cbnz	r0, 8023f86 <__kernel_rem_pio2f+0x252>
 8023f72:	b11a      	cbz	r2, 8023f7c <__kernel_rem_pio2f+0x248>
 8023f74:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f78:	601a      	str	r2, [r3, #0]
 8023f7a:	2201      	movs	r2, #1
 8023f7c:	f10e 0e01 	add.w	lr, lr, #1
 8023f80:	3304      	adds	r3, #4
 8023f82:	4610      	mov	r0, r2
 8023f84:	e784      	b.n	8023e90 <__kernel_rem_pio2f+0x15c>
 8023f86:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8023f8a:	601a      	str	r2, [r3, #0]
 8023f8c:	4602      	mov	r2, r0
 8023f8e:	e7f5      	b.n	8023f7c <__kernel_rem_pio2f+0x248>
 8023f90:	f10a 3cff 	add.w	ip, sl, #4294967295
 8023f94:	ab06      	add	r3, sp, #24
 8023f96:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023f9e:	aa06      	add	r2, sp, #24
 8023fa0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8023fa4:	e77d      	b.n	8023ea2 <__kernel_rem_pio2f+0x16e>
 8023fa6:	f10a 3cff 	add.w	ip, sl, #4294967295
 8023faa:	ab06      	add	r3, sp, #24
 8023fac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023fb4:	e7f3      	b.n	8023f9e <__kernel_rem_pio2f+0x26a>
 8023fb6:	a906      	add	r1, sp, #24
 8023fb8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8023fbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023fc0:	4302      	orrs	r2, r0
 8023fc2:	e7ad      	b.n	8023f20 <__kernel_rem_pio2f+0x1ec>
 8023fc4:	3001      	adds	r0, #1
 8023fc6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8023fca:	2a00      	cmp	r2, #0
 8023fcc:	d0fa      	beq.n	8023fc4 <__kernel_rem_pio2f+0x290>
 8023fce:	a91a      	add	r1, sp, #104	; 0x68
 8023fd0:	eb0a 0208 	add.w	r2, sl, r8
 8023fd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8023fd8:	f10a 0301 	add.w	r3, sl, #1
 8023fdc:	eb0a 0100 	add.w	r1, sl, r0
 8023fe0:	4299      	cmp	r1, r3
 8023fe2:	da04      	bge.n	8023fee <__kernel_rem_pio2f+0x2ba>
 8023fe4:	468a      	mov	sl, r1
 8023fe6:	e70e      	b.n	8023e06 <__kernel_rem_pio2f+0xd2>
 8023fe8:	9b04      	ldr	r3, [sp, #16]
 8023fea:	2001      	movs	r0, #1
 8023fec:	e7eb      	b.n	8023fc6 <__kernel_rem_pio2f+0x292>
 8023fee:	9803      	ldr	r0, [sp, #12]
 8023ff0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8023ff4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8023ff8:	9000      	str	r0, [sp, #0]
 8023ffa:	ee07 0a90 	vmov	s15, r0
 8023ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024002:	2000      	movs	r0, #0
 8024004:	ece2 7a01 	vstmia	r2!, {s15}
 8024008:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8024044 <__kernel_rem_pio2f+0x310>
 802400c:	4696      	mov	lr, r2
 802400e:	4548      	cmp	r0, r9
 8024010:	dd06      	ble.n	8024020 <__kernel_rem_pio2f+0x2ec>
 8024012:	a842      	add	r0, sp, #264	; 0x108
 8024014:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024018:	edc0 7a00 	vstr	s15, [r0]
 802401c:	3301      	adds	r3, #1
 802401e:	e7df      	b.n	8023fe0 <__kernel_rem_pio2f+0x2ac>
 8024020:	ecfc 6a01 	vldmia	ip!, {s13}
 8024024:	ed3e 7a01 	vldmdb	lr!, {s14}
 8024028:	3001      	adds	r0, #1
 802402a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802402e:	e7ee      	b.n	802400e <__kernel_rem_pio2f+0x2da>
 8024030:	3b01      	subs	r3, #1
 8024032:	e779      	b.n	8023f28 <__kernel_rem_pio2f+0x1f4>
 8024034:	08028684 	.word	0x08028684
 8024038:	08028658 	.word	0x08028658
 802403c:	43800000 	.word	0x43800000
 8024040:	3b800000 	.word	0x3b800000
 8024044:	00000000 	.word	0x00000000
 8024048:	9b02      	ldr	r3, [sp, #8]
 802404a:	eeb0 0a48 	vmov.f32	s0, s16
 802404e:	1b98      	subs	r0, r3, r6
 8024050:	f000 fbe0 	bl	8024814 <scalbnf>
 8024054:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802403c <__kernel_rem_pio2f+0x308>
 8024058:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024060:	db1b      	blt.n	802409a <__kernel_rem_pio2f+0x366>
 8024062:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8024040 <__kernel_rem_pio2f+0x30c>
 8024066:	ee60 7a27 	vmul.f32	s15, s0, s15
 802406a:	aa06      	add	r2, sp, #24
 802406c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024070:	a906      	add	r1, sp, #24
 8024072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024076:	3408      	adds	r4, #8
 8024078:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802407c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024080:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024084:	ee10 3a10 	vmov	r3, s0
 8024088:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802408c:	ee17 2a90 	vmov	r2, s15
 8024090:	f10a 0301 	add.w	r3, sl, #1
 8024094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8024098:	e74c      	b.n	8023f34 <__kernel_rem_pio2f+0x200>
 802409a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802409e:	aa06      	add	r2, sp, #24
 80240a0:	ee10 3a10 	vmov	r3, s0
 80240a4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80240a8:	4653      	mov	r3, sl
 80240aa:	e743      	b.n	8023f34 <__kernel_rem_pio2f+0x200>
 80240ac:	aa42      	add	r2, sp, #264	; 0x108
 80240ae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80240b2:	aa06      	add	r2, sp, #24
 80240b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80240b8:	9201      	str	r2, [sp, #4]
 80240ba:	ee07 2a90 	vmov	s15, r2
 80240be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80240c2:	3901      	subs	r1, #1
 80240c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80240c8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80240cc:	edc0 7a00 	vstr	s15, [r0]
 80240d0:	e73a      	b.n	8023f48 <__kernel_rem_pio2f+0x214>
 80240d2:	ecf2 6a01 	vldmia	r2!, {s13}
 80240d6:	ecb6 7a01 	vldmia	r6!, {s14}
 80240da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80240de:	3101      	adds	r1, #1
 80240e0:	42b9      	cmp	r1, r7
 80240e2:	dc01      	bgt.n	80240e8 <__kernel_rem_pio2f+0x3b4>
 80240e4:	428c      	cmp	r4, r1
 80240e6:	daf4      	bge.n	80240d2 <__kernel_rem_pio2f+0x39e>
 80240e8:	aa56      	add	r2, sp, #344	; 0x158
 80240ea:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80240ee:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80240f2:	3801      	subs	r0, #1
 80240f4:	3401      	adds	r4, #1
 80240f6:	e72c      	b.n	8023f52 <__kernel_rem_pio2f+0x21e>
 80240f8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80240fa:	2a02      	cmp	r2, #2
 80240fc:	dc0a      	bgt.n	8024114 <__kernel_rem_pio2f+0x3e0>
 80240fe:	2a00      	cmp	r2, #0
 8024100:	dc61      	bgt.n	80241c6 <__kernel_rem_pio2f+0x492>
 8024102:	d03c      	beq.n	802417e <__kernel_rem_pio2f+0x44a>
 8024104:	9b00      	ldr	r3, [sp, #0]
 8024106:	f003 0007 	and.w	r0, r3, #7
 802410a:	b057      	add	sp, #348	; 0x15c
 802410c:	ecbd 8b04 	vpop	{d8-d9}
 8024110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024114:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024116:	2a03      	cmp	r2, #3
 8024118:	d1f4      	bne.n	8024104 <__kernel_rem_pio2f+0x3d0>
 802411a:	aa2e      	add	r2, sp, #184	; 0xb8
 802411c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024120:	4608      	mov	r0, r1
 8024122:	461c      	mov	r4, r3
 8024124:	2c00      	cmp	r4, #0
 8024126:	f1a0 0004 	sub.w	r0, r0, #4
 802412a:	dc59      	bgt.n	80241e0 <__kernel_rem_pio2f+0x4ac>
 802412c:	4618      	mov	r0, r3
 802412e:	2801      	cmp	r0, #1
 8024130:	f1a1 0104 	sub.w	r1, r1, #4
 8024134:	dc64      	bgt.n	8024200 <__kernel_rem_pio2f+0x4cc>
 8024136:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8024044 <__kernel_rem_pio2f+0x310>
 802413a:	2b01      	cmp	r3, #1
 802413c:	dc70      	bgt.n	8024220 <__kernel_rem_pio2f+0x4ec>
 802413e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8024142:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8024146:	f1bb 0f00 	cmp.w	fp, #0
 802414a:	d172      	bne.n	8024232 <__kernel_rem_pio2f+0x4fe>
 802414c:	edc5 6a00 	vstr	s13, [r5]
 8024150:	ed85 7a01 	vstr	s14, [r5, #4]
 8024154:	edc5 7a02 	vstr	s15, [r5, #8]
 8024158:	e7d4      	b.n	8024104 <__kernel_rem_pio2f+0x3d0>
 802415a:	aa2e      	add	r2, sp, #184	; 0xb8
 802415c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024160:	ed91 7a00 	vldr	s14, [r1]
 8024164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024168:	3b01      	subs	r3, #1
 802416a:	2b00      	cmp	r3, #0
 802416c:	daf5      	bge.n	802415a <__kernel_rem_pio2f+0x426>
 802416e:	f1bb 0f00 	cmp.w	fp, #0
 8024172:	d001      	beq.n	8024178 <__kernel_rem_pio2f+0x444>
 8024174:	eef1 7a67 	vneg.f32	s15, s15
 8024178:	edc5 7a00 	vstr	s15, [r5]
 802417c:	e7c2      	b.n	8024104 <__kernel_rem_pio2f+0x3d0>
 802417e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8024044 <__kernel_rem_pio2f+0x310>
 8024182:	e7f2      	b.n	802416a <__kernel_rem_pio2f+0x436>
 8024184:	aa2e      	add	r2, sp, #184	; 0xb8
 8024186:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802418a:	edd0 7a00 	vldr	s15, [r0]
 802418e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024192:	3901      	subs	r1, #1
 8024194:	2900      	cmp	r1, #0
 8024196:	daf5      	bge.n	8024184 <__kernel_rem_pio2f+0x450>
 8024198:	f1bb 0f00 	cmp.w	fp, #0
 802419c:	d017      	beq.n	80241ce <__kernel_rem_pio2f+0x49a>
 802419e:	eef1 7a47 	vneg.f32	s15, s14
 80241a2:	edc5 7a00 	vstr	s15, [r5]
 80241a6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80241aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80241ae:	a82f      	add	r0, sp, #188	; 0xbc
 80241b0:	2101      	movs	r1, #1
 80241b2:	428b      	cmp	r3, r1
 80241b4:	da0e      	bge.n	80241d4 <__kernel_rem_pio2f+0x4a0>
 80241b6:	f1bb 0f00 	cmp.w	fp, #0
 80241ba:	d001      	beq.n	80241c0 <__kernel_rem_pio2f+0x48c>
 80241bc:	eef1 7a67 	vneg.f32	s15, s15
 80241c0:	edc5 7a01 	vstr	s15, [r5, #4]
 80241c4:	e79e      	b.n	8024104 <__kernel_rem_pio2f+0x3d0>
 80241c6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8024044 <__kernel_rem_pio2f+0x310>
 80241ca:	4619      	mov	r1, r3
 80241cc:	e7e2      	b.n	8024194 <__kernel_rem_pio2f+0x460>
 80241ce:	eef0 7a47 	vmov.f32	s15, s14
 80241d2:	e7e6      	b.n	80241a2 <__kernel_rem_pio2f+0x46e>
 80241d4:	ecb0 7a01 	vldmia	r0!, {s14}
 80241d8:	3101      	adds	r1, #1
 80241da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80241de:	e7e8      	b.n	80241b2 <__kernel_rem_pio2f+0x47e>
 80241e0:	edd0 7a00 	vldr	s15, [r0]
 80241e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80241e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80241ec:	3c01      	subs	r4, #1
 80241ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80241f2:	ed80 7a00 	vstr	s14, [r0]
 80241f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80241fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80241fe:	e791      	b.n	8024124 <__kernel_rem_pio2f+0x3f0>
 8024200:	edd1 7a00 	vldr	s15, [r1]
 8024204:	edd1 6a01 	vldr	s13, [r1, #4]
 8024208:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802420c:	3801      	subs	r0, #1
 802420e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024212:	ed81 7a00 	vstr	s14, [r1]
 8024216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802421a:	edc1 7a01 	vstr	s15, [r1, #4]
 802421e:	e786      	b.n	802412e <__kernel_rem_pio2f+0x3fa>
 8024220:	aa2e      	add	r2, sp, #184	; 0xb8
 8024222:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024226:	ed91 7a00 	vldr	s14, [r1]
 802422a:	3b01      	subs	r3, #1
 802422c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024230:	e783      	b.n	802413a <__kernel_rem_pio2f+0x406>
 8024232:	eef1 6a66 	vneg.f32	s13, s13
 8024236:	eeb1 7a47 	vneg.f32	s14, s14
 802423a:	edc5 6a00 	vstr	s13, [r5]
 802423e:	ed85 7a01 	vstr	s14, [r5, #4]
 8024242:	eef1 7a67 	vneg.f32	s15, s15
 8024246:	e785      	b.n	8024154 <__kernel_rem_pio2f+0x420>

08024248 <__kernel_sinf>:
 8024248:	ee10 3a10 	vmov	r3, s0
 802424c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024250:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024254:	da04      	bge.n	8024260 <__kernel_sinf+0x18>
 8024256:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802425a:	ee17 3a90 	vmov	r3, s15
 802425e:	b35b      	cbz	r3, 80242b8 <__kernel_sinf+0x70>
 8024260:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024264:	eddf 7a15 	vldr	s15, [pc, #84]	; 80242bc <__kernel_sinf+0x74>
 8024268:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80242c0 <__kernel_sinf+0x78>
 802426c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024270:	eddf 7a14 	vldr	s15, [pc, #80]	; 80242c4 <__kernel_sinf+0x7c>
 8024274:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024278:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80242c8 <__kernel_sinf+0x80>
 802427c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024280:	eddf 7a12 	vldr	s15, [pc, #72]	; 80242cc <__kernel_sinf+0x84>
 8024284:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024288:	eee6 7a07 	vfma.f32	s15, s12, s14
 802428c:	b930      	cbnz	r0, 802429c <__kernel_sinf+0x54>
 802428e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80242d0 <__kernel_sinf+0x88>
 8024292:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024296:	eea6 0a26 	vfma.f32	s0, s12, s13
 802429a:	4770      	bx	lr
 802429c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80242a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80242a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80242a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80242ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80242d4 <__kernel_sinf+0x8c>
 80242b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80242b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80242b8:	4770      	bx	lr
 80242ba:	bf00      	nop
 80242bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80242c0:	b2d72f34 	.word	0xb2d72f34
 80242c4:	3638ef1b 	.word	0x3638ef1b
 80242c8:	b9500d01 	.word	0xb9500d01
 80242cc:	3c088889 	.word	0x3c088889
 80242d0:	be2aaaab 	.word	0xbe2aaaab
 80242d4:	3e2aaaab 	.word	0x3e2aaaab

080242d8 <fabs>:
 80242d8:	ec51 0b10 	vmov	r0, r1, d0
 80242dc:	ee10 2a10 	vmov	r2, s0
 80242e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80242e4:	ec43 2b10 	vmov	d0, r2, r3
 80242e8:	4770      	bx	lr
 80242ea:	0000      	movs	r0, r0
 80242ec:	0000      	movs	r0, r0
	...

080242f0 <floor>:
 80242f0:	ec51 0b10 	vmov	r0, r1, d0
 80242f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80242fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024300:	2e13      	cmp	r6, #19
 8024302:	ee10 5a10 	vmov	r5, s0
 8024306:	ee10 8a10 	vmov	r8, s0
 802430a:	460c      	mov	r4, r1
 802430c:	dc32      	bgt.n	8024374 <floor+0x84>
 802430e:	2e00      	cmp	r6, #0
 8024310:	da14      	bge.n	802433c <floor+0x4c>
 8024312:	a333      	add	r3, pc, #204	; (adr r3, 80243e0 <floor+0xf0>)
 8024314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024318:	f7db ff76 	bl	8000208 <__adddf3>
 802431c:	2200      	movs	r2, #0
 802431e:	2300      	movs	r3, #0
 8024320:	f7dc fbb8 	bl	8000a94 <__aeabi_dcmpgt>
 8024324:	b138      	cbz	r0, 8024336 <floor+0x46>
 8024326:	2c00      	cmp	r4, #0
 8024328:	da57      	bge.n	80243da <floor+0xea>
 802432a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802432e:	431d      	orrs	r5, r3
 8024330:	d001      	beq.n	8024336 <floor+0x46>
 8024332:	4c2d      	ldr	r4, [pc, #180]	; (80243e8 <floor+0xf8>)
 8024334:	2500      	movs	r5, #0
 8024336:	4621      	mov	r1, r4
 8024338:	4628      	mov	r0, r5
 802433a:	e025      	b.n	8024388 <floor+0x98>
 802433c:	4f2b      	ldr	r7, [pc, #172]	; (80243ec <floor+0xfc>)
 802433e:	4137      	asrs	r7, r6
 8024340:	ea01 0307 	and.w	r3, r1, r7
 8024344:	4303      	orrs	r3, r0
 8024346:	d01f      	beq.n	8024388 <floor+0x98>
 8024348:	a325      	add	r3, pc, #148	; (adr r3, 80243e0 <floor+0xf0>)
 802434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802434e:	f7db ff5b 	bl	8000208 <__adddf3>
 8024352:	2200      	movs	r2, #0
 8024354:	2300      	movs	r3, #0
 8024356:	f7dc fb9d 	bl	8000a94 <__aeabi_dcmpgt>
 802435a:	2800      	cmp	r0, #0
 802435c:	d0eb      	beq.n	8024336 <floor+0x46>
 802435e:	2c00      	cmp	r4, #0
 8024360:	bfbe      	ittt	lt
 8024362:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024366:	fa43 f606 	asrlt.w	r6, r3, r6
 802436a:	19a4      	addlt	r4, r4, r6
 802436c:	ea24 0407 	bic.w	r4, r4, r7
 8024370:	2500      	movs	r5, #0
 8024372:	e7e0      	b.n	8024336 <floor+0x46>
 8024374:	2e33      	cmp	r6, #51	; 0x33
 8024376:	dd0b      	ble.n	8024390 <floor+0xa0>
 8024378:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802437c:	d104      	bne.n	8024388 <floor+0x98>
 802437e:	ee10 2a10 	vmov	r2, s0
 8024382:	460b      	mov	r3, r1
 8024384:	f7db ff40 	bl	8000208 <__adddf3>
 8024388:	ec41 0b10 	vmov	d0, r0, r1
 802438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024390:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024394:	f04f 33ff 	mov.w	r3, #4294967295
 8024398:	fa23 f707 	lsr.w	r7, r3, r7
 802439c:	4207      	tst	r7, r0
 802439e:	d0f3      	beq.n	8024388 <floor+0x98>
 80243a0:	a30f      	add	r3, pc, #60	; (adr r3, 80243e0 <floor+0xf0>)
 80243a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a6:	f7db ff2f 	bl	8000208 <__adddf3>
 80243aa:	2200      	movs	r2, #0
 80243ac:	2300      	movs	r3, #0
 80243ae:	f7dc fb71 	bl	8000a94 <__aeabi_dcmpgt>
 80243b2:	2800      	cmp	r0, #0
 80243b4:	d0bf      	beq.n	8024336 <floor+0x46>
 80243b6:	2c00      	cmp	r4, #0
 80243b8:	da02      	bge.n	80243c0 <floor+0xd0>
 80243ba:	2e14      	cmp	r6, #20
 80243bc:	d103      	bne.n	80243c6 <floor+0xd6>
 80243be:	3401      	adds	r4, #1
 80243c0:	ea25 0507 	bic.w	r5, r5, r7
 80243c4:	e7b7      	b.n	8024336 <floor+0x46>
 80243c6:	2301      	movs	r3, #1
 80243c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80243cc:	fa03 f606 	lsl.w	r6, r3, r6
 80243d0:	4435      	add	r5, r6
 80243d2:	4545      	cmp	r5, r8
 80243d4:	bf38      	it	cc
 80243d6:	18e4      	addcc	r4, r4, r3
 80243d8:	e7f2      	b.n	80243c0 <floor+0xd0>
 80243da:	2500      	movs	r5, #0
 80243dc:	462c      	mov	r4, r5
 80243de:	e7aa      	b.n	8024336 <floor+0x46>
 80243e0:	8800759c 	.word	0x8800759c
 80243e4:	7e37e43c 	.word	0x7e37e43c
 80243e8:	bff00000 	.word	0xbff00000
 80243ec:	000fffff 	.word	0x000fffff

080243f0 <scalbn>:
 80243f0:	b570      	push	{r4, r5, r6, lr}
 80243f2:	ec55 4b10 	vmov	r4, r5, d0
 80243f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80243fa:	4606      	mov	r6, r0
 80243fc:	462b      	mov	r3, r5
 80243fe:	b99a      	cbnz	r2, 8024428 <scalbn+0x38>
 8024400:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024404:	4323      	orrs	r3, r4
 8024406:	d036      	beq.n	8024476 <scalbn+0x86>
 8024408:	4b39      	ldr	r3, [pc, #228]	; (80244f0 <scalbn+0x100>)
 802440a:	4629      	mov	r1, r5
 802440c:	ee10 0a10 	vmov	r0, s0
 8024410:	2200      	movs	r2, #0
 8024412:	f7dc f8af 	bl	8000574 <__aeabi_dmul>
 8024416:	4b37      	ldr	r3, [pc, #220]	; (80244f4 <scalbn+0x104>)
 8024418:	429e      	cmp	r6, r3
 802441a:	4604      	mov	r4, r0
 802441c:	460d      	mov	r5, r1
 802441e:	da10      	bge.n	8024442 <scalbn+0x52>
 8024420:	a32b      	add	r3, pc, #172	; (adr r3, 80244d0 <scalbn+0xe0>)
 8024422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024426:	e03a      	b.n	802449e <scalbn+0xae>
 8024428:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802442c:	428a      	cmp	r2, r1
 802442e:	d10c      	bne.n	802444a <scalbn+0x5a>
 8024430:	ee10 2a10 	vmov	r2, s0
 8024434:	4620      	mov	r0, r4
 8024436:	4629      	mov	r1, r5
 8024438:	f7db fee6 	bl	8000208 <__adddf3>
 802443c:	4604      	mov	r4, r0
 802443e:	460d      	mov	r5, r1
 8024440:	e019      	b.n	8024476 <scalbn+0x86>
 8024442:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024446:	460b      	mov	r3, r1
 8024448:	3a36      	subs	r2, #54	; 0x36
 802444a:	4432      	add	r2, r6
 802444c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024450:	428a      	cmp	r2, r1
 8024452:	dd08      	ble.n	8024466 <scalbn+0x76>
 8024454:	2d00      	cmp	r5, #0
 8024456:	a120      	add	r1, pc, #128	; (adr r1, 80244d8 <scalbn+0xe8>)
 8024458:	e9d1 0100 	ldrd	r0, r1, [r1]
 802445c:	da1c      	bge.n	8024498 <scalbn+0xa8>
 802445e:	a120      	add	r1, pc, #128	; (adr r1, 80244e0 <scalbn+0xf0>)
 8024460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024464:	e018      	b.n	8024498 <scalbn+0xa8>
 8024466:	2a00      	cmp	r2, #0
 8024468:	dd08      	ble.n	802447c <scalbn+0x8c>
 802446a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802446e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024476:	ec45 4b10 	vmov	d0, r4, r5
 802447a:	bd70      	pop	{r4, r5, r6, pc}
 802447c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024480:	da19      	bge.n	80244b6 <scalbn+0xc6>
 8024482:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024486:	429e      	cmp	r6, r3
 8024488:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802448c:	dd0a      	ble.n	80244a4 <scalbn+0xb4>
 802448e:	a112      	add	r1, pc, #72	; (adr r1, 80244d8 <scalbn+0xe8>)
 8024490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024494:	2b00      	cmp	r3, #0
 8024496:	d1e2      	bne.n	802445e <scalbn+0x6e>
 8024498:	a30f      	add	r3, pc, #60	; (adr r3, 80244d8 <scalbn+0xe8>)
 802449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802449e:	f7dc f869 	bl	8000574 <__aeabi_dmul>
 80244a2:	e7cb      	b.n	802443c <scalbn+0x4c>
 80244a4:	a10a      	add	r1, pc, #40	; (adr r1, 80244d0 <scalbn+0xe0>)
 80244a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d0b8      	beq.n	8024420 <scalbn+0x30>
 80244ae:	a10e      	add	r1, pc, #56	; (adr r1, 80244e8 <scalbn+0xf8>)
 80244b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80244b4:	e7b4      	b.n	8024420 <scalbn+0x30>
 80244b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80244ba:	3236      	adds	r2, #54	; 0x36
 80244bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80244c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80244c4:	4620      	mov	r0, r4
 80244c6:	4b0c      	ldr	r3, [pc, #48]	; (80244f8 <scalbn+0x108>)
 80244c8:	2200      	movs	r2, #0
 80244ca:	e7e8      	b.n	802449e <scalbn+0xae>
 80244cc:	f3af 8000 	nop.w
 80244d0:	c2f8f359 	.word	0xc2f8f359
 80244d4:	01a56e1f 	.word	0x01a56e1f
 80244d8:	8800759c 	.word	0x8800759c
 80244dc:	7e37e43c 	.word	0x7e37e43c
 80244e0:	8800759c 	.word	0x8800759c
 80244e4:	fe37e43c 	.word	0xfe37e43c
 80244e8:	c2f8f359 	.word	0xc2f8f359
 80244ec:	81a56e1f 	.word	0x81a56e1f
 80244f0:	43500000 	.word	0x43500000
 80244f4:	ffff3cb0 	.word	0xffff3cb0
 80244f8:	3c900000 	.word	0x3c900000

080244fc <atanf>:
 80244fc:	b538      	push	{r3, r4, r5, lr}
 80244fe:	ee10 5a10 	vmov	r5, s0
 8024502:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8024506:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802450a:	eef0 7a40 	vmov.f32	s15, s0
 802450e:	db10      	blt.n	8024532 <atanf+0x36>
 8024510:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8024514:	dd04      	ble.n	8024520 <atanf+0x24>
 8024516:	ee70 7a00 	vadd.f32	s15, s0, s0
 802451a:	eeb0 0a67 	vmov.f32	s0, s15
 802451e:	bd38      	pop	{r3, r4, r5, pc}
 8024520:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024658 <atanf+0x15c>
 8024524:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 802465c <atanf+0x160>
 8024528:	2d00      	cmp	r5, #0
 802452a:	bfd8      	it	le
 802452c:	eef0 7a40 	vmovle.f32	s15, s0
 8024530:	e7f3      	b.n	802451a <atanf+0x1e>
 8024532:	4b4b      	ldr	r3, [pc, #300]	; (8024660 <atanf+0x164>)
 8024534:	429c      	cmp	r4, r3
 8024536:	dc10      	bgt.n	802455a <atanf+0x5e>
 8024538:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802453c:	da0a      	bge.n	8024554 <atanf+0x58>
 802453e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8024664 <atanf+0x168>
 8024542:	ee30 7a07 	vadd.f32	s14, s0, s14
 8024546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802454a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024552:	dce2      	bgt.n	802451a <atanf+0x1e>
 8024554:	f04f 33ff 	mov.w	r3, #4294967295
 8024558:	e013      	b.n	8024582 <atanf+0x86>
 802455a:	f000 f8a3 	bl	80246a4 <fabsf>
 802455e:	4b42      	ldr	r3, [pc, #264]	; (8024668 <atanf+0x16c>)
 8024560:	429c      	cmp	r4, r3
 8024562:	dc4f      	bgt.n	8024604 <atanf+0x108>
 8024564:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8024568:	429c      	cmp	r4, r3
 802456a:	dc41      	bgt.n	80245f0 <atanf+0xf4>
 802456c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8024570:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024574:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024578:	2300      	movs	r3, #0
 802457a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802457e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024582:	1c5a      	adds	r2, r3, #1
 8024584:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8024588:	eddf 5a38 	vldr	s11, [pc, #224]	; 802466c <atanf+0x170>
 802458c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8024670 <atanf+0x174>
 8024590:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8024674 <atanf+0x178>
 8024594:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8024678 <atanf+0x17c>
 8024598:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802459c:	eea7 6a25 	vfma.f32	s12, s14, s11
 80245a0:	eddf 5a36 	vldr	s11, [pc, #216]	; 802467c <atanf+0x180>
 80245a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80245a8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8024680 <atanf+0x184>
 80245ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 80245b0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8024684 <atanf+0x188>
 80245b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80245b8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8024688 <atanf+0x18c>
 80245bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80245c0:	eddf 5a32 	vldr	s11, [pc, #200]	; 802468c <atanf+0x190>
 80245c4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80245c8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8024690 <atanf+0x194>
 80245cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80245d0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8024694 <atanf+0x198>
 80245d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80245d8:	eea5 0a87 	vfma.f32	s0, s11, s14
 80245dc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80245e0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80245e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80245e8:	d121      	bne.n	802462e <atanf+0x132>
 80245ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80245ee:	e794      	b.n	802451a <atanf+0x1e>
 80245f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80245f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80245f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80245fc:	2301      	movs	r3, #1
 80245fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024602:	e7be      	b.n	8024582 <atanf+0x86>
 8024604:	4b24      	ldr	r3, [pc, #144]	; (8024698 <atanf+0x19c>)
 8024606:	429c      	cmp	r4, r3
 8024608:	dc0b      	bgt.n	8024622 <atanf+0x126>
 802460a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 802460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024612:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024616:	2302      	movs	r3, #2
 8024618:	ee70 6a67 	vsub.f32	s13, s0, s15
 802461c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024620:	e7af      	b.n	8024582 <atanf+0x86>
 8024622:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024626:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802462a:	2303      	movs	r3, #3
 802462c:	e7a9      	b.n	8024582 <atanf+0x86>
 802462e:	4a1b      	ldr	r2, [pc, #108]	; (802469c <atanf+0x1a0>)
 8024630:	491b      	ldr	r1, [pc, #108]	; (80246a0 <atanf+0x1a4>)
 8024632:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8024636:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802463a:	ed93 7a00 	vldr	s14, [r3]
 802463e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024642:	2d00      	cmp	r5, #0
 8024644:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024648:	ed92 0a00 	vldr	s0, [r2]
 802464c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024650:	bfb8      	it	lt
 8024652:	eef1 7a67 	vneglt.f32	s15, s15
 8024656:	e760      	b.n	802451a <atanf+0x1e>
 8024658:	3fc90fdb 	.word	0x3fc90fdb
 802465c:	bfc90fdb 	.word	0xbfc90fdb
 8024660:	3edfffff 	.word	0x3edfffff
 8024664:	7149f2ca 	.word	0x7149f2ca
 8024668:	3f97ffff 	.word	0x3f97ffff
 802466c:	3c8569d7 	.word	0x3c8569d7
 8024670:	3d4bda59 	.word	0x3d4bda59
 8024674:	bd15a221 	.word	0xbd15a221
 8024678:	be4ccccd 	.word	0xbe4ccccd
 802467c:	3d886b35 	.word	0x3d886b35
 8024680:	3dba2e6e 	.word	0x3dba2e6e
 8024684:	3e124925 	.word	0x3e124925
 8024688:	3eaaaaab 	.word	0x3eaaaaab
 802468c:	bd6ef16b 	.word	0xbd6ef16b
 8024690:	bd9d8795 	.word	0xbd9d8795
 8024694:	bde38e38 	.word	0xbde38e38
 8024698:	401bffff 	.word	0x401bffff
 802469c:	08028690 	.word	0x08028690
 80246a0:	080286a0 	.word	0x080286a0

080246a4 <fabsf>:
 80246a4:	ee10 3a10 	vmov	r3, s0
 80246a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80246ac:	ee00 3a10 	vmov	s0, r3
 80246b0:	4770      	bx	lr

080246b2 <finitef>:
 80246b2:	b082      	sub	sp, #8
 80246b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80246b8:	9801      	ldr	r0, [sp, #4]
 80246ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80246be:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80246c2:	bfac      	ite	ge
 80246c4:	2000      	movge	r0, #0
 80246c6:	2001      	movlt	r0, #1
 80246c8:	b002      	add	sp, #8
 80246ca:	4770      	bx	lr

080246cc <floorf>:
 80246cc:	ee10 3a10 	vmov	r3, s0
 80246d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80246d4:	3a7f      	subs	r2, #127	; 0x7f
 80246d6:	2a16      	cmp	r2, #22
 80246d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80246dc:	dc2a      	bgt.n	8024734 <floorf+0x68>
 80246de:	2a00      	cmp	r2, #0
 80246e0:	da11      	bge.n	8024706 <floorf+0x3a>
 80246e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024744 <floorf+0x78>
 80246e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80246ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80246ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246f2:	dd05      	ble.n	8024700 <floorf+0x34>
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	da23      	bge.n	8024740 <floorf+0x74>
 80246f8:	4a13      	ldr	r2, [pc, #76]	; (8024748 <floorf+0x7c>)
 80246fa:	2900      	cmp	r1, #0
 80246fc:	bf18      	it	ne
 80246fe:	4613      	movne	r3, r2
 8024700:	ee00 3a10 	vmov	s0, r3
 8024704:	4770      	bx	lr
 8024706:	4911      	ldr	r1, [pc, #68]	; (802474c <floorf+0x80>)
 8024708:	4111      	asrs	r1, r2
 802470a:	420b      	tst	r3, r1
 802470c:	d0fa      	beq.n	8024704 <floorf+0x38>
 802470e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024744 <floorf+0x78>
 8024712:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802471e:	ddef      	ble.n	8024700 <floorf+0x34>
 8024720:	2b00      	cmp	r3, #0
 8024722:	bfbe      	ittt	lt
 8024724:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8024728:	fa40 f202 	asrlt.w	r2, r0, r2
 802472c:	189b      	addlt	r3, r3, r2
 802472e:	ea23 0301 	bic.w	r3, r3, r1
 8024732:	e7e5      	b.n	8024700 <floorf+0x34>
 8024734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024738:	d3e4      	bcc.n	8024704 <floorf+0x38>
 802473a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802473e:	4770      	bx	lr
 8024740:	2300      	movs	r3, #0
 8024742:	e7dd      	b.n	8024700 <floorf+0x34>
 8024744:	7149f2ca 	.word	0x7149f2ca
 8024748:	bf800000 	.word	0xbf800000
 802474c:	007fffff 	.word	0x007fffff

08024750 <nanf>:
 8024750:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024758 <nanf+0x8>
 8024754:	4770      	bx	lr
 8024756:	bf00      	nop
 8024758:	7fc00000 	.word	0x7fc00000

0802475c <rintf>:
 802475c:	ee10 2a10 	vmov	r2, s0
 8024760:	b513      	push	{r0, r1, r4, lr}
 8024762:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024766:	397f      	subs	r1, #127	; 0x7f
 8024768:	2916      	cmp	r1, #22
 802476a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 802476e:	dc47      	bgt.n	8024800 <rintf+0xa4>
 8024770:	b32b      	cbz	r3, 80247be <rintf+0x62>
 8024772:	2900      	cmp	r1, #0
 8024774:	ee10 3a10 	vmov	r3, s0
 8024778:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 802477c:	da21      	bge.n	80247c2 <rintf+0x66>
 802477e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8024782:	425b      	negs	r3, r3
 8024784:	4921      	ldr	r1, [pc, #132]	; (802480c <rintf+0xb0>)
 8024786:	0a5b      	lsrs	r3, r3, #9
 8024788:	0d12      	lsrs	r2, r2, #20
 802478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802478e:	0512      	lsls	r2, r2, #20
 8024790:	4313      	orrs	r3, r2
 8024792:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8024796:	ee07 3a90 	vmov	s15, r3
 802479a:	edd1 6a00 	vldr	s13, [r1]
 802479e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80247a2:	ed8d 7a01 	vstr	s14, [sp, #4]
 80247a6:	eddd 7a01 	vldr	s15, [sp, #4]
 80247aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80247ae:	ee17 3a90 	vmov	r3, s15
 80247b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80247b6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80247ba:	ee00 3a10 	vmov	s0, r3
 80247be:	b002      	add	sp, #8
 80247c0:	bd10      	pop	{r4, pc}
 80247c2:	4a13      	ldr	r2, [pc, #76]	; (8024810 <rintf+0xb4>)
 80247c4:	410a      	asrs	r2, r1
 80247c6:	4213      	tst	r3, r2
 80247c8:	d0f9      	beq.n	80247be <rintf+0x62>
 80247ca:	0854      	lsrs	r4, r2, #1
 80247cc:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80247d0:	d006      	beq.n	80247e0 <rintf+0x84>
 80247d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80247d6:	ea23 0304 	bic.w	r3, r3, r4
 80247da:	fa42 f101 	asr.w	r1, r2, r1
 80247de:	430b      	orrs	r3, r1
 80247e0:	4a0a      	ldr	r2, [pc, #40]	; (802480c <rintf+0xb0>)
 80247e2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80247e6:	ed90 7a00 	vldr	s14, [r0]
 80247ea:	ee07 3a90 	vmov	s15, r3
 80247ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80247f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80247f6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80247fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80247fe:	e7de      	b.n	80247be <rintf+0x62>
 8024800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024804:	d3db      	bcc.n	80247be <rintf+0x62>
 8024806:	ee30 0a00 	vadd.f32	s0, s0, s0
 802480a:	e7d8      	b.n	80247be <rintf+0x62>
 802480c:	080286b0 	.word	0x080286b0
 8024810:	007fffff 	.word	0x007fffff

08024814 <scalbnf>:
 8024814:	ee10 3a10 	vmov	r3, s0
 8024818:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802481c:	d025      	beq.n	802486a <scalbnf+0x56>
 802481e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8024822:	d302      	bcc.n	802482a <scalbnf+0x16>
 8024824:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024828:	4770      	bx	lr
 802482a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802482e:	d122      	bne.n	8024876 <scalbnf+0x62>
 8024830:	4b2a      	ldr	r3, [pc, #168]	; (80248dc <scalbnf+0xc8>)
 8024832:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80248e0 <scalbnf+0xcc>
 8024836:	4298      	cmp	r0, r3
 8024838:	ee20 0a27 	vmul.f32	s0, s0, s15
 802483c:	db16      	blt.n	802486c <scalbnf+0x58>
 802483e:	ee10 3a10 	vmov	r3, s0
 8024842:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024846:	3a19      	subs	r2, #25
 8024848:	4402      	add	r2, r0
 802484a:	2afe      	cmp	r2, #254	; 0xfe
 802484c:	dd15      	ble.n	802487a <scalbnf+0x66>
 802484e:	ee10 3a10 	vmov	r3, s0
 8024852:	eddf 7a24 	vldr	s15, [pc, #144]	; 80248e4 <scalbnf+0xd0>
 8024856:	eddf 6a24 	vldr	s13, [pc, #144]	; 80248e8 <scalbnf+0xd4>
 802485a:	2b00      	cmp	r3, #0
 802485c:	eeb0 7a67 	vmov.f32	s14, s15
 8024860:	bfb8      	it	lt
 8024862:	eef0 7a66 	vmovlt.f32	s15, s13
 8024866:	ee27 0a27 	vmul.f32	s0, s14, s15
 802486a:	4770      	bx	lr
 802486c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80248ec <scalbnf+0xd8>
 8024870:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024874:	4770      	bx	lr
 8024876:	0dd2      	lsrs	r2, r2, #23
 8024878:	e7e6      	b.n	8024848 <scalbnf+0x34>
 802487a:	2a00      	cmp	r2, #0
 802487c:	dd06      	ble.n	802488c <scalbnf+0x78>
 802487e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024882:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8024886:	ee00 3a10 	vmov	s0, r3
 802488a:	4770      	bx	lr
 802488c:	f112 0f16 	cmn.w	r2, #22
 8024890:	da1a      	bge.n	80248c8 <scalbnf+0xb4>
 8024892:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024896:	4298      	cmp	r0, r3
 8024898:	ee10 3a10 	vmov	r3, s0
 802489c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80248a0:	dd0a      	ble.n	80248b8 <scalbnf+0xa4>
 80248a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80248e4 <scalbnf+0xd0>
 80248a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80248e8 <scalbnf+0xd4>
 80248aa:	eef0 7a40 	vmov.f32	s15, s0
 80248ae:	2b00      	cmp	r3, #0
 80248b0:	bf18      	it	ne
 80248b2:	eeb0 0a47 	vmovne.f32	s0, s14
 80248b6:	e7db      	b.n	8024870 <scalbnf+0x5c>
 80248b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80248ec <scalbnf+0xd8>
 80248bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80248f0 <scalbnf+0xdc>
 80248c0:	eef0 7a40 	vmov.f32	s15, s0
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	e7f3      	b.n	80248b0 <scalbnf+0x9c>
 80248c8:	3219      	adds	r2, #25
 80248ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80248ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80248d2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80248f4 <scalbnf+0xe0>
 80248d6:	ee07 3a10 	vmov	s14, r3
 80248da:	e7c4      	b.n	8024866 <scalbnf+0x52>
 80248dc:	ffff3cb0 	.word	0xffff3cb0
 80248e0:	4c000000 	.word	0x4c000000
 80248e4:	7149f2ca 	.word	0x7149f2ca
 80248e8:	f149f2ca 	.word	0xf149f2ca
 80248ec:	0da24260 	.word	0x0da24260
 80248f0:	8da24260 	.word	0x8da24260
 80248f4:	33000000 	.word	0x33000000

080248f8 <_init>:
 80248f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248fa:	bf00      	nop
 80248fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248fe:	bc08      	pop	{r3}
 8024900:	469e      	mov	lr, r3
 8024902:	4770      	bx	lr

08024904 <_fini>:
 8024904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024906:	bf00      	nop
 8024908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802490a:	bc08      	pop	{r3}
 802490c:	469e      	mov	lr, r3
 802490e:	4770      	bx	lr
