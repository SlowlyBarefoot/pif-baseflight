
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026000  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b20  08026198  08026198  00036198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029cb8  08029cb8  000401a4  2**0
                  CONTENTS
  4 .ARM          00000008  08029cb8  08029cb8  00039cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029cc0  08029cc0  000401a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029cc0  08029cc0  00039cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029cc4  08029cc4  00039cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08029cc8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  200001a8  08029e6c  000401a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f70  08029e6c  00041f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d074  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae88  00000000  00000000  0008d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d8  00000000  00000000  000980d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002518  00000000  00000000  0009a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022002  00000000  00000000  0009cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a736  00000000  00000000  000beec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa417  00000000  00000000  000f95f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b244  00000000  00000000  001a3a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08026180 	.word	0x08026180

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08026180 	.word	0x08026180

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01a ff7b 	bl	801c08c <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001c4 	.word	0x200001c4
 80011a4:	20000478 	.word	0x20000478

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001c4 	.word	0x200001c4

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001c4 	.word	0x200001c4
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001c4 	.word	0x200001c4
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Config config;

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <gy86Detect+0x108>)
 8001250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    memset(&config, 0, sizeof(PifGy86Config));
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2214      	movs	r2, #20
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f022 f8c3 	bl	80233e8 <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001262:	2301      	movs	r3, #1
 8001264:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001266:	2303      	movs	r3, #3
 8001268:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d102      	bne.n	800127a <gy86Detect+0x42>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e029      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 188)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001280:	2bbb      	cmp	r3, #187	; 0xbb
 8001282:	d902      	bls.n	800128a <gy86Detect+0x52>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e021      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 98)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001290:	2b61      	cmp	r3, #97	; 0x61
 8001292:	d902      	bls.n	800129a <gy86Detect+0x62>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 8001294:	2302      	movs	r3, #2
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e019      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 42)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012a0:	2b29      	cmp	r3, #41	; 0x29
 80012a2:	d902      	bls.n	80012aa <gy86Detect+0x72>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012a4:	2303      	movs	r3, #3
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e011      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012b0:	2b13      	cmp	r3, #19
 80012b2:	d902      	bls.n	80012ba <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012b4:	2304      	movs	r3, #4
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e009      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d902      	bls.n	80012ca <gy86Detect+0x92>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c4:	2305      	movs	r3, #5
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <gy86Detect+0x96>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ca:	2306      	movs	r3, #6
 80012cc:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012ce:	2303      	movs	r3, #3
 80012d0:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d2:	2302      	movs	r3, #2
 80012d4:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012d6:	230d      	movs	r3, #13
 80012d8:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012da:	2301      	movs	r3, #1
 80012dc:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012de:	2303      	movs	r3, #3
 80012e0:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e2:	2306      	movs	r3, #6
 80012e4:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012e6:	2300      	movs	r3, #0
 80012e8:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ea:	2308      	movs	r3, #8
 80012ec:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012ee:	2319      	movs	r3, #25
 80012f0:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = p_sensor_set->baro.evt_read;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &config)) return false;
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f821 	bl	8001348 <mpu6050Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <gy86Detect+0xd8>
 800130c:	2300      	movs	r3, #0
 800130e:	e013      	b.n	8001338 <gy86Detect+0x100>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <gy86Detect+0x10c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->acc.hardware = hw_Names[0];
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <gy86Detect+0x10c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->mag.hardware = hw_Names[1];
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <gy86Detect+0x10c>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->baro.hardware = hw_Names[2];
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <gy86Detect+0x10c>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    return true;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	31924418 	.word	0x31924418
 8001344:	20000000 	.word	0x20000000

08001348 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Config* p_config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &p_sensor_set->imu_sensor, p_config)) return FALSE;
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <mpu6050Init+0x6c>)
 800135c:	2100      	movs	r1, #0
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <mpu6050Init+0x70>)
 8001360:	f017 fe48 	bl	8018ff4 <pifGy86_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <mpu6050Init+0x26>
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <mpu6050Init+0x62>
    s_gy86._mpu6050.gyro_scale = 4;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <mpu6050Init+0x70>)
 8001370:	2204      	movs	r2, #4
 8001372:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <mpu6050Init+0x70>)
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <mpu6050Init+0x74>)
 800137e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->acc.read = mpuAccRead;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <mpu6050Init+0x78>)
 8001386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_sensor_set->gyro.init = mpuGyroInit;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <mpu6050Init+0x7c>)
 800138e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->gyro.read = mpuGyroRead;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x80>)
 8001394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    p_sensor_set->mag.init = hmc5883lInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <mpu6050Init+0x84>)
 800139c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_sensor_set->mag.read = hmc5883lRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <mpu6050Init+0x88>)
 80013a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return TRUE;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20001524 	.word	0x20001524
 80013b8:	200001d4 	.word	0x200001d4
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013f7 	.word	0x080013f7
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001461 	.word	0x08001461
 80013cc:	080014a9 	.word	0x080014a9
 80013d0:	080017f9 	.word	0x080017f9

080013d4 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f018 fdf5 	bl	8019fd6 <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, int16_t *accData)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f018 fdf7 	bl	8019ffc <pifImuSensor_ReadAccel2>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <mpuAccRead+0x22>
 8001414:	2300      	movs	r3, #0
 8001416:	e00e      	b.n	8001436 <mpuAccRead+0x40>
    accData[0] = data[0];
 8001418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001428:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001432:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f018 fd87 	bl	8019f64 <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, int16_t *gyroData)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro2(&p_sensor_set->imu_sensor, data)) return FALSE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f018 fd88 	bl	8019f88 <pifImuSensor_ReadGyro2>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <mpuGyroRead+0x22>
 800147e:	2300      	movs	r3, #0
 8001480:	e00e      	b.n	80014a0 <mpuGyroRead+0x40>
	gyroData[0] = data[0];
 8001482:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3302      	adds	r3, #2
 800148e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001492:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800149c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f018 fdbc 	bl	801a04c <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014d4:	4ba4      	ldr	r3, [pc, #656]	; (8001768 <hmc5883lInit+0x2c0>)
 80014d6:	68d8      	ldr	r0, [r3, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	f240 5201 	movw	r2, #1281	; 0x501
 80014de:	216a      	movs	r1, #106	; 0x6a
 80014e0:	f011 f924 	bl	801272c <pifI2cDevice_WriteRegBit8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <hmc5883lInit+0x46>
 80014ea:	2300      	movs	r3, #0
 80014ec:	e17b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014ee:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <hmc5883lInit+0x2c0>)
 80014f0:	68d8      	ldr	r0, [r3, #12]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f240 1201 	movw	r2, #257	; 0x101
 80014f8:	2137      	movs	r1, #55	; 0x37
 80014fa:	f011 f917 	bl	801272c <pifI2cDevice_WriteRegBit8>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <hmc5883lInit+0x60>
 8001504:	2300      	movs	r3, #0
 8001506:	e16e      	b.n	80017e6 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f362 0301 	bfi	r3, r2, #0, #2
 8001514:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2204      	movs	r2, #4
 800151a:	f362 0384 	bfi	r3, r2, #2, #3
 800151e:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001520:	4b91      	ldr	r3, [pc, #580]	; (8001768 <hmc5883lInit+0x2c0>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	7b3a      	ldrb	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 f8e9 	bl	8012700 <pifI2cDevice_WriteRegByte>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <hmc5883lInit+0x90>
 8001534:	2300      	movs	r3, #0
 8001536:	e156      	b.n	80017e6 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001538:	2103      	movs	r1, #3
 800153a:	488c      	ldr	r0, [pc, #560]	; (800176c <hmc5883lInit+0x2c4>)
 800153c:	f018 f9e2 	bl	8019904 <pifHmc5883_SetGain>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <hmc5883lInit+0xa2>
 8001546:	2300      	movs	r3, #0
 8001548:	e14d      	b.n	80017e6 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f013 fc04 	bl	8014d58 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4885      	ldr	r0, [pc, #532]	; (800176c <hmc5883lInit+0x2c4>)
 8001558:	f018 f9f3 	bl	8019942 <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
 8001560:	e03d      	b.n	80015de <hmc5883lInit+0x136>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <hmc5883lInit+0x2c0>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f011 f8c8 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <hmc5883lInit+0xd2>
 8001576:	2300      	movs	r3, #0
 8001578:	e135      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f013 fbec 	bl	8014d58 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4879      	ldr	r0, [pc, #484]	; (800176c <hmc5883lInit+0x2c4>)
 8001588:	f018 f9db 	bl	8019942 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	bfa8      	it	ge
 80015b6:	4613      	movge	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfa8      	it	ge
 80015c2:	4613      	movge	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015ca:	dc03      	bgt.n	80015d4 <hmc5883lInit+0x12c>
            bret = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015d2:	e007      	b.n	80015e4 <hmc5883lInit+0x13c>
        }
        actLed1Toggle();
 80015d4:	f000 fd92 	bl	80020fc <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	ddbe      	ble.n	8001562 <hmc5883lInit+0xba>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f362 0301 	bfi	r3, r2, #0, #2
 80015ec:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <hmc5883lInit+0x2c0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	7b3a      	ldrb	r2, [r7, #12]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f011 f882 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <hmc5883lInit+0x15e>
 8001602:	2300      	movs	r3, #0
 8001604:	e0ef      	b.n	80017e6 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e03d      	b.n	8001688 <hmc5883lInit+0x1e0>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <hmc5883lInit+0x2c0>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f011 f873 	bl	8012700 <pifI2cDevice_WriteRegByte>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <hmc5883lInit+0x17c>
 8001620:	2300      	movs	r3, #0
 8001622:	e0e0      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f013 fb97 	bl	8014d58 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <hmc5883lInit+0x2c4>)
 8001632:	f018 f986 	bl	8019942 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800165c:	4293      	cmp	r3, r2
 800165e:	bfa8      	it	ge
 8001660:	4613      	movge	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001668:	4293      	cmp	r3, r2
 800166a:	bfa8      	it	ge
 800166c:	4613      	movge	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001674:	dc03      	bgt.n	800167e <hmc5883lInit+0x1d6>
            bret = false;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 800167c:	e007      	b.n	800168e <hmc5883lInit+0x1e6>
        }
        actLed1Toggle();
 800167e:	f000 fd3d 	bl	80020fc <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2b09      	cmp	r3, #9
 800168c:	ddbe      	ble.n	800160c <hmc5883lInit+0x164>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001770 <hmc5883lInit+0x2c8>
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	eef0 7ae7 	vabs.f32	s15, s15
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <hmc5883lInit+0x2c0>)
 80016a6:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001770 <hmc5883lInit+0x2c8>
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	eef0 7ae7 	vabs.f32	s15, s15
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <hmc5883lInit+0x2c0>)
 80016c2:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001774 <hmc5883lInit+0x2cc>
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eef0 7ae7 	vabs.f32	s15, s15
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <hmc5883lInit+0x2c0>)
 80016de:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	f36f 0301 	bfc	r3, #0, #2
 80016e8:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f0:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <hmc5883lInit+0x2c0>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	7b3a      	ldrb	r2, [r7, #12]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f011 f800 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <hmc5883lInit+0x262>
 8001706:	2300      	movs	r3, #0
 8001708:	e06d      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 800170a:	2101      	movs	r1, #1
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <hmc5883lInit+0x2c4>)
 800170e:	f018 f8f9 	bl	8019904 <pifHmc5883_SetGain>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <hmc5883lInit+0x274>
 8001718:	2300      	movs	r3, #0
 800171a:	e064      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <hmc5883lInit+0x2c0>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f010 ffeb 	bl	8012700 <pifI2cDevice_WriteRegByte>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <hmc5883lInit+0x28c>
 8001730:	2300      	movs	r3, #0
 8001732:	e058      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <hmc5883lInit+0x2c0>)
 8001736:	68d8      	ldr	r0, [r3, #12]
 8001738:	2300      	movs	r3, #0
 800173a:	f240 1201 	movw	r2, #257	; 0x101
 800173e:	2137      	movs	r1, #55	; 0x37
 8001740:	f010 fff4 	bl	801272c <pifI2cDevice_WriteRegBit8>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <hmc5883lInit+0x2a6>
 800174a:	2300      	movs	r3, #0
 800174c:	e04b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <hmc5883lInit+0x2c0>)
 8001750:	68d8      	ldr	r0, [r3, #12]
 8001752:	2301      	movs	r3, #1
 8001754:	f240 5201 	movw	r2, #1281	; 0x501
 8001758:	216a      	movs	r1, #106	; 0x6a
 800175a:	f010 ffe7 	bl	801272c <pifI2cDevice_WriteRegBit8>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <hmc5883lInit+0x2d0>
 8001764:	2300      	movs	r3, #0
 8001766:	e03e      	b.n	80017e6 <hmc5883lInit+0x33e>
 8001768:	200001d4 	.word	0x200001d4
 800176c:	200001e8 	.word	0x200001e8
 8001770:	466f4000 	.word	0x466f4000
 8001774:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <hmc5883lInit+0x348>)
 8001788:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800178c:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <hmc5883lInit+0x348>)
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <hmc5883lInit+0x348>)
 8001798:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800179c:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <hmc5883lInit+0x348>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <hmc5883lInit+0x348>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe80 	bl	80004b0 <__aeabi_f2d>
 80017b0:	4680      	mov	r8, r0
 80017b2:	4689      	mov	r9, r1
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <hmc5883lInit+0x348>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe79 	bl	80004b0 <__aeabi_f2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <hmc5883lInit+0x348>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe72 	bl	80004b0 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d4:	e9cd 4500 	strd	r4, r5, [sp]
 80017d8:	4642      	mov	r2, r8
 80017da:	464b      	mov	r3, r9
 80017dc:	4905      	ldr	r1, [pc, #20]	; (80017f4 <hmc5883lInit+0x34c>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f011 ff44 	bl	801366c <pifLog_Printf>
    return TRUE;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	200001d4 	.word	0x200001d4
 80017f4:	080261b0 	.word	0x080261b0

080017f8 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, int16_t *magData)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f018 fc31 	bl	801a072 <pifImuSensor_ReadMag2>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <hmc5883lRead+0x22>
 8001816:	2300      	movs	r3, #0
 8001818:	e00e      	b.n	8001838 <hmc5883lRead+0x40>
	magData[0] = data[0];
 800181a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800182a:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001834:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <_actHcSr04Trigger+0x24>)
 8001852:	f01b ffa1 	bl	801d798 <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <_actHcSr04Trigger+0x28>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	20000258 	.word	0x20000258

0800186c <hcsr04Echo>:

void hcsr04Echo()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <hcsr04Echo+0x24>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <hcsr04Echo+0x24>)
 800187c:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <hcsr04Echo+0x24>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <hcsr04Echo+0x28>)
 8001886:	f017 ff09 	bl	801969c <pifHcSr04_sigReceiveEcho>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000258 	.word	0x20000258
 8001894:	20000238 	.word	0x20000238

08001898 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <_evtHcSr04Distance+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d007      	beq.n	80018d0 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <_evtHcSr04Distance+0x48>)
 80018c6:	f017 fec1 	bl	801964c <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
#endif
        pretemp = temp;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
    }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000025c 	.word	0x2000025c
 80018dc:	20000260 	.word	0x20000260
 80018e0:	20000238 	.word	0x20000238

080018e4 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 80018f0:	2100      	movs	r1, #0
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <hcsr04Init+0x50>)
 80018f4:	f017 fe1e 	bl	8019534 <pifHcSr04_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <hcsr04Init+0x1e>
 80018fe:	2300      	movs	r3, #0
 8001900:	e013      	b.n	800192a <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <hcsr04Init+0x50>)
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <hcsr04Init+0x54>)
 8001906:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <hcsr04Init+0x50>)
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <hcsr04Init+0x58>)
 800190c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4619      	mov	r1, r3
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <hcsr04Init+0x50>)
 8001914:	f017 fe76 	bl	8019604 <pifHcSr04_StartTrigger>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <hcsr04Init+0x3e>
 800191e:	2300      	movs	r3, #0
 8001920:	e003      	b.n	800192a <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <hcsr04Init+0x5c>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6013      	str	r3, [r2, #0]
    return TRUE;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000238 	.word	0x20000238
 8001938:	08001841 	.word	0x08001841
 800193c:	08001899 	.word	0x08001899
 8001940:	2000025c 	.word	0x2000025c

08001944 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4613      	mov	r3, r2
 8001954:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b21b      	sxth	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	b299      	uxth	r1, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	b29a      	uxth	r2, r3
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	b298      	uxth	r0, r3
 8001972:	8b3b      	ldrh	r3, [r7, #24]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <actI2cRead+0x78>)
 800197e:	f01c fc45 	bl	801e20c <HAL_I2C_Mem_Read_DMA>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <actI2cRead+0x48>
 8001988:	2300      	movs	r3, #0
 800198a:	e013      	b.n	80019b4 <actI2cRead+0x70>
 800198c:	2302      	movs	r3, #2
 800198e:	e011      	b.n	80019b4 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b21b      	sxth	r3, r3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	b21b      	sxth	r3, r3
 800199c:	b299      	uxth	r1, r3
 800199e:	8b3b      	ldrh	r3, [r7, #24]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <actI2cRead+0x78>)
 80019a4:	f01c f99e 	bl	801dce4 <HAL_I2C_Master_Receive_DMA>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <actI2cRead+0x6e>
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <actI2cRead+0x70>
 80019b2:	2302      	movs	r3, #2
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000520 	.word	0x20000520

080019c0 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	4613      	mov	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d016      	beq.n	8001a06 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	b299      	uxth	r1, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	8b3b      	ldrh	r3, [r7, #24]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <actI2cWrite+0x6c>)
 80019f4:	f01c faa6 	bl	801df44 <HAL_I2C_Mem_Write_DMA>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <actI2cWrite+0x42>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e010      	b.n	8001a24 <actI2cWrite+0x64>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <actI2cWrite+0x6c>)
 8001a14:	f01c f836 	bl	801da84 <HAL_I2C_Master_Transmit_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <actI2cWrite+0x62>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <actI2cWrite+0x64>
 8001a22:	2302      	movs	r3, #2
	}
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000520 	.word	0x20000520

08001a30 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a46:	f010 fed3 	bl	80127f0 <pifI2cPort_sigEndTransfer>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	20001524 	.word	0x20001524

08001a5c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d103      	bne.n	8001a76 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a72:	f010 febd 	bl	80127f0 <pifI2cPort_sigEndTransfer>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	20001524 	.word	0x20001524

08001a88 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_I2C_MemTxCpltCallback+0x24>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001a9e:	f010 fea7 	bl	80127f0 <pifI2cPort_sigEndTransfer>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	20001524 	.word	0x20001524

08001ab4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aca:	f010 fe91 	bl	80127f0 <pifI2cPort_sigEndTransfer>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	20001524 	.word	0x20001524

08001ae0 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <i2cInit+0x2c>)
 8001aec:	f010 fbe6 	bl	80122bc <pifI2cPort_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <i2cInit+0x1a>
 8001af6:	2300      	movs	r3, #0
 8001af8:	e006      	b.n	8001b08 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <i2cInit+0x2c>)
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <i2cInit+0x30>)
 8001afe:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <i2cInit+0x2c>)
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <i2cInit+0x34>)
 8001b04:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20001524 	.word	0x20001524
 8001b10:	08001945 	.word	0x08001945
 8001b14:	080019c1 	.word	0x080019c1

08001b18 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d811      	bhi.n	8001b52 <failsafeCheck+0x3a>
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <failsafeCheck+0x78>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90c      	bls.n	8001b52 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <failsafeCheck+0x7c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <failsafeCheck+0x7c>)
 8001b50:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <failsafeCheck+0x7c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d114      	bne.n	8001b84 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <failsafeCheck+0x7c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <failsafeCheck+0x80>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b14      	cmp	r3, #20
 8001b68:	dd09      	ble.n	8001b7e <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <failsafeCheck+0x80>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b14      	subs	r3, #20
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <failsafeCheck+0x80>)
 8001b7a:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b7c:	e002      	b.n	8001b84 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <failsafeCheck+0x80>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000369 	.word	0x20000369
 8001b98:	20001752 	.word	0x20001752

08001b9c <pwmReadRc>:

void pwmReadRc()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <pwmReadRc+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <pwmReadRc+0x40>)
 8001bae:	f016 fc28 	bl	8018402 <pifRcPpm_sigTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <pwmReadRc+0x40>)
 8001bbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ffa5 	bl	8001b18 <failsafeCheck>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001ddc 	.word	0x20001ddc
 8001bdc:	20000264 	.word	0x20000264

08001be0 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00b      	b.n	8001c0e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <_evtRcReceive+0x48>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	461a      	mov	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4293      	cmp	r3, r2
 8001c18:	dbed      	blt.n	8001bf6 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 8001c1a:	6938      	ldr	r0, [r7, #16]
 8001c1c:	f012 fcf4 	bl	8014608 <pifTask_SetTrigger>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002f0 	.word	0x200002f0

08001c2c <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <pwmWriteStandard+0x8c>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d830      	bhi.n	8001cac <pwmWriteStandard+0x80>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <pwmWriteStandard+0x24>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001cad 	.word	0x08001cad
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001cad 	.word	0x08001cad
 8001c60:	08001c8f 	.word	0x08001c8f
 8001c64:	08001cad 	.word	0x08001cad
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cad 	.word	0x08001cad
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001ca3 	.word	0x08001ca3
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8c:	e00e      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	88ba      	ldrh	r2, [r7, #4]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
 8001c96:	e009      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	88ba      	ldrh	r2, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ca0:	e004      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <pwmWriteStandard+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	bf00      	nop
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000310 	.word	0x20000310
 8001cbc:	2000067c 	.word	0x2000067c

08001cc0 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8a5a      	ldrh	r2, [r3, #18]
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <pwmInit+0x244>)
 8001cd2:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	79da      	ldrb	r2, [r3, #7]
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <pwmInit+0x248>)
 8001cda:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7d1a      	ldrb	r2, [r3, #20]
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <pwmInit+0x24c>)
 8001ce2:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001cec:	2302      	movs	r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <pwmInit+0x3e>
        i++; // next index is for PPM
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cfe:	4a84      	ldr	r2, [pc, #528]	; (8001f10 <pwmInit+0x250>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e0ae      	b.n	8001e6c <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	f000 809f 	beq.w	8001e76 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001d38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <pwmInit+0x98>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <pwmInit+0x98>
        	type = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <pwmInit+0x254>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <pwmInit+0x258>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e077      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 8001d76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d171      	bne.n	8001e66 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001d82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04e      	beq.n	8001e2c <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	895b      	ldrh	r3, [r3, #10]
 8001d92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d96:	d803      	bhi.n	8001da0 <pwmInit+0xe0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7d5b      	ldrb	r3, [r3, #21]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001da0:	2308      	movs	r3, #8
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e001      	b.n	8001daa <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <pwmInit+0x25c>)
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7d5b      	ldrb	r3, [r3, #21]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <pwmInit+0x10a>
                period = hz / 4000;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <pwmInit+0x260>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dc8:	e006      	b.n	8001dd8 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	895b      	ldrh	r3, [r3, #10]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd6:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	494e      	ldr	r1, [pc, #312]	; (8001f14 <pwmInit+0x254>)
 8001ddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dde:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	441a      	add	r2, r3
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	7891      	ldrb	r1, [r2, #2]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <pwmInit+0x254>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <pwmInit+0x254>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4846      	ldr	r0, [pc, #280]	; (8001f24 <pwmInit+0x264>)
 8001e0a:	f01f f95d 	bl	80210c8 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e0e:	7dfa      	ldrb	r2, [r7, #23]
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <pwmInit+0x268>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	b2c8      	uxtb	r0, r1
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <pwmInit+0x268>)
 8001e1a:	7008      	strb	r0, [r1, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	0093      	lsls	r3, r2, #2
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <pwmInit+0x254>)
 8001e22:	4413      	add	r3, r2
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <pwmInit+0x26c>)
 8001e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e2a:	e01c      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001e2c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da18      	bge.n	8001e66 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <pwmInit+0x25c>)
 8001e3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	b291      	uxth	r1, r2
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <pwmInit+0x254>)
 8001e46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001e4a:	7dfa      	ldrb	r2, [r7, #23]
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <pwmInit+0x270>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	b2c8      	uxtb	r0, r1
 8001e54:	4936      	ldr	r1, [pc, #216]	; (8001f30 <pwmInit+0x270>)
 8001e56:	7008      	strb	r0, [r1, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	0093      	lsls	r3, r2, #2
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <pwmInit+0x254>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <pwmInit+0x274>)
 8001e62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b0d      	cmp	r3, #13
 8001e70:	f77f af4d 	ble.w	8001d0e <pwmInit+0x4e>
 8001e74:	e000      	b.n	8001e78 <pwmInit+0x1b8>
            break;
 8001e76:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d035      	beq.n	8001eec <pwmInit+0x22c>
		if (init->usePPM) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <pwmInit+0x258>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001e90:	2100      	movs	r1, #0
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <pwmInit+0x278>)
 8001e94:	f016 fa42 	bl	801831c <pifRcPpm_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d026      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001e9e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ea2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <pwmInit+0x278>)
 8001ea8:	f016 fa8a 	bl	80183c0 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <pwmInit+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4923      	ldr	r1, [pc, #140]	; (8001f40 <pwmInit+0x280>)
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <pwmInit+0x278>)
 8001eb6:	f015 fef5 	bl	8017ca4 <pifRc_AttachEvtReceive>
 8001eba:	e017      	b.n	8001eec <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <pwmInit+0x258>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <pwmInit+0x278>)
 8001ec6:	f016 fae9 	bl	801849c <pifRcPwm_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001ed0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ed4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <pwmInit+0x278>)
 8001eda:	f016 fb59 	bl	8018590 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <pwmInit+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <pwmInit+0x280>)
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <pwmInit+0x278>)
 8001ee8:	f015 fedc 	bl	8017ca4 <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <pwmInit+0x284>)
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <pwmInit+0x288>)
 8001ef0:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <pwmInit+0x270>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	759a      	strb	r2, [r3, #22]

    return false;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000367 	.word	0x20000367
 8001f0c:	20000368 	.word	0x20000368
 8001f10:	08027e58 	.word	0x08027e58
 8001f14:	200002b8 	.word	0x200002b8
 8001f18:	20000366 	.word	0x20000366
 8001f1c:	000f4240 	.word	0x000f4240
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	2000067c 	.word	0x2000067c
 8001f28:	20000364 	.word	0x20000364
 8001f2c:	20000310 	.word	0x20000310
 8001f30:	20000365 	.word	0x20000365
 8001f34:	20000340 	.word	0x20000340
 8001f38:	20000264 	.word	0x20000264
 8001f3c:	2000157c 	.word	0x2000157c
 8001f40:	08001be1 	.word	0x08001be1
 8001f44:	20000360 	.word	0x20000360
 8001f48:	08001c2d 	.word	0x08001c2d

08001f4c <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <actPwmWriteMotor+0x30>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d205      	bcs.n	8001f72 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <actPwmWriteMotor+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	88b9      	ldrh	r1, [r7, #4]
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4798      	blx	r3
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000364 	.word	0x20000364
 8001f80:	20000360 	.word	0x20000360

08001f84 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <actPwmRead+0x20>)
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200002f0 	.word	0x200002f0

08001fc4 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f8ab 	bl	8002128 <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f850 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 f879 	bl	80020d0 <actLed1State>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <failureMode>:

void failureMode(uint8_t mode)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
#endif
    actLed1State(OFF);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f86f 	bl	80020d0 <actLed1State>
    actLed0State(ON);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 f840 	bl	8002078 <actLed0State>
    while (1) {
        actLed1Toggle();
 8001ff8:	f000 f880 	bl	80020fc <actLed1Toggle>
        actLed0Toggle();
 8001ffc:	f000 f852 	bl	80020a4 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	441a      	add	r2, r3
 800200a:	0152      	lsls	r2, r2, #5
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	461a      	mov	r2, r3
 8002010:	0091      	lsls	r1, r2, #2
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b02      	subs	r3, #2
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f00f f9ce 	bl	80113c0 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8002024:	2101      	movs	r1, #1
 8002026:	f44f 7098 	mov.w	r0, #304	; 0x130
 800202a:	f000 f87d 	bl	8002128 <actBuzzerAction>
        pif_Delay1ms(25);
 800202e:	2019      	movs	r0, #25
 8002030:	f00f f9c6 	bl	80113c0 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002034:	2100      	movs	r1, #0
 8002036:	f44f 7098 	mov.w	r0, #304	; 0x130
 800203a:	f000 f875 	bl	8002128 <actBuzzerAction>
        actLed1Toggle();
 800203e:	e7db      	b.n	8001ff8 <failureMode+0x16>

08002040 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	461a      	mov	r2, r3
 800204e:	4907      	ldr	r1, [pc, #28]	; (800206c <systemReset+0x2c>)
 8002050:	2002      	movs	r0, #2
 8002052:	f011 fb0b 	bl	801366c <pifLog_Printf>
	pif_Delay1ms(2000);
 8002056:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800205a:	f00f f9b1 	bl	80113c0 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <systemReset+0x30>)
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <systemReset+0x34>)
 8002062:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	080261c4 	.word	0x080261c4
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	05fa0004 	.word	0x05fa0004

08002078 <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	461a      	mov	r2, r3
 8002086:	2110      	movs	r1, #16
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <actLed0State+0x24>)
 800208a:	f01b fb85 	bl	801d798 <HAL_GPIO_WritePin>
    len0_state = state;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <actLed0State+0x28>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40020800 	.word	0x40020800
 80020a0:	200003b4 	.word	0x200003b4

080020a4 <actLed0Toggle>:

void actLed0Toggle()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <actLed0Toggle+0x24>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <actLed0Toggle+0x24>)
 80020b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <actLed0Toggle+0x24>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	2110      	movs	r1, #16
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <actLed0Toggle+0x28>)
 80020c0:	f01b fb6a 	bl	801d798 <HAL_GPIO_WritePin>
#endif
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003b4 	.word	0x200003b4
 80020cc:	40020800 	.word	0x40020800

080020d0 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	461a      	mov	r2, r3
 80020de:	2104      	movs	r1, #4
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <actLed1State+0x24>)
 80020e2:	f01b fb59 	bl	801d798 <HAL_GPIO_WritePin>
    len1_state = state;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <actLed1State+0x28>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020400 	.word	0x40020400
 80020f8:	200003b5 	.word	0x200003b5

080020fc <actLed1Toggle>:

void actLed1Toggle()
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <actLed1Toggle+0x24>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <actLed1Toggle+0x24>)
 800210c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <actLed1Toggle+0x24>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	2104      	movs	r1, #4
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <actLed1Toggle+0x28>)
 8002118:	f01b fb3e 	bl	801d798 <HAL_GPIO_WritePin>
#endif
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200003b5 	.word	0x200003b5
 8002124:	40020400 	.word	0x40020400

08002128 <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	460a      	mov	r2, r1
 8002132:	80fb      	strh	r3, [r7, #6]
 8002134:	4613      	mov	r3, r2
 8002136:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	461a      	mov	r2, r3
 800213c:	2120      	movs	r1, #32
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <actBuzzerAction+0x24>)
 8002140:	f01b fb2a 	bl	801d798 <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800

08002150 <actInvState>:

void actInvState(BOOL state)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
#ifdef INVERTER
	HAL_GPIO_WritePin(INVERTER_GPIO_Port, INVERTER_Pin, state);
#else
    (void)state;
#endif
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_EXTI_Callback+0x1c>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d105      	bne.n	8002188 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800217c:	f7ff fd0e 	bl	8001b9c <pwmReadRc>
		break;
 8002180:	e002      	b.n	8002188 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002182:	f7ff fb73 	bl	800186c <hcsr04Echo>
    	break;
 8002186:	bf00      	nop
    }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002196:	2100      	movs	r1, #0
 8002198:	4822      	ldr	r0, [pc, #136]	; (8002224 <storageInit+0x94>)
 800219a:	f019 fa01 	bl	801b5a0 <pifStorageVar_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <storageInit+0x18>
 80021a4:	2300      	movs	r3, #0
 80021a6:	e039      	b.n	800221c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 80021a8:	230a      	movs	r3, #10
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	491d      	ldr	r1, [pc, #116]	; (8002228 <storageInit+0x98>)
 80021b2:	481c      	ldr	r0, [pc, #112]	; (8002224 <storageInit+0x94>)
 80021b4:	f019 fb3c 	bl	801b830 <pifStorageVar_AttachI2c>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d027      	beq.n	800220e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021be:	2308      	movs	r3, #8
 80021c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	4817      	ldr	r0, [pc, #92]	; (8002224 <storageInit+0x94>)
 80021c8:	f019 fa60 	bl	801b68c <pifStorageVar_SetMedia>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01f      	beq.n	8002212 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <storageInit+0x94>)
 80021d4:	f019 fb45 	bl	801b862 <pifStorageVar_IsFormat>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <storageInit+0x9c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4912      	ldr	r1, [pc, #72]	; (8002230 <storageInit+0xa0>)
 80021e6:	2002      	movs	r0, #2
 80021e8:	f011 fa40 	bl	801366c <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <storageInit+0x94>)
 80021ee:	f019 f8f4 	bl	801b3da <pifStorage_Format>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <storageInit+0xa4>)
 80021fa:	2002      	movs	r0, #2
 80021fc:	f011 fa36 	bl	801366c <pifLog_Printf>
			goto fail;
 8002200:	e008      	b.n	8002214 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <storageInit+0xa8>)
 8002204:	2002      	movs	r0, #2
 8002206:	f011 fa31 	bl	801366c <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <storageInit+0x94>)
 800220c:	e006      	b.n	800221c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8002212:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <storageInit+0x94>)
 8002216:	f019 fa0f 	bl	801b638 <pifStorageVar_Clear>
#endif
	return NULL;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000036c 	.word	0x2000036c
 8002228:	20001524 	.word	0x20001524
 800222c:	20001db8 	.word	0x20001db8
 8002230:	080261dc 	.word	0x080261dc
 8002234:	080261f4 	.word	0x080261f4
 8002238:	0802620c 	.word	0x0802620c

0800223c <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8a1b      	ldrh	r3, [r3, #16]
 800224a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800224e:	019b      	lsls	r3, r3, #6
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <actUartSetBaudRate+0x5c>)
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d101      	bne.n	8002266 <actUartSetBaudRate+0x2a>
 8002262:	2301      	movs	r3, #1
 8002264:	e013      	b.n	800228e <actUartSetBaudRate+0x52>

	HAL_UART_DeInit(p_uart->p_huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4618      	mov	r0, r3
 800226c:	f01f ff55 	bl	802211a <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	4618      	mov	r0, r3
 800227e:	f01f feff 	bl	8022080 <HAL_UART_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <actUartSetBaudRate+0x50>
		return FALSE;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <actUartSetBaudRate+0x52>
	}
	return TRUE;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003b8 	.word	0x200003b8

0800229c <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8a1b      	ldrh	r3, [r3, #16]
 80022a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <actUartStartTransfer+0x5c>)
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2208      	movs	r2, #8
 80022b8:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00f ff32 	bl	8012130 <pifComm_StartGetTxData>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <actUartStartTransfer+0x52>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022e4:	461a      	mov	r2, r3
 80022e6:	f01f ff47 	bl	8022178 <HAL_UART_Transmit_IT>
		return TRUE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <actUartStartTransfer+0x54>
	}
	return FALSE;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200003b8 	.word	0x200003b8

080022fc <uartOpen>:
}

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4613      	mov	r3, r2
 8002310:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16;
 8002316:	2310      	movs	r3, #16
 8002318:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 800231a:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <uartOpen+0x14c>)
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	ca07      	ldmia	r2, {r0, r1, r2}
 8002322:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <uartOpen+0x3c>
        s = &uartPort[0];
 800232c:	4b47      	ldr	r3, [pc, #284]	; (800244c <uartOpen+0x150>)
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <uartOpen+0x154>)
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
 8002336:	e013      	b.n	8002360 <uartOpen+0x64>
    }
#ifndef __PIF_DEBUG__
    else if (port == UART_PORT_2) {
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d105      	bne.n	800234a <uartOpen+0x4e>
        s = &uartPort[1];
 800233e:	4b45      	ldr	r3, [pc, #276]	; (8002454 <uartOpen+0x158>)
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart2;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <uartOpen+0x15c>)
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
 8002348:	e00a      	b.n	8002360 <uartOpen+0x64>
    }
#endif
    else if (port == UART_PORT_3) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d105      	bne.n	800235c <uartOpen+0x60>
        s = &uartPort[2];
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <uartOpen+0x160>)
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	4a42      	ldr	r2, [pc, #264]	; (8002460 <uartOpen+0x164>)
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
 800235a:	e001      	b.n	8002360 <uartOpen+0x64>
    }
    else return NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	e06f      	b.n	8002440 <uartOpen+0x144>

    tmp = period * 115200 / 10000;
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <uartOpen+0x168>)
 800236c:	fb82 1203 	smull	r1, r2, r2, r3
 8002370:	1312      	asrs	r2, r2, #12
 8002372:	17db      	asrs	r3, r3, #31
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	843b      	strh	r3, [r7, #32]
    while (tmp >= rx_size) rx_size <<= 1;
 8002378:	e002      	b.n	8002380 <uartOpen+0x84>
 800237a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002380:	8c3a      	ldrh	r2, [r7, #32]
 8002382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002384:	429a      	cmp	r2, r3
 8002386:	d2f8      	bcs.n	800237a <uartOpen+0x7e>
	s->init = TRUE;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	b29b      	uxth	r3, r3
 8002398:	33ff      	adds	r3, #255	; 0xff
 800239a:	b29b      	uxth	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f00f fdb0 	bl	8011f04 <pifComm_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <uartOpen+0xb2>
 80023aa:	2300      	movs	r3, #0
 80023ac:	e048      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1d18      	adds	r0, r3, #4
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	443b      	add	r3, r7
 80023c0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	2102      	movs	r1, #2
 80023ca:	f00f ff45 	bl	8012258 <pifComm_AttachTask>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <uartOpen+0xdc>
 80023d4:	2300      	movs	r3, #0
 80023d6:	e033      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, rx_size / 2)) return FALSE;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1d18      	adds	r0, r3, #4
 80023dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023e6:	4619      	mov	r1, r3
 80023e8:	f00f fddc 	bl	8011fa4 <pifComm_AllocRxBuffer>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <uartOpen+0xfa>
 80023f2:	2300      	movs	r3, #0
 80023f4:	e024      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3304      	adds	r3, #4
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00f fe15 	bl	801202c <pifComm_AllocTxBuffer>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <uartOpen+0x110>
 8002408:	2300      	movs	r3, #0
 800240a:	e019      	b.n	8002440 <uartOpen+0x144>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <uartOpen+0x16c>)
 8002410:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <uartOpen+0x170>)
 8002416:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f8c7 	bl	80025b0 <serialSetBaudRate>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <uartOpen+0x13a>
    	pifComm_Clear(&s->port.comm);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f00f fd93 	bl	8011f58 <pifComm_Clear>
    	return FALSE;
 8002432:	2300      	movs	r3, #0
 8002434:	e004      	b.n	8002440 <uartOpen+0x144>
    }

	s->init = FALSE;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    return (serialPort_t *)s;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	08026234 	.word	0x08026234
 800244c:	200003b8 	.word	0x200003b8
 8002450:	200006c4 	.word	0x200006c4
 8002454:	200003f8 	.word	0x200003f8
 8002458:	20000708 	.word	0x20000708
 800245c:	20000438 	.word	0x20000438
 8002460:	2000074c 	.word	0x2000074c
 8002464:	68db8bad 	.word	0x68db8bad
 8002468:	0800223d 	.word	0x0800223d
 800246c:	0800229d 	.word	0x0800229d

08002470 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_UART_TxCpltCallback+0xa0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_UART_TxCpltCallback+0xa4>)
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e00e      	b.n	80024a6 <HAL_UART_TxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <HAL_UART_TxCpltCallback+0xa8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d102      	bne.n	8002498 <HAL_UART_TxCpltCallback+0x28>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
#else
		p_uart = &uartPort[1];
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_UART_TxCpltCallback+0xac>)
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e006      	b.n	80024a6 <HAL_UART_TxCpltCallback+0x36>
#endif
	}
	else if (huart->Instance == USART6) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_UART_TxCpltCallback+0xb0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d132      	bne.n	8002508 <HAL_UART_TxCpltCallback+0x98>
		p_uart = &uartPort[2];
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_UART_TxCpltCallback+0xb4>)
 80024a4:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f00f fe75 	bl	80121a0 <pifComm_EndGetTxData>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_TxCpltCallback+0x60>
		pifComm_FinishTransfer(&p_uart->port.comm);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00f fe82 	bl	80121d2 <pifComm_FinishTransfer>
 80024ce:	e01c      	b.n	800250a <HAL_UART_TxCpltCallback+0x9a>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2208      	movs	r2, #8
 80024d4:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1d18      	adds	r0, r3, #4
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	4619      	mov	r1, r3
 80024e6:	f00f fe23 	bl	8012130 <pifComm_StartGetTxData>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_UART_TxCpltCallback+0x9a>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024fe:	461a      	mov	r2, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f01f fe39 	bl	8022178 <HAL_UART_Transmit_IT>
 8002506:	e000      	b.n	800250a <HAL_UART_TxCpltCallback+0x9a>
	else return;
 8002508:	bf00      	nop
		}
	}
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40011000 	.word	0x40011000
 8002514:	200003b8 	.word	0x200003b8
 8002518:	40004400 	.word	0x40004400
 800251c:	200003f8 	.word	0x200003f8
 8002520:	40011400 	.word	0x40011400
 8002524:	20000438 	.word	0x20000438

08002528 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_UART_RxCpltCallback+0x70>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d102      	bne.n	8002540 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_RxCpltCallback+0x74>)
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e00e      	b.n	800255e <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_UART_RxCpltCallback+0x78>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d102      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_RxCpltCallback+0x7c>)
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e006      	b.n	800255e <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_UART_RxCpltCallback+0x80>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d117      	bne.n	800258a <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_UART_RxCpltCallback+0x84>)
 800255c:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f00f fdae 	bl	80120d6 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	333e      	adds	r3, #62	; 0x3e
 800257e:	2201      	movs	r2, #1
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f01f fe3d 	bl	8022202 <HAL_UART_Receive_IT>
 8002588:	e002      	b.n	8002590 <HAL_UART_RxCpltCallback+0x68>
	else return;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 800258e:	bf00      	nop
}
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40011000 	.word	0x40011000
 800259c:	200003b8 	.word	0x200003b8
 80025a0:	40004400 	.word	0x40004400
 80025a4:	200003f8 	.word	0x200003f8
 80025a8:	40011400 	.word	0x40011400
 80025ac:	20000438 	.word	0x20000438

080025b0 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3204      	adds	r2, #4
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4610      	mov	r0, r2
 80025c6:	4798      	blx	r3
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8a1b      	ldrh	r3, [r3, #16]
 80025e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <serialStartReceiveFunc+0x3c>)
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	333e      	adds	r3, #62	; 0x3e
 80025f4:	2201      	movs	r2, #1
 80025f6:	4619      	mov	r1, r3
 80025f8:	f01f fe03 	bl	8022202 <HAL_UART_Receive_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <serialStartReceiveFunc+0x32>
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <serialStartReceiveFunc+0x34>
	return TRUE;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200003b8 	.word	0x200003b8

08002614 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8a1b      	ldrh	r3, [r3, #16]
 8002620:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	4a06      	ldr	r2, [pc, #24]	; (8002640 <serialStopReceiveFunc+0x2c>)
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	4618      	mov	r0, r3
 8002632:	f01f fe17 	bl	8022264 <HAL_UART_Abort_IT>
	return TRUE;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200003b8 	.word	0x200003b8

08002644 <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <micros+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000634 	.word	0x20000634

0800265c <featureDefault>:

static void featureDefault(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002660:	2002      	movs	r0, #2
 8002662:	f004 fc6d 	bl	8006f40 <featureSet>
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002678:	f019 fc52 	bl	801bf20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267c:	f000 fb1a 	bl	8002cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002680:	f000 fdd2 	bl	8003228 <MX_GPIO_Init>
  MX_DMA_Init();
 8002684:	f000 fd92 	bl	80031ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002688:	f000 fd3c 	bl	8003104 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800268c:	f000 fbf8 	bl	8002e80 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002690:	f000 fc70 	bl	8002f74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002694:	f000 fd0c 	bl	80030b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002698:	f000 fd5e 	bl	8003158 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800269c:	f000 fb74 	bl	8002d88 <MX_ADC1_Init>
  MX_TIM2_Init();
 80026a0:	f000 fc1c 	bl	8002edc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80026a4:	2100      	movs	r1, #0
 80026a6:	48be      	ldr	r0, [pc, #760]	; (80029a0 <main+0x334>)
 80026a8:	f01e fdbe 	bl	8021228 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 80026ac:	48bd      	ldr	r0, [pc, #756]	; (80029a4 <main+0x338>)
 80026ae:	f00e fdb9 	bl	8011224 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 80026b2:	2014      	movs	r0, #20
 80026b4:	f012 f808 	bl	80146c8 <pifTaskManager_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 82ab 	beq.w	8002c16 <main+0x5aa>
    pif_act_task_signal = actTaskSignal;

    logOpen();
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80026c0:	2303      	movs	r3, #3
 80026c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c6:	2100      	movs	r1, #0
 80026c8:	48b7      	ldr	r0, [pc, #732]	; (80029a8 <main+0x33c>)
 80026ca:	f012 fc2d 	bl	8014f28 <pifTimerManager_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 82a2 	beq.w	8002c1a <main+0x5ae>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
#endif

    if (!buzzerInit()) FAIL;
 80026d6:	f001 fc0d 	bl	8003ef4 <buzzerInit>
 80026da:	4603      	mov	r3, r0
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 829b 	bne.w	8002c1e <main+0x5b2>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80026e8:	4bb0      	ldr	r3, [pc, #704]	; (80029ac <main+0x340>)
 80026ea:	4ab1      	ldr	r2, [pc, #708]	; (80029b0 <main+0x344>)
 80026ec:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 80026ee:	f7ff f9f7 	bl	8001ae0 <i2cInit>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8294 	beq.w	8002c22 <main+0x5b6>

    if (!initEEPROM(storageInit())) FAIL;
 80026fa:	f7ff fd49 	bl	8002190 <storageInit>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fe65 	bl	80063d0 <initEEPROM>
 8002706:	4603      	mov	r3, r0
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8289 	bne.w	8002c26 <main+0x5ba>
    if (!checkFirstTime(false)) FAIL;
 8002714:	2000      	movs	r0, #0
 8002716:	f004 f89d 	bl	8006854 <checkFirstTime>
 800271a:	4603      	mov	r3, r0
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8281 	bne.w	8002c2a <main+0x5be>
    readEEPROM();
 8002728:	f003 fefe 	bl	8006528 <readEEPROM>

    systemInit();
 800272c:	f7ff fc4a 	bl	8001fc4 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002730:	2064      	movs	r0, #100	; 0x64
 8002732:	f00e fe45 	bl	80113c0 <pif_Delay1ms>

    activateConfig();
 8002736:	f003 ff41 	bl	80065bc <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 800273a:	4b9e      	ldr	r3, [pc, #632]	; (80029b4 <main+0x348>)
 800273c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <main+0x110>
 8002744:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <main+0x348>)
 8002746:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800274a:	2b01      	cmp	r3, #1
 800274c:	d009      	beq.n	8002762 <main+0xf6>
 800274e:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <main+0x348>)
 8002750:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002754:	2b09      	cmp	r3, #9
 8002756:	d004      	beq.n	8002762 <main+0xf6>
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <main+0x348>)
 800275a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <main+0x110>
 8002762:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <main+0x348>)
 8002764:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <main+0x348>)
 800276a:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800276e:	429a      	cmp	r2, r3
 8002770:	d004      	beq.n	800277c <main+0x110>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002772:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <main+0x348>)
 8002774:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002778:	717b      	strb	r3, [r7, #5]
 800277a:	e005      	b.n	8002788 <main+0x11c>
    else {
        adc_params.rssiAdcChannel = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <main+0x348>)
 8002782:	2200      	movs	r2, #0
 8002784:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fcfa 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 8002790:	2002      	movs	r0, #2
 8002792:	f004 fbbf 	bl	8006f14 <feature>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <main+0x134>
        batteryInit();
 800279c:	f00b ffce 	bl	800e73c <batteryInit>
    initBoardAlignment();
 80027a0:	f001 fa4e 	bl	8003c40 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80027a4:	4b84      	ldr	r3, [pc, #528]	; (80029b8 <main+0x34c>)
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <main+0x350>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <main+0x354>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4884      	ldr	r0, [pc, #528]	; (80029c4 <main+0x358>)
 80027b2:	f00b fe61 	bl	800e478 <sensorsAutodetect>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80027bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <main+0x164>
        failureMode(3);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f7ff fc09 	bl	8001fe2 <failureMode>

    actLed1State(ON);
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7ff fc7d 	bl	80020d0 <actLed1State>
    actLed0State(OFF);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff fc4e 	bl	8002078 <actLed0State>
    for (i = 0; i < 10; i++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027e2:	e018      	b.n	8002816 <main+0x1aa>
        actLed1Toggle();
 80027e4:	f7ff fc8a 	bl	80020fc <actLed1Toggle>
        actLed0Toggle();
 80027e8:	f7ff fc5c 	bl	80020a4 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 80027ec:	2019      	movs	r0, #25
 80027ee:	f012 fab3 	bl	8014d58 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 80027f2:	2101      	movs	r1, #1
 80027f4:	f44f 7098 	mov.w	r0, #304	; 0x130
 80027f8:	f7ff fc96 	bl	8002128 <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 80027fc:	2019      	movs	r0, #25
 80027fe:	f012 faab 	bl	8014d58 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002802:	2100      	movs	r1, #0
 8002804:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002808:	f7ff fc8e 	bl	8002128 <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 800280c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002810:	3301      	adds	r3, #1
 8002812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281a:	2b09      	cmp	r3, #9
 800281c:	d9e2      	bls.n	80027e4 <main+0x178>
    }
    actLed0State(OFF);
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff fc2a 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8002824:	2000      	movs	r0, #0
 8002826:	f7ff fc53 	bl	80020d0 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 800282a:	f006 fff9 	bl	8009820 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 800282e:	f008 fac9 	bl	800adc4 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <main+0x348>)
 8002834:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	2001      	movs	r0, #1
 800283e:	f00c fd81 	bl	800f344 <serialInit>

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <main+0x35c>)
 800284a:	2100      	movs	r1, #0
 800284c:	2007      	movs	r0, #7
 800284e:	f011 ff61 	bl	8014714 <pifTaskManager_Add>
 8002852:	4603      	mov	r3, r0
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <main+0x360>)
 8002856:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002858:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <main+0x360>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 81e6 	beq.w	8002c2e <main+0x5c2>
    g_task_compute_rc->name = "RC";
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <main+0x360>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <main+0x364>)
 8002868:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800286a:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <main+0x348>)
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	2b0e      	cmp	r3, #14
 8002870:	d007      	beq.n	8002882 <main+0x216>
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <main+0x348>)
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d003      	beq.n	8002882 <main+0x216>
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <main+0x348>)
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	2b18      	cmp	r3, #24
 8002880:	d102      	bne.n	8002888 <main+0x21c>
        pwm_params.airplane = true;
 8002882:	2301      	movs	r3, #1
 8002884:	73bb      	strb	r3, [r7, #14]
 8002886:	e001      	b.n	800288c <main+0x220>
    else
        pwm_params.airplane = false;
 8002888:	2300      	movs	r3, #0
 800288a:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800288c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002890:	f004 fb40 	bl	8006f14 <feature>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <main+0x23a>
 800289a:	2008      	movs	r0, #8
 800289c:	f004 fb3a 	bl	8006f14 <feature>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <main+0x23e>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <main+0x240>
 80028aa:	2300      	movs	r3, #0
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 80028b4:	2300      	movs	r3, #0
 80028b6:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f004 fb2b 	bl	8006f14 <feature>
 80028be:	4603      	mov	r3, r0
 80028c0:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80028c2:	2008      	movs	r0, #8
 80028c4:	f004 fb26 	bl	8006f14 <feature>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <main+0x368>)
 80028e4:	7d5b      	ldrb	r3, [r3, #21]
 80028e6:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <main+0x36c>)
 80028ea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <main+0x348>)
 8002900:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002904:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <main+0x348>)
 8002908:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800290c:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <main+0x348>)
 8002910:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002914:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 800291c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002920:	f004 faf8 	bl	8006f14 <feature>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <main+0x2c6>
        pwm_params.idlePulse = mcfg.neutral3d;
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <main+0x348>)
 800292c:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002930:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 8002932:	8a7b      	ldrh	r3, [r7, #18]
 8002934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002938:	d901      	bls.n	800293e <main+0x2d2>
        pwm_params.idlePulse = 0; // brushed motors
 800293a:	2300      	movs	r3, #0
 800293c:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 800293e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002942:	f004 fae7 	bl	8006f14 <feature>
 8002946:	4603      	mov	r3, r0
 8002948:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 800294a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800294e:	f004 fae1 	bl	8006f14 <feature>
 8002952:	4603      	mov	r3, r0
 8002954:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <main+0x348>)
 8002958:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800295c:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <main+0x36c>)
 8002960:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002964:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <main+0x348>)
 8002968:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <main+0x30a>
 8002970:	2b09      	cmp	r3, #9
 8002972:	d003      	beq.n	800297c <main+0x310>
 8002974:	e005      	b.n	8002982 <main+0x316>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002976:	2301      	movs	r3, #1
 8002978:	743b      	strb	r3, [r7, #16]
            break;
 800297a:	e005      	b.n	8002988 <main+0x31c>
        case 9:
            pwm_params.adcChannel = PWM8;
 800297c:	2307      	movs	r3, #7
 800297e:	743b      	strb	r3, [r7, #16]
            break;
 8002980:	e002      	b.n	8002988 <main+0x31c>
        default:
            pwm_params.adcChannel = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	743b      	strb	r3, [r7, #16]
            break;
 8002986:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002988:	f107 0308 	add.w	r3, r7, #8
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f997 	bl	8001cc0 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002992:	7fba      	ldrb	r2, [r7, #30]
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <main+0x368>)
 8002996:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800299e:	e029      	b.n	80029f4 <main+0x388>
 80029a0:	20000634 	.word	0x20000634
 80029a4:	08002645 	.word	0x08002645
 80029a8:	20001554 	.word	0x20001554
 80029ac:	20001708 	.word	0x20001708
 80029b0:	0800265d 	.word	0x0800265d
 80029b4:	20000848 	.word	0x20000848
 80029b8:	200007a8 	.word	0x200007a8
 80029bc:	200007ac 	.word	0x200007ac
 80029c0:	200007b0 	.word	0x200007b0
 80029c4:	20000010 	.word	0x20000010
 80029c8:	0800d0ad 	.word	0x0800d0ad
 80029cc:	2000157c 	.word	0x2000157c
 80029d0:	08026240 	.word	0x08026240
 80029d4:	20000790 	.word	0x20000790
 80029d8:	20000db4 	.word	0x20000db4
        rcData[i] = 1502;
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e0:	4a9c      	ldr	r2, [pc, #624]	; (8002c54 <main+0x5e8>)
 80029e2:	f240 51de 	movw	r1, #1502	; 0x5de
 80029e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 80029ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ee:	3301      	adds	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d9ef      	bls.n	80029dc <main+0x370>
    rcReadRawFunc = pwmReadRawRC;
 80029fc:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <main+0x5ec>)
 80029fe:	4a97      	ldr	r2, [pc, #604]	; (8002c5c <main+0x5f0>)
 8002a00:	601a      	str	r2, [r3, #0]

    if (feature(FEATURE_SERIALRX)) {
 8002a02:	2008      	movs	r0, #8
 8002a04:	f004 fa86 	bl	8006f14 <feature>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02f      	beq.n	8002a6e <main+0x402>
        switch (mcfg.serialrx_type) {
 8002a0e:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <main+0x5f4>)
 8002a10:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d82b      	bhi.n	8002a70 <main+0x404>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <main+0x3b4>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a39 	.word	0x08002a39
 8002a24:	08002a39 	.word	0x08002a39
 8002a28:	08002a43 	.word	0x08002a43
 8002a2c:	08002a53 	.word	0x08002a53
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a65 	.word	0x08002a65
            case SERIALRX_SPEKTRUM1024:
            case SERIALRX_SPEKTRUM2048:
                spektrumInit(UART_PORT_2, &rcReadRawFunc);
 8002a38:	4987      	ldr	r1, [pc, #540]	; (8002c58 <main+0x5ec>)
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f00e faea 	bl	8011014 <spektrumInit>
                break;
 8002a40:	e016      	b.n	8002a70 <main+0x404>
            case SERIALRX_SBUS:
                // Configure hardware inverter on PB2. If not available, this has no effect.
                actInvState(ON);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fb84 	bl	8002150 <actInvState>
                sbusInit(UART_PORT_2, &rcReadRawFunc);
 8002a48:	4983      	ldr	r1, [pc, #524]	; (8002c58 <main+0x5ec>)
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f00b fcb6 	bl	800e3bc <sbusInit>
                break;
 8002a50:	e00e      	b.n	8002a70 <main+0x404>
            case SERIALRX_SUMD:
                sumdInit(UART_PORT_2, &rcReadRawFunc);
 8002a52:	4981      	ldr	r1, [pc, #516]	; (8002c58 <main+0x5ec>)
 8002a54:	2002      	movs	r0, #2
 8002a56:	f00e fb9d 	bl	8011194 <sumdInit>
                break;
 8002a5a:	e009      	b.n	8002a70 <main+0x404>
            case SERIALRX_MSP:
                mspInit(&rcReadRawFunc);
 8002a5c:	487e      	ldr	r0, [pc, #504]	; (8002c58 <main+0x5ec>)
 8002a5e:	f00b fc49 	bl	800e2f4 <mspInit>
                break;
 8002a62:	e005      	b.n	8002a70 <main+0x404>
            case SERIALRX_IBUS:
                ibusInit(UART_PORT_2, &rcReadRawFunc);
 8002a64:	497c      	ldr	r1, [pc, #496]	; (8002c58 <main+0x5ec>)
 8002a66:	2002      	movs	r0, #2
 8002a68:	f006 fe7c 	bl	8009764 <ibusInit>
                break;
 8002a6c:	e000      	b.n	8002a70 <main+0x404>
        }
    }
 8002a6e:	bf00      	nop

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002a70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a74:	f004 fa4e 	bl	8006f14 <feature>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <main+0x422>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002a7e:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <main+0x5f4>)
 8002a80:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f005 f997 	bl	8007dbc <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002a8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a92:	f004 fa3f 	bl	8006f14 <feature>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <main+0x438>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4871      	ldr	r0, [pc, #452]	; (8002c64 <main+0x5f8>)
 8002aa0:	f00c fbc0 	bl	800f224 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002aa4:	4b6e      	ldr	r3, [pc, #440]	; (8002c60 <main+0x5f4>)
 8002aa6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	2208      	movs	r2, #8
 8002aae:	2104      	movs	r1, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f8a9 	bl	8003c08 <constrain>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b6b      	ldr	r3, [pc, #428]	; (8002c68 <main+0x5fc>)
 8002abc:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <main+0x5f4>)
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d103      	bne.n	8002ace <main+0x462>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <main+0x600>)
 8002ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002acc:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002ace:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <main+0x604>)
 8002ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad4:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <main+0x608>)
 8002ad8:	22c8      	movs	r2, #200	; 0xc8
 8002ada:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002adc:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <main+0x60c>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE);         								// 1ms
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <main+0x610>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	2002      	movs	r0, #2
 8002aee:	f011 fe11 	bl	8014714 <pifTaskManager_Add>
 8002af2:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 809b 	beq.w	8002c32 <main+0x5c6>
    p_task->name = "Loop";
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <main+0x614>)
 8002b00:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <main+0x5f4>)
 8002b04:	899b      	ldrh	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <main+0x4b8>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <main+0x5f4>)
 8002b0c:	8999      	ldrh	r1, [r3, #12]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <main+0x618>)
 8002b16:	2003      	movs	r0, #3
 8002b18:	f011 fdfc 	bl	8014714 <pifTaskManager_Add>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <main+0x61c>)
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00a      	b.n	8002b3a <main+0x4ce>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002b24:	2301      	movs	r3, #1
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <main+0x618>)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f011 fdf0 	bl	8014714 <pifTaskManager_Add>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <main+0x61c>)
 8002b38:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002b3a:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <main+0x61c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d079      	beq.n	8002c36 <main+0x5ca>
    g_task_compute_imu->name = "IMU";
 8002b42:	4b51      	ldr	r3, [pc, #324]	; (8002c88 <main+0x61c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <main+0x620>)
 8002b48:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <main+0x61c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002b52:	2008      	movs	r0, #8
 8002b54:	f004 f996 	bl	8006e84 <sensors>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <main+0x528>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <main+0x624>)
 8002b66:	2164      	movs	r1, #100	; 0x64
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f011 fdd3 	bl	8014714 <pifTaskManager_Add>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <main+0x628>)
 8002b72:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        if (!sensor_set.mag.p_task) FAIL;
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <main+0x628>)
 8002b78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05c      	beq.n	8002c3a <main+0x5ce>
        sensor_set.mag.p_task->name = "Mag";
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <main+0x628>)
 8002b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b86:	4a44      	ldr	r2, [pc, #272]	; (8002c98 <main+0x62c>)
 8002b88:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <main+0x628>)
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	2201      	movs	r2, #1
 8002b92:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002b94:	2004      	movs	r0, #4
 8002b96:	f004 f975 	bl	8006e84 <sensors>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <main+0x560>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <main+0x630>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2007      	movs	r0, #7
 8002bac:	f011 fdb2 	bl	8014714 <pifTaskManager_Add>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <main+0x628>)
 8002bb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        if (!sensor_set.baro.p_task) FAIL;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <main+0x628>)
 8002bba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03d      	beq.n	8002c3e <main+0x5d2>
        sensor_set.baro.p_task->name = "Baro";
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <main+0x628>)
 8002bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <main+0x634>)
 8002bca:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <main+0x638>)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2007      	movs	r0, #7
 8002bd8:	f011 fd9c 	bl	8014714 <pifTaskManager_Add>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <main+0x63c>)
 8002be0:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <main+0x63c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02b      	beq.n	8002c42 <main+0x5d6>
    g_task_gps->name = "GPS";
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <main+0x63c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <main+0x640>)
 8002bf0:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <main+0x644>)
 8002bfa:	2132      	movs	r1, #50	; 0x32
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f011 fd89 	bl	8014714 <pifTaskManager_Add>
 8002c02:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01d      	beq.n	8002c46 <main+0x5da>
    p_task->name = "Loop";
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <main+0x614>)
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002c10:	f011 fe20 	bl	8014854 <pifTaskManager_Loop>
 8002c14:	e7fc      	b.n	8002c10 <main+0x5a4>
    if (!pifTaskManager_Init(20)) FAIL;
 8002c16:	bf00      	nop
 8002c18:	e016      	b.n	8002c48 <main+0x5dc>
    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 8002c1a:	bf00      	nop
 8002c1c:	e014      	b.n	8002c48 <main+0x5dc>
    if (!buzzerInit()) FAIL;
 8002c1e:	bf00      	nop
 8002c20:	e012      	b.n	8002c48 <main+0x5dc>
    if (!i2cInit()) FAIL;
 8002c22:	bf00      	nop
 8002c24:	e010      	b.n	8002c48 <main+0x5dc>
    if (!initEEPROM(storageInit())) FAIL;
 8002c26:	bf00      	nop
 8002c28:	e00e      	b.n	8002c48 <main+0x5dc>
    if (!checkFirstTime(false)) FAIL;
 8002c2a:	bf00      	nop
 8002c2c:	e00c      	b.n	8002c48 <main+0x5dc>
    if (!g_task_compute_rc) FAIL;
 8002c2e:	bf00      	nop
 8002c30:	e00a      	b.n	8002c48 <main+0x5dc>
    if (!p_task) FAIL;
 8002c32:	bf00      	nop
 8002c34:	e008      	b.n	8002c48 <main+0x5dc>
    if (!g_task_compute_imu) FAIL;
 8002c36:	bf00      	nop
 8002c38:	e006      	b.n	8002c48 <main+0x5dc>
        if (!sensor_set.mag.p_task) FAIL;
 8002c3a:	bf00      	nop
 8002c3c:	e004      	b.n	8002c48 <main+0x5dc>
        if (!sensor_set.baro.p_task) FAIL;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <main+0x5dc>
    if (!g_task_gps) FAIL;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <main+0x5dc>
    if (!p_task) FAIL;
 8002c46:	bf00      	nop
fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
	pifLog_SendAndExit();
#endif
  return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20001758 	.word	0x20001758
 8002c58:	200017b0 	.word	0x200017b0
 8002c5c:	0800c885 	.word	0x0800c885
 8002c60:	20000848 	.word	0x20000848
 8002c64:	080018e5 	.word	0x080018e5
 8002c68:	20000790 	.word	0x20000790
 8002c6c:	20001a50 	.word	0x20001a50
 8002c70:	20001a54 	.word	0x20001a54
 8002c74:	20001a52 	.word	0x20001a52
 8002c78:	20001720 	.word	0x20001720
 8002c7c:	0800dc7d 	.word	0x0800dc7d
 8002c80:	08026244 	.word	0x08026244
 8002c84:	0800dce5 	.word	0x0800dce5
 8002c88:	20001578 	.word	0x20001578
 8002c8c:	0802624c 	.word	0x0802624c
 8002c90:	0800ef95 	.word	0x0800ef95
 8002c94:	20000060 	.word	0x20000060
 8002c98:	08026250 	.word	0x08026250
 8002c9c:	0800a661 	.word	0x0800a661
 8002ca0:	08026254 	.word	0x08026254
 8002ca4:	080086dd 	.word	0x080086dd
 8002ca8:	20001580 	.word	0x20001580
 8002cac:	0802625c 	.word	0x0802625c
 8002cb0:	0800c5c9 	.word	0x0800c5c9

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	; 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2230      	movs	r2, #48	; 0x30
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f020 fb90 	bl	80233e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <SystemClock_Config+0xcc>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <SystemClock_Config+0xd0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002d18:	230d      	movs	r3, #13
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d24:	2310      	movs	r3, #16
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d32:	2304      	movs	r3, #4
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d36:	f107 0320 	add.w	r3, r7, #32
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f01d fc84 	bl	8020648 <HAL_RCC_OscConfig>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d46:	f000 fb31 	bl	80033ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f01d fee6 	bl	8020b38 <HAL_RCC_ClockConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d72:	f000 fb1b 	bl	80033ac <Error_Handler>
  }
}
 8002d76:	bf00      	nop
 8002d78:	3750      	adds	r7, #80	; 0x50
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000

08002d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002d9c:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <MX_ADC1_Init+0xf0>)
 8002d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <MX_ADC1_Init+0xf4>)
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002de8:	4822      	ldr	r0, [pc, #136]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dea:	f019 f90b 	bl	801c004 <HAL_ADC_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002df4:	f000 fada 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002e00:	2302      	movs	r3, #2
 8002e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	481a      	ldr	r0, [pc, #104]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e0a:	f019 fa4d 	bl	801c2a8 <HAL_ADC_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002e14:	f000 faca 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e18:	2309      	movs	r3, #9
 8002e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	4619      	mov	r1, r3
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e26:	f019 fa3f 	bl	801c2a8 <HAL_ADC_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002e30:	f000 fabc 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e34:	2307      	movs	r3, #7
 8002e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e42:	f019 fa31 	bl	801c2a8 <HAL_ADC_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002e4c:	f000 faae 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e50:	230c      	movs	r3, #12
 8002e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e5e:	f019 fa23 	bl	801c2a8 <HAL_ADC_ConfigChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002e68:	f000 faa0 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000478 	.word	0x20000478
 8002e78:	40012000 	.word	0x40012000
 8002e7c:	0f000001 	.word	0x0f000001

08002e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <MX_I2C1_Init+0x54>)
 8002e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e8c:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <MX_I2C1_Init+0x58>)
 8002e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002ebe:	f01a fc9d 	bl	801d7fc <HAL_I2C_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ec8:	f000 fa70 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000520 	.word	0x20000520
 8002ed4:	40005400 	.word	0x40005400
 8002ed8:	00061a80 	.word	0x00061a80

08002edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f02:	2253      	movs	r2, #83	; 0x53
 8002f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f22:	f01e f829 	bl	8020f78 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f2c:	f000 fa3e 	bl	80033ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f3e:	f01e fc57 	bl	80217f0 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f48:	f000 fa30 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f5a:	f01f f80f 	bl	8021f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f64:	f000 fa22 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000634 	.word	0x20000634

08002f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f88:	f107 0320 	add.w	r3, r7, #32
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fa6:	4a41      	ldr	r2, [pc, #260]	; (80030ac <MX_TIM3_Init+0x138>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fac:	2253      	movs	r2, #83	; 0x53
 8002fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fb8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fca:	4837      	ldr	r0, [pc, #220]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fcc:	f01d ffd4 	bl	8020f78 <HAL_TIM_Base_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002fd6:	f000 f9e9 	bl	80033ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4830      	ldr	r0, [pc, #192]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fe8:	f01e fc02 	bl	80217f0 <HAL_TIM_ConfigClockSource>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ff2:	f000 f9db 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ff6:	482c      	ldr	r0, [pc, #176]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002ff8:	f01e f80d 	bl	8021016 <HAL_TIM_PWM_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003002:	f000 f9d3 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800300e:	f107 0320 	add.w	r3, r7, #32
 8003012:	4619      	mov	r1, r3
 8003014:	4824      	ldr	r0, [pc, #144]	; (80030a8 <MX_TIM3_Init+0x134>)
 8003016:	f01e ffb1 	bl	8021f7c <HAL_TIMEx_MasterConfigSynchronization>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003020:	f000 f9c4 	bl	80033ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003024:	2360      	movs	r3, #96	; 0x60
 8003026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	481a      	ldr	r0, [pc, #104]	; (80030a8 <MX_TIM3_Init+0x134>)
 800303e:	f01e fb15 	bl	802166c <HAL_TIM_PWM_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003048:	f000 f9b0 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2204      	movs	r2, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4815      	ldr	r0, [pc, #84]	; (80030a8 <MX_TIM3_Init+0x134>)
 8003054:	f01e fb0a 	bl	802166c <HAL_TIM_PWM_ConfigChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800305e:	f000 f9a5 	bl	80033ac <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2208      	movs	r2, #8
 800306a:	4619      	mov	r1, r3
 800306c:	480e      	ldr	r0, [pc, #56]	; (80030a8 <MX_TIM3_Init+0x134>)
 800306e:	f01e fafd 	bl	802166c <HAL_TIM_PWM_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003078:	f000 f998 	bl	80033ac <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800307c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	220c      	movs	r2, #12
 8003086:	4619      	mov	r1, r3
 8003088:	4807      	ldr	r0, [pc, #28]	; (80030a8 <MX_TIM3_Init+0x134>)
 800308a:	f01e faef 	bl	802166c <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8003094:	f000 f98a 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003098:	4803      	ldr	r0, [pc, #12]	; (80030a8 <MX_TIM3_Init+0x134>)
 800309a:	f000 fb5d 	bl	8003758 <HAL_TIM_MspPostInit>

}
 800309e:	bf00      	nop
 80030a0:	3738      	adds	r7, #56	; 0x38
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000067c 	.word	0x2000067c
 80030ac:	40000400 	.word	0x40000400

080030b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <MX_USART1_UART_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e8:	f01e ffca 	bl	8022080 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030f2:	f000 f95b 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200006c4 	.word	0x200006c4
 8003100:	40011000 	.word	0x40011000

08003104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_USART2_UART_Init+0x50>)
 800310c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800313c:	f01e ffa0 	bl	8022080 <HAL_UART_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003146:	f000 f931 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000708 	.word	0x20000708
 8003154:	40004400 	.word	0x40004400

08003158 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <MX_USART6_UART_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003168:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003190:	f01e ff76 	bl	8022080 <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800319a:	f000 f907 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000074c 	.word	0x2000074c
 80031a8:	40011400 	.word	0x40011400

080031ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <MX_DMA_Init+0x78>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <MX_DMA_Init+0x78>)
 80031bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <MX_DMA_Init+0x78>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_DMA_Init+0x78>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <MX_DMA_Init+0x78>)
 80031d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_DMA_Init+0x78>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	200b      	movs	r0, #11
 80031f0:	f019 fc09 	bl	801ca06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80031f4:	200b      	movs	r0, #11
 80031f6:	f019 fc22 	bl	801ca3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	200c      	movs	r0, #12
 8003200:	f019 fc01 	bl	801ca06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003204:	200c      	movs	r0, #12
 8003206:	f019 fc1a 	bl	801ca3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2038      	movs	r0, #56	; 0x38
 8003210:	f019 fbf9 	bl	801ca06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003214:	2038      	movs	r0, #56	; 0x38
 8003216:	f019 fc12 	bl	801ca3e <HAL_NVIC_EnableIRQ>

}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <MX_GPIO_Init+0x174>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a55      	ldr	r2, [pc, #340]	; (800339c <MX_GPIO_Init+0x174>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <MX_GPIO_Init+0x174>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <MX_GPIO_Init+0x174>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a4e      	ldr	r2, [pc, #312]	; (800339c <MX_GPIO_Init+0x174>)
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b4c      	ldr	r3, [pc, #304]	; (800339c <MX_GPIO_Init+0x174>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <MX_GPIO_Init+0x174>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <MX_GPIO_Init+0x174>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <MX_GPIO_Init+0x174>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <MX_GPIO_Init+0x174>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <MX_GPIO_Init+0x174>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <MX_GPIO_Init+0x174>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2131      	movs	r1, #49	; 0x31
 80032b2:	483b      	ldr	r0, [pc, #236]	; (80033a0 <MX_GPIO_Init+0x178>)
 80032b4:	f01a fa70 	bl	801d798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2120      	movs	r1, #32
 80032bc:	4839      	ldr	r0, [pc, #228]	; (80033a4 <MX_GPIO_Init+0x17c>)
 80032be:	f01a fa6b 	bl	801d798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2104      	movs	r1, #4
 80032c6:	4838      	ldr	r0, [pc, #224]	; (80033a8 <MX_GPIO_Init+0x180>)
 80032c8:	f01a fa66 	bl	801d798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	482f      	ldr	r0, [pc, #188]	; (80033a0 <MX_GPIO_Init+0x178>)
 80032e4:	f019 fff0 	bl	801d2c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 80032e8:	2331      	movs	r3, #49	; 0x31
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	4828      	ldr	r0, [pc, #160]	; (80033a0 <MX_GPIO_Init+0x178>)
 8003300:	f019 ffe2 	bl	801d2c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 8003304:	2302      	movs	r3, #2
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003308:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800330c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4821      	ldr	r0, [pc, #132]	; (80033a0 <MX_GPIO_Init+0x178>)
 800331a:	f019 ffd5 	bl	801d2c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800331e:	2320      	movs	r3, #32
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	481b      	ldr	r0, [pc, #108]	; (80033a4 <MX_GPIO_Init+0x17c>)
 8003336:	f019 ffc7 	bl	801d2c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800333a:	2304      	movs	r3, #4
 800333c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333e:	2301      	movs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4815      	ldr	r0, [pc, #84]	; (80033a8 <MX_GPIO_Init+0x180>)
 8003352:	f019 ffb9 	bl	801d2c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 8003356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800335c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	480c      	ldr	r0, [pc, #48]	; (80033a0 <MX_GPIO_Init+0x178>)
 800336e:	f019 ffab 	bl	801d2c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2007      	movs	r0, #7
 8003378:	f019 fb45 	bl	801ca06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800337c:	2007      	movs	r0, #7
 800337e:	f019 fb5e 	bl	801ca3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2028      	movs	r0, #40	; 0x28
 8003388:	f019 fb3d 	bl	801ca06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800338c:	2028      	movs	r0, #40	; 0x28
 800338e:	f019 fb56 	bl	801ca3e <HAL_NVIC_EnableIRQ>

}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400

080033ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <Error_Handler+0x8>
	...

080033b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_MspInit+0x4c>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <HAL_MspInit+0x4c>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_MspInit+0x4c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_MspInit+0x4c>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033f6:	2007      	movs	r0, #7
 80033f8:	f019 fafa 	bl	801c9f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800

08003408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a49      	ldr	r2, [pc, #292]	; (800354c <HAL_ADC_MspInit+0x144>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 808c 	bne.w	8003544 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6453      	str	r3, [r2, #68]	; 0x44
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	4a3f      	ldr	r2, [pc, #252]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6313      	str	r3, [r2, #48]	; 0x30
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 800349c:	2304      	movs	r3, #4
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a0:	2303      	movs	r3, #3
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4829      	ldr	r0, [pc, #164]	; (8003554 <HAL_ADC_MspInit+0x14c>)
 80034b0:	f019 ff0a 	bl	801d2c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4619      	mov	r1, r3
 80034c6:	4824      	ldr	r0, [pc, #144]	; (8003558 <HAL_ADC_MspInit+0x150>)
 80034c8:	f019 fefe 	bl	801d2c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d0:	2303      	movs	r3, #3
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	481f      	ldr	r0, [pc, #124]	; (800355c <HAL_ADC_MspInit+0x154>)
 80034e0:	f019 fef2 	bl	801d2c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_ADC_MspInit+0x15c>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800350e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003512:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800352a:	f019 fab1 	bl	801ca90 <HAL_DMA_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003534:	f7ff ff3a 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003544:	bf00      	nop
 8003546:	3730      	adds	r7, #48	; 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012000 	.word	0x40012000
 8003550:	40023800 	.word	0x40023800
 8003554:	40020800 	.word	0x40020800
 8003558:	40020000 	.word	0x40020000
 800355c:	40020400 	.word	0x40020400
 8003560:	200004c0 	.word	0x200004c0
 8003564:	40026410 	.word	0x40026410

08003568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4f      	ldr	r2, [pc, #316]	; (80036c4 <HAL_I2C_MspInit+0x15c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 8097 	bne.w	80036ba <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
 800359c:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ac:	2312      	movs	r3, #18
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035b8:	2304      	movs	r3, #4
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4842      	ldr	r0, [pc, #264]	; (80036cc <HAL_I2C_MspInit+0x164>)
 80035c4:	f019 fe80 	bl	801d2c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d6:	6413      	str	r3, [r2, #64]	; 0x40
 80035d8:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_I2C_MspInit+0x16c>)
 80035e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003604:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003614:	2200      	movs	r2, #0
 8003616:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800361e:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003624:	482a      	ldr	r0, [pc, #168]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003626:	f019 fa33 	bl	801ca90 <HAL_DMA_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003630:	f7ff febc 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
 800363a:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_I2C_MspInit+0x174>)
 8003644:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800367e:	4816      	ldr	r0, [pc, #88]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003680:	f019 fa06 	bl	801ca90 <HAL_DMA_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800368a:	f7ff fe8f 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003692:	635a      	str	r2, [r3, #52]	; 0x34
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	201f      	movs	r0, #31
 80036a0:	f019 f9b1 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036a4:	201f      	movs	r0, #31
 80036a6:	f019 f9ca 	bl	801ca3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2020      	movs	r0, #32
 80036b0:	f019 f9a9 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036b4:	2020      	movs	r0, #32
 80036b6:	f019 f9c2 	bl	801ca3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40005400 	.word	0x40005400
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020400 	.word	0x40020400
 80036d0:	20000574 	.word	0x20000574
 80036d4:	40026010 	.word	0x40026010
 80036d8:	200005d4 	.word	0x200005d4
 80036dc:	40026028 	.word	0x40026028

080036e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800370e:	e01a      	b.n	8003746 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <HAL_TIM_Base_MspInit+0x74>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d115      	bne.n	8003746 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	201d      	movs	r0, #29
 800373c:	f019 f963 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003740:	201d      	movs	r0, #29
 8003742:	f019 f97c 	bl	801ca3e <HAL_NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40000400 	.word	0x40000400

08003758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_TIM_MspPostInit+0xa4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d13c      	bne.n	80037f4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037c2:	2302      	movs	r3, #2
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	480d      	ldr	r0, [pc, #52]	; (8003804 <HAL_TIM_MspPostInit+0xac>)
 80037ce:	f019 fd7b 	bl	801d2c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80037d2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80037d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037e4:	2302      	movs	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <HAL_TIM_MspPostInit+0xb0>)
 80037f0:	f019 fd6a 	bl	801d2c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037f4:	bf00      	nop
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40000400 	.word	0x40000400
 8003800:	40023800 	.word	0x40023800
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800

0800380c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	; 0x38
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_UART_MspInit+0x180>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d135      	bne.n	800389a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003838:	f043 0310 	orr.w	r3, r3, #16
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a4f      	ldr	r2, [pc, #316]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_UART_MspInit+0x184>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003866:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003878:	2307      	movs	r3, #7
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003880:	4619      	mov	r1, r3
 8003882:	4844      	ldr	r0, [pc, #272]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003884:	f019 fd20 	bl	801d2c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003888:	2200      	movs	r2, #0
 800388a:	2100      	movs	r1, #0
 800388c:	2025      	movs	r0, #37	; 0x25
 800388e:	f019 f8ba 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003892:	2025      	movs	r0, #37	; 0x25
 8003894:	f019 f8d3 	bl	801ca3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003898:	e073      	b.n	8003982 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3e      	ldr	r2, [pc, #248]	; (8003998 <HAL_UART_MspInit+0x18c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d134      	bne.n	800390e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a38      	ldr	r2, [pc, #224]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	4a31      	ldr	r2, [pc, #196]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6313      	str	r3, [r2, #48]	; 0x30
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038dc:	230c      	movs	r3, #12
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ec:	2307      	movs	r3, #7
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	4619      	mov	r1, r3
 80038f6:	4827      	ldr	r0, [pc, #156]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038f8:	f019 fce6 	bl	801d2c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038fc:	2200      	movs	r2, #0
 80038fe:	2100      	movs	r1, #0
 8003900:	2026      	movs	r0, #38	; 0x26
 8003902:	f019 f880 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003906:	2026      	movs	r0, #38	; 0x26
 8003908:	f019 f899 	bl	801ca3e <HAL_NVIC_EnableIRQ>
}
 800390c:	e039      	b.n	8003982 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <HAL_UART_MspInit+0x190>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d134      	bne.n	8003982 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_UART_MspInit+0x184>)
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6453      	str	r3, [r2, #68]	; 0x44
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_UART_MspInit+0x184>)
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_UART_MspInit+0x184>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_UART_MspInit+0x184>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003962:	2308      	movs	r3, #8
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	4619      	mov	r1, r3
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <HAL_UART_MspInit+0x188>)
 800396e:	f019 fcab 	bl	801d2c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	2047      	movs	r0, #71	; 0x47
 8003978:	f019 f845 	bl	801ca06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800397c:	2047      	movs	r0, #71	; 0x47
 800397e:	f019 f85e 	bl	801ca3e <HAL_NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3738      	adds	r7, #56	; 0x38
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40011000 	.word	0x40011000
 8003990:	40023800 	.word	0x40023800
 8003994:	40020000 	.word	0x40020000
 8003998:	40004400 	.word	0x40004400
 800399c:	40011400 	.word	0x40011400

080039a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_UART_MspDeInit+0x84>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10e      	bne.n	80039d0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039c2:	481a      	ldr	r0, [pc, #104]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 80039c4:	f019 fe04 	bl	801d5d0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80039c8:	2025      	movs	r0, #37	; 0x25
 80039ca:	f019 f846 	bl	801ca5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80039ce:	e025      	b.n	8003a1c <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_UART_MspDeInit+0x90>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 80039e6:	210c      	movs	r1, #12
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 80039ea:	f019 fdf1 	bl	801d5d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80039ee:	2026      	movs	r0, #38	; 0x26
 80039f0:	f019 f833 	bl	801ca5a <HAL_NVIC_DisableIRQ>
}
 80039f4:	e012      	b.n	8003a1c <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_UART_MspDeInit+0x94>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10d      	bne.n	8003a1c <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 8003a06:	f023 0320 	bic.w	r3, r3, #32
 8003a0a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003a0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a10:	4806      	ldr	r0, [pc, #24]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 8003a12:	f019 fddd 	bl	801d5d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003a16:	2047      	movs	r0, #71	; 0x47
 8003a18:	f019 f81f 	bl	801ca5a <HAL_NVIC_DisableIRQ>
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40004400 	.word	0x40004400
 8003a34:	40011400 	.word	0x40011400

08003a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <NMI_Handler+0x4>

08003a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <HardFault_Handler+0x4>

08003a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <MemManage_Handler+0x4>

08003a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <BusFault_Handler+0x4>

08003a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <UsageFault_Handler+0x4>

08003a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003a84:	f00d fbe6 	bl	8011254 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003a88:	4803      	ldr	r0, [pc, #12]	; (8003a98 <SysTick_Handler+0x18>)
 8003a8a:	f011 fb4e 	bl	801512a <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a8e:	f018 fa99 	bl	801bfc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20001554 	.word	0x20001554

08003a9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003aa0:	2002      	movs	r0, #2
 8003aa2:	f019 fe93 	bl	801d7cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <DMA1_Stream0_IRQHandler+0x10>)
 8003ab2:	f019 f985 	bl	801cdc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000574 	.word	0x20000574

08003ac0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ac6:	f019 f97b 	bl	801cdc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200005d4 	.word	0x200005d4

08003ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM3_IRQHandler+0x10>)
 8003ada:	f01d fcbf 	bl	802145c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000067c 	.word	0x2000067c

08003ae8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <I2C1_EV_IRQHandler+0x10>)
 8003aee:	f01a fd21 	bl	801e534 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000520 	.word	0x20000520

08003afc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <I2C1_ER_IRQHandler+0x10>)
 8003b02:	f01a fe88 	bl	801e816 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000520 	.word	0x20000520

08003b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <USART1_IRQHandler+0x10>)
 8003b16:	f01e fcb9 	bl	802248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200006c4 	.word	0x200006c4

08003b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <USART2_IRQHandler+0x10>)
 8003b2a:	f01e fcaf 	bl	802248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000708 	.word	0x20000708

08003b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003b3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b40:	f019 fe44 	bl	801d7cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003b44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b48:	f019 fe40 	bl	801d7cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA2_Stream0_IRQHandler+0x10>)
 8003b56:	f019 f933 	bl	801cdc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200004c0 	.word	0x200004c0

08003b64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <USART6_IRQHandler+0x10>)
 8003b6a:	f01e fc8f 	bl	802248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000074c 	.word	0x2000074c

08003b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <_sbrk+0x5c>)
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <_sbrk+0x60>)
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <_sbrk+0x64>)
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <_sbrk+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <_sbrk+0x64>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d207      	bcs.n	8003bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba8:	f01f fbd6 	bl	8023358 <__errno>
 8003bac:	4603      	mov	r3, r0
 8003bae:	220c      	movs	r2, #12
 8003bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	e009      	b.n	8003bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <_sbrk+0x64>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <_sbrk+0x64>)
 8003bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bca:	68fb      	ldr	r3, [r7, #12]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20020000 	.word	0x20020000
 8003bd8:	00000400 	.word	0x00000400
 8003bdc:	200007b4 	.word	0x200007b4
 8003be0:	20001f70 	.word	0x20001f70

08003be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SystemInit+0x20>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <SystemInit+0x20>)
 8003bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	da01      	bge.n	8003c20 <constrain+0x18>
        return low;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	e006      	b.n	8003c2e <constrain+0x26>
    else if (amt > high)
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dd01      	ble.n	8003c2c <constrain+0x24>
        return high;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	e000      	b.n	8003c2e <constrain+0x26>
    else
        return amt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	0000      	movs	r0, r0
 8003c3c:	0000      	movs	r0, r0
	...

08003c40 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	; 0x38
 8003c44:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <initBoardAlignment+0x230>)
 8003c48:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <initBoardAlignment+0x26>
 8003c50:	4b87      	ldr	r3, [pc, #540]	; (8003e70 <initBoardAlignment+0x230>)
 8003c52:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <initBoardAlignment+0x26>
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <initBoardAlignment+0x230>)
 8003c5c:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80fd 	beq.w	8003e60 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003c66:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <initBoardAlignment+0x234>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003c6c:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <initBoardAlignment+0x230>)
 8003c6e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc0a 	bl	800048c <__aeabi_i2d>
 8003c78:	a37b      	add	r3, pc, #492	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f7fc fc6f 	bl	8000560 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <initBoardAlignment+0x238>)
 8003c90:	f7fc fd90 	bl	80007b4 <__aeabi_ddiv>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc ff42 	bl	8000b24 <__aeabi_d2f>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003ca4:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <initBoardAlignment+0x230>)
 8003ca6:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fbee 	bl	800048c <__aeabi_i2d>
 8003cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fc53 	bl	8000560 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <initBoardAlignment+0x238>)
 8003cc8:	f7fc fd74 	bl	80007b4 <__aeabi_ddiv>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f7fc ff26 	bl	8000b24 <__aeabi_d2f>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003cdc:	4b64      	ldr	r3, [pc, #400]	; (8003e70 <initBoardAlignment+0x230>)
 8003cde:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fbd2 	bl	800048c <__aeabi_i2d>
 8003ce8:	a35f      	add	r3, pc, #380	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fc37 	bl	8000560 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <initBoardAlignment+0x238>)
 8003d00:	f7fc fd58 	bl	80007b4 <__aeabi_ddiv>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc ff0a 	bl	8000b24 <__aeabi_d2f>
 8003d10:	4603      	mov	r3, r0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003d14:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003d18:	f01f fe46 	bl	80239a8 <cosf>
 8003d1c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003d20:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003d24:	f01f fec4 	bl	8023ab0 <sinf>
 8003d28:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003d2c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003d30:	f01f fe3a 	bl	80239a8 <cosf>
 8003d34:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003d38:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003d3c:	f01f feb8 	bl	8023ab0 <sinf>
 8003d40:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003d44:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003d48:	f01f fe2e 	bl	80239a8 <cosf>
 8003d4c:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003d50:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003d54:	f01f feac 	bl	8023ab0 <sinf>
 8003d58:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003d5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d68:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003d6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003d8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003d9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003dac:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003db2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003db6:	eeb1 7a67 	vneg.f32	s14, s15
 8003dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dc4:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003dce:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <initBoardAlignment+0x23c>)
 8003de4:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003de8:	ed97 7a00 	vldr	s14, [r7]
 8003dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dfe:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003e02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e06:	eeb1 7a67 	vneg.f32	s14, s15
 8003e0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e14:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e24:	ed97 7a00 	vldr	s14, [r7]
 8003e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e2e:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003e32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e48:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003e4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e5a:	edc3 7a08 	vstr	s15, [r3, #32]
 8003e5e:	e000      	b.n	8003e62 <initBoardAlignment+0x222>
        return;
 8003e60:	bf00      	nop
}
 8003e62:	3738      	adds	r7, #56	; 0x38
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	54442d18 	.word	0x54442d18
 8003e6c:	400921fb 	.word	0x400921fb
 8003e70:	20000848 	.word	0x20000848
 8003e74:	20000024 	.word	0x20000024
 8003e78:	40668000 	.word	0x40668000
 8003e7c:	200007b8 	.word	0x200007b8

08003e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e86:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e88:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e8c:	e002      	b.n	8003e94 <LoopCopyDataInit>

08003e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e92:	3304      	adds	r3, #4

08003e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e98:	d3f9      	bcc.n	8003e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea0:	e001      	b.n	8003ea6 <LoopFillZerobss>

08003ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea4:	3204      	adds	r2, #4

08003ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea8:	d3fb      	bcc.n	8003ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eaa:	f7ff fe9b 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eae:	f01f fa59 	bl	8023364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eb2:	f7fe fbdb 	bl	800266c <main>
  bx  lr    
 8003eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003ec4:	08029cc8 	.word	0x08029cc8
  ldr r2, =_sbss
 8003ec8:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003ecc:	20001f70 	.word	0x20001f70

08003ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed0:	e7fe      	b.n	8003ed0 <ADC_IRQHandler>
	...

08003ed4 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <_evtBuzzerFinish+0x1c>)
 8003ee0:	220d      	movs	r2, #13
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000025 	.word	0x20000025

08003ef4 <buzzerInit>:

bool buzzerInit()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <buzzerInit+0x28>)
 8003efa:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <buzzerInit+0x2c>)
 8003f00:	f017 f8cc 	bl	801b09c <pifBuzzer_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <buzzerInit+0x1a>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e003      	b.n	8003f16 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <buzzerInit+0x2c>)
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <buzzerInit+0x30>)
 8003f12:	601a      	str	r2, [r3, #0]
    return true;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08002129 	.word	0x08002129
 8003f20:	200007f4 	.word	0x200007f4
 8003f24:	08003ed5 	.word	0x08003ed5

08003f28 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003f36:	4b62      	ldr	r3, [pc, #392]	; (80040c0 <buzzer+0x198>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	79fa      	ldrb	r2, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	f080 80b7 	bcs.w	80040b0 <buzzer+0x188>
        return;

    switch (mode) {
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	f200 80b5 	bhi.w	80040b4 <buzzer+0x18c>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <buzzer+0x28>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08004003 	.word	0x08004003
 8003f58:	08003ff3 	.word	0x08003ff3
 8003f5c:	08003fe3 	.word	0x08003fe3
 8003f60:	08004013 	.word	0x08004013
 8003f64:	08003fb3 	.word	0x08003fb3
 8003f68:	08003fb3 	.word	0x08003fb3
 8003f6c:	08004023 	.word	0x08004023
 8003f70:	08004033 	.word	0x08004033
 8003f74:	08004013 	.word	0x08004013
 8003f78:	08003fc3 	.word	0x08003fc3
 8003f7c:	08003fd3 	.word	0x08003fd3
 8003f80:	08003f93 	.word	0x08003f93
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8003f84:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <buzzer+0x198>)
 8003f86:	220d      	movs	r2, #13
 8003f88:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8003f8a:	484e      	ldr	r0, [pc, #312]	; (80040c4 <buzzer+0x19c>)
 8003f8c:	f017 f8f2 	bl	801b174 <pifBuzzer_Stop>
            break;
 8003f90:	e093      	b.n	80040ba <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8003f92:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <buzzer+0x1a0>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 808e 	bne.w	80040b8 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8003f9c:	494b      	ldr	r1, [pc, #300]	; (80040cc <buzzer+0x1a4>)
 8003f9e:	4849      	ldr	r0, [pc, #292]	; (80040c4 <buzzer+0x19c>)
 8003fa0:	f017 f8c6 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fa4:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <buzzer+0x198>)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <buzzer+0x1a0>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
            break;
 8003fb0:	e083      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8003fb2:	4947      	ldr	r1, [pc, #284]	; (80040d0 <buzzer+0x1a8>)
 8003fb4:	4843      	ldr	r0, [pc, #268]	; (80040c4 <buzzer+0x19c>)
 8003fb6:	f017 f8bb 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fba:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <buzzer+0x198>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	7013      	strb	r3, [r2, #0]
            break;
 8003fc0:	e07b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8003fc2:	4944      	ldr	r1, [pc, #272]	; (80040d4 <buzzer+0x1ac>)
 8003fc4:	483f      	ldr	r0, [pc, #252]	; (80040c4 <buzzer+0x19c>)
 8003fc6:	f017 f8b3 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <buzzer+0x198>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	7013      	strb	r3, [r2, #0]
            break;
 8003fd0:	e073      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8003fd2:	4941      	ldr	r1, [pc, #260]	; (80040d8 <buzzer+0x1b0>)
 8003fd4:	483b      	ldr	r0, [pc, #236]	; (80040c4 <buzzer+0x19c>)
 8003fd6:	f017 f8ab 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <buzzer+0x198>)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	7013      	strb	r3, [r2, #0]
            break;
 8003fe0:	e06b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8003fe2:	493e      	ldr	r1, [pc, #248]	; (80040dc <buzzer+0x1b4>)
 8003fe4:	4837      	ldr	r0, [pc, #220]	; (80040c4 <buzzer+0x19c>)
 8003fe6:	f017 f8a3 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fea:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <buzzer+0x198>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	7013      	strb	r3, [r2, #0]
            break;
 8003ff0:	e063      	b.n	80040ba <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8003ff2:	493b      	ldr	r1, [pc, #236]	; (80040e0 <buzzer+0x1b8>)
 8003ff4:	4833      	ldr	r0, [pc, #204]	; (80040c4 <buzzer+0x19c>)
 8003ff6:	f017 f89b 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ffa:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <buzzer+0x198>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	7013      	strb	r3, [r2, #0]
            break;
 8004000:	e05b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 8004002:	4938      	ldr	r1, [pc, #224]	; (80040e4 <buzzer+0x1bc>)
 8004004:	482f      	ldr	r0, [pc, #188]	; (80040c4 <buzzer+0x19c>)
 8004006:	f017 f893 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 800400a:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <buzzer+0x198>)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	7013      	strb	r3, [r2, #0]
            break;
 8004010:	e053      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 8004012:	4935      	ldr	r1, [pc, #212]	; (80040e8 <buzzer+0x1c0>)
 8004014:	482b      	ldr	r0, [pc, #172]	; (80040c4 <buzzer+0x19c>)
 8004016:	f017 f88b 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <buzzer+0x198>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	7013      	strb	r3, [r2, #0]
            break;
 8004020:	e04b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8004022:	4932      	ldr	r1, [pc, #200]	; (80040ec <buzzer+0x1c4>)
 8004024:	4827      	ldr	r0, [pc, #156]	; (80040c4 <buzzer+0x19c>)
 8004026:	f017 f883 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 800402a:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <buzzer+0x198>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	7013      	strb	r3, [r2, #0]
            break;
 8004030:	e043      	b.n	80040ba <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8004032:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004036:	f002 ff6d 	bl	8006f14 <feature>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02f      	beq.n	80040a0 <buzzer+0x178>
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <buzzer+0x1c8>)
 8004042:	7adb      	ldrb	r3, [r3, #11]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02b      	beq.n	80040a0 <buzzer+0x178>
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <buzzer+0x1cc>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d927      	bls.n	80040a0 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <buzzer+0x1d0>)
 8004054:	2105      	movs	r1, #5
 8004056:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	3301      	adds	r3, #1
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <buzzer+0x1d0>)
 800405e:	210f      	movs	r1, #15
 8004060:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3302      	adds	r3, #2
 8004066:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b13      	cmp	r3, #19
 800406c:	d806      	bhi.n	800407c <buzzer+0x154>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <buzzer+0x1cc>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3e9      	bcc.n	8004050 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	3301      	adds	r3, #1
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <buzzer+0x1d0>)
 8004082:	2164      	movs	r1, #100	; 0x64
 8004084:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	3302      	adds	r3, #2
 800408a:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <buzzer+0x1d0>)
 800408c:	21f0      	movs	r1, #240	; 0xf0
 800408e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004090:	4919      	ldr	r1, [pc, #100]	; (80040f8 <buzzer+0x1d0>)
 8004092:	480c      	ldr	r0, [pc, #48]	; (80040c4 <buzzer+0x19c>)
 8004094:	f017 f84c 	bl	801b130 <pifBuzzer_Start>
                buzzerMode = mode;
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <buzzer+0x198>)
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	7013      	strb	r3, [r2, #0]
                break;
 800409e:	e00c      	b.n	80040ba <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <buzzer+0x1d4>)
 80040a2:	4808      	ldr	r0, [pc, #32]	; (80040c4 <buzzer+0x19c>)
 80040a4:	f017 f844 	bl	801b130 <pifBuzzer_Start>
            buzzerMode = mode;
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <buzzer+0x198>)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	7013      	strb	r3, [r2, #0]
            break;
 80040ae:	e004      	b.n	80040ba <buzzer+0x192>
        return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <buzzer+0x192>

        default:
            return;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <buzzer+0x192>
                return;
 80040b8:	bf00      	nop
    }
}
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000025 	.word	0x20000025
 80040c4:	200007f4 	.word	0x200007f4
 80040c8:	200007f2 	.word	0x200007f2
 80040cc:	08027ec4 	.word	0x08027ec4
 80040d0:	08027e98 	.word	0x08027e98
 80040d4:	08027ed4 	.word	0x08027ed4
 80040d8:	08027edc 	.word	0x08027edc
 80040dc:	08027ea4 	.word	0x08027ea4
 80040e0:	08027ea0 	.word	0x08027ea0
 80040e4:	08027e94 	.word	0x08027e94
 80040e8:	08027e9c 	.word	0x08027e9c
 80040ec:	08027eb8 	.word	0x08027eb8
 80040f0:	20001720 	.word	0x20001720
 80040f4:	20001804 	.word	0x20001804
 80040f8:	200007dc 	.word	0x200007dc
 80040fc:	08027e90 	.word	0x08027e90

08004100 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <buzzerUpdate+0x20>)
 8004106:	7b5b      	ldrb	r3, [r3, #13]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <buzzerUpdate+0x24>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d902      	bls.n	800411a <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 8004114:	2008      	movs	r0, #8
 8004116:	f7ff ff07 	bl	8003f28 <buzzer>
    }
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200017c0 	.word	0x200017c0
 8004124:	20000025 	.word	0x20000025

08004128 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d309      	bcc.n	8004150 <i2a+0x28>
        a = i2a(i / r, a, r);
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ffed 	bl	8004128 <i2a>
 800414e:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	fbb3 f2f2 	udiv	r2, r3, r2
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	fb01 f202 	mul.w	r2, r1, r2
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <i2a+0x4c>)
 8004162:	5cd2      	ldrb	r2, [r2, r3]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3301      	adds	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	08026f40 	.word	0x08026f40

08004178 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	dd02      	ble.n	8004190 <itoa+0x18>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b24      	cmp	r3, #36	; 0x24
 800418e:	dd01      	ble.n	8004194 <itoa+0x1c>
        r = 10;
 8004190:	230a      	movs	r3, #10
 8004192:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da0e      	bge.n	80041b8 <itoa+0x40>
        *a = '-';
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	222d      	movs	r2, #45	; 0x2d
 800419e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4258      	negs	r0, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3301      	adds	r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7ff ffbc 	bl	8004128 <i2a>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e008      	b.n	80041ca <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ffb2 	bl	8004128 <i2a>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
    return a;
 80041ca:	68bb      	ldr	r3, [r7, #8]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80041e0:	e002      	b.n	80041e8 <_atof+0x14>
        p += 1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3301      	adds	r3, #1
 80041e6:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d0f8      	beq.n	80041e2 <_atof+0xe>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b09      	cmp	r3, #9
 80041f6:	d0f4      	beq.n	80041e2 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80041f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041fc:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b2d      	cmp	r3, #45	; 0x2d
 8004204:	d105      	bne.n	8004212 <_atof+0x3e>
        sign = -1.0f;
 8004206:	4b6a      	ldr	r3, [pc, #424]	; (80043b0 <_atof+0x1dc>)
 8004208:	61bb      	str	r3, [r7, #24]
        p += 1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3301      	adds	r3, #1
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	e006      	b.n	8004220 <_atof+0x4c>

    } else if (*p == '+') {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b2b      	cmp	r3, #43	; 0x2b
 8004218:	d102      	bne.n	8004220 <_atof+0x4c>
        p += 1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3301      	adds	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 8004226:	e013      	b.n	8004250 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004228:	edd7 7a05 	vldr	s15, [r7, #20]
 800422c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004230:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	3b30      	subs	r3, #48	; 0x30
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004246:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3301      	adds	r3, #1
 800424e:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b2f      	cmp	r3, #47	; 0x2f
 8004256:	d903      	bls.n	8004260 <_atof+0x8c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b39      	cmp	r3, #57	; 0x39
 800425e:	d9e3      	bls.n	8004228 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b2e      	cmp	r3, #46	; 0x2e
 8004266:	d129      	bne.n	80042bc <_atof+0xe8>
        float pow10 = 10.0f;
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <_atof+0x1e0>)
 800426a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3301      	adds	r3, #1
 8004270:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004272:	e01b      	b.n	80042ac <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3b30      	subs	r3, #48	; 0x30
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004282:	ed97 7a03 	vldr	s14, [r7, #12]
 8004286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428a:	ed97 7a05 	vldr	s14, [r7, #20]
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004296:	edd7 7a03 	vldr	s15, [r7, #12]
 800429a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800429e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a2:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3301      	adds	r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b2f      	cmp	r3, #47	; 0x2f
 80042b2:	d903      	bls.n	80042bc <_atof+0xe8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b39      	cmp	r3, #57	; 0x39
 80042ba:	d9db      	bls.n	8004274 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 80042bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042c0:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b65      	cmp	r3, #101	; 0x65
 80042c8:	d003      	beq.n	80042d2 <_atof+0xfe>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b45      	cmp	r3, #69	; 0x45
 80042d0:	d153      	bne.n	800437a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3301      	adds	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b2d      	cmp	r3, #45	; 0x2d
 80042e2:	d105      	bne.n	80042f0 <_atof+0x11c>
            frac = 1;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
            p += 1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e006      	b.n	80042fe <_atof+0x12a>

        } else if (*p == '+') {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b2b      	cmp	r3, #43	; 0x2b
 80042f6:	d102      	bne.n	80042fe <_atof+0x12a>
            p += 1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 8004302:	e00d      	b.n	8004320 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4413      	add	r3, r2
 8004316:	3b30      	subs	r3, #48	; 0x30
 8004318:	60bb      	str	r3, [r7, #8]
            p += 1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3301      	adds	r3, #1
 800431e:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b2f      	cmp	r3, #47	; 0x2f
 8004326:	d903      	bls.n	8004330 <_atof+0x15c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b39      	cmp	r3, #57	; 0x39
 800432e:	d9e9      	bls.n	8004304 <_atof+0x130>
        }
        if (expon > 308)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004336:	d90e      	bls.n	8004356 <_atof+0x182>
            expon = 308;
 8004338:	f44f 739a 	mov.w	r3, #308	; 0x134
 800433c:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 800433e:	e00a      	b.n	8004356 <_atof+0x182>
            scale *= 1E8f;
 8004340:	edd7 7a04 	vldr	s15, [r7, #16]
 8004344:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80043b8 <_atof+0x1e4>
 8004348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800434c:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3b08      	subs	r3, #8
 8004354:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b07      	cmp	r3, #7
 800435a:	d8f1      	bhi.n	8004340 <_atof+0x16c>
        }
        while (expon >   0) {
 800435c:	e00a      	b.n	8004374 <_atof+0x1a0>
            scale *= 10.0f;
 800435e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004362:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800436a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3b01      	subs	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f1      	bne.n	800435e <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <_atof+0x1ba>
 8004380:	edd7 6a05 	vldr	s13, [r7, #20]
 8004384:	ed97 7a04 	vldr	s14, [r7, #16]
 8004388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438c:	e005      	b.n	800439a <_atof+0x1c6>
 800438e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004392:	edd7 7a04 	vldr	s15, [r7, #16]
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	ed97 7a06 	vldr	s14, [r7, #24]
 800439e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	3724      	adds	r7, #36	; 0x24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	bf800000 	.word	0xbf800000
 80043b4:	41200000 	.word	0x41200000
 80043b8:	4cbebc20 	.word	0x4cbebc20

080043bc <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80043c6:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80043d6:	4b54      	ldr	r3, [pc, #336]	; (8004528 <ftoa+0x16c>)
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80043da:	edd7 7a01 	vldr	s15, [r7, #4]
 80043de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	dd08      	ble.n	80043fa <ftoa+0x3e>
        x += 0.0005f;
 80043e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800452c <ftoa+0x170>
 80043f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80043f8:	e007      	b.n	800440a <ftoa+0x4e>
    else
        x -= 0.0005f;
 80043fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800452c <ftoa+0x170>
 8004402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004406:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 800440a:	edd7 7a01 	vldr	s15, [r7, #4]
 800440e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004530 <ftoa+0x174>
 8004412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441a:	ee17 3a90 	vmov	r3, s15
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	425b      	neglt	r3, r3
 8004428:	f107 0118 	add.w	r1, r7, #24
 800442c:	220a      	movs	r2, #10
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fea2 	bl	8004178 <itoa>

    if (value >= 0)
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	db02      	blt.n	8004440 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 800443a:	2320      	movs	r3, #32
 800443c:	733b      	strb	r3, [r7, #12]
 800443e:	e001      	b.n	8004444 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004440:	232d      	movs	r3, #45	; 0x2d
 8004442:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 8004444:	f107 0318 	add.w	r3, r7, #24
 8004448:	4618      	mov	r0, r3
 800444a:	f7fb fec5 	bl	80001d8 <strlen>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10e      	bne.n	8004472 <ftoa+0xb6>
        intString2[1] = '0';
 8004454:	2330      	movs	r3, #48	; 0x30
 8004456:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004458:	2330      	movs	r3, #48	; 0x30
 800445a:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 800445c:	2330      	movs	r3, #48	; 0x30
 800445e:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004460:	f107 0218 	add.w	r2, r7, #24
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f01f f8e4 	bl	8023638 <strcat>
 8004470:	e02f      	b.n	80044d2 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fb feae 	bl	80001d8 <strlen>
 800447c:	4603      	mov	r3, r0
 800447e:	2b02      	cmp	r3, #2
 8004480:	d10c      	bne.n	800449c <ftoa+0xe0>
        intString2[1] = '0';
 8004482:	2330      	movs	r3, #48	; 0x30
 8004484:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004486:	2330      	movs	r3, #48	; 0x30
 8004488:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800448a:	f107 0218 	add.w	r2, r7, #24
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f01f f8cf 	bl	8023638 <strcat>
 800449a:	e01a      	b.n	80044d2 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fb fe99 	bl	80001d8 <strlen>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d10a      	bne.n	80044c2 <ftoa+0x106>
        intString2[1] = '0';
 80044ac:	2330      	movs	r3, #48	; 0x30
 80044ae:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 80044b0:	f107 0218 	add.w	r2, r7, #24
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f01f f8bc 	bl	8023638 <strcat>
 80044c0:	e007      	b.n	80044d2 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 80044c2:	f107 0218 	add.w	r2, r7, #24
 80044c6:	f107 030c 	add.w	r3, r7, #12
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f01f f8b3 	bl	8023638 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fb fe7e 	bl	80001d8 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3b03      	subs	r3, #3
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80044e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4619      	mov	r1, r3
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f01f f8e7 	bl	80236c4 <strncpy>
    floatString[dpLocation] = '\0';
 80044f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 8004502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	f01f f897 	bl	8023638 <strcat>
    strcat(floatString, intString2 + dpLocation);
 800450a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800450e:	f107 020c 	add.w	r2, r7, #12
 8004512:	4413      	add	r3, r2
 8004514:	4619      	mov	r1, r3
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f01f f88e 	bl	8023638 <strcat>

    return floatString;
 800451c:	683b      	ldr	r3, [r7, #0]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3730      	adds	r7, #48	; 0x30
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	08026f68 	.word	0x08026f68
 800452c:	3a03126f 	.word	0x3a03126f
 8004530:	447a0000 	.word	0x447a0000

08004534 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d114      	bne.n	8004572 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00d      	b.n	800456a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <cliAux+0x94>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3312      	adds	r3, #18
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	491b      	ldr	r1, [pc, #108]	; (80045cc <cliAux+0x98>)
 800455e:	2000      	movs	r0, #0
 8004560:	f00f f884 	bl	801366c <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b18      	cmp	r3, #24
 800456e:	ddee      	ble.n	800454e <cliAux+0x1a>
 8004570:	e024      	b.n	80045bc <cliAux+0x88>
    } else if (argc > 2) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b02      	cmp	r3, #2
 8004576:	dd1e      	ble.n	80045b6 <cliAux+0x82>
        i = atoi(argv[1]);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f01e fede 	bl	8023340 <atoi>
 8004584:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b18      	cmp	r3, #24
 800458a:	dc0e      	bgt.n	80045aa <cliAux+0x76>
            val = atoi(argv[2]);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f01e fed4 	bl	8023340 <atoi>
 8004598:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	490a      	ldr	r1, [pc, #40]	; (80045c8 <cliAux+0x94>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3312      	adds	r3, #18
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	e008      	b.n	80045bc <cliAux+0x88>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 80045aa:	2219      	movs	r2, #25
 80045ac:	4908      	ldr	r1, [pc, #32]	; (80045d0 <cliAux+0x9c>)
 80045ae:	2000      	movs	r0, #0
 80045b0:	f00f f85c 	bl	801366c <pifLog_Printf>
 80045b4:	e002      	b.n	80045bc <cliAux+0x88>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80045b6:	f06f 0302 	mvn.w	r3, #2
 80045ba:	e000      	b.n	80045be <cliAux+0x8a>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000db4 	.word	0x20000db4
 80045cc:	08026f6c 	.word	0x08026f6c
 80045d0:	08026f78 	.word	0x08026f78

080045d4 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 1) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 80d8 	bne.w	800479e <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80045ee:	499a      	ldr	r1, [pc, #616]	; (8004858 <cliCMix+0x284>)
 80045f0:	2000      	movs	r0, #0
 80045f2:	f00e ffad 	bl	8013550 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80045f6:	2300      	movs	r3, #0
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	e069      	b.n	80046d0 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80045fc:	4a97      	ldr	r2, [pc, #604]	; (800485c <cliCMix+0x288>)
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	3301      	adds	r3, #1
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	4413      	add	r3, r2
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d061      	beq.n	80046d8 <cliCMix+0x104>
                break;
            num_motors++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	3301      	adds	r3, #1
 800461e:	461a      	mov	r2, r3
 8004620:	498f      	ldr	r1, [pc, #572]	; (8004860 <cliCMix+0x28c>)
 8004622:	2000      	movs	r0, #0
 8004624:	f00f f822 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 8004628:	4a8c      	ldr	r2, [pc, #560]	; (800485c <cliCMix+0x288>)
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	3301      	adds	r3, #1
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4413      	add	r3, r2
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4618      	mov	r0, r3
 800463c:	eeb0 0a67 	vmov.f32	s0, s15
 8004640:	f7ff febc 	bl	80043bc <ftoa>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	4986      	ldr	r1, [pc, #536]	; (8004864 <cliCMix+0x290>)
 800464a:	2000      	movs	r0, #0
 800464c:	f00f f80e 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 8004650:	4a82      	ldr	r2, [pc, #520]	; (800485c <cliCMix+0x288>)
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	3301      	adds	r3, #1
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	eeb0 0a67 	vmov.f32	s0, s15
 800466a:	f7ff fea7 	bl	80043bc <ftoa>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	497c      	ldr	r1, [pc, #496]	; (8004864 <cliCMix+0x290>)
 8004674:	2000      	movs	r0, #0
 8004676:	f00e fff9 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 800467a:	4a78      	ldr	r2, [pc, #480]	; (800485c <cliCMix+0x288>)
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	4413      	add	r3, r2
 8004682:	3318      	adds	r3, #24
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	4618      	mov	r0, r3
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	f7ff fe93 	bl	80043bc <ftoa>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	4972      	ldr	r1, [pc, #456]	; (8004864 <cliCMix+0x290>)
 800469c:	2000      	movs	r0, #0
 800469e:	f00e ffe5 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 80046a2:	4a6e      	ldr	r2, [pc, #440]	; (800485c <cliCMix+0x288>)
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	331c      	adds	r3, #28
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	4618      	mov	r0, r3
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	f7ff fe7f 	bl	80043bc <ftoa>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	4969      	ldr	r1, [pc, #420]	; (8004868 <cliCMix+0x294>)
 80046c4:	2000      	movs	r0, #0
 80046c6:	f00e ffd1 	bl	801366c <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	3301      	adds	r3, #1
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	2b0b      	cmp	r3, #11
 80046d4:	dd92      	ble.n	80045fc <cliCMix+0x28>
 80046d6:	e000      	b.n	80046da <cliCMix+0x106>
                break;
 80046d8:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ec:	e02a      	b.n	8004744 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80046ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80046f2:	4a5a      	ldr	r2, [pc, #360]	; (800485c <cliCMix+0x288>)
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	3301      	adds	r3, #1
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4413      	add	r3, r2
 80046fc:	3304      	adds	r3, #4
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004706:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 800470a:	ed97 7a03 	vldr	s14, [r7, #12]
 800470e:	4a53      	ldr	r2, [pc, #332]	; (800485c <cliCMix+0x288>)
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	4413      	add	r3, r2
 8004716:	3318      	adds	r3, #24
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004720:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 8004724:	ed97 7a04 	vldr	s14, [r7, #16]
 8004728:	4a4c      	ldr	r2, [pc, #304]	; (800485c <cliCMix+0x288>)
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4413      	add	r3, r2
 8004730:	331c      	adds	r3, #28
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800473a:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	3301      	adds	r3, #1
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	429a      	cmp	r2, r3
 800474a:	dbd0      	blt.n	80046ee <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 800474c:	4947      	ldr	r1, [pc, #284]	; (800486c <cliCMix+0x298>)
 800474e:	2000      	movs	r0, #0
 8004750:	f00e fefe 	bl	8013550 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004758:	e019      	b.n	800478e <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	3330      	adds	r3, #48	; 0x30
 8004760:	443b      	add	r3, r7
 8004762:	3b28      	subs	r3, #40	; 0x28
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	eef0 7ae7 	vabs.f32	s15, s15
 800476c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004870 <cliCMix+0x29c>
 8004770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	dd01      	ble.n	800477e <cliCMix+0x1aa>
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <cliCMix+0x2a0>)
 800477c:	e000      	b.n	8004780 <cliCMix+0x1ac>
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <cliCMix+0x2a4>)
 8004780:	4619      	mov	r1, r3
 8004782:	2000      	movs	r0, #0
 8004784:	f00e fee4 	bl	8013550 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	3301      	adds	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b02      	cmp	r3, #2
 8004792:	dde2      	ble.n	800475a <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <cliCMix+0x2a8>)
 8004796:	2000      	movs	r0, #0
 8004798:	f00e feda 	bl	8013550 <pifLog_Print>
 800479c:	e0ee      	b.n	800497c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4936      	ldr	r1, [pc, #216]	; (8004880 <cliCMix+0x2ac>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f01e ff2c 	bl	8023604 <strcasecmp>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d111      	bne.n	80047d6 <cliCMix+0x202>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b6:	e00a      	b.n	80047ce <cliCMix+0x1fa>
            mcfg.customMixer[i].throttle = 0.0f;
 80047b8:	4a28      	ldr	r2, [pc, #160]	; (800485c <cliCMix+0x288>)
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	3301      	adds	r3, #1
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	4413      	add	r3, r2
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	3301      	adds	r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2b0b      	cmp	r3, #11
 80047d2:	ddf1      	ble.n	80047b8 <cliCMix+0x1e4>
 80047d4:	e0d2      	b.n	800497c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "load") == 0) {
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4929      	ldr	r1, [pc, #164]	; (8004884 <cliCMix+0x2b0>)
 80047de:	4618      	mov	r0, r3
 80047e0:	f01e ff10 	bl	8023604 <strcasecmp>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d154      	bne.n	8004894 <cliCMix+0x2c0>
        if (argc > 2) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	dd2f      	ble.n	8004850 <cliCMix+0x27c>
            for (i = 0; ; i++) {
 80047f0:	2300      	movs	r3, #0
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <cliCMix+0x2b4>)
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <cliCMix+0x236>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004800:	4922      	ldr	r1, [pc, #136]	; (800488c <cliCMix+0x2b8>)
 8004802:	2000      	movs	r0, #0
 8004804:	f00e fea4 	bl	8013550 <pifLog_Print>
                    break;
 8004808:	e0b8      	b.n	800497c <cliCMix+0x3a8>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	3308      	adds	r3, #8
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	491d      	ldr	r1, [pc, #116]	; (8004888 <cliCMix+0x2b4>)
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f01e fef2 	bl	8023604 <strcasecmp>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d110      	bne.n	8004848 <cliCMix+0x274>
                    mixerLoadMix(i);
 8004826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004828:	f006 fc9a 	bl	800b160 <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <cliCMix+0x2b4>)
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	461a      	mov	r2, r3
 8004836:	4916      	ldr	r1, [pc, #88]	; (8004890 <cliCMix+0x2bc>)
 8004838:	2000      	movs	r0, #0
 800483a:	f00e ff17 	bl	801366c <pifLog_Printf>
                    cliCMix(1, NULL);
 800483e:	2100      	movs	r1, #0
 8004840:	2001      	movs	r0, #1
 8004842:	f7ff fec7 	bl	80045d4 <cliCMix>
                    break;
 8004846:	e099      	b.n	800497c <cliCMix+0x3a8>
            for (i = 0; ; i++) {
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	3301      	adds	r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 800484e:	e7d1      	b.n	80047f4 <cliCMix+0x220>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004850:	f06f 0302 	mvn.w	r3, #2
 8004854:	e093      	b.n	800497e <cliCMix+0x3aa>
 8004856:	bf00      	nop
 8004858:	08026fa0 	.word	0x08026fa0
 800485c:	20000848 	.word	0x20000848
 8004860:	08026fcc 	.word	0x08026fcc
 8004864:	08026fd4 	.word	0x08026fd4
 8004868:	08026fd8 	.word	0x08026fd8
 800486c:	08026fe0 	.word	0x08026fe0
 8004870:	3c23d70a 	.word	0x3c23d70a
 8004874:	08026ff0 	.word	0x08026ff0
 8004878:	08026ff4 	.word	0x08026ff4
 800487c:	08026ff8 	.word	0x08026ff8
 8004880:	08026ffc 	.word	0x08026ffc
 8004884:	08027004 	.word	0x08027004
 8004888:	08027ee4 	.word	0x08027ee4
 800488c:	0802700c 	.word	0x0802700c
 8004890:	08027024 	.word	0x08027024
        }
    } else {
        i = atoi(argv[1]); // get motor number
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	3304      	adds	r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f01e fd50 	bl	8023340 <atoi>
 80048a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	3b01      	subs	r3, #1
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	2b0b      	cmp	r3, #11
 80048ac:	dc61      	bgt.n	8004972 <cliCMix+0x39e>
            if (argc > 2) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	dd11      	ble.n	80048d8 <cliCMix+0x304>
                mcfg.customMixer[i].throttle = _atof(argv[2]);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fc8a 	bl	80041d4 <_atof>
 80048c0:	eef0 7a40 	vmov.f32	s15, s0
 80048c4:	4a30      	ldr	r2, [pc, #192]	; (8004988 <cliCMix+0x3b4>)
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	3301      	adds	r3, #1
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4413      	add	r3, r2
 80048ce:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	3301      	adds	r3, #1
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	dd12      	ble.n	8004904 <cliCMix+0x330>
                mcfg.customMixer[i].roll = _atof(argv[3]);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fc75 	bl	80041d4 <_atof>
 80048ea:	eef0 7a40 	vmov.f32	s15, s0
 80048ee:	4a26      	ldr	r2, [pc, #152]	; (8004988 <cliCMix+0x3b4>)
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	3301      	adds	r3, #1
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	4413      	add	r3, r2
 80048f8:	3304      	adds	r3, #4
 80048fa:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	3301      	adds	r3, #1
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b04      	cmp	r3, #4
 8004908:	dd11      	ble.n	800492e <cliCMix+0x35a>
                mcfg.customMixer[i].pitch = _atof(argv[4]);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	3310      	adds	r3, #16
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fc5f 	bl	80041d4 <_atof>
 8004916:	eef0 7a40 	vmov.f32	s15, s0
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <cliCMix+0x3b4>)
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4413      	add	r3, r2
 8004922:	3318      	adds	r3, #24
 8004924:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	3301      	adds	r3, #1
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 5) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b05      	cmp	r3, #5
 8004932:	dd11      	ble.n	8004958 <cliCMix+0x384>
                mcfg.customMixer[i].yaw = _atof(argv[5]);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fc4a 	bl	80041d4 <_atof>
 8004940:	eef0 7a40 	vmov.f32	s15, s0
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <cliCMix+0x3b4>)
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	4413      	add	r3, r2
 800494c:	331c      	adds	r3, #28
 800494e:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	3301      	adds	r3, #1
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b04      	cmp	r3, #4
 800495c:	d004      	beq.n	8004968 <cliCMix+0x394>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 800495e:	490b      	ldr	r1, [pc, #44]	; (800498c <cliCMix+0x3b8>)
 8004960:	2000      	movs	r0, #0
 8004962:	f00e fdf5 	bl	8013550 <pifLog_Print>
 8004966:	e009      	b.n	800497c <cliCMix+0x3a8>
            } else {
                cliCMix(1, NULL);
 8004968:	2100      	movs	r1, #0
 800496a:	2001      	movs	r0, #1
 800496c:	f7ff fe32 	bl	80045d4 <cliCMix>
 8004970:	e004      	b.n	800497c <cliCMix+0x3a8>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004972:	220c      	movs	r2, #12
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <cliCMix+0x3bc>)
 8004976:	2000      	movs	r0, #0
 8004978:	f00e fe78 	bl	801366c <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3730      	adds	r7, #48	; 0x30
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000848 	.word	0x20000848
 800498c:	08027038 	.word	0x08027038
 8004990:	08027074 	.word	0x08027074

08004994 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08c      	sub	sp, #48	; 0x30
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 800499e:	4aa2      	ldr	r2, [pc, #648]	; (8004c28 <cliServo+0x294>)
 80049a0:	f107 0320 	add.w	r3, r7, #32
 80049a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049a8:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 1) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d15c      	bne.n	8004a6c <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 80049b2:	499e      	ldr	r1, [pc, #632]	; (8004c2c <cliServo+0x298>)
 80049b4:	2000      	movs	r0, #0
 80049b6:	f00e fdcb 	bl	8013550 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 80049ba:	2300      	movs	r3, #0
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	e049      	b.n	8004a54 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	3301      	adds	r3, #1
 80049c4:	461a      	mov	r2, r3
 80049c6:	499a      	ldr	r1, [pc, #616]	; (8004c30 <cliServo+0x29c>)
 80049c8:	2000      	movs	r0, #0
 80049ca:	f00e fe4f 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 80049ce:	4999      	ldr	r1, [pc, #612]	; (8004c34 <cliServo+0x2a0>)
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	440b      	add	r3, r1
 80049dc:	33b8      	adds	r3, #184	; 0xb8
 80049de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e2:	461a      	mov	r2, r3
 80049e4:	4994      	ldr	r1, [pc, #592]	; (8004c38 <cliServo+0x2a4>)
 80049e6:	2000      	movs	r0, #0
 80049e8:	f00e fe40 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 80049ec:	4991      	ldr	r1, [pc, #580]	; (8004c34 <cliServo+0x2a0>)
 80049ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	440b      	add	r3, r1
 80049fa:	33bc      	adds	r3, #188	; 0xbc
 80049fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a00:	461a      	mov	r2, r3
 8004a02:	498d      	ldr	r1, [pc, #564]	; (8004c38 <cliServo+0x2a4>)
 8004a04:	2000      	movs	r0, #0
 8004a06:	f00e fe31 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004a0a:	498a      	ldr	r1, [pc, #552]	; (8004c34 <cliServo+0x2a0>)
 8004a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	440b      	add	r3, r1
 8004a18:	33ba      	adds	r3, #186	; 0xba
 8004a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4985      	ldr	r1, [pc, #532]	; (8004c38 <cliServo+0x2a4>)
 8004a22:	2000      	movs	r0, #0
 8004a24:	f00e fe22 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004a28:	4982      	ldr	r1, [pc, #520]	; (8004c34 <cliServo+0x2a0>)
 8004a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	440b      	add	r3, r1
 8004a36:	33be      	adds	r3, #190	; 0xbe
 8004a38:	f993 3000 	ldrsb.w	r3, [r3]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	497e      	ldr	r1, [pc, #504]	; (8004c38 <cliServo+0x2a4>)
 8004a40:	2000      	movs	r0, #0
 8004a42:	f00e fe13 	bl	801366c <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004a46:	497d      	ldr	r1, [pc, #500]	; (8004c3c <cliServo+0x2a8>)
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f00e fd81 	bl	8013550 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	3301      	adds	r3, #1
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	ddb2      	ble.n	80049c0 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004a5a:	4978      	ldr	r1, [pc, #480]	; (8004c3c <cliServo+0x2a8>)
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f00e fd77 	bl	8013550 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004a62:	4977      	ldr	r1, [pc, #476]	; (8004c40 <cliServo+0x2ac>)
 8004a64:	2000      	movs	r0, #0
 8004a66:	f00e fd73 	bl	8013550 <pifLog_Print>
 8004a6a:	e0d7      	b.n	8004c1c <cliServo+0x288>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4974      	ldr	r1, [pc, #464]	; (8004c44 <cliServo+0x2b0>)
 8004a74:	4618      	mov	r0, r3
 8004a76:	f01e fdc5 	bl	8023604 <strcasecmp>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13a      	bne.n	8004af6 <cliServo+0x162>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	e033      	b.n	8004aee <cliServo+0x15a>
            cfg.servoConf[i].min = 1020;
 8004a86:	496b      	ldr	r1, [pc, #428]	; (8004c34 <cliServo+0x2a0>)
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	33b8      	adds	r3, #184	; 0xb8
 8004a96:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004a9a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004a9c:	4965      	ldr	r1, [pc, #404]	; (8004c34 <cliServo+0x2a0>)
 8004a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	33ba      	adds	r3, #186	; 0xba
 8004aac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ab0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004ab2:	4960      	ldr	r1, [pc, #384]	; (8004c34 <cliServo+0x2a0>)
 8004ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	440b      	add	r3, r1
 8004ac0:	33bc      	adds	r3, #188	; 0xbc
 8004ac2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ac6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004ac8:	f107 0220 	add.w	r2, r7, #32
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	4413      	add	r3, r2
 8004ad0:	f993 0000 	ldrsb.w	r0, [r3]
 8004ad4:	4957      	ldr	r1, [pc, #348]	; (8004c34 <cliServo+0x2a0>)
 8004ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	440b      	add	r3, r1
 8004ae2:	33be      	adds	r3, #190	; 0xbe
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	3301      	adds	r3, #1
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	ddc8      	ble.n	8004a86 <cliServo+0xf2>
 8004af4:	e092      	b.n	8004c1c <cliServo+0x288>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check + 1 < argc && check < ARGS_COUNT) {
 8004afa:	e012      	b.n	8004b22 <cliServo+0x18e>
            args[check] = atoi(argv[check + 1]);
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	3301      	adds	r3, #1
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f01e fc19 	bl	8023340 <atoi>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	3330      	adds	r3, #48	; 0x30
 8004b16:	443b      	add	r3, r7
 8004b18:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	3301      	adds	r3, #1
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	3301      	adds	r3, #1
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dd02      	ble.n	8004b32 <cliServo+0x19e>
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	dde4      	ble.n	8004afc <cliServo+0x168>
        }

        if (check != ARGS_COUNT) {
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d005      	beq.n	8004b44 <cliServo+0x1b0>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004b38:	4943      	ldr	r1, [pc, #268]	; (8004c48 <cliServo+0x2b4>)
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f00e fd08 	bl	8013550 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e06c      	b.n	8004c1e <cliServo+0x28a>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	dd60      	ble.n	8004c0c <cliServo+0x278>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	dc5d      	bgt.n	8004c0c <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b50:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004b52:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b56:	db59      	blt.n	8004c0c <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f640 0234 	movw	r2, #2100	; 0x834
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	dc54      	bgt.n	8004c0c <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b62:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b68:	db50      	blt.n	8004c0c <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f640 0234 	movw	r2, #2100	; 0x834
 8004b70:	4293      	cmp	r3, r2
 8004b72:	dc4b      	bgt.n	8004c0c <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b74:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b76:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b7a:	db47      	blt.n	8004c0c <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f640 0234 	movw	r2, #2100	; 0x834
 8004b82:	4293      	cmp	r3, r2
 8004b84:	dc42      	bgt.n	8004c0c <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b86:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b88:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004b8c:	db3e      	blt.n	8004c0c <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b64      	cmp	r3, #100	; 0x64
 8004b92:	dc3b      	bgt.n	8004c0c <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	dc37      	bgt.n	8004c0c <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	dc33      	bgt.n	8004c0c <cliServo+0x278>
            args[SERVO]--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	b218      	sxth	r0, r3
 8004bb0:	4920      	ldr	r1, [pc, #128]	; (8004c34 <cliServo+0x2a0>)
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	440b      	add	r3, r1
 8004bbc:	33b8      	adds	r3, #184	; 0xb8
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	b218      	sxth	r0, r3
 8004bc8:	491a      	ldr	r1, [pc, #104]	; (8004c34 <cliServo+0x2a0>)
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	33ba      	adds	r3, #186	; 0xba
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	b218      	sxth	r0, r3
 8004be0:	4914      	ldr	r1, [pc, #80]	; (8004c34 <cliServo+0x2a0>)
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	440b      	add	r3, r1
 8004bec:	33bc      	adds	r3, #188	; 0xbc
 8004bee:	4602      	mov	r2, r0
 8004bf0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	b258      	sxtb	r0, r3
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <cliServo+0x2a0>)
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	33be      	adds	r3, #190	; 0xbe
 8004c06:	4602      	mov	r2, r0
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e003      	b.n	8004c14 <cliServo+0x280>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004c0c:	490f      	ldr	r1, [pc, #60]	; (8004c4c <cliServo+0x2b8>)
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f00e fc9e 	bl	8013550 <pifLog_Print>
        cliServo(1, NULL);
 8004c14:	2100      	movs	r1, #0
 8004c16:	2001      	movs	r0, #1
 8004c18:	f7ff febc 	bl	8004994 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	080271b0 	.word	0x080271b0
 8004c2c:	0802709c 	.word	0x0802709c
 8004c30:	08026fcc 	.word	0x08026fcc
 8004c34:	20000db4 	.word	0x20000db4
 8004c38:	080270c8 	.word	0x080270c8
 8004c3c:	08026ff8 	.word	0x08026ff8
 8004c40:	080270cc 	.word	0x080270cc
 8004c44:	08026ffc 	.word	0x08026ffc
 8004c48:	080270e8 	.word	0x080270e8
 8004c4c:	08027134 	.word	0x08027134

08004c50 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b090      	sub	sp, #64	; 0x40
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 1) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 808a 	bne.w	8004d7a <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004c66:	49ab      	ldr	r1, [pc, #684]	; (8004f14 <cliServoMix+0x2c4>)
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f00e fc71 	bl	8013550 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004c6e:	49aa      	ldr	r1, [pc, #680]	; (8004f18 <cliServoMix+0x2c8>)
 8004c70:	2000      	movs	r0, #0
 8004c72:	f00e fc6d 	bl	8013550 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004c76:	2300      	movs	r3, #0
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7a:	e074      	b.n	8004d66 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004c7c:	49a7      	ldr	r1, [pc, #668]	; (8004f1c <cliServoMix+0x2cc>)
 8004c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	440b      	add	r3, r1
 8004c88:	33d2      	adds	r3, #210	; 0xd2
 8004c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d06d      	beq.n	8004d6e <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c94:	3301      	adds	r3, #1
 8004c96:	461a      	mov	r2, r3
 8004c98:	49a1      	ldr	r1, [pc, #644]	; (8004f20 <cliServoMix+0x2d0>)
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00e fce6 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004ca0:	499e      	ldr	r1, [pc, #632]	; (8004f1c <cliServoMix+0x2cc>)
 8004ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	33d0      	adds	r3, #208	; 0xd0
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	499b      	ldr	r1, [pc, #620]	; (8004f24 <cliServoMix+0x2d4>)
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f00e fcd8 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004cbc:	4997      	ldr	r1, [pc, #604]	; (8004f1c <cliServoMix+0x2cc>)
 8004cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	33d1      	adds	r3, #209	; 0xd1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4994      	ldr	r1, [pc, #592]	; (8004f24 <cliServoMix+0x2d4>)
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f00e fcca 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004cd8:	4990      	ldr	r1, [pc, #576]	; (8004f1c <cliServoMix+0x2cc>)
 8004cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	33d2      	adds	r3, #210	; 0xd2
 8004ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8004cea:	461a      	mov	r2, r3
 8004cec:	498d      	ldr	r1, [pc, #564]	; (8004f24 <cliServoMix+0x2d4>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f00e fcbc 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004cf4:	4989      	ldr	r1, [pc, #548]	; (8004f1c <cliServoMix+0x2cc>)
 8004cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	440b      	add	r3, r1
 8004d00:	33d3      	adds	r3, #211	; 0xd3
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4987      	ldr	r1, [pc, #540]	; (8004f24 <cliServoMix+0x2d4>)
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f00e fcaf 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004d0e:	4983      	ldr	r1, [pc, #524]	; (8004f1c <cliServoMix+0x2cc>)
 8004d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	440b      	add	r3, r1
 8004d1a:	33d4      	adds	r3, #212	; 0xd4
 8004d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4980      	ldr	r1, [pc, #512]	; (8004f24 <cliServoMix+0x2d4>)
 8004d24:	2000      	movs	r0, #0
 8004d26:	f00e fca1 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004d2a:	497c      	ldr	r1, [pc, #496]	; (8004f1c <cliServoMix+0x2cc>)
 8004d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	33d5      	adds	r3, #213	; 0xd5
 8004d38:	f993 3000 	ldrsb.w	r3, [r3]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4979      	ldr	r1, [pc, #484]	; (8004f24 <cliServoMix+0x2d4>)
 8004d40:	2000      	movs	r0, #0
 8004d42:	f00e fc93 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004d46:	4975      	ldr	r1, [pc, #468]	; (8004f1c <cliServoMix+0x2cc>)
 8004d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	440b      	add	r3, r1
 8004d52:	33d6      	adds	r3, #214	; 0xd6
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	4973      	ldr	r1, [pc, #460]	; (8004f28 <cliServoMix+0x2d8>)
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f00e fc86 	bl	801366c <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	3301      	adds	r3, #1
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b0f      	cmp	r3, #15
 8004d6a:	dd87      	ble.n	8004c7c <cliServoMix+0x2c>
 8004d6c:	e000      	b.n	8004d70 <cliServoMix+0x120>
                break;
 8004d6e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004d70:	496e      	ldr	r1, [pc, #440]	; (8004f2c <cliServoMix+0x2dc>)
 8004d72:	2000      	movs	r0, #0
 8004d74:	f00e fbec 	bl	8013550 <pifLog_Print>
 8004d78:	e23b      	b.n	80051f2 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	496b      	ldr	r1, [pc, #428]	; (8004f30 <cliServoMix+0x2e0>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f01e fc3e 	bl	8023604 <strcasecmp>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d118      	bne.n	8004dc0 <cliServoMix+0x170>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004d8e:	2270      	movs	r2, #112	; 0x70
 8004d90:	2100      	movs	r1, #0
 8004d92:	4868      	ldr	r0, [pc, #416]	; (8004f34 <cliServoMix+0x2e4>)
 8004d94:	f01e fb28 	bl	80233e8 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9c:	e00c      	b.n	8004db8 <cliServoMix+0x168>
            cfg.servoConf[i].direction = 0;
 8004d9e:	4966      	ldr	r1, [pc, #408]	; (8004f38 <cliServoMix+0x2e8>)
 8004da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	440b      	add	r3, r1
 8004dac:	33c0      	adds	r3, #192	; 0xc0
 8004dae:	2200      	movs	r2, #0
 8004db0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db4:	3301      	adds	r3, #1
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	ddef      	ble.n	8004d9e <cliServoMix+0x14e>
 8004dbe:	e218      	b.n	80051f2 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	495d      	ldr	r1, [pc, #372]	; (8004f3c <cliServoMix+0x2ec>)
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f01e fc1b 	bl	8023604 <strcasecmp>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d135      	bne.n	8004e40 <cliServoMix+0x1f0>
        if (argc > 2) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	dd2f      	ble.n	8004e3a <cliServoMix+0x1ea>
            for (i = 0; ; i++) {
 8004dda:	2300      	movs	r3, #0
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004dde:	4a58      	ldr	r2, [pc, #352]	; (8004f40 <cliServoMix+0x2f0>)
 8004de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <cliServoMix+0x1a4>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004dea:	4956      	ldr	r1, [pc, #344]	; (8004f44 <cliServoMix+0x2f4>)
 8004dec:	2000      	movs	r0, #0
 8004dee:	f00e fbaf 	bl	8013550 <pifLog_Print>
                    break;
 8004df2:	e1fe      	b.n	80051f2 <cliServoMix+0x5a2>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4951      	ldr	r1, [pc, #324]	; (8004f40 <cliServoMix+0x2f0>)
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f01e fbfd 	bl	8023604 <strcasecmp>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d110      	bne.n	8004e32 <cliServoMix+0x1e2>
                    servoMixerLoadMix(i);
 8004e10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e12:	f006 f92d 	bl	800b070 <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004e16:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <cliServoMix+0x2f0>)
 8004e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4949      	ldr	r1, [pc, #292]	; (8004f48 <cliServoMix+0x2f8>)
 8004e22:	2000      	movs	r0, #0
 8004e24:	f00e fc22 	bl	801366c <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f7ff ff10 	bl	8004c50 <cliServoMix>
                    break;
 8004e30:	e1df      	b.n	80051f2 <cliServoMix+0x5a2>
            for (i = 0; ; i++) {
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e34:	3301      	adds	r3, #1
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004e38:	e7d1      	b.n	8004dde <cliServoMix+0x18e>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004e3a:	f06f 0302 	mvn.w	r3, #2
 8004e3e:	e1d9      	b.n	80051f4 <cliServoMix+0x5a4>
        }
    } else if (strcasecmp(argv[1], "direction") == 0) {
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	3304      	adds	r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4941      	ldr	r1, [pc, #260]	; (8004f4c <cliServoMix+0x2fc>)
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f01e fbdb 	bl	8023604 <strcasecmp>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 8128 	bne.w	80050a6 <cliServoMix+0x456>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004e56:	4a3e      	ldr	r2, [pc, #248]	; (8004f50 <cliServoMix+0x300>)
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e60:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 2) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	f040 8095 	bne.w	8004f96 <cliServoMix+0x346>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004e6c:	4939      	ldr	r1, [pc, #228]	; (8004f54 <cliServoMix+0x304>)
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f00e fb6e 	bl	8013550 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004e74:	4938      	ldr	r1, [pc, #224]	; (8004f58 <cliServoMix+0x308>)
 8004e76:	2000      	movs	r0, #0
 8004e78:	f00e fb6a 	bl	8013550 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	e009      	b.n	8004e96 <cliServoMix+0x246>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	3301      	adds	r3, #1
 8004e86:	461a      	mov	r2, r3
 8004e88:	4934      	ldr	r1, [pc, #208]	; (8004f5c <cliServoMix+0x30c>)
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f00e fbee 	bl	801366c <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3301      	adds	r3, #1
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2b0b      	cmp	r3, #11
 8004e9a:	ddf2      	ble.n	8004e82 <cliServoMix+0x232>
            pifLog_Print(LT_NONE, "\r\n");
 8004e9c:	4923      	ldr	r1, [pc, #140]	; (8004f2c <cliServoMix+0x2dc>)
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f00e fb56 	bl	8013550 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea8:	e02f      	b.n	8004f0a <cliServoMix+0x2ba>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	3301      	adds	r3, #1
 8004eae:	461a      	mov	r2, r3
 8004eb0:	492b      	ldr	r1, [pc, #172]	; (8004f60 <cliServoMix+0x310>)
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f00e fbda 	bl	801366c <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
 8004ebc:	e01b      	b.n	8004ef6 <cliServoMix+0x2a6>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004ebe:	491e      	ldr	r1, [pc, #120]	; (8004f38 <cliServoMix+0x2e8>)
 8004ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	440b      	add	r3, r1
 8004ecc:	33c0      	adds	r3, #192	; 0xc0
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	fa42 f303 	asr.w	r3, r2, r3
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <cliServoMix+0x294>
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <cliServoMix+0x314>)
 8004ee2:	e000      	b.n	8004ee6 <cliServoMix+0x296>
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <cliServoMix+0x318>)
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4920      	ldr	r1, [pc, #128]	; (8004f6c <cliServoMix+0x31c>)
 8004eea:	2000      	movs	r0, #0
 8004eec:	f00e fbbe 	bl	801366c <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2b0b      	cmp	r3, #11
 8004efa:	dde0      	ble.n	8004ebe <cliServoMix+0x26e>
                pifLog_Print(LT_NONE, "\r\n");
 8004efc:	490b      	ldr	r1, [pc, #44]	; (8004f2c <cliServoMix+0x2dc>)
 8004efe:	2000      	movs	r0, #0
 8004f00:	f00e fb26 	bl	8013550 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	3301      	adds	r3, #1
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0c:	2b07      	cmp	r3, #7
 8004f0e:	ddcc      	ble.n	8004eaa <cliServoMix+0x25a>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e16f      	b.n	80051f4 <cliServoMix+0x5a4>
 8004f14:	080271b8 	.word	0x080271b8
 8004f18:	08027220 	.word	0x08027220
 8004f1c:	20000848 	.word	0x20000848
 8004f20:	08026fcc 	.word	0x08026fcc
 8004f24:	080270c8 	.word	0x080270c8
 8004f28:	08027280 	.word	0x08027280
 8004f2c:	08026ff8 	.word	0x08026ff8
 8004f30:	08026ffc 	.word	0x08026ffc
 8004f34:	20000918 	.word	0x20000918
 8004f38:	20000db4 	.word	0x20000db4
 8004f3c:	08027004 	.word	0x08027004
 8004f40:	08027ee4 	.word	0x08027ee4
 8004f44:	0802700c 	.word	0x0802700c
 8004f48:	08027024 	.word	0x08027024
 8004f4c:	08026268 	.word	0x08026268
 8004f50:	080273bc 	.word	0x080273bc
 8004f54:	08027288 	.word	0x08027288
 8004f58:	080272d8 	.word	0x080272d8
 8004f5c:	080272dc 	.word	0x080272dc
 8004f60:	080272e4 	.word	0x080272e4
 8004f64:	080272e8 	.word	0x080272e8
 8004f68:	080272ec 	.word	0x080272ec
 8004f6c:	080272f0 	.word	0x080272f0
        }

        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	3301      	adds	r3, #1
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4413      	add	r3, r2
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f01e f9df 	bl	8023340 <atoi>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	3340      	adds	r3, #64	; 0x40
 8004f8a:	443b      	add	r3, r7
 8004f8c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	3301      	adds	r3, #1
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	3301      	adds	r3, #1
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	dd02      	ble.n	8004fa6 <cliServoMix+0x356>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	dde4      	ble.n	8004f70 <cliServoMix+0x320>
        }

        if (check != ARGS_COUNT) {
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d005      	beq.n	8004fb8 <cliServoMix+0x368>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8004fac:	4993      	ldr	r1, [pc, #588]	; (80051fc <cliServoMix+0x5ac>)
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f00e face 	bl	8013550 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e11d      	b.n	80051f4 <cliServoMix+0x5a4>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	dd55      	ble.n	800506a <cliServoMix+0x41a>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	dc52      	bgt.n	800506a <cliServoMix+0x41a>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dd4f      	ble.n	800506a <cliServoMix+0x41a>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	dc4c      	bgt.n	800506a <cliServoMix+0x41a>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d002      	beq.n	8004fde <cliServoMix+0x38e>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d145      	bne.n	800506a <cliServoMix+0x41a>
            args[SERVO] -= 1;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d11c      	bne.n	800502c <cliServoMix+0x3dc>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4982      	ldr	r1, [pc, #520]	; (8005200 <cliServoMix+0x5b0>)
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	440b      	add	r3, r1
 8005000:	33c0      	adds	r3, #192	; 0xc0
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b21a      	sxth	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	b21b      	sxth	r3, r3
 8005010:	4313      	orrs	r3, r2
 8005012:	b21b      	sxth	r3, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	b298      	uxth	r0, r3
 8005018:	4979      	ldr	r1, [pc, #484]	; (8005200 <cliServoMix+0x5b0>)
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	440b      	add	r3, r1
 8005024:	33c0      	adds	r3, #192	; 0xc0
 8005026:	4602      	mov	r2, r0
 8005028:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 800502a:	e022      	b.n	8005072 <cliServoMix+0x422>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4974      	ldr	r1, [pc, #464]	; (8005200 <cliServoMix+0x5b0>)
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	440b      	add	r3, r1
 800503a:	33c0      	adds	r3, #192	; 0xc0
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b21a      	sxth	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	b21b      	sxth	r3, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	b21b      	sxth	r3, r3
 800504e:	4013      	ands	r3, r2
 8005050:	b21b      	sxth	r3, r3
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	b298      	uxth	r0, r3
 8005056:	496a      	ldr	r1, [pc, #424]	; (8005200 <cliServoMix+0x5b0>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	440b      	add	r3, r1
 8005062:	33c0      	adds	r3, #192	; 0xc0
 8005064:	4602      	mov	r2, r0
 8005066:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005068:	e003      	b.n	8005072 <cliServoMix+0x422>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800506a:	4966      	ldr	r1, [pc, #408]	; (8005204 <cliServoMix+0x5b4>)
 800506c:	2000      	movs	r0, #0
 800506e:	f00e fa6f 	bl	8013550 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	2002      	movs	r0, #2
 800507a:	f7ff fde9 	bl	8004c50 <cliServoMix>
 800507e:	e0b8      	b.n	80051f2 <cliServoMix+0x5a2>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	3301      	adds	r3, #1
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	4413      	add	r3, r2
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f01e f957 	bl	8023340 <atoi>
 8005092:	4602      	mov	r2, r0
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	3340      	adds	r3, #64	; 0x40
 800509a:	443b      	add	r3, r7
 800509c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	3301      	adds	r3, #1
 80050a4:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	3301      	adds	r3, #1
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	dd02      	ble.n	80050b6 <cliServoMix+0x466>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	dde4      	ble.n	8005080 <cliServoMix+0x430>
        }

        if (check != ARGS_COUNT) {
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d005      	beq.n	80050c8 <cliServoMix+0x478>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 80050bc:	4952      	ldr	r1, [pc, #328]	; (8005208 <cliServoMix+0x5b8>)
 80050be:	2000      	movs	r0, #0
 80050c0:	f00e fa46 	bl	8013550 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e095      	b.n	80051f4 <cliServoMix+0x5a4>
        }

        i = args[RULE] - 1;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f2c0 808a 	blt.w	80051ea <cliServoMix+0x59a>
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	2b0f      	cmp	r3, #15
 80050da:	f300 8086 	bgt.w	80051ea <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050de:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f340 8082 	ble.w	80051ea <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	dc7e      	bgt.n	80051ea <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050ec:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dd7b      	ble.n	80051ea <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	dc78      	bgt.n	80051ea <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80050f8:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050fa:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80050fe:	db74      	blt.n	80051ea <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	dc71      	bgt.n	80051ea <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8005106:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	db6e      	blt.n	80051ea <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2bff      	cmp	r3, #255	; 0xff
 8005110:	dc6b      	bgt.n	80051ea <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8005114:	2b00      	cmp	r3, #0
 8005116:	db68      	blt.n	80051ea <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	dc65      	bgt.n	80051ea <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005120:	2b00      	cmp	r3, #0
 8005122:	db62      	blt.n	80051ea <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	dc5f      	bgt.n	80051ea <cliServoMix+0x59a>
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	429a      	cmp	r2, r3
 8005130:	da5b      	bge.n	80051ea <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	db58      	blt.n	80051ea <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	2b03      	cmp	r3, #3
 800513c:	dc55      	bgt.n	80051ea <cliServoMix+0x59a>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b2d8      	uxtb	r0, r3
 8005146:	4931      	ldr	r1, [pc, #196]	; (800520c <cliServoMix+0x5bc>)
 8005148:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	440b      	add	r3, r1
 8005152:	33d0      	adds	r3, #208	; 0xd0
 8005154:	4602      	mov	r2, r0
 8005156:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b2d8      	uxtb	r0, r3
 8005160:	492a      	ldr	r1, [pc, #168]	; (800520c <cliServoMix+0x5bc>)
 8005162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	440b      	add	r3, r1
 800516c:	33d1      	adds	r3, #209	; 0xd1
 800516e:	4602      	mov	r2, r0
 8005170:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	b258      	sxtb	r0, r3
 8005176:	4925      	ldr	r1, [pc, #148]	; (800520c <cliServoMix+0x5bc>)
 8005178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	440b      	add	r3, r1
 8005182:	33d2      	adds	r3, #210	; 0xd2
 8005184:	4602      	mov	r2, r0
 8005186:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	b2d8      	uxtb	r0, r3
 800518c:	491f      	ldr	r1, [pc, #124]	; (800520c <cliServoMix+0x5bc>)
 800518e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	440b      	add	r3, r1
 8005198:	33d3      	adds	r3, #211	; 0xd3
 800519a:	4602      	mov	r2, r0
 800519c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	b258      	sxtb	r0, r3
 80051a2:	491a      	ldr	r1, [pc, #104]	; (800520c <cliServoMix+0x5bc>)
 80051a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	440b      	add	r3, r1
 80051ae:	33d4      	adds	r3, #212	; 0xd4
 80051b0:	4602      	mov	r2, r0
 80051b2:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	b258      	sxtb	r0, r3
 80051b8:	4914      	ldr	r1, [pc, #80]	; (800520c <cliServoMix+0x5bc>)
 80051ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	440b      	add	r3, r1
 80051c4:	33d5      	adds	r3, #213	; 0xd5
 80051c6:	4602      	mov	r2, r0
 80051c8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	b2d8      	uxtb	r0, r3
 80051ce:	490f      	ldr	r1, [pc, #60]	; (800520c <cliServoMix+0x5bc>)
 80051d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	440b      	add	r3, r1
 80051da:	33d6      	adds	r3, #214	; 0xd6
 80051dc:	4602      	mov	r2, r0
 80051de:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 80051e0:	2100      	movs	r1, #0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7ff fd34 	bl	8004c50 <cliServoMix>
 80051e8:	e003      	b.n	80051f2 <cliServoMix+0x5a2>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 80051ea:	4906      	ldr	r1, [pc, #24]	; (8005204 <cliServoMix+0x5b4>)
 80051ec:	2000      	movs	r0, #0
 80051ee:	f00e f9af 	bl	8013550 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3740      	adds	r7, #64	; 0x40
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	080272f8 	.word	0x080272f8
 8005200:	20000db4 	.word	0x20000db4
 8005204:	08027334 	.word	0x08027334
 8005208:	08027358 	.word	0x08027358
 800520c:	20000848 	.word	0x20000848

08005210 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 800521a:	490b      	ldr	r1, [pc, #44]	; (8005248 <cliDefaults+0x38>)
 800521c:	2000      	movs	r0, #0
 800521e:	f00e f997 	bl	8013550 <pifLog_Print>
    checkFirstTime(true);
 8005222:	2001      	movs	r0, #1
 8005224:	f001 fb16 	bl	8006854 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005228:	4908      	ldr	r1, [pc, #32]	; (800524c <cliDefaults+0x3c>)
 800522a:	2000      	movs	r0, #0
 800522c:	f00e f990 	bl	8013550 <pifLog_Print>
    pif_Delay1ms(10);
 8005230:	200a      	movs	r0, #10
 8005232:	f00c f8c5 	bl	80113c0 <pif_Delay1ms>
    systemReset(false);
 8005236:	2000      	movs	r0, #0
 8005238:	f7fc ff02 	bl	8002040 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	080273c4 	.word	0x080273c4
 800524c:	080273e0 	.word	0x080273e0

08005250 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	b093      	sub	sp, #76	; 0x4c
 8005254:	af04      	add	r7, sp, #16
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 800525a:	2100      	movs	r1, #0
 800525c:	2001      	movs	r0, #1
 800525e:	f001 f86f 	bl	8006340 <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005262:	49bc      	ldr	r1, [pc, #752]	; (8005554 <cliDump+0x304>)
 8005264:	2000      	movs	r0, #0
 8005266:	f00e f973 	bl	8013550 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800526a:	2100      	movs	r1, #0
 800526c:	2001      	movs	r0, #1
 800526e:	f7ff f961 	bl	8004534 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005272:	4bb9      	ldr	r3, [pc, #740]	; (8005558 <cliDump+0x308>)
 8005274:	795b      	ldrb	r3, [r3, #5]
 8005276:	3b01      	subs	r3, #1
 8005278:	4ab8      	ldr	r2, [pc, #736]	; (800555c <cliDump+0x30c>)
 800527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527e:	461a      	mov	r2, r3
 8005280:	49b7      	ldr	r1, [pc, #732]	; (8005560 <cliDump+0x310>)
 8005282:	2000      	movs	r0, #0
 8005284:	f00e f9f2 	bl	801366c <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005288:	4bb3      	ldr	r3, [pc, #716]	; (8005558 <cliDump+0x308>)
 800528a:	edd3 7a04 	vldr	s15, [r3, #16]
 800528e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	f000 80a4 	beq.w	80053e2 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	e093      	b.n	80053c8 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80052a0:	4aad      	ldr	r2, [pc, #692]	; (8005558 <cliDump+0x308>)
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	3301      	adds	r3, #1
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	4413      	add	r3, r2
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	f000 808c 	beq.w	80053d2 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 80052ba:	4aa7      	ldr	r2, [pc, #668]	; (8005558 <cliDump+0x308>)
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	3301      	adds	r3, #1
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80052c8:	4aa3      	ldr	r2, [pc, #652]	; (8005558 <cliDump+0x308>)
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	3301      	adds	r3, #1
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	4413      	add	r3, r2
 80052d2:	3304      	adds	r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 80052d8:	4a9f      	ldr	r2, [pc, #636]	; (8005558 <cliDump+0x308>)
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	4413      	add	r3, r2
 80052e0:	3318      	adds	r3, #24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 80052e6:	4a9c      	ldr	r2, [pc, #624]	; (8005558 <cliDump+0x308>)
 80052e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	4413      	add	r3, r2
 80052ee:	331c      	adds	r3, #28
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	3301      	adds	r3, #1
 80052f8:	461a      	mov	r2, r3
 80052fa:	499a      	ldr	r1, [pc, #616]	; (8005564 <cliDump+0x314>)
 80052fc:	2000      	movs	r0, #0
 80052fe:	f00e f9b5 	bl	801366c <pifLog_Printf>
            if (thr < 0)
 8005302:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530e:	d503      	bpl.n	8005318 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 8005310:	4995      	ldr	r1, [pc, #596]	; (8005568 <cliDump+0x318>)
 8005312:	2000      	movs	r0, #0
 8005314:	f00e f91c 	bl	8013550 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4618      	mov	r0, r3
 800531e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005322:	f7ff f84b 	bl	80043bc <ftoa>
 8005326:	4603      	mov	r3, r0
 8005328:	461a      	mov	r2, r3
 800532a:	4990      	ldr	r1, [pc, #576]	; (800556c <cliDump+0x31c>)
 800532c:	2000      	movs	r0, #0
 800532e:	f00e f99d 	bl	801366c <pifLog_Printf>
            if (roll < 0)
 8005332:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	d503      	bpl.n	8005348 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 8005340:	4989      	ldr	r1, [pc, #548]	; (8005568 <cliDump+0x318>)
 8005342:	2000      	movs	r0, #0
 8005344:	f00e f904 	bl	8013550 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	4618      	mov	r0, r3
 800534e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005352:	f7ff f833 	bl	80043bc <ftoa>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	4984      	ldr	r1, [pc, #528]	; (800556c <cliDump+0x31c>)
 800535c:	2000      	movs	r0, #0
 800535e:	f00e f985 	bl	801366c <pifLog_Printf>
            if (pitch < 0)
 8005362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	d503      	bpl.n	8005378 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005370:	497d      	ldr	r1, [pc, #500]	; (8005568 <cliDump+0x318>)
 8005372:	2000      	movs	r0, #0
 8005374:	f00e f8ec 	bl	8013550 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005378:	f107 0308 	add.w	r3, r7, #8
 800537c:	4618      	mov	r0, r3
 800537e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005382:	f7ff f81b 	bl	80043bc <ftoa>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	4978      	ldr	r1, [pc, #480]	; (800556c <cliDump+0x31c>)
 800538c:	2000      	movs	r0, #0
 800538e:	f00e f96d 	bl	801366c <pifLog_Printf>
            if (yaw < 0)
 8005392:	edd7 7a08 	vldr	s15, [r7, #32]
 8005396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	d503      	bpl.n	80053a8 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 80053a0:	4971      	ldr	r1, [pc, #452]	; (8005568 <cliDump+0x318>)
 80053a2:	2000      	movs	r0, #0
 80053a4:	f00e f8d4 	bl	8013550 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4618      	mov	r0, r3
 80053ae:	ed97 0a08 	vldr	s0, [r7, #32]
 80053b2:	f7ff f803 	bl	80043bc <ftoa>
 80053b6:	4603      	mov	r3, r0
 80053b8:	461a      	mov	r2, r3
 80053ba:	496d      	ldr	r1, [pc, #436]	; (8005570 <cliDump+0x320>)
 80053bc:	2000      	movs	r0, #0
 80053be:	f00e f955 	bl	801366c <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	3301      	adds	r3, #1
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	2b0b      	cmp	r3, #11
 80053cc:	f67f af68 	bls.w	80052a0 <cliDump+0x50>
 80053d0:	e000      	b.n	80053d4 <cliDump+0x184>
                break;
 80053d2:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	3301      	adds	r3, #1
 80053d8:	461a      	mov	r2, r3
 80053da:	4966      	ldr	r1, [pc, #408]	; (8005574 <cliDump+0x324>)
 80053dc:	2000      	movs	r0, #0
 80053de:	f00e f945 	bl	801366c <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 80053e2:	4b5d      	ldr	r3, [pc, #372]	; (8005558 <cliDump+0x308>)
 80053e4:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8084 	beq.w	80054f6 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	e074      	b.n	80054de <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80053f4:	4958      	ldr	r1, [pc, #352]	; (8005558 <cliDump+0x308>)
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	440b      	add	r3, r1
 8005400:	33d2      	adds	r3, #210	; 0xd2
 8005402:	f993 3000 	ldrsb.w	r3, [r3]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d06d      	beq.n	80054e6 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	3301      	adds	r3, #1
 800540e:	461a      	mov	r2, r3
 8005410:	4959      	ldr	r1, [pc, #356]	; (8005578 <cliDump+0x328>)
 8005412:	2000      	movs	r0, #0
 8005414:	f00e f92a 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 8005418:	494f      	ldr	r1, [pc, #316]	; (8005558 <cliDump+0x308>)
 800541a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	440b      	add	r3, r1
 8005424:	33d0      	adds	r3, #208	; 0xd0
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	461a      	mov	r2, r3
 800542c:	4953      	ldr	r1, [pc, #332]	; (800557c <cliDump+0x32c>)
 800542e:	2000      	movs	r0, #0
 8005430:	f00e f91c 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 8005434:	4948      	ldr	r1, [pc, #288]	; (8005558 <cliDump+0x308>)
 8005436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	440b      	add	r3, r1
 8005440:	33d1      	adds	r3, #209	; 0xd1
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	461a      	mov	r2, r3
 8005448:	494c      	ldr	r1, [pc, #304]	; (800557c <cliDump+0x32c>)
 800544a:	2000      	movs	r0, #0
 800544c:	f00e f90e 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005450:	4941      	ldr	r1, [pc, #260]	; (8005558 <cliDump+0x308>)
 8005452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	440b      	add	r3, r1
 800545c:	33d2      	adds	r3, #210	; 0xd2
 800545e:	f993 3000 	ldrsb.w	r3, [r3]
 8005462:	461a      	mov	r2, r3
 8005464:	4945      	ldr	r1, [pc, #276]	; (800557c <cliDump+0x32c>)
 8005466:	2000      	movs	r0, #0
 8005468:	f00e f900 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800546c:	493a      	ldr	r1, [pc, #232]	; (8005558 <cliDump+0x308>)
 800546e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	440b      	add	r3, r1
 8005478:	33d3      	adds	r3, #211	; 0xd3
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	493f      	ldr	r1, [pc, #252]	; (800557c <cliDump+0x32c>)
 8005480:	2000      	movs	r0, #0
 8005482:	f00e f8f3 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005486:	4934      	ldr	r1, [pc, #208]	; (8005558 <cliDump+0x308>)
 8005488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	440b      	add	r3, r1
 8005492:	33d4      	adds	r3, #212	; 0xd4
 8005494:	f993 3000 	ldrsb.w	r3, [r3]
 8005498:	461a      	mov	r2, r3
 800549a:	4938      	ldr	r1, [pc, #224]	; (800557c <cliDump+0x32c>)
 800549c:	2000      	movs	r0, #0
 800549e:	f00e f8e5 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 80054a2:	492d      	ldr	r1, [pc, #180]	; (8005558 <cliDump+0x308>)
 80054a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	440b      	add	r3, r1
 80054ae:	33d5      	adds	r3, #213	; 0xd5
 80054b0:	f993 3000 	ldrsb.w	r3, [r3]
 80054b4:	461a      	mov	r2, r3
 80054b6:	4931      	ldr	r1, [pc, #196]	; (800557c <cliDump+0x32c>)
 80054b8:	2000      	movs	r0, #0
 80054ba:	f00e f8d7 	bl	801366c <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 80054be:	4926      	ldr	r1, [pc, #152]	; (8005558 <cliDump+0x308>)
 80054c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	440b      	add	r3, r1
 80054ca:	33d6      	adds	r3, #214	; 0xd6
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	492b      	ldr	r1, [pc, #172]	; (8005580 <cliDump+0x330>)
 80054d2:	2000      	movs	r0, #0
 80054d4:	f00e f8ca 	bl	801366c <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	3301      	adds	r3, #1
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	2b0f      	cmp	r3, #15
 80054e2:	d987      	bls.n	80053f4 <cliDump+0x1a4>
 80054e4:	e000      	b.n	80054e8 <cliDump+0x298>
                break;
 80054e6:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	3301      	adds	r3, #1
 80054ec:	461a      	mov	r2, r3
 80054ee:	4925      	ldr	r1, [pc, #148]	; (8005584 <cliDump+0x334>)
 80054f0:	2000      	movs	r0, #0
 80054f2:	f00e f8bb 	bl	801366c <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	e024      	b.n	8005546 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005500:	e01b      	b.n	800553a <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 8005502:	4921      	ldr	r1, [pc, #132]	; (8005588 <cliDump+0x338>)
 8005504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	440b      	add	r3, r1
 8005510:	33c0      	adds	r3, #192	; 0xc0
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	fa42 f303 	asr.w	r3, r2, r3
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	3301      	adds	r3, #1
 800552c:	4917      	ldr	r1, [pc, #92]	; (800558c <cliDump+0x33c>)
 800552e:	2000      	movs	r0, #0
 8005530:	f00e f89c 	bl	801366c <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	3301      	adds	r3, #1
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b0b      	cmp	r3, #11
 800553e:	d9e0      	bls.n	8005502 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	3301      	adds	r3, #1
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	2b07      	cmp	r3, #7
 800554a:	d9d7      	bls.n	80054fc <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 800554c:	2300      	movs	r3, #0
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	e057      	b.n	8005602 <cliDump+0x3b2>
 8005552:	bf00      	nop
 8005554:	080273f0 	.word	0x080273f0
 8005558:	20000848 	.word	0x20000848
 800555c:	08027ee4 	.word	0x08027ee4
 8005560:	08027420 	.word	0x08027420
 8005564:	0802742c 	.word	0x0802742c
 8005568:	08027434 	.word	0x08027434
 800556c:	08027438 	.word	0x08027438
 8005570:	08026fd8 	.word	0x08026fd8
 8005574:	0802743c 	.word	0x0802743c
 8005578:	08027450 	.word	0x08027450
 800557c:	0802745c 	.word	0x0802745c
 8005580:	08027280 	.word	0x08027280
 8005584:	08027460 	.word	0x08027460
 8005588:	20000db4 	.word	0x20000db4
 800558c:	08027474 	.word	0x08027474
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	4863      	ldr	r0, [pc, #396]	; (8005724 <cliDump+0x4d4>)
 8005596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	4403      	add	r3, r0
 80055a2:	33b8      	adds	r3, #184	; 0xb8
 80055a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a8:	461e      	mov	r6, r3
 80055aa:	485e      	ldr	r0, [pc, #376]	; (8005724 <cliDump+0x4d4>)
 80055ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4403      	add	r3, r0
 80055b8:	33bc      	adds	r3, #188	; 0xbc
 80055ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055be:	461c      	mov	r4, r3
 80055c0:	4858      	ldr	r0, [pc, #352]	; (8005724 <cliDump+0x4d4>)
 80055c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4403      	add	r3, r0
 80055ce:	33ba      	adds	r3, #186	; 0xba
 80055d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055d4:	461d      	mov	r5, r3
 80055d6:	4853      	ldr	r0, [pc, #332]	; (8005724 <cliDump+0x4d4>)
 80055d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4403      	add	r3, r0
 80055e4:	33be      	adds	r3, #190	; 0xbe
 80055e6:	f993 3000 	ldrsb.w	r3, [r3]
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	9501      	str	r5, [sp, #4]
 80055ee:	9400      	str	r4, [sp, #0]
 80055f0:	4633      	mov	r3, r6
 80055f2:	460a      	mov	r2, r1
 80055f4:	494c      	ldr	r1, [pc, #304]	; (8005728 <cliDump+0x4d8>)
 80055f6:	2000      	movs	r0, #0
 80055f8:	f00e f838 	bl	801366c <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	3301      	adds	r3, #1
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005604:	2b07      	cmp	r3, #7
 8005606:	d9c3      	bls.n	8005590 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 8005608:	f001 fccc 	bl	8006fa4 <featureMask>
 800560c:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005612:	4a46      	ldr	r2, [pc, #280]	; (800572c <cliDump+0x4dc>)
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 800561e:	4a43      	ldr	r2, [pc, #268]	; (800572c <cliDump+0x4dc>)
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	461a      	mov	r2, r3
 8005628:	4941      	ldr	r1, [pc, #260]	; (8005730 <cliDump+0x4e0>)
 800562a:	2000      	movs	r0, #0
 800562c:	f00e f81e 	bl	801366c <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	3301      	adds	r3, #1
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005636:	e7ec      	b.n	8005612 <cliDump+0x3c2>
            break;
 8005638:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 800563a:	2300      	movs	r3, #0
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800563e:	4a3b      	ldr	r2, [pc, #236]	; (800572c <cliDump+0x4dc>)
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d015      	beq.n	8005676 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 800564a:	2201      	movs	r2, #1
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	461a      	mov	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 800565c:	4a33      	ldr	r2, [pc, #204]	; (800572c <cliDump+0x4dc>)
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	461a      	mov	r2, r3
 8005666:	4933      	ldr	r1, [pc, #204]	; (8005734 <cliDump+0x4e4>)
 8005668:	2000      	movs	r0, #0
 800566a:	f00d ffff 	bl	801366c <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	3301      	adds	r3, #1
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005674:	e7e3      	b.n	800563e <cliDump+0x3ee>
            break;
 8005676:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
 800567c:	e012      	b.n	80056a4 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800567e:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <cliDump+0x4e8>)
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	4413      	add	r3, r2
 8005684:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	4619      	mov	r1, r3
 800568c:	4a2b      	ldr	r2, [pc, #172]	; (800573c <cliDump+0x4ec>)
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	4413      	add	r3, r2
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005698:	443b      	add	r3, r7
 800569a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	3301      	adds	r3, #1
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <cliDump+0x4e8>)
 80056a6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80056aa:	461a      	mov	r2, r3
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d3e5      	bcc.n	800567e <cliDump+0x42e>
    buf[i] = '\0';
 80056b2:	f107 0208 	add.w	r2, r7, #8
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	4413      	add	r3, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	461a      	mov	r2, r3
 80056c4:	491e      	ldr	r1, [pc, #120]	; (8005740 <cliDump+0x4f0>)
 80056c6:	2000      	movs	r0, #0
 80056c8:	f00d ffd0 	bl	801366c <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80056cc:	2300      	movs	r3, #0
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	e01f      	b.n	8005712 <cliDump+0x4c2>
        setval = &valueTable[i];
 80056d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <cliDump+0x4f4>)
 80056de:	4413      	add	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 80056e2:	4918      	ldr	r1, [pc, #96]	; (8005744 <cliDump+0x4f4>)
 80056e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	4914      	ldr	r1, [pc, #80]	; (8005748 <cliDump+0x4f8>)
 80056f6:	2000      	movs	r0, #0
 80056f8:	f00d ffb8 	bl	801366c <pifLog_Printf>
        cliPrintVar(setval, 0);
 80056fc:	2100      	movs	r1, #0
 80056fe:	69b8      	ldr	r0, [r7, #24]
 8005700:	f000 fb58 	bl	8005db4 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 8005704:	4911      	ldr	r1, [pc, #68]	; (800574c <cliDump+0x4fc>)
 8005706:	2000      	movs	r0, #0
 8005708:	f00d ff22 	bl	8013550 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	3301      	adds	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	2b8e      	cmp	r3, #142	; 0x8e
 8005716:	d9dc      	bls.n	80056d2 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	373c      	adds	r7, #60	; 0x3c
 800571e:	46bd      	mov	sp, r7
 8005720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005722:	bf00      	nop
 8005724:	20000db4 	.word	0x20000db4
 8005728:	08027490 	.word	0x08027490
 800572c:	08027f48 	.word	0x08027f48
 8005730:	080274a8 	.word	0x080274a8
 8005734:	080274b8 	.word	0x080274b8
 8005738:	20000848 	.word	0x20000848
 800573c:	08028c40 	.word	0x08028c40
 8005740:	080274c8 	.word	0x080274c8
 8005744:	08028114 	.word	0x08028114
 8005748:	080274d4 	.word	0x080274d4
 800574c:	08026ff8 	.word	0x08026ff8

08005750 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 800575a:	490c      	ldr	r1, [pc, #48]	; (800578c <cliExit+0x3c>)
 800575c:	2000      	movs	r0, #0
 800575e:	f00d fef7 	bl	8013550 <pifLog_Print>
    *cliBuffer = '\0';
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <cliExit+0x40>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <cliExit+0x44>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <cliExit+0x48>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005774:	f005 fc52 	bl	800b01c <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fafa 	bl	8005d74 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	080274e0 	.word	0x080274e0
 8005790:	20000814 	.word	0x20000814
 8005794:	20000844 	.word	0x20000844
 8005798:	20000810 	.word	0x20000810

0800579c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 80057a6:	f001 fbfd 	bl	8006fa4 <featureMask>
 80057aa:	60f8      	str	r0, [r7, #12]

    if (argc == 1) {
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d127      	bne.n	8005802 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 80057b2:	4952      	ldr	r1, [pc, #328]	; (80058fc <cliFeature+0x160>)
 80057b4:	2000      	movs	r0, #0
 80057b6:	f00d fecb 	bl	8013550 <pifLog_Print>
        for (i = 0; ; i++) {
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80057be:	4a50      	ldr	r2, [pc, #320]	; (8005900 <cliFeature+0x164>)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d015      	beq.n	80057f6 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80057ca:	2201      	movs	r2, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80057dc:	4a48      	ldr	r2, [pc, #288]	; (8005900 <cliFeature+0x164>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e4:	461a      	mov	r2, r3
 80057e6:	4947      	ldr	r1, [pc, #284]	; (8005904 <cliFeature+0x168>)
 80057e8:	2000      	movs	r0, #0
 80057ea:	f00d ff3f 	bl	801366c <pifLog_Printf>
        for (i = 0; ; i++) {
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	3301      	adds	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80057f4:	e7e3      	b.n	80057be <cliFeature+0x22>
                break;
 80057f6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80057f8:	4943      	ldr	r1, [pc, #268]	; (8005908 <cliFeature+0x16c>)
 80057fa:	2000      	movs	r0, #0
 80057fc:	f00d fea8 	bl	8013550 <pifLog_Print>
 8005800:	e076      	b.n	80058f0 <cliFeature+0x154>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	3304      	adds	r3, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4940      	ldr	r1, [pc, #256]	; (800590c <cliFeature+0x170>)
 800580a:	4618      	mov	r0, r3
 800580c:	f01d fefa 	bl	8023604 <strcasecmp>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11e      	bne.n	8005854 <cliFeature+0xb8>
        pifLog_Print(LT_NONE, "Available features: ");
 8005816:	493e      	ldr	r1, [pc, #248]	; (8005910 <cliFeature+0x174>)
 8005818:	2000      	movs	r0, #0
 800581a:	f00d fe99 	bl	8013550 <pifLog_Print>
        for (i = 0; ; i++) {
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005822:	4a37      	ldr	r2, [pc, #220]	; (8005900 <cliFeature+0x164>)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <cliFeature+0xac>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800582e:	4a34      	ldr	r2, [pc, #208]	; (8005900 <cliFeature+0x164>)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005836:	461a      	mov	r2, r3
 8005838:	4932      	ldr	r1, [pc, #200]	; (8005904 <cliFeature+0x168>)
 800583a:	2000      	movs	r0, #0
 800583c:	f00d ff16 	bl	801366c <pifLog_Printf>
        for (i = 0; ; i++) {
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005846:	e7ec      	b.n	8005822 <cliFeature+0x86>
                break;
 8005848:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 800584a:	492f      	ldr	r1, [pc, #188]	; (8005908 <cliFeature+0x16c>)
 800584c:	2000      	movs	r0, #0
 800584e:	f00d fe7f 	bl	8013550 <pifLog_Print>
 8005852:	e04d      	b.n	80058f0 <cliFeature+0x154>
    } else {
        bool remove = false;
 8005854:	2300      	movs	r3, #0
 8005856:	74fb      	strb	r3, [r7, #19]
        if (argv[1][0] == '-') {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	3304      	adds	r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b2d      	cmp	r3, #45	; 0x2d
 8005862:	d101      	bne.n	8005868 <cliFeature+0xcc>
            // remove feature
            remove = true;
 8005864:	2301      	movs	r3, #1
 8005866:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 800586c:	4a24      	ldr	r2, [pc, #144]	; (8005900 <cliFeature+0x164>)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <cliFeature+0xe6>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005878:	4926      	ldr	r1, [pc, #152]	; (8005914 <cliFeature+0x178>)
 800587a:	2000      	movs	r0, #0
 800587c:	f00d fe68 	bl	8013550 <pifLog_Print>
                break;
 8005880:	e036      	b.n	80058f0 <cliFeature+0x154>
            }
            if (strcasecmp(argv[1] + 1, featureNames[i]) == 0) {
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3304      	adds	r3, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	491d      	ldr	r1, [pc, #116]	; (8005900 <cliFeature+0x164>)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f01d feb5 	bl	8023604 <strcasecmp>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d123      	bne.n	80058e8 <cliFeature+0x14c>
                if (remove) {
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <cliFeature+0x122>
                    featureClear(1 << i);
 80058a6:	2201      	movs	r2, #1
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fb58 	bl	8006f64 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 80058b4:	4918      	ldr	r1, [pc, #96]	; (8005918 <cliFeature+0x17c>)
 80058b6:	2000      	movs	r0, #0
 80058b8:	f00d fe4a 	bl	8013550 <pifLog_Print>
 80058bc:	e00a      	b.n	80058d4 <cliFeature+0x138>
                } else {
                    featureSet(1 << i);
 80058be:	2201      	movs	r2, #1
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fb3a 	bl	8006f40 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80058cc:	4913      	ldr	r1, [pc, #76]	; (800591c <cliFeature+0x180>)
 80058ce:	2000      	movs	r0, #0
 80058d0:	f00d fe3e 	bl	8013550 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80058d4:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <cliFeature+0x164>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058dc:	461a      	mov	r2, r3
 80058de:	4910      	ldr	r1, [pc, #64]	; (8005920 <cliFeature+0x184>)
 80058e0:	2000      	movs	r0, #0
 80058e2:	f00d fec3 	bl	801366c <pifLog_Printf>
                break;
 80058e6:	e003      	b.n	80058f0 <cliFeature+0x154>
        for (i = 0; ; i++) {
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80058ee:	e7bd      	b.n	800586c <cliFeature+0xd0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	080274f8 	.word	0x080274f8
 8005900:	08027f48 	.word	0x08027f48
 8005904:	0802750c 	.word	0x0802750c
 8005908:	08026ff8 	.word	0x08026ff8
 800590c:	08027510 	.word	0x08027510
 8005910:	08027518 	.word	0x08027518
 8005914:	08027530 	.word	0x08027530
 8005918:	0802754c 	.word	0x0802754c
 800591c:	08027558 	.word	0x08027558
 8005920:	08026fd8 	.word	0x08026fd8

08005924 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 800592e:	f003 fa15 	bl	8008d5c <gpsSetPassthrough>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <cliGpsPassthrough+0x1a>
 8005938:	2b01      	cmp	r3, #1
 800593a:	d005      	beq.n	8005948 <cliGpsPassthrough+0x24>
 800593c:	e009      	b.n	8005952 <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 800593e:	490a      	ldr	r1, [pc, #40]	; (8005968 <cliGpsPassthrough+0x44>)
 8005940:	2000      	movs	r0, #0
 8005942:	f00d fe05 	bl	8013550 <pifLog_Print>
        break;
 8005946:	e009      	b.n	800595c <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005948:	4908      	ldr	r1, [pc, #32]	; (800596c <cliGpsPassthrough+0x48>)
 800594a:	2000      	movs	r0, #0
 800594c:	f00d fe00 	bl	8013550 <pifLog_Print>
        break;
 8005950:	e004      	b.n	800595c <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 8005952:	4907      	ldr	r1, [pc, #28]	; (8005970 <cliGpsPassthrough+0x4c>)
 8005954:	2000      	movs	r0, #0
 8005956:	f00d fdfb 	bl	8013550 <pifLog_Print>
        break;
 800595a:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	08027564 	.word	0x08027564
 800596c:	08027584 	.word	0x08027584
 8005970:	080275a4 	.word	0x080275a4

08005974 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 2) return PIF_LOG_CMD_TOO_FEW_ARGS;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	dc02      	bgt.n	800598a <cliMap+0x16>
 8005984:	f06f 0302 	mvn.w	r3, #2
 8005988:	e09d      	b.n	8005ac6 <cliMap+0x152>

    len = strlen(argv[1]);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3304      	adds	r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fa fc21 	bl	80001d8 <strlen>
 8005996:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005998:	4b4d      	ldr	r3, [pc, #308]	; (8005ad0 <cliMap+0x15c>)
 800599a:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800599e:	461a      	mov	r2, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d160      	bne.n	8005a68 <cliMap+0xf4>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e01d      	b.n	80059e8 <cliMap+0x74>
            argv[1][i] = toupper((unsigned char)argv[1][i]);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	3304      	adds	r3, #4
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	75fb      	strb	r3, [r7, #23]
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a45      	ldr	r2, [pc, #276]	; (8005ad4 <cliMap+0x160>)
 80059c0:	4413      	add	r3, r2
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d102      	bne.n	80059d2 <cliMap+0x5e>
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	3b20      	subs	r3, #32
 80059d0:	e000      	b.n	80059d4 <cliMap+0x60>
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	3204      	adds	r2, #4
 80059d8:	6811      	ldr	r1, [r2, #0]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <cliMap+0x15c>)
 80059ea:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80059ee:	461a      	mov	r2, r3
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d3da      	bcc.n	80059ac <cliMap+0x38>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	e028      	b.n	8005a4e <cliMap+0xda>
            if (strchr(rcChannelLetters, argv[1][i]) && !strchr(argv[1] + i + 1, argv[1][i]))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	3304      	adds	r3, #4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4833      	ldr	r0, [pc, #204]	; (8005ad8 <cliMap+0x164>)
 8005a0c:	f01d fe23 	bl	8023656 <strchr>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <cliMap+0xce>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	18d0      	adds	r0, r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	3304      	adds	r3, #4
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f01d fe11 	bl	8023656 <strchr>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <cliMap+0xce>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e005      	b.n	8005a4e <cliMap+0xda>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005a42:	4926      	ldr	r1, [pc, #152]	; (8005adc <cliMap+0x168>)
 8005a44:	2000      	movs	r0, #0
 8005a46:	f00d fd83 	bl	8013550 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e03b      	b.n	8005ac6 <cliMap+0x152>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <cliMap+0x15c>)
 8005a50:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a54:	461a      	mov	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d3cf      	bcc.n	80059fc <cliMap+0x88>
        }
        parseRcChannels(argv[1]);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fcca 	bl	80063fc <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005a68:	491d      	ldr	r1, [pc, #116]	; (8005ae0 <cliMap+0x16c>)
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f00d fd70 	bl	8013550 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e012      	b.n	8005a9c <cliMap+0x128>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005a76:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <cliMap+0x15c>)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <cliMap+0x164>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	f101 0320 	add.w	r3, r1, #32
 8005a90:	443b      	add	r3, r7
 8005a92:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <cliMap+0x15c>)
 8005a9e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d3e5      	bcc.n	8005a76 <cliMap+0x102>
    out[i] = '\0';
 8005aaa:	f107 020c 	add.w	r2, r7, #12
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	461a      	mov	r2, r3
 8005abc:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <cliMap+0x170>)
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f00d fdd4 	bl	801366c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000848 	.word	0x20000848
 8005ad4:	080295ac 	.word	0x080295ac
 8005ad8:	08028c40 	.word	0x08028c40
 8005adc:	080275cc 	.word	0x080275cc
 8005ae0:	080275ec 	.word	0x080275ec
 8005ae4:	08026fd8 	.word	0x08026fd8

08005ae8 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d10c      	bne.n	8005b12 <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005af8:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <cliMixer+0x130>)
 8005afa:	795b      	ldrb	r3, [r3, #5]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a47      	ldr	r2, [pc, #284]	; (8005c1c <cliMixer+0x134>)
 8005b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b04:	461a      	mov	r2, r3
 8005b06:	4946      	ldr	r1, [pc, #280]	; (8005c20 <cliMixer+0x138>)
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f00d fdaf 	bl	801366c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e07d      	b.n	8005c0e <cliMixer+0x126>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4942      	ldr	r1, [pc, #264]	; (8005c24 <cliMixer+0x13c>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f01d fd72 	bl	8023604 <strcasecmp>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11f      	bne.n	8005b66 <cliMixer+0x7e>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005b26:	4940      	ldr	r1, [pc, #256]	; (8005c28 <cliMixer+0x140>)
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f00d fd11 	bl	8013550 <pifLog_Print>
        for (i = 0; ; i++) {
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005b32:	4a3a      	ldr	r2, [pc, #232]	; (8005c1c <cliMixer+0x134>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <cliMixer+0x70>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005b3e:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <cliMixer+0x134>)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	461a      	mov	r2, r3
 8005b48:	4938      	ldr	r1, [pc, #224]	; (8005c2c <cliMixer+0x144>)
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f00d fd8e 	bl	801366c <pifLog_Printf>
        for (i = 0; ; i++) {
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005b56:	e7ec      	b.n	8005b32 <cliMixer+0x4a>
                break;
 8005b58:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005b5a:	4935      	ldr	r1, [pc, #212]	; (8005c30 <cliMixer+0x148>)
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f00d fcf7 	bl	8013550 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e053      	b.n	8005c0e <cliMixer+0x126>
    }

    for (i = 0; ; i++) {
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005b6a:	4a2c      	ldr	r2, [pc, #176]	; (8005c1c <cliMixer+0x134>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <cliMixer+0x9a>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005b76:	492f      	ldr	r1, [pc, #188]	; (8005c34 <cliMixer+0x14c>)
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f00d fce9 	bl	8013550 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e045      	b.n	8005c0e <cliMixer+0x126>
        }
        if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4924      	ldr	r1, [pc, #144]	; (8005c1c <cliMixer+0x134>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f01d fd36 	bl	8023604 <strcasecmp>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d131      	bne.n	8005c02 <cliMixer+0x11a>
            mcfg.mixerConfiguration = i + 1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <cliMixer+0x130>)
 8005ba8:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005baa:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <cliMixer+0x134>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4920      	ldr	r1, [pc, #128]	; (8005c38 <cliMixer+0x150>)
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f00d fd58 	bl	801366c <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005bbc:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <cliMixer+0x130>)
 8005bbe:	795b      	ldrb	r3, [r3, #5]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d003      	beq.n	8005bcc <cliMixer+0xe4>
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <cliMixer+0x130>)
 8005bc6:	795b      	ldrb	r3, [r3, #5]
 8005bc8:	2b0e      	cmp	r3, #14
 8005bca:	d11e      	bne.n	8005c0a <cliMixer+0x122>
                cfg.dynThrPID = 90;
 8005bcc:	4b1b      	ldr	r3, [pc, #108]	; (8005c3c <cliMixer+0x154>)
 8005bce:	225a      	movs	r2, #90	; 0x5a
 8005bd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005bd4:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <cliMixer+0x154>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005bdc:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <cliMixer+0x154>)
 8005bde:	221e      	movs	r2, #30
 8005be0:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005be2:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <cliMixer+0x154>)
 8005be4:	2214      	movs	r2, #20
 8005be6:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <cliMixer+0x154>)
 8005bea:	222d      	movs	r2, #45	; 0x2d
 8005bec:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <cliMixer+0x154>)
 8005bf0:	221e      	movs	r2, #30
 8005bf2:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <cliMixer+0x154>)
 8005bf6:	2214      	movs	r2, #20
 8005bf8:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <cliMixer+0x154>)
 8005bfc:	222d      	movs	r2, #45	; 0x2d
 8005bfe:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005c00:	e003      	b.n	8005c0a <cliMixer+0x122>
    for (i = 0; ; i++) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005c08:	e7af      	b.n	8005b6a <cliMixer+0x82>
            break;
 8005c0a:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000848 	.word	0x20000848
 8005c1c:	08027ee4 	.word	0x08027ee4
 8005c20:	08027604 	.word	0x08027604
 8005c24:	08027510 	.word	0x08027510
 8005c28:	08027618 	.word	0x08027618
 8005c2c:	0802750c 	.word	0x0802750c
 8005c30:	08026ff8 	.word	0x08026ff8
 8005c34:	0802700c 	.word	0x0802700c
 8005c38:	0802762c 	.word	0x0802762c
 8005c3c:	20000db4 	.word	0x20000db4

08005c40 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005c58:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <cliMotor+0xb4>)
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	f00d fc78 	bl	8013550 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e043      	b.n	8005cec <cliMotor+0xac>
    }

    if (argc < 3) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	dc0a      	bgt.n	8005c80 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005c6a:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <cliMotor+0xb8>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4921      	ldr	r1, [pc, #132]	; (8005cfc <cliMotor+0xbc>)
 8005c76:	2000      	movs	r0, #0
 8005c78:	f00d fcf8 	bl	801366c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e035      	b.n	8005cec <cliMotor+0xac>
    }

    motor_index = atoi(argv[1]);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	3304      	adds	r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f01d fb5a 	bl	8023340 <atoi>
 8005c8c:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[2]);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f01d fb53 	bl	8023340 <atoi>
 8005c9a:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	db02      	blt.n	8005ca8 <cliMotor+0x68>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b0b      	cmp	r3, #11
 8005ca6:	dd06      	ble.n	8005cb6 <cliMotor+0x76>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005ca8:	220c      	movs	r2, #12
 8005caa:	4915      	ldr	r1, [pc, #84]	; (8005d00 <cliMotor+0xc0>)
 8005cac:	2000      	movs	r0, #0
 8005cae:	f00d fcdd 	bl	801366c <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e01a      	b.n	8005cec <cliMotor+0xac>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cbc:	db03      	blt.n	8005cc6 <cliMotor+0x86>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005cc4:	dd05      	ble.n	8005cd2 <cliMotor+0x92>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005cc6:	490f      	ldr	r1, [pc, #60]	; (8005d04 <cliMotor+0xc4>)
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f00d fc41 	bl	8013550 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e00c      	b.n	8005cec <cliMotor+0xac>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	490c      	ldr	r1, [pc, #48]	; (8005d08 <cliMotor+0xc8>)
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f00d fcc7 	bl	801366c <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	b219      	sxth	r1, r3
 8005ce2:	4a05      	ldr	r2, [pc, #20]	; (8005cf8 <cliMotor+0xb8>)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	08027640 	.word	0x08027640
 8005cf8:	200015a0 	.word	0x200015a0
 8005cfc:	0802767c 	.word	0x0802767c
 8005d00:	08027694 	.word	0x08027694
 8005d04:	080276bc 	.word	0x080276bc
 8005d08:	080276e0 	.word	0x080276e0

08005d0c <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d108      	bne.n	8005d2e <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005d1c:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <cliProfile+0x60>)
 8005d1e:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005d22:	461a      	mov	r2, r3
 8005d24:	4912      	ldr	r1, [pc, #72]	; (8005d70 <cliProfile+0x64>)
 8005d26:	2000      	movs	r0, #0
 8005d28:	f00d fca0 	bl	801366c <pifLog_Printf>
 8005d2c:	e019      	b.n	8005d62 <cliProfile+0x56>
    } else {
        i = atoi(argv[1]);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f01d fb03 	bl	8023340 <atoi>
 8005d3a:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db0f      	blt.n	8005d62 <cliProfile+0x56>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	dc0c      	bgt.n	8005d62 <cliProfile+0x56>
            mcfg.current_profile = i;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <cliProfile+0x60>)
 8005d4e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005d52:	2100      	movs	r1, #0
 8005d54:	2000      	movs	r0, #0
 8005d56:	f000 fcfb 	bl	8006750 <writeEEPROM>
            cliProfile(1, NULL);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7ff ffd5 	bl	8005d0c <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20000848 	.word	0x20000848
 8005d70:	080276fc 	.word	0x080276fc

08005d74 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005d7e:	490b      	ldr	r1, [pc, #44]	; (8005dac <cliSave+0x38>)
 8005d80:	2000      	movs	r0, #0
 8005d82:	f00d fbe5 	bl	8013550 <pifLog_Print>
    writeEEPROM(0, true);
 8005d86:	2101      	movs	r1, #1
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f000 fce1 	bl	8006750 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005d8e:	4908      	ldr	r1, [pc, #32]	; (8005db0 <cliSave+0x3c>)
 8005d90:	2000      	movs	r0, #0
 8005d92:	f00d fbdd 	bl	8013550 <pifLog_Print>
    pif_Delay1ms(10);
 8005d96:	200a      	movs	r0, #10
 8005d98:	f00b fb12 	bl	80113c0 <pif_Delay1ms>
    systemReset(false);
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7fc f94f 	bl	8002040 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	08027714 	.word	0x08027714
 8005db0:	08027720 	.word	0x08027720

08005db4 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	791b      	ldrb	r3, [r3, #4]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d864      	bhi.n	8005e94 <cliPrintVar+0xe0>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <cliPrintVar+0x1c>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005de9 	.word	0x08005de9
 8005dd4:	08005df3 	.word	0x08005df3
 8005dd8:	08005dff 	.word	0x08005dff
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005e1f 	.word	0x08005e1f
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]
            break;
 8005df0:	e050      	b.n	8005e94 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f993 3000 	ldrsb.w	r3, [r3]
 8005dfa:	617b      	str	r3, [r7, #20]
            break;
 8005dfc:	e04a      	b.n	8005e94 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	617b      	str	r3, [r7, #20]
            break;
 8005e06:	e045      	b.n	8005e94 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e10:	617b      	str	r3, [r7, #20]
            break;
 8005e12:	e03f      	b.n	8005e94 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	617b      	str	r3, [r7, #20]
            break;
 8005e1c:	e03a      	b.n	8005e94 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	edd3 7a00 	vldr	s15, [r3]
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e30:	f7fe fac4 	bl	80043bc <ftoa>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4921      	ldr	r1, [pc, #132]	; (8005ec0 <cliPrintVar+0x10c>)
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f00d fc16 	bl	801366c <pifLog_Printf>
            if (full) {
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d037      	beq.n	8005eb6 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	4618      	mov	r0, r3
 8005e58:	eeb0 0a67 	vmov.f32	s0, s15
 8005e5c:	f7fe faae 	bl	80043bc <ftoa>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	4917      	ldr	r1, [pc, #92]	; (8005ec4 <cliPrintVar+0x110>)
 8005e66:	2000      	movs	r0, #0
 8005e68:	f00d fc00 	bl	801366c <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e78:	f107 030c 	add.w	r3, r7, #12
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e82:	f7fe fa9b 	bl	80043bc <ftoa>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	490e      	ldr	r1, [pc, #56]	; (8005ec4 <cliPrintVar+0x110>)
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f00d fbed 	bl	801366c <pifLog_Printf>
 8005e92:	e011      	b.n	8005eb8 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	490c      	ldr	r1, [pc, #48]	; (8005ec8 <cliPrintVar+0x114>)
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f00d fbe7 	bl	801366c <pifLog_Printf>
    if (full)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <cliPrintVar+0x118>)
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f00d fbdc 	bl	801366c <pifLog_Printf>
 8005eb4:	e000      	b.n	8005eb8 <cliPrintVar+0x104>
            return; // return from case for float only
 8005eb6:	bf00      	nop
}
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08027438 	.word	0x08027438
 8005ec4:	08027730 	.word	0x08027730
 8005ec8:	080272e4 	.word	0x080272e4
 8005ecc:	08027734 	.word	0x08027734

08005ed0 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	791b      	ldrb	r3, [r3, #4]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d824      	bhi.n	8005f2c <cliSetVar+0x5c>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <cliSetVar+0x18>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f01 	.word	0x08005f01
 8005eec:	08005f01 	.word	0x08005f01
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	08005f0d 	.word	0x08005f0d
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f23 	.word	0x08005f23
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
            break;
 8005f0a:	e00f      	b.n	8005f2c <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	b212      	sxth	r2, r2
 8005f14:	801a      	strh	r2, [r3, #0]
            break;
 8005f16:	e009      	b.n	8005f2c <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	601a      	str	r2, [r3, #0]
            break;
 8005f20:	e004      	b.n	8005f2c <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	601a      	str	r2, [r3, #0]
            break;
 8005f2a:	bf00      	nop
    }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005f38:	b5b0      	push	{r4, r5, r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]

    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d008      	beq.n	8005f68 <cliSet+0x30>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d137      	bne.n	8005fcc <cliSet+0x94>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b2a      	cmp	r3, #42	; 0x2a
 8005f66:	d131      	bne.n	8005fcc <cliSet+0x94>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8005f68:	4988      	ldr	r1, [pc, #544]	; (800618c <cliSet+0x254>)
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f00d faf0 	bl	8013550 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e026      	b.n	8005fc4 <cliSet+0x8c>
            val = &valueTable[i];
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4a83      	ldr	r2, [pc, #524]	; (8006190 <cliSet+0x258>)
 8005f82:	4413      	add	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005f86:	4982      	ldr	r1, [pc, #520]	; (8006190 <cliSet+0x258>)
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	497e      	ldr	r1, [pc, #504]	; (8006194 <cliSet+0x25c>)
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f00d fb66 	bl	801366c <pifLog_Printf>
            cliPrintVar(val, strlen(argv[1])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa f916 	bl	80001d8 <strlen>
 8005fac:	4603      	mov	r3, r0
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff feff 	bl	8005db4 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8005fb6:	4978      	ldr	r1, [pc, #480]	; (8006198 <cliSet+0x260>)
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f00d fac9 	bl	8013550 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b8e      	cmp	r3, #142	; 0x8e
 8005fc8:	d9d5      	bls.n	8005f76 <cliSet+0x3e>
    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8005fca:	e0da      	b.n	8006182 <cliSet+0x24a>
        }
    } else if ((eqptr = strstr(argv[1], "=")) != NULL) {
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	213d      	movs	r1, #61	; 0x3d
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f01d fb3e 	bl	8023656 <strchr>
 8005fda:	61b8      	str	r0, [r7, #24]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8097 	beq.w	8006112 <cliSet+0x1da>
        // has equal, set var
        eqptr++;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8005fea:	69b8      	ldr	r0, [r7, #24]
 8005fec:	f01d f9a8 	bl	8023340 <atoi>
 8005ff0:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f7fe f8ee 	bl	80041d4 <_atof>
 8005ff8:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e07d      	b.n	80060fe <cliSet+0x1c6>
            val = &valueTable[i];
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4a60      	ldr	r2, [pc, #384]	; (8006190 <cliSet+0x258>)
 800600e:	4413      	add	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[1], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	681c      	ldr	r4, [r3, #0]
 8006018:	495d      	ldr	r1, [pc, #372]	; (8006190 <cliSet+0x258>)
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	681d      	ldr	r5, [r3, #0]
 8006028:	4959      	ldr	r1, [pc, #356]	; (8006190 <cliSet+0x258>)
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa f8cd 	bl	80001d8 <strlen>
 800603e:	4603      	mov	r3, r0
 8006040:	461a      	mov	r2, r3
 8006042:	4629      	mov	r1, r5
 8006044:	4620      	mov	r0, r4
 8006046:	f01d fb1b 	bl	8023680 <strncasecmp>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d153      	bne.n	80060f8 <cliSet+0x1c0>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8006050:	494f      	ldr	r1, [pc, #316]	; (8006190 <cliSet+0x258>)
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	330c      	adds	r3, #12
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606a:	ed97 7a04 	vldr	s14, [r7, #16]
 800606e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006076:	db39      	blt.n	80060ec <cliSet+0x1b4>
 8006078:	4945      	ldr	r1, [pc, #276]	; (8006190 <cliSet+0x258>)
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3310      	adds	r3, #16
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	ed97 7a04 	vldr	s14, [r7, #16]
 8006096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	d825      	bhi.n	80060ec <cliSet+0x1b4>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 80060a0:	493b      	ldr	r1, [pc, #236]	; (8006190 <cliSet+0x258>)
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	3304      	adds	r3, #4
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d102      	bne.n	80060bc <cliSet+0x184>
                        tmp.float_value = valuef;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	e001      	b.n	80060c0 <cliSet+0x188>
                    else
                        tmp.int_value = value;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff ff04 	bl	8005ed0 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 80060c8:	4931      	ldr	r1, [pc, #196]	; (8006190 <cliSet+0x258>)
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4930      	ldr	r1, [pc, #192]	; (800619c <cliSet+0x264>)
 80060dc:	2000      	movs	r0, #0
 80060de:	f00d fac5 	bl	801366c <pifLog_Printf>
                    cliPrintVar(val, 0);
 80060e2:	2100      	movs	r1, #0
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fe65 	bl	8005db4 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80060ea:	e003      	b.n	80060f4 <cliSet+0x1bc>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 80060ec:	492c      	ldr	r1, [pc, #176]	; (80061a0 <cliSet+0x268>)
 80060ee:	2000      	movs	r0, #0
 80060f0:	f00d fa2e 	bl	8013550 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e045      	b.n	8006184 <cliSet+0x24c>
        for (i = 0; i < VALUE_COUNT; i++) {
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	3301      	adds	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b8e      	cmp	r3, #142	; 0x8e
 8006102:	f67f af7e 	bls.w	8006002 <cliSet+0xca>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 8006106:	4927      	ldr	r1, [pc, #156]	; (80061a4 <cliSet+0x26c>)
 8006108:	2000      	movs	r0, #0
 800610a:	f00d fa21 	bl	8013550 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 800610e:	2300      	movs	r3, #0
 8006110:	e038      	b.n	8006184 <cliSet+0x24c>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e031      	b.n	800617c <cliSet+0x244>
            if (strstr(valueTable[i].name, argv[1])) {
 8006118:	491d      	ldr	r1, [pc, #116]	; (8006190 <cliSet+0x258>)
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	3304      	adds	r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f01d fada 	bl	80236ea <strstr>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01c      	beq.n	8006176 <cliSet+0x23e>
                val = &valueTable[i];
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <cliSet+0x258>)
 8006148:	4413      	add	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 800614c:	4910      	ldr	r1, [pc, #64]	; (8006190 <cliSet+0x258>)
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	490d      	ldr	r1, [pc, #52]	; (8006194 <cliSet+0x25c>)
 8006160:	2000      	movs	r0, #0
 8006162:	f00d fa83 	bl	801366c <pifLog_Printf>
                cliPrintVar(val, 0);
 8006166:	2100      	movs	r1, #0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fe23 	bl	8005db4 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 800616e:	490a      	ldr	r1, [pc, #40]	; (8006198 <cliSet+0x260>)
 8006170:	2000      	movs	r0, #0
 8006172:	f00d f9ed 	bl	8013550 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b8e      	cmp	r3, #142	; 0x8e
 8006180:	d9ca      	bls.n	8006118 <cliSet+0x1e0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bdb0      	pop	{r4, r5, r7, pc}
 800618c:	0802773c 	.word	0x0802773c
 8006190:	08028114 	.word	0x08028114
 8006194:	08027754 	.word	0x08027754
 8006198:	08026ff8 	.word	0x08026ff8
 800619c:	0802775c 	.word	0x0802775c
 80061a0:	08027768 	.word	0x08027768
 80061a4:	08027790 	.word	0x08027790

080061a8 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 80061b2:	4b4d      	ldr	r3, [pc, #308]	; (80062e8 <cliStatus+0x140>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4d      	ldr	r2, [pc, #308]	; (80062ec <cliStatus+0x144>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	099a      	lsrs	r2, r3, #6
 80061be:	4b4c      	ldr	r3, [pc, #304]	; (80062f0 <cliStatus+0x148>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <cliStatus+0x14c>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	460b      	mov	r3, r1
 80061cc:	494a      	ldr	r1, [pc, #296]	; (80062f8 <cliStatus+0x150>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	f00d fa4c 	bl	801366c <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 80061d4:	f000 fe92 	bl	8006efc <sensorsMask>
 80061d8:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 80061da:	4b48      	ldr	r3, [pc, #288]	; (80062fc <cliStatus+0x154>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a48      	ldr	r2, [pc, #288]	; (8006300 <cliStatus+0x158>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	0c9b      	lsrs	r3, r3, #18
 80061e6:	4a47      	ldr	r2, [pc, #284]	; (8006304 <cliStatus+0x15c>)
 80061e8:	4947      	ldr	r1, [pc, #284]	; (8006308 <cliStatus+0x160>)
 80061ea:	2000      	movs	r0, #0
 80061ec:	f00d fa3e 	bl	801366c <pifLog_Printf>
    for (i = 0; ; i++) {
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	4a45      	ldr	r2, [pc, #276]	; (800630c <cliStatus+0x164>)
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2201      	movs	r2, #1
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	4a3d      	ldr	r2, [pc, #244]	; (800630c <cliStatus+0x164>)
 8006216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621a:	461a      	mov	r2, r3
 800621c:	493c      	ldr	r1, [pc, #240]	; (8006310 <cliStatus+0x168>)
 800621e:	2000      	movs	r0, #0
 8006220:	f00d fa24 	bl	801366c <pifLog_Printf>
    for (i = 0; ; i++) {
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	3301      	adds	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 800622a:	e7e3      	b.n	80061f4 <cliStatus+0x4c>
            break;
 800622c:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 800622e:	4939      	ldr	r1, [pc, #228]	; (8006314 <cliStatus+0x16c>)
 8006230:	2000      	movs	r0, #0
 8006232:	f00d f98d 	bl	8013550 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 8006236:	2001      	movs	r0, #1
 8006238:	f000 fe24 	bl	8006e84 <sensors>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <cliStatus+0x170>)
 8006244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006246:	461a      	mov	r2, r3
 8006248:	4934      	ldr	r1, [pc, #208]	; (800631c <cliStatus+0x174>)
 800624a:	2000      	movs	r0, #0
 800624c:	f00d fa0e 	bl	801366c <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 8006250:	2002      	movs	r0, #2
 8006252:	f000 fe17 	bl	8006e84 <sensors>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 800625c:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <cliStatus+0x170>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	461a      	mov	r2, r3
 8006264:	492e      	ldr	r1, [pc, #184]	; (8006320 <cliStatus+0x178>)
 8006266:	2000      	movs	r0, #0
 8006268:	f00d fa00 	bl	801366c <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 800626c:	2008      	movs	r0, #8
 800626e:	f000 fe09 	bl	8006e84 <sensors>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006278:	4b27      	ldr	r3, [pc, #156]	; (8006318 <cliStatus+0x170>)
 800627a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800627e:	461a      	mov	r2, r3
 8006280:	4928      	ldr	r1, [pc, #160]	; (8006324 <cliStatus+0x17c>)
 8006282:	2000      	movs	r0, #0
 8006284:	f00d f9f2 	bl	801366c <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006288:	2004      	movs	r0, #4
 800628a:	f000 fdfb 	bl	8006e84 <sensors>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <cliStatus+0x170>)
 8006296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800629a:	461a      	mov	r2, r3
 800629c:	4922      	ldr	r1, [pc, #136]	; (8006328 <cliStatus+0x180>)
 800629e:	2000      	movs	r0, #0
 80062a0:	f00d f9e4 	bl	801366c <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 80062a4:	491b      	ldr	r1, [pc, #108]	; (8006314 <cliStatus+0x16c>)
 80062a6:	2000      	movs	r0, #0
 80062a8:	f00d f952 	bl	8013550 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 80062ac:	4b1f      	ldr	r3, [pc, #124]	; (800632c <cliStatus+0x184>)
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <cliStatus+0x188>)
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	f240 536c 	movw	r3, #1388	; 0x56c
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	460b      	mov	r3, r1
 80062c0:	491c      	ldr	r1, [pc, #112]	; (8006334 <cliStatus+0x18c>)
 80062c2:	2000      	movs	r0, #0
 80062c4:	f00d f9d2 	bl	801366c <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 80062c8:	481b      	ldr	r0, [pc, #108]	; (8006338 <cliStatus+0x190>)
 80062ca:	f00e feca 	bl	8015062 <pifTimerManager_Count>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	491a      	ldr	r1, [pc, #104]	; (800633c <cliStatus+0x194>)
 80062d4:	2000      	movs	r0, #0
 80062d6:	f00d f9c9 	bl	801366c <pifLog_Printf>

    cliStatusCallback();
 80062da:	f000 f871 	bl	80063c0 <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20001dd0 	.word	0x20001dd0
 80062ec:	10624dd3 	.word	0x10624dd3
 80062f0:	20001744 	.word	0x20001744
 80062f4:	20000054 	.word	0x20000054
 80062f8:	080277b0 	.word	0x080277b0
 80062fc:	20001710 	.word	0x20001710
 8006300:	431bde83 	.word	0x431bde83
 8006304:	08027e68 	.word	0x08027e68
 8006308:	080277f0 	.word	0x080277f0
 800630c:	08027f94 	.word	0x08027f94
 8006310:	0802750c 	.word	0x0802750c
 8006314:	08026ff8 	.word	0x08026ff8
 8006318:	20000060 	.word	0x20000060
 800631c:	0802781c 	.word	0x0802781c
 8006320:	0802782c 	.word	0x0802782c
 8006324:	08027838 	.word	0x08027838
 8006328:	08027848 	.word	0x08027848
 800632c:	20001740 	.word	0x20001740
 8006330:	20001524 	.word	0x20001524
 8006334:	08027858 	.word	0x08027858
 8006338:	20001554 	.word	0x20001554
 800633c:	0802788c 	.word	0x0802788c

08006340 <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 800634a:	4904      	ldr	r1, [pc, #16]	; (800635c <cliVersion+0x1c>)
 800634c:	2000      	movs	r0, #0
 800634e:	f00d f98d 	bl	801366c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	080278a4 	.word	0x080278a4

08006360 <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <cliInit+0x50>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d119      	bne.n	80063a4 <cliInit+0x44>
        cliMode = 1;
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <cliInit+0x50>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
#else
        pifLog_Init();
 8006376:	f00d f88d 	bl	8013494 <pifLog_Init>
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f00d fa04 	bl	8013788 <pifLog_AttachComm>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <cliInit+0x2a>
 8006386:	2300      	movs	r3, #0
 8006388:	e00d      	b.n	80063a6 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <cliInit+0x54>)
 800638c:	480a      	ldr	r0, [pc, #40]	; (80063b8 <cliInit+0x58>)
 800638e:	f00d f8ab 	bl	80134e8 <pifLog_UseCommand>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <cliInit+0x3c>
 8006398:	2300      	movs	r3, #0
 800639a:	e004      	b.n	80063a6 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 800639c:	4907      	ldr	r1, [pc, #28]	; (80063bc <cliInit+0x5c>)
 800639e:	2000      	movs	r0, #0
 80063a0:	f00d f8d6 	bl	8013550 <pifLog_Print>
    }
    return TRUE;
 80063a4:	2301      	movs	r3, #1
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000810 	.word	0x20000810
 80063b4:	080278d4 	.word	0x080278d4
 80063b8:	08027fb4 	.word	0x08027fb4
 80063bc:	080278dc 	.word	0x080278dc

080063c0 <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0

}
 80063c4:	bf00      	nop
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <initEEPROM+0x18>
		p_storage = p_sto;
 80063de:	4a06      	ldr	r2, [pc, #24]	; (80063f8 <initEEPROM+0x28>)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6013      	str	r3, [r2, #0]
		return TRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <initEEPROM+0x1a>
	}
	return FALSE;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000ef0 	.word	0x20000ef0

080063fc <parseRcChannels>:

void parseRcChannels(const char *input)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e018      	b.n	800643c <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	480f      	ldr	r0, [pc, #60]	; (8006450 <parseRcChannels+0x54>)
 8006412:	f01d f920 	bl	8023656 <strchr>
 8006416:	60b8      	str	r0, [r7, #8]
        if (s)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad1      	subs	r1, r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <parseRcChannels+0x54>)
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	b2c9      	uxtb	r1, r1
 800642c:	4a09      	ldr	r2, [pc, #36]	; (8006454 <parseRcChannels+0x58>)
 800642e:	4413      	add	r3, r2
 8006430:	460a      	mov	r2, r1
 8006432:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e2      	bne.n	800640a <parseRcChannels+0xe>
    }
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	08028c40 	.word	0x08028c40
 8006454:	20000848 	.word	0x20000848

08006458 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 8006466:	f240 506c 	movw	r0, #1388	; 0x56c
 800646a:	f01c ff9f 	bl	80233ac <malloc>
 800646e:	4603      	mov	r3, r0
 8006470:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <validEEPROM+0x24>
 8006478:	2300      	movs	r3, #0
 800647a:	e04e      	b.n	800651a <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 800647c:	4b29      	ldr	r3, [pc, #164]	; (8006524 <validEEPROM+0xcc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	214c      	movs	r1, #76	; 0x4c
 8006482:	4618      	mov	r0, r3
 8006484:	f014 ffc9 	bl	801b41a <pifStorage_Open>
 8006488:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d037      	beq.n	8006500 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006490:	4b24      	ldr	r3, [pc, #144]	; (8006524 <validEEPROM+0xcc>)
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	f240 536c 	movw	r3, #1388	; 0x56c
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	f014 ffce 	bl	801b43c <pifStorage_Read>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02e      	beq.n	8006504 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	224c      	movs	r2, #76	; 0x4c
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d12b      	bne.n	8006508 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	885b      	ldrh	r3, [r3, #2]
 80064b4:	f240 526c 	movw	r2, #1388	; 0x56c
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d127      	bne.n	800650c <validEEPROM+0xb4>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	2bbe      	cmp	r3, #190	; 0xbe
 80064c2:	d123      	bne.n	800650c <validEEPROM+0xb4>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 80064ca:	2bef      	cmp	r3, #239	; 0xef
 80064cc:	d11e      	bne.n	800650c <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e007      	b.n	80064e4 <validEEPROM+0x8c>
        chk ^= *p;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	7afb      	ldrb	r3, [r7, #11]
 80064da:	4053      	eors	r3, r2
 80064dc:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d3f1      	bcc.n	80064d4 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f01c ff60 	bl	80233bc <free>

    // looks good, let's roll!
    return 1;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e00c      	b.n	800651a <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 8006500:	bf00      	nop
 8006502:	e006      	b.n	8006512 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006504:	bf00      	nop
 8006506:	e004      	b.n	8006512 <validEEPROM+0xba>
        goto fail;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <validEEPROM+0xba>
        goto fail;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <validEEPROM+0xba>
        goto fail;
 8006510:	bf00      	nop

fail:
    free(temp);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f01c ff52 	bl	80233bc <free>
    return 0;    
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000ef0 	.word	0x20000ef0

08006528 <readEEPROM>:

void readEEPROM(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 800652e:	f7ff ff93 	bl	8006458 <validEEPROM>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d030      	beq.n	800659a <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <readEEPROM+0x88>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	214c      	movs	r1, #76	; 0x4c
 800653e:	4618      	mov	r0, r3
 8006540:	f014 ff6b 	bl	801b41a <pifStorage_Open>
 8006544:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d028      	beq.n	800659e <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800654c:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <readEEPROM+0x88>)
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	f240 536c 	movw	r3, #1388	; 0x56c
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4917      	ldr	r1, [pc, #92]	; (80065b4 <readEEPROM+0x8c>)
 8006558:	f014 ff70 	bl	801b43c <pifStorage_Read>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01f      	beq.n	80065a2 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <readEEPROM+0x8c>)
 8006564:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006568:	2b02      	cmp	r3, #2
 800656a:	d903      	bls.n	8006574 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <readEEPROM+0x8c>)
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <readEEPROM+0x8c>)
 8006576:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800657a:	461a      	mov	r2, r3
 800657c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006588:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <readEEPROM+0x8c>)
 800658a:	4413      	add	r3, r2
 800658c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006590:	4619      	mov	r1, r3
 8006592:	4809      	ldr	r0, [pc, #36]	; (80065b8 <readEEPROM+0x90>)
 8006594:	f01c ff1a 	bl	80233cc <memcpy>
    return;
 8006598:	e007      	b.n	80065aa <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800659a:	bf00      	nop
 800659c:	e002      	b.n	80065a4 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80065a2:	bf00      	nop

fail:    
    failureMode(10);
 80065a4:	200a      	movs	r0, #10
 80065a6:	f7fb fd1c 	bl	8001fe2 <failureMode>
}
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000ef0 	.word	0x20000ef0
 80065b4:	20000848 	.word	0x20000848
 80065b8:	20000db4 	.word	0x20000db4

080065bc <activateConfig>:

void activateConfig(void)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	71fb      	strb	r3, [r7, #7]
 80065c6:	e021      	b.n	800660c <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 80065c8:	4b56      	ldr	r3, [pc, #344]	; (8006724 <activateConfig+0x168>)
 80065ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ce:	4619      	mov	r1, r3
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	79fa      	ldrb	r2, [r7, #7]
 80065d4:	fb02 f303 	mul.w	r3, r2, r3
 80065d8:	3b19      	subs	r3, #25
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80065e2:	79fa      	ldrb	r2, [r7, #7]
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	4a4e      	ldr	r2, [pc, #312]	; (8006724 <activateConfig+0x168>)
 80065ea:	7fd2      	ldrb	r2, [r2, #31]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	4a4d      	ldr	r2, [pc, #308]	; (8006728 <activateConfig+0x16c>)
 80065f2:	fb82 1203 	smull	r1, r2, r2, r3
 80065f6:	1292      	asrs	r2, r2, #10
 80065f8:	17db      	asrs	r3, r3, #31
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	b211      	sxth	r1, r2
 8006600:	4a4a      	ldr	r2, [pc, #296]	; (800672c <activateConfig+0x170>)
 8006602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	3301      	adds	r3, #1
 800660a:	71fb      	strb	r3, [r7, #7]
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b06      	cmp	r3, #6
 8006610:	d9da      	bls.n	80065c8 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006612:	2300      	movs	r3, #0
 8006614:	71fb      	strb	r3, [r7, #7]
 8006616:	e076      	b.n	8006706 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	4413      	add	r3, r2
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <activateConfig+0x168>)
 8006628:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800662c:	b29b      	uxth	r3, r3
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	b29b      	uxth	r3, r3
 8006632:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 8006634:	2301      	movs	r3, #1
 8006636:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 8006638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd05      	ble.n	800664c <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 8006640:	4b38      	ldr	r3, [pc, #224]	; (8006724 <activateConfig+0x168>)
 8006642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006646:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800664a:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 800664c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	da03      	bge.n	800665c <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006654:	4b33      	ldr	r3, [pc, #204]	; (8006724 <activateConfig+0x168>)
 8006656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800665a:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 800665c:	4b31      	ldr	r3, [pc, #196]	; (8006724 <activateConfig+0x168>)
 800665e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	4413      	add	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006672:	492c      	ldr	r1, [pc, #176]	; (8006724 <activateConfig+0x168>)
 8006674:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006678:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 800667c:	4929      	ldr	r1, [pc, #164]	; (8006724 <activateConfig+0x168>)
 800667e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006682:	460d      	mov	r5, r1
 8006684:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006688:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800668c:	fb04 f101 	mul.w	r1, r4, r1
 8006690:	fb01 f405 	mul.w	r4, r1, r5
 8006694:	79b9      	ldrb	r1, [r7, #6]
 8006696:	79bd      	ldrb	r5, [r7, #6]
 8006698:	fb05 f101 	mul.w	r1, r5, r1
 800669c:	fb94 f1f1 	sdiv	r1, r4, r1
 80066a0:	4401      	add	r1, r0
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	4922      	ldr	r1, [pc, #136]	; (8006730 <activateConfig+0x174>)
 80066a8:	fb81 0103 	smull	r0, r1, r1, r3
 80066ac:	1089      	asrs	r1, r1, #2
 80066ae:	17db      	asrs	r3, r3, #31
 80066b0:	1acb      	subs	r3, r1, r3
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4413      	add	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	b211      	sxth	r1, r2
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <activateConfig+0x178>)
 80066be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <activateConfig+0x17c>)
 80066c4:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <activateConfig+0x17c>)
 80066ca:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80066ce:	4619      	mov	r1, r3
 80066d0:	4b19      	ldr	r3, [pc, #100]	; (8006738 <activateConfig+0x17c>)
 80066d2:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80066d6:	1acb      	subs	r3, r1, r3
 80066d8:	79f9      	ldrb	r1, [r7, #7]
 80066da:	4816      	ldr	r0, [pc, #88]	; (8006734 <activateConfig+0x178>)
 80066dc:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4915      	ldr	r1, [pc, #84]	; (800673c <activateConfig+0x180>)
 80066e6:	fb81 0103 	smull	r0, r1, r1, r3
 80066ea:	1189      	asrs	r1, r1, #6
 80066ec:	17db      	asrs	r3, r3, #31
 80066ee:	1acb      	subs	r3, r1, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	b211      	sxth	r1, r2
 80066fa:	4a0e      	ldr	r2, [pc, #56]	; (8006734 <activateConfig+0x178>)
 80066fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	3301      	adds	r3, #1
 8006704:	71fb      	strb	r3, [r7, #7]
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	2b0b      	cmp	r3, #11
 800670a:	d985      	bls.n	8006618 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <activateConfig+0x168>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f006 fcaf 	bl	800d074 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 8006716:	f002 fa5d 	bl	8008bd4 <gpsSetPIDs>
#endif
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bdb0      	pop	{r4, r5, r7, pc}
 8006722:	bf00      	nop
 8006724:	20000db4 	.word	0x20000db4
 8006728:	68db8bad 	.word	0x68db8bad
 800672c:	20001784 	.word	0x20001784
 8006730:	66666667 	.word	0x66666667
 8006734:	20001794 	.word	0x20001794
 8006738:	20000848 	.word	0x20000848
 800673c:	10624dd3 	.word	0x10624dd3

08006740 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
    readEEPROM();
 8006744:	f7ff fef0 	bl	8006528 <readEEPROM>
    activateConfig();
 8006748:	f7ff ff38 	bl	80065bc <activateConfig>
}
 800674c:	bf00      	nop
 800674e:	bd80      	pop	{r7, pc}

08006750 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	460a      	mov	r2, r1
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	4613      	mov	r3, r2
 800675e:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 8006760:	2300      	movs	r3, #0
 8006762:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 8006768:	224c      	movs	r2, #76	; 0x4c
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <writeEEPROM+0xf4>)
 800676c:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 800676e:	4b35      	ldr	r3, [pc, #212]	; (8006844 <writeEEPROM+0xf4>)
 8006770:	f240 526c 	movw	r2, #1388	; 0x56c
 8006774:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 8006776:	4b33      	ldr	r3, [pc, #204]	; (8006844 <writeEEPROM+0xf4>)
 8006778:	22be      	movs	r2, #190	; 0xbe
 800677a:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 800677c:	4b31      	ldr	r3, [pc, #196]	; (8006844 <writeEEPROM+0xf4>)
 800677e:	22ef      	movs	r2, #239	; 0xef
 8006780:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006784:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <writeEEPROM+0xf4>)
 8006786:	2200      	movs	r2, #0
 8006788:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 800678c:	79bb      	ldrb	r3, [r7, #6]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006792:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <writeEEPROM+0xf4>)
 8006794:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006798:	461a      	mov	r2, r3
 800679a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80067a6:	4a27      	ldr	r2, [pc, #156]	; (8006844 <writeEEPROM+0xf4>)
 80067a8:	4413      	add	r3, r2
 80067aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80067ae:	4926      	ldr	r1, [pc, #152]	; (8006848 <writeEEPROM+0xf8>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f01c fe0b 	bl	80233cc <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 80067b6:	4b23      	ldr	r3, [pc, #140]	; (8006844 <writeEEPROM+0xf4>)
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	e007      	b.n	80067cc <writeEEPROM+0x7c>
        chk ^= *p;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	7dbb      	ldrb	r3, [r7, #22]
 80067c2:	4053      	eors	r3, r2
 80067c4:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3301      	adds	r3, #1
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <writeEEPROM+0xfc>)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d3f3      	bcc.n	80067bc <writeEEPROM+0x6c>
    mcfg.chk = chk;
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <writeEEPROM+0xf4>)
 80067d6:	7dbb      	ldrb	r3, [r7, #22]
 80067d8:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80067dc:	4b1c      	ldr	r3, [pc, #112]	; (8006850 <writeEEPROM+0x100>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	214c      	movs	r1, #76	; 0x4c
 80067e2:	4618      	mov	r0, r3
 80067e4:	f014 fe19 	bl	801b41a <pifStorage_Open>
 80067e8:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <writeEEPROM+0x100>)
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	f240 536c 	movw	r3, #1388	; 0x56c
 80067f8:	4a12      	ldr	r2, [pc, #72]	; (8006844 <writeEEPROM+0xf4>)
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f014 fe31 	bl	801b462 <pifStorage_Write>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <writeEEPROM+0xba>
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	f083 0301 	eor.w	r3, r3, #1
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <writeEEPROM+0xd0>
 8006816:	f7ff fe1f 	bl	8006458 <validEEPROM>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <writeEEPROM+0xd6>
        failureMode(10);
 8006820:	200a      	movs	r0, #10
 8006822:	f7fb fbde 	bl	8001fe2 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 8006826:	f7ff ff8b 	bl	8006740 <loadAndActivateConfig>
    if (b)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 8006830:	2201      	movs	r2, #1
 8006832:	2114      	movs	r1, #20
 8006834:	200f      	movs	r0, #15
 8006836:	f005 fbe7 	bl	800c008 <blinkLED>
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000848 	.word	0x20000848
 8006848:	20000db4 	.word	0x20000db4
 800684c:	20000db4 	.word	0x20000db4
 8006850:	20000ef0 	.word	0x20000ef0

08006854 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <checkFirstTime+0xa0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f014 fdaa 	bl	801b3c0 <pifStorage_IsFormat>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10c      	bne.n	800688c <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <checkFirstTime+0xa0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f014 fdaf 	bl	801b3da <pifStorage_Format>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <checkFirstTime+0x32>
 8006882:	2300      	movs	r3, #0
 8006884:	e032      	b.n	80068ec <checkFirstTime+0x98>
        alloc = false;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
 800688a:	e00b      	b.n	80068a4 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <checkFirstTime+0xa0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	214c      	movs	r1, #76	; 0x4c
 8006892:	4618      	mov	r0, r3
 8006894:	f014 fdc1 	bl	801b41a <pifStorage_Open>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	f083 0301 	eor.w	r3, r3, #1
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00e      	beq.n	80068ce <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 80068b0:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <checkFirstTime+0xa0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f240 526c 	movw	r2, #1388	; 0x56c
 80068b8:	214c      	movs	r1, #76	; 0x4c
 80068ba:	4618      	mov	r0, r3
 80068bc:	f014 fd9a 	bl	801b3f4 <pifStorage_Create>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <checkFirstTime+0x76>
 80068c6:	2300      	movs	r3, #0
 80068c8:	e010      	b.n	80068ec <checkFirstTime+0x98>
        reset = true;
 80068ca:	2301      	movs	r3, #1
 80068cc:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 80068ce:	f7ff fdc3 	bl	8006458 <validEEPROM>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <checkFirstTime+0x8a>
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <checkFirstTime+0x96>
        resetConf();
 80068de:	f000 f80b 	bl	80068f8 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 80068e2:	2100      	movs	r1, #0
 80068e4:	2000      	movs	r0, #0
 80068e6:	f7ff ff33 	bl	8006750 <writeEEPROM>
    }
    return true;
 80068ea:	2301      	movs	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000ef0 	.word	0x20000ef0

080068f8 <resetConf>:

// Default settings
static void resetConf(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 80068fe:	4ac7      	ldr	r2, [pc, #796]	; (8006c1c <resetConf+0x324>)
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006906:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 800690a:	f240 526c 	movw	r2, #1388	; 0x56c
 800690e:	2100      	movs	r1, #0
 8006910:	48c3      	ldr	r0, [pc, #780]	; (8006c20 <resetConf+0x328>)
 8006912:	f01c fd69 	bl	80233e8 <memset>
    memset(&cfg, 0, sizeof(config_t));
 8006916:	f44f 729c 	mov.w	r2, #312	; 0x138
 800691a:	2100      	movs	r1, #0
 800691c:	48c1      	ldr	r0, [pc, #772]	; (8006c24 <resetConf+0x32c>)
 800691e:	f01c fd63 	bl	80233e8 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 8006922:	224c      	movs	r2, #76	; 0x4c
 8006924:	4bbe      	ldr	r3, [pc, #760]	; (8006c20 <resetConf+0x328>)
 8006926:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 8006928:	4bbd      	ldr	r3, [pc, #756]	; (8006c20 <resetConf+0x328>)
 800692a:	2203      	movs	r2, #3
 800692c:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 800692e:	f000 fb2d 	bl	8006f8c <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 8006932:	4bbd      	ldr	r3, [pc, #756]	; (8006c28 <resetConf+0x330>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <resetConf+0x48>
 800693a:	4bbb      	ldr	r3, [pc, #748]	; (8006c28 <resetConf+0x330>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 8006940:	4bb7      	ldr	r3, [pc, #732]	; (8006c20 <resetConf+0x328>)
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006948:	4bb5      	ldr	r3, [pc, #724]	; (8006c20 <resetConf+0x328>)
 800694a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800694e:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 8006952:	4bb3      	ldr	r3, [pc, #716]	; (8006c20 <resetConf+0x328>)
 8006954:	22fa      	movs	r2, #250	; 0xfa
 8006956:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 800695a:	4bb1      	ldr	r3, [pc, #708]	; (8006c20 <resetConf+0x328>)
 800695c:	222a      	movs	r2, #42	; 0x2a
 800695e:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 8006962:	4baf      	ldr	r3, [pc, #700]	; (8006c20 <resetConf+0x328>)
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 800696a:	4bad      	ldr	r3, [pc, #692]	; (8006c20 <resetConf+0x328>)
 800696c:	2200      	movs	r2, #0
 800696e:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006972:	4bab      	ldr	r3, [pc, #684]	; (8006c20 <resetConf+0x328>)
 8006974:	2200      	movs	r2, #0
 8006976:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 800697a:	4ba9      	ldr	r3, [pc, #676]	; (8006c20 <resetConf+0x328>)
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006982:	4ba7      	ldr	r3, [pc, #668]	; (8006c20 <resetConf+0x328>)
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 800698a:	4ba5      	ldr	r3, [pc, #660]	; (8006c20 <resetConf+0x328>)
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006992:	4ba3      	ldr	r3, [pc, #652]	; (8006c20 <resetConf+0x328>)
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 800699a:	4ba1      	ldr	r3, [pc, #644]	; (8006c20 <resetConf+0x328>)
 800699c:	2200      	movs	r2, #0
 800699e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 80069a2:	4b9f      	ldr	r3, [pc, #636]	; (8006c20 <resetConf+0x328>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 80069aa:	4b9d      	ldr	r3, [pc, #628]	; (8006c20 <resetConf+0x328>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 80069b2:	4b9b      	ldr	r3, [pc, #620]	; (8006c20 <resetConf+0x328>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 80069ba:	4b99      	ldr	r3, [pc, #612]	; (8006c20 <resetConf+0x328>)
 80069bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80069c0:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 80069c4:	4b96      	ldr	r3, [pc, #600]	; (8006c20 <resetConf+0x328>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 80069cc:	4b94      	ldr	r3, [pc, #592]	; (8006c20 <resetConf+0x328>)
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 80069d4:	4b92      	ldr	r3, [pc, #584]	; (8006c20 <resetConf+0x328>)
 80069d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80069da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 80069de:	4b90      	ldr	r3, [pc, #576]	; (8006c20 <resetConf+0x328>)
 80069e0:	226e      	movs	r2, #110	; 0x6e
 80069e2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 80069e6:	4b8e      	ldr	r3, [pc, #568]	; (8006c20 <resetConf+0x328>)
 80069e8:	222b      	movs	r2, #43	; 0x2b
 80069ea:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 80069ee:	4b8c      	ldr	r3, [pc, #560]	; (8006c20 <resetConf+0x328>)
 80069f0:	2221      	movs	r2, #33	; 0x21
 80069f2:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 80069f6:	4b8a      	ldr	r3, [pc, #552]	; (8006c20 <resetConf+0x328>)
 80069f8:	2223      	movs	r2, #35	; 0x23
 80069fa:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 80069fe:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <resetConf+0x328>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006a06:	4b86      	ldr	r3, [pc, #536]	; (8006c20 <resetConf+0x328>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006a0e:	4b84      	ldr	r3, [pc, #528]	; (8006c20 <resetConf+0x328>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006a16:	4b82      	ldr	r3, [pc, #520]	; (8006c20 <resetConf+0x328>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006a1e:	4b80      	ldr	r3, [pc, #512]	; (8006c20 <resetConf+0x328>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006a26:	4b7e      	ldr	r3, [pc, #504]	; (8006c20 <resetConf+0x328>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006a2e:	4b7c      	ldr	r3, [pc, #496]	; (8006c20 <resetConf+0x328>)
 8006a30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a34:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006a38:	4b79      	ldr	r3, [pc, #484]	; (8006c20 <resetConf+0x328>)
 8006a3a:	f240 424c 	movw	r2, #1100	; 0x44c
 8006a3e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006a42:	4b77      	ldr	r3, [pc, #476]	; (8006c20 <resetConf+0x328>)
 8006a44:	f240 726c 	movw	r2, #1900	; 0x76c
 8006a48:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006a4c:	4b74      	ldr	r3, [pc, #464]	; (8006c20 <resetConf+0x328>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006a54:	4b72      	ldr	r3, [pc, #456]	; (8006c20 <resetConf+0x328>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006a5c:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <resetConf+0x328>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006a64:	4b6e      	ldr	r3, [pc, #440]	; (8006c20 <resetConf+0x328>)
 8006a66:	f240 427e 	movw	r2, #1150	; 0x47e
 8006a6a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006a6e:	4b6c      	ldr	r3, [pc, #432]	; (8006c20 <resetConf+0x328>)
 8006a70:	f240 723a 	movw	r2, #1850	; 0x73a
 8006a74:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006a78:	4b69      	ldr	r3, [pc, #420]	; (8006c20 <resetConf+0x328>)
 8006a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a7e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006a82:	4b67      	ldr	r3, [pc, #412]	; (8006c20 <resetConf+0x328>)
 8006a84:	f240 527e 	movw	r2, #1406	; 0x57e
 8006a88:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006a8c:	4b64      	ldr	r3, [pc, #400]	; (8006c20 <resetConf+0x328>)
 8006a8e:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006a92:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <resetConf+0x328>)
 8006a98:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006a9c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006aa0:	4b5f      	ldr	r3, [pc, #380]	; (8006c20 <resetConf+0x328>)
 8006aa2:	2232      	movs	r2, #50	; 0x32
 8006aa4:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006aa8:	4b5d      	ldr	r3, [pc, #372]	; (8006c20 <resetConf+0x328>)
 8006aaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006aae:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006ab2:	4b5b      	ldr	r3, [pc, #364]	; (8006c20 <resetConf+0x328>)
 8006ab4:	2232      	movs	r2, #50	; 0x32
 8006ab6:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006aba:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <resetConf+0x328>)
 8006abc:	2205      	movs	r2, #5
 8006abe:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006ac2:	4b57      	ldr	r3, [pc, #348]	; (8006c20 <resetConf+0x328>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006aca:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <resetConf+0x328>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006ad2:	4b53      	ldr	r3, [pc, #332]	; (8006c20 <resetConf+0x328>)
 8006ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ad8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006adc:	4b50      	ldr	r3, [pc, #320]	; (8006c20 <resetConf+0x328>)
 8006ade:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ae2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	; (8006c20 <resetConf+0x328>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006aee:	4b4c      	ldr	r3, [pc, #304]	; (8006c20 <resetConf+0x328>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006af6:	4b4a      	ldr	r3, [pc, #296]	; (8006c20 <resetConf+0x328>)
 8006af8:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006afc:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <resetConf+0x328>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006b04:	4b46      	ldr	r3, [pc, #280]	; (8006c20 <resetConf+0x328>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006b0c:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <resetConf+0x328>)
 8006b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b12:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <resetConf+0x328>)
 8006b18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006b1c:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006b20:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <resetConf+0x328>)
 8006b22:	2208      	movs	r2, #8
 8006b24:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006b28:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <resetConf+0x32c>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006b2e:	4b3d      	ldr	r3, [pc, #244]	; (8006c24 <resetConf+0x32c>)
 8006b30:	2228      	movs	r2, #40	; 0x28
 8006b32:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006b34:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <resetConf+0x32c>)
 8006b36:	221e      	movs	r2, #30
 8006b38:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <resetConf+0x32c>)
 8006b3c:	2217      	movs	r2, #23
 8006b3e:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006b40:	4b38      	ldr	r3, [pc, #224]	; (8006c24 <resetConf+0x32c>)
 8006b42:	2228      	movs	r2, #40	; 0x28
 8006b44:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <resetConf+0x32c>)
 8006b48:	221e      	movs	r2, #30
 8006b4a:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006b4c:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <resetConf+0x32c>)
 8006b4e:	2217      	movs	r2, #23
 8006b50:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006b52:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <resetConf+0x32c>)
 8006b54:	2255      	movs	r2, #85	; 0x55
 8006b56:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006b58:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <resetConf+0x32c>)
 8006b5a:	222d      	movs	r2, #45	; 0x2d
 8006b5c:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006b5e:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <resetConf+0x32c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006b64:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <resetConf+0x32c>)
 8006b66:	2232      	movs	r2, #50	; 0x32
 8006b68:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006b6a:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <resetConf+0x32c>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006b70:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <resetConf+0x32c>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006b76:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <resetConf+0x32c>)
 8006b78:	220b      	movs	r2, #11
 8006b7a:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006b7c:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <resetConf+0x32c>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006b82:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <resetConf+0x32c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <resetConf+0x32c>)
 8006b8a:	2214      	movs	r2, #20
 8006b8c:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <resetConf+0x32c>)
 8006b90:	2208      	movs	r2, #8
 8006b92:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <resetConf+0x32c>)
 8006b96:	222d      	movs	r2, #45	; 0x2d
 8006b98:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006b9a:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <resetConf+0x32c>)
 8006b9c:	220e      	movs	r2, #14
 8006b9e:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006ba0:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <resetConf+0x32c>)
 8006ba2:	2214      	movs	r2, #20
 8006ba4:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <resetConf+0x32c>)
 8006ba8:	2250      	movs	r2, #80	; 0x50
 8006baa:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006bac:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <resetConf+0x32c>)
 8006bae:	225a      	movs	r2, #90	; 0x5a
 8006bb0:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <resetConf+0x32c>)
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006bb8:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <resetConf+0x32c>)
 8006bba:	2264      	movs	r2, #100	; 0x64
 8006bbc:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006bbe:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <resetConf+0x32c>)
 8006bc0:	2228      	movs	r2, #40	; 0x28
 8006bc2:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <resetConf+0x32c>)
 8006bc6:	2278      	movs	r2, #120	; 0x78
 8006bc8:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <resetConf+0x32c>)
 8006bcc:	222d      	movs	r2, #45	; 0x2d
 8006bce:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006bd0:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <resetConf+0x32c>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <resetConf+0x32c>)
 8006bd8:	225a      	movs	r2, #90	; 0x5a
 8006bda:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006bdc:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <resetConf+0x32c>)
 8006bde:	2241      	movs	r2, #65	; 0x41
 8006be0:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006be4:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <resetConf+0x32c>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <resetConf+0x32c>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <resetConf+0x32c>)
 8006bf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <resetConf+0x32c>)
 8006bfe:	2232      	movs	r2, #50	; 0x32
 8006c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <resetConf+0x32c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <resetConf+0x32c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006c12:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <resetConf+0x32c>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006c18:	e008      	b.n	8006c2c <resetConf+0x334>
 8006c1a:	bf00      	nop
 8006c1c:	08027928 	.word	0x08027928
 8006c20:	20000848 	.word	0x20000848
 8006c24:	20000db4 	.word	0x20000db4
 8006c28:	20001708 	.word	0x20001708
    cfg.locked_in = 0;
 8006c2c:	4b8e      	ldr	r3, [pc, #568]	; (8006e68 <resetConf+0x570>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006c34:	4b8c      	ldr	r3, [pc, #560]	; (8006e68 <resetConf+0x570>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006c3a:	4b8b      	ldr	r3, [pc, #556]	; (8006e68 <resetConf+0x570>)
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006c42:	4b89      	ldr	r3, [pc, #548]	; (8006e68 <resetConf+0x570>)
 8006c44:	2228      	movs	r2, #40	; 0x28
 8006c46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <resetConf+0x570>)
 8006c4c:	2228      	movs	r2, #40	; 0x28
 8006c4e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006c52:	4b85      	ldr	r3, [pc, #532]	; (8006e68 <resetConf+0x570>)
 8006c54:	2215      	movs	r2, #21
 8006c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <resetConf+0x570>)
 8006c5c:	4a83      	ldr	r2, [pc, #524]	; (8006e6c <resetConf+0x574>)
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006c60:	4b81      	ldr	r3, [pc, #516]	; (8006e68 <resetConf+0x570>)
 8006c62:	4a83      	ldr	r2, [pc, #524]	; (8006e70 <resetConf+0x578>)
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006c66:	4b80      	ldr	r3, [pc, #512]	; (8006e68 <resetConf+0x570>)
 8006c68:	4a82      	ldr	r2, [pc, #520]	; (8006e74 <resetConf+0x57c>)
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006c6c:	4b7e      	ldr	r3, [pc, #504]	; (8006e68 <resetConf+0x570>)
 8006c6e:	4a82      	ldr	r2, [pc, #520]	; (8006e78 <resetConf+0x580>)
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006c72:	4b7d      	ldr	r3, [pc, #500]	; (8006e68 <resetConf+0x570>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006c7a:	4b7b      	ldr	r3, [pc, #492]	; (8006e68 <resetConf+0x570>)
 8006c7c:	2219      	movs	r2, #25
 8006c7e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006c82:	487e      	ldr	r0, [pc, #504]	; (8006e7c <resetConf+0x584>)
 8006c84:	f7ff fbba 	bl	80063fc <parseRcChannels>
    cfg.deadband = 0;
 8006c88:	4b77      	ldr	r3, [pc, #476]	; (8006e68 <resetConf+0x570>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006c90:	4b75      	ldr	r3, [pc, #468]	; (8006e68 <resetConf+0x570>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006c98:	4b73      	ldr	r3, [pc, #460]	; (8006e68 <resetConf+0x570>)
 8006c9a:	2228      	movs	r2, #40	; 0x28
 8006c9c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006ca0:	4b71      	ldr	r3, [pc, #452]	; (8006e68 <resetConf+0x570>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006ca8:	4b6f      	ldr	r3, [pc, #444]	; (8006e68 <resetConf+0x570>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006cb0:	4b6d      	ldr	r3, [pc, #436]	; (8006e68 <resetConf+0x570>)
 8006cb2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006cb6:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006cba:	4b6b      	ldr	r3, [pc, #428]	; (8006e68 <resetConf+0x570>)
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006cc2:	4b69      	ldr	r3, [pc, #420]	; (8006e68 <resetConf+0x570>)
 8006cc4:	22c8      	movs	r2, #200	; 0xc8
 8006cc6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006cca:	4b67      	ldr	r3, [pc, #412]	; (8006e68 <resetConf+0x570>)
 8006ccc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006cd0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006cd4:	4b64      	ldr	r3, [pc, #400]	; (8006e68 <resetConf+0x570>)
 8006cd6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006cda:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e032      	b.n	8006d4a <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006ce4:	4960      	ldr	r1, [pc, #384]	; (8006e68 <resetConf+0x570>)
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	440b      	add	r3, r1
 8006cf2:	33b8      	adds	r3, #184	; 0xb8
 8006cf4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006cf8:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006cfa:	495b      	ldr	r1, [pc, #364]	; (8006e68 <resetConf+0x570>)
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	440b      	add	r3, r1
 8006d08:	33ba      	adds	r3, #186	; 0xba
 8006d0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006d0e:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006d10:	4955      	ldr	r1, [pc, #340]	; (8006e68 <resetConf+0x570>)
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	440b      	add	r3, r1
 8006d1e:	33bc      	adds	r3, #188	; 0xbc
 8006d20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d24:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006d26:	1d3a      	adds	r2, r7, #4
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f993 0000 	ldrsb.w	r0, [r3]
 8006d30:	494d      	ldr	r1, [pc, #308]	; (8006e68 <resetConf+0x570>)
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	440b      	add	r3, r1
 8006d3e:	33be      	adds	r3, #190	; 0xbe
 8006d40:	4602      	mov	r2, r0
 8006d42:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b07      	cmp	r3, #7
 8006d4e:	ddc9      	ble.n	8006ce4 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006d50:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <resetConf+0x570>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006d58:	4b43      	ldr	r3, [pc, #268]	; (8006e68 <resetConf+0x570>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006d60:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <resetConf+0x570>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006d68:	4b3f      	ldr	r3, [pc, #252]	; (8006e68 <resetConf+0x570>)
 8006d6a:	22c8      	movs	r2, #200	; 0xc8
 8006d6c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006d70:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <resetConf+0x570>)
 8006d72:	2214      	movs	r2, #20
 8006d74:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <resetConf+0x570>)
 8006d7a:	221e      	movs	r2, #30
 8006d7c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006d80:	4b39      	ldr	r3, [pc, #228]	; (8006e68 <resetConf+0x570>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006d88:	4b37      	ldr	r3, [pc, #220]	; (8006e68 <resetConf+0x570>)
 8006d8a:	2264      	movs	r2, #100	; 0x64
 8006d8c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006d90:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <resetConf+0x570>)
 8006d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d96:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006d9a:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <resetConf+0x570>)
 8006d9c:	2228      	movs	r2, #40	; 0x28
 8006d9e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <resetConf+0x570>)
 8006da4:	2214      	movs	r2, #20
 8006da6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <resetConf+0x570>)
 8006dac:	220f      	movs	r2, #15
 8006dae:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006db2:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <resetConf+0x570>)
 8006db4:	220f      	movs	r2, #15
 8006db6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006dba:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <resetConf+0x570>)
 8006dbc:	220f      	movs	r2, #15
 8006dbe:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <resetConf+0x570>)
 8006dc4:	f240 726c 	movw	r2, #1900	; 0x76c
 8006dc8:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006dcc:	4b26      	ldr	r3, [pc, #152]	; (8006e68 <resetConf+0x570>)
 8006dce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006dd2:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <resetConf+0x570>)
 8006dd8:	f240 5214 	movw	r2, #1300	; 0x514
 8006ddc:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006de0:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <resetConf+0x570>)
 8006de2:	2208      	movs	r2, #8
 8006de4:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006de8:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <resetConf+0x570>)
 8006dea:	2264      	movs	r2, #100	; 0x64
 8006dec:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <resetConf+0x570>)
 8006df2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006df6:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <resetConf+0x570>)
 8006dfc:	2232      	movs	r2, #50	; 0x32
 8006dfe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006e02:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <resetConf+0x588>)
 8006e04:	2252      	movs	r2, #82	; 0x52
 8006e06:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e00a      	b.n	8006e26 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006e10:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <resetConf+0x588>)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	4413      	add	r3, r2
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b0b      	cmp	r3, #11
 8006e2a:	ddf1      	ble.n	8006e10 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e011      	b.n	8006e56 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006e40:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <resetConf+0x588>)
 8006e42:	4413      	add	r3, r2
 8006e44:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e48:	4907      	ldr	r1, [pc, #28]	; (8006e68 <resetConf+0x570>)
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f01c fabe 	bl	80233cc <memcpy>
    for (i = 0; i < 3; i++)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	ddea      	ble.n	8006e32 <resetConf+0x53a>
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000db4 	.word	0x20000db4
 8006e6c:	3f19999a 	.word	0x3f19999a
 8006e70:	3f7c28f6 	.word	0x3f7c28f6
 8006e74:	3f770a3d 	.word	0x3f770a3d
 8006e78:	40a00000 	.word	0x40a00000
 8006e7c:	08027914 	.word	0x08027914
 8006e80:	20000848 	.word	0x20000848

08006e84 <sensors>:

bool sensors(uint32_t mask)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <sensors+0x28>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000eec 	.word	0x20000eec

08006eb0 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <sensorsSet+0x20>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <sensorsSet+0x20>)
 8006ec2:	6013      	str	r3, [r2, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20000eec 	.word	0x20000eec

08006ed4 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	43da      	mvns	r2, r3
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <sensorsClear+0x24>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	4a04      	ldr	r2, [pc, #16]	; (8006ef8 <sensorsClear+0x24>)
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000eec 	.word	0x20000eec

08006efc <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <sensorsMask+0x14>)
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000eec 	.word	0x20000eec

08006f14 <feature>:

bool feature(uint32_t mask)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <feature+0x28>)
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000848 	.word	0x20000848

08006f40 <featureSet>:

void featureSet(uint32_t mask)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <featureSet+0x20>)
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <featureSet+0x20>)
 8006f52:	6093      	str	r3, [r2, #8]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20000848 	.word	0x20000848

08006f64 <featureClear>:

void featureClear(uint32_t mask)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <featureClear+0x24>)
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	4013      	ands	r3, r2
 8006f76:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <featureClear+0x24>)
 8006f78:	6093      	str	r3, [r2, #8]
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000848 	.word	0x20000848

08006f8c <featureClearAll>:

void featureClearAll()
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8006f90:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <featureClearAll+0x14>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
}
 8006f96:	bf00      	nop
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000848 	.word	0x20000848

08006fa4 <featureMask>:

uint32_t featureMask(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8006fa8:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <featureMask+0x14>)
 8006faa:	689b      	ldr	r3, [r3, #8]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000848 	.word	0x20000848

08006fbc <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <fw_nav_reset+0x5c>)
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <fw_nav_reset+0x60>)
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <fw_nav_reset+0x64>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8006fd8:	4b12      	ldr	r3, [pc, #72]	; (8007024 <fw_nav_reset+0x68>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <fw_nav_reset+0x6c>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	71fb      	strb	r3, [r7, #7]
 8006fe8:	e00c      	b.n	8007004 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	4a0f      	ldr	r2, [pc, #60]	; (800702c <fw_nav_reset+0x70>)
 8006fee:	2100      	movs	r1, #0
 8006ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	4a0e      	ldr	r2, [pc, #56]	; (8007030 <fw_nav_reset+0x74>)
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	3301      	adds	r3, #1
 8007002:	71fb      	strb	r3, [r7, #7]
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b04      	cmp	r3, #4
 8007008:	d9ef      	bls.n	8006fea <fw_nav_reset+0x2e>
    }
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000ef4 	.word	0x20000ef4
 800701c:	20000ef8 	.word	0x20000ef8
 8007020:	20000efc 	.word	0x20000efc
 8007024:	20000efe 	.word	0x20000efe
 8007028:	20000f00 	.word	0x20000f00
 800702c:	20000f04 	.word	0x20000f04
 8007030:	20000f10 	.word	0x20000f10

08007034 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8007034:	b5b0      	push	{r4, r5, r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 800703a:	4b48      	ldr	r3, [pc, #288]	; (800715c <fw_FlyTo+0x128>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	4a48      	ldr	r2, [pc, #288]	; (8007160 <fw_FlyTo+0x12c>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	b29b      	uxth	r3, r3
 8007048:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2bb4      	cmp	r3, #180	; 0xb4
 800704e:	dd03      	ble.n	8007058 <fw_FlyTo+0x24>
        holdHeading -= 360;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007056:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8007058:	4b42      	ldr	r3, [pc, #264]	; (8007164 <fw_FlyTo+0x130>)
 800705a:	edd3 7a00 	vldr	s15, [r3]
 800705e:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007168 <fw_FlyTo+0x134>
 8007062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007066:	4b41      	ldr	r3, [pc, #260]	; (800716c <fw_FlyTo+0x138>)
 8007068:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007078:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007086:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007170 <fw_FlyTo+0x13c>
 800708a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800708e:	ee17 0a90 	vmov	r0, s15
 8007092:	f7f9 fa0d 	bl	80004b0 <__aeabi_f2d>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	ec43 2b10 	vmov	d0, r2, r3
 800709e:	f01c fbd7 	bl	8023850 <cos>
 80070a2:	ec53 2b10 	vmov	r2, r3, d0
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	f7f9 fd3b 	bl	8000b24 <__aeabi_d2f>
 80070ae:	4603      	mov	r3, r0
 80070b0:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007170 <fw_FlyTo+0x13c>
 80070c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070c4:	ee17 0a90 	vmov	r0, s15
 80070c8:	f7f9 f9f2 	bl	80004b0 <__aeabi_f2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	ec43 2b10 	vmov	d0, r2, r3
 80070d4:	f01c fc10 	bl	80238f8 <sin>
 80070d8:	ec55 4b10 	vmov	r4, r5, d0
 80070dc:	4b21      	ldr	r3, [pc, #132]	; (8007164 <fw_FlyTo+0x130>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7f9 f9e5 	bl	80004b0 <__aeabi_f2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 fa37 	bl	8000560 <__aeabi_dmul>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	f7f9 fd13 	bl	8000b24 <__aeabi_d2f>
 80070fe:	4603      	mov	r3, r0
 8007100:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <fw_FlyTo+0x140>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800710e:	edd7 6a01 	vldr	s13, [r7, #4]
 8007112:	edd7 7a02 	vldr	s15, [r7, #8]
 8007116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800711a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800711e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007122:	ee17 2a90 	vmov	r2, s15
 8007126:	4b13      	ldr	r3, [pc, #76]	; (8007174 <fw_FlyTo+0x140>)
 8007128:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 800712a:	4b12      	ldr	r3, [pc, #72]	; (8007174 <fw_FlyTo+0x140>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007136:	edd7 6a00 	vldr	s13, [r7]
 800713a:	edd7 7a02 	vldr	s15, [r7, #8]
 800713e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714a:	ee17 2a90 	vmov	r2, s15
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <fw_FlyTo+0x140>)
 8007150:	605a      	str	r2, [r3, #4]
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bdb0      	pop	{r4, r5, r7, pc}
 800715a:	bf00      	nop
 800715c:	20001816 	.word	0x20001816
 8007160:	cccccccd 	.word	0xcccccccd
 8007164:	20000028 	.word	0x20000028
 8007168:	42b3a9fc 	.word	0x42b3a9fc
 800716c:	20000db4 	.word	0x20000db4
 8007170:	3c8efa35 	.word	0x3c8efa35
 8007174:	2000130c 	.word	0x2000130c

08007178 <fw_nav>:

void fw_nav(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 800717e:	4b56      	ldr	r3, [pc, #344]	; (80072d8 <fw_nav+0x160>)
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007188:	4b54      	ldr	r3, [pc, #336]	; (80072dc <fw_nav+0x164>)
 800718a:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800718e:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007190:	2300      	movs	r3, #0
 8007192:	80bb      	strh	r3, [r7, #4]
 8007194:	2300      	movs	r3, #0
 8007196:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007198:	4b51      	ldr	r3, [pc, #324]	; (80072e0 <fw_nav+0x168>)
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800719e:	4b51      	ldr	r3, [pc, #324]	; (80072e4 <fw_nav+0x16c>)
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	4b51      	ldr	r3, [pc, #324]	; (80072e8 <fw_nav+0x170>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 80071ae:	4b4f      	ldr	r3, [pc, #316]	; (80072ec <fw_nav+0x174>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	4b4c      	ldr	r3, [pc, #304]	; (80072e8 <fw_nav+0x170>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	b29b      	uxth	r3, r3
 80071be:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 80071c0:	4b4b      	ldr	r3, [pc, #300]	; (80072f0 <fw_nav+0x178>)
 80071c2:	7cdb      	ldrb	r3, [r3, #19]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <fw_nav+0x66>
 80071c8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80071cc:	7f7b      	ldrb	r3, [r7, #29]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	da05      	bge.n	80071de <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 80071d2:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <fw_nav+0x170>)
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	7f7b      	ldrb	r3, [r7, #29]
 80071d8:	4413      	add	r3, r2
 80071da:	4a44      	ldr	r2, [pc, #272]	; (80072ec <fw_nav+0x174>)
 80071dc:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 80071de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4618      	mov	r0, r3
 80071ec:	f002 fa2e 	bl	800964c <wrap_18000>
 80071f0:	4603      	mov	r3, r0
 80071f2:	4a40      	ldr	r2, [pc, #256]	; (80072f4 <fw_nav+0x17c>)
 80071f4:	fb82 1203 	smull	r1, r2, r2, r3
 80071f8:	1092      	asrs	r2, r2, #2
 80071fa:	17db      	asrs	r3, r3, #31
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 8007200:	2008      	movs	r0, #8
 8007202:	f7ff fe3f 	bl	8006e84 <sensors>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d024      	beq.n	8007256 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 800720c:	4b3a      	ldr	r3, [pc, #232]	; (80072f8 <fw_nav+0x180>)
 800720e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007212:	4619      	mov	r1, r3
 8007214:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007218:	4a36      	ldr	r2, [pc, #216]	; (80072f4 <fw_nav+0x17c>)
 800721a:	fb82 0203 	smull	r0, r2, r2, r3
 800721e:	1092      	asrs	r2, r2, #2
 8007220:	17db      	asrs	r3, r3, #31
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	b21b      	sxth	r3, r3
 8007226:	1acb      	subs	r3, r1, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	bfb8      	it	lt
 800722c:	425b      	neglt	r3, r3
 800722e:	2b0a      	cmp	r3, #10
 8007230:	dd0d      	ble.n	800724e <fw_nav+0xd6>
 8007232:	4b32      	ldr	r3, [pc, #200]	; (80072fc <fw_nav+0x184>)
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	2bc8      	cmp	r3, #200	; 0xc8
 8007238:	d909      	bls.n	800724e <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 800723a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800723e:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <fw_nav+0x17c>)
 8007240:	fb82 1203 	smull	r1, r2, r2, r3
 8007244:	1092      	asrs	r2, r2, #2
 8007246:	17db      	asrs	r3, r3, #31
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800724c:	e00c      	b.n	8007268 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 800724e:	4b2a      	ldr	r3, [pc, #168]	; (80072f8 <fw_nav+0x180>)
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007254:	e008      	b.n	8007268 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 8007256:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800725a:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <fw_nav+0x17c>)
 800725c:	fb82 1203 	smull	r1, r2, r2, r3
 8007260:	1092      	asrs	r2, r2, #2
 8007262:	17db      	asrs	r3, r3, #31
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 8007268:	4b25      	ldr	r3, [pc, #148]	; (8007300 <fw_nav+0x188>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <fw_nav+0x18c>)
 800726e:	fb82 1203 	smull	r1, r2, r2, r3
 8007272:	1152      	asrs	r2, r2, #5
 8007274:	17db      	asrs	r3, r3, #31
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	b21a      	sxth	r2, r3
 800727a:	4b23      	ldr	r3, [pc, #140]	; (8007308 <fw_nav+0x190>)
 800727c:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <fw_nav+0x190>)
 8007280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007284:	b29a      	uxth	r2, r3
 8007286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800728e:	8b3a      	ldrh	r2, [r7, #24]
 8007290:	8afb      	ldrh	r3, [r7, #22]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	b21a      	sxth	r2, r3
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <fw_nav+0x194>)
 800729a:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 800729c:	4b1c      	ldr	r3, [pc, #112]	; (8007310 <fw_nav+0x198>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <fw_nav+0x19c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <fw_nav+0x1a0>)
 80072a8:	8812      	ldrh	r2, [r2, #0]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	f0c0 83e9 	bcc.w	8007a82 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 80072b0:	4b17      	ldr	r3, [pc, #92]	; (8007310 <fw_nav+0x198>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a17      	ldr	r2, [pc, #92]	; (8007314 <fw_nav+0x19c>)
 80072b6:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 80072b8:	4b14      	ldr	r3, [pc, #80]	; (800730c <fw_nav+0x194>)
 80072ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bfb8      	it	lt
 80072c2:	425b      	neglt	r3, r3
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d12a      	bne.n	8007320 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 80072ca:	4b04      	ldr	r3, [pc, #16]	; (80072dc <fw_nav+0x164>)
 80072cc:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80072d0:	b21a      	sxth	r2, r3
 80072d2:	4b12      	ldr	r3, [pc, #72]	; (800731c <fw_nav+0x1a4>)
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	e03f      	b.n	8007358 <fw_nav+0x1e0>
 80072d8:	20001816 	.word	0x20001816
 80072dc:	20000db4 	.word	0x20000db4
 80072e0:	20001758 	.word	0x20001758
 80072e4:	2000180a 	.word	0x2000180a
 80072e8:	200017ec 	.word	0x200017ec
 80072ec:	200017f8 	.word	0x200017f8
 80072f0:	20001720 	.word	0x20001720
 80072f4:	66666667 	.word	0x66666667
 80072f8:	20001a56 	.word	0x20001a56
 80072fc:	2000180c 	.word	0x2000180c
 8007300:	20001374 	.word	0x20001374
 8007304:	51eb851f 	.word	0x51eb851f
 8007308:	20000f1c 	.word	0x20000f1c
 800730c:	20000f1e 	.word	0x20000f1e
 8007310:	20001dd0 	.word	0x20001dd0
 8007314:	20000f20 	.word	0x20000f20
 8007318:	20000026 	.word	0x20000026
 800731c:	20000f24 	.word	0x20000f24
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007320:	4b99      	ldr	r3, [pc, #612]	; (8007588 <fw_nav+0x410>)
 8007322:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8007326:	461a      	mov	r2, r3
 8007328:	4b98      	ldr	r3, [pc, #608]	; (800758c <fw_nav+0x414>)
 800732a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800732e:	4619      	mov	r1, r3
 8007330:	4b95      	ldr	r3, [pc, #596]	; (8007588 <fw_nav+0x410>)
 8007332:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	4a92      	ldr	r2, [pc, #584]	; (8007588 <fw_nav+0x410>)
 800733e:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 8007342:	4611      	mov	r1, r2
 8007344:	4a90      	ldr	r2, [pc, #576]	; (8007588 <fw_nav+0x410>)
 8007346:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 800734a:	4618      	mov	r0, r3
 800734c:	f7fc fc5c 	bl	8003c08 <constrain>
 8007350:	4603      	mov	r3, r0
 8007352:	b21a      	sxth	r2, r3
 8007354:	4b8e      	ldr	r3, [pc, #568]	; (8007590 <fw_nav+0x418>)
 8007356:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 8007358:	4b8e      	ldr	r3, [pc, #568]	; (8007594 <fw_nav+0x41c>)
 800735a:	7cdb      	ldrb	r3, [r3, #19]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <fw_nav+0x1f8>
 8007360:	4b8a      	ldr	r3, [pc, #552]	; (800758c <fw_nav+0x414>)
 8007362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007366:	2b00      	cmp	r3, #0
 8007368:	db02      	blt.n	8007370 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 800736a:	4b8a      	ldr	r3, [pc, #552]	; (8007594 <fw_nav+0x41c>)
 800736c:	2200      	movs	r2, #0
 800736e:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 8007370:	4b88      	ldr	r3, [pc, #544]	; (8007594 <fw_nav+0x41c>)
 8007372:	79db      	ldrb	r3, [r3, #7]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d02c      	beq.n	80073d2 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 8007378:	4b86      	ldr	r3, [pc, #536]	; (8007594 <fw_nav+0x41c>)
 800737a:	7cdb      	ldrb	r3, [r3, #19]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d019      	beq.n	80073b4 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 8007380:	4b81      	ldr	r3, [pc, #516]	; (8007588 <fw_nav+0x410>)
 8007382:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	0352      	lsls	r2, r2, #13
 800738c:	1ad2      	subs	r2, r2, r3
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	b21a      	sxth	r2, r3
 8007398:	4b7c      	ldr	r3, [pc, #496]	; (800758c <fw_nav+0x414>)
 800739a:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 800739c:	4b7a      	ldr	r3, [pc, #488]	; (8007588 <fw_nav+0x410>)
 800739e:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80073a2:	b21a      	sxth	r2, r3
 80073a4:	4b7a      	ldr	r3, [pc, #488]	; (8007590 <fw_nav+0x418>)
 80073a6:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 80073a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80073ac:	2b18      	cmp	r3, #24
 80073ae:	dc01      	bgt.n	80073b4 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 80073b0:	2300      	movs	r3, #0
 80073b2:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 80073b4:	4b78      	ldr	r3, [pc, #480]	; (8007598 <fw_nav+0x420>)
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	2b31      	cmp	r3, #49	; 0x31
 80073ba:	d80a      	bhi.n	80073d2 <fw_nav+0x25a>
 80073bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80073c0:	7f7b      	ldrb	r3, [r7, #29]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	dd05      	ble.n	80073d2 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 80073c6:	4b75      	ldr	r3, [pc, #468]	; (800759c <fw_nav+0x424>)
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	7f7b      	ldrb	r3, [r7, #29]
 80073cc:	4413      	add	r3, r2
 80073ce:	4a74      	ldr	r2, [pc, #464]	; (80075a0 <fw_nav+0x428>)
 80073d0:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 80073d2:	4b70      	ldr	r3, [pc, #448]	; (8007594 <fw_nav+0x41c>)
 80073d4:	7c9b      	ldrb	r3, [r3, #18]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00e      	beq.n	80073f8 <fw_nav+0x280>
 80073da:	4b6f      	ldr	r3, [pc, #444]	; (8007598 <fw_nav+0x420>)
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	2b09      	cmp	r3, #9
 80073e0:	d80a      	bhi.n	80073f8 <fw_nav+0x280>
            f.ARMED = 0;
 80073e2:	4b6c      	ldr	r3, [pc, #432]	; (8007594 <fw_nav+0x41c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80073e8:	4b6a      	ldr	r3, [pc, #424]	; (8007594 <fw_nav+0x41c>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80073ee:	4b6b      	ldr	r3, [pc, #428]	; (800759c <fw_nav+0x424>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	3305      	adds	r3, #5
 80073f4:	4a6a      	ldr	r2, [pc, #424]	; (80075a0 <fw_nav+0x428>)
 80073f6:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80073f8:	4b67      	ldr	r3, [pc, #412]	; (8007598 <fw_nav+0x420>)
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	2b09      	cmp	r3, #9
 80073fe:	d80e      	bhi.n	800741e <fw_nav+0x2a6>
            navDiff *= 0.1f;
 8007400:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800740c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80075a4 <fw_nav+0x42c>
 8007410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007418:	ee17 3a90 	vmov	r3, s15
 800741c:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 800741e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007422:	2264      	movs	r2, #100	; 0x64
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	4618      	mov	r0, r3
 800742a:	f002 f90f 	bl	800964c <wrap_18000>
 800742e:	4603      	mov	r3, r0
 8007430:	4a5d      	ldr	r2, [pc, #372]	; (80075a8 <fw_nav+0x430>)
 8007432:	fb82 1203 	smull	r1, r2, r2, r3
 8007436:	1152      	asrs	r2, r2, #5
 8007438:	17db      	asrs	r3, r3, #31
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 800743e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfb8      	it	lt
 8007446:	425b      	neglt	r3, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	2baa      	cmp	r3, #170	; 0xaa
 800744c:	d901      	bls.n	8007452 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 800744e:	23af      	movs	r3, #175	; 0xaf
 8007450:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 8007452:	4b56      	ldr	r3, [pc, #344]	; (80075ac <fw_nav+0x434>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b56      	ldr	r3, [pc, #344]	; (80075b0 <fw_nav+0x438>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007464:	eddf 6a53 	vldr	s13, [pc, #332]	; 80075b4 <fw_nav+0x43c>
 8007468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800746c:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 8007470:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <fw_nav+0x434>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a4e      	ldr	r2, [pc, #312]	; (80075b0 <fw_nav+0x438>)
 8007476:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 8007478:	4b44      	ldr	r3, [pc, #272]	; (800758c <fw_nav+0x414>)
 800747a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	425b      	neglt	r3, r3
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d809      	bhi.n	800749e <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 800748a:	4b4b      	ldr	r3, [pc, #300]	; (80075b8 <fw_nav+0x440>)
 800748c:	ed93 7a00 	vldr	s14, [r3]
 8007490:	edd7 7a04 	vldr	s15, [r7, #16]
 8007494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <fw_nav+0x440>)
 800749a:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800749e:	4b3b      	ldr	r3, [pc, #236]	; (800758c <fw_nav+0x414>)
 80074a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	0092      	lsls	r2, r2, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	b21a      	sxth	r2, r3
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <fw_nav+0x414>)
 80074b4:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 80074b6:	4b35      	ldr	r3, [pc, #212]	; (800758c <fw_nav+0x414>)
 80074b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074c4:	4b3d      	ldr	r3, [pc, #244]	; (80075bc <fw_nav+0x444>)
 80074c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80074ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80074d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074d6:	4b38      	ldr	r3, [pc, #224]	; (80075b8 <fw_nav+0x440>)
 80074d8:	edd3 7a00 	vldr	s15, [r3]
 80074dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e0:	4b35      	ldr	r3, [pc, #212]	; (80075b8 <fw_nav+0x440>)
 80074e2:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80074e6:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <fw_nav+0x440>)
 80074e8:	edd3 7a00 	vldr	s15, [r3]
 80074ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80074f4:	4932      	ldr	r1, [pc, #200]	; (80075c0 <fw_nav+0x448>)
 80074f6:	ee17 0a90 	vmov	r0, s15
 80074fa:	f7fc fb85 	bl	8003c08 <constrain>
 80074fe:	ee07 0a90 	vmov	s15, r0
 8007502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007506:	4b2c      	ldr	r3, [pc, #176]	; (80075b8 <fw_nav+0x440>)
 8007508:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 800750c:	4b1f      	ldr	r3, [pc, #124]	; (800758c <fw_nav+0x414>)
 800750e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007512:	b29a      	uxth	r2, r3
 8007514:	4b2b      	ldr	r3, [pc, #172]	; (80075c4 <fw_nav+0x44c>)
 8007516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800751a:	b29b      	uxth	r3, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	b21b      	sxth	r3, r3
 8007522:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 8007524:	4b19      	ldr	r3, [pc, #100]	; (800758c <fw_nav+0x414>)
 8007526:	f9b3 2000 	ldrsh.w	r2, [r3]
 800752a:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <fw_nav+0x44c>)
 800752c:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 800752e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfb8      	it	lt
 8007536:	425b      	neglt	r3, r3
 8007538:	b29b      	uxth	r3, r3
 800753a:	2b64      	cmp	r3, #100	; 0x64
 800753c:	d901      	bls.n	8007542 <fw_nav+0x3ca>
            delta[0] = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 8007542:	2300      	movs	r3, #0
 8007544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007548:	e00f      	b.n	800756a <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 800754a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007554:	491c      	ldr	r1, [pc, #112]	; (80075c8 <fw_nav+0x450>)
 8007556:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800755a:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <fw_nav+0x450>)
 800755c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007564:	3301      	adds	r3, #1
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800756e:	2b04      	cmp	r3, #4
 8007570:	d9eb      	bls.n	800754a <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 8007572:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <fw_nav+0x450>)
 8007578:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <fw_nav+0x454>)
 800757c:	2200      	movs	r2, #0
 800757e:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007586:	e037      	b.n	80075f8 <fw_nav+0x480>
 8007588:	20000db4 	.word	0x20000db4
 800758c:	20000f1e 	.word	0x20000f1e
 8007590:	20000f24 	.word	0x20000f24
 8007594:	20001720 	.word	0x20001720
 8007598:	20001806 	.word	0x20001806
 800759c:	200017ec 	.word	0x200017ec
 80075a0:	200017f8 	.word	0x200017f8
 80075a4:	3dcccccd 	.word	0x3dcccccd
 80075a8:	51eb851f 	.word	0x51eb851f
 80075ac:	20001dd0 	.word	0x20001dd0
 80075b0:	20000f28 	.word	0x20000f28
 80075b4:	447a0000 	.word	0x447a0000
 80075b8:	20000ef8 	.word	0x20000ef8
 80075bc:	20001270 	.word	0x20001270
 80075c0:	fffffe0c 	.word	0xfffffe0c
 80075c4:	20000efc 	.word	0x20000efc
 80075c8:	20000f04 	.word	0x20000f04
 80075cc:	20000f2c 	.word	0x20000f2c
            ALT_deltaSum += altHist[i];
 80075d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d4:	4a64      	ldr	r2, [pc, #400]	; (8007768 <fw_nav+0x5f0>)
 80075d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	4b63      	ldr	r3, [pc, #396]	; (800776c <fw_nav+0x5f4>)
 80075de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b21a      	sxth	r2, r3
 80075ea:	4b60      	ldr	r3, [pc, #384]	; (800776c <fw_nav+0x5f4>)
 80075ec:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f2:	3301      	adds	r3, #1
 80075f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d9e7      	bls.n	80075d0 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 8007600:	4b5a      	ldr	r3, [pc, #360]	; (800776c <fw_nav+0x5f4>)
 8007602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800760e:	4b58      	ldr	r3, [pc, #352]	; (8007770 <fw_nav+0x5f8>)
 8007610:	edd3 7a02 	vldr	s15, [r3, #8]
 8007614:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007618:	ed97 7a04 	vldr	s14, [r7, #16]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007624:	ee17 3a90 	vmov	r3, s15
 8007628:	b21a      	sxth	r2, r3
 800762a:	4b50      	ldr	r3, [pc, #320]	; (800776c <fw_nav+0x5f4>)
 800762c:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 800762e:	4b51      	ldr	r3, [pc, #324]	; (8007774 <fw_nav+0x5fc>)
 8007630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800763c:	4b4c      	ldr	r3, [pc, #304]	; (8007770 <fw_nav+0x5f8>)
 800763e:	edd3 7a00 	vldr	s15, [r3]
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800764a:	ee17 3a90 	vmov	r3, s15
 800764e:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 8007650:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800765c:	4b46      	ldr	r3, [pc, #280]	; (8007778 <fw_nav+0x600>)
 800765e:	edd3 7a00 	vldr	s15, [r3]
 8007662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800766a:	ee17 3a90 	vmov	r3, s15
 800766e:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 8007670:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfb8      	it	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d809      	bhi.n	8007694 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 8007680:	4b3e      	ldr	r3, [pc, #248]	; (800777c <fw_nav+0x604>)
 8007682:	ed93 7a00 	vldr	s14, [r3]
 8007686:	edd7 7a04 	vldr	s15, [r7, #16]
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	4b3b      	ldr	r3, [pc, #236]	; (800777c <fw_nav+0x604>)
 8007690:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007696:	461a      	mov	r2, r3
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4413      	add	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	b29b      	uxth	r3, r3
 80076a0:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 80076a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ae:	4b34      	ldr	r3, [pc, #208]	; (8007780 <fw_nav+0x608>)
 80076b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80076b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80076bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076c0:	4b2e      	ldr	r3, [pc, #184]	; (800777c <fw_nav+0x604>)
 80076c2:	edd3 7a00 	vldr	s15, [r3]
 80076c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076ca:	4b2c      	ldr	r3, [pc, #176]	; (800777c <fw_nav+0x604>)
 80076cc:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <fw_nav+0x604>)
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80076de:	4929      	ldr	r1, [pc, #164]	; (8007784 <fw_nav+0x60c>)
 80076e0:	ee17 0a90 	vmov	r0, s15
 80076e4:	f7fc fa90 	bl	8003c08 <constrain>
 80076e8:	ee07 0a90 	vmov	s15, r0
 80076ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f0:	4b22      	ldr	r3, [pc, #136]	; (800777c <fw_nav+0x604>)
 80076f2:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80076f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076f8:	4b23      	ldr	r3, [pc, #140]	; (8007788 <fw_nav+0x610>)
 80076fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	b29b      	uxth	r3, r3
 8007704:	b21b      	sxth	r3, r3
 8007706:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 8007708:	4a1f      	ldr	r2, [pc, #124]	; (8007788 <fw_nav+0x610>)
 800770a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800770c:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 800770e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfb8      	it	lt
 8007716:	425b      	neglt	r3, r3
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b64      	cmp	r3, #100	; 0x64
 800771c:	d901      	bls.n	8007722 <fw_nav+0x5aa>
            delta[1] = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007722:	2300      	movs	r3, #0
 8007724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007728:	e00f      	b.n	800774a <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 800772a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007734:	4915      	ldr	r1, [pc, #84]	; (800778c <fw_nav+0x614>)
 8007736:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800773a:	4a14      	ldr	r2, [pc, #80]	; (800778c <fw_nav+0x614>)
 800773c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007744:	3301      	adds	r3, #1
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800774e:	2b04      	cmp	r3, #4
 8007750:	d9eb      	bls.n	800772a <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 8007752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <fw_nav+0x614>)
 8007758:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <fw_nav+0x618>)
 800775c:	2200      	movs	r2, #0
 800775e:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007766:	e029      	b.n	80077bc <fw_nav+0x644>
 8007768:	20000f04 	.word	0x20000f04
 800776c:	20000f2c 	.word	0x20000f2c
 8007770:	20001270 	.word	0x20001270
 8007774:	20000f1e 	.word	0x20000f1e
 8007778:	20000ef8 	.word	0x20000ef8
 800777c:	20000ef4 	.word	0x20000ef4
 8007780:	20001260 	.word	0x20001260
 8007784:	fffffe0c 	.word	0xfffffe0c
 8007788:	20000efe 	.word	0x20000efe
 800778c:	20000f10 	.word	0x20000f10
 8007790:	20000f2e 	.word	0x20000f2e
            NAV_deltaSum += navDif[i];
 8007794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007798:	4abc      	ldr	r2, [pc, #752]	; (8007a8c <fw_nav+0x914>)
 800779a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	4bbb      	ldr	r3, [pc, #748]	; (8007a90 <fw_nav+0x918>)
 80077a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	b21a      	sxth	r2, r3
 80077ae:	4bb8      	ldr	r3, [pc, #736]	; (8007a90 <fw_nav+0x918>)
 80077b0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b6:	3301      	adds	r3, #1
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d9e7      	bls.n	8007794 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 80077c4:	4bb2      	ldr	r3, [pc, #712]	; (8007a90 <fw_nav+0x918>)
 80077c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077d2:	4bb0      	ldr	r3, [pc, #704]	; (8007a94 <fw_nav+0x91c>)
 80077d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80077d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80077dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80077e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077e8:	ee17 3a90 	vmov	r3, s15
 80077ec:	b21a      	sxth	r2, r3
 80077ee:	4ba8      	ldr	r3, [pc, #672]	; (8007a90 <fw_nav+0x918>)
 80077f0:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80077f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077fe:	4ba5      	ldr	r3, [pc, #660]	; (8007a94 <fw_nav+0x91c>)
 8007800:	edd3 7a00 	vldr	s15, [r3]
 8007804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800780c:	ee17 3a90 	vmov	r3, s15
 8007810:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 8007812:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800781e:	4b9e      	ldr	r3, [pc, #632]	; (8007a98 <fw_nav+0x920>)
 8007820:	edd3 7a00 	vldr	s15, [r3]
 8007824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800782c:	ee17 3a90 	vmov	r3, s15
 8007830:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 8007832:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007836:	4a99      	ldr	r2, [pc, #612]	; (8007a9c <fw_nav+0x924>)
 8007838:	fb82 1203 	smull	r1, r2, r2, r3
 800783c:	1092      	asrs	r2, r2, #2
 800783e:	17db      	asrs	r3, r3, #31
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	b21b      	sxth	r3, r3
 8007844:	4618      	mov	r0, r3
 8007846:	4b96      	ldr	r3, [pc, #600]	; (8007aa0 <fw_nav+0x928>)
 8007848:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 800784c:	461a      	mov	r2, r3
 800784e:	f06f 0309 	mvn.w	r3, #9
 8007852:	fb03 f102 	mul.w	r1, r3, r2
 8007856:	4b92      	ldr	r3, [pc, #584]	; (8007aa0 <fw_nav+0x928>)
 8007858:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 800785c:	461a      	mov	r2, r3
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	461a      	mov	r2, r3
 8007868:	f7fc f9ce 	bl	8003c08 <constrain>
 800786c:	4603      	mov	r3, r0
 800786e:	b29a      	uxth	r2, r3
 8007870:	4b8c      	ldr	r3, [pc, #560]	; (8007aa4 <fw_nav+0x92c>)
 8007872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007876:	b29b      	uxth	r3, r3
 8007878:	4413      	add	r3, r2
 800787a:	b29b      	uxth	r3, r3
 800787c:	b21a      	sxth	r2, r3
 800787e:	4b8a      	ldr	r3, [pc, #552]	; (8007aa8 <fw_nav+0x930>)
 8007880:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007882:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007886:	4a85      	ldr	r2, [pc, #532]	; (8007a9c <fw_nav+0x924>)
 8007888:	fb82 1203 	smull	r1, r2, r2, r3
 800788c:	1092      	asrs	r2, r2, #2
 800788e:	17db      	asrs	r3, r3, #31
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	b21b      	sxth	r3, r3
 8007894:	4618      	mov	r0, r3
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <fw_nav+0x928>)
 8007898:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 800789c:	461a      	mov	r2, r3
 800789e:	f06f 0309 	mvn.w	r3, #9
 80078a2:	fb03 f102 	mul.w	r1, r3, r2
 80078a6:	4b7e      	ldr	r3, [pc, #504]	; (8007aa0 <fw_nav+0x928>)
 80078a8:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 80078ac:	461a      	mov	r2, r3
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fc f9a6 	bl	8003c08 <constrain>
 80078bc:	4603      	mov	r3, r0
 80078be:	b29a      	uxth	r2, r3
 80078c0:	4b73      	ldr	r3, [pc, #460]	; (8007a90 <fw_nav+0x918>)
 80078c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	b21a      	sxth	r2, r3
 80078ce:	4b76      	ldr	r3, [pc, #472]	; (8007aa8 <fw_nav+0x930>)
 80078d0:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 80078d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078d6:	4a71      	ldr	r2, [pc, #452]	; (8007a9c <fw_nav+0x924>)
 80078d8:	fb82 1203 	smull	r1, r2, r2, r3
 80078dc:	1092      	asrs	r2, r2, #2
 80078de:	17db      	asrs	r3, r3, #31
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	b21b      	sxth	r3, r3
 80078e4:	4618      	mov	r0, r3
 80078e6:	4b6e      	ldr	r3, [pc, #440]	; (8007aa0 <fw_nav+0x928>)
 80078e8:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80078ec:	461a      	mov	r2, r3
 80078ee:	f06f 0309 	mvn.w	r3, #9
 80078f2:	fb03 f102 	mul.w	r1, r3, r2
 80078f6:	4b6a      	ldr	r3, [pc, #424]	; (8007aa0 <fw_nav+0x928>)
 80078f8:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80078fc:	461a      	mov	r2, r3
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	461a      	mov	r2, r3
 8007908:	f7fc f97e 	bl	8003c08 <constrain>
 800790c:	4603      	mov	r3, r0
 800790e:	b29a      	uxth	r2, r3
 8007910:	4b5f      	ldr	r3, [pc, #380]	; (8007a90 <fw_nav+0x918>)
 8007912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007916:	b29b      	uxth	r3, r3
 8007918:	4413      	add	r3, r2
 800791a:	b29b      	uxth	r3, r3
 800791c:	b21a      	sxth	r2, r3
 800791e:	4b62      	ldr	r3, [pc, #392]	; (8007aa8 <fw_nav+0x930>)
 8007920:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 8007922:	4b62      	ldr	r3, [pc, #392]	; (8007aac <fw_nav+0x934>)
 8007924:	7c5b      	ldrb	r3, [r3, #17]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 800792a:	4b5f      	ldr	r3, [pc, #380]	; (8007aa8 <fw_nav+0x930>)
 800792c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007930:	4618      	mov	r0, r3
 8007932:	4b5b      	ldr	r3, [pc, #364]	; (8007aa0 <fw_nav+0x928>)
 8007934:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007938:	4259      	negs	r1, r3
 800793a:	4b59      	ldr	r3, [pc, #356]	; (8007aa0 <fw_nav+0x928>)
 800793c:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007940:	461a      	mov	r2, r3
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	461a      	mov	r2, r3
 800794c:	f7fc f95c 	bl	8003c08 <constrain>
 8007950:	4603      	mov	r3, r0
 8007952:	b21a      	sxth	r2, r3
 8007954:	4b54      	ldr	r3, [pc, #336]	; (8007aa8 <fw_nav+0x930>)
 8007956:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007958:	4b54      	ldr	r3, [pc, #336]	; (8007aac <fw_nav+0x934>)
 800795a:	7cdb      	ldrb	r3, [r3, #19]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11b      	bne.n	8007998 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 8007960:	4b51      	ldr	r3, [pc, #324]	; (8007aa8 <fw_nav+0x930>)
 8007962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007966:	b29a      	uxth	r2, r3
 8007968:	4b51      	ldr	r3, [pc, #324]	; (8007ab0 <fw_nav+0x938>)
 800796a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfb8      	it	lt
 8007972:	425b      	neglt	r3, r3
 8007974:	b299      	uxth	r1, r3
 8007976:	4b4a      	ldr	r3, [pc, #296]	; (8007aa0 <fw_nav+0x928>)
 8007978:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800797c:	484d      	ldr	r0, [pc, #308]	; (8007ab4 <fw_nav+0x93c>)
 800797e:	fba0 0303 	umull	r0, r3, r0, r3
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	b2db      	uxtb	r3, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	fb11 f303 	smulbb	r3, r1, r3
 800798c:	b29b      	uxth	r3, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	b29b      	uxth	r3, r3
 8007992:	b21a      	sxth	r2, r3
 8007994:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <fw_nav+0x930>)
 8007996:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007998:	4b45      	ldr	r3, [pc, #276]	; (8007ab0 <fw_nav+0x938>)
 800799a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80079aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b2:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80079b6:	2100      	movs	r1, #0
 80079b8:	ee17 0a90 	vmov	r0, s15
 80079bc:	f7fc f924 	bl	8003c08 <constrain>
 80079c0:	4601      	mov	r1, r0
 80079c2:	4b3d      	ldr	r3, [pc, #244]	; (8007ab8 <fw_nav+0x940>)
 80079c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	b28b      	uxth	r3, r1
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	b21a      	sxth	r2, r3
 80079d2:	4b39      	ldr	r3, [pc, #228]	; (8007ab8 <fw_nav+0x940>)
 80079d4:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <fw_nav+0x944>)
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 80079dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079e0:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079ec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007ac0 <fw_nav+0x948>
 80079f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079f8:	ee17 3a90 	vmov	r3, s15
 80079fc:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 80079fe:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <fw_nav+0x944>)
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007a06:	d305      	bcc.n	8007a14 <fw_nav+0x89c>
 8007a08:	4b2c      	ldr	r3, [pc, #176]	; (8007abc <fw_nav+0x944>)
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f240 2226 	movw	r2, #550	; 0x226
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d90a      	bls.n	8007a2a <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <fw_nav+0x94c>)
 8007a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	b21a      	sxth	r2, r3
 8007a26:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <fw_nav+0x94c>)
 8007a28:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007a2a:	4b26      	ldr	r3, [pc, #152]	; (8007ac4 <fw_nav+0x94c>)
 8007a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007a34:	2100      	movs	r1, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fc f8e6 	bl	8003c08 <constrain>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	b21a      	sxth	r2, r3
 8007a40:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <fw_nav+0x94c>)
 8007a42:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007a44:	4b1c      	ldr	r3, [pc, #112]	; (8007ab8 <fw_nav+0x940>)
 8007a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <fw_nav+0x94c>)
 8007a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	b21a      	sxth	r2, r3
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <fw_nav+0x940>)
 8007a5c:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <fw_nav+0x940>)
 8007a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a64:	4618      	mov	r0, r3
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <fw_nav+0x928>)
 8007a68:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <fw_nav+0x928>)
 8007a70:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007a74:	461a      	mov	r2, r3
 8007a76:	f7fc f8c7 	bl	8003c08 <constrain>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	b21a      	sxth	r2, r3
 8007a7e:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <fw_nav+0x940>)
 8007a80:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007a82:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <fw_nav+0x934>)
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d122      	bne.n	8007ad0 <fw_nav+0x958>
 8007a8a:	e01d      	b.n	8007ac8 <fw_nav+0x950>
 8007a8c:	20000f10 	.word	0x20000f10
 8007a90:	20000f2e 	.word	0x20000f2e
 8007a94:	20001260 	.word	0x20001260
 8007a98:	20000ef4 	.word	0x20000ef4
 8007a9c:	66666667 	.word	0x66666667
 8007aa0:	20000db4 	.word	0x20000db4
 8007aa4:	20000f2c 	.word	0x20000f2c
 8007aa8:	20001810 	.word	0x20001810
 8007aac:	20001720 	.word	0x20001720
 8007ab0:	200014c8 	.word	0x200014c8
 8007ab4:	51eb851f 	.word	0x51eb851f
 8007ab8:	20000f24 	.word	0x20000f24
 8007abc:	2000180c 	.word	0x2000180c
 8007ac0:	3dcccccd 	.word	0x3dcccccd
 8007ac4:	20000f00 	.word	0x20000f00
 8007ac8:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <fw_nav+0x9ac>)
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <fw_nav+0x968>
 8007ad0:	4b14      	ldr	r3, [pc, #80]	; (8007b24 <fw_nav+0x9ac>)
 8007ad2:	7a9b      	ldrb	r3, [r3, #10]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00f      	beq.n	8007af8 <fw_nav+0x980>
 8007ad8:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <fw_nav+0x9ac>)
 8007ada:	7c9b      	ldrb	r3, [r3, #18]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007ae0:	4a11      	ldr	r2, [pc, #68]	; (8007b28 <fw_nav+0x9b0>)
 8007ae2:	8b7b      	ldrh	r3, [r7, #26]
 8007ae4:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <fw_nav+0x9b4>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <fw_nav+0x9b4>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007af2:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <fw_nav+0x9b4>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <fw_nav+0x9b0>)
 8007afa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <fw_nav+0x9b8>)
 8007b00:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <fw_nav+0x9b8>)
 8007b04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <fw_nav+0x9b4>)
 8007b0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	b21a      	sxth	r2, r3
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <fw_nav+0x9b8>)
 8007b1a:	809a      	strh	r2, [r3, #4]
}
 8007b1c:	bf00      	nop
 8007b1e:	3728      	adds	r7, #40	; 0x28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20001720 	.word	0x20001720
 8007b28:	20000f24 	.word	0x20000f24
 8007b2c:	20001810 	.word	0x20001810
 8007b30:	2000177c 	.word	0x2000177c

08007b34 <gpsSetState>:
static PifGpsNmea gps_nmea;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007b3e:	4a0b      	ldr	r2, [pc, #44]	; (8007b6c <gpsSetState+0x38>)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <gpsSetState+0x38>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007b4a:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <gpsSetState+0x3c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a07      	ldr	r2, [pc, #28]	; (8007b6c <gpsSetState+0x38>)
 8007b50:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <gpsSetState+0x38>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <gpsSetState+0x38>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	761a      	strb	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000f30 	.word	0x20000f30
 8007b70:	20001dd0 	.word	0x20001dd0

08007b74 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <_evtGpsUbloxCfgResult+0x16>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <_evtGpsUbloxCfgResult+0x18>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	4a03      	ldr	r2, [pc, #12]	; (8007b9c <_evtGpsUbloxCfgResult+0x28>)
 8007b8e:	61d3      	str	r3, [r2, #28]
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000f30 	.word	0x20000f30

08007ba0 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4b5c      	ldr	r3, [pc, #368]	; (8007d28 <_evtGpsReceive+0x188>)
 8007bb8:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007bba:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <_evtGpsReceive+0x188>)
 8007bbc:	7adb      	ldrb	r3, [r3, #11]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d049      	beq.n	8007c56 <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007bc8:	a355      	add	r3, pc, #340	; (adr r3, 8007d20 <_evtGpsReceive+0x180>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fcc7 	bl	8000560 <__aeabi_dmul>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 ff5b 	bl	8000a94 <__aeabi_d2iz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	4a52      	ldr	r2, [pc, #328]	; (8007d2c <_evtGpsReceive+0x18c>)
 8007be2:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007bea:	a34d      	add	r3, pc, #308	; (adr r3, 8007d20 <_evtGpsReceive+0x180>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fcb6 	bl	8000560 <__aeabi_dmul>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	f7f8 ff4a 	bl	8000a94 <__aeabi_d2iz>
 8007c00:	4603      	mov	r3, r0
 8007c02:	4a4a      	ldr	r2, [pc, #296]	; (8007d2c <_evtGpsReceive+0x18c>)
 8007c04:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007c0c:	4b48      	ldr	r3, [pc, #288]	; (8007d30 <_evtGpsReceive+0x190>)
 8007c0e:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f7f8 ff63 	bl	8000ae4 <__aeabi_d2uiz>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	4b44      	ldr	r3, [pc, #272]	; (8007d34 <_evtGpsReceive+0x194>)
 8007c24:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007c26:	2004      	movs	r0, #4
 8007c28:	f7ff f92c 	bl	8006e84 <sensors>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f083 0301 	eor.w	r3, r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <_evtGpsReceive+0xb6>
 8007c38:	4b3b      	ldr	r3, [pc, #236]	; (8007d28 <_evtGpsReceive+0x188>)
 8007c3a:	7c1b      	ldrb	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007c40:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <_evtGpsReceive+0x194>)
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b3c      	ldr	r3, [pc, #240]	; (8007d38 <_evtGpsReceive+0x198>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2264      	movs	r2, #100	; 0x64
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	4a3a      	ldr	r2, [pc, #232]	; (8007d3c <_evtGpsReceive+0x19c>)
 8007c54:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <_evtGpsReceive+0x1a0>)
 8007c62:	f7f8 fda7 	bl	80007b4 <__aeabi_ddiv>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f7f8 ff39 	bl	8000ae4 <__aeabi_d2uiz>
 8007c72:	4603      	mov	r3, r0
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	4b33      	ldr	r3, [pc, #204]	; (8007d44 <_evtGpsReceive+0x1a4>)
 8007c78:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	4b2e      	ldr	r3, [pc, #184]	; (8007d40 <_evtGpsReceive+0x1a0>)
 8007c86:	f7f8 fc6b 	bl	8000560 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	f7f8 ff27 	bl	8000ae4 <__aeabi_d2uiz>
 8007c96:	4603      	mov	r3, r0
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <_evtGpsReceive+0x1a8>)
 8007c9c:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007c9e:	2008      	movs	r0, #8
 8007ca0:	f7ff f8f0 	bl	8006e84 <sensors>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d021      	beq.n	8007cf4 <_evtGpsReceive+0x154>
 8007cb0:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <_evtGpsReceive+0x1a4>)
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d91d      	bls.n	8007cf4 <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007cb8:	4b23      	ldr	r3, [pc, #140]	; (8007d48 <_evtGpsReceive+0x1a8>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fcc0 	bl	800964c <wrap_18000>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	4a1f      	ldr	r2, [pc, #124]	; (8007d4c <_evtGpsReceive+0x1ac>)
 8007cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8007cd4:	1092      	asrs	r2, r2, #2
 8007cd6:	17db      	asrs	r3, r3, #31
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <_evtGpsReceive+0x1a8>)
 8007cde:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <_evtGpsReceive+0x1a8>)
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	4a1a      	ldr	r2, [pc, #104]	; (8007d50 <_evtGpsReceive+0x1b0>)
 8007ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cea:	08db      	lsrs	r3, r3, #3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	b21a      	sxth	r2, r3
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <_evtGpsReceive+0x1b4>)
 8007cf2:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <_evtGpsReceive+0x1b8>)
 8007cfa:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <_evtGpsReceive+0x1bc>)
 8007d02:	6013      	str	r3, [r2, #0]

    pifTask_SetTrigger(g_task_gps);
 8007d04:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <_evtGpsReceive+0x1c0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f00c fc7d 	bl	8014608 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <_evtGpsReceive+0x1c4>)
 8007d10:	2201      	movs	r2, #1
 8007d12:	761a      	strb	r2, [r3, #24]
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	f3af 8000 	nop.w
 8007d20:	00000000 	.word	0x00000000
 8007d24:	416312d0 	.word	0x416312d0
 8007d28:	20001720 	.word	0x20001720
 8007d2c:	200017e4 	.word	0x200017e4
 8007d30:	20001804 	.word	0x20001804
 8007d34:	2000180a 	.word	0x2000180a
 8007d38:	200017ec 	.word	0x200017ec
 8007d3c:	2000148c 	.word	0x2000148c
 8007d40:	40240000 	.word	0x40240000
 8007d44:	2000180c 	.word	0x2000180c
 8007d48:	20001816 	.word	0x20001816
 8007d4c:	66666667 	.word	0x66666667
 8007d50:	cccccccd 	.word	0xcccccccd
 8007d54:	20001a56 	.word	0x20001a56
 8007d58:	200018b4 	.word	0x200018b4
 8007d5c:	200018b8 	.word	0x200018b8
 8007d60:	20001580 	.word	0x20001580
 8007d64:	20000f30 	.word	0x20000f30

08007d68 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <_evtGpsTimeout+0x44>)
 8007d72:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <_evtGpsTimeout+0x24>
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <_evtGpsTimeout+0x48>)
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	4a0d      	ldr	r2, [pc, #52]	; (8007db4 <_evtGpsTimeout+0x4c>)
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	4413      	add	r3, r2
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007d8a:	d005      	beq.n	8007d98 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <_evtGpsTimeout+0x50>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fa fc3e 	bl	8002614 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007d98:	2020      	movs	r0, #32
 8007d9a:	f7ff f89b 	bl	8006ed4 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007d9e:	2006      	movs	r0, #6
 8007da0:	f7ff fec8 	bl	8007b34 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
#endif
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000848 	.word	0x20000848
 8007db0:	20000f30 	.word	0x20000f30
 8007db4:	08028c54 	.word	0x08028c54
 8007db8:	20000790 	.word	0x20000790

08007dbc <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f7ff feb1 	bl	8007b34 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007dd2:	4a32      	ldr	r2, [pc, #200]	; (8007e9c <gpsInit+0xe0>)
 8007dd4:	79bb      	ldrb	r3, [r7, #6]
 8007dd6:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007dd8:	4b31      	ldr	r3, [pc, #196]	; (8007ea0 <gpsInit+0xe4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a2f      	ldr	r2, [pc, #188]	; (8007e9c <gpsInit+0xe0>)
 8007dde:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007de0:	4b2e      	ldr	r3, [pc, #184]	; (8007e9c <gpsInit+0xe0>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007de6:	f000 fef5 	bl	8008bd4 <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 5);    // signal GPS "thread" to initialize when it gets to it, 5ms
 8007dea:	79f8      	ldrb	r0, [r7, #7]
 8007dec:	2305      	movs	r3, #5
 8007dee:	2203      	movs	r2, #3
 8007df0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007df4:	f7fa fa82 	bl	80022fc <uartOpen>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ea4 <gpsInit+0xe8>)
 8007dfc:	6093      	str	r3, [r2, #8]
    if (mcfg.gps_type == GPS_NMEA && gpsInitData[baudrateIndex].baudrate == 9600) {
 8007dfe:	4b2a      	ldr	r3, [pc, #168]	; (8007ea8 <gpsInit+0xec>)
 8007e00:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d125      	bne.n	8007e54 <gpsInit+0x98>
 8007e08:	79bb      	ldrb	r3, [r7, #6]
 8007e0a:	4a28      	ldr	r2, [pc, #160]	; (8007eac <gpsInit+0xf0>)
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007e16:	d11d      	bne.n	8007e54 <gpsInit+0x98>
    	serialStartReceiveFunc(&core.gpsport->comm);
 8007e18:	4b22      	ldr	r3, [pc, #136]	; (8007ea4 <gpsInit+0xe8>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fa fbd8 	bl	80025d4 <serialStartReceiveFunc>

        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007e24:	2100      	movs	r1, #0
 8007e26:	4822      	ldr	r0, [pc, #136]	; (8007eb0 <gpsInit+0xf4>)
 8007e28:	f00e fc68 	bl	80166fc <pifGpsNmea_Init>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d02e      	beq.n	8007e90 <gpsInit+0xd4>
        gps_nmea._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007e32:	4b1f      	ldr	r3, [pc, #124]	; (8007eb0 <gpsInit+0xf4>)
 8007e34:	2203      	movs	r2, #3
 8007e36:	701a      	strb	r2, [r3, #0]
        pifGpsNmea_AttachComm(&gps_nmea, &core.gpsport->comm);
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <gpsInit+0xe8>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	481b      	ldr	r0, [pc, #108]	; (8007eb0 <gpsInit+0xf4>)
 8007e42:	f00e fc91 	bl	8016768 <pifGpsNmea_AttachComm>
        gps_nmea._gps.evt_receive = _evtGpsReceive;
 8007e46:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <gpsInit+0xf4>)
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <gpsInit+0xf8>)
 8007e4a:	605a      	str	r2, [r3, #4]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_CONFIGURATION);
 8007e4c:	2004      	movs	r0, #4
 8007e4e:	f7ff fe71 	bl	8007b34 <gpsSetState>
 8007e52:	e013      	b.n	8007e7c <gpsInit+0xc0>
    }
    else {
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007e54:	2100      	movs	r1, #0
 8007e56:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <gpsInit+0xfc>)
 8007e58:	f00f f9e0 	bl	801721c <pifGpsUblox_Init>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d018      	beq.n	8007e94 <gpsInit+0xd8>
        pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <gpsInit+0xe8>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4813      	ldr	r0, [pc, #76]	; (8007eb8 <gpsInit+0xfc>)
 8007e6c:	f00f fa24 	bl	80172b8 <pifGpsUblox_AttachComm>
        gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007e70:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <gpsInit+0xfc>)
 8007e72:	4a10      	ldr	r2, [pc, #64]	; (8007eb4 <gpsInit+0xf8>)
 8007e74:	615a      	str	r2, [r3, #20]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_INITIALIZING);
 8007e76:	2001      	movs	r0, #1
 8007e78:	f7ff fe5c 	bl	8007b34 <gpsSetState>
    }

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <gpsInit+0xec>)
 8007e7e:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	dd07      	ble.n	8007e96 <gpsInit+0xda>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <gpsInit+0xec>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8007e8e:	e002      	b.n	8007e96 <gpsInit+0xda>
        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007e90:	bf00      	nop
 8007e92:	e000      	b.n	8007e96 <gpsInit+0xda>
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007e94:	bf00      	nop
}
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000f30 	.word	0x20000f30
 8007ea0:	20001dd0 	.word	0x20001dd0
 8007ea4:	20000790 	.word	0x20000790
 8007ea8:	20000848 	.word	0x20000848
 8007eac:	08028c54 	.word	0x08028c54
 8007eb0:	20000f50 	.word	0x20000f50
 8007eb4:	08007ba1 	.word	0x08007ba1
 8007eb8:	20000fc0 	.word	0x20000fc0

08007ebc <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
    if (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <gpsInitNmea+0x44>)
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	; (8007f04 <gpsInitNmea+0x48>)
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4413      	add	r3, r2
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007ed0:	d107      	bne.n	8007ee2 <gpsInitNmea+0x26>
        pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <gpsInitNmea+0x4c>)
 8007ed4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007ed8:	490c      	ldr	r1, [pc, #48]	; (8007f0c <gpsInitNmea+0x50>)
 8007eda:	480d      	ldr	r0, [pc, #52]	; (8007f10 <gpsInitNmea+0x54>)
 8007edc:	f00d fed2 	bl	8015c84 <pifGps_SetTimeout>
 8007ee0:	e009      	b.n	8007ef6 <gpsInitNmea+0x3a>
    }
    else {
        gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <gpsInitNmea+0x58>)
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	741a      	strb	r2, [r3, #16]
        pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <gpsInitNmea+0x4c>)
 8007eea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007eee:	4907      	ldr	r1, [pc, #28]	; (8007f0c <gpsInitNmea+0x50>)
 8007ef0:	4809      	ldr	r0, [pc, #36]	; (8007f18 <gpsInitNmea+0x5c>)
 8007ef2:	f00d fec7 	bl	8015c84 <pifGps_SetTimeout>
    }
    gpsSetState(GPS_RECEIVINGDATA);
 8007ef6:	2005      	movs	r0, #5
 8007ef8:	f7ff fe1c 	bl	8007b34 <gpsSetState>
}
 8007efc:	bf00      	nop
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000f30 	.word	0x20000f30
 8007f04:	08028c54 	.word	0x08028c54
 8007f08:	08007d69 	.word	0x08007d69
 8007f0c:	20001554 	.word	0x20001554
 8007f10:	20000f50 	.word	0x20000f50
 8007f14:	20000fc0 	.word	0x20000fc0
 8007f18:	20000fd0 	.word	0x20000fd0

08007f1c <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 8007f26:	4b94      	ldr	r3, [pc, #592]	; (8008178 <gpsInitUblox+0x25c>)
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b13      	cmp	r3, #19
 8007f2c:	dd30      	ble.n	8007f90 <gpsInitUblox+0x74>
		if (gpsData.cfg_result == GUCR_ACK) {
 8007f2e:	4b92      	ldr	r3, [pc, #584]	; (8008178 <gpsInitUblox+0x25c>)
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d112      	bne.n	8007f5c <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 8007f36:	4b90      	ldr	r3, [pc, #576]	; (8008178 <gpsInitUblox+0x25c>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	3b13      	subs	r3, #19
 8007f3c:	4a8e      	ldr	r2, [pc, #568]	; (8008178 <gpsInitUblox+0x25c>)
 8007f3e:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 8007f40:	4b8d      	ldr	r3, [pc, #564]	; (8008178 <gpsInitUblox+0x25c>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	4a8d      	ldr	r2, [pc, #564]	; (800817c <gpsInitUblox+0x260>)
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d102      	bne.n	8007f52 <gpsInitUblox+0x36>
 8007f4c:	4b8a      	ldr	r3, [pc, #552]	; (8008178 <gpsInitUblox+0x25c>)
 8007f4e:	220f      	movs	r2, #15
 8007f50:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007f52:	4b8b      	ldr	r3, [pc, #556]	; (8008180 <gpsInitUblox+0x264>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a88      	ldr	r2, [pc, #544]	; (8008178 <gpsInitUblox+0x25c>)
 8007f58:	6153      	str	r3, [r2, #20]
 8007f5a:	e102      	b.n	8008162 <gpsInitUblox+0x246>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8007f5c:	4b86      	ldr	r3, [pc, #536]	; (8008178 <gpsInitUblox+0x25c>)
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d106      	bne.n	8007f72 <gpsInitUblox+0x56>
			pif_error = E_RECEIVE_NACK;
 8007f64:	4b87      	ldr	r3, [pc, #540]	; (8008184 <gpsInitUblox+0x268>)
 8007f66:	2210      	movs	r2, #16
 8007f68:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 8007f6a:	f240 1303 	movw	r3, #259	; 0x103
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e0f7      	b.n	8008162 <gpsInitUblox+0x246>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 8007f72:	4b83      	ldr	r3, [pc, #524]	; (8008180 <gpsInitUblox+0x264>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b80      	ldr	r3, [pc, #512]	; (8008178 <gpsInitUblox+0x25c>)
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2bc7      	cmp	r3, #199	; 0xc7
 8007f7e:	f240 80f0 	bls.w	8008162 <gpsInitUblox+0x246>
				pif_error = E_TIMEOUT;
 8007f82:	4b80      	ldr	r3, [pc, #512]	; (8008184 <gpsInitUblox+0x268>)
 8007f84:	2207      	movs	r2, #7
 8007f86:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f88:	f44f 7384 	mov.w	r3, #264	; 0x108
 8007f8c:	607b      	str	r3, [r7, #4]
 8007f8e:	e0e8      	b.n	8008162 <gpsInitUblox+0x246>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 8007f90:	4b7a      	ldr	r3, [pc, #488]	; (800817c <gpsInitUblox+0x260>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <gpsInitUblox+0x90>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 8007f98:	4b78      	ldr	r3, [pc, #480]	; (800817c <gpsInitUblox+0x260>)
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 8007f9e:	4b7a      	ldr	r3, [pc, #488]	; (8008188 <gpsInitUblox+0x26c>)
 8007fa0:	4a7a      	ldr	r2, [pc, #488]	; (800818c <gpsInitUblox+0x270>)
 8007fa2:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007fa4:	4b76      	ldr	r3, [pc, #472]	; (8008180 <gpsInitUblox+0x264>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a73      	ldr	r2, [pc, #460]	; (8008178 <gpsInitUblox+0x25c>)
 8007faa:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8007fac:	4b74      	ldr	r3, [pc, #464]	; (8008180 <gpsInitUblox+0x264>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	4b71      	ldr	r3, [pc, #452]	; (8008178 <gpsInitUblox+0x25c>)
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	f240 80da 	bls.w	8008170 <gpsInitUblox+0x254>
		if (gpsData.step < cfg_msg_size) {
 8007fbc:	4b6e      	ldr	r3, [pc, #440]	; (8008178 <gpsInitUblox+0x25c>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4a6e      	ldr	r2, [pc, #440]	; (800817c <gpsInitUblox+0x260>)
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	da26      	bge.n	8008016 <gpsInitUblox+0xfa>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 8007fc8:	4b6b      	ldr	r3, [pc, #428]	; (8008178 <gpsInitUblox+0x25c>)
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	4a6f      	ldr	r2, [pc, #444]	; (8008190 <gpsInitUblox+0x274>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	9201      	str	r2, [sp, #4]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2303      	movs	r3, #3
 8007fde:	2201      	movs	r2, #1
 8007fe0:	2106      	movs	r1, #6
 8007fe2:	4869      	ldr	r0, [pc, #420]	; (8008188 <gpsInitUblox+0x26c>)
 8007fe4:	f00f f9b6 	bl	8017354 <pifGpsUblox_SendUbxMsg>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00c      	beq.n	8008008 <gpsInitUblox+0xec>
                gpsData.cfg_result = GUCR_NONE;
 8007fee:	4b62      	ldr	r3, [pc, #392]	; (8008178 <gpsInitUblox+0x25c>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007ff4:	4b60      	ldr	r3, [pc, #384]	; (8008178 <gpsInitUblox+0x25c>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	4a5f      	ldr	r2, [pc, #380]	; (8008178 <gpsInitUblox+0x25c>)
 8007ffc:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007ffe:	4b60      	ldr	r3, [pc, #384]	; (8008180 <gpsInitUblox+0x264>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5d      	ldr	r2, [pc, #372]	; (8008178 <gpsInitUblox+0x25c>)
 8008004:	6153      	str	r3, [r2, #20]
 8008006:	e0ac      	b.n	8008162 <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008008:	4b5e      	ldr	r3, [pc, #376]	; (8008184 <gpsInitUblox+0x268>)
 800800a:	220a      	movs	r2, #10
 800800c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800800e:	f240 131b 	movw	r3, #283	; 0x11b
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	e0a5      	b.n	8008162 <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 15) {
 8008016:	4b58      	ldr	r3, [pc, #352]	; (8008178 <gpsInitUblox+0x25c>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d120      	bne.n	8008060 <gpsInitUblox+0x144>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 800801e:	2300      	movs	r3, #0
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	4b5c      	ldr	r3, [pc, #368]	; (8008194 <gpsInitUblox+0x278>)
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	2306      	movs	r3, #6
 8008028:	2208      	movs	r2, #8
 800802a:	2106      	movs	r1, #6
 800802c:	4856      	ldr	r0, [pc, #344]	; (8008188 <gpsInitUblox+0x26c>)
 800802e:	f00f f991 	bl	8017354 <pifGpsUblox_SendUbxMsg>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <gpsInitUblox+0x136>
                gpsData.cfg_result = GUCR_NONE;
 8008038:	4b4f      	ldr	r3, [pc, #316]	; (8008178 <gpsInitUblox+0x25c>)
 800803a:	2200      	movs	r2, #0
 800803c:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 800803e:	4b4e      	ldr	r3, [pc, #312]	; (8008178 <gpsInitUblox+0x25c>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	3314      	adds	r3, #20
 8008044:	4a4c      	ldr	r2, [pc, #304]	; (8008178 <gpsInitUblox+0x25c>)
 8008046:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008048:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <gpsInitUblox+0x264>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a4a      	ldr	r2, [pc, #296]	; (8008178 <gpsInitUblox+0x25c>)
 800804e:	6153      	str	r3, [r2, #20]
 8008050:	e087      	b.n	8008162 <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008052:	4b4c      	ldr	r3, [pc, #304]	; (8008184 <gpsInitUblox+0x268>)
 8008054:	220a      	movs	r2, #10
 8008056:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008058:	f44f 7393 	mov.w	r3, #294	; 0x126
 800805c:	607b      	str	r3, [r7, #4]
 800805e:	e080      	b.n	8008162 <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 16) {
 8008060:	4b45      	ldr	r3, [pc, #276]	; (8008178 <gpsInitUblox+0x25c>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b10      	cmp	r3, #16
 8008066:	d120      	bne.n	80080aa <gpsInitUblox+0x18e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8008068:	2300      	movs	r3, #0
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <gpsInitUblox+0x27c>)
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2324      	movs	r3, #36	; 0x24
 8008072:	2224      	movs	r2, #36	; 0x24
 8008074:	2106      	movs	r1, #6
 8008076:	4844      	ldr	r0, [pc, #272]	; (8008188 <gpsInitUblox+0x26c>)
 8008078:	f00f f96c 	bl	8017354 <pifGpsUblox_SendUbxMsg>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00c      	beq.n	800809c <gpsInitUblox+0x180>
                gpsData.cfg_result = GUCR_NONE;
 8008082:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <gpsInitUblox+0x25c>)
 8008084:	2200      	movs	r2, #0
 8008086:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008088:	4b3b      	ldr	r3, [pc, #236]	; (8008178 <gpsInitUblox+0x25c>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	3314      	adds	r3, #20
 800808e:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <gpsInitUblox+0x25c>)
 8008090:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008092:	4b3b      	ldr	r3, [pc, #236]	; (8008180 <gpsInitUblox+0x264>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a38      	ldr	r2, [pc, #224]	; (8008178 <gpsInitUblox+0x25c>)
 8008098:	6153      	str	r3, [r2, #20]
 800809a:	e062      	b.n	8008162 <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 800809c:	4b39      	ldr	r3, [pc, #228]	; (8008184 <gpsInitUblox+0x268>)
 800809e:	220a      	movs	r2, #10
 80080a0:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080a2:	f240 1331 	movw	r3, #305	; 0x131
 80080a6:	607b      	str	r3, [r7, #4]
 80080a8:	e05b      	b.n	8008162 <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 17) {
 80080aa:	4b33      	ldr	r3, [pc, #204]	; (8008178 <gpsInitUblox+0x25c>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b11      	cmp	r3, #17
 80080b0:	d12f      	bne.n	8008112 <gpsInitUblox+0x1f6>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 80080b2:	4b3a      	ldr	r3, [pc, #232]	; (800819c <gpsInitUblox+0x280>)
 80080b4:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	db04      	blt.n	80080c6 <gpsInitUblox+0x1aa>
 80080bc:	4b37      	ldr	r3, [pc, #220]	; (800819c <gpsInitUblox+0x280>)
 80080be:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	e000      	b.n	80080c8 <gpsInitUblox+0x1ac>
 80080c6:	2305      	movs	r3, #5
 80080c8:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4a34      	ldr	r2, [pc, #208]	; (80081a0 <gpsInitUblox+0x284>)
 80080d0:	4413      	add	r3, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	9201      	str	r2, [sp, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2308      	movs	r3, #8
 80080da:	2216      	movs	r2, #22
 80080dc:	2106      	movs	r1, #6
 80080de:	482a      	ldr	r0, [pc, #168]	; (8008188 <gpsInitUblox+0x26c>)
 80080e0:	f00f f938 	bl	8017354 <pifGpsUblox_SendUbxMsg>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <gpsInitUblox+0x1e8>
                gpsData.cfg_result = GUCR_NONE;
 80080ea:	4b23      	ldr	r3, [pc, #140]	; (8008178 <gpsInitUblox+0x25c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80080f0:	4b21      	ldr	r3, [pc, #132]	; (8008178 <gpsInitUblox+0x25c>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	3314      	adds	r3, #20
 80080f6:	4a20      	ldr	r2, [pc, #128]	; (8008178 <gpsInitUblox+0x25c>)
 80080f8:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <gpsInitUblox+0x264>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <gpsInitUblox+0x25c>)
 8008100:	6153      	str	r3, [r2, #20]
 8008102:	e02e      	b.n	8008162 <gpsInitUblox+0x246>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008104:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <gpsInitUblox+0x268>)
 8008106:	220a      	movs	r2, #10
 8008108:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800810a:	f240 133d 	movw	r3, #317	; 0x13d
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	e027      	b.n	8008162 <gpsInitUblox+0x246>
			}
		}
		else if (gpsData.step == 18) {
 8008112:	4b19      	ldr	r3, [pc, #100]	; (8008178 <gpsInitUblox+0x25c>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b12      	cmp	r3, #18
 8008118:	d123      	bne.n	8008162 <gpsInitUblox+0x246>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <gpsInitUblox+0x264>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <gpsInitUblox+0x25c>)
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	f242 720f 	movw	r2, #9999	; 0x270f
 8008128:	4293      	cmp	r3, r2
 800812a:	d814      	bhi.n	8008156 <gpsInitUblox+0x23a>
				if (gpsData.receive) {
 800812c:	4b12      	ldr	r3, [pc, #72]	; (8008178 <gpsInitUblox+0x25c>)
 800812e:	7e1b      	ldrb	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d016      	beq.n	8008162 <gpsInitUblox+0x246>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <gpsInitUblox+0x288>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	3304      	adds	r3, #4
 800813a:	4618      	mov	r0, r3
 800813c:	f7fa fa4a 	bl	80025d4 <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008140:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <gpsInitUblox+0x28c>)
 8008142:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008146:	4919      	ldr	r1, [pc, #100]	; (80081ac <gpsInitUblox+0x290>)
 8008148:	4819      	ldr	r0, [pc, #100]	; (80081b0 <gpsInitUblox+0x294>)
 800814a:	f00d fd9b 	bl	8015c84 <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 800814e:	2005      	movs	r0, #5
 8008150:	f7ff fcf0 	bl	8007b34 <gpsSetState>
 8008154:	e005      	b.n	8008162 <gpsInitUblox+0x246>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <gpsInitUblox+0x268>)
 8008158:	2207      	movs	r2, #7
 800815a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800815c:	f240 134b 	movw	r3, #331	; 0x14b
 8008160:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <gpsInitUblox+0x256>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008168:	4811      	ldr	r0, [pc, #68]	; (80081b0 <gpsInitUblox+0x294>)
 800816a:	f7ff fdfd 	bl	8007d68 <_evtGpsTimeout>
 800816e:	e000      	b.n	8008172 <gpsInitUblox+0x256>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008170:	bf00      	nop
	}
}
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000f30 	.word	0x20000f30
 800817c:	2000137a 	.word	0x2000137a
 8008180:	20001dd0 	.word	0x20001dd0
 8008184:	20001db8 	.word	0x20001db8
 8008188:	20000fc0 	.word	0x20000fc0
 800818c:	08007b75 	.word	0x08007b75
 8008190:	08028c7c 	.word	0x08028c7c
 8008194:	08028c9c 	.word	0x08028c9c
 8008198:	08028ca4 	.word	0x08028ca4
 800819c:	20000848 	.word	0x20000848
 80081a0:	08028cc8 	.word	0x08028cc8
 80081a4:	20000790 	.word	0x20000790
 80081a8:	08007d69 	.word	0x08007d69
 80081ac:	20001554 	.word	0x20001554
 80081b0:	20000fd0 	.word	0x20000fd0

080081b4 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80081b8:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <gpsInitHardware+0x34>)
 80081ba:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80081be:	2b03      	cmp	r3, #3
 80081c0:	dc0d      	bgt.n	80081de <gpsInitHardware+0x2a>
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	da0a      	bge.n	80081dc <gpsInitHardware+0x28>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <gpsInitHardware+0x1c>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d003      	beq.n	80081d6 <gpsInitHardware+0x22>
 80081ce:	e006      	b.n	80081de <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80081d0:	f7ff fe74 	bl	8007ebc <gpsInitNmea>
            break;
 80081d4:	e003      	b.n	80081de <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80081d6:	f7ff fea1 	bl	8007f1c <gpsInitUblox>
            break;
 80081da:	e000      	b.n	80081de <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80081dc:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <gpsInitHardware+0x38>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	605a      	str	r2, [r3, #4]
}
 80081e4:	bf00      	nop
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000848 	.word	0x20000848
 80081ec:	20000f30 	.word	0x20000f30

080081f0 <gpsThread>:

void gpsThread(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 80081f6:	4b70      	ldr	r3, [pc, #448]	; (80083b8 <gpsThread+0x1c8>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b06      	cmp	r3, #6
 80081fc:	f200 80d8 	bhi.w	80083b0 <gpsThread+0x1c0>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <gpsThread+0x18>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	080083b1 	.word	0x080083b1
 800820c:	08008225 	.word	0x08008225
 8008210:	0800827f 	.word	0x0800827f
 8008214:	080082d7 	.word	0x080082d7
 8008218:	08008315 	.word	0x08008315
 800821c:	080083b1 	.word	0x080083b1
 8008220:	0800831b 	.word	0x0800831b
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 8008224:	4b65      	ldr	r3, [pc, #404]	; (80083bc <gpsThread+0x1cc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 800822a:	4b63      	ldr	r3, [pc, #396]	; (80083b8 <gpsThread+0x1c8>)
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	4a61      	ldr	r2, [pc, #388]	; (80083b8 <gpsThread+0x1c8>)
 8008234:	6912      	ldr	r2, [r2, #16]
 8008236:	2a00      	cmp	r2, #0
 8008238:	d001      	beq.n	800823e <gpsThread+0x4e>
 800823a:	22c8      	movs	r2, #200	; 0xc8
 800823c:	e001      	b.n	8008242 <gpsThread+0x52>
 800823e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008242:	429a      	cmp	r2, r3
 8008244:	f200 80af 	bhi.w	80083a6 <gpsThread+0x1b6>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008248:	4b5b      	ldr	r3, [pc, #364]	; (80083b8 <gpsThread+0x1c8>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b04      	cmp	r3, #4
 800824e:	dc12      	bgt.n	8008276 <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008250:	4b5b      	ldr	r3, [pc, #364]	; (80083c0 <gpsThread+0x1d0>)
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	4b58      	ldr	r3, [pc, #352]	; (80083b8 <gpsThread+0x1c8>)
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	495a      	ldr	r1, [pc, #360]	; (80083c4 <gpsThread+0x1d4>)
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	440b      	add	r3, r1
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7fa f9a4 	bl	80025b0 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008268:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <gpsThread+0x1c8>)
 800826a:	2202      	movs	r2, #2
 800826c:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 800826e:	4a52      	ldr	r2, [pc, #328]	; (80083b8 <gpsThread+0x1c8>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 8008274:	e09c      	b.n	80083b0 <gpsThread+0x1c0>
                gpsSetState(GPS_SETBAUD);
 8008276:	2003      	movs	r0, #3
 8008278:	f7ff fc5c 	bl	8007b34 <gpsSetState>
            break;
 800827c:	e098      	b.n	80083b0 <gpsThread+0x1c0>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 800827e:	4b4f      	ldr	r3, [pc, #316]	; (80083bc <gpsThread+0x1cc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 8008284:	4b4c      	ldr	r3, [pc, #304]	; (80083b8 <gpsThread+0x1c8>)
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2bc7      	cmp	r3, #199	; 0xc7
 800828e:	f240 808c 	bls.w	80083aa <gpsThread+0x1ba>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 8008292:	4b49      	ldr	r3, [pc, #292]	; (80083b8 <gpsThread+0x1c8>)
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	4a4b      	ldr	r2, [pc, #300]	; (80083c4 <gpsThread+0x1d4>)
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4413      	add	r3, r2
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	9201      	str	r2, [sp, #4]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2303      	movs	r3, #3
 80082a6:	2207      	movs	r2, #7
 80082a8:	2101      	movs	r1, #1
 80082aa:	4847      	ldr	r0, [pc, #284]	; (80083c8 <gpsThread+0x1d8>)
 80082ac:	f00f f81c 	bl	80172e8 <pifGpsUblox_SetPubxConfig>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <gpsThread+0xde>
                gpsData.state_position++;
 80082b6:	4b40      	ldr	r3, [pc, #256]	; (80083b8 <gpsThread+0x1c8>)
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a3e      	ldr	r2, [pc, #248]	; (80083b8 <gpsThread+0x1c8>)
 80082be:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 80082c0:	4b3d      	ldr	r3, [pc, #244]	; (80083b8 <gpsThread+0x1c8>)
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80082c6:	4a3c      	ldr	r2, [pc, #240]	; (80083b8 <gpsThread+0x1c8>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80082cc:	e070      	b.n	80083b0 <gpsThread+0x1c0>
        		gpsSetState(GPS_INITIALIZING);
 80082ce:	2001      	movs	r0, #1
 80082d0:	f7ff fc30 	bl	8007b34 <gpsSetState>
            break;
 80082d4:	e06c      	b.n	80083b0 <gpsThread+0x1c0>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80082d6:	4b39      	ldr	r3, [pc, #228]	; (80083bc <gpsThread+0x1cc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <gpsThread+0x1c8>)
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2bc7      	cmp	r3, #199	; 0xc7
 80082e6:	d962      	bls.n	80083ae <gpsThread+0x1be>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80082e8:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <gpsThread+0x1d0>)
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <gpsThread+0x1c8>)
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	4934      	ldr	r1, [pc, #208]	; (80083c4 <gpsThread+0x1d4>)
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	440b      	add	r3, r1
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f7fa f958 	bl	80025b0 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008300:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <gpsThread+0x1d0>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	3304      	adds	r3, #4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fa f964 	bl	80025d4 <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 800830c:	2004      	movs	r0, #4
 800830e:	f7ff fc11 	bl	8007b34 <gpsSetState>
            break;
 8008312:	e04d      	b.n	80083b0 <gpsThread+0x1c0>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 8008314:	f7ff ff4e 	bl	80081b4 <gpsInitHardware>
            break;
 8008318:	e04a      	b.n	80083b0 <gpsThread+0x1c0>

        case GPS_LOSTCOMMS:
            if (mcfg.gps_type == GPS_NMEA && gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 800831a:	4b2c      	ldr	r3, [pc, #176]	; (80083cc <gpsThread+0x1dc>)
 800831c:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10f      	bne.n	8008344 <gpsThread+0x154>
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <gpsThread+0x1c8>)
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	4a26      	ldr	r2, [pc, #152]	; (80083c4 <gpsThread+0x1d4>)
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008334:	d106      	bne.n	8008344 <gpsThread+0x154>
                pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, 0, NULL);
 8008336:	2300      	movs	r3, #0
 8008338:	2200      	movs	r2, #0
 800833a:	4925      	ldr	r1, [pc, #148]	; (80083d0 <gpsThread+0x1e0>)
 800833c:	4825      	ldr	r0, [pc, #148]	; (80083d4 <gpsThread+0x1e4>)
 800833e:	f00d fca1 	bl	8015c84 <pifGps_SetTimeout>
 8008342:	e005      	b.n	8008350 <gpsThread+0x160>
            }
            else {
                pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	4921      	ldr	r1, [pc, #132]	; (80083d0 <gpsThread+0x1e0>)
 800834a:	4823      	ldr	r0, [pc, #140]	; (80083d8 <gpsThread+0x1e8>)
 800834c:	f00d fc9a 	bl	8015c84 <pifGps_SetTimeout>
            }
            gpsData.errors++;
 8008350:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <gpsThread+0x1c8>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	3301      	adds	r3, #1
 8008356:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <gpsThread+0x1c8>)
 8008358:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 800835a:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <gpsThread+0x1dc>)
 800835c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <gpsThread+0x19a>
                gpsData.baudrateIndex++;
 8008364:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <gpsThread+0x1c8>)
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	3301      	adds	r3, #1
 800836a:	b2da      	uxtb	r2, r3
 800836c:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <gpsThread+0x1c8>)
 800836e:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008370:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <gpsThread+0x1c8>)
 8008372:	785a      	ldrb	r2, [r3, #1]
 8008374:	4b19      	ldr	r3, [pc, #100]	; (80083dc <gpsThread+0x1ec>)
 8008376:	fba3 1302 	umull	r1, r3, r3, r2
 800837a:	0899      	lsrs	r1, r3, #2
 800837c:	460b      	mov	r3, r1
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <gpsThread+0x1c8>)
 8008388:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <gpsThread+0x1cc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <gpsThread+0x1c8>)
 8008390:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 8008392:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <gpsThread+0x1f0>)
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008398:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <gpsThread+0x1f4>)
 800839a:	2200      	movs	r2, #0
 800839c:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 800839e:	2001      	movs	r0, #1
 80083a0:	f7ff fbc8 	bl	8007b34 <gpsSetState>
            break;
 80083a4:	e004      	b.n	80083b0 <gpsThread+0x1c0>
                return;
 80083a6:	bf00      	nop
 80083a8:	e002      	b.n	80083b0 <gpsThread+0x1c0>
                return;
 80083aa:	bf00      	nop
 80083ac:	e000      	b.n	80083b0 <gpsThread+0x1c0>
                return;
 80083ae:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000f30 	.word	0x20000f30
 80083bc:	20001dd0 	.word	0x20001dd0
 80083c0:	20000790 	.word	0x20000790
 80083c4:	08028c54 	.word	0x08028c54
 80083c8:	20000fc0 	.word	0x20000fc0
 80083cc:	20000848 	.word	0x20000848
 80083d0:	20001554 	.word	0x20001554
 80083d4:	20000f50 	.word	0x20000f50
 80083d8:	20000fd0 	.word	0x20000fd0
 80083dc:	cccccccd 	.word	0xcccccccd
 80083e0:	20001804 	.word	0x20001804
 80083e4:	20001720 	.word	0x20001720

080083e8 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80083ee:	4b2b      	ldr	r3, [pc, #172]	; (800849c <gpsPollSvinfo+0xb4>)
 80083f0:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d14d      	bne.n	8008494 <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80083f8:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <gpsPollSvinfo+0xb8>)
 80083fa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80083fe:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <gpsPollSvinfo+0xbc>)
 8008400:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008402:	2300      	movs	r3, #0
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	e02a      	b.n	800845e <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 8008408:	4a25      	ldr	r2, [pc, #148]	; (80084a0 <gpsPollSvinfo+0xb8>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3379      	adds	r3, #121	; 0x79
 8008410:	7819      	ldrb	r1, [r3, #0]
 8008412:	4a25      	ldr	r2, [pc, #148]	; (80084a8 <gpsPollSvinfo+0xc0>)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	460a      	mov	r2, r1
 800841a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 800841c:	4a20      	ldr	r2, [pc, #128]	; (80084a0 <gpsPollSvinfo+0xb8>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4413      	add	r3, r2
 8008422:	3389      	adds	r3, #137	; 0x89
 8008424:	7819      	ldrb	r1, [r3, #0]
 8008426:	4a21      	ldr	r2, [pc, #132]	; (80084ac <gpsPollSvinfo+0xc4>)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	460a      	mov	r2, r1
 800842e:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <gpsPollSvinfo+0xb8>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4413      	add	r3, r2
 8008436:	3399      	adds	r3, #153	; 0x99
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <gpsPollSvinfo+0xc8>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	460a      	mov	r2, r1
 8008442:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <gpsPollSvinfo+0xb8>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	33a9      	adds	r3, #169	; 0xa9
 800844c:	7819      	ldrb	r1, [r3, #0]
 800844e:	4a19      	ldr	r2, [pc, #100]	; (80084b4 <gpsPollSvinfo+0xcc>)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	460a      	mov	r2, r1
 8008456:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3301      	adds	r3, #1
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <gpsPollSvinfo+0xbc>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4293      	cmp	r3, r2
 8008468:	dbce      	blt.n	8008408 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <gpsPollSvinfo+0xb8>)
 800846c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <gpsPollSvinfo+0xd0>)
 8008472:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 8008474:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <gpsPollSvinfo+0xb8>)
 8008476:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800847a:	4a0f      	ldr	r2, [pc, #60]	; (80084b8 <gpsPollSvinfo+0xd0>)
 800847c:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 800847e:	2300      	movs	r3, #0
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	2300      	movs	r3, #0
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	2300      	movs	r3, #0
 8008488:	2230      	movs	r2, #48	; 0x30
 800848a:	2101      	movs	r1, #1
 800848c:	4804      	ldr	r0, [pc, #16]	; (80084a0 <gpsPollSvinfo+0xb8>)
 800848e:	f00e ff61 	bl	8017354 <pifGpsUblox_SendUbxMsg>
 8008492:	e000      	b.n	8008496 <gpsPollSvinfo+0xae>
        return;
 8008494:	bf00      	nop
}
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20000848 	.word	0x20000848
 80084a0:	20000fc0 	.word	0x20000fc0
 80084a4:	20001821 	.word	0x20001821
 80084a8:	20001824 	.word	0x20001824
 80084ac:	20001844 	.word	0x20001844
 80084b0:	20001864 	.word	0x20001864
 80084b4:	20001884 	.word	0x20001884
 80084b8:	200018ac 	.word	0x200018ac

080084bc <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	edd3 7a00 	vldr	s15, [r3]
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084de:	ee17 3a90 	vmov	r3, s15
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	ed93 7a00 	vldr	s14, [r3]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008512:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	edd3 7a00 	vldr	s15, [r3]
 800851c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edd3 7a00 	vldr	s15, [r3]
 8008530:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	edd3 7a03 	vldr	s15, [r3, #12]
 800853a:	eef1 7a67 	vneg.f32	s15, s15
 800853e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	edd3 7a03 	vldr	s15, [r3, #12]
 8008548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800854c:	ee17 2a90 	vmov	r2, s15
 8008550:	ee16 1a90 	vmov	r1, s13
 8008554:	ee17 0a10 	vmov	r0, s14
 8008558:	f7fb fb56 	bl	8003c08 <constrain>
 800855c:	ee07 0a90 	vmov	s15, r0
 8008560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	edd3 7a00 	vldr	s15, [r3]
 8008570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008574:	ee17 3a90 	vmov	r3, s15
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	ed93 7a00 	vldr	s14, [r3]
 80085a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ff7b 	bl	80004b0 <__aeabi_f2d>
 80085ba:	4604      	mov	r4, r0
 80085bc:	460d      	mov	r5, r1
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f7 ff74 	bl	80004b0 <__aeabi_f2d>
 80085c8:	4680      	mov	r8, r0
 80085ca:	4689      	mov	r9, r1
 80085cc:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <get_D+0x128>)
 80085ce:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085da:	ee17 0a90 	vmov	r0, s15
 80085de:	f7f7 ff67 	bl	80004b0 <__aeabi_f2d>
 80085e2:	a32f      	add	r3, pc, #188	; (adr r3, 80086a0 <get_D+0x120>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f7 ffba 	bl	8000560 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	f04f 0000 	mov.w	r0, #0
 80085f4:	492d      	ldr	r1, [pc, #180]	; (80086ac <get_D+0x12c>)
 80085f6:	f7f8 f8dd 	bl	80007b4 <__aeabi_ddiv>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4692      	mov	sl, r2
 8008600:	469b      	mov	fp, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7f7 ff52 	bl	80004b0 <__aeabi_f2d>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7f7 fdee 	bl	80001f4 <__adddf3>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4640      	mov	r0, r8
 800861e:	4649      	mov	r1, r9
 8008620:	f7f8 f8c8 	bl	80007b4 <__aeabi_ddiv>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4690      	mov	r8, r2
 800862a:	4699      	mov	r9, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	edd3 7a02 	vldr	s15, [r3, #8]
 8008638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800863c:	ee17 0a90 	vmov	r0, s15
 8008640:	f7f7 ff36 	bl	80004b0 <__aeabi_f2d>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4640      	mov	r0, r8
 800864a:	4649      	mov	r1, r9
 800864c:	f7f7 ff88 	bl	8000560 <__aeabi_dmul>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4620      	mov	r0, r4
 8008656:	4629      	mov	r1, r5
 8008658:	f7f7 fdcc 	bl	80001f4 <__adddf3>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	f7f8 fa5e 	bl	8000b24 <__aeabi_d2f>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691a      	ldr	r2, [r3, #16]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edd3 7a04 	vldr	s15, [r3, #16]
 8008688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008690:	ee17 3a90 	vmov	r3, s15
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800869e:	bf00      	nop
 80086a0:	54442d18 	.word	0x54442d18
 80086a4:	401921fb 	.word	0x401921fb
 80086a8:	20000db4 	.word	0x20000db4
 80086ac:	3ff00000 	.word	0x3ff00000

080086b0 <reset_PID>:

static void reset_PID(PID *pid)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	609a      	str	r2, [r3, #8]
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b089      	sub	sp, #36	; 0x24
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80086e4:	4b84      	ldr	r3, [pc, #528]	; (80088f8 <taskGpsNewData+0x21c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a84      	ldr	r2, [pc, #528]	; (80088fc <taskGpsNewData+0x220>)
 80086ea:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 80086ec:	2020      	movs	r0, #32
 80086ee:	f7fe fbdf 	bl	8006eb0 <sensorsSet>
        if (GPS_update == 1)
 80086f2:	4b83      	ldr	r3, [pc, #524]	; (8008900 <taskGpsNewData+0x224>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d103      	bne.n	8008702 <taskGpsNewData+0x26>
            GPS_update = 0;
 80086fa:	4b81      	ldr	r3, [pc, #516]	; (8008900 <taskGpsNewData+0x224>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e002      	b.n	8008708 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 8008702:	4b7f      	ldr	r3, [pc, #508]	; (8008900 <taskGpsNewData+0x224>)
 8008704:	2201      	movs	r2, #1
 8008706:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008708:	4b7e      	ldr	r3, [pc, #504]	; (8008904 <taskGpsNewData+0x228>)
 800870a:	7adb      	ldrb	r3, [r3, #11]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 81ae 	beq.w	8008a6e <taskGpsNewData+0x392>
 8008712:	4b7d      	ldr	r3, [pc, #500]	; (8008908 <taskGpsNewData+0x22c>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b04      	cmp	r3, #4
 8008718:	f240 81a9 	bls.w	8008a6e <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 800871c:	4b79      	ldr	r3, [pc, #484]	; (8008904 <taskGpsNewData+0x228>)
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <taskGpsNewData+0x56>
 8008724:	4b77      	ldr	r3, [pc, #476]	; (8008904 <taskGpsNewData+0x228>)
 8008726:	7c1b      	ldrb	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 800872c:	4b75      	ldr	r3, [pc, #468]	; (8008904 <taskGpsNewData+0x228>)
 800872e:	2200      	movs	r2, #0
 8008730:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 8008732:	4b74      	ldr	r3, [pc, #464]	; (8008904 <taskGpsNewData+0x228>)
 8008734:	7b1b      	ldrb	r3, [r3, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <taskGpsNewData+0x6a>
 800873a:	4b72      	ldr	r3, [pc, #456]	; (8008904 <taskGpsNewData+0x228>)
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 8008742:	f000 f9c1 	bl	8008ac8 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 8008746:	4b71      	ldr	r3, [pc, #452]	; (800890c <taskGpsNewData+0x230>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	4b70      	ldr	r3, [pc, #448]	; (8008910 <taskGpsNewData+0x234>)
 800874e:	fb83 1302 	smull	r1, r3, r3, r2
 8008752:	1059      	asrs	r1, r3, #1
 8008754:	17d3      	asrs	r3, r2, #31
 8008756:	1ac9      	subs	r1, r1, r3
 8008758:	460b      	mov	r3, r1
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	1ad1      	subs	r1, r2, r3
 8008760:	b2ca      	uxtb	r2, r1
 8008762:	4b6a      	ldr	r3, [pc, #424]	; (800890c <taskGpsNewData+0x230>)
 8008764:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	e09f      	b.n	80088ac <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 800876c:	4a69      	ldr	r2, [pc, #420]	; (8008914 <taskGpsNewData+0x238>)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008774:	4968      	ldr	r1, [pc, #416]	; (8008918 <taskGpsNewData+0x23c>)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 800877c:	4a66      	ldr	r2, [pc, #408]	; (8008918 <taskGpsNewData+0x23c>)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008784:	4a65      	ldr	r2, [pc, #404]	; (800891c <taskGpsNewData+0x240>)
 8008786:	fb82 1203 	smull	r1, r2, r2, r3
 800878a:	1592      	asrs	r2, r2, #22
 800878c:	17db      	asrs	r3, r3, #31
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	4963      	ldr	r1, [pc, #396]	; (8008920 <taskGpsNewData+0x244>)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008798:	4a5f      	ldr	r2, [pc, #380]	; (8008918 <taskGpsNewData+0x23c>)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087a0:	495f      	ldr	r1, [pc, #380]	; (8008920 <taskGpsNewData+0x244>)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087a8:	495e      	ldr	r1, [pc, #376]	; (8008924 <taskGpsNewData+0x248>)
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	4a5d      	ldr	r2, [pc, #372]	; (8008928 <taskGpsNewData+0x24c>)
 80087b2:	fb82 1203 	smull	r1, r2, r2, r3
 80087b6:	1312      	asrs	r2, r2, #12
 80087b8:	17db      	asrs	r3, r3, #31
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	b299      	uxth	r1, r3
 80087be:	4a5b      	ldr	r2, [pc, #364]	; (800892c <taskGpsNewData+0x250>)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 80087c6:	4a5a      	ldr	r2, [pc, #360]	; (8008930 <taskGpsNewData+0x254>)
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087ce:	4b4f      	ldr	r3, [pc, #316]	; (800890c <taskGpsNewData+0x230>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	461c      	mov	r4, r3
 80087d4:	4857      	ldr	r0, [pc, #348]	; (8008934 <taskGpsNewData+0x258>)
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	4423      	add	r3, r4
 80087e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087e4:	1aca      	subs	r2, r1, r3
 80087e6:	4952      	ldr	r1, [pc, #328]	; (8008930 <taskGpsNewData+0x254>)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 80087ee:	4a4a      	ldr	r2, [pc, #296]	; (8008918 <taskGpsNewData+0x23c>)
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087f6:	494a      	ldr	r1, [pc, #296]	; (8008920 <taskGpsNewData+0x244>)
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087fe:	4949      	ldr	r1, [pc, #292]	; (8008924 <taskGpsNewData+0x248>)
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4941      	ldr	r1, [pc, #260]	; (800890c <taskGpsNewData+0x230>)
 8008806:	7809      	ldrb	r1, [r1, #0]
 8008808:	460c      	mov	r4, r1
 800880a:	18d1      	adds	r1, r2, r3
 800880c:	4849      	ldr	r0, [pc, #292]	; (8008934 <taskGpsNewData+0x258>)
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	4423      	add	r3, r4
 8008818:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 800881c:	4a44      	ldr	r2, [pc, #272]	; (8008930 <taskGpsNewData+0x254>)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008824:	4b39      	ldr	r3, [pc, #228]	; (800890c <taskGpsNewData+0x230>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	461c      	mov	r4, r3
 800882a:	4842      	ldr	r0, [pc, #264]	; (8008934 <taskGpsNewData+0x258>)
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	4423      	add	r3, r4
 8008836:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800883a:	18ca      	adds	r2, r1, r3
 800883c:	493c      	ldr	r1, [pc, #240]	; (8008930 <taskGpsNewData+0x254>)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 8008844:	4a3a      	ldr	r2, [pc, #232]	; (8008930 <taskGpsNewData+0x254>)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884c:	4a30      	ldr	r2, [pc, #192]	; (8008910 <taskGpsNewData+0x234>)
 800884e:	fb82 1203 	smull	r1, r2, r2, r3
 8008852:	1052      	asrs	r2, r2, #1
 8008854:	17db      	asrs	r3, r3, #31
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	4931      	ldr	r1, [pc, #196]	; (8008920 <taskGpsNewData+0x244>)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008860:	4935      	ldr	r1, [pc, #212]	; (8008938 <taskGpsNewData+0x25c>)
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	441a      	add	r2, r3
 8008868:	4934      	ldr	r1, [pc, #208]	; (800893c <taskGpsNewData+0x260>)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008870:	4b33      	ldr	r3, [pc, #204]	; (8008940 <taskGpsNewData+0x264>)
 8008872:	f993 3000 	ldrsb.w	r3, [r3]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d115      	bne.n	80088a6 <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 800887a:	4a2c      	ldr	r2, [pc, #176]	; (800892c <taskGpsNewData+0x250>)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d90f      	bls.n	80088a6 <taskGpsNewData+0x1ca>
 8008886:	4a29      	ldr	r2, [pc, #164]	; (800892c <taskGpsNewData+0x250>)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800888e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8008892:	4293      	cmp	r3, r2
 8008894:	d807      	bhi.n	80088a6 <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 8008896:	4a29      	ldr	r2, [pc, #164]	; (800893c <taskGpsNewData+0x260>)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800889e:	491d      	ldr	r1, [pc, #116]	; (8008914 <taskGpsNewData+0x238>)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	3301      	adds	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	f77f af5c 	ble.w	800876c <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 80088b4:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <taskGpsNewData+0x21c>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	4b22      	ldr	r3, [pc, #136]	; (8008944 <taskGpsNewData+0x268>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088c6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008948 <taskGpsNewData+0x26c>
 80088ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80088ce:	4b1f      	ldr	r3, [pc, #124]	; (800894c <taskGpsNewData+0x270>)
 80088d0:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 80088d4:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <taskGpsNewData+0x21c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <taskGpsNewData+0x268>)
 80088da:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <taskGpsNewData+0x270>)
 80088de:	edd3 7a00 	vldr	s15, [r3]
 80088e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ee:	d52f      	bpl.n	8008950 <taskGpsNewData+0x274>
 80088f0:	4b16      	ldr	r3, [pc, #88]	; (800894c <taskGpsNewData+0x270>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	e02e      	b.n	8008954 <taskGpsNewData+0x278>
 80088f6:	bf00      	nop
 80088f8:	20001dd0 	.word	0x20001dd0
 80088fc:	20000f30 	.word	0x20000f30
 8008900:	2000180e 	.word	0x2000180e
 8008904:	20001720 	.word	0x20001720
 8008908:	20001804 	.word	0x20001804
 800890c:	20001326 	.word	0x20001326
 8008910:	66666667 	.word	0x66666667
 8008914:	200017e4 	.word	0x200017e4
 8008918:	20001358 	.word	0x20001358
 800891c:	6b5fca6b 	.word	0x6b5fca6b
 8008920:	20001368 	.word	0x20001368
 8008924:	ff676980 	.word	0xff676980
 8008928:	68db8bad 	.word	0x68db8bad
 800892c:	20001370 	.word	0x20001370
 8008930:	20001350 	.word	0x20001350
 8008934:	20001328 	.word	0x20001328
 8008938:	00989680 	.word	0x00989680
 800893c:	20001360 	.word	0x20001360
 8008940:	20001820 	.word	0x20001820
 8008944:	2000137c 	.word	0x2000137c
 8008948:	447a0000 	.word	0x447a0000
 800894c:	200012f8 	.word	0x200012f8
 8008950:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008954:	4a4a      	ldr	r2, [pc, #296]	; (8008a80 <taskGpsNewData+0x3a4>)
 8008956:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008958:	f107 0308 	add.w	r3, r7, #8
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	f107 030c 	add.w	r3, r7, #12
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4b47      	ldr	r3, [pc, #284]	; (8008a84 <taskGpsNewData+0x3a8>)
 8008966:	4a48      	ldr	r2, [pc, #288]	; (8008a88 <taskGpsNewData+0x3ac>)
 8008968:	4948      	ldr	r1, [pc, #288]	; (8008a8c <taskGpsNewData+0x3b0>)
 800896a:	4849      	ldr	r0, [pc, #292]	; (8008a90 <taskGpsNewData+0x3b4>)
 800896c:	f000 fae8 	bl	8008f40 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a48      	ldr	r2, [pc, #288]	; (8008a94 <taskGpsNewData+0x3b8>)
 8008974:	fb82 1203 	smull	r1, r2, r2, r3
 8008978:	1152      	asrs	r2, r2, #5
 800897a:	17db      	asrs	r3, r3, #31
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	b29a      	uxth	r2, r3
 8008980:	4b45      	ldr	r3, [pc, #276]	; (8008a98 <taskGpsNewData+0x3bc>)
 8008982:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4a43      	ldr	r2, [pc, #268]	; (8008a94 <taskGpsNewData+0x3b8>)
 8008988:	fb82 1203 	smull	r1, r2, r2, r3
 800898c:	1152      	asrs	r2, r2, #5
 800898e:	17db      	asrs	r3, r3, #31
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b21a      	sxth	r2, r3
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <taskGpsNewData+0x3c0>)
 8008996:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008998:	4b41      	ldr	r3, [pc, #260]	; (8008aa0 <taskGpsNewData+0x3c4>)
 800899a:	7b1b      	ldrb	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 80089a0:	4b3d      	ldr	r3, [pc, #244]	; (8008a98 <taskGpsNewData+0x3bc>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 80089a6:	4b3d      	ldr	r3, [pc, #244]	; (8008a9c <taskGpsNewData+0x3c0>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 80089ac:	f000 fb36 	bl	800901c <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 80089b0:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <taskGpsNewData+0x3c4>)
 80089b2:	7a1b      	ldrb	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <taskGpsNewData+0x2e4>
 80089b8:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <taskGpsNewData+0x3c4>)
 80089ba:	79db      	ldrb	r3, [r3, #7]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d056      	beq.n	8008a6e <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 80089c0:	4b38      	ldr	r3, [pc, #224]	; (8008aa4 <taskGpsNewData+0x3c8>)
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	4b38      	ldr	r3, [pc, #224]	; (8008aa8 <taskGpsNewData+0x3cc>)
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	4b38      	ldr	r3, [pc, #224]	; (8008aac <taskGpsNewData+0x3d0>)
 80089ca:	4a39      	ldr	r2, [pc, #228]	; (8008ab0 <taskGpsNewData+0x3d4>)
 80089cc:	492f      	ldr	r1, [pc, #188]	; (8008a8c <taskGpsNewData+0x3b0>)
 80089ce:	4830      	ldr	r0, [pc, #192]	; (8008a90 <taskGpsNewData+0x3b4>)
 80089d0:	f000 fab6 	bl	8008f40 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <taskGpsNewData+0x3b0>)
 80089d6:	4a2e      	ldr	r2, [pc, #184]	; (8008a90 <taskGpsNewData+0x3b4>)
 80089d8:	4934      	ldr	r1, [pc, #208]	; (8008aac <taskGpsNewData+0x3d0>)
 80089da:	4835      	ldr	r0, [pc, #212]	; (8008ab0 <taskGpsNewData+0x3d4>)
 80089dc:	f000 fba0 	bl	8009120 <GPS_calc_location_error>

                if (f.FIXED_WING)
 80089e0:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <taskGpsNewData+0x3c4>)
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <taskGpsNewData+0x3d8>)
 80089ea:	2202      	movs	r2, #2
 80089ec:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 80089ee:	4b31      	ldr	r3, [pc, #196]	; (8008ab4 <taskGpsNewData+0x3d8>)
 80089f0:	f993 3000 	ldrsb.w	r3, [r3]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <taskGpsNewData+0x322>
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d003      	beq.n	8008a04 <taskGpsNewData+0x328>
 80089fc:	e03a      	b.n	8008a74 <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 80089fe:	f000 fbbb 	bl	8009178 <GPS_calc_poshold>
                        break;
 8008a02:	e037      	b.n	8008a74 <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008a04:	4b2c      	ldr	r3, [pc, #176]	; (8008ab8 <taskGpsNewData+0x3dc>)
 8008a06:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fdc0 	bl	8009594 <GPS_calc_desired_speed>
 8008a14:	4603      	mov	r3, r0
 8008a16:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fc63 	bl	80092e8 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008a22:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <taskGpsNewData+0x3dc>)
 8008a24:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008a2c:	4b23      	ldr	r3, [pc, #140]	; (8008abc <taskGpsNewData+0x3e0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <taskGpsNewData+0x3b8>)
 8008a32:	fb82 1203 	smull	r1, r2, r2, r3
 8008a36:	1152      	asrs	r2, r2, #5
 8008a38:	17db      	asrs	r3, r3, #31
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	b21a      	sxth	r2, r3
 8008a3e:	4b20      	ldr	r3, [pc, #128]	; (8008ac0 <taskGpsNewData+0x3e4>)
 8008a40:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <taskGpsNewData+0x3dc>)
 8008a44:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <taskGpsNewData+0x3cc>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	da04      	bge.n	8008a5c <taskGpsNewData+0x380>
 8008a52:	f000 fa55 	bl	8008f00 <check_missed_wp>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <taskGpsNewData+0x3d8>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008a62:	4b18      	ldr	r3, [pc, #96]	; (8008ac4 <taskGpsNewData+0x3e8>)
 8008a64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a68:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <taskGpsNewData+0x3e4>)
 8008a6a:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008a6c:	e001      	b.n	8008a72 <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <taskGpsNewData+0x398>
                        break;
 8008a72:	bf00      	nop
        }

    return 0;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd90      	pop	{r4, r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200012f8 	.word	0x200012f8
 8008a84:	200017f0 	.word	0x200017f0
 8008a88:	200017ec 	.word	0x200017ec
 8008a8c:	200017e8 	.word	0x200017e8
 8008a90:	200017e4 	.word	0x200017e4
 8008a94:	51eb851f 	.word	0x51eb851f
 8008a98:	20001806 	.word	0x20001806
 8008a9c:	20001808 	.word	0x20001808
 8008aa0:	20001720 	.word	0x20001720
 8008aa4:	20001314 	.word	0x20001314
 8008aa8:	20001320 	.word	0x20001320
 8008aac:	20001310 	.word	0x20001310
 8008ab0:	2000130c 	.word	0x2000130c
 8008ab4:	20001820 	.word	0x20001820
 8008ab8:	20000db4 	.word	0x20000db4
 8008abc:	20001374 	.word	0x20001374
 8008ac0:	20001a58 	.word	0x20001a58
 8008ac4:	20001378 	.word	0x20001378

08008ac8 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <GPS_reset_home_position+0x4c>)
 8008ace:	7adb      	ldrb	r3, [r3, #11]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01d      	beq.n	8008b10 <GPS_reset_home_position+0x48>
 8008ad4:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <GPS_reset_home_position+0x50>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d919      	bls.n	8008b10 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008adc:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <GPS_reset_home_position+0x54>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <GPS_reset_home_position+0x58>)
 8008ae2:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <GPS_reset_home_position+0x54>)
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <GPS_reset_home_position+0x58>)
 8008aea:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <GPS_reset_home_position+0x54>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f97d 	bl	8008df0 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <GPS_reset_home_position+0x5c>)
 8008af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <GPS_reset_home_position+0x60>)
 8008afe:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <GPS_reset_home_position+0x64>)
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <GPS_reset_home_position+0x58>)
 8008b08:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008b0a:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <GPS_reset_home_position+0x4c>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	731a      	strb	r2, [r3, #12]
    }
}
 8008b10:	bf00      	nop
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	20001720 	.word	0x20001720
 8008b18:	20001804 	.word	0x20001804
 8008b1c:	200017e4 	.word	0x200017e4
 8008b20:	200017ec 	.word	0x200017ec
 8008b24:	20001a56 	.word	0x20001a56
 8008b28:	20001378 	.word	0x20001378
 8008b2c:	2000180a 	.word	0x2000180a

08008b30 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008b36:	2300      	movs	r3, #0
 8008b38:	607b      	str	r3, [r7, #4]
 8008b3a:	e02f      	b.n	8008b9c <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008b3c:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <GPS_reset_nav+0x88>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2100      	movs	r1, #0
 8008b42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008b46:	4a1d      	ldr	r2, [pc, #116]	; (8008bbc <GPS_reset_nav+0x8c>)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008b50:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <GPS_reset_nav+0x90>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2100      	movs	r1, #0
 8008b56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <GPS_reset_nav+0x94>)
 8008b66:	4413      	add	r3, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff fda1 	bl	80086b0 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <GPS_reset_nav+0x98>)
 8008b7a:	4413      	add	r3, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fd97 	bl	80086b0 <reset_PID>
        reset_PID(&navPID[i]);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4a0f      	ldr	r2, [pc, #60]	; (8008bcc <GPS_reset_nav+0x9c>)
 8008b8e:	4413      	add	r3, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fd8d 	bl	80086b0 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	ddcc      	ble.n	8008b3c <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <GPS_reset_nav+0xa0>)
 8008ba4:	7c1b      	ldrb	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008baa:	f7fe fa07 	bl	8006fbc <fw_nav_reset>

}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20001810 	.word	0x20001810
 8008bbc:	2000181c 	.word	0x2000181c
 8008bc0:	20001818 	.word	0x20001818
 8008bc4:	20001280 	.word	0x20001280
 8008bc8:	200012a8 	.word	0x200012a8
 8008bcc:	200012d0 	.word	0x200012d0
 8008bd0:	20001720 	.word	0x20001720

08008bd4 <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008bd8:	4b50      	ldr	r3, [pc, #320]	; (8008d1c <gpsSetPIDs+0x148>)
 8008bda:	795b      	ldrb	r3, [r3, #5]
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008be4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d20 <gpsSetPIDs+0x14c>
 8008be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bec:	4b4d      	ldr	r3, [pc, #308]	; (8008d24 <gpsSetPIDs+0x150>)
 8008bee:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008bf2:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <gpsSetPIDs+0x148>)
 8008bf4:	7bdb      	ldrb	r3, [r3, #15]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d20 <gpsSetPIDs+0x14c>
 8008c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c06:	4b47      	ldr	r3, [pc, #284]	; (8008d24 <gpsSetPIDs+0x150>)
 8008c08:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008c0c:	4b45      	ldr	r3, [pc, #276]	; (8008d24 <gpsSetPIDs+0x150>)
 8008c0e:	4a46      	ldr	r2, [pc, #280]	; (8008d28 <gpsSetPIDs+0x154>)
 8008c10:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008c12:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c14:	799b      	ldrb	r3, [r3, #6]
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c26:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <gpsSetPIDs+0x158>)
 8008c28:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008c2c:	4b3b      	ldr	r3, [pc, #236]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c2e:	7c1b      	ldrb	r3, [r3, #16]
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c38:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008d20 <gpsSetPIDs+0x14c>
 8008c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c40:	4b3a      	ldr	r3, [pc, #232]	; (8008d2c <gpsSetPIDs+0x158>)
 8008c42:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008c46:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c48:	7e9b      	ldrb	r3, [r3, #26]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c52:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008d30 <gpsSetPIDs+0x15c>
 8008c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c5a:	4b34      	ldr	r3, [pc, #208]	; (8008d2c <gpsSetPIDs+0x158>)
 8008c5c:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008c60:	4b32      	ldr	r3, [pc, #200]	; (8008d2c <gpsSetPIDs+0x158>)
 8008c62:	4a31      	ldr	r2, [pc, #196]	; (8008d28 <gpsSetPIDs+0x154>)
 8008c64:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008c66:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c68:	79db      	ldrb	r3, [r3, #7]
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c72:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	; (8008d34 <gpsSetPIDs+0x160>)
 8008c7c:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008c80:	4b26      	ldr	r3, [pc, #152]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c82:	7c5b      	ldrb	r3, [r3, #17]
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c8c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008d20 <gpsSetPIDs+0x14c>
 8008c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c94:	4b27      	ldr	r3, [pc, #156]	; (8008d34 <gpsSetPIDs+0x160>)
 8008c96:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008c9a:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <gpsSetPIDs+0x148>)
 8008c9c:	7edb      	ldrb	r3, [r3, #27]
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ca6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008d30 <gpsSetPIDs+0x15c>
 8008caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cae:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <gpsSetPIDs+0x160>)
 8008cb0:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <gpsSetPIDs+0x160>)
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <gpsSetPIDs+0x154>)
 8008cb8:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008cba:	4b1f      	ldr	r3, [pc, #124]	; (8008d38 <gpsSetPIDs+0x164>)
 8008cbc:	7c1b      	ldrb	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d026      	beq.n	8008d10 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008cc2:	4b16      	ldr	r3, [pc, #88]	; (8008d1c <gpsSetPIDs+0x148>)
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cd6:	4b19      	ldr	r3, [pc, #100]	; (8008d3c <gpsSetPIDs+0x168>)
 8008cd8:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <gpsSetPIDs+0x148>)
 8008cde:	7b9b      	ldrb	r3, [r3, #14]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ce8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008d20 <gpsSetPIDs+0x14c>
 8008cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cf0:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <gpsSetPIDs+0x168>)
 8008cf2:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <gpsSetPIDs+0x148>)
 8008cf8:	7e1b      	ldrb	r3, [r3, #24]
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d02:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008d30 <gpsSetPIDs+0x15c>
 8008d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <gpsSetPIDs+0x168>)
 8008d0c:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008d10:	bf00      	nop
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20000db4 	.word	0x20000db4
 8008d20:	42c80000 	.word	0x42c80000
 8008d24:	20001240 	.word	0x20001240
 8008d28:	44fa0000 	.word	0x44fa0000
 8008d2c:	20001250 	.word	0x20001250
 8008d30:	447a0000 	.word	0x447a0000
 8008d34:	20001260 	.word	0x20001260
 8008d38:	20001720 	.word	0x20001720
 8008d3c:	20001270 	.word	0x20001270

08008d40 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f7f9 f995 	bl	8002078 <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f7f9 f992 	bl	8002078 <actLed0State>
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
    static bool state = false;
	PifGps* p_gps;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <gpsSetPassthrough+0x78>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d002      	beq.n	8008d70 <gpsSetPassthrough+0x14>
        return -1;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	e02d      	b.n	8008dcc <gpsSetPassthrough+0x70>

    actLed0State(OFF);
 8008d70:	2000      	movs	r0, #0
 8008d72:	f7f9 f981 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8008d76:	2000      	movs	r0, #0
 8008d78:	f7f9 f9aa 	bl	80020d0 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008d7c:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <gpsSetPassthrough+0x7c>)
 8008d7e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d120      	bne.n	8008dc8 <gpsSetPassthrough+0x6c>
		p_gps = (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) ? &gps_nmea._gps : &gps_ublox._gps;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <gpsSetPassthrough+0x78>)
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <gpsSetPassthrough+0x80>)
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008d96:	d101      	bne.n	8008d9c <gpsSetPassthrough+0x40>
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <gpsSetPassthrough+0x84>)
 8008d9a:	e000      	b.n	8008d9e <gpsSetPassthrough+0x42>
 8008d9c:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <gpsSetPassthrough+0x88>)
 8008d9e:	607b      	str	r3, [r7, #4]
        if (state) {
 8008da0:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <gpsSetPassthrough+0x8c>)
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <gpsSetPassthrough+0x5c>
            p_gps->evt_frame = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	609a      	str	r2, [r3, #8]
            state = false;
 8008dae:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <gpsSetPassthrough+0x8c>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
            return 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e009      	b.n	8008dcc <gpsSetPassthrough+0x70>
        }
        else {
            p_gps->evt_frame = _EvtPrintFrame;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <gpsSetPassthrough+0x90>)
 8008dbc:	609a      	str	r2, [r3, #8]
            state = true;
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <gpsSetPassthrough+0x8c>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	701a      	strb	r2, [r3, #0]
            return 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e001      	b.n	8008dcc <gpsSetPassthrough+0x70>
        }
    }
    return -1;
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000f30 	.word	0x20000f30
 8008dd8:	20000848 	.word	0x20000848
 8008ddc:	08028c54 	.word	0x08028c54
 8008de0:	20000f50 	.word	0x20000f50
 8008de4:	20000fd0 	.word	0x20000fd0
 8008de8:	20001380 	.word	0x20001380
 8008dec:	08008d41 	.word	0x08008d41

08008df0 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0a:	dd05      	ble.n	8008e18 <GPS_calc_longitude_scaling+0x28>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e16:	e006      	b.n	8008e26 <GPS_calc_longitude_scaling+0x36>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e22:	eef1 7a67 	vneg.f32	s15, s15
 8008e26:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e54 <GPS_calc_longitude_scaling+0x64>
 8008e2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e2e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008e58 <GPS_calc_longitude_scaling+0x68>
 8008e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e36:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008e3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8008e3e:	f01a fdb3 	bl	80239a8 <cosf>
 8008e42:	eef0 7a40 	vmov.f32	s15, s0
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <GPS_calc_longitude_scaling+0x6c>)
 8008e48:	edc3 7a00 	vstr	s15, [r3]
}
 8008e4c:	bf00      	nop
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	4b189680 	.word	0x4b189680
 8008e58:	3c8efa35 	.word	0x3c8efa35
 8008e5c:	20000028 	.word	0x20000028

08008e60 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <GPS_set_next_wp+0x74>)
 8008e70:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a17      	ldr	r2, [pc, #92]	; (8008ed4 <GPS_set_next_wp+0x74>)
 8008e78:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff ffb6 	bl	8008df0 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <GPS_set_next_wp+0x78>)
 8008e86:	7d1b      	ldrb	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008e8c:	f7fe f8d2 	bl	8007034 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <GPS_set_next_wp+0x7c>)
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <GPS_set_next_wp+0x80>)
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <GPS_set_next_wp+0x84>)
 8008e9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ed4 <GPS_set_next_wp+0x74>)
 8008e9c:	4912      	ldr	r1, [pc, #72]	; (8008ee8 <GPS_set_next_wp+0x88>)
 8008e9e:	4813      	ldr	r0, [pc, #76]	; (8008eec <GPS_set_next_wp+0x8c>)
 8008ea0:	f000 f84e 	bl	8008f40 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <GPS_set_next_wp+0x7c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a11      	ldr	r2, [pc, #68]	; (8008ef0 <GPS_set_next_wp+0x90>)
 8008eaa:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008eac:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <GPS_set_next_wp+0x88>)
 8008eae:	4a0f      	ldr	r2, [pc, #60]	; (8008eec <GPS_set_next_wp+0x8c>)
 8008eb0:	490c      	ldr	r1, [pc, #48]	; (8008ee4 <GPS_set_next_wp+0x84>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <GPS_set_next_wp+0x74>)
 8008eb4:	f000 f934 	bl	8009120 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008eb8:	4b08      	ldr	r3, [pc, #32]	; (8008edc <GPS_set_next_wp+0x7c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a0d      	ldr	r2, [pc, #52]	; (8008ef4 <GPS_set_next_wp+0x94>)
 8008ebe:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <GPS_set_next_wp+0x98>)
 8008ec2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008ec6:	b21a      	sxth	r2, r3
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <GPS_set_next_wp+0x9c>)
 8008eca:	801a      	strh	r2, [r3, #0]
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	2000130c 	.word	0x2000130c
 8008ed8:	20001720 	.word	0x20001720
 8008edc:	20001314 	.word	0x20001314
 8008ee0:	20001320 	.word	0x20001320
 8008ee4:	20001310 	.word	0x20001310
 8008ee8:	200017e8 	.word	0x200017e8
 8008eec:	200017e4 	.word	0x200017e4
 8008ef0:	20001374 	.word	0x20001374
 8008ef4:	20001318 	.word	0x20001318
 8008ef8:	20000db4 	.word	0x20000db4
 8008efc:	20001324 	.word	0x20001324

08008f00 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <check_missed_wp+0x38>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <check_missed_wp+0x3c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fb9a 	bl	800964c <wrap_18000>
 8008f18:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfb8      	it	lt
 8008f20:	425b      	neglt	r3, r3
 8008f22:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f26:	4293      	cmp	r3, r2
 8008f28:	bfcc      	ite	gt
 8008f2a:	2301      	movgt	r3, #1
 8008f2c:	2300      	movle	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20001314 	.word	0x20001314
 8008f3c:	20001318 	.word	0x20001318

08008f40 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f60:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f76:	4b25      	ldr	r3, [pc, #148]	; (800900c <GPS_distance_cm_bearing+0xcc>)
 8008f78:	edd3 7a00 	vldr	s15, [r3]
 8008f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f80:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8008f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f88:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008f8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f98:	eeb0 0a67 	vmov.f32	s0, s15
 8008f9c:	f01a fe54 	bl	8023c48 <sqrtf>
 8008fa0:	eef0 7a40 	vmov.f32	s15, s0
 8008fa4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009010 <GPS_distance_cm_bearing+0xd0>
 8008fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb0:	ee17 2a90 	vmov	r2, s15
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8008fb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fbc:	eef1 7a67 	vneg.f32	s15, s15
 8008fc0:	edd7 0a04 	vldr	s1, [r7, #16]
 8008fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc8:	f01a fde4 	bl	8023b94 <atan2f>
 8008fcc:	eef0 7a40 	vmov.f32	s15, s0
 8008fd0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009014 <GPS_distance_cm_bearing+0xd4>
 8008fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fd8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009018 <GPS_distance_cm_bearing+0xd8>
 8008fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fe4:	ee17 2a90 	vmov	r2, s15
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da06      	bge.n	8009002 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8008ffc:	33a0      	adds	r3, #160	; 0xa0
 8008ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009000:	6013      	str	r3, [r2, #0]
}
 8009002:	bf00      	nop
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000028 	.word	0x20000028
 8009010:	3f8e7d2c 	.word	0x3f8e7d2c
 8009014:	45b30ca0 	.word	0x45b30ca0
 8009018:	460ca000 	.word	0x460ca000

0800901c <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 8009022:	4b38      	ldr	r3, [pc, #224]	; (8009104 <GPS_calc_velocity+0xe8>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d05b      	beq.n	80090e2 <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 800902a:	4b37      	ldr	r3, [pc, #220]	; (8009108 <GPS_calc_velocity+0xec>)
 800902c:	ed93 7a00 	vldr	s14, [r3]
 8009030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 800903c:	4b33      	ldr	r3, [pc, #204]	; (800910c <GPS_calc_velocity+0xf0>)
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	4b33      	ldr	r3, [pc, #204]	; (8009110 <GPS_calc_velocity+0xf4>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800904e:	4b31      	ldr	r3, [pc, #196]	; (8009114 <GPS_calc_velocity+0xf8>)
 8009050:	edd3 7a00 	vldr	s15, [r3]
 8009054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009058:	edd7 7a01 	vldr	s15, [r7, #4]
 800905c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009064:	ee17 3a90 	vmov	r3, s15
 8009068:	b21a      	sxth	r2, r3
 800906a:	4b2b      	ldr	r3, [pc, #172]	; (8009118 <GPS_calc_velocity+0xfc>)
 800906c:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 800906e:	4b27      	ldr	r3, [pc, #156]	; (800910c <GPS_calc_velocity+0xf0>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b27      	ldr	r3, [pc, #156]	; (8009110 <GPS_calc_velocity+0xf4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009080:	edd7 7a01 	vldr	s15, [r7, #4]
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800908c:	ee17 3a90 	vmov	r3, s15
 8009090:	b21a      	sxth	r2, r3
 8009092:	4b21      	ldr	r3, [pc, #132]	; (8009118 <GPS_calc_velocity+0xfc>)
 8009094:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 8009096:	4b20      	ldr	r3, [pc, #128]	; (8009118 <GPS_calc_velocity+0xfc>)
 8009098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800909c:	461a      	mov	r2, r3
 800909e:	4b1f      	ldr	r3, [pc, #124]	; (800911c <GPS_calc_velocity+0x100>)
 80090a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090a4:	4413      	add	r3, r2
 80090a6:	0fda      	lsrs	r2, r3, #31
 80090a8:	4413      	add	r3, r2
 80090aa:	105b      	asrs	r3, r3, #1
 80090ac:	b21a      	sxth	r2, r3
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <GPS_calc_velocity+0xfc>)
 80090b0:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 80090b2:	4b19      	ldr	r3, [pc, #100]	; (8009118 <GPS_calc_velocity+0xfc>)
 80090b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090b8:	461a      	mov	r2, r3
 80090ba:	4b18      	ldr	r3, [pc, #96]	; (800911c <GPS_calc_velocity+0x100>)
 80090bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090c0:	4413      	add	r3, r2
 80090c2:	0fda      	lsrs	r2, r3, #31
 80090c4:	4413      	add	r3, r2
 80090c6:	105b      	asrs	r3, r3, #1
 80090c8:	b21a      	sxth	r2, r3
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <GPS_calc_velocity+0xfc>)
 80090cc:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <GPS_calc_velocity+0xfc>)
 80090d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80090d4:	4b11      	ldr	r3, [pc, #68]	; (800911c <GPS_calc_velocity+0x100>)
 80090d6:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <GPS_calc_velocity+0xfc>)
 80090da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <GPS_calc_velocity+0x100>)
 80090e0:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <GPS_calc_velocity+0xe8>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 80090e8:	4b08      	ldr	r3, [pc, #32]	; (800910c <GPS_calc_velocity+0xf0>)
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	4a08      	ldr	r2, [pc, #32]	; (8009110 <GPS_calc_velocity+0xf4>)
 80090ee:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <GPS_calc_velocity+0xf0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a06      	ldr	r2, [pc, #24]	; (8009110 <GPS_calc_velocity+0xf4>)
 80090f6:	6013      	str	r3, [r2, #0]
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	20001381 	.word	0x20001381
 8009108:	200012f8 	.word	0x200012f8
 800910c:	200017e4 	.word	0x200017e4
 8009110:	20001384 	.word	0x20001384
 8009114:	20000028 	.word	0x20000028
 8009118:	200012fc 	.word	0x200012fc
 800911c:	2000138c 	.word	0x2000138c

08009120 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <GPS_calc_location_error+0x50>)
 8009142:	edd3 7a00 	vldr	s15, [r3]
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800914e:	ee17 2a90 	vmov	r2, s15
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <GPS_calc_location_error+0x54>)
 8009154:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	4a04      	ldr	r2, [pc, #16]	; (8009174 <GPS_calc_location_error+0x54>)
 8009162:	6013      	str	r3, [r2, #0]
}
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20000028 	.word	0x20000028
 8009174:	20001304 	.word	0x20001304

08009178 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	e092      	b.n	80092aa <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 8009184:	4a4d      	ldr	r2, [pc, #308]	; (80092bc <GPS_calc_poshold+0x144>)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800918c:	494c      	ldr	r1, [pc, #304]	; (80092c0 <GPS_calc_poshold+0x148>)
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff f994 	bl	80084bc <get_P>
 8009194:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	b29a      	uxth	r2, r3
 800919a:	494a      	ldr	r1, [pc, #296]	; (80092c4 <GPS_calc_poshold+0x14c>)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	b219      	sxth	r1, r3
 80091aa:	4a47      	ldr	r2, [pc, #284]	; (80092c8 <GPS_calc_poshold+0x150>)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80091b2:	4a45      	ldr	r2, [pc, #276]	; (80092c8 <GPS_calc_poshold+0x150>)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80091ba:	4944      	ldr	r1, [pc, #272]	; (80092cc <GPS_calc_poshold+0x154>)
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff f97d 	bl	80084bc <get_P>
 80091c2:	4603      	mov	r3, r0
 80091c4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80091c6:	4a40      	ldr	r2, [pc, #256]	; (80092c8 <GPS_calc_poshold+0x150>)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80091ce:	4619      	mov	r1, r3
 80091d0:	4a3a      	ldr	r2, [pc, #232]	; (80092bc <GPS_calc_poshold+0x144>)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	18c8      	adds	r0, r1, r3
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4a3a      	ldr	r2, [pc, #232]	; (80092d0 <GPS_calc_poshold+0x158>)
 80091e6:	441a      	add	r2, r3
 80091e8:	4b38      	ldr	r3, [pc, #224]	; (80092cc <GPS_calc_poshold+0x154>)
 80091ea:	493a      	ldr	r1, [pc, #232]	; (80092d4 <GPS_calc_poshold+0x15c>)
 80091ec:	f7ff f97f 	bl	80084ee <get_I>
 80091f0:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4423      	add	r3, r4
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	b219      	sxth	r1, r3
 80091fa:	4a37      	ldr	r2, [pc, #220]	; (80092d8 <GPS_calc_poshold+0x160>)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8009202:	4a2e      	ldr	r2, [pc, #184]	; (80092bc <GPS_calc_poshold+0x144>)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a2e      	ldr	r2, [pc, #184]	; (80092d0 <GPS_calc_poshold+0x158>)
 8009216:	441a      	add	r2, r3
 8009218:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <GPS_calc_poshold+0x154>)
 800921a:	492e      	ldr	r1, [pc, #184]	; (80092d4 <GPS_calc_poshold+0x15c>)
 800921c:	f7ff f9b0 	bl	8008580 <get_D>
 8009220:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 8009222:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009226:	492d      	ldr	r1, [pc, #180]	; (80092dc <GPS_calc_poshold+0x164>)
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7fa fced 	bl	8003c08 <constrain>
 800922e:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009230:	4a24      	ldr	r2, [pc, #144]	; (80092c4 <GPS_calc_poshold+0x14c>)
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009238:	2b00      	cmp	r3, #0
 800923a:	bfb8      	it	lt
 800923c:	425b      	neglt	r3, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	2b31      	cmp	r3, #49	; 0x31
 8009242:	d801      	bhi.n	8009248 <GPS_calc_poshold+0xd0>
            d = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009248:	4a23      	ldr	r2, [pc, #140]	; (80092d8 <GPS_calc_poshold+0x160>)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	b29b      	uxth	r3, r3
 8009256:	4413      	add	r3, r2
 8009258:	b29b      	uxth	r3, r3
 800925a:	b219      	sxth	r1, r3
 800925c:	4a1e      	ldr	r2, [pc, #120]	; (80092d8 <GPS_calc_poshold+0x160>)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009264:	4a1c      	ldr	r2, [pc, #112]	; (80092d8 <GPS_calc_poshold+0x160>)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800926c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009270:	491b      	ldr	r1, [pc, #108]	; (80092e0 <GPS_calc_poshold+0x168>)
 8009272:	4618      	mov	r0, r3
 8009274:	f7fa fcc8 	bl	8003c08 <constrain>
 8009278:	4603      	mov	r3, r0
 800927a:	b219      	sxth	r1, r3
 800927c:	4a16      	ldr	r2, [pc, #88]	; (80092d8 <GPS_calc_poshold+0x160>)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 8009284:	4912      	ldr	r1, [pc, #72]	; (80092d0 <GPS_calc_poshold+0x158>)
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	4813      	ldr	r0, [pc, #76]	; (80092e4 <GPS_calc_poshold+0x16c>)
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4613      	mov	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4403      	add	r3, r0
 80092a2:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60bb      	str	r3, [r7, #8]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	f77f af69 	ble.w	8009184 <GPS_calc_poshold+0xc>
    }
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd90      	pop	{r4, r7, pc}
 80092bc:	20001304 	.word	0x20001304
 80092c0:	20001240 	.word	0x20001240
 80092c4:	200012fc 	.word	0x200012fc
 80092c8:	20001300 	.word	0x20001300
 80092cc:	20001250 	.word	0x20001250
 80092d0:	200012a8 	.word	0x200012a8
 80092d4:	200012f8 	.word	0x200012f8
 80092d8:	20001818 	.word	0x20001818
 80092dc:	fffff830 	.word	0xfffff830
 80092e0:	fffff448 	.word	0xfffff448
 80092e4:	200012d0 	.word	0x200012d0

080092e8 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80092e8:	b590      	push	{r4, r7, lr}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80092f0:	f000 f8cc 	bl	800948c <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80092f4:	4b5a      	ldr	r3, [pc, #360]	; (8009460 <GPS_calc_nav_rate+0x178>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80092fc:	3328      	adds	r3, #40	; 0x28
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009306:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009464 <GPS_calc_nav_rate+0x17c>
 800930a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800930e:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 8009312:	ed97 0a04 	vldr	s0, [r7, #16]
 8009316:	f01a fb47 	bl	80239a8 <cosf>
 800931a:	eef0 7a40 	vmov.f32	s15, s0
 800931e:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 8009322:	ed97 0a04 	vldr	s0, [r7, #16]
 8009326:	f01a fbc3 	bl	8023ab0 <sinf>
 800932a:	eef0 7a40 	vmov.f32	s15, s0
 800932e:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e08a      	b.n	800944e <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	3318      	adds	r3, #24
 800933e:	443b      	add	r3, r7
 8009340:	3b10      	subs	r3, #16
 8009342:	ed93 7a00 	vldr	s14, [r3]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009354:	4a44      	ldr	r2, [pc, #272]	; (8009468 <GPS_calc_nav_rate+0x180>)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800936c:	ee17 3a90 	vmov	r3, s15
 8009370:	b219      	sxth	r1, r3
 8009372:	4a3e      	ldr	r2, [pc, #248]	; (800946c <GPS_calc_nav_rate+0x184>)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 800937a:	4a3c      	ldr	r2, [pc, #240]	; (800946c <GPS_calc_nav_rate+0x184>)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009386:	493a      	ldr	r1, [pc, #232]	; (8009470 <GPS_calc_nav_rate+0x188>)
 8009388:	4618      	mov	r0, r3
 800938a:	f7fa fc3d 	bl	8003c08 <constrain>
 800938e:	4603      	mov	r3, r0
 8009390:	b219      	sxth	r1, r3
 8009392:	4a36      	ldr	r2, [pc, #216]	; (800946c <GPS_calc_nav_rate+0x184>)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 800939a:	4a34      	ldr	r2, [pc, #208]	; (800946c <GPS_calc_nav_rate+0x184>)
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093a2:	4934      	ldr	r1, [pc, #208]	; (8009474 <GPS_calc_nav_rate+0x18c>)
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff f889 	bl	80084bc <get_P>
 80093aa:	4603      	mov	r3, r0
 80093ac:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80093ae:	4a2f      	ldr	r2, [pc, #188]	; (800946c <GPS_calc_nav_rate+0x184>)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093b6:	4618      	mov	r0, r3
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a2d      	ldr	r2, [pc, #180]	; (8009478 <GPS_calc_nav_rate+0x190>)
 80093c4:	441a      	add	r2, r3
 80093c6:	4b2b      	ldr	r3, [pc, #172]	; (8009474 <GPS_calc_nav_rate+0x18c>)
 80093c8:	492c      	ldr	r1, [pc, #176]	; (800947c <GPS_calc_nav_rate+0x194>)
 80093ca:	f7ff f890 	bl	80084ee <get_I>
 80093ce:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4423      	add	r3, r4
 80093d4:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 80093d6:	4a25      	ldr	r2, [pc, #148]	; (800946c <GPS_calc_nav_rate+0x184>)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093de:	4618      	mov	r0, r3
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4a23      	ldr	r2, [pc, #140]	; (8009478 <GPS_calc_nav_rate+0x190>)
 80093ec:	441a      	add	r2, r3
 80093ee:	4b21      	ldr	r3, [pc, #132]	; (8009474 <GPS_calc_nav_rate+0x18c>)
 80093f0:	4922      	ldr	r1, [pc, #136]	; (800947c <GPS_calc_nav_rate+0x194>)
 80093f2:	f7ff f8c5 	bl	8008580 <get_D>
 80093f6:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4423      	add	r3, r4
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009400:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <GPS_calc_nav_rate+0x198>)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <GPS_calc_nav_rate+0x198>)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009410:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009414:	491b      	ldr	r1, [pc, #108]	; (8009484 <GPS_calc_nav_rate+0x19c>)
 8009416:	4618      	mov	r0, r3
 8009418:	f7fa fbf6 	bl	8003c08 <constrain>
 800941c:	4603      	mov	r3, r0
 800941e:	b219      	sxth	r1, r3
 8009420:	4a17      	ldr	r2, [pc, #92]	; (8009480 <GPS_calc_nav_rate+0x198>)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009428:	4913      	ldr	r1, [pc, #76]	; (8009478 <GPS_calc_nav_rate+0x190>)
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	6819      	ldr	r1, [r3, #0]
 8009438:	4813      	ldr	r0, [pc, #76]	; (8009488 <GPS_calc_nav_rate+0x1a0>)
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4403      	add	r3, r0
 8009446:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	3301      	adds	r3, #1
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b01      	cmp	r3, #1
 8009452:	f77f af71 	ble.w	8009338 <GPS_calc_nav_rate+0x50>
    }
}
 8009456:	bf00      	nop
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	bd90      	pop	{r4, r7, pc}
 8009460:	20001374 	.word	0x20001374
 8009464:	393702d3 	.word	0x393702d3
 8009468:	200012fc 	.word	0x200012fc
 800946c:	20001300 	.word	0x20001300
 8009470:	fffffc18 	.word	0xfffffc18
 8009474:	20001260 	.word	0x20001260
 8009478:	200012d0 	.word	0x200012d0
 800947c:	200012f8 	.word	0x200012f8
 8009480:	20001818 	.word	0x20001818
 8009484:	fffff448 	.word	0xfffff448
 8009488:	200012a8 	.word	0x200012a8

0800948c <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 8009492:	4b38      	ldr	r3, [pc, #224]	; (8009574 <GPS_update_crosstrack+0xe8>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b38      	ldr	r3, [pc, #224]	; (8009578 <GPS_update_crosstrack+0xec>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f8d5 	bl	800964c <wrap_18000>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd10      	ble.n	80094ca <GPS_update_crosstrack+0x3e>
 80094a8:	4b32      	ldr	r3, [pc, #200]	; (8009574 <GPS_update_crosstrack+0xe8>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <GPS_update_crosstrack+0xec>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f8ca 	bl	800964c <wrap_18000>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f241 1293 	movw	r2, #4499	; 0x1193
 80094be:	4293      	cmp	r3, r2
 80094c0:	bfd4      	ite	le
 80094c2:	2301      	movle	r3, #1
 80094c4:	2300      	movgt	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	e00e      	b.n	80094e8 <GPS_update_crosstrack+0x5c>
 80094ca:	4b2a      	ldr	r3, [pc, #168]	; (8009574 <GPS_update_crosstrack+0xe8>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <GPS_update_crosstrack+0xec>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8b9 	bl	800964c <wrap_18000>
 80094da:	4603      	mov	r3, r0
 80094dc:	4a27      	ldr	r2, [pc, #156]	; (800957c <GPS_update_crosstrack+0xf0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	bfac      	ite	ge
 80094e2:	2301      	movge	r3, #1
 80094e4:	2300      	movlt	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d03b      	beq.n	8009564 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80094ec:	4b21      	ldr	r3, [pc, #132]	; (8009574 <GPS_update_crosstrack+0xe8>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b21      	ldr	r3, [pc, #132]	; (8009578 <GPS_update_crosstrack+0xec>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094fe:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009580 <GPS_update_crosstrack+0xf4>
 8009502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009506:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 800950a:	ed97 0a01 	vldr	s0, [r7, #4]
 800950e:	f01a facf 	bl	8023ab0 <sinf>
 8009512:	eeb0 7a40 	vmov.f32	s14, s0
 8009516:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <GPS_update_crosstrack+0xf8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800952a:	ee17 3a90 	vmov	r3, s15
 800952e:	b21a      	sxth	r2, r3
 8009530:	4b15      	ldr	r3, [pc, #84]	; (8009588 <GPS_update_crosstrack+0xfc>)
 8009532:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 8009534:	4b14      	ldr	r3, [pc, #80]	; (8009588 <GPS_update_crosstrack+0xfc>)
 8009536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800953a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800953e:	4913      	ldr	r1, [pc, #76]	; (800958c <GPS_update_crosstrack+0x100>)
 8009540:	4618      	mov	r0, r3
 8009542:	f7fa fb61 	bl	8003c08 <constrain>
 8009546:	4602      	mov	r2, r0
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <GPS_update_crosstrack+0xe8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4413      	add	r3, r2
 800954e:	4a10      	ldr	r2, [pc, #64]	; (8009590 <GPS_update_crosstrack+0x104>)
 8009550:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 8009552:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <GPS_update_crosstrack+0x104>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f898 	bl	800968c <wrap_36000>
 800955c:	4603      	mov	r3, r0
 800955e:	4a0c      	ldr	r2, [pc, #48]	; (8009590 <GPS_update_crosstrack+0x104>)
 8009560:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 8009562:	e003      	b.n	800956c <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009564:	4b03      	ldr	r3, [pc, #12]	; (8009574 <GPS_update_crosstrack+0xe8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a09      	ldr	r2, [pc, #36]	; (8009590 <GPS_update_crosstrack+0x104>)
 800956a:	6013      	str	r3, [r2, #0]
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20001314 	.word	0x20001314
 8009578:	20001318 	.word	0x20001318
 800957c:	ffffee6d 	.word	0xffffee6d
 8009580:	393702d3 	.word	0x393702d3
 8009584:	20001320 	.word	0x20001320
 8009588:	2000131c 	.word	0x2000131c
 800958c:	fffff448 	.word	0xfffff448
 8009590:	20001374 	.word	0x20001374

08009594 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	460a      	mov	r2, r1
 800959e:	80fb      	strh	r3, [r7, #6]
 80095a0:	4613      	mov	r3, r2
 80095a2:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 80095a4:	797b      	ldrb	r3, [r7, #5]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00c      	beq.n	80095c4 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 80095aa:	4b23      	ldr	r3, [pc, #140]	; (8009638 <GPS_calc_desired_speed+0xa4>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	0fda      	lsrs	r2, r3, #31
 80095b0:	4413      	add	r3, r2
 80095b2:	105b      	asrs	r3, r3, #1
 80095b4:	461a      	mov	r2, r3
 80095b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ba:	4293      	cmp	r3, r2
 80095bc:	bfa8      	it	ge
 80095be:	4613      	movge	r3, r2
 80095c0:	80fb      	strh	r3, [r7, #6]
 80095c2:	e011      	b.n	80095e8 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80095c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095c8:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <GPS_calc_desired_speed+0xa4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfa8      	it	ge
 80095d0:	4613      	movge	r3, r2
 80095d2:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 80095d4:	4b19      	ldr	r3, [pc, #100]	; (800963c <GPS_calc_desired_speed+0xa8>)
 80095d6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80095da:	461a      	mov	r2, r3
 80095dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	bfb8      	it	lt
 80095e4:	4613      	movlt	r3, r2
 80095e6:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80095e8:	4b15      	ldr	r3, [pc, #84]	; (8009640 <GPS_calc_desired_speed+0xac>)
 80095ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	dd17      	ble.n	8009626 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80095f6:	4b13      	ldr	r3, [pc, #76]	; (8009644 <GPS_calc_desired_speed+0xb0>)
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009648 <GPS_calc_desired_speed+0xb4>
 8009600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009608:	ee17 3a90 	vmov	r3, s15
 800960c:	b29a      	uxth	r2, r3
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <GPS_calc_desired_speed+0xac>)
 8009610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009614:	b29b      	uxth	r3, r3
 8009616:	4413      	add	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	b21a      	sxth	r2, r3
 800961c:	4b08      	ldr	r3, [pc, #32]	; (8009640 <GPS_calc_desired_speed+0xac>)
 800961e:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <GPS_calc_desired_speed+0xac>)
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 8009626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800962a:	4618      	mov	r0, r3
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20001320 	.word	0x20001320
 800963c:	20000db4 	.word	0x20000db4
 8009640:	20001324 	.word	0x20001324
 8009644:	200012f8 	.word	0x200012f8
 8009648:	42c80000 	.word	0x42c80000

0800964c <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f244 6250 	movw	r2, #18000	; 0x4650
 800965a:	4293      	cmp	r3, r2
 800965c:	dd04      	ble.n	8009668 <wrap_18000+0x1c>
        err -= 36000;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009664:	3ba0      	subs	r3, #160	; 0xa0
 8009666:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a07      	ldr	r2, [pc, #28]	; (8009688 <wrap_18000+0x3c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	da04      	bge.n	800967a <wrap_18000+0x2e>
        err += 36000;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009676:	33a0      	adds	r3, #160	; 0xa0
 8009678:	607b      	str	r3, [r7, #4]
    return err;
 800967a:	687b      	ldr	r3, [r7, #4]
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	ffffb9b0 	.word	0xffffb9b0

0800968c <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800969a:	4293      	cmp	r3, r2
 800969c:	dd04      	ble.n	80096a8 <wrap_36000+0x1c>
        deg -= 36000;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80096a4:	3ba0      	subs	r3, #160	; 0xa0
 80096a6:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da04      	bge.n	80096b8 <wrap_36000+0x2c>
        deg += 36000;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80096b4:	33a0      	adds	r3, #160	; 0xa0
 80096b6:	607b      	str	r3, [r7, #4]
    return deg;
 80096b8:	687b      	ldr	r3, [r7, #4]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
	...

080096c8 <ibusReadRawRC>:
static PifRcIbus s_ibus;
static uint16_t ibusChannelData[IBUS_MAX_CHANNEL];


static uint16_t ibusReadRawRC(uint8_t chan)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
    return ibusChannelData[mcfg.rcmap[chan]];
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	4a06      	ldr	r2, [pc, #24]	; (80096f0 <ibusReadRawRC+0x28>)
 80096d6:	4413      	add	r3, r2
 80096d8:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80096dc:	461a      	mov	r2, r3
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <ibusReadRawRC+0x2c>)
 80096e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000848 	.word	0x20000848
 80096f4:	20001430 	.word	0x20001430

080096f8 <_evtIbusReceive>:

static void _evtIbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009704:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009708:	f7fd fc04 	bl	8006f14 <feature>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <_evtIbusReceive+0x26>
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f00e fad8 	bl	8017cc8 <pifRc_CheckFailSafe>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11a      	bne.n	8009754 <_evtIbusReceive+0x5c>

    failsafeCnt = 0; // clear FailSafe counter
 800971e:	4b0f      	ldr	r3, [pc, #60]	; (800975c <_evtIbusReceive+0x64>)
 8009720:	2200      	movs	r2, #0
 8009722:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e00b      	b.n	8009742 <_evtIbusReceive+0x4a>
		ibusChannelData[i] = channel[i];
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	4413      	add	r3, r2
 8009732:	8819      	ldrh	r1, [r3, #0]
 8009734:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <_evtIbusReceive+0x68>)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	3301      	adds	r3, #1
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b07      	cmp	r3, #7
 8009746:	ddf0      	ble.n	800972a <_evtIbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 800974c:	6938      	ldr	r0, [r7, #16]
 800974e:	f00a ff5b 	bl	8014608 <pifTask_SetTrigger>
 8009752:	e000      	b.n	8009756 <_evtIbusReceive+0x5e>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009754:	bf00      	nop
}
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20001752 	.word	0x20001752
 8009760:	20001430 	.word	0x20001430

08009764 <ibusInit>:

BOOL ibusInit(int uart, rcReadRawDataPtr *callback)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	e009      	b.n	8009788 <ibusInit+0x24>
        ibusChannelData[b] = mcfg.midrc;
 8009774:	4b22      	ldr	r3, [pc, #136]	; (8009800 <ibusInit+0x9c>)
 8009776:	f8b3 1198 	ldrh.w	r1, [r3, #408]	; 0x198
 800977a:	4a22      	ldr	r2, [pc, #136]	; (8009804 <ibusInit+0xa0>)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3301      	adds	r3, #1
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b07      	cmp	r3, #7
 800978c:	ddf2      	ble.n	8009774 <ibusInit+0x10>

    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);	// 2ms
 800978e:	2302      	movs	r3, #2
 8009790:	2201      	movs	r2, #1
 8009792:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f8 fdb0 	bl	80022fc <uartOpen>
 800979c:	4603      	mov	r3, r0
 800979e:	4a1a      	ldr	r2, [pc, #104]	; (8009808 <ibusInit+0xa4>)
 80097a0:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <ibusInit+0xa4>)
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <ibusInit+0x4a>
 80097aa:	2300      	movs	r3, #0
 80097ac:	e023      	b.n	80097f6 <ibusInit+0x92>

    if (!pifRcIbus_Init(&s_ibus, PIF_ID_AUTO)) return FALSE;
 80097ae:	2100      	movs	r1, #0
 80097b0:	4816      	ldr	r0, [pc, #88]	; (800980c <ibusInit+0xa8>)
 80097b2:	f00e fca5 	bl	8018100 <pifRcIbus_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <ibusInit+0x5c>
 80097bc:	2300      	movs	r3, #0
 80097be:	e01a      	b.n	80097f6 <ibusInit+0x92>
    pifRc_AttachEvtReceive(&s_ibus.parent, _evtIbusReceive, g_task_compute_rc);
 80097c0:	4b13      	ldr	r3, [pc, #76]	; (8009810 <ibusInit+0xac>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	4913      	ldr	r1, [pc, #76]	; (8009814 <ibusInit+0xb0>)
 80097c8:	4810      	ldr	r0, [pc, #64]	; (800980c <ibusInit+0xa8>)
 80097ca:	f00e fa6b 	bl	8017ca4 <pifRc_AttachEvtReceive>
    pifRcIbus_AttachComm(&s_ibus, &core.rcvrport->comm);
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <ibusInit+0xa4>)
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	480d      	ldr	r0, [pc, #52]	; (800980c <ibusInit+0xa8>)
 80097d8:	f00e fcc2 	bl	8018160 <pifRcIbus_AttachComm>

    if (callback)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <ibusInit+0x84>
        *callback = ibusReadRawRC;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	4a0c      	ldr	r2, [pc, #48]	; (8009818 <ibusInit+0xb4>)
 80097e6:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <ibusInit+0xa4>)
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f8 fef0 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 80097f4:	2301      	movs	r3, #1
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000848 	.word	0x20000848
 8009804:	20001430 	.word	0x20001430
 8009808:	20000790 	.word	0x20000790
 800980c:	20001390 	.word	0x20001390
 8009810:	2000157c 	.word	0x2000157c
 8009814:	080096f9 	.word	0x080096f9
 8009818:	080096c9 	.word	0x080096c9
 800981c:	00000000 	.word	0x00000000

08009820 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	ed2d 8b02 	vpush	{d8}
 8009826:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009828:	4b45      	ldr	r3, [pc, #276]	; (8009940 <imuInit+0x120>)
 800982a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009836:	4b43      	ldr	r3, [pc, #268]	; (8009944 <imuInit+0x124>)
 8009838:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 fe25 	bl	800048c <__aeabi_i2d>
 8009842:	a339      	add	r3, pc, #228	; (adr r3, 8009928 <imuInit+0x108>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fe8a 	bl	8000560 <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f7f7 f966 	bl	8000b24 <__aeabi_d2f>
 8009858:	4603      	mov	r3, r0
 800985a:	ee00 3a10 	vmov	s0, r3
 800985e:	f01a f8a3 	bl	80239a8 <cosf>
 8009862:	eef0 7a40 	vmov.f32	s15, s0
 8009866:	ee68 7a27 	vmul.f32	s15, s16, s15
 800986a:	eeb0 0a67 	vmov.f32	s0, s15
 800986e:	f01a f8df 	bl	8023a30 <lrintf>
 8009872:	4603      	mov	r3, r0
 8009874:	b21a      	sxth	r2, r3
 8009876:	4b34      	ldr	r3, [pc, #208]	; (8009948 <imuInit+0x128>)
 8009878:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <imuInit+0x120>)
 800987c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009888:	eddf 6a30 	vldr	s13, [pc, #192]	; 800994c <imuInit+0x12c>
 800988c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009890:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009950 <imuInit+0x130>
 8009894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009898:	4b2e      	ldr	r3, [pc, #184]	; (8009954 <imuInit+0x134>)
 800989a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 800989e:	4b29      	ldr	r3, [pc, #164]	; (8009944 <imuInit+0x124>)
 80098a0:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009958 <imuInit+0x138>
 80098b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80098b4:	ee16 0a90 	vmov	r0, s13
 80098b8:	f7f6 fdfa 	bl	80004b0 <__aeabi_f2d>
 80098bc:	a31c      	add	r3, pc, #112	; (adr r3, 8009930 <imuInit+0x110>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fe4d 	bl	8000560 <__aeabi_dmul>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4610      	mov	r0, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7f7 f929 	bl	8000b24 <__aeabi_d2f>
 80098d2:	4603      	mov	r3, r0
 80098d4:	4a21      	ldr	r2, [pc, #132]	; (800995c <imuInit+0x13c>)
 80098d6:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 80098d8:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <imuInit+0x124>)
 80098da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f6 fde7 	bl	80004b0 <__aeabi_f2d>
 80098e2:	a315      	add	r3, pc, #84	; (adr r3, 8009938 <imuInit+0x118>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f7f6 fe3a 	bl	8000560 <__aeabi_dmul>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	f04f 0000 	mov.w	r0, #0
 80098f4:	491a      	ldr	r1, [pc, #104]	; (8009960 <imuInit+0x140>)
 80098f6:	f7f6 ff5d 	bl	80007b4 <__aeabi_ddiv>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4610      	mov	r0, r2
 8009900:	4619      	mov	r1, r3
 8009902:	f7f7 f90f 	bl	8000b24 <__aeabi_d2f>
 8009906:	4603      	mov	r3, r0
 8009908:	4a16      	ldr	r2, [pc, #88]	; (8009964 <imuInit+0x144>)
 800990a:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 800990c:	2008      	movs	r0, #8
 800990e:	f7fd fab9 	bl	8006e84 <sensors>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <imuInit+0xfc>
        Mag_init();
 8009918:	f005 fb20 	bl	800ef5c <Mag_init>
#endif
}
 800991c:	bf00      	nop
 800991e:	46bd      	mov	sp, r7
 8009920:	ecbd 8b02 	vpop	{d8}
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	a2529d39 	.word	0xa2529d39
 800992c:	3f91df46 	.word	0x3f91df46
 8009930:	907e593b 	.word	0x907e593b
 8009934:	4081e7a9 	.word	0x4081e7a9
 8009938:	54442d18 	.word	0x54442d18
 800993c:	400921fb 	.word	0x400921fb
 8009940:	20000060 	.word	0x20000060
 8009944:	20000db4 	.word	0x20000db4
 8009948:	20001474 	.word	0x20001474
 800994c:	411ce80a 	.word	0x411ce80a
 8009950:	461c4000 	.word	0x461c4000
 8009954:	200014ac 	.word	0x200014ac
 8009958:	44610000 	.word	0x44610000
 800995c:	200014b0 	.word	0x200014b0
 8009960:	3fe00000 	.word	0x3fe00000
 8009964:	200014b4 	.word	0x200014b4

08009968 <computeIMU>:

int computeIMU(int step)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d02c      	beq.n	80099d0 <computeIMU+0x68>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b02      	cmp	r3, #2
 800997a:	dc2d      	bgt.n	80099d8 <computeIMU+0x70>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <computeIMU+0x22>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d01a      	beq.n	80099be <computeIMU+0x56>
 8009988:	e026      	b.n	80099d8 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 800998a:	f005 fad1 	bl	800ef30 <Gyro_getADC>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d012      	beq.n	80099ba <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 8009994:	2002      	movs	r0, #2
 8009996:	f7fd fa75 	bl	8006e84 <sensors>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <computeIMU+0x3c>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e043      	b.n	8009a2c <computeIMU+0xc4>

			accADC[X] = 0;
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <computeIMU+0xcc>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 80099aa:	4b22      	ldr	r3, [pc, #136]	; (8009a34 <computeIMU+0xcc>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 80099b0:	4b20      	ldr	r3, [pc, #128]	; (8009a34 <computeIMU+0xcc>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	809a      	strh	r2, [r3, #4]
			return 3;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e038      	b.n	8009a2c <computeIMU+0xc4>
		}
		return step;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	e036      	b.n	8009a2c <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 80099be:	f005 f8b9 	bl	800eb34 <ACC_getADC>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <computeIMU+0x64>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	e02f      	b.n	8009a2c <computeIMU+0xc4>
 80099cc:	2302      	movs	r3, #2
 80099ce:	e02d      	b.n	8009a2c <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 80099d0:	f000 fbba 	bl	800a148 <getEstimatedAttitude>
		return 3;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e029      	b.n	8009a2c <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80099d8:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <computeIMU+0xd0>)
 80099da:	795b      	ldrb	r3, [r3, #5]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d115      	bne.n	8009a0c <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80099e0:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <computeIMU+0xd4>)
 80099e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <computeIMU+0xd8>)
 80099ea:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80099ee:	4413      	add	r3, r2
 80099f0:	4a14      	ldr	r2, [pc, #80]	; (8009a44 <computeIMU+0xdc>)
 80099f2:	fb82 1203 	smull	r1, r2, r2, r3
 80099f6:	17db      	asrs	r3, r3, #31
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	b21a      	sxth	r2, r3
 80099fc:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <computeIMU+0xe0>)
 80099fe:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 8009a00:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <computeIMU+0xe0>)
 8009a02:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <computeIMU+0xd4>)
 8009a08:	801a      	strh	r2, [r3, #0]
 8009a0a:	e004      	b.n	8009a16 <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <computeIMU+0xd8>)
 8009a0e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <computeIMU+0xe0>)
 8009a14:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <computeIMU+0xd8>)
 8009a18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <computeIMU+0xe0>)
 8009a1e:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <computeIMU+0xd8>)
 8009a22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009a26:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <computeIMU+0xe0>)
 8009a28:	805a      	strh	r2, [r3, #2]
	return 4;
 8009a2a:	2304      	movs	r3, #4
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20001448 	.word	0x20001448
 8009a38:	20000848 	.word	0x20000848
 8009a3c:	200014e0 	.word	0x200014e0
 8009a40:	20001440 	.word	0x20001440
 8009a44:	55555556 	.word	0x55555556
 8009a48:	200014b8 	.word	0x200014b8

08009a4c <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	ed93 7a00 	vldr	s14, [r3]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	edd3 7a00 	vldr	s15, [r3]
 8009a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a92:	f01a f8d9 	bl	8023c48 <sqrtf>
 8009a96:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	d01d      	beq.n	8009ae4 <normalizeV+0x98>
        dest->X = src->X / length;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	edd3 6a00 	vldr	s13, [r3]
 8009aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	edd3 6a01 	vldr	s13, [r3, #4]
 8009ac2:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b098      	sub	sp, #96	; 0x60
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8009afe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	edd3 7a00 	vldr	s15, [r3]
 8009b08:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0c:	f019 ff4c 	bl	80239a8 <cosf>
 8009b10:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	edd3 7a00 	vldr	s15, [r3]
 8009b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b1e:	f019 ffc7 	bl	8023ab0 <sinf>
 8009b22:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	edd3 7a00 	vldr	s15, [r3]
 8009b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b32:	f019 ff39 	bl	80239a8 <cosf>
 8009b36:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	edd3 7a00 	vldr	s15, [r3]
 8009b42:	eeb0 0a67 	vmov.f32	s0, s15
 8009b46:	f019 ffb3 	bl	8023ab0 <sinf>
 8009b4a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	3308      	adds	r3, #8
 8009b52:	edd3 7a00 	vldr	s15, [r3]
 8009b56:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5a:	f019 ff25 	bl	80239a8 <cosf>
 8009b5e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	edd3 7a00 	vldr	s15, [r3]
 8009b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b6e:	f019 ff9f 	bl	8023ab0 <sinf>
 8009b72:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009b76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b82:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009b86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009b96:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b9a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009ba6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009baa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009bb6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009bc6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009bca:	eeb1 7a67 	vneg.f32	s14, s15
 8009bce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bdc:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009bde:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009be2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009bf6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bfa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c0a:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009c0e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009c12:	eeb1 7a67 	vneg.f32	s14, s15
 8009c16:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1e:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009c22:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009c26:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c36:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009c3a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c3e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009c52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009c62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c6e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c72:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c7e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c82:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009c94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ca0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009ca4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cb0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009cb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009cc6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cd2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009cd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ce2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009ce6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009cf8:	bf00      	nop
 8009cfa:	3760      	adds	r7, #96	; 0x60
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfb8      	it	lt
 8009d10:	425b      	neglt	r3, r3
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	dd02      	ble.n	8009d1e <applyDeadband+0x1e>
        value = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	e00e      	b.n	8009d3c <applyDeadband+0x3c>
    } else if (value > 0) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dd04      	ble.n	8009d2e <applyDeadband+0x2e>
        value -= deadband;
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	607b      	str	r3, [r7, #4]
 8009d2c:	e006      	b.n	8009d3c <applyDeadband+0x3c>
    } else if (value < 0) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da03      	bge.n	8009d3c <applyDeadband+0x3c>
        value += deadband;
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	4413      	add	r3, r2
 8009d3a:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	0000      	movs	r0, r0
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009d58:	f04f 0300 	mov.w	r3, #0
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d68:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009f70 <acc_calc+0x220>
 8009d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009d74:	4b7f      	ldr	r3, [pc, #508]	; (8009f74 <acc_calc+0x224>)
 8009d76:	edd3 7a00 	vldr	s15, [r3]
 8009d7a:	eef1 7a67 	vneg.f32	s15, s15
 8009d7e:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009d82:	4b7c      	ldr	r3, [pc, #496]	; (8009f74 <acc_calc+0x224>)
 8009d84:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d88:	eef1 7a67 	vneg.f32	s15, s15
 8009d8c:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009d90:	4b79      	ldr	r3, [pc, #484]	; (8009f78 <acc_calc+0x228>)
 8009d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9e:	eef1 7a67 	vneg.f32	s15, s15
 8009da2:	ee17 3a90 	vmov	r3, s15
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f6 fb82 	bl	80004b0 <__aeabi_f2d>
 8009dac:	a36e      	add	r3, pc, #440	; (adr r3, 8009f68 <acc_calc+0x218>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f7f6 fbd5 	bl	8000560 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7f6 feb1 	bl	8000b24 <__aeabi_d2f>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009dc6:	4b6d      	ldr	r3, [pc, #436]	; (8009f7c <acc_calc+0x22c>)
 8009dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dd4:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009dd8:	4b68      	ldr	r3, [pc, #416]	; (8009f7c <acc_calc+0x22c>)
 8009dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009de6:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009dea:	4b64      	ldr	r3, [pc, #400]	; (8009f7c <acc_calc+0x22c>)
 8009dec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009df8:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009dfc:	f107 0218 	add.w	r2, r7, #24
 8009e00:	f107 030c 	add.w	r3, r7, #12
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff fe70 	bl	8009aec <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009e0c:	4b5c      	ldr	r3, [pc, #368]	; (8009f80 <acc_calc+0x230>)
 8009e0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d131      	bne.n	8009e7a <acc_calc+0x12a>
        if (!f.ARMED) {
 8009e16:	4b5b      	ldr	r3, [pc, #364]	; (8009f84 <acc_calc+0x234>)
 8009e18:	785b      	ldrb	r3, [r3, #1]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d11c      	bne.n	8009e58 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009e1e:	4b5a      	ldr	r3, [pc, #360]	; (8009f88 <acc_calc+0x238>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da00      	bge.n	8009e28 <acc_calc+0xd8>
 8009e26:	333f      	adds	r3, #63	; 0x3f
 8009e28:	119b      	asrs	r3, r3, #6
 8009e2a:	425b      	negs	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b56      	ldr	r3, [pc, #344]	; (8009f88 <acc_calc+0x238>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4413      	add	r3, r2
 8009e34:	4a54      	ldr	r2, [pc, #336]	; (8009f88 <acc_calc+0x238>)
 8009e36:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009e38:	4b53      	ldr	r3, [pc, #332]	; (8009f88 <acc_calc+0x238>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e50:	ee17 2a90 	vmov	r2, s15
 8009e54:	4b4c      	ldr	r3, [pc, #304]	; (8009f88 <acc_calc+0x238>)
 8009e56:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e5c:	4b4a      	ldr	r3, [pc, #296]	; (8009f88 <acc_calc+0x238>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	da00      	bge.n	8009e66 <acc_calc+0x116>
 8009e64:	333f      	adds	r3, #63	; 0x3f
 8009e66:	119b      	asrs	r3, r3, #6
 8009e68:	ee07 3a90 	vmov	s15, r3
 8009e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e74:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e78:	e00c      	b.n	8009e94 <acc_calc+0x144>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 8009e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e7e:	4b43      	ldr	r3, [pc, #268]	; (8009f8c <acc_calc+0x23c>)
 8009e80:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e90:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e94:	4b3e      	ldr	r3, [pc, #248]	; (8009f90 <acc_calc+0x240>)
 8009e96:	ed93 7a00 	vldr	s14, [r3]
 8009e9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ea2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8009eae:	4b39      	ldr	r3, [pc, #228]	; (8009f94 <acc_calc+0x244>)
 8009eb0:	edd3 7a00 	vldr	s15, [r3]
 8009eb4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ebc:	4b35      	ldr	r3, [pc, #212]	; (8009f94 <acc_calc+0x244>)
 8009ebe:	edd3 7a00 	vldr	s15, [r3]
 8009ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ec6:	4b33      	ldr	r3, [pc, #204]	; (8009f94 <acc_calc+0x244>)
 8009ec8:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ed4:	f019 fdac 	bl	8023a30 <lrintf>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4a29      	ldr	r2, [pc, #164]	; (8009f80 <acc_calc+0x230>)
 8009edc:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff ff0c 	bl	8009d00 <applyDeadband>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b2b      	ldr	r3, [pc, #172]	; (8009f98 <acc_calc+0x248>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4413      	add	r3, r2
 8009ef0:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <acc_calc+0x248>)
 8009ef2:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8009efc:	f019 fd98 	bl	8023a30 <lrintf>
 8009f00:	4603      	mov	r3, r0
 8009f02:	4a1f      	ldr	r2, [pc, #124]	; (8009f80 <acc_calc+0x230>)
 8009f04:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff fef8 	bl	8009d00 <applyDeadband>
 8009f10:	4602      	mov	r2, r0
 8009f12:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <acc_calc+0x248>)
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	4a1f      	ldr	r2, [pc, #124]	; (8009f98 <acc_calc+0x248>)
 8009f1a:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009f1c:	4b1d      	ldr	r3, [pc, #116]	; (8009f94 <acc_calc+0x244>)
 8009f1e:	edd3 7a00 	vldr	s15, [r3]
 8009f22:	eeb0 0a67 	vmov.f32	s0, s15
 8009f26:	f019 fd83 	bl	8023a30 <lrintf>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4a14      	ldr	r2, [pc, #80]	; (8009f80 <acc_calc+0x230>)
 8009f2e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fee3 	bl	8009d00 <applyDeadband>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <acc_calc+0x248>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	4a15      	ldr	r2, [pc, #84]	; (8009f98 <acc_calc+0x248>)
 8009f44:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <acc_calc+0x24c>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	4a13      	ldr	r2, [pc, #76]	; (8009f9c <acc_calc+0x24c>)
 8009f50:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009f52:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <acc_calc+0x250>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <acc_calc+0x250>)
 8009f5a:	6013      	str	r3, [r2, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	3728      	adds	r7, #40	; 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	f3af 8000 	nop.w
 8009f68:	a2529d39 	.word	0xa2529d39
 8009f6c:	3f91df46 	.word	0x3f91df46
 8009f70:	358637bd 	.word	0x358637bd
 8009f74:	200014cc 	.word	0x200014cc
 8009f78:	20001a56 	.word	0x20001a56
 8009f7c:	20001450 	.word	0x20001450
 8009f80:	20000db4 	.word	0x20000db4
 8009f84:	20001720 	.word	0x20001720
 8009f88:	200014e4 	.word	0x200014e4
 8009f8c:	20000060 	.word	0x20000060
 8009f90:	200014b4 	.word	0x200014b4
 8009f94:	200014e8 	.word	0x200014e8
 8009f98:	20001460 	.word	0x20001460
 8009f9c:	2000146c 	.word	0x2000146c
 8009fa0:	20001470 	.word	0x20001470

08009fa4 <accSum_reset>:

void accSum_reset(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009fa8:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <accSum_reset+0x2c>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <accSum_reset+0x2c>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009fb4:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <accSum_reset+0x2c>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009fba:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <accSum_reset+0x30>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <accSum_reset+0x34>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20001460 	.word	0x20001460
 8009fd4:	20001470 	.word	0x20001470
 8009fd8:	2000146c 	.word	0x2000146c
 8009fdc:	00000000 	.word	0x00000000

08009fe0 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009fe0:	b5b0      	push	{r4, r5, r7, lr}
 8009fe2:	b08a      	sub	sp, #40	; 0x28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009fe8:	4b53      	ldr	r3, [pc, #332]	; (800a138 <calculateHeading+0x158>)
 8009fea:	edd3 7a00 	vldr	s15, [r3]
 8009fee:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff2:	f019 fcd9 	bl	80239a8 <cosf>
 8009ff6:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009ffa:	4b4f      	ldr	r3, [pc, #316]	; (800a138 <calculateHeading+0x158>)
 8009ffc:	edd3 7a00 	vldr	s15, [r3]
 800a000:	eeb0 0a67 	vmov.f32	s0, s15
 800a004:	f019 fd54 	bl	8023ab0 <sinf>
 800a008:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 800a00c:	4b4a      	ldr	r3, [pc, #296]	; (800a138 <calculateHeading+0x158>)
 800a00e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a012:	eeb0 0a67 	vmov.f32	s0, s15
 800a016:	f019 fcc7 	bl	80239a8 <cosf>
 800a01a:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 800a01e:	4b46      	ldr	r3, [pc, #280]	; (800a138 <calculateHeading+0x158>)
 800a020:	edd3 7a01 	vldr	s15, [r3, #4]
 800a024:	eeb0 0a67 	vmov.f32	s0, s15
 800a028:	f019 fd42 	bl	8023ab0 <sinf>
 800a02c:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	ed93 7a00 	vldr	s14, [r3]
 800a036:	edd7 7a06 	vldr	s15, [r7, #24]
 800a03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	edd3 6a01 	vldr	s13, [r3, #4]
 800a044:	edd7 7a07 	vldr	s15, [r7, #28]
 800a048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a04c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a054:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	edd3 6a02 	vldr	s13, [r3, #8]
 800a05e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a062:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a066:	edd7 7a08 	vldr	s15, [r7, #32]
 800a06a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a072:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	ed93 7a01 	vldr	s14, [r3, #4]
 800a07c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	edd3 6a02 	vldr	s13, [r3, #8]
 800a08a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a08e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a092:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a096:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a09a:	edd7 0a04 	vldr	s1, [r7, #16]
 800a09e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a0a2:	f019 fd77 	bl	8023b94 <atan2f>
 800a0a6:	eef0 7a40 	vmov.f32	s15, s0
 800a0aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a13c <calculateHeading+0x15c>
 800a0ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0b2:	ee17 0a90 	vmov	r0, s15
 800a0b6:	f7f6 f9fb 	bl	80004b0 <__aeabi_f2d>
 800a0ba:	a31d      	add	r3, pc, #116	; (adr r3, 800a130 <calculateHeading+0x150>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 fb78 	bl	80007b4 <__aeabi_ddiv>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	461d      	mov	r5, r3
 800a0cc:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <calculateHeading+0x160>)
 800a0ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f6 f9ec 	bl	80004b0 <__aeabi_f2d>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 f888 	bl	80001f4 <__adddf3>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	4b14      	ldr	r3, [pc, #80]	; (800a144 <calculateHeading+0x164>)
 800a0f2:	f7f6 fb5f 	bl	80007b4 <__aeabi_ddiv>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f7f6 fd11 	bl	8000b24 <__aeabi_d2f>
 800a102:	4603      	mov	r3, r0
 800a104:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a106:	ed97 0a02 	vldr	s0, [r7, #8]
 800a10a:	f019 fc91 	bl	8023a30 <lrintf>
 800a10e:	4603      	mov	r3, r0
 800a110:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a112:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a116:	2b00      	cmp	r3, #0
 800a118:	da04      	bge.n	800a124 <calculateHeading+0x144>
        head += 360;
 800a11a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a11c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a120:	b29b      	uxth	r3, r3
 800a122:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a124:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3728      	adds	r7, #40	; 0x28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bdb0      	pop	{r4, r5, r7, pc}
 800a130:	54442d18 	.word	0x54442d18
 800a134:	400921fb 	.word	0x400921fb
 800a138:	200014cc 	.word	0x200014cc
 800a13c:	44e10000 	.word	0x44e10000
 800a140:	20000060 	.word	0x20000060
 800a144:	40240000 	.word	0x40240000

0800a148 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	ed2d 8b02 	vpush	{d8}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a156:	4bbe      	ldr	r3, [pc, #760]	; (800a450 <getEstimatedAttitude+0x308>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4798      	blx	r3
 800a15c:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a15e:	4bbd      	ldr	r3, [pc, #756]	; (800a454 <getEstimatedAttitude+0x30c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a172:	4bb9      	ldr	r3, [pc, #740]	; (800a458 <getEstimatedAttitude+0x310>)
 800a174:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800a178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17c:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a180:	4ab4      	ldr	r2, [pc, #720]	; (800a454 <getEstimatedAttitude+0x30c>)
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a186:	2300      	movs	r3, #0
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
 800a18a:	e074      	b.n	800a276 <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a18c:	4ab3      	ldr	r2, [pc, #716]	; (800a45c <getEstimatedAttitude+0x314>)
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a19c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	3328      	adds	r3, #40	; 0x28
 800a1aa:	443b      	add	r3, r7
 800a1ac:	3b28      	subs	r3, #40	; 0x28
 800a1ae:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a1b2:	4bab      	ldr	r3, [pc, #684]	; (800a460 <getEstimatedAttitude+0x318>)
 800a1b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d043      	beq.n	800a244 <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a1bc:	4aa9      	ldr	r2, [pc, #676]	; (800a464 <getEstimatedAttitude+0x31c>)
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	ed93 7a00 	vldr	s14, [r3]
 800a1c8:	4ba5      	ldr	r3, [pc, #660]	; (800a460 <getEstimatedAttitude+0x318>)
 800a1ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1ea:	4a9f      	ldr	r2, [pc, #636]	; (800a468 <getEstimatedAttitude+0x320>)
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1fa:	4b99      	ldr	r3, [pc, #612]	; (800a460 <getEstimatedAttitude+0x318>)
 800a1fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a208:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a20c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a218:	4a92      	ldr	r2, [pc, #584]	; (800a464 <getEstimatedAttitude+0x31c>)
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4413      	add	r3, r2
 800a220:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a224:	4a8f      	ldr	r2, [pc, #572]	; (800a464 <getEstimatedAttitude+0x31c>)
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	edd3 7a00 	vldr	s15, [r3]
 800a230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a234:	ee17 3a90 	vmov	r3, s15
 800a238:	b219      	sxth	r1, r3
 800a23a:	4a8c      	ldr	r2, [pc, #560]	; (800a46c <getEstimatedAttitude+0x324>)
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a242:	e007      	b.n	800a254 <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a244:	4a88      	ldr	r2, [pc, #544]	; (800a468 <getEstimatedAttitude+0x320>)
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a24c:	4a87      	ldr	r2, [pc, #540]	; (800a46c <getEstimatedAttitude+0x324>)
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a254:	4a85      	ldr	r2, [pc, #532]	; (800a46c <getEstimatedAttitude+0x324>)
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a25c:	4619      	mov	r1, r3
 800a25e:	4a83      	ldr	r2, [pc, #524]	; (800a46c <getEstimatedAttitude+0x324>)
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a266:	fb01 f303 	mul.w	r3, r1, r3
 800a26a:	6a3a      	ldr	r2, [r7, #32]
 800a26c:	4413      	add	r3, r2
 800a26e:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	3301      	adds	r3, #1
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	2b02      	cmp	r3, #2
 800a27a:	dd87      	ble.n	800a18c <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	2264      	movs	r2, #100	; 0x64
 800a280:	fb03 f202 	mul.w	r2, r3, r2
 800a284:	4b74      	ldr	r3, [pc, #464]	; (800a458 <getEstimatedAttitude+0x310>)
 800a286:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a28a:	4619      	mov	r1, r3
 800a28c:	4b72      	ldr	r3, [pc, #456]	; (800a458 <getEstimatedAttitude+0x310>)
 800a28e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a292:	fb01 f303 	mul.w	r3, r1, r3
 800a296:	fb92 f3f3 	sdiv	r3, r2, r3
 800a29a:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a29c:	463b      	mov	r3, r7
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4873      	ldr	r0, [pc, #460]	; (800a470 <getEstimatedAttitude+0x328>)
 800a2a2:	f7ff fc23 	bl	8009aec <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b48      	cmp	r3, #72	; 0x48
 800a2ac:	d93c      	bls.n	800a328 <getEstimatedAttitude+0x1e0>
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b84      	cmp	r3, #132	; 0x84
 800a2b4:	d838      	bhi.n	800a328 <getEstimatedAttitude+0x1e0>
        for (axis = 0; axis < 3; axis++)
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ba:	e032      	b.n	800a322 <getEstimatedAttitude+0x1da>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a2bc:	4a6c      	ldr	r2, [pc, #432]	; (800a470 <getEstimatedAttitude+0x328>)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	ed93 7a00 	vldr	s14, [r3]
 800a2c8:	4b6a      	ldr	r3, [pc, #424]	; (800a474 <getEstimatedAttitude+0x32c>)
 800a2ca:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2da:	4a64      	ldr	r2, [pc, #400]	; (800a46c <getEstimatedAttitude+0x324>)
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2ee:	4b61      	ldr	r3, [pc, #388]	; (800a474 <getEstimatedAttitude+0x32c>)
 800a2f0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a300:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a304:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a308:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a310:	4a57      	ldr	r2, [pc, #348]	; (800a470 <getEstimatedAttitude+0x328>)
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	3301      	adds	r3, #1
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	2b02      	cmp	r3, #2
 800a326:	ddc9      	ble.n	800a2bc <getEstimatedAttitude+0x174>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a328:	4b51      	ldr	r3, [pc, #324]	; (800a470 <getEstimatedAttitude+0x328>)
 800a32a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a32e:	4b52      	ldr	r3, [pc, #328]	; (800a478 <getEstimatedAttitude+0x330>)
 800a330:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a334:	ee07 3a90 	vmov	s15, r3
 800a338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a33c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a344:	bfcc      	ite	gt
 800a346:	2301      	movgt	r3, #1
 800a348:	2300      	movle	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	461a      	mov	r2, r3
 800a34e:	4b4b      	ldr	r3, [pc, #300]	; (800a47c <getEstimatedAttitude+0x334>)
 800a350:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a352:	4b47      	ldr	r3, [pc, #284]	; (800a470 <getEstimatedAttitude+0x328>)
 800a354:	edd3 7a01 	vldr	s15, [r3, #4]
 800a358:	4b45      	ldr	r3, [pc, #276]	; (800a470 <getEstimatedAttitude+0x328>)
 800a35a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a35e:	eef0 0a47 	vmov.f32	s1, s14
 800a362:	eeb0 0a67 	vmov.f32	s0, s15
 800a366:	f019 fc15 	bl	8023b94 <atan2f>
 800a36a:	eef0 7a40 	vmov.f32	s15, s0
 800a36e:	4b44      	ldr	r3, [pc, #272]	; (800a480 <getEstimatedAttitude+0x338>)
 800a370:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <getEstimatedAttitude+0x328>)
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	eeb1 8a67 	vneg.f32	s16, s15
 800a37e:	4b3c      	ldr	r3, [pc, #240]	; (800a470 <getEstimatedAttitude+0x328>)
 800a380:	ed93 7a01 	vldr	s14, [r3, #4]
 800a384:	4b3a      	ldr	r3, [pc, #232]	; (800a470 <getEstimatedAttitude+0x328>)
 800a386:	edd3 7a01 	vldr	s15, [r3, #4]
 800a38a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a38e:	4b38      	ldr	r3, [pc, #224]	; (800a470 <getEstimatedAttitude+0x328>)
 800a390:	edd3 6a02 	vldr	s13, [r3, #8]
 800a394:	4b36      	ldr	r3, [pc, #216]	; (800a470 <getEstimatedAttitude+0x328>)
 800a396:	edd3 7a02 	vldr	s15, [r3, #8]
 800a39a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a39e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3a6:	f019 fc4f 	bl	8023c48 <sqrtf>
 800a3aa:	eef0 7a40 	vmov.f32	s15, s0
 800a3ae:	eef0 0a67 	vmov.f32	s1, s15
 800a3b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a3b6:	f019 fbed 	bl	8023b94 <atan2f>
 800a3ba:	eef0 7a40 	vmov.f32	s15, s0
 800a3be:	4b30      	ldr	r3, [pc, #192]	; (800a480 <getEstimatedAttitude+0x338>)
 800a3c0:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a3c4:	4b2e      	ldr	r3, [pc, #184]	; (800a480 <getEstimatedAttitude+0x338>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7f6 f871 	bl	80004b0 <__aeabi_f2d>
 800a3ce:	a31e      	add	r3, pc, #120	; (adr r3, 800a448 <getEstimatedAttitude+0x300>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 f8c4 	bl	8000560 <__aeabi_dmul>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f7f6 fba0 	bl	8000b24 <__aeabi_d2f>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	ee00 3a10 	vmov	s0, r3
 800a3ea:	f019 fb21 	bl	8023a30 <lrintf>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	b21a      	sxth	r2, r3
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <getEstimatedAttitude+0x33c>)
 800a3f4:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a3f6:	4b22      	ldr	r3, [pc, #136]	; (800a480 <getEstimatedAttitude+0x338>)
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f6 f858 	bl	80004b0 <__aeabi_f2d>
 800a400:	a311      	add	r3, pc, #68	; (adr r3, 800a448 <getEstimatedAttitude+0x300>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f6 f8ab 	bl	8000560 <__aeabi_dmul>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4610      	mov	r0, r2
 800a410:	4619      	mov	r1, r3
 800a412:	f7f6 fb87 	bl	8000b24 <__aeabi_d2f>
 800a416:	4603      	mov	r3, r0
 800a418:	ee00 3a10 	vmov	s0, r3
 800a41c:	f019 fb08 	bl	8023a30 <lrintf>
 800a420:	4603      	mov	r3, r0
 800a422:	b21a      	sxth	r2, r3
 800a424:	4b17      	ldr	r3, [pc, #92]	; (800a484 <getEstimatedAttitude+0x33c>)
 800a426:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a428:	2008      	movs	r0, #8
 800a42a:	f7fc fd2b 	bl	8006e84 <sensors>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d069      	beq.n	800a508 <getEstimatedAttitude+0x3c0>
        rotateV(&EstM.V, deltaGyroAngle);
 800a434:	463b      	mov	r3, r7
 800a436:	4619      	mov	r1, r3
 800a438:	4813      	ldr	r0, [pc, #76]	; (800a488 <getEstimatedAttitude+0x340>)
 800a43a:	f7ff fb57 	bl	8009aec <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a43e:	2300      	movs	r3, #0
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
 800a442:	e056      	b.n	800a4f2 <getEstimatedAttitude+0x3aa>
 800a444:	f3af 8000 	nop.w
 800a448:	907e593b 	.word	0x907e593b
 800a44c:	4081e7a9 	.word	0x4081e7a9
 800a450:	20001ddc 	.word	0x20001ddc
 800a454:	200014ec 	.word	0x200014ec
 800a458:	20000060 	.word	0x20000060
 800a45c:	20001440 	.word	0x20001440
 800a460:	20000db4 	.word	0x20000db4
 800a464:	200014f0 	.word	0x200014f0
 800a468:	20001448 	.word	0x20001448
 800a46c:	20001450 	.word	0x20001450
 800a470:	200014d4 	.word	0x200014d4
 800a474:	20000848 	.word	0x20000848
 800a478:	20001474 	.word	0x20001474
 800a47c:	20001720 	.word	0x20001720
 800a480:	200014cc 	.word	0x200014cc
 800a484:	200014c8 	.word	0x200014c8
 800a488:	200014fc 	.word	0x200014fc
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a48c:	4a6a      	ldr	r2, [pc, #424]	; (800a638 <getEstimatedAttitude+0x4f0>)
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	ed93 7a00 	vldr	s14, [r3]
 800a498:	4b68      	ldr	r3, [pc, #416]	; (800a63c <getEstimatedAttitude+0x4f4>)
 800a49a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a49e:	ee07 3a90 	vmov	s15, r3
 800a4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4aa:	4a65      	ldr	r2, [pc, #404]	; (800a640 <getEstimatedAttitude+0x4f8>)
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4be:	4b5f      	ldr	r3, [pc, #380]	; (800a63c <getEstimatedAttitude+0x4f4>)
 800a4c0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a4d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e0:	4a55      	ldr	r2, [pc, #340]	; (800a638 <getEstimatedAttitude+0x4f0>)
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	ddc9      	ble.n	800a48c <getEstimatedAttitude+0x344>
        heading = calculateHeading(&EstM);
 800a4f8:	484f      	ldr	r0, [pc, #316]	; (800a638 <getEstimatedAttitude+0x4f0>)
 800a4fa:	f7ff fd71 	bl	8009fe0 <calculateHeading>
 800a4fe:	4603      	mov	r3, r0
 800a500:	461a      	mov	r2, r3
 800a502:	4b50      	ldr	r3, [pc, #320]	; (800a644 <getEstimatedAttitude+0x4fc>)
 800a504:	801a      	strh	r2, [r3, #0]
 800a506:	e00f      	b.n	800a528 <getEstimatedAttitude+0x3e0>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a508:	463b      	mov	r3, r7
 800a50a:	4619      	mov	r1, r3
 800a50c:	484e      	ldr	r0, [pc, #312]	; (800a648 <getEstimatedAttitude+0x500>)
 800a50e:	f7ff faed 	bl	8009aec <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a512:	494d      	ldr	r1, [pc, #308]	; (800a648 <getEstimatedAttitude+0x500>)
 800a514:	484c      	ldr	r0, [pc, #304]	; (800a648 <getEstimatedAttitude+0x500>)
 800a516:	f7ff fa99 	bl	8009a4c <normalizeV>
        heading = calculateHeading(&EstN);
 800a51a:	484b      	ldr	r0, [pc, #300]	; (800a648 <getEstimatedAttitude+0x500>)
 800a51c:	f7ff fd60 	bl	8009fe0 <calculateHeading>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	4b47      	ldr	r3, [pc, #284]	; (800a644 <getEstimatedAttitude+0x4fc>)
 800a526:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a528:	6978      	ldr	r0, [r7, #20]
 800a52a:	f7ff fc11 	bl	8009d50 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a52e:	4b47      	ldr	r3, [pc, #284]	; (800a64c <getEstimatedAttitude+0x504>)
 800a530:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a534:	2b00      	cmp	r3, #0
 800a536:	d072      	beq.n	800a61e <getEstimatedAttitude+0x4d6>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a538:	4b45      	ldr	r3, [pc, #276]	; (800a650 <getEstimatedAttitude+0x508>)
 800a53a:	ed93 8a02 	vldr	s16, [r3, #8]
 800a53e:	4b44      	ldr	r3, [pc, #272]	; (800a650 <getEstimatedAttitude+0x508>)
 800a540:	ed93 7a00 	vldr	s14, [r3]
 800a544:	4b42      	ldr	r3, [pc, #264]	; (800a650 <getEstimatedAttitude+0x508>)
 800a546:	edd3 7a00 	vldr	s15, [r3]
 800a54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a54e:	4b40      	ldr	r3, [pc, #256]	; (800a650 <getEstimatedAttitude+0x508>)
 800a550:	edd3 6a01 	vldr	s13, [r3, #4]
 800a554:	4b3e      	ldr	r3, [pc, #248]	; (800a650 <getEstimatedAttitude+0x508>)
 800a556:	edd3 7a01 	vldr	s15, [r3, #4]
 800a55a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a55e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a562:	4b3b      	ldr	r3, [pc, #236]	; (800a650 <getEstimatedAttitude+0x508>)
 800a564:	edd3 6a02 	vldr	s13, [r3, #8]
 800a568:	4b39      	ldr	r3, [pc, #228]	; (800a650 <getEstimatedAttitude+0x508>)
 800a56a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a56e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a572:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a576:	eeb0 0a67 	vmov.f32	s0, s15
 800a57a:	f019 fb65 	bl	8023c48 <sqrtf>
 800a57e:	eeb0 7a40 	vmov.f32	s14, s0
 800a582:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a586:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a58a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a58e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a654 <getEstimatedAttitude+0x50c>
 800a592:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59a:	d803      	bhi.n	800a5a4 <getEstimatedAttitude+0x45c>
            throttleAngleCorrection = 0;
 800a59c:	4b2e      	ldr	r3, [pc, #184]	; (800a658 <getEstimatedAttitude+0x510>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a5a2:	e03c      	b.n	800a61e <getEstimatedAttitude+0x4d6>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a5a4:	ed97 0a03 	vldr	s0, [r7, #12]
 800a5a8:	f019 fac8 	bl	8023b3c <acosf>
 800a5ac:	eeb0 7a40 	vmov.f32	s14, s0
 800a5b0:	4b2a      	ldr	r3, [pc, #168]	; (800a65c <getEstimatedAttitude+0x514>)
 800a5b2:	edd3 7a00 	vldr	s15, [r3]
 800a5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a5be:	f019 fa37 	bl	8023a30 <lrintf>
 800a5c2:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a5ca:	dd02      	ble.n	800a5d2 <getEstimatedAttitude+0x48a>
                deg = 900;
 800a5cc:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a5d0:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a5d2:	4b1e      	ldr	r3, [pc, #120]	; (800a64c <getEstimatedAttitude+0x504>)
 800a5d4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a5e0:	69f8      	ldr	r0, [r7, #28]
 800a5e2:	f7f5 ff53 	bl	800048c <__aeabi_i2d>
 800a5e6:	a312      	add	r3, pc, #72	; (adr r3, 800a630 <getEstimatedAttitude+0x4e8>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f6 f8e2 	bl	80007b4 <__aeabi_ddiv>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	f7f6 fa94 	bl	8000b24 <__aeabi_d2f>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	ee00 3a10 	vmov	s0, r3
 800a602:	f019 fa55 	bl	8023ab0 <sinf>
 800a606:	eef0 7a40 	vmov.f32	s15, s0
 800a60a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a60e:	eeb0 0a67 	vmov.f32	s0, s15
 800a612:	f019 fa0d 	bl	8023a30 <lrintf>
 800a616:	4603      	mov	r3, r0
 800a618:	b21a      	sxth	r2, r3
 800a61a:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <getEstimatedAttitude+0x510>)
 800a61c:	801a      	strh	r2, [r3, #0]
}
 800a61e:	bf00      	nop
 800a620:	3728      	adds	r7, #40	; 0x28
 800a622:	46bd      	mov	sp, r7
 800a624:	ecbd 8b02 	vpop	{d8}
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w
 800a630:	e50feba2 	.word	0xe50feba2
 800a634:	409616dd 	.word	0x409616dd
 800a638:	200014fc 	.word	0x200014fc
 800a63c:	20000848 	.word	0x20000848
 800a640:	20001458 	.word	0x20001458
 800a644:	20001a56 	.word	0x20001a56
 800a648:	20000034 	.word	0x20000034
 800a64c:	20000db4 	.word	0x20000db4
 800a650:	200014d4 	.word	0x200014d4
 800a654:	3c75c28f 	.word	0x3c75c28f
 800a658:	200014a8 	.word	0x200014a8
 800a65c:	200014b0 	.word	0x200014b0

0800a660 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a668:	4b7e      	ldr	r3, [pc, #504]	; (800a864 <taskGetEstimatedAltitude+0x204>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4798      	blx	r3
 800a66e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a670:	4b7d      	ldr	r3, [pc, #500]	; (800a868 <taskGetEstimatedAltitude+0x208>)
 800a672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfb8      	it	lt
 800a67a:	425b      	neglt	r3, r3
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	4b7a      	ldr	r3, [pc, #488]	; (800a868 <taskGetEstimatedAltitude+0x208>)
 800a680:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfb8      	it	lt
 800a688:	425b      	neglt	r3, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4293      	cmp	r3, r2
 800a68e:	bf38      	it	cc
 800a690:	4613      	movcc	r3, r2
 800a692:	b29b      	uxth	r3, r3
 800a694:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a696:	4b75      	ldr	r3, [pc, #468]	; (800a86c <taskGetEstimatedAltitude+0x20c>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a69c:	4b74      	ldr	r3, [pc, #464]	; (800a870 <taskGetEstimatedAltitude+0x210>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a6a6:	4a72      	ldr	r2, [pc, #456]	; (800a870 <taskGetEstimatedAltitude+0x210>)
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a6ac:	4b71      	ldr	r3, [pc, #452]	; (800a874 <taskGetEstimatedAltitude+0x214>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d04c      	beq.n	800a74e <taskGetEstimatedAltitude+0xee>
        baroGroundPressure -= baroGroundPressure / 8;
 800a6b4:	4b70      	ldr	r3, [pc, #448]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da00      	bge.n	800a6be <taskGetEstimatedAltitude+0x5e>
 800a6bc:	3307      	adds	r3, #7
 800a6be:	10db      	asrs	r3, r3, #3
 800a6c0:	425b      	negs	r3, r3
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b6c      	ldr	r3, [pc, #432]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4a6b      	ldr	r2, [pc, #428]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6cc:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a6ce:	4b6b      	ldr	r3, [pc, #428]	; (800a87c <taskGetEstimatedAltitude+0x21c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a6b      	ldr	r2, [pc, #428]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a6d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6de:	4a66      	ldr	r2, [pc, #408]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b64      	ldr	r3, [pc, #400]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6e8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a6ea:	4b63      	ldr	r3, [pc, #396]	; (800a878 <taskGetEstimatedAltitude+0x218>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	da00      	bge.n	800a6f4 <taskGetEstimatedAltitude+0x94>
 800a6f2:	3307      	adds	r3, #7
 800a6f4:	10db      	asrs	r3, r3, #3
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6fe:	eddf 6a61 	vldr	s13, [pc, #388]	; 800a884 <taskGetEstimatedAltitude+0x224>
 800a702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a706:	eddf 0a60 	vldr	s1, [pc, #384]	; 800a888 <taskGetEstimatedAltitude+0x228>
 800a70a:	eeb0 0a47 	vmov.f32	s0, s14
 800a70e:	f019 fa43 	bl	8023b98 <powf>
 800a712:	eef0 7a40 	vmov.f32	s15, s0
 800a716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a71a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800a88c <taskGetEstimatedAltitude+0x22c>
 800a722:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a72a:	ee17 2a90 	vmov	r2, s15
 800a72e:	4b58      	ldr	r3, [pc, #352]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a730:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a732:	4b58      	ldr	r3, [pc, #352]	; (800a894 <taskGetEstimatedAltitude+0x234>)
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a73a:	4b57      	ldr	r3, [pc, #348]	; (800a898 <taskGetEstimatedAltitude+0x238>)
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a742:	4b4c      	ldr	r3, [pc, #304]	; (800a874 <taskGetEstimatedAltitude+0x214>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	3b01      	subs	r3, #1
 800a748:	b29a      	uxth	r2, r3
 800a74a:	4b4a      	ldr	r3, [pc, #296]	; (800a874 <taskGetEstimatedAltitude+0x214>)
 800a74c:	801a      	strh	r2, [r3, #0]
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a74e:	4b4b      	ldr	r3, [pc, #300]	; (800a87c <taskGetEstimatedAltitude+0x21c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a4b      	ldr	r2, [pc, #300]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a754:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a758:	3a01      	subs	r2, #1
 800a75a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a766:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a884 <taskGetEstimatedAltitude+0x224>
 800a76a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a76e:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a888 <taskGetEstimatedAltitude+0x228>
 800a772:	eeb0 0a47 	vmov.f32	s0, s14
 800a776:	f019 fa0f 	bl	8023b98 <powf>
 800a77a:	eef0 7a40 	vmov.f32	s15, s0
 800a77e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a786:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a88c <taskGetEstimatedAltitude+0x22c>
 800a78a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a78e:	eeb0 0a67 	vmov.f32	s0, s15
 800a792:	f019 f94d 	bl	8023a30 <lrintf>
 800a796:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a798:	4b3d      	ldr	r3, [pc, #244]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a7a2:	4b3e      	ldr	r3, [pc, #248]	; (800a89c <taskGetEstimatedAltitude+0x23c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7ae:	4b34      	ldr	r3, [pc, #208]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a7b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a7c2:	4b2f      	ldr	r3, [pc, #188]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a7c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a7dc:	f019 f928 	bl	8023a30 <lrintf>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4a2e      	ldr	r2, [pc, #184]	; (800a89c <taskGetEstimatedAltitude+0x23c>)
 800a7e4:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a7e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7ea:	2bfa      	cmp	r3, #250	; 0xfa
 800a7ec:	dc04      	bgt.n	800a7f8 <taskGetEstimatedAltitude+0x198>
 800a7ee:	4b2c      	ldr	r3, [pc, #176]	; (800a8a0 <taskGetEstimatedAltitude+0x240>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d104      	bne.n	800a802 <taskGetEstimatedAltitude+0x1a2>
        sonarAlt = -1;
 800a7f8:	4b2a      	ldr	r3, [pc, #168]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e01b      	b.n	800a83a <taskGetEstimatedAltitude+0x1da>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a802:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <taskGetEstimatedAltitude+0x240>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a80e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a81a:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a8a8 <taskGetEstimatedAltitude+0x248>
 800a81e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a822:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a826:	eddf 6a20 	vldr	s13, [pc, #128]	; 800a8a8 <taskGetEstimatedAltitude+0x248>
 800a82a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a82e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a832:	ee17 2a90 	vmov	r2, s15
 800a836:	4b1b      	ldr	r3, [pc, #108]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a838:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a83a:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd36      	ble.n	800a8b0 <taskGetEstimatedAltitude+0x250>
 800a842:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2bc7      	cmp	r3, #199	; 0xc7
 800a848:	dc32      	bgt.n	800a8b0 <taskGetEstimatedAltitude+0x250>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a84a:	4b14      	ldr	r3, [pc, #80]	; (800a89c <taskGetEstimatedAltitude+0x23c>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4b15      	ldr	r3, [pc, #84]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <taskGetEstimatedAltitude+0x24c>)
 800a856:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a858:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <taskGetEstimatedAltitude+0x244>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a0f      	ldr	r2, [pc, #60]	; (800a89c <taskGetEstimatedAltitude+0x23c>)
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	e062      	b.n	800a928 <taskGetEstimatedAltitude+0x2c8>
 800a862:	bf00      	nop
 800a864:	20001ddc 	.word	0x20001ddc
 800a868:	200014c8 	.word	0x200014c8
 800a86c:	20001480 	.word	0x20001480
 800a870:	20001508 	.word	0x20001508
 800a874:	20001a52 	.word	0x20001a52
 800a878:	2000150c 	.word	0x2000150c
 800a87c:	20001478 	.word	0x20001478
 800a880:	20000db4 	.word	0x20000db4
 800a884:	47c5e680 	.word	0x47c5e680
 800a888:	3e42dcb1 	.word	0x3e42dcb1
 800a88c:	4a8748d0 	.word	0x4a8748d0
 800a890:	20001510 	.word	0x20001510
 800a894:	20001514 	.word	0x20001514
 800a898:	20001518 	.word	0x20001518
 800a89c:	2000147c 	.word	0x2000147c
 800a8a0:	2000002c 	.word	0x2000002c
 800a8a4:	20000030 	.word	0x20000030
 800a8a8:	44610000 	.word	0x44610000
 800a8ac:	20001488 	.word	0x20001488
    } else {
        BaroAlt -= baroAlt_offset;
 800a8b0:	4ba0      	ldr	r3, [pc, #640]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4ba0      	ldr	r3, [pc, #640]	; (800ab38 <taskGetEstimatedAltitude+0x4d8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	4a9e      	ldr	r2, [pc, #632]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800a8bc:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a8be:	4b9f      	ldr	r3, [pc, #636]	; (800ab3c <taskGetEstimatedAltitude+0x4dc>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dd30      	ble.n	800a928 <taskGetEstimatedAltitude+0x2c8>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a8c6:	4b9d      	ldr	r3, [pc, #628]	; (800ab3c <taskGetEstimatedAltitude+0x4dc>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8d6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800ab40 <taskGetEstimatedAltitude+0x4e0>
 800a8da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8de:	4b99      	ldr	r3, [pc, #612]	; (800ab44 <taskGetEstimatedAltitude+0x4e4>)
 800a8e0:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a8e4:	4b95      	ldr	r3, [pc, #596]	; (800ab3c <taskGetEstimatedAltitude+0x4dc>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	ee07 3a90 	vmov	s15, r3
 800a8ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8f0:	4b94      	ldr	r3, [pc, #592]	; (800ab44 <taskGetEstimatedAltitude+0x4e4>)
 800a8f2:	edd3 7a00 	vldr	s15, [r3]
 800a8f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8fa:	4b8e      	ldr	r3, [pc, #568]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a906:	4b8f      	ldr	r3, [pc, #572]	; (800ab44 <taskGetEstimatedAltitude+0x4e4>)
 800a908:	edd3 7a00 	vldr	s15, [r3]
 800a90c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a910:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a91c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a920:	ee17 2a90 	vmov	r2, s15
 800a924:	4b83      	ldr	r3, [pc, #524]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800a926:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a928:	4b87      	ldr	r3, [pc, #540]	; (800ab48 <taskGetEstimatedAltitude+0x4e8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a934:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ab4c <taskGetEstimatedAltitude+0x4ec>
 800a938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a93c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a940:	4b83      	ldr	r3, [pc, #524]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a94c:	4b81      	ldr	r3, [pc, #516]	; (800ab54 <taskGetEstimatedAltitude+0x4f4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a95c:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a960:	4b7d      	ldr	r3, [pc, #500]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800a962:	ed93 7a00 	vldr	s14, [r3]
 800a966:	edd7 7a07 	vldr	s15, [r7, #28]
 800a96a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a96e:	4b76      	ldr	r3, [pc, #472]	; (800ab48 <taskGetEstimatedAltitude+0x4e8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97e:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a982:	edd7 7a06 	vldr	s15, [r7, #24]
 800a986:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a98a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a98e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a992:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a996:	4b71      	ldr	r3, [pc, #452]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800a998:	edd3 6a00 	vldr	s13, [r3]
 800a99c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9a8:	4b6d      	ldr	r3, [pc, #436]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a9aa:	edd3 7a00 	vldr	s15, [r3]
 800a9ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9b2:	4b6b      	ldr	r3, [pc, #428]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a9b4:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a9b8:	4b6a      	ldr	r3, [pc, #424]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800a9ba:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a9be:	4b68      	ldr	r3, [pc, #416]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a9c0:	edd3 7a00 	vldr	s15, [r3]
 800a9c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9c8:	4b5a      	ldr	r3, [pc, #360]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	ee07 3a90 	vmov	s15, r3
 800a9d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9d4:	4b63      	ldr	r3, [pc, #396]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800a9d6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a9da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9de:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9ea:	4b5d      	ldr	r3, [pc, #372]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a9ec:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a9f0:	4b52      	ldr	r3, [pc, #328]	; (800ab3c <taskGetEstimatedAltitude+0x4dc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dd08      	ble.n	800aa0a <taskGetEstimatedAltitude+0x3aa>
 800a9f8:	4b50      	ldr	r3, [pc, #320]	; (800ab3c <taskGetEstimatedAltitude+0x4dc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2bc7      	cmp	r3, #199	; 0xc7
 800a9fe:	dc04      	bgt.n	800aa0a <taskGetEstimatedAltitude+0x3aa>
        EstAlt = BaroAlt;
 800aa00:	4b4c      	ldr	r3, [pc, #304]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a58      	ldr	r2, [pc, #352]	; (800ab68 <taskGetEstimatedAltitude+0x508>)
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	e008      	b.n	800aa1c <taskGetEstimatedAltitude+0x3bc>
    else
        EstAlt = accAlt;
 800aa0a:	4b55      	ldr	r3, [pc, #340]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800aa0c:	edd3 7a00 	vldr	s15, [r3]
 800aa10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa14:	ee17 2a90 	vmov	r2, s15
 800aa18:	4b53      	ldr	r3, [pc, #332]	; (800ab68 <taskGetEstimatedAltitude+0x508>)
 800aa1a:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800aa1c:	4b4f      	ldr	r3, [pc, #316]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800aa1e:	ed93 7a00 	vldr	s14, [r3]
 800aa22:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa2a:	4b4c      	ldr	r3, [pc, #304]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800aa2c:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800aa30:	f7ff fab8 	bl	8009fa4 <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800aa34:	4b3f      	ldr	r3, [pc, #252]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	4b4c      	ldr	r3, [pc, #304]	; (800ab6c <taskGetEstimatedAltitude+0x50c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa46:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab70 <taskGetEstimatedAltitude+0x510>
 800aa4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa60:	ee17 3a90 	vmov	r3, s15
 800aa64:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa66:	4b33      	ldr	r3, [pc, #204]	; (800ab34 <taskGetEstimatedAltitude+0x4d4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a40      	ldr	r2, [pc, #256]	; (800ab6c <taskGetEstimatedAltitude+0x50c>)
 800aa6c:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa72:	4940      	ldr	r1, [pc, #256]	; (800ab74 <taskGetEstimatedAltitude+0x514>)
 800aa74:	6978      	ldr	r0, [r7, #20]
 800aa76:	f7f9 f8c7 	bl	8003c08 <constrain>
 800aa7a:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa7c:	210a      	movs	r1, #10
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f7ff f93e 	bl	8009d00 <applyDeadband>
 800aa84:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aa86:	4b37      	ldr	r3, [pc, #220]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800aa88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aa8c:	4b33      	ldr	r3, [pc, #204]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800aa8e:	edd3 7a00 	vldr	s15, [r3]
 800aa92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aaa0:	4b30      	ldr	r3, [pc, #192]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800aaa2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aaa6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aaaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aaae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aab6:	4b29      	ldr	r3, [pc, #164]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800aab8:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aabc:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <taskGetEstimatedAltitude+0x4fc>)
 800aabe:	edd3 7a00 	vldr	s15, [r3]
 800aac2:	eeb0 0a67 	vmov.f32	s0, s15
 800aac6:	f018 ffb3 	bl	8023a30 <lrintf>
 800aaca:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aacc:	2105      	movs	r1, #5
 800aace:	6938      	ldr	r0, [r7, #16]
 800aad0:	f7ff f916 	bl	8009d00 <applyDeadband>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4a28      	ldr	r2, [pc, #160]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aad8:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aada:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aade:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aae2:	f280 80b2 	bge.w	800ac4a <taskGetEstimatedAltitude+0x5ea>
        // Altitude P-Controller
        if (!velocityControl) {
 800aae6:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d14e      	bne.n	800ab8c <taskGetEstimatedAltitude+0x52c>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <taskGetEstimatedAltitude+0x508>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aafc:	4921      	ldr	r1, [pc, #132]	; (800ab84 <taskGetEstimatedAltitude+0x524>)
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f9 f882 	bl	8003c08 <constrain>
 800ab04:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800ab06:	210a      	movs	r1, #10
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff f8f9 	bl	8009d00 <applyDeadband>
 800ab0e:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800ab12:	791b      	ldrb	r3, [r3, #4]
 800ab14:	461a      	mov	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	fb02 f303 	mul.w	r3, r2, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da00      	bge.n	800ab22 <taskGetEstimatedAltitude+0x4c2>
 800ab20:	337f      	adds	r3, #127	; 0x7f
 800ab22:	11db      	asrs	r3, r3, #7
 800ab24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab28:	4917      	ldr	r1, [pc, #92]	; (800ab88 <taskGetEstimatedAltitude+0x528>)
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f9 f86c 	bl	8003c08 <constrain>
 800ab30:	6378      	str	r0, [r7, #52]	; 0x34
 800ab32:	e02e      	b.n	800ab92 <taskGetEstimatedAltitude+0x532>
 800ab34:	2000147c 	.word	0x2000147c
 800ab38:	20001488 	.word	0x20001488
 800ab3c:	20000030 	.word	0x20000030
 800ab40:	42c80000 	.word	0x42c80000
 800ab44:	20001484 	.word	0x20001484
 800ab48:	2000146c 	.word	0x2000146c
 800ab4c:	358637bd 	.word	0x358637bd
 800ab50:	20001460 	.word	0x20001460
 800ab54:	20001470 	.word	0x20001470
 800ab58:	200014ac 	.word	0x200014ac
 800ab5c:	20001514 	.word	0x20001514
 800ab60:	20001518 	.word	0x20001518
 800ab64:	20000db4 	.word	0x20000db4
 800ab68:	2000148c 	.word	0x2000148c
 800ab6c:	2000151c 	.word	0x2000151c
 800ab70:	49742400 	.word	0x49742400
 800ab74:	fffffa24 	.word	0xfffffa24
 800ab78:	200014a4 	.word	0x200014a4
 800ab7c:	2000149c 	.word	0x2000149c
 800ab80:	20001494 	.word	0x20001494
 800ab84:	fffffe0c 	.word	0xfffffe0c
 800ab88:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ab8c:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <taskGetEstimatedAltitude+0x600>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ab92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ab9a:	4b32      	ldr	r3, [pc, #200]	; (800ac64 <taskGetEstimatedAltitude+0x604>)
 800ab9c:	7a9b      	ldrb	r3, [r3, #10]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	fb02 f303 	mul.w	r3, r2, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da00      	bge.n	800abac <taskGetEstimatedAltitude+0x54c>
 800abaa:	331f      	adds	r3, #31
 800abac:	115b      	asrs	r3, r3, #5
 800abae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abb2:	492d      	ldr	r1, [pc, #180]	; (800ac68 <taskGetEstimatedAltitude+0x608>)
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f9 f827 	bl	8003c08 <constrain>
 800abba:	4603      	mov	r3, r0
 800abbc:	4a2b      	ldr	r2, [pc, #172]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800abbe:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800abc0:	4b28      	ldr	r3, [pc, #160]	; (800ac64 <taskGetEstimatedAltitude+0x604>)
 800abc2:	7d1b      	ldrb	r3, [r3, #20]
 800abc4:	461a      	mov	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	fb03 f202 	mul.w	r2, r3, r2
 800abcc:	4b28      	ldr	r3, [pc, #160]	; (800ac70 <taskGetEstimatedAltitude+0x610>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4413      	add	r3, r2
 800abd2:	4a27      	ldr	r2, [pc, #156]	; (800ac70 <taskGetEstimatedAltitude+0x610>)
 800abd4:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800abd6:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <taskGetEstimatedAltitude+0x610>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a26      	ldr	r2, [pc, #152]	; (800ac74 <taskGetEstimatedAltitude+0x614>)
 800abdc:	4926      	ldr	r1, [pc, #152]	; (800ac78 <taskGetEstimatedAltitude+0x618>)
 800abde:	4618      	mov	r0, r3
 800abe0:	f7f9 f812 	bl	8003c08 <constrain>
 800abe4:	4603      	mov	r3, r0
 800abe6:	4a22      	ldr	r2, [pc, #136]	; (800ac70 <taskGetEstimatedAltitude+0x610>)
 800abe8:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800abea:	4b21      	ldr	r3, [pc, #132]	; (800ac70 <taskGetEstimatedAltitude+0x610>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a23      	ldr	r2, [pc, #140]	; (800ac7c <taskGetEstimatedAltitude+0x61c>)
 800abf0:	fb82 1203 	smull	r1, r2, r2, r3
 800abf4:	10d2      	asrs	r2, r2, #3
 800abf6:	17db      	asrs	r3, r3, #31
 800abf8:	1ad2      	subs	r2, r2, r3
 800abfa:	4b1c      	ldr	r3, [pc, #112]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4413      	add	r3, r2
 800ac00:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800ac02:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800ac04:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <taskGetEstimatedAltitude+0x604>)
 800ac06:	7f9b      	ldrb	r3, [r3, #30]
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <taskGetEstimatedAltitude+0x620>)
 800ac12:	edd3 6a00 	vldr	s13, [r3]
 800ac16:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac22:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ac84 <taskGetEstimatedAltitude+0x624>
 800ac26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac2e:	2296      	movs	r2, #150	; 0x96
 800ac30:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ac34:	ee17 0a90 	vmov	r0, s15
 800ac38:	f7f8 ffe6 	bl	8003c08 <constrain>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	1a9b      	subs	r3, r3, r2
 800ac44:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e002      	b.n	800ac50 <taskGetEstimatedAltitude+0x5f0>

    } else {
        BaroPID = 0;
 800ac4a:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <taskGetEstimatedAltitude+0x60c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ac50:	4a0b      	ldr	r2, [pc, #44]	; (800ac80 <taskGetEstimatedAltitude+0x620>)
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	6013      	str	r3, [r2, #0]

    return 1;
 800ac56:	2301      	movs	r3, #1
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3738      	adds	r7, #56	; 0x38
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20001498 	.word	0x20001498
 800ac64:	20000db4 	.word	0x20000db4
 800ac68:	fffffed4 	.word	0xfffffed4
 800ac6c:	20001490 	.word	0x20001490
 800ac70:	200014a0 	.word	0x200014a0
 800ac74:	00190320 	.word	0x00190320
 800ac78:	ffe6fce0 	.word	0xffe6fce0
 800ac7c:	003ff801 	.word	0x003ff801
 800ac80:	20001520 	.word	0x20001520
 800ac84:	44000000 	.word	0x44000000

0800ac88 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ac90:	4916      	ldr	r1, [pc, #88]	; (800acec <servoMiddle+0x64>)
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	440b      	add	r3, r1
 800ac9e:	33bc      	adds	r3, #188	; 0xbc
 800aca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aca4:	2b11      	cmp	r3, #17
 800aca6:	dc11      	bgt.n	800accc <servoMiddle+0x44>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b07      	cmp	r3, #7
 800acac:	dc0e      	bgt.n	800accc <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800acae:	490f      	ldr	r1, [pc, #60]	; (800acec <servoMiddle+0x64>)
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4613      	mov	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	440b      	add	r3, r1
 800acbc:	33bc      	adds	r3, #188	; 0xbc
 800acbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acc2:	461a      	mov	r2, r3
 800acc4:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <servoMiddle+0x68>)
 800acc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800acca:	e009      	b.n	800ace0 <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800accc:	4907      	ldr	r1, [pc, #28]	; (800acec <servoMiddle+0x64>)
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	440b      	add	r3, r1
 800acda:	33bc      	adds	r3, #188	; 0xbc
 800acdc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	20000db4 	.word	0x20000db4
 800acf0:	20001758 	.word	0x20001758

0800acf4 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800acfe:	490d      	ldr	r1, [pc, #52]	; (800ad34 <servoDirection+0x40>)
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	440b      	add	r3, r1
 800ad0c:	33c0      	adds	r3, #192	; 0xc0
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	461a      	mov	r2, r3
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	fa42 f303 	asr.w	r3, r2, r3
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <servoDirection+0x32>
        return -1;
 800ad20:	f04f 33ff 	mov.w	r3, #4294967295
 800ad24:	e000      	b.n	800ad28 <servoDirection+0x34>
    else
        return 1;
 800ad26:	2301      	movs	r3, #1
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20000db4 	.word	0x20000db4

0800ad38 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <loadCustomServoMixer+0x80>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ad44:	2270      	movs	r2, #112	; 0x70
 800ad46:	2100      	movs	r1, #0
 800ad48:	481c      	ldr	r0, [pc, #112]	; (800adbc <loadCustomServoMixer+0x84>)
 800ad4a:	f018 fb4d 	bl	80233e8 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad4e:	2300      	movs	r3, #0
 800ad50:	71fb      	strb	r3, [r7, #7]
 800ad52:	e028      	b.n	800ada6 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ad54:	79fa      	ldrb	r2, [r7, #7]
 800ad56:	491a      	ldr	r1, [pc, #104]	; (800adc0 <loadCustomServoMixer+0x88>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	1a9b      	subs	r3, r3, r2
 800ad5e:	440b      	add	r3, r1
 800ad60:	33d2      	adds	r3, #210	; 0xd2
 800ad62:	f993 3000 	ldrsb.w	r3, [r3]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d021      	beq.n	800adae <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad6a:	79fa      	ldrb	r2, [r7, #7]
 800ad6c:	79f9      	ldrb	r1, [r7, #7]
 800ad6e:	4813      	ldr	r0, [pc, #76]	; (800adbc <loadCustomServoMixer+0x84>)
 800ad70:	460b      	mov	r3, r1
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	1a5b      	subs	r3, r3, r1
 800ad76:	4418      	add	r0, r3
 800ad78:	4911      	ldr	r1, [pc, #68]	; (800adc0 <loadCustomServoMixer+0x88>)
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	00db      	lsls	r3, r3, #3
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	440b      	add	r3, r1
 800ad82:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6811      	ldr	r1, [r2, #0]
 800ad8a:	6019      	str	r1, [r3, #0]
 800ad8c:	8891      	ldrh	r1, [r2, #4]
 800ad8e:	7992      	ldrb	r2, [r2, #6]
 800ad90:	8099      	strh	r1, [r3, #4]
 800ad92:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ad94:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <loadCustomServoMixer+0x80>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <loadCustomServoMixer+0x80>)
 800ad9e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	3301      	adds	r3, #1
 800ada4:	71fb      	strb	r3, [r7, #7]
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	2b0f      	cmp	r3, #15
 800adaa:	d9d3      	bls.n	800ad54 <loadCustomServoMixer+0x1c>
    }
}
 800adac:	e000      	b.n	800adb0 <loadCustomServoMixer+0x78>
            break;
 800adae:	bf00      	nop
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20001585 	.word	0x20001585
 800adbc:	20001678 	.word	0x20001678
 800adc0:	20000848 	.word	0x20000848

0800adc4 <mixerInit>:

void mixerInit(void)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800adca:	4b8b      	ldr	r3, [pc, #556]	; (800aff8 <mixerInit+0x234>)
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	4a8b      	ldr	r2, [pc, #556]	; (800affc <mixerInit+0x238>)
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	4413      	add	r3, r2
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bf14      	ite	ne
 800adda:	2301      	movne	r3, #1
 800addc:	2300      	moveq	r3, #0
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	4b87      	ldr	r3, [pc, #540]	; (800b000 <mixerInit+0x23c>)
 800ade2:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800ade4:	2020      	movs	r0, #32
 800ade6:	f7fc f895 	bl	8006f14 <feature>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <mixerInit+0x32>
        core.useServo = 1;
 800adf0:	4b83      	ldr	r3, [pc, #524]	; (800b000 <mixerInit+0x23c>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800adf6:	4b80      	ldr	r3, [pc, #512]	; (800aff8 <mixerInit+0x234>)
 800adf8:	795b      	ldrb	r3, [r3, #5]
 800adfa:	2b17      	cmp	r3, #23
 800adfc:	d128      	bne.n	800ae50 <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800adfe:	2300      	movs	r3, #0
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	e021      	b.n	800ae48 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ae04:	4a7c      	ldr	r2, [pc, #496]	; (800aff8 <mixerInit+0x234>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	4413      	add	r3, r2
 800ae0e:	edd3 7a00 	vldr	s15, [r3]
 800ae12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1a:	d048      	beq.n	800aeae <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800ae1c:	4a79      	ldr	r2, [pc, #484]	; (800b004 <mixerInit+0x240>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	4a74      	ldr	r2, [pc, #464]	; (800aff8 <mixerInit+0x234>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	4413      	add	r3, r2
 800ae2e:	460c      	mov	r4, r1
 800ae30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ae36:	4b74      	ldr	r3, [pc, #464]	; (800b008 <mixerInit+0x244>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	4b72      	ldr	r3, [pc, #456]	; (800b008 <mixerInit+0x244>)
 800ae40:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3301      	adds	r3, #1
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b0b      	cmp	r3, #11
 800ae4c:	ddda      	ble.n	800ae04 <mixerInit+0x40>
 800ae4e:	e02f      	b.n	800aeb0 <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ae50:	4b69      	ldr	r3, [pc, #420]	; (800aff8 <mixerInit+0x234>)
 800ae52:	795b      	ldrb	r3, [r3, #5]
 800ae54:	461a      	mov	r2, r3
 800ae56:	4b69      	ldr	r3, [pc, #420]	; (800affc <mixerInit+0x238>)
 800ae58:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae5c:	4b6a      	ldr	r3, [pc, #424]	; (800b008 <mixerInit+0x244>)
 800ae5e:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ae60:	4b65      	ldr	r3, [pc, #404]	; (800aff8 <mixerInit+0x234>)
 800ae62:	795b      	ldrb	r3, [r3, #5]
 800ae64:	4a65      	ldr	r2, [pc, #404]	; (800affc <mixerInit+0x238>)
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01f      	beq.n	800aeb0 <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae70:	2300      	movs	r3, #0
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	e014      	b.n	800aea0 <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae76:	4b60      	ldr	r3, [pc, #384]	; (800aff8 <mixerInit+0x234>)
 800ae78:	795b      	ldrb	r3, [r3, #5]
 800ae7a:	4a60      	ldr	r2, [pc, #384]	; (800affc <mixerInit+0x238>)
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	4413      	add	r3, r2
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	18d1      	adds	r1, r2, r3
 800ae88:	4a5e      	ldr	r2, [pc, #376]	; (800b004 <mixerInit+0x240>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	4413      	add	r3, r2
 800ae90:	461c      	mov	r4, r3
 800ae92:	460b      	mov	r3, r1
 800ae94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	607b      	str	r3, [r7, #4]
 800aea0:	4b59      	ldr	r3, [pc, #356]	; (800b008 <mixerInit+0x244>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	dbe4      	blt.n	800ae76 <mixerInit+0xb2>
 800aeac:	e000      	b.n	800aeb0 <mixerInit+0xec>
                break;
 800aeae:	bf00      	nop
        }
    }

    if (core.useServo) {
 800aeb0:	4b53      	ldr	r3, [pc, #332]	; (800b000 <mixerInit+0x23c>)
 800aeb2:	7d5b      	ldrb	r3, [r3, #21]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d033      	beq.n	800af20 <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800aeb8:	4b4f      	ldr	r3, [pc, #316]	; (800aff8 <mixerInit+0x234>)
 800aeba:	795b      	ldrb	r3, [r3, #5]
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b53      	ldr	r3, [pc, #332]	; (800b00c <mixerInit+0x248>)
 800aec0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800aec4:	4b52      	ldr	r3, [pc, #328]	; (800b010 <mixerInit+0x24c>)
 800aec6:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800aec8:	4b4b      	ldr	r3, [pc, #300]	; (800aff8 <mixerInit+0x234>)
 800aeca:	795b      	ldrb	r3, [r3, #5]
 800aecc:	4a4f      	ldr	r2, [pc, #316]	; (800b00c <mixerInit+0x248>)
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4413      	add	r3, r2
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d023      	beq.n	800af20 <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800aed8:	2300      	movs	r3, #0
 800aeda:	607b      	str	r3, [r7, #4]
 800aedc:	e01a      	b.n	800af14 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800aede:	4b46      	ldr	r3, [pc, #280]	; (800aff8 <mixerInit+0x234>)
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	4a4a      	ldr	r2, [pc, #296]	; (800b00c <mixerInit+0x248>)
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	4413      	add	r3, r2
 800aee8:	6859      	ldr	r1, [r3, #4]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	18c8      	adds	r0, r1, r3
 800aef4:	4947      	ldr	r1, [pc, #284]	; (800b014 <mixerInit+0x250>)
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	4613      	mov	r3, r2
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	1a9b      	subs	r3, r3, r2
 800aefe:	440b      	add	r3, r1
 800af00:	4602      	mov	r2, r0
 800af02:	6811      	ldr	r1, [r2, #0]
 800af04:	6019      	str	r1, [r3, #0]
 800af06:	8891      	ldrh	r1, [r2, #4]
 800af08:	7992      	ldrb	r2, [r2, #6]
 800af0a:	8099      	strh	r1, [r3, #4]
 800af0c:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3301      	adds	r3, #1
 800af12:	607b      	str	r3, [r7, #4]
 800af14:	4b3e      	ldr	r3, [pc, #248]	; (800b010 <mixerInit+0x24c>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	461a      	mov	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	dbde      	blt.n	800aede <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800af20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af24:	f7fb fff6 	bl	8006f14 <feature>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d045      	beq.n	800afba <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800af2e:	4b36      	ldr	r3, [pc, #216]	; (800b008 <mixerInit+0x244>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d941      	bls.n	800afba <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	e038      	b.n	800afae <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800af3c:	4a31      	ldr	r2, [pc, #196]	; (800b004 <mixerInit+0x240>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	3308      	adds	r3, #8
 800af46:	edd3 7a00 	vldr	s15, [r3]
 800af4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af52:	4a2c      	ldr	r2, [pc, #176]	; (800b004 <mixerInit+0x240>)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	4413      	add	r3, r2
 800af5a:	3308      	adds	r3, #8
 800af5c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800af60:	4a28      	ldr	r2, [pc, #160]	; (800b004 <mixerInit+0x240>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	011b      	lsls	r3, r3, #4
 800af66:	4413      	add	r3, r2
 800af68:	3304      	adds	r3, #4
 800af6a:	edd3 7a00 	vldr	s15, [r3]
 800af6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af76:	4a23      	ldr	r2, [pc, #140]	; (800b004 <mixerInit+0x240>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	4413      	add	r3, r2
 800af7e:	3304      	adds	r3, #4
 800af80:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800af84:	4a1f      	ldr	r2, [pc, #124]	; (800b004 <mixerInit+0x240>)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	4413      	add	r3, r2
 800af8c:	330c      	adds	r3, #12
 800af8e:	edd3 7a00 	vldr	s15, [r3]
 800af92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af9a:	4a1a      	ldr	r2, [pc, #104]	; (800b004 <mixerInit+0x240>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	4413      	add	r3, r2
 800afa2:	330c      	adds	r3, #12
 800afa4:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3301      	adds	r3, #1
 800afac:	607b      	str	r3, [r7, #4]
 800afae:	4b16      	ldr	r3, [pc, #88]	; (800b008 <mixerInit+0x244>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	dbc0      	blt.n	800af3c <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <mixerInit+0x234>)
 800afbc:	795b      	ldrb	r3, [r3, #5]
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	d007      	beq.n	800afd2 <mixerInit+0x20e>
 800afc2:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <mixerInit+0x234>)
 800afc4:	795b      	ldrb	r3, [r3, #5]
 800afc6:	2b0e      	cmp	r3, #14
 800afc8:	d003      	beq.n	800afd2 <mixerInit+0x20e>
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <mixerInit+0x234>)
 800afcc:	795b      	ldrb	r3, [r3, #5]
 800afce:	2b18      	cmp	r3, #24
 800afd0:	d109      	bne.n	800afe6 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <mixerInit+0x254>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afd8:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <mixerInit+0x234>)
 800afda:	795b      	ldrb	r3, [r3, #5]
 800afdc:	2b18      	cmp	r3, #24
 800afde:	d105      	bne.n	800afec <mixerInit+0x228>
            loadCustomServoMixer();
 800afe0:	f7ff feaa 	bl	800ad38 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afe4:	e002      	b.n	800afec <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <mixerInit+0x254>)
 800afe8:	2200      	movs	r2, #0
 800afea:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800afec:	f000 f816 	bl	800b01c <mixerResetMotors>
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd90      	pop	{r4, r7, pc}
 800aff8:	20000848 	.word	0x20000848
 800affc:	080291c8 	.word	0x080291c8
 800b000:	20000790 	.word	0x20000790
 800b004:	200015b8 	.word	0x200015b8
 800b008:	20001584 	.word	0x20001584
 800b00c:	08029334 	.word	0x08029334
 800b010:	20001585 	.word	0x20001585
 800b014:	20001678 	.word	0x20001678
 800b018:	20001720 	.word	0x20001720

0800b01c <mixerResetMotors>:

void mixerResetMotors(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800b022:	2300      	movs	r3, #0
 800b024:	607b      	str	r3, [r7, #4]
 800b026:	e016      	b.n	800b056 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b028:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b02c:	f7fb ff72 	bl	8006f14 <feature>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d004      	beq.n	800b040 <mixerResetMotors+0x24>
 800b036:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <mixerResetMotors+0x4c>)
 800b038:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b03c:	b21b      	sxth	r3, r3
 800b03e:	e003      	b.n	800b048 <mixerResetMotors+0x2c>
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <mixerResetMotors+0x4c>)
 800b042:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b046:	b21b      	sxth	r3, r3
 800b048:	4908      	ldr	r1, [pc, #32]	; (800b06c <mixerResetMotors+0x50>)
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3301      	adds	r3, #1
 800b054:	607b      	str	r3, [r7, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b0b      	cmp	r3, #11
 800b05a:	dde5      	ble.n	800b028 <mixerResetMotors+0xc>
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000848 	.word	0x20000848
 800b06c:	200015a0 	.word	0x200015a0

0800b070 <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3301      	adds	r3, #1
 800b07c:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	e038      	b.n	800b0f6 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b084:	4934      	ldr	r1, [pc, #208]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	440b      	add	r3, r1
 800b090:	33d6      	adds	r3, #214	; 0xd6
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	4930      	ldr	r1, [pc, #192]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	4613      	mov	r3, r2
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	1a9b      	subs	r3, r3, r2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	33d2      	adds	r3, #210	; 0xd2
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	492b      	ldr	r1, [pc, #172]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	33d2      	adds	r3, #210	; 0xd2
 800b0b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b0ba:	b2d8      	uxtb	r0, r3
 800b0bc:	4926      	ldr	r1, [pc, #152]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	440b      	add	r3, r1
 800b0c8:	33d1      	adds	r3, #209	; 0xd1
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	4922      	ldr	r1, [pc, #136]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	1a9b      	subs	r3, r3, r2
 800b0d8:	440b      	add	r3, r1
 800b0da:	33d1      	adds	r3, #209	; 0xd1
 800b0dc:	7818      	ldrb	r0, [r3, #0]
 800b0de:	491e      	ldr	r1, [pc, #120]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	1a9b      	subs	r3, r3, r2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	33d0      	adds	r3, #208	; 0xd0
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b0f      	cmp	r3, #15
 800b0fa:	ddc3      	ble.n	800b084 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	e01a      	b.n	800b138 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b102:	4a16      	ldr	r2, [pc, #88]	; (800b15c <servoMixerLoadMix+0xec>)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4413      	add	r3, r2
 800b10a:	6859      	ldr	r1, [r3, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	4613      	mov	r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	1a9b      	subs	r3, r3, r2
 800b114:	18c8      	adds	r0, r1, r3
 800b116:	4910      	ldr	r1, [pc, #64]	; (800b158 <servoMixerLoadMix+0xe8>)
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	4613      	mov	r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	1a9b      	subs	r3, r3, r2
 800b120:	440b      	add	r3, r1
 800b122:	33d0      	adds	r3, #208	; 0xd0
 800b124:	4602      	mov	r2, r0
 800b126:	6811      	ldr	r1, [r2, #0]
 800b128:	6019      	str	r1, [r3, #0]
 800b12a:	8891      	ldrh	r1, [r2, #4]
 800b12c:	7992      	ldrb	r2, [r2, #6]
 800b12e:	8099      	strh	r1, [r3, #4]
 800b130:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3301      	adds	r3, #1
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	4a08      	ldr	r2, [pc, #32]	; (800b15c <servoMixerLoadMix+0xec>)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b140:	461a      	mov	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4293      	cmp	r3, r2
 800b146:	dbdc      	blt.n	800b102 <servoMixerLoadMix+0x92>
}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000848 	.word	0x20000848
 800b15c:	08029334 	.word	0x08029334

0800b160 <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b160:	b490      	push	{r4, r7}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3301      	adds	r3, #1
 800b16c:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e00a      	b.n	800b18a <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b174:	4a1c      	ldr	r2, [pc, #112]	; (800b1e8 <mixerLoadMix+0x88>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3301      	adds	r3, #1
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	4413      	add	r3, r2
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b0b      	cmp	r3, #11
 800b18e:	ddf1      	ble.n	800b174 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b190:	4a16      	ldr	r2, [pc, #88]	; (800b1ec <mixerLoadMix+0x8c>)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4413      	add	r3, r2
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01f      	beq.n	800b1de <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e014      	b.n	800b1ce <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b1a4:	4a11      	ldr	r2, [pc, #68]	; (800b1ec <mixerLoadMix+0x8c>)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	18d1      	adds	r1, r2, r3
 800b1b4:	4a0c      	ldr	r2, [pc, #48]	; (800b1e8 <mixerLoadMix+0x88>)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	4413      	add	r3, r2
 800b1be:	461c      	mov	r4, r3
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <mixerLoadMix+0x8c>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	dbe2      	blt.n	800b1a4 <mixerLoadMix+0x44>
    }
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bc90      	pop	{r4, r7}
 800b1e6:	4770      	bx	lr
 800b1e8:	20000848 	.word	0x20000848
 800b1ec:	080291c8 	.word	0x080291c8

0800b1f0 <writeServos>:

void writeServos(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b1f4:	4b95      	ldr	r3, [pc, #596]	; (800b44c <writeServos+0x25c>)
 800b1f6:	7d5b      	ldrb	r3, [r3, #21]
 800b1f8:	f083 0301 	eor.w	r3, r3, #1
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 811d 	bne.w	800b43e <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b204:	4b92      	ldr	r3, [pc, #584]	; (800b450 <writeServos+0x260>)
 800b206:	795b      	ldrb	r3, [r3, #5]
 800b208:	3b01      	subs	r3, #1
 800b20a:	2b17      	cmp	r3, #23
 800b20c:	f200 8100 	bhi.w	800b410 <writeServos+0x220>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <writeServos+0x28>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b29b 	.word	0x0800b29b
 800b21c:	0800b411 	.word	0x0800b411
 800b220:	0800b411 	.word	0x0800b411
 800b224:	0800b279 	.word	0x0800b279
 800b228:	0800b2db 	.word	0x0800b2db
 800b22c:	0800b411 	.word	0x0800b411
 800b230:	0800b411 	.word	0x0800b411
 800b234:	0800b31f 	.word	0x0800b31f
 800b238:	0800b411 	.word	0x0800b411
 800b23c:	0800b411 	.word	0x0800b411
 800b240:	0800b411 	.word	0x0800b411
 800b244:	0800b411 	.word	0x0800b411
 800b248:	0800b411 	.word	0x0800b411
 800b24c:	0800b341 	.word	0x0800b341
 800b250:	0800b411 	.word	0x0800b411
 800b254:	0800b411 	.word	0x0800b411
 800b258:	0800b411 	.word	0x0800b411
 800b25c:	0800b411 	.word	0x0800b411
 800b260:	0800b411 	.word	0x0800b411
 800b264:	0800b2fd 	.word	0x0800b2fd
 800b268:	0800b341 	.word	0x0800b341
 800b26c:	0800b411 	.word	0x0800b411
 800b270:	0800b411 	.word	0x0800b411
 800b274:	0800b383 	.word	0x0800b383
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b278:	4b76      	ldr	r3, [pc, #472]	; (800b454 <writeServos+0x264>)
 800b27a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	2000      	movs	r0, #0
 800b284:	f7f6 fe7e 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b288:	4b72      	ldr	r3, [pc, #456]	; (800b454 <writeServos+0x264>)
 800b28a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4619      	mov	r1, r3
 800b292:	2001      	movs	r0, #1
 800b294:	f7f6 fe76 	bl	8001f84 <actPwmWriteServo>
            break;
 800b298:	e0d6      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b29a:	4b6f      	ldr	r3, [pc, #444]	; (800b458 <writeServos+0x268>)
 800b29c:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d008      	beq.n	800b2b6 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b2a4:	4b6b      	ldr	r3, [pc, #428]	; (800b454 <writeServos+0x264>)
 800b2a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f7f6 fe68 	bl	8001f84 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b2b4:	e0c8      	b.n	800b448 <writeServos+0x258>
                if (f.ARMED)
 800b2b6:	4b69      	ldr	r3, [pc, #420]	; (800b45c <writeServos+0x26c>)
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d008      	beq.n	800b2d0 <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b2be:	4b65      	ldr	r3, [pc, #404]	; (800b454 <writeServos+0x264>)
 800b2c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	f7f6 fe5b 	bl	8001f84 <actPwmWriteServo>
            break;
 800b2ce:	e0bb      	b.n	800b448 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f7f6 fe56 	bl	8001f84 <actPwmWriteServo>
            break;
 800b2d8:	e0b6      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b2da:	4b5e      	ldr	r3, [pc, #376]	; (800b454 <writeServos+0x264>)
 800b2dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f7f6 fe4d 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b2ea:	4b5a      	ldr	r3, [pc, #360]	; (800b454 <writeServos+0x264>)
 800b2ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f7f6 fe45 	bl	8001f84 <actPwmWriteServo>
            break;
 800b2fa:	e0a5      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b2fc:	4b55      	ldr	r3, [pc, #340]	; (800b454 <writeServos+0x264>)
 800b2fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b302:	b29b      	uxth	r3, r3
 800b304:	4619      	mov	r1, r3
 800b306:	2000      	movs	r0, #0
 800b308:	f7f6 fe3c 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b30c:	4b51      	ldr	r3, [pc, #324]	; (800b454 <writeServos+0x264>)
 800b30e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4619      	mov	r1, r3
 800b316:	2001      	movs	r0, #1
 800b318:	f7f6 fe34 	bl	8001f84 <actPwmWriteServo>
            break;
 800b31c:	e094      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b31e:	4b4d      	ldr	r3, [pc, #308]	; (800b454 <writeServos+0x264>)
 800b320:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b324:	b29b      	uxth	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	2000      	movs	r0, #0
 800b32a:	f7f6 fe2b 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b32e:	4b49      	ldr	r3, [pc, #292]	; (800b454 <writeServos+0x264>)
 800b330:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b334:	b29b      	uxth	r3, r3
 800b336:	4619      	mov	r1, r3
 800b338:	2001      	movs	r0, #1
 800b33a:	f7f6 fe23 	bl	8001f84 <actPwmWriteServo>
            break;
 800b33e:	e083      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b340:	4b44      	ldr	r3, [pc, #272]	; (800b454 <writeServos+0x264>)
 800b342:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b346:	b29b      	uxth	r3, r3
 800b348:	4619      	mov	r1, r3
 800b34a:	2000      	movs	r0, #0
 800b34c:	f7f6 fe1a 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b350:	4b40      	ldr	r3, [pc, #256]	; (800b454 <writeServos+0x264>)
 800b352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b356:	b29b      	uxth	r3, r3
 800b358:	4619      	mov	r1, r3
 800b35a:	2001      	movs	r0, #1
 800b35c:	f7f6 fe12 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b360:	4b3c      	ldr	r3, [pc, #240]	; (800b454 <writeServos+0x264>)
 800b362:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b366:	b29b      	uxth	r3, r3
 800b368:	4619      	mov	r1, r3
 800b36a:	2002      	movs	r0, #2
 800b36c:	f7f6 fe0a 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b370:	4b38      	ldr	r3, [pc, #224]	; (800b454 <writeServos+0x264>)
 800b372:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b376:	b29b      	uxth	r3, r3
 800b378:	4619      	mov	r1, r3
 800b37a:	2003      	movs	r0, #3
 800b37c:	f7f6 fe02 	bl	8001f84 <actPwmWriteServo>
            break;
 800b380:	e062      	b.n	800b448 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b382:	4b34      	ldr	r3, [pc, #208]	; (800b454 <writeServos+0x264>)
 800b384:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	4619      	mov	r1, r3
 800b38c:	2000      	movs	r0, #0
 800b38e:	f7f6 fdf9 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b392:	4b30      	ldr	r3, [pc, #192]	; (800b454 <writeServos+0x264>)
 800b394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4619      	mov	r1, r3
 800b39c:	2001      	movs	r0, #1
 800b39e:	f7f6 fdf1 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b3a2:	4b2c      	ldr	r3, [pc, #176]	; (800b454 <writeServos+0x264>)
 800b3a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	2002      	movs	r0, #2
 800b3ae:	f7f6 fde9 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b3b2:	4b28      	ldr	r3, [pc, #160]	; (800b454 <writeServos+0x264>)
 800b3b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	2003      	movs	r0, #3
 800b3be:	f7f6 fde1 	bl	8001f84 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	f7fb fda6 	bl	8006f14 <feature>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d039      	beq.n	800b442 <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b3ce:	4b21      	ldr	r3, [pc, #132]	; (800b454 <writeServos+0x264>)
 800b3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	2004      	movs	r0, #4
 800b3da:	f7f6 fdd3 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b3de:	4b1d      	ldr	r3, [pc, #116]	; (800b454 <writeServos+0x264>)
 800b3e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	2005      	movs	r0, #5
 800b3ea:	f7f6 fdcb 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <writeServos+0x264>)
 800b3f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	2006      	movs	r0, #6
 800b3fa:	f7f6 fdc3 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <writeServos+0x264>)
 800b400:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b404:	b29b      	uxth	r3, r3
 800b406:	4619      	mov	r1, r3
 800b408:	2007      	movs	r0, #7
 800b40a:	f7f6 fdbb 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b40e:	e018      	b.n	800b442 <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b410:	2020      	movs	r0, #32
 800b412:	f7fb fd7f 	bl	8006f14 <feature>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d014      	beq.n	800b446 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <writeServos+0x264>)
 800b41e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b422:	b29b      	uxth	r3, r3
 800b424:	4619      	mov	r1, r3
 800b426:	2000      	movs	r0, #0
 800b428:	f7f6 fdac 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <writeServos+0x264>)
 800b42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b432:	b29b      	uxth	r3, r3
 800b434:	4619      	mov	r1, r3
 800b436:	2001      	movs	r0, #1
 800b438:	f7f6 fda4 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b43c:	e003      	b.n	800b446 <writeServos+0x256>
        return;
 800b43e:	bf00      	nop
 800b440:	e002      	b.n	800b448 <writeServos+0x258>
            break;
 800b442:	bf00      	nop
 800b444:	e000      	b.n	800b448 <writeServos+0x258>
            break;
 800b446:	bf00      	nop
    }
}
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000790 	.word	0x20000790
 800b450:	20000848 	.word	0x20000848
 800b454:	20000040 	.word	0x20000040
 800b458:	20000db4 	.word	0x20000db4
 800b45c:	20001720 	.word	0x20001720

0800b460 <writeMotors>:

void writeMotors(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b466:	2300      	movs	r3, #0
 800b468:	71fb      	strb	r3, [r7, #7]
 800b46a:	e00c      	b.n	800b486 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b46c:	79fb      	ldrb	r3, [r7, #7]
 800b46e:	4a0b      	ldr	r2, [pc, #44]	; (800b49c <writeMotors+0x3c>)
 800b470:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b474:	b29a      	uxth	r2, r3
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	4611      	mov	r1, r2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f6 fd66 	bl	8001f4c <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b480:	79fb      	ldrb	r3, [r7, #7]
 800b482:	3301      	adds	r3, #1
 800b484:	71fb      	strb	r3, [r7, #7]
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <writeMotors+0x40>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	79fa      	ldrb	r2, [r7, #7]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d3ed      	bcc.n	800b46c <writeMotors+0xc>
}
 800b490:	bf00      	nop
 800b492:	bf00      	nop
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20001588 	.word	0x20001588
 800b4a0:	20001584 	.word	0x20001584

0800b4a4 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b4a4:	b590      	push	{r4, r7, lr}
 800b4a6:	b08b      	sub	sp, #44	; 0x2c
 800b4a8:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b4aa:	4bae      	ldr	r3, [pc, #696]	; (800b764 <servoMixer+0x2c0>)
 800b4ac:	7a9b      	ldrb	r3, [r3, #10]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00c      	beq.n	800b4cc <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b4b2:	4bad      	ldr	r3, [pc, #692]	; (800b768 <servoMixer+0x2c4>)
 800b4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4b8:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b4ba:	4bab      	ldr	r3, [pc, #684]	; (800b768 <servoMixer+0x2c4>)
 800b4bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4c0:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b4c2:	4ba9      	ldr	r3, [pc, #676]	; (800b768 <servoMixer+0x2c4>)
 800b4c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4c8:	813b      	strh	r3, [r7, #8]
 800b4ca:	e00b      	b.n	800b4e4 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b4cc:	4ba7      	ldr	r3, [pc, #668]	; (800b76c <servoMixer+0x2c8>)
 800b4ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4d2:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b4d4:	4ba5      	ldr	r3, [pc, #660]	; (800b76c <servoMixer+0x2c8>)
 800b4d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4da:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b4dc:	4ba3      	ldr	r3, [pc, #652]	; (800b76c <servoMixer+0x2c8>)
 800b4de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4e2:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b4e4:	4ba2      	ldr	r3, [pc, #648]	; (800b770 <servoMixer+0x2cc>)
 800b4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ea:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b4ec:	4ba1      	ldr	r3, [pc, #644]	; (800b774 <servoMixer+0x2d0>)
 800b4ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	4ba0      	ldr	r3, [pc, #640]	; (800b778 <servoMixer+0x2d4>)
 800b4f6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	b21b      	sxth	r3, r3
 800b500:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b502:	4b9c      	ldr	r3, [pc, #624]	; (800b774 <servoMixer+0x2d0>)
 800b504:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	4b9b      	ldr	r3, [pc, #620]	; (800b778 <servoMixer+0x2d4>)
 800b50c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	b29b      	uxth	r3, r3
 800b514:	b21b      	sxth	r3, r3
 800b516:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b518:	4b96      	ldr	r3, [pc, #600]	; (800b774 <servoMixer+0x2d0>)
 800b51a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	4b95      	ldr	r3, [pc, #596]	; (800b778 <servoMixer+0x2d4>)
 800b522:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	b29b      	uxth	r3, r3
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b52e:	4b91      	ldr	r3, [pc, #580]	; (800b774 <servoMixer+0x2d0>)
 800b530:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b534:	b29a      	uxth	r2, r3
 800b536:	4b90      	ldr	r3, [pc, #576]	; (800b778 <servoMixer+0x2d4>)
 800b538:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	b29b      	uxth	r3, r3
 800b540:	b21b      	sxth	r3, r3
 800b542:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b544:	4b8b      	ldr	r3, [pc, #556]	; (800b774 <servoMixer+0x2d0>)
 800b546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	4b8a      	ldr	r3, [pc, #552]	; (800b778 <servoMixer+0x2d4>)
 800b54e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	b29b      	uxth	r3, r3
 800b556:	b21b      	sxth	r3, r3
 800b558:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b55a:	4b86      	ldr	r3, [pc, #536]	; (800b774 <servoMixer+0x2d0>)
 800b55c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b560:	b29a      	uxth	r2, r3
 800b562:	4b85      	ldr	r3, [pc, #532]	; (800b778 <servoMixer+0x2d4>)
 800b564:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	b21b      	sxth	r3, r3
 800b56e:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b570:	4b80      	ldr	r3, [pc, #512]	; (800b774 <servoMixer+0x2d0>)
 800b572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b576:	b29a      	uxth	r2, r3
 800b578:	4b7f      	ldr	r3, [pc, #508]	; (800b778 <servoMixer+0x2d4>)
 800b57a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29b      	uxth	r3, r3
 800b582:	b21b      	sxth	r3, r3
 800b584:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b586:	4b7b      	ldr	r3, [pc, #492]	; (800b774 <servoMixer+0x2d0>)
 800b588:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	4b7a      	ldr	r3, [pc, #488]	; (800b778 <servoMixer+0x2d4>)
 800b590:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	b29b      	uxth	r3, r3
 800b598:	b21b      	sxth	r3, r3
 800b59a:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b59c:	2300      	movs	r3, #0
 800b59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5a2:	e00a      	b.n	800b5ba <servoMixer+0x116>
        servo[i] = 0;
 800b5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a8:	4a74      	ldr	r2, [pc, #464]	; (800b77c <servoMixer+0x2d8>)
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5be:	2b07      	cmp	r3, #7
 800b5c0:	d9f0      	bls.n	800b5a4 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5c8:	e15f      	b.n	800b88a <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b5ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5ce:	496c      	ldr	r1, [pc, #432]	; (800b780 <servoMixer+0x2dc>)
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	3306      	adds	r3, #6
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <servoMixer+0x15a>
 800b5e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5e4:	4966      	ldr	r1, [pc, #408]	; (800b780 <servoMixer+0x2dc>)
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	1a9b      	subs	r3, r3, r2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3306      	adds	r3, #6
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	3314      	adds	r3, #20
 800b5f4:	4a63      	ldr	r2, [pc, #396]	; (800b784 <servoMixer+0x2e0>)
 800b5f6:	5cd3      	ldrb	r3, [r2, r3]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 813b 	beq.w	800b874 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b5fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b602:	495f      	ldr	r1, [pc, #380]	; (800b780 <servoMixer+0x2dc>)
 800b604:	4613      	mov	r3, r2
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	1a9b      	subs	r3, r3, r2
 800b60a:	440b      	add	r3, r1
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b612:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b616:	495a      	ldr	r1, [pc, #360]	; (800b780 <servoMixer+0x2dc>)
 800b618:	4613      	mov	r3, r2
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	1a9b      	subs	r3, r3, r2
 800b61e:	440b      	add	r3, r1
 800b620:	3301      	adds	r3, #1
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b628:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b62c:	4956      	ldr	r1, [pc, #344]	; (800b788 <servoMixer+0x2e4>)
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	440b      	add	r3, r1
 800b638:	33ba      	adds	r3, #186	; 0xba
 800b63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b63e:	b299      	uxth	r1, r3
 800b640:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b644:	4850      	ldr	r0, [pc, #320]	; (800b788 <servoMixer+0x2e4>)
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4403      	add	r3, r0
 800b650:	33b8      	adds	r3, #184	; 0xb8
 800b652:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b656:	b29b      	uxth	r3, r3
 800b658:	1acb      	subs	r3, r1, r3
 800b65a:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b65c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b660:	4947      	ldr	r1, [pc, #284]	; (800b780 <servoMixer+0x2dc>)
 800b662:	4613      	mov	r3, r2
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	1a9b      	subs	r3, r3, r2
 800b668:	440b      	add	r3, r1
 800b66a:	3304      	adds	r3, #4
 800b66c:	f993 3000 	ldrsb.w	r3, [r3]
 800b670:	461a      	mov	r2, r3
 800b672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b674:	fb02 f303 	mul.w	r3, r2, r3
 800b678:	4a44      	ldr	r2, [pc, #272]	; (800b78c <servoMixer+0x2e8>)
 800b67a:	fb82 1203 	smull	r1, r2, r2, r3
 800b67e:	1152      	asrs	r2, r2, #5
 800b680:	17db      	asrs	r3, r3, #31
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	b29a      	uxth	r2, r3
 800b686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	b29b      	uxth	r3, r3
 800b690:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b692:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b696:	493a      	ldr	r1, [pc, #232]	; (800b780 <servoMixer+0x2dc>)
 800b698:	4613      	mov	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	1a9b      	subs	r3, r3, r2
 800b69e:	440b      	add	r3, r1
 800b6a0:	3305      	adds	r3, #5
 800b6a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
 800b6ae:	4a37      	ldr	r2, [pc, #220]	; (800b78c <servoMixer+0x2e8>)
 800b6b0:	fb82 1203 	smull	r1, r2, r2, r3
 800b6b4:	1152      	asrs	r2, r2, #5
 800b6b6:	17db      	asrs	r3, r3, #31
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6be:	085b      	lsrs	r3, r3, #1
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b6c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6cc:	492c      	ldr	r1, [pc, #176]	; (800b780 <servoMixer+0x2dc>)
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10c      	bne.n	800b6f8 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b6de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	3328      	adds	r3, #40	; 0x28
 800b6ea:	443b      	add	r3, r7
 800b6ec:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b6f0:	4b27      	ldr	r3, [pc, #156]	; (800b790 <servoMixer+0x2ec>)
 800b6f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b6f6:	e082      	b.n	800b7fe <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6fc:	4a24      	ldr	r2, [pc, #144]	; (800b790 <servoMixer+0x2ec>)
 800b6fe:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	3328      	adds	r3, #40	; 0x28
 800b70a:	443b      	add	r3, r7
 800b70c:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b710:	429a      	cmp	r2, r3
 800b712:	da3f      	bge.n	800b794 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b718:	4a1d      	ldr	r2, [pc, #116]	; (800b790 <servoMixer+0x2ec>)
 800b71a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b71e:	4618      	mov	r0, r3
 800b720:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b724:	4916      	ldr	r1, [pc, #88]	; (800b780 <servoMixer+0x2dc>)
 800b726:	4613      	mov	r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	440b      	add	r3, r1
 800b72e:	3303      	adds	r3, #3
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	4418      	add	r0, r3
 800b734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b738:	4a15      	ldr	r2, [pc, #84]	; (800b790 <servoMixer+0x2ec>)
 800b73a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b73e:	4619      	mov	r1, r3
 800b740:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	3328      	adds	r3, #40	; 0x28
 800b748:	443b      	add	r3, r7
 800b74a:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f8 fa5a 	bl	8003c08 <constrain>
 800b754:	4602      	mov	r2, r0
 800b756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b75a:	b211      	sxth	r1, r2
 800b75c:	4a0c      	ldr	r2, [pc, #48]	; (800b790 <servoMixer+0x2ec>)
 800b75e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b762:	e04c      	b.n	800b7fe <servoMixer+0x35a>
 800b764:	20001720 	.word	0x20001720
 800b768:	2000177c 	.word	0x2000177c
 800b76c:	200017dc 	.word	0x200017dc
 800b770:	20001588 	.word	0x20001588
 800b774:	20001758 	.word	0x20001758
 800b778:	20000848 	.word	0x20000848
 800b77c:	20000040 	.word	0x20000040
 800b780:	20001678 	.word	0x20001678
 800b784:	200017c0 	.word	0x200017c0
 800b788:	20000db4 	.word	0x20000db4
 800b78c:	51eb851f 	.word	0x51eb851f
 800b790:	200016e8 	.word	0x200016e8
                else if (currentOutput[i] > input[from])
 800b794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b798:	4a63      	ldr	r2, [pc, #396]	; (800b928 <servoMixer+0x484>)
 800b79a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b79e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	3328      	adds	r3, #40	; 0x28
 800b7a6:	443b      	add	r3, r7
 800b7a8:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	dd26      	ble.n	800b7fe <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b4:	4a5c      	ldr	r2, [pc, #368]	; (800b928 <servoMixer+0x484>)
 800b7b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7c0:	495a      	ldr	r1, [pc, #360]	; (800b92c <servoMixer+0x488>)
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	1a9b      	subs	r3, r3, r2
 800b7c8:	440b      	add	r3, r1
 800b7ca:	3303      	adds	r3, #3
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	1ac0      	subs	r0, r0, r3
 800b7d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	3328      	adds	r3, #40	; 0x28
 800b7d8:	443b      	add	r3, r7
 800b7da:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e4:	4a50      	ldr	r2, [pc, #320]	; (800b928 <servoMixer+0x484>)
 800b7e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f7f8 fa0c 	bl	8003c08 <constrain>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f6:	b211      	sxth	r1, r2
 800b7f8:	4a4b      	ldr	r2, [pc, #300]	; (800b928 <servoMixer+0x484>)
 800b7fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b7fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b802:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff fa73 	bl	800acf4 <servoDirection>
 800b80e:	4604      	mov	r4, r0
 800b810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b814:	4a44      	ldr	r2, [pc, #272]	; (800b928 <servoMixer+0x484>)
 800b816:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b820:	4942      	ldr	r1, [pc, #264]	; (800b92c <servoMixer+0x488>)
 800b822:	4613      	mov	r3, r2
 800b824:	00db      	lsls	r3, r3, #3
 800b826:	1a9b      	subs	r3, r3, r2
 800b828:	440b      	add	r3, r1
 800b82a:	3302      	adds	r3, #2
 800b82c:	f993 3000 	ldrsb.w	r3, [r3]
 800b830:	fb00 f303 	mul.w	r3, r0, r3
 800b834:	4a3e      	ldr	r2, [pc, #248]	; (800b930 <servoMixer+0x48c>)
 800b836:	fb82 1203 	smull	r1, r2, r2, r3
 800b83a:	1152      	asrs	r2, r2, #5
 800b83c:	17db      	asrs	r3, r3, #31
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b844:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b848:	4618      	mov	r0, r3
 800b84a:	f7f8 f9dd 	bl	8003c08 <constrain>
 800b84e:	4603      	mov	r3, r0
 800b850:	fb03 f104 	mul.w	r1, r3, r4
 800b854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b858:	4a36      	ldr	r2, [pc, #216]	; (800b934 <servoMixer+0x490>)
 800b85a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b85e:	b29a      	uxth	r2, r3
 800b860:	b28b      	uxth	r3, r1
 800b862:	4413      	add	r3, r2
 800b864:	b29a      	uxth	r2, r3
 800b866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b86a:	b211      	sxth	r1, r2
 800b86c:	4a31      	ldr	r2, [pc, #196]	; (800b934 <servoMixer+0x490>)
 800b86e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b872:	e005      	b.n	800b880 <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b878:	4a2b      	ldr	r2, [pc, #172]	; (800b928 <servoMixer+0x484>)
 800b87a:	2100      	movs	r1, #0
 800b87c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b884:	3301      	adds	r3, #1
 800b886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b88a:	4b2b      	ldr	r3, [pc, #172]	; (800b938 <servoMixer+0x494>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b892:	429a      	cmp	r2, r3
 800b894:	f4ff ae99 	bcc.w	800b5ca <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b89e:	e039      	b.n	800b914 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b8a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8a4:	4925      	ldr	r1, [pc, #148]	; (800b93c <servoMixer+0x498>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	440b      	add	r3, r1
 800b8b0:	33be      	adds	r3, #190	; 0xbe
 800b8b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <servoMixer+0x490>)
 800b8be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8c2:	fb01 f303 	mul.w	r3, r1, r3
 800b8c6:	4a1a      	ldr	r2, [pc, #104]	; (800b930 <servoMixer+0x48c>)
 800b8c8:	fb82 1203 	smull	r1, r2, r2, r3
 800b8cc:	1152      	asrs	r2, r2, #5
 800b8ce:	17db      	asrs	r3, r3, #31
 800b8d0:	1ad2      	subs	r2, r2, r3
 800b8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d6:	b211      	sxth	r1, r2
 800b8d8:	4a16      	ldr	r2, [pc, #88]	; (800b934 <servoMixer+0x490>)
 800b8da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b8de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff f9d0 	bl	800ac88 <servoMiddle>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f0:	4a10      	ldr	r2, [pc, #64]	; (800b934 <servoMixer+0x490>)
 800b8f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	b28b      	uxth	r3, r1
 800b8fa:	4413      	add	r3, r2
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b902:	b211      	sxth	r1, r2
 800b904:	4a0b      	ldr	r2, [pc, #44]	; (800b934 <servoMixer+0x490>)
 800b906:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b90e:	3301      	adds	r3, #1
 800b910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b918:	2b07      	cmp	r3, #7
 800b91a:	d9c1      	bls.n	800b8a0 <servoMixer+0x3fc>
    }
}
 800b91c:	bf00      	nop
 800b91e:	bf00      	nop
 800b920:	372c      	adds	r7, #44	; 0x2c
 800b922:	46bd      	mov	sp, r7
 800b924:	bd90      	pop	{r4, r7, pc}
 800b926:	bf00      	nop
 800b928:	200016e8 	.word	0x200016e8
 800b92c:	20001678 	.word	0x20001678
 800b930:	51eb851f 	.word	0x51eb851f
 800b934:	20000040 	.word	0x20000040
 800b938:	20001585 	.word	0x20001585
 800b93c:	20000db4 	.word	0x20000db4

0800b940 <mixTable>:

void mixTable(void)
{
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b946:	4b7e      	ldr	r3, [pc, #504]	; (800bb40 <mixTable+0x200>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d91d      	bls.n	800b98a <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b94e:	4b7d      	ldr	r3, [pc, #500]	; (800bb44 <mixTable+0x204>)
 800b950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	4b7c      	ldr	r3, [pc, #496]	; (800bb48 <mixTable+0x208>)
 800b958:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bfb8      	it	lt
 800b960:	425b      	neglt	r3, r3
 800b962:	b29b      	uxth	r3, r3
 800b964:	461a      	mov	r2, r3
 800b966:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	4a76      	ldr	r2, [pc, #472]	; (800bb48 <mixTable+0x208>)
 800b96e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b972:	2a00      	cmp	r2, #0
 800b974:	bfb8      	it	lt
 800b976:	4252      	neglt	r2, r2
 800b978:	b292      	uxth	r2, r2
 800b97a:	3264      	adds	r2, #100	; 0x64
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7f8 f943 	bl	8003c08 <constrain>
 800b982:	4603      	mov	r3, r0
 800b984:	b21a      	sxth	r2, r3
 800b986:	4b6f      	ldr	r3, [pc, #444]	; (800bb44 <mixTable+0x204>)
 800b988:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b98a:	4b6d      	ldr	r3, [pc, #436]	; (800bb40 <mixTable+0x200>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	f240 809a 	bls.w	800bac8 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b994:	2300      	movs	r3, #0
 800b996:	60bb      	str	r3, [r7, #8]
 800b998:	e08f      	b.n	800baba <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b99a:	4b6b      	ldr	r3, [pc, #428]	; (800bb48 <mixTable+0x208>)
 800b99c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9a8:	4a68      	ldr	r2, [pc, #416]	; (800bb4c <mixTable+0x20c>)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	4413      	add	r3, r2
 800b9b0:	edd3 7a00 	vldr	s15, [r3]
 800b9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9b8:	4b62      	ldr	r3, [pc, #392]	; (800bb44 <mixTable+0x204>)
 800b9ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9c6:	4a61      	ldr	r2, [pc, #388]	; (800bb4c <mixTable+0x20c>)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9dc:	4b59      	ldr	r3, [pc, #356]	; (800bb44 <mixTable+0x204>)
 800b9de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9ea:	4a58      	ldr	r2, [pc, #352]	; (800bb4c <mixTable+0x20c>)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	011b      	lsls	r3, r3, #4
 800b9f0:	4413      	add	r3, r2
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	edd3 7a00 	vldr	s15, [r3]
 800b9f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba00:	4b53      	ldr	r3, [pc, #332]	; (800bb50 <mixTable+0x210>)
 800ba02:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800ba06:	425b      	negs	r3, r3
 800ba08:	4a4e      	ldr	r2, [pc, #312]	; (800bb44 <mixTable+0x204>)
 800ba0a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ba0e:	fb02 f303 	mul.w	r3, r2, r3
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba1a:	4a4c      	ldr	r2, [pc, #304]	; (800bb4c <mixTable+0x20c>)
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	4413      	add	r3, r2
 800ba22:	330c      	adds	r3, #12
 800ba24:	edd3 7a00 	vldr	s15, [r3]
 800ba28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba34:	ee17 3a90 	vmov	r3, s15
 800ba38:	b219      	sxth	r1, r3
 800ba3a:	4a46      	ldr	r2, [pc, #280]	; (800bb54 <mixTable+0x214>)
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800ba42:	4b45      	ldr	r3, [pc, #276]	; (800bb58 <mixTable+0x218>)
 800ba44:	7c1b      	ldrb	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d034      	beq.n	800bab4 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800ba4a:	4b41      	ldr	r3, [pc, #260]	; (800bb50 <mixTable+0x210>)
 800ba4c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d028      	beq.n	800baa6 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800ba54:	4b40      	ldr	r3, [pc, #256]	; (800bb58 <mixTable+0x218>)
 800ba56:	7a9b      	ldrb	r3, [r3, #10]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02b      	beq.n	800bab4 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800ba5c:	4b3a      	ldr	r3, [pc, #232]	; (800bb48 <mixTable+0x208>)
 800ba5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba6a:	4b37      	ldr	r3, [pc, #220]	; (800bb48 <mixTable+0x208>)
 800ba6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ba86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ba8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba96:	ee17 3a90 	vmov	r3, s15
 800ba9a:	b219      	sxth	r1, r3
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <mixTable+0x214>)
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800baa4:	e006      	b.n	800bab4 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800baa6:	4b28      	ldr	r3, [pc, #160]	; (800bb48 <mixTable+0x208>)
 800baa8:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800baac:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <mixTable+0x214>)
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60bb      	str	r3, [r7, #8]
 800baba:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <mixTable+0x200>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	f4ff af69 	bcc.w	800b99a <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800bac8:	4b24      	ldr	r3, [pc, #144]	; (800bb5c <mixTable+0x21c>)
 800baca:	795b      	ldrb	r3, [r3, #5]
 800bacc:	3b01      	subs	r3, #1
 800bace:	2b17      	cmp	r3, #23
 800bad0:	d87b      	bhi.n	800bbca <mixTable+0x28a>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <mixTable+0x198>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800bb39 	.word	0x0800bb39
 800badc:	0800bbcb 	.word	0x0800bbcb
 800bae0:	0800bbcb 	.word	0x0800bbcb
 800bae4:	0800bb39 	.word	0x0800bb39
 800bae8:	0800bb61 	.word	0x0800bb61
 800baec:	0800bbcb 	.word	0x0800bbcb
 800baf0:	0800bbcb 	.word	0x0800bbcb
 800baf4:	0800bb39 	.word	0x0800bb39
 800baf8:	0800bbcb 	.word	0x0800bbcb
 800bafc:	0800bbcb 	.word	0x0800bbcb
 800bb00:	0800bbcb 	.word	0x0800bbcb
 800bb04:	0800bbcb 	.word	0x0800bbcb
 800bb08:	0800bbcb 	.word	0x0800bbcb
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	0800bbcb 	.word	0x0800bbcb
 800bb14:	0800bbcb 	.word	0x0800bbcb
 800bb18:	0800bbcb 	.word	0x0800bbcb
 800bb1c:	0800bbcb 	.word	0x0800bbcb
 800bb20:	0800bbcb 	.word	0x0800bbcb
 800bb24:	0800bb39 	.word	0x0800bb39
 800bb28:	0800bb39 	.word	0x0800bb39
 800bb2c:	0800bbcb 	.word	0x0800bbcb
 800bb30:	0800bbcb 	.word	0x0800bbcb
 800bb34:	0800bb39 	.word	0x0800bb39
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bb38:	f7ff fcb4 	bl	800b4a4 <servoMixer>
            break;
 800bb3c:	e045      	b.n	800bbca <mixTable+0x28a>
 800bb3e:	bf00      	nop
 800bb40:	20001584 	.word	0x20001584
 800bb44:	200017dc 	.word	0x200017dc
 800bb48:	2000177c 	.word	0x2000177c
 800bb4c:	200015b8 	.word	0x200015b8
 800bb50:	20000db4 	.word	0x20000db4
 800bb54:	20001588 	.word	0x20001588
 800bb58:	20001720 	.word	0x20001720
 800bb5c:	20000848 	.word	0x20000848
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bb60:	4ba7      	ldr	r3, [pc, #668]	; (800be00 <mixTable+0x4c0>)
 800bb62:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb66:	461a      	mov	r2, r3
 800bb68:	4ba6      	ldr	r3, [pc, #664]	; (800be04 <mixTable+0x4c4>)
 800bb6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb6e:	fb02 f303 	mul.w	r3, r2, r3
 800bb72:	4aa5      	ldr	r2, [pc, #660]	; (800be08 <mixTable+0x4c8>)
 800bb74:	fb82 1203 	smull	r1, r2, r2, r3
 800bb78:	1112      	asrs	r2, r2, #4
 800bb7a:	17db      	asrs	r3, r3, #31
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	b29c      	uxth	r4, r3
 800bb80:	2000      	movs	r0, #0
 800bb82:	f7ff f881 	bl	800ac88 <servoMiddle>
 800bb86:	4603      	mov	r3, r0
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	4423      	add	r3, r4
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	b21a      	sxth	r2, r3
 800bb90:	4b9e      	ldr	r3, [pc, #632]	; (800be0c <mixTable+0x4cc>)
 800bb92:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bb94:	4b9a      	ldr	r3, [pc, #616]	; (800be00 <mixTable+0x4c0>)
 800bb96:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4b99      	ldr	r3, [pc, #612]	; (800be04 <mixTable+0x4c4>)
 800bb9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bba2:	fb02 f303 	mul.w	r3, r2, r3
 800bba6:	4a98      	ldr	r2, [pc, #608]	; (800be08 <mixTable+0x4c8>)
 800bba8:	fb82 1203 	smull	r1, r2, r2, r3
 800bbac:	1112      	asrs	r2, r2, #4
 800bbae:	17db      	asrs	r3, r3, #31
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	b29c      	uxth	r4, r3
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	f7ff f867 	bl	800ac88 <servoMiddle>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	4423      	add	r3, r4
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	b21a      	sxth	r2, r3
 800bbc4:	4b91      	ldr	r3, [pc, #580]	; (800be0c <mixTable+0x4cc>)
 800bbc6:	805a      	strh	r2, [r3, #2]
            break;
 800bbc8:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bbca:	2020      	movs	r0, #32
 800bbcc:	f7fb f9a2 	bl	8006f14 <feature>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 80a3 	beq.w	800bd1e <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f7ff f855 	bl	800ac88 <servoMiddle>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4b8a      	ldr	r3, [pc, #552]	; (800be0c <mixTable+0x4cc>)
 800bbe4:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	f7ff f84e 	bl	800ac88 <servoMiddle>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	4b86      	ldr	r3, [pc, #536]	; (800be0c <mixTable+0x4cc>)
 800bbf2:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bbf4:	4b86      	ldr	r3, [pc, #536]	; (800be10 <mixTable+0x4d0>)
 800bbf6:	7a1b      	ldrb	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8090 	beq.w	800bd1e <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bbfe:	4b80      	ldr	r3, [pc, #512]	; (800be00 <mixTable+0x4c0>)
 800bc00:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d056      	beq.n	800bcba <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc0c:	4b7f      	ldr	r3, [pc, #508]	; (800be0c <mixTable+0x4cc>)
 800bc0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	4b7a      	ldr	r3, [pc, #488]	; (800be00 <mixTable+0x4c0>)
 800bc16:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc1a:	425b      	negs	r3, r3
 800bc1c:	4979      	ldr	r1, [pc, #484]	; (800be04 <mixTable+0x4c4>)
 800bc1e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc22:	fb01 f303 	mul.w	r3, r1, r3
 800bc26:	4978      	ldr	r1, [pc, #480]	; (800be08 <mixTable+0x4c8>)
 800bc28:	fb81 0103 	smull	r0, r1, r1, r3
 800bc2c:	1109      	asrs	r1, r1, #4
 800bc2e:	17db      	asrs	r3, r3, #31
 800bc30:	1acb      	subs	r3, r1, r3
 800bc32:	b299      	uxth	r1, r3
 800bc34:	4b72      	ldr	r3, [pc, #456]	; (800be00 <mixTable+0x4c0>)
 800bc36:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	4b71      	ldr	r3, [pc, #452]	; (800be04 <mixTable+0x4c4>)
 800bc3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc42:	fb00 f303 	mul.w	r3, r0, r3
 800bc46:	4870      	ldr	r0, [pc, #448]	; (800be08 <mixTable+0x4c8>)
 800bc48:	fb80 4003 	smull	r4, r0, r0, r3
 800bc4c:	1100      	asrs	r0, r0, #4
 800bc4e:	17db      	asrs	r3, r3, #31
 800bc50:	1a1b      	subs	r3, r3, r0
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	440b      	add	r3, r1
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	b21a      	sxth	r2, r3
 800bc5e:	4b6b      	ldr	r3, [pc, #428]	; (800be0c <mixTable+0x4cc>)
 800bc60:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc62:	4b6a      	ldr	r3, [pc, #424]	; (800be0c <mixTable+0x4cc>)
 800bc64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	4b65      	ldr	r3, [pc, #404]	; (800be00 <mixTable+0x4c0>)
 800bc6c:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc70:	425b      	negs	r3, r3
 800bc72:	4964      	ldr	r1, [pc, #400]	; (800be04 <mixTable+0x4c4>)
 800bc74:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc78:	fb01 f303 	mul.w	r3, r1, r3
 800bc7c:	4962      	ldr	r1, [pc, #392]	; (800be08 <mixTable+0x4c8>)
 800bc7e:	fb81 0103 	smull	r0, r1, r1, r3
 800bc82:	1109      	asrs	r1, r1, #4
 800bc84:	17db      	asrs	r3, r3, #31
 800bc86:	1acb      	subs	r3, r1, r3
 800bc88:	b299      	uxth	r1, r3
 800bc8a:	4b5d      	ldr	r3, [pc, #372]	; (800be00 <mixTable+0x4c0>)
 800bc8c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc90:	4618      	mov	r0, r3
 800bc92:	4b5c      	ldr	r3, [pc, #368]	; (800be04 <mixTable+0x4c4>)
 800bc94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc98:	fb00 f303 	mul.w	r3, r0, r3
 800bc9c:	485a      	ldr	r0, [pc, #360]	; (800be08 <mixTable+0x4c8>)
 800bc9e:	fb80 4003 	smull	r4, r0, r0, r3
 800bca2:	1100      	asrs	r0, r0, #4
 800bca4:	17db      	asrs	r3, r3, #31
 800bca6:	1ac3      	subs	r3, r0, r3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	440b      	add	r3, r1
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	4413      	add	r3, r2
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	b21a      	sxth	r2, r3
 800bcb4:	4b55      	ldr	r3, [pc, #340]	; (800be0c <mixTable+0x4cc>)
 800bcb6:	805a      	strh	r2, [r3, #2]
 800bcb8:	e031      	b.n	800bd1e <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bcba:	4b54      	ldr	r3, [pc, #336]	; (800be0c <mixTable+0x4cc>)
 800bcbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	4b4f      	ldr	r3, [pc, #316]	; (800be00 <mixTable+0x4c0>)
 800bcc4:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4b4e      	ldr	r3, [pc, #312]	; (800be04 <mixTable+0x4c4>)
 800bccc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcd0:	fb01 f303 	mul.w	r3, r1, r3
 800bcd4:	494c      	ldr	r1, [pc, #304]	; (800be08 <mixTable+0x4c8>)
 800bcd6:	fb81 0103 	smull	r0, r1, r1, r3
 800bcda:	1109      	asrs	r1, r1, #4
 800bcdc:	17db      	asrs	r3, r3, #31
 800bcde:	1acb      	subs	r3, r1, r3
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	4b48      	ldr	r3, [pc, #288]	; (800be0c <mixTable+0x4cc>)
 800bcea:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bcec:	4b47      	ldr	r3, [pc, #284]	; (800be0c <mixTable+0x4cc>)
 800bcee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	4b42      	ldr	r3, [pc, #264]	; (800be00 <mixTable+0x4c0>)
 800bcf6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4b41      	ldr	r3, [pc, #260]	; (800be04 <mixTable+0x4c4>)
 800bcfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd02:	fb01 f303 	mul.w	r3, r1, r3
 800bd06:	4940      	ldr	r1, [pc, #256]	; (800be08 <mixTable+0x4c8>)
 800bd08:	fb81 0103 	smull	r0, r1, r1, r3
 800bd0c:	1109      	asrs	r1, r1, #4
 800bd0e:	17db      	asrs	r3, r3, #31
 800bd10:	1acb      	subs	r3, r1, r3
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	4413      	add	r3, r2
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	b21a      	sxth	r2, r3
 800bd1a:	4b3c      	ldr	r3, [pc, #240]	; (800be0c <mixTable+0x4cc>)
 800bd1c:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60bb      	str	r3, [r7, #8]
 800bd22:	e026      	b.n	800bd72 <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bd24:	4a39      	ldr	r2, [pc, #228]	; (800be0c <mixTable+0x4cc>)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	4934      	ldr	r1, [pc, #208]	; (800be00 <mixTable+0x4c0>)
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	440b      	add	r3, r1
 800bd3c:	33b8      	adds	r3, #184	; 0xb8
 800bd3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd42:	461c      	mov	r4, r3
 800bd44:	492e      	ldr	r1, [pc, #184]	; (800be00 <mixTable+0x4c0>)
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	440b      	add	r3, r1
 800bd52:	33ba      	adds	r3, #186	; 0xba
 800bd54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	f7f7 ff54 	bl	8003c08 <constrain>
 800bd60:	4603      	mov	r3, r0
 800bd62:	b219      	sxth	r1, r3
 800bd64:	4a29      	ldr	r2, [pc, #164]	; (800be0c <mixTable+0x4cc>)
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	60bb      	str	r3, [r7, #8]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b07      	cmp	r3, #7
 800bd76:	d9d5      	bls.n	800bd24 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd78:	4b21      	ldr	r3, [pc, #132]	; (800be00 <mixTable+0x4c0>)
 800bd7a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd7e:	f003 0304 	and.w	r3, r3, #4
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d01c      	beq.n	800bdc0 <mixTable+0x480>
        int offset = core.numServos - 4;
 800bd86:	4b23      	ldr	r3, [pc, #140]	; (800be14 <mixTable+0x4d4>)
 800bd88:	7d9b      	ldrb	r3, [r3, #22]
 800bd8a:	3b04      	subs	r3, #4
 800bd8c:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60bb      	str	r3, [r7, #8]
 800bd92:	e012      	b.n	800bdba <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	3304      	adds	r3, #4
 800bda4:	491c      	ldr	r1, [pc, #112]	; (800be18 <mixTable+0x4d8>)
 800bda6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4619      	mov	r1, r3
 800bdae:	4610      	mov	r0, r2
 800bdb0:	f7f6 f8e8 	bl	8001f84 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60bb      	str	r3, [r7, #8]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b03      	cmp	r3, #3
 800bdbe:	d9e9      	bls.n	800bd94 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bdc0:	4b16      	ldr	r3, [pc, #88]	; (800be1c <mixTable+0x4dc>)
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	60bb      	str	r3, [r7, #8]
 800bdca:	e00f      	b.n	800bdec <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bdcc:	4a13      	ldr	r2, [pc, #76]	; (800be1c <mixTable+0x4dc>)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	da04      	bge.n	800bde6 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bddc:	4a0f      	ldr	r2, [pc, #60]	; (800be1c <mixTable+0x4dc>)
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bde4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	3301      	adds	r3, #1
 800bdea:	60bb      	str	r3, [r7, #8]
 800bdec:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <mixTable+0x4e0>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d3e9      	bcc.n	800bdcc <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60bb      	str	r3, [r7, #8]
 800bdfc:	e0e8      	b.n	800bfd0 <mixTable+0x690>
 800bdfe:	bf00      	nop
 800be00:	20000db4 	.word	0x20000db4
 800be04:	200014c8 	.word	0x200014c8
 800be08:	51eb851f 	.word	0x51eb851f
 800be0c:	20000040 	.word	0x20000040
 800be10:	200017c0 	.word	0x200017c0
 800be14:	20000790 	.word	0x20000790
 800be18:	20001758 	.word	0x20001758
 800be1c:	20001588 	.word	0x20001588
 800be20:	20001584 	.word	0x20001584
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800be24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be28:	4a6f      	ldr	r2, [pc, #444]	; (800bfe8 <mixTable+0x6a8>)
 800be2a:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800be2e:	4293      	cmp	r3, r2
 800be30:	dd15      	ble.n	800be5e <mixTable+0x51e>
 800be32:	4b6e      	ldr	r3, [pc, #440]	; (800bfec <mixTable+0x6ac>)
 800be34:	7c1b      	ldrb	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d111      	bne.n	800be5e <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800be3a:	4a6d      	ldr	r2, [pc, #436]	; (800bff0 <mixTable+0x6b0>)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be42:	b29a      	uxth	r2, r3
 800be44:	4b68      	ldr	r3, [pc, #416]	; (800bfe8 <mixTable+0x6a8>)
 800be46:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800be4a:	89fb      	ldrh	r3, [r7, #14]
 800be4c:	1acb      	subs	r3, r1, r3
 800be4e:	b29b      	uxth	r3, r3
 800be50:	4413      	add	r3, r2
 800be52:	b29b      	uxth	r3, r3
 800be54:	b219      	sxth	r1, r3
 800be56:	4a66      	ldr	r2, [pc, #408]	; (800bff0 <mixTable+0x6b0>)
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800be5e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be62:	f7fb f857 	bl	8006f14 <feature>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d060      	beq.n	800bf2e <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be6c:	4b61      	ldr	r3, [pc, #388]	; (800bff4 <mixTable+0x6b4>)
 800be6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be72:	461a      	mov	r2, r3
 800be74:	4b5c      	ldr	r3, [pc, #368]	; (800bfe8 <mixTable+0x6a8>)
 800be76:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be7a:	429a      	cmp	r2, r3
 800be7c:	dd2b      	ble.n	800bed6 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be7e:	4a5c      	ldr	r2, [pc, #368]	; (800bff0 <mixTable+0x6b0>)
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be86:	4618      	mov	r0, r3
 800be88:	4b57      	ldr	r3, [pc, #348]	; (800bfe8 <mixTable+0x6a8>)
 800be8a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800be8e:	4619      	mov	r1, r3
 800be90:	4b55      	ldr	r3, [pc, #340]	; (800bfe8 <mixTable+0x6a8>)
 800be92:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be96:	461a      	mov	r2, r3
 800be98:	f7f7 feb6 	bl	8003c08 <constrain>
 800be9c:	4603      	mov	r3, r0
 800be9e:	b219      	sxth	r1, r3
 800bea0:	4a53      	ldr	r2, [pc, #332]	; (800bff0 <mixTable+0x6b0>)
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bea8:	4b4f      	ldr	r3, [pc, #316]	; (800bfe8 <mixTable+0x6a8>)
 800beaa:	795b      	ldrb	r3, [r3, #5]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d17d      	bne.n	800bfac <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800beb0:	4b51      	ldr	r3, [pc, #324]	; (800bff8 <mixTable+0x6b8>)
 800beb2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800beb6:	4618      	mov	r0, r3
 800beb8:	4b50      	ldr	r3, [pc, #320]	; (800bffc <mixTable+0x6bc>)
 800beba:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800bebe:	4619      	mov	r1, r3
 800bec0:	4b4e      	ldr	r3, [pc, #312]	; (800bffc <mixTable+0x6bc>)
 800bec2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bec6:	461a      	mov	r2, r3
 800bec8:	f7f7 fe9e 	bl	8003c08 <constrain>
 800becc:	4603      	mov	r3, r0
 800bece:	b21a      	sxth	r2, r3
 800bed0:	4b49      	ldr	r3, [pc, #292]	; (800bff8 <mixTable+0x6b8>)
 800bed2:	815a      	strh	r2, [r3, #10]
 800bed4:	e06a      	b.n	800bfac <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800bed6:	4a46      	ldr	r2, [pc, #280]	; (800bff0 <mixTable+0x6b0>)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bede:	4618      	mov	r0, r3
 800bee0:	4b41      	ldr	r3, [pc, #260]	; (800bfe8 <mixTable+0x6a8>)
 800bee2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bee6:	4619      	mov	r1, r3
 800bee8:	4b3f      	ldr	r3, [pc, #252]	; (800bfe8 <mixTable+0x6a8>)
 800beea:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f7 fe8a 	bl	8003c08 <constrain>
 800bef4:	4603      	mov	r3, r0
 800bef6:	b219      	sxth	r1, r3
 800bef8:	4a3d      	ldr	r2, [pc, #244]	; (800bff0 <mixTable+0x6b0>)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bf00:	4b39      	ldr	r3, [pc, #228]	; (800bfe8 <mixTable+0x6a8>)
 800bf02:	795b      	ldrb	r3, [r3, #5]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d151      	bne.n	800bfac <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bf08:	4b3b      	ldr	r3, [pc, #236]	; (800bff8 <mixTable+0x6b8>)
 800bf0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	4b3a      	ldr	r3, [pc, #232]	; (800bffc <mixTable+0x6bc>)
 800bf12:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bf16:	4619      	mov	r1, r3
 800bf18:	4b38      	ldr	r3, [pc, #224]	; (800bffc <mixTable+0x6bc>)
 800bf1a:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f7f7 fe72 	bl	8003c08 <constrain>
 800bf24:	4603      	mov	r3, r0
 800bf26:	b21a      	sxth	r2, r3
 800bf28:	4b33      	ldr	r3, [pc, #204]	; (800bff8 <mixTable+0x6b8>)
 800bf2a:	815a      	strh	r2, [r3, #10]
 800bf2c:	e03e      	b.n	800bfac <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800bf2e:	4a30      	ldr	r2, [pc, #192]	; (800bff0 <mixTable+0x6b0>)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf36:	4618      	mov	r0, r3
 800bf38:	4b2b      	ldr	r3, [pc, #172]	; (800bfe8 <mixTable+0x6a8>)
 800bf3a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4b29      	ldr	r3, [pc, #164]	; (800bfe8 <mixTable+0x6a8>)
 800bf42:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bf46:	461a      	mov	r2, r3
 800bf48:	f7f7 fe5e 	bl	8003c08 <constrain>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	b219      	sxth	r1, r3
 800bf50:	4a27      	ldr	r2, [pc, #156]	; (800bff0 <mixTable+0x6b0>)
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bf58:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <mixTable+0x6b4>)
 800bf5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	4b21      	ldr	r3, [pc, #132]	; (800bfe8 <mixTable+0x6a8>)
 800bf62:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf66:	429a      	cmp	r2, r3
 800bf68:	da1d      	bge.n	800bfa6 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf6a:	2010      	movs	r0, #16
 800bf6c:	f7fa ffd2 	bl	8006f14 <feature>
 800bf70:	4603      	mov	r3, r0
 800bf72:	f083 0301 	eor.w	r3, r3, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d008      	beq.n	800bf8e <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf7c:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <mixTable+0x6a8>)
 800bf7e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf82:	b219      	sxth	r1, r3
 800bf84:	4a1a      	ldr	r2, [pc, #104]	; (800bff0 <mixTable+0x6b0>)
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf8c:	e00e      	b.n	800bfac <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bf8e:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <mixTable+0x6a8>)
 800bf90:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf94:	b219      	sxth	r1, r3
 800bf96:	4a16      	ldr	r2, [pc, #88]	; (800bff0 <mixTable+0x6b0>)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <mixTable+0x6ac>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	745a      	strb	r2, [r3, #17]
 800bfa4:	e002      	b.n	800bfac <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bfa6:	4b11      	ldr	r3, [pc, #68]	; (800bfec <mixTable+0x6ac>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bfac:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <mixTable+0x6ac>)
 800bfae:	785b      	ldrb	r3, [r3, #1]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10a      	bne.n	800bfca <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bfb4:	4a12      	ldr	r2, [pc, #72]	; (800c000 <mixTable+0x6c0>)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bfbc:	4a0c      	ldr	r2, [pc, #48]	; (800bff0 <mixTable+0x6b0>)
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bfc4:	4b09      	ldr	r3, [pc, #36]	; (800bfec <mixTable+0x6ac>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	60bb      	str	r3, [r7, #8]
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <mixTable+0x6c4>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f4ff af23 	bcc.w	800be24 <mixTable+0x4e4>
        }
    }
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}
 800bfe8:	20000848 	.word	0x20000848
 800bfec:	20001720 	.word	0x20001720
 800bff0:	20001588 	.word	0x20001588
 800bff4:	20001758 	.word	0x20001758
 800bff8:	20000040 	.word	0x20000040
 800bffc:	20000db4 	.word	0x20000db4
 800c000:	200015a0 	.word	0x200015a0
 800c004:	20001584 	.word	0x20001584

0800c008 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	71fb      	strb	r3, [r7, #7]
 800c012:	460b      	mov	r3, r1
 800c014:	71bb      	strb	r3, [r7, #6]
 800c016:	4613      	mov	r3, r2
 800c018:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800c01a:	2300      	movs	r3, #0
 800c01c:	73bb      	strb	r3, [r7, #14]
 800c01e:	e020      	b.n	800c062 <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
 800c024:	e013      	b.n	800c04e <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c026:	f7f6 f83d 	bl	80020a4 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c02a:	2101      	movs	r1, #1
 800c02c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c030:	f7f6 f87a 	bl	8002128 <actBuzzerAction>
            pif_Delay1ms(wait);
 800c034:	79bb      	ldrb	r3, [r7, #6]
 800c036:	b29b      	uxth	r3, r3
 800c038:	4618      	mov	r0, r3
 800c03a:	f005 f9c1 	bl	80113c0 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c03e:	2100      	movs	r1, #0
 800c040:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c044:	f7f6 f870 	bl	8002128 <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	3301      	adds	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
 800c04e:	7bfa      	ldrb	r2, [r7, #15]
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	429a      	cmp	r2, r3
 800c054:	d3e7      	bcc.n	800c026 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c056:	203c      	movs	r0, #60	; 0x3c
 800c058:	f005 f9b2 	bl	80113c0 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	3301      	adds	r3, #1
 800c060:	73bb      	strb	r3, [r7, #14]
 800c062:	7bba      	ldrb	r2, [r7, #14]
 800c064:	797b      	ldrb	r3, [r7, #5]
 800c066:	429a      	cmp	r2, r3
 800c068:	d3da      	bcc.n	800c020 <blinkLED+0x18>
    }
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	0000      	movs	r0, r0
	...

0800c078 <annexCode>:

void annexCode(void)
{
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b08b      	sub	sp, #44	; 0x2c
 800c07c:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c07e:	4b98      	ldr	r3, [pc, #608]	; (800c2e0 <annexCode+0x268>)
 800c080:	7c1b      	ldrb	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d12e      	bne.n	800c0e4 <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c086:	4b97      	ldr	r3, [pc, #604]	; (800c2e4 <annexCode+0x26c>)
 800c088:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c08c:	461a      	mov	r2, r3
 800c08e:	4b96      	ldr	r3, [pc, #600]	; (800c2e8 <annexCode+0x270>)
 800c090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c092:	429a      	cmp	r2, r3
 800c094:	da02      	bge.n	800c09c <annexCode+0x24>
            prop2 = 100;
 800c096:	2364      	movs	r3, #100	; 0x64
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	e07b      	b.n	800c194 <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c09c:	4b91      	ldr	r3, [pc, #580]	; (800c2e4 <annexCode+0x26c>)
 800c09e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0a6:	da16      	bge.n	800c0d6 <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c0a8:	4b8f      	ldr	r3, [pc, #572]	; (800c2e8 <annexCode+0x270>)
 800c0aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b8c      	ldr	r3, [pc, #560]	; (800c2e4 <annexCode+0x26c>)
 800c0b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4b8b      	ldr	r3, [pc, #556]	; (800c2e8 <annexCode+0x270>)
 800c0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0bc:	1acb      	subs	r3, r1, r3
 800c0be:	fb03 f202 	mul.w	r2, r3, r2
 800c0c2:	4b89      	ldr	r3, [pc, #548]	; (800c2e8 <annexCode+0x270>)
 800c0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c6:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c0ca:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0ce:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e05e      	b.n	800c194 <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c0d6:	4b84      	ldr	r3, [pc, #528]	; (800c2e8 <annexCode+0x270>)
 800c0d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0dc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	e057      	b.n	800c194 <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c0e4:	2380      	movs	r3, #128	; 0x80
 800c0e6:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c0e8:	4b7e      	ldr	r3, [pc, #504]	; (800c2e4 <annexCode+0x26c>)
 800c0ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4b7d      	ldr	r3, [pc, #500]	; (800c2e8 <annexCode+0x270>)
 800c0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	da02      	bge.n	800c0fe <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c0f8:	2380      	movs	r3, #128	; 0x80
 800c0fa:	61bb      	str	r3, [r7, #24]
 800c0fc:	e028      	b.n	800c150 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c0fe:	4b7b      	ldr	r3, [pc, #492]	; (800c2ec <annexCode+0x274>)
 800c100:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c104:	461a      	mov	r2, r3
 800c106:	4b78      	ldr	r3, [pc, #480]	; (800c2e8 <annexCode+0x270>)
 800c108:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c10c:	429a      	cmp	r2, r3
 800c10e:	dd1f      	ble.n	800c150 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c110:	4b76      	ldr	r3, [pc, #472]	; (800c2ec <annexCode+0x274>)
 800c112:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c11a:	da12      	bge.n	800c142 <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c11c:	4b72      	ldr	r3, [pc, #456]	; (800c2e8 <annexCode+0x270>)
 800c11e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c122:	461a      	mov	r2, r3
 800c124:	4b71      	ldr	r3, [pc, #452]	; (800c2ec <annexCode+0x274>)
 800c126:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c12a:	4619      	mov	r1, r3
 800c12c:	4b6e      	ldr	r3, [pc, #440]	; (800c2e8 <annexCode+0x270>)
 800c12e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c132:	1acb      	subs	r3, r1, r3
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	125b      	asrs	r3, r3, #9
 800c13a:	69ba      	ldr	r2, [r7, #24]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	61bb      	str	r3, [r7, #24]
 800c140:	e006      	b.n	800c150 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c142:	4b69      	ldr	r3, [pc, #420]	; (800c2e8 <annexCode+0x270>)
 800c144:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c148:	461a      	mov	r2, r3
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	1a9b      	subs	r3, r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c150:	4b67      	ldr	r3, [pc, #412]	; (800c2f0 <annexCode+0x278>)
 800c152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c156:	2b14      	cmp	r3, #20
 800c158:	dd12      	ble.n	800c180 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c15a:	4b63      	ldr	r3, [pc, #396]	; (800c2e8 <annexCode+0x270>)
 800c15c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c160:	461a      	mov	r2, r3
 800c162:	4b64      	ldr	r3, [pc, #400]	; (800c2f4 <annexCode+0x27c>)
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	4619      	mov	r1, r3
 800c168:	4b61      	ldr	r3, [pc, #388]	; (800c2f0 <annexCode+0x278>)
 800c16a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c16e:	428b      	cmp	r3, r1
 800c170:	bfa8      	it	ge
 800c172:	460b      	movge	r3, r1
 800c174:	fb02 f303 	mul.w	r3, r2, r3
 800c178:	121b      	asrs	r3, r3, #8
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c180:	4b59      	ldr	r3, [pc, #356]	; (800c2e8 <annexCode+0x270>)
 800c182:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c186:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	bfb8      	it	lt
 800c190:	4613      	movlt	r3, r2
 800c192:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c194:	2300      	movs	r3, #0
 800c196:	623b      	str	r3, [r7, #32]
 800c198:	e131      	b.n	800c3fe <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c19a:	4a52      	ldr	r2, [pc, #328]	; (800c2e4 <annexCode+0x26c>)
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4b54      	ldr	r3, [pc, #336]	; (800c2f8 <annexCode+0x280>)
 800c1a6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c1b0:	dd18      	ble.n	800c1e4 <annexCode+0x16c>
 800c1b2:	4a4c      	ldr	r2, [pc, #304]	; (800c2e4 <annexCode+0x26c>)
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4b4e      	ldr	r3, [pc, #312]	; (800c2f8 <annexCode+0x280>)
 800c1be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c1c8:	da0c      	bge.n	800c1e4 <annexCode+0x16c>
 800c1ca:	4a46      	ldr	r2, [pc, #280]	; (800c2e4 <annexCode+0x26c>)
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	4b48      	ldr	r3, [pc, #288]	; (800c2f8 <annexCode+0x280>)
 800c1d6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	bfb8      	it	lt
 800c1e0:	425b      	neglt	r3, r3
 800c1e2:	e001      	b.n	800c1e8 <annexCode+0x170>
 800c1e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c1e8:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d063      	beq.n	800c2b8 <annexCode+0x240>
            if (cfg.deadband) {
 800c1f0:	4b3d      	ldr	r3, [pc, #244]	; (800c2e8 <annexCode+0x270>)
 800c1f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d010      	beq.n	800c21c <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c1fa:	4b3b      	ldr	r3, [pc, #236]	; (800c2e8 <annexCode+0x270>)
 800c1fc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c200:	461a      	mov	r2, r3
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	4293      	cmp	r3, r2
 800c206:	dd07      	ble.n	800c218 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c208:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <annexCode+0x270>)
 800c20a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c20e:	461a      	mov	r2, r3
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	1a9b      	subs	r3, r3, r2
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
 800c216:	e001      	b.n	800c21c <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	4a37      	ldr	r2, [pc, #220]	; (800c2fc <annexCode+0x284>)
 800c220:	fb82 1203 	smull	r1, r2, r2, r3
 800c224:	1152      	asrs	r2, r2, #5
 800c226:	17db      	asrs	r3, r3, #31
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c22c:	4a34      	ldr	r2, [pc, #208]	; (800c300 <annexCode+0x288>)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c234:	b29a      	uxth	r2, r3
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c23c:	fb03 f101 	mul.w	r1, r3, r1
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	440b      	add	r3, r1
 800c244:	6979      	ldr	r1, [r7, #20]
 800c246:	3101      	adds	r1, #1
 800c248:	482d      	ldr	r0, [pc, #180]	; (800c300 <annexCode+0x288>)
 800c24a:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c24e:	460c      	mov	r4, r1
 800c250:	482b      	ldr	r0, [pc, #172]	; (800c300 <annexCode+0x288>)
 800c252:	6979      	ldr	r1, [r7, #20]
 800c254:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c258:	1a61      	subs	r1, r4, r1
 800c25a:	fb01 f303 	mul.w	r3, r1, r3
 800c25e:	4927      	ldr	r1, [pc, #156]	; (800c2fc <annexCode+0x284>)
 800c260:	fb81 0103 	smull	r0, r1, r1, r3
 800c264:	1149      	asrs	r1, r1, #5
 800c266:	17db      	asrs	r3, r3, #31
 800c268:	1acb      	subs	r3, r1, r3
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	4413      	add	r3, r2
 800c26e:	b29b      	uxth	r3, r3
 800c270:	b219      	sxth	r1, r3
 800c272:	4a1e      	ldr	r2, [pc, #120]	; (800c2ec <annexCode+0x274>)
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c27a:	4a1b      	ldr	r2, [pc, #108]	; (800c2e8 <annexCode+0x270>)
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	4413      	add	r3, r2
 800c280:	3323      	adds	r3, #35	; 0x23
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	fb02 f303 	mul.w	r3, r2, r3
 800c28c:	4a1d      	ldr	r2, [pc, #116]	; (800c304 <annexCode+0x28c>)
 800c28e:	fb82 1203 	smull	r1, r2, r2, r3
 800c292:	1152      	asrs	r2, r2, #5
 800c294:	17db      	asrs	r3, r3, #31
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	3364      	adds	r3, #100	; 0x64
 800c29a:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	fb02 f303 	mul.w	r3, r2, r3
 800c2a8:	4a14      	ldr	r2, [pc, #80]	; (800c2fc <annexCode+0x284>)
 800c2aa:	fb82 1203 	smull	r1, r2, r2, r3
 800c2ae:	1152      	asrs	r2, r2, #5
 800c2b0:	17db      	asrs	r3, r3, #31
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	61fb      	str	r3, [r7, #28]
 800c2b6:	e04a      	b.n	800c34e <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c2b8:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <annexCode+0x270>)
 800c2ba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d024      	beq.n	800c30c <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c2c2:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <annexCode+0x270>)
 800c2c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	dd1b      	ble.n	800c308 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <annexCode+0x270>)
 800c2d2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	1a9b      	subs	r3, r3, r2
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c2de:	e015      	b.n	800c30c <annexCode+0x294>
 800c2e0:	20001720 	.word	0x20001720
 800c2e4:	20001758 	.word	0x20001758
 800c2e8:	20000db4 	.word	0x20000db4
 800c2ec:	2000177c 	.word	0x2000177c
 800c2f0:	200014c8 	.word	0x200014c8
 800c2f4:	20000056 	.word	0x20000056
 800c2f8:	20000848 	.word	0x20000848
 800c2fc:	51eb851f 	.word	0x51eb851f
 800c300:	20001784 	.word	0x20001784
 800c304:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c30c:	4ba0      	ldr	r3, [pc, #640]	; (800c590 <annexCode+0x518>)
 800c30e:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c312:	425b      	negs	r3, r3
 800c314:	b29a      	uxth	r2, r3
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	b29b      	uxth	r3, r3
 800c31a:	fb12 f303 	smulbb	r3, r2, r3
 800c31e:	b29b      	uxth	r3, r3
 800c320:	b219      	sxth	r1, r3
 800c322:	4a9c      	ldr	r2, [pc, #624]	; (800c594 <annexCode+0x51c>)
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c32a:	4b9b      	ldr	r3, [pc, #620]	; (800c598 <annexCode+0x520>)
 800c32c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c330:	461a      	mov	r2, r3
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	bfb8      	it	lt
 800c338:	425b      	neglt	r3, r3
 800c33a:	fb02 f303 	mul.w	r3, r2, r3
 800c33e:	4a97      	ldr	r2, [pc, #604]	; (800c59c <annexCode+0x524>)
 800c340:	fb82 1203 	smull	r1, r2, r2, r3
 800c344:	1152      	asrs	r2, r2, #5
 800c346:	17db      	asrs	r3, r3, #31
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	3364      	adds	r3, #100	; 0x64
 800c34c:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c34e:	4a92      	ldr	r2, [pc, #584]	; (800c598 <annexCode+0x520>)
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	4413      	add	r3, r2
 800c354:	3301      	adds	r3, #1
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	461a      	mov	r2, r3
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	fb02 f303 	mul.w	r3, r2, r3
 800c360:	4a8f      	ldr	r2, [pc, #572]	; (800c5a0 <annexCode+0x528>)
 800c362:	fb82 1203 	smull	r1, r2, r2, r3
 800c366:	1152      	asrs	r2, r2, #5
 800c368:	17db      	asrs	r3, r3, #31
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	b2d9      	uxtb	r1, r3
 800c36e:	4a8d      	ldr	r2, [pc, #564]	; (800c5a4 <annexCode+0x52c>)
 800c370:	6a3b      	ldr	r3, [r7, #32]
 800c372:	4413      	add	r3, r2
 800c374:	460a      	mov	r2, r1
 800c376:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c378:	4a87      	ldr	r2, [pc, #540]	; (800c598 <annexCode+0x520>)
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	4413      	add	r3, r2
 800c37e:	330b      	adds	r3, #11
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	fb02 f303 	mul.w	r3, r2, r3
 800c38a:	4a85      	ldr	r2, [pc, #532]	; (800c5a0 <annexCode+0x528>)
 800c38c:	fb82 1203 	smull	r1, r2, r2, r3
 800c390:	1152      	asrs	r2, r2, #5
 800c392:	17db      	asrs	r3, r3, #31
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	b2d9      	uxtb	r1, r3
 800c398:	4a83      	ldr	r2, [pc, #524]	; (800c5a8 <annexCode+0x530>)
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	4413      	add	r3, r2
 800c39e:	460a      	mov	r2, r1
 800c3a0:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c3a2:	4a7d      	ldr	r2, [pc, #500]	; (800c598 <annexCode+0x520>)
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3315      	adds	r3, #21
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	fb02 f303 	mul.w	r3, r2, r3
 800c3b4:	4a7a      	ldr	r2, [pc, #488]	; (800c5a0 <annexCode+0x528>)
 800c3b6:	fb82 1203 	smull	r1, r2, r2, r3
 800c3ba:	1152      	asrs	r2, r2, #5
 800c3bc:	17db      	asrs	r3, r3, #31
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	b2d9      	uxtb	r1, r3
 800c3c2:	4a7a      	ldr	r2, [pc, #488]	; (800c5ac <annexCode+0x534>)
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	460a      	mov	r2, r1
 800c3ca:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c3cc:	4a78      	ldr	r2, [pc, #480]	; (800c5b0 <annexCode+0x538>)
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4b6e      	ldr	r3, [pc, #440]	; (800c590 <annexCode+0x518>)
 800c3d8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	da0b      	bge.n	800c3f8 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c3e0:	4a6c      	ldr	r2, [pc, #432]	; (800c594 <annexCode+0x51c>)
 800c3e2:	6a3b      	ldr	r3, [r7, #32]
 800c3e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	425b      	negs	r3, r3
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	b219      	sxth	r1, r3
 800c3f0:	4a68      	ldr	r2, [pc, #416]	; (800c594 <annexCode+0x51c>)
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	623b      	str	r3, [r7, #32]
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	2b02      	cmp	r3, #2
 800c402:	f77f aeca 	ble.w	800c19a <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c406:	4b6a      	ldr	r3, [pc, #424]	; (800c5b0 <annexCode+0x538>)
 800c408:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c40c:	4618      	mov	r0, r3
 800c40e:	4b60      	ldr	r3, [pc, #384]	; (800c590 <annexCode+0x518>)
 800c410:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c418:	4619      	mov	r1, r3
 800c41a:	f7f7 fbf5 	bl	8003c08 <constrain>
 800c41e:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c420:	4b5b      	ldr	r3, [pc, #364]	; (800c590 <annexCode+0x518>)
 800c422:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c426:	461a      	mov	r2, r3
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	461a      	mov	r2, r3
 800c42e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c432:	fb02 f303 	mul.w	r3, r2, r3
 800c436:	4a56      	ldr	r2, [pc, #344]	; (800c590 <annexCode+0x518>)
 800c438:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c43c:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c440:	fbb3 f3f2 	udiv	r3, r3, r2
 800c444:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	4a55      	ldr	r2, [pc, #340]	; (800c5a0 <annexCode+0x528>)
 800c44a:	fb82 1203 	smull	r1, r2, r2, r3
 800c44e:	1152      	asrs	r2, r2, #5
 800c450:	17db      	asrs	r3, r3, #31
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c456:	4a57      	ldr	r2, [pc, #348]	; (800c5b4 <annexCode+0x53c>)
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c466:	fb03 f101 	mul.w	r1, r3, r1
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	440b      	add	r3, r1
 800c46e:	6979      	ldr	r1, [r7, #20]
 800c470:	3101      	adds	r1, #1
 800c472:	4850      	ldr	r0, [pc, #320]	; (800c5b4 <annexCode+0x53c>)
 800c474:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c478:	460c      	mov	r4, r1
 800c47a:	484e      	ldr	r0, [pc, #312]	; (800c5b4 <annexCode+0x53c>)
 800c47c:	6979      	ldr	r1, [r7, #20]
 800c47e:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c482:	1a61      	subs	r1, r4, r1
 800c484:	fb01 f303 	mul.w	r3, r1, r3
 800c488:	4945      	ldr	r1, [pc, #276]	; (800c5a0 <annexCode+0x528>)
 800c48a:	fb81 0103 	smull	r0, r1, r1, r3
 800c48e:	1149      	asrs	r1, r1, #5
 800c490:	17db      	asrs	r3, r3, #31
 800c492:	1acb      	subs	r3, r1, r3
 800c494:	b29b      	uxth	r3, r3
 800c496:	4413      	add	r3, r2
 800c498:	b29b      	uxth	r3, r3
 800c49a:	b21a      	sxth	r2, r3
 800c49c:	4b3d      	ldr	r3, [pc, #244]	; (800c594 <annexCode+0x51c>)
 800c49e:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c4a0:	4b45      	ldr	r3, [pc, #276]	; (800c5b8 <annexCode+0x540>)
 800c4a2:	7a5b      	ldrb	r3, [r3, #9]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d06b      	beq.n	800c580 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c4a8:	4b44      	ldr	r3, [pc, #272]	; (800c5bc <annexCode+0x544>)
 800c4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4b43      	ldr	r3, [pc, #268]	; (800c5c0 <annexCode+0x548>)
 800c4b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7f3 ffe7 	bl	800048c <__aeabi_i2d>
 800c4be:	a332      	add	r3, pc, #200	; (adr r3, 800c588 <annexCode+0x510>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f7f4 f84c 	bl	8000560 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	4b3b      	ldr	r3, [pc, #236]	; (800c5c4 <annexCode+0x54c>)
 800c4d6:	f7f4 f96d 	bl	80007b4 <__aeabi_ddiv>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4610      	mov	r0, r2
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f7f4 fb1f 	bl	8000b24 <__aeabi_d2f>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c4ea:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4ee:	f017 fa5b 	bl	80239a8 <cosf>
 800c4f2:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c4f6:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4fa:	f017 fad9 	bl	8023ab0 <sinf>
 800c4fe:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c502:	4b24      	ldr	r3, [pc, #144]	; (800c594 <annexCode+0x51c>)
 800c504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c508:	ee07 3a90 	vmov	s15, r3
 800c50c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c510:	edd7 7a03 	vldr	s15, [r7, #12]
 800c514:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c518:	4b1e      	ldr	r3, [pc, #120]	; (800c594 <annexCode+0x51c>)
 800c51a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c51e:	ee07 3a90 	vmov	s15, r3
 800c522:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c526:	edd7 7a02 	vldr	s15, [r7, #8]
 800c52a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c536:	ee17 3a90 	vmov	r3, s15
 800c53a:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c53c:	4b15      	ldr	r3, [pc, #84]	; (800c594 <annexCode+0x51c>)
 800c53e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c542:	ee07 3a90 	vmov	s15, r3
 800c546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c54a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c54e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <annexCode+0x51c>)
 800c554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c558:	ee07 3a90 	vmov	s15, r3
 800c55c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c560:	edd7 7a02 	vldr	s15, [r7, #8]
 800c564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c56c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c570:	ee17 3a90 	vmov	r3, s15
 800c574:	b21a      	sxth	r2, r3
 800c576:	4b07      	ldr	r3, [pc, #28]	; (800c594 <annexCode+0x51c>)
 800c578:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c57a:	4a06      	ldr	r2, [pc, #24]	; (800c594 <annexCode+0x51c>)
 800c57c:	88fb      	ldrh	r3, [r7, #6]
 800c57e:	8053      	strh	r3, [r2, #2]
    }
}
 800c580:	bf00      	nop
 800c582:	372c      	adds	r7, #44	; 0x2c
 800c584:	46bd      	mov	sp, r7
 800c586:	bd90      	pop	{r4, r7, pc}
 800c588:	54442d18 	.word	0x54442d18
 800c58c:	400921fb 	.word	0x400921fb
 800c590:	20000848 	.word	0x20000848
 800c594:	2000177c 	.word	0x2000177c
 800c598:	20000db4 	.word	0x20000db4
 800c59c:	10624dd3 	.word	0x10624dd3
 800c5a0:	51eb851f 	.word	0x51eb851f
 800c5a4:	200017b4 	.word	0x200017b4
 800c5a8:	200017b8 	.word	0x200017b8
 800c5ac:	200017bc 	.word	0x200017bc
 800c5b0:	20001758 	.word	0x20001758
 800c5b4:	20001794 	.word	0x20001794
 800c5b8:	20001720 	.word	0x20001720
 800c5bc:	20001a56 	.word	0x20001a56
 800c5c0:	20001742 	.word	0x20001742
 800c5c4:	40668000 	.word	0x40668000

0800c5c8 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c5c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c5d2:	2002      	movs	r0, #2
 800c5d4:	f7fa fc9e 	bl	8006f14 <feature>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 80bb 	beq.w	800c756 <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c5e0:	4b91      	ldr	r3, [pc, #580]	; (800c828 <taskLedState+0x260>)
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4b91      	ldr	r3, [pc, #580]	; (800c82c <taskLedState+0x264>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	4a8f      	ldr	r2, [pc, #572]	; (800c82c <taskLedState+0x264>)
 800c5ee:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c5f0:	4b8f      	ldr	r3, [pc, #572]	; (800c830 <taskLedState+0x268>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	4b8d      	ldr	r3, [pc, #564]	; (800c830 <taskLedState+0x268>)
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	4b8c      	ldr	r3, [pc, #560]	; (800c830 <taskLedState+0x268>)
 800c5fe:	781a      	ldrb	r2, [r3, #0]
 800c600:	4b8c      	ldr	r3, [pc, #560]	; (800c834 <taskLedState+0x26c>)
 800c602:	fba3 1302 	umull	r1, r3, r3, r2
 800c606:	0899      	lsrs	r1, r3, #2
 800c608:	460b      	mov	r3, r1
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	440b      	add	r3, r1
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	f040 808b 	bne.w	800c730 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c61a:	4b87      	ldr	r3, [pc, #540]	; (800c838 <taskLedState+0x270>)
 800c61c:	ed93 7a00 	vldr	s14, [r3]
 800c620:	4b85      	ldr	r3, [pc, #532]	; (800c838 <taskLedState+0x270>)
 800c622:	edd3 6a00 	vldr	s13, [r3]
 800c626:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c62a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c62e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c632:	4b81      	ldr	r3, [pc, #516]	; (800c838 <taskLedState+0x270>)
 800c634:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c638:	f7f4 fdc8 	bl	80011cc <actGetBatteryVoltage>
 800c63c:	eeb0 7a40 	vmov.f32	s14, s0
 800c640:	4b7e      	ldr	r3, [pc, #504]	; (800c83c <taskLedState+0x274>)
 800c642:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c64e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c652:	4b79      	ldr	r3, [pc, #484]	; (800c838 <taskLedState+0x270>)
 800c654:	edd3 7a00 	vldr	s15, [r3]
 800c658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c65c:	4b76      	ldr	r3, [pc, #472]	; (800c838 <taskLedState+0x270>)
 800c65e:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c662:	4b75      	ldr	r3, [pc, #468]	; (800c838 <taskLedState+0x270>)
 800c664:	ed93 7a00 	vldr	s14, [r3]
 800c668:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c66c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c674:	ee17 3a90 	vmov	r3, s15
 800c678:	b29a      	uxth	r2, r3
 800c67a:	4b71      	ldr	r3, [pc, #452]	; (800c840 <taskLedState+0x278>)
 800c67c:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c67e:	4b6f      	ldr	r3, [pc, #444]	; (800c83c <taskLedState+0x274>)
 800c680:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c684:	2b00      	cmp	r3, #0
 800c686:	d053      	beq.n	800c730 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c688:	4b6e      	ldr	r3, [pc, #440]	; (800c844 <taskLedState+0x27c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	da00      	bge.n	800c692 <taskLedState+0xca>
 800c690:	3307      	adds	r3, #7
 800c692:	10db      	asrs	r3, r3, #3
 800c694:	425b      	negs	r3, r3
 800c696:	461a      	mov	r2, r3
 800c698:	4b6a      	ldr	r3, [pc, #424]	; (800c844 <taskLedState+0x27c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4413      	add	r3, r2
 800c69e:	4a69      	ldr	r2, [pc, #420]	; (800c844 <taskLedState+0x27c>)
 800c6a0:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c6a2:	f7f4 fdb1 	bl	8001208 <actGetBatteryCurrent>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	4a64      	ldr	r2, [pc, #400]	; (800c83c <taskLedState+0x274>)
 800c6aa:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c6ae:	1a9b      	subs	r3, r3, r2
 800c6b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6b4:	fb02 f303 	mul.w	r3, r2, r3
 800c6b8:	4a60      	ldr	r2, [pc, #384]	; (800c83c <taskLedState+0x274>)
 800c6ba:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c6be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6c2:	4a60      	ldr	r2, [pc, #384]	; (800c844 <taskLedState+0x27c>)
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4b5e      	ldr	r3, [pc, #376]	; (800c844 <taskLedState+0x27c>)
 800c6cc:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c6ce:	4b5d      	ldr	r3, [pc, #372]	; (800c844 <taskLedState+0x27c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	da00      	bge.n	800c6d8 <taskLedState+0x110>
 800c6d6:	3307      	adds	r3, #7
 800c6d8:	10db      	asrs	r3, r3, #3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4b5a      	ldr	r3, [pc, #360]	; (800c848 <taskLedState+0x280>)
 800c6de:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c6e0:	4b59      	ldr	r3, [pc, #356]	; (800c848 <taskLedState+0x280>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a51      	ldr	r2, [pc, #324]	; (800c82c <taskLedState+0x264>)
 800c6e6:	6812      	ldr	r2, [r2, #0]
 800c6e8:	fb02 f303 	mul.w	r3, r2, r3
 800c6ec:	4a57      	ldr	r2, [pc, #348]	; (800c84c <taskLedState+0x284>)
 800c6ee:	fb82 1203 	smull	r1, r2, r2, r3
 800c6f2:	1192      	asrs	r2, r2, #6
 800c6f4:	17db      	asrs	r3, r3, #31
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	17da      	asrs	r2, r3, #31
 800c6fa:	461c      	mov	r4, r3
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	4b54      	ldr	r3, [pc, #336]	; (800c850 <taskLedState+0x288>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	eb14 0802 	adds.w	r8, r4, r2
 800c708:	eb45 0903 	adc.w	r9, r5, r3
 800c70c:	4b50      	ldr	r3, [pc, #320]	; (800c850 <taskLedState+0x288>)
 800c70e:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c712:	4b4f      	ldr	r3, [pc, #316]	; (800c850 <taskLedState+0x288>)
 800c714:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c718:	4a4e      	ldr	r2, [pc, #312]	; (800c854 <taskLedState+0x28c>)
 800c71a:	f04f 0300 	mov.w	r3, #0
 800c71e:	f7f4 fb5f 	bl	8000de0 <__aeabi_ldivmod>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4b4c      	ldr	r3, [pc, #304]	; (800c858 <taskLedState+0x290>)
 800c728:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c72a:	4b40      	ldr	r3, [pc, #256]	; (800c82c <taskLedState+0x264>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c730:	4b43      	ldr	r3, [pc, #268]	; (800c840 <taskLedState+0x278>)
 800c732:	881a      	ldrh	r2, [r3, #0]
 800c734:	4b49      	ldr	r3, [pc, #292]	; (800c85c <taskLedState+0x294>)
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d803      	bhi.n	800c744 <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c73c:	2001      	movs	r0, #1
 800c73e:	f7f7 fbf3 	bl	8003f28 <buzzer>
 800c742:	e008      	b.n	800c756 <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c744:	4b3e      	ldr	r3, [pc, #248]	; (800c840 <taskLedState+0x278>)
 800c746:	881a      	ldrh	r2, [r3, #0]
 800c748:	4b45      	ldr	r3, [pc, #276]	; (800c860 <taskLedState+0x298>)
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d802      	bhi.n	800c756 <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c750:	2002      	movs	r0, #2
 800c752:	f7f7 fbe9 	bl	8003f28 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c756:	f7f7 fcd3 	bl	8004100 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c75a:	f004 fbd7 	bl	8010f0c <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c75e:	4b41      	ldr	r3, [pc, #260]	; (800c864 <taskLedState+0x29c>)
 800c760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800c768:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <taskLedState+0x29c>)
 800c76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c76e:	493e      	ldr	r1, [pc, #248]	; (800c868 <taskLedState+0x2a0>)
 800c770:	483c      	ldr	r0, [pc, #240]	; (800c864 <taskLedState+0x29c>)
 800c772:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c774:	4b3d      	ldr	r3, [pc, #244]	; (800c86c <taskLedState+0x2a4>)
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <taskLedState+0x1c0>
 800c77c:	2002      	movs	r0, #2
 800c77e:	f7fa fb81 	bl	8006e84 <sensors>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d103      	bne.n	800c790 <taskLedState+0x1c8>
 800c788:	4b39      	ldr	r3, [pc, #228]	; (800c870 <taskLedState+0x2a8>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <taskLedState+0x1ce>
        actLed0Toggle();
 800c790:	f7f5 fc88 	bl	80020a4 <actLed0Toggle>
 800c794:	e00d      	b.n	800c7b2 <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800c796:	4b37      	ldr	r3, [pc, #220]	; (800c874 <taskLedState+0x2ac>)
 800c798:	789b      	ldrb	r3, [r3, #2]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d002      	beq.n	800c7a4 <taskLedState+0x1dc>
            actLed0State(OFF);
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f7f5 fc6a 	bl	8002078 <actLed0State>
        if (f.ARMED)
 800c7a4:	4b33      	ldr	r3, [pc, #204]	; (800c874 <taskLedState+0x2ac>)
 800c7a6:	785b      	ldrb	r3, [r3, #1]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <taskLedState+0x1ea>
            actLed0State(ON);
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	f7f5 fc63 	bl	8002078 <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c7b2:	4b31      	ldr	r3, [pc, #196]	; (800c878 <taskLedState+0x2b0>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <taskLedState+0x200>
 800c7ba:	4b2f      	ldr	r3, [pc, #188]	; (800c878 <taskLedState+0x2b0>)
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <taskLedState+0x2b0>)
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e00f      	b.n	800c7e8 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800c7c8:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <taskLedState+0x2ac>)
 800c7ca:	7b5b      	ldrb	r3, [r3, #13]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d105      	bne.n	800c7dc <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c7d0:	4b28      	ldr	r3, [pc, #160]	; (800c874 <taskLedState+0x2ac>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c7d6:	f7f5 fc65 	bl	80020a4 <actLed0Toggle>
 800c7da:	e002      	b.n	800c7e2 <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <taskLedState+0x2ac>)
 800c7de:	2201      	movs	r2, #1
 800c7e0:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c7e2:	4b25      	ldr	r3, [pc, #148]	; (800c878 <taskLedState+0x2b0>)
 800c7e4:	2209      	movs	r2, #9
 800c7e6:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c7e8:	2020      	movs	r0, #32
 800c7ea:	f7fa fb4b 	bl	8006e84 <sensors>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d013      	beq.n	800c81c <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c7f4:	4b21      	ldr	r3, [pc, #132]	; (800c87c <taskLedState+0x2b4>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d006      	beq.n	800c80a <taskLedState+0x242>
 800c7fc:	4b1f      	ldr	r3, [pc, #124]	; (800c87c <taskLedState+0x2b4>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	3b01      	subs	r3, #1
 800c802:	b2da      	uxtb	r2, r3
 800c804:	4b1d      	ldr	r3, [pc, #116]	; (800c87c <taskLedState+0x2b4>)
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	e008      	b.n	800c81c <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c80a:	4b1d      	ldr	r3, [pc, #116]	; (800c880 <taskLedState+0x2b8>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d901      	bls.n	800c816 <taskLedState+0x24e>
 800c812:	f7f5 fc73 	bl	80020fc <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c816:	4b19      	ldr	r3, [pc, #100]	; (800c87c <taskLedState+0x2b4>)
 800c818:	2202      	movs	r2, #2
 800c81a:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c828:	20001740 	.word	0x20001740
 800c82c:	200018e4 	.word	0x200018e4
 800c830:	200018e8 	.word	0x200018e8
 800c834:	aaaaaaab 	.word	0xaaaaaaab
 800c838:	200018ec 	.word	0x200018ec
 800c83c:	20000848 	.word	0x20000848
 800c840:	20001744 	.word	0x20001744
 800c844:	200018f0 	.word	0x200018f0
 800c848:	20001748 	.word	0x20001748
 800c84c:	10624dd3 	.word	0x10624dd3
 800c850:	200018f8 	.word	0x200018f8
 800c854:	00057e40 	.word	0x00057e40
 800c858:	2000174c 	.word	0x2000174c
 800c85c:	200018c4 	.word	0x200018c4
 800c860:	200018c2 	.word	0x200018c2
 800c864:	20000060 	.word	0x20000060
 800c868:	20001750 	.word	0x20001750
 800c86c:	20001a50 	.word	0x20001a50
 800c870:	20001a54 	.word	0x20001a54
 800c874:	20001720 	.word	0x20001720
 800c878:	20001900 	.word	0x20001900
 800c87c:	20001901 	.word	0x20001901
 800c880:	20001804 	.word	0x20001804

0800c884 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	4a05      	ldr	r2, [pc, #20]	; (800c8a8 <pwmReadRawRC+0x24>)
 800c892:	4413      	add	r3, r2
 800c894:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f5 fb81 	bl	8001fa0 <actPwmRead>
 800c89e:	4603      	mov	r3, r0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000848 	.word	0x20000848

0800c8ac <computeRC>:

void computeRC(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c8b2:	2008      	movs	r0, #8
 800c8b4:	f7fa fb2e 	bl	8006f14 <feature>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d019      	beq.n	800c8f2 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8be:	2300      	movs	r3, #0
 800c8c0:	607b      	str	r3, [r7, #4]
 800c8c2:	e00e      	b.n	800c8e2 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c8c4:	4b41      	ldr	r3, [pc, #260]	; (800c9cc <computeRC+0x120>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	b2d2      	uxtb	r2, r2
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4798      	blx	r3
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	b219      	sxth	r1, r3
 800c8d4:	4a3e      	ldr	r2, [pc, #248]	; (800c9d0 <computeRC+0x124>)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	4b3c      	ldr	r3, [pc, #240]	; (800c9d4 <computeRC+0x128>)
 800c8e4:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	dbe9      	blt.n	800c8c4 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c8f0:	e068      	b.n	800c9c4 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	e059      	b.n	800c9ac <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c8f8:	4b34      	ldr	r3, [pc, #208]	; (800c9cc <computeRC+0x120>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	4610      	mov	r0, r2
 800c902:	4798      	blx	r3
 800c904:	4603      	mov	r3, r0
 800c906:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c908:	89fb      	ldrh	r3, [r7, #14]
 800c90a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c90e:	4293      	cmp	r3, r2
 800c910:	d904      	bls.n	800c91c <computeRC+0x70>
 800c912:	89fb      	ldrh	r3, [r7, #14]
 800c914:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c918:	4293      	cmp	r3, r2
 800c91a:	d903      	bls.n	800c924 <computeRC+0x78>
                capture = mcfg.midrc;
 800c91c:	4b2d      	ldr	r3, [pc, #180]	; (800c9d4 <computeRC+0x128>)
 800c91e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c922:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c924:	4b2c      	ldr	r3, [pc, #176]	; (800c9d8 <computeRC+0x12c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	425a      	negs	r2, r3
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	f002 0203 	and.w	r2, r2, #3
 800c932:	bf58      	it	pl
 800c934:	4253      	negpl	r3, r2
 800c936:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c93a:	4928      	ldr	r1, [pc, #160]	; (800c9dc <computeRC+0x130>)
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	0092      	lsls	r2, r2, #2
 800c940:	4413      	add	r3, r2
 800c942:	4602      	mov	r2, r0
 800c944:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c948:	4a21      	ldr	r2, [pc, #132]	; (800c9d0 <computeRC+0x124>)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2100      	movs	r1, #0
 800c94e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c952:	2300      	movs	r3, #0
 800c954:	60bb      	str	r3, [r7, #8]
 800c956:	e016      	b.n	800c986 <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c958:	4a1d      	ldr	r2, [pc, #116]	; (800c9d0 <computeRC+0x124>)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c960:	b29a      	uxth	r2, r3
 800c962:	481e      	ldr	r0, [pc, #120]	; (800c9dc <computeRC+0x130>)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0099      	lsls	r1, r3, #2
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	440b      	add	r3, r1
 800c96c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c970:	b29b      	uxth	r3, r3
 800c972:	4413      	add	r3, r2
 800c974:	b29b      	uxth	r3, r3
 800c976:	b219      	sxth	r1, r3
 800c978:	4a15      	ldr	r2, [pc, #84]	; (800c9d0 <computeRC+0x124>)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	3301      	adds	r3, #1
 800c984:	60bb      	str	r3, [r7, #8]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b03      	cmp	r3, #3
 800c98a:	dde5      	ble.n	800c958 <computeRC+0xac>
            rcData[chan] /= 4;
 800c98c:	4a10      	ldr	r2, [pc, #64]	; (800c9d0 <computeRC+0x124>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da00      	bge.n	800c99a <computeRC+0xee>
 800c998:	3303      	adds	r3, #3
 800c99a:	109b      	asrs	r3, r3, #2
 800c99c:	b219      	sxth	r1, r3
 800c99e:	4a0c      	ldr	r2, [pc, #48]	; (800c9d0 <computeRC+0x124>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	607b      	str	r3, [r7, #4]
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <computeRC+0x128>)
 800c9ae:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	db9e      	blt.n	800c8f8 <computeRC+0x4c>
        rcAverageIndex++;
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <computeRC+0x12c>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	4a05      	ldr	r2, [pc, #20]	; (800c9d8 <computeRC+0x12c>)
 800c9c2:	6013      	str	r3, [r2, #0]
}
 800c9c4:	bf00      	nop
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	200017b0 	.word	0x200017b0
 800c9d0:	20001758 	.word	0x20001758
 800c9d4:	20000848 	.word	0x20000848
 800c9d8:	20001904 	.word	0x20001904
 800c9dc:	20001908 	.word	0x20001908

0800c9e0 <mwArm>:

static void mwArm(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c9e4:	4b1b      	ldr	r3, [pc, #108]	; (800ca54 <mwArm+0x74>)
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d126      	bne.n	800ca3a <mwArm+0x5a>
 800c9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ca58 <mwArm+0x78>)
 800c9ee:	789b      	ldrb	r3, [r3, #2]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d022      	beq.n	800ca3a <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c9f4:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <mwArm+0x78>)
 800c9f6:	785b      	ldrb	r3, [r3, #1]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d128      	bne.n	800ca4e <mwArm+0x6e>
            f.ARMED = 1;
 800c9fc:	4b16      	ldr	r3, [pc, #88]	; (800ca58 <mwArm+0x78>)
 800c9fe:	2201      	movs	r2, #1
 800ca00:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800ca02:	4b16      	ldr	r3, [pc, #88]	; (800ca5c <mwArm+0x7c>)
 800ca04:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca08:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <mwArm+0x80>)
 800ca0a:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800ca0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ca10:	f7fa fa80 	bl	8006f14 <feature>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00b      	beq.n	800ca32 <mwArm+0x52>
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <mwArm+0x78>)
 800ca1c:	7adb      	ldrb	r3, [r3, #11]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d007      	beq.n	800ca32 <mwArm+0x52>
 800ca22:	4b10      	ldr	r3, [pc, #64]	; (800ca64 <mwArm+0x84>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d903      	bls.n	800ca32 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800ca2a:	2007      	movs	r0, #7
 800ca2c:	f7f7 fa7c 	bl	8003f28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca30:	e00d      	b.n	800ca4e <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800ca32:	2006      	movs	r0, #6
 800ca34:	f7f7 fa78 	bl	8003f28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca38:	e009      	b.n	800ca4e <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ca3a:	4b07      	ldr	r3, [pc, #28]	; (800ca58 <mwArm+0x78>)
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ca42:	2201      	movs	r2, #1
 800ca44:	21ff      	movs	r1, #255	; 0xff
 800ca46:	2002      	movs	r0, #2
 800ca48:	f7ff fade 	bl	800c008 <blinkLED>
    }
}
 800ca4c:	e7ff      	b.n	800ca4e <mwArm+0x6e>
 800ca4e:	bf00      	nop
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20001a54 	.word	0x20001a54
 800ca58:	20001720 	.word	0x20001720
 800ca5c:	20001a56 	.word	0x20001a56
 800ca60:	20001742 	.word	0x20001742
 800ca64:	20001804 	.word	0x20001804

0800ca68 <mwDisarm>:

static void mwDisarm(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <mwDisarm+0x2c>)
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00c      	beq.n	800ca8e <mwDisarm+0x26>
        f.ARMED = 0;
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <mwDisarm+0x2c>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca7a:	2005      	movs	r0, #5
 800ca7c:	f7f7 fa54 	bl	8003f28 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <mwDisarm+0x30>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <mwDisarm+0x26>
            disarmTime = 0;
 800ca88:	4b03      	ldr	r3, [pc, #12]	; (800ca98 <mwDisarm+0x30>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]
    }
}
 800ca8e:	bf00      	nop
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20001720 	.word	0x20001720
 800ca98:	200018c8 	.word	0x200018c8

0800ca9c <mwVario>:

static void mwVario(void)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0

}
 800caa0:	bf00      	nop
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
	...

0800caac <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b08e      	sub	sp, #56	; 0x38
 800cab0:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800cab2:	2300      	movs	r3, #0
 800cab4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cab6:	2300      	movs	r3, #0
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
 800caba:	2300      	movs	r3, #0
 800cabc:	623b      	str	r3, [r7, #32]
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800cac2:	4b91      	ldr	r3, [pc, #580]	; (800cd08 <pidMultiWii+0x25c>)
 800cac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	bfb8      	it	lt
 800cacc:	425b      	neglt	r3, r3
 800cace:	b29a      	uxth	r2, r3
 800cad0:	4b8d      	ldr	r3, [pc, #564]	; (800cd08 <pidMultiWii+0x25c>)
 800cad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	bfb8      	it	lt
 800cada:	425b      	neglt	r3, r3
 800cadc:	b29b      	uxth	r3, r3
 800cade:	4293      	cmp	r3, r2
 800cae0:	bf38      	it	cc
 800cae2:	4613      	movcc	r3, r2
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cae8:	2300      	movs	r3, #0
 800caea:	637b      	str	r3, [r7, #52]	; 0x34
 800caec:	e189      	b.n	800ce02 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800caee:	4b87      	ldr	r3, [pc, #540]	; (800cd0c <pidMultiWii+0x260>)
 800caf0:	78db      	ldrb	r3, [r3, #3]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d103      	bne.n	800cafe <pidMultiWii+0x52>
 800caf6:	4b85      	ldr	r3, [pc, #532]	; (800cd0c <pidMultiWii+0x260>)
 800caf8:	791b      	ldrb	r3, [r3, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d060      	beq.n	800cbc0 <pidMultiWii+0x114>
 800cafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	dc5d      	bgt.n	800cbc0 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cb04:	4a80      	ldr	r2, [pc, #512]	; (800cd08 <pidMultiWii+0x25c>)
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4980      	ldr	r1, [pc, #512]	; (800cd10 <pidMultiWii+0x264>)
 800cb10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb12:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cb16:	4413      	add	r3, r2
 800cb18:	4a7e      	ldr	r2, [pc, #504]	; (800cd14 <pidMultiWii+0x268>)
 800cb1a:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cb1e:	4251      	negs	r1, r2
 800cb20:	4a7c      	ldr	r2, [pc, #496]	; (800cd14 <pidMultiWii+0x268>)
 800cb22:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f7 f86e 	bl	8003c08 <constrain>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	497a      	ldr	r1, [pc, #488]	; (800cd18 <pidMultiWii+0x26c>)
 800cb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb32:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	4978      	ldr	r1, [pc, #480]	; (800cd1c <pidMultiWii+0x270>)
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	3314      	adds	r3, #20
 800cb3e:	005b      	lsls	r3, r3, #1
 800cb40:	440b      	add	r3, r1
 800cb42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cb4a:	4b74      	ldr	r3, [pc, #464]	; (800cd1c <pidMultiWii+0x270>)
 800cb4c:	7a1b      	ldrb	r3, [r3, #8]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	fb02 f303 	mul.w	r3, r2, r3
 800cb56:	4a72      	ldr	r2, [pc, #456]	; (800cd20 <pidMultiWii+0x274>)
 800cb58:	fb82 1203 	smull	r1, r2, r2, r3
 800cb5c:	1152      	asrs	r2, r2, #5
 800cb5e:	17db      	asrs	r3, r3, #31
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cb64:	4b6d      	ldr	r3, [pc, #436]	; (800cd1c <pidMultiWii+0x270>)
 800cb66:	7f1b      	ldrb	r3, [r3, #28]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	079b      	lsls	r3, r3, #30
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	1a99      	subs	r1, r3, r2
 800cb74:	4b69      	ldr	r3, [pc, #420]	; (800cd1c <pidMultiWii+0x270>)
 800cb76:	7f1b      	ldrb	r3, [r3, #28]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	461a      	mov	r2, r3
 800cb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb84:	f7f7 f840 	bl	8003c08 <constrain>
 800cb88:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cb8a:	4a66      	ldr	r2, [pc, #408]	; (800cd24 <pidMultiWii+0x278>)
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4413      	add	r3, r2
 800cb96:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb9a:	4963      	ldr	r1, [pc, #396]	; (800cd28 <pidMultiWii+0x27c>)
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f7 f833 	bl	8003c08 <constrain>
 800cba2:	4602      	mov	r2, r0
 800cba4:	495f      	ldr	r1, [pc, #380]	; (800cd24 <pidMultiWii+0x278>)
 800cba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cbac:	4a5d      	ldr	r2, [pc, #372]	; (800cd24 <pidMultiWii+0x278>)
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb4:	4a59      	ldr	r2, [pc, #356]	; (800cd1c <pidMultiWii+0x270>)
 800cbb6:	7c92      	ldrb	r2, [r2, #18]
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
 800cbbc:	131b      	asrs	r3, r3, #12
 800cbbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cbc0:	4b52      	ldr	r3, [pc, #328]	; (800cd0c <pidMultiWii+0x260>)
 800cbc2:	78db      	ldrb	r3, [r3, #3]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <pidMultiWii+0x12a>
 800cbc8:	4b50      	ldr	r3, [pc, #320]	; (800cd0c <pidMultiWii+0x260>)
 800cbca:	791b      	ldrb	r3, [r3, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <pidMultiWii+0x12a>
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d15f      	bne.n	800cc96 <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cbd6:	4a4c      	ldr	r2, [pc, #304]	; (800cd08 <pidMultiWii+0x25c>)
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4a4c      	ldr	r2, [pc, #304]	; (800cd1c <pidMultiWii+0x270>)
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	4413      	add	r3, r2
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	fb91 f3f3 	sdiv	r3, r1, r3
 800cbf8:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cbfa:	4a4c      	ldr	r2, [pc, #304]	; (800cd2c <pidMultiWii+0x280>)
 800cbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc02:	461a      	mov	r2, r3
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	1a9b      	subs	r3, r3, r2
 800cc08:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cc0a:	4a3f      	ldr	r2, [pc, #252]	; (800cd08 <pidMultiWii+0x25c>)
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc12:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cc14:	4a46      	ldr	r2, [pc, #280]	; (800cd30 <pidMultiWii+0x284>)
 800cc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cc24:	4943      	ldr	r1, [pc, #268]	; (800cd34 <pidMultiWii+0x288>)
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f6 ffee 	bl	8003c08 <constrain>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	4940      	ldr	r1, [pc, #256]	; (800cd30 <pidMultiWii+0x284>)
 800cc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cc36:	4a3d      	ldr	r2, [pc, #244]	; (800cd2c <pidMultiWii+0x280>)
 800cc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bfb8      	it	lt
 800cc42:	425b      	neglt	r3, r3
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc4a:	d80c      	bhi.n	800cc66 <pidMultiWii+0x1ba>
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d10e      	bne.n	800cc70 <pidMultiWii+0x1c4>
 800cc52:	4a2d      	ldr	r2, [pc, #180]	; (800cd08 <pidMultiWii+0x25c>)
 800cc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfb8      	it	lt
 800cc5e:	425b      	neglt	r3, r3
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	2b64      	cmp	r3, #100	; 0x64
 800cc64:	d904      	bls.n	800cc70 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cc66:	4a32      	ldr	r2, [pc, #200]	; (800cd30 <pidMultiWii+0x284>)
 800cc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc70:	4a2f      	ldr	r2, [pc, #188]	; (800cd30 <pidMultiWii+0x284>)
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc78:	4a2f      	ldr	r2, [pc, #188]	; (800cd38 <pidMultiWii+0x28c>)
 800cc7a:	fb82 1203 	smull	r1, r2, r2, r3
 800cc7e:	10d2      	asrs	r2, r2, #3
 800cc80:	17db      	asrs	r3, r3, #31
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	4925      	ldr	r1, [pc, #148]	; (800cd1c <pidMultiWii+0x270>)
 800cc86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc88:	440a      	add	r2, r1
 800cc8a:	320b      	adds	r2, #11
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	119b      	asrs	r3, r3, #6
 800cc94:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <pidMultiWii+0x260>)
 800cc98:	791b      	ldrb	r3, [r3, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d027      	beq.n	800ccee <pidMultiWii+0x242>
 800cc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	dc24      	bgt.n	800ccee <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800ccaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccac:	fb03 f202 	mul.w	r2, r3, r2
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	69b9      	ldr	r1, [r7, #24]
 800ccb4:	fb01 f303 	mul.w	r3, r1, r3
 800ccb8:	4413      	add	r3, r2
 800ccba:	4a1f      	ldr	r2, [pc, #124]	; (800cd38 <pidMultiWii+0x28c>)
 800ccbc:	fb82 1203 	smull	r1, r2, r2, r3
 800ccc0:	1152      	asrs	r2, r2, #5
 800ccc2:	17db      	asrs	r3, r3, #31
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800ccce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd0:	fb03 f202 	mul.w	r2, r3, r2
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	69b9      	ldr	r1, [r7, #24]
 800ccd8:	fb01 f303 	mul.w	r3, r1, r3
 800ccdc:	4413      	add	r3, r2
 800ccde:	4a16      	ldr	r2, [pc, #88]	; (800cd38 <pidMultiWii+0x28c>)
 800cce0:	fb82 1203 	smull	r1, r2, r2, r3
 800cce4:	1152      	asrs	r2, r2, #5
 800cce6:	17db      	asrs	r3, r3, #31
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccec:	e02a      	b.n	800cd44 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800ccee:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <pidMultiWii+0x260>)
 800ccf0:	78db      	ldrb	r3, [r3, #3]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d022      	beq.n	800cd3c <pidMultiWii+0x290>
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	dc1f      	bgt.n	800cd3c <pidMultiWii+0x290>
                PTerm = PTermACC;
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd04:	e01e      	b.n	800cd44 <pidMultiWii+0x298>
 800cd06:	bf00      	nop
 800cd08:	2000177c 	.word	0x2000177c
 800cd0c:	20001720 	.word	0x20001720
 800cd10:	20001810 	.word	0x20001810
 800cd14:	20000848 	.word	0x20000848
 800cd18:	200014c8 	.word	0x200014c8
 800cd1c:	20000db4 	.word	0x20000db4
 800cd20:	51eb851f 	.word	0x51eb851f
 800cd24:	200018d8 	.word	0x200018d8
 800cd28:	ffffd8f0 	.word	0xffffd8f0
 800cd2c:	200014b8 	.word	0x200014b8
 800cd30:	200018cc 	.word	0x200018cc
 800cd34:	ffffc180 	.word	0xffffc180
 800cd38:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cd44:	4a33      	ldr	r2, [pc, #204]	; (800ce14 <pidMultiWii+0x368>)
 800cd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4a32      	ldr	r2, [pc, #200]	; (800ce18 <pidMultiWii+0x36c>)
 800cd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd52:	4413      	add	r3, r2
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	fb01 f303 	mul.w	r3, r1, r3
 800cd5a:	4a30      	ldr	r2, [pc, #192]	; (800ce1c <pidMultiWii+0x370>)
 800cd5c:	fb82 1203 	smull	r1, r2, r2, r3
 800cd60:	1152      	asrs	r2, r2, #5
 800cd62:	17db      	asrs	r3, r3, #31
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd68:	4413      	add	r3, r2
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd6c:	4a29      	ldr	r2, [pc, #164]	; (800ce14 <pidMultiWii+0x368>)
 800cd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd74:	4619      	mov	r1, r3
 800cd76:	4a2a      	ldr	r2, [pc, #168]	; (800ce20 <pidMultiWii+0x374>)
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd7e:	1acb      	subs	r3, r1, r3
 800cd80:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd82:	4a24      	ldr	r2, [pc, #144]	; (800ce14 <pidMultiWii+0x368>)
 800cd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd86:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cd8a:	4a25      	ldr	r2, [pc, #148]	; (800ce20 <pidMultiWii+0x374>)
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cd92:	4a24      	ldr	r2, [pc, #144]	; (800ce24 <pidMultiWii+0x378>)
 800cd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd9a:	4923      	ldr	r1, [pc, #140]	; (800ce28 <pidMultiWii+0x37c>)
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cda2:	4413      	add	r3, r2
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	4413      	add	r3, r2
 800cda8:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cdaa:	4a1e      	ldr	r2, [pc, #120]	; (800ce24 <pidMultiWii+0x378>)
 800cdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cdb2:	491d      	ldr	r1, [pc, #116]	; (800ce28 <pidMultiWii+0x37c>)
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cdba:	491a      	ldr	r1, [pc, #104]	; (800ce24 <pidMultiWii+0x378>)
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cdc4:	4a19      	ldr	r2, [pc, #100]	; (800ce2c <pidMultiWii+0x380>)
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc8:	4413      	add	r3, r2
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	461a      	mov	r2, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	fb02 f303 	mul.w	r3, r2, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	da00      	bge.n	800cdda <pidMultiWii+0x32e>
 800cdd8:	331f      	adds	r3, #31
 800cdda:	115b      	asrs	r3, r3, #5
 800cddc:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	4413      	add	r3, r2
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	b219      	sxth	r1, r3
 800cdf4:	4a0e      	ldr	r2, [pc, #56]	; (800ce30 <pidMultiWii+0x384>)
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfe:	3301      	adds	r3, #1
 800ce00:	637b      	str	r3, [r7, #52]	; 0x34
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	f77f ae72 	ble.w	800caee <pidMultiWii+0x42>
    }
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	3738      	adds	r7, #56	; 0x38
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	200014b8 	.word	0x200014b8
 800ce18:	200017b4 	.word	0x200017b4
 800ce1c:	66666667 	.word	0x66666667
 800ce20:	20001998 	.word	0x20001998
 800ce24:	200019a0 	.word	0x200019a0
 800ce28:	200019ac 	.word	0x200019ac
 800ce2c:	200017bc 	.word	0x200017bc
 800ce30:	200017dc 	.word	0x200017dc

0800ce34 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	; 0x28
 800ce38:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800ce3e:	2300      	movs	r3, #0
 800ce40:	627b      	str	r3, [r7, #36]	; 0x24
 800ce42:	e0f2      	b.n	800d02a <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d10b      	bne.n	800ce62 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800ce4a:	4b7c      	ldr	r3, [pc, #496]	; (800d03c <pidRewrite+0x208>)
 800ce4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ce50:	331b      	adds	r3, #27
 800ce52:	4a7b      	ldr	r2, [pc, #492]	; (800d040 <pidRewrite+0x20c>)
 800ce54:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
 800ce5c:	115b      	asrs	r3, r3, #5
 800ce5e:	623b      	str	r3, [r7, #32]
 800ce60:	e053      	b.n	800cf0a <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800ce62:	4a77      	ldr	r2, [pc, #476]	; (800d040 <pidRewrite+0x20c>)
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4a75      	ldr	r2, [pc, #468]	; (800d044 <pidRewrite+0x210>)
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce74:	440b      	add	r3, r1
 800ce76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce7a:	4973      	ldr	r1, [pc, #460]	; (800d048 <pidRewrite+0x214>)
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7f6 fec3 	bl	8003c08 <constrain>
 800ce82:	4602      	mov	r2, r0
 800ce84:	4971      	ldr	r1, [pc, #452]	; (800d04c <pidRewrite+0x218>)
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ce8c:	1ad2      	subs	r2, r2, r3
 800ce8e:	496b      	ldr	r1, [pc, #428]	; (800d03c <pidRewrite+0x208>)
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	3314      	adds	r3, #20
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	440b      	add	r3, r1
 800ce98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cea6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ceaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ceae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceb2:	ee17 3a90 	vmov	r3, s15
 800ceb6:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ceb8:	4b65      	ldr	r3, [pc, #404]	; (800d050 <pidRewrite+0x21c>)
 800ceba:	78db      	ldrb	r3, [r3, #3]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d11c      	bne.n	800cefa <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800cec0:	4a5e      	ldr	r2, [pc, #376]	; (800d03c <pidRewrite+0x208>)
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	4413      	add	r3, r2
 800cec6:	3323      	adds	r3, #35	; 0x23
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	331b      	adds	r3, #27
 800cecc:	495c      	ldr	r1, [pc, #368]	; (800d040 <pidRewrite+0x20c>)
 800cece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ced4:	fb02 f303 	mul.w	r3, r2, r3
 800ced8:	111b      	asrs	r3, r3, #4
 800ceda:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800cedc:	4b5c      	ldr	r3, [pc, #368]	; (800d050 <pidRewrite+0x21c>)
 800cede:	791b      	ldrb	r3, [r3, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d012      	beq.n	800cf0a <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800cee4:	4b55      	ldr	r3, [pc, #340]	; (800d03c <pidRewrite+0x208>)
 800cee6:	7c9b      	ldrb	r3, [r3, #18]
 800cee8:	461a      	mov	r2, r3
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	fb02 f303 	mul.w	r3, r2, r3
 800cef0:	121b      	asrs	r3, r3, #8
 800cef2:	6a3a      	ldr	r2, [r7, #32]
 800cef4:	4413      	add	r3, r2
 800cef6:	623b      	str	r3, [r7, #32]
 800cef8:	e007      	b.n	800cf0a <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cefa:	4b50      	ldr	r3, [pc, #320]	; (800d03c <pidRewrite+0x208>)
 800cefc:	7a1b      	ldrb	r3, [r3, #8]
 800cefe:	461a      	mov	r2, r3
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	fb02 f303 	mul.w	r3, r2, r3
 800cf06:	111b      	asrs	r3, r3, #4
 800cf08:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cf0a:	4a52      	ldr	r2, [pc, #328]	; (800d054 <pidRewrite+0x220>)
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cf12:	461a      	mov	r2, r3
 800cf14:	6a3b      	ldr	r3, [r7, #32]
 800cf16:	1a9b      	subs	r3, r3, r2
 800cf18:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800cf1a:	4a48      	ldr	r2, [pc, #288]	; (800d03c <pidRewrite+0x208>)
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	4413      	add	r3, r2
 800cf20:	3301      	adds	r3, #1
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	461a      	mov	r2, r3
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	fb02 f303 	mul.w	r3, r2, r3
 800cf2c:	11db      	asrs	r3, r3, #7
 800cf2e:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cf30:	4a49      	ldr	r2, [pc, #292]	; (800d058 <pidRewrite+0x224>)
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf38:	4b48      	ldr	r3, [pc, #288]	; (800d05c <pidRewrite+0x228>)
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	fb01 f303 	mul.w	r3, r1, r3
 800cf44:	12db      	asrs	r3, r3, #11
 800cf46:	483d      	ldr	r0, [pc, #244]	; (800d03c <pidRewrite+0x208>)
 800cf48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf4a:	4401      	add	r1, r0
 800cf4c:	310b      	adds	r1, #11
 800cf4e:	7809      	ldrb	r1, [r1, #0]
 800cf50:	fb01 f303 	mul.w	r3, r1, r3
 800cf54:	441a      	add	r2, r3
 800cf56:	4940      	ldr	r1, [pc, #256]	; (800d058 <pidRewrite+0x224>)
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cf5e:	4a3e      	ldr	r2, [pc, #248]	; (800d058 <pidRewrite+0x224>)
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf6a:	493d      	ldr	r1, [pc, #244]	; (800d060 <pidRewrite+0x22c>)
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f6 fe4b 	bl	8003c08 <constrain>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4938      	ldr	r1, [pc, #224]	; (800d058 <pidRewrite+0x224>)
 800cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf7c:	4a36      	ldr	r2, [pc, #216]	; (800d058 <pidRewrite+0x224>)
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf84:	135b      	asrs	r3, r3, #13
 800cf86:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cf88:	4a36      	ldr	r2, [pc, #216]	; (800d064 <pidRewrite+0x230>)
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf90:	69ba      	ldr	r2, [r7, #24]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cf96:	4933      	ldr	r1, [pc, #204]	; (800d064 <pidRewrite+0x230>)
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	69ba      	ldr	r2, [r7, #24]
 800cf9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cfa0:	4b2e      	ldr	r3, [pc, #184]	; (800d05c <pidRewrite+0x228>)
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	091b      	lsrs	r3, r3, #4
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	fb02 f303 	mul.w	r3, r2, r3
 800cfba:	119b      	asrs	r3, r3, #6
 800cfbc:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cfbe:	4a2a      	ldr	r2, [pc, #168]	; (800d068 <pidRewrite+0x234>)
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfc6:	4929      	ldr	r1, [pc, #164]	; (800d06c <pidRewrite+0x238>)
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfce:	4413      	add	r3, r2
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cfd6:	4a24      	ldr	r2, [pc, #144]	; (800d068 <pidRewrite+0x234>)
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfde:	4923      	ldr	r1, [pc, #140]	; (800d06c <pidRewrite+0x238>)
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cfe6:	4920      	ldr	r1, [pc, #128]	; (800d068 <pidRewrite+0x234>)
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cff0:	4a12      	ldr	r2, [pc, #72]	; (800d03c <pidRewrite+0x208>)
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	4413      	add	r3, r2
 800cff6:	3315      	adds	r3, #21
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	fb02 f303 	mul.w	r3, r2, r3
 800d002:	121b      	asrs	r3, r3, #8
 800d004:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	b29a      	uxth	r2, r3
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	4413      	add	r3, r2
 800d010:	b29a      	uxth	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	b29b      	uxth	r3, r3
 800d016:	4413      	add	r3, r2
 800d018:	b29b      	uxth	r3, r3
 800d01a:	b219      	sxth	r1, r3
 800d01c:	4a14      	ldr	r2, [pc, #80]	; (800d070 <pidRewrite+0x23c>)
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	3301      	adds	r3, #1
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	f77f af09 	ble.w	800ce44 <pidRewrite+0x10>
    }
}
 800d032:	bf00      	nop
 800d034:	bf00      	nop
 800d036:	3728      	adds	r7, #40	; 0x28
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	20000db4 	.word	0x20000db4
 800d040:	2000177c 	.word	0x2000177c
 800d044:	20001810 	.word	0x20001810
 800d048:	fffffe0c 	.word	0xfffffe0c
 800d04c:	200014c8 	.word	0x200014c8
 800d050:	20001720 	.word	0x20001720
 800d054:	200014b8 	.word	0x200014b8
 800d058:	200018cc 	.word	0x200018cc
 800d05c:	20001740 	.word	0x20001740
 800d060:	ffe00000 	.word	0xffe00000
 800d064:	200019b8 	.word	0x200019b8
 800d068:	200019c4 	.word	0x200019c4
 800d06c:	200019d0 	.word	0x200019d0
 800d070:	200017dc 	.word	0x200017dc

0800d074 <setPIDController>:

void setPIDController(int type)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d003      	beq.n	800d08a <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d082:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <setPIDController+0x2c>)
 800d084:	4a07      	ldr	r2, [pc, #28]	; (800d0a4 <setPIDController+0x30>)
 800d086:	601a      	str	r2, [r3, #0]
            break;
 800d088:	e003      	b.n	800d092 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d08a:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <setPIDController+0x2c>)
 800d08c:	4a06      	ldr	r2, [pc, #24]	; (800d0a8 <setPIDController+0x34>)
 800d08e:	601a      	str	r2, [r3, #0]
            break;
 800d090:	bf00      	nop
    }
}
 800d092:	bf00      	nop
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	20000050 	.word	0x20000050
 800d0a4:	0800caad 	.word	0x0800caad
 800d0a8:	0800ce35 	.word	0x0800ce35

0800d0ac <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d0c0:	f7ff fbf4 	bl	800c8ac <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d0c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d0c8:	f7f9 ff24 	bl	8006f14 <feature>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d005      	beq.n	800d0de <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d0d2:	4b9d      	ldr	r3, [pc, #628]	; (800d348 <taskComputeRc+0x29c>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <taskComputeRc+0x32>
                mwDisarm();
 800d0da:	f7ff fcc5 	bl	800ca68 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d0de:	f001 facd 	bl	800e67c <RSSI_getValue>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b99      	ldr	r3, [pc, #612]	; (800d34c <taskComputeRc+0x2a0>)
 800d0e8:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d0ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0ee:	f7f9 ff11 	bl	8006f14 <feature>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <taskComputeRc+0x5a>
 800d0f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d0fc:	f7f9 ff0a 	bl	8006f14 <feature>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d072      	beq.n	800d1ec <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d106:	4b92      	ldr	r3, [pc, #584]	; (800d350 <taskComputeRc+0x2a4>)
 800d108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d10c:	4619      	mov	r1, r3
 800d10e:	4b91      	ldr	r3, [pc, #580]	; (800d354 <taskComputeRc+0x2a8>)
 800d110:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d114:	461a      	mov	r2, r3
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	4299      	cmp	r1, r3
 800d11e:	dd43      	ble.n	800d1a8 <taskComputeRc+0xfc>
 800d120:	4b8d      	ldr	r3, [pc, #564]	; (800d358 <taskComputeRc+0x2ac>)
 800d122:	785b      	ldrb	r3, [r3, #1]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d03f      	beq.n	800d1a8 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d128:	2300      	movs	r3, #0
 800d12a:	613b      	str	r3, [r7, #16]
 800d12c:	e00a      	b.n	800d144 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d12e:	4b8b      	ldr	r3, [pc, #556]	; (800d35c <taskComputeRc+0x2b0>)
 800d130:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d134:	b219      	sxth	r1, r3
 800d136:	4a8a      	ldr	r2, [pc, #552]	; (800d360 <taskComputeRc+0x2b4>)
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3301      	adds	r3, #1
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2b02      	cmp	r3, #2
 800d148:	ddf1      	ble.n	800d12e <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d14a:	4b82      	ldr	r3, [pc, #520]	; (800d354 <taskComputeRc+0x2a8>)
 800d14c:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d150:	b21a      	sxth	r2, r3
 800d152:	4b83      	ldr	r3, [pc, #524]	; (800d360 <taskComputeRc+0x2b4>)
 800d154:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d156:	2003      	movs	r0, #3
 800d158:	f7f6 fee6 	bl	8003f28 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d15c:	4b7c      	ldr	r3, [pc, #496]	; (800d350 <taskComputeRc+0x2a4>)
 800d15e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d162:	4619      	mov	r1, r3
 800d164:	4b7b      	ldr	r3, [pc, #492]	; (800d354 <taskComputeRc+0x2a8>)
 800d166:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d16a:	461a      	mov	r2, r3
 800d16c:	4b79      	ldr	r3, [pc, #484]	; (800d354 <taskComputeRc+0x2a8>)
 800d16e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d172:	441a      	add	r2, r3
 800d174:	4613      	mov	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	4299      	cmp	r1, r3
 800d17c:	dd0b      	ble.n	800d196 <taskComputeRc+0xea>
 800d17e:	4b76      	ldr	r3, [pc, #472]	; (800d358 <taskComputeRc+0x2ac>)
 800d180:	7c9b      	ldrb	r3, [r3, #18]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d107      	bne.n	800d196 <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d186:	f7ff fc6f 	bl	800ca68 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d18a:	4b73      	ldr	r3, [pc, #460]	; (800d358 <taskComputeRc+0x2ac>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d190:	2004      	movs	r0, #4
 800d192:	f7f6 fec9 	bl	8003f28 <buzzer>
                }
                failsafeEvents++;
 800d196:	4b73      	ldr	r3, [pc, #460]	; (800d364 <taskComputeRc+0x2b8>)
 800d198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	b21a      	sxth	r2, r3
 800d1a4:	4b6f      	ldr	r3, [pc, #444]	; (800d364 <taskComputeRc+0x2b8>)
 800d1a6:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d1a8:	4b69      	ldr	r3, [pc, #420]	; (800d350 <taskComputeRc+0x2a4>)
 800d1aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4b68      	ldr	r3, [pc, #416]	; (800d354 <taskComputeRc+0x2a8>)
 800d1b2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	4299      	cmp	r1, r3
 800d1c0:	dd0b      	ble.n	800d1da <taskComputeRc+0x12e>
 800d1c2:	4b65      	ldr	r3, [pc, #404]	; (800d358 <taskComputeRc+0x2ac>)
 800d1c4:	785b      	ldrb	r3, [r3, #1]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d107      	bne.n	800d1da <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d1ca:	f7ff fc4d 	bl	800ca68 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1ce:	4b62      	ldr	r3, [pc, #392]	; (800d358 <taskComputeRc+0x2ac>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d1d4:	2004      	movs	r0, #4
 800d1d6:	f7f6 fea7 	bl	8003f28 <buzzer>
            }
            failsafeCnt++;
 800d1da:	4b5d      	ldr	r3, [pc, #372]	; (800d350 <taskComputeRc+0x2a4>)
 800d1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	b21a      	sxth	r2, r3
 800d1e8:	4b59      	ldr	r3, [pc, #356]	; (800d350 <taskComputeRc+0x2a4>)
 800d1ea:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	e021      	b.n	800d236 <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
 800d1f4:	089b      	lsrs	r3, r3, #2
 800d1f6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d1f8:	4a59      	ldr	r2, [pc, #356]	; (800d360 <taskComputeRc+0x2b4>)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d200:	461a      	mov	r2, r3
 800d202:	4b56      	ldr	r3, [pc, #344]	; (800d35c <taskComputeRc+0x2b0>)
 800d204:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d208:	429a      	cmp	r2, r3
 800d20a:	dd03      	ble.n	800d214 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d212:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d214:	4a52      	ldr	r2, [pc, #328]	; (800d360 <taskComputeRc+0x2b4>)
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d21c:	461a      	mov	r2, r3
 800d21e:	4b4f      	ldr	r3, [pc, #316]	; (800d35c <taskComputeRc+0x2b0>)
 800d220:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d224:	429a      	cmp	r2, r3
 800d226:	da03      	bge.n	800d230 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d228:	7dfb      	ldrb	r3, [r7, #23]
 800d22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d22e:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	3301      	adds	r3, #1
 800d234:	613b      	str	r3, [r7, #16]
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	2b03      	cmp	r3, #3
 800d23a:	ddda      	ble.n	800d1f2 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d23c:	4b4a      	ldr	r3, [pc, #296]	; (800d368 <taskComputeRc+0x2bc>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	7dfa      	ldrb	r2, [r7, #23]
 800d242:	429a      	cmp	r2, r3
 800d244:	d10a      	bne.n	800d25c <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d246:	4b49      	ldr	r3, [pc, #292]	; (800d36c <taskComputeRc+0x2c0>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2bf9      	cmp	r3, #249	; 0xf9
 800d24c:	d809      	bhi.n	800d262 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d24e:	4b47      	ldr	r3, [pc, #284]	; (800d36c <taskComputeRc+0x2c0>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	4b45      	ldr	r3, [pc, #276]	; (800d36c <taskComputeRc+0x2c0>)
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	e002      	b.n	800d262 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d25c:	4b43      	ldr	r3, [pc, #268]	; (800d36c <taskComputeRc+0x2c0>)
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d262:	4a41      	ldr	r2, [pc, #260]	; (800d368 <taskComputeRc+0x2bc>)
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d268:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d26c:	f7f9 fe52 	bl	8006f14 <feature>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d01e      	beq.n	800d2b4 <taskComputeRc+0x208>
 800d276:	4b3a      	ldr	r3, [pc, #232]	; (800d360 <taskComputeRc+0x2b4>)
 800d278:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d27c:	461a      	mov	r2, r3
 800d27e:	4b37      	ldr	r3, [pc, #220]	; (800d35c <taskComputeRc+0x2b0>)
 800d280:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d284:	4619      	mov	r1, r3
 800d286:	4b35      	ldr	r3, [pc, #212]	; (800d35c <taskComputeRc+0x2b0>)
 800d288:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d28c:	1acb      	subs	r3, r1, r3
 800d28e:	429a      	cmp	r2, r3
 800d290:	dd10      	ble.n	800d2b4 <taskComputeRc+0x208>
 800d292:	4b33      	ldr	r3, [pc, #204]	; (800d360 <taskComputeRc+0x2b4>)
 800d294:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d298:	461a      	mov	r2, r3
 800d29a:	4b30      	ldr	r3, [pc, #192]	; (800d35c <taskComputeRc+0x2b0>)
 800d29c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4b2e      	ldr	r3, [pc, #184]	; (800d35c <taskComputeRc+0x2b0>)
 800d2a4:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d2a8:	440b      	add	r3, r1
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	da02      	bge.n	800d2b4 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	72fb      	strb	r3, [r7, #11]
 800d2b2:	e014      	b.n	800d2de <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d2b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d2b8:	f7f9 fe2c 	bl	8006f14 <feature>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f083 0301 	eor.w	r3, r3, #1
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <taskComputeRc+0x232>
 800d2c8:	4b25      	ldr	r3, [pc, #148]	; (800d360 <taskComputeRc+0x2b4>)
 800d2ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	4b22      	ldr	r3, [pc, #136]	; (800d35c <taskComputeRc+0x2b0>)
 800d2d2:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	da01      	bge.n	800d2de <taskComputeRc+0x232>
            isThrottleLow = true;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d2de:	7afb      	ldrb	r3, [r7, #11]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01c      	beq.n	800d31e <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d2e4:	4b22      	ldr	r3, [pc, #136]	; (800d370 <taskComputeRc+0x2c4>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d2ea:	4b21      	ldr	r3, [pc, #132]	; (800d370 <taskComputeRc+0x2c4>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d2f0:	4b1f      	ldr	r3, [pc, #124]	; (800d370 <taskComputeRc+0x2c4>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d2f6:	4b1f      	ldr	r3, [pc, #124]	; (800d374 <taskComputeRc+0x2c8>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d2fc:	4b1d      	ldr	r3, [pc, #116]	; (800d374 <taskComputeRc+0x2c8>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d302:	4b14      	ldr	r3, [pc, #80]	; (800d354 <taskComputeRc+0x2a8>)
 800d304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d306:	2b00      	cmp	r3, #0
 800d308:	d009      	beq.n	800d31e <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d30a:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <taskComputeRc+0x29c>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d005      	beq.n	800d31e <taskComputeRc+0x272>
 800d312:	4b11      	ldr	r3, [pc, #68]	; (800d358 <taskComputeRc+0x2ac>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <taskComputeRc+0x272>
                    mwArm();
 800d31a:	f7ff fb61 	bl	800c9e0 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d31e:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <taskComputeRc+0x2a8>)
 800d320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d02d      	beq.n	800d382 <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d326:	4b08      	ldr	r3, [pc, #32]	; (800d348 <taskComputeRc+0x29c>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d129      	bne.n	800d382 <taskComputeRc+0x2d6>
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <taskComputeRc+0x2ac>)
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d025      	beq.n	800d382 <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d336:	4b09      	ldr	r3, [pc, #36]	; (800d35c <taskComputeRc+0x2b0>)
 800d338:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01b      	beq.n	800d378 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d340:	f7ff fb92 	bl	800ca68 <mwDisarm>
 800d344:	e01d      	b.n	800d382 <taskComputeRc+0x2d6>
 800d346:	bf00      	nop
 800d348:	200017c0 	.word	0x200017c0
 800d34c:	200017ac 	.word	0x200017ac
 800d350:	20001752 	.word	0x20001752
 800d354:	20000db4 	.word	0x20000db4
 800d358:	20001720 	.word	0x20001720
 800d35c:	20000848 	.word	0x20000848
 800d360:	20001758 	.word	0x20001758
 800d364:	20001754 	.word	0x20001754
 800d368:	200019dc 	.word	0x200019dc
 800d36c:	200019dd 	.word	0x200019dd
 800d370:	200018cc 	.word	0x200018cc
 800d374:	200018d8 	.word	0x200018d8
                } else if (isThrottleLow) {
 800d378:	7afb      	ldrb	r3, [r7, #11]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <taskComputeRc+0x2d6>
                    mwDisarm();
 800d37e:	f7ff fb73 	bl	800ca68 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d382:	4b82      	ldr	r3, [pc, #520]	; (800d58c <taskComputeRc+0x4e0>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b14      	cmp	r3, #20
 800d388:	f040 8131 	bne.w	800d5ee <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d38c:	4b80      	ldr	r3, [pc, #512]	; (800d590 <taskComputeRc+0x4e4>)
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d01c      	beq.n	800d3ce <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d394:	4b7f      	ldr	r3, [pc, #508]	; (800d594 <taskComputeRc+0x4e8>)
 800d396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d105      	bne.n	800d3a8 <taskComputeRc+0x2fc>
 800d39c:	4b7e      	ldr	r3, [pc, #504]	; (800d598 <taskComputeRc+0x4ec>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b5f      	cmp	r3, #95	; 0x5f
 800d3a2:	d101      	bne.n	800d3a8 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d3a4:	f7ff fb60 	bl	800ca68 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d3a8:	4b7c      	ldr	r3, [pc, #496]	; (800d59c <taskComputeRc+0x4f0>)
 800d3aa:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 811d 	beq.w	800d5ee <taskComputeRc+0x542>
 800d3b4:	4b77      	ldr	r3, [pc, #476]	; (800d594 <taskComputeRc+0x4e8>)
 800d3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f040 8118 	bne.w	800d5ee <taskComputeRc+0x542>
 800d3be:	4b76      	ldr	r3, [pc, #472]	; (800d598 <taskComputeRc+0x4ec>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	2b7d      	cmp	r3, #125	; 0x7d
 800d3c4:	f040 8113 	bne.w	800d5ee <taskComputeRc+0x542>
                    mwDisarm();
 800d3c8:	f7ff fb4e 	bl	800ca68 <mwDisarm>
 800d3cc:	e10f      	b.n	800d5ee <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d3d2:	4b71      	ldr	r3, [pc, #452]	; (800d598 <taskComputeRc+0x4ec>)
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b57      	cmp	r3, #87	; 0x57
 800d3d8:	d122      	bne.n	800d420 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d3da:	4b71      	ldr	r3, [pc, #452]	; (800d5a0 <taskComputeRc+0x4f4>)
 800d3dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3e0:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d3e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d3e6:	f7f9 fd95 	bl	8006f14 <feature>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d3f0:	f7fb fb6a 	bl	8008ac8 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d3f4:	2004      	movs	r0, #4
 800d3f6:	f7f9 fd45 	bl	8006e84 <sensors>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d400:	4b68      	ldr	r3, [pc, #416]	; (800d5a4 <taskComputeRc+0x4f8>)
 800d402:	220a      	movs	r2, #10
 800d404:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d406:	2008      	movs	r0, #8
 800d408:	f7f9 fd3c 	bl	8006e84 <sensors>
 800d40c:	4603      	mov	r3, r0
 800d40e:	f083 0301 	eor.w	r3, r3, #1
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d032      	beq.n	800d47e <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d418:	4b63      	ldr	r3, [pc, #396]	; (800d5a8 <taskComputeRc+0x4fc>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	801a      	strh	r2, [r3, #0]
 800d41e:	e02e      	b.n	800d47e <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d420:	2004      	movs	r0, #4
 800d422:	f7f9 fd77 	bl	8006f14 <feature>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d028      	beq.n	800d47e <taskComputeRc+0x3d2>
 800d42c:	4b5a      	ldr	r3, [pc, #360]	; (800d598 <taskComputeRc+0x4ec>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b5a      	cmp	r3, #90	; 0x5a
 800d432:	d124      	bne.n	800d47e <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d434:	4b5d      	ldr	r3, [pc, #372]	; (800d5ac <taskComputeRc+0x500>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d43c:	4b5b      	ldr	r3, [pc, #364]	; (800d5ac <taskComputeRc+0x500>)
 800d43e:	2200      	movs	r2, #0
 800d440:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d442:	4b5b      	ldr	r3, [pc, #364]	; (800d5b0 <taskComputeRc+0x504>)
 800d444:	2201      	movs	r2, #1
 800d446:	701a      	strb	r2, [r3, #0]
 800d448:	e019      	b.n	800d47e <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d44a:	4b5a      	ldr	r3, [pc, #360]	; (800d5b4 <taskComputeRc+0x508>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bf14      	ite	ne
 800d452:	2301      	movne	r3, #1
 800d454:	2300      	moveq	r3, #0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f083 0301 	eor.w	r3, r3, #1
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	b2da      	uxtb	r2, r3
 800d464:	4b53      	ldr	r3, [pc, #332]	; (800d5b4 <taskComputeRc+0x508>)
 800d466:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d468:	4b52      	ldr	r3, [pc, #328]	; (800d5b4 <taskComputeRc+0x508>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d470:	200a      	movs	r0, #10
 800d472:	f7f6 fd59 	bl	8003f28 <buzzer>
 800d476:	e002      	b.n	800d47e <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d478:	200b      	movs	r0, #11
 800d47a:	f7f6 fd55 	bl	8003f28 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d47e:	4b46      	ldr	r3, [pc, #280]	; (800d598 <taskComputeRc+0x4ec>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b5d      	cmp	r3, #93	; 0x5d
 800d484:	d102      	bne.n	800d48c <taskComputeRc+0x3e0>
                    i = 1;
 800d486:	2301      	movs	r3, #1
 800d488:	613b      	str	r3, [r7, #16]
 800d48a:	e00c      	b.n	800d4a6 <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d48c:	4b42      	ldr	r3, [pc, #264]	; (800d598 <taskComputeRc+0x4ec>)
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	2b5b      	cmp	r3, #91	; 0x5b
 800d492:	d102      	bne.n	800d49a <taskComputeRc+0x3ee>
                    i = 2;
 800d494:	2302      	movs	r3, #2
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	e005      	b.n	800d4a6 <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d49a:	4b3f      	ldr	r3, [pc, #252]	; (800d598 <taskComputeRc+0x4ec>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b5e      	cmp	r3, #94	; 0x5e
 800d4a0:	d101      	bne.n	800d4a6 <taskComputeRc+0x3fa>
                    i = 3;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	613b      	str	r3, [r7, #16]
                if (i) {
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d011      	beq.n	800d4d0 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	4b39      	ldr	r3, [pc, #228]	; (800d59c <taskComputeRc+0x4f0>)
 800d4b6:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	2000      	movs	r0, #0
 800d4be:	f7f9 f947 	bl	8006750 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	2128      	movs	r1, #40	; 0x28
 800d4ca:	2002      	movs	r0, #2
 800d4cc:	f7fe fd9c 	bl	800c008 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d4d0:	4b30      	ldr	r3, [pc, #192]	; (800d594 <taskComputeRc+0x4e8>)
 800d4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d106      	bne.n	800d4e6 <taskComputeRc+0x43a>
 800d4d8:	4b2f      	ldr	r3, [pc, #188]	; (800d598 <taskComputeRc+0x4ec>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b6f      	cmp	r3, #111	; 0x6f
 800d4de:	d102      	bne.n	800d4e6 <taskComputeRc+0x43a>
                    mwArm();
 800d4e0:	f7ff fa7e 	bl	800c9e0 <mwArm>
 800d4e4:	e01f      	b.n	800d526 <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d4e6:	4b2d      	ldr	r3, [pc, #180]	; (800d59c <taskComputeRc+0x4f0>)
 800d4e8:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00a      	beq.n	800d506 <taskComputeRc+0x45a>
 800d4f0:	4b28      	ldr	r3, [pc, #160]	; (800d594 <taskComputeRc+0x4e8>)
 800d4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <taskComputeRc+0x45a>
 800d4f8:	4b27      	ldr	r3, [pc, #156]	; (800d598 <taskComputeRc+0x4ec>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b7e      	cmp	r3, #126	; 0x7e
 800d4fe:	d102      	bne.n	800d506 <taskComputeRc+0x45a>
                    mwArm();
 800d500:	f7ff fa6e 	bl	800c9e0 <mwArm>
 800d504:	e00f      	b.n	800d526 <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d506:	4b24      	ldr	r3, [pc, #144]	; (800d598 <taskComputeRc+0x4ec>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b97      	cmp	r3, #151	; 0x97
 800d50c:	d104      	bne.n	800d518 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d50e:	4b2a      	ldr	r3, [pc, #168]	; (800d5b8 <taskComputeRc+0x50c>)
 800d510:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d514:	801a      	strh	r2, [r3, #0]
 800d516:	e006      	b.n	800d526 <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d518:	4b1f      	ldr	r3, [pc, #124]	; (800d598 <taskComputeRc+0x4ec>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2ba7      	cmp	r3, #167	; 0xa7
 800d51e:	d102      	bne.n	800d526 <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d520:	4b1b      	ldr	r3, [pc, #108]	; (800d590 <taskComputeRc+0x4e4>)
 800d522:	2201      	movs	r2, #1
 800d524:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <taskComputeRc+0x4ec>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2bbb      	cmp	r3, #187	; 0xbb
 800d530:	d10b      	bne.n	800d54a <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d532:	4b18      	ldr	r3, [pc, #96]	; (800d594 <taskComputeRc+0x4e8>)
 800d534:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3302      	adds	r3, #2
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	b21a      	sxth	r2, r3
 800d540:	4b14      	ldr	r3, [pc, #80]	; (800d594 <taskComputeRc+0x4e8>)
 800d542:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d544:	2301      	movs	r3, #1
 800d546:	613b      	str	r3, [r7, #16]
 800d548:	e047      	b.n	800d5da <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d54a:	4b13      	ldr	r3, [pc, #76]	; (800d598 <taskComputeRc+0x4ec>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2bb7      	cmp	r3, #183	; 0xb7
 800d550:	d10b      	bne.n	800d56a <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d552:	4b10      	ldr	r3, [pc, #64]	; (800d594 <taskComputeRc+0x4e8>)
 800d554:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d558:	b29b      	uxth	r3, r3
 800d55a:	3b02      	subs	r3, #2
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	b21a      	sxth	r2, r3
 800d560:	4b0c      	ldr	r3, [pc, #48]	; (800d594 <taskComputeRc+0x4e8>)
 800d562:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d564:	2301      	movs	r3, #1
 800d566:	613b      	str	r3, [r7, #16]
 800d568:	e037      	b.n	800d5da <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d56a:	4b0b      	ldr	r3, [pc, #44]	; (800d598 <taskComputeRc+0x4ec>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2bbe      	cmp	r3, #190	; 0xbe
 800d570:	d124      	bne.n	800d5bc <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d572:	4b08      	ldr	r3, [pc, #32]	; (800d594 <taskComputeRc+0x4e8>)
 800d574:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d578:	b29b      	uxth	r3, r3
 800d57a:	3302      	adds	r3, #2
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	b21a      	sxth	r2, r3
 800d580:	4b04      	ldr	r3, [pc, #16]	; (800d594 <taskComputeRc+0x4e8>)
 800d582:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d584:	2301      	movs	r3, #1
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	e027      	b.n	800d5da <taskComputeRc+0x52e>
 800d58a:	bf00      	nop
 800d58c:	200019dd 	.word	0x200019dd
 800d590:	20001720 	.word	0x20001720
 800d594:	20000db4 	.word	0x20000db4
 800d598:	200019dc 	.word	0x200019dc
 800d59c:	20000848 	.word	0x20000848
 800d5a0:	20001a54 	.word	0x20001a54
 800d5a4:	20001a52 	.word	0x20001a52
 800d5a8:	20001a56 	.word	0x20001a56
 800d5ac:	200018bd 	.word	0x200018bd
 800d5b0:	200018be 	.word	0x200018be
 800d5b4:	200018bc 	.word	0x200018bc
 800d5b8:	20001a50 	.word	0x20001a50
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d5bc:	4b9e      	ldr	r3, [pc, #632]	; (800d838 <taskComputeRc+0x78c>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2bbd      	cmp	r3, #189	; 0xbd
 800d5c2:	d10a      	bne.n	800d5da <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d5c4:	4b9d      	ldr	r3, [pc, #628]	; (800d83c <taskComputeRc+0x790>)
 800d5c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	3b02      	subs	r3, #2
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	b21a      	sxth	r2, r3
 800d5d2:	4b9a      	ldr	r3, [pc, #616]	; (800d83c <taskComputeRc+0x790>)
 800d5d4:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d006      	beq.n	800d5ee <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d5e0:	2101      	movs	r1, #1
 800d5e2:	2001      	movs	r0, #1
 800d5e4:	f7f9 f8b4 	bl	8006750 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d5e8:	4b95      	ldr	r3, [pc, #596]	; (800d840 <taskComputeRc+0x794>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d5ee:	2004      	movs	r0, #4
 800d5f0:	f7f9 fc90 	bl	8006f14 <feature>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d041      	beq.n	800d67e <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d5fa:	4b92      	ldr	r3, [pc, #584]	; (800d844 <taskComputeRc+0x798>)
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d016      	beq.n	800d630 <taskComputeRc+0x584>
 800d602:	4b91      	ldr	r3, [pc, #580]	; (800d848 <taskComputeRc+0x79c>)
 800d604:	785b      	ldrb	r3, [r3, #1]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d012      	beq.n	800d630 <taskComputeRc+0x584>
 800d60a:	4b90      	ldr	r3, [pc, #576]	; (800d84c <taskComputeRc+0x7a0>)
 800d60c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d610:	461a      	mov	r2, r3
 800d612:	4b8f      	ldr	r3, [pc, #572]	; (800d850 <taskComputeRc+0x7a4>)
 800d614:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d618:	429a      	cmp	r2, r3
 800d61a:	dd09      	ble.n	800d630 <taskComputeRc+0x584>
 800d61c:	4b8d      	ldr	r3, [pc, #564]	; (800d854 <taskComputeRc+0x7a8>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d105      	bne.n	800d630 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d624:	4b8c      	ldr	r3, [pc, #560]	; (800d858 <taskComputeRc+0x7ac>)
 800d626:	2232      	movs	r2, #50	; 0x32
 800d628:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d62a:	4b86      	ldr	r3, [pc, #536]	; (800d844 <taskComputeRc+0x798>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d630:	4b88      	ldr	r3, [pc, #544]	; (800d854 <taskComputeRc+0x7a8>)
 800d632:	7c5b      	ldrb	r3, [r3, #17]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d014      	beq.n	800d662 <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d638:	4b88      	ldr	r3, [pc, #544]	; (800d85c <taskComputeRc+0x7b0>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f083 0301 	eor.w	r3, r3, #1
 800d640:	b2db      	uxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d009      	beq.n	800d65a <taskComputeRc+0x5ae>
 800d646:	4b86      	ldr	r3, [pc, #536]	; (800d860 <taskComputeRc+0x7b4>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f083 0301 	eor.w	r3, r3, #1
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d654:	4b80      	ldr	r3, [pc, #512]	; (800d858 <taskComputeRc+0x7ac>)
 800d656:	2232      	movs	r2, #50	; 0x32
 800d658:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d65a:	4b80      	ldr	r3, [pc, #512]	; (800d85c <taskComputeRc+0x7b0>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	701a      	strb	r2, [r3, #0]
 800d660:	e00d      	b.n	800d67e <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d662:	4b7f      	ldr	r3, [pc, #508]	; (800d860 <taskComputeRc+0x7b4>)
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d009      	beq.n	800d67e <taskComputeRc+0x5d2>
 800d66a:	4b77      	ldr	r3, [pc, #476]	; (800d848 <taskComputeRc+0x79c>)
 800d66c:	785b      	ldrb	r3, [r3, #1]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d105      	bne.n	800d67e <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d672:	4b7b      	ldr	r3, [pc, #492]	; (800d860 <taskComputeRc+0x7b4>)
 800d674:	2200      	movs	r2, #0
 800d676:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d678:	4b7a      	ldr	r3, [pc, #488]	; (800d864 <taskComputeRc+0x7b8>)
 800d67a:	2201      	movs	r2, #1
 800d67c:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d67e:	2300      	movs	r3, #0
 800d680:	613b      	str	r3, [r7, #16]
 800d682:	e04a      	b.n	800d71a <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	3304      	adds	r3, #4
 800d688:	4a70      	ldr	r2, [pc, #448]	; (800d84c <taskComputeRc+0x7a0>)
 800d68a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d68e:	f240 5213 	movw	r2, #1299	; 0x513
 800d692:	4293      	cmp	r3, r2
 800d694:	bfd4      	ite	le
 800d696:	2301      	movle	r3, #1
 800d698:	2300      	movgt	r3, #0
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	4619      	mov	r1, r3
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	4413      	add	r3, r2
 800d6a6:	4099      	lsls	r1, r3
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	4a67      	ldr	r2, [pc, #412]	; (800d84c <taskComputeRc+0x7a0>)
 800d6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6b2:	f240 5214 	movw	r2, #1300	; 0x514
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	dd0a      	ble.n	800d6d0 <taskComputeRc+0x624>
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4a63      	ldr	r2, [pc, #396]	; (800d84c <taskComputeRc+0x7a0>)
 800d6c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6c4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	dc01      	bgt.n	800d6d0 <taskComputeRc+0x624>
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	e000      	b.n	800d6d2 <taskComputeRc+0x626>
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	3301      	adds	r3, #1
 800d6dc:	fa00 f303 	lsl.w	r3, r0, r3
 800d6e0:	4319      	orrs	r1, r3
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	4a59      	ldr	r2, [pc, #356]	; (800d84c <taskComputeRc+0x7a0>)
 800d6e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6ec:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	bfcc      	ite	gt
 800d6f4:	2301      	movgt	r3, #1
 800d6f6:	2300      	movle	r3, #0
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	4613      	mov	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4413      	add	r3, r2
 800d704:	3302      	adds	r3, #2
 800d706:	fa00 f303 	lsl.w	r3, r0, r3
 800d70a:	430b      	orrs	r3, r1
 800d70c:	461a      	mov	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	3301      	adds	r3, #1
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	4b53      	ldr	r3, [pc, #332]	; (800d868 <taskComputeRc+0x7bc>)
 800d71c:	7d1b      	ldrb	r3, [r3, #20]
 800d71e:	461a      	mov	r2, r3
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	4293      	cmp	r3, r2
 800d724:	dbae      	blt.n	800d684 <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d726:	2300      	movs	r3, #0
 800d728:	613b      	str	r3, [r7, #16]
 800d72a:	e015      	b.n	800d758 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d72c:	4a43      	ldr	r2, [pc, #268]	; (800d83c <taskComputeRc+0x790>)
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	3312      	adds	r3, #18
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	4013      	ands	r3, r2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	bf14      	ite	ne
 800d740:	2301      	movne	r3, #1
 800d742:	2300      	moveq	r3, #0
 800d744:	b2db      	uxtb	r3, r3
 800d746:	4619      	mov	r1, r3
 800d748:	4a42      	ldr	r2, [pc, #264]	; (800d854 <taskComputeRc+0x7a8>)
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	4413      	add	r3, r2
 800d74e:	460a      	mov	r2, r1
 800d750:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	3301      	adds	r3, #1
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	2b18      	cmp	r3, #24
 800d75c:	dde6      	ble.n	800d72c <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d75e:	4b3d      	ldr	r3, [pc, #244]	; (800d854 <taskComputeRc+0x7a8>)
 800d760:	7e1a      	ldrb	r2, [r3, #24]
 800d762:	4b39      	ldr	r3, [pc, #228]	; (800d848 <taskComputeRc+0x79c>)
 800d764:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d766:	4b38      	ldr	r3, [pc, #224]	; (800d848 <taskComputeRc+0x79c>)
 800d768:	7d1b      	ldrb	r3, [r3, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d005      	beq.n	800d77a <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d76e:	4b39      	ldr	r3, [pc, #228]	; (800d854 <taskComputeRc+0x7a8>)
 800d770:	2201      	movs	r2, #1
 800d772:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d774:	4b37      	ldr	r3, [pc, #220]	; (800d854 <taskComputeRc+0x7a8>)
 800d776:	2201      	movs	r2, #1
 800d778:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d77a:	4b36      	ldr	r3, [pc, #216]	; (800d854 <taskComputeRc+0x7a8>)
 800d77c:	785b      	ldrb	r3, [r3, #1]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10c      	bne.n	800d79c <taskComputeRc+0x6f0>
 800d782:	4b3a      	ldr	r3, [pc, #232]	; (800d86c <taskComputeRc+0x7c0>)
 800d784:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d788:	4619      	mov	r1, r3
 800d78a:	4b2c      	ldr	r3, [pc, #176]	; (800d83c <taskComputeRc+0x790>)
 800d78c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d790:	461a      	mov	r2, r3
 800d792:	4613      	mov	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4413      	add	r3, r2
 800d798:	4299      	cmp	r1, r3
 800d79a:	dd30      	ble.n	800d7fe <taskComputeRc+0x752>
 800d79c:	2002      	movs	r0, #2
 800d79e:	f7f9 fb71 	bl	8006e84 <sensors>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d02a      	beq.n	800d7fe <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d7a8:	4b27      	ldr	r3, [pc, #156]	; (800d848 <taskComputeRc+0x79c>)
 800d7aa:	78db      	ldrb	r3, [r3, #3]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d108      	bne.n	800d7c2 <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d7b0:	4b2f      	ldr	r3, [pc, #188]	; (800d870 <taskComputeRc+0x7c4>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d7b6:	4b2e      	ldr	r3, [pc, #184]	; (800d870 <taskComputeRc+0x7c4>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d7bc:	4b22      	ldr	r3, [pc, #136]	; (800d848 <taskComputeRc+0x79c>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d7c6:	f7f9 fba5 	bl	8006f14 <feature>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d01d      	beq.n	800d80c <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d7d0:	4b26      	ldr	r3, [pc, #152]	; (800d86c <taskComputeRc+0x7c0>)
 800d7d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	4b18      	ldr	r3, [pc, #96]	; (800d83c <taskComputeRc+0x790>)
 800d7da:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7de:	461a      	mov	r2, r3
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	dd10      	ble.n	800d80c <taskComputeRc+0x760>
 800d7ea:	2020      	movs	r0, #32
 800d7ec:	f7f9 fb4a 	bl	8006e84 <sensors>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00a      	beq.n	800d80c <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d7f6:	4b14      	ldr	r3, [pc, #80]	; (800d848 <taskComputeRc+0x79c>)
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7fc:	e006      	b.n	800d80c <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d7fe:	4b12      	ldr	r3, [pc, #72]	; (800d848 <taskComputeRc+0x79c>)
 800d800:	2200      	movs	r2, #0
 800d802:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d804:	4b10      	ldr	r3, [pc, #64]	; (800d848 <taskComputeRc+0x79c>)
 800d806:	2200      	movs	r2, #0
 800d808:	749a      	strb	r2, [r3, #18]
 800d80a:	e000      	b.n	800d80e <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d80c:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d80e:	4b11      	ldr	r3, [pc, #68]	; (800d854 <taskComputeRc+0x7a8>)
 800d810:	789b      	ldrb	r3, [r3, #2]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d02e      	beq.n	800d874 <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d816:	4b0c      	ldr	r3, [pc, #48]	; (800d848 <taskComputeRc+0x79c>)
 800d818:	2200      	movs	r2, #0
 800d81a:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d81c:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <taskComputeRc+0x79c>)
 800d81e:	791b      	ldrb	r3, [r3, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d12a      	bne.n	800d87a <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d824:	4b12      	ldr	r3, [pc, #72]	; (800d870 <taskComputeRc+0x7c4>)
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d82a:	4b11      	ldr	r3, [pc, #68]	; (800d870 <taskComputeRc+0x7c4>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d830:	4b05      	ldr	r3, [pc, #20]	; (800d848 <taskComputeRc+0x79c>)
 800d832:	2201      	movs	r2, #1
 800d834:	711a      	strb	r2, [r3, #4]
 800d836:	e020      	b.n	800d87a <taskComputeRc+0x7ce>
 800d838:	200019dc 	.word	0x200019dc
 800d83c:	20000db4 	.word	0x20000db4
 800d840:	200019dd 	.word	0x200019dd
 800d844:	200018bc 	.word	0x200018bc
 800d848:	20001720 	.word	0x20001720
 800d84c:	20001758 	.word	0x20001758
 800d850:	20000848 	.word	0x20000848
 800d854:	200017c0 	.word	0x200017c0
 800d858:	200018c0 	.word	0x200018c0
 800d85c:	200018bf 	.word	0x200018bf
 800d860:	200018bd 	.word	0x200018bd
 800d864:	200018be 	.word	0x200018be
 800d868:	20000790 	.word	0x20000790
 800d86c:	20001752 	.word	0x20001752
 800d870:	200018d8 	.word	0x200018d8
            }
        } else {
            f.HORIZON_MODE = 0;
 800d874:	4b9c      	ldr	r3, [pc, #624]	; (800dae8 <taskComputeRc+0xa3c>)
 800d876:	2200      	movs	r2, #0
 800d878:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d87a:	4b9c      	ldr	r3, [pc, #624]	; (800daec <taskComputeRc+0xa40>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d102      	bne.n	800d888 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d882:	4b99      	ldr	r3, [pc, #612]	; (800dae8 <taskComputeRc+0xa3c>)
 800d884:	2201      	movs	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d888:	4b97      	ldr	r3, [pc, #604]	; (800dae8 <taskComputeRc+0xa3c>)
 800d88a:	78db      	ldrb	r3, [r3, #3]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d103      	bne.n	800d898 <taskComputeRc+0x7ec>
 800d890:	4b95      	ldr	r3, [pc, #596]	; (800dae8 <taskComputeRc+0xa3c>)
 800d892:	791b      	ldrb	r3, [r3, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d898:	2001      	movs	r0, #1
 800d89a:	f7f4 fc19 	bl	80020d0 <actLed1State>
 800d89e:	e002      	b.n	800d8a6 <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f7f4 fc15 	bl	80020d0 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d8a6:	2004      	movs	r0, #4
 800d8a8:	f7f9 faec 	bl	8006e84 <sensors>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d033      	beq.n	800d91a <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d8b2:	4b8e      	ldr	r3, [pc, #568]	; (800daec <taskComputeRc+0xa40>)
 800d8b4:	78db      	ldrb	r3, [r3, #3]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d016      	beq.n	800d8e8 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d8ba:	4b8b      	ldr	r3, [pc, #556]	; (800dae8 <taskComputeRc+0xa3c>)
 800d8bc:	799b      	ldrb	r3, [r3, #6]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d115      	bne.n	800d8ee <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d8c2:	4b89      	ldr	r3, [pc, #548]	; (800dae8 <taskComputeRc+0xa3c>)
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d8c8:	4b89      	ldr	r3, [pc, #548]	; (800daf0 <taskComputeRc+0xa44>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a89      	ldr	r2, [pc, #548]	; (800daf4 <taskComputeRc+0xa48>)
 800d8ce:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d8d0:	4b89      	ldr	r3, [pc, #548]	; (800daf8 <taskComputeRc+0xa4c>)
 800d8d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d8d6:	4b89      	ldr	r3, [pc, #548]	; (800dafc <taskComputeRc+0xa50>)
 800d8d8:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d8da:	4b89      	ldr	r3, [pc, #548]	; (800db00 <taskComputeRc+0xa54>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d8e0:	4b88      	ldr	r3, [pc, #544]	; (800db04 <taskComputeRc+0xa58>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	e002      	b.n	800d8ee <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d8e8:	4b7f      	ldr	r3, [pc, #508]	; (800dae8 <taskComputeRc+0xa3c>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d8ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d8f2:	f7f9 fb0f 	bl	8006f14 <feature>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d8fc:	4b7b      	ldr	r3, [pc, #492]	; (800daec <taskComputeRc+0xa40>)
 800d8fe:	791b      	ldrb	r3, [r3, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d007      	beq.n	800d914 <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d904:	4b78      	ldr	r3, [pc, #480]	; (800dae8 <taskComputeRc+0xa3c>)
 800d906:	7bdb      	ldrb	r3, [r3, #15]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d106      	bne.n	800d91a <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d90c:	4b76      	ldr	r3, [pc, #472]	; (800dae8 <taskComputeRc+0xa3c>)
 800d90e:	2201      	movs	r2, #1
 800d910:	73da      	strb	r2, [r3, #15]
 800d912:	e002      	b.n	800d91a <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d914:	4b74      	ldr	r3, [pc, #464]	; (800dae8 <taskComputeRc+0xa3c>)
 800d916:	2200      	movs	r2, #0
 800d918:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d91a:	2002      	movs	r0, #2
 800d91c:	f7f9 fab2 	bl	8006e84 <sensors>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d105      	bne.n	800d932 <taskComputeRc+0x886>
 800d926:	2008      	movs	r0, #8
 800d928:	f7f9 faac 	bl	8006e84 <sensors>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d02b      	beq.n	800d98a <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d932:	4b6e      	ldr	r3, [pc, #440]	; (800daec <taskComputeRc+0xa40>)
 800d934:	795b      	ldrb	r3, [r3, #5]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00c      	beq.n	800d954 <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d93a:	4b6b      	ldr	r3, [pc, #428]	; (800dae8 <taskComputeRc+0xa3c>)
 800d93c:	795b      	ldrb	r3, [r3, #5]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10b      	bne.n	800d95a <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d942:	4b69      	ldr	r3, [pc, #420]	; (800dae8 <taskComputeRc+0xa3c>)
 800d944:	2201      	movs	r2, #1
 800d946:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d948:	4b6f      	ldr	r3, [pc, #444]	; (800db08 <taskComputeRc+0xa5c>)
 800d94a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d94e:	4b6f      	ldr	r3, [pc, #444]	; (800db0c <taskComputeRc+0xa60>)
 800d950:	801a      	strh	r2, [r3, #0]
 800d952:	e002      	b.n	800d95a <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d954:	4b64      	ldr	r3, [pc, #400]	; (800dae8 <taskComputeRc+0xa3c>)
 800d956:	2200      	movs	r2, #0
 800d958:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d95a:	4b64      	ldr	r3, [pc, #400]	; (800daec <taskComputeRc+0xa40>)
 800d95c:	799b      	ldrb	r3, [r3, #6]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d962:	4b61      	ldr	r3, [pc, #388]	; (800dae8 <taskComputeRc+0xa3c>)
 800d964:	7a5b      	ldrb	r3, [r3, #9]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d106      	bne.n	800d978 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d96a:	4b5f      	ldr	r3, [pc, #380]	; (800dae8 <taskComputeRc+0xa3c>)
 800d96c:	2201      	movs	r2, #1
 800d96e:	725a      	strb	r2, [r3, #9]
 800d970:	e002      	b.n	800d978 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d972:	4b5d      	ldr	r3, [pc, #372]	; (800dae8 <taskComputeRc+0xa3c>)
 800d974:	2200      	movs	r2, #0
 800d976:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d978:	4b5c      	ldr	r3, [pc, #368]	; (800daec <taskComputeRc+0xa40>)
 800d97a:	79db      	ldrb	r3, [r3, #7]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d004      	beq.n	800d98a <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d980:	4b61      	ldr	r3, [pc, #388]	; (800db08 <taskComputeRc+0xa5c>)
 800d982:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d986:	4b62      	ldr	r3, [pc, #392]	; (800db10 <taskComputeRc+0xa64>)
 800d988:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d98a:	2020      	movs	r0, #32
 800d98c:	f7f9 fa7a 	bl	8006e84 <sensors>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 809c 	beq.w	800dad0 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d998:	4b53      	ldr	r3, [pc, #332]	; (800dae8 <taskComputeRc+0xa3c>)
 800d99a:	7adb      	ldrb	r3, [r3, #11]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f000 808e 	beq.w	800dabe <taskComputeRc+0xa12>
 800d9a2:	4b5c      	ldr	r3, [pc, #368]	; (800db14 <taskComputeRc+0xa68>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	f240 8089 	bls.w	800dabe <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d9ac:	4b5a      	ldr	r3, [pc, #360]	; (800db18 <taskComputeRc+0xa6c>)
 800d9ae:	f993 3000 	ldrsb.w	r3, [r3]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00a      	beq.n	800d9cc <taskComputeRc+0x920>
 800d9b6:	4b4c      	ldr	r3, [pc, #304]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9b8:	791b      	ldrb	r3, [r3, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <taskComputeRc+0x920>
 800d9be:	4b4a      	ldr	r3, [pc, #296]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9c0:	78db      	ldrb	r3, [r3, #3]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d9c6:	4b48      	ldr	r3, [pc, #288]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d9cc:	4b47      	ldr	r3, [pc, #284]	; (800daec <taskComputeRc+0xa40>)
 800d9ce:	7a9b      	ldrb	r3, [r3, #10]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d103      	bne.n	800d9dc <taskComputeRc+0x930>
 800d9d4:	4b44      	ldr	r3, [pc, #272]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9d6:	7c9b      	ldrb	r3, [r3, #18]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d01c      	beq.n	800da16 <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d9dc:	4b42      	ldr	r3, [pc, #264]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9de:	79db      	ldrb	r3, [r3, #7]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d168      	bne.n	800dab6 <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d9e4:	4b40      	ldr	r3, [pc, #256]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d9ea:	4b3f      	ldr	r3, [pc, #252]	; (800dae8 <taskComputeRc+0xa3c>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d9f0:	4b4a      	ldr	r3, [pc, #296]	; (800db1c <taskComputeRc+0xa70>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d9f6:	494a      	ldr	r1, [pc, #296]	; (800db20 <taskComputeRc+0xa74>)
 800d9f8:	484a      	ldr	r0, [pc, #296]	; (800db24 <taskComputeRc+0xa78>)
 800d9fa:	f7fb fa31 	bl	8008e60 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d9fe:	4b46      	ldr	r3, [pc, #280]	; (800db18 <taskComputeRc+0xa6c>)
 800da00:	2202      	movs	r2, #2
 800da02:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800da04:	4b48      	ldr	r3, [pc, #288]	; (800db28 <taskComputeRc+0xa7c>)
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	461a      	mov	r2, r3
 800da0a:	4b48      	ldr	r3, [pc, #288]	; (800db2c <taskComputeRc+0xa80>)
 800da0c:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800da0e:	4b36      	ldr	r3, [pc, #216]	; (800dae8 <taskComputeRc+0xa3c>)
 800da10:	2201      	movs	r2, #1
 800da12:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800da14:	e04f      	b.n	800dab6 <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800da16:	4b34      	ldr	r3, [pc, #208]	; (800dae8 <taskComputeRc+0xa3c>)
 800da18:	2200      	movs	r2, #0
 800da1a:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800da1c:	4b33      	ldr	r3, [pc, #204]	; (800daec <taskComputeRc+0xa40>)
 800da1e:	7adb      	ldrb	r3, [r3, #11]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d039      	beq.n	800da98 <taskComputeRc+0x9ec>
 800da24:	4b34      	ldr	r3, [pc, #208]	; (800daf8 <taskComputeRc+0xa4c>)
 800da26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfb8      	it	lt
 800da2e:	425b      	neglt	r3, r3
 800da30:	b29a      	uxth	r2, r3
 800da32:	4b3f      	ldr	r3, [pc, #252]	; (800db30 <taskComputeRc+0xa84>)
 800da34:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da38:	429a      	cmp	r2, r3
 800da3a:	d22d      	bcs.n	800da98 <taskComputeRc+0x9ec>
 800da3c:	4b2e      	ldr	r3, [pc, #184]	; (800daf8 <taskComputeRc+0xa4c>)
 800da3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da42:	2b00      	cmp	r3, #0
 800da44:	bfb8      	it	lt
 800da46:	425b      	neglt	r3, r3
 800da48:	b29a      	uxth	r2, r3
 800da4a:	4b39      	ldr	r3, [pc, #228]	; (800db30 <taskComputeRc+0xa84>)
 800da4c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da50:	429a      	cmp	r2, r3
 800da52:	d221      	bcs.n	800da98 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800da54:	4b24      	ldr	r3, [pc, #144]	; (800dae8 <taskComputeRc+0xa3c>)
 800da56:	7a1b      	ldrb	r3, [r3, #8]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d12c      	bne.n	800dab6 <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800da5c:	4b22      	ldr	r3, [pc, #136]	; (800dae8 <taskComputeRc+0xa3c>)
 800da5e:	2201      	movs	r2, #1
 800da60:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800da62:	4b2e      	ldr	r3, [pc, #184]	; (800db1c <taskComputeRc+0xa70>)
 800da64:	2200      	movs	r2, #0
 800da66:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800da68:	4b32      	ldr	r3, [pc, #200]	; (800db34 <taskComputeRc+0xa88>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a2f      	ldr	r2, [pc, #188]	; (800db2c <taskComputeRc+0xa80>)
 800da6e:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da70:	4b30      	ldr	r3, [pc, #192]	; (800db34 <taskComputeRc+0xa88>)
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4a2d      	ldr	r2, [pc, #180]	; (800db2c <taskComputeRc+0xa80>)
 800da76:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da78:	492f      	ldr	r1, [pc, #188]	; (800db38 <taskComputeRc+0xa8c>)
 800da7a:	482c      	ldr	r0, [pc, #176]	; (800db2c <taskComputeRc+0xa80>)
 800da7c:	f7fb f9f0 	bl	8008e60 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da80:	4b25      	ldr	r3, [pc, #148]	; (800db18 <taskComputeRc+0xa6c>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da86:	4b28      	ldr	r3, [pc, #160]	; (800db28 <taskComputeRc+0xa7c>)
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	4b27      	ldr	r3, [pc, #156]	; (800db2c <taskComputeRc+0xa80>)
 800da8e:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800da90:	4b15      	ldr	r3, [pc, #84]	; (800dae8 <taskComputeRc+0xa3c>)
 800da92:	2200      	movs	r2, #0
 800da94:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800da96:	e00e      	b.n	800dab6 <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800da98:	4b13      	ldr	r3, [pc, #76]	; (800dae8 <taskComputeRc+0xa3c>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800da9e:	4b1f      	ldr	r3, [pc, #124]	; (800db1c <taskComputeRc+0xa70>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d107      	bne.n	800dab6 <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800daa6:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <taskComputeRc+0xa70>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800daac:	f7fb f840 	bl	8008b30 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800dab0:	4b0d      	ldr	r3, [pc, #52]	; (800dae8 <taskComputeRc+0xa3c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800dab6:	200c      	movs	r0, #12
 800dab8:	f7f6 fa36 	bl	8003f28 <buzzer>
 800dabc:	e008      	b.n	800dad0 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800dabe:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <taskComputeRc+0xa3c>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800dac4:	4b08      	ldr	r3, [pc, #32]	; (800dae8 <taskComputeRc+0xa3c>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800daca:	4b13      	ldr	r3, [pc, #76]	; (800db18 <taskComputeRc+0xa6c>)
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <taskComputeRc+0xa40>)
 800dad2:	7b1b      	ldrb	r3, [r3, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d031      	beq.n	800db3c <taskComputeRc+0xa90>
 800dad8:	4b03      	ldr	r3, [pc, #12]	; (800dae8 <taskComputeRc+0xa3c>)
 800dada:	7c9b      	ldrb	r3, [r3, #18]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d12d      	bne.n	800db3c <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800dae0:	4b01      	ldr	r3, [pc, #4]	; (800dae8 <taskComputeRc+0xa3c>)
 800dae2:	2201      	movs	r2, #1
 800dae4:	729a      	strb	r2, [r3, #10]
 800dae6:	e02c      	b.n	800db42 <taskComputeRc+0xa96>
 800dae8:	20001720 	.word	0x20001720
 800daec:	200017c0 	.word	0x200017c0
 800daf0:	2000148c 	.word	0x2000148c
 800daf4:	20001494 	.word	0x20001494
 800daf8:	2000177c 	.word	0x2000177c
 800dafc:	200018e0 	.word	0x200018e0
 800db00:	200014a0 	.word	0x200014a0
 800db04:	20001490 	.word	0x20001490
 800db08:	20001a56 	.word	0x20001a56
 800db0c:	20001a58 	.word	0x20001a58
 800db10:	20001742 	.word	0x20001742
 800db14:	20001804 	.word	0x20001804
 800db18:	20001820 	.word	0x20001820
 800db1c:	20000058 	.word	0x20000058
 800db20:	200017f0 	.word	0x200017f0
 800db24:	200017ec 	.word	0x200017ec
 800db28:	2000180a 	.word	0x2000180a
 800db2c:	200017f8 	.word	0x200017f8
 800db30:	20000db4 	.word	0x20000db4
 800db34:	200017e4 	.word	0x200017e4
 800db38:	200017fc 	.word	0x200017fc
        } else {
            f.PASSTHRU_MODE = 0;
 800db3c:	4b47      	ldr	r3, [pc, #284]	; (800dc5c <taskComputeRc+0xbb0>)
 800db3e:	2200      	movs	r2, #0
 800db40:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800db42:	4b46      	ldr	r3, [pc, #280]	; (800dc5c <taskComputeRc+0xbb0>)
 800db44:	7c1b      	ldrb	r3, [r3, #16]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d047      	beq.n	800dbda <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800db4a:	4b44      	ldr	r3, [pc, #272]	; (800dc5c <taskComputeRc+0xbb0>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800db50:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db54:	f7f9 f9de 	bl	8006f14 <feature>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d03d      	beq.n	800dbda <taskComputeRc+0xb2e>
 800db5e:	4b40      	ldr	r3, [pc, #256]	; (800dc60 <taskComputeRc+0xbb4>)
 800db60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db64:	4619      	mov	r1, r3
 800db66:	4b3f      	ldr	r3, [pc, #252]	; (800dc64 <taskComputeRc+0xbb8>)
 800db68:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db6c:	461a      	mov	r2, r3
 800db6e:	4613      	mov	r3, r2
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	4413      	add	r3, r2
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	4299      	cmp	r1, r3
 800db78:	dd2f      	ble.n	800dbda <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800db7a:	4b38      	ldr	r3, [pc, #224]	; (800dc5c <taskComputeRc+0xbb0>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db80:	4b36      	ldr	r3, [pc, #216]	; (800dc5c <taskComputeRc+0xbb0>)
 800db82:	2201      	movs	r2, #1
 800db84:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db86:	2300      	movs	r3, #0
 800db88:	613b      	str	r3, [r7, #16]
 800db8a:	e00a      	b.n	800dba2 <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800db8c:	4b36      	ldr	r3, [pc, #216]	; (800dc68 <taskComputeRc+0xbbc>)
 800db8e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db92:	b219      	sxth	r1, r3
 800db94:	4a35      	ldr	r2, [pc, #212]	; (800dc6c <taskComputeRc+0xbc0>)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	3301      	adds	r3, #1
 800dba0:	613b      	str	r3, [r7, #16]
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	ddf1      	ble.n	800db8c <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800dba8:	4b2e      	ldr	r3, [pc, #184]	; (800dc64 <taskComputeRc+0xbb8>)
 800dbaa:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800dbae:	b21a      	sxth	r2, r3
 800dbb0:	4b2e      	ldr	r3, [pc, #184]	; (800dc6c <taskComputeRc+0xbc0>)
 800dbb2:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800dbb4:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <taskComputeRc+0xbb0>)
 800dbb6:	7adb      	ldrb	r3, [r3, #11]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10e      	bne.n	800dbda <taskComputeRc+0xb2e>
 800dbbc:	4b2c      	ldr	r3, [pc, #176]	; (800dc70 <taskComputeRc+0xbc4>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b05      	cmp	r3, #5
 800dbc2:	d80a      	bhi.n	800dbda <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dbc4:	4b25      	ldr	r3, [pc, #148]	; (800dc5c <taskComputeRc+0xbb0>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800dbca:	4b27      	ldr	r3, [pc, #156]	; (800dc68 <taskComputeRc+0xbbc>)
 800dbcc:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dbd0:	3b32      	subs	r3, #50	; 0x32
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	b21a      	sxth	r2, r3
 800dbd6:	4b25      	ldr	r3, [pc, #148]	; (800dc6c <taskComputeRc+0xbc0>)
 800dbd8:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dbda:	2010      	movs	r0, #16
 800dbdc:	f7f9 f99a 	bl	8006f14 <feature>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d035      	beq.n	800dc52 <taskComputeRc+0xba6>
 800dbe6:	4b1d      	ldr	r3, [pc, #116]	; (800dc5c <taskComputeRc+0xbb0>)
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d031      	beq.n	800dc52 <taskComputeRc+0xba6>
 800dbee:	4b1b      	ldr	r3, [pc, #108]	; (800dc5c <taskComputeRc+0xbb0>)
 800dbf0:	7c1b      	ldrb	r3, [r3, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d12d      	bne.n	800dc52 <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dbf6:	7afb      	ldrb	r3, [r7, #11]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d023      	beq.n	800dc44 <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dbfc:	4b1d      	ldr	r3, [pc, #116]	; (800dc74 <taskComputeRc+0xbc8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10e      	bne.n	800dc22 <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dc04:	4b18      	ldr	r3, [pc, #96]	; (800dc68 <taskComputeRc+0xbbc>)
 800dc06:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc10:	fb02 f303 	mul.w	r3, r2, r3
 800dc14:	461a      	mov	r2, r3
 800dc16:	4b18      	ldr	r3, [pc, #96]	; (800dc78 <taskComputeRc+0xbcc>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	4a15      	ldr	r2, [pc, #84]	; (800dc74 <taskComputeRc+0xbc8>)
 800dc1e:	6013      	str	r3, [r2, #0]
 800dc20:	e00c      	b.n	800dc3c <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dc22:	4b14      	ldr	r3, [pc, #80]	; (800dc74 <taskComputeRc+0xbc8>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <taskComputeRc+0xbcc>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d206      	bcs.n	800dc3c <taskComputeRc+0xb90>
 800dc2e:	4b0e      	ldr	r3, [pc, #56]	; (800dc68 <taskComputeRc+0xbbc>)
 800dc30:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <taskComputeRc+0xb90>
                    mwDisarm();
 800dc38:	f7fe ff16 	bl	800ca68 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dc3c:	2009      	movs	r0, #9
 800dc3e:	f7f6 f973 	bl	8003f28 <buzzer>
 800dc42:	e006      	b.n	800dc52 <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800dc44:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <taskComputeRc+0xbc8>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <taskComputeRc+0xba6>
                disarmTime = 0;
 800dc4c:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <taskComputeRc+0xbc8>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	20001720 	.word	0x20001720
 800dc60:	20001752 	.word	0x20001752
 800dc64:	20000db4 	.word	0x20000db4
 800dc68:	20000848 	.word	0x20000848
 800dc6c:	20001758 	.word	0x20001758
 800dc70:	20001804 	.word	0x20001804
 800dc74:	200018c8 	.word	0x200018c8
 800dc78:	20001dd0 	.word	0x20001dd0

0800dc7c <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc84:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <taskLoop+0x60>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <taskLoop+0x16>
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d00f      	beq.n	800dcb0 <taskLoop+0x34>
 800dc90:	e01f      	b.n	800dcd2 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dc92:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <taskLoop+0x60>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3301      	adds	r3, #1
 800dc98:	4a10      	ldr	r2, [pc, #64]	; (800dcdc <taskLoop+0x60>)
 800dc9a:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dc9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dca0:	f7f9 f938 	bl	8006f14 <feature>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <taskLoop+0x34>
				gpsThread();
 800dcaa:	f7fa faa1 	bl	80081f0 <gpsThread>
				break;
 800dcae:	e010      	b.n	800dcd2 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dcb0:	4b0a      	ldr	r3, [pc, #40]	; (800dcdc <taskLoop+0x60>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dcb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dcba:	f7f9 f92b 	bl	8006f14 <feature>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d005      	beq.n	800dcd0 <taskLoop+0x54>
 800dcc4:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <taskLoop+0x64>)
 800dcc6:	7bdb      	ldrb	r3, [r3, #15]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <taskLoop+0x54>
				mwVario();
 800dccc:	f7fe fee6 	bl	800ca9c <mwVario>
			break;
 800dcd0:	bf00      	nop
	}
    return 0;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	200019e0 	.word	0x200019e0
 800dce0:	20001720 	.word	0x20001720

0800dce4 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800dcec:	4ba1      	ldr	r3, [pc, #644]	; (800df74 <taskComputeImu+0x290>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b06      	cmp	r3, #6
 800dcf2:	f200 82be 	bhi.w	800e272 <taskComputeImu+0x58e>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <taskComputeImu+0x18>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd19 	.word	0x0800dd19
 800dd00:	0800dd29 	.word	0x0800dd29
 800dd04:	0800dd29 	.word	0x0800dd29
 800dd08:	0800dd29 	.word	0x0800dd29
 800dd0c:	0800dd41 	.word	0x0800dd41
 800dd10:	0800dd53 	.word	0x0800dd53
 800dd14:	0800e259 	.word	0x0800e259
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dd18:	2101      	movs	r1, #1
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f006 fc9a 	bl	8014654 <pifTask_GetDeltaTime>
 800dd20:	4603      	mov	r3, r0
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	4b94      	ldr	r3, [pc, #592]	; (800df78 <taskComputeImu+0x294>)
 800dd26:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dd28:	4b92      	ldr	r3, [pc, #584]	; (800df74 <taskComputeImu+0x290>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fb fe1b 	bl	8009968 <computeIMU>
 800dd32:	4603      	mov	r3, r0
 800dd34:	4a8f      	ldr	r2, [pc, #572]	; (800df74 <taskComputeImu+0x290>)
 800dd36:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f006 fc65 	bl	8014608 <pifTask_SetTrigger>
		break;
 800dd3e:	e298      	b.n	800e272 <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dd40:	f7fe f99a 	bl	800c078 <annexCode>
        step = 5;
 800dd44:	4b8b      	ldr	r3, [pc, #556]	; (800df74 <taskComputeImu+0x290>)
 800dd46:	2205      	movs	r2, #5
 800dd48:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f006 fc5c 	bl	8014608 <pifTask_SetTrigger>
    	break;
 800dd50:	e28f      	b.n	800e272 <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dd52:	2008      	movs	r0, #8
 800dd54:	f7f9 f896 	bl	8006e84 <sensors>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d057      	beq.n	800de0e <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd5e:	4b87      	ldr	r3, [pc, #540]	; (800df7c <taskComputeImu+0x298>)
 800dd60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bfb8      	it	lt
 800dd68:	425b      	neglt	r3, r3
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	2b45      	cmp	r3, #69	; 0x45
 800dd6e:	d847      	bhi.n	800de00 <taskComputeImu+0x11c>
 800dd70:	4b83      	ldr	r3, [pc, #524]	; (800df80 <taskComputeImu+0x29c>)
 800dd72:	795b      	ldrb	r3, [r3, #5]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d043      	beq.n	800de00 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800dd78:	4b82      	ldr	r3, [pc, #520]	; (800df84 <taskComputeImu+0x2a0>)
 800dd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	4b81      	ldr	r3, [pc, #516]	; (800df88 <taskComputeImu+0x2a4>)
 800dd82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dd8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd92:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dd96:	da04      	bge.n	800dda2 <taskComputeImu+0xbe>
                    dif += 360;
 800dd98:	8afb      	ldrh	r3, [r7, #22]
 800dd9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dda2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dda6:	2bb3      	cmp	r3, #179	; 0xb3
 800dda8:	dd04      	ble.n	800ddb4 <taskComputeImu+0xd0>
                    dif -= 360;
 800ddaa:	8afb      	ldrh	r3, [r7, #22]
 800ddac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800ddb4:	4b75      	ldr	r3, [pc, #468]	; (800df8c <taskComputeImu+0x2a8>)
 800ddb6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800ddba:	425b      	negs	r3, r3
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	8afb      	ldrh	r3, [r7, #22]
 800ddc0:	fb12 f303 	smulbb	r3, r2, r3
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800ddc8:	4b6d      	ldr	r3, [pc, #436]	; (800df80 <taskComputeImu+0x29c>)
 800ddca:	7b5b      	ldrb	r3, [r3, #13]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01d      	beq.n	800de0c <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800ddd0:	4b6a      	ldr	r3, [pc, #424]	; (800df7c <taskComputeImu+0x298>)
 800ddd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dddc:	496c      	ldr	r1, [pc, #432]	; (800df90 <taskComputeImu+0x2ac>)
 800ddde:	7a49      	ldrb	r1, [r1, #9]
 800dde0:	fb01 f303 	mul.w	r3, r1, r3
 800dde4:	496b      	ldr	r1, [pc, #428]	; (800df94 <taskComputeImu+0x2b0>)
 800dde6:	fb81 0103 	smull	r0, r1, r1, r3
 800ddea:	4419      	add	r1, r3
 800ddec:	1109      	asrs	r1, r1, #4
 800ddee:	17db      	asrs	r3, r3, #31
 800ddf0:	1a5b      	subs	r3, r3, r1
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4413      	add	r3, r2
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	b21a      	sxth	r2, r3
 800ddfa:	4b60      	ldr	r3, [pc, #384]	; (800df7c <taskComputeImu+0x298>)
 800ddfc:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddfe:	e005      	b.n	800de0c <taskComputeImu+0x128>
            } else
                magHold = heading;
 800de00:	4b60      	ldr	r3, [pc, #384]	; (800df84 <taskComputeImu+0x2a0>)
 800de02:	f9b3 2000 	ldrsh.w	r2, [r3]
 800de06:	4b60      	ldr	r3, [pc, #384]	; (800df88 <taskComputeImu+0x2a4>)
 800de08:	801a      	strh	r2, [r3, #0]
 800de0a:	e000      	b.n	800de0e <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800de0c:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800de0e:	2004      	movs	r0, #4
 800de10:	f7f9 f838 	bl	8006e84 <sensors>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 80e1 	beq.w	800dfde <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800de1c:	4b58      	ldr	r3, [pc, #352]	; (800df80 <taskComputeImu+0x29c>)
 800de1e:	799b      	ldrb	r3, [r3, #6]
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80dc 	beq.w	800dfde <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800de26:	4b56      	ldr	r3, [pc, #344]	; (800df80 <taskComputeImu+0x29c>)
 800de28:	7c1b      	ldrb	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 80c4 	bne.w	800dfb8 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800de30:	4b57      	ldr	r3, [pc, #348]	; (800df90 <taskComputeImu+0x2ac>)
 800de32:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d053      	beq.n	800dee2 <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de3a:	4b50      	ldr	r3, [pc, #320]	; (800df7c <taskComputeImu+0x298>)
 800de3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de40:	461a      	mov	r2, r3
 800de42:	4b55      	ldr	r3, [pc, #340]	; (800df98 <taskComputeImu+0x2b4>)
 800de44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	bfb8      	it	lt
 800de4e:	425b      	neglt	r3, r3
 800de50:	4a4f      	ldr	r2, [pc, #316]	; (800df90 <taskComputeImu+0x2ac>)
 800de52:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de56:	4293      	cmp	r3, r2
 800de58:	dd22      	ble.n	800dea0 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800de5a:	4b50      	ldr	r3, [pc, #320]	; (800df9c <taskComputeImu+0x2b8>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de60:	4b4f      	ldr	r3, [pc, #316]	; (800dfa0 <taskComputeImu+0x2bc>)
 800de62:	2201      	movs	r2, #1
 800de64:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de66:	4b45      	ldr	r3, [pc, #276]	; (800df7c <taskComputeImu+0x298>)
 800de68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	4b43      	ldr	r3, [pc, #268]	; (800df7c <taskComputeImu+0x298>)
 800de70:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de74:	4b48      	ldr	r3, [pc, #288]	; (800df98 <taskComputeImu+0x2b4>)
 800de76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de7a:	4299      	cmp	r1, r3
 800de7c:	dd06      	ble.n	800de8c <taskComputeImu+0x1a8>
 800de7e:	4b44      	ldr	r3, [pc, #272]	; (800df90 <taskComputeImu+0x2ac>)
 800de80:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de84:	b29b      	uxth	r3, r3
 800de86:	425b      	negs	r3, r3
 800de88:	b29b      	uxth	r3, r3
 800de8a:	e003      	b.n	800de94 <taskComputeImu+0x1b0>
 800de8c:	4b40      	ldr	r3, [pc, #256]	; (800df90 <taskComputeImu+0x2ac>)
 800de8e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de92:	b29b      	uxth	r3, r3
 800de94:	4413      	add	r3, r2
 800de96:	b29b      	uxth	r3, r3
 800de98:	b21a      	sxth	r2, r3
 800de9a:	4b38      	ldr	r3, [pc, #224]	; (800df7c <taskComputeImu+0x298>)
 800de9c:	80da      	strh	r2, [r3, #6]
 800de9e:	e09e      	b.n	800dfde <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800dea0:	4b3f      	ldr	r3, [pc, #252]	; (800dfa0 <taskComputeImu+0x2bc>)
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d006      	beq.n	800deb6 <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800dea8:	4b3e      	ldr	r3, [pc, #248]	; (800dfa4 <taskComputeImu+0x2c0>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a3e      	ldr	r2, [pc, #248]	; (800dfa8 <taskComputeImu+0x2c4>)
 800deae:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800deb0:	4b3b      	ldr	r3, [pc, #236]	; (800dfa0 <taskComputeImu+0x2bc>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800deb6:	4b38      	ldr	r3, [pc, #224]	; (800df98 <taskComputeImu+0x2b4>)
 800deb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800debc:	461a      	mov	r2, r3
 800debe:	4b3b      	ldr	r3, [pc, #236]	; (800dfac <taskComputeImu+0x2c8>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4413      	add	r3, r2
 800dec4:	4a31      	ldr	r2, [pc, #196]	; (800df8c <taskComputeImu+0x2a8>)
 800dec6:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800deca:	4611      	mov	r1, r2
 800decc:	4a2f      	ldr	r2, [pc, #188]	; (800df8c <taskComputeImu+0x2a8>)
 800dece:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f5 fe98 	bl	8003c08 <constrain>
 800ded8:	4603      	mov	r3, r0
 800deda:	b21a      	sxth	r2, r3
 800dedc:	4b27      	ldr	r3, [pc, #156]	; (800df7c <taskComputeImu+0x298>)
 800dede:	80da      	strh	r2, [r3, #6]
 800dee0:	e07d      	b.n	800dfde <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800dee2:	4b26      	ldr	r3, [pc, #152]	; (800df7c <taskComputeImu+0x298>)
 800dee4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dee8:	461a      	mov	r2, r3
 800deea:	4b2b      	ldr	r3, [pc, #172]	; (800df98 <taskComputeImu+0x2b4>)
 800deec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	bfb8      	it	lt
 800def6:	425b      	neglt	r3, r3
 800def8:	4a25      	ldr	r2, [pc, #148]	; (800df90 <taskComputeImu+0x2ac>)
 800defa:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800defe:	4293      	cmp	r3, r2
 800df00:	dd14      	ble.n	800df2c <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800df02:	4b1e      	ldr	r3, [pc, #120]	; (800df7c <taskComputeImu+0x298>)
 800df04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df08:	461a      	mov	r2, r3
 800df0a:	4b23      	ldr	r3, [pc, #140]	; (800df98 <taskComputeImu+0x2b4>)
 800df0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	0fda      	lsrs	r2, r3, #31
 800df14:	4413      	add	r3, r2
 800df16:	105b      	asrs	r3, r3, #1
 800df18:	461a      	mov	r2, r3
 800df1a:	4b25      	ldr	r3, [pc, #148]	; (800dfb0 <taskComputeImu+0x2cc>)
 800df1c:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800df1e:	4b25      	ldr	r3, [pc, #148]	; (800dfb4 <taskComputeImu+0x2d0>)
 800df20:	2201      	movs	r2, #1
 800df22:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800df24:	4b1e      	ldr	r3, [pc, #120]	; (800dfa0 <taskComputeImu+0x2bc>)
 800df26:	2201      	movs	r2, #1
 800df28:	701a      	strb	r2, [r3, #0]
 800df2a:	e00d      	b.n	800df48 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800df2c:	4b1c      	ldr	r3, [pc, #112]	; (800dfa0 <taskComputeImu+0x2bc>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d009      	beq.n	800df48 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800df34:	4b1b      	ldr	r3, [pc, #108]	; (800dfa4 <taskComputeImu+0x2c0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a1b      	ldr	r2, [pc, #108]	; (800dfa8 <taskComputeImu+0x2c4>)
 800df3a:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800df3c:	4b1d      	ldr	r3, [pc, #116]	; (800dfb4 <taskComputeImu+0x2d0>)
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800df42:	4b17      	ldr	r3, [pc, #92]	; (800dfa0 <taskComputeImu+0x2bc>)
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800df48:	4b13      	ldr	r3, [pc, #76]	; (800df98 <taskComputeImu+0x2b4>)
 800df4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df4e:	461a      	mov	r2, r3
 800df50:	4b16      	ldr	r3, [pc, #88]	; (800dfac <taskComputeImu+0x2c8>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4413      	add	r3, r2
 800df56:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <taskComputeImu+0x2a8>)
 800df58:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800df5c:	4611      	mov	r1, r2
 800df5e:	4a0b      	ldr	r2, [pc, #44]	; (800df8c <taskComputeImu+0x2a8>)
 800df60:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df64:	4618      	mov	r0, r3
 800df66:	f7f5 fe4f 	bl	8003c08 <constrain>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b21a      	sxth	r2, r3
 800df6e:	4b03      	ldr	r3, [pc, #12]	; (800df7c <taskComputeImu+0x298>)
 800df70:	80da      	strh	r2, [r3, #6]
 800df72:	e034      	b.n	800dfde <taskComputeImu+0x2fa>
 800df74:	200019e4 	.word	0x200019e4
 800df78:	20001740 	.word	0x20001740
 800df7c:	2000177c 	.word	0x2000177c
 800df80:	20001720 	.word	0x20001720
 800df84:	20001a56 	.word	0x20001a56
 800df88:	20001a58 	.word	0x20001a58
 800df8c:	20000848 	.word	0x20000848
 800df90:	20000db4 	.word	0x20000db4
 800df94:	88888889 	.word	0x88888889
 800df98:	200018e0 	.word	0x200018e0
 800df9c:	200014a0 	.word	0x200014a0
 800dfa0:	200019e8 	.word	0x200019e8
 800dfa4:	2000148c 	.word	0x2000148c
 800dfa8:	20001494 	.word	0x20001494
 800dfac:	20001490 	.word	0x20001490
 800dfb0:	20001498 	.word	0x20001498
 800dfb4:	2000149c 	.word	0x2000149c
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800dfb8:	4bb0      	ldr	r3, [pc, #704]	; (800e27c <taskComputeImu+0x598>)
 800dfba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	4baf      	ldr	r3, [pc, #700]	; (800e280 <taskComputeImu+0x59c>)
 800dfc2:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800dfc6:	b299      	uxth	r1, r3
 800dfc8:	4bae      	ldr	r3, [pc, #696]	; (800e284 <taskComputeImu+0x5a0>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	fb11 f303 	smulbb	r3, r1, r3
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	4413      	add	r3, r2
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	b21a      	sxth	r2, r3
 800dfda:	4ba8      	ldr	r3, [pc, #672]	; (800e27c <taskComputeImu+0x598>)
 800dfdc:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800dfde:	4baa      	ldr	r3, [pc, #680]	; (800e288 <taskComputeImu+0x5a4>)
 800dfe0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d014      	beq.n	800e012 <taskComputeImu+0x32e>
 800dfe8:	4ba8      	ldr	r3, [pc, #672]	; (800e28c <taskComputeImu+0x5a8>)
 800dfea:	78db      	ldrb	r3, [r3, #3]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d103      	bne.n	800dff8 <taskComputeImu+0x314>
 800dff0:	4ba6      	ldr	r3, [pc, #664]	; (800e28c <taskComputeImu+0x5a8>)
 800dff2:	791b      	ldrb	r3, [r3, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00c      	beq.n	800e012 <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dff8:	4ba0      	ldr	r3, [pc, #640]	; (800e27c <taskComputeImu+0x598>)
 800dffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	4ba3      	ldr	r3, [pc, #652]	; (800e290 <taskComputeImu+0x5ac>)
 800e002:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e006:	b29b      	uxth	r3, r3
 800e008:	4413      	add	r3, r2
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	b21a      	sxth	r2, r3
 800e00e:	4b9b      	ldr	r3, [pc, #620]	; (800e27c <taskComputeImu+0x598>)
 800e010:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800e012:	2020      	movs	r0, #32
 800e014:	f7f8 ff36 	bl	8006e84 <sensors>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f000 8115 	beq.w	800e24a <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e020:	4b9a      	ldr	r3, [pc, #616]	; (800e28c <taskComputeImu+0x5a8>)
 800e022:	79db      	ldrb	r3, [r3, #7]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d104      	bne.n	800e032 <taskComputeImu+0x34e>
 800e028:	4b98      	ldr	r3, [pc, #608]	; (800e28c <taskComputeImu+0x5a8>)
 800e02a:	7a1b      	ldrb	r3, [r3, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 8103 	beq.w	800e238 <taskComputeImu+0x554>
 800e032:	4b96      	ldr	r3, [pc, #600]	; (800e28c <taskComputeImu+0x5a8>)
 800e034:	7b1b      	ldrb	r3, [r3, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f000 80fe 	beq.w	800e238 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800e03c:	4b95      	ldr	r3, [pc, #596]	; (800e294 <taskComputeImu+0x5b0>)
 800e03e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e042:	ee07 3a90 	vmov	s15, r3
 800e046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e04a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e298 <taskComputeImu+0x5b4>
 800e04e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e052:	eeb0 0a67 	vmov.f32	s0, s15
 800e056:	f015 fd2b 	bl	8023ab0 <sinf>
 800e05a:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e05e:	4b8d      	ldr	r3, [pc, #564]	; (800e294 <taskComputeImu+0x5b0>)
 800e060:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e064:	ee07 3a90 	vmov	s15, r3
 800e068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e06c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e298 <taskComputeImu+0x5b4>
 800e070:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e074:	eeb0 0a67 	vmov.f32	s0, s15
 800e078:	f015 fc96 	bl	80239a8 <cosf>
 800e07c:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e080:	4b82      	ldr	r3, [pc, #520]	; (800e28c <taskComputeImu+0x5a8>)
 800e082:	7c1b      	ldrb	r3, [r3, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	f040 80d4 	bne.w	800e232 <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800e08a:	4b7f      	ldr	r3, [pc, #508]	; (800e288 <taskComputeImu+0x5a4>)
 800e08c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e090:	2b00      	cmp	r3, #0
 800e092:	f000 8087 	beq.w	800e1a4 <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e096:	4b81      	ldr	r3, [pc, #516]	; (800e29c <taskComputeImu+0x5b8>)
 800e098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b80      	ldr	r3, [pc, #512]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e0a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fb fad0 	bl	800964c <wrap_18000>
 800e0ac:	4b76      	ldr	r3, [pc, #472]	; (800e288 <taskComputeImu+0x5a4>)
 800e0ae:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0b2:	425b      	negs	r3, r3
 800e0b4:	4a74      	ldr	r2, [pc, #464]	; (800e288 <taskComputeImu+0x5a4>)
 800e0b6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	f7f5 fda4 	bl	8003c08 <constrain>
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4b77      	ldr	r3, [pc, #476]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e0c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	b28b      	uxth	r3, r1
 800e0cc:	4413      	add	r3, r2
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	b21a      	sxth	r2, r3
 800e0d2:	4b73      	ldr	r3, [pc, #460]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e0d4:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e0d6:	4b71      	ldr	r3, [pc, #452]	; (800e29c <taskComputeImu+0x5b8>)
 800e0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4b70      	ldr	r3, [pc, #448]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e0e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fb fab0 	bl	800964c <wrap_18000>
 800e0ec:	4b66      	ldr	r3, [pc, #408]	; (800e288 <taskComputeImu+0x5a4>)
 800e0ee:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0f2:	425b      	negs	r3, r3
 800e0f4:	4a64      	ldr	r2, [pc, #400]	; (800e288 <taskComputeImu+0x5a4>)
 800e0f6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	f7f5 fd84 	bl	8003c08 <constrain>
 800e100:	4601      	mov	r1, r0
 800e102:	4b67      	ldr	r3, [pc, #412]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e104:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e108:	b29a      	uxth	r2, r3
 800e10a:	b28b      	uxth	r3, r1
 800e10c:	4413      	add	r3, r2
 800e10e:	b29b      	uxth	r3, r3
 800e110:	b21a      	sxth	r2, r3
 800e112:	4b63      	ldr	r3, [pc, #396]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e114:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e116:	4b62      	ldr	r3, [pc, #392]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e11c:	ee07 3a90 	vmov	s15, r3
 800e120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e124:	edd7 7a03 	vldr	s15, [r7, #12]
 800e128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e12c:	4b5c      	ldr	r3, [pc, #368]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e12e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e132:	ee07 3a90 	vmov	s15, r3
 800e136:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e13a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e13e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e142:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e146:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e14a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e14e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e152:	ee17 3a90 	vmov	r3, s15
 800e156:	b21a      	sxth	r2, r3
 800e158:	4b52      	ldr	r3, [pc, #328]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e15a:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e15c:	4b50      	ldr	r3, [pc, #320]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e15e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e162:	ee07 3a90 	vmov	s15, r3
 800e166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e16a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e16e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e172:	4b4b      	ldr	r3, [pc, #300]	; (800e2a0 <taskComputeImu+0x5bc>)
 800e174:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e178:	ee07 3a90 	vmov	s15, r3
 800e17c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e180:	edd7 7a03 	vldr	s15, [r7, #12]
 800e184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e18c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e198:	ee17 3a90 	vmov	r3, s15
 800e19c:	b21a      	sxth	r2, r3
 800e19e:	4b41      	ldr	r3, [pc, #260]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e1a0:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1a2:	e052      	b.n	800e24a <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e1a4:	4b3d      	ldr	r3, [pc, #244]	; (800e29c <taskComputeImu+0x5b8>)
 800e1a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1aa:	ee07 3a90 	vmov	s15, r3
 800e1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1ba:	4b38      	ldr	r3, [pc, #224]	; (800e29c <taskComputeImu+0x5b8>)
 800e1bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1c0:	ee07 3a90 	vmov	s15, r3
 800e1c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1e0:	ee17 3a90 	vmov	r3, s15
 800e1e4:	b21a      	sxth	r2, r3
 800e1e6:	4b2f      	ldr	r3, [pc, #188]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e1e8:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e1ea:	4b2c      	ldr	r3, [pc, #176]	; (800e29c <taskComputeImu+0x5b8>)
 800e1ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1f0:	ee07 3a90 	vmov	s15, r3
 800e1f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e200:	4b26      	ldr	r3, [pc, #152]	; (800e29c <taskComputeImu+0x5b8>)
 800e202:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e206:	ee07 3a90 	vmov	s15, r3
 800e20a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e20e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e21a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e21e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e226:	ee17 3a90 	vmov	r3, s15
 800e22a:	b21a      	sxth	r2, r3
 800e22c:	4b1d      	ldr	r3, [pc, #116]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e22e:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e230:	e00b      	b.n	800e24a <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e232:	f7f8 ffa1 	bl	8007178 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e236:	e008      	b.n	800e24a <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e238:	4b1a      	ldr	r3, [pc, #104]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e23e:	4b19      	ldr	r3, [pc, #100]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e240:	2200      	movs	r2, #0
 800e242:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e244:	4b17      	ldr	r3, [pc, #92]	; (800e2a4 <taskComputeImu+0x5c0>)
 800e246:	2200      	movs	r2, #0
 800e248:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e24a:	4b17      	ldr	r3, [pc, #92]	; (800e2a8 <taskComputeImu+0x5c4>)
 800e24c:	2206      	movs	r2, #6
 800e24e:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f006 f9d9 	bl	8014608 <pifTask_SetTrigger>
    	break;
 800e256:	e00c      	b.n	800e272 <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e258:	4b14      	ldr	r3, [pc, #80]	; (800e2ac <taskComputeImu+0x5c8>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4798      	blx	r3

        mixTable();
 800e25e:	f7fd fb6f 	bl	800b940 <mixTable>
        writeServos();
 800e262:	f7fc ffc5 	bl	800b1f0 <writeServos>
        writeMotors();
 800e266:	f7fd f8fb 	bl	800b460 <writeMotors>
        step = 0;
 800e26a:	4b0f      	ldr	r3, [pc, #60]	; (800e2a8 <taskComputeImu+0x5c4>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]
    	break;
 800e270:	bf00      	nop
	}

    return 0;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	2000177c 	.word	0x2000177c
 800e280:	20000848 	.word	0x20000848
 800e284:	20001490 	.word	0x20001490
 800e288:	20000db4 	.word	0x20000db4
 800e28c:	20001720 	.word	0x20001720
 800e290:	200014a8 	.word	0x200014a8
 800e294:	20001a56 	.word	0x20001a56
 800e298:	3c8efa35 	.word	0x3c8efa35
 800e29c:	20001818 	.word	0x20001818
 800e2a0:	2000181c 	.word	0x2000181c
 800e2a4:	20001810 	.word	0x20001810
 800e2a8:	200019e4 	.word	0x200019e4
 800e2ac:	20000050 	.word	0x20000050

0800e2b0 <mspReadRawRC>:
#include "board.h"
#include "mw.h"


static uint16_t mspReadRawRC(uint8_t chan)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	71fb      	strb	r3, [r7, #7]
    return rcData[chan];
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <mspReadRawRC+0x20>)
 800e2be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800e2c2:	b29b      	uxth	r3, r3
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	20001758 	.word	0x20001758

0800e2d4 <mspFrameRecieve>:

void mspFrameRecieve(void)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e2d8:	4b04      	ldr	r3, [pc, #16]	; (800e2ec <mspFrameRecieve+0x18>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e2de:	4b04      	ldr	r3, [pc, #16]	; (800e2f0 <mspFrameRecieve+0x1c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f006 f990 	bl	8014608 <pifTask_SetTrigger>
}
 800e2e8:	bf00      	nop
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20001752 	.word	0x20001752
 800e2f0:	2000157c 	.word	0x2000157c

0800e2f4 <mspInit>:

void mspInit(rcReadRawDataPtr *callback)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
    if (callback)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <mspInit+0x14>
        *callback = mspReadRawRC;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a03      	ldr	r2, [pc, #12]	; (800e314 <mspInit+0x20>)
 800e306:	601a      	str	r2, [r3, #0]
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	0800e2b1 	.word	0x0800e2b1

0800e318 <sbusReadRawRC>:
static PifRcSbus s_sbus;
static uint32_t sbusChannelData[SBUS_MAX_CHANNEL];


static uint16_t sbusReadRawRC(uint8_t chan)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	71fb      	strb	r3, [r7, #7]
    return sbusChannelData[mcfg.rcmap[chan]];
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	4a07      	ldr	r2, [pc, #28]	; (800e344 <sbusReadRawRC+0x2c>)
 800e326:	4413      	add	r3, r2
 800e328:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800e32c:	461a      	mov	r2, r3
 800e32e:	4b06      	ldr	r3, [pc, #24]	; (800e348 <sbusReadRawRC+0x30>)
 800e330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e334:	b29b      	uxth	r3, r3
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	20000848 	.word	0x20000848
 800e348:	20001a30 	.word	0x20001a30

0800e34c <_evtSbusReceive>:

static void _evtSbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e358:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e35c:	f7f8 fdda 	bl	8006f14 <feature>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d005      	beq.n	800e372 <_evtSbusReceive+0x26>
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f009 fcae 	bl	8017cc8 <pifRc_CheckFailSafe>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d11b      	bne.n	800e3aa <_evtSbusReceive+0x5e>

    failsafeCnt = 0; // clear FailSafe counter
 800e372:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <_evtSbusReceive+0x68>)
 800e374:	2200      	movs	r2, #0
 800e376:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e378:	2300      	movs	r3, #0
 800e37a:	617b      	str	r3, [r7, #20]
 800e37c:	e00c      	b.n	800e398 <_evtSbusReceive+0x4c>
		sbusChannelData[i] = channel[i];
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	68ba      	ldr	r2, [r7, #8]
 800e384:	4413      	add	r3, r2
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	4a0b      	ldr	r2, [pc, #44]	; (800e3b8 <_evtSbusReceive+0x6c>)
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	3301      	adds	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	2b07      	cmp	r3, #7
 800e39c:	ddef      	ble.n	800e37e <_evtSbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 800e3a2:	6938      	ldr	r0, [r7, #16]
 800e3a4:	f006 f930 	bl	8014608 <pifTask_SetTrigger>
 800e3a8:	e000      	b.n	800e3ac <_evtSbusReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e3aa:	bf00      	nop
}
 800e3ac:	3718      	adds	r7, #24
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20001752 	.word	0x20001752
 800e3b8:	20001a30 	.word	0x20001a30

0800e3bc <sbusInit>:

BOOL sbusInit(int uart, rcReadRawDataPtr *callback)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	e00a      	b.n	800e3e2 <sbusInit+0x26>
        sbusChannelData[b] = mcfg.midrc;
 800e3cc:	4b22      	ldr	r3, [pc, #136]	; (800e458 <sbusInit+0x9c>)
 800e3ce:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4a21      	ldr	r2, [pc, #132]	; (800e45c <sbusInit+0xa0>)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b07      	cmp	r3, #7
 800e3e6:	ddf1      	ble.n	800e3cc <sbusInit+0x10>

    core.rcvrport = uartOpen(uart, 100000, (portMode_t)(MODE_RX | MODE_SBUS), 2);	// 2ms
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	2205      	movs	r2, #5
 800e3ec:	491c      	ldr	r1, [pc, #112]	; (800e460 <sbusInit+0xa4>)
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7f3 ff84 	bl	80022fc <uartOpen>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	4a1b      	ldr	r2, [pc, #108]	; (800e464 <sbusInit+0xa8>)
 800e3f8:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 800e3fa:	4b1a      	ldr	r3, [pc, #104]	; (800e464 <sbusInit+0xa8>)
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <sbusInit+0x4a>
 800e402:	2300      	movs	r3, #0
 800e404:	e023      	b.n	800e44e <sbusInit+0x92>

    if (!pifRcSbus_Init(&s_sbus, PIF_ID_AUTO)) return FALSE;
 800e406:	2100      	movs	r1, #0
 800e408:	4817      	ldr	r0, [pc, #92]	; (800e468 <sbusInit+0xac>)
 800e40a:	f00a fafb 	bl	8018a04 <pifRcSbus_Init>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d101      	bne.n	800e418 <sbusInit+0x5c>
 800e414:	2300      	movs	r3, #0
 800e416:	e01a      	b.n	800e44e <sbusInit+0x92>
    pifRc_AttachEvtReceive(&s_sbus.parent, _evtSbusReceive, g_task_compute_rc);
 800e418:	4b14      	ldr	r3, [pc, #80]	; (800e46c <sbusInit+0xb0>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	461a      	mov	r2, r3
 800e41e:	4914      	ldr	r1, [pc, #80]	; (800e470 <sbusInit+0xb4>)
 800e420:	4811      	ldr	r0, [pc, #68]	; (800e468 <sbusInit+0xac>)
 800e422:	f009 fc3f 	bl	8017ca4 <pifRc_AttachEvtReceive>
    pifRcSbus_AttachComm(&s_sbus, &core.rcvrport->comm);
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <sbusInit+0xa8>)
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4619      	mov	r1, r3
 800e42e:	480e      	ldr	r0, [pc, #56]	; (800e468 <sbusInit+0xac>)
 800e430:	f00a fb18 	bl	8018a64 <pifRcSbus_AttachComm>

    if (callback)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <sbusInit+0x84>
        *callback = sbusReadRawRC;
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	4a0d      	ldr	r2, [pc, #52]	; (800e474 <sbusInit+0xb8>)
 800e43e:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 800e440:	4b08      	ldr	r3, [pc, #32]	; (800e464 <sbusInit+0xa8>)
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	3304      	adds	r3, #4
 800e446:	4618      	mov	r0, r3
 800e448:	f7f4 f8c4 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 800e44c:	2301      	movs	r3, #1
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20000848 	.word	0x20000848
 800e45c:	20001a30 	.word	0x20001a30
 800e460:	000186a0 	.word	0x000186a0
 800e464:	20000790 	.word	0x20000790
 800e468:	200019ec 	.word	0x200019ec
 800e46c:	2000157c 	.word	0x2000157c
 800e470:	0800e34d 	.word	0x0800e34d
 800e474:	0800e319 	.word	0x0800e319

0800e478 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e486:	4878      	ldr	r0, [pc, #480]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e488:	f00b fc62 	bl	8019d50 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e48c:	4b77      	ldr	r3, [pc, #476]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e48e:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e492:	4b76      	ldr	r3, [pc, #472]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e494:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e498:	4b74      	ldr	r3, [pc, #464]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e49a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e49e:	4872      	ldr	r0, [pc, #456]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e4a0:	f00b fc64 	bl	8019d6c <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e4a4:	4b71      	ldr	r3, [pc, #452]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e4a6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e4aa:	4b6f      	ldr	r3, [pc, #444]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e4ac:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e4b0:	e010      	b.n	800e4d4 <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	6852      	ldr	r2, [r2, #4]
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	486a      	ldr	r0, [pc, #424]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e4be:	4798      	blx	r3
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d003      	beq.n	800e4ce <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	f7f8 fcf2 	bl	8006eb0 <sensorsSet>
    		break;
 800e4cc:	e006      	b.n	800e4dc <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1ea      	bne.n	800e4b2 <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e4dc:	4b62      	ldr	r3, [pc, #392]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e4de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <sensorsAutodetect+0x70>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	e0ba      	b.n	800e65e <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e4e8:	4b5f      	ldr	r3, [pc, #380]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e4f2:	2002      	movs	r0, #2
 800e4f4:	f7f8 fcdc 	bl	8006eb0 <sensorsSet>
 800e4f8:	e018      	b.n	800e52c <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d015      	beq.n	800e52c <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e500:	e010      	b.n	800e524 <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	6852      	ldr	r2, [r2, #4]
 800e50a:	4611      	mov	r1, r2
 800e50c:	4856      	ldr	r0, [pc, #344]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e50e:	4798      	blx	r3
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e516:	2002      	movs	r0, #2
 800e518:	f7f8 fcca 	bl	8006eb0 <sensorsSet>
        		break;
 800e51c:	e006      	b.n	800e52c <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	3308      	adds	r3, #8
 800e522:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1ea      	bne.n	800e502 <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e52c:	4b4e      	ldr	r3, [pc, #312]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e52e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e536:	2004      	movs	r0, #4
 800e538:	f7f8 fcba 	bl	8006eb0 <sensorsSet>
 800e53c:	e018      	b.n	800e570 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d015      	beq.n	800e570 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e544:	e010      	b.n	800e568 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	6852      	ldr	r2, [r2, #4]
 800e54e:	4611      	mov	r1, r2
 800e550:	4845      	ldr	r0, [pc, #276]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e552:	4798      	blx	r3
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e55a:	2004      	movs	r0, #4
 800e55c:	f7f8 fca8 	bl	8006eb0 <sensorsSet>
				break;
 800e560:	e006      	b.n	800e570 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3308      	adds	r3, #8
 800e566:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1ea      	bne.n	800e546 <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e570:	2002      	movs	r0, #2
 800e572:	f7f8 fc87 	bl	8006e84 <sensors>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d008      	beq.n	800e58e <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e57c:	4b3a      	ldr	r3, [pc, #232]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e57e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e582:	4a3a      	ldr	r2, [pc, #232]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e584:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e588:	4611      	mov	r1, r2
 800e58a:	4837      	ldr	r0, [pc, #220]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e58c:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e58e:	4b36      	ldr	r3, [pc, #216]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e592:	4a36      	ldr	r2, [pc, #216]	; (800e66c <sensorsAutodetect+0x1f4>)
 800e594:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e598:	4611      	mov	r1, r2
 800e59a:	4833      	ldr	r0, [pc, #204]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e59c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e59e:	4b32      	ldr	r3, [pc, #200]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e5a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d003      	beq.n	800e5b0 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e5a8:	2008      	movs	r0, #8
 800e5aa:	f7f8 fc81 	bl	8006eb0 <sensorsSet>
 800e5ae:	e018      	b.n	800e5e2 <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d015      	beq.n	800e5e2 <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e5b6:	e010      	b.n	800e5da <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	6852      	ldr	r2, [r2, #4]
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4829      	ldr	r0, [pc, #164]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e5c4:	4798      	blx	r3
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d003      	beq.n	800e5d4 <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e5cc:	2008      	movs	r0, #8
 800e5ce:	f7f8 fc6f 	bl	8006eb0 <sensorsSet>
				break;
 800e5d2:	e006      	b.n	800e5e2 <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1ea      	bne.n	800e5b8 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e5e2:	4b23      	ldr	r3, [pc, #140]	; (800e670 <sensorsAutodetect+0x1f8>)
 800e5e4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5e8:	4a22      	ldr	r2, [pc, #136]	; (800e674 <sensorsAutodetect+0x1fc>)
 800e5ea:	fb82 1203 	smull	r1, r2, r2, r3
 800e5ee:	1152      	asrs	r2, r2, #5
 800e5f0:	17db      	asrs	r3, r3, #31
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e5f6:	4b1e      	ldr	r3, [pc, #120]	; (800e670 <sensorsAutodetect+0x1f8>)
 800e5f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5fc:	4a1d      	ldr	r2, [pc, #116]	; (800e674 <sensorsAutodetect+0x1fc>)
 800e5fe:	fb82 1203 	smull	r1, r2, r2, r3
 800e602:	1151      	asrs	r1, r2, #5
 800e604:	17da      	asrs	r2, r3, #31
 800e606:	1a8a      	subs	r2, r1, r2
 800e608:	2164      	movs	r1, #100	; 0x64
 800e60a:	fb01 f202 	mul.w	r2, r1, r2
 800e60e:	1a9b      	subs	r3, r3, r2
 800e610:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e612:	2008      	movs	r0, #8
 800e614:	f7f8 fc36 	bl	8006e84 <sensors>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d019      	beq.n	800e652 <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e61e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e622:	ee07 3a90 	vmov	s15, r3
 800e626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e62a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e62e:	ee07 3a90 	vmov	s15, r3
 800e632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e636:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e678 <sensorsAutodetect+0x200>
 800e63a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e642:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e64a:	4b07      	ldr	r3, [pc, #28]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e64c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800e650:	e004      	b.n	800e65c <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800e652:	4b05      	ldr	r3, [pc, #20]	; (800e668 <sensorsAutodetect+0x1f0>)
 800e654:	f04f 0200 	mov.w	r2, #0
 800e658:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800e65c:	2301      	movs	r3, #1
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3718      	adds	r7, #24
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20000060 	.word	0x20000060
 800e66c:	20000848 	.word	0x20000848
 800e670:	20000db4 	.word	0x20000db4
 800e674:	51eb851f 	.word	0x51eb851f
 800e678:	3c888889 	.word	0x3c888889

0800e67c <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e686:	4b2a      	ldr	r3, [pc, #168]	; (800e730 <RSSI_getValue+0xb4>)
 800e688:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d029      	beq.n	800e6e4 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e690:	4b27      	ldr	r3, [pc, #156]	; (800e730 <RSSI_getValue+0xb4>)
 800e692:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e696:	3303      	adds	r3, #3
 800e698:	4a26      	ldr	r2, [pc, #152]	; (800e734 <RSSI_getValue+0xb8>)
 800e69a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e69e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e6a8:	4a21      	ldr	r2, [pc, #132]	; (800e730 <RSSI_getValue+0xb4>)
 800e6aa:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7f5 faa9 	bl	8003c08 <constrain>
 800e6b6:	ee07 0a90 	vmov	s15, r0
 800e6ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e6be:	4b1c      	ldr	r3, [pc, #112]	; (800e730 <RSSI_getValue+0xb4>)
 800e6c0:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e6c4:	ee07 3a90 	vmov	s15, r3
 800e6c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6d0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e738 <RSSI_getValue+0xbc>
 800e6d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6dc:	ee17 3a90 	vmov	r3, s15
 800e6e0:	80fb      	strh	r3, [r7, #6]
 800e6e2:	e020      	b.n	800e726 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e6e4:	4b12      	ldr	r3, [pc, #72]	; (800e730 <RSSI_getValue+0xb4>)
 800e6e6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01b      	beq.n	800e726 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e6ee:	2003      	movs	r0, #3
 800e6f0:	f7f2 fd5a 	bl	80011a8 <actGetAdcChannel>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	4b0d      	ldr	r3, [pc, #52]	; (800e730 <RSSI_getValue+0xb4>)
 800e6fa:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e6fe:	1ad2      	subs	r2, r2, r3
 800e700:	4613      	mov	r3, r2
 800e702:	029b      	lsls	r3, r3, #10
 800e704:	1a9b      	subs	r3, r3, r2
 800e706:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <RSSI_getValue+0xb4>)
 800e708:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e710:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e716:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e71a:	2100      	movs	r1, #0
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7f5 fa73 	bl	8003c08 <constrain>
 800e722:	4603      	mov	r3, r0
 800e724:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e726:	88fb      	ldrh	r3, [r7, #6]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20000848 	.word	0x20000848
 800e734:	20001758 	.word	0x20001758
 800e738:	447fc000 	.word	0x447fc000

0800e73c <batteryInit>:

void batteryInit(void)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e742:	f04f 0300 	mov.w	r3, #0
 800e746:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e748:	2300      	movs	r3, #0
 800e74a:	607b      	str	r3, [r7, #4]
 800e74c:	e018      	b.n	800e780 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e74e:	f7f2 fd3d 	bl	80011cc <actGetBatteryVoltage>
 800e752:	eeb0 7a40 	vmov.f32	s14, s0
 800e756:	4b2d      	ldr	r3, [pc, #180]	; (800e80c <batteryInit+0xd0>)
 800e758:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e75c:	ee07 3a90 	vmov	s15, r3
 800e760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e768:	ed97 7a00 	vldr	s14, [r7]
 800e76c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e770:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e774:	200a      	movs	r0, #10
 800e776:	f002 fe23 	bl	80113c0 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	3301      	adds	r3, #1
 800e77e:	607b      	str	r3, [r7, #4]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b1f      	cmp	r3, #31
 800e784:	d9e3      	bls.n	800e74e <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e786:	ed97 7a00 	vldr	s14, [r7]
 800e78a:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e810 <batteryInit+0xd4>
 800e78e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e792:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e796:	2301      	movs	r3, #1
 800e798:	607b      	str	r3, [r7, #4]
 800e79a:	e014      	b.n	800e7c6 <batteryInit+0x8a>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e79c:	4b1b      	ldr	r3, [pc, #108]	; (800e80c <batteryInit+0xd0>)
 800e79e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	fb02 f303 	mul.w	r3, r2, r3
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	ed97 7a00 	vldr	s14, [r7]
 800e7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	d406      	bmi.n	800e7ce <batteryInit+0x92>
    for (i = 1; i < 8; i++) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	607b      	str	r3, [r7, #4]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b07      	cmp	r3, #7
 800e7ca:	d9e7      	bls.n	800e79c <batteryInit+0x60>
 800e7cc:	e000      	b.n	800e7d0 <batteryInit+0x94>
            break;
 800e7ce:	bf00      	nop
    }
    batteryCellCount = i;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	4b0f      	ldr	r3, [pc, #60]	; (800e814 <batteryInit+0xd8>)
 800e7d6:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	; (800e80c <batteryInit+0xd0>)
 800e7da:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	fb12 f303 	smulbb	r3, r2, r3
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	4b0b      	ldr	r3, [pc, #44]	; (800e818 <batteryInit+0xdc>)
 800e7ec:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e7ee:	4b07      	ldr	r3, [pc, #28]	; (800e80c <batteryInit+0xd0>)
 800e7f0:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	fb12 f303 	smulbb	r3, r2, r3
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	4b06      	ldr	r3, [pc, #24]	; (800e81c <batteryInit+0xe0>)
 800e802:	801a      	strh	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20000848 	.word	0x20000848
 800e810:	42000000 	.word	0x42000000
 800e814:	20000054 	.word	0x20000054
 800e818:	200018c2 	.word	0x200018c2
 800e81c:	200018c4 	.word	0x200018c4

0800e820 <ACC_Common>:

static void ACC_Common(void)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e826:	4b4e      	ldr	r3, [pc, #312]	; (800e960 <ACC_Common+0x140>)
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d06c      	beq.n	800e908 <ACC_Common+0xe8>
        for (axis = 0; axis < 3; axis++) {
 800e82e:	2300      	movs	r3, #0
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	e025      	b.n	800e880 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e834:	4b4a      	ldr	r3, [pc, #296]	; (800e960 <ACC_Common+0x140>)
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e83c:	d104      	bne.n	800e848 <ACC_Common+0x28>
                a[axis] = 0;
 800e83e:	4a49      	ldr	r2, [pc, #292]	; (800e964 <ACC_Common+0x144>)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2100      	movs	r1, #0
 800e844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e848:	4a46      	ldr	r2, [pc, #280]	; (800e964 <ACC_Common+0x144>)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e850:	4945      	ldr	r1, [pc, #276]	; (800e968 <ACC_Common+0x148>)
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e858:	441a      	add	r2, r3
 800e85a:	4942      	ldr	r1, [pc, #264]	; (800e964 <ACC_Common+0x144>)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e862:	4a41      	ldr	r2, [pc, #260]	; (800e968 <ACC_Common+0x148>)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2100      	movs	r1, #0
 800e868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e86c:	4a3f      	ldr	r2, [pc, #252]	; (800e96c <ACC_Common+0x14c>)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	33b4      	adds	r3, #180	; 0xb4
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	4413      	add	r3, r2
 800e876:	2200      	movs	r2, #0
 800e878:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3301      	adds	r3, #1
 800e87e:	607b      	str	r3, [r7, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b02      	cmp	r3, #2
 800e884:	ddd6      	ble.n	800e834 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e886:	4b36      	ldr	r3, [pc, #216]	; (800e960 <ACC_Common+0x140>)
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d136      	bne.n	800e8fc <ACC_Common+0xdc>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e88e:	4b35      	ldr	r3, [pc, #212]	; (800e964 <ACC_Common+0x144>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	33c8      	adds	r3, #200	; 0xc8
 800e894:	4a36      	ldr	r2, [pc, #216]	; (800e970 <ACC_Common+0x150>)
 800e896:	fb82 1203 	smull	r1, r2, r2, r3
 800e89a:	11d2      	asrs	r2, r2, #7
 800e89c:	17db      	asrs	r3, r3, #31
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	b21a      	sxth	r2, r3
 800e8a2:	4b32      	ldr	r3, [pc, #200]	; (800e96c <ACC_Common+0x14c>)
 800e8a4:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e8a8:	4b2e      	ldr	r3, [pc, #184]	; (800e964 <ACC_Common+0x144>)
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	33c8      	adds	r3, #200	; 0xc8
 800e8ae:	4a30      	ldr	r2, [pc, #192]	; (800e970 <ACC_Common+0x150>)
 800e8b0:	fb82 1203 	smull	r1, r2, r2, r3
 800e8b4:	11d2      	asrs	r2, r2, #7
 800e8b6:	17db      	asrs	r3, r3, #31
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	b21a      	sxth	r2, r3
 800e8bc:	4b2b      	ldr	r3, [pc, #172]	; (800e96c <ACC_Common+0x14c>)
 800e8be:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800e8c2:	4b28      	ldr	r3, [pc, #160]	; (800e964 <ACC_Common+0x144>)
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	33c8      	adds	r3, #200	; 0xc8
 800e8c8:	4a29      	ldr	r2, [pc, #164]	; (800e970 <ACC_Common+0x150>)
 800e8ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e8ce:	11d2      	asrs	r2, r2, #7
 800e8d0:	17db      	asrs	r3, r3, #31
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	4b27      	ldr	r3, [pc, #156]	; (800e974 <ACC_Common+0x154>)
 800e8d8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	b21a      	sxth	r2, r3
 800e8e2:	4b22      	ldr	r3, [pc, #136]	; (800e96c <ACC_Common+0x14c>)
 800e8e4:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e8e8:	4b23      	ldr	r3, [pc, #140]	; (800e978 <ACC_Common+0x158>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8ee:	4b22      	ldr	r3, [pc, #136]	; (800e978 <ACC_Common+0x158>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	f7f7 ff2a 	bl	8006750 <writeEEPROM>
        }
        calibratingA--;
 800e8fc:	4b18      	ldr	r3, [pc, #96]	; (800e960 <ACC_Common+0x140>)
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	3b01      	subs	r3, #1
 800e902:	b29a      	uxth	r2, r3
 800e904:	4b16      	ldr	r3, [pc, #88]	; (800e960 <ACC_Common+0x140>)
 800e906:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e908:	2004      	movs	r0, #4
 800e90a:	f7f8 fb03 	bl	8006f14 <feature>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 80cb 	beq.w	800eaac <ACC_Common+0x28c>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e916:	4b19      	ldr	r3, [pc, #100]	; (800e97c <ACC_Common+0x15c>)
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	2b32      	cmp	r3, #50	; 0x32
 800e91c:	d118      	bne.n	800e950 <ACC_Common+0x130>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e91e:	4b13      	ldr	r3, [pc, #76]	; (800e96c <ACC_Common+0x14c>)
 800e920:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e924:	4b16      	ldr	r3, [pc, #88]	; (800e980 <ACC_Common+0x160>)
 800e926:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e928:	4b10      	ldr	r3, [pc, #64]	; (800e96c <ACC_Common+0x14c>)
 800e92a:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e92e:	4b14      	ldr	r3, [pc, #80]	; (800e980 <ACC_Common+0x160>)
 800e930:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e932:	4b0e      	ldr	r3, [pc, #56]	; (800e96c <ACC_Common+0x14c>)
 800e934:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e938:	4b11      	ldr	r3, [pc, #68]	; (800e980 <ACC_Common+0x160>)
 800e93a:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e93c:	4b0e      	ldr	r3, [pc, #56]	; (800e978 <ACC_Common+0x158>)
 800e93e:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e942:	4b10      	ldr	r3, [pc, #64]	; (800e984 <ACC_Common+0x164>)
 800e944:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e946:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <ACC_Common+0x158>)
 800e948:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e94c:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <ACC_Common+0x164>)
 800e94e:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <ACC_Common+0x15c>)
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d06e      	beq.n	800ea36 <ACC_Common+0x216>
            for (axis = 0; axis < 3; axis++) {
 800e958:	2300      	movs	r3, #0
 800e95a:	607b      	str	r3, [r7, #4]
 800e95c:	e039      	b.n	800e9d2 <ACC_Common+0x1b2>
 800e95e:	bf00      	nop
 800e960:	20001a50 	.word	0x20001a50
 800e964:	20001a6c 	.word	0x20001a6c
 800e968:	20001448 	.word	0x20001448
 800e96c:	20000848 	.word	0x20000848
 800e970:	51eb851f 	.word	0x51eb851f
 800e974:	20000060 	.word	0x20000060
 800e978:	20000db4 	.word	0x20000db4
 800e97c:	200018c0 	.word	0x200018c0
 800e980:	20001a78 	.word	0x20001a78
 800e984:	20001a80 	.word	0x20001a80
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e988:	4b5e      	ldr	r3, [pc, #376]	; (800eb04 <ACC_Common+0x2e4>)
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	2b32      	cmp	r3, #50	; 0x32
 800e98e:	d104      	bne.n	800e99a <ACC_Common+0x17a>
                    b[axis] = 0;
 800e990:	4a5d      	ldr	r2, [pc, #372]	; (800eb08 <ACC_Common+0x2e8>)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2100      	movs	r1, #0
 800e996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e99a:	4a5b      	ldr	r2, [pc, #364]	; (800eb08 <ACC_Common+0x2e8>)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9a2:	495a      	ldr	r1, [pc, #360]	; (800eb0c <ACC_Common+0x2ec>)
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	4956      	ldr	r1, [pc, #344]	; (800eb08 <ACC_Common+0x2e8>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e9b4:	4a55      	ldr	r2, [pc, #340]	; (800eb0c <ACC_Common+0x2ec>)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e9be:	4a54      	ldr	r2, [pc, #336]	; (800eb10 <ACC_Common+0x2f0>)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	33b4      	adds	r3, #180	; 0xb4
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	607b      	str	r3, [r7, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	ddd7      	ble.n	800e988 <ACC_Common+0x168>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e9d8:	4b4a      	ldr	r3, [pc, #296]	; (800eb04 <ACC_Common+0x2e4>)
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d124      	bne.n	800ea2a <ACC_Common+0x20a>
                AccInflightCalibrationActive = false;
 800e9e0:	4b4c      	ldr	r3, [pc, #304]	; (800eb14 <ACC_Common+0x2f4>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e9e6:	4b4c      	ldr	r3, [pc, #304]	; (800eb18 <ACC_Common+0x2f8>)
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e9ec:	200a      	movs	r0, #10
 800e9ee:	f7f5 fa9b 	bl	8003f28 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e9f2:	4b4a      	ldr	r3, [pc, #296]	; (800eb1c <ACC_Common+0x2fc>)
 800e9f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9f8:	4b45      	ldr	r3, [pc, #276]	; (800eb10 <ACC_Common+0x2f0>)
 800e9fa:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e9fe:	4b47      	ldr	r3, [pc, #284]	; (800eb1c <ACC_Common+0x2fc>)
 800ea00:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea04:	4b42      	ldr	r3, [pc, #264]	; (800eb10 <ACC_Common+0x2f0>)
 800ea06:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800ea0a:	4b44      	ldr	r3, [pc, #272]	; (800eb1c <ACC_Common+0x2fc>)
 800ea0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ea10:	4b3f      	ldr	r3, [pc, #252]	; (800eb10 <ACC_Common+0x2f0>)
 800ea12:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800ea16:	4b42      	ldr	r3, [pc, #264]	; (800eb20 <ACC_Common+0x300>)
 800ea18:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ea1c:	4b41      	ldr	r3, [pc, #260]	; (800eb24 <ACC_Common+0x304>)
 800ea1e:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800ea20:	4b3f      	ldr	r3, [pc, #252]	; (800eb20 <ACC_Common+0x300>)
 800ea22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea26:	4b3f      	ldr	r3, [pc, #252]	; (800eb24 <ACC_Common+0x304>)
 800ea28:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800ea2a:	4b36      	ldr	r3, [pc, #216]	; (800eb04 <ACC_Common+0x2e4>)
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	4b34      	ldr	r3, [pc, #208]	; (800eb04 <ACC_Common+0x2e4>)
 800ea34:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800ea36:	4b3c      	ldr	r3, [pc, #240]	; (800eb28 <ACC_Common+0x308>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d036      	beq.n	800eaac <ACC_Common+0x28c>
            AccInflightCalibrationSavetoEEProm = false;
 800ea3e:	4b3a      	ldr	r3, [pc, #232]	; (800eb28 <ACC_Common+0x308>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800ea44:	4b30      	ldr	r3, [pc, #192]	; (800eb08 <ACC_Common+0x2e8>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a38      	ldr	r2, [pc, #224]	; (800eb2c <ACC_Common+0x30c>)
 800ea4a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea4e:	1112      	asrs	r2, r2, #4
 800ea50:	17db      	asrs	r3, r3, #31
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	b21a      	sxth	r2, r3
 800ea56:	4b2e      	ldr	r3, [pc, #184]	; (800eb10 <ACC_Common+0x2f0>)
 800ea58:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800ea5c:	4b2a      	ldr	r3, [pc, #168]	; (800eb08 <ACC_Common+0x2e8>)
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	4a32      	ldr	r2, [pc, #200]	; (800eb2c <ACC_Common+0x30c>)
 800ea62:	fb82 1203 	smull	r1, r2, r2, r3
 800ea66:	1112      	asrs	r2, r2, #4
 800ea68:	17db      	asrs	r3, r3, #31
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	b21a      	sxth	r2, r3
 800ea6e:	4b28      	ldr	r3, [pc, #160]	; (800eb10 <ACC_Common+0x2f0>)
 800ea70:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800ea74:	4b24      	ldr	r3, [pc, #144]	; (800eb08 <ACC_Common+0x2e8>)
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	4a2c      	ldr	r2, [pc, #176]	; (800eb2c <ACC_Common+0x30c>)
 800ea7a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea7e:	1112      	asrs	r2, r2, #4
 800ea80:	17db      	asrs	r3, r3, #31
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	4b2a      	ldr	r3, [pc, #168]	; (800eb30 <ACC_Common+0x310>)
 800ea88:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	b21a      	sxth	r2, r3
 800ea92:	4b1f      	ldr	r3, [pc, #124]	; (800eb10 <ACC_Common+0x2f0>)
 800ea94:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800ea98:	4b22      	ldr	r3, [pc, #136]	; (800eb24 <ACC_Common+0x304>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800ea9e:	4b21      	ldr	r3, [pc, #132]	; (800eb24 <ACC_Common+0x304>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	f7f7 fe52 	bl	8006750 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800eaac:	4b17      	ldr	r3, [pc, #92]	; (800eb0c <ACC_Common+0x2ec>)
 800eaae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	4b16      	ldr	r3, [pc, #88]	; (800eb10 <ACC_Common+0x2f0>)
 800eab6:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	b21a      	sxth	r2, r3
 800eac2:	4b12      	ldr	r3, [pc, #72]	; (800eb0c <ACC_Common+0x2ec>)
 800eac4:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800eac6:	4b11      	ldr	r3, [pc, #68]	; (800eb0c <ACC_Common+0x2ec>)
 800eac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eacc:	b29a      	uxth	r2, r3
 800eace:	4b10      	ldr	r3, [pc, #64]	; (800eb10 <ACC_Common+0x2f0>)
 800ead0:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	b29b      	uxth	r3, r3
 800eada:	b21a      	sxth	r2, r3
 800eadc:	4b0b      	ldr	r3, [pc, #44]	; (800eb0c <ACC_Common+0x2ec>)
 800eade:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800eae0:	4b0a      	ldr	r3, [pc, #40]	; (800eb0c <ACC_Common+0x2ec>)
 800eae2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <ACC_Common+0x2f0>)
 800eaea:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	b21a      	sxth	r2, r3
 800eaf6:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <ACC_Common+0x2ec>)
 800eaf8:	809a      	strh	r2, [r3, #4]
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	200018c0 	.word	0x200018c0
 800eb08:	20001a84 	.word	0x20001a84
 800eb0c:	20001448 	.word	0x20001448
 800eb10:	20000848 	.word	0x20000848
 800eb14:	200018bf 	.word	0x200018bf
 800eb18:	200018bd 	.word	0x200018bd
 800eb1c:	20001a78 	.word	0x20001a78
 800eb20:	20001a80 	.word	0x20001a80
 800eb24:	20000db4 	.word	0x20000db4
 800eb28:	200018be 	.word	0x200018be
 800eb2c:	51eb851f 	.word	0x51eb851f
 800eb30:	20000060 	.word	0x20000060

0800eb34 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <ACC_getADC+0x24>)
 800eb3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb3e:	4907      	ldr	r1, [pc, #28]	; (800eb5c <ACC_getADC+0x28>)
 800eb40:	4805      	ldr	r0, [pc, #20]	; (800eb58 <ACC_getADC+0x24>)
 800eb42:	4798      	blx	r3
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <ACC_getADC+0x1e>
    	ACC_Common();
 800eb4a:	f7ff fe69 	bl	800e820 <ACC_Common>
    	return TRUE;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e000      	b.n	800eb54 <ACC_getADC+0x20>
    }
	return FALSE;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20000060 	.word	0x20000060
 800eb5c:	20001448 	.word	0x20001448

0800eb60 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800eb66:	4b18      	ldr	r3, [pc, #96]	; (800ebc8 <Baro_Common+0x68>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800eb6e:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <Baro_Common+0x6c>)
 800eb70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb74:	461a      	mov	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	db01      	blt.n	800eb80 <Baro_Common+0x20>
        indexplus1 = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800eb80:	4b11      	ldr	r3, [pc, #68]	; (800ebc8 <Baro_Common+0x68>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4a12      	ldr	r2, [pc, #72]	; (800ebd0 <Baro_Common+0x70>)
 800eb86:	6812      	ldr	r2, [r2, #0]
 800eb88:	4912      	ldr	r1, [pc, #72]	; (800ebd4 <Baro_Common+0x74>)
 800eb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800eb8e:	4b0e      	ldr	r3, [pc, #56]	; (800ebc8 <Baro_Common+0x68>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a10      	ldr	r2, [pc, #64]	; (800ebd4 <Baro_Common+0x74>)
 800eb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <Baro_Common+0x78>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4413      	add	r3, r2
 800eba0:	4a0d      	ldr	r2, [pc, #52]	; (800ebd8 <Baro_Common+0x78>)
 800eba2:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800eba4:	4b0c      	ldr	r3, [pc, #48]	; (800ebd8 <Baro_Common+0x78>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	490a      	ldr	r1, [pc, #40]	; (800ebd4 <Baro_Common+0x74>)
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ebb0:	1a9b      	subs	r3, r3, r2
 800ebb2:	4a09      	ldr	r2, [pc, #36]	; (800ebd8 <Baro_Common+0x78>)
 800ebb4:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800ebb6:	4a04      	ldr	r2, [pc, #16]	; (800ebc8 <Baro_Common+0x68>)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6013      	str	r3, [r2, #0]
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	20001a90 	.word	0x20001a90
 800ebcc:	20000db4 	.word	0x20000db4
 800ebd0:	20001a5c 	.word	0x20001a5c
 800ebd4:	20001a94 	.word	0x20001a94
 800ebd8:	20001478 	.word	0x20001478

0800ebdc <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	ed87 0a01 	vstr	s0, [r7, #4]
 800ebe6:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800ebea:	edd7 7a01 	vldr	s15, [r7, #4]
 800ebee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ec34 <evtBaroRead+0x58>
 800ebf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebfa:	ee17 2a90 	vmov	r2, s15
 800ebfe:	4b0e      	ldr	r3, [pc, #56]	; (800ec38 <evtBaroRead+0x5c>)
 800ec00:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800ec02:	edd7 7a00 	vldr	s15, [r7]
 800ec06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ec34 <evtBaroRead+0x58>
 800ec0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec12:	ee17 2a90 	vmov	r2, s15
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <evtBaroRead+0x60>)
 800ec18:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ec1a:	f7ff ffa1 	bl	800eb60 <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800ec1e:	4b08      	ldr	r3, [pc, #32]	; (800ec40 <evtBaroRead+0x64>)
 800ec20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ec24:	4618      	mov	r0, r3
 800ec26:	f005 fcef 	bl	8014608 <pifTask_SetTrigger>
}
 800ec2a:	bf00      	nop
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	42c80000 	.word	0x42c80000
 800ec38:	20001a5c 	.word	0x20001a5c
 800ec3c:	20001a60 	.word	0x20001a60
 800ec40:	20000060 	.word	0x20000060

0800ec44 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	611a      	str	r2, [r3, #16]
}
 800ec52:	bf00      	nop
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d10b      	bne.n	800ec94 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	605a      	str	r2, [r3, #4]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f04f 0200 	mov.w	r2, #0
 800ec90:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ec92:	e036      	b.n	800ed02 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	ed93 7a00 	vldr	s14, [r3]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	edd3 7a00 	vldr	s15, [r3]
 800eca0:	edd7 6a00 	vldr	s13, [r7]
 800eca4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	ee07 3a90 	vmov	s15, r3
 800ecb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ecb4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ecb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	ed93 7a02 	vldr	s14, [r3, #8]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	edd3 7a00 	vldr	s15, [r3]
 800ecce:	edd7 6a00 	vldr	s13, [r7]
 800ecd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ecdc:	ed97 6a00 	vldr	s12, [r7]
 800ece0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ece4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ece8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	609a      	str	r2, [r3, #8]
}
 800ed02:	bf00      	nop
 800ed04:	370c      	adds	r7, #12
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
	...

0800ed10 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	dd0c      	ble.n	800ed3a <devVariance+0x2a>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	ed93 7a03 	vldr	s14, [r3, #12]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	ee07 3a90 	vmov	s15, r3
 800ed30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ed38:	e001      	b.n	800ed3e <devVariance+0x2e>
 800ed3a:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ed50 <devVariance+0x40>
 800ed3e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ed42:	eeb0 0a67 	vmov.f32	s0, s15
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr
 800ed50:	00000000 	.word	0x00000000

0800ed54 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7ff ffd7 	bl	800ed10 <devVariance>
 800ed62:	eef0 7a40 	vmov.f32	s15, s0
 800ed66:	eeb0 0a67 	vmov.f32	s0, s15
 800ed6a:	f014 ff6d 	bl	8023c48 <sqrtf>
 800ed6e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ed72:	eeb0 0a67 	vmov.f32	s0, s15
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <GYRO_Common>:

static void GYRO_Common(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800ed82:	4b62      	ldr	r3, [pc, #392]	; (800ef0c <GYRO_Common+0x190>)
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 80a1 	beq.w	800eece <GYRO_Common+0x152>
        for (axis = 0; axis < 3; axis++) {
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	607b      	str	r3, [r7, #4]
 800ed90:	e093      	b.n	800eeba <GYRO_Common+0x13e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800ed92:	4b5e      	ldr	r3, [pc, #376]	; (800ef0c <GYRO_Common+0x190>)
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed9a:	d10e      	bne.n	800edba <GYRO_Common+0x3e>
                g[axis] = 0;
 800ed9c:	4a5c      	ldr	r2, [pc, #368]	; (800ef10 <GYRO_Common+0x194>)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2100      	movs	r1, #0
 800eda2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	4613      	mov	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4413      	add	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4a58      	ldr	r2, [pc, #352]	; (800ef14 <GYRO_Common+0x198>)
 800edb2:	4413      	add	r3, r2
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7ff ff45 	bl	800ec44 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800edba:	4a55      	ldr	r2, [pc, #340]	; (800ef10 <GYRO_Common+0x194>)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edc2:	4955      	ldr	r1, [pc, #340]	; (800ef18 <GYRO_Common+0x19c>)
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800edca:	441a      	add	r2, r3
 800edcc:	4950      	ldr	r1, [pc, #320]	; (800ef10 <GYRO_Common+0x194>)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	4613      	mov	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4a4d      	ldr	r2, [pc, #308]	; (800ef14 <GYRO_Common+0x198>)
 800ede0:	441a      	add	r2, r3
 800ede2:	494d      	ldr	r1, [pc, #308]	; (800ef18 <GYRO_Common+0x19c>)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800edea:	ee07 3a90 	vmov	s15, r3
 800edee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edf2:	eeb0 0a67 	vmov.f32	s0, s15
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7ff ff31 	bl	800ec5e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800edfc:	4a46      	ldr	r2, [pc, #280]	; (800ef18 <GYRO_Common+0x19c>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2100      	movs	r1, #0
 800ee02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ee06:	4a45      	ldr	r2, [pc, #276]	; (800ef1c <GYRO_Common+0x1a0>)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ee10:	4b3e      	ldr	r3, [pc, #248]	; (800ef0c <GYRO_Common+0x190>)
 800ee12:	881b      	ldrh	r3, [r3, #0]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d14d      	bne.n	800eeb4 <GYRO_Common+0x138>
                float dev = devStandardDeviation(&var[axis]);
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4a3c      	ldr	r2, [pc, #240]	; (800ef14 <GYRO_Common+0x198>)
 800ee24:	4413      	add	r3, r2
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff ff94 	bl	800ed54 <devStandardDeviation>
 800ee2c:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ee30:	4b3b      	ldr	r3, [pc, #236]	; (800ef20 <GYRO_Common+0x1a4>)
 800ee32:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d026      	beq.n	800ee88 <GYRO_Common+0x10c>
 800ee3a:	4b39      	ldr	r3, [pc, #228]	; (800ef20 <GYRO_Common+0x1a4>)
 800ee3c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee40:	ee07 3a90 	vmov	s15, r3
 800ee44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee48:	ed97 7a00 	vldr	s14, [r7]
 800ee4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee54:	dd18      	ble.n	800ee88 <GYRO_Common+0x10c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ee56:	4b2d      	ldr	r3, [pc, #180]	; (800ef0c <GYRO_Common+0x190>)
 800ee58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee5c:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ee5e:	482d      	ldr	r0, [pc, #180]	; (800ef14 <GYRO_Common+0x198>)
 800ee60:	f7ff fef0 	bl	800ec44 <devClear>
                    devClear(&var[1]);
 800ee64:	482f      	ldr	r0, [pc, #188]	; (800ef24 <GYRO_Common+0x1a8>)
 800ee66:	f7ff feed 	bl	800ec44 <devClear>
                    devClear(&var[2]);
 800ee6a:	482f      	ldr	r0, [pc, #188]	; (800ef28 <GYRO_Common+0x1ac>)
 800ee6c:	f7ff feea 	bl	800ec44 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ee70:	4b27      	ldr	r3, [pc, #156]	; (800ef10 <GYRO_Common+0x194>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	609a      	str	r2, [r3, #8]
 800ee76:	4b26      	ldr	r3, [pc, #152]	; (800ef10 <GYRO_Common+0x194>)
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	4a25      	ldr	r2, [pc, #148]	; (800ef10 <GYRO_Common+0x194>)
 800ee7c:	6053      	str	r3, [r2, #4]
 800ee7e:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <GYRO_Common+0x194>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	4a23      	ldr	r2, [pc, #140]	; (800ef10 <GYRO_Common+0x194>)
 800ee84:	6013      	str	r3, [r2, #0]
                    continue;
 800ee86:	e015      	b.n	800eeb4 <GYRO_Common+0x138>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ee88:	4a21      	ldr	r2, [pc, #132]	; (800ef10 <GYRO_Common+0x194>)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ee94:	4a25      	ldr	r2, [pc, #148]	; (800ef2c <GYRO_Common+0x1b0>)
 800ee96:	fb82 1203 	smull	r1, r2, r2, r3
 800ee9a:	1192      	asrs	r2, r2, #6
 800ee9c:	17db      	asrs	r3, r3, #31
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	b219      	sxth	r1, r3
 800eea2:	4a1e      	ldr	r2, [pc, #120]	; (800ef1c <GYRO_Common+0x1a0>)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800eeaa:	2201      	movs	r2, #1
 800eeac:	210f      	movs	r1, #15
 800eeae:	200a      	movs	r0, #10
 800eeb0:	f7fd f8aa 	bl	800c008 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	f77f af68 	ble.w	800ed92 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800eec2:	4b12      	ldr	r3, [pc, #72]	; (800ef0c <GYRO_Common+0x190>)
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	3b01      	subs	r3, #1
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	4b10      	ldr	r3, [pc, #64]	; (800ef0c <GYRO_Common+0x190>)
 800eecc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800eece:	2300      	movs	r3, #0
 800eed0:	607b      	str	r3, [r7, #4]
 800eed2:	e013      	b.n	800eefc <GYRO_Common+0x180>
        gyroADC[axis] -= gyroZero[axis];
 800eed4:	4a10      	ldr	r2, [pc, #64]	; (800ef18 <GYRO_Common+0x19c>)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800eedc:	b29a      	uxth	r2, r3
 800eede:	490f      	ldr	r1, [pc, #60]	; (800ef1c <GYRO_Common+0x1a0>)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	b219      	sxth	r1, r3
 800eeee:	4a0a      	ldr	r2, [pc, #40]	; (800ef18 <GYRO_Common+0x19c>)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	3301      	adds	r3, #1
 800eefa:	607b      	str	r3, [r7, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	dde8      	ble.n	800eed4 <GYRO_Common+0x158>
}
 800ef02:	bf00      	nop
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	20001a54 	.word	0x20001a54
 800ef10:	20001b54 	.word	0x20001b54
 800ef14:	20001b60 	.word	0x20001b60
 800ef18:	20001440 	.word	0x20001440
 800ef1c:	200014c0 	.word	0x200014c0
 800ef20:	20000848 	.word	0x20000848
 800ef24:	20001b74 	.word	0x20001b74
 800ef28:	20001b88 	.word	0x20001b88
 800ef2c:	10624dd3 	.word	0x10624dd3

0800ef30 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800ef34:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <Gyro_getADC+0x24>)
 800ef36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef3a:	4907      	ldr	r1, [pc, #28]	; (800ef58 <Gyro_getADC+0x28>)
 800ef3c:	4805      	ldr	r0, [pc, #20]	; (800ef54 <Gyro_getADC+0x24>)
 800ef3e:	4798      	blx	r3
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <Gyro_getADC+0x1e>
    	GYRO_Common();
 800ef46:	f7ff ff19 	bl	800ed7c <GYRO_Common>
    	return TRUE;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <Gyro_getADC+0x20>
    }
    return FALSE;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	20000060 	.word	0x20000060
 800ef58:	20001440 	.word	0x20001440

0800ef5c <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800ef60:	2001      	movs	r0, #1
 800ef62:	f7f3 f8b5 	bl	80020d0 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800ef66:	4b08      	ldr	r3, [pc, #32]	; (800ef88 <Mag_init+0x2c>)
 800ef68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ef6c:	4a07      	ldr	r2, [pc, #28]	; (800ef8c <Mag_init+0x30>)
 800ef6e:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800ef72:	4611      	mov	r1, r2
 800ef74:	4804      	ldr	r0, [pc, #16]	; (800ef88 <Mag_init+0x2c>)
 800ef76:	4798      	blx	r3
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
#endif
    }
    actLed1State(OFF);
 800ef78:	2000      	movs	r0, #0
 800ef7a:	f7f3 f8a9 	bl	80020d0 <actLed1State>
    magInit = 1;
 800ef7e:	4b04      	ldr	r3, [pc, #16]	; (800ef90 <Mag_init+0x34>)
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
}
 800ef84:	bf00      	nop
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	20000060 	.word	0x20000060
 800ef8c:	20000848 	.word	0x20000848
 800ef90:	20001a64 	.word	0x20001a64

0800ef94 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800ef9c:	4b65      	ldr	r3, [pc, #404]	; (800f134 <taskMagGetAdc+0x1a0>)
 800ef9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800efa2:	4965      	ldr	r1, [pc, #404]	; (800f138 <taskMagGetAdc+0x1a4>)
 800efa4:	4863      	ldr	r0, [pc, #396]	; (800f134 <taskMagGetAdc+0x1a0>)
 800efa6:	4798      	blx	r3
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f005 fb2a 	bl	8014608 <pifTask_SetTrigger>
    	return 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	e0b8      	b.n	800f12a <taskMagGetAdc+0x196>
    }

    if (f.CALIBRATE_MAG) {
 800efb8:	4b60      	ldr	r3, [pc, #384]	; (800f13c <taskMagGetAdc+0x1a8>)
 800efba:	7b9b      	ldrb	r3, [r3, #14]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d027      	beq.n	800f010 <taskMagGetAdc+0x7c>
        tCal = (*pif_act_timer1us)();
 800efc0:	4b5f      	ldr	r3, [pc, #380]	; (800f140 <taskMagGetAdc+0x1ac>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4798      	blx	r3
 800efc6:	4603      	mov	r3, r0
 800efc8:	4a5e      	ldr	r2, [pc, #376]	; (800f144 <taskMagGetAdc+0x1b0>)
 800efca:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800efcc:	2300      	movs	r3, #0
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	e018      	b.n	800f004 <taskMagGetAdc+0x70>
            mcfg.magZero[axis] = 0;
 800efd2:	4a5d      	ldr	r2, [pc, #372]	; (800f148 <taskMagGetAdc+0x1b4>)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	33b8      	adds	r3, #184	; 0xb8
 800efd8:	2100      	movs	r1, #0
 800efda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800efde:	4a56      	ldr	r2, [pc, #344]	; (800f138 <taskMagGetAdc+0x1a4>)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800efe6:	4a59      	ldr	r2, [pc, #356]	; (800f14c <taskMagGetAdc+0x1b8>)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800efee:	4a52      	ldr	r2, [pc, #328]	; (800f138 <taskMagGetAdc+0x1a4>)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eff6:	4a56      	ldr	r2, [pc, #344]	; (800f150 <taskMagGetAdc+0x1bc>)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b02      	cmp	r3, #2
 800f008:	d9e3      	bls.n	800efd2 <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800f00a:	4b4c      	ldr	r3, [pc, #304]	; (800f13c <taskMagGetAdc+0x1a8>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800f010:	4b50      	ldr	r3, [pc, #320]	; (800f154 <taskMagGetAdc+0x1c0>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d026      	beq.n	800f066 <taskMagGetAdc+0xd2>
        magADC[X] -= mcfg.magZero[X];
 800f018:	4b47      	ldr	r3, [pc, #284]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f01a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f01e:	b29a      	uxth	r2, r3
 800f020:	4b49      	ldr	r3, [pc, #292]	; (800f148 <taskMagGetAdc+0x1b4>)
 800f022:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800f026:	b29b      	uxth	r3, r3
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	b21a      	sxth	r2, r3
 800f02e:	4b42      	ldr	r3, [pc, #264]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f030:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800f032:	4b41      	ldr	r3, [pc, #260]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f038:	b29a      	uxth	r2, r3
 800f03a:	4b43      	ldr	r3, [pc, #268]	; (800f148 <taskMagGetAdc+0x1b4>)
 800f03c:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800f040:	b29b      	uxth	r3, r3
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	b29b      	uxth	r3, r3
 800f046:	b21a      	sxth	r2, r3
 800f048:	4b3b      	ldr	r3, [pc, #236]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f04a:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800f04c:	4b3a      	ldr	r3, [pc, #232]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f04e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f052:	b29a      	uxth	r2, r3
 800f054:	4b3c      	ldr	r3, [pc, #240]	; (800f148 <taskMagGetAdc+0x1b4>)
 800f056:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	b29b      	uxth	r3, r3
 800f060:	b21a      	sxth	r2, r3
 800f062:	4b35      	ldr	r3, [pc, #212]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f064:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800f066:	4b37      	ldr	r3, [pc, #220]	; (800f144 <taskMagGetAdc+0x1b0>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d05c      	beq.n	800f128 <taskMagGetAdc+0x194>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800f06e:	4b34      	ldr	r3, [pc, #208]	; (800f140 <taskMagGetAdc+0x1ac>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4798      	blx	r3
 800f074:	4602      	mov	r2, r0
 800f076:	4b33      	ldr	r3, [pc, #204]	; (800f144 <taskMagGetAdc+0x1b0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	4a36      	ldr	r2, [pc, #216]	; (800f158 <taskMagGetAdc+0x1c4>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d82f      	bhi.n	800f0e2 <taskMagGetAdc+0x14e>
            actLed0Toggle();
 800f082:	f7f3 f80f 	bl	80020a4 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800f086:	2300      	movs	r3, #0
 800f088:	60fb      	str	r3, [r7, #12]
 800f08a:	e026      	b.n	800f0da <taskMagGetAdc+0x146>
                if (magADC[axis] < magZeroTempMin[axis])
 800f08c:	4a2a      	ldr	r2, [pc, #168]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f094:	492d      	ldr	r1, [pc, #180]	; (800f14c <taskMagGetAdc+0x1b8>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	da07      	bge.n	800f0b0 <taskMagGetAdc+0x11c>
                    magZeroTempMin[axis] = magADC[axis];
 800f0a0:	4a25      	ldr	r2, [pc, #148]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f0a8:	4a28      	ldr	r2, [pc, #160]	; (800f14c <taskMagGetAdc+0x1b8>)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800f0b0:	4a21      	ldr	r2, [pc, #132]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f0b8:	4925      	ldr	r1, [pc, #148]	; (800f150 <taskMagGetAdc+0x1bc>)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	dd07      	ble.n	800f0d4 <taskMagGetAdc+0x140>
                    magZeroTempMax[axis] = magADC[axis];
 800f0c4:	4a1c      	ldr	r2, [pc, #112]	; (800f138 <taskMagGetAdc+0x1a4>)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f0cc:	4a20      	ldr	r2, [pc, #128]	; (800f150 <taskMagGetAdc+0x1bc>)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	60fb      	str	r3, [r7, #12]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d9d5      	bls.n	800f08c <taskMagGetAdc+0xf8>
 800f0e0:	e022      	b.n	800f128 <taskMagGetAdc+0x194>
            }
        } else {
            tCal = 0;
 800f0e2:	4b18      	ldr	r3, [pc, #96]	; (800f144 <taskMagGetAdc+0x1b0>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	e015      	b.n	800f11a <taskMagGetAdc+0x186>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800f0ee:	4a17      	ldr	r2, [pc, #92]	; (800f14c <taskMagGetAdc+0x1b8>)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	4a15      	ldr	r2, [pc, #84]	; (800f150 <taskMagGetAdc+0x1bc>)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f100:	440b      	add	r3, r1
 800f102:	0fda      	lsrs	r2, r3, #31
 800f104:	4413      	add	r3, r2
 800f106:	105b      	asrs	r3, r3, #1
 800f108:	b219      	sxth	r1, r3
 800f10a:	4a0f      	ldr	r2, [pc, #60]	; (800f148 <taskMagGetAdc+0x1b4>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	33b8      	adds	r3, #184	; 0xb8
 800f110:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	3301      	adds	r3, #1
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d9e6      	bls.n	800f0ee <taskMagGetAdc+0x15a>
            writeEEPROM(1, true);
 800f120:	2101      	movs	r1, #1
 800f122:	2001      	movs	r0, #1
 800f124:	f7f7 fb14 	bl	8006750 <writeEEPROM>
        }
    }
    return 0;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	20000060 	.word	0x20000060
 800f138:	20001458 	.word	0x20001458
 800f13c:	20001720 	.word	0x20001720
 800f140:	20001ddc 	.word	0x20001ddc
 800f144:	20001b9c 	.word	0x20001b9c
 800f148:	20000848 	.word	0x20000848
 800f14c:	20001ba0 	.word	0x20001ba0
 800f150:	20001ba8 	.word	0x20001ba8
 800f154:	20001a64 	.word	0x20001a64
 800f158:	01c9c37f 	.word	0x01c9c37f

0800f15c <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f16a:	dd02      	ble.n	800f172 <getSonarDistance+0x16>
		distance = -1;
 800f16c:	f04f 33ff 	mov.w	r3, #4294967295
 800f170:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f172:	4a0d      	ldr	r2, [pc, #52]	; (800f1a8 <getSonarDistance+0x4c>)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f178:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <getSonarDistance+0x50>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f1 f985 	bl	800048c <__aeabi_i2d>
 800f182:	f04f 0200 	mov.w	r2, #0
 800f186:	4b0a      	ldr	r3, [pc, #40]	; (800f1b0 <getSonarDistance+0x54>)
 800f188:	f7f1 fb14 	bl	80007b4 <__aeabi_ddiv>
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	4610      	mov	r0, r2
 800f192:	4619      	mov	r1, r3
 800f194:	f7f1 fcc6 	bl	8000b24 <__aeabi_d2f>
 800f198:	4603      	mov	r3, r0
 800f19a:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f19e:	eeb0 0a67 	vmov.f32	s0, s15
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	2000002c 	.word	0x2000002c
 800f1ac:	20001a60 	.word	0x20001a60
 800f1b0:	40590000 	.word	0x40590000

0800f1b4 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f1bc:	4b15      	ldr	r3, [pc, #84]	; (800f214 <getSonarDistanceFilter+0x60>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	1d3a      	adds	r2, r7, #4
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f006 f881 	bl	80152cc <pifNoiseFilter_Process>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f1d6:	dd02      	ble.n	800f1de <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1dc:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a0d      	ldr	r2, [pc, #52]	; (800f218 <getSonarDistanceFilter+0x64>)
 800f1e2:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f1e4:	4b0d      	ldr	r3, [pc, #52]	; (800f21c <getSonarDistanceFilter+0x68>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7f1 f94f 	bl	800048c <__aeabi_i2d>
 800f1ee:	f04f 0200 	mov.w	r2, #0
 800f1f2:	4b0b      	ldr	r3, [pc, #44]	; (800f220 <getSonarDistanceFilter+0x6c>)
 800f1f4:	f7f1 fade 	bl	80007b4 <__aeabi_ddiv>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4619      	mov	r1, r3
 800f200:	f7f1 fc90 	bl	8000b24 <__aeabi_d2f>
 800f204:	4603      	mov	r3, r0
 800f206:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f20a:	eeb0 0a67 	vmov.f32	s0, s15
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	20001a68 	.word	0x20001a68
 800f218:	2000002c 	.word	0x2000002c
 800f21c:	20001a60 	.word	0x20001a60
 800f220:	40590000 	.word	0x40590000

0800f224 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	460b      	mov	r3, r1
 800f22e:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d002      	beq.n	800f23c <Sonar_init+0x18>
 800f236:	2b02      	cmp	r3, #2
 800f238:	d00b      	beq.n	800f252 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f23a:	e01e      	b.n	800f27a <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f23c:	2105      	movs	r1, #5
 800f23e:	481e      	ldr	r0, [pc, #120]	; (800f2b8 <Sonar_init+0x94>)
 800f240:	f006 f9f4 	bl	801562c <pifNoiseFilterInt32_Init>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d014      	beq.n	800f274 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f24a:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <Sonar_init+0x98>)
 800f24c:	4a1a      	ldr	r2, [pc, #104]	; (800f2b8 <Sonar_init+0x94>)
 800f24e:	601a      	str	r2, [r3, #0]
		break;
 800f250:	e010      	b.n	800f274 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f252:	2107      	movs	r1, #7
 800f254:	4818      	ldr	r0, [pc, #96]	; (800f2b8 <Sonar_init+0x94>)
 800f256:	f006 f9e9 	bl	801562c <pifNoiseFilterInt32_Init>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00b      	beq.n	800f278 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f260:	4815      	ldr	r0, [pc, #84]	; (800f2b8 <Sonar_init+0x94>)
 800f262:	f006 fa23 	bl	80156ac <pifNoiseFilterInt32_SetNoiseCancel>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d005      	beq.n	800f278 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f26c:	4b13      	ldr	r3, [pc, #76]	; (800f2bc <Sonar_init+0x98>)
 800f26e:	4a12      	ldr	r2, [pc, #72]	; (800f2b8 <Sonar_init+0x94>)
 800f270:	601a      	str	r2, [r3, #0]
		break;
 800f272:	e001      	b.n	800f278 <Sonar_init+0x54>
		break;
 800f274:	bf00      	nop
 800f276:	e000      	b.n	800f27a <Sonar_init+0x56>
		break;
 800f278:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f27a:	4b10      	ldr	r3, [pc, #64]	; (800f2bc <Sonar_init+0x98>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d007      	beq.n	800f292 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	490e      	ldr	r1, [pc, #56]	; (800f2c0 <Sonar_init+0x9c>)
 800f286:	203c      	movs	r0, #60	; 0x3c
 800f288:	4798      	blx	r3
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d107      	bne.n	800f2a0 <Sonar_init+0x7c>
 800f290:	e00f      	b.n	800f2b2 <Sonar_init+0x8e>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	490b      	ldr	r1, [pc, #44]	; (800f2c4 <Sonar_init+0xa0>)
 800f296:	203c      	movs	r0, #60	; 0x3c
 800f298:	4798      	blx	r3
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d007      	beq.n	800f2b0 <Sonar_init+0x8c>
	}
    sensorsSet(SENSOR_SONAR);
 800f2a0:	2010      	movs	r0, #16
 800f2a2:	f7f7 fe05 	bl	8006eb0 <sensorsSet>
    sonarDistance = -1;
 800f2a6:	4b08      	ldr	r3, [pc, #32]	; (800f2c8 <Sonar_init+0xa4>)
 800f2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	e000      	b.n	800f2b2 <Sonar_init+0x8e>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f2b0:	bf00      	nop
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
#endif
}
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	20001bb0 	.word	0x20001bb0
 800f2bc:	20001a68 	.word	0x20001a68
 800f2c0:	0800f1b5 	.word	0x0800f1b5
 800f2c4:	0800f15d 	.word	0x0800f15d
 800f2c8:	2000002c 	.word	0x2000002c

0800f2cc <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f2cc:	b590      	push	{r4, r7, lr}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
 800f2d8:	e023      	b.n	800f322 <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <_SerializeBoxNamesReply+0x6c>)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	4413      	add	r3, r2
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f2e4:	4915      	ldr	r1, [pc, #84]	; (800f33c <_SerializeBoxNamesReply+0x70>)
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	005b      	lsls	r3, r3, #1
 800f2ec:	4413      	add	r3, r2
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	440b      	add	r3, r1
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	681c      	ldr	r4, [r3, #0]
 800f2f6:	4911      	ldr	r1, [pc, #68]	; (800f33c <_SerializeBoxNamesReply+0x70>)
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	4413      	add	r3, r2
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	440b      	add	r3, r1
 800f304:	3304      	adds	r3, #4
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7f0 ff65 	bl	80001d8 <strlen>
 800f30e:	4603      	mov	r3, r0
 800f310:	b29b      	uxth	r3, r3
 800f312:	461a      	mov	r2, r3
 800f314:	4621      	mov	r1, r4
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f008 fbfa 	bl	8017b10 <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	3301      	adds	r3, #1
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	4b07      	ldr	r3, [pc, #28]	; (800f340 <_SerializeBoxNamesReply+0x74>)
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	461a      	mov	r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	4293      	cmp	r3, r2
 800f32c:	dbd5      	blt.n	800f2da <_SerializeBoxNamesReply+0xe>
    }
}
 800f32e:	bf00      	nop
 800f330:	bf00      	nop
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	bd90      	pop	{r4, r7, pc}
 800f338:	20001bd0 	.word	0x20001bd0
 800f33c:	080293fc 	.word	0x080293fc
 800f340:	20001be9 	.word	0x20001be9

0800f344 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	6039      	str	r1, [r7, #0]
 800f34e:	71fb      	strb	r3, [r7, #7]
 800f350:	4613      	mov	r3, r2
 800f352:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f354:	79f8      	ldrb	r0, [r7, #7]
 800f356:	2302      	movs	r3, #2
 800f358:	2203      	movs	r2, #3
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	f7f2 ffce 	bl	80022fc <uartOpen>
 800f360:	4603      	mov	r3, r0
 800f362:	4a92      	ldr	r2, [pc, #584]	; (800f5ac <serialInit+0x268>)
 800f364:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f366:	4b91      	ldr	r3, [pc, #580]	; (800f5ac <serialInit+0x268>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a91      	ldr	r2, [pc, #580]	; (800f5b0 <serialInit+0x26c>)
 800f36c:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f36e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f372:	4990      	ldr	r1, [pc, #576]	; (800f5b4 <serialInit+0x270>)
 800f374:	4890      	ldr	r0, [pc, #576]	; (800f5b8 <serialInit+0x274>)
 800f376:	f008 f9c5 	bl	8017704 <pifMsp_Init>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f000 810e 	beq.w	800f59e <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f382:	4b8a      	ldr	r3, [pc, #552]	; (800f5ac <serialInit+0x268>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a8d      	ldr	r2, [pc, #564]	; (800f5bc <serialInit+0x278>)
 800f388:	498d      	ldr	r1, [pc, #564]	; (800f5c0 <serialInit+0x27c>)
 800f38a:	488b      	ldr	r0, [pc, #556]	; (800f5b8 <serialInit+0x274>)
 800f38c:	f008 fa62 	bl	8017854 <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f390:	4b86      	ldr	r3, [pc, #536]	; (800f5ac <serialInit+0x268>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	3304      	adds	r3, #4
 800f396:	4619      	mov	r1, r3
 800f398:	4887      	ldr	r0, [pc, #540]	; (800f5b8 <serialInit+0x274>)
 800f39a:	f008 fa35 	bl	8017808 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f39e:	4b83      	ldr	r3, [pc, #524]	; (800f5ac <serialInit+0x268>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7f3 f915 	bl	80025d4 <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f3aa:	79bb      	ldrb	r3, [r7, #6]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d02a      	beq.n	800f406 <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f3b0:	79b8      	ldrb	r0, [r7, #6]
 800f3b2:	230a      	movs	r3, #10
 800f3b4:	2203      	movs	r2, #3
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	f7f2 ffa0 	bl	80022fc <uartOpen>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	4a7b      	ldr	r2, [pc, #492]	; (800f5ac <serialInit+0x268>)
 800f3c0:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f3c2:	4b7a      	ldr	r3, [pc, #488]	; (800f5ac <serialInit+0x268>)
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	4a7a      	ldr	r2, [pc, #488]	; (800f5b0 <serialInit+0x26c>)
 800f3c8:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f3ca:	f240 1211 	movw	r2, #273	; 0x111
 800f3ce:	4979      	ldr	r1, [pc, #484]	; (800f5b4 <serialInit+0x270>)
 800f3d0:	487c      	ldr	r0, [pc, #496]	; (800f5c4 <serialInit+0x280>)
 800f3d2:	f008 f997 	bl	8017704 <pifMsp_Init>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 80e2 	beq.w	800f5a2 <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f3de:	4b73      	ldr	r3, [pc, #460]	; (800f5ac <serialInit+0x268>)
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	4a76      	ldr	r2, [pc, #472]	; (800f5bc <serialInit+0x278>)
 800f3e4:	4976      	ldr	r1, [pc, #472]	; (800f5c0 <serialInit+0x27c>)
 800f3e6:	4877      	ldr	r0, [pc, #476]	; (800f5c4 <serialInit+0x280>)
 800f3e8:	f008 fa34 	bl	8017854 <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f3ec:	4b6f      	ldr	r3, [pc, #444]	; (800f5ac <serialInit+0x268>)
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4873      	ldr	r0, [pc, #460]	; (800f5c4 <serialInit+0x280>)
 800f3f6:	f008 fa07 	bl	8017808 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f3fa:	4b6c      	ldr	r3, [pc, #432]	; (800f5ac <serialInit+0x268>)
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	3304      	adds	r3, #4
 800f400:	4618      	mov	r0, r3
 800f402:	f7f3 f8e7 	bl	80025d4 <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f406:	2219      	movs	r2, #25
 800f408:	21ff      	movs	r1, #255	; 0xff
 800f40a:	486f      	ldr	r0, [pc, #444]	; (800f5c8 <serialInit+0x284>)
 800f40c:	f013 ffec 	bl	80233e8 <memset>

    idx = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	1c5a      	adds	r2, r3, #1
 800f418:	60fa      	str	r2, [r7, #12]
 800f41a:	4a6b      	ldr	r2, [pc, #428]	; (800f5c8 <serialInit+0x284>)
 800f41c:	2100      	movs	r1, #0
 800f41e:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f420:	2002      	movs	r0, #2
 800f422:	f7f7 fd2f 	bl	8006e84 <sensors>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00b      	beq.n	800f444 <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	1c5a      	adds	r2, r3, #1
 800f430:	60fa      	str	r2, [r7, #12]
 800f432:	4a65      	ldr	r2, [pc, #404]	; (800f5c8 <serialInit+0x284>)
 800f434:	2101      	movs	r1, #1
 800f436:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	60fa      	str	r2, [r7, #12]
 800f43e:	4a62      	ldr	r2, [pc, #392]	; (800f5c8 <serialInit+0x284>)
 800f440:	2102      	movs	r1, #2
 800f442:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f444:	2004      	movs	r0, #4
 800f446:	f7f7 fd1d 	bl	8006e84 <sensors>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d012      	beq.n	800f476 <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	60fa      	str	r2, [r7, #12]
 800f456:	4a5c      	ldr	r2, [pc, #368]	; (800f5c8 <serialInit+0x284>)
 800f458:	2103      	movs	r1, #3
 800f45a:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f45c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f460:	f7f7 fd58 	bl	8006f14 <feature>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d005      	beq.n	800f476 <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	60fa      	str	r2, [r7, #12]
 800f470:	4a55      	ldr	r2, [pc, #340]	; (800f5c8 <serialInit+0x284>)
 800f472:	2104      	movs	r1, #4
 800f474:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f476:	2002      	movs	r0, #2
 800f478:	f7f7 fd04 	bl	8006e84 <sensors>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d105      	bne.n	800f48e <serialInit+0x14a>
 800f482:	2008      	movs	r0, #8
 800f484:	f7f7 fcfe 	bl	8006e84 <sensors>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d011      	beq.n	800f4b2 <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	60fa      	str	r2, [r7, #12]
 800f494:	4a4c      	ldr	r2, [pc, #304]	; (800f5c8 <serialInit+0x284>)
 800f496:	2105      	movs	r1, #5
 800f498:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	1c5a      	adds	r2, r3, #1
 800f49e:	60fa      	str	r2, [r7, #12]
 800f4a0:	4a49      	ldr	r2, [pc, #292]	; (800f5c8 <serialInit+0x284>)
 800f4a2:	2106      	movs	r1, #6
 800f4a4:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	1c5a      	adds	r2, r3, #1
 800f4aa:	60fa      	str	r2, [r7, #12]
 800f4ac:	4a46      	ldr	r2, [pc, #280]	; (800f5c8 <serialInit+0x284>)
 800f4ae:	2107      	movs	r1, #7
 800f4b0:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f4b2:	2020      	movs	r0, #32
 800f4b4:	f7f7 fd2e 	bl	8006f14 <feature>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	1c5a      	adds	r2, r3, #1
 800f4c2:	60fa      	str	r2, [r7, #12]
 800f4c4:	4a40      	ldr	r2, [pc, #256]	; (800f5c8 <serialInit+0x284>)
 800f4c6:	2108      	movs	r1, #8
 800f4c8:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f4ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f4ce:	f7f7 fd21 	bl	8006f14 <feature>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00b      	beq.n	800f4f0 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	60fa      	str	r2, [r7, #12]
 800f4de:	4a3a      	ldr	r2, [pc, #232]	; (800f5c8 <serialInit+0x284>)
 800f4e0:	210a      	movs	r1, #10
 800f4e2:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	60fa      	str	r2, [r7, #12]
 800f4ea:	4a37      	ldr	r2, [pc, #220]	; (800f5c8 <serialInit+0x284>)
 800f4ec:	210b      	movs	r1, #11
 800f4ee:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f4f0:	4b36      	ldr	r3, [pc, #216]	; (800f5cc <serialInit+0x288>)
 800f4f2:	7c1b      	ldrb	r3, [r3, #16]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00b      	beq.n	800f510 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	60fa      	str	r2, [r7, #12]
 800f4fe:	4a32      	ldr	r2, [pc, #200]	; (800f5c8 <serialInit+0x284>)
 800f500:	210c      	movs	r1, #12
 800f502:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	60fa      	str	r2, [r7, #12]
 800f50a:	4a2f      	ldr	r2, [pc, #188]	; (800f5c8 <serialInit+0x284>)
 800f50c:	2118      	movs	r1, #24
 800f50e:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	1c5a      	adds	r2, r3, #1
 800f514:	60fa      	str	r2, [r7, #12]
 800f516:	4a2c      	ldr	r2, [pc, #176]	; (800f5c8 <serialInit+0x284>)
 800f518:	210d      	movs	r1, #13
 800f51a:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f51c:	2004      	movs	r0, #4
 800f51e:	f7f7 fcf9 	bl	8006f14 <feature>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d005      	beq.n	800f534 <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	60fa      	str	r2, [r7, #12]
 800f52e:	4a26      	ldr	r2, [pc, #152]	; (800f5c8 <serialInit+0x284>)
 800f530:	2111      	movs	r1, #17
 800f532:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	60fa      	str	r2, [r7, #12]
 800f53a:	4a23      	ldr	r2, [pc, #140]	; (800f5c8 <serialInit+0x284>)
 800f53c:	2113      	movs	r1, #19
 800f53e:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f540:	4b23      	ldr	r3, [pc, #140]	; (800f5d0 <serialInit+0x28c>)
 800f542:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f546:	2b00      	cmp	r3, #0
 800f548:	bf14      	ite	ne
 800f54a:	2301      	movne	r3, #1
 800f54c:	2300      	moveq	r3, #0
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7f7 fcdf 	bl	8006f14 <feature>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d005      	beq.n	800f568 <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	60fa      	str	r2, [r7, #12]
 800f562:	4a19      	ldr	r2, [pc, #100]	; (800f5c8 <serialInit+0x284>)
 800f564:	2114      	movs	r1, #20
 800f566:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f568:	4b19      	ldr	r3, [pc, #100]	; (800f5d0 <serialInit+0x28c>)
 800f56a:	795b      	ldrb	r3, [r3, #5]
 800f56c:	2b18      	cmp	r3, #24
 800f56e:	d111      	bne.n	800f594 <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	1c5a      	adds	r2, r3, #1
 800f574:	60fa      	str	r2, [r7, #12]
 800f576:	4a14      	ldr	r2, [pc, #80]	; (800f5c8 <serialInit+0x284>)
 800f578:	2115      	movs	r1, #21
 800f57a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	60fa      	str	r2, [r7, #12]
 800f582:	4a11      	ldr	r2, [pc, #68]	; (800f5c8 <serialInit+0x284>)
 800f584:	2116      	movs	r1, #22
 800f586:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	60fa      	str	r2, [r7, #12]
 800f58e:	4a0e      	ldr	r2, [pc, #56]	; (800f5c8 <serialInit+0x284>)
 800f590:	2117      	movs	r1, #23
 800f592:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	b2da      	uxtb	r2, r3
 800f598:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <serialInit+0x290>)
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e002      	b.n	800f5a4 <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f59e:	bf00      	nop
 800f5a0:	e000      	b.n	800f5a4 <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f5a2:	bf00      	nop
}
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000790 	.word	0x20000790
 800f5b0:	20001bec 	.word	0x20001bec
 800f5b4:	20001554 	.word	0x20001554
 800f5b8:	20001bf0 	.word	0x20001bf0
 800f5bc:	08010ec1 	.word	0x08010ec1
 800f5c0:	0800f5d9 	.word	0x0800f5d9
 800f5c4:	20001c4c 	.word	0x20001c4c
 800f5c8:	20001bd0 	.word	0x20001bd0
 800f5cc:	20001720 	.word	0x20001720
 800f5d0:	20000848 	.word	0x20000848
 800f5d4:	20001be9 	.word	0x20001be9

0800f5d8 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800f5d8:	b590      	push	{r4, r7, lr}
 800f5da:	b08f      	sub	sp, #60	; 0x3c
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f5f0:	4bd9      	ldr	r3, [pc, #868]	; (800f958 <evtMspReceive+0x380>)
 800f5f2:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f008 f99a 	bl	8017930 <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	3b40      	subs	r3, #64	; 0x40
 800f602:	2bbe      	cmp	r3, #190	; 0xbe
 800f604:	f201 843f 	bhi.w	8010e86 <evtMspReceive+0x18ae>
 800f608:	a201      	add	r2, pc, #4	; (adr r2, 800f610 <evtMspReceive+0x38>)
 800f60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60e:	bf00      	nop
 800f610:	08010df7 	.word	0x08010df7
 800f614:	08010e1f 	.word	0x08010e1f
 800f618:	08010d21 	.word	0x08010d21
 800f61c:	08010b8d 	.word	0x08010b8d
 800f620:	08010e4b 	.word	0x08010e4b
 800f624:	08010e53 	.word	0x08010e53
 800f628:	08010e87 	.word	0x08010e87
 800f62c:	08010e87 	.word	0x08010e87
 800f630:	08010e87 	.word	0x08010e87
 800f634:	08010e87 	.word	0x08010e87
 800f638:	08010e87 	.word	0x08010e87
 800f63c:	08010e87 	.word	0x08010e87
 800f640:	08010e87 	.word	0x08010e87
 800f644:	08010e87 	.word	0x08010e87
 800f648:	08010e87 	.word	0x08010e87
 800f64c:	08010e87 	.word	0x08010e87
 800f650:	08010e87 	.word	0x08010e87
 800f654:	08010e87 	.word	0x08010e87
 800f658:	08010e87 	.word	0x08010e87
 800f65c:	08010e87 	.word	0x08010e87
 800f660:	08010e87 	.word	0x08010e87
 800f664:	08010e87 	.word	0x08010e87
 800f668:	08010e87 	.word	0x08010e87
 800f66c:	08010e87 	.word	0x08010e87
 800f670:	08010e87 	.word	0x08010e87
 800f674:	08010e87 	.word	0x08010e87
 800f678:	08010e87 	.word	0x08010e87
 800f67c:	08010e87 	.word	0x08010e87
 800f680:	08010e87 	.word	0x08010e87
 800f684:	08010e87 	.word	0x08010e87
 800f688:	08010e87 	.word	0x08010e87
 800f68c:	08010e87 	.word	0x08010e87
 800f690:	08010e87 	.word	0x08010e87
 800f694:	08010e87 	.word	0x08010e87
 800f698:	08010e87 	.word	0x08010e87
 800f69c:	08010e87 	.word	0x08010e87
 800f6a0:	0800fc7d 	.word	0x0800fc7d
 800f6a4:	0800fca5 	.word	0x0800fca5
 800f6a8:	0800fe31 	.word	0x0800fe31
 800f6ac:	0800fedd 	.word	0x0800fedd
 800f6b0:	080103af 	.word	0x080103af
 800f6b4:	080103bd 	.word	0x080103bd
 800f6b8:	080103e5 	.word	0x080103e5
 800f6bc:	0801043d 	.word	0x0801043d
 800f6c0:	0801046f 	.word	0x0801046f
 800f6c4:	080104a7 	.word	0x080104a7
 800f6c8:	08010509 	.word	0x08010509
 800f6cc:	080105ad 	.word	0x080105ad
 800f6d0:	08010611 	.word	0x08010611
 800f6d4:	0801066b 	.word	0x0801066b
 800f6d8:	08010739 	.word	0x08010739
 800f6dc:	08010829 	.word	0x08010829
 800f6e0:	080106a3 	.word	0x080106a3
 800f6e4:	0801065d 	.word	0x0801065d
 800f6e8:	0801084d 	.word	0x0801084d
 800f6ec:	080106ab 	.word	0x080106ab
 800f6f0:	0800feeb 	.word	0x0800feeb
 800f6f4:	08010e87 	.word	0x08010e87
 800f6f8:	08010e87 	.word	0x08010e87
 800f6fc:	08010225 	.word	0x08010225
 800f700:	08010e87 	.word	0x08010e87
 800f704:	08010e87 	.word	0x08010e87
 800f708:	08010e87 	.word	0x08010e87
 800f70c:	08010e87 	.word	0x08010e87
 800f710:	08010e87 	.word	0x08010e87
 800f714:	08010e87 	.word	0x08010e87
 800f718:	08010e87 	.word	0x08010e87
 800f71c:	08010e87 	.word	0x08010e87
 800f720:	08010e87 	.word	0x08010e87
 800f724:	08010e87 	.word	0x08010e87
 800f728:	08010e87 	.word	0x08010e87
 800f72c:	08010e87 	.word	0x08010e87
 800f730:	08010e87 	.word	0x08010e87
 800f734:	08010e87 	.word	0x08010e87
 800f738:	08010e87 	.word	0x08010e87
 800f73c:	08010e87 	.word	0x08010e87
 800f740:	08010e87 	.word	0x08010e87
 800f744:	08010e87 	.word	0x08010e87
 800f748:	08010e87 	.word	0x08010e87
 800f74c:	08010e87 	.word	0x08010e87
 800f750:	08010e87 	.word	0x08010e87
 800f754:	08010e87 	.word	0x08010e87
 800f758:	08010e87 	.word	0x08010e87
 800f75c:	08010e87 	.word	0x08010e87
 800f760:	08010e87 	.word	0x08010e87
 800f764:	08010e87 	.word	0x08010e87
 800f768:	08010e87 	.word	0x08010e87
 800f76c:	08010e87 	.word	0x08010e87
 800f770:	08010e87 	.word	0x08010e87
 800f774:	08010e87 	.word	0x08010e87
 800f778:	08010e87 	.word	0x08010e87
 800f77c:	08010e87 	.word	0x08010e87
 800f780:	08010e87 	.word	0x08010e87
 800f784:	08010e87 	.word	0x08010e87
 800f788:	08010e87 	.word	0x08010e87
 800f78c:	08010e87 	.word	0x08010e87
 800f790:	08010aa1 	.word	0x08010aa1
 800f794:	08010e87 	.word	0x08010e87
 800f798:	08010e87 	.word	0x08010e87
 800f79c:	08010e87 	.word	0x08010e87
 800f7a0:	08010ac7 	.word	0x08010ac7
 800f7a4:	08010e87 	.word	0x08010e87
 800f7a8:	08010b31 	.word	0x08010b31
 800f7ac:	08010e87 	.word	0x08010e87
 800f7b0:	08010e87 	.word	0x08010e87
 800f7b4:	08010e87 	.word	0x08010e87
 800f7b8:	08010e87 	.word	0x08010e87
 800f7bc:	08010e87 	.word	0x08010e87
 800f7c0:	08010e87 	.word	0x08010e87
 800f7c4:	08010e87 	.word	0x08010e87
 800f7c8:	08010e87 	.word	0x08010e87
 800f7cc:	08010e87 	.word	0x08010e87
 800f7d0:	08010e87 	.word	0x08010e87
 800f7d4:	08010e87 	.word	0x08010e87
 800f7d8:	08010e87 	.word	0x08010e87
 800f7dc:	08010e87 	.word	0x08010e87
 800f7e0:	08010e87 	.word	0x08010e87
 800f7e4:	08010e87 	.word	0x08010e87
 800f7e8:	08010e87 	.word	0x08010e87
 800f7ec:	08010e87 	.word	0x08010e87
 800f7f0:	08010e87 	.word	0x08010e87
 800f7f4:	08010e87 	.word	0x08010e87
 800f7f8:	08010e87 	.word	0x08010e87
 800f7fc:	08010e87 	.word	0x08010e87
 800f800:	08010e87 	.word	0x08010e87
 800f804:	08010e87 	.word	0x08010e87
 800f808:	08010e87 	.word	0x08010e87
 800f80c:	08010e87 	.word	0x08010e87
 800f810:	08010e87 	.word	0x08010e87
 800f814:	08010e87 	.word	0x08010e87
 800f818:	08010e87 	.word	0x08010e87
 800f81c:	08010e87 	.word	0x08010e87
 800f820:	08010e87 	.word	0x08010e87
 800f824:	08010e87 	.word	0x08010e87
 800f828:	08010e87 	.word	0x08010e87
 800f82c:	08010e87 	.word	0x08010e87
 800f830:	0800f90d 	.word	0x0800f90d
 800f834:	0800f965 	.word	0x0800f965
 800f838:	0800f9cb 	.word	0x0800f9cb
 800f83c:	0800fa23 	.word	0x0800fa23
 800f840:	0800fa5b 	.word	0x0800fa5b
 800f844:	0801096b 	.word	0x0801096b
 800f848:	0801097f 	.word	0x0801097f
 800f84c:	0800fac3 	.word	0x0800fac3
 800f850:	08010959 	.word	0x08010959
 800f854:	080108c1 	.word	0x080108c1
 800f858:	0800fc01 	.word	0x0800fc01
 800f85c:	0800fc39 	.word	0x0800fc39
 800f860:	0800ffc7 	.word	0x0800ffc7
 800f864:	08010e87 	.word	0x08010e87
 800f868:	0800fbd9 	.word	0x0800fbd9
 800f86c:	08010e87 	.word	0x08010e87
 800f870:	080102ed 	.word	0x080102ed
 800f874:	08010e87 	.word	0x08010e87
 800f878:	08010e87 	.word	0x08010e87
 800f87c:	08010e87 	.word	0x08010e87
 800f880:	08010e87 	.word	0x08010e87
 800f884:	08010e87 	.word	0x08010e87
 800f888:	08010e87 	.word	0x08010e87
 800f88c:	08010e87 	.word	0x08010e87
 800f890:	08010e87 	.word	0x08010e87
 800f894:	08010e87 	.word	0x08010e87
 800f898:	08010e87 	.word	0x08010e87
 800f89c:	08010e87 	.word	0x08010e87
 800f8a0:	08010e87 	.word	0x08010e87
 800f8a4:	08010e87 	.word	0x08010e87
 800f8a8:	08010e87 	.word	0x08010e87
 800f8ac:	08010e87 	.word	0x08010e87
 800f8b0:	08010e87 	.word	0x08010e87
 800f8b4:	08010e87 	.word	0x08010e87
 800f8b8:	08010e87 	.word	0x08010e87
 800f8bc:	08010e87 	.word	0x08010e87
 800f8c0:	08010e87 	.word	0x08010e87
 800f8c4:	08010e87 	.word	0x08010e87
 800f8c8:	08010e87 	.word	0x08010e87
 800f8cc:	0800f939 	.word	0x0800f939
 800f8d0:	08010a7f 	.word	0x08010a7f
 800f8d4:	08010073 	.word	0x08010073
 800f8d8:	0801013d 	.word	0x0801013d
 800f8dc:	08010e87 	.word	0x08010e87
 800f8e0:	08010e87 	.word	0x08010e87
 800f8e4:	08010e87 	.word	0x08010e87
 800f8e8:	08010e87 	.word	0x08010e87
 800f8ec:	08010e87 	.word	0x08010e87
 800f8f0:	08010e87 	.word	0x08010e87
 800f8f4:	08010e87 	.word	0x08010e87
 800f8f8:	08010991 	.word	0x08010991
 800f8fc:	08010e87 	.word	0x08010e87
 800f900:	08010e87 	.word	0x08010e87
 800f904:	08010e87 	.word	0x08010e87
 800f908:	080109ad 	.word	0x080109ad
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f90c:	2300      	movs	r3, #0
 800f90e:	637b      	str	r3, [r7, #52]	; 0x34
 800f910:	e00b      	b.n	800f92a <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800f912:	68b8      	ldr	r0, [r7, #8]
 800f914:	f007 ffc8 	bl	80178a8 <pifMsp_ReadData16>
 800f918:	4603      	mov	r3, r0
 800f91a:	b219      	sxth	r1, r3
 800f91c:	4a0f      	ldr	r2, [pc, #60]	; (800f95c <evtMspReceive+0x384>)
 800f91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f920:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f926:	3301      	adds	r3, #1
 800f928:	637b      	str	r3, [r7, #52]	; 0x34
 800f92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92c:	2b07      	cmp	r3, #7
 800f92e:	d9f0      	bls.n	800f912 <evtMspReceive+0x33a>
        mspFrameRecieve();
 800f930:	f7fe fcd0 	bl	800e2d4 <mspFrameRecieve>
        break;
 800f934:	f001 bab5 	b.w	8010ea2 <evtMspReceive+0x18ca>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800f938:	68b8      	ldr	r0, [r7, #8]
 800f93a:	f007 ffb5 	bl	80178a8 <pifMsp_ReadData16>
 800f93e:	4603      	mov	r3, r0
 800f940:	b21a      	sxth	r2, r3
 800f942:	4b07      	ldr	r3, [pc, #28]	; (800f960 <evtMspReceive+0x388>)
 800f944:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800f946:	68b8      	ldr	r0, [r7, #8]
 800f948:	f007 ffae 	bl	80178a8 <pifMsp_ReadData16>
 800f94c:	4603      	mov	r3, r0
 800f94e:	b21a      	sxth	r2, r3
 800f950:	4b03      	ldr	r3, [pc, #12]	; (800f960 <evtMspReceive+0x388>)
 800f952:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800f954:	f001 baa5 	b.w	8010ea2 <evtMspReceive+0x18ca>
 800f958:	08027a24 	.word	0x08027a24
 800f95c:	20001758 	.word	0x20001758
 800f960:	20000db4 	.word	0x20000db4

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800f964:	68b8      	ldr	r0, [r7, #8]
 800f966:	f007 ff8b 	bl	8017880 <pifMsp_ReadData8>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	4bb7      	ldr	r3, [pc, #732]	; (800fc4c <evtMspReceive+0x674>)
 800f970:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800f972:	68b8      	ldr	r0, [r7, #8]
 800f974:	f007 ff84 	bl	8017880 <pifMsp_ReadData8>
 800f978:	4603      	mov	r3, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	4bb4      	ldr	r3, [pc, #720]	; (800fc50 <evtMspReceive+0x678>)
 800f97e:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800f980:	68b8      	ldr	r0, [r7, #8]
 800f982:	f007 ffae 	bl	80178e2 <pifMsp_ReadData32>
 800f986:	4603      	mov	r3, r0
 800f988:	461a      	mov	r2, r3
 800f98a:	4bb2      	ldr	r3, [pc, #712]	; (800fc54 <evtMspReceive+0x67c>)
 800f98c:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800f98e:	68b8      	ldr	r0, [r7, #8]
 800f990:	f007 ffa7 	bl	80178e2 <pifMsp_ReadData32>
 800f994:	4603      	mov	r3, r0
 800f996:	461a      	mov	r2, r3
 800f998:	4bae      	ldr	r3, [pc, #696]	; (800fc54 <evtMspReceive+0x67c>)
 800f99a:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800f99c:	68b8      	ldr	r0, [r7, #8]
 800f99e:	f007 ff83 	bl	80178a8 <pifMsp_ReadData16>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4bac      	ldr	r3, [pc, #688]	; (800fc58 <evtMspReceive+0x680>)
 800f9a8:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800f9aa:	68b8      	ldr	r0, [r7, #8]
 800f9ac:	f007 ff7c 	bl	80178a8 <pifMsp_ReadData16>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4ba9      	ldr	r3, [pc, #676]	; (800fc5c <evtMspReceive+0x684>)
 800f9b6:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800f9b8:	4ba9      	ldr	r3, [pc, #676]	; (800fc60 <evtMspReceive+0x688>)
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	f043 0302 	orr.w	r3, r3, #2
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	4ba7      	ldr	r3, [pc, #668]	; (800fc60 <evtMspReceive+0x688>)
 800f9c4:	701a      	strb	r2, [r3, #0]
        break;
 800f9c6:	f001 ba6c 	b.w	8010ea2 <evtMspReceive+0x18ca>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ce:	e023      	b.n	800fa18 <evtMspReceive+0x440>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800f9d0:	68b8      	ldr	r0, [r7, #8]
 800f9d2:	f007 ff55 	bl	8017880 <pifMsp_ReadData8>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4aa2      	ldr	r2, [pc, #648]	; (800fc64 <evtMspReceive+0x68c>)
 800f9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9de:	4413      	add	r3, r2
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	460a      	mov	r2, r1
 800f9e4:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800f9e6:	68b8      	ldr	r0, [r7, #8]
 800f9e8:	f007 ff4a 	bl	8017880 <pifMsp_ReadData8>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4a9c      	ldr	r2, [pc, #624]	; (800fc64 <evtMspReceive+0x68c>)
 800f9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f4:	4413      	add	r3, r2
 800f9f6:	330b      	adds	r3, #11
 800f9f8:	460a      	mov	r2, r1
 800f9fa:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800f9fc:	68b8      	ldr	r0, [r7, #8]
 800f9fe:	f007 ff3f 	bl	8017880 <pifMsp_ReadData8>
 800fa02:	4603      	mov	r3, r0
 800fa04:	4619      	mov	r1, r3
 800fa06:	4a97      	ldr	r2, [pc, #604]	; (800fc64 <evtMspReceive+0x68c>)
 800fa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0a:	4413      	add	r3, r2
 800fa0c:	3315      	adds	r3, #21
 800fa0e:	460a      	mov	r2, r1
 800fa10:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < PIDITEMS; i++) {
 800fa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa14:	3301      	adds	r3, #1
 800fa16:	637b      	str	r3, [r7, #52]	; 0x34
 800fa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1a:	2b09      	cmp	r3, #9
 800fa1c:	d9d8      	bls.n	800f9d0 <evtMspReceive+0x3f8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
#endif
        }
        break;
 800fa1e:	f001 ba40 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fa22:	2300      	movs	r3, #0
 800fa24:	637b      	str	r3, [r7, #52]	; 0x34
 800fa26:	e010      	b.n	800fa4a <evtMspReceive+0x472>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800fa28:	68b8      	ldr	r0, [r7, #8]
 800fa2a:	f007 ff3d 	bl	80178a8 <pifMsp_ReadData16>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4619      	mov	r1, r3
 800fa32:	4a8d      	ldr	r2, [pc, #564]	; (800fc68 <evtMspReceive+0x690>)
 800fa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa36:	4413      	add	r3, r2
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	4a8a      	ldr	r2, [pc, #552]	; (800fc64 <evtMspReceive+0x68c>)
 800fa3c:	3312      	adds	r3, #18
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	4413      	add	r3, r2
 800fa42:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fa44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa46:	3301      	adds	r3, #1
 800fa48:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4a:	4b88      	ldr	r3, [pc, #544]	; (800fc6c <evtMspReceive+0x694>)
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d3e8      	bcc.n	800fa28 <evtMspReceive+0x450>
        break;
 800fa56:	f001 ba24 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800fa5a:	68b8      	ldr	r0, [r7, #8]
 800fa5c:	f007 ff10 	bl	8017880 <pifMsp_ReadData8>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	4b7f      	ldr	r3, [pc, #508]	; (800fc64 <evtMspReceive+0x68c>)
 800fa66:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800fa68:	68b8      	ldr	r0, [r7, #8]
 800fa6a:	f007 ff09 	bl	8017880 <pifMsp_ReadData8>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	4b7c      	ldr	r3, [pc, #496]	; (800fc64 <evtMspReceive+0x68c>)
 800fa74:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800fa78:	68b8      	ldr	r0, [r7, #8]
 800fa7a:	f007 ff01 	bl	8017880 <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800fa7e:	68b8      	ldr	r0, [r7, #8]
 800fa80:	f007 fefe 	bl	8017880 <pifMsp_ReadData8>
 800fa84:	4603      	mov	r3, r0
 800fa86:	461a      	mov	r2, r3
 800fa88:	4b76      	ldr	r3, [pc, #472]	; (800fc64 <evtMspReceive+0x68c>)
 800fa8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800fa8e:	68b8      	ldr	r0, [r7, #8]
 800fa90:	f007 fef6 	bl	8017880 <pifMsp_ReadData8>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	4b72      	ldr	r3, [pc, #456]	; (800fc64 <evtMspReceive+0x68c>)
 800fa9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800fa9e:	68b8      	ldr	r0, [r7, #8]
 800faa0:	f007 feee 	bl	8017880 <pifMsp_ReadData8>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	4b6e      	ldr	r3, [pc, #440]	; (800fc64 <evtMspReceive+0x68c>)
 800faaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800faae:	68b8      	ldr	r0, [r7, #8]
 800fab0:	f007 fee6 	bl	8017880 <pifMsp_ReadData8>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
 800fab8:	4b6a      	ldr	r3, [pc, #424]	; (800fc64 <evtMspReceive+0x68c>)
 800faba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800fabe:	f001 b9f0 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800fac2:	68b8      	ldr	r0, [r7, #8]
 800fac4:	f007 fef0 	bl	80178a8 <pifMsp_ReadData16>
 800fac8:	4603      	mov	r3, r0
 800faca:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fad2:	d208      	bcs.n	800fae6 <evtMspReceive+0x50e>
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fada:	d904      	bls.n	800fae6 <evtMspReceive+0x50e>
            mcfg.midrc = tmp;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	b29a      	uxth	r2, r3
 800fae0:	4b63      	ldr	r3, [pc, #396]	; (800fc70 <evtMspReceive+0x698>)
 800fae2:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800fae6:	68b8      	ldr	r0, [r7, #8]
 800fae8:	f007 fede 	bl	80178a8 <pifMsp_ReadData16>
 800faec:	4603      	mov	r3, r0
 800faee:	461a      	mov	r2, r3
 800faf0:	4b5f      	ldr	r3, [pc, #380]	; (800fc70 <evtMspReceive+0x698>)
 800faf2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800faf6:	68b8      	ldr	r0, [r7, #8]
 800faf8:	f007 fed6 	bl	80178a8 <pifMsp_ReadData16>
 800fafc:	4603      	mov	r3, r0
 800fafe:	461a      	mov	r2, r3
 800fb00:	4b5b      	ldr	r3, [pc, #364]	; (800fc70 <evtMspReceive+0x698>)
 800fb02:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800fb06:	68b8      	ldr	r0, [r7, #8]
 800fb08:	f007 fece 	bl	80178a8 <pifMsp_ReadData16>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	461a      	mov	r2, r3
 800fb10:	4b57      	ldr	r3, [pc, #348]	; (800fc70 <evtMspReceive+0x698>)
 800fb12:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800fb16:	68b8      	ldr	r0, [r7, #8]
 800fb18:	f007 fec6 	bl	80178a8 <pifMsp_ReadData16>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	461a      	mov	r2, r3
 800fb20:	4b50      	ldr	r3, [pc, #320]	; (800fc64 <evtMspReceive+0x68c>)
 800fb22:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800fb26:	68b8      	ldr	r0, [r7, #8]
 800fb28:	f007 feaa 	bl	8017880 <pifMsp_ReadData8>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4b4f      	ldr	r3, [pc, #316]	; (800fc70 <evtMspReceive+0x698>)
 800fb32:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800fb36:	68b8      	ldr	r0, [r7, #8]
 800fb38:	f007 fea2 	bl	8017880 <pifMsp_ReadData8>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	b25a      	sxtb	r2, r3
 800fb40:	4b4b      	ldr	r3, [pc, #300]	; (800fc70 <evtMspReceive+0x698>)
 800fb42:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800fb46:	68b8      	ldr	r0, [r7, #8]
 800fb48:	f007 fe9a 	bl	8017880 <pifMsp_ReadData8>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	b25a      	sxtb	r2, r3
 800fb50:	4b47      	ldr	r3, [pc, #284]	; (800fc70 <evtMspReceive+0x698>)
 800fb52:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fb56:	68b8      	ldr	r0, [r7, #8]
 800fb58:	f007 fe92 	bl	8017880 <pifMsp_ReadData8>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	4b43      	ldr	r3, [pc, #268]	; (800fc70 <evtMspReceive+0x698>)
 800fb62:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 800fb66:	68b8      	ldr	r0, [r7, #8]
 800fb68:	f007 fe8a 	bl	8017880 <pifMsp_ReadData8>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4b3f      	ldr	r3, [pc, #252]	; (800fc70 <evtMspReceive+0x698>)
 800fb72:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 800fb76:	68b8      	ldr	r0, [r7, #8]
 800fb78:	f007 fe82 	bl	8017880 <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 800fb7c:	68b8      	ldr	r0, [r7, #8]
 800fb7e:	f007 fe93 	bl	80178a8 <pifMsp_ReadData16>
 800fb82:	4603      	mov	r3, r0
 800fb84:	461a      	mov	r2, r3
 800fb86:	0092      	lsls	r2, r2, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	b21a      	sxth	r2, r3
 800fb90:	4b34      	ldr	r3, [pc, #208]	; (800fc64 <evtMspReceive+0x68c>)
 800fb92:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 800fb94:	68b8      	ldr	r0, [r7, #8]
 800fb96:	f007 fe73 	bl	8017880 <pifMsp_ReadData8>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4b34      	ldr	r3, [pc, #208]	; (800fc70 <evtMspReceive+0x698>)
 800fba0:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 800fba4:	68b8      	ldr	r0, [r7, #8]
 800fba6:	f007 fe6b 	bl	8017880 <pifMsp_ReadData8>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	461a      	mov	r2, r3
 800fbae:	4b30      	ldr	r3, [pc, #192]	; (800fc70 <evtMspReceive+0x698>)
 800fbb0:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 800fbb4:	68b8      	ldr	r0, [r7, #8]
 800fbb6:	f007 fe63 	bl	8017880 <pifMsp_ReadData8>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b2c      	ldr	r3, [pc, #176]	; (800fc70 <evtMspReceive+0x698>)
 800fbc0:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 800fbc4:	68b8      	ldr	r0, [r7, #8]
 800fbc6:	f007 fe5b 	bl	8017880 <pifMsp_ReadData8>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	461a      	mov	r2, r3
 800fbce:	4b28      	ldr	r3, [pc, #160]	; (800fc70 <evtMspReceive+0x698>)
 800fbd0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 800fbd4:	f001 b965 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	637b      	str	r3, [r7, #52]	; 0x34
 800fbdc:	e00b      	b.n	800fbf6 <evtMspReceive+0x61e>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	f007 fe62 	bl	80178a8 <pifMsp_ReadData16>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	b219      	sxth	r1, r3
 800fbe8:	4a22      	ldr	r2, [pc, #136]	; (800fc74 <evtMspReceive+0x69c>)
 800fbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	637b      	str	r3, [r7, #52]	; 0x34
 800fbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf8:	2b07      	cmp	r3, #7
 800fbfa:	d9f0      	bls.n	800fbde <evtMspReceive+0x606>
        break;
 800fbfc:	f001 b951 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <evtMspReceive+0x674>)
 800fc02:	785b      	ldrb	r3, [r3, #1]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f041 8143 	bne.w	8010e90 <evtMspReceive+0x18b8>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 800fc0a:	68b8      	ldr	r0, [r7, #8]
 800fc0c:	f007 fe38 	bl	8017880 <pifMsp_ReadData8>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	4b16      	ldr	r3, [pc, #88]	; (800fc70 <evtMspReceive+0x698>)
 800fc16:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fc1a:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <evtMspReceive+0x698>)
 800fc1c:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d903      	bls.n	800fc2c <evtMspReceive+0x654>
                mcfg.current_profile = 0;
 800fc24:	4b12      	ldr	r3, [pc, #72]	; (800fc70 <evtMspReceive+0x698>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	2000      	movs	r0, #0
 800fc30:	f7f6 fd8e 	bl	8006750 <writeEEPROM>
        }
        break;
 800fc34:	f001 b92c 	b.w	8010e90 <evtMspReceive+0x18b8>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 800fc38:	68b8      	ldr	r0, [r7, #8]
 800fc3a:	f007 fe35 	bl	80178a8 <pifMsp_ReadData16>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	b21a      	sxth	r2, r3
 800fc42:	4b0d      	ldr	r3, [pc, #52]	; (800fc78 <evtMspReceive+0x6a0>)
 800fc44:	801a      	strh	r2, [r3, #0]
        break;
 800fc46:	f001 b92c 	b.w	8010ea2 <evtMspReceive+0x18ca>
 800fc4a:	bf00      	nop
 800fc4c:	20001720 	.word	0x20001720
 800fc50:	20001804 	.word	0x20001804
 800fc54:	200017e4 	.word	0x200017e4
 800fc58:	2000180a 	.word	0x2000180a
 800fc5c:	2000180c 	.word	0x2000180c
 800fc60:	2000180e 	.word	0x2000180e
 800fc64:	20000db4 	.word	0x20000db4
 800fc68:	20001bd0 	.word	0x20001bd0
 800fc6c:	20001be9 	.word	0x20001be9
 800fc70:	20000848 	.word	0x20000848
 800fc74:	200015a0 	.word	0x200015a0
 800fc78:	20001a58 	.word	0x20001a58

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 800fc7c:	21e7      	movs	r1, #231	; 0xe7
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f007 fe94 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 800fc84:	4b9a      	ldr	r3, [pc, #616]	; (800fef0 <evtMspReceive+0x918>)
 800fc86:	795b      	ldrb	r3, [r3, #5]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	f007 fe8e 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fc90:	2104      	movs	r1, #4
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f007 fe8a 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fc98:	4996      	ldr	r1, [pc, #600]	; (800fef4 <evtMspReceive+0x91c>)
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f007 fefc 	bl	8017a98 <pifMsp_AddAnswer32>
        break;
 800fca0:	f001 b8ff 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 800fca4:	4b94      	ldr	r3, [pc, #592]	; (800fef8 <evtMspReceive+0x920>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	4619      	mov	r1, r3
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f007 feb6 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 800fcb0:	4b92      	ldr	r3, [pc, #584]	; (800fefc <evtMspReceive+0x924>)
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f007 feb0 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fcbc:	2002      	movs	r0, #2
 800fcbe:	f7f7 f8e1 	bl	8006e84 <sensors>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	b21c      	sxth	r4, r3
 800fcc6:	2004      	movs	r0, #4
 800fcc8:	f7f7 f8dc 	bl	8006e84 <sensors>
 800fccc:	4603      	mov	r3, r0
 800fcce:	005b      	lsls	r3, r3, #1
 800fcd0:	b21b      	sxth	r3, r3
 800fcd2:	4323      	orrs	r3, r4
 800fcd4:	b21c      	sxth	r4, r3
 800fcd6:	2008      	movs	r0, #8
 800fcd8:	f7f7 f8d4 	bl	8006e84 <sensors>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	b21b      	sxth	r3, r3
 800fce2:	4323      	orrs	r3, r4
 800fce4:	b21c      	sxth	r4, r3
 800fce6:	2020      	movs	r0, #32
 800fce8:	f7f7 f8cc 	bl	8006e84 <sensors>
 800fcec:	4603      	mov	r3, r0
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	b21b      	sxth	r3, r3
 800fcf2:	4323      	orrs	r3, r4
 800fcf4:	b21c      	sxth	r4, r3
 800fcf6:	2010      	movs	r0, #16
 800fcf8:	f7f7 f8c4 	bl	8006e84 <sensors>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	011b      	lsls	r3, r3, #4
 800fd00:	b21b      	sxth	r3, r3
 800fd02:	4323      	orrs	r3, r4
 800fd04:	b21b      	sxth	r3, r3
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	4619      	mov	r1, r3
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f007 fe86 	bl	8017a1c <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fd10:	2300      	movs	r3, #0
 800fd12:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fd14:	4b7a      	ldr	r3, [pc, #488]	; (800ff00 <evtMspReceive+0x928>)
 800fd16:	78db      	ldrb	r3, [r3, #3]
 800fd18:	005a      	lsls	r2, r3, #1
 800fd1a:	4b79      	ldr	r3, [pc, #484]	; (800ff00 <evtMspReceive+0x928>)
 800fd1c:	791b      	ldrb	r3, [r3, #4]
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd22:	4b77      	ldr	r3, [pc, #476]	; (800ff00 <evtMspReceive+0x928>)
 800fd24:	799b      	ldrb	r3, [r3, #6]
 800fd26:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fd28:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd2a:	4b75      	ldr	r3, [pc, #468]	; (800ff00 <evtMspReceive+0x928>)
 800fd2c:	795b      	ldrb	r3, [r3, #5]
 800fd2e:	015b      	lsls	r3, r3, #5
 800fd30:	431a      	orrs	r2, r3
 800fd32:	4b73      	ldr	r3, [pc, #460]	; (800ff00 <evtMspReceive+0x928>)
 800fd34:	7a5b      	ldrb	r3, [r3, #9]
 800fd36:	019b      	lsls	r3, r3, #6
 800fd38:	431a      	orrs	r2, r3
 800fd3a:	4b72      	ldr	r3, [pc, #456]	; (800ff04 <evtMspReceive+0x92c>)
 800fd3c:	79db      	ldrb	r3, [r3, #7]
 800fd3e:	01db      	lsls	r3, r3, #7
 800fd40:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd42:	4b70      	ldr	r3, [pc, #448]	; (800ff04 <evtMspReceive+0x92c>)
 800fd44:	7a1b      	ldrb	r3, [r3, #8]
 800fd46:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd48:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd4a:	4b6e      	ldr	r3, [pc, #440]	; (800ff04 <evtMspReceive+0x92c>)
 800fd4c:	7a5b      	ldrb	r3, [r3, #9]
 800fd4e:	025b      	lsls	r3, r3, #9
 800fd50:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd52:	4b6b      	ldr	r3, [pc, #428]	; (800ff00 <evtMspReceive+0x928>)
 800fd54:	79db      	ldrb	r3, [r3, #7]
 800fd56:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd58:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd5a:	4b69      	ldr	r3, [pc, #420]	; (800ff00 <evtMspReceive+0x928>)
 800fd5c:	7a1b      	ldrb	r3, [r3, #8]
 800fd5e:	02db      	lsls	r3, r3, #11
 800fd60:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd62:	4b67      	ldr	r3, [pc, #412]	; (800ff00 <evtMspReceive+0x928>)
 800fd64:	7d1b      	ldrb	r3, [r3, #20]
 800fd66:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd68:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd6a:	4b65      	ldr	r3, [pc, #404]	; (800ff00 <evtMspReceive+0x928>)
 800fd6c:	7a9b      	ldrb	r3, [r3, #10]
 800fd6e:	031b      	lsls	r3, r3, #12
 800fd70:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fd72:	4b64      	ldr	r3, [pc, #400]	; (800ff04 <evtMspReceive+0x92c>)
 800fd74:	7b5b      	ldrb	r3, [r3, #13]
 800fd76:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd78:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fd7a:	4b62      	ldr	r3, [pc, #392]	; (800ff04 <evtMspReceive+0x92c>)
 800fd7c:	7b9b      	ldrb	r3, [r3, #14]
 800fd7e:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fd80:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fd82:	4b60      	ldr	r3, [pc, #384]	; (800ff04 <evtMspReceive+0x92c>)
 800fd84:	7c1b      	ldrb	r3, [r3, #16]
 800fd86:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fd88:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800fd8a:	4b5e      	ldr	r3, [pc, #376]	; (800ff04 <evtMspReceive+0x92c>)
 800fd8c:	791b      	ldrb	r3, [r3, #4]
 800fd8e:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fd90:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800fd92:	4b5c      	ldr	r3, [pc, #368]	; (800ff04 <evtMspReceive+0x92c>)
 800fd94:	7c5b      	ldrb	r3, [r3, #17]
 800fd96:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800fd98:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800fd9a:	4b5a      	ldr	r3, [pc, #360]	; (800ff04 <evtMspReceive+0x92c>)
 800fd9c:	7c9b      	ldrb	r3, [r3, #18]
 800fd9e:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800fda0:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800fda2:	4b58      	ldr	r3, [pc, #352]	; (800ff04 <evtMspReceive+0x92c>)
 800fda4:	7cdb      	ldrb	r3, [r3, #19]
 800fda6:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800fda8:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fdaa:	4b56      	ldr	r3, [pc, #344]	; (800ff04 <evtMspReceive+0x92c>)
 800fdac:	7d1b      	ldrb	r3, [r3, #20]
 800fdae:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800fdb0:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fdb2:	4b54      	ldr	r3, [pc, #336]	; (800ff04 <evtMspReceive+0x92c>)
 800fdb4:	7d5b      	ldrb	r3, [r3, #21]
 800fdb6:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fdb8:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fdba:	4b52      	ldr	r3, [pc, #328]	; (800ff04 <evtMspReceive+0x92c>)
 800fdbc:	7d9b      	ldrb	r3, [r3, #22]
 800fdbe:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fdc0:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fdc2:	4b50      	ldr	r3, [pc, #320]	; (800ff04 <evtMspReceive+0x92c>)
 800fdc4:	7ddb      	ldrb	r3, [r3, #23]
 800fdc6:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fdc8:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800fdca:	4a4d      	ldr	r2, [pc, #308]	; (800ff00 <evtMspReceive+0x928>)
 800fdcc:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fdce:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fdd0:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd6:	e018      	b.n	800fe0a <evtMspReceive+0x832>
            int flag = (tmp & (1 << availableBoxes[i]));
 800fdd8:	4a4b      	ldr	r2, [pc, #300]	; (800ff08 <evtMspReceive+0x930>)
 800fdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fddc:	4413      	add	r3, r2
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	461a      	mov	r2, r3
 800fde2:	2301      	movs	r3, #1
 800fde4:	4093      	lsls	r3, r2
 800fde6:	461a      	mov	r2, r3
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	4013      	ands	r3, r2
 800fdec:	613b      	str	r3, [r7, #16]
            if (flag)
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d007      	beq.n	800fe04 <evtMspReceive+0x82c>
                junk |= 1 << i;
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe00:	4313      	orrs	r3, r2
 800fe02:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800fe04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe06:	3301      	adds	r3, #1
 800fe08:	637b      	str	r3, [r7, #52]	; 0x34
 800fe0a:	4b40      	ldr	r3, [pc, #256]	; (800ff0c <evtMspReceive+0x934>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d3e0      	bcc.n	800fdd8 <evtMspReceive+0x800>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 800fe16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f007 fe3d 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 800fe1e:	4b34      	ldr	r3, [pc, #208]	; (800fef0 <evtMspReceive+0x918>)
 800fe20:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fe24:	4619      	mov	r1, r3
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f007 fdc0 	bl	80179ac <pifMsp_AddAnswer8>
        break;
 800fe2c:	f001 b839 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 800fe30:	4b37      	ldr	r3, [pc, #220]	; (800ff10 <evtMspReceive+0x938>)
 800fe32:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fe36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe3a:	d917      	bls.n	800fe6c <evtMspReceive+0x894>
            for (i = 0; i < 3; i++)
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe40:	e010      	b.n	800fe64 <evtMspReceive+0x88c>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 800fe42:	4a34      	ldr	r2, [pc, #208]	; (800ff14 <evtMspReceive+0x93c>)
 800fe44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	da00      	bge.n	800fe50 <evtMspReceive+0x878>
 800fe4e:	3307      	adds	r3, #7
 800fe50:	10db      	asrs	r3, r3, #3
 800fe52:	b21b      	sxth	r3, r3
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	4619      	mov	r1, r3
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f007 fddf 	bl	8017a1c <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fe5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe60:	3301      	adds	r3, #1
 800fe62:	637b      	str	r3, [r7, #52]	; 0x34
 800fe64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d9eb      	bls.n	800fe42 <evtMspReceive+0x86a>
 800fe6a:	e011      	b.n	800fe90 <evtMspReceive+0x8b8>
        } else {
            for (i = 0; i < 3; i++)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe70:	e00b      	b.n	800fe8a <evtMspReceive+0x8b2>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 800fe72:	4a28      	ldr	r2, [pc, #160]	; (800ff14 <evtMspReceive+0x93c>)
 800fe74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe76:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f007 fdcc 	bl	8017a1c <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fe84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe86:	3301      	adds	r3, #1
 800fe88:	637b      	str	r3, [r7, #52]	; 0x34
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d9f0      	bls.n	800fe72 <evtMspReceive+0x89a>
        }
        for (i = 0; i < 3; i++)
 800fe90:	2300      	movs	r3, #0
 800fe92:	637b      	str	r3, [r7, #52]	; 0x34
 800fe94:	e00b      	b.n	800feae <evtMspReceive+0x8d6>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 800fe96:	4a20      	ldr	r2, [pc, #128]	; (800ff18 <evtMspReceive+0x940>)
 800fe98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	4619      	mov	r1, r3
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f007 fdba 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feaa:	3301      	adds	r3, #1
 800feac:	637b      	str	r3, [r7, #52]	; 0x34
 800feae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb0:	2b02      	cmp	r3, #2
 800feb2:	d9f0      	bls.n	800fe96 <evtMspReceive+0x8be>
        for (i = 0; i < 3; i++)
 800feb4:	2300      	movs	r3, #0
 800feb6:	637b      	str	r3, [r7, #52]	; 0x34
 800feb8:	e00b      	b.n	800fed2 <evtMspReceive+0x8fa>
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 800feba:	4a18      	ldr	r2, [pc, #96]	; (800ff1c <evtMspReceive+0x944>)
 800febc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800febe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4619      	mov	r1, r3
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f007 fda8 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fece:	3301      	adds	r3, #1
 800fed0:	637b      	str	r3, [r7, #52]	; 0x34
 800fed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d9f0      	bls.n	800feba <evtMspReceive+0x8e2>
        break;
 800fed8:	f000 bfe3 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 800fedc:	2210      	movs	r2, #16
 800fede:	4910      	ldr	r1, [pc, #64]	; (800ff20 <evtMspReceive+0x948>)
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f007 fe15 	bl	8017b10 <pifMsp_AddAnswer>
        break;
 800fee6:	f000 bfdc 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800feea:	2300      	movs	r3, #0
 800feec:	637b      	str	r3, [r7, #52]	; 0x34
 800feee:	e065      	b.n	800ffbc <evtMspReceive+0x9e4>
 800fef0:	20000848 	.word	0x20000848
 800fef4:	c000000c 	.word	0xc000000c
 800fef8:	20001740 	.word	0x20001740
 800fefc:	20001524 	.word	0x20001524
 800ff00:	20001720 	.word	0x20001720
 800ff04:	200017c0 	.word	0x200017c0
 800ff08:	20001bd0 	.word	0x20001bd0
 800ff0c:	20001be9 	.word	0x20001be9
 800ff10:	20000060 	.word	0x20000060
 800ff14:	20001450 	.word	0x20001450
 800ff18:	200014b8 	.word	0x200014b8
 800ff1c:	20001458 	.word	0x20001458
 800ff20:	20000040 	.word	0x20000040
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 800ff24:	49bd      	ldr	r1, [pc, #756]	; (801021c <evtMspReceive+0xc44>)
 800ff26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff28:	4613      	mov	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4413      	add	r3, r2
 800ff2e:	005b      	lsls	r3, r3, #1
 800ff30:	440b      	add	r3, r1
 800ff32:	33b8      	adds	r3, #184	; 0xb8
 800ff34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f007 fd6d 	bl	8017a1c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 800ff42:	49b6      	ldr	r1, [pc, #728]	; (801021c <evtMspReceive+0xc44>)
 800ff44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff46:	4613      	mov	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	4413      	add	r3, r2
 800ff4c:	005b      	lsls	r3, r3, #1
 800ff4e:	440b      	add	r3, r1
 800ff50:	33ba      	adds	r3, #186	; 0xba
 800ff52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	4619      	mov	r1, r3
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f007 fd5e 	bl	8017a1c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 800ff60:	49ae      	ldr	r1, [pc, #696]	; (801021c <evtMspReceive+0xc44>)
 800ff62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff64:	4613      	mov	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	4413      	add	r3, r2
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	440b      	add	r3, r1
 800ff6e:	33bc      	adds	r3, #188	; 0xbc
 800ff70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	4619      	mov	r1, r3
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f007 fd4f 	bl	8017a1c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 800ff7e:	49a7      	ldr	r1, [pc, #668]	; (801021c <evtMspReceive+0xc44>)
 800ff80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff82:	4613      	mov	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4413      	add	r3, r2
 800ff88:	005b      	lsls	r3, r3, #1
 800ff8a:	440b      	add	r3, r1
 800ff8c:	33be      	adds	r3, #190	; 0xbe
 800ff8e:	f993 3000 	ldrsb.w	r3, [r3]
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	4619      	mov	r1, r3
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f007 fd08 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 800ff9c:	499f      	ldr	r1, [pc, #636]	; (801021c <evtMspReceive+0xc44>)
 800ff9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4413      	add	r3, r2
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	440b      	add	r3, r1
 800ffaa:	33c0      	adds	r3, #192	; 0xc0
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f007 fd33 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 800ffb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb8:	3301      	adds	r3, #1
 800ffba:	637b      	str	r3, [r7, #52]	; 0x34
 800ffbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffbe:	2b07      	cmp	r3, #7
 800ffc0:	d9b0      	bls.n	800ff24 <evtMspReceive+0x94c>
        }
        break;
 800ffc2:	f000 bf6e 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	637b      	str	r3, [r7, #52]	; 0x34
 800ffca:	e04d      	b.n	8010068 <evtMspReceive+0xa90>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 800ffcc:	68b8      	ldr	r0, [r7, #8]
 800ffce:	f007 fc6b 	bl	80178a8 <pifMsp_ReadData16>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	b218      	sxth	r0, r3
 800ffd6:	4991      	ldr	r1, [pc, #580]	; (801021c <evtMspReceive+0xc44>)
 800ffd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	005b      	lsls	r3, r3, #1
 800ffe2:	440b      	add	r3, r1
 800ffe4:	33b8      	adds	r3, #184	; 0xb8
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 800ffea:	68b8      	ldr	r0, [r7, #8]
 800ffec:	f007 fc5c 	bl	80178a8 <pifMsp_ReadData16>
 800fff0:	4603      	mov	r3, r0
 800fff2:	b218      	sxth	r0, r3
 800fff4:	4989      	ldr	r1, [pc, #548]	; (801021c <evtMspReceive+0xc44>)
 800fff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fff8:	4613      	mov	r3, r2
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	440b      	add	r3, r1
 8010002:	33ba      	adds	r3, #186	; 0xba
 8010004:	4602      	mov	r2, r0
 8010006:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 8010008:	68b8      	ldr	r0, [r7, #8]
 801000a:	f007 fc4d 	bl	80178a8 <pifMsp_ReadData16>
 801000e:	4603      	mov	r3, r0
 8010010:	b218      	sxth	r0, r3
 8010012:	4982      	ldr	r1, [pc, #520]	; (801021c <evtMspReceive+0xc44>)
 8010014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010016:	4613      	mov	r3, r2
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	440b      	add	r3, r1
 8010020:	33bc      	adds	r3, #188	; 0xbc
 8010022:	4602      	mov	r2, r0
 8010024:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 8010026:	68b8      	ldr	r0, [r7, #8]
 8010028:	f007 fc2a 	bl	8017880 <pifMsp_ReadData8>
 801002c:	4603      	mov	r3, r0
 801002e:	b258      	sxtb	r0, r3
 8010030:	497a      	ldr	r1, [pc, #488]	; (801021c <evtMspReceive+0xc44>)
 8010032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010034:	4613      	mov	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	440b      	add	r3, r1
 801003e:	33be      	adds	r3, #190	; 0xbe
 8010040:	4602      	mov	r2, r0
 8010042:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 8010044:	68b8      	ldr	r0, [r7, #8]
 8010046:	f007 fc2f 	bl	80178a8 <pifMsp_ReadData16>
 801004a:	4603      	mov	r3, r0
 801004c:	4618      	mov	r0, r3
 801004e:	4973      	ldr	r1, [pc, #460]	; (801021c <evtMspReceive+0xc44>)
 8010050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	440b      	add	r3, r1
 801005c:	33c0      	adds	r3, #192	; 0xc0
 801005e:	4602      	mov	r2, r0
 8010060:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010064:	3301      	adds	r3, #1
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
 8010068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801006a:	2b07      	cmp	r3, #7
 801006c:	d9ae      	bls.n	800ffcc <evtMspReceive+0x9f4>
        }
        break;
 801006e:	f000 bf18 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010072:	2300      	movs	r3, #0
 8010074:	637b      	str	r3, [r7, #52]	; 0x34
 8010076:	e05c      	b.n	8010132 <evtMspReceive+0xb5a>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 8010078:	4969      	ldr	r1, [pc, #420]	; (8010220 <evtMspReceive+0xc48>)
 801007a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801007c:	4613      	mov	r3, r2
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	1a9b      	subs	r3, r3, r2
 8010082:	440b      	add	r3, r1
 8010084:	33d0      	adds	r3, #208	; 0xd0
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	4619      	mov	r1, r3
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f007 fc8e 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 8010090:	4963      	ldr	r1, [pc, #396]	; (8010220 <evtMspReceive+0xc48>)
 8010092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010094:	4613      	mov	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	440b      	add	r3, r1
 801009c:	33d1      	adds	r3, #209	; 0xd1
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	4619      	mov	r1, r3
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f007 fc82 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 80100a8:	495d      	ldr	r1, [pc, #372]	; (8010220 <evtMspReceive+0xc48>)
 80100aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ac:	4613      	mov	r3, r2
 80100ae:	00db      	lsls	r3, r3, #3
 80100b0:	1a9b      	subs	r3, r3, r2
 80100b2:	440b      	add	r3, r1
 80100b4:	33d2      	adds	r3, #210	; 0xd2
 80100b6:	f993 3000 	ldrsb.w	r3, [r3]
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	4619      	mov	r1, r3
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f007 fc74 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 80100c4:	4956      	ldr	r1, [pc, #344]	; (8010220 <evtMspReceive+0xc48>)
 80100c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100c8:	4613      	mov	r3, r2
 80100ca:	00db      	lsls	r3, r3, #3
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	440b      	add	r3, r1
 80100d0:	33d3      	adds	r3, #211	; 0xd3
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	4619      	mov	r1, r3
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f007 fc68 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 80100dc:	4950      	ldr	r1, [pc, #320]	; (8010220 <evtMspReceive+0xc48>)
 80100de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e0:	4613      	mov	r3, r2
 80100e2:	00db      	lsls	r3, r3, #3
 80100e4:	1a9b      	subs	r3, r3, r2
 80100e6:	440b      	add	r3, r1
 80100e8:	33d4      	adds	r3, #212	; 0xd4
 80100ea:	f993 3000 	ldrsb.w	r3, [r3]
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	4619      	mov	r1, r3
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f007 fc5a 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 80100f8:	4949      	ldr	r1, [pc, #292]	; (8010220 <evtMspReceive+0xc48>)
 80100fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100fc:	4613      	mov	r3, r2
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	1a9b      	subs	r3, r3, r2
 8010102:	440b      	add	r3, r1
 8010104:	33d5      	adds	r3, #213	; 0xd5
 8010106:	f993 3000 	ldrsb.w	r3, [r3]
 801010a:	b2db      	uxtb	r3, r3
 801010c:	4619      	mov	r1, r3
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f007 fc4c 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 8010114:	4942      	ldr	r1, [pc, #264]	; (8010220 <evtMspReceive+0xc48>)
 8010116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010118:	4613      	mov	r3, r2
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	1a9b      	subs	r3, r3, r2
 801011e:	440b      	add	r3, r1
 8010120:	33d6      	adds	r3, #214	; 0xd6
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	4619      	mov	r1, r3
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f007 fc40 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	3301      	adds	r3, #1
 8010130:	637b      	str	r3, [r7, #52]	; 0x34
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	2b0f      	cmp	r3, #15
 8010136:	d99f      	bls.n	8010078 <evtMspReceive+0xaa0>
        }
        break;
 8010138:	f000 beb3 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801013c:	2300      	movs	r3, #0
 801013e:	637b      	str	r3, [r7, #52]	; 0x34
 8010140:	e064      	b.n	801020c <evtMspReceive+0xc34>
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 8010142:	68b8      	ldr	r0, [r7, #8]
 8010144:	f007 fb9c 	bl	8017880 <pifMsp_ReadData8>
 8010148:	4603      	mov	r3, r0
 801014a:	4618      	mov	r0, r3
 801014c:	4934      	ldr	r1, [pc, #208]	; (8010220 <evtMspReceive+0xc48>)
 801014e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010150:	4613      	mov	r3, r2
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	1a9b      	subs	r3, r3, r2
 8010156:	440b      	add	r3, r1
 8010158:	33d0      	adds	r3, #208	; 0xd0
 801015a:	4602      	mov	r2, r0
 801015c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 801015e:	68b8      	ldr	r0, [r7, #8]
 8010160:	f007 fb8e 	bl	8017880 <pifMsp_ReadData8>
 8010164:	4603      	mov	r3, r0
 8010166:	4618      	mov	r0, r3
 8010168:	492d      	ldr	r1, [pc, #180]	; (8010220 <evtMspReceive+0xc48>)
 801016a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801016c:	4613      	mov	r3, r2
 801016e:	00db      	lsls	r3, r3, #3
 8010170:	1a9b      	subs	r3, r3, r2
 8010172:	440b      	add	r3, r1
 8010174:	33d1      	adds	r3, #209	; 0xd1
 8010176:	4602      	mov	r2, r0
 8010178:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 801017a:	68b8      	ldr	r0, [r7, #8]
 801017c:	f007 fb80 	bl	8017880 <pifMsp_ReadData8>
 8010180:	4603      	mov	r3, r0
 8010182:	b258      	sxtb	r0, r3
 8010184:	4926      	ldr	r1, [pc, #152]	; (8010220 <evtMspReceive+0xc48>)
 8010186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010188:	4613      	mov	r3, r2
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	1a9b      	subs	r3, r3, r2
 801018e:	440b      	add	r3, r1
 8010190:	33d2      	adds	r3, #210	; 0xd2
 8010192:	4602      	mov	r2, r0
 8010194:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 8010196:	68b8      	ldr	r0, [r7, #8]
 8010198:	f007 fb72 	bl	8017880 <pifMsp_ReadData8>
 801019c:	4603      	mov	r3, r0
 801019e:	4618      	mov	r0, r3
 80101a0:	491f      	ldr	r1, [pc, #124]	; (8010220 <evtMspReceive+0xc48>)
 80101a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101a4:	4613      	mov	r3, r2
 80101a6:	00db      	lsls	r3, r3, #3
 80101a8:	1a9b      	subs	r3, r3, r2
 80101aa:	440b      	add	r3, r1
 80101ac:	33d3      	adds	r3, #211	; 0xd3
 80101ae:	4602      	mov	r2, r0
 80101b0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 80101b2:	68b8      	ldr	r0, [r7, #8]
 80101b4:	f007 fb64 	bl	8017880 <pifMsp_ReadData8>
 80101b8:	4603      	mov	r3, r0
 80101ba:	b258      	sxtb	r0, r3
 80101bc:	4918      	ldr	r1, [pc, #96]	; (8010220 <evtMspReceive+0xc48>)
 80101be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c0:	4613      	mov	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	1a9b      	subs	r3, r3, r2
 80101c6:	440b      	add	r3, r1
 80101c8:	33d4      	adds	r3, #212	; 0xd4
 80101ca:	4602      	mov	r2, r0
 80101cc:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 80101ce:	68b8      	ldr	r0, [r7, #8]
 80101d0:	f007 fb56 	bl	8017880 <pifMsp_ReadData8>
 80101d4:	4603      	mov	r3, r0
 80101d6:	b258      	sxtb	r0, r3
 80101d8:	4911      	ldr	r1, [pc, #68]	; (8010220 <evtMspReceive+0xc48>)
 80101da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101dc:	4613      	mov	r3, r2
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	1a9b      	subs	r3, r3, r2
 80101e2:	440b      	add	r3, r1
 80101e4:	33d5      	adds	r3, #213	; 0xd5
 80101e6:	4602      	mov	r2, r0
 80101e8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 80101ea:	68b8      	ldr	r0, [r7, #8]
 80101ec:	f007 fb48 	bl	8017880 <pifMsp_ReadData8>
 80101f0:	4603      	mov	r3, r0
 80101f2:	4618      	mov	r0, r3
 80101f4:	490a      	ldr	r1, [pc, #40]	; (8010220 <evtMspReceive+0xc48>)
 80101f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101f8:	4613      	mov	r3, r2
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	1a9b      	subs	r3, r3, r2
 80101fe:	440b      	add	r3, r1
 8010200:	33d6      	adds	r3, #214	; 0xd6
 8010202:	4602      	mov	r2, r0
 8010204:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010208:	3301      	adds	r3, #1
 801020a:	637b      	str	r3, [r7, #52]	; 0x34
 801020c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020e:	2b0f      	cmp	r3, #15
 8010210:	d997      	bls.n	8010142 <evtMspReceive+0xb6a>
        }
        loadCustomServoMixer();
 8010212:	f7fa fd91 	bl	800ad38 <loadCustomServoMixer>
        break;
 8010216:	f000 be44 	b.w	8010ea2 <evtMspReceive+0x18ca>
 801021a:	bf00      	nop
 801021c:	20000db4 	.word	0x20000db4
 8010220:	20000848 	.word	0x20000848

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 8010224:	4ba7      	ldr	r3, [pc, #668]	; (80104c4 <evtMspReceive+0xeec>)
 8010226:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 801022a:	b2db      	uxtb	r3, r3
 801022c:	4619      	mov	r1, r3
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f007 fbbc 	bl	80179ac <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 8010234:	4ba4      	ldr	r3, [pc, #656]	; (80104c8 <evtMspReceive+0xef0>)
 8010236:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 801023a:	b29b      	uxth	r3, r3
 801023c:	4619      	mov	r1, r3
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f007 fbec 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 8010244:	4ba0      	ldr	r3, [pc, #640]	; (80104c8 <evtMspReceive+0xef0>)
 8010246:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 801024a:	b29b      	uxth	r3, r3
 801024c:	4619      	mov	r1, r3
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f007 fbe4 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 8010254:	4b9c      	ldr	r3, [pc, #624]	; (80104c8 <evtMspReceive+0xef0>)
 8010256:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801025a:	b29b      	uxth	r3, r3
 801025c:	4619      	mov	r1, r3
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f007 fbdc 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 8010264:	4b98      	ldr	r3, [pc, #608]	; (80104c8 <evtMspReceive+0xef0>)
 8010266:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801026a:	b29b      	uxth	r3, r3
 801026c:	4619      	mov	r1, r3
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f007 fbd4 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 8010274:	4b94      	ldr	r3, [pc, #592]	; (80104c8 <evtMspReceive+0xef0>)
 8010276:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801027a:	4619      	mov	r1, r3
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f007 fbcd 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 8010282:	4b91      	ldr	r3, [pc, #580]	; (80104c8 <evtMspReceive+0xef0>)
 8010284:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8010288:	4619      	mov	r1, r3
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f007 fbc6 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 8010290:	4b8d      	ldr	r3, [pc, #564]	; (80104c8 <evtMspReceive+0xef0>)
 8010292:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8010296:	4619      	mov	r1, r3
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f007 fbbf 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 801029e:	4b8a      	ldr	r3, [pc, #552]	; (80104c8 <evtMspReceive+0xef0>)
 80102a0:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80102a4:	4619      	mov	r1, r3
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f007 fbb8 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 80102ac:	4b86      	ldr	r3, [pc, #536]	; (80104c8 <evtMspReceive+0xef0>)
 80102ae:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80102b2:	4619      	mov	r1, r3
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f007 fbef 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 80102ba:	4b83      	ldr	r3, [pc, #524]	; (80104c8 <evtMspReceive+0xef0>)
 80102bc:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80102c0:	4619      	mov	r1, r3
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f007 fb72 	bl	80179ac <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 80102c8:	2100      	movs	r1, #0
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f007 fbe4 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80102d0:	2100      	movs	r1, #0
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f007 fbe0 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80102d8:	2100      	movs	r1, #0
 80102da:	68f8      	ldr	r0, [r7, #12]
 80102dc:	f007 fbdc 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80102e0:	2100      	movs	r1, #0
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f007 fbd8 	bl	8017a98 <pifMsp_AddAnswer32>
        break;
 80102e8:	f000 bddb 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 80102ec:	68b8      	ldr	r0, [r7, #8]
 80102ee:	f007 fac7 	bl	8017880 <pifMsp_ReadData8>
 80102f2:	4603      	mov	r3, r0
 80102f4:	b25a      	sxtb	r2, r3
 80102f6:	4b73      	ldr	r3, [pc, #460]	; (80104c4 <evtMspReceive+0xeec>)
 80102f8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 80102fc:	68b8      	ldr	r0, [r7, #8]
 80102fe:	f007 fad3 	bl	80178a8 <pifMsp_ReadData16>
 8010302:	4603      	mov	r3, r0
 8010304:	b21a      	sxth	r2, r3
 8010306:	4b70      	ldr	r3, [pc, #448]	; (80104c8 <evtMspReceive+0xef0>)
 8010308:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 801030c:	68b8      	ldr	r0, [r7, #8]
 801030e:	f007 facb 	bl	80178a8 <pifMsp_ReadData16>
 8010312:	4603      	mov	r3, r0
 8010314:	b21a      	sxth	r2, r3
 8010316:	4b6c      	ldr	r3, [pc, #432]	; (80104c8 <evtMspReceive+0xef0>)
 8010318:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 801031c:	68b8      	ldr	r0, [r7, #8]
 801031e:	f007 fac3 	bl	80178a8 <pifMsp_ReadData16>
 8010322:	4603      	mov	r3, r0
 8010324:	b21a      	sxth	r2, r3
 8010326:	4b68      	ldr	r3, [pc, #416]	; (80104c8 <evtMspReceive+0xef0>)
 8010328:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 801032c:	68b8      	ldr	r0, [r7, #8]
 801032e:	f007 fabb 	bl	80178a8 <pifMsp_ReadData16>
 8010332:	4603      	mov	r3, r0
 8010334:	b21a      	sxth	r2, r3
 8010336:	4b64      	ldr	r3, [pc, #400]	; (80104c8 <evtMspReceive+0xef0>)
 8010338:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f007 fab3 	bl	80178a8 <pifMsp_ReadData16>
 8010342:	4603      	mov	r3, r0
 8010344:	461a      	mov	r2, r3
 8010346:	4b60      	ldr	r3, [pc, #384]	; (80104c8 <evtMspReceive+0xef0>)
 8010348:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 801034c:	68b8      	ldr	r0, [r7, #8]
 801034e:	f007 faab 	bl	80178a8 <pifMsp_ReadData16>
 8010352:	4603      	mov	r3, r0
 8010354:	461a      	mov	r2, r3
 8010356:	4b5c      	ldr	r3, [pc, #368]	; (80104c8 <evtMspReceive+0xef0>)
 8010358:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 801035c:	68b8      	ldr	r0, [r7, #8]
 801035e:	f007 faa3 	bl	80178a8 <pifMsp_ReadData16>
 8010362:	4603      	mov	r3, r0
 8010364:	461a      	mov	r2, r3
 8010366:	4b58      	ldr	r3, [pc, #352]	; (80104c8 <evtMspReceive+0xef0>)
 8010368:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 801036c:	68b8      	ldr	r0, [r7, #8]
 801036e:	f007 fa9b 	bl	80178a8 <pifMsp_ReadData16>
 8010372:	4603      	mov	r3, r0
 8010374:	461a      	mov	r2, r3
 8010376:	4b54      	ldr	r3, [pc, #336]	; (80104c8 <evtMspReceive+0xef0>)
 8010378:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 801037c:	68b8      	ldr	r0, [r7, #8]
 801037e:	f007 fab0 	bl	80178e2 <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 8010382:	68b8      	ldr	r0, [r7, #8]
 8010384:	f007 fa7c 	bl	8017880 <pifMsp_ReadData8>
 8010388:	4603      	mov	r3, r0
 801038a:	461a      	mov	r2, r3
 801038c:	4b4e      	ldr	r3, [pc, #312]	; (80104c8 <evtMspReceive+0xef0>)
 801038e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 8010392:	68b8      	ldr	r0, [r7, #8]
 8010394:	f007 faa5 	bl	80178e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010398:	68b8      	ldr	r0, [r7, #8]
 801039a:	f007 faa2 	bl	80178e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 801039e:	68b8      	ldr	r0, [r7, #8]
 80103a0:	f007 fa9f 	bl	80178e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80103a4:	68b8      	ldr	r0, [r7, #8]
 80103a6:	f007 fa9c 	bl	80178e2 <pifMsp_ReadData32>
        break;
 80103aa:	f000 bd7a 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 80103ae:	2210      	movs	r2, #16
 80103b0:	4946      	ldr	r1, [pc, #280]	; (80104cc <evtMspReceive+0xef4>)
 80103b2:	68f8      	ldr	r0, [r7, #12]
 80103b4:	f007 fbac 	bl	8017b10 <pifMsp_AddAnswer>
        break;
 80103b8:	f000 bd73 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80103bc:	2300      	movs	r3, #0
 80103be:	637b      	str	r3, [r7, #52]	; 0x34
 80103c0:	e00b      	b.n	80103da <evtMspReceive+0xe02>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 80103c2:	4a43      	ldr	r2, [pc, #268]	; (80104d0 <evtMspReceive+0xef8>)
 80103c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	4619      	mov	r1, r3
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f007 fb24 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 80103d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d6:	3301      	adds	r3, #1
 80103d8:	637b      	str	r3, [r7, #52]	; 0x34
 80103da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103dc:	2b07      	cmp	r3, #7
 80103de:	d9f0      	bls.n	80103c2 <evtMspReceive+0xdea>
        break;
 80103e0:	f000 bd5f 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 80103e4:	4b3b      	ldr	r3, [pc, #236]	; (80104d4 <evtMspReceive+0xefc>)
 80103e6:	7adb      	ldrb	r3, [r3, #11]
 80103e8:	4619      	mov	r1, r3
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f007 fade 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 80103f0:	4b39      	ldr	r3, [pc, #228]	; (80104d8 <evtMspReceive+0xf00>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	4619      	mov	r1, r3
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	f007 fad8 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 80103fc:	4b37      	ldr	r3, [pc, #220]	; (80104dc <evtMspReceive+0xf04>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4619      	mov	r1, r3
 8010402:	68f8      	ldr	r0, [r7, #12]
 8010404:	f007 fb48 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 8010408:	4b34      	ldr	r3, [pc, #208]	; (80104dc <evtMspReceive+0xf04>)
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	4619      	mov	r1, r3
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f007 fb42 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 8010414:	4b32      	ldr	r3, [pc, #200]	; (80104e0 <evtMspReceive+0xf08>)
 8010416:	881b      	ldrh	r3, [r3, #0]
 8010418:	4619      	mov	r1, r3
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f007 fafe 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 8010420:	4b30      	ldr	r3, [pc, #192]	; (80104e4 <evtMspReceive+0xf0c>)
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	4619      	mov	r1, r3
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f007 faf8 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 801042c:	4b2e      	ldr	r3, [pc, #184]	; (80104e8 <evtMspReceive+0xf10>)
 801042e:	881b      	ldrh	r3, [r3, #0]
 8010430:	4619      	mov	r1, r3
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f007 faf2 	bl	8017a1c <pifMsp_AddAnswer16>
        break;
 8010438:	f000 bd33 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 801043c:	4b2b      	ldr	r3, [pc, #172]	; (80104ec <evtMspReceive+0xf14>)
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	4619      	mov	r1, r3
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f007 faea 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 8010448:	4b29      	ldr	r3, [pc, #164]	; (80104f0 <evtMspReceive+0xf18>)
 801044a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801044e:	b29b      	uxth	r3, r3
 8010450:	4619      	mov	r1, r3
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f007 fae2 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 8010458:	4b26      	ldr	r3, [pc, #152]	; (80104f4 <evtMspReceive+0xf1c>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	f003 0301 	and.w	r3, r3, #1
 8010460:	b2db      	uxtb	r3, r3
 8010462:	4619      	mov	r1, r3
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f007 faa1 	bl	80179ac <pifMsp_AddAnswer8>
        break;
 801046a:	f000 bd1a 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 801046e:	2300      	movs	r3, #0
 8010470:	637b      	str	r3, [r7, #52]	; 0x34
 8010472:	e00b      	b.n	801048c <evtMspReceive+0xeb4>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 8010474:	4a20      	ldr	r2, [pc, #128]	; (80104f8 <evtMspReceive+0xf20>)
 8010476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010478:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801047c:	b29b      	uxth	r3, r3
 801047e:	4619      	mov	r1, r3
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f007 facb 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 8010486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010488:	3301      	adds	r3, #1
 801048a:	637b      	str	r3, [r7, #52]	; 0x34
 801048c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048e:	2b01      	cmp	r3, #1
 8010490:	d9f0      	bls.n	8010474 <evtMspReceive+0xe9c>
        pifMsp_AddAnswer16(p_owner, heading);
 8010492:	4b1a      	ldr	r3, [pc, #104]	; (80104fc <evtMspReceive+0xf24>)
 8010494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010498:	b29b      	uxth	r3, r3
 801049a:	4619      	mov	r1, r3
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f007 fabd 	bl	8017a1c <pifMsp_AddAnswer16>
        break;
 80104a2:	f000 bcfe 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 80104a6:	4b16      	ldr	r3, [pc, #88]	; (8010500 <evtMspReceive+0xf28>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4619      	mov	r1, r3
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f007 faf3 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 80104b2:	4b14      	ldr	r3, [pc, #80]	; (8010504 <evtMspReceive+0xf2c>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	4619      	mov	r1, r3
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f007 faae 	bl	8017a1c <pifMsp_AddAnswer16>
        break;
 80104c0:	f000 bcef 	b.w	8010ea2 <evtMspReceive+0x18ca>
 80104c4:	20000848 	.word	0x20000848
 80104c8:	20000db4 	.word	0x20000db4
 80104cc:	20001588 	.word	0x20001588
 80104d0:	20001758 	.word	0x20001758
 80104d4:	20001720 	.word	0x20001720
 80104d8:	20001804 	.word	0x20001804
 80104dc:	200017e4 	.word	0x200017e4
 80104e0:	2000180a 	.word	0x2000180a
 80104e4:	2000180c 	.word	0x2000180c
 80104e8:	20001816 	.word	0x20001816
 80104ec:	20001806 	.word	0x20001806
 80104f0:	20001808 	.word	0x20001808
 80104f4:	2000180e 	.word	0x2000180e
 80104f8:	200014c8 	.word	0x200014c8
 80104fc:	20001a56 	.word	0x20001a56
 8010500:	2000148c 	.word	0x2000148c
 8010504:	200014a4 	.word	0x200014a4

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 8010508:	4b81      	ldr	r3, [pc, #516]	; (8010710 <evtMspReceive+0x1138>)
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	b21b      	sxth	r3, r3
 801050e:	22ff      	movs	r2, #255	; 0xff
 8010510:	2100      	movs	r1, #0
 8010512:	4618      	mov	r0, r3
 8010514:	f7f3 fb78 	bl	8003c08 <constrain>
 8010518:	4603      	mov	r3, r0
 801051a:	b2db      	uxtb	r3, r3
 801051c:	4619      	mov	r1, r3
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f007 fa44 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010524:	4b7b      	ldr	r3, [pc, #492]	; (8010714 <evtMspReceive+0x113c>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801052c:	2100      	movs	r1, #0
 801052e:	4618      	mov	r0, r3
 8010530:	f7f3 fb6a 	bl	8003c08 <constrain>
 8010534:	4603      	mov	r3, r0
 8010536:	b29b      	uxth	r3, r3
 8010538:	4619      	mov	r1, r3
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f007 fa6e 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 8010540:	4b75      	ldr	r3, [pc, #468]	; (8010718 <evtMspReceive+0x1140>)
 8010542:	881b      	ldrh	r3, [r3, #0]
 8010544:	4619      	mov	r1, r3
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f007 fa68 	bl	8017a1c <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 801054c:	4b73      	ldr	r3, [pc, #460]	; (801071c <evtMspReceive+0x1144>)
 801054e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010552:	2b00      	cmp	r3, #0
 8010554:	d017      	beq.n	8010586 <evtMspReceive+0xfae>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010556:	4b72      	ldr	r3, [pc, #456]	; (8010720 <evtMspReceive+0x1148>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801055e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010562:	4613      	mov	r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4413      	add	r3, r2
 8010568:	005b      	lsls	r3, r3, #1
 801056a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801056e:	2100      	movs	r1, #0
 8010570:	4618      	mov	r0, r3
 8010572:	f7f3 fb49 	bl	8003c08 <constrain>
 8010576:	4603      	mov	r3, r0
 8010578:	b29b      	uxth	r3, r3
 801057a:	4619      	mov	r1, r3
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f007 fa4d 	bl	8017a1c <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 8010582:	f000 bc8e 	b.w	8010ea2 <evtMspReceive+0x18ca>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010586:	4b66      	ldr	r3, [pc, #408]	; (8010720 <evtMspReceive+0x1148>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	bfb8      	it	lt
 801058e:	425b      	neglt	r3, r3
 8010590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010594:	2100      	movs	r1, #0
 8010596:	4618      	mov	r0, r3
 8010598:	f7f3 fb36 	bl	8003c08 <constrain>
 801059c:	4603      	mov	r3, r0
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4619      	mov	r1, r3
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f007 fa3a 	bl	8017a1c <pifMsp_AddAnswer16>
        break;
 80105a8:	f000 bc7b 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 80105ac:	4b5d      	ldr	r3, [pc, #372]	; (8010724 <evtMspReceive+0x114c>)
 80105ae:	7fdb      	ldrb	r3, [r3, #31]
 80105b0:	4619      	mov	r1, r3
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f007 f9fa 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 80105b8:	4b5a      	ldr	r3, [pc, #360]	; (8010724 <evtMspReceive+0x114c>)
 80105ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105be:	4619      	mov	r1, r3
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	f007 f9f3 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 80105c6:	4b57      	ldr	r3, [pc, #348]	; (8010724 <evtMspReceive+0x114c>)
 80105c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80105cc:	4619      	mov	r1, r3
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f007 f9ec 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 80105d4:	4b53      	ldr	r3, [pc, #332]	; (8010724 <evtMspReceive+0x114c>)
 80105d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80105da:	4619      	mov	r1, r3
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f007 f9e5 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 80105e2:	4b50      	ldr	r3, [pc, #320]	; (8010724 <evtMspReceive+0x114c>)
 80105e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80105e8:	4619      	mov	r1, r3
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f007 f9de 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 80105f0:	4b4c      	ldr	r3, [pc, #304]	; (8010724 <evtMspReceive+0x114c>)
 80105f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80105f6:	4619      	mov	r1, r3
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f007 f9d7 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 80105fe:	4b49      	ldr	r3, [pc, #292]	; (8010724 <evtMspReceive+0x114c>)
 8010600:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010604:	4619      	mov	r1, r3
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f007 f9d0 	bl	80179ac <pifMsp_AddAnswer8>
        break;
 801060c:	f000 bc49 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010610:	2300      	movs	r3, #0
 8010612:	637b      	str	r3, [r7, #52]	; 0x34
 8010614:	e01d      	b.n	8010652 <evtMspReceive+0x107a>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 8010616:	4a43      	ldr	r2, [pc, #268]	; (8010724 <evtMspReceive+0x114c>)
 8010618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061a:	4413      	add	r3, r2
 801061c:	3301      	adds	r3, #1
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	4619      	mov	r1, r3
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f007 f9c2 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 8010628:	4a3e      	ldr	r2, [pc, #248]	; (8010724 <evtMspReceive+0x114c>)
 801062a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062c:	4413      	add	r3, r2
 801062e:	330b      	adds	r3, #11
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	4619      	mov	r1, r3
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f007 f9b9 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 801063a:	4a3a      	ldr	r2, [pc, #232]	; (8010724 <evtMspReceive+0x114c>)
 801063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063e:	4413      	add	r3, r2
 8010640:	3315      	adds	r3, #21
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	4619      	mov	r1, r3
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f007 f9b0 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < PIDITEMS; i++) {
 801064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064e:	3301      	adds	r3, #1
 8010650:	637b      	str	r3, [r7, #52]	; 0x34
 8010652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010654:	2b09      	cmp	r3, #9
 8010656:	d9de      	bls.n	8010616 <evtMspReceive+0x103e>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
#endif
        }
        break;
 8010658:	f000 bc23 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 801065c:	2230      	movs	r2, #48	; 0x30
 801065e:	4932      	ldr	r1, [pc, #200]	; (8010728 <evtMspReceive+0x1150>)
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f007 fa55 	bl	8017b10 <pifMsp_AddAnswer>
        break;
 8010666:	f000 bc1c 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 801066a:	2300      	movs	r3, #0
 801066c:	637b      	str	r3, [r7, #52]	; 0x34
 801066e:	e010      	b.n	8010692 <evtMspReceive+0x10ba>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 8010670:	4a2e      	ldr	r2, [pc, #184]	; (801072c <evtMspReceive+0x1154>)
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	4413      	add	r3, r2
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	4a2a      	ldr	r2, [pc, #168]	; (8010724 <evtMspReceive+0x114c>)
 801067a:	3312      	adds	r3, #18
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	b29b      	uxth	r3, r3
 8010684:	4619      	mov	r1, r3
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f007 f9c8 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 801068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068e:	3301      	adds	r3, #1
 8010690:	637b      	str	r3, [r7, #52]	; 0x34
 8010692:	4b27      	ldr	r3, [pc, #156]	; (8010730 <evtMspReceive+0x1158>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069a:	4293      	cmp	r3, r2
 801069c:	d3e8      	bcc.n	8010670 <evtMspReceive+0x1098>
        break;
 801069e:	f000 bc00 	b.w	8010ea2 <evtMspReceive+0x18ca>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7fe fe12 	bl	800f2cc <_SerializeBoxNamesReply>
        break;
 80106a8:	e3fb      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80106aa:	2300      	movs	r3, #0
 80106ac:	637b      	str	r3, [r7, #52]	; 0x34
 80106ae:	e028      	b.n	8010702 <evtMspReceive+0x112a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80106b0:	2300      	movs	r3, #0
 80106b2:	633b      	str	r3, [r7, #48]	; 0x30
 80106b4:	e01f      	b.n	80106f6 <evtMspReceive+0x111e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80106b6:	491f      	ldr	r1, [pc, #124]	; (8010734 <evtMspReceive+0x115c>)
 80106b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ba:	4613      	mov	r3, r2
 80106bc:	005b      	lsls	r3, r3, #1
 80106be:	4413      	add	r3, r2
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	440b      	add	r3, r1
 80106c4:	3308      	adds	r3, #8
 80106c6:	781a      	ldrb	r2, [r3, #0]
 80106c8:	4918      	ldr	r1, [pc, #96]	; (801072c <evtMspReceive+0x1154>)
 80106ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106cc:	440b      	add	r3, r1
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d10d      	bne.n	80106f0 <evtMspReceive+0x1118>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 80106d4:	4917      	ldr	r1, [pc, #92]	; (8010734 <evtMspReceive+0x115c>)
 80106d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106d8:	4613      	mov	r3, r2
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	4413      	add	r3, r2
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	440b      	add	r3, r1
 80106e2:	3308      	adds	r3, #8
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	4619      	mov	r1, r3
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f007 f95f 	bl	80179ac <pifMsp_AddAnswer8>
                    break;
 80106ee:	e005      	b.n	80106fc <evtMspReceive+0x1124>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f2:	3301      	adds	r3, #1
 80106f4:	633b      	str	r3, [r7, #48]	; 0x30
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	2b18      	cmp	r3, #24
 80106fa:	d9dc      	bls.n	80106b6 <evtMspReceive+0x10de>
        for (i = 0; i < numberBoxItems; i++) {
 80106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106fe:	3301      	adds	r3, #1
 8010700:	637b      	str	r3, [r7, #52]	; 0x34
 8010702:	4b0b      	ldr	r3, [pc, #44]	; (8010730 <evtMspReceive+0x1158>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070a:	4293      	cmp	r3, r2
 801070c:	d3d0      	bcc.n	80106b0 <evtMspReceive+0x10d8>
                }
            }
        }
        break;
 801070e:	e3c8      	b.n	8010ea2 <evtMspReceive+0x18ca>
 8010710:	20001744 	.word	0x20001744
 8010714:	2000174c 	.word	0x2000174c
 8010718:	200017ac 	.word	0x200017ac
 801071c:	20000848 	.word	0x20000848
 8010720:	20001748 	.word	0x20001748
 8010724:	20000db4 	.word	0x20000db4
 8010728:	08029534 	.word	0x08029534
 801072c:	20001bd0 	.word	0x20001bd0
 8010730:	20001be9 	.word	0x20001be9
 8010734:	080293fc 	.word	0x080293fc

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 8010738:	4ba8      	ldr	r3, [pc, #672]	; (80109dc <evtMspReceive+0x1404>)
 801073a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 801073e:	4619      	mov	r1, r3
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f007 f96b 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 8010746:	4ba5      	ldr	r3, [pc, #660]	; (80109dc <evtMspReceive+0x1404>)
 8010748:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 801074c:	4619      	mov	r1, r3
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f007 f964 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 8010754:	4ba1      	ldr	r3, [pc, #644]	; (80109dc <evtMspReceive+0x1404>)
 8010756:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 801075a:	4619      	mov	r1, r3
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f007 f95d 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 8010762:	4b9e      	ldr	r3, [pc, #632]	; (80109dc <evtMspReceive+0x1404>)
 8010764:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010768:	4619      	mov	r1, r3
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f007 f956 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 8010770:	4b9b      	ldr	r3, [pc, #620]	; (80109e0 <evtMspReceive+0x1408>)
 8010772:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010776:	4619      	mov	r1, r3
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f007 f94f 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 801077e:	4b97      	ldr	r3, [pc, #604]	; (80109dc <evtMspReceive+0x1404>)
 8010780:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010784:	4619      	mov	r1, r3
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f007 f910 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 801078c:	4b93      	ldr	r3, [pc, #588]	; (80109dc <evtMspReceive+0x1404>)
 801078e:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010792:	b2db      	uxtb	r3, r3
 8010794:	4619      	mov	r1, r3
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f007 f908 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 801079c:	4b8f      	ldr	r3, [pc, #572]	; (80109dc <evtMspReceive+0x1404>)
 801079e:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	4619      	mov	r1, r3
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f007 f900 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 80107ac:	4b8b      	ldr	r3, [pc, #556]	; (80109dc <evtMspReceive+0x1404>)
 80107ae:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80107b2:	4619      	mov	r1, r3
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f007 f8f9 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 80107ba:	4b88      	ldr	r3, [pc, #544]	; (80109dc <evtMspReceive+0x1404>)
 80107bc:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80107c0:	4619      	mov	r1, r3
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f007 f8f2 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 80107c8:	2100      	movs	r1, #0
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f007 f8ee 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 80107d0:	4b83      	ldr	r3, [pc, #524]	; (80109e0 <evtMspReceive+0x1408>)
 80107d2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80107d6:	4a83      	ldr	r2, [pc, #524]	; (80109e4 <evtMspReceive+0x140c>)
 80107d8:	fb82 1203 	smull	r1, r2, r2, r3
 80107dc:	1092      	asrs	r2, r2, #2
 80107de:	17db      	asrs	r3, r3, #31
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	b21b      	sxth	r3, r3
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	4619      	mov	r1, r3
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f007 f917 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 80107ee:	4b7b      	ldr	r3, [pc, #492]	; (80109dc <evtMspReceive+0x1404>)
 80107f0:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 80107f4:	4619      	mov	r1, r3
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f007 f8d8 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 80107fc:	4b77      	ldr	r3, [pc, #476]	; (80109dc <evtMspReceive+0x1404>)
 80107fe:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010802:	4619      	mov	r1, r3
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f007 f8d1 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 801080a:	4b74      	ldr	r3, [pc, #464]	; (80109dc <evtMspReceive+0x1404>)
 801080c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010810:	4619      	mov	r1, r3
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f007 f8ca 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 8010818:	4b70      	ldr	r3, [pc, #448]	; (80109dc <evtMspReceive+0x1404>)
 801081a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801081e:	4619      	mov	r1, r3
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f007 f8c3 	bl	80179ac <pifMsp_AddAnswer8>
        break;
 8010826:	e33c      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010828:	2300      	movs	r3, #0
 801082a:	637b      	str	r3, [r7, #52]	; 0x34
 801082c:	e00a      	b.n	8010844 <evtMspReceive+0x126c>
            pifMsp_AddAnswer8(p_owner, i + 1);
 801082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010830:	b2db      	uxtb	r3, r3
 8010832:	3301      	adds	r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	4619      	mov	r1, r3
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f007 f8b7 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 801083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010840:	3301      	adds	r3, #1
 8010842:	637b      	str	r3, [r7, #52]	; 0x34
 8010844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010846:	2b07      	cmp	r3, #7
 8010848:	d9f1      	bls.n	801082e <evtMspReceive+0x1256>
        break;
 801084a:	e32a      	b.n	8010ea2 <evtMspReceive+0x18ca>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 801084c:	68b8      	ldr	r0, [r7, #8]
 801084e:	f007 f817 	bl	8017880 <pifMsp_ReadData8>
 8010852:	4603      	mov	r3, r0
 8010854:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 8010856:	7efb      	ldrb	r3, [r7, #27]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d106      	bne.n	801086a <evtMspReceive+0x1292>
            lat = GPS_home[LAT];
 801085c:	4b62      	ldr	r3, [pc, #392]	; (80109e8 <evtMspReceive+0x1410>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010862:	4b61      	ldr	r3, [pc, #388]	; (80109e8 <evtMspReceive+0x1410>)
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	627b      	str	r3, [r7, #36]	; 0x24
 8010868:	e008      	b.n	801087c <evtMspReceive+0x12a4>
        } else if (wp_no == 16) {
 801086a:	7efb      	ldrb	r3, [r7, #27]
 801086c:	2b10      	cmp	r3, #16
 801086e:	d105      	bne.n	801087c <evtMspReceive+0x12a4>
            lat = GPS_hold[LAT];
 8010870:	4b5e      	ldr	r3, [pc, #376]	; (80109ec <evtMspReceive+0x1414>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010876:	4b5d      	ldr	r3, [pc, #372]	; (80109ec <evtMspReceive+0x1414>)
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 801087c:	7efb      	ldrb	r3, [r7, #27]
 801087e:	4619      	mov	r1, r3
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f007 f893 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	4619      	mov	r1, r3
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f007 f904 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	4619      	mov	r1, r3
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f007 f8ff 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 801089a:	4b55      	ldr	r3, [pc, #340]	; (80109f0 <evtMspReceive+0x1418>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4619      	mov	r1, r3
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f007 f8f9 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 80108a6:	2100      	movs	r1, #0
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f007 f8b7 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 80108ae:	2100      	movs	r1, #0
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f007 f8b3 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 80108b6:	2100      	movs	r1, #0
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f007 f877 	bl	80179ac <pifMsp_AddAnswer8>
        break;
 80108be:	e2f0      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 80108c0:	68b8      	ldr	r0, [r7, #8]
 80108c2:	f006 ffdd 	bl	8017880 <pifMsp_ReadData8>
 80108c6:	4603      	mov	r3, r0
 80108c8:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 80108ca:	68b8      	ldr	r0, [r7, #8]
 80108cc:	f007 f809 	bl	80178e2 <pifMsp_ReadData32>
 80108d0:	4603      	mov	r3, r0
 80108d2:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 80108d4:	68b8      	ldr	r0, [r7, #8]
 80108d6:	f007 f804 	bl	80178e2 <pifMsp_ReadData32>
 80108da:	4603      	mov	r3, r0
 80108dc:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 80108de:	68b8      	ldr	r0, [r7, #8]
 80108e0:	f006 ffff 	bl	80178e2 <pifMsp_ReadData32>
 80108e4:	4603      	mov	r3, r0
 80108e6:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 80108e8:	68b8      	ldr	r0, [r7, #8]
 80108ea:	f006 ffdd 	bl	80178a8 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 80108ee:	68b8      	ldr	r0, [r7, #8]
 80108f0:	f006 ffda 	bl	80178a8 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 80108f4:	68b8      	ldr	r0, [r7, #8]
 80108f6:	f006 ffc3 	bl	8017880 <pifMsp_ReadData8>
        if (wp_no == 0) {
 80108fa:	7efb      	ldrb	r3, [r7, #27]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d113      	bne.n	8010928 <evtMspReceive+0x1350>
            GPS_home[LAT] = lat;
 8010900:	4a39      	ldr	r2, [pc, #228]	; (80109e8 <evtMspReceive+0x1410>)
 8010902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010904:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010906:	4a38      	ldr	r2, [pc, #224]	; (80109e8 <evtMspReceive+0x1410>)
 8010908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090a:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 801090c:	4b39      	ldr	r3, [pc, #228]	; (80109f4 <evtMspReceive+0x141c>)
 801090e:	2200      	movs	r2, #0
 8010910:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010912:	4b38      	ldr	r3, [pc, #224]	; (80109f4 <evtMspReceive+0x141c>)
 8010914:	2201      	movs	r2, #1
 8010916:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010918:	6a3b      	ldr	r3, [r7, #32]
 801091a:	2b00      	cmp	r3, #0
 801091c:	f000 82ba 	beq.w	8010e94 <evtMspReceive+0x18bc>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010920:	4a33      	ldr	r2, [pc, #204]	; (80109f0 <evtMspReceive+0x1418>)
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 8010926:	e2b5      	b.n	8010e94 <evtMspReceive+0x18bc>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010928:	7efb      	ldrb	r3, [r7, #27]
 801092a:	2b10      	cmp	r3, #16
 801092c:	f040 82b2 	bne.w	8010e94 <evtMspReceive+0x18bc>
            GPS_hold[LAT] = lat;
 8010930:	4a2e      	ldr	r2, [pc, #184]	; (80109ec <evtMspReceive+0x1414>)
 8010932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010934:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010936:	4a2d      	ldr	r2, [pc, #180]	; (80109ec <evtMspReceive+0x1414>)
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <evtMspReceive+0x1370>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010942:	4a2b      	ldr	r2, [pc, #172]	; (80109f0 <evtMspReceive+0x1418>)
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010948:	4b2b      	ldr	r3, [pc, #172]	; (80109f8 <evtMspReceive+0x1420>)
 801094a:	2202      	movs	r2, #2
 801094c:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 801094e:	492b      	ldr	r1, [pc, #172]	; (80109fc <evtMspReceive+0x1424>)
 8010950:	4826      	ldr	r0, [pc, #152]	; (80109ec <evtMspReceive+0x1414>)
 8010952:	f7f8 fa85 	bl	8008e60 <GPS_set_next_wp>
        break;
 8010956:	e29d      	b.n	8010e94 <evtMspReceive+0x18bc>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010958:	4b26      	ldr	r3, [pc, #152]	; (80109f4 <evtMspReceive+0x141c>)
 801095a:	785b      	ldrb	r3, [r3, #1]
 801095c:	2b00      	cmp	r3, #0
 801095e:	f040 829b 	bne.w	8010e98 <evtMspReceive+0x18c0>
            checkFirstTime(true);
 8010962:	2001      	movs	r0, #1
 8010964:	f7f5 ff76 	bl	8006854 <checkFirstTime>
        break;
 8010968:	e296      	b.n	8010e98 <evtMspReceive+0x18c0>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 801096a:	4b22      	ldr	r3, [pc, #136]	; (80109f4 <evtMspReceive+0x141c>)
 801096c:	785b      	ldrb	r3, [r3, #1]
 801096e:	2b00      	cmp	r3, #0
 8010970:	f040 8294 	bne.w	8010e9c <evtMspReceive+0x18c4>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010974:	4b22      	ldr	r3, [pc, #136]	; (8010a00 <evtMspReceive+0x1428>)
 8010976:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801097a:	801a      	strh	r2, [r3, #0]
        break;
 801097c:	e28e      	b.n	8010e9c <evtMspReceive+0x18c4>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 801097e:	4b1d      	ldr	r3, [pc, #116]	; (80109f4 <evtMspReceive+0x141c>)
 8010980:	785b      	ldrb	r3, [r3, #1]
 8010982:	2b00      	cmp	r3, #0
 8010984:	f040 828c 	bne.w	8010ea0 <evtMspReceive+0x18c8>
            f.CALIBRATE_MAG = 1;
 8010988:	4b1a      	ldr	r3, [pc, #104]	; (80109f4 <evtMspReceive+0x141c>)
 801098a:	2201      	movs	r2, #1
 801098c:	739a      	strb	r2, [r3, #14]
        break;
 801098e:	e287      	b.n	8010ea0 <evtMspReceive+0x18c8>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010990:	4b18      	ldr	r3, [pc, #96]	; (80109f4 <evtMspReceive+0x141c>)
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d004      	beq.n	80109a2 <evtMspReceive+0x13ca>
            pifMsp_MakeError(p_owner, p_packet);
 8010998:	68b9      	ldr	r1, [r7, #8]
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f007 f8fa 	bl	8017b94 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 80109a0:	e27f      	b.n	8010ea2 <evtMspReceive+0x18ca>
            writeEEPROM(0, true);
 80109a2:	2101      	movs	r1, #1
 80109a4:	2000      	movs	r0, #0
 80109a6:	f7f5 fed3 	bl	8006750 <writeEEPROM>
        break;
 80109aa:	e27a      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 80109ac:	4b0b      	ldr	r3, [pc, #44]	; (80109dc <evtMspReceive+0x1404>)
 80109ae:	899b      	ldrh	r3, [r3, #12]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d02d      	beq.n	8010a10 <evtMspReceive+0x1438>
 80109b4:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <evtMspReceive+0x142c>)
 80109b6:	881a      	ldrh	r2, [r3, #0]
 80109b8:	4b08      	ldr	r3, [pc, #32]	; (80109dc <evtMspReceive+0x1404>)
 80109ba:	899b      	ldrh	r3, [r3, #12]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	b29a      	uxth	r2, r3
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <evtMspReceive+0x1404>)
 80109c2:	899b      	ldrh	r3, [r3, #12]
 80109c4:	4910      	ldr	r1, [pc, #64]	; (8010a08 <evtMspReceive+0x1430>)
 80109c6:	fba1 1303 	umull	r1, r3, r1, r3
 80109ca:	08db      	lsrs	r3, r3, #3
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	4413      	add	r3, r2
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	b21a      	sxth	r2, r3
 80109d4:	4b0d      	ldr	r3, [pc, #52]	; (8010a0c <evtMspReceive+0x1434>)
 80109d6:	801a      	strh	r2, [r3, #0]
 80109d8:	e01f      	b.n	8010a1a <evtMspReceive+0x1442>
 80109da:	bf00      	nop
 80109dc:	20000848 	.word	0x20000848
 80109e0:	20000db4 	.word	0x20000db4
 80109e4:	66666667 	.word	0x66666667
 80109e8:	200017ec 	.word	0x200017ec
 80109ec:	200017f8 	.word	0x200017f8
 80109f0:	20001494 	.word	0x20001494
 80109f4:	20001720 	.word	0x20001720
 80109f8:	20001820 	.word	0x20001820
 80109fc:	200017fc 	.word	0x200017fc
 8010a00:	20001a50 	.word	0x20001a50
 8010a04:	20001740 	.word	0x20001740
 8010a08:	cccccccd 	.word	0xcccccccd
 8010a0c:	20001738 	.word	0x20001738
        else debug[0] = cycleTime;
 8010a10:	4ba6      	ldr	r3, [pc, #664]	; (8010cac <evtMspReceive+0x16d4>)
 8010a12:	881b      	ldrh	r3, [r3, #0]
 8010a14:	b21a      	sxth	r2, r3
 8010a16:	4ba6      	ldr	r3, [pc, #664]	; (8010cb0 <evtMspReceive+0x16d8>)
 8010a18:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 8010a1a:	4ba6      	ldr	r3, [pc, #664]	; (8010cb4 <evtMspReceive+0x16dc>)
 8010a1c:	791b      	ldrb	r3, [r3, #4]
 8010a1e:	b21a      	sxth	r2, r3
 8010a20:	4ba3      	ldr	r3, [pc, #652]	; (8010cb0 <evtMspReceive+0x16d8>)
 8010a22:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010a24:	4ba4      	ldr	r3, [pc, #656]	; (8010cb8 <evtMspReceive+0x16e0>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4aa4      	ldr	r2, [pc, #656]	; (8010cbc <evtMspReceive+0x16e4>)
 8010a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a2e:	0c9b      	lsrs	r3, r3, #18
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	461a      	mov	r2, r3
 8010a34:	0152      	lsls	r2, r2, #5
 8010a36:	1ad2      	subs	r2, r2, r3
 8010a38:	0092      	lsls	r2, r2, #2
 8010a3a:	4413      	add	r3, r2
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	4b9f      	ldr	r3, [pc, #636]	; (8010cc0 <evtMspReceive+0x16e8>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	499d      	ldr	r1, [pc, #628]	; (8010cbc <evtMspReceive+0x16e4>)
 8010a46:	fba1 1303 	umull	r1, r3, r1, r3
 8010a4a:	0c9b      	lsrs	r3, r3, #18
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	4413      	add	r3, r2
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	b21a      	sxth	r2, r3
 8010a54:	4b96      	ldr	r3, [pc, #600]	; (8010cb0 <evtMspReceive+0x16d8>)
 8010a56:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a5c:	e00b      	b.n	8010a76 <evtMspReceive+0x149e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 8010a5e:	4a94      	ldr	r2, [pc, #592]	; (8010cb0 <evtMspReceive+0x16d8>)
 8010a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	4619      	mov	r1, r3
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f006 ffd6 	bl	8017a1c <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 8010a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a72:	3301      	adds	r3, #1
 8010a74:	637b      	str	r3, [r7, #52]	; 0x34
 8010a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a78:	2b03      	cmp	r3, #3
 8010a7a:	d9f0      	bls.n	8010a5e <evtMspReceive+0x1486>
        break;
 8010a7c:	e211      	b.n	8010ea2 <evtMspReceive+0x18ca>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 8010a7e:	4b91      	ldr	r3, [pc, #580]	; (8010cc4 <evtMspReceive+0x16ec>)
 8010a80:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4619      	mov	r1, r3
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f006 ffc7 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 8010a8e:	4b8d      	ldr	r3, [pc, #564]	; (8010cc4 <evtMspReceive+0x16ec>)
 8010a90:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	4619      	mov	r1, r3
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f006 ffbf 	bl	8017a1c <pifMsp_AddAnswer16>
        break;
 8010a9e:	e200      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 8010aa0:	4b89      	ldr	r3, [pc, #548]	; (8010cc8 <evtMspReceive+0x16f0>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f006 fff6 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 8010aac:	4b86      	ldr	r3, [pc, #536]	; (8010cc8 <evtMspReceive+0x16f0>)
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f006 fff0 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 8010ab8:	4b83      	ldr	r3, [pc, #524]	; (8010cc8 <evtMspReceive+0x16f0>)
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	4619      	mov	r1, r3
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f006 ffea 	bl	8017a98 <pifMsp_AddAnswer32>
        break;
 8010ac4:	e1ed      	b.n	8010ea2 <evtMspReceive+0x18ca>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 8010ac6:	4b81      	ldr	r3, [pc, #516]	; (8010ccc <evtMspReceive+0x16f4>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	4619      	mov	r1, r3
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f006 ff6d 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ad6:	e022      	b.n	8010b1e <evtMspReceive+0x1546>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 8010ad8:	4a7d      	ldr	r2, [pc, #500]	; (8010cd0 <evtMspReceive+0x16f8>)
 8010ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010adc:	4413      	add	r3, r2
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f006 ff62 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 8010ae8:	4a7a      	ldr	r2, [pc, #488]	; (8010cd4 <evtMspReceive+0x16fc>)
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	4413      	add	r3, r2
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	4619      	mov	r1, r3
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f006 ff5a 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 8010af8:	4a77      	ldr	r2, [pc, #476]	; (8010cd8 <evtMspReceive+0x1700>)
 8010afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afc:	4413      	add	r3, r2
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	4619      	mov	r1, r3
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f006 ff52 	bl	80179ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 8010b08:	4a74      	ldr	r2, [pc, #464]	; (8010cdc <evtMspReceive+0x1704>)
 8010b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b0c:	4413      	add	r3, r2
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	4619      	mov	r1, r3
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f006 ff4a 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b1e:	4b6b      	ldr	r3, [pc, #428]	; (8010ccc <evtMspReceive+0x16f4>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d3d6      	bcc.n	8010ad8 <evtMspReceive+0x1500>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010b2a:	f7f7 fc5d 	bl	80083e8 <gpsPollSvinfo>
        break;
 8010b2e:	e1b8      	b.n	8010ea2 <evtMspReceive+0x18ca>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010b30:	2020      	movs	r0, #32
 8010b32:	f7f6 f9a7 	bl	8006e84 <sensors>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d012      	beq.n	8010b62 <evtMspReceive+0x158a>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8010b3c:	4b68      	ldr	r3, [pc, #416]	; (8010ce0 <evtMspReceive+0x1708>)
 8010b3e:	685a      	ldr	r2, [r3, #4]
 8010b40:	4b67      	ldr	r3, [pc, #412]	; (8010ce0 <evtMspReceive+0x1708>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	1ad3      	subs	r3, r2, r3
 8010b46:	4619      	mov	r1, r3
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f006 ffa5 	bl	8017a98 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010b4e:	4b65      	ldr	r3, [pc, #404]	; (8010ce4 <evtMspReceive+0x170c>)
 8010b50:	685a      	ldr	r2, [r3, #4]
 8010b52:	4b64      	ldr	r3, [pc, #400]	; (8010ce4 <evtMspReceive+0x170c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	1ad3      	subs	r3, r2, r3
 8010b58:	4619      	mov	r1, r3
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f006 ff9c 	bl	8017a98 <pifMsp_AddAnswer32>
 8010b60:	e007      	b.n	8010b72 <evtMspReceive+0x159a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 8010b62:	2100      	movs	r1, #0
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f006 ff97 	bl	8017a98 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f006 ff93 	bl	8017a98 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 8010b72:	4b5d      	ldr	r3, [pc, #372]	; (8010ce8 <evtMspReceive+0x1710>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4619      	mov	r1, r3
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f006 ff8d 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8010b7e:	4b5b      	ldr	r3, [pc, #364]	; (8010cec <evtMspReceive+0x1714>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4619      	mov	r1, r3
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f006 ff87 	bl	8017a98 <pifMsp_AddAnswer32>
        break;
 8010b8a:	e18a      	b.n	8010ea2 <evtMspReceive+0x18ca>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8010b8c:	68b8      	ldr	r0, [r7, #8]
 8010b8e:	f006 fe77 	bl	8017880 <pifMsp_ReadData8>
 8010b92:	4603      	mov	r3, r0
 8010b94:	461a      	mov	r2, r3
 8010b96:	4b56      	ldr	r3, [pc, #344]	; (8010cf0 <evtMspReceive+0x1718>)
 8010b98:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010b9a:	f7f6 f9f7 	bl	8006f8c <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8010b9e:	68b8      	ldr	r0, [r7, #8]
 8010ba0:	f006 fe9f 	bl	80178e2 <pifMsp_ReadData32>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7f6 f9ca 	bl	8006f40 <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8010bac:	68b8      	ldr	r0, [r7, #8]
 8010bae:	f006 fe67 	bl	8017880 <pifMsp_ReadData8>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4b4e      	ldr	r3, [pc, #312]	; (8010cf0 <evtMspReceive+0x1718>)
 8010bb8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8010bbc:	68b8      	ldr	r0, [r7, #8]
 8010bbe:	f006 fe73 	bl	80178a8 <pifMsp_ReadData16>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	b21a      	sxth	r2, r3
 8010bc6:	4b4a      	ldr	r3, [pc, #296]	; (8010cf0 <evtMspReceive+0x1718>)
 8010bc8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 8010bcc:	68b8      	ldr	r0, [r7, #8]
 8010bce:	f006 fe6b 	bl	80178a8 <pifMsp_ReadData16>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	b21a      	sxth	r2, r3
 8010bd6:	4b46      	ldr	r3, [pc, #280]	; (8010cf0 <evtMspReceive+0x1718>)
 8010bd8:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 8010bdc:	68b8      	ldr	r0, [r7, #8]
 8010bde:	f006 fe63 	bl	80178a8 <pifMsp_ReadData16>
 8010be2:	4603      	mov	r3, r0
 8010be4:	b21a      	sxth	r2, r3
 8010be6:	4b42      	ldr	r3, [pc, #264]	; (8010cf0 <evtMspReceive+0x1718>)
 8010be8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 8010bec:	68b8      	ldr	r0, [r7, #8]
 8010bee:	f006 fe5b 	bl	80178a8 <pifMsp_ReadData16>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	4b3e      	ldr	r3, [pc, #248]	; (8010cf0 <evtMspReceive+0x1718>)
 8010bf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 8010bfc:	68b8      	ldr	r0, [r7, #8]
 8010bfe:	f006 fe53 	bl	80178a8 <pifMsp_ReadData16>
 8010c02:	4603      	mov	r3, r0
 8010c04:	461a      	mov	r2, r3
 8010c06:	4b3a      	ldr	r3, [pc, #232]	; (8010cf0 <evtMspReceive+0x1718>)
 8010c08:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 8010c0c:	68b8      	ldr	r0, [r7, #8]
 8010c0e:	f006 fe4b 	bl	80178a8 <pifMsp_ReadData16>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	4b36      	ldr	r3, [pc, #216]	; (8010cf0 <evtMspReceive+0x1718>)
 8010c18:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 8010c1c:	68b8      	ldr	r0, [r7, #8]
 8010c1e:	f006 fe2f 	bl	8017880 <pifMsp_ReadData8>
 8010c22:	4603      	mov	r3, r0
 8010c24:	461a      	mov	r2, r3
 8010c26:	4b27      	ldr	r3, [pc, #156]	; (8010cc4 <evtMspReceive+0x16ec>)
 8010c28:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8010c2c:	68b8      	ldr	r0, [r7, #8]
 8010c2e:	f006 fe27 	bl	8017880 <pifMsp_ReadData8>
 8010c32:	4603      	mov	r3, r0
 8010c34:	461a      	mov	r2, r3
 8010c36:	4b23      	ldr	r3, [pc, #140]	; (8010cc4 <evtMspReceive+0x16ec>)
 8010c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8010c3c:	68b8      	ldr	r0, [r7, #8]
 8010c3e:	f006 fe1f 	bl	8017880 <pifMsp_ReadData8>
 8010c42:	4603      	mov	r3, r0
 8010c44:	461a      	mov	r2, r3
 8010c46:	4b2a      	ldr	r3, [pc, #168]	; (8010cf0 <evtMspReceive+0x1718>)
 8010c48:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8010c4c:	68b8      	ldr	r0, [r7, #8]
 8010c4e:	f006 fe17 	bl	8017880 <pifMsp_ReadData8>
 8010c52:	4603      	mov	r3, r0
 8010c54:	461a      	mov	r2, r3
 8010c56:	4b1b      	ldr	r3, [pc, #108]	; (8010cc4 <evtMspReceive+0x16ec>)
 8010c58:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8010c5c:	68b8      	ldr	r0, [r7, #8]
 8010c5e:	f006 fe23 	bl	80178a8 <pifMsp_ReadData16>
 8010c62:	4603      	mov	r3, r0
 8010c64:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 8010c66:	4b22      	ldr	r3, [pc, #136]	; (8010cf0 <evtMspReceive+0x1718>)
 8010c68:	899b      	ldrh	r3, [r3, #12]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d04d      	beq.n	8010d0e <evtMspReceive+0x1736>
            if (mcfg.looptime && tmp) {
 8010c72:	4b1f      	ldr	r3, [pc, #124]	; (8010cf0 <evtMspReceive+0x1718>)
 8010c74:	899b      	ldrh	r3, [r3, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00b      	beq.n	8010c92 <evtMspReceive+0x16ba>
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <evtMspReceive+0x16ba>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8010c80:	4b1c      	ldr	r3, [pc, #112]	; (8010cf4 <evtMspReceive+0x171c>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	697a      	ldr	r2, [r7, #20]
 8010c86:	b292      	uxth	r2, r2
 8010c88:	4611      	mov	r1, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f003 fc9a 	bl	80145c4 <pifTask_ChangePeriod>
 8010c90:	e039      	b.n	8010d06 <evtMspReceive+0x172e>
            }
            else {
                if (tmp) {
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d02f      	beq.n	8010cf8 <evtMspReceive+0x1720>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8010c98:	4b16      	ldr	r3, [pc, #88]	; (8010cf4 <evtMspReceive+0x171c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	b292      	uxth	r2, r2
 8010ca0:	2103      	movs	r1, #3
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f003 fc50 	bl	8014548 <pifTask_ChangeMode>
 8010ca8:	e02d      	b.n	8010d06 <evtMspReceive+0x172e>
 8010caa:	bf00      	nop
 8010cac:	20001740 	.word	0x20001740
 8010cb0:	20001738 	.word	0x20001738
 8010cb4:	20001dd4 	.word	0x20001dd4
 8010cb8:	2000170c 	.word	0x2000170c
 8010cbc:	431bde83 	.word	0x431bde83
 8010cc0:	20001710 	.word	0x20001710
 8010cc4:	20000db4 	.word	0x20000db4
 8010cc8:	20001714 	.word	0x20001714
 8010ccc:	20001821 	.word	0x20001821
 8010cd0:	20001824 	.word	0x20001824
 8010cd4:	20001844 	.word	0x20001844
 8010cd8:	20001864 	.word	0x20001864
 8010cdc:	20001884 	.word	0x20001884
 8010ce0:	200018a4 	.word	0x200018a4
 8010ce4:	200018ac 	.word	0x200018ac
 8010ce8:	200018b4 	.word	0x200018b4
 8010cec:	200018b8 	.word	0x200018b8
 8010cf0:	20000848 	.word	0x20000848
 8010cf4:	20001578 	.word	0x20001578
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8010cf8:	4b6d      	ldr	r3, [pc, #436]	; (8010eb0 <evtMspReceive+0x18d8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2264      	movs	r2, #100	; 0x64
 8010cfe:	2101      	movs	r1, #1
 8010d00:	4618      	mov	r0, r3
 8010d02:	f003 fc21 	bl	8014548 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	4b6a      	ldr	r3, [pc, #424]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d0c:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 8010d0e:	68b8      	ldr	r0, [r7, #8]
 8010d10:	f006 fdb6 	bl	8017880 <pifMsp_ReadData8>
 8010d14:	4603      	mov	r3, r0
 8010d16:	461a      	mov	r2, r3
 8010d18:	4b67      	ldr	r3, [pc, #412]	; (8010eb8 <evtMspReceive+0x18e0>)
 8010d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8010d1e:	e0c0      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 8010d20:	4b64      	ldr	r3, [pc, #400]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d22:	795b      	ldrb	r3, [r3, #5]
 8010d24:	4619      	mov	r1, r3
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f006 fe40 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8010d2c:	f7f6 f93a 	bl	8006fa4 <featureMask>
 8010d30:	4603      	mov	r3, r0
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f006 feaf 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8010d3a:	4b5e      	ldr	r3, [pc, #376]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d3c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010d40:	4619      	mov	r1, r3
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f006 fe32 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8010d48:	4b5a      	ldr	r3, [pc, #360]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d4a:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	4619      	mov	r1, r3
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f006 fe62 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8010d58:	4b56      	ldr	r3, [pc, #344]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d5a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	4619      	mov	r1, r3
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f006 fe5a 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8010d68:	4b52      	ldr	r3, [pc, #328]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d6a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	4619      	mov	r1, r3
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f006 fe52 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8010d78:	4b4e      	ldr	r3, [pc, #312]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d7a:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8010d7e:	4619      	mov	r1, r3
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f006 fe4b 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 8010d86:	4b4b      	ldr	r3, [pc, #300]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d88:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f006 fe44 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 8010d94:	4b47      	ldr	r3, [pc, #284]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010d96:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	68f8      	ldr	r0, [r7, #12]
 8010d9e:	f006 fe3d 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 8010da2:	4b45      	ldr	r3, [pc, #276]	; (8010eb8 <evtMspReceive+0x18e0>)
 8010da4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010da8:	4619      	mov	r1, r3
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f006 fdfe 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8010db0:	4b41      	ldr	r3, [pc, #260]	; (8010eb8 <evtMspReceive+0x18e0>)
 8010db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010db6:	4619      	mov	r1, r3
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f006 fdf7 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8010dbe:	4b3d      	ldr	r3, [pc, #244]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010dc0:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f006 fdf0 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 8010dcc:	4b3a      	ldr	r3, [pc, #232]	; (8010eb8 <evtMspReceive+0x18e0>)
 8010dce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	68f8      	ldr	r0, [r7, #12]
 8010dd6:	f006 fde9 	bl	80179ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 8010dda:	4b36      	ldr	r3, [pc, #216]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010ddc:	899b      	ldrh	r3, [r3, #12]
 8010dde:	4619      	mov	r1, r3
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f006 fe1b 	bl	8017a1c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 8010de6:	4b34      	ldr	r3, [pc, #208]	; (8010eb8 <evtMspReceive+0x18e0>)
 8010de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dec:	4619      	mov	r1, r3
 8010dee:	68f8      	ldr	r0, [r7, #12]
 8010df0:	f006 fddc 	bl	80179ac <pifMsp_AddAnswer8>
        /// ???
        break;
 8010df4:	e055      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010df6:	2300      	movs	r3, #0
 8010df8:	637b      	str	r3, [r7, #52]	; 0x34
 8010dfa:	e00c      	b.n	8010e16 <evtMspReceive+0x183e>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 8010dfc:	4a2d      	ldr	r2, [pc, #180]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e00:	4413      	add	r3, r2
 8010e02:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f006 fdce 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e12:	3301      	adds	r3, #1
 8010e14:	637b      	str	r3, [r7, #52]	; 0x34
 8010e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e18:	2b07      	cmp	r3, #7
 8010e1a:	d9ef      	bls.n	8010dfc <evtMspReceive+0x1824>
        break;
 8010e1c:	e041      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e1e:	2300      	movs	r3, #0
 8010e20:	637b      	str	r3, [r7, #52]	; 0x34
 8010e22:	e00e      	b.n	8010e42 <evtMspReceive+0x186a>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 8010e24:	68b8      	ldr	r0, [r7, #8]
 8010e26:	f006 fd2b 	bl	8017880 <pifMsp_ReadData8>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4a21      	ldr	r2, [pc, #132]	; (8010eb4 <evtMspReceive+0x18dc>)
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010e38:	460a      	mov	r2, r1
 8010e3a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3e:	3301      	adds	r3, #1
 8010e40:	637b      	str	r3, [r7, #52]	; 0x34
 8010e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e44:	2b07      	cmp	r3, #7
 8010e46:	d9ed      	bls.n	8010e24 <evtMspReceive+0x184c>
        break;
 8010e48:	e02b      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_REBOOT:
        pendReboot = true;
 8010e4a:	4b1c      	ldr	r3, [pc, #112]	; (8010ebc <evtMspReceive+0x18e4>)
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	701a      	strb	r2, [r3, #0]
        break;
 8010e50:	e027      	b.n	8010ea2 <evtMspReceive+0x18ca>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8010e52:	2300      	movs	r3, #0
 8010e54:	637b      	str	r3, [r7, #52]	; 0x34
 8010e56:	e00a      	b.n	8010e6e <evtMspReceive+0x1896>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8010e58:	69fa      	ldr	r2, [r7, #28]
 8010e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5c:	4413      	add	r3, r2
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	4619      	mov	r1, r3
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f006 fda2 	bl	80179ac <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8010e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e70:	2b0a      	cmp	r3, #10
 8010e72:	d9f1      	bls.n	8010e58 <evtMspReceive+0x1880>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010e74:	2100      	movs	r1, #0
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	f006 fe0e 	bl	8017a98 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010e7c:	2100      	movs	r1, #0
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f006 fe0a 	bl	8017a98 <pifMsp_AddAnswer32>
        break;
 8010e84:	e00d      	b.n	8010ea2 <evtMspReceive+0x18ca>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8010e86:	68b9      	ldr	r1, [r7, #8]
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f006 fe83 	bl	8017b94 <pifMsp_MakeError>
        break;
 8010e8e:	e008      	b.n	8010ea2 <evtMspReceive+0x18ca>
        break;
 8010e90:	bf00      	nop
 8010e92:	e006      	b.n	8010ea2 <evtMspReceive+0x18ca>
        break;
 8010e94:	bf00      	nop
 8010e96:	e004      	b.n	8010ea2 <evtMspReceive+0x18ca>
        break;
 8010e98:	bf00      	nop
 8010e9a:	e002      	b.n	8010ea2 <evtMspReceive+0x18ca>
        break;
 8010e9c:	bf00      	nop
 8010e9e:	e000      	b.n	8010ea2 <evtMspReceive+0x18ca>
        break;
 8010ea0:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f006 feb4 	bl	8017c10 <pifMsp_SendAnswer>
}
 8010ea8:	bf00      	nop
 8010eaa:	373c      	adds	r7, #60	; 0x3c
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd90      	pop	{r4, r7, pc}
 8010eb0:	20001578 	.word	0x20001578
 8010eb4:	20000848 	.word	0x20000848
 8010eb8:	20000db4 	.word	0x20000db4
 8010ebc:	20001bea 	.word	0x20001bea

08010ec0 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	607a      	str	r2, [r7, #4]
 8010ecc:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 8010ece:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <evtMspOtherPacket+0x40>)
 8010ed0:	785b      	ldrb	r3, [r3, #1]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d110      	bne.n	8010ef8 <evtMspOtherPacket+0x38>

    if (data == '#')
 8010ed6:	7afb      	ldrb	r3, [r7, #11]
 8010ed8:	2b23      	cmp	r3, #35	; 0x23
 8010eda:	d103      	bne.n	8010ee4 <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <evtMspOtherPacket+0x44>)
 8010ede:	2201      	movs	r2, #1
 8010ee0:	701a      	strb	r2, [r3, #0]
 8010ee2:	e00a      	b.n	8010efa <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 8010ee4:	4b08      	ldr	r3, [pc, #32]	; (8010f08 <evtMspOtherPacket+0x48>)
 8010ee6:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8010eea:	7afa      	ldrb	r2, [r7, #11]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d104      	bne.n	8010efa <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 8010ef0:	2001      	movs	r0, #1
 8010ef2:	f7f1 f8a5 	bl	8002040 <systemReset>
 8010ef6:	e000      	b.n	8010efa <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 8010ef8:	bf00      	nop
}
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	20001720 	.word	0x20001720
 8010f04:	20001ca4 	.word	0x20001ca4
 8010f08:	20000848 	.word	0x20000848

08010f0c <serialCom>:

void serialCom(void)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 8010f10:	4b0c      	ldr	r3, [pc, #48]	; (8010f44 <serialCom+0x38>)
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00b      	beq.n	8010f30 <serialCom+0x24>
        s_change_cli = FALSE;
 8010f18:	4b0a      	ldr	r3, [pc, #40]	; (8010f44 <serialCom+0x38>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 8010f1e:	480a      	ldr	r0, [pc, #40]	; (8010f48 <serialCom+0x3c>)
 8010f20:	f006 fc88 	bl	8017834 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8010f24:	4b09      	ldr	r3, [pc, #36]	; (8010f4c <serialCom+0x40>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3304      	adds	r3, #4
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7f5 fa18 	bl	8006360 <cliInit>
    };

    if (pendReboot)
 8010f30:	4b07      	ldr	r3, [pc, #28]	; (8010f50 <serialCom+0x44>)
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d002      	beq.n	8010f3e <serialCom+0x32>
        systemReset(false); // noreturn
 8010f38:	2000      	movs	r0, #0
 8010f3a:	f7f1 f881 	bl	8002040 <systemReset>
}
 8010f3e:	bf00      	nop
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	20001ca4 	.word	0x20001ca4
 8010f48:	20001bf0 	.word	0x20001bf0
 8010f4c:	20000790 	.word	0x20000790
 8010f50:	20001bea 	.word	0x20001bea

08010f54 <spektrumReadRawRC>:
static PifRcSpektrum s_spektrum;
static uint32_t spekChannelData[SPEK_2048_MAX_CHANNEL];


static uint16_t spektrumReadRawRC(uint8_t chan)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

    if (chan >= s_spektrum.parent._channel_count) {
 8010f5e:	4b0d      	ldr	r3, [pc, #52]	; (8010f94 <spektrumReadRawRC+0x40>)
 8010f60:	789b      	ldrb	r3, [r3, #2]
 8010f62:	79fa      	ldrb	r2, [r7, #7]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d304      	bcc.n	8010f72 <spektrumReadRawRC+0x1e>
        data = mcfg.midrc;
 8010f68:	4b0b      	ldr	r3, [pc, #44]	; (8010f98 <spektrumReadRawRC+0x44>)
 8010f6a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010f6e:	81fb      	strh	r3, [r7, #14]
 8010f70:	e009      	b.n	8010f86 <spektrumReadRawRC+0x32>
    } else {
        data = spekChannelData[mcfg.rcmap[chan]];
 8010f72:	79fb      	ldrb	r3, [r7, #7]
 8010f74:	4a08      	ldr	r2, [pc, #32]	; (8010f98 <spektrumReadRawRC+0x44>)
 8010f76:	4413      	add	r3, r2
 8010f78:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4b07      	ldr	r3, [pc, #28]	; (8010f9c <spektrumReadRawRC+0x48>)
 8010f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f84:	81fb      	strh	r3, [r7, #14]
    }

    return data;
 8010f86:	89fb      	ldrh	r3, [r7, #14]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	20001ca8 	.word	0x20001ca8
 8010f98:	20000848 	.word	0x20000848
 8010f9c:	20001d08 	.word	0x20001d08

08010fa0 <_evtSpektrumReceive>:

static void _evtSpektrumReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
	int i;
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8010fac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010fb0:	f7f5 ffb0 	bl	8006f14 <feature>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d005      	beq.n	8010fc6 <_evtSpektrumReceive+0x26>
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f006 fe84 	bl	8017cc8 <pifRc_CheckFailSafe>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d11e      	bne.n	8011004 <_evtSpektrumReceive+0x64>

    failsafeCnt = 0;
 8010fc6:	4b11      	ldr	r3, [pc, #68]	; (801100c <_evtSpektrumReceive+0x6c>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < p_owner->_channel_count; i++) {
 8010fcc:	2300      	movs	r3, #0
 8010fce:	617b      	str	r3, [r7, #20]
 8010fd0:	e00c      	b.n	8010fec <_evtSpektrumReceive+0x4c>
        spekChannelData[i] = channel[i];
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	4413      	add	r3, r2
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	4619      	mov	r1, r3
 8010fde:	4a0c      	ldr	r2, [pc, #48]	; (8011010 <_evtSpektrumReceive+0x70>)
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < p_owner->_channel_count; i++) {
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	617b      	str	r3, [r7, #20]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	789b      	ldrb	r3, [r3, #2]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	dbec      	blt.n	8010fd2 <_evtSpektrumReceive+0x32>
    }

	p_task = (PifTask*)p_issuer;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 8010ffc:	6938      	ldr	r0, [r7, #16]
 8010ffe:	f003 fb03 	bl	8014608 <pifTask_SetTrigger>
 8011002:	e000      	b.n	8011006 <_evtSpektrumReceive+0x66>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011004:	bf00      	nop
}
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	20001752 	.word	0x20001752
 8011010:	20001d08 	.word	0x20001d08

08011014 <spektrumInit>:

BOOL spektrumInit(int uart, rcReadRawDataPtr *callback)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
    int b;
    uint8_t Protocol_id;

    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 801101e:	2300      	movs	r3, #0
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e00a      	b.n	801103a <spektrumInit+0x26>
        spekChannelData[b] = mcfg.midrc;
 8011024:	4b2b      	ldr	r3, [pc, #172]	; (80110d4 <spektrumInit+0xc0>)
 8011026:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 801102a:	4619      	mov	r1, r3
 801102c:	4a2a      	ldr	r2, [pc, #168]	; (80110d8 <spektrumInit+0xc4>)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	3301      	adds	r3, #1
 8011038:	60fb      	str	r3, [r7, #12]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b07      	cmp	r3, #7
 801103e:	ddf1      	ble.n	8011024 <spektrumInit+0x10>

    switch (mcfg.serialrx_type) {
 8011040:	4b24      	ldr	r3, [pc, #144]	; (80110d4 <spektrumInit+0xc0>)
 8011042:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8011046:	2b00      	cmp	r3, #0
 8011048:	d004      	beq.n	8011054 <spektrumInit+0x40>
 801104a:	2b01      	cmp	r3, #1
 801104c:	d105      	bne.n	801105a <spektrumInit+0x46>
    case SERIALRX_SPEKTRUM2048:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS;
 801104e:	23a2      	movs	r3, #162	; 0xa2
 8011050:	72fb      	strb	r3, [r7, #11]
        break;
 8011052:	e004      	b.n	801105e <spektrumInit+0x4a>

    case SERIALRX_SPEKTRUM1024:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2;
 8011054:	2301      	movs	r3, #1
 8011056:	72fb      	strb	r3, [r7, #11]
        break;
 8011058:	e001      	b.n	801105e <spektrumInit+0x4a>

    default:
        return FALSE;
 801105a:	2300      	movs	r3, #0
 801105c:	e035      	b.n	80110ca <spektrumInit+0xb6>
    }

    // spekUart is set by spektrumBind() which is called very early at startup
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 801105e:	2302      	movs	r3, #2
 8011060:	2201      	movs	r2, #1
 8011062:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f7f1 f948 	bl	80022fc <uartOpen>
 801106c:	4603      	mov	r3, r0
 801106e:	4a1b      	ldr	r2, [pc, #108]	; (80110dc <spektrumInit+0xc8>)
 8011070:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8011072:	4b1a      	ldr	r3, [pc, #104]	; (80110dc <spektrumInit+0xc8>)
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d101      	bne.n	801107e <spektrumInit+0x6a>
 801107a:	2300      	movs	r3, #0
 801107c:	e025      	b.n	80110ca <spektrumInit+0xb6>

    if (!pifRcSpektrum_Init(&s_spektrum, PIF_ID_AUTO, Protocol_id)) return FALSE;
 801107e:	7afb      	ldrb	r3, [r7, #11]
 8011080:	461a      	mov	r2, r3
 8011082:	2100      	movs	r1, #0
 8011084:	4816      	ldr	r0, [pc, #88]	; (80110e0 <spektrumInit+0xcc>)
 8011086:	f007 fdcf 	bl	8018c28 <pifRcSpektrum_Init>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d101      	bne.n	8011094 <spektrumInit+0x80>
 8011090:	2300      	movs	r3, #0
 8011092:	e01a      	b.n	80110ca <spektrumInit+0xb6>
    pifRc_AttachEvtReceive(&s_spektrum.parent, _evtSpektrumReceive, g_task_compute_rc);
 8011094:	4b13      	ldr	r3, [pc, #76]	; (80110e4 <spektrumInit+0xd0>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	461a      	mov	r2, r3
 801109a:	4913      	ldr	r1, [pc, #76]	; (80110e8 <spektrumInit+0xd4>)
 801109c:	4810      	ldr	r0, [pc, #64]	; (80110e0 <spektrumInit+0xcc>)
 801109e:	f006 fe01 	bl	8017ca4 <pifRc_AttachEvtReceive>
    pifRcSpektrum_AttachComm(&s_spektrum, &core.rcvrport->comm);
 80110a2:	4b0e      	ldr	r3, [pc, #56]	; (80110dc <spektrumInit+0xc8>)
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	3304      	adds	r3, #4
 80110a8:	4619      	mov	r1, r3
 80110aa:	480d      	ldr	r0, [pc, #52]	; (80110e0 <spektrumInit+0xcc>)
 80110ac:	f007 fe50 	bl	8018d50 <pifRcSpektrum_AttachComm>

    if (callback)
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d002      	beq.n	80110bc <spektrumInit+0xa8>
        *callback = spektrumReadRawRC;
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	4a0c      	ldr	r2, [pc, #48]	; (80110ec <spektrumInit+0xd8>)
 80110ba:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80110bc:	4b07      	ldr	r3, [pc, #28]	; (80110dc <spektrumInit+0xc8>)
 80110be:	691b      	ldr	r3, [r3, #16]
 80110c0:	3304      	adds	r3, #4
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f1 fa86 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 80110c8:	2301      	movs	r3, #1
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20000848 	.word	0x20000848
 80110d8:	20001d08 	.word	0x20001d08
 80110dc:	20000790 	.word	0x20000790
 80110e0:	20001ca8 	.word	0x20001ca8
 80110e4:	2000157c 	.word	0x2000157c
 80110e8:	08010fa1 	.word	0x08010fa1
 80110ec:	08010f55 	.word	0x08010f55

080110f0 <sumdReadRawRC>:
static PifRcSumd s_sumd;
static uint32_t sumdChannelData[SUMD_MAX_CHANNEL];


static uint16_t sumdReadRawRC(uint8_t chan)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	71fb      	strb	r3, [r7, #7]
    return sumdChannelData[mcfg.rcmap[chan]];
 80110fa:	79fb      	ldrb	r3, [r7, #7]
 80110fc:	4a07      	ldr	r2, [pc, #28]	; (801111c <sumdReadRawRC+0x2c>)
 80110fe:	4413      	add	r3, r2
 8011100:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8011104:	461a      	mov	r2, r3
 8011106:	4b06      	ldr	r3, [pc, #24]	; (8011120 <sumdReadRawRC+0x30>)
 8011108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801110c:	b29b      	uxth	r3, r3
}
 801110e:	4618      	mov	r0, r3
 8011110:	370c      	adds	r7, #12
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	20000848 	.word	0x20000848
 8011120:	20001d98 	.word	0x20001d98

08011124 <_evtSumdReceive>:

static void _evtSumdReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b086      	sub	sp, #24
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011130:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011134:	f7f5 feee 	bl	8006f14 <feature>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d005      	beq.n	801114a <_evtSumdReceive+0x26>
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f006 fdc2 	bl	8017cc8 <pifRc_CheckFailSafe>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d11b      	bne.n	8011182 <_evtSumdReceive+0x5e>

	failsafeCnt = 0;
 801114a:	4b10      	ldr	r3, [pc, #64]	; (801118c <_evtSumdReceive+0x68>)
 801114c:	2200      	movs	r2, #0
 801114e:	801a      	strh	r2, [r3, #0]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 8011150:	2300      	movs	r3, #0
 8011152:	617b      	str	r3, [r7, #20]
 8011154:	e00c      	b.n	8011170 <_evtSumdReceive+0x4c>
		sumdChannelData[b] = channel[b];
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	68ba      	ldr	r2, [r7, #8]
 801115c:	4413      	add	r3, r2
 801115e:	881b      	ldrh	r3, [r3, #0]
 8011160:	4619      	mov	r1, r3
 8011162:	4a0b      	ldr	r2, [pc, #44]	; (8011190 <_evtSumdReceive+0x6c>)
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	3301      	adds	r3, #1
 801116e:	617b      	str	r3, [r7, #20]
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	2b07      	cmp	r3, #7
 8011174:	ddef      	ble.n	8011156 <_evtSumdReceive+0x32>

	p_task = (PifTask*)p_issuer;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 801117a:	6938      	ldr	r0, [r7, #16]
 801117c:	f003 fa44 	bl	8014608 <pifTask_SetTrigger>
 8011180:	e000      	b.n	8011184 <_evtSumdReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011182:	bf00      	nop
}
 8011184:	3718      	adds	r7, #24
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	20001752 	.word	0x20001752
 8011190:	20001d98 	.word	0x20001d98

08011194 <sumdInit>:

BOOL sumdInit(int uart, rcReadRawDataPtr *callback)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 801119e:	2302      	movs	r3, #2
 80111a0:	2201      	movs	r2, #1
 80111a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f7f1 f8a8 	bl	80022fc <uartOpen>
 80111ac:	4603      	mov	r3, r0
 80111ae:	4a18      	ldr	r2, [pc, #96]	; (8011210 <sumdInit+0x7c>)
 80111b0:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 80111b2:	4b17      	ldr	r3, [pc, #92]	; (8011210 <sumdInit+0x7c>)
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <sumdInit+0x2a>
 80111ba:	2300      	movs	r3, #0
 80111bc:	e023      	b.n	8011206 <sumdInit+0x72>

    if (!pifRcSumd_Init(&s_sumd, PIF_ID_AUTO)) return FALSE;
 80111be:	2100      	movs	r1, #0
 80111c0:	4814      	ldr	r0, [pc, #80]	; (8011214 <sumdInit+0x80>)
 80111c2:	f007 fecf 	bl	8018f64 <pifRcSumd_Init>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <sumdInit+0x3c>
 80111cc:	2300      	movs	r3, #0
 80111ce:	e01a      	b.n	8011206 <sumdInit+0x72>
    pifRc_AttachEvtReceive(&s_sumd.parent, _evtSumdReceive, g_task_compute_rc);
 80111d0:	4b11      	ldr	r3, [pc, #68]	; (8011218 <sumdInit+0x84>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	461a      	mov	r2, r3
 80111d6:	4911      	ldr	r1, [pc, #68]	; (801121c <sumdInit+0x88>)
 80111d8:	480e      	ldr	r0, [pc, #56]	; (8011214 <sumdInit+0x80>)
 80111da:	f006 fd63 	bl	8017ca4 <pifRc_AttachEvtReceive>
    pifRcSumd_AttachComm(&s_sumd, &core.rcvrport->comm);
 80111de:	4b0c      	ldr	r3, [pc, #48]	; (8011210 <sumdInit+0x7c>)
 80111e0:	691b      	ldr	r3, [r3, #16]
 80111e2:	3304      	adds	r3, #4
 80111e4:	4619      	mov	r1, r3
 80111e6:	480b      	ldr	r0, [pc, #44]	; (8011214 <sumdInit+0x80>)
 80111e8:	f007 fef0 	bl	8018fcc <pifRcSumd_AttachComm>

    if (callback)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d002      	beq.n	80111f8 <sumdInit+0x64>
        *callback = sumdReadRawRC;
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	4a0a      	ldr	r2, [pc, #40]	; (8011220 <sumdInit+0x8c>)
 80111f6:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80111f8:	4b05      	ldr	r3, [pc, #20]	; (8011210 <sumdInit+0x7c>)
 80111fa:	691b      	ldr	r3, [r3, #16]
 80111fc:	3304      	adds	r3, #4
 80111fe:	4618      	mov	r0, r3
 8011200:	f7f1 f9e8 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 8011204:	2301      	movs	r3, #1
}
 8011206:	4618      	mov	r0, r3
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	20000790 	.word	0x20000790
 8011214:	20001d28 	.word	0x20001d28
 8011218:	2000157c 	.word	0x2000157c
 801121c:	08011125 	.word	0x08011125
 8011220:	080110f1 	.word	0x080110f1

08011224 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 801122c:	4a07      	ldr	r2, [pc, #28]	; (801124c <pif_Init+0x28>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8011232:	4b07      	ldr	r3, [pc, #28]	; (8011250 <pif_Init+0x2c>)
 8011234:	2201      	movs	r2, #1
 8011236:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011238:	4b05      	ldr	r3, [pc, #20]	; (8011250 <pif_Init+0x2c>)
 801123a:	2201      	movs	r2, #1
 801123c:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 801123e:	bf00      	nop
 8011240:	370c      	adds	r7, #12
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	20001ddc 	.word	0x20001ddc
 8011250:	20001dc8 	.word	0x20001dc8

08011254 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 801125a:	4b53      	ldr	r3, [pc, #332]	; (80113a8 <pif_sigTimer1ms+0x154>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	3301      	adds	r3, #1
 8011260:	4a51      	ldr	r2, [pc, #324]	; (80113a8 <pif_sigTimer1ms+0x154>)
 8011262:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8011264:	4b51      	ldr	r3, [pc, #324]	; (80113ac <pif_sigTimer1ms+0x158>)
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	b29b      	uxth	r3, r3
 801126a:	3301      	adds	r3, #1
 801126c:	b29a      	uxth	r2, r3
 801126e:	4b4f      	ldr	r3, [pc, #316]	; (80113ac <pif_sigTimer1ms+0x158>)
 8011270:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8011272:	4b4e      	ldr	r3, [pc, #312]	; (80113ac <pif_sigTimer1ms+0x158>)
 8011274:	881b      	ldrh	r3, [r3, #0]
 8011276:	b29b      	uxth	r3, r3
 8011278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801127c:	f0c0 8086 	bcc.w	801138c <pif_sigTimer1ms+0x138>
        pif_timer1ms = 0;
 8011280:	4b4a      	ldr	r3, [pc, #296]	; (80113ac <pif_sigTimer1ms+0x158>)
 8011282:	2200      	movs	r2, #0
 8011284:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 8011286:	4b4a      	ldr	r3, [pc, #296]	; (80113b0 <pif_sigTimer1ms+0x15c>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	3301      	adds	r3, #1
 801128c:	4a48      	ldr	r2, [pc, #288]	; (80113b0 <pif_sigTimer1ms+0x15c>)
 801128e:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8011290:	4b48      	ldr	r3, [pc, #288]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011292:	795b      	ldrb	r3, [r3, #5]
 8011294:	b2db      	uxtb	r3, r3
 8011296:	3301      	adds	r3, #1
 8011298:	b2da      	uxtb	r2, r3
 801129a:	4b46      	ldr	r3, [pc, #280]	; (80113b4 <pif_sigTimer1ms+0x160>)
 801129c:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 801129e:	4b45      	ldr	r3, [pc, #276]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112a0:	795b      	ldrb	r3, [r3, #5]
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b3b      	cmp	r3, #59	; 0x3b
 80112a6:	d96a      	bls.n	801137e <pif_sigTimer1ms+0x12a>
    		pif_datetime.second = 0;
 80112a8:	4b42      	ldr	r3, [pc, #264]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 80112ae:	4b41      	ldr	r3, [pc, #260]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112b0:	791b      	ldrb	r3, [r3, #4]
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	3301      	adds	r3, #1
 80112b6:	b2da      	uxtb	r2, r3
 80112b8:	4b3e      	ldr	r3, [pc, #248]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112ba:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80112bc:	4b3d      	ldr	r3, [pc, #244]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112be:	791b      	ldrb	r3, [r3, #4]
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b3b      	cmp	r3, #59	; 0x3b
 80112c4:	d95b      	bls.n	801137e <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 80112c6:	4b3b      	ldr	r3, [pc, #236]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80112cc:	4b39      	ldr	r3, [pc, #228]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112ce:	78db      	ldrb	r3, [r3, #3]
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	3301      	adds	r3, #1
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	4b37      	ldr	r3, [pc, #220]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112d8:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80112da:	4b36      	ldr	r3, [pc, #216]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112dc:	78db      	ldrb	r3, [r3, #3]
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	2b17      	cmp	r3, #23
 80112e2:	d94c      	bls.n	801137e <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 80112e4:	4b33      	ldr	r3, [pc, #204]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 80112ea:	4b32      	ldr	r3, [pc, #200]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112ec:	789b      	ldrb	r3, [r3, #2]
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	3301      	adds	r3, #1
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	4b2f      	ldr	r3, [pc, #188]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112f6:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 80112f8:	4b2e      	ldr	r3, [pc, #184]	; (80113b4 <pif_sigTimer1ms+0x160>)
 80112fa:	785b      	ldrb	r3, [r3, #1]
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	3b01      	subs	r3, #1
 8011300:	4a2d      	ldr	r2, [pc, #180]	; (80113b8 <pif_sigTimer1ms+0x164>)
 8011302:	5cd3      	ldrb	r3, [r2, r3]
 8011304:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8011306:	4b2b      	ldr	r3, [pc, #172]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011308:	785b      	ldrb	r3, [r3, #1]
 801130a:	b2db      	uxtb	r3, r3
 801130c:	2b02      	cmp	r3, #2
 801130e:	d117      	bne.n	8011340 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 8011310:	4b28      	ldr	r3, [pc, #160]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	b2db      	uxtb	r3, r3
 8011316:	b29b      	uxth	r3, r3
 8011318:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801131c:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 801131e:	88bb      	ldrh	r3, [r7, #4]
 8011320:	2b03      	cmp	r3, #3
 8011322:	d80d      	bhi.n	8011340 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 8011324:	88bb      	ldrh	r3, [r7, #4]
 8011326:	2b63      	cmp	r3, #99	; 0x63
 8011328:	d807      	bhi.n	801133a <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 801132a:	88bb      	ldrh	r3, [r7, #4]
 801132c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011330:	d206      	bcs.n	8011340 <pif_sigTimer1ms+0xec>
 8011332:	79fb      	ldrb	r3, [r7, #7]
 8011334:	3301      	adds	r3, #1
 8011336:	71fb      	strb	r3, [r7, #7]
 8011338:	e002      	b.n	8011340 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 801133a:	79fb      	ldrb	r3, [r7, #7]
 801133c:	3301      	adds	r3, #1
 801133e:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011340:	4b1c      	ldr	r3, [pc, #112]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011342:	789b      	ldrb	r3, [r3, #2]
 8011344:	b2db      	uxtb	r3, r3
 8011346:	79fa      	ldrb	r2, [r7, #7]
 8011348:	429a      	cmp	r2, r3
 801134a:	d218      	bcs.n	801137e <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 801134c:	4b19      	ldr	r3, [pc, #100]	; (80113b4 <pif_sigTimer1ms+0x160>)
 801134e:	2201      	movs	r2, #1
 8011350:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011352:	4b18      	ldr	r3, [pc, #96]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011354:	785b      	ldrb	r3, [r3, #1]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	3301      	adds	r3, #1
 801135a:	b2da      	uxtb	r2, r3
 801135c:	4b15      	ldr	r3, [pc, #84]	; (80113b4 <pif_sigTimer1ms+0x160>)
 801135e:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8011360:	4b14      	ldr	r3, [pc, #80]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011362:	785b      	ldrb	r3, [r3, #1]
 8011364:	b2db      	uxtb	r3, r3
 8011366:	2b0c      	cmp	r3, #12
 8011368:	d909      	bls.n	801137e <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 801136a:	4b12      	ldr	r3, [pc, #72]	; (80113b4 <pif_sigTimer1ms+0x160>)
 801136c:	2201      	movs	r2, #1
 801136e:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011370:	4b10      	ldr	r3, [pc, #64]	; (80113b4 <pif_sigTimer1ms+0x160>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	b2db      	uxtb	r3, r3
 8011376:	3301      	adds	r3, #1
 8011378:	b2da      	uxtb	r2, r3
 801137a:	4b0e      	ldr	r3, [pc, #56]	; (80113b4 <pif_sigTimer1ms+0x160>)
 801137c:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
#endif			
    	}

    	pif_performance.__state |= 2;
 801137e:	4b0f      	ldr	r3, [pc, #60]	; (80113bc <pif_sigTimer1ms+0x168>)
 8011380:	795b      	ldrb	r3, [r3, #5]
 8011382:	f043 0302 	orr.w	r3, r3, #2
 8011386:	b2da      	uxtb	r2, r3
 8011388:	4b0c      	ldr	r3, [pc, #48]	; (80113bc <pif_sigTimer1ms+0x168>)
 801138a:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 801138c:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <pif_sigTimer1ms+0x168>)
 801138e:	795b      	ldrb	r3, [r3, #5]
 8011390:	f043 0301 	orr.w	r3, r3, #1
 8011394:	b2da      	uxtb	r2, r3
 8011396:	4b09      	ldr	r3, [pc, #36]	; (80113bc <pif_sigTimer1ms+0x168>)
 8011398:	715a      	strb	r2, [r3, #5]
}
 801139a:	bf00      	nop
 801139c:	370c      	adds	r7, #12
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	20001dd0 	.word	0x20001dd0
 80113ac:	20001dc0 	.word	0x20001dc0
 80113b0:	20001dc4 	.word	0x20001dc4
 80113b4:	20001dc8 	.word	0x20001dc8
 80113b8:	08029564 	.word	0x08029564
 80113bc:	20001dd4 	.word	0x20001dd4

080113c0 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80113ca:	4b0a      	ldr	r3, [pc, #40]	; (80113f4 <pif_Delay1ms+0x34>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80113d0:	4b08      	ldr	r3, [pc, #32]	; (80113f4 <pif_Delay1ms+0x34>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80113de:	897a      	ldrh	r2, [r7, #10]
 80113e0:	88fb      	ldrh	r3, [r7, #6]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d3f4      	bcc.n	80113d0 <pif_Delay1ms+0x10>
}
 80113e6:	bf00      	nop
 80113e8:	bf00      	nop
 80113ea:	3714      	adds	r7, #20
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	20001dd0 	.word	0x20001dd0

080113f8 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	4603      	mov	r3, r0
 8011400:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 8011402:	4b0b      	ldr	r3, [pc, #44]	; (8011430 <pif_Delay1us+0x38>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4798      	blx	r3
 8011408:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <pif_Delay1us+0x38>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4798      	blx	r3
 8011410:	4603      	mov	r3, r0
 8011412:	b29a      	uxth	r2, r3
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	b29b      	uxth	r3, r3
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801141c:	897a      	ldrh	r2, [r7, #10]
 801141e:	88fb      	ldrh	r3, [r7, #6]
 8011420:	429a      	cmp	r2, r3
 8011422:	d3f2      	bcc.n	801140a <pif_Delay1us+0x12>
}
 8011424:	bf00      	nop
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20001ddc 	.word	0x20001ddc

08011434 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011434:	b480      	push	{r7}
 8011436:	b089      	sub	sp, #36	; 0x24
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	4613      	mov	r3, r2
 8011440:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 8011446:	88fb      	ldrh	r3, [r7, #6]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01b      	beq.n	8011484 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 801144c:	88fb      	ldrh	r3, [r7, #6]
 801144e:	3b01      	subs	r3, #1
 8011450:	61fb      	str	r3, [r7, #28]
 8011452:	e013      	b.n	801147c <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	fa22 f303 	lsr.w	r3, r2, r3
 801145c:	b2db      	uxtb	r3, r3
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	b2da      	uxtb	r2, r3
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	1c59      	adds	r1, r3, #1
 8011468:	61b9      	str	r1, [r7, #24]
 801146a:	4619      	mov	r1, r3
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	440b      	add	r3, r1
 8011470:	3230      	adds	r2, #48	; 0x30
 8011472:	b2d2      	uxtb	r2, r2
 8011474:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	3b01      	subs	r3, #1
 801147a:	61fb      	str	r3, [r7, #28]
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	2b00      	cmp	r3, #0
 8011480:	dae8      	bge.n	8011454 <pif_BinToString+0x20>
 8011482:	e030      	b.n	80114e6 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d025      	beq.n	80114d6 <pif_BinToString+0xa2>
    	first = TRUE;
 801148a:	2301      	movs	r3, #1
 801148c:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 801148e:	231f      	movs	r3, #31
 8011490:	61fb      	str	r3, [r7, #28]
 8011492:	e01c      	b.n	80114ce <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	fa22 f303 	lsr.w	r3, r2, r3
 801149c:	f003 0301 	and.w	r3, r3, #1
 80114a0:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <pif_BinToString+0x7a>
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00c      	beq.n	80114c8 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	1c59      	adds	r1, r3, #1
 80114b6:	61b9      	str	r1, [r7, #24]
 80114b8:	4619      	mov	r1, r3
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	440b      	add	r3, r1
 80114be:	3230      	adds	r2, #48	; 0x30
 80114c0:	b2d2      	uxtb	r2, r2
 80114c2:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80114c4:	2300      	movs	r3, #0
 80114c6:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	3b01      	subs	r3, #1
 80114cc:	61fb      	str	r3, [r7, #28]
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dadf      	bge.n	8011494 <pif_BinToString+0x60>
 80114d4:	e007      	b.n	80114e6 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	61ba      	str	r2, [r7, #24]
 80114dc:	461a      	mov	r2, r3
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	4413      	add	r3, r2
 80114e2:	2230      	movs	r2, #48	; 0x30
 80114e4:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80114e6:	69bb      	ldr	r3, [r7, #24]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3724      	adds	r7, #36	; 0x24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b08d      	sub	sp, #52	; 0x34
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	4613      	mov	r3, r2
 8011500:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 8011502:	2300      	movs	r3, #0
 8011504:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 801150e:	2300      	movs	r3, #0
 8011510:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8011512:	4a43      	ldr	r2, [pc, #268]	; (8011620 <pif_DecToString+0x12c>)
 8011514:	f107 0314 	add.w	r3, r7, #20
 8011518:	ca07      	ldmia	r2, {r0, r1, r2}
 801151a:	c303      	stmia	r3!, {r0, r1}
 801151c:	801a      	strh	r2, [r3, #0]
 801151e:	3302      	adds	r3, #2
 8011520:	0c12      	lsrs	r2, r2, #16
 8011522:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011528:	6a3b      	ldr	r3, [r7, #32]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d05e      	beq.n	80115ec <pif_DecToString+0xf8>
        while (tmp_val) {
 801152e:	e02c      	b.n	801158a <pif_DecToString+0x96>
        	exp_cnt++;
 8011530:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011532:	3301      	adds	r3, #1
 8011534:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	2b09      	cmp	r3, #9
 801153a:	d914      	bls.n	8011566 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 801153c:	6a39      	ldr	r1, [r7, #32]
 801153e:	4b39      	ldr	r3, [pc, #228]	; (8011624 <pif_DecToString+0x130>)
 8011540:	fba3 2301 	umull	r2, r3, r3, r1
 8011544:	08da      	lsrs	r2, r3, #3
 8011546:	4613      	mov	r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4413      	add	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	1aca      	subs	r2, r1, r3
 8011550:	b2d2      	uxtb	r2, r2
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	1c59      	adds	r1, r3, #1
 8011556:	6279      	str	r1, [r7, #36]	; 0x24
 8011558:	3230      	adds	r2, #48	; 0x30
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	3330      	adds	r3, #48	; 0x30
 801155e:	443b      	add	r3, r7
 8011560:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011564:	e00b      	b.n	801157e <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011566:	6a3b      	ldr	r3, [r7, #32]
 8011568:	b2da      	uxtb	r2, r3
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156c:	1c59      	adds	r1, r3, #1
 801156e:	6279      	str	r1, [r7, #36]	; 0x24
 8011570:	3230      	adds	r2, #48	; 0x30
 8011572:	b2d2      	uxtb	r2, r2
 8011574:	3330      	adds	r3, #48	; 0x30
 8011576:	443b      	add	r3, r7
 8011578:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 801157c:	e008      	b.n	8011590 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	4a28      	ldr	r2, [pc, #160]	; (8011624 <pif_DecToString+0x130>)
 8011582:	fba2 2303 	umull	r2, r3, r2, r3
 8011586:	08db      	lsrs	r3, r3, #3
 8011588:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 801158a:	6a3b      	ldr	r3, [r7, #32]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1cf      	bne.n	8011530 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011590:	88fb      	ldrh	r3, [r7, #6]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d026      	beq.n	80115e4 <pif_DecToString+0xf0>
 8011596:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011598:	88fb      	ldrh	r3, [r7, #6]
 801159a:	429a      	cmp	r2, r3
 801159c:	d222      	bcs.n	80115e4 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 801159e:	88fa      	ldrh	r2, [r7, #6]
 80115a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80115a6:	e00a      	b.n	80115be <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	1c5a      	adds	r2, r3, #1
 80115ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80115ae:	461a      	mov	r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	4413      	add	r3, r2
 80115b4:	2230      	movs	r2, #48	; 0x30
 80115b6:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80115b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115ba:	3b01      	subs	r3, #1
 80115bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80115be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d1f1      	bne.n	80115a8 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 80115c4:	e00e      	b.n	80115e4 <pif_DecToString+0xf0>
            idx_inv--;
 80115c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c8:	3b01      	subs	r3, #1
 80115ca:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	1c5a      	adds	r2, r3, #1
 80115d0:	62ba      	str	r2, [r7, #40]	; 0x28
 80115d2:	461a      	mov	r2, r3
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	4413      	add	r3, r2
 80115d8:	f107 0114 	add.w	r1, r7, #20
 80115dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115de:	440a      	add	r2, r1
 80115e0:	7812      	ldrb	r2, [r2, #0]
 80115e2:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d1ed      	bne.n	80115c6 <pif_DecToString+0xd2>
 80115ea:	e012      	b.n	8011612 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 80115ec:	88fb      	ldrh	r3, [r7, #6]
 80115ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 80115f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f2:	1c5a      	adds	r2, r3, #1
 80115f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80115f6:	461a      	mov	r2, r3
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	4413      	add	r3, r2
 80115fc:	2230      	movs	r2, #48	; 0x30
 80115fe:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 8011600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011602:	2b00      	cmp	r3, #0
 8011604:	d002      	beq.n	801160c <pif_DecToString+0x118>
 8011606:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011608:	3b01      	subs	r3, #1
 801160a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 801160c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1ee      	bne.n	80115f0 <pif_DecToString+0xfc>
    }
    return idx;
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011614:	4618      	mov	r0, r3
 8011616:	3734      	adds	r7, #52	; 0x34
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	08027a88 	.word	0x08027a88
 8011624:	cccccccd 	.word	0xcccccccd

08011628 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011628:	b480      	push	{r7}
 801162a:	b08b      	sub	sp, #44	; 0x2c
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	4611      	mov	r1, r2
 8011634:	461a      	mov	r2, r3
 8011636:	460b      	mov	r3, r1
 8011638:	80fb      	strh	r3, [r7, #6]
 801163a:	4613      	mov	r3, r2
 801163c:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 8011642:	797b      	ldrb	r3, [r7, #5]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d002      	beq.n	801164e <pif_HexToString+0x26>
 8011648:	4b2f      	ldr	r3, [pc, #188]	; (8011708 <pif_HexToString+0xe0>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	e001      	b.n	8011652 <pif_HexToString+0x2a>
 801164e:	4b2f      	ldr	r3, [pc, #188]	; (801170c <pif_HexToString+0xe4>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011654:	88fb      	ldrh	r3, [r7, #6]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d01d      	beq.n	8011696 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 801165a:	88fb      	ldrh	r3, [r7, #6]
 801165c:	3b01      	subs	r3, #1
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	627b      	str	r3, [r7, #36]	; 0x24
 8011662:	e014      	b.n	801168e <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	fa22 f303 	lsr.w	r3, r2, r3
 801166c:	f003 030f 	and.w	r3, r3, #15
 8011670:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011672:	69ba      	ldr	r2, [r7, #24]
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	441a      	add	r2, r3
 8011678:	6a3b      	ldr	r3, [r7, #32]
 801167a:	1c59      	adds	r1, r3, #1
 801167c:	6239      	str	r1, [r7, #32]
 801167e:	4619      	mov	r1, r3
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	440b      	add	r3, r1
 8011684:	7812      	ldrb	r2, [r2, #0]
 8011686:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168a:	3b04      	subs	r3, #4
 801168c:	627b      	str	r3, [r7, #36]	; 0x24
 801168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011690:	2b00      	cmp	r3, #0
 8011692:	dae7      	bge.n	8011664 <pif_HexToString+0x3c>
 8011694:	e030      	b.n	80116f8 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d025      	beq.n	80116e8 <pif_HexToString+0xc0>
    	first = TRUE;
 801169c:	2301      	movs	r3, #1
 801169e:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80116a0:	231c      	movs	r3, #28
 80116a2:	627b      	str	r3, [r7, #36]	; 0x24
 80116a4:	e01c      	b.n	80116e0 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	fa22 f303 	lsr.w	r3, r2, r3
 80116ae:	f003 030f 	and.w	r3, r3, #15
 80116b2:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80116b4:	7ffb      	ldrb	r3, [r7, #31]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <pif_HexToString+0x98>
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80116c0:	69ba      	ldr	r2, [r7, #24]
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	441a      	add	r2, r3
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	1c59      	adds	r1, r3, #1
 80116ca:	6239      	str	r1, [r7, #32]
 80116cc:	4619      	mov	r1, r3
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	440b      	add	r3, r1
 80116d2:	7812      	ldrb	r2, [r2, #0]
 80116d4:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80116d6:	2300      	movs	r3, #0
 80116d8:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80116da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116dc:	3b04      	subs	r3, #4
 80116de:	627b      	str	r3, [r7, #36]	; 0x24
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dadf      	bge.n	80116a6 <pif_HexToString+0x7e>
 80116e6:	e007      	b.n	80116f8 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80116e8:	6a3b      	ldr	r3, [r7, #32]
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	623a      	str	r2, [r7, #32]
 80116ee:	461a      	mov	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	4413      	add	r3, r2
 80116f4:	2230      	movs	r2, #48	; 0x30
 80116f6:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80116f8:	6a3b      	ldr	r3, [r7, #32]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	372c      	adds	r7, #44	; 0x2c
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	2000012c 	.word	0x2000012c
 801170c:	20000130 	.word	0x20000130

08011710 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 8011710:	b5b0      	push	{r4, r5, r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	ed87 0b00 	vstr	d0, [r7]
 801171c:	460b      	mov	r3, r1
 801171e:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011724:	f04f 0200 	mov.w	r2, #0
 8011728:	f04f 0300 	mov.w	r3, #0
 801172c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011730:	f7ef f988 	bl	8000a44 <__aeabi_dcmplt>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00d      	beq.n	8011756 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 801173a:	8abb      	ldrh	r3, [r7, #20]
 801173c:	1c5a      	adds	r2, r3, #1
 801173e:	82ba      	strh	r2, [r7, #20]
 8011740:	461a      	mov	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	4413      	add	r3, r2
 8011746:	222d      	movs	r2, #45	; 0x2d
 8011748:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 801174a:	683c      	ldr	r4, [r7, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011752:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011756:	e9d7 0100 	ldrd	r0, r1, [r7]
 801175a:	f7ef f9c3 	bl	8000ae4 <__aeabi_d2uiz>
 801175e:	4603      	mov	r3, r0
 8011760:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011762:	8abb      	ldrh	r3, [r7, #20]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	4413      	add	r3, r2
 8011768:	2200      	movs	r2, #0
 801176a:	6939      	ldr	r1, [r7, #16]
 801176c:	4618      	mov	r0, r3
 801176e:	f7ff fec1 	bl	80114f4 <pif_DecToString>
 8011772:	4603      	mov	r3, r0
 8011774:	b29a      	uxth	r2, r3
 8011776:	8abb      	ldrh	r3, [r7, #20]
 8011778:	4413      	add	r3, r2
 801177a:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 801177c:	8abb      	ldrh	r3, [r7, #20]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	82ba      	strh	r2, [r7, #20]
 8011782:	461a      	mov	r2, r3
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	4413      	add	r3, r2
 8011788:	222e      	movs	r2, #46	; 0x2e
 801178a:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 801178c:	897b      	ldrh	r3, [r7, #10]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <pif_FloatToString+0x86>
 8011792:	2306      	movs	r3, #6
 8011794:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011796:	6938      	ldr	r0, [r7, #16]
 8011798:	f7ee fe68 	bl	800046c <__aeabi_ui2d>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117a4:	f7ee fd24 	bl	80001f0 <__aeabi_dsub>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80117b0:	2300      	movs	r3, #0
 80117b2:	82fb      	strh	r3, [r7, #22]
 80117b4:	e00d      	b.n	80117d2 <pif_FloatToString+0xc2>
 80117b6:	f04f 0200 	mov.w	r2, #0
 80117ba:	4b13      	ldr	r3, [pc, #76]	; (8011808 <pif_FloatToString+0xf8>)
 80117bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117c0:	f7ee fece 	bl	8000560 <__aeabi_dmul>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	e9c7 2300 	strd	r2, r3, [r7]
 80117cc:	8afb      	ldrh	r3, [r7, #22]
 80117ce:	3301      	adds	r3, #1
 80117d0:	82fb      	strh	r3, [r7, #22]
 80117d2:	8afa      	ldrh	r2, [r7, #22]
 80117d4:	897b      	ldrh	r3, [r7, #10]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d3ed      	bcc.n	80117b6 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 80117da:	8abb      	ldrh	r3, [r7, #20]
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	18d4      	adds	r4, r2, r3
 80117e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117e4:	f7ef f97e 	bl	8000ae4 <__aeabi_d2uiz>
 80117e8:	4601      	mov	r1, r0
 80117ea:	897b      	ldrh	r3, [r7, #10]
 80117ec:	461a      	mov	r2, r3
 80117ee:	4620      	mov	r0, r4
 80117f0:	f7ff fe80 	bl	80114f4 <pif_DecToString>
 80117f4:	4603      	mov	r3, r0
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	8abb      	ldrh	r3, [r7, #20]
 80117fa:	4413      	add	r3, r2
 80117fc:	82bb      	strh	r3, [r7, #20]
    return idx;
 80117fe:	8abb      	ldrh	r3, [r7, #20]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3718      	adds	r7, #24
 8011804:	46bd      	mov	sp, r7
 8011806:	bdb0      	pop	{r4, r5, r7, pc}
 8011808:	40240000 	.word	0x40240000

0801180c <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b08c      	sub	sp, #48	; 0x30
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 801181c:	e242      	b.n	8011ca4 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2b25      	cmp	r3, #37	; 0x25
 8011824:	f040 8230 	bne.w	8011c88 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011828:	2300      	movs	r3, #0
 801182a:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 801182c:	2300      	movs	r3, #0
 801182e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	3301      	adds	r3, #1
 8011836:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	3b25      	subs	r3, #37	; 0x25
 801183e:	2b53      	cmp	r3, #83	; 0x53
 8011840:	f200 822d 	bhi.w	8011c9e <pif_PrintFormat+0x492>
 8011844:	a201      	add	r2, pc, #4	; (adr r2, 801184c <pif_PrintFormat+0x40>)
 8011846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801184a:	bf00      	nop
 801184c:	08011c77 	.word	0x08011c77
 8011850:	08011c9f 	.word	0x08011c9f
 8011854:	08011c9f 	.word	0x08011c9f
 8011858:	08011c9f 	.word	0x08011c9f
 801185c:	08011c9f 	.word	0x08011c9f
 8011860:	08011c9f 	.word	0x08011c9f
 8011864:	08011c9f 	.word	0x08011c9f
 8011868:	08011c9f 	.word	0x08011c9f
 801186c:	08011c9f 	.word	0x08011c9f
 8011870:	08011c9f 	.word	0x08011c9f
 8011874:	08011c9f 	.word	0x08011c9f
 8011878:	0801199d 	.word	0x0801199d
 801187c:	0801199d 	.word	0x0801199d
 8011880:	0801199d 	.word	0x0801199d
 8011884:	0801199d 	.word	0x0801199d
 8011888:	0801199d 	.word	0x0801199d
 801188c:	0801199d 	.word	0x0801199d
 8011890:	0801199d 	.word	0x0801199d
 8011894:	0801199d 	.word	0x0801199d
 8011898:	0801199d 	.word	0x0801199d
 801189c:	0801199d 	.word	0x0801199d
 80118a0:	08011c9f 	.word	0x08011c9f
 80118a4:	08011c9f 	.word	0x08011c9f
 80118a8:	08011c9f 	.word	0x08011c9f
 80118ac:	08011c9f 	.word	0x08011c9f
 80118b0:	08011c9f 	.word	0x08011c9f
 80118b4:	08011c9f 	.word	0x08011c9f
 80118b8:	08011c9f 	.word	0x08011c9f
 80118bc:	08011c9f 	.word	0x08011c9f
 80118c0:	08011c9f 	.word	0x08011c9f
 80118c4:	08011c9f 	.word	0x08011c9f
 80118c8:	08011c9f 	.word	0x08011c9f
 80118cc:	08011c9f 	.word	0x08011c9f
 80118d0:	08011c9f 	.word	0x08011c9f
 80118d4:	08011c9f 	.word	0x08011c9f
 80118d8:	08011c9f 	.word	0x08011c9f
 80118dc:	08011c9f 	.word	0x08011c9f
 80118e0:	08011c9f 	.word	0x08011c9f
 80118e4:	08011c9f 	.word	0x08011c9f
 80118e8:	08011c9f 	.word	0x08011c9f
 80118ec:	08011c9f 	.word	0x08011c9f
 80118f0:	08011c9f 	.word	0x08011c9f
 80118f4:	08011c9f 	.word	0x08011c9f
 80118f8:	08011c9f 	.word	0x08011c9f
 80118fc:	08011c9f 	.word	0x08011c9f
 8011900:	08011c9f 	.word	0x08011c9f
 8011904:	08011c9f 	.word	0x08011c9f
 8011908:	08011c9f 	.word	0x08011c9f
 801190c:	08011c9f 	.word	0x08011c9f
 8011910:	08011c9f 	.word	0x08011c9f
 8011914:	08011c9f 	.word	0x08011c9f
 8011918:	08011b73 	.word	0x08011b73
 801191c:	08011c9f 	.word	0x08011c9f
 8011920:	08011c9f 	.word	0x08011c9f
 8011924:	08011c9f 	.word	0x08011c9f
 8011928:	08011c9f 	.word	0x08011c9f
 801192c:	08011c9f 	.word	0x08011c9f
 8011930:	08011c9f 	.word	0x08011c9f
 8011934:	08011c9f 	.word	0x08011c9f
 8011938:	08011c9f 	.word	0x08011c9f
 801193c:	08011c9f 	.word	0x08011c9f
 8011940:	080119c3 	.word	0x080119c3
 8011944:	08011c59 	.word	0x08011c59
 8011948:	08011a1b 	.word	0x08011a1b
 801194c:	08011c9f 	.word	0x08011c9f
 8011950:	08011bcb 	.word	0x08011bcb
 8011954:	08011c9f 	.word	0x08011c9f
 8011958:	08011c9f 	.word	0x08011c9f
 801195c:	08011a1b 	.word	0x08011a1b
 8011960:	08011c9f 	.word	0x08011c9f
 8011964:	08011c9f 	.word	0x08011c9f
 8011968:	080119bb 	.word	0x080119bb
 801196c:	08011c9f 	.word	0x08011c9f
 8011970:	08011c9f 	.word	0x08011c9f
 8011974:	08011c9f 	.word	0x08011c9f
 8011978:	08011c9f 	.word	0x08011c9f
 801197c:	08011c9f 	.word	0x08011c9f
 8011980:	08011c9f 	.word	0x08011c9f
 8011984:	08011c01 	.word	0x08011c01
 8011988:	08011c9f 	.word	0x08011c9f
 801198c:	08011ac3 	.word	0x08011ac3
 8011990:	08011c9f 	.word	0x08011c9f
 8011994:	08011c9f 	.word	0x08011c9f
 8011998:	08011b1b 	.word	0x08011b1b
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 801199c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801199e:	461a      	mov	r2, r3
 80119a0:	0092      	lsls	r2, r2, #2
 80119a2:	4413      	add	r3, r2
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80119b0:	4413      	add	r3, r2
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	3b30      	subs	r3, #48	; 0x30
 80119b6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 80119b8:	e73b      	b.n	8011832 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 80119ba:	2301      	movs	r3, #1
 80119bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 80119c0:	e737      	b.n	8011832 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 80119c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d013      	beq.n	80119f2 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	1d19      	adds	r1, r3, #4
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	6011      	str	r1, [r2, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	4413      	add	r3, r2
 80119de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119e0:	6979      	ldr	r1, [r7, #20]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff fd26 	bl	8011434 <pif_BinToString>
 80119e8:	4602      	mov	r2, r0
 80119ea:	6a3b      	ldr	r3, [r7, #32]
 80119ec:	4413      	add	r3, r2
 80119ee:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 80119f0:	e155      	b.n	8011c9e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	1d19      	adds	r1, r3, #4
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	6011      	str	r1, [r2, #0]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	4413      	add	r3, r2
 8011a06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a08:	69b9      	ldr	r1, [r7, #24]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fd12 	bl	8011434 <pif_BinToString>
 8011a10:	4602      	mov	r2, r0
 8011a12:	6a3b      	ldr	r3, [r7, #32]
 8011a14:	4413      	add	r3, r2
 8011a16:	623b      	str	r3, [r7, #32]
                    break;
 8011a18:	e141      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011a1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d027      	beq.n	8011a72 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	1d19      	adds	r1, r3, #4
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	6011      	str	r1, [r2, #0]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	da10      	bge.n	8011a58 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	1c5a      	adds	r2, r3, #1
 8011a3a:	623a      	str	r2, [r7, #32]
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	4413      	add	r3, r2
 8011a42:	222d      	movs	r2, #45	; 0x2d
 8011a44:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a48:	425b      	negs	r3, r3
 8011a4a:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d002      	beq.n	8011a58 <pif_PrintFormat+0x24c>
 8011a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a54:	3b01      	subs	r3, #1
 8011a56:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011a58:	6a3b      	ldr	r3, [r7, #32]
 8011a5a:	68fa      	ldr	r2, [r7, #12]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7ff fd46 	bl	80114f4 <pif_DecToString>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011a70:	e115      	b.n	8011c9e <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	1d19      	adds	r1, r3, #4
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	6011      	str	r1, [r2, #0]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	da10      	bge.n	8011aa8 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011a86:	6a3b      	ldr	r3, [r7, #32]
 8011a88:	1c5a      	adds	r2, r3, #1
 8011a8a:	623a      	str	r2, [r7, #32]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	4413      	add	r3, r2
 8011a92:	222d      	movs	r2, #45	; 0x2d
 8011a94:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	425b      	negs	r3, r3
 8011a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8011a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d002      	beq.n	8011aa8 <pif_PrintFormat+0x29c>
 8011aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011aa8:	6a3b      	ldr	r3, [r7, #32]
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	4413      	add	r3, r2
 8011aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ab0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7ff fd1e 	bl	80114f4 <pif_DecToString>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	4413      	add	r3, r2
 8011abe:	623b      	str	r3, [r7, #32]
                    break;
 8011ac0:	e0ed      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011ac2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d013      	beq.n	8011af2 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	1d19      	adds	r1, r3, #4
 8011ad0:	68ba      	ldr	r2, [r7, #8]
 8011ad2:	6011      	str	r1, [r2, #0]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011ad8:	6a3b      	ldr	r3, [r7, #32]
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	4413      	add	r3, r2
 8011ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ae0:	6979      	ldr	r1, [r7, #20]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7ff fd06 	bl	80114f4 <pif_DecToString>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	6a3b      	ldr	r3, [r7, #32]
 8011aec:	4413      	add	r3, r2
 8011aee:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011af0:	e0d5      	b.n	8011c9e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	1d19      	adds	r1, r3, #4
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	6011      	str	r1, [r2, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011b00:	6a3b      	ldr	r3, [r7, #32]
 8011b02:	68fa      	ldr	r2, [r7, #12]
 8011b04:	4413      	add	r3, r2
 8011b06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b08:	69b9      	ldr	r1, [r7, #24]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7ff fcf2 	bl	80114f4 <pif_DecToString>
 8011b10:	4602      	mov	r2, r0
 8011b12:	6a3b      	ldr	r3, [r7, #32]
 8011b14:	4413      	add	r3, r2
 8011b16:	623b      	str	r3, [r7, #32]
                    break;
 8011b18:	e0c1      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011b1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d013      	beq.n	8011b4a <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	1d19      	adds	r1, r3, #4
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	6011      	str	r1, [r2, #0]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8011b30:	6a3b      	ldr	r3, [r7, #32]
 8011b32:	68fa      	ldr	r2, [r7, #12]
 8011b34:	18d0      	adds	r0, r2, r3
 8011b36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b38:	2300      	movs	r3, #0
 8011b3a:	6979      	ldr	r1, [r7, #20]
 8011b3c:	f7ff fd74 	bl	8011628 <pif_HexToString>
 8011b40:	4602      	mov	r2, r0
 8011b42:	6a3b      	ldr	r3, [r7, #32]
 8011b44:	4413      	add	r3, r2
 8011b46:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011b48:	e0a9      	b.n	8011c9e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	1d19      	adds	r1, r3, #4
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	6011      	str	r1, [r2, #0]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	18d0      	adds	r0, r2, r3
 8011b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b60:	2300      	movs	r3, #0
 8011b62:	69b9      	ldr	r1, [r7, #24]
 8011b64:	f7ff fd60 	bl	8011628 <pif_HexToString>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	6a3b      	ldr	r3, [r7, #32]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	623b      	str	r3, [r7, #32]
                    break;
 8011b70:	e095      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011b72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d013      	beq.n	8011ba2 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	1d19      	adds	r1, r3, #4
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	6011      	str	r1, [r2, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	18d0      	adds	r0, r2, r3
 8011b8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b90:	2301      	movs	r3, #1
 8011b92:	6979      	ldr	r1, [r7, #20]
 8011b94:	f7ff fd48 	bl	8011628 <pif_HexToString>
 8011b98:	4602      	mov	r2, r0
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011ba0:	e07d      	b.n	8011c9e <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	1d19      	adds	r1, r3, #4
 8011ba8:	68ba      	ldr	r2, [r7, #8]
 8011baa:	6011      	str	r1, [r2, #0]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011bb0:	6a3b      	ldr	r3, [r7, #32]
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	18d0      	adds	r0, r2, r3
 8011bb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bb8:	2301      	movs	r3, #1
 8011bba:	69b9      	ldr	r1, [r7, #24]
 8011bbc:	f7ff fd34 	bl	8011628 <pif_HexToString>
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	6a3b      	ldr	r3, [r7, #32]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	623b      	str	r3, [r7, #32]
                    break;
 8011bc8:	e069      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8011bca:	6a3b      	ldr	r3, [r7, #32]
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	18d0      	adds	r0, r2, r3
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	3307      	adds	r3, #7
 8011bd6:	f023 0307 	bic.w	r3, r3, #7
 8011bda:	f103 0108 	add.w	r1, r3, #8
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	6011      	str	r1, [r2, #0]
 8011be2:	ed93 7b00 	vldr	d7, [r3]
 8011be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011be8:	4619      	mov	r1, r3
 8011bea:	eeb0 0a47 	vmov.f32	s0, s14
 8011bee:	eef0 0a67 	vmov.f32	s1, s15
 8011bf2:	f7ff fd8d 	bl	8011710 <pif_FloatToString>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	623b      	str	r3, [r7, #32]
                    break;
 8011bfe:	e04e      	b.n	8011c9e <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	1d19      	adds	r1, r3, #4
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	6011      	str	r1, [r2, #0]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d043      	beq.n	8011c9c <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011c14:	6938      	ldr	r0, [r7, #16]
 8011c16:	f7ee fadf 	bl	80001d8 <strlen>
 8011c1a:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011c1c:	6a3a      	ldr	r2, [r7, #32]
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	4413      	add	r3, r2
 8011c22:	2b4e      	cmp	r3, #78	; 0x4e
 8011c24:	d807      	bhi.n	8011c36 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	6939      	ldr	r1, [r7, #16]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f011 fd1e 	bl	8023670 <strcpy>
 8011c34:	e00b      	b.n	8011c4e <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011c36:	6a3b      	ldr	r3, [r7, #32]
 8011c38:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011c3c:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011c3e:	6a3b      	ldr	r3, [r7, #32]
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	4413      	add	r3, r2
 8011c44:	69fa      	ldr	r2, [r7, #28]
 8011c46:	6939      	ldr	r1, [r7, #16]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f011 fd3b 	bl	80236c4 <strncpy>
						}
						offset += size;
 8011c4e:	6a3a      	ldr	r2, [r7, #32]
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	4413      	add	r3, r2
 8011c54:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011c56:	e021      	b.n	8011c9c <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	1d19      	adds	r1, r3, #4
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	6011      	str	r1, [r2, #0]
 8011c62:	6819      	ldr	r1, [r3, #0]
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	1c5a      	adds	r2, r3, #1
 8011c68:	623a      	str	r2, [r7, #32]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	4413      	add	r3, r2
 8011c70:	b2ca      	uxtb	r2, r1
 8011c72:	701a      	strb	r2, [r3, #0]
                    break;
 8011c74:	e013      	b.n	8011c9e <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	1c5a      	adds	r2, r3, #1
 8011c7a:	623a      	str	r2, [r7, #32]
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	4413      	add	r3, r2
 8011c82:	2225      	movs	r2, #37	; 0x25
 8011c84:	701a      	strb	r2, [r3, #0]
                    break;
 8011c86:	e00a      	b.n	8011c9e <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	1c5a      	adds	r2, r3, #1
 8011c8c:	623a      	str	r2, [r7, #32]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	4413      	add	r3, r2
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	7812      	ldrb	r2, [r2, #0]
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	e000      	b.n	8011c9e <pif_PrintFormat+0x492>
                    break;
 8011c9c:	bf00      	nop
        }
        p_format = p_format + 1;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f47f adb8 	bne.w	801181e <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011cae:	6a3b      	ldr	r3, [r7, #32]
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	701a      	strb	r2, [r3, #0]
}
 8011cb8:	bf00      	nop
 8011cba:	3730      	adds	r7, #48	; 0x30
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011cc0:	b40e      	push	{r1, r2, r3}
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b085      	sub	sp, #20
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011cca:	f107 0320 	add.w	r3, r7, #32
 8011cce:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011cd0:	f107 030c 	add.w	r3, r7, #12
 8011cd4:	69fa      	ldr	r2, [r7, #28]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff fd97 	bl	801180c <pif_PrintFormat>
	va_end(data);
}
 8011cde:	bf00      	nop
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ce8:	b003      	add	sp, #12
 8011cea:	4770      	bx	lr

08011cec <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b085      	sub	sp, #20
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	460a      	mov	r2, r1
 8011cf6:	80fb      	strh	r3, [r7, #6]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011cfc:	797b      	ldrb	r3, [r7, #5]
 8011cfe:	021b      	lsls	r3, r3, #8
 8011d00:	b21a      	sxth	r2, r3
 8011d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d06:	4053      	eors	r3, r2
 8011d08:	b21b      	sxth	r3, r3
 8011d0a:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	81fb      	strh	r3, [r7, #14]
 8011d10:	e013      	b.n	8011d3a <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	da09      	bge.n	8011d2e <pifCrc16_Add+0x42>
 8011d1a:	88fb      	ldrh	r3, [r7, #6]
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	b21b      	sxth	r3, r3
 8011d20:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011d24:	f083 0301 	eor.w	r3, r3, #1
 8011d28:	b21b      	sxth	r3, r3
 8011d2a:	80fb      	strh	r3, [r7, #6]
 8011d2c:	e002      	b.n	8011d34 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011d2e:	88fb      	ldrh	r3, [r7, #6]
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011d34:	89fb      	ldrh	r3, [r7, #14]
 8011d36:	3301      	adds	r3, #1
 8011d38:	81fb      	strh	r3, [r7, #14]
 8011d3a:	89fb      	ldrh	r3, [r7, #14]
 8011d3c:	2b07      	cmp	r3, #7
 8011d3e:	d9e8      	bls.n	8011d12 <pifCrc16_Add+0x26>
    }
	return crc;
 8011d40:	88fb      	ldrh	r3, [r7, #6]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011d5e:	2300      	movs	r3, #0
 8011d60:	81fb      	strh	r3, [r7, #14]
 8011d62:	e00d      	b.n	8011d80 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011d64:	89fb      	ldrh	r3, [r7, #14]
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	4413      	add	r3, r2
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	89bb      	ldrh	r3, [r7, #12]
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7ff ffbb 	bl	8011cec <pifCrc16_Add>
 8011d76:	4603      	mov	r3, r0
 8011d78:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011d7a:	89fb      	ldrh	r3, [r7, #14]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	81fb      	strh	r3, [r7, #14]
 8011d80:	89fa      	ldrh	r2, [r7, #14]
 8011d82:	887b      	ldrh	r3, [r7, #2]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d3ed      	bcc.n	8011d64 <pifCrc16+0x16>
	}
	return crc;
 8011d88:	89bb      	ldrh	r3, [r7, #12]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <pifCheckSum>:

uint32_t pifCheckSum(uint8_t* p_data, uint16_t length)
{
 8011d92:	b480      	push	{r7}
 8011d94:	b085      	sub	sp, #20
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint32_t sum = 0UL;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < length; i++) {
 8011da2:	2300      	movs	r3, #0
 8011da4:	81fb      	strh	r3, [r7, #14]
 8011da6:	e00a      	b.n	8011dbe <pifCheckSum+0x2c>
		sum += p_data[i];
 8011da8:	89fb      	ldrh	r3, [r7, #14]
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	4413      	add	r3, r2
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	461a      	mov	r2, r3
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	4413      	add	r3, r2
 8011db6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < length; i++) {
 8011db8:	89fb      	ldrh	r3, [r7, #14]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	81fb      	strh	r3, [r7, #14]
 8011dbe:	89fa      	ldrh	r2, [r7, #14]
 8011dc0:	887b      	ldrh	r3, [r7, #2]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d3f0      	bcc.n	8011da8 <pifCheckSum+0x16>
	}
	return sum;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3714      	adds	r7, #20
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <pifCheckXor>:

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011de0:	2300      	movs	r3, #0
 8011de2:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011de4:	2300      	movs	r3, #0
 8011de6:	81fb      	strh	r3, [r7, #14]
 8011de8:	e009      	b.n	8011dfe <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011dea:	89fb      	ldrh	r3, [r7, #14]
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	4413      	add	r3, r2
 8011df0:	781a      	ldrb	r2, [r3, #0]
 8011df2:	7b7b      	ldrb	r3, [r7, #13]
 8011df4:	4053      	eors	r3, r2
 8011df6:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011df8:	89fb      	ldrh	r3, [r7, #14]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	81fb      	strh	r3, [r7, #14]
 8011dfe:	89fa      	ldrh	r2, [r7, #14]
 8011e00:	887b      	ldrh	r3, [r7, #2]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d3f1      	bcc.n	8011dea <pifCheckXor+0x16>
	}
	return xor;
 8011e06:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3714      	adds	r7, #20
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	699b      	ldr	r3, [r3, #24]
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f001 ffd5 	bl	8013dd4 <pifRingBuffer_GetByte>
 8011e2a:	4603      	mov	r3, r0
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3708      	adds	r7, #8
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b086      	sub	sp, #24
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	695b      	ldr	r3, [r3, #20]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f001 fe81 	bl	8013b4e <pifRingBuffer_GetRemainSize>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011e50:	8afb      	ldrh	r3, [r7, #22]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d101      	bne.n	8011e5a <_actSendData+0x26>
 8011e56:	2300      	movs	r3, #0
 8011e58:	e012      	b.n	8011e80 <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011e5a:	88fa      	ldrh	r2, [r7, #6]
 8011e5c:	8afb      	ldrh	r3, [r7, #22]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d901      	bls.n	8011e66 <_actSendData+0x32>
 8011e62:	8afb      	ldrh	r3, [r7, #22]
 8011e64:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	695b      	ldr	r3, [r3, #20]
 8011e6a:	88fa      	ldrh	r2, [r7, #6]
 8011e6c:	68b9      	ldr	r1, [r7, #8]
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f001 ff18 	bl	8013ca4 <pifRingBuffer_PutData>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <_actSendData+0x4a>
		return size;
 8011e7a:	88fb      	ldrh	r3, [r7, #6]
 8011e7c:	e000      	b.n	8011e80 <_actSendData+0x4c>
	}
	return 0;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d008      	beq.n	8011eaa <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	6a10      	ldr	r0, [r2, #32]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	6892      	ldr	r2, [r2, #8]
 8011ea4:	4611      	mov	r1, r2
 8011ea6:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011ea8:	e025      	b.n	8011ef6 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	695b      	ldr	r3, [r3, #20]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d021      	beq.n	8011ef6 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	6a12      	ldr	r2, [r2, #32]
 8011eba:	4911      	ldr	r1, [pc, #68]	; (8011f00 <_sendData+0x78>)
 8011ebc:	4610      	mov	r0, r2
 8011ebe:	4798      	blx	r3
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d017      	beq.n	8011ef6 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d112      	bne.n	8011ef6 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00a      	beq.n	8011ef6 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	4798      	blx	r3
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d103      	bne.n	8011ef6 <_sendData+0x6e>
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011ef6:	bf00      	nop
 8011ef8:	3708      	adds	r7, #8
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	08011e35 	.word	0x08011e35

08011f04 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d104      	bne.n	8011f20 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011f16:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <pifComm_Init+0x4c>)
 8011f18:	2201      	movs	r2, #1
 8011f1a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	e012      	b.n	8011f46 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011f20:	2230      	movs	r2, #48	; 0x30
 8011f22:	2100      	movs	r1, #0
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f011 fa5f 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011f2a:	887b      	ldrh	r3, [r7, #2]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d106      	bne.n	8011f3e <pifComm_Init+0x3a>
 8011f30:	4b08      	ldr	r3, [pc, #32]	; (8011f54 <pifComm_Init+0x50>)
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	b291      	uxth	r1, r2
 8011f38:	4a06      	ldr	r2, [pc, #24]	; (8011f54 <pifComm_Init+0x50>)
 8011f3a:	8011      	strh	r1, [r2, #0]
 8011f3c:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	887a      	ldrh	r2, [r7, #2]
 8011f42:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8011f44:	2301      	movs	r3, #1
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	20001db8 	.word	0x20001db8
 8011f54:	20000128 	.word	0x20000128

08011f58 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	69db      	ldr	r3, [r3, #28]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d007      	beq.n	8011f78 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	69db      	ldr	r3, [r3, #28]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f002 fc39 	bl	80147e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	699b      	ldr	r3, [r3, #24]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d004      	beq.n	8011f8a <pifComm_Clear+0x32>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3318      	adds	r3, #24
 8011f84:	4618      	mov	r0, r3
 8011f86:	f001 fccd 	bl	8013924 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d004      	beq.n	8011f9c <pifComm_Clear+0x44>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	3314      	adds	r3, #20
 8011f96:	4618      	mov	r0, r3
 8011f98:	f001 fcc4 	bl	8013924 <pifRingBuffer_Destroy>
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	460b      	mov	r3, r1
 8011fae:	807b      	strh	r3, [r7, #2]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8011fb4:	887b      	ldrh	r3, [r7, #2]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d104      	bne.n	8011fc4 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8011fba:	4b1a      	ldr	r3, [pc, #104]	; (8012024 <pifComm_AllocRxBuffer+0x80>)
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e02a      	b.n	801201a <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8011fc4:	887b      	ldrh	r3, [r7, #2]
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	2000      	movs	r0, #0
 8011fca:	f001 fc7f 	bl	80138cc <pifRingBuffer_CreateHeap>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d101      	bne.n	8011fe0 <pifComm_AllocRxBuffer+0x3c>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	e01c      	b.n	801201a <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 8011fe0:	787b      	ldrb	r3, [r7, #1]
 8011fe2:	2b64      	cmp	r3, #100	; 0x64
 8011fe4:	d901      	bls.n	8011fea <pifComm_AllocRxBuffer+0x46>
 8011fe6:	2364      	movs	r3, #100	; 0x64
 8011fe8:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 8011fea:	887b      	ldrh	r3, [r7, #2]
 8011fec:	2264      	movs	r2, #100	; 0x64
 8011fee:	fb03 f202 	mul.w	r2, r3, r2
 8011ff2:	787b      	ldrb	r3, [r7, #1]
 8011ff4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ff8:	b29a      	uxth	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012002:	2b00      	cmp	r3, #0
 8012004:	d102      	bne.n	801200c <pifComm_AllocRxBuffer+0x68>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2201      	movs	r2, #1
 801200a:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	699b      	ldr	r3, [r3, #24]
 8012010:	4905      	ldr	r1, [pc, #20]	; (8012028 <pifComm_AllocRxBuffer+0x84>)
 8012012:	4618      	mov	r0, r3
 8012014:	f001 fd03 	bl	8013a1e <pifRingBuffer_SetName>
    return TRUE;
 8012018:	2301      	movs	r3, #1
}
 801201a:	4618      	mov	r0, r3
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	20001db8 	.word	0x20001db8
 8012028:	08027a94 	.word	0x08027a94

0801202c <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	460b      	mov	r3, r1
 8012036:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8012038:	887b      	ldrh	r3, [r7, #2]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d104      	bne.n	8012048 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 801203e:	4b0f      	ldr	r3, [pc, #60]	; (801207c <pifComm_AllocTxBuffer+0x50>)
 8012040:	2201      	movs	r2, #1
 8012042:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012044:	2300      	movs	r3, #0
 8012046:	e014      	b.n	8012072 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8012048:	887b      	ldrh	r3, [r7, #2]
 801204a:	4619      	mov	r1, r3
 801204c:	2000      	movs	r0, #0
 801204e:	f001 fc3d 	bl	80138cc <pifRingBuffer_CreateHeap>
 8012052:	4602      	mov	r2, r0
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	695b      	ldr	r3, [r3, #20]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d101      	bne.n	8012064 <pifComm_AllocTxBuffer+0x38>
 8012060:	2300      	movs	r3, #0
 8012062:	e006      	b.n	8012072 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	695b      	ldr	r3, [r3, #20]
 8012068:	4905      	ldr	r1, [pc, #20]	; (8012080 <pifComm_AllocTxBuffer+0x54>)
 801206a:	4618      	mov	r0, r3
 801206c:	f001 fcd7 	bl	8013a1e <pifRingBuffer_SetName>
	return TRUE;
 8012070:	2301      	movs	r3, #1
}
 8012072:	4618      	mov	r0, r3
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	20001db8 	.word	0x20001db8
 8012080:	08027a98 	.word	0x08027a98

08012084 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	68ba      	ldr	r2, [r7, #8]
 8012096:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80120a4:	bf00      	nop
 80120a6:	3714      	adds	r7, #20
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80120ca:	bf00      	nop
 80120cc:	370c      	adds	r7, #12
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr

080120d6 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b082      	sub	sp, #8
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	460b      	mov	r3, r1
 80120e0:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	699b      	ldr	r3, [r3, #24]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <pifComm_PutRxByte+0x18>
 80120ea:	2300      	movs	r3, #0
 80120ec:	e01c      	b.n	8012128 <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	699b      	ldr	r3, [r3, #24]
 80120f2:	78fa      	ldrb	r2, [r7, #3]
 80120f4:	4611      	mov	r1, r2
 80120f6:	4618      	mov	r0, r3
 80120f8:	f001 fda0 	bl	8013c3c <pifRingBuffer_PutByte>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <pifComm_PutRxByte+0x30>
 8012102:	2300      	movs	r3, #0
 8012104:	e010      	b.n	8012128 <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	699b      	ldr	r3, [r3, #24]
 801210a:	4618      	mov	r0, r3
 801210c:	f001 fcd4 	bl	8013ab8 <pifRingBuffer_GetFillSize>
 8012110:	4603      	mov	r3, r0
 8012112:	461a      	mov	r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012118:	429a      	cmp	r2, r3
 801211a:	d304      	bcc.n	8012126 <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	69db      	ldr	r3, [r3, #28]
 8012120:	4618      	mov	r0, r3
 8012122:	f002 fa71 	bl	8014608 <pifTask_SetTrigger>
	}
	return TRUE;
 8012126:	2301      	movs	r3, #1
}
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	695b      	ldr	r3, [r3, #20]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d101      	bne.n	8012148 <pifComm_StartGetTxData+0x18>
 8012144:	2300      	movs	r3, #0
 8012146:	e027      	b.n	8012198 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	695b      	ldr	r3, [r3, #20]
 801214c:	4618      	mov	r0, r3
 801214e:	f001 fca0 	bl	8013a92 <pifRingBuffer_IsEmpty>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <pifComm_StartGetTxData+0x2c>
 8012158:	2302      	movs	r3, #2
 801215a:	e01d      	b.n	8012198 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	695b      	ldr	r3, [r3, #20]
 8012160:	2100      	movs	r1, #0
 8012162:	4618      	mov	r0, r3
 8012164:	f001 fc69 	bl	8013a3a <pifRingBuffer_GetTailPointer>
 8012168:	4602      	mov	r2, r0
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	695b      	ldr	r3, [r3, #20]
 8012172:	2100      	movs	r1, #0
 8012174:	4618      	mov	r0, r3
 8012176:	f001 fcc1 	bl	8013afc <pifRingBuffer_GetLinerSize>
 801217a:	4603      	mov	r3, r0
 801217c:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d004      	beq.n	8012190 <pifComm_StartGetTxData+0x60>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	881b      	ldrh	r3, [r3, #0]
 801218a:	8afa      	ldrh	r2, [r7, #22]
 801218c:	429a      	cmp	r2, r3
 801218e:	d802      	bhi.n	8012196 <pifComm_StartGetTxData+0x66>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	8afa      	ldrh	r2, [r7, #22]
 8012194:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012196:	2301      	movs	r3, #1
}
 8012198:	4618      	mov	r0, r3
 801219a:	3718      	adds	r7, #24
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	695b      	ldr	r3, [r3, #20]
 80121b0:	887a      	ldrh	r2, [r7, #2]
 80121b2:	4611      	mov	r1, r2
 80121b4:	4618      	mov	r0, r3
 80121b6:	f001 fe7e 	bl	8013eb6 <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	4618      	mov	r0, r3
 80121c0:	f001 fc67 	bl	8013a92 <pifRingBuffer_IsEmpty>
 80121c4:	4603      	mov	r3, r0
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	b2db      	uxtb	r3, r3
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b082      	sub	sp, #8
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pifTask_SetTrigger(p_owner->_p_task);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	69db      	ldr	r3, [r3, #28]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f002 fa0e 	bl	8014608 <pifTask_SetTrigger>
}
 80121ec:	bf00      	nop
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012206:	2b00      	cmp	r3, #0
 8012208:	d017      	beq.n	801223a <_doTask+0x46>
		if (p_owner->act_receive_data) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d008      	beq.n	8012224 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	6a10      	ldr	r0, [r2, #32]
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	6852      	ldr	r2, [r2, #4]
 801221e:	4611      	mov	r1, r2
 8012220:	4798      	blx	r3
 8012222:	e00a      	b.n	801223a <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	699b      	ldr	r3, [r3, #24]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d006      	beq.n	801223a <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	6a12      	ldr	r2, [r2, #32]
 8012234:	4907      	ldr	r1, [pc, #28]	; (8012254 <_doTask+0x60>)
 8012236:	4610      	mov	r0, r2
 8012238:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223e:	2b00      	cmp	r3, #0
 8012240:	d002      	beq.n	8012248 <_doTask+0x54>
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f7ff fe20 	bl	8011e88 <_sendData>
	return 0;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	08011e15 	.word	0x08011e15

08012258 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af02      	add	r7, sp, #8
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	4608      	mov	r0, r1
 8012262:	4611      	mov	r1, r2
 8012264:	461a      	mov	r2, r3
 8012266:	4603      	mov	r3, r0
 8012268:	70fb      	strb	r3, [r7, #3]
 801226a:	460b      	mov	r3, r1
 801226c:	803b      	strh	r3, [r7, #0]
 801226e:	4613      	mov	r3, r2
 8012270:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8012272:	8839      	ldrh	r1, [r7, #0]
 8012274:	78f8      	ldrb	r0, [r7, #3]
 8012276:	78bb      	ldrb	r3, [r7, #2]
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4a0d      	ldr	r2, [pc, #52]	; (80122b4 <pifComm_AttachTask+0x5c>)
 801227e:	f002 fa49 	bl	8014714 <pifTaskManager_Add>
 8012282:	4602      	mov	r2, r0
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	61da      	str	r2, [r3, #28]
	if (p_owner->_p_task) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	69db      	ldr	r3, [r3, #28]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00b      	beq.n	80122a8 <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d004      	beq.n	80122a0 <pifComm_AttachTask+0x48>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	69db      	ldr	r3, [r3, #28]
 801229a:	693a      	ldr	r2, [r7, #16]
 801229c:	601a      	str	r2, [r3, #0]
 801229e:	e003      	b.n	80122a8 <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	69db      	ldr	r3, [r3, #28]
 80122a4:	4a04      	ldr	r2, [pc, #16]	; (80122b8 <pifComm_AttachTask+0x60>)
 80122a6:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	69db      	ldr	r3, [r3, #28]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	080121f5 	.word	0x080121f5
 80122b8:	08027a9c 	.word	0x08027a9c

080122bc <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	4608      	mov	r0, r1
 80122c6:	4611      	mov	r1, r2
 80122c8:	461a      	mov	r2, r3
 80122ca:	4603      	mov	r3, r0
 80122cc:	817b      	strh	r3, [r7, #10]
 80122ce:	460b      	mov	r3, r1
 80122d0:	727b      	strb	r3, [r7, #9]
 80122d2:	4613      	mov	r3, r2
 80122d4:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d005      	beq.n	80122e8 <pifI2cPort_Init+0x2c>
 80122dc:	7a7b      	ldrb	r3, [r7, #9]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d002      	beq.n	80122e8 <pifI2cPort_Init+0x2c>
 80122e2:	88fb      	ldrh	r3, [r7, #6]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d104      	bne.n	80122f2 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80122e8:	4b17      	ldr	r3, [pc, #92]	; (8012348 <pifI2cPort_Init+0x8c>)
 80122ea:	2201      	movs	r2, #1
 80122ec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80122ee:	2300      	movs	r3, #0
 80122f0:	e025      	b.n	801233e <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80122f2:	2230      	movs	r2, #48	; 0x30
 80122f4:	2100      	movs	r1, #0
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f011 f876 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80122fc:	897b      	ldrh	r3, [r7, #10]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <pifI2cPort_Init+0x54>
 8012302:	4b12      	ldr	r3, [pc, #72]	; (801234c <pifI2cPort_Init+0x90>)
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	b291      	uxth	r1, r2
 801230a:	4a10      	ldr	r2, [pc, #64]	; (801234c <pifI2cPort_Init+0x90>)
 801230c:	8011      	strh	r1, [r2, #0]
 801230e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	897a      	ldrh	r2, [r7, #10]
 8012314:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	88fa      	ldrh	r2, [r7, #6]
 801231a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	3310      	adds	r3, #16
 8012320:	7a7a      	ldrb	r2, [r7, #9]
 8012322:	2108      	movs	r1, #8
 8012324:	4618      	mov	r0, r3
 8012326:	f000 fa7d 	bl	8012824 <pifFixList_Init>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d001      	beq.n	8012334 <pifI2cPort_Init+0x78>
    return TRUE;
 8012330:	2301      	movs	r3, #1
 8012332:	e004      	b.n	801233e <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012334:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 8012336:	68f8      	ldr	r0, [r7, #12]
 8012338:	f000 f80a 	bl	8012350 <pifI2cPort_Clear>
	return FALSE;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20001db8 	.word	0x20001db8
 801234c:	20000128 	.word	0x20000128

08012350 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3310      	adds	r3, #16
 801235c:	2100      	movs	r1, #0
 801235e:	4618      	mov	r0, r3
 8012360:	f000 fac0 	bl	80128e4 <pifFixList_Clear>
}
 8012364:	bf00      	nop
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d104      	bne.n	8012384 <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 801237a:	4b0d      	ldr	r3, [pc, #52]	; (80123b0 <pifI2cPort_AddDevice+0x44>)
 801237c:	2201      	movs	r2, #1
 801237e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012380:	2300      	movs	r3, #0
 8012382:	e011      	b.n	80123a8 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	3310      	adds	r3, #16
 8012388:	4618      	mov	r0, r3
 801238a:	f000 fade 	bl	801294a <pifFixList_AddFirst>
 801238e:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <pifI2cPort_AddDevice+0x2e>
 8012396:	2300      	movs	r3, #0
 8012398:	e006      	b.n	80123a8 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	220a      	movs	r2, #10
 80123a4:	705a      	strb	r2, [r3, #1]
    return p_device;
 80123a6:	68fb      	ldr	r3, [r7, #12]
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	20001db8 	.word	0x20001db8

080123b4 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
	if (p_device) {
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d007      	beq.n	80123d4 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3310      	adds	r3, #16
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 faf1 	bl	80129b2 <pifFixList_Remove>
		p_device = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	603b      	str	r3, [r7, #0]
	}
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80123dc:	b5b0      	push	{r4, r5, r7, lr}
 80123de:	b08a      	sub	sp, #40	; 0x28
 80123e0:	af02      	add	r7, sp, #8
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	603b      	str	r3, [r7, #0]
 80123e8:	4613      	mov	r3, r2
 80123ea:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	61bb      	str	r3, [r7, #24]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <pifI2cDevice_Read+0x22>
 80123fa:	2300      	movs	r3, #0
 80123fc:	e06e      	b.n	80124dc <pifI2cDevice_Read+0x100>
	if (p_port->__use_device) {
 80123fe:	69bb      	ldr	r3, [r7, #24]
 8012400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012402:	2b00      	cmp	r3, #0
 8012404:	d001      	beq.n	801240a <pifI2cDevice_Read+0x2e>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
#endif
		return FALSE;
 8012406:	2300      	movs	r3, #0
 8012408:	e068      	b.n	80124dc <pifI2cDevice_Read+0x100>
	}

	p_port->__use_device = p_owner;
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2201      	movs	r2, #1
 8012414:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	61fb      	str	r3, [r7, #28]
	while (size) {
 801241a:	e03f      	b.n	801249c <pifI2cDevice_Read+0xc0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012420:	461a      	mov	r2, r3
 8012422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012424:	4293      	cmp	r3, r2
 8012426:	bf28      	it	cs
 8012428:	4613      	movcs	r3, r2
 801242a:	75fb      	strb	r3, [r7, #23]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	685c      	ldr	r4, [r3, #4]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	7818      	ldrb	r0, [r3, #0]
 8012434:	68ba      	ldr	r2, [r7, #8]
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	18d1      	adds	r1, r2, r3
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	18d5      	adds	r5, r2, r3
 8012440:	7dfb      	ldrb	r3, [r7, #23]
 8012442:	b29b      	uxth	r3, r3
 8012444:	79fa      	ldrb	r2, [r7, #7]
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	462b      	mov	r3, r5
 801244a:	47a0      	blx	r4
 801244c:	4603      	mov	r3, r0
 801244e:	2b02      	cmp	r3, #2
 8012450:	d02f      	beq.n	80124b2 <pifI2cDevice_Read+0xd6>
 8012452:	2b02      	cmp	r3, #2
 8012454:	dc1a      	bgt.n	801248c <pifI2cDevice_Read+0xb0>
 8012456:	2b00      	cmp	r3, #0
 8012458:	d001      	beq.n	801245e <pifI2cDevice_Read+0x82>
 801245a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 801245c:	e016      	b.n	801248c <pifI2cDevice_Read+0xb0>
			timer1ms = pif_cumulative_timer1ms;
 801245e:	4b21      	ldr	r3, [pc, #132]	; (80124e4 <pifI2cDevice_Read+0x108>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	613b      	str	r3, [r7, #16]
			while (p_owner->_state == IS_RUN) {
 8012464:	e007      	b.n	8012476 <pifI2cDevice_Read+0x9a>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012466:	4b1f      	ldr	r3, [pc, #124]	; (80124e4 <pifI2cDevice_Read+0x108>)
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	7852      	ldrb	r2, [r2, #1]
 8012472:	4293      	cmp	r3, r2
 8012474:	d81f      	bhi.n	80124b6 <pifI2cDevice_Read+0xda>
			while (p_owner->_state == IS_RUN) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	789b      	ldrb	r3, [r3, #2]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	2b01      	cmp	r3, #1
 801247e:	d0f2      	beq.n	8012466 <pifI2cDevice_Read+0x8a>
			if (p_owner->_state == IS_ERROR) {
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	789b      	ldrb	r3, [r3, #2]
 8012484:	b2db      	uxtb	r3, r3
 8012486:	2b03      	cmp	r3, #3
 8012488:	d017      	beq.n	80124ba <pifI2cDevice_Read+0xde>
			break;
 801248a:	bf00      	nop
#ifndef __PIF_NO_LOG__
			line = __LINE__;
#endif
			goto fail;
		}
		ptr += len;
 801248c:	7dfb      	ldrb	r3, [r7, #23]
 801248e:	69fa      	ldr	r2, [r7, #28]
 8012490:	4413      	add	r3, r2
 8012492:	61fb      	str	r3, [r7, #28]
		size -= len;
 8012494:	7dfb      	ldrb	r3, [r7, #23]
 8012496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	633b      	str	r3, [r7, #48]	; 0x30
	while (size) {
 801249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1bc      	bne.n	801241c <pifI2cDevice_Read+0x40>
	}
	p_port->__use_device = NULL;
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	2200      	movs	r2, #0
 80124a6:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2200      	movs	r2, #0
 80124ac:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80124ae:	2301      	movs	r3, #1
 80124b0:	e014      	b.n	80124dc <pifI2cDevice_Read+0x100>
			goto fail;
 80124b2:	bf00      	nop
 80124b4:	e002      	b.n	80124bc <pifI2cDevice_Read+0xe0>
					goto fail;
 80124b6:	bf00      	nop
 80124b8:	e000      	b.n	80124bc <pifI2cDevice_Read+0xe0>
				goto fail;
 80124ba:	bf00      	nop

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
#endif
	p_port->__use_device = NULL;
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	2200      	movs	r2, #0
 80124c0:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	881b      	ldrh	r3, [r3, #0]
 80124c6:	3301      	adds	r3, #1
 80124c8:	b29a      	uxth	r2, r3
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2200      	movs	r2, #0
 80124d2:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80124d4:	4b04      	ldr	r3, [pc, #16]	; (80124e8 <pifI2cDevice_Read+0x10c>)
 80124d6:	220a      	movs	r2, #10
 80124d8:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80124da:	2300      	movs	r3, #0
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3720      	adds	r7, #32
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bdb0      	pop	{r4, r5, r7, pc}
 80124e4:	20001dd0 	.word	0x20001dd0
 80124e8:	20001db8 	.word	0x20001db8

080124ec <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af02      	add	r7, sp, #8
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	460b      	mov	r3, r1
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80124fa:	7af9      	ldrb	r1, [r7, #11]
 80124fc:	2301      	movs	r3, #1
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	68f8      	ldr	r0, [r7, #12]
 8012506:	f7ff ff69 	bl	80123dc <pifI2cDevice_Read>
 801250a:	4603      	mov	r3, r0
}
 801250c:	4618      	mov	r0, r3
 801250e:	3710      	adds	r7, #16
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b088      	sub	sp, #32
 8012518:	af02      	add	r7, sp, #8
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	460b      	mov	r3, r1
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012522:	7af9      	ldrb	r1, [r7, #11]
 8012524:	f107 0314 	add.w	r3, r7, #20
 8012528:	2202      	movs	r2, #2
 801252a:	9200      	str	r2, [sp, #0]
 801252c:	2201      	movs	r2, #1
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7ff ff54 	bl	80123dc <pifI2cDevice_Read>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <pifI2cDevice_ReadRegWord+0x2a>
 801253a:	2300      	movs	r3, #0
 801253c:	e00a      	b.n	8012554 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 801253e:	7d3b      	ldrb	r3, [r7, #20]
 8012540:	b29b      	uxth	r3, r3
 8012542:	021b      	lsls	r3, r3, #8
 8012544:	b29a      	uxth	r2, r3
 8012546:	7d7b      	ldrb	r3, [r7, #21]
 8012548:	b29b      	uxth	r3, r3
 801254a:	4413      	add	r3, r2
 801254c:	b29a      	uxth	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012552:	2301      	movs	r3, #1
}
 8012554:	4618      	mov	r0, r3
 8012556:	3718      	adds	r7, #24
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af02      	add	r7, sp, #8
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	607a      	str	r2, [r7, #4]
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	460b      	mov	r3, r1
 801256a:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 801256c:	7af9      	ldrb	r1, [r7, #11]
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2201      	movs	r2, #1
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f7ff ff30 	bl	80123dc <pifI2cDevice_Read>
 801257c:	4603      	mov	r3, r0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3710      	adds	r7, #16
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012586:	b580      	push	{r7, lr}
 8012588:	b088      	sub	sp, #32
 801258a:	af02      	add	r7, sp, #8
 801258c:	60f8      	str	r0, [r7, #12]
 801258e:	607b      	str	r3, [r7, #4]
 8012590:	460b      	mov	r3, r1
 8012592:	72fb      	strb	r3, [r7, #11]
 8012594:	4613      	mov	r3, r2
 8012596:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012598:	893b      	ldrh	r3, [r7, #8]
 801259a:	0a1b      	lsrs	r3, r3, #8
 801259c:	b29b      	uxth	r3, r3
 801259e:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 80125a0:	893b      	ldrh	r3, [r7, #8]
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	2201      	movs	r2, #1
 80125a6:	fa02 f303 	lsl.w	r3, r2, r3
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	3b01      	subs	r3, #1
 80125ae:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80125b0:	7af9      	ldrb	r1, [r7, #11]
 80125b2:	f107 0315 	add.w	r3, r7, #21
 80125b6:	2201      	movs	r2, #1
 80125b8:	9200      	str	r2, [sp, #0]
 80125ba:	2201      	movs	r2, #1
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	f7ff ff0d 	bl	80123dc <pifI2cDevice_Read>
 80125c2:	4603      	mov	r3, r0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d101      	bne.n	80125cc <pifI2cDevice_ReadRegBit8+0x46>
 80125c8:	2300      	movs	r3, #0
 80125ca:	e00d      	b.n	80125e8 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80125cc:	7d7b      	ldrb	r3, [r7, #21]
 80125ce:	461a      	mov	r2, r3
 80125d0:	7dfb      	ldrb	r3, [r7, #23]
 80125d2:	fa42 f303 	asr.w	r3, r2, r3
 80125d6:	b25a      	sxtb	r2, r3
 80125d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80125dc:	4013      	ands	r3, r2
 80125de:	b25b      	sxtb	r3, r3
 80125e0:	b2da      	uxtb	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80125e6:	2301      	movs	r3, #1
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3718      	adds	r7, #24
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80125f0:	b5b0      	push	{r4, r5, r7, lr}
 80125f2:	b08a      	sub	sp, #40	; 0x28
 80125f4:	af02      	add	r7, sp, #8
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	603b      	str	r3, [r7, #0]
 80125fc:	4613      	mov	r3, r2
 80125fe:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	61bb      	str	r3, [r7, #24]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d101      	bne.n	8012612 <pifI2cDevice_Write+0x22>
 801260e:	2300      	movs	r3, #0
 8012610:	e06e      	b.n	80126f0 <pifI2cDevice_Write+0x100>
	if (p_port->__use_device) {
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012616:	2b00      	cmp	r3, #0
 8012618:	d001      	beq.n	801261e <pifI2cDevice_Write+0x2e>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
#endif
		return FALSE;
 801261a:	2300      	movs	r3, #0
 801261c:	e068      	b.n	80126f0 <pifI2cDevice_Write+0x100>
	}

	p_port->__use_device = p_owner;
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2201      	movs	r2, #1
 8012628:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	61fb      	str	r3, [r7, #28]
	while (size) {
 801262e:	e03f      	b.n	80126b0 <pifI2cDevice_Write+0xc0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012634:	461a      	mov	r2, r3
 8012636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012638:	4293      	cmp	r3, r2
 801263a:	bf28      	it	cs
 801263c:	4613      	movcs	r3, r2
 801263e:	75fb      	strb	r3, [r7, #23]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012640:	69bb      	ldr	r3, [r7, #24]
 8012642:	689c      	ldr	r4, [r3, #8]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	7818      	ldrb	r0, [r3, #0]
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	18d1      	adds	r1, r2, r3
 801264e:	683a      	ldr	r2, [r7, #0]
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	18d5      	adds	r5, r2, r3
 8012654:	7dfb      	ldrb	r3, [r7, #23]
 8012656:	b29b      	uxth	r3, r3
 8012658:	79fa      	ldrb	r2, [r7, #7]
 801265a:	9300      	str	r3, [sp, #0]
 801265c:	462b      	mov	r3, r5
 801265e:	47a0      	blx	r4
 8012660:	4603      	mov	r3, r0
 8012662:	2b02      	cmp	r3, #2
 8012664:	d02f      	beq.n	80126c6 <pifI2cDevice_Write+0xd6>
 8012666:	2b02      	cmp	r3, #2
 8012668:	dc1a      	bgt.n	80126a0 <pifI2cDevice_Write+0xb0>
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <pifI2cDevice_Write+0x82>
 801266e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012670:	e016      	b.n	80126a0 <pifI2cDevice_Write+0xb0>
			timer1ms = pif_cumulative_timer1ms;
 8012672:	4b21      	ldr	r3, [pc, #132]	; (80126f8 <pifI2cDevice_Write+0x108>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	613b      	str	r3, [r7, #16]
			while (p_owner->_state == IS_RUN) {
 8012678:	e007      	b.n	801268a <pifI2cDevice_Write+0x9a>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801267a:	4b1f      	ldr	r3, [pc, #124]	; (80126f8 <pifI2cDevice_Write+0x108>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	7852      	ldrb	r2, [r2, #1]
 8012686:	4293      	cmp	r3, r2
 8012688:	d81f      	bhi.n	80126ca <pifI2cDevice_Write+0xda>
			while (p_owner->_state == IS_RUN) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	789b      	ldrb	r3, [r3, #2]
 801268e:	b2db      	uxtb	r3, r3
 8012690:	2b01      	cmp	r3, #1
 8012692:	d0f2      	beq.n	801267a <pifI2cDevice_Write+0x8a>
			if (p_owner->_state == IS_ERROR) {
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	789b      	ldrb	r3, [r3, #2]
 8012698:	b2db      	uxtb	r3, r3
 801269a:	2b03      	cmp	r3, #3
 801269c:	d017      	beq.n	80126ce <pifI2cDevice_Write+0xde>
			break;
 801269e:	bf00      	nop
#ifndef __PIF_NO_LOG__
			line = __LINE__;
#endif
			goto fail;
		}
		ptr += len;
 80126a0:	7dfb      	ldrb	r3, [r7, #23]
 80126a2:	69fa      	ldr	r2, [r7, #28]
 80126a4:	4413      	add	r3, r2
 80126a6:	61fb      	str	r3, [r7, #28]
		size -= len;
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ac:	1ad3      	subs	r3, r2, r3
 80126ae:	633b      	str	r3, [r7, #48]	; 0x30
	while (size) {
 80126b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1bc      	bne.n	8012630 <pifI2cDevice_Write+0x40>
	}
	p_port->__use_device = NULL;
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	2200      	movs	r2, #0
 80126ba:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80126c2:	2301      	movs	r3, #1
 80126c4:	e014      	b.n	80126f0 <pifI2cDevice_Write+0x100>
			goto fail;
 80126c6:	bf00      	nop
 80126c8:	e002      	b.n	80126d0 <pifI2cDevice_Write+0xe0>
					goto fail;
 80126ca:	bf00      	nop
 80126cc:	e000      	b.n	80126d0 <pifI2cDevice_Write+0xe0>
				goto fail;
 80126ce:	bf00      	nop

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
#endif
	p_port->__use_device = NULL;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	2200      	movs	r2, #0
 80126d4:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	3301      	adds	r3, #1
 80126dc:	b29a      	uxth	r2, r3
 80126de:	69bb      	ldr	r3, [r7, #24]
 80126e0:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80126e8:	4b04      	ldr	r3, [pc, #16]	; (80126fc <pifI2cDevice_Write+0x10c>)
 80126ea:	220a      	movs	r2, #10
 80126ec:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3720      	adds	r7, #32
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bdb0      	pop	{r4, r5, r7, pc}
 80126f8:	20001dd0 	.word	0x20001dd0
 80126fc:	20001db8 	.word	0x20001db8

08012700 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af02      	add	r7, sp, #8
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	460b      	mov	r3, r1
 801270a:	70fb      	strb	r3, [r7, #3]
 801270c:	4613      	mov	r3, r2
 801270e:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012710:	78f9      	ldrb	r1, [r7, #3]
 8012712:	1cbb      	adds	r3, r7, #2
 8012714:	2201      	movs	r2, #1
 8012716:	9200      	str	r2, [sp, #0]
 8012718:	2201      	movs	r2, #1
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff ff68 	bl	80125f0 <pifI2cDevice_Write>
 8012720:	4603      	mov	r3, r0
}
 8012722:	4618      	mov	r0, r3
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
	...

0801272c <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af02      	add	r7, sp, #8
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	4608      	mov	r0, r1
 8012736:	4611      	mov	r1, r2
 8012738:	461a      	mov	r2, r3
 801273a:	4603      	mov	r3, r0
 801273c:	70fb      	strb	r3, [r7, #3]
 801273e:	460b      	mov	r3, r1
 8012740:	803b      	strh	r3, [r7, #0]
 8012742:	4613      	mov	r3, r2
 8012744:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012746:	883b      	ldrh	r3, [r7, #0]
 8012748:	0a1b      	lsrs	r3, r3, #8
 801274a:	b29b      	uxth	r3, r3
 801274c:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 801274e:	883b      	ldrh	r3, [r7, #0]
 8012750:	b2db      	uxtb	r3, r3
 8012752:	2201      	movs	r2, #1
 8012754:	fa02 f303 	lsl.w	r3, r2, r3
 8012758:	b2db      	uxtb	r3, r3
 801275a:	3b01      	subs	r3, #1
 801275c:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 801275e:	78ba      	ldrb	r2, [r7, #2]
 8012760:	7bbb      	ldrb	r3, [r7, #14]
 8012762:	429a      	cmp	r2, r3
 8012764:	d904      	bls.n	8012770 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012766:	4b21      	ldr	r3, [pc, #132]	; (80127ec <pifI2cDevice_WriteRegBit8+0xc0>)
 8012768:	2206      	movs	r2, #6
 801276a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801276c:	2300      	movs	r3, #0
 801276e:	e039      	b.n	80127e4 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 8012770:	78f9      	ldrb	r1, [r7, #3]
 8012772:	f107 030c 	add.w	r3, r7, #12
 8012776:	2201      	movs	r2, #1
 8012778:	9200      	str	r2, [sp, #0]
 801277a:	2201      	movs	r2, #1
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff fe2d 	bl	80123dc <pifI2cDevice_Read>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d101      	bne.n	801278c <pifI2cDevice_WriteRegBit8+0x60>
 8012788:	2300      	movs	r3, #0
 801278a:	e02b      	b.n	80127e4 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 801278c:	7b3b      	ldrb	r3, [r7, #12]
 801278e:	461a      	mov	r2, r3
 8012790:	7bfb      	ldrb	r3, [r7, #15]
 8012792:	411a      	asrs	r2, r3
 8012794:	7bbb      	ldrb	r3, [r7, #14]
 8012796:	401a      	ands	r2, r3
 8012798:	78bb      	ldrb	r3, [r7, #2]
 801279a:	429a      	cmp	r2, r3
 801279c:	d021      	beq.n	80127e2 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 801279e:	7bba      	ldrb	r2, [r7, #14]
 80127a0:	7bfb      	ldrb	r3, [r7, #15]
 80127a2:	fa02 f303 	lsl.w	r3, r2, r3
 80127a6:	b25b      	sxtb	r3, r3
 80127a8:	43db      	mvns	r3, r3
 80127aa:	b25a      	sxtb	r2, r3
 80127ac:	7b3b      	ldrb	r3, [r7, #12]
 80127ae:	b25b      	sxtb	r3, r3
 80127b0:	4013      	ands	r3, r2
 80127b2:	b25a      	sxtb	r2, r3
 80127b4:	78b9      	ldrb	r1, [r7, #2]
 80127b6:	7bfb      	ldrb	r3, [r7, #15]
 80127b8:	fa01 f303 	lsl.w	r3, r1, r3
 80127bc:	b25b      	sxtb	r3, r3
 80127be:	4313      	orrs	r3, r2
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80127c6:	78f9      	ldrb	r1, [r7, #3]
 80127c8:	f107 030d 	add.w	r3, r7, #13
 80127cc:	2201      	movs	r2, #1
 80127ce:	9200      	str	r2, [sp, #0]
 80127d0:	2201      	movs	r2, #1
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff ff0c 	bl	80125f0 <pifI2cDevice_Write>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <pifI2cDevice_WriteRegBit8+0xb6>
 80127de:	2300      	movs	r3, #0
 80127e0:	e000      	b.n	80127e4 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 80127e2:	2301      	movs	r3, #1
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3710      	adds	r7, #16
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	20001db8 	.word	0x20001db8

080127f0 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b083      	sub	sp, #12
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012800:	2b00      	cmp	r3, #0
 8012802:	d009      	beq.n	8012818 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012804:	78fb      	ldrb	r3, [r7, #3]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d001      	beq.n	801280e <pifI2cPort_sigEndTransfer+0x1e>
 801280a:	2202      	movs	r2, #2
 801280c:	e000      	b.n	8012810 <pifI2cPort_sigEndTransfer+0x20>
 801280e:	2203      	movs	r2, #3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012814:	709a      	strb	r2, [r3, #2]
 8012816:	e000      	b.n	801281a <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012818:	bf00      	nop
}
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b088      	sub	sp, #32
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d005      	beq.n	8012842 <pifFixList_Init+0x1e>
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <pifFixList_Init+0x1e>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d104      	bne.n	801284c <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012842:	4b27      	ldr	r3, [pc, #156]	; (80128e0 <pifFixList_Init+0xbc>)
 8012844:	2201      	movs	r2, #1
 8012846:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012848:	2300      	movs	r3, #0
 801284a:	e045      	b.n	80128d8 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	3308      	adds	r3, #8
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	4611      	mov	r1, r2
 8012854:	4618      	mov	r0, r3
 8012856:	f010 fd77 	bl	8023348 <calloc>
 801285a:	4603      	mov	r3, r0
 801285c:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d033      	beq.n	80128cc <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	69fa      	ldr	r2, [r7, #28]
 8012868:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2200      	movs	r2, #0
 801287a:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2200      	movs	r2, #0
 8012880:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	69ba      	ldr	r2, [r7, #24]
 801288c:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 801288e:	2301      	movs	r3, #1
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	e00f      	b.n	80128b4 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	3308      	adds	r3, #8
 8012898:	69fa      	ldr	r2, [r7, #28]
 801289a:	4413      	add	r3, r2
 801289c:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 801289e:	69bb      	ldr	r3, [r7, #24]
 80128a0:	69fa      	ldr	r2, [r7, #28]
 80128a2:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2200      	movs	r2, #0
 80128a8:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	3301      	adds	r3, #1
 80128b2:	617b      	str	r3, [r7, #20]
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	dbeb      	blt.n	8012894 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	2200      	movs	r2, #0
 80128c0:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	2200      	movs	r2, #0
 80128c6:	605a      	str	r2, [r3, #4]

	return TRUE;
 80128c8:	2301      	movs	r3, #1
 80128ca:	e005      	b.n	80128d8 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 80128cc:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 80128ce:	2100      	movs	r1, #0
 80128d0:	68f8      	ldr	r0, [r7, #12]
 80128d2:	f000 f807 	bl	80128e4 <pifFixList_Clear>
	return FALSE;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3720      	adds	r7, #32
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	20001db8 	.word	0x20001db8

080128e4 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b084      	sub	sp, #16
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d01f      	beq.n	8012936 <pifFixList_Clear+0x52>
		if (evt_clear) {
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d014      	beq.n	8012926 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	691b      	ldr	r3, [r3, #16]
 8012900:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012902:	e00d      	b.n	8012920 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f103 0208 	add.w	r2, r3, #8
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	4610      	mov	r0, r2
 801290e:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d002      	beq.n	801291c <pifFixList_Clear+0x38>
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	e000      	b.n	801291e <pifFixList_Clear+0x3a>
 801291c:	2300      	movs	r3, #0
 801291e:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1ee      	bne.n	8012904 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4618      	mov	r0, r3
 801292c:	f010 fd46 	bl	80233bc <free>
		p_owner->p_node = NULL;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	605a      	str	r2, [r3, #4]
}
 8012942:	bf00      	nop
 8012944:	3710      	adds	r7, #16
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}

0801294a <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 801294a:	b580      	push	{r7, lr}
 801294c:	b084      	sub	sp, #16
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	695b      	ldr	r3, [r3, #20]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d101      	bne.n	801295e <pifFixList_AddFirst+0x14>
 801295a:	2300      	movs	r3, #0
 801295c:	e025      	b.n	80129aa <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	695b      	ldr	r3, [r3, #20]
 8012962:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	691a      	ldr	r2, [r3, #16]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	691b      	ldr	r3, [r3, #16]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d003      	beq.n	8012984 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	691b      	ldr	r3, [r3, #16]
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	3308      	adds	r3, #8
 8012998:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	2100      	movs	r1, #0
 80129a2:	68b8      	ldr	r0, [r7, #8]
 80129a4:	f010 fd20 	bl	80233e8 <memset>
    return p;
 80129a8:	68bb      	ldr	r3, [r7, #8]
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 80129b2:	b480      	push	{r7}
 80129b4:	b085      	sub	sp, #20
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	3b08      	subs	r3, #8
 80129c0:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d005      	beq.n	80129d6 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	68fa      	ldr	r2, [r7, #12]
 80129d0:	6812      	ldr	r2, [r2, #0]
 80129d2:	601a      	str	r2, [r3, #0]
 80129d4:	e003      	b.n	80129de <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d004      	beq.n	80129f0 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	6852      	ldr	r2, [r2, #4]
 80129ee:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	695a      	ldr	r2, [r3, #20]
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	1e5a      	subs	r2, r3, #1
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	609a      	str	r2, [r3, #8]
}
 8012a0e:	bf00      	nop
 8012a10:	3714      	adds	r7, #20
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr

08012a1a <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012a1a:	b480      	push	{r7}
 8012a1c:	b083      	sub	sp, #12
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr

08012a32 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	691b      	ldr	r3, [r3, #16]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8012a4a:	b480      	push	{r7}
 8012a4c:	b083      	sub	sp, #12
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <pifFixList_Next+0x14>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	e000      	b.n	8012a60 <pifFixList_Next+0x16>
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af02      	add	r7, sp, #8
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 8012a76:	4919      	ldr	r1, [pc, #100]	; (8012adc <pifLog_CmdHelp+0x70>)
 8012a78:	2000      	movs	r0, #0
 8012a7a:	f000 fd69 	bl	8013550 <pifLog_Print>
    i = 0;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 8012a82:	4b17      	ldr	r3, [pc, #92]	; (8012ae0 <pifLog_CmdHelp+0x74>)
 8012a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	011b      	lsls	r3, r3, #4
 8012a8a:	4413      	add	r3, r2
 8012a8c:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d01c      	beq.n	8012ad0 <pifLog_CmdHelp+0x64>

    	if (p_entry->p_args) {
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00c      	beq.n	8012ab8 <pifLog_CmdHelp+0x4c>
            pifLog_Printf(LT_NONE, "  %s - %s\n\t%s\n", p_entry->p_name, p_entry->p_help, p_entry->p_args);
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	6899      	ldr	r1, [r3, #8]
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	68db      	ldr	r3, [r3, #12]
 8012aaa:	9300      	str	r3, [sp, #0]
 8012aac:	460b      	mov	r3, r1
 8012aae:	490d      	ldr	r1, [pc, #52]	; (8012ae4 <pifLog_CmdHelp+0x78>)
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	f000 fddb 	bl	801366c <pifLog_Printf>
 8012ab6:	e007      	b.n	8012ac8 <pifLog_CmdHelp+0x5c>
    	}
    	else {
            pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	689b      	ldr	r3, [r3, #8]
 8012ac0:	4909      	ldr	r1, [pc, #36]	; (8012ae8 <pifLog_CmdHelp+0x7c>)
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	f000 fdd2 	bl	801366c <pifLog_Printf>
    	}
        i++;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	3301      	adds	r3, #1
 8012acc:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 8012ace:	e7d8      	b.n	8012a82 <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 8012ad0:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8012ad2:	2300      	movs	r3, #0
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3710      	adds	r7, #16
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	08027af4 	.word	0x08027af4
 8012ae0:	20001de4 	.word	0x20001de4
 8012ae4:	08027b0c 	.word	0x08027b0c
 8012ae8:	08027b1c 	.word	0x08027b1c

08012aec <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af02      	add	r7, sp, #8
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8012af6:	4b07      	ldr	r3, [pc, #28]	; (8012b14 <pifLog_CmdPrintVersion+0x28>)
 8012af8:	9301      	str	r3, [sp, #4]
 8012afa:	2300      	movs	r3, #0
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	2301      	movs	r3, #1
 8012b00:	2200      	movs	r2, #0
 8012b02:	4905      	ldr	r1, [pc, #20]	; (8012b18 <pifLog_CmdPrintVersion+0x2c>)
 8012b04:	2000      	movs	r0, #0
 8012b06:	f000 fdb1 	bl	801366c <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8012b0a:	2300      	movs	r3, #0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	08027b44 	.word	0x08027b44
 8012b18:	08027b28 	.word	0x08027b28

08012b1c <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 8012b26:	f002 f939 	bl	8014d9c <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b086      	sub	sp, #24
 8012b38:	af02      	add	r7, sp, #8
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 1) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d136      	bne.n	8012bb2 <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 8012b44:	4b4c      	ldr	r3, [pc, #304]	; (8012c78 <pifLog_CmdSetStatus+0x144>)
 8012b46:	791b      	ldrb	r3, [r3, #4]
 8012b48:	461a      	mov	r2, r3
 8012b4a:	494c      	ldr	r1, [pc, #304]	; (8012c7c <pifLog_CmdSetStatus+0x148>)
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	f000 fd8d 	bl	801366c <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012b52:	4b4b      	ldr	r3, [pc, #300]	; (8012c80 <pifLog_CmdSetStatus+0x14c>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	494a      	ldr	r1, [pc, #296]	; (8012c84 <pifLog_CmdSetStatus+0x150>)
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	f000 fd86 	bl	801366c <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012b60:	4949      	ldr	r1, [pc, #292]	; (8012c88 <pifLog_CmdSetStatus+0x154>)
 8012b62:	2000      	movs	r0, #0
 8012b64:	f000 fd82 	bl	801366c <pifLog_Printf>
	   	i = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012b6c:	e019      	b.n	8012ba2 <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012b6e:	4a47      	ldr	r2, [pc, #284]	; (8012c8c <pifLog_CmdSetStatus+0x158>)
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012b76:	4a45      	ldr	r2, [pc, #276]	; (8012c8c <pifLog_CmdSetStatus+0x158>)
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	00db      	lsls	r3, r3, #3
 8012b7c:	4413      	add	r3, r2
 8012b7e:	6858      	ldr	r0, [r3, #4]
 8012b80:	4b43      	ldr	r3, [pc, #268]	; (8012c90 <pifLog_CmdSetStatus+0x15c>)
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	fa22 f303 	lsr.w	r3, r2, r3
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	4603      	mov	r3, r0
 8012b92:	460a      	mov	r2, r1
 8012b94:	493f      	ldr	r1, [pc, #252]	; (8012c94 <pifLog_CmdSetStatus+0x160>)
 8012b96:	2000      	movs	r0, #0
 8012b98:	f000 fd68 	bl	801366c <pifLog_Printf>
			i++;
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012ba2:	4a3a      	ldr	r2, [pc, #232]	; (8012c8c <pifLog_CmdSetStatus+0x158>)
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d1df      	bne.n	8012b6e <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	e05d      	b.n	8012c6e <pifLog_CmdSetStatus+0x13a>
	}
	else if (argc > 2) {
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	dd58      	ble.n	8012c6a <pifLog_CmdSetStatus+0x136>
		switch (argv[2][0]) {
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	3308      	adds	r3, #8
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	2b74      	cmp	r3, #116	; 0x74
 8012bc2:	d015      	beq.n	8012bf0 <pifLog_CmdSetStatus+0xbc>
 8012bc4:	2b74      	cmp	r3, #116	; 0x74
 8012bc6:	dc16      	bgt.n	8012bf6 <pifLog_CmdSetStatus+0xc2>
 8012bc8:	2b66      	cmp	r3, #102	; 0x66
 8012bca:	d00e      	beq.n	8012bea <pifLog_CmdSetStatus+0xb6>
 8012bcc:	2b66      	cmp	r3, #102	; 0x66
 8012bce:	dc12      	bgt.n	8012bf6 <pifLog_CmdSetStatus+0xc2>
 8012bd0:	2b54      	cmp	r3, #84	; 0x54
 8012bd2:	d00d      	beq.n	8012bf0 <pifLog_CmdSetStatus+0xbc>
 8012bd4:	2b54      	cmp	r3, #84	; 0x54
 8012bd6:	dc0e      	bgt.n	8012bf6 <pifLog_CmdSetStatus+0xc2>
 8012bd8:	2b46      	cmp	r3, #70	; 0x46
 8012bda:	d006      	beq.n	8012bea <pifLog_CmdSetStatus+0xb6>
 8012bdc:	2b46      	cmp	r3, #70	; 0x46
 8012bde:	dc0a      	bgt.n	8012bf6 <pifLog_CmdSetStatus+0xc2>
 8012be0:	2b30      	cmp	r3, #48	; 0x30
 8012be2:	d002      	beq.n	8012bea <pifLog_CmdSetStatus+0xb6>
 8012be4:	2b31      	cmp	r3, #49	; 0x31
 8012be6:	d003      	beq.n	8012bf0 <pifLog_CmdSetStatus+0xbc>
 8012be8:	e005      	b.n	8012bf6 <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012bea:	2300      	movs	r3, #0
 8012bec:	73fb      	strb	r3, [r7, #15]
			break;
 8012bee:	e005      	b.n	8012bfc <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	73fb      	strb	r3, [r7, #15]
			break;
 8012bf4:	e002      	b.n	8012bfc <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012bf6:	f06f 0303 	mvn.w	r3, #3
 8012bfa:	e038      	b.n	8012c6e <pifLog_CmdSetStatus+0x13a>
		}
		i = 0;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012c00:	e02a      	b.n	8012c58 <pifLog_CmdSetStatus+0x124>
			if (!strcasecmp(argv[1], c_log_flags[i].p_command)) {
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	3304      	adds	r3, #4
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	4920      	ldr	r1, [pc, #128]	; (8012c8c <pifLog_CmdSetStatus+0x158>)
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	440b      	add	r3, r1
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	4619      	mov	r1, r3
 8012c14:	4610      	mov	r0, r2
 8012c16:	f010 fcf5 	bl	8023604 <strcasecmp>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d118      	bne.n	8012c52 <pifLog_CmdSetStatus+0x11e>
				if (value) {
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d009      	beq.n	8012c3a <pifLog_CmdSetStatus+0x106>
					pif_log_flag.all |= 1L << i;
 8012c26:	4b1a      	ldr	r3, [pc, #104]	; (8012c90 <pifLog_CmdSetStatus+0x15c>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	68ba      	ldr	r2, [r7, #8]
 8012c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8012c32:	4313      	orrs	r3, r2
 8012c34:	4a16      	ldr	r2, [pc, #88]	; (8012c90 <pifLog_CmdSetStatus+0x15c>)
 8012c36:	6013      	str	r3, [r2, #0]
 8012c38:	e009      	b.n	8012c4e <pifLog_CmdSetStatus+0x11a>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012c3a:	4b15      	ldr	r3, [pc, #84]	; (8012c90 <pifLog_CmdSetStatus+0x15c>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2101      	movs	r1, #1
 8012c40:	68ba      	ldr	r2, [r7, #8]
 8012c42:	fa01 f202 	lsl.w	r2, r1, r2
 8012c46:	43d2      	mvns	r2, r2
 8012c48:	4013      	ands	r3, r2
 8012c4a:	4a11      	ldr	r2, [pc, #68]	; (8012c90 <pifLog_CmdSetStatus+0x15c>)
 8012c4c:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e00d      	b.n	8012c6e <pifLog_CmdSetStatus+0x13a>
			}
			i++;
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	3301      	adds	r3, #1
 8012c56:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012c58:	4a0c      	ldr	r2, [pc, #48]	; (8012c8c <pifLog_CmdSetStatus+0x158>)
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d1ce      	bne.n	8012c02 <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012c64:	f06f 0303 	mvn.w	r3, #3
 8012c68:	e001      	b.n	8012c6e <pifLog_CmdSetStatus+0x13a>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012c6a:	f06f 0302 	mvn.w	r3, #2
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	20001dd4 	.word	0x20001dd4
 8012c7c:	08027b50 	.word	0x08027b50
 8012c80:	20001db8 	.word	0x20001db8
 8012c84:	08027b60 	.word	0x08027b60
 8012c88:	08027b6c 	.word	0x08027b6c
 8012c8c:	08029570 	.word	0x08029570
 8012c90:	20001de0 	.word	0x20001de0
 8012c94:	08027b74 	.word	0x08027b74

08012c98 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b088      	sub	sp, #32
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	77bb      	strb	r3, [r7, #30]
    uint8_t enter;
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012ca6:	e1e2      	b.n	801306e <_getDebugString+0x3d6>
		if (tmp_char >= 32 && tmp_char <= 126) {
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	2b1f      	cmp	r3, #31
 8012cac:	d934      	bls.n	8012d18 <_getDebugString+0x80>
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	2b7e      	cmp	r3, #126	; 0x7e
 8012cb2:	d831      	bhi.n	8012d18 <_getDebugString+0x80>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d103      	bne.n	8012cc6 <_getDebugString+0x2e>
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
 8012cc0:	2b20      	cmp	r3, #32
 8012cc2:	d100      	bne.n	8012cc6 <_getDebugString+0x2e>
 8012cc4:	e1d3      	b.n	801306e <_getDebugString+0x3d6>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ccc:	461a      	mov	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cd4:	3b03      	subs	r3, #3
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	f280 815d 	bge.w	8012f96 <_getDebugString+0x2fe>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce0:	7bfa      	ldrb	r2, [r7, #15]
 8012ce2:	4611      	mov	r1, r2
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f000 ffa9 	bl	8013c3c <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6a1b      	ldr	r3, [r3, #32]
 8012cee:	69db      	ldr	r3, [r3, #28]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f001 fc89 	bl	8014608 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d00:	4413      	add	r3, r2
 8012d02:	7bfa      	ldrb	r2, [r7, #15]
 8012d04:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	b2da      	uxtb	r2, r3
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012d16:	e13e      	b.n	8012f96 <_getDebugString+0x2fe>
            }
		}
		else {
			switch (tmp_char) {
 8012d18:	7bfb      	ldrb	r3, [r7, #15]
 8012d1a:	2b0d      	cmp	r3, #13
 8012d1c:	dc16      	bgt.n	8012d4c <_getDebugString+0xb4>
 8012d1e:	2b08      	cmp	r3, #8
 8012d20:	f2c0 812c 	blt.w	8012f7c <_getDebugString+0x2e4>
 8012d24:	3b08      	subs	r3, #8
 8012d26:	2b05      	cmp	r3, #5
 8012d28:	f200 8128 	bhi.w	8012f7c <_getDebugString+0x2e4>
 8012d2c:	a201      	add	r2, pc, #4	; (adr r2, 8012d34 <_getDebugString+0x9c>)
 8012d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d32:	bf00      	nop
 8012d34:	08012d53 	.word	0x08012d53
 8012d38:	08012d99 	.word	0x08012d99
 8012d3c:	08012f47 	.word	0x08012f47
 8012d40:	08012f7d 	.word	0x08012f7d
 8012d44:	08012f53 	.word	0x08012f53
 8012d48:	08012f4d 	.word	0x08012f4d
 8012d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8012d4e:	f040 8115 	bne.w	8012f7c <_getDebugString+0x2e4>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	f000 8119 	beq.w	8012f90 <_getDebugString+0x2f8>
					p_owner->char_idx--;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d64:	3b01      	subs	r3, #1
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d78:	4413      	add	r3, r2
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d82:	499c      	ldr	r1, [pc, #624]	; (8012ff4 <_getDebugString+0x35c>)
 8012d84:	4618      	mov	r0, r3
 8012d86:	f000 ffd7 	bl	8013d38 <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6a1b      	ldr	r3, [r3, #32]
 8012d8e:	69db      	ldr	r3, [r3, #28]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f001 fc39 	bl	8014608 <pifTask_SetTrigger>
				}
				break;
 8012d96:	e0fb      	b.n	8012f90 <_getDebugString+0x2f8>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012da6:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dac:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012dae:	e01b      	b.n	8012de8 <_getDebugString+0x150>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00c      	beq.n	8012dd4 <_getDebugString+0x13c>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	6819      	ldr	r1, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dc8:	461a      	mov	r2, r3
 8012dca:	f010 fc59 	bl	8023680 <strncasecmp>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d106      	bne.n	8012de2 <_getDebugString+0x14a>
						if (!pstart)
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d101      	bne.n	8012dde <_getDebugString+0x146>
							pstart = cmd;
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8012dde:	69bb      	ldr	r3, [r7, #24]
 8012de0:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	3310      	adds	r3, #16
 8012de6:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1df      	bne.n	8012db0 <_getDebugString+0x118>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d05b      	beq.n	8012eae <_getDebugString+0x216>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	687a      	ldr	r2, [r7, #4]
 8012dfc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e00:	4413      	add	r3, r2
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d04f      	beq.n	8012ea8 <_getDebugString+0x210>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e12:	4413      	add	r3, r2
 8012e14:	781a      	ldrb	r2, [r3, #0]
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	6879      	ldr	r1, [r7, #4]
 8012e1c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012e20:	440b      	add	r3, r1
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d141      	bne.n	8012eac <_getDebugString+0x214>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e32:	4413      	add	r3, r2
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d11f      	bne.n	8012e7a <_getDebugString+0x1e2>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e40:	461a      	mov	r2, r3
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e48:	3b02      	subs	r3, #2
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	da15      	bge.n	8012e7a <_getDebugString+0x1e2>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e58:	1c59      	adds	r1, r3, #1
 8012e5a:	b2c8      	uxtb	r0, r1
 8012e5c:	6879      	ldr	r1, [r7, #4]
 8012e5e:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8012e62:	4413      	add	r3, r2
 8012e64:	2220      	movs	r2, #32
 8012e66:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e72:	4413      	add	r3, r2
 8012e74:	2200      	movs	r2, #0
 8012e76:	701a      	strb	r2, [r3, #0]
	                        break;
 8012e78:	e019      	b.n	8012eae <_getDebugString+0x216>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e84:	441a      	add	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8a:	6879      	ldr	r1, [r7, #4]
 8012e8c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012e90:	440b      	add	r3, r1
 8012e92:	7812      	ldrb	r2, [r2, #0]
 8012e94:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012ea6:	e7a6      	b.n	8012df6 <_getDebugString+0x15e>
 8012ea8:	bf00      	nop
 8012eaa:	e000      	b.n	8012eae <_getDebugString+0x216>
	                        break;
 8012eac:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d003      	beq.n	8012ec0 <_getDebugString+0x228>
 8012eb8:	697a      	ldr	r2, [r7, #20]
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d035      	beq.n	8012f2c <_getDebugString+0x294>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec4:	494c      	ldr	r1, [pc, #304]	; (8012ff8 <_getDebugString+0x360>)
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 ff36 	bl	8013d38 <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	61bb      	str	r3, [r7, #24]
 8012ed0:	e010      	b.n	8012ef4 <_getDebugString+0x25c>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4619      	mov	r1, r3
 8012edc:	4610      	mov	r0, r2
 8012ede:	f000 ff2b 	bl	8013d38 <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee6:	2109      	movs	r1, #9
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f000 fea7 	bl	8013c3c <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	3310      	adds	r3, #16
 8012ef2:	61bb      	str	r3, [r7, #24]
 8012ef4:	69ba      	ldr	r2, [r7, #24]
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d9ea      	bls.n	8012ed2 <_getDebugString+0x23a>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	4a3e      	ldr	r2, [pc, #248]	; (8012ffc <_getDebugString+0x364>)
 8012f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012f04:	4611      	mov	r1, r2
 8012f06:	4618      	mov	r0, r3
 8012f08:	f000 ff16 	bl	8013d38 <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8012f10:	e00c      	b.n	8012f2c <_getDebugString+0x294>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f1a:	7ffb      	ldrb	r3, [r7, #31]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	4619      	mov	r1, r3
 8012f22:	f000 fe8b 	bl	8013c3c <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 8012f26:	7ffb      	ldrb	r3, [r7, #31]
 8012f28:	3301      	adds	r3, #1
 8012f2a:	77fb      	strb	r3, [r7, #31]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f32:	7ffa      	ldrb	r2, [r7, #31]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d3ec      	bcc.n	8012f12 <_getDebugString+0x27a>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6a1b      	ldr	r3, [r3, #32]
 8012f3c:	69db      	ldr	r3, [r3, #28]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f001 fb62 	bl	8014608 <pifTask_SetTrigger>
				break;
 8012f44:	e027      	b.n	8012f96 <_getDebugString+0x2fe>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 8012f46:	2301      	movs	r3, #1
 8012f48:	777b      	strb	r3, [r7, #29]
				break;
 8012f4a:	e024      	b.n	8012f96 <_getDebugString+0x2fe>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 8012f4c:	2302      	movs	r3, #2
 8012f4e:	777b      	strb	r3, [r7, #29]
				break;
 8012f50:	e021      	b.n	8012f96 <_getDebugString+0x2fe>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f56:	492a      	ldr	r1, [pc, #168]	; (8013000 <_getDebugString+0x368>)
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f000 feed 	bl	8013d38 <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f62:	4a26      	ldr	r2, [pc, #152]	; (8012ffc <_getDebugString+0x364>)
 8012f64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012f66:	4611      	mov	r1, r2
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 fee5 	bl	8013d38 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a1b      	ldr	r3, [r3, #32]
 8012f72:	69db      	ldr	r3, [r3, #28]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f001 fb47 	bl	8014608 <pifTask_SetTrigger>
				break;
 8012f7a:	e00c      	b.n	8012f96 <_getDebugString+0x2fe>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d007      	beq.n	8012f94 <_getDebugString+0x2fc>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f88:	7bfa      	ldrb	r2, [r7, #15]
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	4798      	blx	r3
            	break;
 8012f8e:	e001      	b.n	8012f94 <_getDebugString+0x2fc>
				break;
 8012f90:	bf00      	nop
 8012f92:	e000      	b.n	8012f96 <_getDebugString+0x2fe>
            	break;
 8012f94:	bf00      	nop
			}
        }

		if (enter) {
 8012f96:	7f7b      	ldrb	r3, [r7, #29]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d026      	beq.n	8012fea <_getDebugString+0x352>
			if (p_owner->char_idx) {
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d005      	beq.n	8012fb2 <_getDebugString+0x31a>
				str_get_done_flag = TRUE;
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 8012faa:	4a16      	ldr	r2, [pc, #88]	; (8013004 <_getDebugString+0x36c>)
 8012fac:	7f7b      	ldrb	r3, [r7, #29]
 8012fae:	7013      	strb	r3, [r2, #0]
 8012fb0:	e019      	b.n	8012fe6 <_getDebugString+0x34e>
			}
			else if (!pre_enter || enter == pre_enter) {
 8012fb2:	4b14      	ldr	r3, [pc, #80]	; (8013004 <_getDebugString+0x36c>)
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d004      	beq.n	8012fc4 <_getDebugString+0x32c>
 8012fba:	4b12      	ldr	r3, [pc, #72]	; (8013004 <_getDebugString+0x36c>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	7f7a      	ldrb	r2, [r7, #29]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d110      	bne.n	8012fe6 <_getDebugString+0x34e>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc8:	4a0c      	ldr	r2, [pc, #48]	; (8012ffc <_getDebugString+0x364>)
 8012fca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f000 feb2 	bl	8013d38 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a1b      	ldr	r3, [r3, #32]
 8012fd8:	69db      	ldr	r3, [r3, #28]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f001 fb14 	bl	8014608 <pifTask_SetTrigger>
				pre_enter = enter;
 8012fe0:	4a08      	ldr	r2, [pc, #32]	; (8013004 <_getDebugString+0x36c>)
 8012fe2:	7f7b      	ldrb	r3, [r7, #29]
 8012fe4:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 8012fea:	7fbb      	ldrb	r3, [r7, #30]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d13e      	bne.n	801306e <_getDebugString+0x3d6>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012ff0:	e012      	b.n	8013018 <_getDebugString+0x380>
 8012ff2:	bf00      	nop
 8012ff4:	08027b84 	.word	0x08027b84
 8012ff8:	08027b88 	.word	0x08027b88
 8012ffc:	20001de4 	.word	0x20001de4
 8013000:	08027b90 	.word	0x08027b90
 8013004:	20001e48 	.word	0x20001e48
            	p_owner->char_idx--;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801300e:	3b01      	subs	r3, #1
 8013010:	b2da      	uxtb	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801301e:	2b00      	cmp	r3, #0
 8013020:	d009      	beq.n	8013036 <_getDebugString+0x39e>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801302c:	3b01      	subs	r3, #1
 801302e:	4413      	add	r3, r2
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	2b20      	cmp	r3, #32
 8013034:	d0e8      	beq.n	8013008 <_getDebugString+0x370>
            }
            if (p_owner->char_idx) {
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801303c:	2b00      	cmp	r3, #0
 801303e:	d014      	beq.n	801306a <_getDebugString+0x3d2>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801304a:	4413      	add	r3, r2
 801304c:	2200      	movs	r2, #0
 801304e:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013054:	210a      	movs	r1, #10
 8013056:	4618      	mov	r0, r3
 8013058:	f000 fdf0 	bl	8013c3c <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6a1b      	ldr	r3, [r3, #32]
 8013060:	69db      	ldr	r3, [r3, #28]
 8013062:	4618      	mov	r0, r3
 8013064:	f001 fad0 	bl	8014608 <pifTask_SetTrigger>
	        	break;
 8013068:	e00c      	b.n	8013084 <_getDebugString+0x3ec>
            }
            else {
            	str_get_done_flag = FALSE;
 801306a:	2300      	movs	r3, #0
 801306c:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6a1a      	ldr	r2, [r3, #32]
 8013072:	f107 010f 	add.w	r1, r7, #15
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	4610      	mov	r0, r2
 801307a:	4798      	blx	r3
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	f47f ae12 	bne.w	8012ca8 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8013084:	7fbb      	ldrb	r3, [r7, #30]
}
 8013086:	4618      	mov	r0, r3
 8013088:	3720      	adds	r7, #32
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop

08013090 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8013098:	2301      	movs	r3, #1
 801309a:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 801309c:	2300      	movs	r3, #0
 801309e:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a4:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 80130a6:	e022      	b.n	80130ee <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2b20      	cmp	r3, #32
 80130ae:	d105      	bne.n	80130bc <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	2200      	movs	r2, #0
 80130b4:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 80130b6:	2301      	movs	r3, #1
 80130b8:	74fb      	strb	r3, [r7, #19]
 80130ba:	e015      	b.n	80130e8 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 80130bc:	7cfb      	ldrb	r3, [r7, #19]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d012      	beq.n	80130e8 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2b07      	cmp	r3, #7
 80130c6:	d80c      	bhi.n	80130e2 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	330c      	adds	r3, #12
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	4413      	add	r3, r2
 80130d2:	697a      	ldr	r2, [r7, #20]
 80130d4:	605a      	str	r2, [r3, #4]
                	argc++;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	3301      	adds	r3, #1
 80130da:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 80130dc:	2300      	movs	r3, #0
 80130de:	74fb      	strb	r3, [r7, #19]
 80130e0:	e002      	b.n	80130e8 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 80130e2:	f06f 0301 	mvn.w	r3, #1
 80130e6:	e02c      	b.n	8013142 <_processDebugCmd+0xb2>
                }
            }
        }

        p_tmp_cmd++;
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	3301      	adds	r3, #1
 80130ec:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d1d8      	bne.n	80130a8 <_processDebugCmd+0x18>
    }

    if (argc) {
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d021      	beq.n	8013140 <_processDebugCmd+0xb0>
		p_cmd_entry = p_owner->p_cmd_table;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013100:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8013102:	e016      	b.n	8013132 <_processDebugCmd+0xa2>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4619      	mov	r1, r3
 801310e:	4610      	mov	r0, r2
 8013110:	f010 fa78 	bl	8023604 <strcasecmp>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d108      	bne.n	801312c <_processDebugCmd+0x9c>
				return p_cmd_entry->processor(argc, p_owner->p_argv);
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	68f8      	ldr	r0, [r7, #12]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	3234      	adds	r2, #52	; 0x34
 8013124:	4611      	mov	r1, r2
 8013126:	4798      	blx	r3
 8013128:	4603      	mov	r3, r0
 801312a:	e00a      	b.n	8013142 <_processDebugCmd+0xb2>
            }

			p_cmd_entry++;
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	3310      	adds	r3, #16
 8013130:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d1e4      	bne.n	8013104 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 801313a:	f04f 33ff 	mov.w	r3, #4294967295
 801313e:	e000      	b.n	8013142 <_processDebugCmd+0xb2>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3718      	adds	r7, #24
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b084      	sub	sp, #16
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10f      	bne.n	8013182 <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	68f8      	ldr	r0, [r7, #12]
 8013166:	f7ff fd97 	bl	8012c98 <_getDebugString>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d008      	beq.n	8013182 <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2201      	movs	r2, #1
 8013174:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801317c:	4618      	mov	r0, r3
 801317e:	f001 fa43 	bl	8014608 <pifTask_SetTrigger>
        }
    }
}
 8013182:	bf00      	nop
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
	...

0801318c <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b08e      	sub	sp, #56	; 0x38
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 8013194:	2300      	movs	r3, #0
 8013196:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 8013198:	4848      	ldr	r0, [pc, #288]	; (80132bc <_doTask+0x130>)
 801319a:	f7ff ff79 	bl	8013090 <_processDebugCmd>
 801319e:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 80131a0:	e00f      	b.n	80131c2 <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 80131a2:	4b46      	ldr	r3, [pc, #280]	; (80132bc <_doTask+0x130>)
 80131a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131a6:	4a45      	ldr	r2, [pc, #276]	; (80132bc <_doTask+0x130>)
 80131a8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80131ac:	4413      	add	r3, r2
 80131ae:	2200      	movs	r2, #0
 80131b0:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 80131b2:	4b42      	ldr	r3, [pc, #264]	; (80132bc <_doTask+0x130>)
 80131b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131b8:	3b01      	subs	r3, #1
 80131ba:	b2da      	uxtb	r2, r3
 80131bc:	4b3f      	ldr	r3, [pc, #252]	; (80132bc <_doTask+0x130>)
 80131be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 80131c2:	4b3e      	ldr	r3, [pc, #248]	; (80132bc <_doTask+0x130>)
 80131c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d1ea      	bne.n	80131a2 <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 80131cc:	2300      	movs	r3, #0
 80131ce:	637b      	str	r3, [r7, #52]	; 0x34
 80131d0:	e009      	b.n	80131e6 <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 80131d2:	4a3a      	ldr	r2, [pc, #232]	; (80132bc <_doTask+0x130>)
 80131d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d6:	330c      	adds	r3, #12
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	4413      	add	r3, r2
 80131dc:	2200      	movs	r2, #0
 80131de:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 80131e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e2:	3301      	adds	r3, #1
 80131e4:	637b      	str	r3, [r7, #52]	; 0x34
 80131e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e8:	2b07      	cmp	r3, #7
 80131ea:	ddf2      	ble.n	80131d2 <_doTask+0x46>
	}

	switch (status) {
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131f2:	d00b      	beq.n	801320c <_doTask+0x80>
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	da2f      	bge.n	801325a <_doTask+0xce>
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	f113 0f03 	cmn.w	r3, #3
 8013200:	d01e      	beq.n	8013240 <_doTask+0xb4>
 8013202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013204:	f113 0f02 	cmn.w	r3, #2
 8013208:	d00d      	beq.n	8013226 <_doTask+0x9a>
 801320a:	e026      	b.n	801325a <_doTask+0xce>
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 801320c:	4b2b      	ldr	r3, [pc, #172]	; (80132bc <_doTask+0x130>)
 801320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013210:	492b      	ldr	r1, [pc, #172]	; (80132c0 <_doTask+0x134>)
 8013212:	4618      	mov	r0, r3
 8013214:	f000 fd90 	bl	8013d38 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013218:	4b28      	ldr	r3, [pc, #160]	; (80132bc <_doTask+0x130>)
 801321a:	6a1b      	ldr	r3, [r3, #32]
 801321c:	69db      	ldr	r3, [r3, #28]
 801321e:	4618      	mov	r0, r3
 8013220:	f001 f9f2 	bl	8014608 <pifTask_SetTrigger>
		break;
 8013224:	e032      	b.n	801328c <_doTask+0x100>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n");
 8013226:	4b25      	ldr	r3, [pc, #148]	; (80132bc <_doTask+0x130>)
 8013228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322a:	4926      	ldr	r1, [pc, #152]	; (80132c4 <_doTask+0x138>)
 801322c:	4618      	mov	r0, r3
 801322e:	f000 fd83 	bl	8013d38 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013232:	4b22      	ldr	r3, [pc, #136]	; (80132bc <_doTask+0x130>)
 8013234:	6a1b      	ldr	r3, [r3, #32]
 8013236:	69db      	ldr	r3, [r3, #28]
 8013238:	4618      	mov	r0, r3
 801323a:	f001 f9e5 	bl	8014608 <pifTask_SetTrigger>
		break;
 801323e:	e025      	b.n	801328c <_doTask+0x100>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n");
 8013240:	4b1e      	ldr	r3, [pc, #120]	; (80132bc <_doTask+0x130>)
 8013242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013244:	4920      	ldr	r1, [pc, #128]	; (80132c8 <_doTask+0x13c>)
 8013246:	4618      	mov	r0, r3
 8013248:	f000 fd76 	bl	8013d38 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 801324c:	4b1b      	ldr	r3, [pc, #108]	; (80132bc <_doTask+0x130>)
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	69db      	ldr	r3, [r3, #28]
 8013252:	4618      	mov	r0, r3
 8013254:	f001 f9d8 	bl	8014608 <pifTask_SetTrigger>
		break;
 8013258:	e018      	b.n	801328c <_doTask+0x100>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status != PIF_LOG_CMD_NO_ERROR) {
 801325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325c:	2b00      	cmp	r3, #0
 801325e:	d014      	beq.n	801328a <_doTask+0xfe>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 8013260:	f107 0308 	add.w	r3, r7, #8
 8013264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013266:	4919      	ldr	r1, [pc, #100]	; (80132cc <_doTask+0x140>)
 8013268:	4618      	mov	r0, r3
 801326a:	f7fe fd29 	bl	8011cc0 <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 801326e:	4b13      	ldr	r3, [pc, #76]	; (80132bc <_doTask+0x130>)
 8013270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013272:	f107 0208 	add.w	r2, r7, #8
 8013276:	4611      	mov	r1, r2
 8013278:	4618      	mov	r0, r3
 801327a:	f000 fd5d 	bl	8013d38 <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 801327e:	4b0f      	ldr	r3, [pc, #60]	; (80132bc <_doTask+0x130>)
 8013280:	6a1b      	ldr	r3, [r3, #32]
 8013282:	69db      	ldr	r3, [r3, #28]
 8013284:	4618      	mov	r0, r3
 8013286:	f001 f9bf 	bl	8014608 <pifTask_SetTrigger>
		}
		break;
 801328a:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 801328c:	4b0b      	ldr	r3, [pc, #44]	; (80132bc <_doTask+0x130>)
 801328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013290:	4a0a      	ldr	r2, [pc, #40]	; (80132bc <_doTask+0x130>)
 8013292:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013294:	4611      	mov	r1, r2
 8013296:	4618      	mov	r0, r3
 8013298:	f000 fd4e 	bl	8013d38 <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 801329c:	4b07      	ldr	r3, [pc, #28]	; (80132bc <_doTask+0x130>)
 801329e:	6a1b      	ldr	r3, [r3, #32]
 80132a0:	69db      	ldr	r3, [r3, #28]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f001 f9b0 	bl	8014608 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 80132a8:	4b04      	ldr	r3, [pc, #16]	; (80132bc <_doTask+0x130>)
 80132aa:	2200      	movs	r2, #0
 80132ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3738      	adds	r7, #56	; 0x38
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20001de4 	.word	0x20001de4
 80132c0:	08027b9c 	.word	0x08027b9c
 80132c4:	08027bb4 	.word	0x08027bb4
 80132c8:	08027bd8 	.word	0x08027bd8
 80132cc:	08027bf8 	.word	0x08027bf8

080132d0 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80132d0:	b5b0      	push	{r4, r5, r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 fbd5 	bl	8013a92 <pifRingBuffer_IsEmpty>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d11f      	bne.n	801332e <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	6a1c      	ldr	r4, [r3, #32]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f6:	2100      	movs	r1, #0
 80132f8:	4618      	mov	r0, r3
 80132fa:	f000 fb9e 	bl	8013a3a <pifRingBuffer_GetTailPointer>
 80132fe:	4605      	mov	r5, r0
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013304:	2100      	movs	r1, #0
 8013306:	4618      	mov	r0, r3
 8013308:	f000 fbf8 	bl	8013afc <pifRingBuffer_GetLinerSize>
 801330c:	4603      	mov	r3, r0
 801330e:	461a      	mov	r2, r3
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	4629      	mov	r1, r5
 8013314:	4620      	mov	r0, r4
 8013316:	4798      	blx	r3
 8013318:	4603      	mov	r3, r0
 801331a:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013320:	897a      	ldrh	r2, [r7, #10]
 8013322:	4611      	mov	r1, r2
 8013324:	4618      	mov	r0, r3
 8013326:	f000 fdc6 	bl	8013eb6 <pifRingBuffer_Remove>
		return TRUE;
 801332a:	2301      	movs	r3, #1
 801332c:	e000      	b.n	8013330 <_evtSending+0x60>
	}
	return FALSE;
 801332e:	2300      	movs	r3, #0
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bdb0      	pop	{r4, r5, r7, pc}

08013338 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 8013344:	78fb      	ldrb	r3, [r7, #3]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d109      	bne.n	801335e <_printLog+0x26>
 801334a:	4813      	ldr	r0, [pc, #76]	; (8013398 <_printLog+0x60>)
 801334c:	f000 fb90 	bl	8013a70 <pifRingBuffer_IsBuffer>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d003      	beq.n	801335e <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 8013356:	6879      	ldr	r1, [r7, #4]
 8013358:	480f      	ldr	r0, [pc, #60]	; (8013398 <_printLog+0x60>)
 801335a:	f000 fced 	bl	8013d38 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 801335e:	4b0f      	ldr	r3, [pc, #60]	; (801339c <_printLog+0x64>)
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d108      	bne.n	8013378 <_printLog+0x40>
 8013366:	78fb      	ldrb	r3, [r7, #3]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d010      	beq.n	801338e <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 801336c:	e004      	b.n	8013378 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 801336e:	f001 fb8b 	bl	8014a88 <pifTaskManager_Yield>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d009      	beq.n	801338c <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013378:	4b08      	ldr	r3, [pc, #32]	; (801339c <_printLog+0x64>)
 801337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337c:	6879      	ldr	r1, [r7, #4]
 801337e:	4618      	mov	r0, r3
 8013380:	f000 fcda 	bl	8013d38 <pifRingBuffer_PutString>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d0f1      	beq.n	801336e <_printLog+0x36>
        }
	}
}
 801338a:	e000      	b.n	801338e <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 801338c:	bf00      	nop
}
 801338e:	bf00      	nop
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	20001de8 	.word	0x20001de8
 801339c:	20001de4 	.word	0x20001de4

080133a0 <_printTime>:

static void _printTime()
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
	int offset = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	1c5a      	adds	r2, r3, #1
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	4a35      	ldr	r2, [pc, #212]	; (8013488 <_printTime+0xe8>)
 80133b2:	210a      	movs	r1, #10
 80133b4:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	4a33      	ldr	r2, [pc, #204]	; (8013488 <_printTime+0xe8>)
 80133ba:	4413      	add	r3, r2
 80133bc:	4a33      	ldr	r2, [pc, #204]	; (801348c <_printTime+0xec>)
 80133be:	7952      	ldrb	r2, [r2, #5]
 80133c0:	b2d2      	uxtb	r2, r2
 80133c2:	4611      	mov	r1, r2
 80133c4:	2202      	movs	r2, #2
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fe f894 	bl	80114f4 <pif_DecToString>
 80133cc:	4602      	mov	r2, r0
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	4413      	add	r3, r2
 80133d2:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	607a      	str	r2, [r7, #4]
 80133da:	4a2b      	ldr	r2, [pc, #172]	; (8013488 <_printTime+0xe8>)
 80133dc:	212e      	movs	r1, #46	; 0x2e
 80133de:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4a29      	ldr	r2, [pc, #164]	; (8013488 <_printTime+0xe8>)
 80133e4:	4413      	add	r3, r2
 80133e6:	4a2a      	ldr	r2, [pc, #168]	; (8013490 <_printTime+0xf0>)
 80133e8:	8812      	ldrh	r2, [r2, #0]
 80133ea:	b292      	uxth	r2, r2
 80133ec:	4611      	mov	r1, r2
 80133ee:	2203      	movs	r2, #3
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fe f87f 	bl	80114f4 <pif_DecToString>
 80133f6:	4602      	mov	r2, r0
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4413      	add	r3, r2
 80133fc:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	1c5a      	adds	r2, r3, #1
 8013402:	607a      	str	r2, [r7, #4]
 8013404:	4a20      	ldr	r2, [pc, #128]	; (8013488 <_printTime+0xe8>)
 8013406:	2120      	movs	r1, #32
 8013408:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	1c5a      	adds	r2, r3, #1
 801340e:	607a      	str	r2, [r7, #4]
 8013410:	4a1d      	ldr	r2, [pc, #116]	; (8013488 <_printTime+0xe8>)
 8013412:	2154      	movs	r1, #84	; 0x54
 8013414:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	1c5a      	adds	r2, r3, #1
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	4a1a      	ldr	r2, [pc, #104]	; (8013488 <_printTime+0xe8>)
 801341e:	2120      	movs	r1, #32
 8013420:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4a18      	ldr	r2, [pc, #96]	; (8013488 <_printTime+0xe8>)
 8013426:	4413      	add	r3, r2
 8013428:	4a18      	ldr	r2, [pc, #96]	; (801348c <_printTime+0xec>)
 801342a:	78d2      	ldrb	r2, [r2, #3]
 801342c:	b2d2      	uxtb	r2, r2
 801342e:	4611      	mov	r1, r2
 8013430:	2202      	movs	r2, #2
 8013432:	4618      	mov	r0, r3
 8013434:	f7fe f85e 	bl	80114f4 <pif_DecToString>
 8013438:	4602      	mov	r2, r0
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4413      	add	r3, r2
 801343e:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	1c5a      	adds	r2, r3, #1
 8013444:	607a      	str	r2, [r7, #4]
 8013446:	4a10      	ldr	r2, [pc, #64]	; (8013488 <_printTime+0xe8>)
 8013448:	213a      	movs	r1, #58	; 0x3a
 801344a:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	4a0e      	ldr	r2, [pc, #56]	; (8013488 <_printTime+0xe8>)
 8013450:	4413      	add	r3, r2
 8013452:	4a0e      	ldr	r2, [pc, #56]	; (801348c <_printTime+0xec>)
 8013454:	7912      	ldrb	r2, [r2, #4]
 8013456:	b2d2      	uxtb	r2, r2
 8013458:	4611      	mov	r1, r2
 801345a:	2202      	movs	r2, #2
 801345c:	4618      	mov	r0, r3
 801345e:	f7fe f849 	bl	80114f4 <pif_DecToString>
 8013462:	4602      	mov	r2, r0
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	4413      	add	r3, r2
 8013468:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	1c5a      	adds	r2, r3, #1
 801346e:	607a      	str	r2, [r7, #4]
 8013470:	4a05      	ldr	r2, [pc, #20]	; (8013488 <_printTime+0xe8>)
 8013472:	2120      	movs	r1, #32
 8013474:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 8013476:	2100      	movs	r1, #0
 8013478:	4803      	ldr	r0, [pc, #12]	; (8013488 <_printTime+0xe8>)
 801347a:	f7ff ff5d 	bl	8013338 <_printLog>
}
 801347e:	bf00      	nop
 8013480:	3708      	adds	r7, #8
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	20001e4c 	.word	0x20001e4c
 801348c:	20001dc8 	.word	0x20001dc8
 8013490:	20001dc0 	.word	0x20001dc0

08013494 <pifLog_Init>:

BOOL pifLog_Init()
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 801349a:	2264      	movs	r2, #100	; 0x64
 801349c:	2100      	movs	r1, #0
 801349e:	480f      	ldr	r0, [pc, #60]	; (80134dc <pifLog_Init+0x48>)
 80134a0:	f00f ffa2 	bl	80233e8 <memset>

	s_log.enable = TRUE;
 80134a4:	4b0d      	ldr	r3, [pc, #52]	; (80134dc <pifLog_Init+0x48>)
 80134a6:	2201      	movs	r2, #1
 80134a8:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 80134aa:	2300      	movs	r3, #0
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	4b0b      	ldr	r3, [pc, #44]	; (80134dc <pifLog_Init+0x48>)
 80134b0:	4a0b      	ldr	r2, [pc, #44]	; (80134e0 <pifLog_Init+0x4c>)
 80134b2:	2100      	movs	r1, #0
 80134b4:	2007      	movs	r0, #7
 80134b6:	f001 f92d 	bl	8014714 <pifTaskManager_Add>
 80134ba:	4603      	mov	r3, r0
 80134bc:	4a07      	ldr	r2, [pc, #28]	; (80134dc <pifLog_Init+0x48>)
 80134be:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 80134c0:	4b06      	ldr	r3, [pc, #24]	; (80134dc <pifLog_Init+0x48>)
 80134c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d101      	bne.n	80134cc <pifLog_Init+0x38>
 80134c8:	2300      	movs	r3, #0
 80134ca:	e004      	b.n	80134d6 <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 80134cc:	4b03      	ldr	r3, [pc, #12]	; (80134dc <pifLog_Init+0x48>)
 80134ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134d0:	4a04      	ldr	r2, [pc, #16]	; (80134e4 <pifLog_Init+0x50>)
 80134d2:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 80134d4:	2301      	movs	r3, #1
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20001de4 	.word	0x20001de4
 80134e0:	0801318d 	.word	0x0801318d
 80134e4:	08027c1c 	.word	0x08027c1c

080134e8 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <pifLog_UseCommand+0x16>
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d104      	bne.n	8013508 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 80134fe:	4b12      	ldr	r3, [pc, #72]	; (8013548 <pifLog_UseCommand+0x60>)
 8013500:	2201      	movs	r2, #1
 8013502:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013504:	2300      	movs	r3, #0
 8013506:	e01b      	b.n	8013540 <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013508:	2120      	movs	r1, #32
 801350a:	2001      	movs	r0, #1
 801350c:	f00f ff1c 	bl	8023348 <calloc>
 8013510:	4603      	mov	r3, r0
 8013512:	461a      	mov	r2, r3
 8013514:	4b0d      	ldr	r3, [pc, #52]	; (801354c <pifLog_UseCommand+0x64>)
 8013516:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013518:	4b0c      	ldr	r3, [pc, #48]	; (801354c <pifLog_UseCommand+0x64>)
 801351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801351c:	2b00      	cmp	r3, #0
 801351e:	d104      	bne.n	801352a <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013520:	4b09      	ldr	r3, [pc, #36]	; (8013548 <pifLog_UseCommand+0x60>)
 8013522:	2203      	movs	r2, #3
 8013524:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013526:	2300      	movs	r3, #0
 8013528:	e00a      	b.n	8013540 <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 801352a:	4b08      	ldr	r3, [pc, #32]	; (801354c <pifLog_UseCommand+0x64>)
 801352c:	2220      	movs	r2, #32
 801352e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 8013532:	4a06      	ldr	r2, [pc, #24]	; (801354c <pifLog_UseCommand+0x64>)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 8013538:	4a04      	ldr	r2, [pc, #16]	; (801354c <pifLog_UseCommand+0x64>)
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 801353e:	2301      	movs	r3, #1
}
 8013540:	4618      	mov	r0, r3
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	20001db8 	.word	0x20001db8
 801354c:	20001de4 	.word	0x20001de4

08013550 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b098      	sub	sp, #96	; 0x60
 8013554:	af00      	add	r7, sp, #0
 8013556:	4603      	mov	r3, r0
 8013558:	6039      	str	r1, [r7, #0]
 801355a:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 801355c:	2300      	movs	r3, #0
 801355e:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013560:	79fb      	ldrb	r3, [r7, #7]
 8013562:	2b01      	cmp	r3, #1
 8013564:	d96b      	bls.n	801363e <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 8013566:	4b3d      	ldr	r3, [pc, #244]	; (801365c <pifLog_Print+0x10c>)
 8013568:	791b      	ldrb	r3, [r3, #4]
 801356a:	b2da      	uxtb	r2, r3
 801356c:	4b3c      	ldr	r3, [pc, #240]	; (8013660 <pifLog_Print+0x110>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	429a      	cmp	r2, r3
 8013572:	d006      	beq.n	8013582 <pifLog_Print+0x32>
        	_printTime();
 8013574:	f7ff ff14 	bl	80133a0 <_printTime>
        	s_minute = pif_datetime.minute;
 8013578:	4b38      	ldr	r3, [pc, #224]	; (801365c <pifLog_Print+0x10c>)
 801357a:	791b      	ldrb	r3, [r3, #4]
 801357c:	b2da      	uxtb	r2, r3
 801357e:	4b38      	ldr	r3, [pc, #224]	; (8013660 <pifLog_Print+0x110>)
 8013580:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013584:	1c5a      	adds	r2, r3, #1
 8013586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013588:	3360      	adds	r3, #96	; 0x60
 801358a:	443b      	add	r3, r7
 801358c:	220a      	movs	r2, #10
 801358e:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013594:	f107 020c 	add.w	r2, r7, #12
 8013598:	4413      	add	r3, r2
 801359a:	4a30      	ldr	r2, [pc, #192]	; (801365c <pifLog_Print+0x10c>)
 801359c:	7952      	ldrb	r2, [r2, #5]
 801359e:	b2d2      	uxtb	r2, r2
 80135a0:	4611      	mov	r1, r2
 80135a2:	2202      	movs	r2, #2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fd ffa5 	bl	80114f4 <pif_DecToString>
 80135aa:	4602      	mov	r2, r0
 80135ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135ae:	4413      	add	r3, r2
 80135b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80135b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135b4:	1c5a      	adds	r2, r3, #1
 80135b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80135b8:	3360      	adds	r3, #96	; 0x60
 80135ba:	443b      	add	r3, r7
 80135bc:	222e      	movs	r2, #46	; 0x2e
 80135be:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80135c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135c4:	f107 020c 	add.w	r2, r7, #12
 80135c8:	4413      	add	r3, r2
 80135ca:	4a26      	ldr	r2, [pc, #152]	; (8013664 <pifLog_Print+0x114>)
 80135cc:	8812      	ldrh	r2, [r2, #0]
 80135ce:	b292      	uxth	r2, r2
 80135d0:	4611      	mov	r1, r2
 80135d2:	2203      	movs	r2, #3
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7fd ff8d 	bl	80114f4 <pif_DecToString>
 80135da:	4602      	mov	r2, r0
 80135dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135de:	4413      	add	r3, r2
 80135e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 80135e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135e4:	1c5a      	adds	r2, r3, #1
 80135e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80135e8:	3360      	adds	r3, #96	; 0x60
 80135ea:	443b      	add	r3, r7
 80135ec:	2220      	movs	r2, #32
 80135ee:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 80135f2:	79fb      	ldrb	r3, [r7, #7]
 80135f4:	1e9a      	subs	r2, r3, #2
 80135f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135f8:	1c59      	adds	r1, r3, #1
 80135fa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80135fc:	491a      	ldr	r1, [pc, #104]	; (8013668 <pifLog_Print+0x118>)
 80135fe:	5c8a      	ldrb	r2, [r1, r2]
 8013600:	3360      	adds	r3, #96	; 0x60
 8013602:	443b      	add	r3, r7
 8013604:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801360a:	1c5a      	adds	r2, r3, #1
 801360c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801360e:	3360      	adds	r3, #96	; 0x60
 8013610:	443b      	add	r3, r7
 8013612:	2220      	movs	r2, #32
 8013614:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013618:	f107 020c 	add.w	r2, r7, #12
 801361c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801361e:	4413      	add	r3, r2
 8013620:	2200      	movs	r2, #0
 8013622:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 8013624:	79fb      	ldrb	r3, [r7, #7]
 8013626:	2b01      	cmp	r3, #1
 8013628:	bf0c      	ite	eq
 801362a:	2301      	moveq	r3, #1
 801362c:	2300      	movne	r3, #0
 801362e:	b2db      	uxtb	r3, r3
 8013630:	461a      	mov	r2, r3
 8013632:	f107 030c 	add.w	r3, r7, #12
 8013636:	4611      	mov	r1, r2
 8013638:	4618      	mov	r0, r3
 801363a:	f7ff fe7d 	bl	8013338 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 801363e:	79fb      	ldrb	r3, [r7, #7]
 8013640:	2b01      	cmp	r3, #1
 8013642:	bf0c      	ite	eq
 8013644:	2301      	moveq	r3, #1
 8013646:	2300      	movne	r3, #0
 8013648:	b2db      	uxtb	r3, r3
 801364a:	4619      	mov	r1, r3
 801364c:	6838      	ldr	r0, [r7, #0]
 801364e:	f7ff fe73 	bl	8013338 <_printLog>
}
 8013652:	bf00      	nop
 8013654:	3760      	adds	r7, #96	; 0x60
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20001dc8 	.word	0x20001dc8
 8013660:	20000134 	.word	0x20000134
 8013664:	20001dc0 	.word	0x20001dc0
 8013668:	080295a0 	.word	0x080295a0

0801366c <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 801366c:	b40e      	push	{r1, r2, r3}
 801366e:	b580      	push	{r7, lr}
 8013670:	b09b      	sub	sp, #108	; 0x6c
 8013672:	af00      	add	r7, sp, #0
 8013674:	4603      	mov	r3, r0
 8013676:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 8013678:	2300      	movs	r3, #0
 801367a:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 801367c:	79fb      	ldrb	r3, [r7, #7]
 801367e:	2b01      	cmp	r3, #1
 8013680:	d958      	bls.n	8013734 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 8013682:	4b3d      	ldr	r3, [pc, #244]	; (8013778 <pifLog_Printf+0x10c>)
 8013684:	791b      	ldrb	r3, [r3, #4]
 8013686:	b2da      	uxtb	r2, r3
 8013688:	4b3c      	ldr	r3, [pc, #240]	; (801377c <pifLog_Printf+0x110>)
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	429a      	cmp	r2, r3
 801368e:	d006      	beq.n	801369e <pifLog_Printf+0x32>
        	_printTime();
 8013690:	f7ff fe86 	bl	80133a0 <_printTime>
        	s_minute = pif_datetime.minute;
 8013694:	4b38      	ldr	r3, [pc, #224]	; (8013778 <pifLog_Printf+0x10c>)
 8013696:	791b      	ldrb	r3, [r3, #4]
 8013698:	b2da      	uxtb	r2, r3
 801369a:	4b38      	ldr	r3, [pc, #224]	; (801377c <pifLog_Printf+0x110>)
 801369c:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 801369e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136a0:	1c5a      	adds	r2, r3, #1
 80136a2:	667a      	str	r2, [r7, #100]	; 0x64
 80136a4:	3368      	adds	r3, #104	; 0x68
 80136a6:	443b      	add	r3, r7
 80136a8:	220a      	movs	r2, #10
 80136aa:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80136ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136b0:	f107 020c 	add.w	r2, r7, #12
 80136b4:	4413      	add	r3, r2
 80136b6:	4a30      	ldr	r2, [pc, #192]	; (8013778 <pifLog_Printf+0x10c>)
 80136b8:	7952      	ldrb	r2, [r2, #5]
 80136ba:	b2d2      	uxtb	r2, r2
 80136bc:	4611      	mov	r1, r2
 80136be:	2202      	movs	r2, #2
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7fd ff17 	bl	80114f4 <pif_DecToString>
 80136c6:	4602      	mov	r2, r0
 80136c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136ca:	4413      	add	r3, r2
 80136cc:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 80136ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136d0:	1c5a      	adds	r2, r3, #1
 80136d2:	667a      	str	r2, [r7, #100]	; 0x64
 80136d4:	3368      	adds	r3, #104	; 0x68
 80136d6:	443b      	add	r3, r7
 80136d8:	222e      	movs	r2, #46	; 0x2e
 80136da:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80136de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136e0:	f107 020c 	add.w	r2, r7, #12
 80136e4:	4413      	add	r3, r2
 80136e6:	4a26      	ldr	r2, [pc, #152]	; (8013780 <pifLog_Printf+0x114>)
 80136e8:	8812      	ldrh	r2, [r2, #0]
 80136ea:	b292      	uxth	r2, r2
 80136ec:	4611      	mov	r1, r2
 80136ee:	2203      	movs	r2, #3
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fd feff 	bl	80114f4 <pif_DecToString>
 80136f6:	4602      	mov	r2, r0
 80136f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136fa:	4413      	add	r3, r2
 80136fc:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 80136fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013700:	1c5a      	adds	r2, r3, #1
 8013702:	667a      	str	r2, [r7, #100]	; 0x64
 8013704:	3368      	adds	r3, #104	; 0x68
 8013706:	443b      	add	r3, r7
 8013708:	2220      	movs	r2, #32
 801370a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801370e:	79fb      	ldrb	r3, [r7, #7]
 8013710:	1e9a      	subs	r2, r3, #2
 8013712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013714:	1c59      	adds	r1, r3, #1
 8013716:	6679      	str	r1, [r7, #100]	; 0x64
 8013718:	491a      	ldr	r1, [pc, #104]	; (8013784 <pifLog_Printf+0x118>)
 801371a:	5c8a      	ldrb	r2, [r1, r2]
 801371c:	3368      	adds	r3, #104	; 0x68
 801371e:	443b      	add	r3, r7
 8013720:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 8013724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013726:	1c5a      	adds	r2, r3, #1
 8013728:	667a      	str	r2, [r7, #100]	; 0x64
 801372a:	3368      	adds	r3, #104	; 0x68
 801372c:	443b      	add	r3, r7
 801372e:	2220      	movs	r2, #32
 8013730:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 8013734:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013738:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 801373a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801373c:	f107 020c 	add.w	r2, r7, #12
 8013740:	4413      	add	r3, r2
 8013742:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013746:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe f85f 	bl	801180c <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 801374e:	79fb      	ldrb	r3, [r7, #7]
 8013750:	2b01      	cmp	r3, #1
 8013752:	bf0c      	ite	eq
 8013754:	2301      	moveq	r3, #1
 8013756:	2300      	movne	r3, #0
 8013758:	b2db      	uxtb	r3, r3
 801375a:	461a      	mov	r2, r3
 801375c:	f107 030c 	add.w	r3, r7, #12
 8013760:	4611      	mov	r1, r2
 8013762:	4618      	mov	r0, r3
 8013764:	f7ff fde8 	bl	8013338 <_printLog>
}
 8013768:	bf00      	nop
 801376a:	376c      	adds	r7, #108	; 0x6c
 801376c:	46bd      	mov	sp, r7
 801376e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013772:	b003      	add	sp, #12
 8013774:	4770      	bx	lr
 8013776:	bf00      	nop
 8013778:	20001dc8 	.word	0x20001dc8
 801377c:	20000134 	.word	0x20000134
 8013780:	20001dc0 	.word	0x20001dc0
 8013784:	080295a0 	.word	0x080295a0

08013788 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 8013790:	2150      	movs	r1, #80	; 0x50
 8013792:	2000      	movs	r0, #0
 8013794:	f000 f89a 	bl	80138cc <pifRingBuffer_CreateHeap>
 8013798:	4603      	mov	r3, r0
 801379a:	4a0b      	ldr	r2, [pc, #44]	; (80137c8 <pifLog_AttachComm+0x40>)
 801379c:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 801379e:	4b0a      	ldr	r3, [pc, #40]	; (80137c8 <pifLog_AttachComm+0x40>)
 80137a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d101      	bne.n	80137aa <pifLog_AttachComm+0x22>
 80137a6:	2300      	movs	r3, #0
 80137a8:	e009      	b.n	80137be <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80137aa:	4a07      	ldr	r2, [pc, #28]	; (80137c8 <pifLog_AttachComm+0x40>)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80137b0:	4b06      	ldr	r3, [pc, #24]	; (80137cc <pifLog_AttachComm+0x44>)
 80137b2:	4a07      	ldr	r2, [pc, #28]	; (80137d0 <pifLog_AttachComm+0x48>)
 80137b4:	4904      	ldr	r1, [pc, #16]	; (80137c8 <pifLog_AttachComm+0x40>)
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7fe fc64 	bl	8012084 <pifComm_AttachClient>
    return TRUE;
 80137bc:	2301      	movs	r3, #1
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3708      	adds	r7, #8
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	20001de4 	.word	0x20001de4
 80137cc:	080132d1 	.word	0x080132d1
 80137d0:	0801314b 	.word	0x0801314b

080137d4 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	791b      	ldrb	r3, [r3, #4]
 80137e4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	2b01      	cmp	r3, #1
 80137ec:	d002      	beq.n	80137f4 <_chopOff+0x20>
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	d02e      	beq.n	8013850 <_chopOff+0x7c>
 80137f2:	e065      	b.n	80138c0 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 80137f4:	2300      	movs	r3, #0
 80137f6:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	8adb      	ldrh	r3, [r3, #22]
 80137fc:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 80137fe:	e021      	b.n	8013844 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	691a      	ldr	r2, [r3, #16]
 8013804:	89bb      	ldrh	r3, [r7, #12]
 8013806:	4413      	add	r3, r2
 8013808:	781a      	ldrb	r2, [r3, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	7e9b      	ldrb	r3, [r3, #26]
 801380e:	429a      	cmp	r2, r3
 8013810:	d108      	bne.n	8013824 <_chopOff+0x50>
				if (size > count) {
 8013812:	89fa      	ldrh	r2, [r7, #14]
 8013814:	887b      	ldrh	r3, [r7, #2]
 8013816:	429a      	cmp	r2, r3
 8013818:	d904      	bls.n	8013824 <_chopOff+0x50>
					p_owner->__tail = tail;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	89ba      	ldrh	r2, [r7, #12]
 801381e:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013820:	2301      	movs	r3, #1
 8013822:	e04e      	b.n	80138c2 <_chopOff+0xee>
				}
			}
			tail++;
 8013824:	89bb      	ldrh	r3, [r7, #12]
 8013826:	3301      	adds	r3, #1
 8013828:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	891b      	ldrh	r3, [r3, #8]
 801382e:	89ba      	ldrh	r2, [r7, #12]
 8013830:	429a      	cmp	r2, r3
 8013832:	d304      	bcc.n	801383e <_chopOff+0x6a>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	891b      	ldrh	r3, [r3, #8]
 8013838:	89ba      	ldrh	r2, [r7, #12]
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	81bb      	strh	r3, [r7, #12]
			size++;
 801383e:	89fb      	ldrh	r3, [r7, #14]
 8013840:	3301      	adds	r3, #1
 8013842:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	8a9b      	ldrh	r3, [r3, #20]
 8013848:	89ba      	ldrh	r2, [r7, #12]
 801384a:	429a      	cmp	r2, r3
 801384c:	d1d8      	bne.n	8013800 <_chopOff+0x2c>
		}
		break;
 801384e:	e037      	b.n	80138c0 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f000 f931 	bl	8013ab8 <pifRingBuffer_GetFillSize>
 8013856:	4603      	mov	r3, r0
 8013858:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8b5b      	ldrh	r3, [r3, #26]
 801385e:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013860:	e004      	b.n	801386c <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	8b5a      	ldrh	r2, [r3, #26]
 8013866:	89fb      	ldrh	r3, [r7, #14]
 8013868:	4413      	add	r3, r2
 801386a:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 801386c:	887a      	ldrh	r2, [r7, #2]
 801386e:	89fb      	ldrh	r3, [r7, #14]
 8013870:	429a      	cmp	r2, r3
 8013872:	d8f6      	bhi.n	8013862 <_chopOff+0x8e>
		}
		if (size < length) {
 8013874:	89fa      	ldrh	r2, [r7, #14]
 8013876:	897b      	ldrh	r3, [r7, #10]
 8013878:	429a      	cmp	r2, r3
 801387a:	d216      	bcs.n	80138aa <_chopOff+0xd6>
			p_owner->__tail += size;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	8ada      	ldrh	r2, [r3, #22]
 8013880:	89fb      	ldrh	r3, [r7, #14]
 8013882:	4413      	add	r3, r2
 8013884:	b29a      	uxth	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	8ada      	ldrh	r2, [r3, #22]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	891b      	ldrh	r3, [r3, #8]
 8013892:	429a      	cmp	r2, r3
 8013894:	d307      	bcc.n	80138a6 <_chopOff+0xd2>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	8ada      	ldrh	r2, [r3, #22]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	891b      	ldrh	r3, [r3, #8]
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	82da      	strh	r2, [r3, #22]
			return TRUE;
 80138a6:	2301      	movs	r3, #1
 80138a8:	e00b      	b.n	80138c2 <_chopOff+0xee>
		}
		else if (count <= length) {
 80138aa:	887a      	ldrh	r2, [r7, #2]
 80138ac:	897b      	ldrh	r3, [r7, #10]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d805      	bhi.n	80138be <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	8a9a      	ldrh	r2, [r3, #20]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	82da      	strh	r2, [r3, #22]
			return TRUE;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e001      	b.n	80138c2 <_chopOff+0xee>
		}
		break;
 80138be:	bf00      	nop
	}
	return FALSE;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}
	...

080138cc <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	4603      	mov	r3, r0
 80138d4:	460a      	mov	r2, r1
 80138d6:	80fb      	strh	r3, [r7, #6]
 80138d8:	4613      	mov	r3, r2
 80138da:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 80138dc:	201c      	movs	r0, #28
 80138de:	f00f fd65 	bl	80233ac <malloc>
 80138e2:	4603      	mov	r3, r0
 80138e4:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d104      	bne.n	80138f6 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 80138ec:	4b0c      	ldr	r3, [pc, #48]	; (8013920 <pifRingBuffer_CreateHeap+0x54>)
 80138ee:	2203      	movs	r2, #3
 80138f0:	701a      	strb	r2, [r3, #0]
		return NULL;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e010      	b.n	8013918 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	88ba      	ldrh	r2, [r7, #4]
 80138fa:	88f9      	ldrh	r1, [r7, #6]
 80138fc:	4618      	mov	r0, r3
 80138fe:	f000 f829 	bl	8013954 <pifRingBuffer_InitHeap>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d106      	bne.n	8013916 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013908:	f107 030c 	add.w	r3, r7, #12
 801390c:	4618      	mov	r0, r3
 801390e:	f000 f809 	bl	8013924 <pifRingBuffer_Destroy>
		return NULL;
 8013912:	2300      	movs	r3, #0
 8013914:	e000      	b.n	8013918 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013916:	68fb      	ldr	r3, [r7, #12]
}
 8013918:	4618      	mov	r0, r3
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	20001db8 	.word	0x20001db8

08013924 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d00c      	beq.n	801394c <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	4618      	mov	r0, r3
 8013938:	f000 f856 	bl	80139e8 <pifRingBuffer_Clear>
		free(*pp_owner);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4618      	mov	r0, r3
 8013942:	f00f fd3b 	bl	80233bc <free>
		*pp_owner = NULL;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2200      	movs	r2, #0
 801394a:	601a      	str	r2, [r3, #0]
	}
}
 801394c:	bf00      	nop
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	460b      	mov	r3, r1
 801395e:	807b      	strh	r3, [r7, #2]
 8013960:	4613      	mov	r3, r2
 8013962:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d002      	beq.n	8013970 <pifRingBuffer_InitHeap+0x1c>
 801396a:	883b      	ldrh	r3, [r7, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d104      	bne.n	801397a <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013970:	4b1b      	ldr	r3, [pc, #108]	; (80139e0 <pifRingBuffer_InitHeap+0x8c>)
 8013972:	2201      	movs	r2, #1
 8013974:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013976:	2300      	movs	r3, #0
 8013978:	e02e      	b.n	80139d8 <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 801397a:	221c      	movs	r2, #28
 801397c:	2100      	movs	r1, #0
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f00f fd32 	bl	80233e8 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013984:	883b      	ldrh	r3, [r7, #0]
 8013986:	4619      	mov	r1, r3
 8013988:	2001      	movs	r0, #1
 801398a:	f00f fcdd 	bl	8023348 <calloc>
 801398e:	4603      	mov	r3, r0
 8013990:	461a      	mov	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	691b      	ldr	r3, [r3, #16]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d108      	bne.n	80139b0 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 801399e:	4b10      	ldr	r3, [pc, #64]	; (80139e0 <pifRingBuffer_InitHeap+0x8c>)
 80139a0:	2203      	movs	r2, #3
 80139a2:	701a      	strb	r2, [r3, #0]
		goto fail;
 80139a4:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f81e 	bl	80139e8 <pifRingBuffer_Clear>
    return FALSE;
 80139ac:	2300      	movs	r3, #0
 80139ae:	e013      	b.n	80139d8 <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 80139b0:	887b      	ldrh	r3, [r7, #2]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <pifRingBuffer_InitHeap+0x70>
 80139b6:	4b0b      	ldr	r3, [pc, #44]	; (80139e4 <pifRingBuffer_InitHeap+0x90>)
 80139b8:	881b      	ldrh	r3, [r3, #0]
 80139ba:	1c5a      	adds	r2, r3, #1
 80139bc:	b291      	uxth	r1, r2
 80139be:	4a09      	ldr	r2, [pc, #36]	; (80139e4 <pifRingBuffer_InitHeap+0x90>)
 80139c0:	8011      	strh	r1, [r2, #0]
 80139c2:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	887a      	ldrh	r2, [r7, #2]
 80139c8:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	883a      	ldrh	r2, [r7, #0]
 80139ce:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	883a      	ldrh	r2, [r7, #0]
 80139d4:	831a      	strh	r2, [r3, #24]
    return TRUE;
 80139d6:	2301      	movs	r3, #1
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	20001db8 	.word	0x20001db8
 80139e4:	20000128 	.word	0x20000128

080139e8 <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	791b      	ldrb	r3, [r3, #4]
 80139f4:	f003 0301 	and.w	r3, r3, #1
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d108      	bne.n	8013a10 <pifRingBuffer_Clear+0x28>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	691b      	ldr	r3, [r3, #16]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d004      	beq.n	8013a10 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	691b      	ldr	r3, [r3, #16]
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f00f fcd6 	bl	80233bc <free>
    }
    p_owner->__p_buffer = NULL;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2200      	movs	r2, #0
 8013a14:	611a      	str	r2, [r3, #16]
}
 8013a16:	bf00      	nop
 8013a18:	3708      	adds	r7, #8
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}

08013a1e <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013a1e:	b480      	push	{r7}
 8013a20:	b083      	sub	sp, #12
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	6078      	str	r0, [r7, #4]
 8013a26:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	60da      	str	r2, [r3, #12]
}
 8013a2e:	bf00      	nop
 8013a30:	370c      	adds	r7, #12
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr

08013a3a <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013a3a:	b480      	push	{r7}
 8013a3c:	b083      	sub	sp, #12
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	460b      	mov	r3, r1
 8013a44:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6919      	ldr	r1, [r3, #16]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	8adb      	ldrh	r3, [r3, #22]
 8013a4e:	461a      	mov	r2, r3
 8013a50:	887b      	ldrh	r3, [r7, #2]
 8013a52:	4413      	add	r3, r2
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	8912      	ldrh	r2, [r2, #8]
 8013a58:	fb93 f0f2 	sdiv	r0, r3, r2
 8013a5c:	fb00 f202 	mul.w	r2, r0, r2
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	440b      	add	r3, r1
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	370c      	adds	r7, #12
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr

08013a70 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	691b      	ldr	r3, [r3, #16]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	bf14      	ite	ne
 8013a80:	2301      	movne	r3, #1
 8013a82:	2300      	moveq	r3, #0
 8013a84:	b2db      	uxtb	r3, r3
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	370c      	adds	r7, #12
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr

08013a92 <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013a92:	b480      	push	{r7}
 8013a94:	b083      	sub	sp, #12
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	8a9a      	ldrh	r2, [r3, #20]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	8adb      	ldrh	r3, [r3, #22]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	bf0c      	ite	eq
 8013aa6:	2301      	moveq	r3, #1
 8013aa8:	2300      	movne	r3, #0
 8013aaa:	b2db      	uxtb	r3, r3
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 8013ab8:	b480      	push	{r7}
 8013aba:	b085      	sub	sp, #20
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8a9a      	ldrh	r2, [r3, #20]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	8adb      	ldrh	r3, [r3, #22]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d306      	bcc.n	8013ada <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	8a9a      	ldrh	r2, [r3, #20]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	8adb      	ldrh	r3, [r3, #22]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	81fb      	strh	r3, [r7, #14]
 8013ad8:	e009      	b.n	8013aee <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	891a      	ldrh	r2, [r3, #8]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	8adb      	ldrh	r3, [r3, #22]
 8013ae2:	1ad3      	subs	r3, r2, r3
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8a9b      	ldrh	r3, [r3, #20]
 8013aea:	4413      	add	r3, r2
 8013aec:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013aee:	89fb      	ldrh	r3, [r7, #14]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3714      	adds	r7, #20
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr

08013afc <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	460b      	mov	r3, r1
 8013b06:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	8adb      	ldrh	r3, [r3, #22]
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	887b      	ldrh	r3, [r7, #2]
 8013b10:	4413      	add	r3, r2
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	8912      	ldrh	r2, [r2, #8]
 8013b16:	fb93 f1f2 	sdiv	r1, r3, r2
 8013b1a:	fb01 f202 	mul.w	r2, r1, r2
 8013b1e:	1a9b      	subs	r3, r3, r2
 8013b20:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	8a9b      	ldrh	r3, [r3, #20]
 8013b26:	89fa      	ldrh	r2, [r7, #14]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d805      	bhi.n	8013b38 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	8a9a      	ldrh	r2, [r3, #20]
 8013b30:	89fb      	ldrh	r3, [r7, #14]
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	e004      	b.n	8013b42 <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	891a      	ldrh	r2, [r3, #8]
 8013b3c:	89fb      	ldrh	r3, [r7, #14]
 8013b3e:	1ad3      	subs	r3, r2, r3
 8013b40:	b29b      	uxth	r3, r3
    }
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3714      	adds	r7, #20
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr

08013b4e <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013b4e:	b480      	push	{r7}
 8013b50:	b085      	sub	sp, #20
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	8a9a      	ldrh	r2, [r3, #20]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	8adb      	ldrh	r3, [r3, #22]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d206      	bcs.n	8013b70 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	8ada      	ldrh	r2, [r3, #22]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8a9b      	ldrh	r3, [r3, #20]
 8013b6a:	1ad3      	subs	r3, r2, r3
 8013b6c:	81fb      	strh	r3, [r7, #14]
 8013b6e:	e009      	b.n	8013b84 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	891a      	ldrh	r2, [r3, #8]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	8a9b      	ldrh	r3, [r3, #20]
 8013b78:	1ad3      	subs	r3, r2, r3
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	8adb      	ldrh	r3, [r3, #22]
 8013b80:	4413      	add	r3, r2
 8013b82:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013b84:	89fb      	ldrh	r3, [r7, #14]
 8013b86:	3b01      	subs	r3, #1
 8013b88:	b29b      	uxth	r3, r3
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3714      	adds	r7, #20
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr

08013b96 <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 8013b96:	b480      	push	{r7}
 8013b98:	b083      	sub	sp, #12
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8b1a      	ldrh	r2, [r3, #24]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	891b      	ldrh	r3, [r3, #8]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d203      	bcs.n	8013bb2 <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8b1a      	ldrh	r2, [r3, #24]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	8a9a      	ldrh	r2, [r3, #20]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	831a      	strh	r2, [r3, #24]
}
 8013bba:	bf00      	nop
 8013bbc:	370c      	adds	r7, #12
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr

08013bc6 <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 8013bc6:	b480      	push	{r7}
 8013bc8:	b083      	sub	sp, #12
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	891a      	ldrh	r2, [r3, #8]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	831a      	strh	r2, [r3, #24]
}
 8013bd6:	bf00      	nop
 8013bd8:	370c      	adds	r7, #12
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be0:	4770      	bx	lr

08013be2 <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 8013be2:	b480      	push	{r7}
 8013be4:	b083      	sub	sp, #12
 8013be6:	af00      	add	r7, sp, #0
 8013be8:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	8b1a      	ldrh	r2, [r3, #24]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	891a      	ldrh	r2, [r3, #8]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	831a      	strh	r2, [r3, #24]
}
 8013bfa:	bf00      	nop
 8013bfc:	370c      	adds	r7, #12
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr

08013c06 <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 8013c06:	b480      	push	{r7}
 8013c08:	b083      	sub	sp, #12
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6919      	ldr	r1, [r3, #16]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	8b1b      	ldrh	r3, [r3, #24]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	887b      	ldrh	r3, [r7, #2]
 8013c1e:	4413      	add	r3, r2
 8013c20:	687a      	ldr	r2, [r7, #4]
 8013c22:	8912      	ldrh	r2, [r2, #8]
 8013c24:	fb93 f0f2 	sdiv	r0, r3, r2
 8013c28:	fb00 f202 	mul.w	r2, r0, r2
 8013c2c:	1a9b      	subs	r3, r3, r2
 8013c2e:	440b      	add	r3, r1
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	370c      	adds	r7, #12
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	460b      	mov	r3, r1
 8013c46:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	8a9b      	ldrh	r3, [r3, #20]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	891b      	ldrh	r3, [r3, #8]
 8013c54:	89fa      	ldrh	r2, [r7, #14]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d301      	bcc.n	8013c5e <pifRingBuffer_PutByte+0x22>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	8adb      	ldrh	r3, [r3, #22]
 8013c62:	89fa      	ldrh	r2, [r7, #14]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d10b      	bne.n	8013c80 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013c68:	2101      	movs	r1, #1
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7ff fdb2 	bl	80137d4 <_chopOff>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d104      	bne.n	8013c80 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013c76:	4b0a      	ldr	r3, [pc, #40]	; (8013ca0 <pifRingBuffer_PutByte+0x64>)
 8013c78:	2204      	movs	r2, #4
 8013c7a:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	e00a      	b.n	8013c96 <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	8a92      	ldrh	r2, [r2, #20]
 8013c88:	4413      	add	r3, r2
 8013c8a:	78fa      	ldrb	r2, [r7, #3]
 8013c8c:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	89fa      	ldrh	r2, [r7, #14]
 8013c92:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013c94:	2301      	movs	r3, #1
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20001db8 	.word	0x20001db8

08013ca4 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	4613      	mov	r3, r2
 8013cb0:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f7ff ff4b 	bl	8013b4e <pifRingBuffer_GetRemainSize>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013cbc:	88fa      	ldrh	r2, [r7, #6]
 8013cbe:	8abb      	ldrh	r3, [r7, #20]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d90f      	bls.n	8013ce4 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013cc4:	88fa      	ldrh	r2, [r7, #6]
 8013cc6:	8abb      	ldrh	r3, [r7, #20]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	4619      	mov	r1, r3
 8013cce:	68f8      	ldr	r0, [r7, #12]
 8013cd0:	f7ff fd80 	bl	80137d4 <_chopOff>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d104      	bne.n	8013ce4 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013cda:	4b16      	ldr	r3, [pc, #88]	; (8013d34 <pifRingBuffer_PutData+0x90>)
 8013cdc:	2204      	movs	r2, #4
 8013cde:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	e023      	b.n	8013d2c <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	82fb      	strh	r3, [r7, #22]
 8013ce8:	e01b      	b.n	8013d22 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013cea:	8afb      	ldrh	r3, [r7, #22]
 8013cec:	68ba      	ldr	r2, [r7, #8]
 8013cee:	441a      	add	r2, r3
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	68f9      	ldr	r1, [r7, #12]
 8013cf6:	8a89      	ldrh	r1, [r1, #20]
 8013cf8:	440b      	add	r3, r1
 8013cfa:	7812      	ldrb	r2, [r2, #0]
 8013cfc:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	8a9b      	ldrh	r3, [r3, #20]
 8013d02:	3301      	adds	r3, #1
 8013d04:	b29a      	uxth	r2, r3
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	8a9a      	ldrh	r2, [r3, #20]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	891b      	ldrh	r3, [r3, #8]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d302      	bcc.n	8013d1c <pifRingBuffer_PutData+0x78>
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013d1c:	8afb      	ldrh	r3, [r7, #22]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	82fb      	strh	r3, [r7, #22]
 8013d22:	8afa      	ldrh	r2, [r7, #22]
 8013d24:	88fb      	ldrh	r3, [r7, #6]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d3df      	bcc.n	8013cea <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013d2a:	2301      	movs	r3, #1
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3718      	adds	r7, #24
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	20001db8 	.word	0x20001db8

08013d38 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7ff ff03 	bl	8013b4e <pifRingBuffer_GetRemainSize>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013d4c:	6838      	ldr	r0, [r7, #0]
 8013d4e:	f7ec fa43 	bl	80001d8 <strlen>
 8013d52:	4603      	mov	r3, r0
 8013d54:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013d56:	897a      	ldrh	r2, [r7, #10]
 8013d58:	89bb      	ldrh	r3, [r7, #12]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d90f      	bls.n	8013d7e <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013d5e:	897a      	ldrh	r2, [r7, #10]
 8013d60:	89bb      	ldrh	r3, [r7, #12]
 8013d62:	1ad3      	subs	r3, r2, r3
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	4619      	mov	r1, r3
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff fd33 	bl	80137d4 <_chopOff>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d104      	bne.n	8013d7e <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013d74:	4b16      	ldr	r3, [pc, #88]	; (8013dd0 <pifRingBuffer_PutString+0x98>)
 8013d76:	2204      	movs	r2, #4
 8013d78:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	e023      	b.n	8013dc6 <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013d7e:	2300      	movs	r3, #0
 8013d80:	81fb      	strh	r3, [r7, #14]
 8013d82:	e01b      	b.n	8013dbc <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013d84:	89fb      	ldrh	r3, [r7, #14]
 8013d86:	683a      	ldr	r2, [r7, #0]
 8013d88:	441a      	add	r2, r3
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	691b      	ldr	r3, [r3, #16]
 8013d8e:	6879      	ldr	r1, [r7, #4]
 8013d90:	8a89      	ldrh	r1, [r1, #20]
 8013d92:	440b      	add	r3, r1
 8013d94:	7812      	ldrb	r2, [r2, #0]
 8013d96:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	8a9b      	ldrh	r3, [r3, #20]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	8a9a      	ldrh	r2, [r3, #20]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	891b      	ldrh	r3, [r3, #8]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d302      	bcc.n	8013db6 <pifRingBuffer_PutString+0x7e>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2200      	movs	r2, #0
 8013db4:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013db6:	89fb      	ldrh	r3, [r7, #14]
 8013db8:	3301      	adds	r3, #1
 8013dba:	81fb      	strh	r3, [r7, #14]
 8013dbc:	89fa      	ldrh	r2, [r7, #14]
 8013dbe:	897b      	ldrh	r3, [r7, #10]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d3df      	bcc.n	8013d84 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013dc4:	2301      	movs	r3, #1
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	20001db8 	.word	0x20001db8

08013dd4 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	8ada      	ldrh	r2, [r3, #22]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	8a9b      	ldrh	r3, [r3, #20]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d101      	bne.n	8013dee <pifRingBuffer_GetByte+0x1a>
 8013dea:	2300      	movs	r3, #0
 8013dec:	e017      	b.n	8013e1e <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	691b      	ldr	r3, [r3, #16]
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	8ad2      	ldrh	r2, [r2, #22]
 8013df6:	4413      	add	r3, r2
 8013df8:	781a      	ldrb	r2, [r3, #0]
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	8adb      	ldrh	r3, [r3, #22]
 8013e02:	3301      	adds	r3, #1
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8ada      	ldrh	r2, [r3, #22]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	891b      	ldrh	r3, [r3, #8]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d302      	bcc.n	8013e1c <pifRingBuffer_GetByte+0x48>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013e1c:	2301      	movs	r3, #1
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	370c      	adds	r7, #12
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr

08013e2a <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013e2a:	b480      	push	{r7}
 8013e2c:	b087      	sub	sp, #28
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	60f8      	str	r0, [r7, #12]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	461a      	mov	r2, r3
 8013e36:	460b      	mov	r3, r1
 8013e38:	817b      	strh	r3, [r7, #10]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8ada      	ldrh	r2, [r3, #22]
 8013e42:	893b      	ldrh	r3, [r7, #8]
 8013e44:	4413      	add	r3, r2
 8013e46:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	891b      	ldrh	r3, [r3, #8]
 8013e4c:	8afa      	ldrh	r2, [r7, #22]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d304      	bcc.n	8013e5c <pifRingBuffer_CopyToArray+0x32>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	891b      	ldrh	r3, [r3, #8]
 8013e56:	8afa      	ldrh	r2, [r7, #22]
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	82bb      	strh	r3, [r7, #20]
 8013e60:	e01e      	b.n	8013ea0 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	691a      	ldr	r2, [r3, #16]
 8013e66:	8afb      	ldrh	r3, [r7, #22]
 8013e68:	441a      	add	r2, r3
 8013e6a:	8abb      	ldrh	r3, [r7, #20]
 8013e6c:	68f9      	ldr	r1, [r7, #12]
 8013e6e:	440b      	add	r3, r1
 8013e70:	7812      	ldrb	r2, [r2, #0]
 8013e72:	701a      	strb	r2, [r3, #0]
		tail++;
 8013e74:	8afb      	ldrh	r3, [r7, #22]
 8013e76:	3301      	adds	r3, #1
 8013e78:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	891b      	ldrh	r3, [r3, #8]
 8013e7e:	8afa      	ldrh	r2, [r7, #22]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d301      	bcc.n	8013e88 <pifRingBuffer_CopyToArray+0x5e>
 8013e84:	2300      	movs	r3, #0
 8013e86:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	8a9b      	ldrh	r3, [r3, #20]
 8013e8c:	8afa      	ldrh	r2, [r7, #22]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d103      	bne.n	8013e9a <pifRingBuffer_CopyToArray+0x70>
 8013e92:	8abb      	ldrh	r3, [r7, #20]
 8013e94:	3301      	adds	r3, #1
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	e007      	b.n	8013eaa <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8013e9a:	8abb      	ldrh	r3, [r7, #20]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	82bb      	strh	r3, [r7, #20]
 8013ea0:	8aba      	ldrh	r2, [r7, #20]
 8013ea2:	897b      	ldrh	r3, [r7, #10]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d3dc      	bcc.n	8013e62 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8013ea8:	897b      	ldrh	r3, [r7, #10]
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	371c      	adds	r7, #28
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb4:	4770      	bx	lr

08013eb6 <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b084      	sub	sp, #16
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff fdf8 	bl	8013ab8 <pifRingBuffer_GetFillSize>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8013ecc:	887a      	ldrh	r2, [r7, #2]
 8013ece:	89fb      	ldrh	r3, [r7, #14]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d304      	bcc.n	8013ede <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	8a9a      	ldrh	r2, [r3, #20]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8013edc:	e00e      	b.n	8013efc <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	8adb      	ldrh	r3, [r3, #22]
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	887b      	ldrh	r3, [r7, #2]
 8013ee6:	4413      	add	r3, r2
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	8912      	ldrh	r2, [r2, #8]
 8013eec:	fb93 f1f2 	sdiv	r1, r3, r2
 8013ef0:	fb01 f202 	mul.w	r2, r1, r2
 8013ef4:	1a9b      	subs	r3, r3, r2
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	82da      	strh	r2, [r3, #22]
}
 8013efc:	bf00      	nop
 8013efe:	3710      	adds	r7, #16
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b089      	sub	sp, #36	; 0x24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	6039      	str	r1, [r7, #0]
 8013f0e:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8013f10:	f04f 33ff 	mov.w	r3, #4294967295
 8013f14:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f16:	2300      	movs	r3, #0
 8013f18:	61bb      	str	r3, [r7, #24]
 8013f1a:	e00f      	b.n	8013f3c <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	fa02 f303 	lsl.w	r3, r2, r3
 8013f24:	461a      	mov	r2, r3
 8013f26:	4b34      	ldr	r3, [pc, #208]	; (8013ff8 <_setTable+0xf4>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d102      	bne.n	8013f36 <_setTable+0x32>
			num = i;
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	617b      	str	r3, [r7, #20]
			break;
 8013f34:	e005      	b.n	8013f42 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f36:	69bb      	ldr	r3, [r7, #24]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	61bb      	str	r3, [r7, #24]
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	2b1f      	cmp	r3, #31
 8013f40:	ddec      	ble.n	8013f1c <_setTable+0x18>
		}
	}
	if (num == -1) {
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f48:	d105      	bne.n	8013f56 <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8013f4a:	4b2c      	ldr	r3, [pc, #176]	; (8013ffc <_setTable+0xf8>)
 8013f4c:	2204      	movs	r2, #4
 8013f4e:	701a      	strb	r2, [r3, #0]
		return -1;
 8013f50:	f04f 33ff 	mov.w	r3, #4294967295
 8013f54:	e04a      	b.n	8013fec <_setTable+0xe8>
	}
	bit = 1 << num;
 8013f56:	2201      	movs	r2, #1
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f5e:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8013f60:	4b25      	ldr	r3, [pc, #148]	; (8013ff8 <_setTable+0xf4>)
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	4313      	orrs	r3, r2
 8013f68:	4a23      	ldr	r2, [pc, #140]	; (8013ff8 <_setTable+0xf4>)
 8013f6a:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8013f6c:	88fb      	ldrh	r3, [r7, #6]
 8013f6e:	015b      	lsls	r3, r3, #5
 8013f70:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8013f72:	4a23      	ldr	r2, [pc, #140]	; (8014000 <_setTable+0xfc>)
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f7a:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	2b64      	cmp	r3, #100	; 0x64
 8013f80:	d930      	bls.n	8013fe4 <_setTable+0xe0>
		index = 100 * base;
 8013f82:	4b20      	ldr	r3, [pc, #128]	; (8014004 <_setTable+0x100>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2264      	movs	r2, #100	; 0x64
 8013f88:	fb02 f303 	mul.w	r3, r2, r3
 8013f8c:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013f8e:	2300      	movs	r3, #0
 8013f90:	61bb      	str	r3, [r7, #24]
 8013f92:	e017      	b.n	8013fc4 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8013f94:	69fb      	ldr	r3, [r7, #28]
 8013f96:	4a1c      	ldr	r2, [pc, #112]	; (8014008 <_setTable+0x104>)
 8013f98:	fba2 2303 	umull	r2, r3, r2, r3
 8013f9c:	095b      	lsrs	r3, r3, #5
 8013f9e:	f003 021f 	and.w	r2, r3, #31
 8013fa2:	491a      	ldr	r1, [pc, #104]	; (801400c <_setTable+0x108>)
 8013fa4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fa8:	f003 031f 	and.w	r3, r3, #31
 8013fac:	693a      	ldr	r2, [r7, #16]
 8013fae:	430a      	orrs	r2, r1
 8013fb0:	4916      	ldr	r1, [pc, #88]	; (801400c <_setTable+0x108>)
 8013fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8013fb6:	69fa      	ldr	r2, [r7, #28]
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	4413      	add	r3, r2
 8013fbc:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	61bb      	str	r3, [r7, #24]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4a10      	ldr	r2, [pc, #64]	; (8014008 <_setTable+0x104>)
 8013fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8013fcc:	1152      	asrs	r2, r2, #5
 8013fce:	17db      	asrs	r3, r3, #31
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	69ba      	ldr	r2, [r7, #24]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	dbdd      	blt.n	8013f94 <_setTable+0x90>
		}
		base++;
 8013fd8:	4b0a      	ldr	r3, [pc, #40]	; (8014004 <_setTable+0x100>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	4a09      	ldr	r2, [pc, #36]	; (8014004 <_setTable+0x100>)
 8013fe0:	6013      	str	r3, [r2, #0]
 8013fe2:	e002      	b.n	8013fea <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8013fea:	697b      	ldr	r3, [r7, #20]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3724      	adds	r7, #36	; 0x24
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr
 8013ff8:	20001e98 	.word	0x20001e98
 8013ffc:	20001db8 	.word	0x20001db8
 8014000:	0004e200 	.word	0x0004e200
 8014004:	20001f28 	.word	0x20001f28
 8014008:	51eb851f 	.word	0x51eb851f
 801400c:	20001e9c 	.word	0x20001e9c

08014010 <_resetTable>:

static void _resetTable(int number)
{
 8014010:	b480      	push	{r7}
 8014012:	b085      	sub	sp, #20
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8014018:	2201      	movs	r2, #1
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	fa02 f303 	lsl.w	r3, r2, r3
 8014020:	43db      	mvns	r3, r3
 8014022:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014024:	2300      	movs	r3, #0
 8014026:	60fb      	str	r3, [r7, #12]
 8014028:	e00c      	b.n	8014044 <_resetTable+0x34>
		s_table[i] &= mask;
 801402a:	4a0e      	ldr	r2, [pc, #56]	; (8014064 <_resetTable+0x54>)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	401a      	ands	r2, r3
 8014036:	490b      	ldr	r1, [pc, #44]	; (8014064 <_resetTable+0x54>)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	3301      	adds	r3, #1
 8014042:	60fb      	str	r3, [r7, #12]
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2b1f      	cmp	r3, #31
 8014048:	ddef      	ble.n	801402a <_resetTable+0x1a>
	}
	s_table_number &= mask;
 801404a:	4b07      	ldr	r3, [pc, #28]	; (8014068 <_resetTable+0x58>)
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	4013      	ands	r3, r2
 8014052:	4a05      	ldr	r2, [pc, #20]	; (8014068 <_resetTable+0x58>)
 8014054:	6013      	str	r3, [r2, #0]
}
 8014056:	bf00      	nop
 8014058:	3714      	adds	r7, #20
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	20001e9c 	.word	0x20001e9c
 8014068:	20001e98 	.word	0x20001e98

0801406c <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 801406c:	b480      	push	{r7}
 801406e:	b085      	sub	sp, #20
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d010      	beq.n	801409e <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 801407c:	4b0b      	ldr	r3, [pc, #44]	; (80140ac <_processingAlways+0x40>)
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014084:	1ad3      	subs	r3, r2, r3
 8014086:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801408c:	461a      	mov	r2, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	4293      	cmp	r3, r2
 8014092:	d302      	bcc.n	801409a <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2200      	movs	r2, #0
 8014098:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 801409a:	2300      	movs	r3, #0
 801409c:	e000      	b.n	80140a0 <_processingAlways+0x34>
	}
	return p_owner;
 801409e:	687b      	ldr	r3, [r7, #4]
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3714      	adds	r7, #20
 80140a4:	46bd      	mov	sp, r7
 80140a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140aa:	4770      	bx	lr
 80140ac:	20001dd0 	.word	0x20001dd0

080140b0 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 80140b8:	4b0f      	ldr	r3, [pc, #60]	; (80140f8 <_processingPeriodUs+0x48>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4798      	blx	r3
 80140be:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	895b      	ldrh	r3, [r3, #10]
 80140ce:	461a      	mov	r2, r3
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d30a      	bcc.n	80140ec <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	895b      	ldrh	r3, [r3, #10]
 80140da:	461a      	mov	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	1ad2      	subs	r2, r2, r3
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	441a      	add	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	e000      	b.n	80140ee <_processingPeriodUs+0x3e>
	}
	return NULL;
 80140ec:	2300      	movs	r3, #0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	20001ddc 	.word	0x20001ddc

080140fc <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b085      	sub	sp, #20
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8014104:	4b0c      	ldr	r3, [pc, #48]	; (8014138 <_processingPeriodMs+0x3c>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	1ad3      	subs	r3, r2, r3
 8014112:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	895b      	ldrh	r3, [r3, #10]
 8014118:	461a      	mov	r2, r3
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	4293      	cmp	r3, r2
 801411e:	d304      	bcc.n	801412a <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	e000      	b.n	801412c <_processingPeriodMs+0x30>
	}
	return NULL;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	3714      	adds	r7, #20
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr
 8014138:	20001dd0 	.word	0x20001dd0

0801413c <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014148:	2b00      	cmp	r3, #0
 801414a:	d00f      	beq.n	801416c <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 801414c:	4b13      	ldr	r3, [pc, #76]	; (801419c <_processingRatio+0x60>)
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014154:	1ad3      	subs	r3, r2, r3
 8014156:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801415c:	461a      	mov	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	4293      	cmp	r3, r2
 8014162:	d313      	bcc.n	801418c <_processingRatio+0x50>
			p_owner->__delay_ms = 0;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	879a      	strh	r2, [r3, #60]	; 0x3c
 801416a:	e00f      	b.n	801418c <_processingRatio+0x50>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 801416c:	4b0c      	ldr	r3, [pc, #48]	; (80141a0 <_processingRatio+0x64>)
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	461a      	mov	r2, r3
 8014172:	4b0c      	ldr	r3, [pc, #48]	; (80141a4 <_processingRatio+0x68>)
 8014174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801417c:	2101      	movs	r1, #1
 801417e:	fa01 f202 	lsl.w	r2, r1, r2
 8014182:	4013      	ands	r3, r2
 8014184:	2b00      	cmp	r3, #0
 8014186:	d001      	beq.n	801418c <_processingRatio+0x50>
			p_owner->__count = 0;
			pretime = time;
		}
		p_owner->__count++;
#endif
		return p_owner;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	e000      	b.n	801418e <_processingRatio+0x52>
	}
	return NULL;
 801418c:	2300      	movs	r3, #0
}
 801418e:	4618      	mov	r0, r3
 8014190:	3714      	adds	r7, #20
 8014192:	46bd      	mov	sp, r7
 8014194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014198:	4770      	bx	lr
 801419a:	bf00      	nop
 801419c:	20001dd0 	.word	0x20001dd0
 80141a0:	20001f1c 	.word	0x20001f1c
 80141a4:	20001e9c 	.word	0x20001e9c

080141a8 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	460b      	mov	r3, r1
 80141b2:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	2b09      	cmp	r3, #9
 80141ba:	d848      	bhi.n	801424e <_checkParam+0xa6>
 80141bc:	a201      	add	r2, pc, #4	; (adr r2, 80141c4 <_checkParam+0x1c>)
 80141be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141c2:	bf00      	nop
 80141c4:	080141ed 	.word	0x080141ed
 80141c8:	08014259 	.word	0x08014259
 80141cc:	08014211 	.word	0x08014211
 80141d0:	08014221 	.word	0x08014221
 80141d4:	08014211 	.word	0x08014211
 80141d8:	08014221 	.word	0x08014221
 80141dc:	08014243 	.word	0x08014243
 80141e0:	08014259 	.word	0x08014259
 80141e4:	08014259 	.word	0x08014259
 80141e8:	08014211 	.word	0x08014211
    case TM_RATIO:
    	if (!period || period > 100) {
 80141ec:	887b      	ldrh	r3, [r7, #2]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <_checkParam+0x50>
 80141f2:	887b      	ldrh	r3, [r7, #2]
 80141f4:	2b64      	cmp	r3, #100	; 0x64
 80141f6:	d904      	bls.n	8014202 <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 80141f8:	4b1f      	ldr	r3, [pc, #124]	; (8014278 <_checkParam+0xd0>)
 80141fa:	2201      	movs	r2, #1
 80141fc:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80141fe:	2300      	movs	r3, #0
 8014200:	e034      	b.n	801426c <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 8014202:	887b      	ldrh	r3, [r7, #2]
 8014204:	2b64      	cmp	r3, #100	; 0x64
 8014206:	d129      	bne.n	801425c <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 801420e:	e025      	b.n	801425c <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014210:	887b      	ldrh	r3, [r7, #2]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d124      	bne.n	8014260 <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 8014216:	4b18      	ldr	r3, [pc, #96]	; (8014278 <_checkParam+0xd0>)
 8014218:	2201      	movs	r2, #1
 801421a:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801421c:	2300      	movs	r3, #0
 801421e:	e025      	b.n	801426c <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 8014220:	887b      	ldrh	r3, [r7, #2]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d104      	bne.n	8014230 <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 8014226:	4b14      	ldr	r3, [pc, #80]	; (8014278 <_checkParam+0xd0>)
 8014228:	2201      	movs	r2, #1
 801422a:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801422c:	2300      	movs	r3, #0
 801422e:	e01d      	b.n	801426c <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 8014230:	4b12      	ldr	r3, [pc, #72]	; (801427c <_checkParam+0xd4>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d115      	bne.n	8014264 <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 8014238:	4b0f      	ldr	r3, [pc, #60]	; (8014278 <_checkParam+0xd0>)
 801423a:	2209      	movs	r2, #9
 801423c:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801423e:	2300      	movs	r3, #0
 8014240:	e014      	b.n	801426c <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 8014242:	4b0f      	ldr	r3, [pc, #60]	; (8014280 <_checkParam+0xd8>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d00e      	beq.n	8014268 <_checkParam+0xc0>
 801424a:	2300      	movs	r3, #0
 801424c:	e00e      	b.n	801426c <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 801424e:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <_checkParam+0xd0>)
 8014250:	2201      	movs	r2, #1
 8014252:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014254:	2300      	movs	r3, #0
 8014256:	e009      	b.n	801426c <_checkParam+0xc4>
		break;
 8014258:	bf00      	nop
 801425a:	e006      	b.n	801426a <_checkParam+0xc2>
    	break;
 801425c:	bf00      	nop
 801425e:	e004      	b.n	801426a <_checkParam+0xc2>
    	break;
 8014260:	bf00      	nop
 8014262:	e002      	b.n	801426a <_checkParam+0xc2>
    	break;
 8014264:	bf00      	nop
 8014266:	e000      	b.n	801426a <_checkParam+0xc2>
    	break;
 8014268:	bf00      	nop
    }
	return TRUE;
 801426a:	2301      	movs	r3, #1
}
 801426c:	4618      	mov	r0, r3
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr
 8014278:	20001db8 	.word	0x20001db8
 801427c:	20001ddc 	.word	0x20001ddc
 8014280:	20001e94 	.word	0x20001e94

08014284 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	460b      	mov	r3, r1
 801428e:	70fb      	strb	r3, [r7, #3]
 8014290:	4613      	mov	r3, r2
 8014292:	803b      	strh	r3, [r7, #0]
	int num = -1;
 8014294:	f04f 33ff 	mov.w	r3, #4294967295
 8014298:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 801429a:	78fb      	ldrb	r3, [r7, #3]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d10c      	bne.n	80142ba <_setParam+0x36>
    	num = _setTable(period, &mode);
 80142a0:	1cfa      	adds	r2, r7, #3
 80142a2:	883b      	ldrh	r3, [r7, #0]
 80142a4:	4611      	mov	r1, r2
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ff fe2c 	bl	8013f04 <_setTable>
 80142ac:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b4:	d101      	bne.n	80142ba <_setParam+0x36>
 80142b6:	2300      	movs	r3, #0
 80142b8:	e050      	b.n	801435c <_setParam+0xd8>
	}

    switch (mode) {
 80142ba:	78fb      	ldrb	r3, [r7, #3]
 80142bc:	2b09      	cmp	r3, #9
 80142be:	d845      	bhi.n	801434c <_setParam+0xc8>
 80142c0:	a201      	add	r2, pc, #4	; (adr r2, 80142c8 <_setParam+0x44>)
 80142c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c6:	bf00      	nop
 80142c8:	080142f1 	.word	0x080142f1
 80142cc:	080142ff 	.word	0x080142ff
 80142d0:	0801430b 	.word	0x0801430b
 80142d4:	0801431b 	.word	0x0801431b
 80142d8:	0801430b 	.word	0x0801430b
 80142dc:	0801431b 	.word	0x0801431b
 80142e0:	0801432f 	.word	0x0801432f
 80142e4:	08014341 	.word	0x08014341
 80142e8:	08014341 	.word	0x08014341
 80142ec:	0801430b 	.word	0x0801430b
    case TM_RATIO:
    	p_owner->__table_number = num;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4a1a      	ldr	r2, [pc, #104]	; (8014364 <_setParam+0xe0>)
 80142fa:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 80142fc:	e027      	b.n	801434e <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 80142fe:	2364      	movs	r3, #100	; 0x64
 8014300:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	4a18      	ldr	r2, [pc, #96]	; (8014368 <_setParam+0xe4>)
 8014306:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014308:	e021      	b.n	801434e <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801430a:	4b18      	ldr	r3, [pc, #96]	; (801436c <_setParam+0xe8>)
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	4a16      	ldr	r2, [pc, #88]	; (8014370 <_setParam+0xec>)
 8014316:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014318:	e019      	b.n	801434e <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801431a:	4b16      	ldr	r3, [pc, #88]	; (8014374 <_setParam+0xf0>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4798      	blx	r3
 8014320:	4602      	mov	r2, r0
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4a13      	ldr	r2, [pc, #76]	; (8014378 <_setParam+0xf4>)
 801432a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801432c:	e00f      	b.n	801434e <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 801432e:	4a13      	ldr	r2, [pc, #76]	; (801437c <_setParam+0xf8>)
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6013      	str	r3, [r2, #0]
    	period = 0;
 8014334:	2300      	movs	r3, #0
 8014336:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2200      	movs	r2, #0
 801433c:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 801433e:	e006      	b.n	801434e <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 8014340:	2300      	movs	r3, #0
 8014342:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2200      	movs	r2, #0
 8014348:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801434a:	e000      	b.n	801434e <_setParam+0xca>

    default:
    	break;
 801434c:	bf00      	nop
    }

    p_owner->_mode = mode;
 801434e:	78fa      	ldrb	r2, [r7, #3]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	883a      	ldrh	r2, [r7, #0]
 8014358:	815a      	strh	r2, [r3, #10]
	return TRUE;
 801435a:	2301      	movs	r3, #1
}
 801435c:	4618      	mov	r0, r3
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	0801413d 	.word	0x0801413d
 8014368:	0801406d 	.word	0x0801406d
 801436c:	20001dd0 	.word	0x20001dd0
 8014370:	080140fd 	.word	0x080140fd
 8014374:	20001ddc 	.word	0x20001ddc
 8014378:	080140b1 	.word	0x080140b1
 801437c:	20001e94 	.word	0x20001e94

08014380 <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b086      	sub	sp, #24
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 8014388:	4b3b      	ldr	r3, [pc, #236]	; (8014478 <_processingTask+0xf8>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b04      	cmp	r3, #4
 801438e:	dd01      	ble.n	8014394 <_processingTask+0x14>
 8014390:	2300      	movs	r3, #0
 8014392:	e06d      	b.n	8014470 <_processingTask+0xf0>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 8014394:	4b38      	ldr	r3, [pc, #224]	; (8014478 <_processingTask+0xf8>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4938      	ldr	r1, [pc, #224]	; (801447c <_processingTask+0xfc>)
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 80143a0:	4b35      	ldr	r3, [pc, #212]	; (8014478 <_processingTask+0xf8>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	3301      	adds	r3, #1
 80143a6:	4a34      	ldr	r2, [pc, #208]	; (8014478 <_processingTask+0xf8>)
 80143a8:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2201      	movs	r2, #1
 80143ae:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 80143b0:	4b33      	ldr	r3, [pc, #204]	; (8014480 <_processingTask+0x100>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d024      	beq.n	8014402 <_processingTask+0x82>
		start_time = (*pif_act_timer1us)();
 80143b8:	4b31      	ldr	r3, [pc, #196]	; (8014480 <_processingTask+0x100>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4798      	blx	r3
 80143be:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	4798      	blx	r3
 80143c8:	4603      	mov	r3, r0
 80143ca:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 80143cc:	4b2c      	ldr	r3, [pc, #176]	; (8014480 <_processingTask+0x100>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4798      	blx	r3
 80143d2:	4602      	mov	r2, r0
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	1ad3      	subs	r3, r2, r3
 80143d8:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	699b      	ldr	r3, [r3, #24]
 80143de:	1c5a      	adds	r2, r3, #1
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	691b      	ldr	r3, [r3, #16]
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d902      	bls.n	80143f4 <_processingTask+0x74>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	68fa      	ldr	r2, [r7, #12]
 80143f2:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	695a      	ldr	r2, [r3, #20]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	441a      	add	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	615a      	str	r2, [r3, #20]
 8014400:	e005      	b.n	801440e <_processingTask+0x8e>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	4798      	blx	r3
 801440a:	4603      	mov	r3, r0
 801440c:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 8014414:	4b18      	ldr	r3, [pc, #96]	; (8014478 <_processingTask+0xf8>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	3b01      	subs	r3, #1
 801441a:	4a17      	ldr	r2, [pc, #92]	; (8014478 <_processingTask+0xf8>)
 801441c:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 801441e:	4b16      	ldr	r3, [pc, #88]	; (8014478 <_processingTask+0xf8>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	4a16      	ldr	r2, [pc, #88]	; (801447c <_processingTask+0xfc>)
 8014424:	2100      	movs	r1, #0
 8014426:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
#endif

	switch (p_owner->_mode) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	7a1b      	ldrb	r3, [r3, #8]
 801442e:	2b04      	cmp	r3, #4
 8014430:	d002      	beq.n	8014438 <_processingTask+0xb8>
 8014432:	2b05      	cmp	r3, #5
 8014434:	d00b      	beq.n	801444e <_processingTask+0xce>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 8014436:	e01a      	b.n	801446e <_processingTask+0xee>
		if (period > 0) {
 8014438:	8afb      	ldrh	r3, [r7, #22]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d014      	beq.n	8014468 <_processingTask+0xe8>
			p_owner->_period = period;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	8afa      	ldrh	r2, [r7, #22]
 8014442:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 8014444:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <_processingTask+0x104>)
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801444c:	e00c      	b.n	8014468 <_processingTask+0xe8>
		if (period > 0) {
 801444e:	8afb      	ldrh	r3, [r7, #22]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d00b      	beq.n	801446c <_processingTask+0xec>
			p_owner->_period = period;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	8afa      	ldrh	r2, [r7, #22]
 8014458:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 801445a:	4b09      	ldr	r3, [pc, #36]	; (8014480 <_processingTask+0x100>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4798      	blx	r3
 8014460:	4602      	mov	r2, r0
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014466:	e001      	b.n	801446c <_processingTask+0xec>
		break;
 8014468:	bf00      	nop
 801446a:	e000      	b.n	801446e <_processingTask+0xee>
		break;
 801446c:	bf00      	nop
	}
	return TRUE;
 801446e:	2301      	movs	r3, #1
}
 8014470:	4618      	mov	r0, r3
 8014472:	3718      	adds	r7, #24
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	20001e90 	.word	0x20001e90
 801447c:	20001e7c 	.word	0x20001e7c
 8014480:	20001ddc 	.word	0x20001ddc
 8014484:	20001dd0 	.word	0x20001dd0

08014488 <_checkLoopTime>:

static void _checkLoopTime()
{
 8014488:	b480      	push	{r7}
 801448a:	af00      	add	r7, sp, #0
		}
		pretime = (*pif_act_timer1us)();
	}
#endif

	pif_performance._count++;
 801448c:	4b1f      	ldr	r3, [pc, #124]	; (801450c <_checkLoopTime+0x84>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	3301      	adds	r3, #1
 8014492:	4a1e      	ldr	r2, [pc, #120]	; (801450c <_checkLoopTime+0x84>)
 8014494:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 8014496:	4b1d      	ldr	r3, [pc, #116]	; (801450c <_checkLoopTime+0x84>)
 8014498:	795b      	ldrb	r3, [r3, #5]
 801449a:	f003 0301 	and.w	r3, r3, #1
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d022      	beq.n	80144e8 <_checkLoopTime+0x60>
		if (timer_10ms) timer_10ms--;
 80144a2:	4b1b      	ldr	r3, [pc, #108]	; (8014510 <_checkLoopTime+0x88>)
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d006      	beq.n	80144b8 <_checkLoopTime+0x30>
 80144aa:	4b19      	ldr	r3, [pc, #100]	; (8014510 <_checkLoopTime+0x88>)
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	3b01      	subs	r3, #1
 80144b0:	b2da      	uxtb	r2, r3
 80144b2:	4b17      	ldr	r3, [pc, #92]	; (8014510 <_checkLoopTime+0x88>)
 80144b4:	701a      	strb	r2, [r3, #0]
 80144b6:	e017      	b.n	80144e8 <_checkLoopTime+0x60>
		else {
			timer_10ms = 9;
 80144b8:	4b15      	ldr	r3, [pc, #84]	; (8014510 <_checkLoopTime+0x88>)
 80144ba:	2209      	movs	r2, #9
 80144bc:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 80144be:	4b15      	ldr	r3, [pc, #84]	; (8014514 <_checkLoopTime+0x8c>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2264      	movs	r2, #100	; 0x64
 80144c4:	fb03 f202 	mul.w	r2, r3, r2
 80144c8:	4b13      	ldr	r3, [pc, #76]	; (8014518 <_checkLoopTime+0x90>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80144d6:	b2da      	uxtb	r2, r3
 80144d8:	4b0c      	ldr	r3, [pc, #48]	; (801450c <_checkLoopTime+0x84>)
 80144da:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 80144dc:	4b0e      	ldr	r3, [pc, #56]	; (8014518 <_checkLoopTime+0x90>)
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 80144e2:	4b0c      	ldr	r3, [pc, #48]	; (8014514 <_checkLoopTime+0x8c>)
 80144e4:	2200      	movs	r2, #0
 80144e6:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 80144e8:	4b08      	ldr	r3, [pc, #32]	; (801450c <_checkLoopTime+0x84>)
 80144ea:	795b      	ldrb	r3, [r3, #5]
 80144ec:	f003 0302 	and.w	r3, r3, #2
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d002      	beq.n	80144fa <_checkLoopTime+0x72>
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 80144f4:	4b05      	ldr	r3, [pc, #20]	; (801450c <_checkLoopTime+0x84>)
 80144f6:	2200      	movs	r2, #0
 80144f8:	601a      	str	r2, [r3, #0]
	#endif
		max_loop = 0UL;
    }
#endif

	pif_performance.__state = 0;
 80144fa:	4b04      	ldr	r3, [pc, #16]	; (801450c <_checkLoopTime+0x84>)
 80144fc:	2200      	movs	r2, #0
 80144fe:	715a      	strb	r2, [r3, #5]
}
 8014500:	bf00      	nop
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20001dd4 	.word	0x20001dd4
 8014510:	20001f2c 	.word	0x20001f2c
 8014514:	20001f24 	.word	0x20001f24
 8014518:	20001f20 	.word	0x20001f20

0801451c <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    pif_id++;
 8014524:	4b07      	ldr	r3, [pc, #28]	; (8014544 <pifTask_Init+0x28>)
 8014526:	881b      	ldrh	r3, [r3, #0]
 8014528:	3301      	adds	r3, #1
 801452a:	b29a      	uxth	r2, r3
 801452c:	4b05      	ldr	r3, [pc, #20]	; (8014544 <pifTask_Init+0x28>)
 801452e:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 8014530:	4b04      	ldr	r3, [pc, #16]	; (8014544 <pifTask_Init+0x28>)
 8014532:	881a      	ldrh	r2, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	80da      	strh	r2, [r3, #6]
}
 8014538:	bf00      	nop
 801453a:	370c      	adds	r7, #12
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr
 8014544:	20000128 	.word	0x20000128

08014548 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	460b      	mov	r3, r1
 8014552:	70fb      	strb	r3, [r7, #3]
 8014554:	4613      	mov	r3, r2
 8014556:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	7a1a      	ldrb	r2, [r3, #8]
 801455c:	78fb      	ldrb	r3, [r7, #3]
 801455e:	429a      	cmp	r2, r3
 8014560:	d101      	bne.n	8014566 <pifTask_ChangeMode+0x1e>
 8014562:	2301      	movs	r3, #1
 8014564:	e028      	b.n	80145b8 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	7a1b      	ldrb	r3, [r3, #8]
 801456a:	2b06      	cmp	r3, #6
 801456c:	d102      	bne.n	8014574 <pifTask_ChangeMode+0x2c>
 801456e:	4b14      	ldr	r3, [pc, #80]	; (80145c0 <pifTask_ChangeMode+0x78>)
 8014570:	2200      	movs	r2, #0
 8014572:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 8014574:	883a      	ldrh	r2, [r7, #0]
 8014576:	1cfb      	adds	r3, r7, #3
 8014578:	4611      	mov	r1, r2
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff fe14 	bl	80141a8 <_checkParam>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d101      	bne.n	801458a <pifTask_ChangeMode+0x42>
 8014586:	2300      	movs	r3, #0
 8014588:	e016      	b.n	80145b8 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	7a1b      	ldrb	r3, [r3, #8]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d805      	bhi.n	801459e <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014596:	4618      	mov	r0, r3
 8014598:	f7ff fd3a 	bl	8014010 <_resetTable>
		break;
 801459c:	e000      	b.n	80145a0 <pifTask_ChangeMode+0x58>

	default:
		break;
 801459e:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	883a      	ldrh	r2, [r7, #0]
 80145a4:	4619      	mov	r1, r3
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7ff fe6c 	bl	8014284 <_setParam>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <pifTask_ChangeMode+0x6e>
 80145b2:	2300      	movs	r3, #0
 80145b4:	e000      	b.n	80145b8 <pifTask_ChangeMode+0x70>

    return TRUE;
 80145b6:	2301      	movs	r3, #1
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	20001e94 	.word	0x20001e94

080145c4 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80145c4:	b480      	push	{r7}
 80145c6:	b083      	sub	sp, #12
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	460b      	mov	r3, r1
 80145ce:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	7a1b      	ldrb	r3, [r3, #8]
 80145d4:	2b03      	cmp	r3, #3
 80145d6:	dc02      	bgt.n	80145de <pifTask_ChangePeriod+0x1a>
 80145d8:	2b02      	cmp	r3, #2
 80145da:	da02      	bge.n	80145e2 <pifTask_ChangePeriod+0x1e>
 80145dc:	e007      	b.n	80145ee <pifTask_ChangePeriod+0x2a>
 80145de:	2b09      	cmp	r3, #9
 80145e0:	d105      	bne.n	80145ee <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	887a      	ldrh	r2, [r7, #2]
 80145e6:	815a      	strh	r2, [r3, #10]
		break;
 80145e8:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 80145ea:	2301      	movs	r3, #1
 80145ec:	e003      	b.n	80145f6 <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 80145ee:	4b05      	ldr	r3, [pc, #20]	; (8014604 <pifTask_ChangePeriod+0x40>)
 80145f0:	2209      	movs	r2, #9
 80145f2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80145f4:	2300      	movs	r3, #0
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	370c      	adds	r7, #12
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr
 8014602:	bf00      	nop
 8014604:	20001db8 	.word	0x20001db8

08014608 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d014      	beq.n	8014640 <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 8014616:	4b0d      	ldr	r3, [pc, #52]	; (801464c <pifTask_SetTrigger+0x44>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d006      	beq.n	801462c <pifTask_SetTrigger+0x24>
 801461e:	4b0b      	ldr	r3, [pc, #44]	; (801464c <pifTask_SetTrigger+0x44>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	4798      	blx	r3
 8014624:	4602      	mov	r2, r0
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	649a      	str	r2, [r3, #72]	; 0x48
 801462a:	e003      	b.n	8014634 <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 801462c:	4b08      	ldr	r3, [pc, #32]	; (8014650 <pifTask_SetTrigger+0x48>)
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2201      	movs	r2, #1
 8014638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 8014640:	2300      	movs	r3, #0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	20001ddc 	.word	0x20001ddc
 8014650:	20001dd0 	.word	0x20001dd0

08014654 <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	460b      	mov	r3, r1
 801465e:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 8014660:	4b17      	ldr	r3, [pc, #92]	; (80146c0 <pifTask_GetDeltaTime+0x6c>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d107      	bne.n	8014678 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014668:	4b16      	ldr	r3, [pc, #88]	; (80146c4 <pifTask_GetDeltaTime+0x70>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014670:	fb02 f303 	mul.w	r3, r2, r3
 8014674:	60fb      	str	r3, [r7, #12]
 8014676:	e003      	b.n	8014680 <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 8014678:	4b11      	ldr	r3, [pc, #68]	; (80146c0 <pifTask_GetDeltaTime+0x6c>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4798      	blx	r3
 801467e:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014684:	68fa      	ldr	r2, [r7, #12]
 8014686:	1ad3      	subs	r3, r2, r3
 8014688:	60bb      	str	r3, [r7, #8]
	if (reset) {
 801468a:	78fb      	ldrb	r3, [r7, #3]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d011      	beq.n	80146b4 <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014694:	2b00      	cmp	r3, #0
 8014696:	d00a      	beq.n	80146ae <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	69da      	ldr	r2, [r3, #28]
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	441a      	add	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6a1b      	ldr	r3, [r3, #32]
 80146a8:	1c5a      	adds	r2, r3, #1
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 80146b4:	68bb      	ldr	r3, [r7, #8]
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20001ddc 	.word	0x20001ddc
 80146c4:	20001dd0 	.word	0x20001dd0

080146c8 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	2150      	movs	r1, #80	; 0x50
 80146d4:	480b      	ldr	r0, [pc, #44]	; (8014704 <pifTaskManager_Init+0x3c>)
 80146d6:	f7fe f8a5 	bl	8012824 <pifFixList_Init>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d101      	bne.n	80146e4 <pifTaskManager_Init+0x1c>
 80146e0:	2300      	movs	r3, #0
 80146e2:	e00b      	b.n	80146fc <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 80146e4:	4b08      	ldr	r3, [pc, #32]	; (8014708 <pifTaskManager_Init+0x40>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 80146ea:	4b08      	ldr	r3, [pc, #32]	; (801470c <pifTaskManager_Init+0x44>)
 80146ec:	2200      	movs	r2, #0
 80146ee:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 80146f0:	2280      	movs	r2, #128	; 0x80
 80146f2:	2100      	movs	r1, #0
 80146f4:	4806      	ldr	r0, [pc, #24]	; (8014710 <pifTaskManager_Init+0x48>)
 80146f6:	f00e fe77 	bl	80233e8 <memset>
	return TRUE;
 80146fa:	2301      	movs	r3, #1
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3708      	adds	r7, #8
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	20001e60 	.word	0x20001e60
 8014708:	20001e78 	.word	0x20001e78
 801470c:	20001e98 	.word	0x20001e98
 8014710:	20001e9c 	.word	0x20001e9c

08014714 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b086      	sub	sp, #24
 8014718:	af00      	add	r7, sp, #0
 801471a:	60ba      	str	r2, [r7, #8]
 801471c:	607b      	str	r3, [r7, #4]
 801471e:	4603      	mov	r3, r0
 8014720:	73fb      	strb	r3, [r7, #15]
 8014722:	460b      	mov	r3, r1
 8014724:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d104      	bne.n	8014736 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 801472c:	4b2a      	ldr	r3, [pc, #168]	; (80147d8 <pifTaskManager_Add+0xc4>)
 801472e:	2201      	movs	r2, #1
 8014730:	701a      	strb	r2, [r3, #0]
	    return NULL;
 8014732:	2300      	movs	r3, #0
 8014734:	e04b      	b.n	80147ce <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014736:	89ba      	ldrh	r2, [r7, #12]
 8014738:	f107 030f 	add.w	r3, r7, #15
 801473c:	4611      	mov	r1, r2
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fd32 	bl	80141a8 <_checkParam>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <pifTaskManager_Add+0x3a>
 801474a:	2300      	movs	r3, #0
 801474c:	e03f      	b.n	80147ce <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801474e:	4823      	ldr	r0, [pc, #140]	; (80147dc <pifTaskManager_Add+0xc8>)
 8014750:	f7fe f8fb 	bl	801294a <pifFixList_AddFirst>
 8014754:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <pifTaskManager_Add+0x4c>
 801475c:	2300      	movs	r3, #0
 801475e:	e036      	b.n	80147ce <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 8014760:	6978      	ldr	r0, [r7, #20]
 8014762:	f7ff fedb 	bl	801451c <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014766:	7bfb      	ldrb	r3, [r7, #15]
 8014768:	89ba      	ldrh	r2, [r7, #12]
 801476a:	4619      	mov	r1, r3
 801476c:	6978      	ldr	r0, [r7, #20]
 801476e:	f7ff fd89 	bl	8014284 <_setParam>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d021      	beq.n	80147bc <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	64da      	str	r2, [r3, #76]	; 0x4c
    p_owner->_p_client = p_client;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 8014784:	7bfb      	ldrb	r3, [r7, #15]
 8014786:	2b07      	cmp	r3, #7
 8014788:	d006      	beq.n	8014798 <pifTaskManager_Add+0x84>
 801478a:	7bfb      	ldrb	r3, [r7, #15]
 801478c:	2b06      	cmp	r3, #6
 801478e:	d003      	beq.n	8014798 <pifTaskManager_Add+0x84>
 8014790:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d101      	bne.n	801479c <pifTaskManager_Add+0x88>
 8014798:	2301      	movs	r3, #1
 801479a:	e000      	b.n	801479e <pifTaskManager_Add+0x8a>
 801479c:	2300      	movs	r3, #0
 801479e:	b2da      	uxtb	r2, r3
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80147a4:	4b0e      	ldr	r3, [pc, #56]	; (80147e0 <pifTaskManager_Add+0xcc>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d105      	bne.n	80147b8 <pifTaskManager_Add+0xa4>
 80147ac:	480b      	ldr	r0, [pc, #44]	; (80147dc <pifTaskManager_Add+0xc8>)
 80147ae:	f7fe f940 	bl	8012a32 <pifFixList_Begin>
 80147b2:	4603      	mov	r3, r0
 80147b4:	4a0a      	ldr	r2, [pc, #40]	; (80147e0 <pifTaskManager_Add+0xcc>)
 80147b6:	6013      	str	r3, [r2, #0]
    return p_owner;
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	e008      	b.n	80147ce <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80147bc:	bf00      	nop

fail:
	if (p_owner) {
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d003      	beq.n	80147cc <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 80147c4:	6979      	ldr	r1, [r7, #20]
 80147c6:	4805      	ldr	r0, [pc, #20]	; (80147dc <pifTaskManager_Add+0xc8>)
 80147c8:	f7fe f8f3 	bl	80129b2 <pifFixList_Remove>
	}
	return NULL;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3718      	adds	r7, #24
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	20001db8 	.word	0x20001db8
 80147dc:	20001e60 	.word	0x20001e60
 80147e0:	20001e78 	.word	0x20001e78

080147e4 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 80147ec:	4b17      	ldr	r3, [pc, #92]	; (801484c <pifTaskManager_Remove+0x68>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3308      	adds	r3, #8
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d102      	bne.n	80147fe <pifTaskManager_Remove+0x1a>
 80147f8:	4b14      	ldr	r3, [pc, #80]	; (801484c <pifTaskManager_Remove+0x68>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	7a1b      	ldrb	r3, [r3, #8]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d805      	bhi.n	8014812 <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff fc00 	bl	8014010 <_resetTable>
		break;
 8014810:	e000      	b.n	8014814 <pifTaskManager_Remove+0x30>

	default:
		break;
 8014812:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014814:	6879      	ldr	r1, [r7, #4]
 8014816:	480e      	ldr	r0, [pc, #56]	; (8014850 <pifTaskManager_Remove+0x6c>)
 8014818:	f7fe f8cb 	bl	80129b2 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 801481c:	480c      	ldr	r0, [pc, #48]	; (8014850 <pifTaskManager_Remove+0x6c>)
 801481e:	f7fe f8fc 	bl	8012a1a <pifFixList_Count>
 8014822:	4603      	mov	r3, r0
 8014824:	2b00      	cmp	r3, #0
 8014826:	d103      	bne.n	8014830 <pifTaskManager_Remove+0x4c>
 8014828:	4b08      	ldr	r3, [pc, #32]	; (801484c <pifTaskManager_Remove+0x68>)
 801482a:	2200      	movs	r2, #0
 801482c:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 801482e:	e009      	b.n	8014844 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014830:	4b06      	ldr	r3, [pc, #24]	; (801484c <pifTaskManager_Remove+0x68>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d105      	bne.n	8014844 <pifTaskManager_Remove+0x60>
 8014838:	4805      	ldr	r0, [pc, #20]	; (8014850 <pifTaskManager_Remove+0x6c>)
 801483a:	f7fe f8fa 	bl	8012a32 <pifFixList_Begin>
 801483e:	4603      	mov	r3, r0
 8014840:	4a02      	ldr	r2, [pc, #8]	; (801484c <pifTaskManager_Remove+0x68>)
 8014842:	6013      	str	r3, [r2, #0]
}
 8014844:	bf00      	nop
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	20001e78 	.word	0x20001e78
 8014850:	20001e60 	.word	0x20001e60

08014854 <pifTaskManager_Loop>:
{
	return pifFixList_Count(&s_tasks);
}

void pifTaskManager_Loop()
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b08a      	sub	sp, #40	; 0x28
 8014858:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 801485a:	2300      	movs	r3, #0
 801485c:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 801485e:	2300      	movs	r3, #0
 8014860:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014862:	2300      	movs	r3, #0
 8014864:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 8014866:	2300      	movs	r3, #0
 8014868:	613b      	str	r3, [r7, #16]
 801486a:	487f      	ldr	r0, [pc, #508]	; (8014a68 <pifTaskManager_Loop+0x214>)
 801486c:	f7fe f8d5 	bl	8012a1a <pifFixList_Count>
 8014870:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 8014872:	2300      	movs	r3, #0
 8014874:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014876:	4b7d      	ldr	r3, [pc, #500]	; (8014a6c <pifTaskManager_Loop+0x218>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d005      	beq.n	801488a <pifTaskManager_Loop+0x36>
 801487e:	4b7b      	ldr	r3, [pc, #492]	; (8014a6c <pifTaskManager_Loop+0x218>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4798      	blx	r3
 8014884:	4603      	mov	r3, r0
 8014886:	4a7a      	ldr	r2, [pc, #488]	; (8014a70 <pifTaskManager_Loop+0x21c>)
 8014888:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 801488a:	4b7a      	ldr	r3, [pc, #488]	; (8014a74 <pifTaskManager_Loop+0x220>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d109      	bne.n	80148a6 <pifTaskManager_Loop+0x52>
		if (!count) return;
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 80e3 	beq.w	8014a60 <pifTaskManager_Loop+0x20c>
		s_it_current = pifFixList_Begin(&s_tasks);
 801489a:	4873      	ldr	r0, [pc, #460]	; (8014a68 <pifTaskManager_Loop+0x214>)
 801489c:	f7fe f8c9 	bl	8012a32 <pifFixList_Begin>
 80148a0:	4603      	mov	r3, r0
 80148a2:	4a74      	ldr	r2, [pc, #464]	; (8014a74 <pifTaskManager_Loop+0x220>)
 80148a4:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80148a6:	4b74      	ldr	r3, [pc, #464]	; (8014a78 <pifTaskManager_Loop+0x224>)
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	4413      	add	r3, r2
 80148ae:	4a72      	ldr	r2, [pc, #456]	; (8014a78 <pifTaskManager_Loop+0x224>)
 80148b0:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 80148b2:	4b72      	ldr	r3, [pc, #456]	; (8014a7c <pifTaskManager_Loop+0x228>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d013      	beq.n	80148e2 <pifTaskManager_Loop+0x8e>
 80148ba:	4b70      	ldr	r3, [pc, #448]	; (8014a7c <pifTaskManager_Loop+0x228>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d00c      	beq.n	80148e2 <pifTaskManager_Loop+0x8e>
		s_task_cutin->__trigger = FALSE;
 80148c8:	4b6c      	ldr	r3, [pc, #432]	; (8014a7c <pifTaskManager_Loop+0x228>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	2200      	movs	r2, #0
 80148ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 80148d2:	4b6a      	ldr	r3, [pc, #424]	; (8014a7c <pifTaskManager_Loop+0x228>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 80148d8:	2301      	movs	r3, #1
 80148da:	73fb      	strb	r3, [r7, #15]
		i = 1;
 80148dc:	2301      	movs	r3, #1
 80148de:	61bb      	str	r3, [r7, #24]
 80148e0:	e063      	b.n	80149aa <pifTaskManager_Loop+0x156>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 80148e2:	2300      	movs	r3, #0
 80148e4:	617b      	str	r3, [r7, #20]
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	61bb      	str	r3, [r7, #24]
 80148ea:	e057      	b.n	801499c <pifTaskManager_Loop+0x148>
			p_owner = (PifTask*)s_it_current->data;
 80148ec:	4b61      	ldr	r3, [pc, #388]	; (8014a74 <pifTaskManager_Loop+0x220>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	3308      	adds	r3, #8
 80148f2:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d008      	beq.n	8014912 <pifTaskManager_Loop+0xbe>
				p_owner->__trigger = FALSE;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 801490c:	2301      	movs	r3, #1
 801490e:	73fb      	strb	r3, [r7, #15]
 8014910:	e02d      	b.n	801496e <pifTaskManager_Loop+0x11a>
			}
			else if (!p_owner->pause) {
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	791b      	ldrb	r3, [r3, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d129      	bne.n	801496e <pifTaskManager_Loop+0x11a>
				if (p_owner->_mode == TM_TIMER) {
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	7a1b      	ldrb	r3, [r3, #8]
 801491e:	2b08      	cmp	r3, #8
 8014920:	d107      	bne.n	8014932 <pifTaskManager_Loop+0xde>
					(*p_owner->__evt_loop)(p_owner);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	4798      	blx	r3
					t++;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	3301      	adds	r3, #1
 801492e:	613b      	str	r3, [r7, #16]
 8014930:	e01d      	b.n	801496e <pifTaskManager_Loop+0x11a>
				}
				else if (p_owner->__processing) {
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014936:	2b00      	cmp	r3, #0
 8014938:	d019      	beq.n	801496e <pifTaskManager_Loop+0x11a>
					if (p_owner->_mode == TM_IDLE_MS) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	7a1b      	ldrb	r3, [r3, #8]
 801493e:	2b09      	cmp	r3, #9
 8014940:	d110      	bne.n	8014964 <pifTaskManager_Loop+0x110>
						if (!p_idle) {
 8014942:	6a3b      	ldr	r3, [r7, #32]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d112      	bne.n	801496e <pifTaskManager_Loop+0x11a>
							p_idle = (*p_owner->__processing)(p_owner);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	4798      	blx	r3
 8014950:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00a      	beq.n	801496e <pifTaskManager_Loop+0x11a>
								it_idle = s_it_current;
 8014958:	4b46      	ldr	r3, [pc, #280]	; (8014a74 <pifTaskManager_Loop+0x220>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	61fb      	str	r3, [r7, #28]
								n = i;
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	617b      	str	r3, [r7, #20]
 8014962:	e004      	b.n	801496e <pifTaskManager_Loop+0x11a>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	4798      	blx	r3
 801496c:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 801496e:	4b41      	ldr	r3, [pc, #260]	; (8014a74 <pifTaskManager_Loop+0x220>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	4618      	mov	r0, r3
 8014974:	f7fe f869 	bl	8012a4a <pifFixList_Next>
 8014978:	4603      	mov	r3, r0
 801497a:	4a3e      	ldr	r2, [pc, #248]	; (8014a74 <pifTaskManager_Loop+0x220>)
 801497c:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 801497e:	4b3d      	ldr	r3, [pc, #244]	; (8014a74 <pifTaskManager_Loop+0x220>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d107      	bne.n	8014996 <pifTaskManager_Loop+0x142>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014986:	4838      	ldr	r0, [pc, #224]	; (8014a68 <pifTaskManager_Loop+0x214>)
 8014988:	f7fe f853 	bl	8012a32 <pifFixList_Begin>
 801498c:	4603      	mov	r3, r0
 801498e:	4a39      	ldr	r2, [pc, #228]	; (8014a74 <pifTaskManager_Loop+0x220>)
 8014990:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 8014992:	f7ff fd79 	bl	8014488 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014996:	69bb      	ldr	r3, [r7, #24]
 8014998:	3301      	adds	r3, #1
 801499a:	61bb      	str	r3, [r7, #24]
 801499c:	69ba      	ldr	r2, [r7, #24]
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	da02      	bge.n	80149aa <pifTaskManager_Loop+0x156>
 80149a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0a0      	beq.n	80148ec <pifTaskManager_Loop+0x98>
			}
		}
	}

	if (p_select) {
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d034      	beq.n	8014a1a <pifTaskManager_Loop+0x1c6>
		if (trigger) {
 80149b0:	7bfb      	ldrb	r3, [r7, #15]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d02d      	beq.n	8014a12 <pifTaskManager_Loop+0x1be>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80149b6:	4b2d      	ldr	r3, [pc, #180]	; (8014a6c <pifTaskManager_Loop+0x218>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d00c      	beq.n	80149d8 <pifTaskManager_Loop+0x184>
 80149be:	4b2b      	ldr	r3, [pc, #172]	; (8014a6c <pifTaskManager_Loop+0x218>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4798      	blx	r3
 80149c4:	4603      	mov	r3, r0
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	1ad3      	subs	r3, r2, r3
 80149d0:	b29a      	uxth	r2, r3
 80149d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80149d6:	e009      	b.n	80149ec <pifTaskManager_Loop+0x198>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 80149d8:	4b29      	ldr	r3, [pc, #164]	; (8014a80 <pifTaskManager_Loop+0x22c>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	b29a      	uxth	r2, r3
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	1ad3      	subs	r3, r2, r3
 80149e6:	b29a      	uxth	r2, r3
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 80149ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80149f0:	461a      	mov	r2, r3
 80149f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d904      	bls.n	8014a04 <pifTaskManager_Loop+0x1b0>
 80149fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80149fe:	461a      	mov	r2, r3
 8014a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a02:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a0a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014a0c:	441a      	add	r2, r3
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 8014a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a14:	f7ff fcb4 	bl	8014380 <_processingTask>
 8014a18:	e018      	b.n	8014a4c <pifTaskManager_Loop+0x1f8>
	}
	else if (p_idle) {
 8014a1a:	6a3b      	ldr	r3, [r7, #32]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d015      	beq.n	8014a4c <pifTaskManager_Loop+0x1f8>
		i = n;
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014a24:	69f8      	ldr	r0, [r7, #28]
 8014a26:	f7fe f810 	bl	8012a4a <pifFixList_Next>
 8014a2a:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d106      	bne.n	8014a40 <pifTaskManager_Loop+0x1ec>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014a32:	480d      	ldr	r0, [pc, #52]	; (8014a68 <pifTaskManager_Loop+0x214>)
 8014a34:	f7fd fffd 	bl	8012a32 <pifFixList_Begin>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	4a0e      	ldr	r2, [pc, #56]	; (8014a74 <pifTaskManager_Loop+0x220>)
 8014a3c:	6013      	str	r3, [r2, #0]
 8014a3e:	e002      	b.n	8014a46 <pifTaskManager_Loop+0x1f2>
		}
		else {
			s_it_current = it_idle;
 8014a40:	4a0c      	ldr	r2, [pc, #48]	; (8014a74 <pifTaskManager_Loop+0x220>)
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 8014a46:	6a38      	ldr	r0, [r7, #32]
 8014a48:	f7ff fc9a 	bl	8014380 <_processingTask>
	}
	s_pass_count += i - t;
 8014a4c:	69ba      	ldr	r2, [r7, #24]
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	461a      	mov	r2, r3
 8014a54:	4b0b      	ldr	r3, [pc, #44]	; (8014a84 <pifTaskManager_Loop+0x230>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4413      	add	r3, r2
 8014a5a:	4a0a      	ldr	r2, [pc, #40]	; (8014a84 <pifTaskManager_Loop+0x230>)
 8014a5c:	6013      	str	r3, [r2, #0]
 8014a5e:	e000      	b.n	8014a62 <pifTaskManager_Loop+0x20e>
		if (!count) return;
 8014a60:	bf00      	nop
}
 8014a62:	3728      	adds	r7, #40	; 0x28
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	20001e60 	.word	0x20001e60
 8014a6c:	20001ddc 	.word	0x20001ddc
 8014a70:	20001dbc 	.word	0x20001dbc
 8014a74:	20001e78 	.word	0x20001e78
 8014a78:	20001f20 	.word	0x20001f20
 8014a7c:	20001e94 	.word	0x20001e94
 8014a80:	20001dd0 	.word	0x20001dd0
 8014a84:	20001f24 	.word	0x20001f24

08014a88 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b08a      	sub	sp, #40	; 0x28
 8014a8c:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014a92:	2300      	movs	r3, #0
 8014a94:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014a96:	2300      	movs	r3, #0
 8014a98:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	60fb      	str	r3, [r7, #12]
 8014a9e:	488d      	ldr	r0, [pc, #564]	; (8014cd4 <pifTaskManager_Yield+0x24c>)
 8014aa0:	f7fd ffbb 	bl	8012a1a <pifFixList_Count>
 8014aa4:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	72fb      	strb	r3, [r7, #11]
	BOOL rtn = TRUE;
 8014aaa:	2301      	movs	r3, #1
 8014aac:	72bb      	strb	r3, [r7, #10]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014aae:	4b8a      	ldr	r3, [pc, #552]	; (8014cd8 <pifTaskManager_Yield+0x250>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d005      	beq.n	8014ac2 <pifTaskManager_Yield+0x3a>
 8014ab6:	4b88      	ldr	r3, [pc, #544]	; (8014cd8 <pifTaskManager_Yield+0x250>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	4798      	blx	r3
 8014abc:	4603      	mov	r3, r0
 8014abe:	4a87      	ldr	r2, [pc, #540]	; (8014cdc <pifTaskManager_Yield+0x254>)
 8014ac0:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014ac2:	4b87      	ldr	r3, [pc, #540]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10a      	bne.n	8014ae0 <pifTaskManager_Yield+0x58>
		if (!count) return FALSE;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d101      	bne.n	8014ad4 <pifTaskManager_Yield+0x4c>
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	e136      	b.n	8014d42 <pifTaskManager_Yield+0x2ba>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014ad4:	487f      	ldr	r0, [pc, #508]	; (8014cd4 <pifTaskManager_Yield+0x24c>)
 8014ad6:	f7fd ffac 	bl	8012a32 <pifFixList_Begin>
 8014ada:	4603      	mov	r3, r0
 8014adc:	4a80      	ldr	r2, [pc, #512]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014ade:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014ae0:	4b80      	ldr	r3, [pc, #512]	; (8014ce4 <pifTaskManager_Yield+0x25c>)
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	4413      	add	r3, r2
 8014ae8:	4a7e      	ldr	r2, [pc, #504]	; (8014ce4 <pifTaskManager_Yield+0x25c>)
 8014aea:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 8014aec:	4b7e      	ldr	r3, [pc, #504]	; (8014ce8 <pifTaskManager_Yield+0x260>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d018      	beq.n	8014b26 <pifTaskManager_Yield+0x9e>
 8014af4:	4b7c      	ldr	r3, [pc, #496]	; (8014ce8 <pifTaskManager_Yield+0x260>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d011      	beq.n	8014b26 <pifTaskManager_Yield+0x9e>
 8014b02:	4b79      	ldr	r3, [pc, #484]	; (8014ce8 <pifTaskManager_Yield+0x260>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	7a5b      	ldrb	r3, [r3, #9]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d10c      	bne.n	8014b26 <pifTaskManager_Yield+0x9e>
		s_task_cutin->__trigger = FALSE;
 8014b0c:	4b76      	ldr	r3, [pc, #472]	; (8014ce8 <pifTaskManager_Yield+0x260>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2200      	movs	r2, #0
 8014b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014b16:	4b74      	ldr	r3, [pc, #464]	; (8014ce8 <pifTaskManager_Yield+0x260>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	72fb      	strb	r3, [r7, #11]
		i = 1;
 8014b20:	2301      	movs	r3, #1
 8014b22:	61bb      	str	r3, [r7, #24]
 8014b24:	e098      	b.n	8014c58 <pifTaskManager_Yield+0x1d0>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014b26:	2300      	movs	r3, #0
 8014b28:	613b      	str	r3, [r7, #16]
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	61bb      	str	r3, [r7, #24]
 8014b2e:	e08b      	b.n	8014c48 <pifTaskManager_Yield+0x1c0>
			p_owner = (PifTask*)s_it_current->data;
 8014b30:	4b6b      	ldr	r3, [pc, #428]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	3308      	adds	r3, #8
 8014b36:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	7a5b      	ldrb	r3, [r3, #9]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d163      	bne.n	8014c08 <pifTaskManager_Yield+0x180>
			if (s_task_stack_ptr) {
 8014b40:	4b6a      	ldr	r3, [pc, #424]	; (8014cec <pifTaskManager_Yield+0x264>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d021      	beq.n	8014b8c <pifTaskManager_Yield+0x104>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014b48:	2300      	movs	r3, #0
 8014b4a:	617b      	str	r3, [r7, #20]
 8014b4c:	e012      	b.n	8014b74 <pifTaskManager_Yield+0xec>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b4e:	4a68      	ldr	r2, [pc, #416]	; (8014cf0 <pifTaskManager_Yield+0x268>)
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b56:	795b      	ldrb	r3, [r3, #5]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d008      	beq.n	8014b6e <pifTaskManager_Yield+0xe6>
 8014b5c:	4a64      	ldr	r2, [pc, #400]	; (8014cf0 <pifTaskManager_Yield+0x268>)
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b64:	795a      	ldrb	r2, [r3, #5]
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	795b      	ldrb	r3, [r3, #5]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d008      	beq.n	8014b80 <pifTaskManager_Yield+0xf8>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	3301      	adds	r3, #1
 8014b72:	617b      	str	r3, [r7, #20]
 8014b74:	4b5d      	ldr	r3, [pc, #372]	; (8014cec <pifTaskManager_Yield+0x264>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	697a      	ldr	r2, [r7, #20]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	dbe7      	blt.n	8014b4e <pifTaskManager_Yield+0xc6>
 8014b7e:	e000      	b.n	8014b82 <pifTaskManager_Yield+0xfa>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b80:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 8014b82:	4b5a      	ldr	r3, [pc, #360]	; (8014cec <pifTaskManager_Yield+0x264>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	697a      	ldr	r2, [r7, #20]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	db3f      	blt.n	8014c0c <pifTaskManager_Yield+0x184>
			}

			if (p_owner->__trigger) {
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d008      	beq.n	8014baa <pifTaskManager_Yield+0x122>
				p_owner->__trigger = FALSE;
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	72fb      	strb	r3, [r7, #11]
 8014ba8:	e033      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
			}
			else if (!p_owner->pause) {
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	791b      	ldrb	r3, [r3, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d12e      	bne.n	8014c10 <pifTaskManager_Yield+0x188>
				if (p_owner->_mode == TM_TIMER) {
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	7a1b      	ldrb	r3, [r3, #8]
 8014bb6:	2b08      	cmp	r3, #8
 8014bb8:	d107      	bne.n	8014bca <pifTaskManager_Yield+0x142>
					(*p_owner->__evt_loop)(p_owner);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bbe:	6838      	ldr	r0, [r7, #0]
 8014bc0:	4798      	blx	r3
					t++;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	60fb      	str	r3, [r7, #12]
 8014bc8:	e023      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
				}
				else if (p_owner->__processing) {
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d01e      	beq.n	8014c10 <pifTaskManager_Yield+0x188>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	7a1b      	ldrb	r3, [r3, #8]
 8014bd6:	2b09      	cmp	r3, #9
 8014bd8:	d110      	bne.n	8014bfc <pifTaskManager_Yield+0x174>
						if (!p_idle) {
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d118      	bne.n	8014c12 <pifTaskManager_Yield+0x18a>
							p_idle = (*p_owner->__processing)(p_owner);
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014be4:	6838      	ldr	r0, [r7, #0]
 8014be6:	4798      	blx	r3
 8014be8:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014bea:	6a3b      	ldr	r3, [r7, #32]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d010      	beq.n	8014c12 <pifTaskManager_Yield+0x18a>
								it_idle = s_it_current;
 8014bf0:	4b3b      	ldr	r3, [pc, #236]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	61fb      	str	r3, [r7, #28]
								n = i;
 8014bf6:	69bb      	ldr	r3, [r7, #24]
 8014bf8:	613b      	str	r3, [r7, #16]
 8014bfa:	e00a      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c00:	6838      	ldr	r0, [r7, #0]
 8014c02:	4798      	blx	r3
 8014c04:	6278      	str	r0, [r7, #36]	; 0x24
 8014c06:	e004      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
			if (p_owner->_running) goto next;
 8014c08:	bf00      	nop
 8014c0a:	e002      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
				if (k < s_task_stack_ptr) goto next;
 8014c0c:	bf00      	nop
 8014c0e:	e000      	b.n	8014c12 <pifTaskManager_Yield+0x18a>
					}
				}
			}

next:
 8014c10:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8014c12:	4b33      	ldr	r3, [pc, #204]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fd ff17 	bl	8012a4a <pifFixList_Next>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	4a30      	ldr	r2, [pc, #192]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014c20:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014c22:	4b2f      	ldr	r3, [pc, #188]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d10b      	bne.n	8014c42 <pifTaskManager_Yield+0x1ba>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014c2a:	482a      	ldr	r0, [pc, #168]	; (8014cd4 <pifTaskManager_Yield+0x24c>)
 8014c2c:	f7fd ff01 	bl	8012a32 <pifFixList_Begin>
 8014c30:	4603      	mov	r3, r0
 8014c32:	4a2b      	ldr	r2, [pc, #172]	; (8014ce0 <pifTaskManager_Yield+0x258>)
 8014c34:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 8014c36:	4b2d      	ldr	r3, [pc, #180]	; (8014cec <pifTaskManager_Yield+0x264>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d001      	beq.n	8014c42 <pifTaskManager_Yield+0x1ba>
 8014c3e:	f7ff fc23 	bl	8014488 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014c42:	69bb      	ldr	r3, [r7, #24]
 8014c44:	3301      	adds	r3, #1
 8014c46:	61bb      	str	r3, [r7, #24]
 8014c48:	69ba      	ldr	r2, [r7, #24]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	da03      	bge.n	8014c58 <pifTaskManager_Yield+0x1d0>
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f43f af6c 	beq.w	8014b30 <pifTaskManager_Yield+0xa8>
			}
		}
	}

	if (p_select) {
 8014c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d04c      	beq.n	8014cf8 <pifTaskManager_Yield+0x270>
		if (trigger && s_task_stack_ptr) {
 8014c5e:	7afb      	ldrb	r3, [r7, #11]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d031      	beq.n	8014cc8 <pifTaskManager_Yield+0x240>
 8014c64:	4b21      	ldr	r3, [pc, #132]	; (8014cec <pifTaskManager_Yield+0x264>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d02d      	beq.n	8014cc8 <pifTaskManager_Yield+0x240>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014c6c:	4b1a      	ldr	r3, [pc, #104]	; (8014cd8 <pifTaskManager_Yield+0x250>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00c      	beq.n	8014c8e <pifTaskManager_Yield+0x206>
 8014c74:	4b18      	ldr	r3, [pc, #96]	; (8014cd8 <pifTaskManager_Yield+0x250>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4798      	blx	r3
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014c8c:	e009      	b.n	8014ca2 <pifTaskManager_Yield+0x21a>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014c8e:	4b19      	ldr	r3, [pc, #100]	; (8014cf4 <pifTaskManager_Yield+0x26c>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	b29a      	uxth	r2, r3
 8014c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	1ad3      	subs	r3, r2, r3
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d904      	bls.n	8014cba <pifTaskManager_Yield+0x232>
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb8:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cc0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014cc2:	441a      	add	r2, r3
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    rtn = _processingTask(p_select);
 8014cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cca:	f7ff fb59 	bl	8014380 <_processingTask>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	72bb      	strb	r3, [r7, #10]
 8014cd2:	e02c      	b.n	8014d2e <pifTaskManager_Yield+0x2a6>
 8014cd4:	20001e60 	.word	0x20001e60
 8014cd8:	20001ddc 	.word	0x20001ddc
 8014cdc:	20001dbc 	.word	0x20001dbc
 8014ce0:	20001e78 	.word	0x20001e78
 8014ce4:	20001f20 	.word	0x20001f20
 8014ce8:	20001e94 	.word	0x20001e94
 8014cec:	20001e90 	.word	0x20001e90
 8014cf0:	20001e7c 	.word	0x20001e7c
 8014cf4:	20001dd0 	.word	0x20001dd0
	}
	else if (p_idle) {
 8014cf8:	6a3b      	ldr	r3, [r7, #32]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d017      	beq.n	8014d2e <pifTaskManager_Yield+0x2a6>
		i = n;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014d02:	69f8      	ldr	r0, [r7, #28]
 8014d04:	f7fd fea1 	bl	8012a4a <pifFixList_Next>
 8014d08:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d106      	bne.n	8014d1e <pifTaskManager_Yield+0x296>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014d10:	480e      	ldr	r0, [pc, #56]	; (8014d4c <pifTaskManager_Yield+0x2c4>)
 8014d12:	f7fd fe8e 	bl	8012a32 <pifFixList_Begin>
 8014d16:	4603      	mov	r3, r0
 8014d18:	4a0d      	ldr	r2, [pc, #52]	; (8014d50 <pifTaskManager_Yield+0x2c8>)
 8014d1a:	6013      	str	r3, [r2, #0]
 8014d1c:	e002      	b.n	8014d24 <pifTaskManager_Yield+0x29c>
		}
		else {
			s_it_current = it_idle;
 8014d1e:	4a0c      	ldr	r2, [pc, #48]	; (8014d50 <pifTaskManager_Yield+0x2c8>)
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	6013      	str	r3, [r2, #0]
		}
	    rtn = _processingTask(p_idle);
 8014d24:	6a38      	ldr	r0, [r7, #32]
 8014d26:	f7ff fb2b 	bl	8014380 <_processingTask>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	72bb      	strb	r3, [r7, #10]
	}
	s_pass_count += i - t;
 8014d2e:	69ba      	ldr	r2, [r7, #24]
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	461a      	mov	r2, r3
 8014d36:	4b07      	ldr	r3, [pc, #28]	; (8014d54 <pifTaskManager_Yield+0x2cc>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4413      	add	r3, r2
 8014d3c:	4a05      	ldr	r2, [pc, #20]	; (8014d54 <pifTaskManager_Yield+0x2cc>)
 8014d3e:	6013      	str	r3, [r2, #0]
    return rtn;
 8014d40:	7abb      	ldrb	r3, [r7, #10]
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3728      	adds	r7, #40	; 0x28
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	20001e60 	.word	0x20001e60
 8014d50:	20001e78 	.word	0x20001e78
 8014d54:	20001f24 	.word	0x20001f24

08014d58 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d101      	bne.n	8014d6a <pifTaskManager_YieldMs+0x12>
 8014d66:	2300      	movs	r3, #0
 8014d68:	e011      	b.n	8014d8e <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014d6a:	4b0b      	ldr	r3, [pc, #44]	; (8014d98 <pifTaskManager_YieldMs+0x40>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014d70:	f7ff fe8a 	bl	8014a88 <pifTaskManager_Yield>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d101      	bne.n	8014d7e <pifTaskManager_YieldMs+0x26>
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e007      	b.n	8014d8e <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014d7e:	4b06      	ldr	r3, [pc, #24]	; (8014d98 <pifTaskManager_YieldMs+0x40>)
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	1ad3      	subs	r3, r2, r3
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d2f1      	bcs.n	8014d70 <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014d8c:	2301      	movs	r3, #1
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3710      	adds	r7, #16
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	20001dd0 	.word	0x20001dd0

08014d9c <pifTaskManager_Print>:
    }
    return TRUE;
}

void pifTaskManager_Print()
{
 8014d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d9e:	b091      	sub	sp, #68	; 0x44
 8014da0:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 8014da2:	4b40      	ldr	r3, [pc, #256]	; (8014ea4 <pifTaskManager_Print+0x108>)
 8014da4:	463c      	mov	r4, r7
 8014da6:	461d      	mov	r5, r3
 8014da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014db4:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 8014db8:	483b      	ldr	r0, [pc, #236]	; (8014ea8 <pifTaskManager_Print+0x10c>)
 8014dba:	f7fd fe2e 	bl	8012a1a <pifFixList_Count>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	493a      	ldr	r1, [pc, #232]	; (8014eac <pifTaskManager_Print+0x110>)
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	f7fe fc51 	bl	801366c <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 8014dca:	4837      	ldr	r0, [pc, #220]	; (8014ea8 <pifTaskManager_Print+0x10c>)
 8014dcc:	f7fd fe31 	bl	8012a32 <pifFixList_Begin>
 8014dd0:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014dd2:	e05f      	b.n	8014e94 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8014dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 8014dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d007      	beq.n	8014df2 <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8014de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	4931      	ldr	r1, [pc, #196]	; (8014eb0 <pifTaskManager_Print+0x114>)
 8014dea:	2000      	movs	r0, #0
 8014dec:	f7fe fc3e 	bl	801366c <pifLog_Printf>
 8014df0:	e003      	b.n	8014dfa <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8014df2:	4930      	ldr	r1, [pc, #192]	; (8014eb4 <pifTaskManager_Print+0x118>)
 8014df4:	2000      	movs	r0, #0
 8014df6:	f7fe fbab 	bl	8013550 <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dfc:	88db      	ldrh	r3, [r3, #6]
 8014dfe:	461e      	mov	r6, r3
 8014e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e02:	7a1b      	ldrb	r3, [r3, #8]
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	3330      	adds	r3, #48	; 0x30
 8014e08:	443b      	add	r3, r7
 8014e0a:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e10:	895b      	ldrh	r3, [r3, #10]
 8014e12:	461d      	mov	r5, r3
 8014e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e16:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e1a:	6951      	ldr	r1, [r2, #20]
 8014e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e1e:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e20:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014e26:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e28:	4c23      	ldr	r4, [pc, #140]	; (8014eb8 <pifTaskManager_Print+0x11c>)
 8014e2a:	fba4 4101 	umull	r4, r1, r4, r1
 8014e2e:	0989      	lsrs	r1, r1, #6
 8014e30:	9103      	str	r1, [sp, #12]
 8014e32:	9202      	str	r2, [sp, #8]
 8014e34:	9301      	str	r3, [sp, #4]
 8014e36:	9500      	str	r5, [sp, #0]
 8014e38:	4603      	mov	r3, r0
 8014e3a:	4632      	mov	r2, r6
 8014e3c:	491f      	ldr	r1, [pc, #124]	; (8014ebc <pifTaskManager_Print+0x120>)
 8014e3e:	2000      	movs	r0, #0
 8014e40:	f7fe fc14 	bl	801366c <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8014e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e46:	69db      	ldr	r3, [r3, #28]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00a      	beq.n	8014e62 <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8014e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4e:	69da      	ldr	r2, [r3, #28]
 8014e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e52:	6a1b      	ldr	r3, [r3, #32]
 8014e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e58:	461a      	mov	r2, r3
 8014e5a:	4919      	ldr	r1, [pc, #100]	; (8014ec0 <pifTaskManager_Print+0x124>)
 8014e5c:	2000      	movs	r0, #0
 8014e5e:	f7fe fc05 	bl	801366c <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8014e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d00c      	beq.n	8014e84 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 8014e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e74:	699b      	ldr	r3, [r3, #24]
 8014e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e7a:	460a      	mov	r2, r1
 8014e7c:	4911      	ldr	r1, [pc, #68]	; (8014ec4 <pifTaskManager_Print+0x128>)
 8014e7e:	2000      	movs	r0, #0
 8014e80:	f7fe fbf4 	bl	801366c <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 8014e84:	4910      	ldr	r1, [pc, #64]	; (8014ec8 <pifTaskManager_Print+0x12c>)
 8014e86:	2000      	movs	r0, #0
 8014e88:	f7fe fb62 	bl	8013550 <pifLog_Print>
		it = pifFixList_Next(it);
 8014e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014e8e:	f7fd fddc 	bl	8012a4a <pifFixList_Next>
 8014e92:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d19c      	bne.n	8014dd4 <pifTaskManager_Print+0x38>
	}
}
 8014e9a:	bf00      	nop
 8014e9c:	bf00      	nop
 8014e9e:	3734      	adds	r7, #52	; 0x34
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea4:	08027d00 	.word	0x08027d00
 8014ea8:	20001e60 	.word	0x20001e60
 8014eac:	08027c88 	.word	0x08027c88
 8014eb0:	08027c98 	.word	0x08027c98
 8014eb4:	08027ca0 	.word	0x08027ca0
 8014eb8:	10624dd3 	.word	0x10624dd3
 8014ebc:	08027ca8 	.word	0x08027ca8
 8014ec0:	08027cd4 	.word	0x08027cd4
 8014ec4:	08027ce4 	.word	0x08027ce4
 8014ec8:	08027cfc 	.word	0x08027cfc

08014ecc <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b086      	sub	sp, #24
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	3308      	adds	r3, #8
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7fd fda7 	bl	8012a32 <pifFixList_Begin>
 8014ee4:	6178      	str	r0, [r7, #20]
	while (it) {
 8014ee6:	e017      	b.n	8014f18 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	3308      	adds	r3, #8
 8014eec:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	7f1b      	ldrb	r3, [r3, #28]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d00c      	beq.n	8014f10 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6a1b      	ldr	r3, [r3, #32]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d005      	beq.n	8014f10 <_doTask+0x44>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	6912      	ldr	r2, [r2, #16]
 8014f0c:	4610      	mov	r0, r2
 8014f0e:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014f10:	6978      	ldr	r0, [r7, #20]
 8014f12:	f7fd fd9a 	bl	8012a4a <pifFixList_Next>
 8014f16:	6178      	str	r0, [r7, #20]
	while (it) {
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d1e4      	bne.n	8014ee8 <_doTask+0x1c>
	}
	return 0;
 8014f1e:	2300      	movs	r3, #0
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b086      	sub	sp, #24
 8014f2c:	af02      	add	r7, sp, #8
 8014f2e:	60f8      	str	r0, [r7, #12]
 8014f30:	607a      	str	r2, [r7, #4]
 8014f32:	603b      	str	r3, [r7, #0]
 8014f34:	460b      	mov	r3, r1
 8014f36:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d002      	beq.n	8014f44 <pifTimerManager_Init+0x1c>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d104      	bne.n	8014f4e <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014f44:	4b21      	ldr	r3, [pc, #132]	; (8014fcc <pifTimerManager_Init+0xa4>)
 8014f46:	2201      	movs	r2, #1
 8014f48:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	e03a      	b.n	8014fc4 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014f4e:	2224      	movs	r2, #36	; 0x24
 8014f50:	2100      	movs	r1, #0
 8014f52:	68f8      	ldr	r0, [r7, #12]
 8014f54:	f00e fa48 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014f58:	897b      	ldrh	r3, [r7, #10]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d106      	bne.n	8014f6c <pifTimerManager_Init+0x44>
 8014f5e:	4b1c      	ldr	r3, [pc, #112]	; (8014fd0 <pifTimerManager_Init+0xa8>)
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	1c5a      	adds	r2, r3, #1
 8014f64:	b291      	uxth	r1, r2
 8014f66:	4a1a      	ldr	r2, [pc, #104]	; (8014fd0 <pifTimerManager_Init+0xa8>)
 8014f68:	8011      	strh	r1, [r2, #0]
 8014f6a:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	897a      	ldrh	r2, [r7, #10]
 8014f70:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	3308      	adds	r3, #8
 8014f76:	683a      	ldr	r2, [r7, #0]
 8014f78:	2128      	movs	r1, #40	; 0x28
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fd fc52 	bl	8012824 <pifFixList_Init>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d017      	beq.n	8014fb6 <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	4a10      	ldr	r2, [pc, #64]	; (8014fd4 <pifTimerManager_Init+0xac>)
 8014f94:	2100      	movs	r1, #0
 8014f96:	2008      	movs	r0, #8
 8014f98:	f7ff fbbc 	bl	8014714 <pifTaskManager_Add>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6a1b      	ldr	r3, [r3, #32]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d007      	beq.n	8014fba <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6a1b      	ldr	r3, [r3, #32]
 8014fae:	4a0a      	ldr	r2, [pc, #40]	; (8014fd8 <pifTimerManager_Init+0xb0>)
 8014fb0:	601a      	str	r2, [r3, #0]
    return TRUE;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	e006      	b.n	8014fc4 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014fb6:	bf00      	nop
 8014fb8:	e000      	b.n	8014fbc <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 8014fba:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f000 f80d 	bl	8014fdc <pifTimerManager_Clear>
    return FALSE;
 8014fc2:	2300      	movs	r3, #0
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3710      	adds	r7, #16
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	20001db8 	.word	0x20001db8
 8014fd0:	20000128 	.word	0x20000128
 8014fd4:	08014ecd 	.word	0x08014ecd
 8014fd8:	08027d28 	.word	0x08027d28

08014fdc <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6a1b      	ldr	r3, [r3, #32]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d007      	beq.n	8014ffc <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6a1b      	ldr	r3, [r3, #32]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7ff fbf7 	bl	80147e4 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	3308      	adds	r3, #8
 8015000:	2100      	movs	r1, #0
 8015002:	4618      	mov	r0, r3
 8015004:	f7fd fc6e 	bl	80128e4 <pifFixList_Clear>
}
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	460b      	mov	r3, r1
 801501a:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	3308      	adds	r3, #8
 8015020:	4618      	mov	r0, r3
 8015022:	f7fd fc92 	bl	801294a <pifFixList_AddFirst>
 8015026:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d101      	bne.n	8015032 <pifTimerManager_Add+0x22>
 801502e:	2300      	movs	r3, #0
 8015030:	e006      	b.n	8015040 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	78fa      	ldrb	r2, [r7, #3]
 8015036:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2200      	movs	r2, #0
 801503c:	725a      	strb	r2, [r3, #9]
    return p_timer;
 801503e:	68fb      	ldr	r3, [r7, #12]
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2202      	movs	r2, #2
 8015054:	725a      	strb	r2, [r3, #9]
}
 8015056:	bf00      	nop
 8015058:	370c      	adds	r7, #12
 801505a:	46bd      	mov	sp, r7
 801505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015060:	4770      	bx	lr

08015062 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8015062:	b580      	push	{r7, lr}
 8015064:	b082      	sub	sp, #8
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	3308      	adds	r3, #8
 801506e:	4618      	mov	r0, r3
 8015070:	f7fd fcd3 	bl	8012a1a <pifFixList_Count>
 8015074:	4603      	mov	r3, r0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
	...

08015080 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	6039      	str	r1, [r7, #0]
	if (!target) {
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d104      	bne.n	801509a <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8015090:	4b11      	ldr	r3, [pc, #68]	; (80150d8 <pifTimer_Start+0x58>)
 8015092:	2201      	movs	r2, #1
 8015094:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015096:	2300      	movs	r3, #0
 8015098:	e017      	b.n	80150ca <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	7a5b      	ldrb	r3, [r3, #9]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d105      	bne.n	80150ae <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2201      	movs	r2, #1
 80150a6:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2200      	movs	r2, #0
 80150ac:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	683a      	ldr	r2, [r7, #0]
 80150b2:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	683a      	ldr	r2, [r7, #0]
 80150b8:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	7a1b      	ldrb	r3, [r3, #8]
 80150be:	2b02      	cmp	r3, #2
 80150c0:	d102      	bne.n	80150c8 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2200      	movs	r2, #0
 80150c6:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 80150c8:	2301      	movs	r3, #1
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	370c      	adds	r7, #12
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	20001db8 	.word	0x20001db8

080150dc <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2200      	movs	r2, #0
 80150ee:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	7a1b      	ldrb	r3, [r3, #8]
 80150f4:	2b02      	cmp	r3, #2
 80150f6:	d103      	bne.n	8015100 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	2000      	movs	r0, #0
 80150fe:	4798      	blx	r3
	}
}
 8015100:	bf00      	nop
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2201      	movs	r2, #1
 801511c:	725a      	strb	r2, [r3, #9]
}
 801511e:	bf00      	nop
 8015120:	370c      	adds	r7, #12
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr

0801512a <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 801512a:	b580      	push	{r7, lr}
 801512c:	b086      	sub	sp, #24
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8015132:	2300      	movs	r3, #0
 8015134:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2b00      	cmp	r3, #0
 801513a:	f000 8092 	beq.w	8015262 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	3308      	adds	r3, #8
 8015142:	4618      	mov	r0, r3
 8015144:	f7fd fc75 	bl	8012a32 <pifFixList_Begin>
 8015148:	6138      	str	r0, [r7, #16]
	while (it) {
 801514a:	e07c      	b.n	8015246 <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	3308      	adds	r3, #8
 8015150:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	7a5b      	ldrb	r3, [r3, #9]
 8015156:	2b02      	cmp	r3, #2
 8015158:	d105      	bne.n	8015166 <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d16e      	bne.n	801523e <pifTimerManager_sigTick+0x114>
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	617b      	str	r3, [r7, #20]
 8015164:	e06b      	b.n	801523e <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	68db      	ldr	r3, [r3, #12]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d060      	beq.n	8015230 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	1e5a      	subs	r2, r3, #1
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	7a1b      	ldrb	r3, [r3, #8]
 801517c:	2b02      	cmp	r3, #2
 801517e:	d031      	beq.n	80151e4 <pifTimerManager_sigTick+0xba>
 8015180:	2b02      	cmp	r3, #2
 8015182:	dc5c      	bgt.n	801523e <pifTimerManager_sigTick+0x114>
 8015184:	2b00      	cmp	r3, #0
 8015186:	d002      	beq.n	801518e <pifTimerManager_sigTick+0x64>
 8015188:	2b01      	cmp	r3, #1
 801518a:	d015      	beq.n	80151b8 <pifTimerManager_sigTick+0x8e>
 801518c:	e057      	b.n	801523e <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	68db      	ldr	r3, [r3, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d14e      	bne.n	8015234 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	2200      	movs	r2, #0
 801519a:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2201      	movs	r2, #1
 80151a0:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d044      	beq.n	8015234 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	6952      	ldr	r2, [r2, #20]
 80151b2:	4610      	mov	r0, r2
 80151b4:	4798      	blx	r3
					}
				}
				break;
 80151b6:	e03d      	b.n	8015234 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d13b      	bne.n	8015238 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2201      	movs	r2, #1
 80151cc:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d030      	beq.n	8015238 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151da:	68fa      	ldr	r2, [r7, #12]
 80151dc:	6952      	ldr	r2, [r2, #20]
 80151de:	4610      	mov	r0, r2
 80151e0:	4798      	blx	r3
					}
				}
				break;
 80151e2:	e029      	b.n	8015238 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	699a      	ldr	r2, [r3, #24]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d016      	beq.n	801521e <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d107      	bne.n	8015208 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	2000      	movs	r0, #0
 80151fe:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	68da      	ldr	r2, [r3, #12]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	699b      	ldr	r3, [r3, #24]
 8015210:	429a      	cmp	r2, r3
 8015212:	d113      	bne.n	801523c <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	2001      	movs	r0, #1
 801521a:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 801521c:	e00e      	b.n	801523c <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	68db      	ldr	r3, [r3, #12]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d10a      	bne.n	801523c <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	60da      	str	r2, [r3, #12]
				break;
 801522e:	e005      	b.n	801523c <pifTimerManager_sigTick+0x112>
			}
		}
 8015230:	bf00      	nop
 8015232:	e004      	b.n	801523e <pifTimerManager_sigTick+0x114>
				break;
 8015234:	bf00      	nop
 8015236:	e002      	b.n	801523e <pifTimerManager_sigTick+0x114>
				break;
 8015238:	bf00      	nop
 801523a:	e000      	b.n	801523e <pifTimerManager_sigTick+0x114>
				break;
 801523c:	bf00      	nop

		it = pifFixList_Next(it);
 801523e:	6938      	ldr	r0, [r7, #16]
 8015240:	f7fd fc03 	bl	8012a4a <pifFixList_Next>
 8015244:	6138      	str	r0, [r7, #16]
	while (it) {
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	2b00      	cmp	r3, #0
 801524a:	f47f af7f 	bne.w	801514c <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d007      	beq.n	8015264 <pifTimerManager_sigTick+0x13a>
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	3308      	adds	r3, #8
 8015258:	6979      	ldr	r1, [r7, #20]
 801525a:	4618      	mov	r0, r3
 801525c:	f7fd fba9 	bl	80129b2 <pifFixList_Remove>
 8015260:	e000      	b.n	8015264 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015262:	bf00      	nop
}
 8015264:	3718      	adds	r7, #24
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801526a:	b480      	push	{r7}
 801526c:	b085      	sub	sp, #20
 801526e:	af00      	add	r7, sp, #0
 8015270:	60f8      	str	r0, [r7, #12]
 8015272:	60b9      	str	r1, [r7, #8]
 8015274:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	68ba      	ldr	r2, [r7, #8]
 801527a:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	611a      	str	r2, [r3, #16]
}
 8015282:	bf00      	nop
 8015284:	3714      	adds	r7, #20
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr
	...

08015290 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	460b      	mov	r3, r1
 801529a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d104      	bne.n	80152ac <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80152a2:	4b09      	ldr	r3, [pc, #36]	; (80152c8 <pifNoiseFilter_Init+0x38>)
 80152a4:	2201      	movs	r2, #1
 80152a6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80152a8:	2300      	movs	r3, #0
 80152aa:	e008      	b.n	80152be <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 80152ac:	2208      	movs	r2, #8
 80152ae:	2100      	movs	r1, #0
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f00e f899 	bl	80233e8 <memset>

    p_owner->_type = type;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	78fa      	ldrb	r2, [r7, #3]
 80152ba:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80152bc:	2301      	movs	r3, #1
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20001db8 	.word	0x20001db8

080152cc <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	6839      	ldr	r1, [r7, #0]
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	4798      	blx	r3
 80152e0:	4603      	mov	r3, r0
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3708      	adds	r7, #8
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b082      	sub	sp, #8
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d002      	beq.n	8015300 <_clear+0x16>
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d00d      	beq.n	801531a <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 80152fe:	e01c      	b.n	801533a <_clear+0x50>
		if (p_owner->__wf.value) {
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	699b      	ldr	r3, [r3, #24]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d015      	beq.n	8015334 <_clear+0x4a>
			free(p_owner->__wf.value);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	699b      	ldr	r3, [r3, #24]
 801530c:	4618      	mov	r0, r3
 801530e:	f00e f855 	bl	80233bc <free>
			p_owner->__wf.value = NULL;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	2200      	movs	r2, #0
 8015316:	619a      	str	r2, [r3, #24]
		break;
 8015318:	e00c      	b.n	8015334 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	69db      	ldr	r3, [r3, #28]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d00a      	beq.n	8015338 <_clear+0x4e>
			free(p_owner->__nc.diff);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	69db      	ldr	r3, [r3, #28]
 8015326:	4618      	mov	r0, r3
 8015328:	f00e f848 	bl	80233bc <free>
			p_owner->__nc.diff = NULL;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2200      	movs	r2, #0
 8015330:	61da      	str	r2, [r3, #28]
		break;
 8015332:	e001      	b.n	8015338 <_clear+0x4e>
		break;
 8015334:	bf00      	nop
 8015336:	e000      	b.n	801533a <_clear+0x50>
		break;
 8015338:	bf00      	nop
	}
}
 801533a:	bf00      	nop
 801533c:	3708      	adds	r7, #8
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}

08015342 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015342:	b480      	push	{r7}
 8015344:	b085      	sub	sp, #20
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015356:	3301      	adds	r3, #1
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801535e:	fb93 f1f2 	sdiv	r1, r3, r2
 8015362:	fb01 f202 	mul.w	r2, r1, r2
 8015366:	1a9b      	subs	r3, r3, r2
 8015368:	b25a      	sxtb	r2, r3
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	699a      	ldr	r2, [r3, #24]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	6919      	ldr	r1, [r3, #16]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	440b      	add	r3, r1
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	1ad2      	subs	r2, r2, r3
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	691a      	ldr	r2, [r3, #16]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4413      	add	r3, r2
 8015396:	683a      	ldr	r2, [r7, #0]
 8015398:	6812      	ldr	r2, [r2, #0]
 801539a:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	699a      	ldr	r2, [r3, #24]
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6919      	ldr	r1, [r3, #16]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	440b      	add	r3, r1
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	441a      	add	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	699b      	ldr	r3, [r3, #24]
 80153ba:	68fa      	ldr	r2, [r7, #12]
 80153bc:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80153c0:	fb93 f2f2 	sdiv	r2, r3, r2
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	330c      	adds	r3, #12
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3714      	adds	r7, #20
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr

080153d8 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80153d8:	b480      	push	{r7}
 80153da:	b08b      	sub	sp, #44	; 0x2c
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	69da      	ldr	r2, [r3, #28]
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153f0:	4619      	mov	r1, r3
 80153f2:	460b      	mov	r3, r1
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	440b      	add	r3, r1
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	b29a      	uxth	r2, r3
 8015404:	69bb      	ldr	r3, [r7, #24]
 8015406:	6919      	ldr	r1, [r3, #16]
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801540e:	009b      	lsls	r3, r3, #2
 8015410:	440b      	add	r3, r1
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	b29b      	uxth	r3, r3
 8015416:	1ad3      	subs	r3, r2, r3
 8015418:	b29b      	uxth	r3, r3
 801541a:	b21b      	sxth	r3, r3
 801541c:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 801541e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015422:	b29a      	uxth	r2, r3
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	f9b3 3000 	ldrsh.w	r3, [r3]
 801542a:	b29b      	uxth	r3, r3
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	b29b      	uxth	r3, r3
 8015430:	b21b      	sxth	r3, r3
 8015432:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015434:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015438:	2b00      	cmp	r3, #0
 801543a:	da06      	bge.n	801544a <_processNoiseCancel+0x72>
 801543c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015440:	b29b      	uxth	r3, r3
 8015442:	425b      	negs	r3, r3
 8015444:	b29b      	uxth	r3, r3
 8015446:	b21b      	sxth	r3, r3
 8015448:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 801544a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801544e:	b29a      	uxth	r2, r3
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015456:	b29b      	uxth	r3, r3
 8015458:	4413      	add	r3, r2
 801545a:	b29b      	uxth	r3, r3
 801545c:	b21b      	sxth	r3, r3
 801545e:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015460:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015464:	2b00      	cmp	r3, #0
 8015466:	da06      	bge.n	8015476 <_processNoiseCancel+0x9e>
 8015468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801546c:	b29b      	uxth	r3, r3
 801546e:	425b      	negs	r3, r3
 8015470:	b29b      	uxth	r3, r3
 8015472:	b21b      	sxth	r3, r3
 8015474:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 8015476:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801547a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801547e:	429a      	cmp	r2, r3
 8015480:	dd6d      	ble.n	801555e <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	691a      	ldr	r2, [r3, #16]
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801548c:	009b      	lsls	r3, r3, #2
 801548e:	4413      	add	r3, r2
 8015490:	683a      	ldr	r2, [r7, #0]
 8015492:	6812      	ldr	r2, [r2, #0]
 8015494:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	69da      	ldr	r2, [r3, #28]
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80154a4:	4619      	mov	r1, r3
 80154a6:	460b      	mov	r3, r1
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	440b      	add	r3, r1
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4413      	add	r3, r2
 80154b0:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	691a      	ldr	r2, [r3, #16]
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4413      	add	r3, r2
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	69bb      	ldr	r3, [r7, #24]
 80154c6:	6919      	ldr	r1, [r3, #16]
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80154ce:	009b      	lsls	r3, r3, #2
 80154d0:	440b      	add	r3, r1
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	1ad3      	subs	r3, r2, r3
 80154d8:	b29b      	uxth	r3, r3
 80154da:	b21a      	sxth	r2, r3
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	1ad3      	subs	r3, r2, r3
 80154f2:	b29a      	uxth	r2, r3
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	3302      	adds	r3, #2
 80154f8:	b212      	sxth	r2, r2
 80154fa:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	3302      	adds	r3, #2
 8015500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015504:	2b00      	cmp	r3, #0
 8015506:	da0a      	bge.n	801551e <_processNoiseCancel+0x146>
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	3302      	adds	r3, #2
 801550c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015510:	b29b      	uxth	r3, r3
 8015512:	425b      	negs	r3, r3
 8015514:	b29a      	uxth	r2, r3
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	3302      	adds	r3, #2
 801551a:	b212      	sxth	r2, r2
 801551c:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015524:	b29a      	uxth	r2, r3
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801552c:	b29b      	uxth	r3, r3
 801552e:	4413      	add	r3, r2
 8015530:	b29a      	uxth	r2, r3
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	3304      	adds	r3, #4
 8015536:	b212      	sxth	r2, r2
 8015538:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	3304      	adds	r3, #4
 801553e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015542:	2b00      	cmp	r3, #0
 8015544:	da43      	bge.n	80155ce <_processNoiseCancel+0x1f6>
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	3304      	adds	r3, #4
 801554a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801554e:	b29b      	uxth	r3, r3
 8015550:	425b      	negs	r3, r3
 8015552:	b29a      	uxth	r2, r3
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	3304      	adds	r3, #4
 8015558:	b212      	sxth	r2, r2
 801555a:	801a      	strh	r2, [r3, #0]
 801555c:	e037      	b.n	80155ce <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015564:	69bb      	ldr	r3, [r7, #24]
 8015566:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801556e:	3301      	adds	r3, #1
 8015570:	69ba      	ldr	r2, [r7, #24]
 8015572:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015576:	fb93 f1f2 	sdiv	r1, r3, r2
 801557a:	fb01 f202 	mul.w	r2, r1, r2
 801557e:	1a9b      	subs	r3, r3, r2
 8015580:	b25a      	sxtb	r2, r3
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	691a      	ldr	r2, [r3, #16]
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	4413      	add	r3, r2
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	6812      	ldr	r2, [r2, #0]
 8015598:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	69da      	ldr	r2, [r3, #28]
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80155a4:	4619      	mov	r1, r3
 80155a6:	460b      	mov	r3, r1
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	440b      	add	r3, r1
 80155ac:	005b      	lsls	r3, r3, #1
 80155ae:	4413      	add	r3, r2
 80155b0:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 80155b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	3302      	adds	r3, #2
 80155be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80155c2:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	3304      	adds	r3, #4
 80155c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80155cc:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	61fb      	str	r3, [r7, #28]
	count = 0;
 80155d2:	2300      	movs	r3, #0
 80155d4:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80155d6:	2300      	movs	r3, #0
 80155d8:	627b      	str	r3, [r7, #36]	; 0x24
 80155da:	e00e      	b.n	80155fa <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	691a      	ldr	r2, [r3, #16]
 80155e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4413      	add	r3, r2
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	69fa      	ldr	r2, [r7, #28]
 80155ea:	4413      	add	r3, r2
 80155ec:	61fb      	str	r3, [r7, #28]
		count++;
 80155ee:	6a3b      	ldr	r3, [r7, #32]
 80155f0:	3301      	adds	r3, #1
 80155f2:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	3301      	adds	r3, #1
 80155f8:	627b      	str	r3, [r7, #36]	; 0x24
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015600:	461a      	mov	r2, r3
 8015602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015604:	4293      	cmp	r3, r2
 8015606:	dbe9      	blt.n	80155dc <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 8015608:	6a3b      	ldr	r3, [r7, #32]
 801560a:	2b00      	cmp	r3, #0
 801560c:	dd05      	ble.n	801561a <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 801560e:	69fa      	ldr	r2, [r7, #28]
 8015610:	6a3b      	ldr	r3, [r7, #32]
 8015612:	fb92 f2f3 	sdiv	r2, r2, r3
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	330c      	adds	r3, #12
}
 801561e:	4618      	mov	r0, r3
 8015620:	372c      	adds	r7, #44	; 0x2c
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr
	...

0801562c <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	460b      	mov	r3, r1
 8015636:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d002      	beq.n	8015644 <pifNoiseFilterInt32_Init+0x18>
 801563e:	78fb      	ldrb	r3, [r7, #3]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d104      	bne.n	801564e <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015644:	4b17      	ldr	r3, [pc, #92]	; (80156a4 <pifNoiseFilterInt32_Init+0x78>)
 8015646:	2201      	movs	r2, #1
 8015648:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801564a:	2300      	movs	r3, #0
 801564c:	e026      	b.n	801569c <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 801564e:	2220      	movs	r2, #32
 8015650:	2100      	movs	r1, #0
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f00d fec8 	bl	80233e8 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015658:	78fb      	ldrb	r3, [r7, #3]
 801565a:	2104      	movs	r1, #4
 801565c:	4618      	mov	r0, r3
 801565e:	f00d fe73 	bl	8023348 <calloc>
 8015662:	4603      	mov	r3, r0
 8015664:	461a      	mov	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d104      	bne.n	801567c <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015672:	4b0c      	ldr	r3, [pc, #48]	; (80156a4 <pifNoiseFilterInt32_Init+0x78>)
 8015674:	2203      	movs	r2, #3
 8015676:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015678:	2300      	movs	r3, #0
 801567a:	e00f      	b.n	801569c <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2100      	movs	r1, #0
 8015680:	4618      	mov	r0, r3
 8015682:	f7ff fe05 	bl	8015290 <pifNoiseFilter_Init>
    p_owner->_size = size;
 8015686:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2200      	movs	r2, #0
 8015692:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	4a04      	ldr	r2, [pc, #16]	; (80156a8 <pifNoiseFilterInt32_Init+0x7c>)
 8015698:	605a      	str	r2, [r3, #4]
    return TRUE;
 801569a:	2301      	movs	r3, #1
}
 801569c:	4618      	mov	r0, r3
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	20001db8 	.word	0x20001db8
 80156a8:	08015343 	.word	0x08015343

080156ac <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f7ff fe18 	bl	80152ea <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156c0:	2b02      	cmp	r3, #2
 80156c2:	dd04      	ble.n	80156ce <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156ca:	2b20      	cmp	r3, #32
 80156cc:	dd04      	ble.n	80156d8 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 80156ce:	4b15      	ldr	r3, [pc, #84]	; (8015724 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80156d0:	2201      	movs	r2, #1
 80156d2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80156d4:	2300      	movs	r3, #0
 80156d6:	e021      	b.n	801571c <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156de:	461a      	mov	r2, r3
 80156e0:	4613      	mov	r3, r2
 80156e2:	005b      	lsls	r3, r3, #1
 80156e4:	4413      	add	r3, r2
 80156e6:	2102      	movs	r1, #2
 80156e8:	4618      	mov	r0, r3
 80156ea:	f00d fe2d 	bl	8023348 <calloc>
 80156ee:	4603      	mov	r3, r0
 80156f0:	461a      	mov	r2, r3
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	69db      	ldr	r3, [r3, #28]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d104      	bne.n	8015708 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80156fe:	4b09      	ldr	r3, [pc, #36]	; (8015724 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015700:	2203      	movs	r2, #3
 8015702:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015704:	2300      	movs	r3, #0
 8015706:	e009      	b.n	801571c <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2200      	movs	r2, #0
 801570c:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2202      	movs	r2, #2
 8015712:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	4a04      	ldr	r2, [pc, #16]	; (8015728 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 8015718:	605a      	str	r2, [r3, #4]
	return TRUE;
 801571a:	2301      	movs	r3, #1
}
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	20001db8 	.word	0x20001db8
 8015728:	080153d9 	.word	0x080153d9

0801572c <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	3b30      	subs	r3, #48	; 0x30
 801573c:	b2db      	uxtb	r3, r3
 801573e:	461a      	mov	r2, r3
 8015740:	0092      	lsls	r2, r2, #2
 8015742:	4413      	add	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	b2da      	uxtb	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	3301      	adds	r3, #1
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	4413      	add	r3, r2
 8015750:	b2db      	uxtb	r3, r3
 8015752:	3b30      	subs	r3, #48	; 0x30
 8015754:	b2da      	uxtb	r2, r3
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	3302      	adds	r3, #2
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	3b30      	subs	r3, #48	; 0x30
 8015762:	b2db      	uxtb	r3, r3
 8015764:	461a      	mov	r2, r3
 8015766:	0092      	lsls	r2, r2, #2
 8015768:	4413      	add	r3, r2
 801576a:	005b      	lsls	r3, r3, #1
 801576c:	b2da      	uxtb	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	3303      	adds	r3, #3
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	4413      	add	r3, r2
 8015776:	b2db      	uxtb	r3, r3
 8015778:	3b30      	subs	r3, #48	; 0x30
 801577a:	b2da      	uxtb	r2, r3
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	3304      	adds	r3, #4
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	3b30      	subs	r3, #48	; 0x30
 8015788:	b2db      	uxtb	r3, r3
 801578a:	461a      	mov	r2, r3
 801578c:	0092      	lsls	r2, r2, #2
 801578e:	4413      	add	r3, r2
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	b2da      	uxtb	r2, r3
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	3305      	adds	r3, #5
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	4413      	add	r3, r2
 801579c:	b2db      	uxtb	r3, r3
 801579e:	3b30      	subs	r3, #48	; 0x30
 80157a0:	b2da      	uxtb	r2, r3
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	701a      	strb	r2, [r3, #0]
}
 80157a6:	bf00      	nop
 80157a8:	370c      	adds	r7, #12
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr
	...

080157b4 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b085      	sub	sp, #20
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	3b30      	subs	r3, #48	; 0x30
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	461a      	mov	r2, r3
 80157c8:	0092      	lsls	r2, r2, #2
 80157ca:	4413      	add	r3, r2
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	b2da      	uxtb	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	3301      	adds	r3, #1
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	4413      	add	r3, r2
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	3302      	adds	r3, #2
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	3b30      	subs	r3, #48	; 0x30
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	461a      	mov	r2, r3
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	4413      	add	r3, r2
 80157f2:	005b      	lsls	r3, r3, #1
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	3303      	adds	r3, #3
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	4413      	add	r3, r2
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	3b30      	subs	r3, #48	; 0x30
 8015802:	b2da      	uxtb	r2, r3
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3304      	adds	r3, #4
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	3b30      	subs	r3, #48	; 0x30
 8015810:	b2db      	uxtb	r3, r3
 8015812:	461a      	mov	r2, r3
 8015814:	0092      	lsls	r2, r2, #2
 8015816:	4413      	add	r3, r2
 8015818:	005b      	lsls	r3, r3, #1
 801581a:	b2da      	uxtb	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	3305      	adds	r3, #5
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	4413      	add	r3, r2
 8015824:	b2db      	uxtb	r3, r3
 8015826:	3b30      	subs	r3, #48	; 0x30
 8015828:	b2da      	uxtb	r2, r3
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	3306      	adds	r3, #6
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	2b2e      	cmp	r3, #46	; 0x2e
 8015836:	d134      	bne.n	80158a2 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	2200      	movs	r2, #0
 801583c:	80da      	strh	r2, [r3, #6]
		digit = 100;
 801583e:	2364      	movs	r3, #100	; 0x64
 8015840:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015842:	2307      	movs	r3, #7
 8015844:	60fb      	str	r3, [r7, #12]
 8015846:	e027      	b.n	8015898 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	687a      	ldr	r2, [r7, #4]
 801584c:	4413      	add	r3, r2
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	3301      	adds	r3, #1
 8015852:	4a17      	ldr	r2, [pc, #92]	; (80158b0 <_convertString2Time+0xfc>)
 8015854:	4413      	add	r3, r2
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	f003 0304 	and.w	r3, r3, #4
 801585c:	2b00      	cmp	r3, #0
 801585e:	d01f      	beq.n	80158a0 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	88da      	ldrh	r2, [r3, #6]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	6879      	ldr	r1, [r7, #4]
 8015868:	440b      	add	r3, r1
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	3b30      	subs	r3, #48	; 0x30
 801586e:	b299      	uxth	r1, r3
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	b29b      	uxth	r3, r3
 8015874:	fb11 f303 	smulbb	r3, r1, r3
 8015878:	b29b      	uxth	r3, r3
 801587a:	4413      	add	r3, r2
 801587c:	b29a      	uxth	r2, r3
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	4a0b      	ldr	r2, [pc, #44]	; (80158b4 <_convertString2Time+0x100>)
 8015886:	fb82 1203 	smull	r1, r2, r2, r3
 801588a:	1092      	asrs	r2, r2, #2
 801588c:	17db      	asrs	r3, r3, #31
 801588e:	1ad3      	subs	r3, r2, r3
 8015890:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	3301      	adds	r3, #1
 8015896:	60fb      	str	r3, [r7, #12]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2b09      	cmp	r3, #9
 801589c:	ddd4      	ble.n	8015848 <_convertString2Time+0x94>
		}
	}
}
 801589e:	e000      	b.n	80158a2 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 80158a0:	bf00      	nop
}
 80158a2:	bf00      	nop
 80158a4:	3714      	adds	r7, #20
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop
 80158b0:	080295ac 	.word	0x080295ac
 80158b4:	66666667 	.word	0x66666667

080158b8 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 80158b8:	b5b0      	push	{r4, r5, r7, lr}
 80158ba:	b088      	sub	sp, #32
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 80158c0:	f04f 0200 	mov.w	r2, #0
 80158c4:	f04f 0300 	mov.w	r3, #0
 80158c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2b2d      	cmp	r3, #45	; 0x2d
 80158d6:	d120      	bne.n	801591a <_convertString2Float+0x62>
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	3301      	adds	r3, #1
 80158dc:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80158de:	e01c      	b.n	801591a <_convertString2Float+0x62>
		value *= 10;
 80158e0:	f04f 0200 	mov.w	r2, #0
 80158e4:	4b38      	ldr	r3, [pc, #224]	; (80159c8 <_convertString2Float+0x110>)
 80158e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80158ea:	f7ea fe39 	bl	8000560 <__aeabi_dmul>
 80158ee:	4602      	mov	r2, r0
 80158f0:	460b      	mov	r3, r1
 80158f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	61fa      	str	r2, [r7, #28]
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	3b30      	subs	r3, #48	; 0x30
 8015900:	4618      	mov	r0, r3
 8015902:	f7ea fdc3 	bl	800048c <__aeabi_i2d>
 8015906:	4602      	mov	r2, r0
 8015908:	460b      	mov	r3, r1
 801590a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801590e:	f7ea fc71 	bl	80001f4 <__adddf3>
 8015912:	4602      	mov	r2, r0
 8015914:	460b      	mov	r3, r1
 8015916:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	3301      	adds	r3, #1
 8015920:	4a2a      	ldr	r2, [pc, #168]	; (80159cc <_convertString2Float+0x114>)
 8015922:	4413      	add	r3, r2
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	f003 0304 	and.w	r3, r3, #4
 801592a:	2b00      	cmp	r3, #0
 801592c:	d1d8      	bne.n	80158e0 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	2b2d      	cmp	r3, #45	; 0x2d
 8015934:	d105      	bne.n	8015942 <_convertString2Float+0x8a>
 8015936:	693c      	ldr	r4, [r7, #16]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801593e:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b2e      	cmp	r3, #46	; 0x2e
 8015948:	d133      	bne.n	80159b2 <_convertString2Float+0xfa>
		p++;
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	3301      	adds	r3, #1
 801594e:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015950:	f04f 0200 	mov.w	r2, #0
 8015954:	4b1c      	ldr	r3, [pc, #112]	; (80159c8 <_convertString2Float+0x110>)
 8015956:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801595a:	e020      	b.n	801599e <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	1c5a      	adds	r2, r3, #1
 8015960:	61fa      	str	r2, [r7, #28]
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	3b30      	subs	r3, #48	; 0x30
 8015966:	4618      	mov	r0, r3
 8015968:	f7ea fd90 	bl	800048c <__aeabi_i2d>
 801596c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015970:	f7ea ff20 	bl	80007b4 <__aeabi_ddiv>
 8015974:	4602      	mov	r2, r0
 8015976:	460b      	mov	r3, r1
 8015978:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801597c:	f7ea fc3a 	bl	80001f4 <__adddf3>
 8015980:	4602      	mov	r2, r0
 8015982:	460b      	mov	r3, r1
 8015984:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015988:	f04f 0200 	mov.w	r2, #0
 801598c:	4b0e      	ldr	r3, [pc, #56]	; (80159c8 <_convertString2Float+0x110>)
 801598e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015992:	f7ea fde5 	bl	8000560 <__aeabi_dmul>
 8015996:	4602      	mov	r2, r0
 8015998:	460b      	mov	r3, r1
 801599a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	3301      	adds	r3, #1
 80159a4:	4a09      	ldr	r2, [pc, #36]	; (80159cc <_convertString2Float+0x114>)
 80159a6:	4413      	add	r3, r2
 80159a8:	781b      	ldrb	r3, [r3, #0]
 80159aa:	f003 0304 	and.w	r3, r3, #4
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d1d4      	bne.n	801595c <_convertString2Float+0xa4>
		}
	}
	return value;
 80159b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80159b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80159ba:	eeb0 0a47 	vmov.f32	s0, s14
 80159be:	eef0 0a67 	vmov.f32	s1, s15
 80159c2:	3720      	adds	r7, #32
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bdb0      	pop	{r4, r5, r7, pc}
 80159c8:	40240000 	.word	0x40240000
 80159cc:	080295ac 	.word	0x080295ac

080159d0 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 80159d0:	b480      	push	{r7}
 80159d2:	b085      	sub	sp, #20
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80159d8:	2300      	movs	r3, #0
 80159da:	60bb      	str	r3, [r7, #8]

	p = str;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	2b2d      	cmp	r3, #45	; 0x2d
 80159e6:	d111      	bne.n	8015a0c <_convertString2Interger+0x3c>
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	3301      	adds	r3, #1
 80159ec:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80159ee:	e00d      	b.n	8015a0c <_convertString2Interger+0x3c>
		value *= 10;
 80159f0:	68ba      	ldr	r2, [r7, #8]
 80159f2:	4613      	mov	r3, r2
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	4413      	add	r3, r2
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	1c5a      	adds	r2, r3, #1
 8015a00:	60fa      	str	r2, [r7, #12]
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	3b30      	subs	r3, #48	; 0x30
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	4413      	add	r3, r2
 8015a0a:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	3301      	adds	r3, #1
 8015a12:	4a0a      	ldr	r2, [pc, #40]	; (8015a3c <_convertString2Interger+0x6c>)
 8015a14:	4413      	add	r3, r2
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	f003 0304 	and.w	r3, r3, #4
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d1e7      	bne.n	80159f0 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	2b2d      	cmp	r3, #45	; 0x2d
 8015a26:	d102      	bne.n	8015a2e <_convertString2Interger+0x5e>
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	425b      	negs	r3, r3
 8015a2c:	60bb      	str	r3, [r7, #8]
	return value;
 8015a2e:	68bb      	ldr	r3, [r7, #8]
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3714      	adds	r7, #20
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr
 8015a3c:	080295ac 	.word	0x080295ac

08015a40 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015a40:	b5b0      	push	{r4, r5, r7, lr}
 8015a42:	b088      	sub	sp, #32
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015a48:	2300      	movs	r3, #0
 8015a4a:	75fb      	strb	r3, [r7, #23]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015a50:	2300      	movs	r3, #0
 8015a52:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	61fb      	str	r3, [r7, #28]
 8015a58:	e002      	b.n	8015a60 <_convertString2Degrees+0x20>
 8015a5a:	69fb      	ldr	r3, [r7, #28]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	61fb      	str	r3, [r7, #28]
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	3301      	adds	r3, #1
 8015a66:	4a46      	ldr	r2, [pc, #280]	; (8015b80 <_convertString2Degrees+0x140>)
 8015a68:	4413      	add	r3, r2
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	f003 0304 	and.w	r3, r3, #4
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d1f2      	bne.n	8015a5a <_convertString2Degrees+0x1a>
	q = s;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015a78:	e011      	b.n	8015a9e <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d005      	beq.n	8015a8c <_convertString2Degrees+0x4c>
 8015a80:	7dfb      	ldrb	r3, [r7, #23]
 8015a82:	461a      	mov	r2, r3
 8015a84:	0092      	lsls	r2, r2, #2
 8015a86:	4413      	add	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	1c5a      	adds	r2, r3, #1
 8015a90:	61ba      	str	r2, [r7, #24]
 8015a92:	781b      	ldrb	r3, [r3, #0]
 8015a94:	3b30      	subs	r3, #48	; 0x30
 8015a96:	b2da      	uxtb	r2, r3
 8015a98:	7dfb      	ldrb	r3, [r7, #23]
 8015a9a:	4413      	add	r3, r2
 8015a9c:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015a9e:	69fa      	ldr	r2, [r7, #28]
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	1ad3      	subs	r3, r2, r3
 8015aa4:	2b02      	cmp	r3, #2
 8015aa6:	dce8      	bgt.n	8015a7a <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015aa8:	e011      	b.n	8015ace <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015aaa:	7dbb      	ldrb	r3, [r7, #22]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d005      	beq.n	8015abc <_convertString2Degrees+0x7c>
 8015ab0:	7dbb      	ldrb	r3, [r7, #22]
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	0092      	lsls	r2, r2, #2
 8015ab6:	4413      	add	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015abc:	69bb      	ldr	r3, [r7, #24]
 8015abe:	1c5a      	adds	r2, r3, #1
 8015ac0:	61ba      	str	r2, [r7, #24]
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	3b30      	subs	r3, #48	; 0x30
 8015ac6:	b2da      	uxtb	r2, r3
 8015ac8:	7dbb      	ldrb	r3, [r7, #22]
 8015aca:	4413      	add	r3, r2
 8015acc:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8015ace:	69fa      	ldr	r2, [r7, #28]
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d8e9      	bhi.n	8015aaa <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	2b2e      	cmp	r3, #46	; 0x2e
 8015adc:	d124      	bne.n	8015b28 <_convertString2Degrees+0xe8>
		q = p + 1;
 8015ade:	69fb      	ldr	r3, [r7, #28]
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	73fb      	strb	r3, [r7, #15]
 8015ae8:	e01b      	b.n	8015b22 <_convertString2Degrees+0xe2>
			frac_min *= 10;
 8015aea:	693a      	ldr	r2, [r7, #16]
 8015aec:	4613      	mov	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	005b      	lsls	r3, r3, #1
 8015af4:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 8015af6:	69bb      	ldr	r3, [r7, #24]
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	3301      	adds	r3, #1
 8015afc:	4a20      	ldr	r2, [pc, #128]	; (8015b80 <_convertString2Degrees+0x140>)
 8015afe:	4413      	add	r3, r2
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	f003 0304 	and.w	r3, r3, #4
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d008      	beq.n	8015b1c <_convertString2Degrees+0xdc>
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	1c5a      	adds	r2, r3, #1
 8015b0e:	61ba      	str	r2, [r7, #24]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	3b30      	subs	r3, #48	; 0x30
 8015b14:	461a      	mov	r2, r3
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	4413      	add	r3, r2
 8015b1a:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8015b1c:	7bfb      	ldrb	r3, [r7, #15]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	73fb      	strb	r3, [r7, #15]
 8015b22:	7bfb      	ldrb	r3, [r7, #15]
 8015b24:	2b03      	cmp	r3, #3
 8015b26:	d9e0      	bls.n	8015aea <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015b28:	7dfb      	ldrb	r3, [r7, #23]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7ea fcae 	bl	800048c <__aeabi_i2d>
 8015b30:	4604      	mov	r4, r0
 8015b32:	460d      	mov	r5, r1
 8015b34:	7dbb      	ldrb	r3, [r7, #22]
 8015b36:	f242 7210 	movw	r2, #10000	; 0x2710
 8015b3a:	fb03 f202 	mul.w	r2, r3, r2
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	4413      	add	r3, r2
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7ea fc92 	bl	800046c <__aeabi_ui2d>
 8015b48:	a30b      	add	r3, pc, #44	; (adr r3, 8015b78 <_convertString2Degrees+0x138>)
 8015b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b4e:	f7ea fe31 	bl	80007b4 <__aeabi_ddiv>
 8015b52:	4602      	mov	r2, r0
 8015b54:	460b      	mov	r3, r1
 8015b56:	4620      	mov	r0, r4
 8015b58:	4629      	mov	r1, r5
 8015b5a:	f7ea fb4b 	bl	80001f4 <__adddf3>
 8015b5e:	4602      	mov	r2, r0
 8015b60:	460b      	mov	r3, r1
 8015b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8015b66:	eeb0 0a47 	vmov.f32	s0, s14
 8015b6a:	eef0 0a67 	vmov.f32	s1, s15
 8015b6e:	3720      	adds	r7, #32
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bdb0      	pop	{r4, r5, r7, pc}
 8015b74:	f3af 8000 	nop.w
 8015b78:	00000000 	.word	0x00000000
 8015b7c:	41224f80 	.word	0x41224f80
 8015b80:	080295ac 	.word	0x080295ac

08015b84 <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015b8e:	79fb      	ldrb	r3, [r7, #7]
 8015b90:	3b30      	subs	r3, #48	; 0x30
 8015b92:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 8015b94:	79fb      	ldrb	r3, [r7, #7]
 8015b96:	2b09      	cmp	r3, #9
 8015b98:	d902      	bls.n	8015ba0 <_convertAscii2Hex+0x1c>
 8015b9a:	79fb      	ldrb	r3, [r7, #7]
 8015b9c:	3b07      	subs	r3, #7
 8015b9e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015ba0:	79fb      	ldrb	r3, [r7, #7]
 8015ba2:	f003 030f 	and.w	r3, r3, #15
 8015ba6:	71fb      	strb	r3, [r7, #7]
	return n;
 8015ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	370c      	adds	r7, #12
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb4:	4770      	bx	lr

08015bb6 <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b084      	sub	sp, #16
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015bc8:	f36f 0341 	bfc	r3, #1, #1
 8015bcc:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015bd0:	68fa      	ldr	r2, [r7, #12]
 8015bd2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015bd6:	f36f 0300 	bfc	r3, #0, #1
 8015bda:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2200      	movs	r2, #0
 8015be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d003      	beq.n	8015bf6 <_evtTimerFinish+0x40>
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	4798      	blx	r3
}
 8015bf6:	bf00      	nop
 8015bf8:	3710      	adds	r7, #16
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
	...

08015c00 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	460b      	mov	r3, r1
 8015c0a:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d104      	bne.n	8015c1c <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015c12:	4b0e      	ldr	r3, [pc, #56]	; (8015c4c <pifGps_Init+0x4c>)
 8015c14:	2201      	movs	r2, #1
 8015c16:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e012      	b.n	8015c42 <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015c1c:	2268      	movs	r2, #104	; 0x68
 8015c1e:	2100      	movs	r1, #0
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f00d fbe1 	bl	80233e8 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015c26:	887b      	ldrh	r3, [r7, #2]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d106      	bne.n	8015c3a <pifGps_Init+0x3a>
 8015c2c:	4b08      	ldr	r3, [pc, #32]	; (8015c50 <pifGps_Init+0x50>)
 8015c2e:	881b      	ldrh	r3, [r3, #0]
 8015c30:	1c5a      	adds	r2, r3, #1
 8015c32:	b291      	uxth	r1, r2
 8015c34:	4a06      	ldr	r2, [pc, #24]	; (8015c50 <pifGps_Init+0x50>)
 8015c36:	8011      	strh	r1, [r2, #0]
 8015c38:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	887a      	ldrh	r2, [r7, #2]
 8015c3e:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015c40:	2301      	movs	r3, #1
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	20001db8 	.word	0x20001db8
 8015c50:	20000128 	.word	0x20000128

08015c54 <pifGps_Clear>:

void pifGps_Clear(PifGps* p_owner)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_txt) {
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d007      	beq.n	8015c74 <pifGps_Clear+0x20>
		free(p_owner->__p_txt);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f00d fba7 	bl	80233bc <free>
		p_owner->__p_txt = NULL;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2200      	movs	r2, #0
 8015c72:	659a      	str	r2, [r3, #88]	; 0x58
	}
	p_owner->__evt_text = NULL;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	661a      	str	r2, [r3, #96]	; 0x60
}
 8015c7a:	bf00      	nop
 8015c7c:	3708      	adds	r7, #8
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
	...

08015c84 <pifGps_SetTimeout>:

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d025      	beq.n	8015ce4 <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d116      	bne.n	8015cce <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	68b8      	ldr	r0, [r7, #8]
 8015ca4:	f7ff f9b4 	bl	8015010 <pifTimerManager_Add>
 8015ca8:	4602      	mov	r2, r0
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d101      	bne.n	8015cba <pifGps_SetTimeout+0x36>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	e01e      	b.n	8015cf8 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	490f      	ldr	r1, [pc, #60]	; (8015d00 <pifGps_SetTimeout+0x7c>)
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ff fad1 	bl	801526a <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	683a      	ldr	r2, [r7, #0]
 8015ccc:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cd2:	6879      	ldr	r1, [r7, #4]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7ff f9d3 	bl	8015080 <pifTimer_Start>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d10a      	bne.n	8015cf6 <pifGps_SetTimeout+0x72>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	e009      	b.n	8015cf8 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d004      	beq.n	8015cf6 <pifGps_SetTimeout+0x72>
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7ff f9f3 	bl	80150dc <pifTimer_Stop>
	}
    return TRUE;
 8015cf6:	2301      	movs	r3, #1
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	08015bb7 	.word	0x08015bb7

08015d04 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015d12:	f043 0302 	orr.w	r3, r3, #2
 8015d16:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <pifGps_SendEvent+0x26>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d004      	beq.n	8015d3c <pifGps_SendEvent+0x38>
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ff f9e6 	bl	8015108 <pifTimer_Reset>
}
 8015d3c:	bf00      	nop
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	0000      	movs	r0, r0
	...

08015d48 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d4c:	b08e      	sub	sp, #56	; 0x38
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015d52:	460b      	mov	r3, r1
 8015d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015d64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015d68:	2b24      	cmp	r3, #36	; 0x24
 8015d6a:	d11a      	bne.n	8015da2 <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015d6c:	4b80      	ldr	r3, [pc, #512]	; (8015f70 <pifGps_ParsingNmea+0x228>)
 8015d6e:	2200      	movs	r2, #0
 8015d70:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015d72:	4b80      	ldr	r3, [pc, #512]	; (8015f74 <pifGps_ParsingNmea+0x22c>)
 8015d74:	2200      	movs	r2, #0
 8015d76:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015d78:	4b7f      	ldr	r3, [pc, #508]	; (8015f78 <pifGps_ParsingNmea+0x230>)
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d80:	689b      	ldr	r3, [r3, #8]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00a      	beq.n	8015d9c <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015d86:	4a7d      	ldr	r2, [pc, #500]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015d8c:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015d8e:	4b7b      	ldr	r3, [pc, #492]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015d90:	2200      	movs	r2, #0
 8015d92:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	4878      	ldr	r0, [pc, #480]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015d9a:	4798      	blx	r3
		}
		return TRUE;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	f000 bc7e 	b.w	801669e <pifGps_ParsingNmea+0x956>
	}
	else if (c == ',' || c == '*') {
 8015da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015da6:	2b2c      	cmp	r3, #44	; 0x2c
 8015da8:	d004      	beq.n	8015db4 <pifGps_ParsingNmea+0x6c>
 8015daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dae:	2b2a      	cmp	r3, #42	; 0x2a
 8015db0:	f040 83e2 	bne.w	8016578 <pifGps_ParsingNmea+0x830>
		string[offset] = 0;
 8015db4:	4b6f      	ldr	r3, [pc, #444]	; (8015f74 <pifGps_ParsingNmea+0x22c>)
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	4619      	mov	r1, r3
 8015dba:	4a70      	ldr	r2, [pc, #448]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015dc0:	4b6b      	ldr	r3, [pc, #428]	; (8015f70 <pifGps_ParsingNmea+0x228>)
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	f040 8100 	bne.w	8015fca <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015dca:	4b6d      	ldr	r3, [pc, #436]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015dcc:	2200      	movs	r2, #0
 8015dce:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015dd0:	4b6a      	ldr	r3, [pc, #424]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015dd2:	789b      	ldrb	r3, [r3, #2]
 8015dd4:	2b44      	cmp	r3, #68	; 0x44
 8015dd6:	d10b      	bne.n	8015df0 <pifGps_ParsingNmea+0xa8>
 8015dd8:	4b68      	ldr	r3, [pc, #416]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015dda:	78db      	ldrb	r3, [r3, #3]
 8015ddc:	2b54      	cmp	r3, #84	; 0x54
 8015dde:	d107      	bne.n	8015df0 <pifGps_ParsingNmea+0xa8>
 8015de0:	4b66      	ldr	r3, [pc, #408]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015de2:	791b      	ldrb	r3, [r3, #4]
 8015de4:	2b4d      	cmp	r3, #77	; 0x4d
 8015de6:	d103      	bne.n	8015df0 <pifGps_ParsingNmea+0xa8>
 8015de8:	4b65      	ldr	r3, [pc, #404]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015dea:	2201      	movs	r2, #1
 8015dec:	801a      	strh	r2, [r3, #0]
 8015dee:	e38c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015df0:	4b62      	ldr	r3, [pc, #392]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015df2:	789b      	ldrb	r3, [r3, #2]
 8015df4:	2b47      	cmp	r3, #71	; 0x47
 8015df6:	d10b      	bne.n	8015e10 <pifGps_ParsingNmea+0xc8>
 8015df8:	4b60      	ldr	r3, [pc, #384]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015dfa:	78db      	ldrb	r3, [r3, #3]
 8015dfc:	2b42      	cmp	r3, #66	; 0x42
 8015dfe:	d107      	bne.n	8015e10 <pifGps_ParsingNmea+0xc8>
 8015e00:	4b5e      	ldr	r3, [pc, #376]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e02:	791b      	ldrb	r3, [r3, #4]
 8015e04:	2b53      	cmp	r3, #83	; 0x53
 8015e06:	d103      	bne.n	8015e10 <pifGps_ParsingNmea+0xc8>
 8015e08:	4b5d      	ldr	r3, [pc, #372]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015e0a:	2202      	movs	r2, #2
 8015e0c:	801a      	strh	r2, [r3, #0]
 8015e0e:	e37c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015e10:	4b5a      	ldr	r3, [pc, #360]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e12:	789b      	ldrb	r3, [r3, #2]
 8015e14:	2b47      	cmp	r3, #71	; 0x47
 8015e16:	d10b      	bne.n	8015e30 <pifGps_ParsingNmea+0xe8>
 8015e18:	4b58      	ldr	r3, [pc, #352]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e1a:	78db      	ldrb	r3, [r3, #3]
 8015e1c:	2b47      	cmp	r3, #71	; 0x47
 8015e1e:	d107      	bne.n	8015e30 <pifGps_ParsingNmea+0xe8>
 8015e20:	4b56      	ldr	r3, [pc, #344]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e22:	791b      	ldrb	r3, [r3, #4]
 8015e24:	2b41      	cmp	r3, #65	; 0x41
 8015e26:	d103      	bne.n	8015e30 <pifGps_ParsingNmea+0xe8>
 8015e28:	4b55      	ldr	r3, [pc, #340]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015e2a:	2203      	movs	r2, #3
 8015e2c:	801a      	strh	r2, [r3, #0]
 8015e2e:	e36c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015e30:	4b52      	ldr	r3, [pc, #328]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e32:	789b      	ldrb	r3, [r3, #2]
 8015e34:	2b47      	cmp	r3, #71	; 0x47
 8015e36:	d10b      	bne.n	8015e50 <pifGps_ParsingNmea+0x108>
 8015e38:	4b50      	ldr	r3, [pc, #320]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e3a:	78db      	ldrb	r3, [r3, #3]
 8015e3c:	2b4c      	cmp	r3, #76	; 0x4c
 8015e3e:	d107      	bne.n	8015e50 <pifGps_ParsingNmea+0x108>
 8015e40:	4b4e      	ldr	r3, [pc, #312]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e42:	791b      	ldrb	r3, [r3, #4]
 8015e44:	2b4c      	cmp	r3, #76	; 0x4c
 8015e46:	d103      	bne.n	8015e50 <pifGps_ParsingNmea+0x108>
 8015e48:	4b4d      	ldr	r3, [pc, #308]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015e4a:	2204      	movs	r2, #4
 8015e4c:	801a      	strh	r2, [r3, #0]
 8015e4e:	e35c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015e50:	4b4a      	ldr	r3, [pc, #296]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e52:	789b      	ldrb	r3, [r3, #2]
 8015e54:	2b47      	cmp	r3, #71	; 0x47
 8015e56:	d10b      	bne.n	8015e70 <pifGps_ParsingNmea+0x128>
 8015e58:	4b48      	ldr	r3, [pc, #288]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e5a:	78db      	ldrb	r3, [r3, #3]
 8015e5c:	2b4e      	cmp	r3, #78	; 0x4e
 8015e5e:	d107      	bne.n	8015e70 <pifGps_ParsingNmea+0x128>
 8015e60:	4b46      	ldr	r3, [pc, #280]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e62:	791b      	ldrb	r3, [r3, #4]
 8015e64:	2b53      	cmp	r3, #83	; 0x53
 8015e66:	d103      	bne.n	8015e70 <pifGps_ParsingNmea+0x128>
 8015e68:	4b45      	ldr	r3, [pc, #276]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015e6a:	2205      	movs	r2, #5
 8015e6c:	801a      	strh	r2, [r3, #0]
 8015e6e:	e34c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015e70:	4b42      	ldr	r3, [pc, #264]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e72:	789b      	ldrb	r3, [r3, #2]
 8015e74:	2b47      	cmp	r3, #71	; 0x47
 8015e76:	d10b      	bne.n	8015e90 <pifGps_ParsingNmea+0x148>
 8015e78:	4b40      	ldr	r3, [pc, #256]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e7a:	78db      	ldrb	r3, [r3, #3]
 8015e7c:	2b52      	cmp	r3, #82	; 0x52
 8015e7e:	d107      	bne.n	8015e90 <pifGps_ParsingNmea+0x148>
 8015e80:	4b3e      	ldr	r3, [pc, #248]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e82:	791b      	ldrb	r3, [r3, #4]
 8015e84:	2b53      	cmp	r3, #83	; 0x53
 8015e86:	d103      	bne.n	8015e90 <pifGps_ParsingNmea+0x148>
 8015e88:	4b3d      	ldr	r3, [pc, #244]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015e8a:	2206      	movs	r2, #6
 8015e8c:	801a      	strh	r2, [r3, #0]
 8015e8e:	e33c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015e90:	4b3a      	ldr	r3, [pc, #232]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e92:	789b      	ldrb	r3, [r3, #2]
 8015e94:	2b47      	cmp	r3, #71	; 0x47
 8015e96:	d10b      	bne.n	8015eb0 <pifGps_ParsingNmea+0x168>
 8015e98:	4b38      	ldr	r3, [pc, #224]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015e9a:	78db      	ldrb	r3, [r3, #3]
 8015e9c:	2b53      	cmp	r3, #83	; 0x53
 8015e9e:	d107      	bne.n	8015eb0 <pifGps_ParsingNmea+0x168>
 8015ea0:	4b36      	ldr	r3, [pc, #216]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015ea2:	791b      	ldrb	r3, [r3, #4]
 8015ea4:	2b41      	cmp	r3, #65	; 0x41
 8015ea6:	d103      	bne.n	8015eb0 <pifGps_ParsingNmea+0x168>
 8015ea8:	4b35      	ldr	r3, [pc, #212]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015eaa:	2207      	movs	r2, #7
 8015eac:	801a      	strh	r2, [r3, #0]
 8015eae:	e32c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015eb0:	4b32      	ldr	r3, [pc, #200]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015eb2:	789b      	ldrb	r3, [r3, #2]
 8015eb4:	2b47      	cmp	r3, #71	; 0x47
 8015eb6:	d10b      	bne.n	8015ed0 <pifGps_ParsingNmea+0x188>
 8015eb8:	4b30      	ldr	r3, [pc, #192]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015eba:	78db      	ldrb	r3, [r3, #3]
 8015ebc:	2b53      	cmp	r3, #83	; 0x53
 8015ebe:	d107      	bne.n	8015ed0 <pifGps_ParsingNmea+0x188>
 8015ec0:	4b2e      	ldr	r3, [pc, #184]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015ec2:	791b      	ldrb	r3, [r3, #4]
 8015ec4:	2b54      	cmp	r3, #84	; 0x54
 8015ec6:	d103      	bne.n	8015ed0 <pifGps_ParsingNmea+0x188>
 8015ec8:	4b2d      	ldr	r3, [pc, #180]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015eca:	2208      	movs	r2, #8
 8015ecc:	801a      	strh	r2, [r3, #0]
 8015ece:	e31c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015ed0:	4b2a      	ldr	r3, [pc, #168]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015ed2:	789b      	ldrb	r3, [r3, #2]
 8015ed4:	2b47      	cmp	r3, #71	; 0x47
 8015ed6:	d10b      	bne.n	8015ef0 <pifGps_ParsingNmea+0x1a8>
 8015ed8:	4b28      	ldr	r3, [pc, #160]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015eda:	78db      	ldrb	r3, [r3, #3]
 8015edc:	2b53      	cmp	r3, #83	; 0x53
 8015ede:	d107      	bne.n	8015ef0 <pifGps_ParsingNmea+0x1a8>
 8015ee0:	4b26      	ldr	r3, [pc, #152]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015ee2:	791b      	ldrb	r3, [r3, #4]
 8015ee4:	2b56      	cmp	r3, #86	; 0x56
 8015ee6:	d103      	bne.n	8015ef0 <pifGps_ParsingNmea+0x1a8>
 8015ee8:	4b25      	ldr	r3, [pc, #148]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015eea:	2209      	movs	r2, #9
 8015eec:	801a      	strh	r2, [r3, #0]
 8015eee:	e30c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015ef0:	4b22      	ldr	r3, [pc, #136]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015ef2:	789b      	ldrb	r3, [r3, #2]
 8015ef4:	2b52      	cmp	r3, #82	; 0x52
 8015ef6:	d10b      	bne.n	8015f10 <pifGps_ParsingNmea+0x1c8>
 8015ef8:	4b20      	ldr	r3, [pc, #128]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015efa:	78db      	ldrb	r3, [r3, #3]
 8015efc:	2b4d      	cmp	r3, #77	; 0x4d
 8015efe:	d107      	bne.n	8015f10 <pifGps_ParsingNmea+0x1c8>
 8015f00:	4b1e      	ldr	r3, [pc, #120]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f02:	791b      	ldrb	r3, [r3, #4]
 8015f04:	2b43      	cmp	r3, #67	; 0x43
 8015f06:	d103      	bne.n	8015f10 <pifGps_ParsingNmea+0x1c8>
 8015f08:	4b1d      	ldr	r3, [pc, #116]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015f0a:	220a      	movs	r2, #10
 8015f0c:	801a      	strh	r2, [r3, #0]
 8015f0e:	e2fc      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015f10:	4b1a      	ldr	r3, [pc, #104]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f12:	789b      	ldrb	r3, [r3, #2]
 8015f14:	2b54      	cmp	r3, #84	; 0x54
 8015f16:	d10b      	bne.n	8015f30 <pifGps_ParsingNmea+0x1e8>
 8015f18:	4b18      	ldr	r3, [pc, #96]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f1a:	78db      	ldrb	r3, [r3, #3]
 8015f1c:	2b48      	cmp	r3, #72	; 0x48
 8015f1e:	d107      	bne.n	8015f30 <pifGps_ParsingNmea+0x1e8>
 8015f20:	4b16      	ldr	r3, [pc, #88]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f22:	791b      	ldrb	r3, [r3, #4]
 8015f24:	2b53      	cmp	r3, #83	; 0x53
 8015f26:	d103      	bne.n	8015f30 <pifGps_ParsingNmea+0x1e8>
 8015f28:	4b15      	ldr	r3, [pc, #84]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015f2a:	220b      	movs	r2, #11
 8015f2c:	801a      	strh	r2, [r3, #0]
 8015f2e:	e2ec      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015f30:	4b12      	ldr	r3, [pc, #72]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f32:	789b      	ldrb	r3, [r3, #2]
 8015f34:	2b54      	cmp	r3, #84	; 0x54
 8015f36:	d10b      	bne.n	8015f50 <pifGps_ParsingNmea+0x208>
 8015f38:	4b10      	ldr	r3, [pc, #64]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f3a:	78db      	ldrb	r3, [r3, #3]
 8015f3c:	2b58      	cmp	r3, #88	; 0x58
 8015f3e:	d107      	bne.n	8015f50 <pifGps_ParsingNmea+0x208>
 8015f40:	4b0e      	ldr	r3, [pc, #56]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f42:	791b      	ldrb	r3, [r3, #4]
 8015f44:	2b54      	cmp	r3, #84	; 0x54
 8015f46:	d103      	bne.n	8015f50 <pifGps_ParsingNmea+0x208>
 8015f48:	4b0d      	ldr	r3, [pc, #52]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015f4a:	220c      	movs	r2, #12
 8015f4c:	801a      	strh	r2, [r3, #0]
 8015f4e:	e2dc      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015f50:	4b0a      	ldr	r3, [pc, #40]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f52:	789b      	ldrb	r3, [r3, #2]
 8015f54:	2b56      	cmp	r3, #86	; 0x56
 8015f56:	d115      	bne.n	8015f84 <pifGps_ParsingNmea+0x23c>
 8015f58:	4b08      	ldr	r3, [pc, #32]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f5a:	78db      	ldrb	r3, [r3, #3]
 8015f5c:	2b4c      	cmp	r3, #76	; 0x4c
 8015f5e:	d111      	bne.n	8015f84 <pifGps_ParsingNmea+0x23c>
 8015f60:	4b06      	ldr	r3, [pc, #24]	; (8015f7c <pifGps_ParsingNmea+0x234>)
 8015f62:	791b      	ldrb	r3, [r3, #4]
 8015f64:	2b57      	cmp	r3, #87	; 0x57
 8015f66:	d10d      	bne.n	8015f84 <pifGps_ParsingNmea+0x23c>
 8015f68:	4b05      	ldr	r3, [pc, #20]	; (8015f80 <pifGps_ParsingNmea+0x238>)
 8015f6a:	220d      	movs	r2, #13
 8015f6c:	801a      	strh	r2, [r3, #0]
 8015f6e:	e2cc      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
 8015f70:	20001f2d 	.word	0x20001f2d
 8015f74:	20001f2e 	.word	0x20001f2e
 8015f78:	20001f2f 	.word	0x20001f2f
 8015f7c:	20001f30 	.word	0x20001f30
 8015f80:	20001f50 	.word	0x20001f50
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015f84:	4ba1      	ldr	r3, [pc, #644]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015f86:	789b      	ldrb	r3, [r3, #2]
 8015f88:	2b56      	cmp	r3, #86	; 0x56
 8015f8a:	d10b      	bne.n	8015fa4 <pifGps_ParsingNmea+0x25c>
 8015f8c:	4b9f      	ldr	r3, [pc, #636]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015f8e:	78db      	ldrb	r3, [r3, #3]
 8015f90:	2b54      	cmp	r3, #84	; 0x54
 8015f92:	d107      	bne.n	8015fa4 <pifGps_ParsingNmea+0x25c>
 8015f94:	4b9d      	ldr	r3, [pc, #628]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015f96:	791b      	ldrb	r3, [r3, #4]
 8015f98:	2b47      	cmp	r3, #71	; 0x47
 8015f9a:	d103      	bne.n	8015fa4 <pifGps_ParsingNmea+0x25c>
 8015f9c:	4b9c      	ldr	r3, [pc, #624]	; (8016210 <pifGps_ParsingNmea+0x4c8>)
 8015f9e:	220e      	movs	r2, #14
 8015fa0:	801a      	strh	r2, [r3, #0]
 8015fa2:	e2b2      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015fa4:	4b99      	ldr	r3, [pc, #612]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015fa6:	789b      	ldrb	r3, [r3, #2]
 8015fa8:	2b5a      	cmp	r3, #90	; 0x5a
 8015faa:	f040 82ae 	bne.w	801650a <pifGps_ParsingNmea+0x7c2>
 8015fae:	4b97      	ldr	r3, [pc, #604]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015fb0:	78db      	ldrb	r3, [r3, #3]
 8015fb2:	2b44      	cmp	r3, #68	; 0x44
 8015fb4:	f040 82a9 	bne.w	801650a <pifGps_ParsingNmea+0x7c2>
 8015fb8:	4b94      	ldr	r3, [pc, #592]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8015fba:	791b      	ldrb	r3, [r3, #4]
 8015fbc:	2b41      	cmp	r3, #65	; 0x41
 8015fbe:	f040 82a4 	bne.w	801650a <pifGps_ParsingNmea+0x7c2>
 8015fc2:	4b93      	ldr	r3, [pc, #588]	; (8016210 <pifGps_ParsingNmea+0x4c8>)
 8015fc4:	220f      	movs	r2, #15
 8015fc6:	801a      	strh	r2, [r3, #0]
 8015fc8:	e29f      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
		}
		else if (offset) {
 8015fca:	4b92      	ldr	r3, [pc, #584]	; (8016214 <pifGps_ParsingNmea+0x4cc>)
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	f000 828c 	beq.w	80164ec <pifGps_ParsingNmea+0x7a4>
			switch (msg_id) {
 8015fd4:	4b8e      	ldr	r3, [pc, #568]	; (8016210 <pifGps_ParsingNmea+0x4c8>)
 8015fd6:	881b      	ldrh	r3, [r3, #0]
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	2b0e      	cmp	r3, #14
 8015fdc:	f200 8295 	bhi.w	801650a <pifGps_ParsingNmea+0x7c2>
 8015fe0:	a201      	add	r2, pc, #4	; (adr r2, 8015fe8 <pifGps_ParsingNmea+0x2a0>)
 8015fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe6:	bf00      	nop
 8015fe8:	0801650b 	.word	0x0801650b
 8015fec:	0801650b 	.word	0x0801650b
 8015ff0:	08016025 	.word	0x08016025
 8015ff4:	0801612d 	.word	0x0801612d
 8015ff8:	080161d7 	.word	0x080161d7
 8015ffc:	0801650b 	.word	0x0801650b
 8016000:	0801650b 	.word	0x0801650b
 8016004:	0801650b 	.word	0x0801650b
 8016008:	0801650b 	.word	0x0801650b
 801600c:	080162c5 	.word	0x080162c5
 8016010:	0801650b 	.word	0x0801650b
 8016014:	080163bf 	.word	0x080163bf
 8016018:	0801650b 	.word	0x0801650b
 801601c:	08016431 	.word	0x08016431
 8016020:	08016477 	.word	0x08016477

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8016024:	4b7c      	ldr	r3, [pc, #496]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	2b01      	cmp	r3, #1
 801602a:	d106      	bne.n	801603a <pifGps_ParsingNmea+0x2f2>
 801602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602e:	330e      	adds	r3, #14
 8016030:	4619      	mov	r1, r3
 8016032:	4876      	ldr	r0, [pc, #472]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016034:	f7ff fbbe 	bl	80157b4 <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8016038:	e25a      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 801603a:	4b77      	ldr	r3, [pc, #476]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	2b02      	cmp	r3, #2
 8016040:	d10a      	bne.n	8016058 <pifGps_ParsingNmea+0x310>
 8016042:	4872      	ldr	r0, [pc, #456]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016044:	f7ff fcfc 	bl	8015a40 <_convertString2Degrees>
 8016048:	eeb0 7a40 	vmov.f32	s14, s0
 801604c:	eef0 7a60 	vmov.f32	s15, s1
 8016050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016052:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8016056:	e24b      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016058:	4b6f      	ldr	r3, [pc, #444]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	2b03      	cmp	r3, #3
 801605e:	d110      	bne.n	8016082 <pifGps_ParsingNmea+0x33a>
 8016060:	4b6a      	ldr	r3, [pc, #424]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	2b53      	cmp	r3, #83	; 0x53
 8016066:	d10c      	bne.n	8016082 <pifGps_ParsingNmea+0x33a>
 8016068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801606e:	623a      	str	r2, [r7, #32]
 8016070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016074:	627b      	str	r3, [r7, #36]	; 0x24
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	ed97 7b08 	vldr	d7, [r7, #32]
 801607c:	ed83 7b06 	vstr	d7, [r3, #24]
 8016080:	e053      	b.n	801612a <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016082:	4b65      	ldr	r3, [pc, #404]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	2b04      	cmp	r3, #4
 8016088:	d10a      	bne.n	80160a0 <pifGps_ParsingNmea+0x358>
 801608a:	4860      	ldr	r0, [pc, #384]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 801608c:	f7ff fcd8 	bl	8015a40 <_convertString2Degrees>
 8016090:	eeb0 7a40 	vmov.f32	s14, s0
 8016094:	eef0 7a60 	vmov.f32	s15, s1
 8016098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609a:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 801609e:	e227      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80160a0:	4b5d      	ldr	r3, [pc, #372]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	2b05      	cmp	r3, #5
 80160a6:	d110      	bne.n	80160ca <pifGps_ParsingNmea+0x382>
 80160a8:	4b58      	ldr	r3, [pc, #352]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	2b57      	cmp	r3, #87	; 0x57
 80160ae:	d10c      	bne.n	80160ca <pifGps_ParsingNmea+0x382>
 80160b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80160b6:	61ba      	str	r2, [r7, #24]
 80160b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80160bc:	61fb      	str	r3, [r7, #28]
 80160be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c0:	ed97 7b06 	vldr	d7, [r7, #24]
 80160c4:	ed83 7b08 	vstr	d7, [r3, #32]
 80160c8:	e02f      	b.n	801612a <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 80160ca:	4b53      	ldr	r3, [pc, #332]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	2b06      	cmp	r3, #6
 80160d0:	d10e      	bne.n	80160f0 <pifGps_ParsingNmea+0x3a8>
 80160d2:	4b4e      	ldr	r3, [pc, #312]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b30      	cmp	r3, #48	; 0x30
 80160d8:	bf8c      	ite	hi
 80160da:	2301      	movhi	r3, #1
 80160dc:	2300      	movls	r3, #0
 80160de:	b2d9      	uxtb	r1, r3
 80160e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160e2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80160e6:	f361 0300 	bfi	r3, r1, #0, #1
 80160ea:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 80160ee:	e1ff      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 80160f0:	4b49      	ldr	r3, [pc, #292]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	2b07      	cmp	r3, #7
 80160f6:	d108      	bne.n	801610a <pifGps_ParsingNmea+0x3c2>
 80160f8:	4844      	ldr	r0, [pc, #272]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80160fa:	f7ff fc69 	bl	80159d0 <_convertString2Interger>
 80160fe:	4603      	mov	r3, r0
 8016100:	b2da      	uxtb	r2, r3
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8016108:	e1f2      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 801610a:	4b43      	ldr	r3, [pc, #268]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	2b09      	cmp	r3, #9
 8016110:	f040 81ee 	bne.w	80164f0 <pifGps_ParsingNmea+0x7a8>
 8016114:	483d      	ldr	r0, [pc, #244]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016116:	f7ff fbcf 	bl	80158b8 <_convertString2Float>
 801611a:	eeb0 7a40 	vmov.f32	s14, s0
 801611e:	eef0 7a60 	vmov.f32	s15, s1
 8016122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016124:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8016128:	e1e2      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>
 801612a:	e1e1      	b.n	80164f0 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 801612c:	4b3a      	ldr	r3, [pc, #232]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	2b01      	cmp	r3, #1
 8016132:	d10a      	bne.n	801614a <pifGps_ParsingNmea+0x402>
 8016134:	4835      	ldr	r0, [pc, #212]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016136:	f7ff fc83 	bl	8015a40 <_convertString2Degrees>
 801613a:	eeb0 7a40 	vmov.f32	s14, s0
 801613e:	eef0 7a60 	vmov.f32	s15, s1
 8016142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016144:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8016148:	e1d4      	b.n	80164f4 <pifGps_ParsingNmea+0x7ac>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801614a:	4b33      	ldr	r3, [pc, #204]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b02      	cmp	r3, #2
 8016150:	d110      	bne.n	8016174 <pifGps_ParsingNmea+0x42c>
 8016152:	4b2e      	ldr	r3, [pc, #184]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	2b53      	cmp	r3, #83	; 0x53
 8016158:	d10c      	bne.n	8016174 <pifGps_ParsingNmea+0x42c>
 801615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016160:	613a      	str	r2, [r7, #16]
 8016162:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016166:	617b      	str	r3, [r7, #20]
 8016168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616a:	ed97 7b04 	vldr	d7, [r7, #16]
 801616e:	ed83 7b06 	vstr	d7, [r3, #24]
 8016172:	e02f      	b.n	80161d4 <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016174:	4b28      	ldr	r3, [pc, #160]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	2b03      	cmp	r3, #3
 801617a:	d10a      	bne.n	8016192 <pifGps_ParsingNmea+0x44a>
 801617c:	4823      	ldr	r0, [pc, #140]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 801617e:	f7ff fc5f 	bl	8015a40 <_convertString2Degrees>
 8016182:	eeb0 7a40 	vmov.f32	s14, s0
 8016186:	eef0 7a60 	vmov.f32	s15, s1
 801618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618c:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016190:	e1b0      	b.n	80164f4 <pifGps_ParsingNmea+0x7ac>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016192:	4b21      	ldr	r3, [pc, #132]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	2b04      	cmp	r3, #4
 8016198:	d110      	bne.n	80161bc <pifGps_ParsingNmea+0x474>
 801619a:	4b1c      	ldr	r3, [pc, #112]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	2b57      	cmp	r3, #87	; 0x57
 80161a0:	d10c      	bne.n	80161bc <pifGps_ParsingNmea+0x474>
 80161a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80161a8:	60ba      	str	r2, [r7, #8]
 80161aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80161ae:	60fb      	str	r3, [r7, #12]
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80161b6:	ed83 7b08 	vstr	d7, [r3, #32]
 80161ba:	e00b      	b.n	80161d4 <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 80161bc:	4b16      	ldr	r3, [pc, #88]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	2b05      	cmp	r3, #5
 80161c2:	f040 8197 	bne.w	80164f4 <pifGps_ParsingNmea+0x7ac>
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	330e      	adds	r3, #14
 80161ca:	4619      	mov	r1, r3
 80161cc:	480f      	ldr	r0, [pc, #60]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80161ce:	f7ff faf1 	bl	80157b4 <_convertString2Time>
				break;
 80161d2:	e18f      	b.n	80164f4 <pifGps_ParsingNmea+0x7ac>
 80161d4:	e18e      	b.n	80164f4 <pifGps_ParsingNmea+0x7ac>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 80161d6:	4b10      	ldr	r3, [pc, #64]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	2b01      	cmp	r3, #1
 80161dc:	d106      	bne.n	80161ec <pifGps_ParsingNmea+0x4a4>
 80161de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e0:	330e      	adds	r3, #14
 80161e2:	4619      	mov	r1, r3
 80161e4:	4809      	ldr	r0, [pc, #36]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80161e6:	f7ff fae5 	bl	80157b4 <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 80161ea:	e185      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80161ec:	4b0a      	ldr	r3, [pc, #40]	; (8016218 <pifGps_ParsingNmea+0x4d0>)
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	2b02      	cmp	r3, #2
 80161f2:	d113      	bne.n	801621c <pifGps_ParsingNmea+0x4d4>
 80161f4:	4805      	ldr	r0, [pc, #20]	; (801620c <pifGps_ParsingNmea+0x4c4>)
 80161f6:	f7ff fc23 	bl	8015a40 <_convertString2Degrees>
 80161fa:	eeb0 7a40 	vmov.f32	s14, s0
 80161fe:	eef0 7a60 	vmov.f32	s15, s1
 8016202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016204:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8016208:	e176      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>
 801620a:	bf00      	nop
 801620c:	20001f30 	.word	0x20001f30
 8016210:	20001f50 	.word	0x20001f50
 8016214:	20001f2e 	.word	0x20001f2e
 8016218:	20001f2d 	.word	0x20001f2d
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801621c:	4b9e      	ldr	r3, [pc, #632]	; (8016498 <pifGps_ParsingNmea+0x750>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b03      	cmp	r3, #3
 8016222:	d110      	bne.n	8016246 <pifGps_ParsingNmea+0x4fe>
 8016224:	4b9d      	ldr	r3, [pc, #628]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	2b53      	cmp	r3, #83	; 0x53
 801622a:	d10c      	bne.n	8016246 <pifGps_ParsingNmea+0x4fe>
 801622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016232:	603a      	str	r2, [r7, #0]
 8016234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016238:	607b      	str	r3, [r7, #4]
 801623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623c:	ed97 7b00 	vldr	d7, [r7]
 8016240:	ed83 7b06 	vstr	d7, [r3, #24]
 8016244:	e03d      	b.n	80162c2 <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016246:	4b94      	ldr	r3, [pc, #592]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2b04      	cmp	r3, #4
 801624c:	d10a      	bne.n	8016264 <pifGps_ParsingNmea+0x51c>
 801624e:	4893      	ldr	r0, [pc, #588]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016250:	f7ff fbf6 	bl	8015a40 <_convertString2Degrees>
 8016254:	eeb0 7a40 	vmov.f32	s14, s0
 8016258:	eef0 7a60 	vmov.f32	s15, s1
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016262:	e149      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016264:	4b8c      	ldr	r3, [pc, #560]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b05      	cmp	r3, #5
 801626a:	d10d      	bne.n	8016288 <pifGps_ParsingNmea+0x540>
 801626c:	4b8b      	ldr	r3, [pc, #556]	; (801649c <pifGps_ParsingNmea+0x754>)
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	2b57      	cmp	r3, #87	; 0x57
 8016272:	d109      	bne.n	8016288 <pifGps_ParsingNmea+0x540>
 8016274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016276:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801627a:	4692      	mov	sl, r2
 801627c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 8016286:	e01c      	b.n	80162c2 <pifGps_ParsingNmea+0x57a>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8016288:	4b83      	ldr	r3, [pc, #524]	; (8016498 <pifGps_ParsingNmea+0x750>)
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	2b07      	cmp	r3, #7
 801628e:	d108      	bne.n	80162a2 <pifGps_ParsingNmea+0x55a>
 8016290:	4882      	ldr	r0, [pc, #520]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016292:	f7ff fb9d 	bl	80159d0 <_convertString2Interger>
 8016296:	4603      	mov	r3, r0
 8016298:	b2da      	uxtb	r2, r3
 801629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 80162a0:	e12a      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 80162a2:	4b7d      	ldr	r3, [pc, #500]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2b09      	cmp	r3, #9
 80162a8:	f040 8126 	bne.w	80164f8 <pifGps_ParsingNmea+0x7b0>
 80162ac:	487b      	ldr	r0, [pc, #492]	; (801649c <pifGps_ParsingNmea+0x754>)
 80162ae:	f7ff fb03 	bl	80158b8 <_convertString2Float>
 80162b2:	eeb0 7a40 	vmov.f32	s14, s0
 80162b6:	eef0 7a60 	vmov.f32	s15, s1
 80162ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162bc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 80162c0:	e11a      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>
 80162c2:	e119      	b.n	80164f8 <pifGps_ParsingNmea+0x7b0>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 80162c4:	4b74      	ldr	r3, [pc, #464]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d106      	bne.n	80162da <pifGps_ParsingNmea+0x592>
 80162cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ce:	330e      	adds	r3, #14
 80162d0:	4619      	mov	r1, r3
 80162d2:	4872      	ldr	r0, [pc, #456]	; (801649c <pifGps_ParsingNmea+0x754>)
 80162d4:	f7ff fa6e 	bl	80157b4 <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 80162d8:	e110      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80162da:	4b6f      	ldr	r3, [pc, #444]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	2b03      	cmp	r3, #3
 80162e0:	d10a      	bne.n	80162f8 <pifGps_ParsingNmea+0x5b0>
 80162e2:	486e      	ldr	r0, [pc, #440]	; (801649c <pifGps_ParsingNmea+0x754>)
 80162e4:	f7ff fbac 	bl	8015a40 <_convertString2Degrees>
 80162e8:	eeb0 7a40 	vmov.f32	s14, s0
 80162ec:	eef0 7a60 	vmov.f32	s15, s1
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 80162f6:	e101      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80162f8:	4b67      	ldr	r3, [pc, #412]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	2b04      	cmp	r3, #4
 80162fe:	d10d      	bne.n	801631c <pifGps_ParsingNmea+0x5d4>
 8016300:	4b66      	ldr	r3, [pc, #408]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	2b53      	cmp	r3, #83	; 0x53
 8016306:	d109      	bne.n	801631c <pifGps_ParsingNmea+0x5d4>
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801630e:	4690      	mov	r8, r2
 8016310:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8016314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016316:	e9c3 8906 	strd	r8, r9, [r3, #24]
 801631a:	e04f      	b.n	80163bc <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 801631c:	4b5e      	ldr	r3, [pc, #376]	; (8016498 <pifGps_ParsingNmea+0x750>)
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	2b05      	cmp	r3, #5
 8016322:	d10a      	bne.n	801633a <pifGps_ParsingNmea+0x5f2>
 8016324:	485d      	ldr	r0, [pc, #372]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016326:	f7ff fb8b 	bl	8015a40 <_convertString2Degrees>
 801632a:	eeb0 7a40 	vmov.f32	s14, s0
 801632e:	eef0 7a60 	vmov.f32	s15, s1
 8016332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016334:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016338:	e0e0      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801633a:	4b57      	ldr	r3, [pc, #348]	; (8016498 <pifGps_ParsingNmea+0x750>)
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	2b06      	cmp	r3, #6
 8016340:	d10d      	bne.n	801635e <pifGps_ParsingNmea+0x616>
 8016342:	4b56      	ldr	r3, [pc, #344]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	2b57      	cmp	r3, #87	; 0x57
 8016348:	d109      	bne.n	801635e <pifGps_ParsingNmea+0x616>
 801634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016350:	4614      	mov	r4, r2
 8016352:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8016356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016358:	e9c3 4508 	strd	r4, r5, [r3, #32]
 801635c:	e02e      	b.n	80163bc <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 801635e:	4b4e      	ldr	r3, [pc, #312]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	2b07      	cmp	r3, #7
 8016364:	d10f      	bne.n	8016386 <pifGps_ParsingNmea+0x63e>
 8016366:	484d      	ldr	r0, [pc, #308]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016368:	f7ff faa6 	bl	80158b8 <_convertString2Float>
 801636c:	ec51 0b10 	vmov	r0, r1, d0
 8016370:	a347      	add	r3, pc, #284	; (adr r3, 8016490 <pifGps_ParsingNmea+0x748>)
 8016372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016376:	f7ea f8f3 	bl	8000560 <__aeabi_dmul>
 801637a:	4602      	mov	r2, r0
 801637c:	460b      	mov	r3, r1
 801637e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016380:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 8016384:	e0ba      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 8016386:	4b44      	ldr	r3, [pc, #272]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	2b08      	cmp	r3, #8
 801638c:	d10a      	bne.n	80163a4 <pifGps_ParsingNmea+0x65c>
 801638e:	4843      	ldr	r0, [pc, #268]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016390:	f7ff fa92 	bl	80158b8 <_convertString2Float>
 8016394:	eeb0 7a40 	vmov.f32	s14, s0
 8016398:	eef0 7a60 	vmov.f32	s15, s1
 801639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 80163a2:	e0ab      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 80163a4:	4b3c      	ldr	r3, [pc, #240]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	2b09      	cmp	r3, #9
 80163aa:	f040 80a7 	bne.w	80164fc <pifGps_ParsingNmea+0x7b4>
 80163ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b0:	330e      	adds	r3, #14
 80163b2:	4619      	mov	r1, r3
 80163b4:	4839      	ldr	r0, [pc, #228]	; (801649c <pifGps_ParsingNmea+0x754>)
 80163b6:	f7ff f9b9 	bl	801572c <_convertString2Date>
				break;
 80163ba:	e09f      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>
 80163bc:	e09e      	b.n	80164fc <pifGps_ParsingNmea+0x7b4>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 80163be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	f000 809c 	beq.w	8016500 <pifGps_ParsingNmea+0x7b8>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 80163c8:	4b33      	ldr	r3, [pc, #204]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	d108      	bne.n	80163e2 <pifGps_ParsingNmea+0x69a>
 80163d0:	4832      	ldr	r0, [pc, #200]	; (801649c <pifGps_ParsingNmea+0x754>)
 80163d2:	f7ff fafd 	bl	80159d0 <_convertString2Interger>
 80163d6:	4602      	mov	r2, r0
 80163d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163dc:	b2d2      	uxtb	r2, r2
 80163de:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80163e0:	e08e      	b.n	8016500 <pifGps_ParsingNmea+0x7b8>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80163e2:	4b2d      	ldr	r3, [pc, #180]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	2b02      	cmp	r3, #2
 80163e8:	d108      	bne.n	80163fc <pifGps_ParsingNmea+0x6b4>
 80163ea:	482c      	ldr	r0, [pc, #176]	; (801649c <pifGps_ParsingNmea+0x754>)
 80163ec:	f7ff faf0 	bl	80159d0 <_convertString2Interger>
 80163f0:	4602      	mov	r2, r0
 80163f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163f6:	b2d2      	uxtb	r2, r2
 80163f8:	705a      	strb	r2, [r3, #1]
				break;
 80163fa:	e081      	b.n	8016500 <pifGps_ParsingNmea+0x7b8>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 80163fc:	4b26      	ldr	r3, [pc, #152]	; (8016498 <pifGps_ParsingNmea+0x750>)
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	2b03      	cmp	r3, #3
 8016402:	d108      	bne.n	8016416 <pifGps_ParsingNmea+0x6ce>
 8016404:	4825      	ldr	r0, [pc, #148]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016406:	f7ff fae3 	bl	80159d0 <_convertString2Interger>
 801640a:	4602      	mov	r2, r0
 801640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016410:	b2d2      	uxtb	r2, r2
 8016412:	709a      	strb	r2, [r3, #2]
				break;
 8016414:	e074      	b.n	8016500 <pifGps_ParsingNmea+0x7b8>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 8016416:	4b20      	ldr	r3, [pc, #128]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016418:	781b      	ldrb	r3, [r3, #0]
 801641a:	2b04      	cmp	r3, #4
 801641c:	d170      	bne.n	8016500 <pifGps_ParsingNmea+0x7b8>
 801641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016422:	3303      	adds	r3, #3
 8016424:	223f      	movs	r2, #63	; 0x3f
 8016426:	491d      	ldr	r1, [pc, #116]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016428:	4618      	mov	r0, r3
 801642a:	f00d f94b 	bl	80236c4 <strncpy>
				break;
 801642e:	e067      	b.n	8016500 <pifGps_ParsingNmea+0x7b8>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 8016430:	4b19      	ldr	r3, [pc, #100]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	2b01      	cmp	r3, #1
 8016436:	d10a      	bne.n	801644e <pifGps_ParsingNmea+0x706>
 8016438:	4818      	ldr	r0, [pc, #96]	; (801649c <pifGps_ParsingNmea+0x754>)
 801643a:	f7ff fa3d 	bl	80158b8 <_convertString2Float>
 801643e:	eeb0 7a40 	vmov.f32	s14, s0
 8016442:	eef0 7a60 	vmov.f32	s15, s1
 8016446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016448:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 801644c:	e05a      	b.n	8016504 <pifGps_ParsingNmea+0x7bc>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 801644e:	4b12      	ldr	r3, [pc, #72]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	2b05      	cmp	r3, #5
 8016454:	d156      	bne.n	8016504 <pifGps_ParsingNmea+0x7bc>
 8016456:	4811      	ldr	r0, [pc, #68]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016458:	f7ff fa2e 	bl	80158b8 <_convertString2Float>
 801645c:	ec51 0b10 	vmov	r0, r1, d0
 8016460:	a30b      	add	r3, pc, #44	; (adr r3, 8016490 <pifGps_ParsingNmea+0x748>)
 8016462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016466:	f7ea f87b 	bl	8000560 <__aeabi_dmul>
 801646a:	4602      	mov	r2, r0
 801646c:	460b      	mov	r3, r1
 801646e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016470:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 8016474:	e046      	b.n	8016504 <pifGps_ParsingNmea+0x7bc>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8016476:	4b08      	ldr	r3, [pc, #32]	; (8016498 <pifGps_ParsingNmea+0x750>)
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	2b01      	cmp	r3, #1
 801647c:	d110      	bne.n	80164a0 <pifGps_ParsingNmea+0x758>
 801647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016480:	330e      	adds	r3, #14
 8016482:	4619      	mov	r1, r3
 8016484:	4805      	ldr	r0, [pc, #20]	; (801649c <pifGps_ParsingNmea+0x754>)
 8016486:	f7ff f995 	bl	80157b4 <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 801648a:	e03d      	b.n	8016508 <pifGps_ParsingNmea+0x7c0>
 801648c:	f3af 8000 	nop.w
 8016490:	00000000 	.word	0x00000000
 8016494:	40e91e80 	.word	0x40e91e80
 8016498:	20001f2d 	.word	0x20001f2d
 801649c:	20001f30 	.word	0x20001f30
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 80164a0:	4b81      	ldr	r3, [pc, #516]	; (80166a8 <pifGps_ParsingNmea+0x960>)
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	d107      	bne.n	80164b8 <pifGps_ParsingNmea+0x770>
 80164a8:	4880      	ldr	r0, [pc, #512]	; (80166ac <pifGps_ParsingNmea+0x964>)
 80164aa:	f7ff fa91 	bl	80159d0 <_convertString2Interger>
 80164ae:	4603      	mov	r3, r0
 80164b0:	b2da      	uxtb	r2, r3
 80164b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b4:	741a      	strb	r2, [r3, #16]
				break;
 80164b6:	e027      	b.n	8016508 <pifGps_ParsingNmea+0x7c0>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 80164b8:	4b7b      	ldr	r3, [pc, #492]	; (80166a8 <pifGps_ParsingNmea+0x960>)
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	2b03      	cmp	r3, #3
 80164be:	d107      	bne.n	80164d0 <pifGps_ParsingNmea+0x788>
 80164c0:	487a      	ldr	r0, [pc, #488]	; (80166ac <pifGps_ParsingNmea+0x964>)
 80164c2:	f7ff fa85 	bl	80159d0 <_convertString2Interger>
 80164c6:	4603      	mov	r3, r0
 80164c8:	b2da      	uxtb	r2, r3
 80164ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164cc:	73da      	strb	r2, [r3, #15]
				break;
 80164ce:	e01b      	b.n	8016508 <pifGps_ParsingNmea+0x7c0>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 80164d0:	4b75      	ldr	r3, [pc, #468]	; (80166a8 <pifGps_ParsingNmea+0x960>)
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	2b04      	cmp	r3, #4
 80164d6:	d117      	bne.n	8016508 <pifGps_ParsingNmea+0x7c0>
 80164d8:	4874      	ldr	r0, [pc, #464]	; (80166ac <pifGps_ParsingNmea+0x964>)
 80164da:	f7ff fa79 	bl	80159d0 <_convertString2Interger>
 80164de:	4603      	mov	r3, r0
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	3330      	adds	r3, #48	; 0x30
 80164e4:	b2da      	uxtb	r2, r3
 80164e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e8:	739a      	strb	r2, [r3, #14]
				break;
 80164ea:	e00d      	b.n	8016508 <pifGps_ParsingNmea+0x7c0>
			}
		}
 80164ec:	bf00      	nop
 80164ee:	e00c      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 80164f0:	bf00      	nop
 80164f2:	e00a      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 80164f4:	bf00      	nop
 80164f6:	e008      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 80164f8:	bf00      	nop
 80164fa:	e006      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 80164fc:	bf00      	nop
 80164fe:	e004      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 8016500:	bf00      	nop
 8016502:	e002      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 8016504:	bf00      	nop
 8016506:	e000      	b.n	801650a <pifGps_ParsingNmea+0x7c2>
				break;
 8016508:	bf00      	nop
		param++;
 801650a:	4b67      	ldr	r3, [pc, #412]	; (80166a8 <pifGps_ParsingNmea+0x960>)
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	3301      	adds	r3, #1
 8016510:	b2da      	uxtb	r2, r3
 8016512:	4b65      	ldr	r3, [pc, #404]	; (80166a8 <pifGps_ParsingNmea+0x960>)
 8016514:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 8016516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801651a:	2b2a      	cmp	r3, #42	; 0x2a
 801651c:	d103      	bne.n	8016526 <pifGps_ParsingNmea+0x7de>
 801651e:	4b64      	ldr	r3, [pc, #400]	; (80166b0 <pifGps_ParsingNmea+0x968>)
 8016520:	2201      	movs	r2, #1
 8016522:	701a      	strb	r2, [r3, #0]
 8016524:	e007      	b.n	8016536 <pifGps_ParsingNmea+0x7ee>
		else parity ^= c;
 8016526:	4b63      	ldr	r3, [pc, #396]	; (80166b4 <pifGps_ParsingNmea+0x96c>)
 8016528:	781a      	ldrb	r2, [r3, #0]
 801652a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801652e:	4053      	eors	r3, r2
 8016530:	b2da      	uxtb	r2, r3
 8016532:	4b60      	ldr	r3, [pc, #384]	; (80166b4 <pifGps_ParsingNmea+0x96c>)
 8016534:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016538:	689b      	ldr	r3, [r3, #8]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d018      	beq.n	8016570 <pifGps_ParsingNmea+0x828>
			string[offset++] = c;
 801653e:	4b5e      	ldr	r3, [pc, #376]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	1c5a      	adds	r2, r3, #1
 8016544:	b2d1      	uxtb	r1, r2
 8016546:	4a5c      	ldr	r2, [pc, #368]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016548:	7011      	strb	r1, [r2, #0]
 801654a:	4619      	mov	r1, r3
 801654c:	4a57      	ldr	r2, [pc, #348]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801654e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016552:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016554:	4b58      	ldr	r3, [pc, #352]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	1c5a      	adds	r2, r3, #1
 801655a:	b2d1      	uxtb	r1, r2
 801655c:	4a56      	ldr	r2, [pc, #344]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 801655e:	7011      	strb	r1, [r2, #0]
 8016560:	461a      	mov	r2, r3
 8016562:	4b52      	ldr	r3, [pc, #328]	; (80166ac <pifGps_ParsingNmea+0x964>)
 8016564:	2100      	movs	r1, #0
 8016566:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656a:	689b      	ldr	r3, [r3, #8]
 801656c:	484f      	ldr	r0, [pc, #316]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801656e:	4798      	blx	r3
		}
		offset = 0;
 8016570:	4b51      	ldr	r3, [pc, #324]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016572:	2200      	movs	r2, #0
 8016574:	701a      	strb	r2, [r3, #0]
 8016576:	e091      	b.n	801669c <pifGps_ParsingNmea+0x954>
	}
	else if (c == '\r' || c == '\n') {
 8016578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801657c:	2b0d      	cmp	r3, #13
 801657e:	d003      	beq.n	8016588 <pifGps_ParsingNmea+0x840>
 8016580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016584:	2b0a      	cmp	r3, #10
 8016586:	d16e      	bne.n	8016666 <pifGps_ParsingNmea+0x91e>
		if (msg_id && checksum_param) { //parity checksum
 8016588:	4b4c      	ldr	r3, [pc, #304]	; (80166bc <pifGps_ParsingNmea+0x974>)
 801658a:	881b      	ldrh	r3, [r3, #0]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d03d      	beq.n	801660c <pifGps_ParsingNmea+0x8c4>
 8016590:	4b47      	ldr	r3, [pc, #284]	; (80166b0 <pifGps_ParsingNmea+0x968>)
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d039      	beq.n	801660c <pifGps_ParsingNmea+0x8c4>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016598:	4b44      	ldr	r3, [pc, #272]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	4618      	mov	r0, r3
 801659e:	f7ff faf1 	bl	8015b84 <_convertAscii2Hex>
 80165a2:	4603      	mov	r3, r0
 80165a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 80165a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80165ac:	011b      	lsls	r3, r3, #4
 80165ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 80165b2:	4b3e      	ldr	r3, [pc, #248]	; (80166ac <pifGps_ParsingNmea+0x964>)
 80165b4:	785b      	ldrb	r3, [r3, #1]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7ff fae4 	bl	8015b84 <_convertAscii2Hex>
 80165bc:	4603      	mov	r3, r0
 80165be:	461a      	mov	r2, r3
 80165c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80165c4:	4413      	add	r3, r2
 80165c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 80165ca:	4b3a      	ldr	r3, [pc, #232]	; (80166b4 <pifGps_ParsingNmea+0x96c>)
 80165cc:	781b      	ldrb	r3, [r3, #0]
 80165ce:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d117      	bne.n	8016606 <pifGps_ParsingNmea+0x8be>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 80165d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	b29a      	uxth	r2, r3
 80165dc:	4b37      	ldr	r3, [pc, #220]	; (80166bc <pifGps_ParsingNmea+0x974>)
 80165de:	881b      	ldrh	r3, [r3, #0]
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d102      	bne.n	80165ea <pifGps_ParsingNmea+0x8a2>
 80165e4:	2301      	movs	r3, #1
 80165e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80165ea:	4b34      	ldr	r3, [pc, #208]	; (80166bc <pifGps_ParsingNmea+0x974>)
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	2b0c      	cmp	r3, #12
 80165f0:	d109      	bne.n	8016606 <pifGps_ParsingNmea+0x8be>
 80165f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d005      	beq.n	8016606 <pifGps_ParsingNmea+0x8be>
					(p_owner->__evt_text)(p_owner->__p_txt);
 80165fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016600:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8016602:	4610      	mov	r0, r2
 8016604:	4798      	blx	r3
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
			}
#endif
			rtn = TRUE;
 8016606:	2301      	movs	r3, #1
 8016608:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 801660c:	4b28      	ldr	r3, [pc, #160]	; (80166b0 <pifGps_ParsingNmea+0x968>)
 801660e:	2200      	movs	r2, #0
 8016610:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016614:	689b      	ldr	r3, [r3, #8]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d018      	beq.n	801664c <pifGps_ParsingNmea+0x904>
			string[offset++] = c;
 801661a:	4b27      	ldr	r3, [pc, #156]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	1c5a      	adds	r2, r3, #1
 8016620:	b2d1      	uxtb	r1, r2
 8016622:	4a25      	ldr	r2, [pc, #148]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016624:	7011      	strb	r1, [r2, #0]
 8016626:	4619      	mov	r1, r3
 8016628:	4a20      	ldr	r2, [pc, #128]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801662a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801662e:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016630:	4b21      	ldr	r3, [pc, #132]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	1c5a      	adds	r2, r3, #1
 8016636:	b2d1      	uxtb	r1, r2
 8016638:	4a1f      	ldr	r2, [pc, #124]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 801663a:	7011      	strb	r1, [r2, #0]
 801663c:	461a      	mov	r2, r3
 801663e:	4b1b      	ldr	r3, [pc, #108]	; (80166ac <pifGps_ParsingNmea+0x964>)
 8016640:	2100      	movs	r1, #0
 8016642:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016646:	689b      	ldr	r3, [r3, #8]
 8016648:	4818      	ldr	r0, [pc, #96]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801664a:	4798      	blx	r3
		}
		offset = 0;
 801664c:	4b1a      	ldr	r3, [pc, #104]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 801664e:	2200      	movs	r2, #0
 8016650:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 8016652:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016656:	2b00      	cmp	r3, #0
 8016658:	d002      	beq.n	8016660 <pifGps_ParsingNmea+0x918>
			pifGps_SendEvent(p_owner);
 801665a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801665c:	f7ff fb52 	bl	8015d04 <pifGps_SendEvent>
		}
		return rtn;
 8016660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016664:	e01b      	b.n	801669e <pifGps_ParsingNmea+0x956>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016666:	4b14      	ldr	r3, [pc, #80]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	2b1f      	cmp	r3, #31
 801666c:	d80a      	bhi.n	8016684 <pifGps_ParsingNmea+0x93c>
 801666e:	4b12      	ldr	r3, [pc, #72]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016670:	781b      	ldrb	r3, [r3, #0]
 8016672:	1c5a      	adds	r2, r3, #1
 8016674:	b2d1      	uxtb	r1, r2
 8016676:	4a10      	ldr	r2, [pc, #64]	; (80166b8 <pifGps_ParsingNmea+0x970>)
 8016678:	7011      	strb	r1, [r2, #0]
 801667a:	4619      	mov	r1, r3
 801667c:	4a0b      	ldr	r2, [pc, #44]	; (80166ac <pifGps_ParsingNmea+0x964>)
 801667e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016682:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8016684:	4b0a      	ldr	r3, [pc, #40]	; (80166b0 <pifGps_ParsingNmea+0x968>)
 8016686:	781b      	ldrb	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d107      	bne.n	801669c <pifGps_ParsingNmea+0x954>
 801668c:	4b09      	ldr	r3, [pc, #36]	; (80166b4 <pifGps_ParsingNmea+0x96c>)
 801668e:	781a      	ldrb	r2, [r3, #0]
 8016690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016694:	4053      	eors	r3, r2
 8016696:	b2da      	uxtb	r2, r3
 8016698:	4b06      	ldr	r3, [pc, #24]	; (80166b4 <pifGps_ParsingNmea+0x96c>)
 801669a:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 801669c:	2300      	movs	r3, #0
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3738      	adds	r7, #56	; 0x38
 80166a2:	46bd      	mov	sp, r7
 80166a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80166a8:	20001f2d 	.word	0x20001f2d
 80166ac:	20001f30 	.word	0x20001f30
 80166b0:	20001f52 	.word	0x20001f52
 80166b4:	20001f2f 	.word	0x20001f2f
 80166b8:	20001f2e 	.word	0x20001f2e
 80166bc:	20001f50 	.word	0x20001f50

080166c0 <_evtParsing>:
#include "gps/pif_gps_nmea.h"

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
	PifGpsNmea *p_owner = (PifGpsNmea *)p_client;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	60fb      	str	r3, [r7, #12]
	uint8_t c;

	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80166ce:	e005      	b.n	80166dc <_evtParsing+0x1c>
		pifGps_ParsingNmea(&p_owner->_gps, c);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	7afa      	ldrb	r2, [r7, #11]
 80166d4:	4611      	mov	r1, r2
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7ff fb36 	bl	8015d48 <pifGps_ParsingNmea>
	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80166e0:	f107 010b 	add.w	r1, r7, #11
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	4610      	mov	r0, r2
 80166e8:	4798      	blx	r3
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d1ef      	bne.n	80166d0 <_evtParsing+0x10>
	}
}
 80166f0:	bf00      	nop
 80166f2:	bf00      	nop
 80166f4:	3710      	adds	r7, #16
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
	...

080166fc <pifGpsNmea_Init>:

BOOL pifGpsNmea_Init(PifGpsNmea* p_owner, PifId id)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	460b      	mov	r3, r1
 8016706:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d104      	bne.n	8016718 <pifGpsNmea_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801670e:	4b0f      	ldr	r3, [pc, #60]	; (801674c <pifGpsNmea_Init+0x50>)
 8016710:	2201      	movs	r2, #1
 8016712:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016714:	2300      	movs	r3, #0
 8016716:	e014      	b.n	8016742 <pifGpsNmea_Init+0x46>
	}

	memset(p_owner, 0, sizeof(PifGpsNmea));
 8016718:	2270      	movs	r2, #112	; 0x70
 801671a:	2100      	movs	r1, #0
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f00c fe63 	bl	80233e8 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	887a      	ldrh	r2, [r7, #2]
 8016726:	4611      	mov	r1, r2
 8016728:	4618      	mov	r0, r3
 801672a:	f7ff fa69 	bl	8015c00 <pifGps_Init>
 801672e:	4603      	mov	r3, r0
 8016730:	2b00      	cmp	r3, #0
 8016732:	d001      	beq.n	8016738 <pifGpsNmea_Init+0x3c>
    return TRUE;
 8016734:	2301      	movs	r3, #1
 8016736:	e004      	b.n	8016742 <pifGpsNmea_Init+0x46>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016738:	bf00      	nop

fail:
	pifGpsNmea_Clear(p_owner);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 f808 	bl	8016750 <pifGpsNmea_Clear>
    return FALSE;
 8016740:	2300      	movs	r3, #0
}
 8016742:	4618      	mov	r0, r3
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	20001db8 	.word	0x20001db8

08016750 <pifGpsNmea_Clear>:

void pifGpsNmea_Clear(PifGpsNmea* p_owner)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
	pifGps_Clear(&p_owner->_gps);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	4618      	mov	r0, r3
 801675c:	f7ff fa7a 	bl	8015c54 <pifGps_Clear>
}
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <pifGpsNmea_AttachComm>:

void pifGpsNmea_AttachComm(PifGpsNmea* p_owner, PifComm* p_comm)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	683a      	ldr	r2, [r7, #0]
 8016776:	669a      	str	r2, [r3, #104]	; 0x68
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8016778:	2300      	movs	r3, #0
 801677a:	4a04      	ldr	r2, [pc, #16]	; (801678c <pifGpsNmea_AttachComm+0x24>)
 801677c:	6879      	ldr	r1, [r7, #4]
 801677e:	6838      	ldr	r0, [r7, #0]
 8016780:	f7fb fc80 	bl	8012084 <pifComm_AttachClient>
}
 8016784:	bf00      	nop
 8016786:	3708      	adds	r7, #8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	080166c1 	.word	0x080166c1

08016790 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016790:	b480      	push	{r7}
 8016792:	b087      	sub	sp, #28
 8016794:	af00      	add	r7, sp, #0
 8016796:	60f8      	str	r0, [r7, #12]
 8016798:	60b9      	str	r1, [r7, #8]
 801679a:	4613      	mov	r3, r2
 801679c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	75fb      	strb	r3, [r7, #23]
 80167a2:	2300      	movs	r3, #0
 80167a4:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 80167a6:	2300      	movs	r3, #0
 80167a8:	82bb      	strh	r3, [r7, #20]
 80167aa:	e00d      	b.n	80167c8 <_checksumUbx+0x38>
		ck_a += p_header[i];
 80167ac:	8abb      	ldrh	r3, [r7, #20]
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	4413      	add	r3, r2
 80167b2:	781a      	ldrb	r2, [r3, #0]
 80167b4:	7dfb      	ldrb	r3, [r7, #23]
 80167b6:	4413      	add	r3, r2
 80167b8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80167ba:	7dba      	ldrb	r2, [r7, #22]
 80167bc:	7dfb      	ldrb	r3, [r7, #23]
 80167be:	4413      	add	r3, r2
 80167c0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 80167c2:	8abb      	ldrh	r3, [r7, #20]
 80167c4:	3301      	adds	r3, #1
 80167c6:	82bb      	strh	r3, [r7, #20]
 80167c8:	8abb      	ldrh	r3, [r7, #20]
 80167ca:	2b03      	cmp	r3, #3
 80167cc:	d9ee      	bls.n	80167ac <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80167ce:	2300      	movs	r3, #0
 80167d0:	82bb      	strh	r3, [r7, #20]
 80167d2:	e00d      	b.n	80167f0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80167d4:	8abb      	ldrh	r3, [r7, #20]
 80167d6:	68ba      	ldr	r2, [r7, #8]
 80167d8:	4413      	add	r3, r2
 80167da:	781a      	ldrb	r2, [r3, #0]
 80167dc:	7dfb      	ldrb	r3, [r7, #23]
 80167de:	4413      	add	r3, r2
 80167e0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80167e2:	7dba      	ldrb	r2, [r7, #22]
 80167e4:	7dfb      	ldrb	r3, [r7, #23]
 80167e6:	4413      	add	r3, r2
 80167e8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80167ea:	8abb      	ldrh	r3, [r7, #20]
 80167ec:	3301      	adds	r3, #1
 80167ee:	82bb      	strh	r3, [r7, #20]
 80167f0:	8aba      	ldrh	r2, [r7, #20]
 80167f2:	88fb      	ldrh	r3, [r7, #6]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d3ed      	bcc.n	80167d4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	7dbb      	ldrb	r3, [r7, #22]
 80167fe:	b29b      	uxth	r3, r3
 8016800:	021b      	lsls	r3, r3, #8
 8016802:	b29b      	uxth	r3, r3
 8016804:	4413      	add	r3, r2
 8016806:	b29b      	uxth	r3, r3
}
 8016808:	4618      	mov	r0, r3
 801680a:	371c      	adds	r7, #28
 801680c:	46bd      	mov	sp, r7
 801680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016812:	4770      	bx	lr

08016814 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016814:	b590      	push	{r4, r7, lr}
 8016816:	b085      	sub	sp, #20
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	33cc      	adds	r3, #204	; 0xcc
 8016822:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016824:	e0c6      	b.n	80169b4 <_parsingPacket+0x1a0>
		switch (p_owner->__rx.state) {
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801682c:	2b09      	cmp	r3, #9
 801682e:	f200 80c0 	bhi.w	80169b2 <_parsingPacket+0x19e>
 8016832:	a201      	add	r2, pc, #4	; (adr r2, 8016838 <_parsingPacket+0x24>)
 8016834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016838:	08016861 	.word	0x08016861
 801683c:	08016891 	.word	0x08016891
 8016840:	080168a3 	.word	0x080168a3
 8016844:	080168b3 	.word	0x080168b3
 8016848:	080168c3 	.word	0x080168c3
 801684c:	080168d5 	.word	0x080168d5
 8016850:	08016907 	.word	0x08016907
 8016854:	08016941 	.word	0x08016941
 8016858:	08016955 	.word	0x08016955
 801685c:	08016995 	.word	0x08016995
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8016860:	7afb      	ldrb	r3, [r7, #11]
 8016862:	2bb5      	cmp	r3, #181	; 0xb5
 8016864:	d104      	bne.n	8016870 <_parsingPacket+0x5c>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2201      	movs	r2, #1
 801686a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 801686e:	e0a1      	b.n	80169b4 <_parsingPacket+0x1a0>
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	3310      	adds	r3, #16
 8016874:	7afa      	ldrb	r2, [r7, #11]
 8016876:	4611      	mov	r1, r2
 8016878:	4618      	mov	r0, r3
 801687a:	f7ff fa65 	bl	8015d48 <pifGps_ParsingNmea>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	f000 8097 	beq.w	80169b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_NMEA;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2209      	movs	r2, #9
 801688a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
#endif
			}
			break;
 801688e:	e091      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 8016890:	7afb      	ldrb	r3, [r7, #11]
 8016892:	2b62      	cmp	r3, #98	; 0x62
 8016894:	f040 809b 	bne.w	80169ce <_parsingPacket+0x1ba>
				p_owner->__rx.state = GURS_CLASS;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2202      	movs	r2, #2
 801689c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80168a0:	e088      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_CLASS:
			p_packet->class_id = data;
 80168a2:	7afa      	ldrb	r2, [r7, #11]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2203      	movs	r2, #3
 80168ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80168b0:	e080      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_ID:
			p_packet->msg_id = data;
 80168b2:	7afa      	ldrb	r2, [r7, #11]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2204      	movs	r2, #4
 80168bc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80168c0:	e078      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80168c2:	7afb      	ldrb	r3, [r7, #11]
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2205      	movs	r2, #5
 80168ce:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80168d2:	e06f      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	885b      	ldrh	r3, [r3, #2]
 80168d8:	b21a      	sxth	r2, r3
 80168da:	7afb      	ldrb	r3, [r7, #11]
 80168dc:	021b      	lsls	r3, r3, #8
 80168de:	b21b      	sxth	r3, r3
 80168e0:	4313      	orrs	r3, r2
 80168e2:	b21b      	sxth	r3, r3
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	885b      	ldrh	r3, [r3, #2]
 80168ee:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80168f2:	d26e      	bcs.n	80169d2 <_parsingPacket+0x1be>
				p_owner->__rx.payload_count = 0;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2200      	movs	r2, #0
 80168f8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2206      	movs	r2, #6
 8016900:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016904:	e056      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801690c:	4619      	mov	r1, r3
 801690e:	7afa      	ldrb	r2, [r7, #11]
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	440b      	add	r3, r1
 8016914:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801691c:	3301      	adds	r3, #1
 801691e:	b2da      	uxtb	r2, r3
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801692c:	b29a      	uxth	r2, r3
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	885b      	ldrh	r3, [r3, #2]
 8016932:	429a      	cmp	r2, r3
 8016934:	d33e      	bcc.n	80169b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_CK_A;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2207      	movs	r2, #7
 801693a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801693e:	e039      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 8016940:	7afb      	ldrb	r3, [r7, #11]
 8016942:	b29a      	uxth	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2208      	movs	r2, #8
 801694e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016952:	e02f      	b.n	80169b4 <_parsingPacket+0x1a0>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 801695a:	b21a      	sxth	r2, r3
 801695c:	7afb      	ldrb	r3, [r7, #11]
 801695e:	021b      	lsls	r3, r3, #8
 8016960:	b21b      	sxth	r3, r3
 8016962:	4313      	orrs	r3, r2
 8016964:	b21b      	sxth	r3, r3
 8016966:	b29a      	uxth	r2, r3
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	1d19      	adds	r1, r3, #4
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	885b      	ldrh	r3, [r3, #2]
 801697c:	461a      	mov	r2, r3
 801697e:	68f8      	ldr	r0, [r7, #12]
 8016980:	f7ff ff06 	bl	8016790 <_checksumUbx>
 8016984:	4603      	mov	r3, r0
 8016986:	429c      	cmp	r4, r3
 8016988:	d125      	bne.n	80169d6 <_parsingPacket+0x1c2>
				p_owner->__rx.state = GURS_DONE;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	220a      	movs	r2, #10
 801698e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 8016992:	e025      	b.n	80169e0 <_parsingPacket+0x1cc>
				goto fail;
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	3310      	adds	r3, #16
 8016998:	7afa      	ldrb	r2, [r7, #11]
 801699a:	4611      	mov	r1, r2
 801699c:	4618      	mov	r0, r3
 801699e:	f7ff f9d3 	bl	8015d48 <pifGps_ParsingNmea>
 80169a2:	4603      	mov	r3, r0
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d005      	beq.n	80169b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2200      	movs	r2, #0
 80169ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80169b0:	e016      	b.n	80169e0 <_parsingPacket+0x1cc>
			}
			break;

		default:
			break;
 80169b2:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80169ba:	f107 010b 	add.w	r1, r7, #11
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	4610      	mov	r0, r2
 80169c2:	4798      	blx	r3
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	f47f af2d 	bne.w	8016826 <_parsingPacket+0x12>
		}
	}
	return;
 80169cc:	e008      	b.n	80169e0 <_parsingPacket+0x1cc>
				goto fail;
 80169ce:	bf00      	nop
 80169d0:	e002      	b.n	80169d8 <_parsingPacket+0x1c4>
				goto fail;
 80169d2:	bf00      	nop
 80169d4:	e000      	b.n	80169d8 <_parsingPacket+0x1c4>
				goto fail;
 80169d6:	bf00      	nop
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2200      	movs	r2, #0
 80169dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 80169e0:	3714      	adds	r7, #20
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd90      	pop	{r4, r7, pc}
 80169e6:	bf00      	nop

080169e8 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b088      	sub	sp, #32
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	33cc      	adds	r3, #204	; 0xcc
 80169fa:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	3310      	adds	r3, #16
 8016a00:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 8016a02:	2300      	movs	r3, #0
 8016a04:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	695b      	ldr	r3, [r3, #20]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f000 8233 	beq.w	8016e76 <_evtParsing+0x48e>

    if (p_owner->__rx.state < GURS_DONE) {
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016a16:	2b09      	cmp	r3, #9
 8016a18:	d803      	bhi.n	8016a22 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 8016a1a:	6839      	ldr	r1, [r7, #0]
 8016a1c:	6978      	ldr	r0, [r7, #20]
 8016a1e:	f7ff fef9 	bl	8016814 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 8016a22:	697b      	ldr	r3, [r7, #20]
 8016a24:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016a28:	2b0a      	cmp	r3, #10
 8016a2a:	f040 8225 	bne.w	8016e78 <_evtParsing+0x490>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d017      	beq.n	8016a66 <_evtParsing+0x7e>
 8016a36:	2b05      	cmp	r3, #5
 8016a38:	f040 81f6 	bne.w	8016e28 <_evtParsing+0x440>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	785b      	ldrb	r3, [r3, #1]
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	d80b      	bhi.n	8016a5c <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00a      	beq.n	8016a62 <_evtParsing+0x7a>
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	693a      	ldr	r2, [r7, #16]
 8016a52:	7852      	ldrb	r2, [r2, #1]
 8016a54:	4611      	mov	r1, r2
 8016a56:	6978      	ldr	r0, [r7, #20]
 8016a58:	4798      	blx	r3
        		break;
 8016a5a:	e002      	b.n	8016a62 <_evtParsing+0x7a>

            default:
            	error = TRUE;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
#endif
                break;
 8016a60:	e000      	b.n	8016a64 <_evtParsing+0x7c>
        		break;
 8016a62:	bf00      	nop
        	}
        	break;
 8016a64:	e1e3      	b.n	8016e2e <_evtParsing+0x446>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	785b      	ldrb	r3, [r3, #1]
 8016a6a:	3b02      	subs	r3, #2
 8016a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a6e:	f200 81bf 	bhi.w	8016df0 <_evtParsing+0x408>
 8016a72:	a201      	add	r2, pc, #4	; (adr r2, 8016a78 <_evtParsing+0x90>)
 8016a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a78:	08016b35 	.word	0x08016b35
 8016a7c:	08016c5f 	.word	0x08016c5f
 8016a80:	08016df1 	.word	0x08016df1
 8016a84:	08016df1 	.word	0x08016df1
 8016a88:	08016c1b 	.word	0x08016c1b
 8016a8c:	08016bcf 	.word	0x08016bcf
 8016a90:	08016df1 	.word	0x08016df1
 8016a94:	08016df1 	.word	0x08016df1
 8016a98:	08016df1 	.word	0x08016df1
 8016a9c:	08016df1 	.word	0x08016df1
 8016aa0:	08016df1 	.word	0x08016df1
 8016aa4:	08016df1 	.word	0x08016df1
 8016aa8:	08016df1 	.word	0x08016df1
 8016aac:	08016df1 	.word	0x08016df1
 8016ab0:	08016df1 	.word	0x08016df1
 8016ab4:	08016df1 	.word	0x08016df1
 8016ab8:	08016db7 	.word	0x08016db7
 8016abc:	08016df1 	.word	0x08016df1
 8016ac0:	08016df1 	.word	0x08016df1
 8016ac4:	08016df1 	.word	0x08016df1
 8016ac8:	08016df1 	.word	0x08016df1
 8016acc:	08016df1 	.word	0x08016df1
 8016ad0:	08016df1 	.word	0x08016df1
 8016ad4:	08016df1 	.word	0x08016df1
 8016ad8:	08016df1 	.word	0x08016df1
 8016adc:	08016df1 	.word	0x08016df1
 8016ae0:	08016df1 	.word	0x08016df1
 8016ae4:	08016df1 	.word	0x08016df1
 8016ae8:	08016df1 	.word	0x08016df1
 8016aec:	08016df1 	.word	0x08016df1
 8016af0:	08016df1 	.word	0x08016df1
 8016af4:	08016d5f 	.word	0x08016d5f
 8016af8:	08016df1 	.word	0x08016df1
 8016afc:	08016df1 	.word	0x08016df1
 8016b00:	08016df1 	.word	0x08016df1
 8016b04:	08016df1 	.word	0x08016df1
 8016b08:	08016df1 	.word	0x08016df1
 8016b0c:	08016df1 	.word	0x08016df1
 8016b10:	08016df1 	.word	0x08016df1
 8016b14:	08016df1 	.word	0x08016df1
 8016b18:	08016df1 	.word	0x08016df1
 8016b1c:	08016df1 	.word	0x08016df1
 8016b20:	08016df1 	.word	0x08016df1
 8016b24:	08016df1 	.word	0x08016df1
 8016b28:	08016df1 	.word	0x08016df1
 8016b2c:	08016df1 	.word	0x08016df1
 8016b30:	08016c99 	.word	0x08016c99
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	689b      	ldr	r3, [r3, #8]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7e9 fca7 	bl	800048c <__aeabi_i2d>
 8016b3e:	a3b8      	add	r3, pc, #736	; (adr r3, 8016e20 <_evtParsing+0x438>)
 8016b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b44:	f7e9 fe36 	bl	80007b4 <__aeabi_ddiv>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	68f9      	ldr	r1, [r7, #12]
 8016b4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7e9 fc98 	bl	800048c <__aeabi_i2d>
 8016b5c:	a3b0      	add	r3, pc, #704	; (adr r3, 8016e20 <_evtParsing+0x438>)
 8016b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b62:	f7e9 fe27 	bl	80007b4 <__aeabi_ddiv>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	68f9      	ldr	r1, [r7, #12]
 8016b6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	695b      	ldr	r3, [r3, #20]
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7e9 fc89 	bl	800048c <__aeabi_i2d>
 8016b7a:	f04f 0200 	mov.w	r2, #0
 8016b7e:	4ba2      	ldr	r3, [pc, #648]	; (8016e08 <_evtParsing+0x420>)
 8016b80:	f7e9 fe18 	bl	80007b4 <__aeabi_ddiv>
 8016b84:	4602      	mov	r2, r0
 8016b86:	460b      	mov	r3, r1
 8016b88:	68f9      	ldr	r1, [r7, #12]
 8016b8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	699a      	ldr	r2, [r3, #24]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	69da      	ldr	r2, [r3, #28]
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016b9e:	4b9b      	ldr	r3, [pc, #620]	; (8016e0c <_evtParsing+0x424>)
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	f003 0301 	and.w	r3, r3, #1
 8016ba6:	b2d9      	uxtb	r1, r3
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016bae:	f361 0300 	bfi	r3, r1, #0, #1
 8016bb2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 8016bb6:	4b96      	ldr	r3, [pc, #600]	; (8016e10 <_evtParsing+0x428>)
 8016bb8:	2201      	movs	r2, #1
 8016bba:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016bc4:	4b93      	ldr	r3, [pc, #588]	; (8016e14 <_evtParsing+0x42c>)
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016bcc:	e116      	b.n	8016dfc <_evtParsing+0x414>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016bce:	693b      	ldr	r3, [r7, #16]
 8016bd0:	891b      	ldrh	r3, [r3, #8]
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	3344      	adds	r3, #68	; 0x44
 8016bd6:	b2da      	uxtb	r2, r3
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	7a9a      	ldrb	r2, [r3, #10]
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	7ada      	ldrb	r2, [r3, #11]
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	7b1a      	ldrb	r2, [r3, #12]
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	7b5a      	ldrb	r2, [r3, #13]
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	7b9a      	ldrb	r2, [r3, #14]
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	695b      	ldr	r3, [r3, #20]
 8016c08:	461a      	mov	r2, r3
 8016c0a:	4b83      	ldr	r3, [pc, #524]	; (8016e18 <_evtParsing+0x430>)
 8016c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8016c10:	0c9b      	lsrs	r3, r3, #18
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	829a      	strh	r2, [r3, #20]
                    break;
 8016c18:	e0f0      	b.n	8016dfc <_evtParsing+0x414>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	7bdb      	ldrb	r3, [r3, #15]
 8016c1e:	f003 0301 	and.w	r3, r3, #1
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d005      	beq.n	8016c32 <_evtParsing+0x24a>
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	7b9b      	ldrb	r3, [r3, #14]
 8016c2a:	2b03      	cmp	r3, #3
 8016c2c:	d101      	bne.n	8016c32 <_evtParsing+0x24a>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e000      	b.n	8016c34 <_evtParsing+0x24c>
 8016c32:	2300      	movs	r3, #0
 8016c34:	b2da      	uxtb	r2, r3
 8016c36:	4b75      	ldr	r3, [pc, #468]	; (8016e0c <_evtParsing+0x424>)
 8016c38:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016c3a:	4b74      	ldr	r3, [pc, #464]	; (8016e0c <_evtParsing+0x424>)
 8016c3c:	781b      	ldrb	r3, [r3, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d106      	bne.n	8016c50 <_evtParsing+0x268>
                    	p_parent->_fix = FALSE;
 8016c42:	68fa      	ldr	r2, [r7, #12]
 8016c44:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016c48:	f36f 0300 	bfc	r3, #0, #1
 8016c4c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016c5c:	e0ce      	b.n	8016dfc <_evtParsing+0x414>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	7a5b      	ldrb	r3, [r3, #9]
 8016c62:	f003 0301 	and.w	r3, r3, #1
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d005      	beq.n	8016c76 <_evtParsing+0x28e>
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	7a1b      	ldrb	r3, [r3, #8]
 8016c6e:	2b03      	cmp	r3, #3
 8016c70:	d101      	bne.n	8016c76 <_evtParsing+0x28e>
 8016c72:	2301      	movs	r3, #1
 8016c74:	e000      	b.n	8016c78 <_evtParsing+0x290>
 8016c76:	2300      	movs	r3, #0
 8016c78:	b2da      	uxtb	r2, r3
 8016c7a:	4b64      	ldr	r3, [pc, #400]	; (8016e0c <_evtParsing+0x424>)
 8016c7c:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016c7e:	4b63      	ldr	r3, [pc, #396]	; (8016e0c <_evtParsing+0x424>)
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	f040 80b7 	bne.w	8016df6 <_evtParsing+0x40e>
                    	p_parent->_fix = FALSE;
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016c8e:	f36f 0300 	bfc	r3, #0, #1
 8016c92:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016c96:	e0ae      	b.n	8016df6 <_evtParsing+0x40e>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	7a1a      	ldrb	r2, [r3, #8]
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016ca8:	2b10      	cmp	r3, #16
 8016caa:	d903      	bls.n	8016cb4 <_evtParsing+0x2cc>
                    	p_owner->_num_ch = 16;
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	2210      	movs	r2, #16
 8016cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	61fb      	str	r3, [r7, #28]
 8016cb8:	e03e      	b.n	8016d38 <_evtParsing+0x350>
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016cba:	6939      	ldr	r1, [r7, #16]
 8016cbc:	69fa      	ldr	r2, [r7, #28]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4413      	add	r3, r2
 8016cc4:	009b      	lsls	r3, r3, #2
 8016cc6:	440b      	add	r3, r1
 8016cc8:	330c      	adds	r3, #12
 8016cca:	7819      	ldrb	r1, [r3, #0]
 8016ccc:	697a      	ldr	r2, [r7, #20]
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	4413      	add	r3, r2
 8016cd2:	3379      	adds	r3, #121	; 0x79
 8016cd4:	460a      	mov	r2, r1
 8016cd6:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016cd8:	6939      	ldr	r1, [r7, #16]
 8016cda:	69fa      	ldr	r2, [r7, #28]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	005b      	lsls	r3, r3, #1
 8016ce0:	4413      	add	r3, r2
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	440b      	add	r3, r1
 8016ce6:	330d      	adds	r3, #13
 8016ce8:	7819      	ldrb	r1, [r3, #0]
 8016cea:	697a      	ldr	r2, [r7, #20]
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	4413      	add	r3, r2
 8016cf0:	3389      	adds	r3, #137	; 0x89
 8016cf2:	460a      	mov	r2, r1
 8016cf4:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016cf6:	6939      	ldr	r1, [r7, #16]
 8016cf8:	69fa      	ldr	r2, [r7, #28]
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	440b      	add	r3, r1
 8016d04:	330f      	adds	r3, #15
 8016d06:	7819      	ldrb	r1, [r3, #0]
 8016d08:	697a      	ldr	r2, [r7, #20]
 8016d0a:	69fb      	ldr	r3, [r7, #28]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	3399      	adds	r3, #153	; 0x99
 8016d10:	460a      	mov	r2, r1
 8016d12:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016d14:	6939      	ldr	r1, [r7, #16]
 8016d16:	69fa      	ldr	r2, [r7, #28]
 8016d18:	4613      	mov	r3, r2
 8016d1a:	005b      	lsls	r3, r3, #1
 8016d1c:	4413      	add	r3, r2
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	440b      	add	r3, r1
 8016d22:	3310      	adds	r3, #16
 8016d24:	7819      	ldrb	r1, [r3, #0]
 8016d26:	697a      	ldr	r2, [r7, #20]
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	4413      	add	r3, r2
 8016d2c:	33a9      	adds	r3, #169	; 0xa9
 8016d2e:	460a      	mov	r2, r1
 8016d30:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	3301      	adds	r3, #1
 8016d36:	61fb      	str	r3, [r7, #28]
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016d3e:	461a      	mov	r2, r3
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	4293      	cmp	r3, r2
 8016d44:	dbb9      	blt.n	8016cba <_evtParsing+0x2d2>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016d46:	697b      	ldr	r3, [r7, #20]
 8016d48:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016d52:	4b30      	ldr	r3, [pc, #192]	; (8016e14 <_evtParsing+0x42c>)
 8016d54:	681a      	ldr	r2, [r3, #0]
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016d5c:	e04e      	b.n	8016dfc <_evtParsing+0x414>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	7ddb      	ldrb	r3, [r3, #23]
 8016d62:	f003 0304 	and.w	r3, r3, #4
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d047      	beq.n	8016dfa <_evtParsing+0x412>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	8a1b      	ldrh	r3, [r3, #16]
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	3330      	adds	r3, #48	; 0x30
 8016d72:	b2da      	uxtb	r2, r3
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	7c9a      	ldrb	r2, [r3, #18]
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	7cda      	ldrb	r2, [r3, #19]
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	7d1a      	ldrb	r2, [r3, #20]
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	7d5a      	ldrb	r2, [r3, #21]
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	7d9a      	ldrb	r2, [r3, #22]
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016da0:	693b      	ldr	r3, [r7, #16]
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	461a      	mov	r2, r3
 8016da6:	4b1c      	ldr	r3, [pc, #112]	; (8016e18 <_evtParsing+0x430>)
 8016da8:	fba3 2302 	umull	r2, r3, r3, r2
 8016dac:	0c9b      	lsrs	r3, r3, #18
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016db4:	e021      	b.n	8016dfa <_evtParsing+0x412>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	695b      	ldr	r3, [r3, #20]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7e9 fb56 	bl	800046c <__aeabi_ui2d>
 8016dc0:	4602      	mov	r2, r0
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	68f9      	ldr	r1, [r7, #12]
 8016dc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	69db      	ldr	r3, [r3, #28]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7e9 fb5c 	bl	800048c <__aeabi_i2d>
 8016dd4:	a30a      	add	r3, pc, #40	; (adr r3, 8016e00 <_evtParsing+0x418>)
 8016dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dda:	f7e9 fceb 	bl	80007b4 <__aeabi_ddiv>
 8016dde:	4602      	mov	r2, r0
 8016de0:	460b      	mov	r3, r1
 8016de2:	68f9      	ldr	r1, [r7, #12]
 8016de4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016de8:	4b0c      	ldr	r3, [pc, #48]	; (8016e1c <_evtParsing+0x434>)
 8016dea:	2201      	movs	r2, #1
 8016dec:	701a      	strb	r2, [r3, #0]
                    break;
 8016dee:	e005      	b.n	8016dfc <_evtParsing+0x414>

                default:
                	error = TRUE;
 8016df0:	2301      	movs	r3, #1
 8016df2:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
#endif
                    break;
 8016df4:	e002      	b.n	8016dfc <_evtParsing+0x414>
                    break;
 8016df6:	bf00      	nop
 8016df8:	e019      	b.n	8016e2e <_evtParsing+0x446>
                	break;
 8016dfa:	bf00      	nop
            }
        	break;
 8016dfc:	e017      	b.n	8016e2e <_evtParsing+0x446>
 8016dfe:	bf00      	nop
 8016e00:	00000000 	.word	0x00000000
 8016e04:	40f86a00 	.word	0x40f86a00
 8016e08:	408f4000 	.word	0x408f4000
 8016e0c:	20001f53 	.word	0x20001f53
 8016e10:	20001f54 	.word	0x20001f54
 8016e14:	20001dd0 	.word	0x20001dd0
 8016e18:	431bde83 	.word	0x431bde83
 8016e1c:	20001f55 	.word	0x20001f55
 8016e20:	00000000 	.word	0x00000000
 8016e24:	416312d0 	.word	0x416312d0

		default:
        	error = TRUE;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
#endif
			break;
 8016e2c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016e2e:	7efb      	ldrb	r3, [r7, #27]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d107      	bne.n	8016e44 <_evtParsing+0x45c>
 8016e34:	697b      	ldr	r3, [r7, #20]
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d003      	beq.n	8016e44 <_evtParsing+0x45c>
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	6938      	ldr	r0, [r7, #16]
 8016e42:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016e44:	4b0e      	ldr	r3, [pc, #56]	; (8016e80 <_evtParsing+0x498>)
 8016e46:	781b      	ldrb	r3, [r3, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00f      	beq.n	8016e6c <_evtParsing+0x484>
 8016e4c:	4b0d      	ldr	r3, [pc, #52]	; (8016e84 <_evtParsing+0x49c>)
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d00b      	beq.n	8016e6c <_evtParsing+0x484>
			pifGps_SendEvent(&p_owner->_gps);
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	3310      	adds	r3, #16
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7fe ff53 	bl	8015d04 <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016e5e:	4b08      	ldr	r3, [pc, #32]	; (8016e80 <_evtParsing+0x498>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	4b06      	ldr	r3, [pc, #24]	; (8016e80 <_evtParsing+0x498>)
 8016e66:	781a      	ldrb	r2, [r3, #0]
 8016e68:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <_evtParsing+0x49c>)
 8016e6a:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016e74:	e000      	b.n	8016e78 <_evtParsing+0x490>
    if (!p_owner->_gps.evt_receive) return;
 8016e76:	bf00      	nop
    }
}
 8016e78:	3720      	adds	r7, #32
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	20001f54 	.word	0x20001f54
 8016e84:	20001f55 	.word	0x20001f55

08016e88 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b088      	sub	sp, #32
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	4613      	mov	r3, r2
 8016e94:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016e96:	2300      	movs	r3, #0
 8016e98:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	68ba      	ldr	r2, [r7, #8]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8016ea8:	d13a      	bne.n	8016f20 <_makeNmeaPacket+0x98>
			i++;
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	3301      	adds	r3, #1
 8016eae:	61bb      	str	r3, [r7, #24]
			break;
 8016eb0:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016eb2:	4b4b      	ldr	r3, [pc, #300]	; (8016fe0 <_makeNmeaPacket+0x158>)
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	7ffb      	ldrb	r3, [r7, #31]
 8016eb8:	091b      	lsrs	r3, r3, #4
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	f003 030f 	and.w	r3, r3, #15
 8016ec0:	441a      	add	r2, r3
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	440b      	add	r3, r1
 8016ec8:	7812      	ldrb	r2, [r2, #0]
 8016eca:	701a      	strb	r2, [r3, #0]
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016ed2:	4b43      	ldr	r3, [pc, #268]	; (8016fe0 <_makeNmeaPacket+0x158>)
 8016ed4:	681a      	ldr	r2, [r3, #0]
 8016ed6:	7ffb      	ldrb	r3, [r7, #31]
 8016ed8:	f003 030f 	and.w	r3, r3, #15
 8016edc:	441a      	add	r2, r3
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	68b9      	ldr	r1, [r7, #8]
 8016ee2:	440b      	add	r3, r1
 8016ee4:	7812      	ldrb	r2, [r2, #0]
 8016ee6:	701a      	strb	r2, [r3, #0]
 8016ee8:	69bb      	ldr	r3, [r7, #24]
 8016eea:	3301      	adds	r3, #1
 8016eec:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016eee:	69bb      	ldr	r3, [r7, #24]
 8016ef0:	68ba      	ldr	r2, [r7, #8]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	220d      	movs	r2, #13
 8016ef6:	701a      	strb	r2, [r3, #0]
 8016ef8:	69bb      	ldr	r3, [r7, #24]
 8016efa:	3301      	adds	r3, #1
 8016efc:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016efe:	69bb      	ldr	r3, [r7, #24]
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	4413      	add	r3, r2
 8016f04:	220a      	movs	r2, #10
 8016f06:	701a      	strb	r2, [r3, #0]
 8016f08:	69bb      	ldr	r3, [r7, #24]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016f0e:	69bb      	ldr	r3, [r7, #24]
 8016f10:	68ba      	ldr	r2, [r7, #8]
 8016f12:	4413      	add	r3, r2
 8016f14:	2200      	movs	r2, #0
 8016f16:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016f18:	79fb      	ldrb	r3, [r7, #7]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d01b      	beq.n	8016f56 <_makeNmeaPacket+0xce>
 8016f1e:	e00f      	b.n	8016f40 <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	68ba      	ldr	r2, [r7, #8]
 8016f24:	4413      	add	r3, r2
 8016f26:	781a      	ldrb	r2, [r3, #0]
 8016f28:	7ffb      	ldrb	r3, [r7, #31]
 8016f2a:	4053      	eors	r3, r2
 8016f2c:	77fb      	strb	r3, [r7, #31]
			i++;
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	3301      	adds	r3, #1
 8016f32:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016f34:	e7b3      	b.n	8016e9e <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 8016f36:	f7fd fda7 	bl	8014a88 <pifTaskManager_Yield>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d009      	beq.n	8016f54 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7fc fda3 	bl	8013a92 <pifRingBuffer_IsEmpty>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d0f1      	beq.n	8016f36 <_makeNmeaPacket+0xae>
 8016f52:	e000      	b.n	8016f56 <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8016f54:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7fc fe1a 	bl	8013b96 <pifRingBuffer_BeginPutting>

	header[0] = i;
 8016f62:	69bb      	ldr	r3, [r7, #24]
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016f70:	2300      	movs	r3, #0
 8016f72:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f7a:	f107 0114 	add.w	r1, r7, #20
 8016f7e:	2204      	movs	r2, #4
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7fc fe8f 	bl	8013ca4 <pifRingBuffer_PutData>
 8016f86:	4603      	mov	r3, r0
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d01a      	beq.n	8016fc2 <_makeNmeaPacket+0x13a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f92:	7d3a      	ldrb	r2, [r7, #20]
 8016f94:	b292      	uxth	r2, r2
 8016f96:	68b9      	ldr	r1, [r7, #8]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7fc fe83 	bl	8013ca4 <pifRingBuffer_PutData>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d010      	beq.n	8016fc6 <_makeNmeaPacket+0x13e>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7fc fe0b 	bl	8013bc6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016fb6:	69db      	ldr	r3, [r3, #28]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7fd fb25 	bl	8014608 <pifTask_SetTrigger>
	return TRUE;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e009      	b.n	8016fd6 <_makeNmeaPacket+0x14e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016fc2:	bf00      	nop
 8016fc4:	e000      	b.n	8016fc8 <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016fc6:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7fc fe07 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	return FALSE;
 8016fd4:	2300      	movs	r3, #0
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3720      	adds	r7, #32
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}
 8016fde:	bf00      	nop
 8016fe0:	2000012c 	.word	0x2000012c

08016fe4 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b088      	sub	sp, #32
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	603b      	str	r3, [r7, #0]
 8016ff0:	4613      	mov	r3, r2
 8016ff2:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	3302      	adds	r3, #2
 8016ff8:	88fa      	ldrh	r2, [r7, #6]
 8016ffa:	6839      	ldr	r1, [r7, #0]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7ff fbc7 	bl	8016790 <_checksumUbx>
 8017002:	4603      	mov	r3, r0
 8017004:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8017006:	8bfb      	ldrh	r3, [r7, #30]
 8017008:	b2db      	uxtb	r3, r3
 801700a:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 801700c:	8bfb      	ldrh	r3, [r7, #30]
 801700e:	0a1b      	lsrs	r3, r3, #8
 8017010:	b29b      	uxth	r3, r3
 8017012:	b2db      	uxtb	r3, r3
 8017014:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8017016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801701a:	2b00      	cmp	r3, #0
 801701c:	d010      	beq.n	8017040 <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801701e:	e004      	b.n	801702a <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 8017020:	f7fd fd32 	bl	8014a88 <pifTaskManager_Yield>
 8017024:	4603      	mov	r3, r0
 8017026:	2b00      	cmp	r3, #0
 8017028:	d009      	beq.n	801703e <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017030:	4618      	mov	r0, r3
 8017032:	f7fc fd2e 	bl	8013a92 <pifRingBuffer_IsEmpty>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d0f1      	beq.n	8017020 <_makeUbxPacket+0x3c>
 801703c:	e000      	b.n	8017040 <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 801703e:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017046:	4618      	mov	r0, r3
 8017048:	f7fc fda5 	bl	8013b96 <pifRingBuffer_BeginPutting>

	info[0] = length + 8;
 801704c:	88fb      	ldrh	r3, [r7, #6]
 801704e:	b2db      	uxtb	r3, r3
 8017050:	3308      	adds	r3, #8
 8017052:	b2db      	uxtb	r3, r3
 8017054:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8017056:	2300      	movs	r3, #0
 8017058:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 801705a:	2300      	movs	r3, #0
 801705c:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 801705e:	2300      	movs	r3, #0
 8017060:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017068:	f107 0118 	add.w	r1, r7, #24
 801706c:	2204      	movs	r2, #4
 801706e:	4618      	mov	r0, r3
 8017070:	f7fc fe18 	bl	8013ca4 <pifRingBuffer_PutData>
 8017074:	4603      	mov	r3, r0
 8017076:	2b00      	cmp	r3, #0
 8017078:	d033      	beq.n	80170e2 <_makeUbxPacket+0xfe>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017080:	2206      	movs	r2, #6
 8017082:	68b9      	ldr	r1, [r7, #8]
 8017084:	4618      	mov	r0, r3
 8017086:	f7fc fe0d 	bl	8013ca4 <pifRingBuffer_PutData>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d02a      	beq.n	80170e6 <_makeUbxPacket+0x102>
	if (length > 0) {
 8017090:	88fb      	ldrh	r3, [r7, #6]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00a      	beq.n	80170ac <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801709c:	88fa      	ldrh	r2, [r7, #6]
 801709e:	6839      	ldr	r1, [r7, #0]
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7fc fdff 	bl	8013ca4 <pifRingBuffer_PutData>
 80170a6:	4603      	mov	r3, r0
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d01e      	beq.n	80170ea <_makeUbxPacket+0x106>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170b2:	f107 0114 	add.w	r1, r7, #20
 80170b6:	2202      	movs	r2, #2
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7fc fdf3 	bl	8013ca4 <pifRingBuffer_PutData>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d014      	beq.n	80170ee <_makeUbxPacket+0x10a>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7fc fd7b 	bl	8013bc6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80170d6:	69db      	ldr	r3, [r3, #28]
 80170d8:	4618      	mov	r0, r3
 80170da:	f7fd fa95 	bl	8014608 <pifTask_SetTrigger>
	return TRUE;
 80170de:	2301      	movs	r3, #1
 80170e0:	e00d      	b.n	80170fe <_makeUbxPacket+0x11a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 80170e2:	bf00      	nop
 80170e4:	e004      	b.n	80170f0 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 80170e6:	bf00      	nop
 80170e8:	e002      	b.n	80170f0 <_makeUbxPacket+0x10c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 80170ea:	bf00      	nop
 80170ec:	e000      	b.n	80170f0 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 80170ee:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7fc fd73 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	return FALSE;
 80170fc:	2300      	movs	r3, #0
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3720      	adds	r7, #32
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}

08017106 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8017106:	b5b0      	push	{r4, r5, r7, lr}
 8017108:	b084      	sub	sp, #16
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
 801710e:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801711a:	2b02      	cmp	r3, #2
 801711c:	d05d      	beq.n	80171da <_evtSending+0xd4>
 801711e:	2b02      	cmp	r3, #2
 8017120:	dc72      	bgt.n	8017208 <_evtSending+0x102>
 8017122:	2b00      	cmp	r3, #0
 8017124:	d002      	beq.n	801712c <_evtSending+0x26>
 8017126:	2b01      	cmp	r3, #1
 8017128:	d01c      	beq.n	8017164 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 801712a:	e06d      	b.n	8017208 <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017132:	4618      	mov	r0, r3
 8017134:	f7fc fcad 	bl	8013a92 <pifRingBuffer_IsEmpty>
 8017138:	4603      	mov	r3, r0
 801713a:	2b00      	cmp	r3, #0
 801713c:	d166      	bne.n	801720c <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 801714a:	2300      	movs	r3, #0
 801714c:	2104      	movs	r1, #4
 801714e:	f7fc fe6c 	bl	8013e2a <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2204      	movs	r2, #4
 8017156:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2201      	movs	r2, #1
 801715e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017162:	e053      	b.n	801720c <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 8017176:	b29b      	uxth	r3, r3
 8017178:	4619      	mov	r1, r3
 801717a:	4610      	mov	r0, r2
 801717c:	f7fc fc5d 	bl	8013a3a <pifRingBuffer_GetTailPointer>
 8017180:	4605      	mov	r5, r0
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 801718e:	b29b      	uxth	r3, r3
 8017190:	4619      	mov	r1, r3
 8017192:	4610      	mov	r0, r2
 8017194:	f7fc fcb2 	bl	8013afc <pifRingBuffer_GetLinerSize>
 8017198:	4603      	mov	r3, r0
 801719a:	461a      	mov	r2, r3
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	4629      	mov	r1, r5
 80171a0:	4620      	mov	r0, r4
 80171a2:	4798      	blx	r3
 80171a4:	4603      	mov	r3, r0
 80171a6:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 80171ae:	897b      	ldrh	r3, [r7, #10]
 80171b0:	b2db      	uxtb	r3, r3
 80171b2:	4413      	add	r3, r2
 80171b4:	b2da      	uxtb	r2, r3
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 80171c2:	3303      	adds	r3, #3
 80171c4:	68fa      	ldr	r2, [r7, #12]
 80171c6:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 80171ca:	4293      	cmp	r3, r2
 80171cc:	da03      	bge.n	80171d6 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	2202      	movs	r2, #2
 80171d2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 80171d6:	2301      	movs	r3, #1
 80171d8:	e01c      	b.n	8017214 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d115      	bne.n	8017210 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 80171f0:	b29b      	uxth	r3, r3
 80171f2:	3304      	adds	r3, #4
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	4619      	mov	r1, r3
 80171f8:	4610      	mov	r0, r2
 80171fa:	f7fc fe5c 	bl	8013eb6 <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	2200      	movs	r2, #0
 8017202:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017206:	e003      	b.n	8017210 <_evtSending+0x10a>
		break;
 8017208:	bf00      	nop
 801720a:	e002      	b.n	8017212 <_evtSending+0x10c>
		break;
 801720c:	bf00      	nop
 801720e:	e000      	b.n	8017212 <_evtSending+0x10c>
		break;
 8017210:	bf00      	nop
	}
	return FALSE;
 8017212:	2300      	movs	r3, #0
}
 8017214:	4618      	mov	r0, r3
 8017216:	3710      	adds	r7, #16
 8017218:	46bd      	mov	sp, r7
 801721a:	bdb0      	pop	{r4, r5, r7, pc}

0801721c <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	460b      	mov	r3, r1
 8017226:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d103      	bne.n	8017236 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 801722e:	4b19      	ldr	r3, [pc, #100]	; (8017294 <pifGpsUblox_Init+0x78>)
 8017230:	2201      	movs	r2, #1
 8017232:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017234:	e026      	b.n	8017284 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 8017236:	f44f 7220 	mov.w	r2, #640	; 0x280
 801723a:	2100      	movs	r1, #0
 801723c:	6878      	ldr	r0, [r7, #4]
 801723e:	f00c f8d3 	bl	80233e8 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	3310      	adds	r3, #16
 8017246:	887a      	ldrh	r2, [r7, #2]
 8017248:	4611      	mov	r1, r2
 801724a:	4618      	mov	r0, r3
 801724c:	f7fe fcd8 	bl	8015c00 <pifGps_Init>
 8017250:	4603      	mov	r3, r0
 8017252:	2b00      	cmp	r3, #0
 8017254:	d013      	beq.n	801727e <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801725c:	2240      	movs	r2, #64	; 0x40
 801725e:	2100      	movs	r1, #0
 8017260:	4618      	mov	r0, r3
 8017262:	f7fc fb77 	bl	8013954 <pifRingBuffer_InitHeap>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00a      	beq.n	8017282 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017272:	4909      	ldr	r1, [pc, #36]	; (8017298 <pifGpsUblox_Init+0x7c>)
 8017274:	4618      	mov	r0, r3
 8017276:	f7fc fbd2 	bl	8013a1e <pifRingBuffer_SetName>
    return TRUE;
 801727a:	2301      	movs	r3, #1
 801727c:	e006      	b.n	801728c <pifGpsUblox_Init+0x70>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 801727e:	bf00      	nop
 8017280:	e000      	b.n	8017284 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017282:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f000 f809 	bl	801729c <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
#endif
    return FALSE;
 801728a:	2300      	movs	r3, #0
}
 801728c:	4618      	mov	r0, r3
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	20001db8 	.word	0x20001db8
 8017298:	08027d30 	.word	0x08027d30

0801729c <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fc fb9c 	bl	80139e8 <pifRingBuffer_Clear>
}
 80172b0:	bf00      	nop
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	683a      	ldr	r2, [r7, #0]
 80172c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80172ca:	4b05      	ldr	r3, [pc, #20]	; (80172e0 <pifGpsUblox_AttachComm+0x28>)
 80172cc:	4a05      	ldr	r2, [pc, #20]	; (80172e4 <pifGpsUblox_AttachComm+0x2c>)
 80172ce:	6879      	ldr	r1, [r7, #4]
 80172d0:	6838      	ldr	r0, [r7, #0]
 80172d2:	f7fa fed7 	bl	8012084 <pifComm_AttachClient>
}
 80172d6:	bf00      	nop
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	bf00      	nop
 80172e0:	08017107 	.word	0x08017107
 80172e4:	080169e9 	.word	0x080169e9

080172e8 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 80172e8:	b590      	push	{r4, r7, lr}
 80172ea:	b091      	sub	sp, #68	; 0x44
 80172ec:	af02      	add	r7, sp, #8
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	4608      	mov	r0, r1
 80172f2:	4611      	mov	r1, r2
 80172f4:	461a      	mov	r2, r3
 80172f6:	4603      	mov	r3, r0
 80172f8:	72fb      	strb	r3, [r7, #11]
 80172fa:	460b      	mov	r3, r1
 80172fc:	813b      	strh	r3, [r7, #8]
 80172fe:	4613      	mov	r3, r2
 8017300:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017308:	2b00      	cmp	r3, #0
 801730a:	d004      	beq.n	8017316 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 801730c:	4b0f      	ldr	r3, [pc, #60]	; (801734c <pifGpsUblox_SetPubxConfig+0x64>)
 801730e:	2202      	movs	r2, #2
 8017310:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017312:	2300      	movs	r3, #0
 8017314:	e015      	b.n	8017342 <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017316:	7af9      	ldrb	r1, [r7, #11]
 8017318:	893c      	ldrh	r4, [r7, #8]
 801731a:	88fb      	ldrh	r3, [r7, #6]
 801731c:	f107 0010 	add.w	r0, r7, #16
 8017320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017322:	9201      	str	r2, [sp, #4]
 8017324:	9300      	str	r3, [sp, #0]
 8017326:	4623      	mov	r3, r4
 8017328:	460a      	mov	r2, r1
 801732a:	4909      	ldr	r1, [pc, #36]	; (8017350 <pifGpsUblox_SetPubxConfig+0x68>)
 801732c:	f7fa fcc8 	bl	8011cc0 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 8017330:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017334:	f107 0310 	add.w	r3, r7, #16
 8017338:	4619      	mov	r1, r3
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	f7ff fda4 	bl	8016e88 <_makeNmeaPacket>
 8017340:	4603      	mov	r3, r0
}
 8017342:	4618      	mov	r0, r3
 8017344:	373c      	adds	r7, #60	; 0x3c
 8017346:	46bd      	mov	sp, r7
 8017348:	bd90      	pop	{r4, r7, pc}
 801734a:	bf00      	nop
 801734c:	20001db8 	.word	0x20001db8
 8017350:	08027d74 	.word	0x08027d74

08017354 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b086      	sub	sp, #24
 8017358:	af02      	add	r7, sp, #8
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	4608      	mov	r0, r1
 801735e:	4611      	mov	r1, r2
 8017360:	461a      	mov	r2, r3
 8017362:	4603      	mov	r3, r0
 8017364:	70fb      	strb	r3, [r7, #3]
 8017366:	460b      	mov	r3, r1
 8017368:	70bb      	strb	r3, [r7, #2]
 801736a:	4613      	mov	r3, r2
 801736c:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 801736e:	f246 23b5 	movw	r3, #25269	; 0x62b5
 8017372:	60bb      	str	r3, [r7, #8]
 8017374:	2300      	movs	r3, #0
 8017376:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801737e:	2b00      	cmp	r3, #0
 8017380:	d004      	beq.n	801738c <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 8017382:	4b0f      	ldr	r3, [pc, #60]	; (80173c0 <pifGpsUblox_SendUbxMsg+0x6c>)
 8017384:	2202      	movs	r2, #2
 8017386:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017388:	2300      	movs	r3, #0
 801738a:	e015      	b.n	80173b8 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 801738c:	78fb      	ldrb	r3, [r7, #3]
 801738e:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 8017390:	78bb      	ldrb	r3, [r7, #2]
 8017392:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017394:	883b      	ldrh	r3, [r7, #0]
 8017396:	b2db      	uxtb	r3, r3
 8017398:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 801739a:	883b      	ldrh	r3, [r7, #0]
 801739c:	0a1b      	lsrs	r3, r3, #8
 801739e:	b29b      	uxth	r3, r3
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 80173a4:	883a      	ldrh	r2, [r7, #0]
 80173a6:	f107 0108 	add.w	r1, r7, #8
 80173aa:	7f3b      	ldrb	r3, [r7, #28]
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7ff fe17 	bl	8016fe4 <_makeUbxPacket>
 80173b6:	4603      	mov	r3, r0
}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3710      	adds	r7, #16
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	20001db8 	.word	0x20001db8

080173c4 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80173c4:	b480      	push	{r7}
 80173c6:	b085      	sub	sp, #20
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d103      	bne.n	80173da <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80173d2:	4b07      	ldr	r3, [pc, #28]	; (80173f0 <_evtTimerRxTimeout+0x2c>)
 80173d4:	2201      	movs	r2, #1
 80173d6:	701a      	strb	r2, [r3, #0]
		return;
 80173d8:	e004      	b.n	80173e4 <_evtTimerRxTimeout+0x20>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	60fb      	str	r3, [r7, #12]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	2200      	movs	r2, #0
 80173e2:	721a      	strb	r2, [r3, #8]
}
 80173e4:	3714      	adds	r7, #20
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	20001db8 	.word	0x20001db8

080173f4 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b086      	sub	sp, #24
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
 80173fc:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	3314      	adds	r3, #20
 8017402:	613b      	str	r3, [r7, #16]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017404:	e0a7      	b.n	8017556 <_parsingPacket+0x162>
		switch (p_owner->__rx.state) {
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	7a1b      	ldrb	r3, [r3, #8]
 801740a:	2b05      	cmp	r3, #5
 801740c:	f200 80a2 	bhi.w	8017554 <_parsingPacket+0x160>
 8017410:	a201      	add	r2, pc, #4	; (adr r2, 8017418 <_parsingPacket+0x24>)
 8017412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017416:	bf00      	nop
 8017418:	08017431 	.word	0x08017431
 801741c:	08017473 	.word	0x08017473
 8017420:	08017487 	.word	0x08017487
 8017424:	0801749b 	.word	0x0801749b
 8017428:	080174c3 	.word	0x080174c3
 801742c:	080174eb 	.word	0x080174eb
		case MRS_IDLE:
			if (data == '$') {
 8017430:	7bfb      	ldrb	r3, [r7, #15]
 8017432:	2b24      	cmp	r3, #36	; 0x24
 8017434:	d109      	bne.n	801744a <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2201      	movs	r2, #1
 801743a:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6a1b      	ldr	r3, [r3, #32]
 8017440:	21c8      	movs	r1, #200	; 0xc8
 8017442:	4618      	mov	r0, r3
 8017444:	f7fd fe1c 	bl	8015080 <pifTimer_Start>
 8017448:	e085      	b.n	8017556 <_parsingPacket+0x162>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 801744a:	4b54      	ldr	r3, [pc, #336]	; (801759c <_parsingPacket+0x1a8>)
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	2b03      	cmp	r3, #3
 8017450:	d10b      	bne.n	801746a <_parsingPacket+0x76>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017456:	2b00      	cmp	r3, #0
 8017458:	d007      	beq.n	801746a <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801745e:	7bf9      	ldrb	r1, [r7, #15]
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	4798      	blx	r3
 8017468:	e002      	b.n	8017470 <_parsingPacket+0x7c>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 801746a:	2301      	movs	r3, #1
 801746c:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
 801746e:	e081      	b.n	8017574 <_parsingPacket+0x180>
			}
			break;
 8017470:	e071      	b.n	8017556 <_parsingPacket+0x162>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017472:	7bfb      	ldrb	r3, [r7, #15]
 8017474:	2b4d      	cmp	r3, #77	; 0x4d
 8017476:	d103      	bne.n	8017480 <_parsingPacket+0x8c>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2202      	movs	r2, #2
 801747c:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801747e:	e06a      	b.n	8017556 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017480:	2301      	movs	r3, #1
 8017482:	75fb      	strb	r3, [r7, #23]
				goto fail;
 8017484:	e076      	b.n	8017574 <_parsingPacket+0x180>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 8017486:	7bfb      	ldrb	r3, [r7, #15]
 8017488:	2b3c      	cmp	r3, #60	; 0x3c
 801748a:	d103      	bne.n	8017494 <_parsingPacket+0xa0>
				p_owner->__rx.state = MRS_DIRECTION;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2203      	movs	r2, #3
 8017490:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017492:	e060      	b.n	8017556 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017494:	2301      	movs	r3, #1
 8017496:	75fb      	strb	r3, [r7, #23]
				goto fail;
 8017498:	e06c      	b.n	8017574 <_parsingPacket+0x180>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 801749a:	7bfb      	ldrb	r3, [r7, #15]
 801749c:	2b7c      	cmp	r3, #124	; 0x7c
 801749e:	d80d      	bhi.n	80174bc <_parsingPacket+0xc8>
				p_packet->data_count = data;
 80174a0:	7bfa      	ldrb	r2, [r7, #15]
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	7bfa      	ldrb	r2, [r7, #15]
 80174ac:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2201      	movs	r2, #1
 80174b2:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2204      	movs	r2, #4
 80174b8:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80174ba:	e04c      	b.n	8017556 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80174bc:	2300      	movs	r3, #0
 80174be:	75fb      	strb	r3, [r7, #23]
				goto fail;
 80174c0:	e058      	b.n	8017574 <_parsingPacket+0x180>

		case MRS_LENGTH:
			p_packet->command = data;
 80174c2:	7bfa      	ldrb	r2, [r7, #15]
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	68db      	ldr	r3, [r3, #12]
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	7c12      	ldrb	r2, [r2, #16]
 80174d0:	4413      	add	r3, r2
 80174d2:	7bfa      	ldrb	r2, [r7, #15]
 80174d4:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	7c1b      	ldrb	r3, [r3, #16]
 80174da:	3301      	adds	r3, #1
 80174dc:	b2da      	uxtb	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2205      	movs	r2, #5
 80174e6:	721a      	strb	r2, [r3, #8]
			break;
 80174e8:	e035      	b.n	8017556 <_parsingPacket+0x162>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	68db      	ldr	r3, [r3, #12]
 80174ee:	687a      	ldr	r2, [r7, #4]
 80174f0:	7c12      	ldrb	r2, [r2, #16]
 80174f2:	4413      	add	r3, r2
 80174f4:	7bfa      	ldrb	r2, [r7, #15]
 80174f6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	7c1b      	ldrb	r3, [r3, #16]
 80174fc:	3301      	adds	r3, #1
 80174fe:	b2da      	uxtb	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	785b      	ldrb	r3, [r3, #1]
 8017508:	3302      	adds	r3, #2
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	7c12      	ldrb	r2, [r2, #16]
 801750e:	4293      	cmp	r3, r2
 8017510:	da21      	bge.n	8017556 <_parsingPacket+0x162>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	68da      	ldr	r2, [r3, #12]
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	785b      	ldrb	r3, [r3, #1]
 801751a:	b29b      	uxth	r3, r3
 801751c:	3302      	adds	r3, #2
 801751e:	b29b      	uxth	r3, r3
 8017520:	4619      	mov	r1, r3
 8017522:	4610      	mov	r0, r2
 8017524:	f7fa fc56 	bl	8011dd4 <pifCheckXor>
 8017528:	4603      	mov	r3, r0
 801752a:	461a      	mov	r2, r3
 801752c:	7bfb      	ldrb	r3, [r7, #15]
 801752e:	429a      	cmp	r2, r3
 8017530:	d10d      	bne.n	801754e <_parsingPacket+0x15a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6a1b      	ldr	r3, [r3, #32]
 8017536:	4618      	mov	r0, r3
 8017538:	f7fd fdd0 	bl	80150dc <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	1c9a      	adds	r2, r3, #2
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2206      	movs	r2, #6
 801754a:	721a      	strb	r2, [r3, #8]
					return;
 801754c:	e022      	b.n	8017594 <_parsingPacket+0x1a0>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 801754e:	2302      	movs	r3, #2
 8017550:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
#endif
					goto fail;
 8017552:	e00f      	b.n	8017574 <_parsingPacket+0x180>
				}
			}
			break;

		default:
			break;
 8017554:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	685a      	ldr	r2, [r3, #4]
 801755a:	f107 010f 	add.w	r1, r7, #15
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	4610      	mov	r0, r2
 8017562:	4798      	blx	r3
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	f47f af4d 	bne.w	8017406 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 801756c:	4b0b      	ldr	r3, [pc, #44]	; (801759c <_parsingPacket+0x1a8>)
 801756e:	2203      	movs	r2, #3
 8017570:	701a      	strb	r2, [r3, #0]
	return;
 8017572:	e00f      	b.n	8017594 <_parsingPacket+0x1a0>

fail:
	if (pkt_err != pre_error) {
 8017574:	4b09      	ldr	r3, [pc, #36]	; (801759c <_parsingPacket+0x1a8>)
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	7dfa      	ldrb	r2, [r7, #23]
 801757a:	429a      	cmp	r2, r3
 801757c:	d002      	beq.n	8017584 <_parsingPacket+0x190>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
				p_owner->__rx.state, p_packet->data_count);
#endif
		pre_error = pkt_err;
 801757e:	4a07      	ldr	r2, [pc, #28]	; (801759c <_parsingPacket+0x1a8>)
 8017580:	7dfb      	ldrb	r3, [r7, #23]
 8017582:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6a1b      	ldr	r3, [r3, #32]
 8017588:	4618      	mov	r0, r3
 801758a:	f7fd fda7 	bl	80150dc <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2200      	movs	r2, #0
 8017592:	721a      	strb	r2, [r3, #8]
}
 8017594:	3718      	adds	r7, #24
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop
 801759c:	20000135 	.word	0x20000135

080175a0 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	7a1b      	ldrb	r3, [r3, #8]
 80175b2:	2b05      	cmp	r3, #5
 80175b4:	d803      	bhi.n	80175be <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 80175b6:	6839      	ldr	r1, [r7, #0]
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	f7ff ff1b 	bl	80173f4 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	7a1b      	ldrb	r3, [r3, #8]
 80175c2:	2b06      	cmp	r3, #6
 80175c4:	d119      	bne.n	80175fa <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	699a      	ldr	r2, [r3, #24]
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d008      	beq.n	80175e8 <_evtParsing+0x48>
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80175da:	68fa      	ldr	r2, [r7, #12]
 80175dc:	f102 0114 	add.w	r1, r2, #20
 80175e0:	68fa      	ldr	r2, [r7, #12]
 80175e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80175e4:	68f8      	ldr	r0, [r7, #12]
 80175e6:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	69db      	ldr	r3, [r3, #28]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7fd f80a 	bl	8014608 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	2200      	movs	r2, #0
 80175f8:	721a      	strb	r2, [r3, #8]
    }
}
 80175fa:	bf00      	nop
 80175fc:	3710      	adds	r7, #16
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}

08017602 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 8017602:	b5b0      	push	{r4, r5, r7, lr}
 8017604:	b084      	sub	sp, #16
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
 801760a:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	7a1b      	ldrb	r3, [r3, #8]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d001      	beq.n	801761c <_evtSending+0x1a>
 8017618:	2300      	movs	r3, #0
 801761a:	e06f      	b.n	80176fc <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017622:	2b00      	cmp	r3, #0
 8017624:	d002      	beq.n	801762c <_evtSending+0x2a>
 8017626:	2b01      	cmp	r3, #1
 8017628:	d021      	beq.n	801766e <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 801762a:	e066      	b.n	80176fa <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	3324      	adds	r3, #36	; 0x24
 8017630:	4618      	mov	r0, r3
 8017632:	f7fc fa2e 	bl	8013a92 <pifRingBuffer_IsEmpty>
 8017636:	4603      	mov	r3, r0
 8017638:	2b00      	cmp	r3, #0
 801763a:	d15d      	bne.n	80176f8 <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	3324      	adds	r3, #36	; 0x24
 8017640:	4618      	mov	r0, r3
 8017642:	f7fc fa39 	bl	8013ab8 <pifRingBuffer_GetFillSize>
 8017646:	4603      	mov	r3, r0
 8017648:	461a      	mov	r2, r3
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2200      	movs	r2, #0
 8017654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	2201      	movs	r2, #1
 801765c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	69db      	ldr	r3, [r3, #28]
 8017666:	4618      	mov	r0, r3
 8017668:	f7fc ffce 	bl	8014608 <pifTask_SetTrigger>
		break;
 801766c:	e044      	b.n	80176f8 <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	685c      	ldr	r4, [r3, #4]
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801767e:	4619      	mov	r1, r3
 8017680:	4610      	mov	r0, r2
 8017682:	f7fc f9da 	bl	8013a3a <pifRingBuffer_GetTailPointer>
 8017686:	4605      	mov	r5, r0
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017694:	4619      	mov	r1, r3
 8017696:	4610      	mov	r0, r2
 8017698:	f7fc fa30 	bl	8013afc <pifRingBuffer_GetLinerSize>
 801769c:	4603      	mov	r3, r0
 801769e:	461a      	mov	r2, r3
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	4629      	mov	r1, r5
 80176a4:	4620      	mov	r0, r4
 80176a6:	4798      	blx	r3
 80176a8:	4603      	mov	r3, r0
 80176aa:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 80176ac:	897b      	ldrh	r3, [r7, #10]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d101      	bne.n	80176b6 <_evtSending+0xb4>
 80176b2:	2300      	movs	r3, #0
 80176b4:	e022      	b.n	80176fc <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80176bc:	897b      	ldrh	r3, [r7, #10]
 80176be:	4413      	add	r3, r2
 80176c0:	b29a      	uxth	r2, r3
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d30d      	bcc.n	80176f4 <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80176e4:	4619      	mov	r1, r3
 80176e6:	4610      	mov	r0, r2
 80176e8:	f7fc fbe5 	bl	8013eb6 <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 80176f4:	2301      	movs	r3, #1
 80176f6:	e001      	b.n	80176fc <_evtSending+0xfa>
		break;
 80176f8:	bf00      	nop
	}
	return FALSE;
 80176fa:	2300      	movs	r3, #0
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3710      	adds	r7, #16
 8017700:	46bd      	mov	sp, r7
 8017702:	bdb0      	pop	{r4, r5, r7, pc}

08017704 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	4613      	mov	r3, r2
 8017710:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d103      	bne.n	8017720 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017718:	4b27      	ldr	r3, [pc, #156]	; (80177b8 <pifMsp_Init+0xb4>)
 801771a:	2201      	movs	r2, #1
 801771c:	701a      	strb	r2, [r3, #0]
		goto fail;
 801771e:	e042      	b.n	80177a6 <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 8017720:	2258      	movs	r2, #88	; 0x58
 8017722:	2100      	movs	r1, #0
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f00b fe5f 	bl	80233e8 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 801772a:	2180      	movs	r1, #128	; 0x80
 801772c:	2001      	movs	r0, #1
 801772e:	f00b fe0b 	bl	8023348 <calloc>
 8017732:	4603      	mov	r3, r0
 8017734:	461a      	mov	r2, r3
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d103      	bne.n	801774a <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 8017742:	4b1d      	ldr	r3, [pc, #116]	; (80177b8 <pifMsp_Init+0xb4>)
 8017744:	2203      	movs	r2, #3
 8017746:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017748:	e02d      	b.n	80177a6 <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	3324      	adds	r3, #36	; 0x24
 801774e:	2280      	movs	r2, #128	; 0x80
 8017750:	2100      	movs	r1, #0
 8017752:	4618      	mov	r0, r3
 8017754:	f7fc f8fe 	bl	8013954 <pifRingBuffer_InitHeap>
 8017758:	4603      	mov	r3, r0
 801775a:	2b00      	cmp	r3, #0
 801775c:	d020      	beq.n	80177a0 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 801775e:	2100      	movs	r1, #0
 8017760:	68b8      	ldr	r0, [r7, #8]
 8017762:	f7fd fc55 	bl	8015010 <pifTimerManager_Add>
 8017766:	4602      	mov	r2, r0
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	6a1b      	ldr	r3, [r3, #32]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d017      	beq.n	80177a4 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6a1b      	ldr	r3, [r3, #32]
 8017778:	68fa      	ldr	r2, [r7, #12]
 801777a:	4910      	ldr	r1, [pc, #64]	; (80177bc <pifMsp_Init+0xb8>)
 801777c:	4618      	mov	r0, r3
 801777e:	f7fd fd74 	bl	801526a <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017782:	88fb      	ldrh	r3, [r7, #6]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d106      	bne.n	8017796 <pifMsp_Init+0x92>
 8017788:	4b0d      	ldr	r3, [pc, #52]	; (80177c0 <pifMsp_Init+0xbc>)
 801778a:	881b      	ldrh	r3, [r3, #0]
 801778c:	1c5a      	adds	r2, r3, #1
 801778e:	b291      	uxth	r1, r2
 8017790:	4a0b      	ldr	r2, [pc, #44]	; (80177c0 <pifMsp_Init+0xbc>)
 8017792:	8011      	strh	r1, [r2, #0]
 8017794:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	88fa      	ldrh	r2, [r7, #6]
 801779a:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801779c:	2301      	movs	r3, #1
 801779e:	e006      	b.n	80177ae <pifMsp_Init+0xaa>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80177a0:	bf00      	nop
 80177a2:	e000      	b.n	80177a6 <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 80177a4:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 80177a6:	68f8      	ldr	r0, [r7, #12]
 80177a8:	f000 f80c 	bl	80177c4 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
#endif
    return FALSE;
 80177ac:	2300      	movs	r3, #0
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3710      	adds	r7, #16
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}
 80177b6:	bf00      	nop
 80177b8:	20001db8 	.word	0x20001db8
 80177bc:	080173c5 	.word	0x080173c5
 80177c0:	20000128 	.word	0x20000128

080177c4 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d007      	beq.n	80177e4 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	4618      	mov	r0, r3
 80177da:	f00b fdef 	bl	80233bc <free>
		p_owner->__rx.p_packet = NULL;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2200      	movs	r2, #0
 80177e2:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	3324      	adds	r3, #36	; 0x24
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7fc f8fd 	bl	80139e8 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6a1b      	ldr	r3, [r3, #32]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d004      	beq.n	8017800 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6a1b      	ldr	r3, [r3, #32]
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fd fc24 	bl	8015048 <pifTimerManager_Remove>
	}
#endif
}
 8017800:	bf00      	nop
 8017802:	3708      	adds	r7, #8
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b082      	sub	sp, #8
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
 8017810:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	683a      	ldr	r2, [r7, #0]
 8017816:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017818:	4b04      	ldr	r3, [pc, #16]	; (801782c <pifMsp_AttachComm+0x24>)
 801781a:	4a05      	ldr	r2, [pc, #20]	; (8017830 <pifMsp_AttachComm+0x28>)
 801781c:	6879      	ldr	r1, [r7, #4]
 801781e:	6838      	ldr	r0, [r7, #0]
 8017820:	f7fa fc30 	bl	8012084 <pifComm_AttachClient>
}
 8017824:	bf00      	nop
 8017826:	3708      	adds	r7, #8
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}
 801782c:	08017603 	.word	0x08017603
 8017830:	080175a1 	.word	0x080175a1

08017834 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	685b      	ldr	r3, [r3, #4]
 8017840:	4618      	mov	r0, r3
 8017842:	f7fa fc35 	bl	80120b0 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2200      	movs	r2, #0
 801784a:	605a      	str	r2, [r3, #4]
}
 801784c:	bf00      	nop
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 8017854:	b480      	push	{r7}
 8017856:	b085      	sub	sp, #20
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	68ba      	ldr	r2, [r7, #8]
 8017866:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	683a      	ldr	r2, [r7, #0]
 8017872:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8017874:	bf00      	nop
 8017876:	3714      	adds	r7, #20
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr

08017880 <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 8017880:	b480      	push	{r7}
 8017882:	b085      	sub	sp, #20
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	689b      	ldr	r3, [r3, #8]
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	689b      	ldr	r3, [r3, #8]
 8017894:	1c5a      	adds	r2, r3, #1
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	609a      	str	r2, [r3, #8]
	return data;
 801789a:	7bfb      	ldrb	r3, [r7, #15]
}
 801789c:	4618      	mov	r0, r3
 801789e:	3714      	adds	r7, #20
 80178a0:	46bd      	mov	sp, r7
 80178a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a6:	4770      	bx	lr

080178a8 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 80178a8:	b480      	push	{r7}
 80178aa:	b085      	sub	sp, #20
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	689b      	ldr	r3, [r3, #8]
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	b21a      	sxth	r2, r3
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	689b      	ldr	r3, [r3, #8]
 80178bc:	3301      	adds	r3, #1
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	021b      	lsls	r3, r3, #8
 80178c2:	b21b      	sxth	r3, r3
 80178c4:	4313      	orrs	r3, r2
 80178c6:	b21b      	sxth	r3, r3
 80178c8:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	689b      	ldr	r3, [r3, #8]
 80178ce:	1c9a      	adds	r2, r3, #2
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	609a      	str	r2, [r3, #8]
	return data;
 80178d4:	89fb      	ldrh	r3, [r7, #14]
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3714      	adds	r7, #20
 80178da:	46bd      	mov	sp, r7
 80178dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e0:	4770      	bx	lr

080178e2 <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 80178e2:	b480      	push	{r7}
 80178e4:	b085      	sub	sp, #20
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	689b      	ldr	r3, [r3, #8]
 80178ee:	781b      	ldrb	r3, [r3, #0]
 80178f0:	461a      	mov	r2, r3
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	689b      	ldr	r3, [r3, #8]
 80178f6:	3301      	adds	r3, #1
 80178f8:	781b      	ldrb	r3, [r3, #0]
 80178fa:	021b      	lsls	r3, r3, #8
 80178fc:	431a      	orrs	r2, r3
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	689b      	ldr	r3, [r3, #8]
 8017902:	3302      	adds	r3, #2
 8017904:	781b      	ldrb	r3, [r3, #0]
 8017906:	041b      	lsls	r3, r3, #16
 8017908:	431a      	orrs	r2, r3
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	689b      	ldr	r3, [r3, #8]
 801790e:	3303      	adds	r3, #3
 8017910:	781b      	ldrb	r3, [r3, #0]
 8017912:	061b      	lsls	r3, r3, #24
 8017914:	4313      	orrs	r3, r2
 8017916:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	689b      	ldr	r3, [r3, #8]
 801791c:	1d1a      	adds	r2, r3, #4
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	609a      	str	r2, [r3, #8]
	return data;
 8017922:	68fb      	ldr	r3, [r7, #12]
}
 8017924:	4618      	mov	r0, r3
 8017926:	3714      	adds	r7, #20
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr

08017930 <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b084      	sub	sp, #16
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	3324      	adds	r3, #36	; 0x24
 801793e:	4618      	mov	r0, r3
 8017940:	f7fc f929 	bl	8013b96 <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017944:	2324      	movs	r3, #36	; 0x24
 8017946:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017948:	234d      	movs	r3, #77	; 0x4d
 801794a:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 801794c:	233e      	movs	r3, #62	; 0x3e
 801794e:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017950:	2300      	movs	r3, #0
 8017952:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	3324      	adds	r3, #36	; 0x24
 801795e:	f107 0108 	add.w	r1, r7, #8
 8017962:	2205      	movs	r2, #5
 8017964:	4618      	mov	r0, r3
 8017966:	f7fc f99d 	bl	8013ca4 <pifRingBuffer_PutData>
 801796a:	4603      	mov	r3, r0
 801796c:	2b00      	cmp	r3, #0
 801796e:	d009      	beq.n	8017984 <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 8017970:	7b3a      	ldrb	r2, [r7, #12]
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2200      	movs	r2, #0
 801797c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017980:	2301      	movs	r3, #1
 8017982:	e00d      	b.n	80179a0 <pifMsp_MakeAnswer+0x70>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017984:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	3324      	adds	r3, #36	; 0x24
 801798a:	4618      	mov	r0, r3
 801798c:	f7fc f929 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017990:	4b05      	ldr	r3, [pc, #20]	; (80179a8 <pifMsp_MakeAnswer+0x78>)
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d102      	bne.n	801799e <pifMsp_MakeAnswer+0x6e>
 8017998:	4b03      	ldr	r3, [pc, #12]	; (80179a8 <pifMsp_MakeAnswer+0x78>)
 801799a:	2204      	movs	r2, #4
 801799c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
#endif
	return FALSE;
 801799e:	2300      	movs	r3, #0
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3710      	adds	r7, #16
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	20001db8 	.word	0x20001db8

080179ac <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	460b      	mov	r3, r1
 80179b6:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	3324      	adds	r3, #36	; 0x24
 80179bc:	1cf9      	adds	r1, r7, #3
 80179be:	2201      	movs	r2, #1
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7fc f96f 	bl	8013ca4 <pifRingBuffer_PutData>
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d012      	beq.n	80179f2 <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80179d2:	78fb      	ldrb	r3, [r7, #3]
 80179d4:	4053      	eors	r3, r2
 80179d6:	b2da      	uxtb	r2, r3
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80179e4:	3301      	adds	r3, #1
 80179e6:	b29a      	uxth	r2, r3
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80179ee:	2301      	movs	r3, #1
 80179f0:	e00d      	b.n	8017a0e <pifMsp_AddAnswer8+0x62>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 80179f2:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	3324      	adds	r3, #36	; 0x24
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fc f8f2 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80179fe:	4b06      	ldr	r3, [pc, #24]	; (8017a18 <pifMsp_AddAnswer8+0x6c>)
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d102      	bne.n	8017a0c <pifMsp_AddAnswer8+0x60>
 8017a06:	4b04      	ldr	r3, [pc, #16]	; (8017a18 <pifMsp_AddAnswer8+0x6c>)
 8017a08:	2204      	movs	r2, #4
 8017a0a:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017a0c:	2300      	movs	r3, #0
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3708      	adds	r7, #8
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	20001db8 	.word	0x20001db8

08017a1c <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	460b      	mov	r3, r1
 8017a26:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	3324      	adds	r3, #36	; 0x24
 8017a2c:	1cb9      	adds	r1, r7, #2
 8017a2e:	2202      	movs	r2, #2
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7fc f937 	bl	8013ca4 <pifRingBuffer_PutData>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d018      	beq.n	8017a6e <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 8017a3c:	1cbb      	adds	r3, r7, #2
 8017a3e:	2102      	movs	r1, #2
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7fa f9c7 	bl	8011dd4 <pifCheckXor>
 8017a46:	4603      	mov	r3, r0
 8017a48:	461a      	mov	r2, r3
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017a50:	4053      	eors	r3, r2
 8017a52:	b2da      	uxtb	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017a60:	3302      	adds	r3, #2
 8017a62:	b29a      	uxth	r2, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	e00d      	b.n	8017a8a <pifMsp_AddAnswer16+0x6e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017a6e:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	3324      	adds	r3, #36	; 0x24
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7fc f8b4 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017a7a:	4b06      	ldr	r3, [pc, #24]	; (8017a94 <pifMsp_AddAnswer16+0x78>)
 8017a7c:	781b      	ldrb	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d102      	bne.n	8017a88 <pifMsp_AddAnswer16+0x6c>
 8017a82:	4b04      	ldr	r3, [pc, #16]	; (8017a94 <pifMsp_AddAnswer16+0x78>)
 8017a84:	2204      	movs	r2, #4
 8017a86:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017a88:	2300      	movs	r3, #0
}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	3708      	adds	r7, #8
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}
 8017a92:	bf00      	nop
 8017a94:	20001db8 	.word	0x20001db8

08017a98 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	3324      	adds	r3, #36	; 0x24
 8017aa6:	4639      	mov	r1, r7
 8017aa8:	2204      	movs	r2, #4
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7fc f8fa 	bl	8013ca4 <pifRingBuffer_PutData>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d018      	beq.n	8017ae8 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 8017ab6:	463b      	mov	r3, r7
 8017ab8:	2104      	movs	r1, #4
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fa f98a 	bl	8011dd4 <pifCheckXor>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017aca:	4053      	eors	r3, r2
 8017acc:	b2da      	uxtb	r2, r3
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017ada:	3304      	adds	r3, #4
 8017adc:	b29a      	uxth	r2, r3
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	e00d      	b.n	8017b04 <pifMsp_AddAnswer32+0x6c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017ae8:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	3324      	adds	r3, #36	; 0x24
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7fc f877 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017af4:	4b05      	ldr	r3, [pc, #20]	; (8017b0c <pifMsp_AddAnswer32+0x74>)
 8017af6:	781b      	ldrb	r3, [r3, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d102      	bne.n	8017b02 <pifMsp_AddAnswer32+0x6a>
 8017afc:	4b03      	ldr	r3, [pc, #12]	; (8017b0c <pifMsp_AddAnswer32+0x74>)
 8017afe:	2204      	movs	r2, #4
 8017b00:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017b02:	2300      	movs	r3, #0
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3708      	adds	r7, #8
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}
 8017b0c:	20001db8 	.word	0x20001db8

08017b10 <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	60b9      	str	r1, [r7, #8]
 8017b1a:	4613      	mov	r3, r2
 8017b1c:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 8017b1e:	88fb      	ldrh	r3, [r7, #6]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d021      	beq.n	8017b68 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	3324      	adds	r3, #36	; 0x24
 8017b28:	88fa      	ldrh	r2, [r7, #6]
 8017b2a:	68b9      	ldr	r1, [r7, #8]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fc f8b9 	bl	8013ca4 <pifRingBuffer_PutData>
 8017b32:	4603      	mov	r3, r0
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d019      	beq.n	8017b6c <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8017b38:	88fb      	ldrh	r3, [r7, #6]
 8017b3a:	4619      	mov	r1, r3
 8017b3c:	68b8      	ldr	r0, [r7, #8]
 8017b3e:	f7fa f949 	bl	8011dd4 <pifCheckXor>
 8017b42:	4603      	mov	r3, r0
 8017b44:	461a      	mov	r2, r3
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017b4c:	4053      	eors	r3, r2
 8017b4e:	b2da      	uxtb	r2, r3
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017b5c:	88fb      	ldrh	r3, [r7, #6]
 8017b5e:	4413      	add	r3, r2
 8017b60:	b29a      	uxth	r2, r3
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e00d      	b.n	8017b88 <pifMsp_AddAnswer+0x78>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017b6c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	3324      	adds	r3, #36	; 0x24
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fc f835 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017b78:	4b05      	ldr	r3, [pc, #20]	; (8017b90 <pifMsp_AddAnswer+0x80>)
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d102      	bne.n	8017b86 <pifMsp_AddAnswer+0x76>
 8017b80:	4b03      	ldr	r3, [pc, #12]	; (8017b90 <pifMsp_AddAnswer+0x80>)
 8017b82:	2204      	movs	r2, #4
 8017b84:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017b86:	2300      	movs	r3, #0
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3710      	adds	r7, #16
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	20001db8 	.word	0x20001db8

08017b94 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b084      	sub	sp, #16
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
 8017b9c:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	3324      	adds	r3, #36	; 0x24
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7fb fff7 	bl	8013b96 <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017ba8:	2324      	movs	r3, #36	; 0x24
 8017baa:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017bac:	234d      	movs	r3, #77	; 0x4d
 8017bae:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017bb0:	2321      	movs	r3, #33	; 0x21
 8017bb2:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	3324      	adds	r3, #36	; 0x24
 8017bc2:	f107 0108 	add.w	r1, r7, #8
 8017bc6:	2205      	movs	r2, #5
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7fc f86b 	bl	8013ca4 <pifRingBuffer_PutData>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d009      	beq.n	8017be8 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 8017bd4:	7b3a      	ldrb	r2, [r7, #12]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2200      	movs	r2, #0
 8017be0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017be4:	2301      	movs	r3, #1
 8017be6:	e00d      	b.n	8017c04 <pifMsp_MakeError+0x70>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017be8:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	3324      	adds	r3, #36	; 0x24
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fb fff7 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017bf4:	4b05      	ldr	r3, [pc, #20]	; (8017c0c <pifMsp_MakeError+0x78>)
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d102      	bne.n	8017c02 <pifMsp_MakeError+0x6e>
 8017bfc:	4b03      	ldr	r3, [pc, #12]	; (8017c0c <pifMsp_MakeError+0x78>)
 8017bfe:	2204      	movs	r2, #4
 8017c00:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
#endif
	return FALSE;
 8017c02:	2300      	movs	r3, #0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3710      	adds	r7, #16
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	20001db8 	.word	0x20001db8

08017c10 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8017c10:	b590      	push	{r4, r7, lr}
 8017c12:	b083      	sub	sp, #12
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	3324      	adds	r3, #36	; 0x24
 8017c22:	2103      	movs	r1, #3
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7fb ffee 	bl	8013c06 <pifRingBuffer_GetPointerPutting>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	b2e2      	uxtb	r2, r4
 8017c2e:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	4053      	eors	r3, r2
 8017c40:	b2da      	uxtb	r2, r3
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017c54:	4619      	mov	r1, r3
 8017c56:	4610      	mov	r0, r2
 8017c58:	f7fb fff0 	bl	8013c3c <pifRingBuffer_PutByte>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d00c      	beq.n	8017c7c <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	3324      	adds	r3, #36	; 0x24
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7fb ffad 	bl	8013bc6 <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	69db      	ldr	r3, [r3, #28]
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7fc fcc8 	bl	8014608 <pifTask_SetTrigger>
	return TRUE;
 8017c78:	2301      	movs	r3, #1
 8017c7a:	e00d      	b.n	8017c98 <pifMsp_SendAnswer+0x88>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017c7c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	3324      	adds	r3, #36	; 0x24
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7fb ffad 	bl	8013be2 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017c88:	4b05      	ldr	r3, [pc, #20]	; (8017ca0 <pifMsp_SendAnswer+0x90>)
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d102      	bne.n	8017c96 <pifMsp_SendAnswer+0x86>
 8017c90:	4b03      	ldr	r3, [pc, #12]	; (8017ca0 <pifMsp_SendAnswer+0x90>)
 8017c92:	2204      	movs	r2, #4
 8017c94:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017c96:	2300      	movs	r3, #0
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	370c      	adds	r7, #12
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd90      	pop	{r4, r7, pc}
 8017ca0:	20001db8 	.word	0x20001db8

08017ca4 <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b085      	sub	sp, #20
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	60f8      	str	r0, [r7, #12]
 8017cac:	60b9      	str	r1, [r7, #8]
 8017cae:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	68ba      	ldr	r2, [r7, #8]
 8017cb4:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	687a      	ldr	r2, [r7, #4]
 8017cba:	61da      	str	r2, [r3, #28]
}
 8017cbc:	bf00      	nop
 8017cbe:	3714      	adds	r7, #20
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <pifRc_CheckFailSafe>:
	long loss_frames = p_owner->_lost_frames + p_owner->_error_frames;
	return (int)(loss_frames * 100 / (p_owner->_good_frames + loss_frames));
}

BOOL pifRc_CheckFailSafe(PifRc* p_owner) 
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b085      	sub	sp, #20
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
	BOOL timeout = FALSE;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	73fb      	strb	r3, [r7, #15]

	if (p_owner->_max_frame_period) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	889b      	ldrh	r3, [r3, #4]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00c      	beq.n	8017cf6 <pifRc_CheckFailSafe+0x2e>
		timeout = (pif_cumulative_timer1ms - p_owner->_last_frame_time) > p_owner->_max_frame_period;
 8017cdc:	4b0e      	ldr	r3, [pc, #56]	; (8017d18 <pifRc_CheckFailSafe+0x50>)
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	689b      	ldr	r3, [r3, #8]
 8017ce4:	1ad3      	subs	r3, r2, r3
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	8892      	ldrh	r2, [r2, #4]
 8017cea:	4293      	cmp	r3, r2
 8017cec:	bf8c      	ite	hi
 8017cee:	2301      	movhi	r3, #1
 8017cf0:	2300      	movls	r3, #0
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	73fb      	strb	r3, [r7, #15]
	}
	return p_owner->_failsafe || timeout;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	78db      	ldrb	r3, [r3, #3]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d102      	bne.n	8017d04 <pifRc_CheckFailSafe+0x3c>
 8017cfe:	7bfb      	ldrb	r3, [r7, #15]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <pifRc_CheckFailSafe+0x40>
 8017d04:	2301      	movs	r3, #1
 8017d06:	e000      	b.n	8017d0a <pifRc_CheckFailSafe+0x42>
 8017d08:	2300      	movs	r3, #0
 8017d0a:	b2db      	uxtb	r3, r3
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3714      	adds	r7, #20
 8017d10:	46bd      	mov	sp, r7
 8017d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d16:	4770      	bx	lr
 8017d18:	20001dd0 	.word	0x20001dd0

08017d1c <_ParsingPacket>:

#define IBUS_RETRY_TIMEOUT		3		// 3ms, Packets are received very ~7ms so use ~half that for the gap


static void _ParsingPacket(PifRcIbus *p_owner, PifActCommReceiveData act_receive_data)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b084      	sub	sp, #16
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
	uint8_t data;
	static uint8_t ptr;                      // pointer in buffer
	static uint16_t chksum;                  // checksum calculation
	static uint8_t lchksum;                  // checksum lower byte received

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017d26:	e070      	b.n	8017e0a <_ParsingPacket+0xee>
		switch (p_owner->__rx_state) {
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017d2e:	2b03      	cmp	r3, #3
 8017d30:	d86a      	bhi.n	8017e08 <_ParsingPacket+0xec>
 8017d32:	a201      	add	r2, pc, #4	; (adr r2, 8017d38 <_ParsingPacket+0x1c>)
 8017d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d38:	08017d49 	.word	0x08017d49
 8017d3c:	08017d7d 	.word	0x08017d7d
 8017d40:	08017dbd 	.word	0x08017dbd
 8017d44:	08017dcd 	.word	0x08017dcd
		case IRS_GET_LENGTH:
			if (data <= IBUS_FRAME_SIZE && data > IBUS_OVERHEAD) {
 8017d48:	7bfb      	ldrb	r3, [r7, #15]
 8017d4a:	2b20      	cmp	r3, #32
 8017d4c:	d85d      	bhi.n	8017e0a <_ParsingPacket+0xee>
 8017d4e:	7bfb      	ldrb	r3, [r7, #15]
 8017d50:	2b03      	cmp	r3, #3
 8017d52:	d95a      	bls.n	8017e0a <_ParsingPacket+0xee>
				ptr = 0;
 8017d54:	4b34      	ldr	r3, [pc, #208]	; (8017e28 <_ParsingPacket+0x10c>)
 8017d56:	2200      	movs	r2, #0
 8017d58:	701a      	strb	r2, [r3, #0]
				p_owner->__rx_length = data - IBUS_OVERHEAD;
 8017d5a:	7bfb      	ldrb	r3, [r7, #15]
 8017d5c:	3b03      	subs	r3, #3
 8017d5e:	b2da      	uxtb	r2, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				chksum = 0xFFFF - data;
 8017d66:	7bfb      	ldrb	r3, [r7, #15]
 8017d68:	b29b      	uxth	r3, r3
 8017d6a:	43db      	mvns	r3, r3
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	4b2f      	ldr	r3, [pc, #188]	; (8017e2c <_ParsingPacket+0x110>)
 8017d70:	801a      	strh	r2, [r3, #0]
				p_owner->__rx_state = IRS_GET_DATA;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2201      	movs	r2, #1
 8017d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017d7a:	e046      	b.n	8017e0a <_ParsingPacket+0xee>

		case IRS_GET_DATA:
			p_owner->__rx_buffer[ptr++] = data;
 8017d7c:	4b2a      	ldr	r3, [pc, #168]	; (8017e28 <_ParsingPacket+0x10c>)
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	1c5a      	adds	r2, r3, #1
 8017d82:	b2d1      	uxtb	r1, r2
 8017d84:	4a28      	ldr	r2, [pc, #160]	; (8017e28 <_ParsingPacket+0x10c>)
 8017d86:	7011      	strb	r1, [r2, #0]
 8017d88:	4619      	mov	r1, r3
 8017d8a:	7bfa      	ldrb	r2, [r7, #15]
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	440b      	add	r3, r1
 8017d90:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			chksum -= data;
 8017d94:	4b25      	ldr	r3, [pc, #148]	; (8017e2c <_ParsingPacket+0x110>)
 8017d96:	881a      	ldrh	r2, [r3, #0]
 8017d98:	7bfb      	ldrb	r3, [r7, #15]
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	1ad3      	subs	r3, r2, r3
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	4b22      	ldr	r3, [pc, #136]	; (8017e2c <_ParsingPacket+0x110>)
 8017da2:	801a      	strh	r2, [r3, #0]
			if (ptr == p_owner->__rx_length) {
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8017daa:	4b1f      	ldr	r3, [pc, #124]	; (8017e28 <_ParsingPacket+0x10c>)
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d12b      	bne.n	8017e0a <_ParsingPacket+0xee>
				p_owner->__rx_state = IRS_GET_CHKSUML;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2202      	movs	r2, #2
 8017db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017dba:	e026      	b.n	8017e0a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUML:
			lchksum = data;
 8017dbc:	7bfa      	ldrb	r2, [r7, #15]
 8017dbe:	4b1c      	ldr	r3, [pc, #112]	; (8017e30 <_ParsingPacket+0x114>)
 8017dc0:	701a      	strb	r2, [r3, #0]
			p_owner->__rx_state = IRS_GET_CHKSUMH;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2203      	movs	r2, #3
 8017dc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			break;
 8017dca:	e01e      	b.n	8017e0a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUMH:
			// Validate checksum
			if (chksum == ((uint16_t)data << 8) + lchksum) {
 8017dcc:	4b17      	ldr	r3, [pc, #92]	; (8017e2c <_ParsingPacket+0x110>)
 8017dce:	881b      	ldrh	r3, [r3, #0]
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	7bfb      	ldrb	r3, [r7, #15]
 8017dd4:	021b      	lsls	r3, r3, #8
 8017dd6:	4a16      	ldr	r2, [pc, #88]	; (8017e30 <_ParsingPacket+0x114>)
 8017dd8:	7812      	ldrb	r2, [r2, #0]
 8017dda:	4413      	add	r3, r2
 8017ddc:	4299      	cmp	r1, r3
 8017dde:	d109      	bne.n	8017df4 <_ParsingPacket+0xd8>
				p_owner->parent._good_frames++;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	68db      	ldr	r3, [r3, #12]
 8017de4:	1c5a      	adds	r2, r3, #1
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	60da      	str	r2, [r3, #12]
				p_owner->__rx_state = IRS_DONE;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2204      	movs	r2, #4
 8017dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8017df2:	e00a      	b.n	8017e0a <_ParsingPacket+0xee>
			}
			else {
				p_owner->parent._error_frames++;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	691b      	ldr	r3, [r3, #16]
 8017df8:	1c5a      	adds	r2, r3, #1
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	611a      	str	r2, [r3, #16]
				p_owner->__rx_state = IRS_GET_LENGTH;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2200      	movs	r2, #0
 8017e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017e06:	e000      	b.n	8017e0a <_ParsingPacket+0xee>

		default:
			break;
 8017e08:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e0e:	f107 010f 	add.w	r1, r7, #15
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	4610      	mov	r0, r2
 8017e16:	4798      	blx	r3
 8017e18:	4603      	mov	r3, r0
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d184      	bne.n	8017d28 <_ParsingPacket+0xc>
		}
	}
}
 8017e1e:	bf00      	nop
 8017e20:	bf00      	nop
 8017e22:	3710      	adds	r7, #16
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	20001f56 	.word	0x20001f56
 8017e2c:	20001f58 	.word	0x20001f58
 8017e30:	20001f5a 	.word	0x20001f5a

08017e34 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b090      	sub	sp, #64	; 0x40
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	6039      	str	r1, [r7, #0]
	PifRcIbus *p_owner = (PifRcIbus *)p_client;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	637b      	str	r3, [r7, #52]	; 0x34
	PifRcIbusSensorinfo* p_sensor;
    int i;
	uint16_t p = 0;
 8017e42:	2300      	movs	r3, #0
 8017e44:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t tx_buffer[8];					// tx message buffer
	uint16_t channel[PIF_IBUS_CHANNEL_COUNT]; 	// servo data received
	uint16_t chksum;

    if (!p_owner->parent.__evt_receive) return;
 8017e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e48:	699b      	ldr	r3, [r3, #24]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f000 8151 	beq.w	80180f2 <_evtParsing+0x2be>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= IBUS_RETRY_TIMEOUT) {
 8017e50:	4baa      	ldr	r3, [pc, #680]	; (80180fc <_evtParsing+0x2c8>)
 8017e52:	681a      	ldr	r2, [r3, #0]
 8017e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e5a:	1ad3      	subs	r3, r2, r3
 8017e5c:	2b02      	cmp	r3, #2
 8017e5e:	d903      	bls.n	8017e68 <_evtParsing+0x34>
		p_owner->__rx_state = IRS_GET_LENGTH;
 8017e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e62:	2200      	movs	r2, #0
 8017e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8017e68:	4ba4      	ldr	r3, [pc, #656]	; (80180fc <_evtParsing+0x2c8>)
 8017e6a:	681a      	ldr	r2, [r3, #0]
 8017e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (p_owner->__rx_state < IRS_DONE) {
 8017e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e74:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017e78:	2b03      	cmp	r3, #3
 8017e7a:	d803      	bhi.n	8017e84 <_evtParsing+0x50>
    	_ParsingPacket(p_owner, act_receive_data);
 8017e7c:	6839      	ldr	r1, [r7, #0]
 8017e7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e80:	f7ff ff4c 	bl	8017d1c <_ParsingPacket>
    }

    if (p_owner->__rx_state == IRS_DONE) {
 8017e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e86:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017e8a:	2b04      	cmp	r3, #4
 8017e8c:	f040 8132 	bne.w	80180f4 <_evtParsing+0x2c0>
		p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8017e90:	4b9a      	ldr	r3, [pc, #616]	; (80180fc <_evtParsing+0x2c8>)
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e96:	609a      	str	r2, [r3, #8]

		// Checksum is all fine Execute command - 
		uint8_t adr = p_owner->__rx_buffer[0] & 0x0f;
 8017e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e9a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017e9e:	f003 030f 	and.w	r3, r3, #15
 8017ea2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (p_owner->__rx_buffer[0] == IBUS_COMMAND_SERVO) {
 8017ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ea8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017eac:	2b40      	cmp	r3, #64	; 0x40
 8017eae:	d130      	bne.n	8017f12 <_evtParsing+0xde>
			// Valid servo command received - extract channel data
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017eb4:	e01c      	b.n	8017ef0 <_evtParsing+0xbc>
				channel[i / 2] = p_owner->__rx_buffer[i] | (p_owner->__rx_buffer[i + 1] << 8);
 8017eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017eba:	4413      	add	r3, r2
 8017ebc:	337a      	adds	r3, #122	; 0x7a
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	b21a      	sxth	r2, r3
 8017ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017ec8:	440b      	add	r3, r1
 8017eca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017ece:	021b      	lsls	r3, r3, #8
 8017ed0:	b21b      	sxth	r3, r3
 8017ed2:	4313      	orrs	r3, r2
 8017ed4:	b219      	sxth	r1, r3
 8017ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ed8:	0fda      	lsrs	r2, r3, #31
 8017eda:	4413      	add	r3, r2
 8017edc:	105b      	asrs	r3, r3, #1
 8017ede:	b28a      	uxth	r2, r1
 8017ee0:	005b      	lsls	r3, r3, #1
 8017ee2:	3340      	adds	r3, #64	; 0x40
 8017ee4:	443b      	add	r3, r7
 8017ee6:	f823 2c38 	strh.w	r2, [r3, #-56]
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017eec:	3302      	adds	r3, #2
 8017eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ef2:	2b1c      	cmp	r3, #28
 8017ef4:	dddf      	ble.n	8017eb6 <_evtParsing+0x82>
			}

	    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8017ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ef8:	699b      	ldr	r3, [r3, #24]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f000 80f4 	beq.w	80180e8 <_evtParsing+0x2b4>
 8017f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f02:	699b      	ldr	r3, [r3, #24]
 8017f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f08:	69d2      	ldr	r2, [r2, #28]
 8017f0a:	f107 0108 	add.w	r1, r7, #8
 8017f0e:	4798      	blx	r3
 8017f10:	e0ea      	b.n	80180e8 <_evtParsing+0x2b4>
		} 
		else if (p_owner->__p_comm->_p_tx_buffer && adr <= p_owner->_number_sensors && adr > 0 && p_owner->__rx_length == 1) {
 8017f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f16:	695b      	ldr	r3, [r3, #20]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 80e5 	beq.w	80180e8 <_evtParsing+0x2b4>
 8017f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017f24:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	f200 80dd 	bhi.w	80180e8 <_evtParsing+0x2b4>
 8017f2e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	f000 80d8 	beq.w	80180e8 <_evtParsing+0x2b4>
 8017f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f3a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017f3e:	2b01      	cmp	r3, #1
 8017f40:	f040 80d2 	bne.w	80180e8 <_evtParsing+0x2b4>
			// all sensor data commands go here
			// we only process the length==1 commands (=message length is 4 bytes incl overhead) to prevent the case the
			// return messages from the UART TX port loop back to the RX port and are processed again. This is extra
			// precaution as it will also be prevented by the IBUS_TIMEGAP required
			p_sensor = &p_owner->__sensors[adr - 1];
 8017f44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	3305      	adds	r3, #5
 8017f4c:	00db      	lsls	r3, r3, #3
 8017f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f50:	4413      	add	r3, r2
 8017f52:	633b      	str	r3, [r7, #48]	; 0x30
			switch (p_owner->__rx_buffer[0] & 0x0f0) {
 8017f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f56:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8017f60:	d049      	beq.n	8017ff6 <_evtParsing+0x1c2>
 8017f62:	2ba0      	cmp	r3, #160	; 0xa0
 8017f64:	f300 808f 	bgt.w	8018086 <_evtParsing+0x252>
 8017f68:	2b80      	cmp	r3, #128	; 0x80
 8017f6a:	d002      	beq.n	8017f72 <_evtParsing+0x13e>
 8017f6c:	2b90      	cmp	r3, #144	; 0x90
 8017f6e:	d016      	beq.n	8017f9e <_evtParsing+0x16a>
 8017f70:	e089      	b.n	8018086 <_evtParsing+0x252>
			case IBUS_COMMAND_DISCOVER:
				// echo discover command: 0x04, 0x81, 0x7A, 0xFF 
				tx_buffer[p++] = 0x04;
 8017f72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017f74:	1c5a      	adds	r2, r3, #1
 8017f76:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017f78:	3340      	adds	r3, #64	; 0x40
 8017f7a:	443b      	add	r3, r7
 8017f7c:	2204      	movs	r2, #4
 8017f7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_DISCOVER + adr;
 8017f82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017f84:	1c5a      	adds	r2, r3, #1
 8017f86:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017f88:	4619      	mov	r1, r3
 8017f8a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017f8e:	3b80      	subs	r3, #128	; 0x80
 8017f90:	b2da      	uxtb	r2, r3
 8017f92:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017f96:	443b      	add	r3, r7
 8017f98:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017f9c:	e078      	b.n	8018090 <_evtParsing+0x25c>

			case IBUS_COMMAND_TYPE:
				// echo sensor type command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x06;
 8017f9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fa0:	1c5a      	adds	r2, r3, #1
 8017fa2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017fa4:	3340      	adds	r3, #64	; 0x40
 8017fa6:	443b      	add	r3, r7
 8017fa8:	2206      	movs	r2, #6
 8017faa:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_TYPE + adr;
 8017fae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fb0:	1c5a      	adds	r2, r3, #1
 8017fb2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017fba:	3b70      	subs	r3, #112	; 0x70
 8017fbc:	b2da      	uxtb	r2, r3
 8017fbe:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017fc2:	443b      	add	r3, r7
 8017fc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->type;
 8017fc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fca:	1c5a      	adds	r2, r3, #1
 8017fcc:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017fce:	4619      	mov	r1, r3
 8017fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd2:	781a      	ldrb	r2, [r3, #0]
 8017fd4:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017fd8:	443b      	add	r3, r7
 8017fda:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->length;
 8017fde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fe0:	1c5a      	adds	r2, r3, #1
 8017fe2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe8:	785a      	ldrb	r2, [r3, #1]
 8017fea:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017fee:	443b      	add	r3, r7
 8017ff0:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017ff4:	e04c      	b.n	8018090 <_evtParsing+0x25c>

			case IBUS_COMMAND_VALUE:
				// echo sensor value command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x04 + p_sensor->length;
 8017ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff8:	785a      	ldrb	r2, [r3, #1]
 8017ffa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ffc:	1c59      	adds	r1, r3, #1
 8017ffe:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018000:	3204      	adds	r2, #4
 8018002:	b2d2      	uxtb	r2, r2
 8018004:	3340      	adds	r3, #64	; 0x40
 8018006:	443b      	add	r3, r7
 8018008:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_VALUE + adr;
 801800c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801800e:	1c5a      	adds	r2, r3, #1
 8018010:	877a      	strh	r2, [r7, #58]	; 0x3a
 8018012:	4619      	mov	r1, r3
 8018014:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018018:	3b60      	subs	r3, #96	; 0x60
 801801a:	b2da      	uxtb	r2, r3
 801801c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8018020:	443b      	add	r3, r7
 8018022:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->value & 0x0ff;
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	685a      	ldr	r2, [r3, #4]
 801802a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801802c:	1c59      	adds	r1, r3, #1
 801802e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018030:	b2d2      	uxtb	r2, r2
 8018032:	3340      	adds	r3, #64	; 0x40
 8018034:	443b      	add	r3, r7
 8018036:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = (p_sensor->value >> 8) & 0x0ff; 
 801803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803c:	685b      	ldr	r3, [r3, #4]
 801803e:	121a      	asrs	r2, r3, #8
 8018040:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018042:	1c59      	adds	r1, r3, #1
 8018044:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018046:	b2d2      	uxtb	r2, r2
 8018048:	3340      	adds	r3, #64	; 0x40
 801804a:	443b      	add	r3, r7
 801804c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				if (p_sensor->length == 4) {
 8018050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018052:	785b      	ldrb	r3, [r3, #1]
 8018054:	2b04      	cmp	r3, #4
 8018056:	d11a      	bne.n	801808e <_evtParsing+0x25a>
					tx_buffer[p++] = (p_sensor->value >> 16) & 0x0ff; 
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	141a      	asrs	r2, r3, #16
 801805e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018060:	1c59      	adds	r1, r3, #1
 8018062:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018064:	b2d2      	uxtb	r2, r2
 8018066:	3340      	adds	r3, #64	; 0x40
 8018068:	443b      	add	r3, r7
 801806a:	f803 2c1c 	strb.w	r2, [r3, #-28]
					tx_buffer[p++] = (p_sensor->value >> 24) & 0x0ff; 
 801806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018070:	685b      	ldr	r3, [r3, #4]
 8018072:	0e1a      	lsrs	r2, r3, #24
 8018074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018076:	1c59      	adds	r1, r3, #1
 8018078:	8779      	strh	r1, [r7, #58]	; 0x3a
 801807a:	b2d2      	uxtb	r2, r2
 801807c:	3340      	adds	r3, #64	; 0x40
 801807e:	443b      	add	r3, r7
 8018080:	f803 2c1c 	strb.w	r2, [r3, #-28]
				}
				break;
 8018084:	e003      	b.n	801808e <_evtParsing+0x25a>

			default:
				adr = 0; // unknown command, prevent sending chksum
 8018086:	2300      	movs	r3, #0
 8018088:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				break;
 801808c:	e000      	b.n	8018090 <_evtParsing+0x25c>
				break;
 801808e:	bf00      	nop
			}
			if (adr > 0) {
 8018090:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018094:	2b00      	cmp	r3, #0
 8018096:	d027      	beq.n	80180e8 <_evtParsing+0x2b4>
				chksum = 0xFFFF - pifCheckSum(tx_buffer, p);
 8018098:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801809a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801809e:	4611      	mov	r1, r2
 80180a0:	4618      	mov	r0, r3
 80180a2:	f7f9 fe76 	bl	8011d92 <pifCheckSum>
 80180a6:	4603      	mov	r3, r0
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	43db      	mvns	r3, r3
 80180ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
				tx_buffer[p++] = chksum & 0x0ff;
 80180ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80180b0:	1c5a      	adds	r2, r3, #1
 80180b2:	877a      	strh	r2, [r7, #58]	; 0x3a
 80180b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80180b6:	b2d2      	uxtb	r2, r2
 80180b8:	3340      	adds	r3, #64	; 0x40
 80180ba:	443b      	add	r3, r7
 80180bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = chksum >> 8;
 80180c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180c2:	0a1b      	lsrs	r3, r3, #8
 80180c4:	b29a      	uxth	r2, r3
 80180c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80180c8:	1c59      	adds	r1, r3, #1
 80180ca:	8779      	strh	r1, [r7, #58]	; 0x3a
 80180cc:	b2d2      	uxtb	r2, r2
 80180ce:	3340      	adds	r3, #64	; 0x40
 80180d0:	443b      	add	r3, r7
 80180d2:	f803 2c1c 	strb.w	r2, [r3, #-28]

				pifRingBuffer_PutData(p_owner->__p_comm->_p_tx_buffer, tx_buffer, p);
 80180d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180da:	695b      	ldr	r3, [r3, #20]
 80180dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80180de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fb fdde 	bl	8013ca4 <pifRingBuffer_PutData>
			}
		}

    	p_owner->__rx_state = IRS_GET_LENGTH;
 80180e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ea:	2200      	movs	r2, #0
 80180ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80180f0:	e000      	b.n	80180f4 <_evtParsing+0x2c0>
    if (!p_owner->parent.__evt_receive) return;
 80180f2:	bf00      	nop
    }
}
 80180f4:	3740      	adds	r7, #64	; 0x40
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	20001dd0 	.word	0x20001dd0

08018100 <pifRcIbus_Init>:

BOOL pifRcIbus_Init(PifRcIbus* p_owner, PifId id)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b082      	sub	sp, #8
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
 8018108:	460b      	mov	r3, r1
 801810a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d104      	bne.n	801811c <pifRcIbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018112:	4b11      	ldr	r3, [pc, #68]	; (8018158 <pifRcIbus_Init+0x58>)
 8018114:	2201      	movs	r2, #1
 8018116:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018118:	2300      	movs	r3, #0
 801811a:	e018      	b.n	801814e <pifRcIbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcIbus));
 801811c:	22a0      	movs	r2, #160	; 0xa0
 801811e:	2100      	movs	r1, #0
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f00b f961 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018126:	887b      	ldrh	r3, [r7, #2]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d106      	bne.n	801813a <pifRcIbus_Init+0x3a>
 801812c:	4b0b      	ldr	r3, [pc, #44]	; (801815c <pifRcIbus_Init+0x5c>)
 801812e:	881b      	ldrh	r3, [r3, #0]
 8018130:	1c5a      	adds	r2, r3, #1
 8018132:	b291      	uxth	r1, r2
 8018134:	4a09      	ldr	r2, [pc, #36]	; (801815c <pifRcIbus_Init+0x5c>)
 8018136:	8011      	strh	r1, [r2, #0]
 8018138:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	887a      	ldrh	r2, [r7, #2]
 801813e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_IBUS_CHANNEL_COUNT;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	220e      	movs	r2, #14
 8018144:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = FALSE;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2200      	movs	r2, #0
 801814a:	70da      	strb	r2, [r3, #3]
    return TRUE;
 801814c:	2301      	movs	r3, #1
}
 801814e:	4618      	mov	r0, r3
 8018150:	3708      	adds	r7, #8
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	20001db8 	.word	0x20001db8
 801815c:	20000128 	.word	0x20000128

08018160 <pifRcIbus_AttachComm>:

void pifRcIbus_AttachComm(PifRcIbus* p_owner, PifComm *p_comm)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
 8018168:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	683a      	ldr	r2, [r7, #0]
 801816e:	625a      	str	r2, [r3, #36]	; 0x24
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018170:	2300      	movs	r3, #0
 8018172:	4a04      	ldr	r2, [pc, #16]	; (8018184 <pifRcIbus_AttachComm+0x24>)
 8018174:	6879      	ldr	r1, [r7, #4]
 8018176:	6838      	ldr	r0, [r7, #0]
 8018178:	f7f9 ff84 	bl	8012084 <pifComm_AttachClient>
}
 801817c:	bf00      	nop
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	08017e35 	.word	0x08017e35

08018188 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b084      	sub	sp, #16
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	460b      	mov	r3, r1
 8018192:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8018194:	2300      	movs	r3, #0
 8018196:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801819e:	2b02      	cmp	r3, #2
 80181a0:	d04f      	beq.n	8018242 <_processRcPpm+0xba>
 80181a2:	2b02      	cmp	r3, #2
 80181a4:	f300 80b5 	bgt.w	8018312 <_processRcPpm+0x18a>
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d002      	beq.n	80181b2 <_processRcPpm+0x2a>
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d010      	beq.n	80181d2 <_processRcPpm+0x4a>
 80181b0:	e0af      	b.n	8018312 <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80181b8:	887a      	ldrh	r2, [r7, #2]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	f0c0 80a4 	bcc.w	8018308 <_processRcPpm+0x180>
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80181c6:	3301      	adds	r3, #1
 80181c8:	b2da      	uxtb	r2, r3
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80181d0:	e09a      	b.n	8018308 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80181d8:	887a      	ldrh	r2, [r7, #2]
 80181da:	429a      	cmp	r2, r3
 80181dc:	d224      	bcs.n	8018228 <_processRcPpm+0xa0>
			p_owner->_channel++;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	3301      	adds	r3, #1
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	b25a      	sxtb	r2, r3
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80181f8:	461a      	mov	r2, r3
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018200:	429a      	cmp	r2, r3
 8018202:	f280 8083 	bge.w	801830c <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801820c:	461a      	mov	r2, r3
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	789b      	ldrb	r3, [r3, #2]
 8018212:	429a      	cmp	r2, r3
 8018214:	db7a      	blt.n	801830c <_processRcPpm+0x184>
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801821c:	b2db      	uxtb	r3, r3
 801821e:	3301      	adds	r3, #1
 8018220:	b2da      	uxtb	r2, r3
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 8018226:	e071      	b.n	801830c <_processRcPpm+0x184>
			p_owner->_channel = -1;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	22ff      	movs	r2, #255	; 0xff
 801822c:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018236:	3301      	adds	r3, #1
 8018238:	b2da      	uxtb	r2, r3
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018240:	e064      	b.n	801830c <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018248:	887a      	ldrh	r2, [r7, #2]
 801824a:	429a      	cmp	r2, r3
 801824c:	d257      	bcs.n	80182fe <_processRcPpm+0x176>
			p_owner->_channel++;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018254:	b2db      	uxtb	r3, r3
 8018256:	3301      	adds	r3, #1
 8018258:	b2db      	uxtb	r3, r3
 801825a:	b25a      	sxtb	r2, r3
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018268:	461a      	mov	r2, r3
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018270:	429a      	cmp	r2, r3
 8018272:	da4d      	bge.n	8018310 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801827a:	f003 0301 	and.w	r3, r3, #1
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b00      	cmp	r3, #0
 8018282:	d019      	beq.n	80182b8 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018288:	f3c3 034e 	ubfx	r3, r3, #1, #15
 801828c:	b29b      	uxth	r3, r3
 801828e:	461a      	mov	r2, r3
 8018290:	887b      	ldrh	r3, [r7, #2]
 8018292:	4293      	cmp	r3, r2
 8018294:	d31b      	bcc.n	80182ce <_processRcPpm+0x146>
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801829a:	887a      	ldrh	r2, [r7, #2]
 801829c:	429a      	cmp	r2, r3
 801829e:	d816      	bhi.n	80182ce <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80182aa:	005b      	lsls	r3, r3, #1
 80182ac:	4413      	add	r3, r2
 80182ae:	887a      	ldrh	r2, [r7, #2]
 80182b0:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 80182b2:	887b      	ldrh	r3, [r7, #2]
 80182b4:	81fb      	strh	r3, [r7, #14]
 80182b6:	e00a      	b.n	80182ce <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	4413      	add	r3, r2
 80182c6:	887a      	ldrh	r2, [r7, #2]
 80182c8:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 80182ca:	887b      	ldrh	r3, [r7, #2]
 80182cc:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 80182ce:	89fb      	ldrh	r3, [r7, #14]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d01d      	beq.n	8018310 <_processRcPpm+0x188>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80182da:	3301      	adds	r3, #1
 80182dc:	687a      	ldr	r2, [r7, #4]
 80182de:	7892      	ldrb	r2, [r2, #2]
 80182e0:	4293      	cmp	r3, r2
 80182e2:	db15      	blt.n	8018310 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	699b      	ldr	r3, [r3, #24]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d011      	beq.n	8018310 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	699b      	ldr	r3, [r3, #24]
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80182f6:	687a      	ldr	r2, [r7, #4]
 80182f8:	69d2      	ldr	r2, [r2, #28]
 80182fa:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 80182fc:	e008      	b.n	8018310 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	22ff      	movs	r2, #255	; 0xff
 8018302:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 8018306:	e003      	b.n	8018310 <_processRcPpm+0x188>
		break;
 8018308:	bf00      	nop
 801830a:	e002      	b.n	8018312 <_processRcPpm+0x18a>
		break;
 801830c:	bf00      	nop
 801830e:	e000      	b.n	8018312 <_processRcPpm+0x18a>
		break;
 8018310:	bf00      	nop
	}
	return rtn;
 8018312:	89fb      	ldrh	r3, [r7, #14]
}
 8018314:	4618      	mov	r0, r3
 8018316:	3710      	adds	r7, #16
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	60f8      	str	r0, [r7, #12]
 8018324:	4608      	mov	r0, r1
 8018326:	4611      	mov	r1, r2
 8018328:	461a      	mov	r2, r3
 801832a:	4603      	mov	r3, r0
 801832c:	817b      	strh	r3, [r7, #10]
 801832e:	460b      	mov	r3, r1
 8018330:	727b      	strb	r3, [r7, #9]
 8018332:	4613      	mov	r3, r2
 8018334:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d104      	bne.n	8018346 <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 801833c:	4b1e      	ldr	r3, [pc, #120]	; (80183b8 <pifRcPpm_Init+0x9c>)
 801833e:	2201      	movs	r2, #1
 8018340:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018342:	2300      	movs	r3, #0
 8018344:	e033      	b.n	80183ae <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 8018346:	2254      	movs	r2, #84	; 0x54
 8018348:	2100      	movs	r1, #0
 801834a:	68f8      	ldr	r0, [r7, #12]
 801834c:	f00b f84c 	bl	80233e8 <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018350:	7a7b      	ldrb	r3, [r7, #9]
 8018352:	4619      	mov	r1, r3
 8018354:	2002      	movs	r0, #2
 8018356:	f00a fff7 	bl	8023348 <calloc>
 801835a:	4603      	mov	r3, r0
 801835c:	461a      	mov	r2, r3
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018366:	2b00      	cmp	r3, #0
 8018368:	d104      	bne.n	8018374 <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 801836a:	4b13      	ldr	r3, [pc, #76]	; (80183b8 <pifRcPpm_Init+0x9c>)
 801836c:	2203      	movs	r2, #3
 801836e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018370:	2300      	movs	r3, #0
 8018372:	e01c      	b.n	80183ae <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018374:	897b      	ldrh	r3, [r7, #10]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <pifRcPpm_Init+0x6c>
 801837a:	4b10      	ldr	r3, [pc, #64]	; (80183bc <pifRcPpm_Init+0xa0>)
 801837c:	881b      	ldrh	r3, [r3, #0]
 801837e:	1c5a      	adds	r2, r3, #1
 8018380:	b291      	uxth	r1, r2
 8018382:	4a0e      	ldr	r2, [pc, #56]	; (80183bc <pifRcPpm_Init+0xa0>)
 8018384:	8011      	strh	r1, [r2, #0]
 8018386:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	897a      	ldrh	r2, [r7, #10]
 801838c:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	2200      	movs	r2, #0
 8018392:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	22ff      	movs	r2, #255	; 0xff
 8018398:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	7a7a      	ldrb	r2, [r7, #9]
 80183a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	88fa      	ldrh	r2, [r7, #6]
 80183a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 80183ac:	2301      	movs	r3, #1
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	20001db8 	.word	0x20001db8
 80183bc:	20000128 	.word	0x20000128

080183c0 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 80183c0:	b480      	push	{r7}
 80183c2:	b085      	sub	sp, #20
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80183d2:	f043 0301 	orr.w	r3, r3, #1
 80183d6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80183e0:	b299      	uxth	r1, r3
 80183e2:	68fa      	ldr	r2, [r7, #12]
 80183e4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80183e6:	f361 034f 	bfi	r3, r1, #1, #15
 80183ea:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 80183f4:	2301      	movs	r3, #1
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3714      	adds	r7, #20
 80183fa:	46bd      	mov	sp, r7
 80183fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018400:	4770      	bx	lr

08018402 <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 8018402:	b580      	push	{r7, lr}
 8018404:	b084      	sub	sp, #16
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
 801840a:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 801840c:	2300      	movs	r3, #0
 801840e:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	3305      	adds	r3, #5
 801841a:	00db      	lsls	r3, r3, #3
 801841c:	4413      	add	r3, r2
 801841e:	683a      	ldr	r2, [r7, #0]
 8018420:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018428:	687a      	ldr	r2, [r7, #4]
 801842a:	3305      	adds	r3, #5
 801842c:	00db      	lsls	r3, r3, #3
 801842e:	4413      	add	r3, r2
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	b29a      	uxth	r2, r3
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801843a:	6879      	ldr	r1, [r7, #4]
 801843c:	3305      	adds	r3, #5
 801843e:	00db      	lsls	r3, r3, #3
 8018440:	440b      	add	r3, r1
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	b29b      	uxth	r3, r3
 8018446:	1ad3      	subs	r3, r2, r3
 8018448:	b29b      	uxth	r3, r3
 801844a:	4619      	mov	r1, r3
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f7ff fe9b 	bl	8018188 <_processRcPpm>
 8018452:	4603      	mov	r3, r0
 8018454:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018468:	3301      	adds	r3, #1
 801846a:	b2db      	uxtb	r3, r3
 801846c:	f003 0303 	and.w	r3, r3, #3
 8018470:	b2da      	uxtb	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801847e:	2b03      	cmp	r3, #3
 8018480:	d807      	bhi.n	8018492 <pifRcPpm_sigTick+0x90>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018488:	3301      	adds	r3, #1
 801848a:	b2da      	uxtb	r2, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 8018492:	89fb      	ldrh	r3, [r7, #14]
}
 8018494:	4618      	mov	r0, r3
 8018496:	3710      	adds	r7, #16
 8018498:	46bd      	mov	sp, r7
 801849a:	bd80      	pop	{r7, pc}

0801849c <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b082      	sub	sp, #8
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	460b      	mov	r3, r1
 80184a6:	807b      	strh	r3, [r7, #2]
 80184a8:	4613      	mov	r3, r2
 80184aa:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d104      	bne.n	80184bc <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 80184b2:	4b25      	ldr	r3, [pc, #148]	; (8018548 <pifRcPwm_Init+0xac>)
 80184b4:	2201      	movs	r2, #1
 80184b6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80184b8:	2300      	movs	r3, #0
 80184ba:	e041      	b.n	8018540 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 80184bc:	2230      	movs	r2, #48	; 0x30
 80184be:	2100      	movs	r1, #0
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f00a ff91 	bl	80233e8 <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 80184c6:	787b      	ldrb	r3, [r7, #1]
 80184c8:	4619      	mov	r1, r3
 80184ca:	2024      	movs	r0, #36	; 0x24
 80184cc:	f00a ff3c 	bl	8023348 <calloc>
 80184d0:	4603      	mov	r3, r0
 80184d2:	461a      	mov	r2, r3
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d108      	bne.n	80184f2 <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 80184e0:	4b19      	ldr	r3, [pc, #100]	; (8018548 <pifRcPwm_Init+0xac>)
 80184e2:	2203      	movs	r2, #3
 80184e4:	701a      	strb	r2, [r3, #0]
        goto fail;
 80184e6:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	f000 f831 	bl	8018550 <pifRcPwm_Clear>
	return FALSE;
 80184ee:	2300      	movs	r3, #0
 80184f0:	e026      	b.n	8018540 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 80184f2:	787b      	ldrb	r3, [r7, #1]
 80184f4:	4619      	mov	r1, r3
 80184f6:	2002      	movs	r0, #2
 80184f8:	f00a ff26 	bl	8023348 <calloc>
 80184fc:	4603      	mov	r3, r0
 80184fe:	461a      	mov	r2, r3
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018508:	2b00      	cmp	r3, #0
 801850a:	d104      	bne.n	8018516 <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 801850c:	4b0e      	ldr	r3, [pc, #56]	; (8018548 <pifRcPwm_Init+0xac>)
 801850e:	2203      	movs	r2, #3
 8018510:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018512:	2300      	movs	r3, #0
 8018514:	e014      	b.n	8018540 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 8018516:	887b      	ldrh	r3, [r7, #2]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d106      	bne.n	801852a <pifRcPwm_Init+0x8e>
 801851c:	4b0b      	ldr	r3, [pc, #44]	; (801854c <pifRcPwm_Init+0xb0>)
 801851e:	881b      	ldrh	r3, [r3, #0]
 8018520:	1c5a      	adds	r2, r3, #1
 8018522:	b291      	uxth	r1, r2
 8018524:	4a09      	ldr	r2, [pc, #36]	; (801854c <pifRcPwm_Init+0xb0>)
 8018526:	8011      	strh	r1, [r2, #0]
 8018528:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	887a      	ldrh	r2, [r7, #2]
 801852e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	2200      	movs	r2, #0
 8018534:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	787a      	ldrb	r2, [r7, #1]
 801853a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 801853e:	2301      	movs	r3, #1
}
 8018540:	4618      	mov	r0, r3
 8018542:	3708      	adds	r7, #8
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	20001db8 	.word	0x20001db8
 801854c:	20000128 	.word	0x20000128

08018550 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b082      	sub	sp, #8
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801855c:	2b00      	cmp	r3, #0
 801855e:	d007      	beq.n	8018570 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018564:	4618      	mov	r0, r3
 8018566:	f00a ff29 	bl	80233bc <free>
		p_owner->__p_channel = NULL;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2200      	movs	r2, #0
 801856e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018574:	2b00      	cmp	r3, #0
 8018576:	d007      	beq.n	8018588 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801857c:	4618      	mov	r0, r3
 801857e:	f00a ff1d 	bl	80233bc <free>
		p_owner->__p_data = NULL;
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	2200      	movs	r2, #0
 8018586:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8018588:	bf00      	nop
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 8018590:	b480      	push	{r7}
 8018592:	b085      	sub	sp, #20
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 801859c:	68fa      	ldr	r2, [r7, #12]
 801859e:	f892 3020 	ldrb.w	r3, [r2, #32]
 80185a2:	f043 0301 	orr.w	r3, r3, #1
 80185a6:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80185b0:	b299      	uxth	r1, r3
 80185b2:	68fa      	ldr	r2, [r7, #12]
 80185b4:	8c13      	ldrh	r3, [r2, #32]
 80185b6:	f361 034f 	bfi	r3, r1, #1, #15
 80185ba:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	b29a      	uxth	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 80185c4:	2301      	movs	r3, #1
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3714      	adds	r7, #20
 80185ca:	46bd      	mov	sp, r7
 80185cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d0:	4770      	bx	lr
	...

080185d4 <_evtParsing>:

#define SBUS_RETRY_TIMEOUT		3		// 3ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b090      	sub	sp, #64	; 0x40
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	6039      	str	r1, [r7, #0]
	PifRcSbus *p_owner = (PifRcSbus *)p_client;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t i, data;
	uint8_t* p_buffer;
	uint16_t channels[PIF_SBUS_CHANNEL_COUNT]; 	// servo data received

    if (!p_owner->parent.__evt_receive) return;
 80185e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185e4:	699b      	ldr	r3, [r3, #24]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	f000 8206 	beq.w	80189f8 <_evtParsing+0x424>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SBUS_RETRY_TIMEOUT) {
 80185ec:	4b1f      	ldr	r3, [pc, #124]	; (801866c <_evtParsing+0x98>)
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	2b02      	cmp	r3, #2
 80185f8:	d903      	bls.n	8018602 <_evtParsing+0x2e>
		p_owner->__index = 0;
 80185fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185fc:	2200      	movs	r2, #0
 80185fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018602:	4b1a      	ldr	r3, [pc, #104]	; (801866c <_evtParsing+0x98>)
 8018604:	681a      	ldr	r2, [r3, #0]
 8018606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018608:	641a      	str	r2, [r3, #64]	; 0x40

	p_buffer = p_owner->__buffer;
 801860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860c:	3325      	adds	r3, #37	; 0x25
 801860e:	637b      	str	r3, [r7, #52]	; 0x34

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018610:	e1e6      	b.n	80189e0 <_evtParsing+0x40c>
		if (p_owner->__index == 0 && data != SBUS_STARTBYTE) {
 8018612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018618:	2b00      	cmp	r3, #0
 801861a:	d104      	bne.n	8018626 <_evtParsing+0x52>
 801861c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018620:	2b0f      	cmp	r3, #15
 8018622:	d000      	beq.n	8018626 <_evtParsing+0x52>
			continue;
 8018624:	e1dc      	b.n	80189e0 <_evtParsing+0x40c>
		}

		p_buffer[p_owner->__index++] = data;
 8018626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801862c:	1c5a      	adds	r2, r3, #1
 801862e:	b2d1      	uxtb	r1, r2
 8018630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018632:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8018636:	461a      	mov	r2, r3
 8018638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801863a:	4413      	add	r3, r2
 801863c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8018640:	701a      	strb	r2, [r3, #0]

	    if (p_owner->__index == SBUS_FRAME_SIZE) {
 8018642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018648:	2b19      	cmp	r3, #25
 801864a:	f040 81c9 	bne.w	80189e0 <_evtParsing+0x40c>
			p_owner->__index = 0;
 801864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018650:	2200      	movs	r2, #0
 8018652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if (p_buffer[24] != SBUS_ENDBYTE) {
 8018656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018658:	3318      	adds	r3, #24
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d007      	beq.n	8018670 <_evtParsing+0x9c>
				//incorrect end byte, out of sync
				p_owner->parent._error_frames++;
 8018660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018662:	691b      	ldr	r3, [r3, #16]
 8018664:	1c5a      	adds	r2, r3, #1
 8018666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018668:	611a      	str	r2, [r3, #16]
				continue;
 801866a:	e1b9      	b.n	80189e0 <_evtParsing+0x40c>
 801866c:	20001dd0 	.word	0x20001dd0
			}

			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018670:	4b9d      	ldr	r3, [pc, #628]	; (80188e8 <_evtParsing+0x314>)
 8018672:	681a      	ldr	r2, [r3, #0]
 8018674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018676:	609a      	str	r2, [r3, #8]

			channels[0]  = (p_buffer[1]       | p_buffer[2] << 8)                       & 0x07FF;
 8018678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801867a:	3301      	adds	r3, #1
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	b21a      	sxth	r2, r3
 8018680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018682:	3302      	adds	r3, #2
 8018684:	781b      	ldrb	r3, [r3, #0]
 8018686:	021b      	lsls	r3, r3, #8
 8018688:	b21b      	sxth	r3, r3
 801868a:	4313      	orrs	r3, r2
 801868c:	b21b      	sxth	r3, r3
 801868e:	b29b      	uxth	r3, r3
 8018690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018694:	b29b      	uxth	r3, r3
 8018696:	81bb      	strh	r3, [r7, #12]
			channels[1]  = (p_buffer[2] >> 3  | p_buffer[3] << 5)                 	    & 0x07FF;
 8018698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801869a:	3302      	adds	r3, #2
 801869c:	781b      	ldrb	r3, [r3, #0]
 801869e:	08db      	lsrs	r3, r3, #3
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	b21a      	sxth	r2, r3
 80186a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a6:	3303      	adds	r3, #3
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	015b      	lsls	r3, r3, #5
 80186ac:	b21b      	sxth	r3, r3
 80186ae:	4313      	orrs	r3, r2
 80186b0:	b21b      	sxth	r3, r3
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	81fb      	strh	r3, [r7, #14]
			channels[2]  = (p_buffer[3] >> 6  | p_buffer[4] << 2  | p_buffer[5] << 10)  & 0x07FF;
 80186bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186be:	3303      	adds	r3, #3
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	099b      	lsrs	r3, r3, #6
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	b21a      	sxth	r2, r3
 80186c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186ca:	3304      	adds	r3, #4
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	b21b      	sxth	r3, r3
 80186d2:	4313      	orrs	r3, r2
 80186d4:	b21a      	sxth	r2, r3
 80186d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d8:	3305      	adds	r3, #5
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	029b      	lsls	r3, r3, #10
 80186de:	b21b      	sxth	r3, r3
 80186e0:	4313      	orrs	r3, r2
 80186e2:	b21b      	sxth	r3, r3
 80186e4:	b29b      	uxth	r3, r3
 80186e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	823b      	strh	r3, [r7, #16]
			channels[3]  = (p_buffer[5] >> 1  | p_buffer[6] << 7)                 	    & 0x07FF;
 80186ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f0:	3305      	adds	r3, #5
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	085b      	lsrs	r3, r3, #1
 80186f6:	b2db      	uxtb	r3, r3
 80186f8:	b21a      	sxth	r2, r3
 80186fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186fc:	3306      	adds	r3, #6
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	01db      	lsls	r3, r3, #7
 8018702:	b21b      	sxth	r3, r3
 8018704:	4313      	orrs	r3, r2
 8018706:	b21b      	sxth	r3, r3
 8018708:	b29b      	uxth	r3, r3
 801870a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801870e:	b29b      	uxth	r3, r3
 8018710:	827b      	strh	r3, [r7, #18]
			channels[4]  = (p_buffer[6] >> 4  | p_buffer[7] << 4)                 	    & 0x07FF;
 8018712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018714:	3306      	adds	r3, #6
 8018716:	781b      	ldrb	r3, [r3, #0]
 8018718:	091b      	lsrs	r3, r3, #4
 801871a:	b2db      	uxtb	r3, r3
 801871c:	b21a      	sxth	r2, r3
 801871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018720:	3307      	adds	r3, #7
 8018722:	781b      	ldrb	r3, [r3, #0]
 8018724:	011b      	lsls	r3, r3, #4
 8018726:	b21b      	sxth	r3, r3
 8018728:	4313      	orrs	r3, r2
 801872a:	b21b      	sxth	r3, r3
 801872c:	b29b      	uxth	r3, r3
 801872e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018732:	b29b      	uxth	r3, r3
 8018734:	82bb      	strh	r3, [r7, #20]
			channels[5]  = (p_buffer[7] >> 7  | p_buffer[8] << 1  | p_buffer[9] << 9)   & 0x07FF;
 8018736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018738:	3307      	adds	r3, #7
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	09db      	lsrs	r3, r3, #7
 801873e:	b2db      	uxtb	r3, r3
 8018740:	b21a      	sxth	r2, r3
 8018742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018744:	3308      	adds	r3, #8
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	b21b      	sxth	r3, r3
 801874c:	4313      	orrs	r3, r2
 801874e:	b21a      	sxth	r2, r3
 8018750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018752:	3309      	adds	r3, #9
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	025b      	lsls	r3, r3, #9
 8018758:	b21b      	sxth	r3, r3
 801875a:	4313      	orrs	r3, r2
 801875c:	b21b      	sxth	r3, r3
 801875e:	b29b      	uxth	r3, r3
 8018760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018764:	b29b      	uxth	r3, r3
 8018766:	82fb      	strh	r3, [r7, #22]
			channels[6]  = (p_buffer[9] >> 2  | p_buffer[10] << 6)                	    & 0x07FF;
 8018768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801876a:	3309      	adds	r3, #9
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	089b      	lsrs	r3, r3, #2
 8018770:	b2db      	uxtb	r3, r3
 8018772:	b21a      	sxth	r2, r3
 8018774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018776:	330a      	adds	r3, #10
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	019b      	lsls	r3, r3, #6
 801877c:	b21b      	sxth	r3, r3
 801877e:	4313      	orrs	r3, r2
 8018780:	b21b      	sxth	r3, r3
 8018782:	b29b      	uxth	r3, r3
 8018784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018788:	b29b      	uxth	r3, r3
 801878a:	833b      	strh	r3, [r7, #24]
			channels[7]  = (p_buffer[10] >> 5 | p_buffer[11] << 3)                	    & 0x07FF;
 801878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801878e:	330a      	adds	r3, #10
 8018790:	781b      	ldrb	r3, [r3, #0]
 8018792:	095b      	lsrs	r3, r3, #5
 8018794:	b2db      	uxtb	r3, r3
 8018796:	b21a      	sxth	r2, r3
 8018798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801879a:	330b      	adds	r3, #11
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	00db      	lsls	r3, r3, #3
 80187a0:	b21b      	sxth	r3, r3
 80187a2:	4313      	orrs	r3, r2
 80187a4:	b21b      	sxth	r3, r3
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80187ac:	b29b      	uxth	r3, r3
 80187ae:	837b      	strh	r3, [r7, #26]
			channels[8]  = (p_buffer[12]      | p_buffer[13] << 8)                	    & 0x07FF;
 80187b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187b2:	330c      	adds	r3, #12
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	b21a      	sxth	r2, r3
 80187b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ba:	330d      	adds	r3, #13
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	021b      	lsls	r3, r3, #8
 80187c0:	b21b      	sxth	r3, r3
 80187c2:	4313      	orrs	r3, r2
 80187c4:	b21b      	sxth	r3, r3
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	83bb      	strh	r3, [r7, #28]
			channels[9]  = (p_buffer[13] >> 3 | p_buffer[14] << 5)                	    & 0x07FF;
 80187d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187d2:	330d      	adds	r3, #13
 80187d4:	781b      	ldrb	r3, [r3, #0]
 80187d6:	08db      	lsrs	r3, r3, #3
 80187d8:	b2db      	uxtb	r3, r3
 80187da:	b21a      	sxth	r2, r3
 80187dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187de:	330e      	adds	r3, #14
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	015b      	lsls	r3, r3, #5
 80187e4:	b21b      	sxth	r3, r3
 80187e6:	4313      	orrs	r3, r2
 80187e8:	b21b      	sxth	r3, r3
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80187f0:	b29b      	uxth	r3, r3
 80187f2:	83fb      	strh	r3, [r7, #30]
			channels[10] = (p_buffer[14] >> 6 | p_buffer[15] << 2 | p_buffer[16] << 10) & 0x07FF;
 80187f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187f6:	330e      	adds	r3, #14
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	099b      	lsrs	r3, r3, #6
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	b21a      	sxth	r2, r3
 8018800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018802:	330f      	adds	r3, #15
 8018804:	781b      	ldrb	r3, [r3, #0]
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	b21b      	sxth	r3, r3
 801880a:	4313      	orrs	r3, r2
 801880c:	b21a      	sxth	r2, r3
 801880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018810:	3310      	adds	r3, #16
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	029b      	lsls	r3, r3, #10
 8018816:	b21b      	sxth	r3, r3
 8018818:	4313      	orrs	r3, r2
 801881a:	b21b      	sxth	r3, r3
 801881c:	b29b      	uxth	r3, r3
 801881e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018822:	b29b      	uxth	r3, r3
 8018824:	843b      	strh	r3, [r7, #32]
			channels[11] = (p_buffer[16] >> 1 | p_buffer[17] << 7)                	    & 0x07FF;
 8018826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018828:	3310      	adds	r3, #16
 801882a:	781b      	ldrb	r3, [r3, #0]
 801882c:	085b      	lsrs	r3, r3, #1
 801882e:	b2db      	uxtb	r3, r3
 8018830:	b21a      	sxth	r2, r3
 8018832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018834:	3311      	adds	r3, #17
 8018836:	781b      	ldrb	r3, [r3, #0]
 8018838:	01db      	lsls	r3, r3, #7
 801883a:	b21b      	sxth	r3, r3
 801883c:	4313      	orrs	r3, r2
 801883e:	b21b      	sxth	r3, r3
 8018840:	b29b      	uxth	r3, r3
 8018842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018846:	b29b      	uxth	r3, r3
 8018848:	847b      	strh	r3, [r7, #34]	; 0x22
			channels[12] = (p_buffer[17] >> 4 | p_buffer[18] << 4)                	    & 0x07FF;
 801884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801884c:	3311      	adds	r3, #17
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	091b      	lsrs	r3, r3, #4
 8018852:	b2db      	uxtb	r3, r3
 8018854:	b21a      	sxth	r2, r3
 8018856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018858:	3312      	adds	r3, #18
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	011b      	lsls	r3, r3, #4
 801885e:	b21b      	sxth	r3, r3
 8018860:	4313      	orrs	r3, r2
 8018862:	b21b      	sxth	r3, r3
 8018864:	b29b      	uxth	r3, r3
 8018866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801886a:	b29b      	uxth	r3, r3
 801886c:	84bb      	strh	r3, [r7, #36]	; 0x24
			channels[13] = (p_buffer[18] >> 7 | p_buffer[19] << 1 | p_buffer[20] << 9)  & 0x07FF;
 801886e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018870:	3312      	adds	r3, #18
 8018872:	781b      	ldrb	r3, [r3, #0]
 8018874:	09db      	lsrs	r3, r3, #7
 8018876:	b2db      	uxtb	r3, r3
 8018878:	b21a      	sxth	r2, r3
 801887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801887c:	3313      	adds	r3, #19
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	b21b      	sxth	r3, r3
 8018884:	4313      	orrs	r3, r2
 8018886:	b21a      	sxth	r2, r3
 8018888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801888a:	3314      	adds	r3, #20
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	025b      	lsls	r3, r3, #9
 8018890:	b21b      	sxth	r3, r3
 8018892:	4313      	orrs	r3, r2
 8018894:	b21b      	sxth	r3, r3
 8018896:	b29b      	uxth	r3, r3
 8018898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801889c:	b29b      	uxth	r3, r3
 801889e:	84fb      	strh	r3, [r7, #38]	; 0x26
			channels[14] = (p_buffer[20] >> 2 | p_buffer[21] << 6)                	    & 0x07FF;
 80188a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188a2:	3314      	adds	r3, #20
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	089b      	lsrs	r3, r3, #2
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	b21a      	sxth	r2, r3
 80188ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ae:	3315      	adds	r3, #21
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	019b      	lsls	r3, r3, #6
 80188b4:	b21b      	sxth	r3, r3
 80188b6:	4313      	orrs	r3, r2
 80188b8:	b21b      	sxth	r3, r3
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80188c0:	b29b      	uxth	r3, r3
 80188c2:	853b      	strh	r3, [r7, #40]	; 0x28
			channels[15] = (p_buffer[21] >> 5 | p_buffer[22] << 3)                	    & 0x07FF;
 80188c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c6:	3315      	adds	r3, #21
 80188c8:	781b      	ldrb	r3, [r3, #0]
 80188ca:	095b      	lsrs	r3, r3, #5
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	b21a      	sxth	r2, r3
 80188d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d2:	3316      	adds	r3, #22
 80188d4:	781b      	ldrb	r3, [r3, #0]
 80188d6:	00db      	lsls	r3, r3, #3
 80188d8:	b21b      	sxth	r3, r3
 80188da:	4313      	orrs	r3, r2
 80188dc:	b21b      	sxth	r3, r3
 80188de:	b29b      	uxth	r3, r3
 80188e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80188e4:	b29b      	uxth	r3, r3
 80188e6:	e003      	b.n	80188f0 <_evtParsing+0x31c>
 80188e8:	20001dd0 	.word	0x20001dd0
 80188ec:	445c0000 	.word	0x445c0000
 80188f0:	857b      	strh	r3, [r7, #42]	; 0x2a

			channels[16] = ((p_buffer[23])      & 0x0001) ? 2047 : 0;
 80188f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188f4:	3317      	adds	r3, #23
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	f003 0301 	and.w	r3, r3, #1
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d002      	beq.n	8018906 <_evtParsing+0x332>
 8018900:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018904:	e000      	b.n	8018908 <_evtParsing+0x334>
 8018906:	2300      	movs	r3, #0
 8018908:	85bb      	strh	r3, [r7, #44]	; 0x2c
			channels[17] = ((p_buffer[23] >> 1) & 0x0001) ? 2047 : 0;
 801890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801890c:	3317      	adds	r3, #23
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	085b      	lsrs	r3, r3, #1
 8018912:	b2db      	uxtb	r3, r3
 8018914:	f003 0301 	and.w	r3, r3, #1
 8018918:	2b00      	cmp	r3, #0
 801891a:	d002      	beq.n	8018922 <_evtParsing+0x34e>
 801891c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018920:	e000      	b.n	8018924 <_evtParsing+0x350>
 8018922:	2300      	movs	r3, #0
 8018924:	85fb      	strh	r3, [r7, #46]	; 0x2e

			if ((p_buffer[23] >> 3) & 0x0001) {
 8018926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018928:	3317      	adds	r3, #23
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	08db      	lsrs	r3, r3, #3
 801892e:	b2db      	uxtb	r3, r3
 8018930:	f003 0301 	and.w	r3, r3, #1
 8018934:	2b00      	cmp	r3, #0
 8018936:	d003      	beq.n	8018940 <_evtParsing+0x36c>
				p_owner->parent._failsafe = TRUE;
 8018938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801893a:	2201      	movs	r2, #1
 801893c:	70da      	strb	r2, [r3, #3]
 801893e:	e002      	b.n	8018946 <_evtParsing+0x372>
			} else {
				p_owner->parent._failsafe = FALSE;
 8018940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018942:	2200      	movs	r2, #0
 8018944:	70da      	strb	r2, [r3, #3]
			}

			if ((p_buffer[23] >> 2) & 0x0001) {
 8018946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018948:	3317      	adds	r3, #23
 801894a:	781b      	ldrb	r3, [r3, #0]
 801894c:	089b      	lsrs	r3, r3, #2
 801894e:	b2db      	uxtb	r3, r3
 8018950:	f003 0301 	and.w	r3, r3, #1
 8018954:	2b00      	cmp	r3, #0
 8018956:	d005      	beq.n	8018964 <_evtParsing+0x390>
				p_owner->parent._lost_frames++;
 8018958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801895a:	695b      	ldr	r3, [r3, #20]
 801895c:	1c5a      	adds	r2, r3, #1
 801895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018960:	615a      	str	r2, [r3, #20]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
					channels[i] = 0.625f * channels[i] + 880;
				}
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
			}
			break;
 8018962:	e04b      	b.n	80189fc <_evtParsing+0x428>
				p_owner->parent._good_frames++;
 8018964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018966:	68db      	ldr	r3, [r3, #12]
 8018968:	1c5a      	adds	r2, r3, #1
 801896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801896c:	60da      	str	r2, [r3, #12]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 801896e:	2300      	movs	r3, #0
 8018970:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8018974:	e023      	b.n	80189be <_evtParsing+0x3ea>
					channels[i] = 0.625f * channels[i] + 880;
 8018976:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801897a:	005b      	lsls	r3, r3, #1
 801897c:	3340      	adds	r3, #64	; 0x40
 801897e:	443b      	add	r3, r7
 8018980:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8018984:	ee07 3a90 	vmov	s15, r3
 8018988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801898c:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8018990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018994:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 80188ec <_evtParsing+0x318>
 8018998:	ee77 7a87 	vadd.f32	s15, s15, s14
 801899c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80189a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80189a4:	ee17 2a90 	vmov	r2, s15
 80189a8:	b292      	uxth	r2, r2
 80189aa:	005b      	lsls	r3, r3, #1
 80189ac:	3340      	adds	r3, #64	; 0x40
 80189ae:	443b      	add	r3, r7
 80189b0:	f823 2c34 	strh.w	r2, [r3, #-52]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 80189b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80189b8:	3301      	adds	r3, #1
 80189ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80189be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80189c2:	2b11      	cmp	r3, #17
 80189c4:	d9d7      	bls.n	8018976 <_evtParsing+0x3a2>
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
 80189c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c8:	699b      	ldr	r3, [r3, #24]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d016      	beq.n	80189fc <_evtParsing+0x428>
 80189ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d0:	699b      	ldr	r3, [r3, #24]
 80189d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80189d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189d6:	69d2      	ldr	r2, [r2, #28]
 80189d8:	f107 010c 	add.w	r1, r7, #12
 80189dc:	4798      	blx	r3
			break;
 80189de:	e00d      	b.n	80189fc <_evtParsing+0x428>
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80189e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e2:	6a1a      	ldr	r2, [r3, #32]
 80189e4:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	4610      	mov	r0, r2
 80189ec:	4798      	blx	r3
 80189ee:	4603      	mov	r3, r0
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	f47f ae0e 	bne.w	8018612 <_evtParsing+0x3e>
 80189f6:	e002      	b.n	80189fe <_evtParsing+0x42a>
    if (!p_owner->parent.__evt_receive) return;
 80189f8:	bf00      	nop
 80189fa:	e000      	b.n	80189fe <_evtParsing+0x42a>
			break;
 80189fc:	bf00      	nop
		}
	}
}
 80189fe:	3740      	adds	r7, #64	; 0x40
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}

08018a04 <pifRcSbus_Init>:

BOOL pifRcSbus_Init(PifRcSbus* p_owner, PifId id)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d104      	bne.n	8018a20 <pifRcSbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018a16:	4b11      	ldr	r3, [pc, #68]	; (8018a5c <pifRcSbus_Init+0x58>)
 8018a18:	2201      	movs	r2, #1
 8018a1a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	e018      	b.n	8018a52 <pifRcSbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcSbus));
 8018a20:	2244      	movs	r2, #68	; 0x44
 8018a22:	2100      	movs	r1, #0
 8018a24:	6878      	ldr	r0, [r7, #4]
 8018a26:	f00a fcdf 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018a2a:	887b      	ldrh	r3, [r7, #2]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d106      	bne.n	8018a3e <pifRcSbus_Init+0x3a>
 8018a30:	4b0b      	ldr	r3, [pc, #44]	; (8018a60 <pifRcSbus_Init+0x5c>)
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	1c5a      	adds	r2, r3, #1
 8018a36:	b291      	uxth	r1, r2
 8018a38:	4a09      	ldr	r2, [pc, #36]	; (8018a60 <pifRcSbus_Init+0x5c>)
 8018a3a:	8011      	strh	r1, [r2, #0]
 8018a3c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	887a      	ldrh	r2, [r7, #2]
 8018a42:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SBUS_CHANNEL_COUNT;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2212      	movs	r2, #18
 8018a48:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	2201      	movs	r2, #1
 8018a4e:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8018a50:	2301      	movs	r3, #1
}
 8018a52:	4618      	mov	r0, r3
 8018a54:	3708      	adds	r7, #8
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	20001db8 	.word	0x20001db8
 8018a60:	20000128 	.word	0x20000128

08018a64 <pifRcSbus_AttachComm>:

void pifRcSbus_AttachComm(PifRcSbus* p_owner, PifComm *p_comm)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	683a      	ldr	r2, [r7, #0]
 8018a72:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018a74:	2300      	movs	r3, #0
 8018a76:	4a04      	ldr	r2, [pc, #16]	; (8018a88 <pifRcSbus_AttachComm+0x24>)
 8018a78:	6879      	ldr	r1, [r7, #4]
 8018a7a:	6838      	ldr	r0, [r7, #0]
 8018a7c:	f7f9 fb02 	bl	8012084 <pifComm_AttachClient>
}
 8018a80:	bf00      	nop
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}
 8018a88:	080185d5 	.word	0x080185d5

08018a8c <_evtParsing>:

#define SPEKTRUM_RETRY_TIMEOUT		5	// 5ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018a8c:	b590      	push	{r4, r7, lr}
 8018a8e:	b087      	sub	sp, #28
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	6039      	str	r1, [r7, #0]
	PifRcSpektrum *p_owner = (PifRcSpektrum *)p_client;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	613b      	str	r3, [r7, #16]
	uint8_t data, id;
	uint8_t* p_buffer;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	699b      	ldr	r3, [r3, #24]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f000 80b9 	beq.w	8018c16 <_evtParsing+0x18a>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SPEKTRUM_RETRY_TIMEOUT) {
 8018aa4:	4b5e      	ldr	r3, [pc, #376]	; (8018c20 <_evtParsing+0x194>)
 8018aa6:	681a      	ldr	r2, [r3, #0]
 8018aa8:	693b      	ldr	r3, [r7, #16]
 8018aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018aac:	1ad3      	subs	r3, r2, r3
 8018aae:	2b04      	cmp	r3, #4
 8018ab0:	d903      	bls.n	8018aba <_evtParsing+0x2e>
		p_owner->__index = 0;
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018aba:	4b59      	ldr	r3, [pc, #356]	; (8018c20 <_evtParsing+0x194>)
 8018abc:	681a      	ldr	r2, [r3, #0]
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	659a      	str	r2, [r3, #88]	; 0x58

	p_buffer = p_owner->__p_buffer;
 8018ac2:	693b      	ldr	r3, [r7, #16]
 8018ac4:	3334      	adds	r3, #52	; 0x34
 8018ac6:	60fb      	str	r3, [r7, #12]

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018ac8:	e099      	b.n	8018bfe <_evtParsing+0x172>
		p_buffer[p_owner->__index++] = data;
 8018aca:	693b      	ldr	r3, [r7, #16]
 8018acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018ad0:	1c5a      	adds	r2, r3, #1
 8018ad2:	b2d1      	uxtb	r1, r2
 8018ad4:	693a      	ldr	r2, [r7, #16]
 8018ad6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8018ada:	461a      	mov	r2, r3
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	4413      	add	r3, r2
 8018ae0:	7aba      	ldrb	r2, [r7, #10]
 8018ae2:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 2) {
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018aea:	2b02      	cmp	r3, #2
 8018aec:	d119      	bne.n	8018b22 <_evtParsing+0x96>
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	3301      	adds	r3, #1
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	f000 8082 	beq.w	8018bfe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	3301      	adds	r3, #1
 8018afe:	781b      	ldrb	r3, [r3, #0]
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 8018b00:	2b12      	cmp	r3, #18
 8018b02:	d07c      	beq.n	8018bfe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	3301      	adds	r3, #1
 8018b08:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 8018b0a:	2bb2      	cmp	r3, #178	; 0xb2
 8018b0c:	d077      	beq.n	8018bfe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS) {
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	3301      	adds	r3, #1
 8018b12:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018b14:	2ba2      	cmp	r3, #162	; 0xa2
 8018b16:	d072      	beq.n	8018bfe <_evtParsing+0x172>
				p_owner->__index = 0;
 8018b18:	693b      	ldr	r3, [r7, #16]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				continue;
 8018b20:	e06d      	b.n	8018bfe <_evtParsing+0x172>
			}
		}
		else if (p_owner->__index >= SPEKTRUM_FRAME_SIZE) {
 8018b22:	693b      	ldr	r3, [r7, #16]
 8018b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018b28:	2b0f      	cmp	r3, #15
 8018b2a:	d968      	bls.n	8018bfe <_evtParsing+0x172>
			p_owner->parent._good_frames++;
 8018b2c:	693b      	ldr	r3, [r7, #16]
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	1c5a      	adds	r2, r3, #1
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	60da      	str	r2, [r3, #12]

			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8018b36:	2302      	movs	r3, #2
 8018b38:	617b      	str	r3, [r7, #20]
 8018b3a:	e048      	b.n	8018bce <_evtParsing+0x142>
				id = (p_buffer[index] >> p_owner->__id_shift) & p_owner->__id_mask;
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	68fa      	ldr	r2, [r7, #12]
 8018b40:	4413      	add	r3, r2
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	461a      	mov	r2, r3
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018b4c:	fa42 f303 	asr.w	r3, r2, r3
 8018b50:	b25a      	sxtb	r2, r3
 8018b52:	693b      	ldr	r3, [r7, #16]
 8018b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018b58:	b25b      	sxtb	r3, r3
 8018b5a:	4013      	ands	r3, r2
 8018b5c:	b25b      	sxtb	r3, r3
 8018b5e:	72fb      	strb	r3, [r7, #11]
				if (id < p_owner->parent._channel_count) {
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	789b      	ldrb	r3, [r3, #2]
 8018b64:	7afa      	ldrb	r2, [r7, #11]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d22e      	bcs.n	8018bc8 <_evtParsing+0x13c>
					p_owner->__channel[id] = 988 + (((uint16_t)(p_buffer[index] & p_owner->__pos_mask) << 8) + p_buffer[index + 1]) / p_owner->_pos_factor;
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	68fa      	ldr	r2, [r7, #12]
 8018b6e:	4413      	add	r3, r2
 8018b70:	781a      	ldrb	r2, [r3, #0]
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8018b78:	4013      	ands	r3, r2
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	021b      	lsls	r3, r3, #8
 8018b7e:	697a      	ldr	r2, [r7, #20]
 8018b80:	3201      	adds	r2, #1
 8018b82:	68f9      	ldr	r1, [r7, #12]
 8018b84:	440a      	add	r2, r1
 8018b86:	7812      	ldrb	r2, [r2, #0]
 8018b88:	4413      	add	r3, r2
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7e7 fc7e 	bl	800048c <__aeabi_i2d>
 8018b90:	693b      	ldr	r3, [r7, #16]
 8018b92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8018b96:	f7e7 fe0d 	bl	80007b4 <__aeabi_ddiv>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	460b      	mov	r3, r1
 8018b9e:	4610      	mov	r0, r2
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	f04f 0200 	mov.w	r2, #0
 8018ba6:	4b1f      	ldr	r3, [pc, #124]	; (8018c24 <_evtParsing+0x198>)
 8018ba8:	f7e7 fb24 	bl	80001f4 <__adddf3>
 8018bac:	4602      	mov	r2, r0
 8018bae:	460b      	mov	r3, r1
 8018bb0:	7afc      	ldrb	r4, [r7, #11]
 8018bb2:	4610      	mov	r0, r2
 8018bb4:	4619      	mov	r1, r3
 8018bb6:	f7e7 ff95 	bl	8000ae4 <__aeabi_d2uiz>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	b299      	uxth	r1, r3
 8018bbe:	693b      	ldr	r3, [r7, #16]
 8018bc0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8018bc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	3302      	adds	r3, #2
 8018bcc:	617b      	str	r3, [r7, #20]
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	2b0f      	cmp	r3, #15
 8018bd2:	ddb3      	ble.n	8018b3c <_evtParsing+0xb0>
				}
			}
			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018bd4:	4b12      	ldr	r3, [pc, #72]	; (8018c20 <_evtParsing+0x194>)
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	609a      	str	r2, [r3, #8]

			p_owner->__index = 0;
 8018bdc:	693b      	ldr	r3, [r7, #16]
 8018bde:	2200      	movs	r2, #0
 8018be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

			if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__channel, p_owner->parent.__p_issuer);
 8018be4:	693b      	ldr	r3, [r7, #16]
 8018be6:	699b      	ldr	r3, [r3, #24]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d008      	beq.n	8018bfe <_evtParsing+0x172>
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	699b      	ldr	r3, [r3, #24]
 8018bf0:	6938      	ldr	r0, [r7, #16]
 8018bf2:	693a      	ldr	r2, [r7, #16]
 8018bf4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8018bf8:	693a      	ldr	r2, [r7, #16]
 8018bfa:	69d2      	ldr	r2, [r2, #28]
 8018bfc:	4798      	blx	r3
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018bfe:	693b      	ldr	r3, [r7, #16]
 8018c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018c02:	f107 010a 	add.w	r1, r7, #10
 8018c06:	683b      	ldr	r3, [r7, #0]
 8018c08:	4610      	mov	r0, r2
 8018c0a:	4798      	blx	r3
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	f47f af5b 	bne.w	8018aca <_evtParsing+0x3e>
 8018c14:	e000      	b.n	8018c18 <_evtParsing+0x18c>
    if (!p_owner->parent.__evt_receive) return;
 8018c16:	bf00      	nop
		}
	}
}
 8018c18:	371c      	adds	r7, #28
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd90      	pop	{r4, r7, pc}
 8018c1e:	bf00      	nop
 8018c20:	20001dd0 	.word	0x20001dd0
 8018c24:	408ee000 	.word	0x408ee000

08018c28 <pifRcSpektrum_Init>:

BOOL pifRcSpektrum_Init(PifRcSpektrum* p_owner, PifId id, uint8_t protocol_id)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	460b      	mov	r3, r1
 8018c32:	807b      	strh	r3, [r7, #2]
 8018c34:	4613      	mov	r3, r2
 8018c36:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d104      	bne.n	8018c48 <pifRcSpektrum_Init+0x20>
		pif_error = E_INVALID_PARAM;
 8018c3e:	4b41      	ldr	r3, [pc, #260]	; (8018d44 <pifRcSpektrum_Init+0x11c>)
 8018c40:	2201      	movs	r2, #1
 8018c42:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018c44:	2300      	movs	r3, #0
 8018c46:	e079      	b.n	8018d3c <pifRcSpektrum_Init+0x114>
	}

	memset(p_owner, 0, sizeof(PifRcSpektrum));
 8018c48:	2260      	movs	r2, #96	; 0x60
 8018c4a:	2100      	movs	r1, #0
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f00a fbcb 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018c52:	887b      	ldrh	r3, [r7, #2]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d106      	bne.n	8018c66 <pifRcSpektrum_Init+0x3e>
 8018c58:	4b3b      	ldr	r3, [pc, #236]	; (8018d48 <pifRcSpektrum_Init+0x120>)
 8018c5a:	881b      	ldrh	r3, [r3, #0]
 8018c5c:	1c5a      	adds	r2, r3, #1
 8018c5e:	b291      	uxth	r1, r2
 8018c60:	4a39      	ldr	r2, [pc, #228]	; (8018d48 <pifRcSpektrum_Init+0x120>)
 8018c62:	8011      	strh	r1, [r2, #0]
 8018c64:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	887a      	ldrh	r2, [r7, #2]
 8018c6a:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	70da      	strb	r2, [r3, #3]
	p_owner->_protocol_id = protocol_id;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	787a      	ldrb	r2, [r7, #1]
 8018c76:	f883 2020 	strb.w	r2, [r3, #32]
	switch (protocol_id) {
 8018c7a:	787b      	ldrb	r3, [r7, #1]
 8018c7c:	2bb2      	cmp	r3, #178	; 0xb2
 8018c7e:	d023      	beq.n	8018cc8 <pifRcSpektrum_Init+0xa0>
 8018c80:	2bb2      	cmp	r3, #178	; 0xb2
 8018c82:	dc55      	bgt.n	8018d30 <pifRcSpektrum_Init+0x108>
 8018c84:	2ba2      	cmp	r3, #162	; 0xa2
 8018c86:	d039      	beq.n	8018cfc <pifRcSpektrum_Init+0xd4>
 8018c88:	2ba2      	cmp	r3, #162	; 0xa2
 8018c8a:	dc51      	bgt.n	8018d30 <pifRcSpektrum_Init+0x108>
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d002      	beq.n	8018c96 <pifRcSpektrum_Init+0x6e>
 8018c90:	2b12      	cmp	r3, #18
 8018c92:	d019      	beq.n	8018cc8 <pifRcSpektrum_Init+0xa0>
 8018c94:	e04c      	b.n	8018d30 <pifRcSpektrum_Init+0x108>
	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2:
		p_owner->parent._channel_count = 7;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	2207      	movs	r2, #7
 8018c9a:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2219      	movs	r2, #25
 8018ca0:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x3F;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	223f      	movs	r2, #63	; 0x3f
 8018ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 2;
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	2202      	movs	r2, #2
 8018cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x03;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	2203      	movs	r2, #3
 8018cb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 1;
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	f04f 0200 	mov.w	r2, #0
 8018cc0:	4b22      	ldr	r3, [pc, #136]	; (8018d4c <pifRcSpektrum_Init+0x124>)
 8018cc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018cc6:	e038      	b.n	8018d3a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2:
	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX:
		p_owner->parent._channel_count = 8;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2208      	movs	r2, #8
 8018ccc:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 15;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	220f      	movs	r2, #15
 8018cd2:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	220f      	movs	r2, #15
 8018cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2203      	movs	r2, #3
 8018ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2207      	movs	r2, #7
 8018ce8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018cec:	6879      	ldr	r1, [r7, #4]
 8018cee:	f04f 0200 	mov.w	r2, #0
 8018cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018cf6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018cfa:	e01e      	b.n	8018d3a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS:
		p_owner->parent._channel_count = 8;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2208      	movs	r2, #8
 8018d00:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2219      	movs	r2, #25
 8018d06:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	220f      	movs	r2, #15
 8018d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2203      	movs	r2, #3
 8018d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2207      	movs	r2, #7
 8018d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018d20:	6879      	ldr	r1, [r7, #4]
 8018d22:	f04f 0200 	mov.w	r2, #0
 8018d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018d2e:	e004      	b.n	8018d3a <pifRcSpektrum_Init+0x112>

	default:
		pif_error = E_INVALID_PARAM;
 8018d30:	4b04      	ldr	r3, [pc, #16]	; (8018d44 <pifRcSpektrum_Init+0x11c>)
 8018d32:	2201      	movs	r2, #1
 8018d34:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8018d36:	2300      	movs	r3, #0
 8018d38:	e000      	b.n	8018d3c <pifRcSpektrum_Init+0x114>
	}
	return TRUE;
 8018d3a:	2301      	movs	r3, #1
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3708      	adds	r7, #8
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}
 8018d44:	20001db8 	.word	0x20001db8
 8018d48:	20000128 	.word	0x20000128
 8018d4c:	3ff00000 	.word	0x3ff00000

08018d50 <pifRcSpektrum_AttachComm>:

void pifRcSpektrum_AttachComm(PifRcSpektrum* p_owner, PifComm *p_comm)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
 8018d58:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	683a      	ldr	r2, [r7, #0]
 8018d5e:	631a      	str	r2, [r3, #48]	; 0x30
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018d60:	2300      	movs	r3, #0
 8018d62:	4a04      	ldr	r2, [pc, #16]	; (8018d74 <pifRcSpektrum_AttachComm+0x24>)
 8018d64:	6879      	ldr	r1, [r7, #4]
 8018d66:	6838      	ldr	r0, [r7, #0]
 8018d68:	f7f9 f98c 	bl	8012084 <pifComm_AttachClient>
}
 8018d6c:	bf00      	nop
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}
 8018d74:	08018a8d 	.word	0x08018a8d

08018d78 <_evtParsing>:
#define SUMD_MAX_FRAME_PERIOD   750 	// 750ms, above this delay, switch to failsafe
#define SUMD_RETRY_TIMEOUT		4		// 4ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b096      	sub	sp, #88	; 0x58
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
	PifRcSumd *p_owner = (PifRcSumd *)p_client;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t* p_buffer;
    uint16_t channel[PIF_SUMD_CHANNEL_COUNT];
	uint16_t crc;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 8018d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d88:	699b      	ldr	r3, [r3, #24]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	f000 80e4 	beq.w	8018f58 <_evtParsing+0x1e0>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SUMD_RETRY_TIMEOUT) {
 8018d90:	4b73      	ldr	r3, [pc, #460]	; (8018f60 <_evtParsing+0x1e8>)
 8018d92:	681a      	ldr	r2, [r3, #0]
 8018d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d98:	1ad3      	subs	r3, r2, r3
 8018d9a:	2b03      	cmp	r3, #3
 8018d9c:	d903      	bls.n	8018da6 <_evtParsing+0x2e>
		p_owner->__index = 0;
 8018d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018da0:	2200      	movs	r2, #0
 8018da2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018da6:	4b6e      	ldr	r3, [pc, #440]	; (8018f60 <_evtParsing+0x1e8>)
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018dac:	66da      	str	r2, [r3, #108]	; 0x6c

	p_buffer = p_owner->__p_buffer;
 8018dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018db0:	3324      	adds	r3, #36	; 0x24
 8018db2:	64fb      	str	r3, [r7, #76]	; 0x4c

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018db4:	e0c4      	b.n	8018f40 <_evtParsing+0x1c8>
		//add byte to the ring buffer
		p_buffer[p_owner->__index++] = data;
 8018db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018db8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018dbc:	1c5a      	adds	r2, r3, #1
 8018dbe:	b2d1      	uxtb	r1, r2
 8018dc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018dc2:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8018dc6:	461a      	mov	r2, r3
 8018dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018dca:	4413      	add	r3, r2
 8018dcc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8018dd0:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 1) {
 8018dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018dd4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d109      	bne.n	8018df0 <_evtParsing+0x78>
			if (p_buffer[0] != SUMD_VENDOR_ID) {
 8018ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	2ba8      	cmp	r3, #168	; 0xa8
 8018de2:	f000 80ad 	beq.w	8018f40 <_evtParsing+0x1c8>
				p_owner->__index = 0;
 8018de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018de8:	2200      	movs	r2, #0
 8018dea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018dee:	e0a7      	b.n	8018f40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 2) {
 8018df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018df2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018df6:	2b02      	cmp	r3, #2
 8018df8:	d11f      	bne.n	8018e3a <_evtParsing+0xc2>
			if (p_buffer[1] != SUMD_STATUS_VALID && p_buffer[1] != SUMD_STATUS_FAILSAFE) {
 8018dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	781b      	ldrb	r3, [r3, #0]
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	d00e      	beq.n	8018e22 <_evtParsing+0xaa>
 8018e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e06:	3301      	adds	r3, #1
 8018e08:	781b      	ldrb	r3, [r3, #0]
 8018e0a:	2b81      	cmp	r3, #129	; 0x81
 8018e0c:	d009      	beq.n	8018e22 <_evtParsing+0xaa>
				p_owner->parent._error_frames++;
 8018e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e10:	691b      	ldr	r3, [r3, #16]
 8018e12:	1c5a      	adds	r2, r3, #1
 8018e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e16:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018e20:	e08e      	b.n	8018f40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._failsafe = (p_buffer[1] == SUMD_STATUS_FAILSAFE);
 8018e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e24:	3301      	adds	r3, #1
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	2b81      	cmp	r3, #129	; 0x81
 8018e2a:	bf0c      	ite	eq
 8018e2c:	2301      	moveq	r3, #1
 8018e2e:	2300      	movne	r3, #0
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	461a      	mov	r2, r3
 8018e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e36:	70da      	strb	r2, [r3, #3]
 8018e38:	e082      	b.n	8018f40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 3) {
 8018e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e3c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018e40:	2b03      	cmp	r3, #3
 8018e42:	d118      	bne.n	8018e76 <_evtParsing+0xfe>
			if (p_buffer[2] < 2 || p_buffer[2] > PIF_SUMD_CHANNEL_COUNT) {		// 2 < channels < PIF_SUMD_CHANNEL_COUNT
 8018e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e46:	3302      	adds	r3, #2
 8018e48:	781b      	ldrb	r3, [r3, #0]
 8018e4a:	2b01      	cmp	r3, #1
 8018e4c:	d904      	bls.n	8018e58 <_evtParsing+0xe0>
 8018e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e50:	3302      	adds	r3, #2
 8018e52:	781b      	ldrb	r3, [r3, #0]
 8018e54:	2b20      	cmp	r3, #32
 8018e56:	d909      	bls.n	8018e6c <_evtParsing+0xf4>
				p_owner->parent._error_frames++;
 8018e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e5a:	691b      	ldr	r3, [r3, #16]
 8018e5c:	1c5a      	adds	r2, r3, #1
 8018e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e60:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e64:	2200      	movs	r2, #0
 8018e66:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018e6a:	e069      	b.n	8018f40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._channel_count = p_buffer[2];
 8018e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e6e:	789a      	ldrb	r2, [r3, #2]
 8018e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e72:	709a      	strb	r2, [r3, #2]
 8018e74:	e064      	b.n	8018f40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index >= SUMD_HEADER_SIZE + p_buffer[2] * 2 + SUMD_CRC_SIZE) {
 8018e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e78:	3302      	adds	r3, #2
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	3302      	adds	r3, #2
 8018e7e:	005b      	lsls	r3, r3, #1
 8018e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018e82:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8018e86:	4293      	cmp	r3, r2
 8018e88:	da5a      	bge.n	8018f40 <_evtParsing+0x1c8>
			//compute CRC with header and data
			crc = pifCrc16(p_buffer, SUMD_HEADER_SIZE + 2 * p_owner->parent._channel_count + SUMD_CRC_SIZE);
 8018e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e8c:	789b      	ldrb	r3, [r3, #2]
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	b29b      	uxth	r3, r3
 8018e94:	3305      	adds	r3, #5
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	4619      	mov	r1, r3
 8018e9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018e9c:	f7f8 ff57 	bl	8011d4e <pifCrc16>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//if frame is valid
			if (crc == 0) {
 8018ea6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d13f      	bne.n	8018f2e <_evtParsing+0x1b6>
				p_owner->parent._good_frames++;
 8018eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eb0:	68db      	ldr	r3, [r3, #12]
 8018eb2:	1c5a      	adds	r2, r3, #1
 8018eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eb6:	60da      	str	r2, [r3, #12]

				//update channel output values
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018eb8:	2300      	movs	r3, #0
 8018eba:	657b      	str	r3, [r7, #84]	; 0x54
 8018ebc:	e01c      	b.n	8018ef8 <_evtParsing+0x180>
					channel[index] = ((p_buffer[SUMD_HEADER_SIZE + 2 * index] << 8) + p_buffer[SUMD_HEADER_SIZE + 2 * index + 1]) / 8;
 8018ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ec0:	005b      	lsls	r3, r3, #1
 8018ec2:	3303      	adds	r3, #3
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ec8:	4413      	add	r3, r2
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	021b      	lsls	r3, r3, #8
 8018ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018ed0:	0052      	lsls	r2, r2, #1
 8018ed2:	3204      	adds	r2, #4
 8018ed4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018ed6:	440a      	add	r2, r1
 8018ed8:	7812      	ldrb	r2, [r2, #0]
 8018eda:	4413      	add	r3, r2
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	da00      	bge.n	8018ee2 <_evtParsing+0x16a>
 8018ee0:	3307      	adds	r3, #7
 8018ee2:	10db      	asrs	r3, r3, #3
 8018ee4:	b29a      	uxth	r2, r3
 8018ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ee8:	005b      	lsls	r3, r3, #1
 8018eea:	3358      	adds	r3, #88	; 0x58
 8018eec:	443b      	add	r3, r7
 8018eee:	f823 2c50 	strh.w	r2, [r3, #-80]
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ef4:	3301      	adds	r3, #1
 8018ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8018ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018efa:	789b      	ldrb	r3, [r3, #2]
 8018efc:	461a      	mov	r2, r3
 8018efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f00:	4293      	cmp	r3, r2
 8018f02:	dbdc      	blt.n	8018ebe <_evtParsing+0x146>
				}
				p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018f04:	4b16      	ldr	r3, [pc, #88]	; (8018f60 <_evtParsing+0x1e8>)
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f0a:	609a      	str	r2, [r3, #8]

				//forgot decoded bytes from the ring buffer
				p_owner->__index = 0;
 8018f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f0e:	2200      	movs	r2, #0
 8018f10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8018f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f16:	699b      	ldr	r3, [r3, #24]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d011      	beq.n	8018f40 <_evtParsing+0x1c8>
 8018f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f1e:	699b      	ldr	r3, [r3, #24]
 8018f20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018f22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018f24:	69d2      	ldr	r2, [r2, #28]
 8018f26:	f107 0108 	add.w	r1, r7, #8
 8018f2a:	4798      	blx	r3
 8018f2c:	e008      	b.n	8018f40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._error_frames++;
 8018f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f30:	691b      	ldr	r3, [r3, #16]
 8018f32:	1c5a      	adds	r2, r3, #1
 8018f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f36:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f42:	6a1a      	ldr	r2, [r3, #32]
 8018f44:	f107 0149 	add.w	r1, r7, #73	; 0x49
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	4610      	mov	r0, r2
 8018f4c:	4798      	blx	r3
 8018f4e:	4603      	mov	r3, r0
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	f47f af30 	bne.w	8018db6 <_evtParsing+0x3e>
 8018f56:	e000      	b.n	8018f5a <_evtParsing+0x1e2>
    if (!p_owner->parent.__evt_receive) return;
 8018f58:	bf00      	nop
			}
		}
	}
}
 8018f5a:	3758      	adds	r7, #88	; 0x58
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd80      	pop	{r7, pc}
 8018f60:	20001dd0 	.word	0x20001dd0

08018f64 <pifRcSumd_Init>:

BOOL pifRcSumd_Init(PifRcSumd* p_owner, PifId id)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b082      	sub	sp, #8
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
 8018f6c:	460b      	mov	r3, r1
 8018f6e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d104      	bne.n	8018f80 <pifRcSumd_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018f76:	4b13      	ldr	r3, [pc, #76]	; (8018fc4 <pifRcSumd_Init+0x60>)
 8018f78:	2201      	movs	r2, #1
 8018f7a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	e01c      	b.n	8018fba <pifRcSumd_Init+0x56>
	}

	memset(p_owner, 0, sizeof(PifRcSumd));
 8018f80:	2270      	movs	r2, #112	; 0x70
 8018f82:	2100      	movs	r1, #0
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	f00a fa2f 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018f8a:	887b      	ldrh	r3, [r7, #2]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d106      	bne.n	8018f9e <pifRcSumd_Init+0x3a>
 8018f90:	4b0d      	ldr	r3, [pc, #52]	; (8018fc8 <pifRcSumd_Init+0x64>)
 8018f92:	881b      	ldrh	r3, [r3, #0]
 8018f94:	1c5a      	adds	r2, r3, #1
 8018f96:	b291      	uxth	r1, r2
 8018f98:	4a0b      	ldr	r2, [pc, #44]	; (8018fc8 <pifRcSumd_Init+0x64>)
 8018f9a:	8011      	strh	r1, [r2, #0]
 8018f9c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	887a      	ldrh	r2, [r7, #2]
 8018fa2:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SUMD_CHANNEL_COUNT;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2220      	movs	r2, #32
 8018fa8:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2201      	movs	r2, #1
 8018fae:	70da      	strb	r2, [r3, #3]
	p_owner->parent._max_frame_period = SUMD_MAX_FRAME_PERIOD;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018fb6:	809a      	strh	r2, [r3, #4]
    return TRUE;
 8018fb8:	2301      	movs	r3, #1
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3708      	adds	r7, #8
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
 8018fc2:	bf00      	nop
 8018fc4:	20001db8 	.word	0x20001db8
 8018fc8:	20000128 	.word	0x20000128

08018fcc <pifRcSumd_AttachComm>:

void pifRcSumd_AttachComm(PifRcSumd* p_owner, PifComm *p_comm)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
 8018fd4:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	683a      	ldr	r2, [r7, #0]
 8018fda:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018fdc:	2300      	movs	r3, #0
 8018fde:	4a04      	ldr	r2, [pc, #16]	; (8018ff0 <pifRcSumd_AttachComm+0x24>)
 8018fe0:	6879      	ldr	r1, [r7, #4]
 8018fe2:	6838      	ldr	r0, [r7, #0]
 8018fe4:	f7f9 f84e 	bl	8012084 <pifComm_AttachClient>
}
 8018fe8:	bf00      	nop
 8018fea:	3708      	adds	r7, #8
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}
 8018ff0:	08018d79 	.word	0x08018d79

08018ff4 <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b090      	sub	sp, #64	; 0x40
 8018ff8:	af02      	add	r7, sp, #8
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	607a      	str	r2, [r7, #4]
 8018ffe:	603b      	str	r3, [r7, #0]
 8019000:	460b      	mov	r3, r1
 8019002:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d005      	beq.n	8019016 <pifGy86_Init+0x22>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d002      	beq.n	8019016 <pifGy86_Init+0x22>
 8019010:	683b      	ldr	r3, [r7, #0]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d104      	bne.n	8019020 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 8019016:	4b48      	ldr	r3, [pc, #288]	; (8019138 <pifGy86_Init+0x144>)
 8019018:	2201      	movs	r2, #1
 801901a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801901c:	2300      	movs	r3, #0
 801901e:	e1dd      	b.n	80193dc <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 8019020:	2264      	movs	r2, #100	; 0x64
 8019022:	2100      	movs	r1, #0
 8019024:	68f8      	ldr	r0, [r7, #12]
 8019026:	f00a f9df 	bl	80233e8 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	1d18      	adds	r0, r3, #4
 801902e:	683b      	ldr	r3, [r7, #0]
 8019030:	9300      	str	r3, [sp, #0]
 8019032:	2368      	movs	r3, #104	; 0x68
 8019034:	687a      	ldr	r2, [r7, #4]
 8019036:	2100      	movs	r1, #0
 8019038:	f001 f888 	bl	801a14c <pifMpu60x0_Init>
 801903c:	4603      	mov	r3, r0
 801903e:	2b00      	cmp	r3, #0
 8019040:	f000 81a5 	beq.w	801938e <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	68db      	ldr	r3, [r3, #12]
 8019048:	2200      	movs	r2, #0
 801904a:	2119      	movs	r1, #25
 801904c:	4618      	mov	r0, r3
 801904e:	f7f9 fb57 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8019052:	4603      	mov	r3, r0
 8019054:	2b00      	cmp	r3, #0
 8019056:	f000 819c 	beq.w	8019392 <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 801905a:	2300      	movs	r3, #0
 801905c:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 801905e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019060:	2b00      	cmp	r3, #0
 8019062:	d005      	beq.n	8019070 <pifGy86_Init+0x7c>
 8019064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019066:	789b      	ldrb	r3, [r3, #2]
 8019068:	f003 0307 	and.w	r3, r3, #7
 801906c:	b2da      	uxtb	r2, r3
 801906e:	e000      	b.n	8019072 <pifGy86_Init+0x7e>
 8019070:	2203      	movs	r2, #3
 8019072:	7d3b      	ldrb	r3, [r7, #20]
 8019074:	f362 0302 	bfi	r3, r2, #0, #3
 8019078:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	7d3a      	ldrb	r2, [r7, #20]
 8019080:	216b      	movs	r1, #107	; 0x6b
 8019082:	4618      	mov	r0, r3
 8019084:	f7f9 fb3c 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8019088:	4603      	mov	r3, r0
 801908a:	2b00      	cmp	r3, #0
 801908c:	f000 8183 	beq.w	8019396 <pifGy86_Init+0x3a2>

    if (p_config) {
 8019090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019092:	2b00      	cmp	r3, #0
 8019094:	d043      	beq.n	801911e <pifGy86_Init+0x12a>
    	config.byte = 0;
 8019096:	2300      	movs	r3, #0
 8019098:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 801909c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801909e:	78db      	ldrb	r3, [r3, #3]
 80190a0:	f003 0307 	and.w	r3, r3, #7
 80190a4:	b2da      	uxtb	r2, r3
 80190a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80190aa:	f362 0302 	bfi	r3, r2, #0, #3
 80190ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	68db      	ldr	r3, [r3, #12]
 80190b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80190ba:	211a      	movs	r1, #26
 80190bc:	4618      	mov	r0, r3
 80190be:	f7f9 fb1f 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80190c2:	4603      	mov	r3, r0
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 8168 	beq.w	801939a <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 80190ca:	2300      	movs	r3, #0
 80190cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 80190d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190d2:	791b      	ldrb	r3, [r3, #4]
 80190d4:	f003 0303 	and.w	r3, r3, #3
 80190d8:	b2da      	uxtb	r2, r3
 80190da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80190de:	f362 03c4 	bfi	r3, r2, #3, #2
 80190e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	3304      	adds	r3, #4
 80190ea:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80190ee:	4618      	mov	r0, r3
 80190f0:	f001 f926 	bl	801a340 <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 80190f4:	2300      	movs	r3, #0
 80190f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 80190fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190fc:	785b      	ldrb	r3, [r3, #1]
 80190fe:	f003 0303 	and.w	r3, r3, #3
 8019102:	b2da      	uxtb	r2, r3
 8019104:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019108:	f362 03c4 	bfi	r3, r2, #3, #2
 801910c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	3304      	adds	r3, #4
 8019114:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8019118:	4618      	mov	r0, r3
 801911a:	f001 f931 	bl	801a380 <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 8019124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019126:	2b00      	cmp	r3, #0
 8019128:	d008      	beq.n	801913c <pifGy86_Init+0x148>
 801912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801912c:	795b      	ldrb	r3, [r3, #5]
 801912e:	f003 030f 	and.w	r3, r3, #15
 8019132:	b2da      	uxtb	r2, r3
 8019134:	e003      	b.n	801913e <pifGy86_Init+0x14a>
 8019136:	bf00      	nop
 8019138:	20001db8 	.word	0x20001db8
 801913c:	220d      	movs	r2, #13
 801913e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019142:	f362 0303 	bfi	r3, r2, #0, #4
 8019146:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	68db      	ldr	r3, [r3, #12]
 801914e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019152:	2124      	movs	r1, #36	; 0x24
 8019154:	4618      	mov	r0, r3
 8019156:	f7f9 fad3 	bl	8012700 <pifI2cDevice_WriteRegByte>
 801915a:	4603      	mov	r3, r0
 801915c:	2b00      	cmp	r3, #0
 801915e:	f000 811e 	beq.w	801939e <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 8019162:	2300      	movs	r3, #0
 8019164:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8019166:	7e3b      	ldrb	r3, [r7, #24]
 8019168:	f043 0310 	orr.w	r3, r3, #16
 801916c:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 801916e:	7e3b      	ldrb	r3, [r7, #24]
 8019170:	f043 0302 	orr.w	r3, r3, #2
 8019174:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	68db      	ldr	r3, [r3, #12]
 801917a:	7e3a      	ldrb	r2, [r7, #24]
 801917c:	2137      	movs	r1, #55	; 0x37
 801917e:	4618      	mov	r0, r3
 8019180:	f7f9 fabe 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8019184:	4603      	mov	r3, r0
 8019186:	2b00      	cmp	r3, #0
 8019188:	f000 810b 	beq.w	80193a2 <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 801918c:	2300      	movs	r3, #0
 801918e:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8019190:	7f3b      	ldrb	r3, [r7, #28]
 8019192:	f043 0301 	orr.w	r3, r3, #1
 8019196:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	68db      	ldr	r3, [r3, #12]
 801919c:	7f3a      	ldrb	r2, [r7, #28]
 801919e:	2138      	movs	r1, #56	; 0x38
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7f9 faad 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80191a6:	4603      	mov	r3, r0
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	f000 80fc 	beq.w	80193a6 <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	f103 0014 	add.w	r0, r3, #20
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	687a      	ldr	r2, [r7, #4]
 80191b8:	2100      	movs	r1, #0
 80191ba:	f000 faff 	bl	80197bc <pifHmc5883_Init>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	f000 80f2 	beq.w	80193aa <pifGy86_Init+0x3b6>

    if (p_config) {
 80191c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d039      	beq.n	8019240 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80191cc:	7c3b      	ldrb	r3, [r7, #16]
 80191ce:	f36f 0301 	bfc	r3, #0, #2
 80191d2:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 80191d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191d6:	7a5b      	ldrb	r3, [r3, #9]
 80191d8:	f003 0303 	and.w	r3, r3, #3
 80191dc:	b2da      	uxtb	r2, r3
 80191de:	7c3b      	ldrb	r3, [r7, #16]
 80191e0:	f362 1346 	bfi	r3, r2, #5, #2
 80191e4:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 80191e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191e8:	799b      	ldrb	r3, [r3, #6]
 80191ea:	f003 0307 	and.w	r3, r3, #7
 80191ee:	b2da      	uxtb	r2, r3
 80191f0:	7c3b      	ldrb	r3, [r7, #16]
 80191f2:	f362 0384 	bfi	r3, r2, #2, #3
 80191f6:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191fc:	7c3a      	ldrb	r2, [r7, #16]
 80191fe:	2100      	movs	r1, #0
 8019200:	4618      	mov	r0, r3
 8019202:	f7f9 fa7d 	bl	8012700 <pifI2cDevice_WriteRegByte>
 8019206:	4603      	mov	r3, r0
 8019208:	2b00      	cmp	r3, #0
 801920a:	f000 80d0 	beq.w	80193ae <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	f103 0214 	add.w	r2, r3, #20
 8019214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019216:	79db      	ldrb	r3, [r3, #7]
 8019218:	4619      	mov	r1, r3
 801921a:	4610      	mov	r0, r2
 801921c:	f000 fb72 	bl	8019904 <pifHmc5883_SetGain>
 8019220:	4603      	mov	r3, r0
 8019222:	2b00      	cmp	r3, #0
 8019224:	f000 80c5 	beq.w	80193b2 <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801922c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801922e:	7a1b      	ldrb	r3, [r3, #8]
 8019230:	2202      	movs	r2, #2
 8019232:	2102      	movs	r1, #2
 8019234:	f7f9 fa7a 	bl	801272c <pifI2cDevice_WriteRegBit8>
 8019238:	4603      	mov	r3, r0
 801923a:	2b00      	cmp	r3, #0
 801923c:	f000 80bb 	beq.w	80193b6 <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	68d8      	ldr	r0, [r3, #12]
 8019244:	2300      	movs	r3, #0
 8019246:	f240 1201 	movw	r2, #257	; 0x101
 801924a:	2137      	movs	r1, #55	; 0x37
 801924c:	f7f9 fa6e 	bl	801272c <pifI2cDevice_WriteRegBit8>
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	f000 80b1 	beq.w	80193ba <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	68db      	ldr	r3, [r3, #12]
 801925c:	2201      	movs	r2, #1
 801925e:	2138      	movs	r1, #56	; 0x38
 8019260:	4618      	mov	r0, r3
 8019262:	f7f9 fa4d 	bl	8012700 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	68d8      	ldr	r0, [r3, #12]
 801926a:	2301      	movs	r3, #1
 801926c:	f240 5201 	movw	r2, #1281	; 0x501
 8019270:	216a      	movs	r1, #106	; 0x6a
 8019272:	f7f9 fa5b 	bl	801272c <pifI2cDevice_WriteRegBit8>
 8019276:	4603      	mov	r3, r0
 8019278:	2b00      	cmp	r3, #0
 801927a:	f000 80a0 	beq.w	80193be <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 801927e:	2300      	movs	r3, #0
 8019280:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8019284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019288:	221e      	movs	r2, #30
 801928a:	f362 0306 	bfi	r3, r2, #0, #7
 801928e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8019292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801929a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	68db      	ldr	r3, [r3, #12]
 80192a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80192a6:	2125      	movs	r1, #37	; 0x25
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7f9 fa29 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80192ae:	4603      	mov	r3, r0
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	f000 8086 	beq.w	80193c2 <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	68db      	ldr	r3, [r3, #12]
 80192ba:	2203      	movs	r2, #3
 80192bc:	2126      	movs	r1, #38	; 0x26
 80192be:	4618      	mov	r0, r3
 80192c0:	f7f9 fa1e 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d07d      	beq.n	80193c6 <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 80192d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80192d4:	2206      	movs	r2, #6
 80192d6:	f362 0303 	bfi	r3, r2, #0, #4
 80192da:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 80192de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80192e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192e6:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	68db      	ldr	r3, [r3, #12]
 80192ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80192f2:	2127      	movs	r1, #39	; 0x27
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7f9 fa03 	bl	8012700 <pifI2cDevice_WriteRegByte>
 80192fa:	4603      	mov	r3, r0
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d064      	beq.n	80193ca <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8019300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019302:	2b00      	cmp	r3, #0
 8019304:	d02a      	beq.n	801935c <pifGy86_Init+0x368>
 8019306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019308:	691b      	ldr	r3, [r3, #16]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d026      	beq.n	801935c <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8019314:	2377      	movs	r3, #119	; 0x77
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	2100      	movs	r1, #0
 801931a:	f001 fd0b 	bl	801ad34 <pifMs5611_Init>
 801931e:	4603      	mov	r3, r0
 8019320:	2b00      	cmp	r3, #0
 8019322:	d054      	beq.n	80193ce <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801932c:	7a9b      	ldrb	r3, [r3, #10]
 801932e:	b29b      	uxth	r3, r3
 8019330:	4619      	mov	r1, r3
 8019332:	4610      	mov	r0, r2
 8019334:	f001 fd9e 	bl	801ae74 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801933e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019340:	8999      	ldrh	r1, [r3, #12]
 8019342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019344:	691a      	ldr	r2, [r3, #16]
 8019346:	2300      	movs	r3, #0
 8019348:	f001 fdd0 	bl	801aeec <pifMs5611_AddTaskForReading>
 801934c:	4603      	mov	r3, r0
 801934e:	2b00      	cmp	r3, #0
 8019350:	d03f      	beq.n	80193d2 <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019358:	7812      	ldrb	r2, [r2, #0]
 801935a:	715a      	strb	r2, [r3, #5]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 801935c:	897b      	ldrh	r3, [r7, #10]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d106      	bne.n	8019370 <pifGy86_Init+0x37c>
 8019362:	4b20      	ldr	r3, [pc, #128]	; (80193e4 <pifGy86_Init+0x3f0>)
 8019364:	881b      	ldrh	r3, [r3, #0]
 8019366:	1c5a      	adds	r2, r3, #1
 8019368:	b291      	uxth	r1, r2
 801936a:	4a1e      	ldr	r2, [pc, #120]	; (80193e4 <pifGy86_Init+0x3f0>)
 801936c:	8011      	strh	r1, [r2, #0]
 801936e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	897a      	ldrh	r2, [r7, #10]
 8019374:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	2200      	movs	r2, #0
 801937a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	4a19      	ldr	r2, [pc, #100]	; (80193e8 <pifGy86_Init+0x3f4>)
 8019382:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	68fa      	ldr	r2, [r7, #12]
 8019388:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 801938a:	2301      	movs	r3, #1
 801938c:	e026      	b.n	80193dc <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 801938e:	bf00      	nop
 8019390:	e020      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019392:	bf00      	nop
 8019394:	e01e      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019396:	bf00      	nop
 8019398:	e01c      	b.n	80193d4 <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801939a:	bf00      	nop
 801939c:	e01a      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 801939e:	bf00      	nop
 80193a0:	e018      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80193a2:	bf00      	nop
 80193a4:	e016      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80193a6:	bf00      	nop
 80193a8:	e014      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 80193aa:	bf00      	nop
 80193ac:	e012      	b.n	80193d4 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 80193ae:	bf00      	nop
 80193b0:	e010      	b.n	80193d4 <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 80193b2:	bf00      	nop
 80193b4:	e00e      	b.n	80193d4 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 80193b6:	bf00      	nop
 80193b8:	e00c      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 80193ba:	bf00      	nop
 80193bc:	e00a      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 80193be:	bf00      	nop
 80193c0:	e008      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 80193c2:	bf00      	nop
 80193c4:	e006      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 80193c6:	bf00      	nop
 80193c8:	e004      	b.n	80193d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 80193ca:	bf00      	nop
 80193cc:	e002      	b.n	80193d4 <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 80193ce:	bf00      	nop
 80193d0:	e000      	b.n	80193d4 <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 80193d2:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 80193d4:	68f8      	ldr	r0, [r7, #12]
 80193d6:	f000 f809 	bl	80193ec <pifGy86_Clear>
	return FALSE;
 80193da:	2300      	movs	r3, #0
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3738      	adds	r7, #56	; 0x38
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	20000128 	.word	0x20000128
 80193e8:	0801941b 	.word	0x0801941b

080193ec <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	332c      	adds	r3, #44	; 0x2c
 80193f8:	4618      	mov	r0, r3
 80193fa:	f001 fd17 	bl	801ae2c <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	3314      	adds	r3, #20
 8019402:	4618      	mov	r0, r3
 8019404:	f000 fa66 	bl	80198d4 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	3304      	adds	r3, #4
 801940c:	4618      	mov	r0, r3
 801940e:	f000 ff7f 	bl	801a310 <pifMpu60x0_Clear>
}
 8019412:	bf00      	nop
 8019414:	3708      	adds	r7, #8
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}

0801941a <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 801941a:	b580      	push	{r7, lr}
 801941c:	b084      	sub	sp, #16
 801941e:	af00      	add	r7, sp, #0
 8019420:	6078      	str	r0, [r7, #4]
 8019422:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	68d8      	ldr	r0, [r3, #12]
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801942e:	3349      	adds	r3, #73	; 0x49
 8019430:	b2d9      	uxtb	r1, r3
 8019432:	f107 0208 	add.w	r2, r7, #8
 8019436:	2306      	movs	r3, #6
 8019438:	f7f9 f890 	bl	801255c <pifI2cDevice_ReadRegBytes>
 801943c:	4603      	mov	r3, r0
 801943e:	2b00      	cmp	r3, #0
 8019440:	d101      	bne.n	8019446 <pifGy86_ReadMag+0x2c>
 8019442:	2300      	movs	r3, #0
 8019444:	e04d      	b.n	80194e2 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8019446:	7a3b      	ldrb	r3, [r7, #8]
 8019448:	b29b      	uxth	r3, r3
 801944a:	021b      	lsls	r3, r3, #8
 801944c:	b29a      	uxth	r2, r3
 801944e:	7a7b      	ldrb	r3, [r7, #9]
 8019450:	b29b      	uxth	r3, r3
 8019452:	4413      	add	r3, r2
 8019454:	b29b      	uxth	r3, r3
 8019456:	b21b      	sxth	r3, r3
 8019458:	ee07 3a90 	vmov	s15, r3
 801945c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	edd3 7a05 	vldr	s15, [r3, #20]
 8019466:	ee67 7a27 	vmul.f32	s15, s14, s15
 801946a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801946e:	ee17 3a90 	vmov	r3, s15
 8019472:	b21a      	sxth	r2, r3
 8019474:	683b      	ldr	r3, [r7, #0]
 8019476:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8019478:	7abb      	ldrb	r3, [r7, #10]
 801947a:	b29b      	uxth	r3, r3
 801947c:	021b      	lsls	r3, r3, #8
 801947e:	b29a      	uxth	r2, r3
 8019480:	7afb      	ldrb	r3, [r7, #11]
 8019482:	b29b      	uxth	r3, r3
 8019484:	4413      	add	r3, r2
 8019486:	b29b      	uxth	r3, r3
 8019488:	b21b      	sxth	r3, r3
 801948a:	ee07 3a90 	vmov	s15, r3
 801948e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	edd3 7a07 	vldr	s15, [r3, #28]
 8019498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	3304      	adds	r3, #4
 80194a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194a4:	ee17 2a90 	vmov	r2, s15
 80194a8:	b212      	sxth	r2, r2
 80194aa:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 80194ac:	7b3b      	ldrb	r3, [r7, #12]
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	021b      	lsls	r3, r3, #8
 80194b2:	b29a      	uxth	r2, r3
 80194b4:	7b7b      	ldrb	r3, [r7, #13]
 80194b6:	b29b      	uxth	r3, r3
 80194b8:	4413      	add	r3, r2
 80194ba:	b29b      	uxth	r3, r3
 80194bc:	b21b      	sxth	r3, r3
 80194be:	ee07 3a90 	vmov	s15, r3
 80194c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80194cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	3302      	adds	r3, #2
 80194d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194d8:	ee17 2a90 	vmov	r2, s15
 80194dc:	b212      	sxth	r2, r2
 80194de:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80194e0:	2301      	movs	r3, #1
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	3710      	adds	r7, #16
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}

080194ea <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 80194ea:	b580      	push	{r7, lr}
 80194ec:	b084      	sub	sp, #16
 80194ee:	af00      	add	r7, sp, #0
 80194f0:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	68db      	ldr	r3, [r3, #12]
 80194f6:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	7d1b      	ldrb	r3, [r3, #20]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d002      	beq.n	8019506 <_doTask+0x1c>
 8019500:	2b03      	cmp	r3, #3
 8019502:	d004      	beq.n	801950e <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 8019504:	e011      	b.n	801952a <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 8019506:	68f8      	ldr	r0, [r7, #12]
 8019508:	f000 f866 	bl	80195d8 <pifHcSr04_Trigger>
		break;
 801950c:	e00d      	b.n	801952a <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d005      	beq.n	8019522 <_doTask+0x38>
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	685b      	ldr	r3, [r3, #4]
 801951a:	68fa      	ldr	r2, [r7, #12]
 801951c:	69d2      	ldr	r2, [r2, #28]
 801951e:	4610      	mov	r0, r2
 8019520:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	2200      	movs	r2, #0
 8019526:	751a      	strb	r2, [r3, #20]
		break;
 8019528:	bf00      	nop
	}
	return 0;
 801952a:	2300      	movs	r3, #0
}
 801952c:	4618      	mov	r0, r3
 801952e:	3710      	adds	r7, #16
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}

08019534 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b084      	sub	sp, #16
 8019538:	af02      	add	r7, sp, #8
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	460b      	mov	r3, r1
 801953e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d104      	bne.n	8019550 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8019546:	4b1f      	ldr	r3, [pc, #124]	; (80195c4 <pifHcSr04_Init+0x90>)
 8019548:	2201      	movs	r2, #1
 801954a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801954c:	2300      	movs	r3, #0
 801954e:	e035      	b.n	80195bc <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 8019550:	4b1d      	ldr	r3, [pc, #116]	; (80195c8 <pifHcSr04_Init+0x94>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d104      	bne.n	8019562 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8019558:	4b1a      	ldr	r3, [pc, #104]	; (80195c4 <pifHcSr04_Init+0x90>)
 801955a:	2209      	movs	r2, #9
 801955c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801955e:	2300      	movs	r3, #0
 8019560:	e02c      	b.n	80195bc <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8019562:	2220      	movs	r2, #32
 8019564:	2100      	movs	r1, #0
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	f009 ff3e 	bl	80233e8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 801956c:	2300      	movs	r3, #0
 801956e:	9300      	str	r3, [sp, #0]
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	4a16      	ldr	r2, [pc, #88]	; (80195cc <pifHcSr04_Init+0x98>)
 8019574:	2132      	movs	r1, #50	; 0x32
 8019576:	2002      	movs	r0, #2
 8019578:	f7fb f8cc 	bl	8014714 <pifTaskManager_Add>
 801957c:	4602      	mov	r2, r0
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	68db      	ldr	r3, [r3, #12]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d101      	bne.n	801958e <pifHcSr04_Init+0x5a>
 801958a:	2300      	movs	r3, #0
 801958c:	e016      	b.n	80195bc <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HcSr04";
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	68db      	ldr	r3, [r3, #12]
 8019592:	4a0f      	ldr	r2, [pc, #60]	; (80195d0 <pifHcSr04_Init+0x9c>)
 8019594:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019596:	887b      	ldrh	r3, [r7, #2]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d106      	bne.n	80195aa <pifHcSr04_Init+0x76>
 801959c:	4b0d      	ldr	r3, [pc, #52]	; (80195d4 <pifHcSr04_Init+0xa0>)
 801959e:	881b      	ldrh	r3, [r3, #0]
 80195a0:	1c5a      	adds	r2, r3, #1
 80195a2:	b291      	uxth	r1, r2
 80195a4:	4a0b      	ldr	r2, [pc, #44]	; (80195d4 <pifHcSr04_Init+0xa0>)
 80195a6:	8011      	strh	r1, [r2, #0]
 80195a8:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	887a      	ldrh	r2, [r7, #2]
 80195ae:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 80195b0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80195b4:	6878      	ldr	r0, [r7, #4]
 80195b6:	f000 f849 	bl	801964c <pifHcSr04_SetTemperature>

    return TRUE;
 80195ba:	2301      	movs	r3, #1
}
 80195bc:	4618      	mov	r0, r3
 80195be:	3708      	adds	r7, #8
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}
 80195c4:	20001db8 	.word	0x20001db8
 80195c8:	20001ddc 	.word	0x20001ddc
 80195cc:	080194eb 	.word	0x080194eb
 80195d0:	08027db0 	.word	0x08027db0
 80195d4:	20000128 	.word	0x20000128

080195d8 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2001      	movs	r0, #1
 80195e6:	4798      	blx	r3
	pif_Delay1us(11);
 80195e8:	200b      	movs	r0, #11
 80195ea:	f7f7 ff05 	bl	80113f8 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	2000      	movs	r0, #0
 80195f4:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	2201      	movs	r2, #1
 80195fa:	751a      	strb	r2, [r3, #20]
}
 80195fc:	bf00      	nop
 80195fe:	3708      	adds	r7, #8
 8019600:	46bd      	mov	sp, r7
 8019602:	bd80      	pop	{r7, pc}

08019604 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b082      	sub	sp, #8
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	460b      	mov	r3, r1
 801960e:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d002      	beq.n	801961c <pifHcSr04_StartTrigger+0x18>
 8019616:	887b      	ldrh	r3, [r7, #2]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d104      	bne.n	8019626 <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 801961c:	4b0a      	ldr	r3, [pc, #40]	; (8019648 <pifHcSr04_StartTrigger+0x44>)
 801961e:	2201      	movs	r2, #1
 8019620:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019622:	2300      	movs	r3, #0
 8019624:	e00b      	b.n	801963e <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	887a      	ldrh	r2, [r7, #2]
 801962c:	4611      	mov	r1, r2
 801962e:	4618      	mov	r0, r3
 8019630:	f7fa ffc8 	bl	80145c4 <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	68db      	ldr	r3, [r3, #12]
 8019638:	2200      	movs	r2, #0
 801963a:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801963c:	2301      	movs	r3, #1
}
 801963e:	4618      	mov	r0, r3
 8019640:	3708      	adds	r7, #8
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}
 8019646:	bf00      	nop
 8019648:	20001db8 	.word	0x20001db8

0801964c <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 801964c:	b480      	push	{r7}
 801964e:	b083      	sub	sp, #12
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8019658:	edd7 7a00 	vldr	s15, [r7]
 801965c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8019690 <pifHcSr04_SetTemperature+0x44>
 8019660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019664:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8019694 <pifHcSr04_SetTemperature+0x48>
 8019668:	ee77 7a87 	vadd.f32	s15, s15, s14
 801966c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8019698 <pifHcSr04_SetTemperature+0x4c>
 8019670:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8019682:	bf00      	nop
 8019684:	370c      	adds	r7, #12
 8019686:	46bd      	mov	sp, r7
 8019688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968c:	4770      	bx	lr
 801968e:	bf00      	nop
 8019690:	3f19999a 	.word	0x3f19999a
 8019694:	43a5cccd 	.word	0x43a5cccd
 8019698:	461c4000 	.word	0x461c4000

0801969c <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b082      	sub	sp, #8
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
 80196a4:	460b      	mov	r3, r1
 80196a6:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	7d1b      	ldrb	r3, [r3, #20]
 80196ac:	2b01      	cmp	r3, #1
 80196ae:	d002      	beq.n	80196b6 <pifHcSr04_sigReceiveEcho+0x1a>
 80196b0:	2b02      	cmp	r3, #2
 80196b2:	d00d      	beq.n	80196d0 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 80196b4:	e031      	b.n	801971a <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 80196b6:	78fb      	ldrb	r3, [r7, #3]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d02b      	beq.n	8019714 <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 80196bc:	4b19      	ldr	r3, [pc, #100]	; (8019724 <pifHcSr04_sigReceiveEcho+0x88>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	4798      	blx	r3
 80196c2:	4602      	mov	r2, r0
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2202      	movs	r2, #2
 80196cc:	751a      	strb	r2, [r3, #20]
		break;
 80196ce:	e021      	b.n	8019714 <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 80196d0:	78fb      	ldrb	r3, [r7, #3]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d120      	bne.n	8019718 <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 80196d6:	4b13      	ldr	r3, [pc, #76]	; (8019724 <pifHcSr04_sigReceiveEcho+0x88>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4798      	blx	r3
 80196dc:	4602      	mov	r2, r0
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	699b      	ldr	r3, [r3, #24]
 80196e2:	1ad3      	subs	r3, r2, r3
 80196e4:	ee07 3a90 	vmov	s15, r3
 80196e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80196f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80196f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80196fa:	ee17 2a90 	vmov	r2, s15
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2203      	movs	r2, #3
 8019706:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	68db      	ldr	r3, [r3, #12]
 801970c:	4618      	mov	r0, r3
 801970e:	f7fa ff7b 	bl	8014608 <pifTask_SetTrigger>
		break;
 8019712:	e001      	b.n	8019718 <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 8019714:	bf00      	nop
 8019716:	e000      	b.n	801971a <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 8019718:	bf00      	nop
	}
}
 801971a:	bf00      	nop
 801971c:	3708      	adds	r7, #8
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
 8019722:	bf00      	nop
 8019724:	20001ddc 	.word	0x20001ddc

08019728 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8019728:	b480      	push	{r7}
 801972a:	b083      	sub	sp, #12
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	460b      	mov	r3, r1
 8019732:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8019734:	78fb      	ldrb	r3, [r7, #3]
 8019736:	2b07      	cmp	r3, #7
 8019738:	d839      	bhi.n	80197ae <_changeGain+0x86>
 801973a:	a201      	add	r2, pc, #4	; (adr r2, 8019740 <_changeGain+0x18>)
 801973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019740:	08019761 	.word	0x08019761
 8019744:	0801976b 	.word	0x0801976b
 8019748:	08019775 	.word	0x08019775
 801974c:	0801977f 	.word	0x0801977f
 8019750:	08019789 	.word	0x08019789
 8019754:	08019793 	.word	0x08019793
 8019758:	0801979d 	.word	0x0801979d
 801975c:	080197a7 	.word	0x080197a7
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f240 525a 	movw	r2, #1370	; 0x55a
 8019766:	825a      	strh	r2, [r3, #18]
 8019768:	e021      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f240 4242 	movw	r2, #1090	; 0x442
 8019770:	825a      	strh	r2, [r3, #18]
 8019772:	e01c      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f44f 724d 	mov.w	r2, #820	; 0x334
 801977a:	825a      	strh	r2, [r3, #18]
 801977c:	e017      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	f44f 7225 	mov.w	r2, #660	; 0x294
 8019784:	825a      	strh	r2, [r3, #18]
 8019786:	e012      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801978e:	825a      	strh	r2, [r3, #18]
 8019790:	e00d      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8019798:	825a      	strh	r2, [r3, #18]
 801979a:	e008      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80197a2:	825a      	strh	r2, [r3, #18]
 80197a4:	e003      	b.n	80197ae <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	22e6      	movs	r2, #230	; 0xe6
 80197aa:	825a      	strh	r2, [r3, #18]
 80197ac:	bf00      	nop
	}
}
 80197ae:	bf00      	nop
 80197b0:	370c      	adds	r7, #12
 80197b2:	46bd      	mov	sp, r7
 80197b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b8:	4770      	bx	lr
 80197ba:	bf00      	nop

080197bc <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b086      	sub	sp, #24
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	60f8      	str	r0, [r7, #12]
 80197c4:	607a      	str	r2, [r7, #4]
 80197c6:	603b      	str	r3, [r7, #0]
 80197c8:	460b      	mov	r3, r1
 80197ca:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d005      	beq.n	80197de <pifHmc5883_Init+0x22>
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d002      	beq.n	80197de <pifHmc5883_Init+0x22>
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d104      	bne.n	80197e8 <pifHmc5883_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80197de:	4b3a      	ldr	r3, [pc, #232]	; (80198c8 <pifHmc5883_Init+0x10c>)
 80197e0:	2201      	movs	r2, #1
 80197e2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80197e4:	2300      	movs	r3, #0
 80197e6:	e06b      	b.n	80198c0 <pifHmc5883_Init+0x104>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 80197e8:	2218      	movs	r2, #24
 80197ea:	2100      	movs	r1, #0
 80197ec:	68f8      	ldr	r0, [r7, #12]
 80197ee:	f009 fdfb 	bl	80233e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f7f8 fdba 	bl	801236c <pifI2cPort_AddDevice>
 80197f8:	4602      	mov	r2, r0
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	691b      	ldr	r3, [r3, #16]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d101      	bne.n	801980a <pifHmc5883_Init+0x4e>
 8019806:	2300      	movs	r3, #0
 8019808:	e05a      	b.n	80198c0 <pifHmc5883_Init+0x104>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	691b      	ldr	r3, [r3, #16]
 801980e:	221e      	movs	r2, #30
 8019810:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	6918      	ldr	r0, [r3, #16]
 8019816:	f107 0214 	add.w	r2, r7, #20
 801981a:	2303      	movs	r3, #3
 801981c:	210a      	movs	r1, #10
 801981e:	f7f8 fe9d 	bl	801255c <pifI2cDevice_ReadRegBytes>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d044      	beq.n	80198b2 <pifHmc5883_Init+0xf6>
	if (data[0] != 'H') {
 8019828:	7d3b      	ldrb	r3, [r7, #20]
 801982a:	2b48      	cmp	r3, #72	; 0x48
 801982c:	d003      	beq.n	8019836 <pifHmc5883_Init+0x7a>
		pif_error = E_INVALID_ID;
 801982e:	4b26      	ldr	r3, [pc, #152]	; (80198c8 <pifHmc5883_Init+0x10c>)
 8019830:	2211      	movs	r2, #17
 8019832:	701a      	strb	r2, [r3, #0]
		goto fail;
 8019834:	e040      	b.n	80198b8 <pifHmc5883_Init+0xfc>
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	6918      	ldr	r0, [r3, #16]
 801983a:	f107 0314 	add.w	r3, r7, #20
 801983e:	f240 5203 	movw	r2, #1283	; 0x503
 8019842:	2101      	movs	r1, #1
 8019844:	f7f8 fe9f 	bl	8012586 <pifI2cDevice_ReadRegBit8>
 8019848:	4603      	mov	r3, r0
 801984a:	2b00      	cmp	r3, #0
 801984c:	d033      	beq.n	80198b6 <pifHmc5883_Init+0xfa>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 801984e:	f107 0314 	add.w	r3, r7, #20
 8019852:	b2db      	uxtb	r3, r3
 8019854:	4619      	mov	r1, r3
 8019856:	6838      	ldr	r0, [r7, #0]
 8019858:	f7ff ff66 	bl	8019728 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801985c:	897b      	ldrh	r3, [r7, #10]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d106      	bne.n	8019870 <pifHmc5883_Init+0xb4>
 8019862:	4b1a      	ldr	r3, [pc, #104]	; (80198cc <pifHmc5883_Init+0x110>)
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	1c5a      	adds	r2, r3, #1
 8019868:	b291      	uxth	r1, r2
 801986a:	4a18      	ldr	r2, [pc, #96]	; (80198cc <pifHmc5883_Init+0x110>)
 801986c:	8011      	strh	r1, [r2, #0]
 801986e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	897a      	ldrh	r2, [r7, #10]
 8019874:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801987c:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019884:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801988c:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	683a      	ldr	r2, [r7, #0]
 8019892:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	781b      	ldrb	r3, [r3, #0]
 8019898:	f043 0304 	orr.w	r3, r3, #4
 801989c:	b2da      	uxtb	r2, r3
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	4a0a      	ldr	r2, [pc, #40]	; (80198d0 <pifHmc5883_Init+0x114>)
 80198a6:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 80198ae:	2301      	movs	r3, #1
 80198b0:	e006      	b.n	80198c0 <pifHmc5883_Init+0x104>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 80198b2:	bf00      	nop
 80198b4:	e000      	b.n	80198b8 <pifHmc5883_Init+0xfc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80198b6:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 80198b8:	68f8      	ldr	r0, [r7, #12]
 80198ba:	f000 f80b 	bl	80198d4 <pifHmc5883_Clear>
	return FALSE;
 80198be:	2300      	movs	r3, #0
}
 80198c0:	4618      	mov	r0, r3
 80198c2:	3718      	adds	r7, #24
 80198c4:	46bd      	mov	sp, r7
 80198c6:	bd80      	pop	{r7, pc}
 80198c8:	20001db8 	.word	0x20001db8
 80198cc:	20000128 	.word	0x20000128
 80198d0:	08019943 	.word	0x08019943

080198d4 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b082      	sub	sp, #8
 80198d8:	af00      	add	r7, sp, #0
 80198da:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	691b      	ldr	r3, [r3, #16]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d00b      	beq.n	80198fc <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	691b      	ldr	r3, [r3, #16]
 80198e8:	685a      	ldr	r2, [r3, #4]
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	691b      	ldr	r3, [r3, #16]
 80198ee:	4619      	mov	r1, r3
 80198f0:	4610      	mov	r0, r2
 80198f2:	f7f8 fd5f 	bl	80123b4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2200      	movs	r2, #0
 80198fa:	611a      	str	r2, [r3, #16]
	}
}
 80198fc:	bf00      	nop
 80198fe:	3708      	adds	r7, #8
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}

08019904 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	460b      	mov	r3, r1
 801990e:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6918      	ldr	r0, [r3, #16]
 8019914:	78fb      	ldrb	r3, [r7, #3]
 8019916:	f240 5203 	movw	r2, #1283	; 0x503
 801991a:	2101      	movs	r1, #1
 801991c:	f7f8 ff06 	bl	801272c <pifI2cDevice_WriteRegBit8>
 8019920:	4603      	mov	r3, r0
 8019922:	2b00      	cmp	r3, #0
 8019924:	d101      	bne.n	801992a <pifHmc5883_SetGain+0x26>
 8019926:	2300      	movs	r3, #0
 8019928:	e007      	b.n	801993a <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	695b      	ldr	r3, [r3, #20]
 801992e:	78fa      	ldrb	r2, [r7, #3]
 8019930:	4611      	mov	r1, r2
 8019932:	4618      	mov	r0, r3
 8019934:	f7ff fef8 	bl	8019728 <_changeGain>
    return TRUE;
 8019938:	2301      	movs	r3, #1
}
 801993a:	4618      	mov	r0, r3
 801993c:	3708      	adds	r7, #8
 801993e:	46bd      	mov	sp, r7
 8019940:	bd80      	pop	{r7, pc}

08019942 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 8019942:	b580      	push	{r7, lr}
 8019944:	b084      	sub	sp, #16
 8019946:	af00      	add	r7, sp, #0
 8019948:	6078      	str	r0, [r7, #4]
 801994a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	691b      	ldr	r3, [r3, #16]
 8019950:	f107 0208 	add.w	r2, r7, #8
 8019954:	2109      	movs	r1, #9
 8019956:	4618      	mov	r0, r3
 8019958:	f7f8 fdc8 	bl	80124ec <pifI2cDevice_ReadRegByte>
 801995c:	4603      	mov	r3, r0
 801995e:	2b00      	cmp	r3, #0
 8019960:	d101      	bne.n	8019966 <pifHmc5883_ReadMag+0x24>
 8019962:	2300      	movs	r3, #0
 8019964:	e061      	b.n	8019a2a <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 8019966:	7a3b      	ldrb	r3, [r7, #8]
 8019968:	f003 0301 	and.w	r3, r3, #1
 801996c:	2b00      	cmp	r3, #0
 801996e:	d101      	bne.n	8019974 <pifHmc5883_ReadMag+0x32>
 8019970:	2300      	movs	r3, #0
 8019972:	e05a      	b.n	8019a2a <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6918      	ldr	r0, [r3, #16]
 8019978:	f107 0208 	add.w	r2, r7, #8
 801997c:	2306      	movs	r3, #6
 801997e:	2103      	movs	r1, #3
 8019980:	f7f8 fdec 	bl	801255c <pifI2cDevice_ReadRegBytes>
 8019984:	4603      	mov	r3, r0
 8019986:	2b00      	cmp	r3, #0
 8019988:	d101      	bne.n	801998e <pifHmc5883_ReadMag+0x4c>
 801998a:	2300      	movs	r3, #0
 801998c:	e04d      	b.n	8019a2a <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 801998e:	7a3b      	ldrb	r3, [r7, #8]
 8019990:	b29b      	uxth	r3, r3
 8019992:	021b      	lsls	r3, r3, #8
 8019994:	b29a      	uxth	r2, r3
 8019996:	7a7b      	ldrb	r3, [r7, #9]
 8019998:	b29b      	uxth	r3, r3
 801999a:	4413      	add	r3, r2
 801999c:	b29b      	uxth	r3, r3
 801999e:	b21b      	sxth	r3, r3
 80199a0:	ee07 3a90 	vmov	s15, r3
 80199a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	edd3 7a00 	vldr	s15, [r3]
 80199ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199b6:	ee17 3a90 	vmov	r3, s15
 80199ba:	b21a      	sxth	r2, r3
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 80199c0:	7abb      	ldrb	r3, [r7, #10]
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	021b      	lsls	r3, r3, #8
 80199c6:	b29a      	uxth	r2, r3
 80199c8:	7afb      	ldrb	r3, [r7, #11]
 80199ca:	b29b      	uxth	r3, r3
 80199cc:	4413      	add	r3, r2
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	b21b      	sxth	r3, r3
 80199d2:	ee07 3a90 	vmov	s15, r3
 80199d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80199e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	3304      	adds	r3, #4
 80199e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199ec:	ee17 2a90 	vmov	r2, s15
 80199f0:	b212      	sxth	r2, r2
 80199f2:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 80199f4:	7b3b      	ldrb	r3, [r7, #12]
 80199f6:	b29b      	uxth	r3, r3
 80199f8:	021b      	lsls	r3, r3, #8
 80199fa:	b29a      	uxth	r2, r3
 80199fc:	7b7b      	ldrb	r3, [r7, #13]
 80199fe:	b29b      	uxth	r3, r3
 8019a00:	4413      	add	r3, r2
 8019a02:	b29b      	uxth	r3, r3
 8019a04:	b21b      	sxth	r3, r3
 8019a06:	ee07 3a90 	vmov	s15, r3
 8019a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	3302      	adds	r3, #2
 8019a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a20:	ee17 2a90 	vmov	r2, s15
 8019a24:	b212      	sxth	r2, r2
 8019a26:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8019a28:	2301      	movs	r3, #1
}
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	3710      	adds	r7, #16
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	bd80      	pop	{r7, pc}

08019a32 <_alignBoard2>:

#include <math.h>


static void _alignBoard2(PifImuSensor* p_owner, int16_t *vec)
{
 8019a32:	b580      	push	{r7, lr}
 8019a34:	b084      	sub	sp, #16
 8019a36:	af00      	add	r7, sp, #0
 8019a38:	6078      	str	r0, [r7, #4]
 8019a3a:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 8019a3c:	683b      	ldr	r3, [r7, #0]
 8019a3e:	881b      	ldrh	r3, [r3, #0]
 8019a40:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	885b      	ldrh	r3, [r3, #2]
 8019a46:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	889b      	ldrh	r3, [r3, #4]
 8019a4c:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019a58:	ee07 3a90 	vmov	s15, r3
 8019a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8019a6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019a6e:	ee07 3a90 	vmov	s15, r3
 8019a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8019a84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019a88:	ee07 3a90 	vmov	s15, r3
 8019a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a98:	eeb0 0a67 	vmov.f32	s0, s15
 8019a9c:	f009 ffc8 	bl	8023a30 <lrintf>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	b21a      	sxth	r2, r3
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8019aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019ab2:	ee07 3a90 	vmov	s15, r3
 8019ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8019ac4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019ac8:	ee07 3a90 	vmov	s15, r3
 8019acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8019ade:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019ae2:	ee07 3a90 	vmov	s15, r3
 8019ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019af2:	eeb0 0a67 	vmov.f32	s0, s15
 8019af6:	f009 ff9b 	bl	8023a30 <lrintf>
 8019afa:	4602      	mov	r2, r0
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	3302      	adds	r3, #2
 8019b00:	b212      	sxth	r2, r2
 8019b02:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8019b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019b0e:	ee07 3a90 	vmov	s15, r3
 8019b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8019b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019b24:	ee07 3a90 	vmov	s15, r3
 8019b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8019b3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019b3e:	ee07 3a90 	vmov	s15, r3
 8019b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8019b52:	f009 ff6d 	bl	8023a30 <lrintf>
 8019b56:	4602      	mov	r2, r0
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	3304      	adds	r3, #4
 8019b5c:	b212      	sxth	r2, r2
 8019b5e:	801a      	strh	r2, [r3, #0]
}
 8019b60:	bf00      	nop
 8019b62:	3710      	adds	r7, #16
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}

08019b68 <_alignSensors2>:

static void _alignSensors2(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	60b9      	str	r1, [r7, #8]
 8019b72:	607a      	str	r2, [r7, #4]
 8019b74:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 8019b76:	78fb      	ldrb	r3, [r7, #3]
 8019b78:	3b02      	subs	r3, #2
 8019b7a:	2b06      	cmp	r3, #6
 8019b7c:	f200 80c8 	bhi.w	8019d10 <_alignSensors2+0x1a8>
 8019b80:	a201      	add	r2, pc, #4	; (adr r2, 8019b88 <_alignSensors2+0x20>)
 8019b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b86:	bf00      	nop
 8019b88:	08019ba5 	.word	0x08019ba5
 8019b8c:	08019bd1 	.word	0x08019bd1
 8019b90:	08019c07 	.word	0x08019c07
 8019b94:	08019c35 	.word	0x08019c35
 8019b98:	08019c6b 	.word	0x08019c6b
 8019b9c:	08019c99 	.word	0x08019c99
 8019ba0:	08019cd1 	.word	0x08019cd1
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8019ba4:	68bb      	ldr	r3, [r7, #8]
 8019ba6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bb4:	b29b      	uxth	r3, r3
 8019bb6:	425b      	negs	r3, r3
 8019bb8:	b29a      	uxth	r2, r3
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	3302      	adds	r3, #2
 8019bbe:	b212      	sxth	r2, r2
 8019bc0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	3304      	adds	r3, #4
 8019bc6:	68ba      	ldr	r2, [r7, #8]
 8019bc8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019bcc:	801a      	strh	r2, [r3, #0]
            break;
 8019bce:	e0b1      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	425b      	negs	r3, r3
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	b21a      	sxth	r2, r3
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	3302      	adds	r3, #2
 8019be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	425b      	negs	r3, r3
 8019bee:	b29a      	uxth	r2, r3
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	3302      	adds	r3, #2
 8019bf4:	b212      	sxth	r2, r2
 8019bf6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	3304      	adds	r3, #4
 8019bfc:	68ba      	ldr	r2, [r7, #8]
 8019bfe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019c02:	801a      	strh	r2, [r3, #0]
            break;
 8019c04:	e096      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	3302      	adds	r3, #2
 8019c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c0e:	b29b      	uxth	r3, r3
 8019c10:	425b      	negs	r3, r3
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	b21a      	sxth	r2, r3
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	3302      	adds	r3, #2
 8019c1e:	68ba      	ldr	r2, [r7, #8]
 8019c20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c24:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	3304      	adds	r3, #4
 8019c2a:	68ba      	ldr	r2, [r7, #8]
 8019c2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019c30:	801a      	strh	r2, [r3, #0]
            break;
 8019c32:	e07f      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c3a:	b29b      	uxth	r3, r3
 8019c3c:	425b      	negs	r3, r3
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	b21a      	sxth	r2, r3
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	3302      	adds	r3, #2
 8019c4a:	68ba      	ldr	r2, [r7, #8]
 8019c4c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019c50:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	3304      	adds	r3, #4
 8019c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	425b      	negs	r3, r3
 8019c5e:	b29a      	uxth	r2, r3
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	3304      	adds	r3, #4
 8019c64:	b212      	sxth	r2, r2
 8019c66:	801a      	strh	r2, [r3, #0]
            break;
 8019c68:	e064      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	3302      	adds	r3, #2
 8019c78:	68ba      	ldr	r2, [r7, #8]
 8019c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c7e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	3304      	adds	r3, #4
 8019c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	425b      	negs	r3, r3
 8019c8c:	b29a      	uxth	r2, r3
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	3304      	adds	r3, #4
 8019c92:	b212      	sxth	r2, r2
 8019c94:	801a      	strh	r2, [r3, #0]
            break;
 8019c96:	e04d      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019ca2:	68bb      	ldr	r3, [r7, #8]
 8019ca4:	3302      	adds	r3, #2
 8019ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	425b      	negs	r3, r3
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	3302      	adds	r3, #2
 8019cb4:	b212      	sxth	r2, r2
 8019cb6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	3304      	adds	r3, #4
 8019cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cc0:	b29b      	uxth	r3, r3
 8019cc2:	425b      	negs	r3, r3
 8019cc4:	b29a      	uxth	r2, r3
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	3304      	adds	r3, #4
 8019cca:	b212      	sxth	r2, r2
 8019ccc:	801a      	strh	r2, [r3, #0]
            break;
 8019cce:	e031      	b.n	8019d34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	3302      	adds	r3, #2
 8019cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	425b      	negs	r3, r3
 8019cdc:	b29b      	uxth	r3, r3
 8019cde:	b21a      	sxth	r2, r3
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	425b      	negs	r3, r3
 8019cee:	b29a      	uxth	r2, r3
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	3302      	adds	r3, #2
 8019cf4:	b212      	sxth	r2, r2
 8019cf6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	3304      	adds	r3, #4
 8019cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	425b      	negs	r3, r3
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	3304      	adds	r3, #4
 8019d0a:	b212      	sxth	r2, r2
 8019d0c:	801a      	strh	r2, [r3, #0]
            break;
 8019d0e:	e011      	b.n	8019d34 <_alignSensors2+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	3302      	adds	r3, #2
 8019d1e:	68ba      	ldr	r2, [r7, #8]
 8019d20:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019d24:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	3304      	adds	r3, #4
 8019d2a:	68ba      	ldr	r2, [r7, #8]
 8019d2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019d30:	801a      	strh	r2, [r3, #0]
            break;
 8019d32:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d003      	beq.n	8019d46 <_alignSensors2+0x1de>
        _alignBoard2(p_owner, dest);
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	68f8      	ldr	r0, [r7, #12]
 8019d42:	f7ff fe76 	bl	8019a32 <_alignBoard2>
}
 8019d46:	bf00      	nop
 8019d48:	3710      	adds	r7, #16
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	bd80      	pop	{r7, pc}
 8019d4e:	bf00      	nop

08019d50 <pifImuSensor_Init>:
    if (p_owner->__board_alignment)
        _alignBoard4(p_owner, dest);
}

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 8019d58:	2278      	movs	r2, #120	; 0x78
 8019d5a:	2100      	movs	r1, #0
 8019d5c:	6878      	ldr	r0, [r7, #4]
 8019d5e:	f009 fb43 	bl	80233e8 <memset>
}
 8019d62:	bf00      	nop
 8019d64:	3708      	adds	r7, #8
 8019d66:	46bd      	mov	sp, r7
 8019d68:	bd80      	pop	{r7, pc}
	...

08019d6c <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b092      	sub	sp, #72	; 0x48
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	60f8      	str	r0, [r7, #12]
 8019d74:	4608      	mov	r0, r1
 8019d76:	4611      	mov	r1, r2
 8019d78:	461a      	mov	r2, r3
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	817b      	strh	r3, [r7, #10]
 8019d7e:	460b      	mov	r3, r1
 8019d80:	813b      	strh	r3, [r7, #8]
 8019d82:	4613      	mov	r3, r2
 8019d84:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019d86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d108      	bne.n	8019da0 <pifImuSensor_InitBoardAlignment+0x34>
 8019d8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d104      	bne.n	8019da0 <pifImuSensor_InitBoardAlignment+0x34>
 8019d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	f000 80da 	beq.w	8019f54 <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	2201      	movs	r2, #1
 8019da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 8019da8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019dac:	ee07 3a90 	vmov	s15, r3
 8019db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019db4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019f5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019dbc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8019f60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019dc4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 8019dc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019dcc:	ee07 3a90 	vmov	s15, r3
 8019dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dd4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8019f5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019ddc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8019f60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019de4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 8019de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019dec:	ee07 3a90 	vmov	s15, r3
 8019df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019df4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019f5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019dfc:	eddf 6a58 	vldr	s13, [pc, #352]	; 8019f60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019e04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 8019e08:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019e0c:	f009 fdcc 	bl	80239a8 <cosf>
 8019e10:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 8019e14:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019e18:	f009 fe4a 	bl	8023ab0 <sinf>
 8019e1c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 8019e20:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019e24:	f009 fdc0 	bl	80239a8 <cosf>
 8019e28:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8019e2c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019e30:	f009 fe3e 	bl	8023ab0 <sinf>
 8019e34:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 8019e38:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019e3c:	f009 fdb4 	bl	80239a8 <cosf>
 8019e40:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 8019e44:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019e48:	f009 fe32 	bl	8023ab0 <sinf>
 8019e4c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8019e50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019e54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e5c:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8019e60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019e64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e6c:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8019e70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019e74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e7c:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8019e80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019e84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e8c:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8019e90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019e94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e9c:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	69fa      	ldr	r2, [r7, #28]
 8019ea4:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 8019ea6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019eaa:	eeb1 7a67 	vneg.f32	s14, s15
 8019eae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ec0:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8019ec2:	ed97 7a05 	vldr	s14, [r7, #20]
 8019ec6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8019ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8019ee0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ee8:	ed97 7a08 	vldr	s14, [r7, #32]
 8019eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 8019ef6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019efa:	eeb1 7a67 	vneg.f32	s14, s15
 8019efe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8019f0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019f10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8019f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8019f26:	ed97 7a06 	vldr	s14, [r7, #24]
 8019f2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8019f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8019f40:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019f44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8019f52:	e000      	b.n	8019f56 <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019f54:	bf00      	nop
}
 8019f56:	3748      	adds	r7, #72	; 0x48
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	40490fdb 	.word	0x40490fdb
 8019f60:	43340000 	.word	0x43340000

08019f64 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019f64:	b480      	push	{r7}
 8019f66:	b083      	sub	sp, #12
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019f70:	78fb      	ldrb	r3, [r7, #3]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d002      	beq.n	8019f7c <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	78fa      	ldrb	r2, [r7, #3]
 8019f7a:	751a      	strb	r2, [r3, #20]
}
 8019f7c:	bf00      	nop
 8019f7e:	370c      	adds	r7, #12
 8019f80:	46bd      	mov	sp, r7
 8019f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f86:	4770      	bx	lr

08019f88 <pifImuSensor_ReadGyro2>:

BOOL pifImuSensor_ReadGyro2(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b084      	sub	sp, #16
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	6039      	str	r1, [r7, #0]
	int16_t gyro[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	f003 0301 	and.w	r3, r3, #1
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d016      	beq.n	8019fcc <pifImuSensor_ReadGyro2+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	699b      	ldr	r3, [r3, #24]
 8019fa2:	687a      	ldr	r2, [r7, #4]
 8019fa4:	69d2      	ldr	r2, [r2, #28]
 8019fa6:	f107 0108 	add.w	r1, r7, #8
 8019faa:	4610      	mov	r0, r2
 8019fac:	4798      	blx	r3
 8019fae:	4603      	mov	r3, r0
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d101      	bne.n	8019fb8 <pifImuSensor_ReadGyro2+0x30>
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e00a      	b.n	8019fce <pifImuSensor_ReadGyro2+0x46>

		_alignSensors2(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	7d1b      	ldrb	r3, [r3, #20]
 8019fbc:	f107 0108 	add.w	r1, r7, #8
 8019fc0:	683a      	ldr	r2, [r7, #0]
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	f7ff fdd0 	bl	8019b68 <_alignSensors2>
		return TRUE;
 8019fc8:	2301      	movs	r3, #1
 8019fca:	e000      	b.n	8019fce <pifImuSensor_ReadGyro2+0x46>
	}
	return FALSE;
 8019fcc:	2300      	movs	r3, #0
}
 8019fce:	4618      	mov	r0, r3
 8019fd0:	3710      	adds	r7, #16
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bd80      	pop	{r7, pc}

08019fd6 <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019fd6:	b480      	push	{r7}
 8019fd8:	b083      	sub	sp, #12
 8019fda:	af00      	add	r7, sp, #0
 8019fdc:	6078      	str	r0, [r7, #4]
 8019fde:	460b      	mov	r3, r1
 8019fe0:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019fe2:	78fb      	ldrb	r3, [r7, #3]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d003      	beq.n	8019ff0 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	78fa      	ldrb	r2, [r7, #3]
 8019fec:	f883 2020 	strb.w	r2, [r3, #32]
}
 8019ff0:	bf00      	nop
 8019ff2:	370c      	adds	r7, #12
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ffa:	4770      	bx	lr

08019ffc <pifImuSensor_ReadAccel2>:

BOOL pifImuSensor_ReadAccel2(PifImuSensor* p_owner, int16_t* p_accel)
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
 801a004:	6039      	str	r1, [r7, #0]
	int16_t accel[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	781b      	ldrb	r3, [r3, #0]
 801a00a:	f003 0302 	and.w	r3, r3, #2
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d017      	beq.n	801a042 <pifImuSensor_ReadAccel2+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801a01a:	f107 0108 	add.w	r1, r7, #8
 801a01e:	4610      	mov	r0, r2
 801a020:	4798      	blx	r3
 801a022:	4603      	mov	r3, r0
 801a024:	2b00      	cmp	r3, #0
 801a026:	d101      	bne.n	801a02c <pifImuSensor_ReadAccel2+0x30>
 801a028:	2300      	movs	r3, #0
 801a02a:	e00b      	b.n	801a044 <pifImuSensor_ReadAccel2+0x48>

		_alignSensors2(p_owner, accel, p_accel, p_owner->__accel_info.align);
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a032:	f107 0108 	add.w	r1, r7, #8
 801a036:	683a      	ldr	r2, [r7, #0]
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f7ff fd95 	bl	8019b68 <_alignSensors2>
		return TRUE;
 801a03e:	2301      	movs	r3, #1
 801a040:	e000      	b.n	801a044 <pifImuSensor_ReadAccel2+0x48>
	}
	return FALSE;
 801a042:	2300      	movs	r3, #0
}
 801a044:	4618      	mov	r0, r3
 801a046:	3710      	adds	r7, #16
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}

0801a04c <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801a04c:	b480      	push	{r7}
 801a04e:	b083      	sub	sp, #12
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
 801a054:	460b      	mov	r3, r1
 801a056:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801a058:	78fb      	ldrb	r3, [r7, #3]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d003      	beq.n	801a066 <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	78fa      	ldrb	r2, [r7, #3]
 801a062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 801a066:	bf00      	nop
 801a068:	370c      	adds	r7, #12
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr

0801a072 <pifImuSensor_ReadMag2>:

BOOL pifImuSensor_ReadMag2(PifImuSensor* p_owner, int16_t* p_mag)
{
 801a072:	b580      	push	{r7, lr}
 801a074:	b084      	sub	sp, #16
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
 801a07a:	6039      	str	r1, [r7, #0]
	int16_t mag[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	f003 0304 	and.w	r3, r3, #4
 801a084:	2b00      	cmp	r3, #0
 801a086:	d017      	beq.n	801a0b8 <pifImuSensor_ReadMag2+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a08c:	687a      	ldr	r2, [r7, #4]
 801a08e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801a090:	f107 0108 	add.w	r1, r7, #8
 801a094:	4610      	mov	r0, r2
 801a096:	4798      	blx	r3
 801a098:	4603      	mov	r3, r0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d101      	bne.n	801a0a2 <pifImuSensor_ReadMag2+0x30>
 801a09e:	2300      	movs	r3, #0
 801a0a0:	e00b      	b.n	801a0ba <pifImuSensor_ReadMag2+0x48>

		_alignSensors2(p_owner, mag, p_mag, p_owner->__mag_info.align);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a0a8:	f107 0108 	add.w	r1, r7, #8
 801a0ac:	683a      	ldr	r2, [r7, #0]
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f7ff fd5a 	bl	8019b68 <_alignSensors2>
		return TRUE;
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	e000      	b.n	801a0ba <pifImuSensor_ReadMag2+0x48>
	}
	return FALSE;
 801a0b8:	2300      	movs	r3, #0
}
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	3710      	adds	r7, #16
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bd80      	pop	{r7, pc}
 801a0c2:	0000      	movs	r0, r0
 801a0c4:	0000      	movs	r0, r0
	...

0801a0c8 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b082      	sub	sp, #8
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d101      	bne.n	801a0de <_changeFsSel+0x16>
 801a0da:	2300      	movs	r3, #0
 801a0dc:	e013      	b.n	801a106 <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 801a0de:	78fb      	ldrb	r3, [r7, #3]
 801a0e0:	2201      	movs	r2, #1
 801a0e2:	fa02 f303 	lsl.w	r3, r2, r3
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f7e6 f9d0 	bl	800048c <__aeabi_i2d>
 801a0ec:	4602      	mov	r2, r0
 801a0ee:	460b      	mov	r3, r1
 801a0f0:	a107      	add	r1, pc, #28	; (adr r1, 801a110 <_changeFsSel+0x48>)
 801a0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0f6:	f7e6 fb5d 	bl	80007b4 <__aeabi_ddiv>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	460b      	mov	r3, r1
 801a0fe:	6879      	ldr	r1, [r7, #4]
 801a100:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 801a104:	2301      	movs	r3, #1
}
 801a106:	4618      	mov	r0, r3
 801a108:	3708      	adds	r7, #8
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}
 801a10e:	bf00      	nop
 801a110:	00000000 	.word	0x00000000
 801a114:	40606000 	.word	0x40606000

0801a118 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 801a118:	b480      	push	{r7}
 801a11a:	b083      	sub	sp, #12
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
 801a120:	460b      	mov	r3, r1
 801a122:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d101      	bne.n	801a12e <_changeAfsSel+0x16>
 801a12a:	2300      	movs	r3, #0
 801a12c:	e008      	b.n	801a140 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 801a12e:	78fb      	ldrb	r3, [r7, #3]
 801a130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801a134:	fa42 f303 	asr.w	r3, r2, r3
 801a138:	b29a      	uxth	r2, r3
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	821a      	strh	r2, [r3, #16]
	return TRUE;
 801a13e:	2301      	movs	r3, #1
}
 801a140:	4618      	mov	r0, r3
 801a142:	370c      	adds	r7, #12
 801a144:	46bd      	mov	sp, r7
 801a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14a:	4770      	bx	lr

0801a14c <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b086      	sub	sp, #24
 801a150:	af00      	add	r7, sp, #0
 801a152:	60f8      	str	r0, [r7, #12]
 801a154:	607a      	str	r2, [r7, #4]
 801a156:	461a      	mov	r2, r3
 801a158:	460b      	mov	r3, r1
 801a15a:	817b      	strh	r3, [r7, #10]
 801a15c:	4613      	mov	r3, r2
 801a15e:	727b      	strb	r3, [r7, #9]
	const char ident[] = "MPU60X0 Ident: ";
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d005      	beq.n	801a172 <pifMpu60x0_Init+0x26>
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d002      	beq.n	801a172 <pifMpu60x0_Init+0x26>
 801a16c:	6a3b      	ldr	r3, [r7, #32]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d104      	bne.n	801a17c <pifMpu60x0_Init+0x30>
		pif_error = E_INVALID_PARAM;
 801a172:	4b63      	ldr	r3, [pc, #396]	; (801a300 <pifMpu60x0_Init+0x1b4>)
 801a174:	2201      	movs	r2, #1
 801a176:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a178:	2300      	movs	r3, #0
 801a17a:	e0bd      	b.n	801a2f8 <pifMpu60x0_Init+0x1ac>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 801a17c:	2210      	movs	r2, #16
 801a17e:	2100      	movs	r1, #0
 801a180:	68f8      	ldr	r0, [r7, #12]
 801a182:	f009 f931 	bl	80233e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801a186:	6878      	ldr	r0, [r7, #4]
 801a188:	f7f8 f8f0 	bl	801236c <pifI2cPort_AddDevice>
 801a18c:	4602      	mov	r2, r0
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	689b      	ldr	r3, [r3, #8]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d101      	bne.n	801a19e <pifMpu60x0_Init+0x52>
 801a19a:	2300      	movs	r3, #0
 801a19c:	e0ac      	b.n	801a2f8 <pifMpu60x0_Init+0x1ac>

    p_owner->_p_i2c->addr = addr;
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	689b      	ldr	r3, [r3, #8]
 801a1a2:	7a7a      	ldrb	r2, [r7, #9]
 801a1a4:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	689b      	ldr	r3, [r3, #8]
 801a1aa:	f107 0217 	add.w	r2, r7, #23
 801a1ae:	2175      	movs	r1, #117	; 0x75
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7f8 f99b 	bl	80124ec <pifI2cDevice_ReadRegByte>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	f000 808e 	beq.w	801a2da <pifMpu60x0_Init+0x18e>
	if (data != addr) {
 801a1be:	7dfb      	ldrb	r3, [r7, #23]
 801a1c0:	7a7a      	ldrb	r2, [r7, #9]
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	d003      	beq.n	801a1ce <pifMpu60x0_Init+0x82>
		pif_error = E_INVALID_ID;
 801a1c6:	4b4e      	ldr	r3, [pc, #312]	; (801a300 <pifMpu60x0_Init+0x1b4>)
 801a1c8:	2211      	movs	r2, #17
 801a1ca:	701a      	strb	r2, [r3, #0]
		goto fail;
 801a1cc:	e090      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
	}
#endif

   	pwr_mgmt_1.byte = 0;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 801a1d2:	7d3b      	ldrb	r3, [r7, #20]
 801a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1d8:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	689b      	ldr	r3, [r3, #8]
 801a1de:	7d3a      	ldrb	r2, [r7, #20]
 801a1e0:	216b      	movs	r1, #107	; 0x6b
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7f8 fa8c 	bl	8012700 <pifI2cDevice_WriteRegByte>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d077      	beq.n	801a2de <pifMpu60x0_Init+0x192>
	pifTaskManager_YieldMs(100);
 801a1ee:	2064      	movs	r0, #100	; 0x64
 801a1f0:	f7fa fdb2 	bl	8014d58 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	6898      	ldr	r0, [r3, #8]
 801a1f8:	f107 0317 	add.w	r3, r7, #23
 801a1fc:	f240 3202 	movw	r2, #770	; 0x302
 801a200:	211b      	movs	r1, #27
 801a202:	f7f8 f9c0 	bl	8012586 <pifI2cDevice_ReadRegBit8>
 801a206:	4603      	mov	r3, r0
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d06a      	beq.n	801a2e2 <pifMpu60x0_Init+0x196>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a20c:	7dfb      	ldrb	r3, [r7, #23]
 801a20e:	4619      	mov	r1, r3
 801a210:	6a38      	ldr	r0, [r7, #32]
 801a212:	f7ff ff59 	bl	801a0c8 <_changeFsSel>
 801a216:	4603      	mov	r3, r0
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d064      	beq.n	801a2e6 <pifMpu60x0_Init+0x19a>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	6898      	ldr	r0, [r3, #8]
 801a220:	f107 0317 	add.w	r3, r7, #23
 801a224:	f240 3202 	movw	r2, #770	; 0x302
 801a228:	211c      	movs	r1, #28
 801a22a:	f7f8 f9ac 	bl	8012586 <pifI2cDevice_ReadRegBit8>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b00      	cmp	r3, #0
 801a232:	d05a      	beq.n	801a2ea <pifMpu60x0_Init+0x19e>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a234:	7dfb      	ldrb	r3, [r7, #23]
 801a236:	4619      	mov	r1, r3
 801a238:	6a38      	ldr	r0, [r7, #32]
 801a23a:	f7ff ff6d 	bl	801a118 <_changeAfsSel>
 801a23e:	4603      	mov	r3, r0
 801a240:	2b00      	cmp	r3, #0
 801a242:	d054      	beq.n	801a2ee <pifMpu60x0_Init+0x1a2>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a244:	897b      	ldrh	r3, [r7, #10]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d106      	bne.n	801a258 <pifMpu60x0_Init+0x10c>
 801a24a:	4b2e      	ldr	r3, [pc, #184]	; (801a304 <pifMpu60x0_Init+0x1b8>)
 801a24c:	881b      	ldrh	r3, [r3, #0]
 801a24e:	1c5a      	adds	r2, r3, #1
 801a250:	b291      	uxth	r1, r2
 801a252:	4a2c      	ldr	r2, [pc, #176]	; (801a304 <pifMpu60x0_Init+0x1b8>)
 801a254:	8011      	strh	r1, [r2, #0]
 801a256:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	897a      	ldrh	r2, [r7, #10]
 801a25c:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	2201      	movs	r2, #1
 801a262:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	6a3a      	ldr	r2, [r7, #32]
 801a268:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 801a26a:	6a3b      	ldr	r3, [r7, #32]
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	f043 0303 	orr.w	r3, r3, #3
 801a272:	b2da      	uxtb	r2, r3
 801a274:	6a3b      	ldr	r3, [r7, #32]
 801a276:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 801a278:	6a3b      	ldr	r3, [r7, #32]
 801a27a:	2201      	movs	r2, #1
 801a27c:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 801a27e:	6a3b      	ldr	r3, [r7, #32]
 801a280:	4a21      	ldr	r2, [pc, #132]	; (801a308 <pifMpu60x0_Init+0x1bc>)
 801a282:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 801a284:	6a3b      	ldr	r3, [r7, #32]
 801a286:	68fa      	ldr	r2, [r7, #12]
 801a288:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 801a28a:	6a3b      	ldr	r3, [r7, #32]
 801a28c:	2201      	movs	r2, #1
 801a28e:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 801a292:	6a3b      	ldr	r3, [r7, #32]
 801a294:	4a1d      	ldr	r2, [pc, #116]	; (801a30c <pifMpu60x0_Init+0x1c0>)
 801a296:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 801a298:	6a3b      	ldr	r3, [r7, #32]
 801a29a:	68fa      	ldr	r2, [r7, #12]
 801a29c:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801a29e:	6a3b      	ldr	r3, [r7, #32]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 801a2a4:	6a3b      	ldr	r3, [r7, #32]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 801a2aa:	6a3b      	ldr	r3, [r7, #32]
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 801a2b0:	6a3b      	ldr	r3, [r7, #32]
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 801a2b8:	6a3b      	ldr	r3, [r7, #32]
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 801a2be:	6a3b      	ldr	r3, [r7, #32]
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 801a2c6:	6a3b      	ldr	r3, [r7, #32]
 801a2c8:	2200      	movs	r2, #0
 801a2ca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 801a2ce:	6a3b      	ldr	r3, [r7, #32]
 801a2d0:	f04f 0200 	mov.w	r2, #0
 801a2d4:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	e00e      	b.n	801a2f8 <pifMpu60x0_Init+0x1ac>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801a2da:	bf00      	nop
 801a2dc:	e008      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801a2de:	bf00      	nop
 801a2e0:	e006      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801a2e2:	bf00      	nop
 801a2e4:	e004      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a2e6:	bf00      	nop
 801a2e8:	e002      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a2ea:	bf00      	nop
 801a2ec:	e000      	b.n	801a2f0 <pifMpu60x0_Init+0x1a4>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a2ee:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 801a2f0:	68f8      	ldr	r0, [r7, #12]
 801a2f2:	f000 f80d 	bl	801a310 <pifMpu60x0_Clear>
	return FALSE;
 801a2f6:	2300      	movs	r3, #0
}
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3718      	adds	r7, #24
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}
 801a300:	20001db8 	.word	0x20001db8
 801a304:	20000128 	.word	0x20000128
 801a308:	0801a3c1 	.word	0x0801a3c1
 801a30c:	0801a487 	.word	0x0801a487

0801a310 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b082      	sub	sp, #8
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	689b      	ldr	r3, [r3, #8]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d00b      	beq.n	801a338 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	689b      	ldr	r3, [r3, #8]
 801a324:	685a      	ldr	r2, [r3, #4]
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	689b      	ldr	r3, [r3, #8]
 801a32a:	4619      	mov	r1, r3
 801a32c:	4610      	mov	r0, r2
 801a32e:	f7f8 f841 	bl	80123b4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2200      	movs	r2, #0
 801a336:	609a      	str	r2, [r3, #8]
    }
}
 801a338:	bf00      	nop
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b082      	sub	sp, #8
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]
 801a348:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	689b      	ldr	r3, [r3, #8]
 801a34e:	783a      	ldrb	r2, [r7, #0]
 801a350:	211b      	movs	r1, #27
 801a352:	4618      	mov	r0, r3
 801a354:	f7f8 f9d4 	bl	8012700 <pifI2cDevice_WriteRegByte>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d101      	bne.n	801a362 <pifMpu60x0_SetGyroConfig+0x22>
 801a35e:	2300      	movs	r3, #0
 801a360:	e00a      	b.n	801a378 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	68da      	ldr	r2, [r3, #12]
 801a366:	783b      	ldrb	r3, [r7, #0]
 801a368:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a36c:	b2db      	uxtb	r3, r3
 801a36e:	4619      	mov	r1, r3
 801a370:	4610      	mov	r0, r2
 801a372:	f7ff fea9 	bl	801a0c8 <_changeFsSel>
	return TRUE;
 801a376:	2301      	movs	r3, #1
}
 801a378:	4618      	mov	r0, r3
 801a37a:	3708      	adds	r7, #8
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}

0801a380 <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	689b      	ldr	r3, [r3, #8]
 801a38e:	783a      	ldrb	r2, [r7, #0]
 801a390:	211c      	movs	r1, #28
 801a392:	4618      	mov	r0, r3
 801a394:	f7f8 f9b4 	bl	8012700 <pifI2cDevice_WriteRegByte>
 801a398:	4603      	mov	r3, r0
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d101      	bne.n	801a3a2 <pifMpu60x0_SetAccelConfig+0x22>
 801a39e:	2300      	movs	r3, #0
 801a3a0:	e00a      	b.n	801a3b8 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	68da      	ldr	r2, [r3, #12]
 801a3a6:	783b      	ldrb	r3, [r7, #0]
 801a3a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	4619      	mov	r1, r3
 801a3b0:	4610      	mov	r0, r2
 801a3b2:	f7ff feb1 	bl	801a118 <_changeAfsSel>
	return TRUE;
 801a3b6:	2301      	movs	r3, #1
}
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	3708      	adds	r7, #8
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	bd80      	pop	{r7, pc}

0801a3c0 <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
 801a3c8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	6898      	ldr	r0, [r3, #8]
 801a3ce:	f107 0208 	add.w	r2, r7, #8
 801a3d2:	2306      	movs	r3, #6
 801a3d4:	2143      	movs	r1, #67	; 0x43
 801a3d6:	f7f8 f8c1 	bl	801255c <pifI2cDevice_ReadRegBytes>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d101      	bne.n	801a3e4 <pifMpu60x0_ReadGyro+0x24>
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	e04c      	b.n	801a47e <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 801a3e4:	7a3b      	ldrb	r3, [r7, #8]
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	021b      	lsls	r3, r3, #8
 801a3ea:	b29a      	uxth	r2, r3
 801a3ec:	7a7b      	ldrb	r3, [r7, #9]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	4413      	add	r3, r2
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	b21a      	sxth	r2, r3
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 801a3fa:	7abb      	ldrb	r3, [r7, #10]
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	021b      	lsls	r3, r3, #8
 801a400:	b29a      	uxth	r2, r3
 801a402:	7afb      	ldrb	r3, [r7, #11]
 801a404:	b29b      	uxth	r3, r3
 801a406:	4413      	add	r3, r2
 801a408:	b29a      	uxth	r2, r3
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	3302      	adds	r3, #2
 801a40e:	b212      	sxth	r2, r2
 801a410:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801a412:	7b3b      	ldrb	r3, [r7, #12]
 801a414:	b29b      	uxth	r3, r3
 801a416:	021b      	lsls	r3, r3, #8
 801a418:	b29a      	uxth	r2, r3
 801a41a:	7b7b      	ldrb	r3, [r7, #13]
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	4413      	add	r3, r2
 801a420:	b29a      	uxth	r2, r3
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	3304      	adds	r3, #4
 801a426:	b212      	sxth	r2, r2
 801a428:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	781b      	ldrb	r3, [r3, #0]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d024      	beq.n	801a47c <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801a432:	683b      	ldr	r3, [r7, #0]
 801a434:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a438:	461a      	mov	r2, r3
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	781b      	ldrb	r3, [r3, #0]
 801a43e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a442:	b21a      	sxth	r2, r3
 801a444:	683b      	ldr	r3, [r7, #0]
 801a446:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	3302      	adds	r3, #2
 801a44c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a450:	461a      	mov	r2, r3
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	781b      	ldrb	r3, [r3, #0]
 801a456:	fb92 f2f3 	sdiv	r2, r2, r3
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	3302      	adds	r3, #2
 801a45e:	b212      	sxth	r2, r2
 801a460:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	3304      	adds	r3, #4
 801a466:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a46a:	461a      	mov	r2, r3
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	fb92 f2f3 	sdiv	r2, r2, r3
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	3304      	adds	r3, #4
 801a478:	b212      	sxth	r2, r2
 801a47a:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a47c:	2301      	movs	r3, #1
}
 801a47e:	4618      	mov	r0, r3
 801a480:	3710      	adds	r7, #16
 801a482:	46bd      	mov	sp, r7
 801a484:	bd80      	pop	{r7, pc}

0801a486 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 801a486:	b580      	push	{r7, lr}
 801a488:	b084      	sub	sp, #16
 801a48a:	af00      	add	r7, sp, #0
 801a48c:	6078      	str	r0, [r7, #4]
 801a48e:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	6898      	ldr	r0, [r3, #8]
 801a494:	f107 0208 	add.w	r2, r7, #8
 801a498:	2306      	movs	r3, #6
 801a49a:	213b      	movs	r1, #59	; 0x3b
 801a49c:	f7f8 f85e 	bl	801255c <pifI2cDevice_ReadRegBytes>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d101      	bne.n	801a4aa <pifMpu60x0_ReadAccel+0x24>
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	e04c      	b.n	801a544 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 801a4aa:	7a3b      	ldrb	r3, [r7, #8]
 801a4ac:	b29b      	uxth	r3, r3
 801a4ae:	021b      	lsls	r3, r3, #8
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	7a7b      	ldrb	r3, [r7, #9]
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	4413      	add	r3, r2
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	b21a      	sxth	r2, r3
 801a4bc:	683b      	ldr	r3, [r7, #0]
 801a4be:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 801a4c0:	7abb      	ldrb	r3, [r7, #10]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	021b      	lsls	r3, r3, #8
 801a4c6:	b29a      	uxth	r2, r3
 801a4c8:	7afb      	ldrb	r3, [r7, #11]
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	4413      	add	r3, r2
 801a4ce:	b29a      	uxth	r2, r3
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	3302      	adds	r3, #2
 801a4d4:	b212      	sxth	r2, r2
 801a4d6:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 801a4d8:	7b3b      	ldrb	r3, [r7, #12]
 801a4da:	b29b      	uxth	r3, r3
 801a4dc:	021b      	lsls	r3, r3, #8
 801a4de:	b29a      	uxth	r2, r3
 801a4e0:	7b7b      	ldrb	r3, [r7, #13]
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	4413      	add	r3, r2
 801a4e6:	b29a      	uxth	r2, r3
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	3304      	adds	r3, #4
 801a4ec:	b212      	sxth	r2, r2
 801a4ee:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	785b      	ldrb	r3, [r3, #1]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d024      	beq.n	801a542 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 801a4f8:	683b      	ldr	r3, [r7, #0]
 801a4fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4fe:	461a      	mov	r2, r3
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	785b      	ldrb	r3, [r3, #1]
 801a504:	fb92 f3f3 	sdiv	r3, r2, r3
 801a508:	b21a      	sxth	r2, r3
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	3302      	adds	r3, #2
 801a512:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a516:	461a      	mov	r2, r3
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	785b      	ldrb	r3, [r3, #1]
 801a51c:	fb92 f2f3 	sdiv	r2, r2, r3
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	3302      	adds	r3, #2
 801a524:	b212      	sxth	r2, r2
 801a526:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 801a528:	683b      	ldr	r3, [r7, #0]
 801a52a:	3304      	adds	r3, #4
 801a52c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a530:	461a      	mov	r2, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	785b      	ldrb	r3, [r3, #1]
 801a536:	fb92 f2f3 	sdiv	r2, r2, r3
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	3304      	adds	r3, #4
 801a53e:	b212      	sxth	r2, r2
 801a540:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a542:	2301      	movs	r3, #1
}
 801a544:	4618      	mov	r0, r3
 801a546:	3710      	adds	r7, #16
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}

0801a54c <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 801a54c:	b480      	push	{r7}
 801a54e:	b087      	sub	sp, #28
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 801a554:	2300      	movs	r3, #0
 801a556:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 801a558:	2301      	movs	r3, #1
 801a55a:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	8adb      	ldrh	r3, [r3, #22]
 801a560:	b2db      	uxtb	r3, r3
 801a562:	f003 030f 	and.w	r3, r3, #15
 801a566:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	8adb      	ldrh	r3, [r3, #22]
 801a56c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a570:	b29a      	uxth	r2, r3
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 801a576:	2300      	movs	r3, #0
 801a578:	617b      	str	r3, [r7, #20]
 801a57a:	e00b      	b.n	801a594 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	697a      	ldr	r2, [r7, #20]
 801a580:	3204      	adds	r2, #4
 801a582:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d001      	beq.n	801a58e <_checkPromCrc+0x42>
            zero = 0;
 801a58a:	2300      	movs	r3, #0
 801a58c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	3301      	adds	r3, #1
 801a592:	617b      	str	r3, [r7, #20]
 801a594:	697b      	ldr	r3, [r7, #20]
 801a596:	2b07      	cmp	r3, #7
 801a598:	ddf0      	ble.n	801a57c <_checkPromCrc+0x30>
    }
    if (zero)
 801a59a:	7afb      	ldrb	r3, [r7, #11]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d001      	beq.n	801a5a4 <_checkPromCrc+0x58>
        return FALSE;
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	e04b      	b.n	801a63c <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	617b      	str	r3, [r7, #20]
 801a5a8:	e033      	b.n	801a612 <_checkPromCrc+0xc6>
        if (i & 1)
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	f003 0301 	and.w	r3, r3, #1
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d00a      	beq.n	801a5ca <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	105a      	asrs	r2, r3, #1
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	3204      	adds	r2, #4
 801a5bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	68fa      	ldr	r2, [r7, #12]
 801a5c4:	4053      	eors	r3, r2
 801a5c6:	60fb      	str	r3, [r7, #12]
 801a5c8:	e00b      	b.n	801a5e2 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 801a5ca:	697b      	ldr	r3, [r7, #20]
 801a5cc:	105a      	asrs	r2, r3, #1
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	3204      	adds	r2, #4
 801a5d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a5d6:	0a1b      	lsrs	r3, r3, #8
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	461a      	mov	r2, r3
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	4053      	eors	r3, r2
 801a5e0:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a5e2:	2308      	movs	r3, #8
 801a5e4:	613b      	str	r3, [r7, #16]
 801a5e6:	e00e      	b.n	801a606 <_checkPromCrc+0xba>
            if (res & 0x8000)
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d003      	beq.n	801a5fa <_checkPromCrc+0xae>
                res ^= 0x1800;
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801a5f8:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	005b      	lsls	r3, r3, #1
 801a5fe:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a600:	693b      	ldr	r3, [r7, #16]
 801a602:	3b01      	subs	r3, #1
 801a604:	613b      	str	r3, [r7, #16]
 801a606:	693b      	ldr	r3, [r7, #16]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	dced      	bgt.n	801a5e8 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 801a60c:	697b      	ldr	r3, [r7, #20]
 801a60e:	3301      	adds	r3, #1
 801a610:	617b      	str	r3, [r7, #20]
 801a612:	697b      	ldr	r3, [r7, #20]
 801a614:	2b0f      	cmp	r3, #15
 801a616:	ddc8      	ble.n	801a5aa <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	8ada      	ldrh	r2, [r3, #22]
 801a61c:	7abb      	ldrb	r3, [r7, #10]
 801a61e:	b29b      	uxth	r3, r3
 801a620:	4313      	orrs	r3, r2
 801a622:	b29a      	uxth	r2, r3
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801a628:	7aba      	ldrb	r2, [r7, #10]
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	0b1b      	lsrs	r3, r3, #12
 801a62e:	f003 030f 	and.w	r3, r3, #15
 801a632:	429a      	cmp	r2, r3
 801a634:	d101      	bne.n	801a63a <_checkPromCrc+0xee>
        return TRUE;
 801a636:	2301      	movs	r3, #1
 801a638:	e000      	b.n	801a63c <_checkPromCrc+0xf0>

    return FALSE;
 801a63a:	2300      	movs	r3, #0
}
 801a63c:	4618      	mov	r0, r3
 801a63e:	371c      	adds	r7, #28
 801a640:	46bd      	mov	sp, r7
 801a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a646:	4770      	bx	lr

0801a648 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 801a648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a64c:	b0d2      	sub	sp, #328	; 0x148
 801a64e:	af00      	add	r7, sp, #0
 801a650:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801a654:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a658:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801a65c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a666:	8a5b      	ldrh	r3, [r3, #18]
 801a668:	021b      	lsls	r3, r3, #8
 801a66a:	1ad3      	subs	r3, r2, r3
 801a66c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801a670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a674:	17da      	asrs	r2, r3, #31
 801a676:	469a      	mov	sl, r3
 801a678:	4693      	mov	fp, r2
 801a67a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a67e:	8a9b      	ldrh	r3, [r3, #20]
 801a680:	b29b      	uxth	r3, r3
 801a682:	2200      	movs	r2, #0
 801a684:	4698      	mov	r8, r3
 801a686:	4691      	mov	r9, r2
 801a688:	fb08 f20b 	mul.w	r2, r8, fp
 801a68c:	fb0a f309 	mul.w	r3, sl, r9
 801a690:	4413      	add	r3, r2
 801a692:	fbaa 4508 	umull	r4, r5, sl, r8
 801a696:	442b      	add	r3, r5
 801a698:	461d      	mov	r5, r3
 801a69a:	f04f 0200 	mov.w	r2, #0
 801a69e:	f04f 0300 	mov.w	r3, #0
 801a6a2:	0de2      	lsrs	r2, r4, #23
 801a6a4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 801a6a8:	15eb      	asrs	r3, r5, #23
 801a6aa:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 801a6ae:	6739      	str	r1, [r7, #112]	; 0x70
 801a6b0:	f143 0300 	adc.w	r3, r3, #0
 801a6b4:	677b      	str	r3, [r7, #116]	; 0x74
 801a6b6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801a6ba:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 801a6be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a6c2:	899b      	ldrh	r3, [r3, #12]
 801a6c4:	b29b      	uxth	r3, r3
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801a6cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801a6d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	0c1b      	lsrs	r3, r3, #16
 801a6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a6dc:	460b      	mov	r3, r1
 801a6de:	041b      	lsls	r3, r3, #16
 801a6e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a6e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a6e8:	8a1b      	ldrh	r3, [r3, #16]
 801a6ea:	b29b      	uxth	r3, r3
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a6f2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801a6f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a6fa:	17da      	asrs	r2, r3, #31
 801a6fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a700:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a704:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801a708:	462b      	mov	r3, r5
 801a70a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801a70e:	4642      	mov	r2, r8
 801a710:	fb02 f203 	mul.w	r2, r2, r3
 801a714:	464b      	mov	r3, r9
 801a716:	4621      	mov	r1, r4
 801a718:	fb01 f303 	mul.w	r3, r1, r3
 801a71c:	4413      	add	r3, r2
 801a71e:	4622      	mov	r2, r4
 801a720:	4641      	mov	r1, r8
 801a722:	fba2 1201 	umull	r1, r2, r2, r1
 801a726:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801a72a:	460a      	mov	r2, r1
 801a72c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801a730:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a734:	4413      	add	r3, r2
 801a736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a73a:	f04f 0200 	mov.w	r2, #0
 801a73e:	f04f 0300 	mov.w	r3, #0
 801a742:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801a746:	4621      	mov	r1, r4
 801a748:	09ca      	lsrs	r2, r1, #7
 801a74a:	4629      	mov	r1, r5
 801a74c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801a750:	4629      	mov	r1, r5
 801a752:	11cb      	asrs	r3, r1, #7
 801a754:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801a758:	4621      	mov	r1, r4
 801a75a:	1889      	adds	r1, r1, r2
 801a75c:	66b9      	str	r1, [r7, #104]	; 0x68
 801a75e:	4629      	mov	r1, r5
 801a760:	eb43 0101 	adc.w	r1, r3, r1
 801a764:	66f9      	str	r1, [r7, #108]	; 0x6c
 801a766:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801a76a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 801a76e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a772:	895b      	ldrh	r3, [r3, #10]
 801a774:	b29b      	uxth	r3, r3
 801a776:	2200      	movs	r2, #0
 801a778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a77c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801a780:	f04f 0000 	mov.w	r0, #0
 801a784:	f04f 0100 	mov.w	r1, #0
 801a788:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801a78c:	462b      	mov	r3, r5
 801a78e:	03d9      	lsls	r1, r3, #15
 801a790:	4623      	mov	r3, r4
 801a792:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 801a796:	4623      	mov	r3, r4
 801a798:	03d8      	lsls	r0, r3, #15
 801a79a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a79e:	89db      	ldrh	r3, [r3, #14]
 801a7a0:	b29b      	uxth	r3, r3
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a7a8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a7ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a7b0:	17da      	asrs	r2, r3, #31
 801a7b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801a7b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801a7ba:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801a7be:	464b      	mov	r3, r9
 801a7c0:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 801a7c4:	4652      	mov	r2, sl
 801a7c6:	fb02 f203 	mul.w	r2, r2, r3
 801a7ca:	465b      	mov	r3, fp
 801a7cc:	4644      	mov	r4, r8
 801a7ce:	fb04 f303 	mul.w	r3, r4, r3
 801a7d2:	4413      	add	r3, r2
 801a7d4:	4642      	mov	r2, r8
 801a7d6:	4654      	mov	r4, sl
 801a7d8:	fba2 4204 	umull	r4, r2, r2, r4
 801a7dc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801a7e0:	4622      	mov	r2, r4
 801a7e2:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a7e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801a7ea:	4413      	add	r3, r2
 801a7ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801a7f0:	f04f 0200 	mov.w	r2, #0
 801a7f4:	f04f 0300 	mov.w	r3, #0
 801a7f8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 801a7fc:	4644      	mov	r4, r8
 801a7fe:	0a22      	lsrs	r2, r4, #8
 801a800:	464c      	mov	r4, r9
 801a802:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801a806:	464c      	mov	r4, r9
 801a808:	1223      	asrs	r3, r4, #8
 801a80a:	1884      	adds	r4, r0, r2
 801a80c:	663c      	str	r4, [r7, #96]	; 0x60
 801a80e:	eb41 0303 	adc.w	r3, r1, r3
 801a812:	667b      	str	r3, [r7, #100]	; 0x64
 801a814:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801a818:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 801a81c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a820:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801a824:	f173 0300 	sbcs.w	r3, r3, #0
 801a828:	f280 8150 	bge.w	801aacc <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 801a82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a830:	17da      	asrs	r2, r3, #31
 801a832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a83a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a83e:	17da      	asrs	r2, r3, #31
 801a840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a844:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801a848:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801a84c:	462b      	mov	r3, r5
 801a84e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801a852:	4642      	mov	r2, r8
 801a854:	fb02 f203 	mul.w	r2, r2, r3
 801a858:	464b      	mov	r3, r9
 801a85a:	4621      	mov	r1, r4
 801a85c:	fb01 f303 	mul.w	r3, r1, r3
 801a860:	4413      	add	r3, r2
 801a862:	4622      	mov	r2, r4
 801a864:	4641      	mov	r1, r8
 801a866:	fba2 1201 	umull	r1, r2, r2, r1
 801a86a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801a86e:	460a      	mov	r2, r1
 801a870:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801a874:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801a878:	4413      	add	r3, r2
 801a87a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801a87e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801a882:	2b00      	cmp	r3, #0
 801a884:	da08      	bge.n	801a898 <_calcurateBarometric+0x250>
 801a886:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a88a:	1851      	adds	r1, r2, r1
 801a88c:	65b9      	str	r1, [r7, #88]	; 0x58
 801a88e:	f143 0300 	adc.w	r3, r3, #0
 801a892:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a894:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a898:	f04f 0000 	mov.w	r0, #0
 801a89c:	f04f 0100 	mov.w	r1, #0
 801a8a0:	0fd0      	lsrs	r0, r2, #31
 801a8a2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a8a6:	17d9      	asrs	r1, r3, #31
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	4242      	negs	r2, r0
 801a8ac:	653a      	str	r2, [r7, #80]	; 0x50
 801a8ae:	eb63 0301 	sbc.w	r3, r3, r1
 801a8b2:	657b      	str	r3, [r7, #84]	; 0x54
 801a8b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801a8b8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a8bc:	1814      	adds	r4, r2, r0
 801a8be:	64bc      	str	r4, [r7, #72]	; 0x48
 801a8c0:	414b      	adcs	r3, r1
 801a8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a8c4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801a8c8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 801a8cc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a8d0:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801a8d4:	6439      	str	r1, [r7, #64]	; 0x40
 801a8d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a8da:	647b      	str	r3, [r7, #68]	; 0x44
 801a8dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801a8e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 801a8e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a8e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a8ec:	fb03 f102 	mul.w	r1, r3, r2
 801a8f0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a8f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a8f8:	fb02 f303 	mul.w	r3, r2, r3
 801a8fc:	18ca      	adds	r2, r1, r3
 801a8fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a902:	fba3 1303 	umull	r1, r3, r3, r3
 801a906:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a90a:	460b      	mov	r3, r1
 801a90c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a914:	18d3      	adds	r3, r2, r3
 801a916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a91a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801a91e:	4622      	mov	r2, r4
 801a920:	462b      	mov	r3, r5
 801a922:	f04f 0000 	mov.w	r0, #0
 801a926:	f04f 0100 	mov.w	r1, #0
 801a92a:	0099      	lsls	r1, r3, #2
 801a92c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801a930:	0090      	lsls	r0, r2, #2
 801a932:	4602      	mov	r2, r0
 801a934:	460b      	mov	r3, r1
 801a936:	4621      	mov	r1, r4
 801a938:	1851      	adds	r1, r2, r1
 801a93a:	63b9      	str	r1, [r7, #56]	; 0x38
 801a93c:	4629      	mov	r1, r5
 801a93e:	eb43 0101 	adc.w	r1, r3, r1
 801a942:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a944:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801a948:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 801a94c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a950:	f04f 0000 	mov.w	r0, #0
 801a954:	f04f 0100 	mov.w	r1, #0
 801a958:	0850      	lsrs	r0, r2, #1
 801a95a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801a95e:	1059      	asrs	r1, r3, #1
 801a960:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a964:	1a14      	subs	r4, r2, r0
 801a966:	633c      	str	r4, [r7, #48]	; 0x30
 801a968:	eb63 0301 	sbc.w	r3, r3, r1
 801a96c:	637b      	str	r3, [r7, #52]	; 0x34
 801a96e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801a972:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801a976:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a97a:	f04f 0000 	mov.w	r0, #0
 801a97e:	f04f 0100 	mov.w	r1, #0
 801a982:	0890      	lsrs	r0, r2, #2
 801a984:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801a988:	1099      	asrs	r1, r3, #2
 801a98a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801a98e:	1a14      	subs	r4, r2, r0
 801a990:	62bc      	str	r4, [r7, #40]	; 0x28
 801a992:	eb63 0301 	sbc.w	r3, r3, r1
 801a996:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a998:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801a99c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801a9a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a9a4:	497c      	ldr	r1, [pc, #496]	; (801ab98 <_calcurateBarometric+0x550>)
 801a9a6:	428a      	cmp	r2, r1
 801a9a8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801a9ac:	f280 808e 	bge.w	801aacc <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801a9b0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a9b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801a9b8:	1851      	adds	r1, r2, r1
 801a9ba:	6239      	str	r1, [r7, #32]
 801a9bc:	f143 0300 	adc.w	r3, r3, #0
 801a9c0:	627b      	str	r3, [r7, #36]	; 0x24
 801a9c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801a9c6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801a9ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a9ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a9d2:	fb03 f102 	mul.w	r1, r3, r2
 801a9d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a9da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a9de:	fb02 f303 	mul.w	r3, r2, r3
 801a9e2:	18ca      	adds	r2, r1, r3
 801a9e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a9e8:	fba3 1303 	umull	r1, r3, r3, r3
 801a9ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a9fa:	18d3      	adds	r3, r2, r3
 801a9fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801aa00:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801aa04:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801aa08:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801aa0c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801aa10:	4614      	mov	r4, r2
 801aa12:	461d      	mov	r5, r3
 801aa14:	f04f 0000 	mov.w	r0, #0
 801aa18:	f04f 0100 	mov.w	r1, #0
 801aa1c:	00d9      	lsls	r1, r3, #3
 801aa1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801aa22:	00d0      	lsls	r0, r2, #3
 801aa24:	1a23      	subs	r3, r4, r0
 801aa26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801aa2a:	eb65 0301 	sbc.w	r3, r5, r1
 801aa2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801aa32:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801aa36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801aa3a:	4621      	mov	r1, r4
 801aa3c:	1851      	adds	r1, r2, r1
 801aa3e:	61b9      	str	r1, [r7, #24]
 801aa40:	4629      	mov	r1, r5
 801aa42:	eb43 0101 	adc.w	r1, r3, r1
 801aa46:	61f9      	str	r1, [r7, #28]
 801aa48:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801aa4c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801aa50:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801aa54:	4602      	mov	r2, r0
 801aa56:	460b      	mov	r3, r1
 801aa58:	1894      	adds	r4, r2, r2
 801aa5a:	613c      	str	r4, [r7, #16]
 801aa5c:	415b      	adcs	r3, r3
 801aa5e:	617b      	str	r3, [r7, #20]
 801aa60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801aa64:	1814      	adds	r4, r2, r0
 801aa66:	60bc      	str	r4, [r7, #8]
 801aa68:	414b      	adcs	r3, r1
 801aa6a:	60fb      	str	r3, [r7, #12]
 801aa6c:	f04f 0200 	mov.w	r2, #0
 801aa70:	f04f 0300 	mov.w	r3, #0
 801aa74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801aa78:	464c      	mov	r4, r9
 801aa7a:	00a3      	lsls	r3, r4, #2
 801aa7c:	4644      	mov	r4, r8
 801aa7e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801aa82:	4644      	mov	r4, r8
 801aa84:	00a2      	lsls	r2, r4, #2
 801aa86:	4614      	mov	r4, r2
 801aa88:	461d      	mov	r5, r3
 801aa8a:	4623      	mov	r3, r4
 801aa8c:	1a1b      	subs	r3, r3, r0
 801aa8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801aa92:	462b      	mov	r3, r5
 801aa94:	eb63 0301 	sbc.w	r3, r3, r1
 801aa98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801aa9c:	f04f 0200 	mov.w	r2, #0
 801aaa0:	f04f 0300 	mov.w	r3, #0
 801aaa4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801aaa8:	4621      	mov	r1, r4
 801aaaa:	084a      	lsrs	r2, r1, #1
 801aaac:	4629      	mov	r1, r5
 801aaae:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801aab2:	4629      	mov	r1, r5
 801aab4:	104b      	asrs	r3, r1, #1
 801aab6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801aaba:	1a84      	subs	r4, r0, r2
 801aabc:	603c      	str	r4, [r7, #0]
 801aabe:	eb61 0303 	sbc.w	r3, r1, r3
 801aac2:	607b      	str	r3, [r7, #4]
 801aac4:	e9d7 3400 	ldrd	r3, r4, [r7]
 801aac8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 801aacc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801aad0:	f7e5 fd18 	bl	8000504 <__aeabi_l2d>
 801aad4:	f04f 0200 	mov.w	r2, #0
 801aad8:	4b30      	ldr	r3, [pc, #192]	; (801ab9c <_calcurateBarometric+0x554>)
 801aada:	f7e5 fe6b 	bl	80007b4 <__aeabi_ddiv>
 801aade:	4602      	mov	r2, r0
 801aae0:	460b      	mov	r3, r1
 801aae2:	4610      	mov	r0, r2
 801aae4:	4619      	mov	r1, r3
 801aae6:	f7e6 f81d 	bl	8000b24 <__aeabi_d2f>
 801aaea:	4602      	mov	r2, r0
 801aaec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801aaf0:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 801aaf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaf8:	2200      	movs	r2, #0
 801aafa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801aafe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801ab02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801ab06:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801ab0a:	462a      	mov	r2, r5
 801ab0c:	fb02 f203 	mul.w	r2, r2, r3
 801ab10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801ab14:	4621      	mov	r1, r4
 801ab16:	fb01 f303 	mul.w	r3, r1, r3
 801ab1a:	4413      	add	r3, r2
 801ab1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801ab20:	4621      	mov	r1, r4
 801ab22:	fba2 1201 	umull	r1, r2, r2, r1
 801ab26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801ab2a:	460a      	mov	r2, r1
 801ab2c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801ab30:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801ab34:	4413      	add	r3, r2
 801ab36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801ab3a:	f04f 0200 	mov.w	r2, #0
 801ab3e:	f04f 0300 	mov.w	r3, #0
 801ab42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801ab46:	4621      	mov	r1, r4
 801ab48:	0d4a      	lsrs	r2, r1, #21
 801ab4a:	4629      	mov	r1, r5
 801ab4c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801ab50:	4629      	mov	r1, r5
 801ab52:	154b      	asrs	r3, r1, #21
 801ab54:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801ab58:	1a14      	subs	r4, r2, r0
 801ab5a:	67bc      	str	r4, [r7, #120]	; 0x78
 801ab5c:	eb63 0301 	sbc.w	r3, r3, r1
 801ab60:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ab62:	f04f 0200 	mov.w	r2, #0
 801ab66:	f04f 0300 	mov.w	r3, #0
 801ab6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801ab6e:	4621      	mov	r1, r4
 801ab70:	0bca      	lsrs	r2, r1, #15
 801ab72:	4629      	mov	r1, r5
 801ab74:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801ab78:	4629      	mov	r1, r5
 801ab7a:	13cb      	asrs	r3, r1, #15
 801ab7c:	4610      	mov	r0, r2
 801ab7e:	4619      	mov	r1, r3
 801ab80:	f7e6 f8f0 	bl	8000d64 <__aeabi_l2f>
 801ab84:	4602      	mov	r2, r0
 801ab86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801ab8a:	601a      	str	r2, [r3, #0]
}
 801ab8c:	bf00      	nop
 801ab8e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801ab92:	46bd      	mov	sp, r7
 801ab94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ab98:	fffffa24 	.word	0xfffffa24
 801ab9c:	40590000 	.word	0x40590000

0801aba0 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b08a      	sub	sp, #40	; 0x28
 801aba4:	af02      	add	r7, sp, #8
 801aba6:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	68db      	ldr	r3, [r3, #12]
 801abac:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801abae:	2301      	movs	r3, #1
 801abb0:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801abb2:	69bb      	ldr	r3, [r7, #24]
 801abb4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801abb8:	3b01      	subs	r3, #1
 801abba:	2b04      	cmp	r3, #4
 801abbc:	f200 80a9 	bhi.w	801ad12 <_doTask+0x172>
 801abc0:	a201      	add	r2, pc, #4	; (adr r2, 801abc8 <_doTask+0x28>)
 801abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abc6:	bf00      	nop
 801abc8:	0801abdd 	.word	0x0801abdd
 801abcc:	0801ac1d 	.word	0x0801ac1d
 801abd0:	0801ac4f 	.word	0x0801ac4f
 801abd4:	0801ac85 	.word	0x0801ac85
 801abd8:	0801acb7 	.word	0x0801acb7
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801abdc:	4b54      	ldr	r3, [pc, #336]	; (801ad30 <_doTask+0x190>)
 801abde:	681a      	ldr	r2, [r3, #0]
 801abe0:	69bb      	ldr	r3, [r7, #24]
 801abe2:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801abe4:	69bb      	ldr	r3, [r7, #24]
 801abe6:	8b1b      	ldrh	r3, [r3, #24]
 801abe8:	b2db      	uxtb	r3, r3
 801abea:	3350      	adds	r3, #80	; 0x50
 801abec:	b2db      	uxtb	r3, r3
 801abee:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	6858      	ldr	r0, [r3, #4]
 801abf4:	f107 0310 	add.w	r3, r7, #16
 801abf8:	2201      	movs	r2, #1
 801abfa:	9200      	str	r2, [sp, #0]
 801abfc:	2200      	movs	r2, #0
 801abfe:	2100      	movs	r1, #0
 801ac00:	f7f7 fcf6 	bl	80125f0 <pifI2cDevice_Write>
 801ac04:	4603      	mov	r3, r0
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	f000 8085 	beq.w	801ad16 <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801ac0c:	69bb      	ldr	r3, [r7, #24]
 801ac0e:	2202      	movs	r2, #2
 801ac10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801ac14:	69bb      	ldr	r3, [r7, #24]
 801ac16:	7e9b      	ldrb	r3, [r3, #26]
 801ac18:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801ac1a:	e07c      	b.n	801ad16 <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801ac1c:	69bb      	ldr	r3, [r7, #24]
 801ac1e:	6858      	ldr	r0, [r3, #4]
 801ac20:	f107 0210 	add.w	r2, r7, #16
 801ac24:	2303      	movs	r3, #3
 801ac26:	2100      	movs	r1, #0
 801ac28:	f7f7 fc98 	bl	801255c <pifI2cDevice_ReadRegBytes>
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d073      	beq.n	801ad1a <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801ac32:	7c3b      	ldrb	r3, [r7, #16]
 801ac34:	041b      	lsls	r3, r3, #16
 801ac36:	7c7a      	ldrb	r2, [r7, #17]
 801ac38:	0212      	lsls	r2, r2, #8
 801ac3a:	4413      	add	r3, r2
 801ac3c:	7cba      	ldrb	r2, [r7, #18]
 801ac3e:	441a      	add	r2, r3
 801ac40:	69bb      	ldr	r3, [r7, #24]
 801ac42:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801ac44:	69bb      	ldr	r3, [r7, #24]
 801ac46:	2203      	movs	r2, #3
 801ac48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801ac4c:	e065      	b.n	801ad1a <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801ac4e:	69bb      	ldr	r3, [r7, #24]
 801ac50:	8b1b      	ldrh	r3, [r3, #24]
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	3340      	adds	r3, #64	; 0x40
 801ac56:	b2db      	uxtb	r3, r3
 801ac58:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801ac5a:	69bb      	ldr	r3, [r7, #24]
 801ac5c:	6858      	ldr	r0, [r3, #4]
 801ac5e:	f107 0310 	add.w	r3, r7, #16
 801ac62:	2201      	movs	r2, #1
 801ac64:	9200      	str	r2, [sp, #0]
 801ac66:	2200      	movs	r2, #0
 801ac68:	2100      	movs	r1, #0
 801ac6a:	f7f7 fcc1 	bl	80125f0 <pifI2cDevice_Write>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d054      	beq.n	801ad1e <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801ac74:	69bb      	ldr	r3, [r7, #24]
 801ac76:	2204      	movs	r2, #4
 801ac78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801ac7c:	69bb      	ldr	r3, [r7, #24]
 801ac7e:	7e9b      	ldrb	r3, [r3, #26]
 801ac80:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801ac82:	e04c      	b.n	801ad1e <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	6858      	ldr	r0, [r3, #4]
 801ac88:	f107 0210 	add.w	r2, r7, #16
 801ac8c:	2303      	movs	r3, #3
 801ac8e:	2100      	movs	r1, #0
 801ac90:	f7f7 fc64 	bl	801255c <pifI2cDevice_ReadRegBytes>
 801ac94:	4603      	mov	r3, r0
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d043      	beq.n	801ad22 <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801ac9a:	7c3b      	ldrb	r3, [r7, #16]
 801ac9c:	041b      	lsls	r3, r3, #16
 801ac9e:	7c7a      	ldrb	r2, [r7, #17]
 801aca0:	0212      	lsls	r2, r2, #8
 801aca2:	4413      	add	r3, r2
 801aca4:	7cba      	ldrb	r2, [r7, #18]
 801aca6:	441a      	add	r2, r3
 801aca8:	69bb      	ldr	r3, [r7, #24]
 801acaa:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801acac:	69bb      	ldr	r3, [r7, #24]
 801acae:	2205      	movs	r2, #5
 801acb0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801acb4:	e035      	b.n	801ad22 <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801acb6:	f107 0208 	add.w	r2, r7, #8
 801acba:	f107 030c 	add.w	r3, r7, #12
 801acbe:	4619      	mov	r1, r3
 801acc0:	69b8      	ldr	r0, [r7, #24]
 801acc2:	f7ff fcc1 	bl	801a648 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801acc6:	69bb      	ldr	r3, [r7, #24]
 801acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acca:	2b00      	cmp	r3, #0
 801accc:	d00a      	beq.n	801ace4 <_doTask+0x144>
 801acce:	69bb      	ldr	r3, [r7, #24]
 801acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acd2:	edd7 7a03 	vldr	s15, [r7, #12]
 801acd6:	ed97 7a02 	vldr	s14, [r7, #8]
 801acda:	eef0 0a47 	vmov.f32	s1, s14
 801acde:	eeb0 0a67 	vmov.f32	s0, s15
 801ace2:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801ace4:	4b12      	ldr	r3, [pc, #72]	; (801ad30 <_doTask+0x190>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	b29a      	uxth	r2, r3
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acee:	b29b      	uxth	r3, r3
 801acf0:	1ad3      	subs	r3, r2, r3
 801acf2:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801acf4:	69bb      	ldr	r3, [r7, #24]
 801acf6:	8c1b      	ldrh	r3, [r3, #32]
 801acf8:	8afa      	ldrh	r2, [r7, #22]
 801acfa:	429a      	cmp	r2, r3
 801acfc:	d204      	bcs.n	801ad08 <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801acfe:	69bb      	ldr	r3, [r7, #24]
 801ad00:	8c1a      	ldrh	r2, [r3, #32]
 801ad02:	8afb      	ldrh	r3, [r7, #22]
 801ad04:	1ad3      	subs	r3, r2, r3
 801ad06:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ad08:	69bb      	ldr	r3, [r7, #24]
 801ad0a:	2201      	movs	r2, #1
 801ad0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801ad10:	e008      	b.n	801ad24 <_doTask+0x184>

	default:
		break;
 801ad12:	bf00      	nop
 801ad14:	e006      	b.n	801ad24 <_doTask+0x184>
		break;
 801ad16:	bf00      	nop
 801ad18:	e004      	b.n	801ad24 <_doTask+0x184>
		break;
 801ad1a:	bf00      	nop
 801ad1c:	e002      	b.n	801ad24 <_doTask+0x184>
		break;
 801ad1e:	bf00      	nop
 801ad20:	e000      	b.n	801ad24 <_doTask+0x184>
		break;
 801ad22:	bf00      	nop
	}
	return delay;
 801ad24:	8bfb      	ldrh	r3, [r7, #30]
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	3720      	adds	r7, #32
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	bd80      	pop	{r7, pc}
 801ad2e:	bf00      	nop
 801ad30:	20001dd0 	.word	0x20001dd0

0801ad34 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b086      	sub	sp, #24
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	60f8      	str	r0, [r7, #12]
 801ad3c:	607a      	str	r2, [r7, #4]
 801ad3e:	461a      	mov	r2, r3
 801ad40:	460b      	mov	r3, r1
 801ad42:	817b      	strh	r3, [r7, #10]
 801ad44:	4613      	mov	r3, r2
 801ad46:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d002      	beq.n	801ad54 <pifMs5611_Init+0x20>
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d104      	bne.n	801ad5e <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801ad54:	4b33      	ldr	r3, [pc, #204]	; (801ae24 <pifMs5611_Init+0xf0>)
 801ad56:	2201      	movs	r2, #1
 801ad58:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	e05e      	b.n	801ae1c <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801ad5e:	2234      	movs	r2, #52	; 0x34
 801ad60:	2100      	movs	r1, #0
 801ad62:	68f8      	ldr	r0, [r7, #12]
 801ad64:	f008 fb40 	bl	80233e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f7f7 faff 	bl	801236c <pifI2cPort_AddDevice>
 801ad6e:	4602      	mov	r2, r0
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	685b      	ldr	r3, [r3, #4]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d101      	bne.n	801ad80 <pifMs5611_Init+0x4c>
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	e04d      	b.n	801ae1c <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	685b      	ldr	r3, [r3, #4]
 801ad84:	7a7a      	ldrb	r2, [r7, #9]
 801ad86:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	211e      	movs	r1, #30
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7f7 fcb5 	bl	8012700 <pifI2cDevice_WriteRegByte>
 801ad96:	4603      	mov	r3, r0
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d036      	beq.n	801ae0a <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 801ad9c:	2064      	movs	r0, #100	; 0x64
 801ad9e:	f7f9 ffdb 	bl	8014d58 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801ada2:	2300      	movs	r3, #0
 801ada4:	617b      	str	r3, [r7, #20]
 801ada6:	e014      	b.n	801add2 <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	6858      	ldr	r0, [r3, #4]
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	3350      	adds	r3, #80	; 0x50
 801adb0:	b2db      	uxtb	r3, r3
 801adb2:	005b      	lsls	r3, r3, #1
 801adb4:	b2d9      	uxtb	r1, r3
 801adb6:	697b      	ldr	r3, [r7, #20]
 801adb8:	3304      	adds	r3, #4
 801adba:	005b      	lsls	r3, r3, #1
 801adbc:	68fa      	ldr	r2, [r7, #12]
 801adbe:	4413      	add	r3, r2
 801adc0:	461a      	mov	r2, r3
 801adc2:	f7f7 fba7 	bl	8012514 <pifI2cDevice_ReadRegWord>
 801adc6:	4603      	mov	r3, r0
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d020      	beq.n	801ae0e <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 801adcc:	697b      	ldr	r3, [r7, #20]
 801adce:	3301      	adds	r3, #1
 801add0:	617b      	str	r3, [r7, #20]
 801add2:	697b      	ldr	r3, [r7, #20]
 801add4:	2b07      	cmp	r3, #7
 801add6:	dde7      	ble.n	801ada8 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801add8:	68f8      	ldr	r0, [r7, #12]
 801adda:	f7ff fbb7 	bl	801a54c <_checkPromCrc>
 801adde:	4603      	mov	r3, r0
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d016      	beq.n	801ae12 <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801ade4:	2104      	movs	r1, #4
 801ade6:	68f8      	ldr	r0, [r7, #12]
 801ade8:	f000 f844 	bl	801ae74 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801adec:	897b      	ldrh	r3, [r7, #10]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d106      	bne.n	801ae00 <pifMs5611_Init+0xcc>
 801adf2:	4b0d      	ldr	r3, [pc, #52]	; (801ae28 <pifMs5611_Init+0xf4>)
 801adf4:	881b      	ldrh	r3, [r3, #0]
 801adf6:	1c5a      	adds	r2, r3, #1
 801adf8:	b291      	uxth	r1, r2
 801adfa:	4a0b      	ldr	r2, [pc, #44]	; (801ae28 <pifMs5611_Init+0xf4>)
 801adfc:	8011      	strh	r1, [r2, #0]
 801adfe:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	897a      	ldrh	r2, [r7, #10]
 801ae04:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801ae06:	2301      	movs	r3, #1
 801ae08:	e008      	b.n	801ae1c <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801ae0a:	bf00      	nop
 801ae0c:	e002      	b.n	801ae14 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801ae0e:	bf00      	nop
 801ae10:	e000      	b.n	801ae14 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801ae12:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801ae14:	68f8      	ldr	r0, [r7, #12]
 801ae16:	f000 f809 	bl	801ae2c <pifMs5611_Clear>
	return FALSE;
 801ae1a:	2300      	movs	r3, #0
}
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	3718      	adds	r7, #24
 801ae20:	46bd      	mov	sp, r7
 801ae22:	bd80      	pop	{r7, pc}
 801ae24:	20001db8 	.word	0x20001db8
 801ae28:	20000128 	.word	0x20000128

0801ae2c <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b082      	sub	sp, #8
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	69db      	ldr	r3, [r3, #28]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d007      	beq.n	801ae4c <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	69db      	ldr	r3, [r3, #28]
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7f9 fccf 	bl	80147e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	2200      	movs	r2, #0
 801ae4a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d00b      	beq.n	801ae6c <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	685b      	ldr	r3, [r3, #4]
 801ae58:	685a      	ldr	r2, [r3, #4]
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	4619      	mov	r1, r3
 801ae60:	4610      	mov	r0, r2
 801ae62:	f7f7 faa7 	bl	80123b4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2200      	movs	r2, #0
 801ae6a:	605a      	str	r2, [r3, #4]
	}
}
 801ae6c:	bf00      	nop
 801ae6e:	3708      	adds	r7, #8
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}

0801ae74 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801ae74:	b480      	push	{r7}
 801ae76:	b083      	sub	sp, #12
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
 801ae7c:	460b      	mov	r3, r1
 801ae7e:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	887a      	ldrh	r2, [r7, #2]
 801ae84:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801ae86:	887b      	ldrh	r3, [r7, #2]
 801ae88:	2b08      	cmp	r3, #8
 801ae8a:	d829      	bhi.n	801aee0 <pifMs5611_SetOverSamplingRate+0x6c>
 801ae8c:	a201      	add	r2, pc, #4	; (adr r2, 801ae94 <pifMs5611_SetOverSamplingRate+0x20>)
 801ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae92:	bf00      	nop
 801ae94:	0801aeb9 	.word	0x0801aeb9
 801ae98:	0801aee1 	.word	0x0801aee1
 801ae9c:	0801aec1 	.word	0x0801aec1
 801aea0:	0801aee1 	.word	0x0801aee1
 801aea4:	0801aec9 	.word	0x0801aec9
 801aea8:	0801aee1 	.word	0x0801aee1
 801aeac:	0801aed1 	.word	0x0801aed1
 801aeb0:	0801aee1 	.word	0x0801aee1
 801aeb4:	0801aed9 	.word	0x0801aed9
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	2202      	movs	r2, #2
 801aebc:	769a      	strb	r2, [r3, #26]
 801aebe:	e00f      	b.n	801aee0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	2203      	movs	r2, #3
 801aec4:	769a      	strb	r2, [r3, #26]
 801aec6:	e00b      	b.n	801aee0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	2204      	movs	r2, #4
 801aecc:	769a      	strb	r2, [r3, #26]
 801aece:	e007      	b.n	801aee0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2206      	movs	r2, #6
 801aed4:	769a      	strb	r2, [r3, #26]
 801aed6:	e003      	b.n	801aee0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	220b      	movs	r2, #11
 801aedc:	769a      	strb	r2, [r3, #26]
 801aede:	bf00      	nop
	}
}
 801aee0:	bf00      	nop
 801aee2:	370c      	adds	r7, #12
 801aee4:	46bd      	mov	sp, r7
 801aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeea:	4770      	bx	lr

0801aeec <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b086      	sub	sp, #24
 801aef0:	af02      	add	r7, sp, #8
 801aef2:	60f8      	str	r0, [r7, #12]
 801aef4:	607a      	str	r2, [r7, #4]
 801aef6:	461a      	mov	r2, r3
 801aef8:	460b      	mov	r3, r1
 801aefa:	817b      	strh	r3, [r7, #10]
 801aefc:	4613      	mov	r3, r2
 801aefe:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801af00:	8979      	ldrh	r1, [r7, #10]
 801af02:	7a7b      	ldrb	r3, [r7, #9]
 801af04:	9300      	str	r3, [sp, #0]
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	4a0f      	ldr	r2, [pc, #60]	; (801af48 <pifMs5611_AddTaskForReading+0x5c>)
 801af0a:	2004      	movs	r0, #4
 801af0c:	f7f9 fc02 	bl	8014714 <pifTaskManager_Add>
 801af10:	4602      	mov	r2, r0
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	69db      	ldr	r3, [r3, #28]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d101      	bne.n	801af22 <pifMs5611_AddTaskForReading+0x36>
 801af1e:	2300      	movs	r3, #0
 801af20:	e00e      	b.n	801af40 <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	69db      	ldr	r3, [r3, #28]
 801af26:	4a09      	ldr	r2, [pc, #36]	; (801af4c <pifMs5611_AddTaskForReading+0x60>)
 801af28:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	897a      	ldrh	r2, [r7, #10]
 801af2e:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	2201      	movs	r2, #1
 801af3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801af3e:	2301      	movs	r3, #1
}
 801af40:	4618      	mov	r0, r3
 801af42:	3710      	adds	r7, #16
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}
 801af48:	0801aba1 	.word	0x0801aba1
 801af4c:	08027db8 	.word	0x08027db8

0801af50 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801af50:	b580      	push	{r7, lr}
 801af52:	b086      	sub	sp, #24
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	68db      	ldr	r3, [r3, #12]
 801af5c:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801af5e:	2300      	movs	r3, #0
 801af60:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801af62:	693b      	ldr	r3, [r7, #16]
 801af64:	691b      	ldr	r3, [r3, #16]
 801af66:	693a      	ldr	r2, [r7, #16]
 801af68:	7d12      	ldrb	r2, [r2, #20]
 801af6a:	4413      	add	r3, r2
 801af6c:	781b      	ldrb	r3, [r3, #0]
 801af6e:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801af70:	693b      	ldr	r3, [r7, #16]
 801af72:	7b1b      	ldrb	r3, [r3, #12]
 801af74:	3b01      	subs	r3, #1
 801af76:	2b03      	cmp	r3, #3
 801af78:	d87f      	bhi.n	801b07a <_doTask+0x12a>
 801af7a:	a201      	add	r2, pc, #4	; (adr r2, 801af80 <_doTask+0x30>)
 801af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af80:	0801af91 	.word	0x0801af91
 801af84:	0801afb3 	.word	0x0801afb3
 801af88:	0801afd5 	.word	0x0801afd5
 801af8c:	0801b047 	.word	0x0801b047
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801af90:	693b      	ldr	r3, [r7, #16]
 801af92:	699b      	ldr	r3, [r3, #24]
 801af94:	693a      	ldr	r2, [r7, #16]
 801af96:	8892      	ldrh	r2, [r2, #4]
 801af98:	2101      	movs	r1, #1
 801af9a:	4610      	mov	r0, r2
 801af9c:	4798      	blx	r3
		p_owner->__pos++;
 801af9e:	693b      	ldr	r3, [r7, #16]
 801afa0:	7d1b      	ldrb	r3, [r3, #20]
 801afa2:	3301      	adds	r3, #1
 801afa4:	b2da      	uxtb	r2, r3
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801afaa:	693b      	ldr	r3, [r7, #16]
 801afac:	2202      	movs	r2, #2
 801afae:	731a      	strb	r2, [r3, #12]
		break;
 801afb0:	e064      	b.n	801b07c <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	699b      	ldr	r3, [r3, #24]
 801afb6:	693a      	ldr	r2, [r7, #16]
 801afb8:	8892      	ldrh	r2, [r2, #4]
 801afba:	2100      	movs	r1, #0
 801afbc:	4610      	mov	r0, r2
 801afbe:	4798      	blx	r3
		p_owner->__pos++;
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	7d1b      	ldrb	r3, [r3, #20]
 801afc4:	3301      	adds	r3, #1
 801afc6:	b2da      	uxtb	r2, r3
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801afcc:	693b      	ldr	r3, [r7, #16]
 801afce:	2203      	movs	r2, #3
 801afd0:	731a      	strb	r2, [r3, #12]
		break;
 801afd2:	e053      	b.n	801b07c <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801afd4:	89fb      	ldrh	r3, [r7, #14]
 801afd6:	2bef      	cmp	r3, #239	; 0xef
 801afd8:	d810      	bhi.n	801affc <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	699b      	ldr	r3, [r3, #24]
 801afde:	693a      	ldr	r2, [r7, #16]
 801afe0:	8892      	ldrh	r2, [r2, #4]
 801afe2:	2101      	movs	r1, #1
 801afe4:	4610      	mov	r0, r2
 801afe6:	4798      	blx	r3
			p_owner->__pos++;
 801afe8:	693b      	ldr	r3, [r7, #16]
 801afea:	7d1b      	ldrb	r3, [r3, #20]
 801afec:	3301      	adds	r3, #1
 801afee:	b2da      	uxtb	r2, r3
 801aff0:	693b      	ldr	r3, [r7, #16]
 801aff2:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801aff4:	693b      	ldr	r3, [r7, #16]
 801aff6:	2202      	movs	r2, #2
 801aff8:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801affa:	e03f      	b.n	801b07c <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801affc:	89fb      	ldrh	r3, [r7, #14]
 801affe:	2bf0      	cmp	r3, #240	; 0xf0
 801b000:	d105      	bne.n	801b00e <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801b002:	693b      	ldr	r3, [r7, #16]
 801b004:	2204      	movs	r2, #4
 801b006:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801b008:	2301      	movs	r3, #1
 801b00a:	82fb      	strh	r3, [r7, #22]
		break;
 801b00c:	e036      	b.n	801b07c <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801b00e:	89fb      	ldrh	r3, [r7, #14]
 801b010:	b2db      	uxtb	r3, r3
 801b012:	3310      	adds	r3, #16
 801b014:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801b016:	693b      	ldr	r3, [r7, #16]
 801b018:	7d5b      	ldrb	r3, [r3, #21]
 801b01a:	7b7a      	ldrb	r2, [r7, #13]
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d90c      	bls.n	801b03a <_doTask+0xea>
				p_owner->__pos = 0;
 801b020:	693b      	ldr	r3, [r7, #16]
 801b022:	2200      	movs	r2, #0
 801b024:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801b026:	693b      	ldr	r3, [r7, #16]
 801b028:	7d5b      	ldrb	r3, [r3, #21]
 801b02a:	3301      	adds	r3, #1
 801b02c:	b2da      	uxtb	r2, r3
 801b02e:	693b      	ldr	r3, [r7, #16]
 801b030:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801b032:	693b      	ldr	r3, [r7, #16]
 801b034:	2201      	movs	r2, #1
 801b036:	731a      	strb	r2, [r3, #12]
 801b038:	e002      	b.n	801b040 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801b03a:	693b      	ldr	r3, [r7, #16]
 801b03c:	2204      	movs	r2, #4
 801b03e:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801b040:	2301      	movs	r3, #1
 801b042:	82fb      	strh	r3, [r7, #22]
		break;
 801b044:	e01a      	b.n	801b07c <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801b046:	693b      	ldr	r3, [r7, #16]
 801b048:	699b      	ldr	r3, [r3, #24]
 801b04a:	693a      	ldr	r2, [r7, #16]
 801b04c:	8892      	ldrh	r2, [r2, #4]
 801b04e:	2100      	movs	r1, #0
 801b050:	4610      	mov	r0, r2
 801b052:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801b054:	693b      	ldr	r3, [r7, #16]
 801b056:	2200      	movs	r2, #0
 801b058:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801b05a:	693b      	ldr	r3, [r7, #16]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d005      	beq.n	801b06e <_doTask+0x11e>
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	693a      	ldr	r2, [r7, #16]
 801b068:	8892      	ldrh	r2, [r2, #4]
 801b06a:	4610      	mov	r0, r2
 801b06c:	4798      	blx	r3
		delay = 1;
 801b06e:	2301      	movs	r3, #1
 801b070:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	2201      	movs	r2, #1
 801b076:	711a      	strb	r2, [r3, #4]
		break;
 801b078:	e000      	b.n	801b07c <_doTask+0x12c>

	default:
		break;
 801b07a:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801b07c:	8afb      	ldrh	r3, [r7, #22]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d106      	bne.n	801b090 <_doTask+0x140>
 801b082:	89fb      	ldrh	r3, [r7, #14]
 801b084:	461a      	mov	r2, r3
 801b086:	0092      	lsls	r2, r2, #2
 801b088:	4413      	add	r3, r2
 801b08a:	005b      	lsls	r3, r3, #1
 801b08c:	b29b      	uxth	r3, r3
 801b08e:	e000      	b.n	801b092 <_doTask+0x142>
 801b090:	8afb      	ldrh	r3, [r7, #22]
}
 801b092:	4618      	mov	r0, r3
 801b094:	3718      	adds	r7, #24
 801b096:	46bd      	mov	sp, r7
 801b098:	bd80      	pop	{r7, pc}
 801b09a:	bf00      	nop

0801b09c <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b086      	sub	sp, #24
 801b0a0:	af02      	add	r7, sp, #8
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	460b      	mov	r3, r1
 801b0a6:	607a      	str	r2, [r7, #4]
 801b0a8:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d002      	beq.n	801b0b6 <pifBuzzer_Init+0x1a>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d104      	bne.n	801b0c0 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801b0b6:	4b1a      	ldr	r3, [pc, #104]	; (801b120 <pifBuzzer_Init+0x84>)
 801b0b8:	2201      	movs	r2, #1
 801b0ba:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	e02a      	b.n	801b116 <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801b0c0:	221c      	movs	r2, #28
 801b0c2:	2100      	movs	r1, #0
 801b0c4:	68f8      	ldr	r0, [r7, #12]
 801b0c6:	f008 f98f 	bl	80233e8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	9300      	str	r3, [sp, #0]
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	4a14      	ldr	r2, [pc, #80]	; (801b124 <pifBuzzer_Init+0x88>)
 801b0d2:	2101      	movs	r1, #1
 801b0d4:	2004      	movs	r0, #4
 801b0d6:	f7f9 fb1d 	bl	8014714 <pifTaskManager_Add>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	689b      	ldr	r3, [r3, #8]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d101      	bne.n	801b0ec <pifBuzzer_Init+0x50>
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	e014      	b.n	801b116 <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	689b      	ldr	r3, [r3, #8]
 801b0f0:	4a0d      	ldr	r2, [pc, #52]	; (801b128 <pifBuzzer_Init+0x8c>)
 801b0f2:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801b0f4:	897b      	ldrh	r3, [r7, #10]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d106      	bne.n	801b108 <pifBuzzer_Init+0x6c>
 801b0fa:	4b0c      	ldr	r3, [pc, #48]	; (801b12c <pifBuzzer_Init+0x90>)
 801b0fc:	881b      	ldrh	r3, [r3, #0]
 801b0fe:	1c5a      	adds	r2, r3, #1
 801b100:	b291      	uxth	r1, r2
 801b102:	4a0a      	ldr	r2, [pc, #40]	; (801b12c <pifBuzzer_Init+0x90>)
 801b104:	8011      	strh	r1, [r2, #0]
 801b106:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	897a      	ldrh	r2, [r7, #10]
 801b10c:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	687a      	ldr	r2, [r7, #4]
 801b112:	619a      	str	r2, [r3, #24]
    return TRUE;
 801b114:	2301      	movs	r3, #1
}
 801b116:	4618      	mov	r0, r3
 801b118:	3710      	adds	r7, #16
 801b11a:	46bd      	mov	sp, r7
 801b11c:	bd80      	pop	{r7, pc}
 801b11e:	bf00      	nop
 801b120:	20001db8 	.word	0x20001db8
 801b124:	0801af51 	.word	0x0801af51
 801b128:	08027dc0 	.word	0x08027dc0
 801b12c:	20000128 	.word	0x20000128

0801b130 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801b130:	b480      	push	{r7}
 801b132:	b083      	sub	sp, #12
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
 801b138:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	689b      	ldr	r3, [r3, #8]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d101      	bne.n	801b146 <pifBuzzer_Start+0x16>
 801b142:	2300      	movs	r3, #0
 801b144:	e010      	b.n	801b168 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	683a      	ldr	r2, [r7, #0]
 801b14a:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2200      	movs	r2, #0
 801b150:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	2200      	movs	r2, #0
 801b156:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2201      	movs	r2, #1
 801b15c:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	689b      	ldr	r3, [r3, #8]
 801b162:	2200      	movs	r2, #0
 801b164:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801b166:	2301      	movs	r3, #1
}
 801b168:	4618      	mov	r0, r3
 801b16a:	370c      	adds	r7, #12
 801b16c:	46bd      	mov	sp, r7
 801b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b172:	4770      	bx	lr

0801b174 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801b174:	b480      	push	{r7}
 801b176:	b083      	sub	sp, #12
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2204      	movs	r2, #4
 801b180:	731a      	strb	r2, [r3, #12]
}
 801b182:	bf00      	nop
 801b184:	370c      	adds	r7, #12
 801b186:	46bd      	mov	sp, r7
 801b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18c:	4770      	bx	lr

0801b18e <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	b086      	sub	sp, #24
 801b192:	af02      	add	r7, sp, #8
 801b194:	60f8      	str	r0, [r7, #12]
 801b196:	60b9      	str	r1, [r7, #8]
 801b198:	607a      	str	r2, [r7, #4]
 801b19a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	7a19      	ldrb	r1, [r3, #8]
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	0a1b      	lsrs	r3, r3, #8
 801b1a4:	b2da      	uxtb	r2, r3
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	430a      	orrs	r2, r1
 801b1ac:	b2d2      	uxtb	r2, r2
 801b1ae:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	6858      	ldr	r0, [r3, #4]
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	b2d9      	uxtb	r1, r3
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	9300      	str	r3, [sp, #0]
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	2201      	movs	r2, #1
 801b1c0:	f7f7 f90c 	bl	80123dc <pifI2cDevice_Read>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d101      	bne.n	801b1ce <_actStorageI2c_Read_1+0x40>
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	e000      	b.n	801b1d0 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801b1ce:	2301      	movs	r3, #1
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	3710      	adds	r7, #16
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd80      	pop	{r7, pc}

0801b1d8 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b086      	sub	sp, #24
 801b1dc:	af02      	add	r7, sp, #8
 801b1de:	60f8      	str	r0, [r7, #12]
 801b1e0:	60b9      	str	r1, [r7, #8]
 801b1e2:	607a      	str	r2, [r7, #4]
 801b1e4:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	7a19      	ldrb	r1, [r3, #8]
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	0a1b      	lsrs	r3, r3, #8
 801b1ee:	b2da      	uxtb	r2, r3
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	685b      	ldr	r3, [r3, #4]
 801b1f4:	430a      	orrs	r2, r1
 801b1f6:	b2d2      	uxtb	r2, r2
 801b1f8:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	6858      	ldr	r0, [r3, #4]
 801b1fe:	68bb      	ldr	r3, [r7, #8]
 801b200:	b2d9      	uxtb	r1, r3
 801b202:	683b      	ldr	r3, [r7, #0]
 801b204:	9300      	str	r3, [sp, #0]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	2201      	movs	r2, #1
 801b20a:	f7f7 f9f1 	bl	80125f0 <pifI2cDevice_Write>
 801b20e:	4603      	mov	r3, r0
 801b210:	2b00      	cmp	r3, #0
 801b212:	d101      	bne.n	801b218 <_actStorageI2c_Write_1+0x40>
 801b214:	2300      	movs	r3, #0
 801b216:	e009      	b.n	801b22c <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	7a5b      	ldrb	r3, [r3, #9]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d004      	beq.n	801b22a <_actStorageI2c_Write_1+0x52>
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	7a5b      	ldrb	r3, [r3, #9]
 801b224:	4618      	mov	r0, r3
 801b226:	f7f9 fd97 	bl	8014d58 <pifTaskManager_YieldMs>
	return TRUE;
 801b22a:	2301      	movs	r3, #1
}
 801b22c:	4618      	mov	r0, r3
 801b22e:	3710      	adds	r7, #16
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}

0801b234 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b086      	sub	sp, #24
 801b238:	af02      	add	r7, sp, #8
 801b23a:	60f8      	str	r0, [r7, #12]
 801b23c:	60b9      	str	r1, [r7, #8]
 801b23e:	607a      	str	r2, [r7, #4]
 801b240:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	7a19      	ldrb	r1, [r3, #8]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	0c1b      	lsrs	r3, r3, #16
 801b24a:	b2da      	uxtb	r2, r3
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	685b      	ldr	r3, [r3, #4]
 801b250:	430a      	orrs	r2, r1
 801b252:	b2d2      	uxtb	r2, r2
 801b254:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	6858      	ldr	r0, [r3, #4]
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	b299      	uxth	r1, r3
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	9300      	str	r3, [sp, #0]
 801b262:	68bb      	ldr	r3, [r7, #8]
 801b264:	2202      	movs	r2, #2
 801b266:	f7f7 f8b9 	bl	80123dc <pifI2cDevice_Read>
 801b26a:	4603      	mov	r3, r0
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d101      	bne.n	801b274 <_actStorageI2c_Read_2+0x40>
 801b270:	2300      	movs	r3, #0
 801b272:	e000      	b.n	801b276 <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801b274:	2301      	movs	r3, #1
}
 801b276:	4618      	mov	r0, r3
 801b278:	3710      	adds	r7, #16
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd80      	pop	{r7, pc}

0801b27e <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b27e:	b580      	push	{r7, lr}
 801b280:	b086      	sub	sp, #24
 801b282:	af02      	add	r7, sp, #8
 801b284:	60f8      	str	r0, [r7, #12]
 801b286:	60b9      	str	r1, [r7, #8]
 801b288:	607a      	str	r2, [r7, #4]
 801b28a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	7a19      	ldrb	r1, [r3, #8]
 801b290:	68bb      	ldr	r3, [r7, #8]
 801b292:	0c1b      	lsrs	r3, r3, #16
 801b294:	b2da      	uxtb	r2, r3
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	430a      	orrs	r2, r1
 801b29c:	b2d2      	uxtb	r2, r2
 801b29e:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	6858      	ldr	r0, [r3, #4]
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	b299      	uxth	r1, r3
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	9300      	str	r3, [sp, #0]
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2202      	movs	r2, #2
 801b2b0:	f7f7 f99e 	bl	80125f0 <pifI2cDevice_Write>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d101      	bne.n	801b2be <_actStorageI2c_Write_2+0x40>
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	e009      	b.n	801b2d2 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	7a5b      	ldrb	r3, [r3, #9]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d004      	beq.n	801b2d0 <_actStorageI2c_Write_2+0x52>
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	7a5b      	ldrb	r3, [r3, #9]
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7f9 fd44 	bl	8014d58 <pifTaskManager_YieldMs>
	return TRUE;
 801b2d0:	2301      	movs	r3, #1
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3710      	adds	r7, #16
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bd80      	pop	{r7, pc}
	...

0801b2dc <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b084      	sub	sp, #16
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	60f8      	str	r0, [r7, #12]
 801b2e4:	60b9      	str	r1, [r7, #8]
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	461a      	mov	r2, r3
 801b2ea:	460b      	mov	r3, r1
 801b2ec:	71fb      	strb	r3, [r7, #7]
 801b2ee:	4613      	mov	r3, r2
 801b2f0:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d002      	beq.n	801b2fe <pifStorage_AttachI2c+0x22>
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d104      	bne.n	801b308 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801b2fe:	4b1c      	ldr	r3, [pc, #112]	; (801b370 <pifStorage_AttachI2c+0x94>)
 801b300:	2201      	movs	r2, #1
 801b302:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b304:	2300      	movs	r3, #0
 801b306:	e02f      	b.n	801b368 <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 801b308:	68b8      	ldr	r0, [r7, #8]
 801b30a:	f7f7 f82f 	bl	801236c <pifI2cPort_AddDevice>
 801b30e:	4602      	mov	r2, r0
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	685b      	ldr	r3, [r3, #4]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d101      	bne.n	801b320 <pifStorage_AttachI2c+0x44>
 801b31c:	2300      	movs	r3, #0
 801b31e:	e023      	b.n	801b368 <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	79fa      	ldrb	r2, [r7, #7]
 801b324:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	685b      	ldr	r3, [r3, #4]
 801b32a:	79fa      	ldrb	r2, [r7, #7]
 801b32c:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	7e3a      	ldrb	r2, [r7, #24]
 801b332:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801b334:	79bb      	ldrb	r3, [r7, #6]
 801b336:	2b01      	cmp	r3, #1
 801b338:	d007      	beq.n	801b34a <pifStorage_AttachI2c+0x6e>
 801b33a:	2b02      	cmp	r3, #2
 801b33c:	d00c      	beq.n	801b358 <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801b33e:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801b340:	68f8      	ldr	r0, [r7, #12]
 801b342:	f000 f81f 	bl	801b384 <pifStorage_DetachI2c>
	return FALSE;
 801b346:	2300      	movs	r3, #0
 801b348:	e00e      	b.n	801b368 <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	4a09      	ldr	r2, [pc, #36]	; (801b374 <pifStorage_AttachI2c+0x98>)
 801b34e:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	4a09      	ldr	r2, [pc, #36]	; (801b378 <pifStorage_AttachI2c+0x9c>)
 801b354:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b356:	e006      	b.n	801b366 <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	4a08      	ldr	r2, [pc, #32]	; (801b37c <pifStorage_AttachI2c+0xa0>)
 801b35c:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	4a07      	ldr	r2, [pc, #28]	; (801b380 <pifStorage_AttachI2c+0xa4>)
 801b362:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b364:	bf00      	nop
	return TRUE;
 801b366:	2301      	movs	r3, #1
}
 801b368:	4618      	mov	r0, r3
 801b36a:	3710      	adds	r7, #16
 801b36c:	46bd      	mov	sp, r7
 801b36e:	bd80      	pop	{r7, pc}
 801b370:	20001db8 	.word	0x20001db8
 801b374:	0801b18f 	.word	0x0801b18f
 801b378:	0801b1d9 	.word	0x0801b1d9
 801b37c:	0801b235 	.word	0x0801b235
 801b380:	0801b27f 	.word	0x0801b27f

0801b384 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b082      	sub	sp, #8
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	685b      	ldr	r3, [r3, #4]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d00b      	beq.n	801b3ac <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	685b      	ldr	r3, [r3, #4]
 801b398:	685a      	ldr	r2, [r3, #4]
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	685b      	ldr	r3, [r3, #4]
 801b39e:	4619      	mov	r1, r3
 801b3a0:	4610      	mov	r0, r2
 801b3a2:	f7f7 f807 	bl	80123b4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801b3b8:	bf00      	nop
 801b3ba:	3708      	adds	r7, #8
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b082      	sub	sp, #8
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	68db      	ldr	r3, [r3, #12]
 801b3cc:	6878      	ldr	r0, [r7, #4]
 801b3ce:	4798      	blx	r3
 801b3d0:	4603      	mov	r3, r0
}
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	3708      	adds	r7, #8
 801b3d6:	46bd      	mov	sp, r7
 801b3d8:	bd80      	pop	{r7, pc}

0801b3da <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801b3da:	b580      	push	{r7, lr}
 801b3dc:	b082      	sub	sp, #8
 801b3de:	af00      	add	r7, sp, #0
 801b3e0:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	691b      	ldr	r3, [r3, #16]
 801b3e6:	6878      	ldr	r0, [r7, #4]
 801b3e8:	4798      	blx	r3
 801b3ea:	4603      	mov	r3, r0
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3708      	adds	r7, #8
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	460b      	mov	r3, r1
 801b3fe:	807b      	strh	r3, [r7, #2]
 801b400:	4613      	mov	r3, r2
 801b402:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	695b      	ldr	r3, [r3, #20]
 801b408:	883a      	ldrh	r2, [r7, #0]
 801b40a:	8879      	ldrh	r1, [r7, #2]
 801b40c:	6878      	ldr	r0, [r7, #4]
 801b40e:	4798      	blx	r3
 801b410:	4603      	mov	r3, r0
}
 801b412:	4618      	mov	r0, r3
 801b414:	3708      	adds	r7, #8
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}

0801b41a <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801b41a:	b580      	push	{r7, lr}
 801b41c:	b082      	sub	sp, #8
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
 801b422:	460b      	mov	r3, r1
 801b424:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	69db      	ldr	r3, [r3, #28]
 801b42a:	887a      	ldrh	r2, [r7, #2]
 801b42c:	4611      	mov	r1, r2
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	4798      	blx	r3
 801b432:	4603      	mov	r3, r0
}
 801b434:	4618      	mov	r0, r3
 801b436:	3708      	adds	r7, #8
 801b438:	46bd      	mov	sp, r7
 801b43a:	bd80      	pop	{r7, pc}

0801b43c <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b43c:	b590      	push	{r4, r7, lr}
 801b43e:	b085      	sub	sp, #20
 801b440:	af00      	add	r7, sp, #0
 801b442:	60f8      	str	r0, [r7, #12]
 801b444:	60b9      	str	r1, [r7, #8]
 801b446:	607a      	str	r2, [r7, #4]
 801b448:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	6a1c      	ldr	r4, [r3, #32]
 801b44e:	683b      	ldr	r3, [r7, #0]
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	68b9      	ldr	r1, [r7, #8]
 801b454:	68f8      	ldr	r0, [r7, #12]
 801b456:	47a0      	blx	r4
 801b458:	4603      	mov	r3, r0
}
 801b45a:	4618      	mov	r0, r3
 801b45c:	3714      	adds	r7, #20
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd90      	pop	{r4, r7, pc}

0801b462 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b462:	b590      	push	{r4, r7, lr}
 801b464:	b085      	sub	sp, #20
 801b466:	af00      	add	r7, sp, #0
 801b468:	60f8      	str	r0, [r7, #12]
 801b46a:	60b9      	str	r1, [r7, #8]
 801b46c:	607a      	str	r2, [r7, #4]
 801b46e:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	687a      	ldr	r2, [r7, #4]
 801b478:	68b9      	ldr	r1, [r7, #8]
 801b47a:	68f8      	ldr	r0, [r7, #12]
 801b47c:	47a0      	blx	r4
 801b47e:	4603      	mov	r3, r0
}
 801b480:	4618      	mov	r0, r3
 801b482:	3714      	adds	r7, #20
 801b484:	46bd      	mov	sp, r7
 801b486:	bd90      	pop	{r4, r7, pc}

0801b488 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801b488:	b480      	push	{r7}
 801b48a:	b085      	sub	sp, #20
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b494:	899b      	ldrh	r3, [r3, #12]
 801b496:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801b498:	89fb      	ldrh	r3, [r7, #14]
 801b49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b49e:	4293      	cmp	r3, r2
 801b4a0:	d105      	bne.n	801b4ae <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801b4a2:	4b0c      	ldr	r3, [pc, #48]	; (801b4d4 <_getNewDataNode+0x4c>)
 801b4a4:	2204      	movs	r2, #4
 801b4a6:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801b4a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b4ac:	e00c      	b.n	801b4c8 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b4b2:	89fa      	ldrh	r2, [r7, #14]
 801b4b4:	4613      	mov	r3, r2
 801b4b6:	005b      	lsls	r3, r3, #1
 801b4b8:	4413      	add	r3, r2
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	18ca      	adds	r2, r1, r3
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4c2:	88d2      	ldrh	r2, [r2, #6]
 801b4c4:	819a      	strh	r2, [r3, #12]
	return node;
 801b4c6:	89fb      	ldrh	r3, [r7, #14]
}
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	3714      	adds	r7, #20
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d2:	4770      	bx	lr
 801b4d4:	20001db8 	.word	0x20001db8

0801b4d8 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801b4d8:	b590      	push	{r4, r7, lr}
 801b4da:	b087      	sub	sp, #28
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	60f8      	str	r0, [r7, #12]
 801b4e0:	60b9      	str	r1, [r7, #8]
 801b4e2:	607a      	str	r2, [r7, #4]
 801b4e4:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	617b      	str	r3, [r7, #20]
	while (size) {
 801b4ea:	e01d      	b.n	801b528 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801b4ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b4ee:	683a      	ldr	r2, [r7, #0]
 801b4f0:	4293      	cmp	r3, r2
 801b4f2:	bf28      	it	cs
 801b4f4:	4613      	movcs	r3, r2
 801b4f6:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b4fc:	68f8      	ldr	r0, [r7, #12]
 801b4fe:	68ba      	ldr	r2, [r7, #8]
 801b500:	697b      	ldr	r3, [r7, #20]
 801b502:	18d1      	adds	r1, r2, r3
 801b504:	687a      	ldr	r2, [r7, #4]
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	441a      	add	r2, r3
 801b50a:	693b      	ldr	r3, [r7, #16]
 801b50c:	47a0      	blx	r4
 801b50e:	4603      	mov	r3, r0
 801b510:	2b00      	cmp	r3, #0
 801b512:	d101      	bne.n	801b518 <_readData+0x40>
 801b514:	2300      	movs	r3, #0
 801b516:	e00b      	b.n	801b530 <_readData+0x58>

		ptr += len;
 801b518:	697a      	ldr	r2, [r7, #20]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	4413      	add	r3, r2
 801b51e:	617b      	str	r3, [r7, #20]
		size -= len;
 801b520:	683a      	ldr	r2, [r7, #0]
 801b522:	693b      	ldr	r3, [r7, #16]
 801b524:	1ad3      	subs	r3, r2, r3
 801b526:	603b      	str	r3, [r7, #0]
	while (size) {
 801b528:	683b      	ldr	r3, [r7, #0]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d1de      	bne.n	801b4ec <_readData+0x14>
	}
	return TRUE;
 801b52e:	2301      	movs	r3, #1
}
 801b530:	4618      	mov	r0, r3
 801b532:	371c      	adds	r7, #28
 801b534:	46bd      	mov	sp, r7
 801b536:	bd90      	pop	{r4, r7, pc}

0801b538 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b538:	b590      	push	{r4, r7, lr}
 801b53a:	b089      	sub	sp, #36	; 0x24
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	60f8      	str	r0, [r7, #12]
 801b540:	60b9      	str	r1, [r7, #8]
 801b542:	607a      	str	r2, [r7, #4]
 801b544:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b54a:	88db      	ldrh	r3, [r3, #6]
 801b54c:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801b54e:	2300      	movs	r3, #0
 801b550:	61fb      	str	r3, [r7, #28]
	while (size) {
 801b552:	e01d      	b.n	801b590 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801b554:	8b7b      	ldrh	r3, [r7, #26]
 801b556:	683a      	ldr	r2, [r7, #0]
 801b558:	4293      	cmp	r3, r2
 801b55a:	bf28      	it	cs
 801b55c:	4613      	movcs	r3, r2
 801b55e:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b564:	68f8      	ldr	r0, [r7, #12]
 801b566:	68ba      	ldr	r2, [r7, #8]
 801b568:	69fb      	ldr	r3, [r7, #28]
 801b56a:	18d1      	adds	r1, r2, r3
 801b56c:	687a      	ldr	r2, [r7, #4]
 801b56e:	69fb      	ldr	r3, [r7, #28]
 801b570:	441a      	add	r2, r3
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	47a0      	blx	r4
 801b576:	4603      	mov	r3, r0
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <_writeData+0x48>
 801b57c:	2300      	movs	r3, #0
 801b57e:	e00b      	b.n	801b598 <_writeData+0x60>

		ptr += len;
 801b580:	69fa      	ldr	r2, [r7, #28]
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	4413      	add	r3, r2
 801b586:	61fb      	str	r3, [r7, #28]
		size -= len;
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	697b      	ldr	r3, [r7, #20]
 801b58c:	1ad3      	subs	r3, r2, r3
 801b58e:	603b      	str	r3, [r7, #0]
	while (size) {
 801b590:	683b      	ldr	r3, [r7, #0]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d1de      	bne.n	801b554 <_writeData+0x1c>
	}
	return TRUE;
 801b596:	2301      	movs	r3, #1
}
 801b598:	4618      	mov	r0, r3
 801b59a:	3724      	adds	r7, #36	; 0x24
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd90      	pop	{r4, r7, pc}

0801b5a0 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b082      	sub	sp, #8
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	6078      	str	r0, [r7, #4]
 801b5a8:	460b      	mov	r3, r1
 801b5aa:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d104      	bne.n	801b5bc <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801b5b2:	4b18      	ldr	r3, [pc, #96]	; (801b614 <pifStorageVar_Init+0x74>)
 801b5b4:	2201      	movs	r2, #1
 801b5b6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b5b8:	2300      	movs	r3, #0
 801b5ba:	e027      	b.n	801b60c <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801b5bc:	2248      	movs	r2, #72	; 0x48
 801b5be:	2100      	movs	r1, #0
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	f007 ff11 	bl	80233e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801b5c6:	887b      	ldrh	r3, [r7, #2]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d106      	bne.n	801b5da <pifStorageVar_Init+0x3a>
 801b5cc:	4b12      	ldr	r3, [pc, #72]	; (801b618 <pifStorageVar_Init+0x78>)
 801b5ce:	881b      	ldrh	r3, [r3, #0]
 801b5d0:	1c5a      	adds	r2, r3, #1
 801b5d2:	b291      	uxth	r1, r2
 801b5d4:	4a10      	ldr	r2, [pc, #64]	; (801b618 <pifStorageVar_Init+0x78>)
 801b5d6:	8011      	strh	r1, [r2, #0]
 801b5d8:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	887a      	ldrh	r2, [r7, #2]
 801b5de:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	4a0e      	ldr	r2, [pc, #56]	; (801b61c <pifStorageVar_Init+0x7c>)
 801b5e4:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	4a0d      	ldr	r2, [pc, #52]	; (801b620 <pifStorageVar_Init+0x80>)
 801b5ea:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	4a0d      	ldr	r2, [pc, #52]	; (801b624 <pifStorageVar_Init+0x84>)
 801b5f0:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	4a0c      	ldr	r2, [pc, #48]	; (801b628 <pifStorageVar_Init+0x88>)
 801b5f6:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	4a0c      	ldr	r2, [pc, #48]	; (801b62c <pifStorageVar_Init+0x8c>)
 801b5fc:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	4a0b      	ldr	r2, [pc, #44]	; (801b630 <pifStorageVar_Init+0x90>)
 801b602:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	4a0b      	ldr	r2, [pc, #44]	; (801b634 <pifStorageVar_Init+0x94>)
 801b608:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801b60a:	2301      	movs	r3, #1
}
 801b60c:	4618      	mov	r0, r3
 801b60e:	3708      	adds	r7, #8
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	20001db8 	.word	0x20001db8
 801b618:	20000128 	.word	0x20000128
 801b61c:	0801b863 	.word	0x0801b863
 801b620:	0801b87d 	.word	0x0801b87d
 801b624:	0801ba1d 	.word	0x0801ba1d
 801b628:	0801bcc9 	.word	0x0801bcc9
 801b62c:	0801bde5 	.word	0x0801bde5
 801b630:	0801be79 	.word	0x0801be79
 801b634:	0801bed1 	.word	0x0801bed1

0801b638 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b082      	sub	sp, #8
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b644:	2b00      	cmp	r3, #0
 801b646:	d007      	beq.n	801b658 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b64c:	4618      	mov	r0, r3
 801b64e:	f007 feb5 	bl	80233bc <free>
        p_owner->__p_info_buffer = NULL;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	2200      	movs	r2, #0
 801b656:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	2200      	movs	r2, #0
 801b65c:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	2200      	movs	r2, #0
 801b662:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	2200      	movs	r2, #0
 801b668:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	2200      	movs	r2, #0
 801b66e:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	2200      	movs	r2, #0
 801b674:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	2200      	movs	r2, #0
 801b67a:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	2200      	movs	r2, #0
 801b680:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b682:	bf00      	nop
 801b684:	3708      	adds	r7, #8
 801b686:	46bd      	mov	sp, r7
 801b688:	bd80      	pop	{r7, pc}
	...

0801b68c <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801b68c:	b590      	push	{r4, r7, lr}
 801b68e:	b089      	sub	sp, #36	; 0x24
 801b690:	af02      	add	r7, sp, #8
 801b692:	60f8      	str	r0, [r7, #12]
 801b694:	607a      	str	r2, [r7, #4]
 801b696:	461a      	mov	r2, r3
 801b698:	460b      	mov	r3, r1
 801b69a:	817b      	strh	r3, [r7, #10]
 801b69c:	4613      	mov	r3, r2
 801b69e:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d008      	beq.n	801b6b8 <pifStorageVar_SetMedia+0x2c>
 801b6a6:	897b      	ldrh	r3, [r7, #10]
 801b6a8:	2b0f      	cmp	r3, #15
 801b6aa:	d905      	bls.n	801b6b8 <pifStorageVar_SetMedia+0x2c>
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d002      	beq.n	801b6b8 <pifStorageVar_SetMedia+0x2c>
 801b6b2:	7a7b      	ldrb	r3, [r7, #9]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d104      	bne.n	801b6c2 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801b6b8:	4b5c      	ldr	r3, [pc, #368]	; (801b82c <pifStorageVar_SetMedia+0x1a0>)
 801b6ba:	2201      	movs	r2, #1
 801b6bc:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b6be:	2300      	movs	r3, #0
 801b6c0:	e0af      	b.n	801b822 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801b6c2:	897b      	ldrh	r3, [r7, #10]
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6ca:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d003      	beq.n	801b6da <pifStorageVar_SetMedia+0x4e>
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b6d8:	d304      	bcc.n	801b6e4 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801b6da:	4b54      	ldr	r3, [pc, #336]	; (801b82c <pifStorageVar_SetMedia+0x1a0>)
 801b6dc:	2201      	movs	r2, #1
 801b6de:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	e09e      	b.n	801b822 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801b6e4:	7a7a      	ldrb	r2, [r7, #9]
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	005b      	lsls	r3, r3, #1
 801b6ea:	4413      	add	r3, r2
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	461a      	mov	r2, r3
 801b6f0:	897b      	ldrh	r3, [r7, #10]
 801b6f2:	4413      	add	r3, r2
 801b6f4:	f103 020f 	add.w	r2, r3, #15
 801b6f8:	897b      	ldrh	r3, [r7, #10]
 801b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6fe:	b29a      	uxth	r2, r3
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b708:	461a      	mov	r2, r3
 801b70a:	897b      	ldrh	r3, [r7, #10]
 801b70c:	fb02 f303 	mul.w	r3, r2, r3
 801b710:	461a      	mov	r2, r3
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b71a:	4619      	mov	r1, r3
 801b71c:	2001      	movs	r0, #1
 801b71e:	f007 fe13 	bl	8023348 <calloc>
 801b722:	4603      	mov	r3, r0
 801b724:	461a      	mov	r2, r3
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d104      	bne.n	801b73c <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801b732:	4b3e      	ldr	r3, [pc, #248]	; (801b82c <pifStorageVar_SetMedia+0x1a0>)
 801b734:	2203      	movs	r2, #3
 801b736:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b738:	2300      	movs	r3, #0
 801b73a:	e072      	b.n	801b822 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b744:	897b      	ldrh	r3, [r7, #10]
 801b746:	9300      	str	r3, [sp, #0]
 801b748:	4613      	mov	r3, r2
 801b74a:	2200      	movs	r2, #0
 801b74c:	68f8      	ldr	r0, [r7, #12]
 801b74e:	f7ff fec3 	bl	801b4d8 <_readData>
 801b752:	4603      	mov	r3, r0
 801b754:	2b00      	cmp	r3, #0
 801b756:	d108      	bne.n	801b76a <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801b758:	4b34      	ldr	r3, [pc, #208]	; (801b82c <pifStorageVar_SetMedia+0x1a0>)
 801b75a:	220d      	movs	r2, #13
 801b75c:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801b75e:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b764:	2b00      	cmp	r3, #0
 801b766:	d05b      	beq.n	801b820 <pifStorageVar_SetMedia+0x194>
 801b768:	e052      	b.n	801b810 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b776:	f103 0210 	add.w	r2, r3, #16
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b782:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b784:	693b      	ldr	r3, [r7, #16]
 801b786:	781b      	ldrb	r3, [r3, #0]
 801b788:	2b70      	cmp	r3, #112	; 0x70
 801b78a:	d121      	bne.n	801b7d0 <pifStorageVar_SetMedia+0x144>
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	785b      	ldrb	r3, [r3, #1]
 801b790:	2b69      	cmp	r3, #105	; 0x69
 801b792:	d11d      	bne.n	801b7d0 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b794:	693b      	ldr	r3, [r7, #16]
 801b796:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b798:	2b66      	cmp	r3, #102	; 0x66
 801b79a:	d119      	bne.n	801b7d0 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b79c:	693b      	ldr	r3, [r7, #16]
 801b79e:	78db      	ldrb	r3, [r3, #3]
 801b7a0:	2b73      	cmp	r3, #115	; 0x73
 801b7a2:	d115      	bne.n	801b7d0 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801b7a4:	693b      	ldr	r3, [r7, #16]
 801b7a6:	795b      	ldrb	r3, [r3, #5]
 801b7a8:	7a7a      	ldrb	r2, [r7, #9]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d112      	bne.n	801b7d4 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801b7ae:	693b      	ldr	r3, [r7, #16]
 801b7b0:	89dc      	ldrh	r4, [r3, #14]
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7b6:	210a      	movs	r1, #10
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	f7f6 fac8 	bl	8011d4e <pifCrc16>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	429c      	cmp	r4, r3
 801b7c2:	d109      	bne.n	801b7d8 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	2201      	movs	r2, #1
 801b7c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b7cc:	2301      	movs	r3, #1
 801b7ce:	e028      	b.n	801b822 <pifStorageVar_SetMedia+0x196>
        goto set;
 801b7d0:	bf00      	nop
 801b7d2:	e002      	b.n	801b7da <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b7d4:	bf00      	nop
 801b7d6:	e000      	b.n	801b7da <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b7d8:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	2270      	movs	r2, #112	; 0x70
 801b7de:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	2269      	movs	r2, #105	; 0x69
 801b7e4:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801b7e6:	693b      	ldr	r3, [r7, #16]
 801b7e8:	2266      	movs	r2, #102	; 0x66
 801b7ea:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	2273      	movs	r2, #115	; 0x73
 801b7f0:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801b7f2:	693b      	ldr	r3, [r7, #16]
 801b7f4:	2201      	movs	r2, #1
 801b7f6:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	7a7a      	ldrb	r2, [r7, #9]
 801b7fc:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801b7fe:	693b      	ldr	r3, [r7, #16]
 801b800:	897a      	ldrh	r2, [r7, #10]
 801b802:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801b804:	697b      	ldr	r3, [r7, #20]
 801b806:	b29a      	uxth	r2, r3
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801b80c:	2301      	movs	r3, #1
 801b80e:	e008      	b.n	801b822 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b814:	4618      	mov	r0, r3
 801b816:	f007 fdd1 	bl	80233bc <free>
		p_owner->__p_info_buffer = NULL;
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	2200      	movs	r2, #0
 801b81e:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801b820:	2300      	movs	r3, #0
}
 801b822:	4618      	mov	r0, r3
 801b824:	371c      	adds	r7, #28
 801b826:	46bd      	mov	sp, r7
 801b828:	bd90      	pop	{r4, r7, pc}
 801b82a:	bf00      	nop
 801b82c:	20001db8 	.word	0x20001db8

0801b830 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b830:	b580      	push	{r7, lr}
 801b832:	b086      	sub	sp, #24
 801b834:	af02      	add	r7, sp, #8
 801b836:	60f8      	str	r0, [r7, #12]
 801b838:	60b9      	str	r1, [r7, #8]
 801b83a:	4611      	mov	r1, r2
 801b83c:	461a      	mov	r2, r3
 801b83e:	460b      	mov	r3, r1
 801b840:	71fb      	strb	r3, [r7, #7]
 801b842:	4613      	mov	r3, r2
 801b844:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801b846:	68f8      	ldr	r0, [r7, #12]
 801b848:	79b9      	ldrb	r1, [r7, #6]
 801b84a:	79fa      	ldrb	r2, [r7, #7]
 801b84c:	7e3b      	ldrb	r3, [r7, #24]
 801b84e:	9300      	str	r3, [sp, #0]
 801b850:	460b      	mov	r3, r1
 801b852:	68b9      	ldr	r1, [r7, #8]
 801b854:	f7ff fd42 	bl	801b2dc <pifStorage_AttachI2c>
 801b858:	4603      	mov	r3, r0
}
 801b85a:	4618      	mov	r0, r3
 801b85c:	3710      	adds	r7, #16
 801b85e:	46bd      	mov	sp, r7
 801b860:	bd80      	pop	{r7, pc}

0801b862 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801b862:	b480      	push	{r7}
 801b864:	b083      	sub	sp, #12
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b870:	4618      	mov	r0, r3
 801b872:	370c      	adds	r7, #12
 801b874:	46bd      	mov	sp, r7
 801b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b87a:	4770      	bx	lr

0801b87c <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801b87c:	b590      	push	{r4, r7, lr}
 801b87e:	b08d      	sub	sp, #52	; 0x34
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b88c:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b890:	2b00      	cmp	r3, #0
 801b892:	d104      	bne.n	801b89e <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801b894:	4b60      	ldr	r3, [pc, #384]	; (801ba18 <pifStorageVar_Format+0x19c>)
 801b896:	2201      	movs	r2, #1
 801b898:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b89a:	2300      	movs	r3, #0
 801b89c:	e0b8      	b.n	801ba10 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801b89e:	6a3b      	ldr	r3, [r7, #32]
 801b8a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b8a4:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801b8a6:	6a3b      	ldr	r3, [r7, #32]
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801b8ac:	210a      	movs	r1, #10
 801b8ae:	6a38      	ldr	r0, [r7, #32]
 801b8b0:	f7f6 fa4d 	bl	8011d4e <pifCrc16>
 801b8b4:	4603      	mov	r3, r0
 801b8b6:	461a      	mov	r2, r3
 801b8b8:	6a3b      	ldr	r3, [r7, #32]
 801b8ba:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8c0:	f103 0010 	add.w	r0, r3, #16
 801b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8c8:	3b10      	subs	r3, #16
 801b8ca:	461a      	mov	r2, r3
 801b8cc:	21ff      	movs	r1, #255	; 0xff
 801b8ce:	f007 fd8b 	bl	80233e8 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	62bb      	str	r3, [r7, #40]	; 0x28
 801b8d6:	e019      	b.n	801b90c <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b8de:	4613      	mov	r3, r2
 801b8e0:	005b      	lsls	r3, r3, #1
 801b8e2:	4413      	add	r3, r2
 801b8e4:	009b      	lsls	r3, r3, #2
 801b8e6:	440b      	add	r3, r1
 801b8e8:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	3301      	adds	r3, #1
 801b8f0:	b29a      	uxth	r2, r3
 801b8f2:	69fb      	ldr	r3, [r7, #28]
 801b8f4:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b8f6:	2106      	movs	r1, #6
 801b8f8:	69f8      	ldr	r0, [r7, #28]
 801b8fa:	f7f6 fa28 	bl	8011d4e <pifCrc16>
 801b8fe:	4603      	mov	r3, r0
 801b900:	461a      	mov	r2, r3
 801b902:	69fb      	ldr	r3, [r7, #28]
 801b904:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b908:	3301      	adds	r3, #1
 801b90a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b90c:	6a3b      	ldr	r3, [r7, #32]
 801b90e:	795b      	ldrb	r3, [r3, #5]
 801b910:	3b01      	subs	r3, #1
 801b912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b914:	429a      	cmp	r2, r3
 801b916:	dbdf      	blt.n	801b8d8 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b91c:	6a3b      	ldr	r3, [r7, #32]
 801b91e:	795b      	ldrb	r3, [r3, #5]
 801b920:	4619      	mov	r1, r3
 801b922:	460b      	mov	r3, r1
 801b924:	005b      	lsls	r3, r3, #1
 801b926:	440b      	add	r3, r1
 801b928:	009b      	lsls	r3, r3, #2
 801b92a:	3b0c      	subs	r3, #12
 801b92c:	4413      	add	r3, r2
 801b92e:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b930:	2106      	movs	r1, #6
 801b932:	69f8      	ldr	r0, [r7, #28]
 801b934:	f7f6 fa0b 	bl	8011d4e <pifCrc16>
 801b938:	4603      	mov	r3, r0
 801b93a:	461a      	mov	r2, r3
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b948:	2100      	movs	r1, #0
 801b94a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b94c:	f7ff fdf4 	bl	801b538 <_writeData>
 801b950:	4603      	mov	r3, r0
 801b952:	2b00      	cmp	r3, #0
 801b954:	d104      	bne.n	801b960 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801b956:	4b30      	ldr	r3, [pc, #192]	; (801ba18 <pifStorageVar_Format+0x19c>)
 801b958:	220d      	movs	r2, #13
 801b95a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b95c:	2300      	movs	r3, #0
 801b95e:	e057      	b.n	801ba10 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801b960:	2300      	movs	r3, #0
 801b962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b96a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b96e:	e046      	b.n	801b9fe <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801b970:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b974:	2b10      	cmp	r3, #16
 801b976:	bf28      	it	cs
 801b978:	2310      	movcs	r3, #16
 801b97a:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b980:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b984:	7efb      	ldrb	r3, [r7, #27]
 801b986:	f107 0108 	add.w	r1, r7, #8
 801b98a:	6878      	ldr	r0, [r7, #4]
 801b98c:	47a0      	blx	r4
 801b98e:	4603      	mov	r3, r0
 801b990:	2b00      	cmp	r3, #0
 801b992:	d104      	bne.n	801b99e <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801b994:	4b20      	ldr	r3, [pc, #128]	; (801ba18 <pifStorageVar_Format+0x19c>)
 801b996:	220d      	movs	r2, #13
 801b998:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801b99a:	2300      	movs	r3, #0
 801b99c:	e038      	b.n	801ba10 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801b99e:	2300      	movs	r3, #0
 801b9a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b9a4:	e01a      	b.n	801b9dc <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9aa:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801b9ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b9b2:	440a      	add	r2, r1
 801b9b4:	4413      	add	r3, r2
 801b9b6:	781a      	ldrb	r2, [r3, #0]
 801b9b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b9bc:	3330      	adds	r3, #48	; 0x30
 801b9be:	443b      	add	r3, r7
 801b9c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801b9c4:	429a      	cmp	r2, r3
 801b9c6:	d004      	beq.n	801b9d2 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801b9c8:	4b13      	ldr	r3, [pc, #76]	; (801ba18 <pifStorageVar_Format+0x19c>)
 801b9ca:	220f      	movs	r2, #15
 801b9cc:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	e01e      	b.n	801ba10 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801b9d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b9d6:	3301      	adds	r3, #1
 801b9d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b9dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b9e0:	7efb      	ldrb	r3, [r7, #27]
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d3df      	bcc.n	801b9a6 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801b9e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b9ea:	7efb      	ldrb	r3, [r7, #27]
 801b9ec:	4413      	add	r3, r2
 801b9ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801b9f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801b9f6:	7efb      	ldrb	r3, [r7, #27]
 801b9f8:	1ad3      	subs	r3, r2, r3
 801b9fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b9fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d1b4      	bne.n	801b970 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba08:	2201      	movs	r2, #1
 801ba0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801ba0e:	2301      	movs	r3, #1
}
 801ba10:	4618      	mov	r0, r3
 801ba12:	3734      	adds	r7, #52	; 0x34
 801ba14:	46bd      	mov	sp, r7
 801ba16:	bd90      	pop	{r4, r7, pc}
 801ba18:	20001db8 	.word	0x20001db8

0801ba1c <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b08a      	sub	sp, #40	; 0x28
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	6078      	str	r0, [r7, #4]
 801ba24:	460b      	mov	r3, r1
 801ba26:	807b      	strh	r3, [r7, #2]
 801ba28:	4613      	mov	r3, r2
 801ba2a:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801ba30:	69fb      	ldr	r3, [r7, #28]
 801ba32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba34:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801ba36:	69bb      	ldr	r3, [r7, #24]
 801ba38:	88db      	ldrh	r3, [r3, #6]
 801ba3a:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801ba3c:	883a      	ldrh	r2, [r7, #0]
 801ba3e:	8afb      	ldrh	r3, [r7, #22]
 801ba40:	4413      	add	r3, r2
 801ba42:	1e5a      	subs	r2, r3, #1
 801ba44:	8afb      	ldrh	r3, [r7, #22]
 801ba46:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba4a:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801ba4c:	69fb      	ldr	r3, [r7, #28]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d002      	beq.n	801ba58 <pifStorageVar_Create+0x3c>
 801ba52:	887b      	ldrh	r3, [r7, #2]
 801ba54:	2bff      	cmp	r3, #255	; 0xff
 801ba56:	d104      	bne.n	801ba62 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801ba58:	4b9a      	ldr	r3, [pc, #616]	; (801bcc4 <pifStorageVar_Create+0x2a8>)
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	e12b      	b.n	801bcba <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801ba62:	69fb      	ldr	r3, [r7, #28]
 801ba64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d104      	bne.n	801ba76 <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801ba6c:	4b95      	ldr	r3, [pc, #596]	; (801bcc4 <pifStorageVar_Create+0x2a8>)
 801ba6e:	220f      	movs	r2, #15
 801ba70:	701a      	strb	r2, [r3, #0]
		return NULL;
 801ba72:	2300      	movs	r3, #0
 801ba74:	e121      	b.n	801bcba <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801ba76:	69bb      	ldr	r3, [r7, #24]
 801ba78:	895b      	ldrh	r3, [r3, #10]
 801ba7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba7e:	4293      	cmp	r3, r2
 801ba80:	d127      	bne.n	801bad2 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801ba82:	69fb      	ldr	r3, [r7, #28]
 801ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba86:	891b      	ldrh	r3, [r3, #8]
 801ba88:	8aba      	ldrh	r2, [r7, #20]
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	d904      	bls.n	801ba98 <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801ba8e:	4b8d      	ldr	r3, [pc, #564]	; (801bcc4 <pifStorageVar_Create+0x2a8>)
 801ba90:	2204      	movs	r2, #4
 801ba92:	701a      	strb	r2, [r3, #0]
			return NULL;
 801ba94:	2300      	movs	r3, #0
 801ba96:	e110      	b.n	801bcba <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801ba98:	69fb      	ldr	r3, [r7, #28]
 801ba9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba9c:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801ba9e:	69f8      	ldr	r0, [r7, #28]
 801baa0:	f7ff fcf2 	bl	801b488 <_getNewDataNode>
 801baa4:	4603      	mov	r3, r0
 801baa6:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801baa8:	69fb      	ldr	r3, [r7, #28]
 801baaa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801baac:	89fa      	ldrh	r2, [r7, #14]
 801baae:	4613      	mov	r3, r2
 801bab0:	005b      	lsls	r3, r3, #1
 801bab2:	4413      	add	r3, r2
 801bab4:	009b      	lsls	r3, r3, #2
 801bab6:	440b      	add	r3, r1
 801bab8:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801baba:	69bb      	ldr	r3, [r7, #24]
 801babc:	895a      	ldrh	r2, [r3, #10]
 801babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bac0:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bac8:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	89fa      	ldrh	r2, [r7, #14]
 801bace:	815a      	strh	r2, [r3, #10]
		goto save;
 801bad0:	e0d1      	b.n	801bc76 <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801bad2:	69bb      	ldr	r3, [r7, #24]
 801bad4:	895b      	ldrh	r3, [r3, #10]
 801bad6:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801bad8:	69fb      	ldr	r3, [r7, #28]
 801bada:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801badc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bade:	4613      	mov	r3, r2
 801bae0:	005b      	lsls	r3, r3, #1
 801bae2:	4413      	add	r3, r2
 801bae4:	009b      	lsls	r3, r3, #2
 801bae6:	440b      	add	r3, r1
 801bae8:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801baea:	69fb      	ldr	r3, [r7, #28]
 801baec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801baee:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801baf0:	693b      	ldr	r3, [r7, #16]
 801baf2:	889b      	ldrh	r3, [r3, #4]
 801baf4:	8c3a      	ldrh	r2, [r7, #32]
 801baf6:	429a      	cmp	r2, r3
 801baf8:	f000 80b2 	beq.w	801bc60 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801bafc:	693b      	ldr	r3, [r7, #16]
 801bafe:	889b      	ldrh	r3, [r3, #4]
 801bb00:	461a      	mov	r2, r3
 801bb02:	8c3b      	ldrh	r3, [r7, #32]
 801bb04:	1ad2      	subs	r2, r2, r3
 801bb06:	8abb      	ldrh	r3, [r7, #20]
 801bb08:	429a      	cmp	r2, r3
 801bb0a:	f2c0 80a9 	blt.w	801bc60 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801bb0e:	69f8      	ldr	r0, [r7, #28]
 801bb10:	f7ff fcba 	bl	801b488 <_getNewDataNode>
 801bb14:	4603      	mov	r3, r0
 801bb16:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801bb18:	89fb      	ldrh	r3, [r7, #14]
 801bb1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	d101      	bne.n	801bb26 <pifStorageVar_Create+0x10a>
 801bb22:	2300      	movs	r3, #0
 801bb24:	e0c9      	b.n	801bcba <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801bb26:	69fb      	ldr	r3, [r7, #28]
 801bb28:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bb2a:	89fa      	ldrh	r2, [r7, #14]
 801bb2c:	4613      	mov	r3, r2
 801bb2e:	005b      	lsls	r3, r3, #1
 801bb30:	4413      	add	r3, r2
 801bb32:	009b      	lsls	r3, r3, #2
 801bb34:	440b      	add	r3, r1
 801bb36:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801bb38:	69bb      	ldr	r3, [r7, #24]
 801bb3a:	895a      	ldrh	r2, [r3, #10]
 801bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb3e:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb46:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801bb48:	69bb      	ldr	r3, [r7, #24]
 801bb4a:	89fa      	ldrh	r2, [r7, #14]
 801bb4c:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801bb4e:	693b      	ldr	r3, [r7, #16]
 801bb50:	89fa      	ldrh	r2, [r7, #14]
 801bb52:	811a      	strh	r2, [r3, #8]
				goto save;
 801bb54:	e08f      	b.n	801bc76 <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801bb56:	69fb      	ldr	r3, [r7, #28]
 801bb58:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bb5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bb5c:	4613      	mov	r3, r2
 801bb5e:	005b      	lsls	r3, r3, #1
 801bb60:	4413      	add	r3, r2
 801bb62:	009b      	lsls	r3, r3, #2
 801bb64:	440b      	add	r3, r1
 801bb66:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801bb68:	693b      	ldr	r3, [r7, #16]
 801bb6a:	889a      	ldrh	r2, [r3, #4]
 801bb6c:	693b      	ldr	r3, [r7, #16]
 801bb6e:	885b      	ldrh	r3, [r3, #2]
 801bb70:	4619      	mov	r1, r3
 801bb72:	8afb      	ldrh	r3, [r7, #22]
 801bb74:	440b      	add	r3, r1
 801bb76:	1e59      	subs	r1, r3, #1
 801bb78:	8afb      	ldrh	r3, [r7, #22]
 801bb7a:	fb91 f3f3 	sdiv	r3, r1, r3
 801bb7e:	b29b      	uxth	r3, r3
 801bb80:	4413      	add	r3, r2
 801bb82:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	88db      	ldrh	r3, [r3, #6]
 801bb88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d127      	bne.n	801bbe0 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801bb90:	69bb      	ldr	r3, [r7, #24]
 801bb92:	891b      	ldrh	r3, [r3, #8]
 801bb94:	461a      	mov	r2, r3
 801bb96:	8c3b      	ldrh	r3, [r7, #32]
 801bb98:	1ad2      	subs	r2, r2, r3
 801bb9a:	8abb      	ldrh	r3, [r7, #20]
 801bb9c:	429a      	cmp	r2, r3
 801bb9e:	db5c      	blt.n	801bc5a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801bba0:	69f8      	ldr	r0, [r7, #28]
 801bba2:	f7ff fc71 	bl	801b488 <_getNewDataNode>
 801bba6:	4603      	mov	r3, r0
 801bba8:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801bbaa:	89fb      	ldrh	r3, [r7, #14]
 801bbac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbb0:	4293      	cmp	r3, r2
 801bbb2:	d101      	bne.n	801bbb8 <pifStorageVar_Create+0x19c>
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	e080      	b.n	801bcba <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801bbb8:	69fb      	ldr	r3, [r7, #28]
 801bbba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bbbc:	89fa      	ldrh	r2, [r7, #14]
 801bbbe:	4613      	mov	r3, r2
 801bbc0:	005b      	lsls	r3, r3, #1
 801bbc2:	4413      	add	r3, r2
 801bbc4:	009b      	lsls	r3, r3, #2
 801bbc6:	440b      	add	r3, r1
 801bbc8:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801bbca:	693b      	ldr	r3, [r7, #16]
 801bbcc:	88da      	ldrh	r2, [r3, #6]
 801bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbd0:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bbd6:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801bbd8:	693b      	ldr	r3, [r7, #16]
 801bbda:	89fa      	ldrh	r2, [r7, #14]
 801bbdc:	80da      	strh	r2, [r3, #6]
					goto save;
 801bbde:	e04a      	b.n	801bc76 <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801bbe0:	69fb      	ldr	r3, [r7, #28]
 801bbe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	88db      	ldrh	r3, [r3, #6]
 801bbe8:	4619      	mov	r1, r3
 801bbea:	460b      	mov	r3, r1
 801bbec:	005b      	lsls	r3, r3, #1
 801bbee:	440b      	add	r3, r1
 801bbf0:	009b      	lsls	r3, r3, #2
 801bbf2:	4413      	add	r3, r2
 801bbf4:	889b      	ldrh	r3, [r3, #4]
 801bbf6:	461a      	mov	r2, r3
 801bbf8:	8c3b      	ldrh	r3, [r7, #32]
 801bbfa:	1ad2      	subs	r2, r2, r3
 801bbfc:	8abb      	ldrh	r3, [r7, #20]
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	db2b      	blt.n	801bc5a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801bc02:	69f8      	ldr	r0, [r7, #28]
 801bc04:	f7ff fc40 	bl	801b488 <_getNewDataNode>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801bc0c:	89fb      	ldrh	r3, [r7, #14]
 801bc0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc12:	4293      	cmp	r3, r2
 801bc14:	d101      	bne.n	801bc1a <pifStorageVar_Create+0x1fe>
 801bc16:	2300      	movs	r3, #0
 801bc18:	e04f      	b.n	801bcba <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801bc1a:	69fb      	ldr	r3, [r7, #28]
 801bc1c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bc1e:	89fa      	ldrh	r2, [r7, #14]
 801bc20:	4613      	mov	r3, r2
 801bc22:	005b      	lsls	r3, r3, #1
 801bc24:	4413      	add	r3, r2
 801bc26:	009b      	lsls	r3, r3, #2
 801bc28:	440b      	add	r3, r1
 801bc2a:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801bc2c:	693b      	ldr	r3, [r7, #16]
 801bc2e:	88da      	ldrh	r2, [r3, #6]
 801bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc32:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bc38:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801bc3a:	69fb      	ldr	r3, [r7, #28]
 801bc3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bc3e:	693b      	ldr	r3, [r7, #16]
 801bc40:	88db      	ldrh	r3, [r3, #6]
 801bc42:	4619      	mov	r1, r3
 801bc44:	460b      	mov	r3, r1
 801bc46:	005b      	lsls	r3, r3, #1
 801bc48:	440b      	add	r3, r1
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	4413      	add	r3, r2
 801bc4e:	89fa      	ldrh	r2, [r7, #14]
 801bc50:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801bc52:	693b      	ldr	r3, [r7, #16]
 801bc54:	89fa      	ldrh	r2, [r7, #14]
 801bc56:	80da      	strh	r2, [r3, #6]
					goto save;
 801bc58:	e00d      	b.n	801bc76 <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	88db      	ldrh	r3, [r3, #6]
 801bc5e:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801bc60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bc62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc66:	4293      	cmp	r3, r2
 801bc68:	f47f af75 	bne.w	801bb56 <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801bc6c:	4b15      	ldr	r3, [pc, #84]	; (801bcc4 <pifStorageVar_Create+0x2a8>)
 801bc6e:	2204      	movs	r2, #4
 801bc70:	701a      	strb	r2, [r3, #0]
	return NULL;
 801bc72:	2300      	movs	r3, #0
 801bc74:	e021      	b.n	801bcba <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc78:	887a      	ldrh	r2, [r7, #2]
 801bc7a:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc7e:	883a      	ldrh	r2, [r7, #0]
 801bc80:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc84:	8c3a      	ldrh	r2, [r7, #32]
 801bc86:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801bc88:	2106      	movs	r1, #6
 801bc8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc8c:	f7f6 f85f 	bl	8011d4e <pifCrc16>
 801bc90:	4603      	mov	r3, r0
 801bc92:	461a      	mov	r2, r3
 801bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc96:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801bc98:	69fb      	ldr	r3, [r7, #28]
 801bc9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bc9c:	69fb      	ldr	r3, [r7, #28]
 801bc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bca0:	2100      	movs	r1, #0
 801bca2:	69f8      	ldr	r0, [r7, #28]
 801bca4:	f7ff fc48 	bl	801b538 <_writeData>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d104      	bne.n	801bcb8 <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801bcae:	4b05      	ldr	r3, [pc, #20]	; (801bcc4 <pifStorageVar_Create+0x2a8>)
 801bcb0:	220d      	movs	r2, #13
 801bcb2:	701a      	strb	r2, [r3, #0]
        return NULL;
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	e000      	b.n	801bcba <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bcba:	4618      	mov	r0, r3
 801bcbc:	3728      	adds	r7, #40	; 0x28
 801bcbe:	46bd      	mov	sp, r7
 801bcc0:	bd80      	pop	{r7, pc}
 801bcc2:	bf00      	nop
 801bcc4:	20001db8 	.word	0x20001db8

0801bcc8 <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b086      	sub	sp, #24
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	460b      	mov	r3, r1
 801bcd2:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bcd8:	693b      	ldr	r3, [r7, #16]
 801bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcdc:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bcde:	693b      	ldr	r3, [r7, #16]
 801bce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d104      	bne.n	801bcf2 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801bce8:	4b3d      	ldr	r3, [pc, #244]	; (801bde0 <pifStorageVar_Delete+0x118>)
 801bcea:	220f      	movs	r2, #15
 801bcec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	e072      	b.n	801bdd8 <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	895b      	ldrh	r3, [r3, #10]
 801bcf6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bcf8:	e065      	b.n	801bdc6 <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801bcfa:	693b      	ldr	r3, [r7, #16]
 801bcfc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bcfe:	8afa      	ldrh	r2, [r7, #22]
 801bd00:	4613      	mov	r3, r2
 801bd02:	005b      	lsls	r3, r3, #1
 801bd04:	4413      	add	r3, r2
 801bd06:	009b      	lsls	r3, r3, #2
 801bd08:	440b      	add	r3, r1
 801bd0a:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801bd0c:	68bb      	ldr	r3, [r7, #8]
 801bd0e:	881b      	ldrh	r3, [r3, #0]
 801bd10:	887a      	ldrh	r2, [r7, #2]
 801bd12:	429a      	cmp	r2, r3
 801bd14:	d154      	bne.n	801bdc0 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801bd16:	2206      	movs	r2, #6
 801bd18:	21ff      	movs	r1, #255	; 0xff
 801bd1a:	68b8      	ldr	r0, [r7, #8]
 801bd1c:	f007 fb64 	bl	80233e8 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	891b      	ldrh	r3, [r3, #8]
 801bd24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd28:	4293      	cmp	r3, r2
 801bd2a:	d00d      	beq.n	801bd48 <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801bd2c:	693b      	ldr	r3, [r7, #16]
 801bd2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bd30:	68bb      	ldr	r3, [r7, #8]
 801bd32:	891b      	ldrh	r3, [r3, #8]
 801bd34:	4619      	mov	r1, r3
 801bd36:	460b      	mov	r3, r1
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	440b      	add	r3, r1
 801bd3c:	009b      	lsls	r3, r3, #2
 801bd3e:	4413      	add	r3, r2
 801bd40:	68ba      	ldr	r2, [r7, #8]
 801bd42:	88d2      	ldrh	r2, [r2, #6]
 801bd44:	80da      	strh	r2, [r3, #6]
 801bd46:	e003      	b.n	801bd50 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	88da      	ldrh	r2, [r3, #6]
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	88db      	ldrh	r3, [r3, #6]
 801bd54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd58:	4293      	cmp	r3, r2
 801bd5a:	d00c      	beq.n	801bd76 <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801bd5c:	693b      	ldr	r3, [r7, #16]
 801bd5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bd60:	68bb      	ldr	r3, [r7, #8]
 801bd62:	88db      	ldrh	r3, [r3, #6]
 801bd64:	4619      	mov	r1, r3
 801bd66:	460b      	mov	r3, r1
 801bd68:	005b      	lsls	r3, r3, #1
 801bd6a:	440b      	add	r3, r1
 801bd6c:	009b      	lsls	r3, r3, #2
 801bd6e:	4413      	add	r3, r2
 801bd70:	68ba      	ldr	r2, [r7, #8]
 801bd72:	8912      	ldrh	r2, [r2, #8]
 801bd74:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	899a      	ldrh	r2, [r3, #12]
 801bd7a:	68bb      	ldr	r3, [r7, #8]
 801bd7c:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801bd7e:	68bb      	ldr	r3, [r7, #8]
 801bd80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd84:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801bd86:	2106      	movs	r1, #6
 801bd88:	68b8      	ldr	r0, [r7, #8]
 801bd8a:	f7f5 ffe0 	bl	8011d4e <pifCrc16>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	461a      	mov	r2, r3
 801bd92:	68bb      	ldr	r3, [r7, #8]
 801bd94:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	8afa      	ldrh	r2, [r7, #22]
 801bd9a:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801bd9c:	693b      	ldr	r3, [r7, #16]
 801bd9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bda0:	693b      	ldr	r3, [r7, #16]
 801bda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bda4:	2100      	movs	r1, #0
 801bda6:	6938      	ldr	r0, [r7, #16]
 801bda8:	f7ff fbc6 	bl	801b538 <_writeData>
 801bdac:	4603      	mov	r3, r0
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d104      	bne.n	801bdbc <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801bdb2:	4b0b      	ldr	r3, [pc, #44]	; (801bde0 <pifStorageVar_Delete+0x118>)
 801bdb4:	220d      	movs	r2, #13
 801bdb6:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801bdb8:	2300      	movs	r3, #0
 801bdba:	e00d      	b.n	801bdd8 <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801bdbc:	2301      	movs	r3, #1
 801bdbe:	e00b      	b.n	801bdd8 <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	88db      	ldrh	r3, [r3, #6]
 801bdc4:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bdc6:	8afb      	ldrh	r3, [r7, #22]
 801bdc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bdcc:	4293      	cmp	r3, r2
 801bdce:	d194      	bne.n	801bcfa <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bdd0:	4b03      	ldr	r3, [pc, #12]	; (801bde0 <pifStorageVar_Delete+0x118>)
 801bdd2:	220e      	movs	r2, #14
 801bdd4:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801bdd6:	2300      	movs	r3, #0
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3718      	adds	r7, #24
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}
 801bde0:	20001db8 	.word	0x20001db8

0801bde4 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801bde4:	b590      	push	{r4, r7, lr}
 801bde6:	b087      	sub	sp, #28
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	460b      	mov	r3, r1
 801bdee:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bdf4:	693b      	ldr	r3, [r7, #16]
 801bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdf8:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bdfa:	693b      	ldr	r3, [r7, #16]
 801bdfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801be00:	2b00      	cmp	r3, #0
 801be02:	d104      	bne.n	801be0e <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801be04:	4b1b      	ldr	r3, [pc, #108]	; (801be74 <pifStorageVar_Open+0x90>)
 801be06:	220f      	movs	r2, #15
 801be08:	701a      	strb	r2, [r3, #0]
		return NULL;
 801be0a:	2300      	movs	r3, #0
 801be0c:	e02d      	b.n	801be6a <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	895b      	ldrh	r3, [r3, #10]
 801be12:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801be14:	e020      	b.n	801be58 <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801be16:	693b      	ldr	r3, [r7, #16]
 801be18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801be1a:	8afa      	ldrh	r2, [r7, #22]
 801be1c:	4613      	mov	r3, r2
 801be1e:	005b      	lsls	r3, r3, #1
 801be20:	4413      	add	r3, r2
 801be22:	009b      	lsls	r3, r3, #2
 801be24:	440b      	add	r3, r1
 801be26:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	881b      	ldrh	r3, [r3, #0]
 801be2c:	887a      	ldrh	r2, [r7, #2]
 801be2e:	429a      	cmp	r2, r3
 801be30:	d10f      	bne.n	801be52 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801be32:	68bb      	ldr	r3, [r7, #8]
 801be34:	895c      	ldrh	r4, [r3, #10]
 801be36:	2106      	movs	r1, #6
 801be38:	68b8      	ldr	r0, [r7, #8]
 801be3a:	f7f5 ff88 	bl	8011d4e <pifCrc16>
 801be3e:	4603      	mov	r3, r0
 801be40:	429c      	cmp	r4, r3
 801be42:	d004      	beq.n	801be4e <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801be44:	4b0b      	ldr	r3, [pc, #44]	; (801be74 <pifStorageVar_Open+0x90>)
 801be46:	220c      	movs	r2, #12
 801be48:	701a      	strb	r2, [r3, #0]
				return NULL;
 801be4a:	2300      	movs	r3, #0
 801be4c:	e00d      	b.n	801be6a <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801be4e:	68bb      	ldr	r3, [r7, #8]
 801be50:	e00b      	b.n	801be6a <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	88db      	ldrh	r3, [r3, #6]
 801be56:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801be58:	8afb      	ldrh	r3, [r7, #22]
 801be5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be5e:	4293      	cmp	r3, r2
 801be60:	d1d9      	bne.n	801be16 <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801be62:	4b04      	ldr	r3, [pc, #16]	; (801be74 <pifStorageVar_Open+0x90>)
 801be64:	220e      	movs	r2, #14
 801be66:	701a      	strb	r2, [r3, #0]
	return NULL;
 801be68:	2300      	movs	r3, #0
}
 801be6a:	4618      	mov	r0, r3
 801be6c:	371c      	adds	r7, #28
 801be6e:	46bd      	mov	sp, r7
 801be70:	bd90      	pop	{r4, r7, pc}
 801be72:	bf00      	nop
 801be74:	20001db8 	.word	0x20001db8

0801be78 <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b088      	sub	sp, #32
 801be7c:	af02      	add	r7, sp, #8
 801be7e:	60f8      	str	r0, [r7, #12]
 801be80:	60b9      	str	r1, [r7, #8]
 801be82:	607a      	str	r2, [r7, #4]
 801be84:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801be8a:	697b      	ldr	r3, [r7, #20]
 801be8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801be90:	2b00      	cmp	r3, #0
 801be92:	d104      	bne.n	801be9e <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801be94:	4b0d      	ldr	r3, [pc, #52]	; (801becc <pifStorageVar_Read+0x54>)
 801be96:	220f      	movs	r2, #15
 801be98:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801be9a:	2300      	movs	r3, #0
 801be9c:	e012      	b.n	801bec4 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	889b      	ldrh	r3, [r3, #4]
 801bea2:	461a      	mov	r2, r3
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bea8:	88db      	ldrh	r3, [r3, #6]
 801beaa:	fb02 f303 	mul.w	r3, r2, r3
 801beae:	461a      	mov	r2, r3
 801beb0:	697b      	ldr	r3, [r7, #20]
 801beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801beb4:	88db      	ldrh	r3, [r3, #6]
 801beb6:	9300      	str	r3, [sp, #0]
 801beb8:	683b      	ldr	r3, [r7, #0]
 801beba:	68b9      	ldr	r1, [r7, #8]
 801bebc:	6978      	ldr	r0, [r7, #20]
 801bebe:	f7ff fb0b 	bl	801b4d8 <_readData>
 801bec2:	4603      	mov	r3, r0
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	3718      	adds	r7, #24
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}
 801becc:	20001db8 	.word	0x20001db8

0801bed0 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b086      	sub	sp, #24
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	60b9      	str	r1, [r7, #8]
 801beda:	607a      	str	r2, [r7, #4]
 801bedc:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d104      	bne.n	801bef6 <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801beec:	4b0b      	ldr	r3, [pc, #44]	; (801bf1c <pifStorageVar_Write+0x4c>)
 801beee:	220f      	movs	r2, #15
 801bef0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bef2:	2300      	movs	r3, #0
 801bef4:	e00e      	b.n	801bf14 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801bef6:	68bb      	ldr	r3, [r7, #8]
 801bef8:	889b      	ldrh	r3, [r3, #4]
 801befa:	461a      	mov	r2, r3
 801befc:	697b      	ldr	r3, [r7, #20]
 801befe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf00:	88db      	ldrh	r3, [r3, #6]
 801bf02:	fb02 f303 	mul.w	r3, r2, r3
 801bf06:	4619      	mov	r1, r3
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	6978      	ldr	r0, [r7, #20]
 801bf0e:	f7ff fb13 	bl	801b538 <_writeData>
 801bf12:	4603      	mov	r3, r0
}
 801bf14:	4618      	mov	r0, r3
 801bf16:	3718      	adds	r7, #24
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}
 801bf1c:	20001db8 	.word	0x20001db8

0801bf20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bf24:	4b0e      	ldr	r3, [pc, #56]	; (801bf60 <HAL_Init+0x40>)
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	4a0d      	ldr	r2, [pc, #52]	; (801bf60 <HAL_Init+0x40>)
 801bf2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bf2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801bf30:	4b0b      	ldr	r3, [pc, #44]	; (801bf60 <HAL_Init+0x40>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	4a0a      	ldr	r2, [pc, #40]	; (801bf60 <HAL_Init+0x40>)
 801bf36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bf3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801bf3c:	4b08      	ldr	r3, [pc, #32]	; (801bf60 <HAL_Init+0x40>)
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	4a07      	ldr	r2, [pc, #28]	; (801bf60 <HAL_Init+0x40>)
 801bf42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bf48:	2003      	movs	r0, #3
 801bf4a:	f000 fd51 	bl	801c9f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801bf4e:	2000      	movs	r0, #0
 801bf50:	f000 f808 	bl	801bf64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801bf54:	f7e7 fa30 	bl	80033b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bf58:	2300      	movs	r3, #0
}
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	bd80      	pop	{r7, pc}
 801bf5e:	bf00      	nop
 801bf60:	40023c00 	.word	0x40023c00

0801bf64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b082      	sub	sp, #8
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801bf6c:	4b12      	ldr	r3, [pc, #72]	; (801bfb8 <HAL_InitTick+0x54>)
 801bf6e:	681a      	ldr	r2, [r3, #0]
 801bf70:	4b12      	ldr	r3, [pc, #72]	; (801bfbc <HAL_InitTick+0x58>)
 801bf72:	781b      	ldrb	r3, [r3, #0]
 801bf74:	4619      	mov	r1, r3
 801bf76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bf7a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf82:	4618      	mov	r0, r3
 801bf84:	f000 fd77 	bl	801ca76 <HAL_SYSTICK_Config>
 801bf88:	4603      	mov	r3, r0
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d001      	beq.n	801bf92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801bf8e:	2301      	movs	r3, #1
 801bf90:	e00e      	b.n	801bfb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	2b0f      	cmp	r3, #15
 801bf96:	d80a      	bhi.n	801bfae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bf98:	2200      	movs	r2, #0
 801bf9a:	6879      	ldr	r1, [r7, #4]
 801bf9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa0:	f000 fd31 	bl	801ca06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bfa4:	4a06      	ldr	r2, [pc, #24]	; (801bfc0 <HAL_InitTick+0x5c>)
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bfaa:	2300      	movs	r3, #0
 801bfac:	e000      	b.n	801bfb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801bfae:	2301      	movs	r3, #1
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	3708      	adds	r7, #8
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}
 801bfb8:	20000020 	.word	0x20000020
 801bfbc:	2000013c 	.word	0x2000013c
 801bfc0:	20000138 	.word	0x20000138

0801bfc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801bfc8:	4b06      	ldr	r3, [pc, #24]	; (801bfe4 <HAL_IncTick+0x20>)
 801bfca:	781b      	ldrb	r3, [r3, #0]
 801bfcc:	461a      	mov	r2, r3
 801bfce:	4b06      	ldr	r3, [pc, #24]	; (801bfe8 <HAL_IncTick+0x24>)
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	4413      	add	r3, r2
 801bfd4:	4a04      	ldr	r2, [pc, #16]	; (801bfe8 <HAL_IncTick+0x24>)
 801bfd6:	6013      	str	r3, [r2, #0]
}
 801bfd8:	bf00      	nop
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe0:	4770      	bx	lr
 801bfe2:	bf00      	nop
 801bfe4:	2000013c 	.word	0x2000013c
 801bfe8:	20001f5c 	.word	0x20001f5c

0801bfec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bfec:	b480      	push	{r7}
 801bfee:	af00      	add	r7, sp, #0
  return uwTick;
 801bff0:	4b03      	ldr	r3, [pc, #12]	; (801c000 <HAL_GetTick+0x14>)
 801bff2:	681b      	ldr	r3, [r3, #0]
}
 801bff4:	4618      	mov	r0, r3
 801bff6:	46bd      	mov	sp, r7
 801bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bffc:	4770      	bx	lr
 801bffe:	bf00      	nop
 801c000:	20001f5c 	.word	0x20001f5c

0801c004 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b084      	sub	sp, #16
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801c00c:	2300      	movs	r3, #0
 801c00e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d101      	bne.n	801c01a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801c016:	2301      	movs	r3, #1
 801c018:	e033      	b.n	801c082 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d109      	bne.n	801c036 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801c022:	6878      	ldr	r0, [r7, #4]
 801c024:	f7e7 f9f0 	bl	8003408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2200      	movs	r2, #0
 801c02c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	2200      	movs	r2, #0
 801c032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c03a:	f003 0310 	and.w	r3, r3, #16
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d118      	bne.n	801c074 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801c04a:	f023 0302 	bic.w	r3, r3, #2
 801c04e:	f043 0202 	orr.w	r2, r3, #2
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801c056:	6878      	ldr	r0, [r7, #4]
 801c058:	f000 fa58 	bl	801c50c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	2200      	movs	r2, #0
 801c060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c066:	f023 0303 	bic.w	r3, r3, #3
 801c06a:	f043 0201 	orr.w	r2, r3, #1
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	641a      	str	r2, [r3, #64]	; 0x40
 801c072:	e001      	b.n	801c078 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801c074:	2301      	movs	r3, #1
 801c076:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	2200      	movs	r2, #0
 801c07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801c080:	7bfb      	ldrb	r3, [r7, #15]
}
 801c082:	4618      	mov	r0, r3
 801c084:	3710      	adds	r7, #16
 801c086:	46bd      	mov	sp, r7
 801c088:	bd80      	pop	{r7, pc}
	...

0801c08c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801c08c:	b580      	push	{r7, lr}
 801c08e:	b086      	sub	sp, #24
 801c090:	af00      	add	r7, sp, #0
 801c092:	60f8      	str	r0, [r7, #12]
 801c094:	60b9      	str	r1, [r7, #8]
 801c096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801c098:	2300      	movs	r3, #0
 801c09a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c0a2:	2b01      	cmp	r3, #1
 801c0a4:	d101      	bne.n	801c0aa <HAL_ADC_Start_DMA+0x1e>
 801c0a6:	2302      	movs	r3, #2
 801c0a8:	e0ce      	b.n	801c248 <HAL_ADC_Start_DMA+0x1bc>
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	2201      	movs	r2, #1
 801c0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	689b      	ldr	r3, [r3, #8]
 801c0b8:	f003 0301 	and.w	r3, r3, #1
 801c0bc:	2b01      	cmp	r3, #1
 801c0be:	d018      	beq.n	801c0f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	689a      	ldr	r2, [r3, #8]
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f042 0201 	orr.w	r2, r2, #1
 801c0ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801c0d0:	4b5f      	ldr	r3, [pc, #380]	; (801c250 <HAL_ADC_Start_DMA+0x1c4>)
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	4a5f      	ldr	r2, [pc, #380]	; (801c254 <HAL_ADC_Start_DMA+0x1c8>)
 801c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 801c0da:	0c9a      	lsrs	r2, r3, #18
 801c0dc:	4613      	mov	r3, r2
 801c0de:	005b      	lsls	r3, r3, #1
 801c0e0:	4413      	add	r3, r2
 801c0e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801c0e4:	e002      	b.n	801c0ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d1f9      	bne.n	801c0e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c100:	d107      	bne.n	801c112 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	689a      	ldr	r2, [r3, #8]
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c110:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	689b      	ldr	r3, [r3, #8]
 801c118:	f003 0301 	and.w	r3, r3, #1
 801c11c:	2b01      	cmp	r3, #1
 801c11e:	f040 8086 	bne.w	801c22e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c126:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801c12a:	f023 0301 	bic.w	r3, r3, #1
 801c12e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	685b      	ldr	r3, [r3, #4]
 801c13c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c140:	2b00      	cmp	r3, #0
 801c142:	d007      	beq.n	801c154 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801c14c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c160:	d106      	bne.n	801c170 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c166:	f023 0206 	bic.w	r2, r3, #6
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	645a      	str	r2, [r3, #68]	; 0x44
 801c16e:	e002      	b.n	801c176 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	2200      	movs	r2, #0
 801c174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	2200      	movs	r2, #0
 801c17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c17e:	4b36      	ldr	r3, [pc, #216]	; (801c258 <HAL_ADC_Start_DMA+0x1cc>)
 801c180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c186:	4a35      	ldr	r2, [pc, #212]	; (801c25c <HAL_ADC_Start_DMA+0x1d0>)
 801c188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c18e:	4a34      	ldr	r2, [pc, #208]	; (801c260 <HAL_ADC_Start_DMA+0x1d4>)
 801c190:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c196:	4a33      	ldr	r2, [pc, #204]	; (801c264 <HAL_ADC_Start_DMA+0x1d8>)
 801c198:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801c1a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	685a      	ldr	r2, [r3, #4]
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801c1b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	689a      	ldr	r2, [r3, #8]
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c1c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	334c      	adds	r3, #76	; 0x4c
 801c1ce:	4619      	mov	r1, r3
 801c1d0:	68ba      	ldr	r2, [r7, #8]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	f000 fd0a 	bl	801cbec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801c1d8:	697b      	ldr	r3, [r7, #20]
 801c1da:	685b      	ldr	r3, [r3, #4]
 801c1dc:	f003 031f 	and.w	r3, r3, #31
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d10f      	bne.n	801c204 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	689b      	ldr	r3, [r3, #8]
 801c1ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d129      	bne.n	801c246 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	689a      	ldr	r2, [r3, #8]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c200:	609a      	str	r2, [r3, #8]
 801c202:	e020      	b.n	801c246 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	4a17      	ldr	r2, [pc, #92]	; (801c268 <HAL_ADC_Start_DMA+0x1dc>)
 801c20a:	4293      	cmp	r3, r2
 801c20c:	d11b      	bne.n	801c246 <HAL_ADC_Start_DMA+0x1ba>
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	689b      	ldr	r3, [r3, #8]
 801c214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d114      	bne.n	801c246 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	689a      	ldr	r2, [r3, #8]
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c22a:	609a      	str	r2, [r3, #8]
 801c22c:	e00b      	b.n	801c246 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c232:	f043 0210 	orr.w	r2, r3, #16
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c23e:	f043 0201 	orr.w	r2, r3, #1
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801c246:	2300      	movs	r3, #0
}
 801c248:	4618      	mov	r0, r3
 801c24a:	3718      	adds	r7, #24
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}
 801c250:	20000020 	.word	0x20000020
 801c254:	431bde83 	.word	0x431bde83
 801c258:	40012300 	.word	0x40012300
 801c25c:	0801c705 	.word	0x0801c705
 801c260:	0801c7bf 	.word	0x0801c7bf
 801c264:	0801c7db 	.word	0x0801c7db
 801c268:	40012000 	.word	0x40012000

0801c26c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c26c:	b480      	push	{r7}
 801c26e:	b083      	sub	sp, #12
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801c274:	bf00      	nop
 801c276:	370c      	adds	r7, #12
 801c278:	46bd      	mov	sp, r7
 801c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27e:	4770      	bx	lr

0801c280 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c280:	b480      	push	{r7}
 801c282:	b083      	sub	sp, #12
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801c288:	bf00      	nop
 801c28a:	370c      	adds	r7, #12
 801c28c:	46bd      	mov	sp, r7
 801c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c292:	4770      	bx	lr

0801c294 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801c294:	b480      	push	{r7}
 801c296:	b083      	sub	sp, #12
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801c29c:	bf00      	nop
 801c29e:	370c      	adds	r7, #12
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a6:	4770      	bx	lr

0801c2a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801c2a8:	b480      	push	{r7}
 801c2aa:	b085      	sub	sp, #20
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
 801c2b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c2bc:	2b01      	cmp	r3, #1
 801c2be:	d101      	bne.n	801c2c4 <HAL_ADC_ConfigChannel+0x1c>
 801c2c0:	2302      	movs	r3, #2
 801c2c2:	e113      	b.n	801c4ec <HAL_ADC_ConfigChannel+0x244>
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	2201      	movs	r2, #1
 801c2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	2b09      	cmp	r3, #9
 801c2d2:	d925      	bls.n	801c320 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	68d9      	ldr	r1, [r3, #12]
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	461a      	mov	r2, r3
 801c2e2:	4613      	mov	r3, r2
 801c2e4:	005b      	lsls	r3, r3, #1
 801c2e6:	4413      	add	r3, r2
 801c2e8:	3b1e      	subs	r3, #30
 801c2ea:	2207      	movs	r2, #7
 801c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 801c2f0:	43da      	mvns	r2, r3
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	400a      	ands	r2, r1
 801c2f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	68d9      	ldr	r1, [r3, #12]
 801c300:	683b      	ldr	r3, [r7, #0]
 801c302:	689a      	ldr	r2, [r3, #8]
 801c304:	683b      	ldr	r3, [r7, #0]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	b29b      	uxth	r3, r3
 801c30a:	4618      	mov	r0, r3
 801c30c:	4603      	mov	r3, r0
 801c30e:	005b      	lsls	r3, r3, #1
 801c310:	4403      	add	r3, r0
 801c312:	3b1e      	subs	r3, #30
 801c314:	409a      	lsls	r2, r3
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	430a      	orrs	r2, r1
 801c31c:	60da      	str	r2, [r3, #12]
 801c31e:	e022      	b.n	801c366 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	6919      	ldr	r1, [r3, #16]
 801c326:	683b      	ldr	r3, [r7, #0]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	461a      	mov	r2, r3
 801c32e:	4613      	mov	r3, r2
 801c330:	005b      	lsls	r3, r3, #1
 801c332:	4413      	add	r3, r2
 801c334:	2207      	movs	r2, #7
 801c336:	fa02 f303 	lsl.w	r3, r2, r3
 801c33a:	43da      	mvns	r2, r3
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	400a      	ands	r2, r1
 801c342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	6919      	ldr	r1, [r3, #16]
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	689a      	ldr	r2, [r3, #8]
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	b29b      	uxth	r3, r3
 801c354:	4618      	mov	r0, r3
 801c356:	4603      	mov	r3, r0
 801c358:	005b      	lsls	r3, r3, #1
 801c35a:	4403      	add	r3, r0
 801c35c:	409a      	lsls	r2, r3
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	430a      	orrs	r2, r1
 801c364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801c366:	683b      	ldr	r3, [r7, #0]
 801c368:	685b      	ldr	r3, [r3, #4]
 801c36a:	2b06      	cmp	r3, #6
 801c36c:	d824      	bhi.n	801c3b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	685a      	ldr	r2, [r3, #4]
 801c378:	4613      	mov	r3, r2
 801c37a:	009b      	lsls	r3, r3, #2
 801c37c:	4413      	add	r3, r2
 801c37e:	3b05      	subs	r3, #5
 801c380:	221f      	movs	r2, #31
 801c382:	fa02 f303 	lsl.w	r3, r2, r3
 801c386:	43da      	mvns	r2, r3
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	400a      	ands	r2, r1
 801c38e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	b29b      	uxth	r3, r3
 801c39c:	4618      	mov	r0, r3
 801c39e:	683b      	ldr	r3, [r7, #0]
 801c3a0:	685a      	ldr	r2, [r3, #4]
 801c3a2:	4613      	mov	r3, r2
 801c3a4:	009b      	lsls	r3, r3, #2
 801c3a6:	4413      	add	r3, r2
 801c3a8:	3b05      	subs	r3, #5
 801c3aa:	fa00 f203 	lsl.w	r2, r0, r3
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	430a      	orrs	r2, r1
 801c3b4:	635a      	str	r2, [r3, #52]	; 0x34
 801c3b6:	e04c      	b.n	801c452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	685b      	ldr	r3, [r3, #4]
 801c3bc:	2b0c      	cmp	r3, #12
 801c3be:	d824      	bhi.n	801c40a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c3c6:	683b      	ldr	r3, [r7, #0]
 801c3c8:	685a      	ldr	r2, [r3, #4]
 801c3ca:	4613      	mov	r3, r2
 801c3cc:	009b      	lsls	r3, r3, #2
 801c3ce:	4413      	add	r3, r2
 801c3d0:	3b23      	subs	r3, #35	; 0x23
 801c3d2:	221f      	movs	r2, #31
 801c3d4:	fa02 f303 	lsl.w	r3, r2, r3
 801c3d8:	43da      	mvns	r2, r3
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	400a      	ands	r2, r1
 801c3e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c3e8:	683b      	ldr	r3, [r7, #0]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	b29b      	uxth	r3, r3
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	683b      	ldr	r3, [r7, #0]
 801c3f2:	685a      	ldr	r2, [r3, #4]
 801c3f4:	4613      	mov	r3, r2
 801c3f6:	009b      	lsls	r3, r3, #2
 801c3f8:	4413      	add	r3, r2
 801c3fa:	3b23      	subs	r3, #35	; 0x23
 801c3fc:	fa00 f203 	lsl.w	r2, r0, r3
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	430a      	orrs	r2, r1
 801c406:	631a      	str	r2, [r3, #48]	; 0x30
 801c408:	e023      	b.n	801c452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	685a      	ldr	r2, [r3, #4]
 801c414:	4613      	mov	r3, r2
 801c416:	009b      	lsls	r3, r3, #2
 801c418:	4413      	add	r3, r2
 801c41a:	3b41      	subs	r3, #65	; 0x41
 801c41c:	221f      	movs	r2, #31
 801c41e:	fa02 f303 	lsl.w	r3, r2, r3
 801c422:	43da      	mvns	r2, r3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	400a      	ands	r2, r1
 801c42a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	b29b      	uxth	r3, r3
 801c438:	4618      	mov	r0, r3
 801c43a:	683b      	ldr	r3, [r7, #0]
 801c43c:	685a      	ldr	r2, [r3, #4]
 801c43e:	4613      	mov	r3, r2
 801c440:	009b      	lsls	r3, r3, #2
 801c442:	4413      	add	r3, r2
 801c444:	3b41      	subs	r3, #65	; 0x41
 801c446:	fa00 f203 	lsl.w	r2, r0, r3
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	430a      	orrs	r2, r1
 801c450:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c452:	4b29      	ldr	r3, [pc, #164]	; (801c4f8 <HAL_ADC_ConfigChannel+0x250>)
 801c454:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	4a28      	ldr	r2, [pc, #160]	; (801c4fc <HAL_ADC_ConfigChannel+0x254>)
 801c45c:	4293      	cmp	r3, r2
 801c45e:	d10f      	bne.n	801c480 <HAL_ADC_ConfigChannel+0x1d8>
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2b12      	cmp	r3, #18
 801c466:	d10b      	bne.n	801c480 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	685b      	ldr	r3, [r3, #4]
 801c46c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	4a1d      	ldr	r2, [pc, #116]	; (801c4fc <HAL_ADC_ConfigChannel+0x254>)
 801c486:	4293      	cmp	r3, r2
 801c488:	d12b      	bne.n	801c4e2 <HAL_ADC_ConfigChannel+0x23a>
 801c48a:	683b      	ldr	r3, [r7, #0]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	4a1c      	ldr	r2, [pc, #112]	; (801c500 <HAL_ADC_ConfigChannel+0x258>)
 801c490:	4293      	cmp	r3, r2
 801c492:	d003      	beq.n	801c49c <HAL_ADC_ConfigChannel+0x1f4>
 801c494:	683b      	ldr	r3, [r7, #0]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2b11      	cmp	r3, #17
 801c49a:	d122      	bne.n	801c4e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	685b      	ldr	r3, [r3, #4]
 801c4a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	685b      	ldr	r3, [r3, #4]
 801c4ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801c4b4:	683b      	ldr	r3, [r7, #0]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	4a11      	ldr	r2, [pc, #68]	; (801c500 <HAL_ADC_ConfigChannel+0x258>)
 801c4ba:	4293      	cmp	r3, r2
 801c4bc:	d111      	bne.n	801c4e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801c4be:	4b11      	ldr	r3, [pc, #68]	; (801c504 <HAL_ADC_ConfigChannel+0x25c>)
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	4a11      	ldr	r2, [pc, #68]	; (801c508 <HAL_ADC_ConfigChannel+0x260>)
 801c4c4:	fba2 2303 	umull	r2, r3, r2, r3
 801c4c8:	0c9a      	lsrs	r2, r3, #18
 801c4ca:	4613      	mov	r3, r2
 801c4cc:	009b      	lsls	r3, r3, #2
 801c4ce:	4413      	add	r3, r2
 801c4d0:	005b      	lsls	r3, r3, #1
 801c4d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c4d4:	e002      	b.n	801c4dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801c4d6:	68bb      	ldr	r3, [r7, #8]
 801c4d8:	3b01      	subs	r3, #1
 801c4da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d1f9      	bne.n	801c4d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	2200      	movs	r2, #0
 801c4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801c4ea:	2300      	movs	r3, #0
}
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	3714      	adds	r7, #20
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f6:	4770      	bx	lr
 801c4f8:	40012300 	.word	0x40012300
 801c4fc:	40012000 	.word	0x40012000
 801c500:	10000012 	.word	0x10000012
 801c504:	20000020 	.word	0x20000020
 801c508:	431bde83 	.word	0x431bde83

0801c50c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801c50c:	b480      	push	{r7}
 801c50e:	b085      	sub	sp, #20
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c514:	4b79      	ldr	r3, [pc, #484]	; (801c6fc <ADC_Init+0x1f0>)
 801c516:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	685b      	ldr	r3, [r3, #4]
 801c51c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	685a      	ldr	r2, [r3, #4]
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	685b      	ldr	r3, [r3, #4]
 801c52c:	431a      	orrs	r2, r3
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	685a      	ldr	r2, [r3, #4]
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	6859      	ldr	r1, [r3, #4]
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	691b      	ldr	r3, [r3, #16]
 801c54c:	021a      	lsls	r2, r3, #8
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	430a      	orrs	r2, r1
 801c554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	685a      	ldr	r2, [r3, #4]
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801c564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	6859      	ldr	r1, [r3, #4]
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	689a      	ldr	r2, [r3, #8]
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	430a      	orrs	r2, r1
 801c576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	689a      	ldr	r2, [r3, #8]
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	6899      	ldr	r1, [r3, #8]
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	68da      	ldr	r2, [r3, #12]
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	430a      	orrs	r2, r1
 801c598:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c59e:	4a58      	ldr	r2, [pc, #352]	; (801c700 <ADC_Init+0x1f4>)
 801c5a0:	4293      	cmp	r3, r2
 801c5a2:	d022      	beq.n	801c5ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	689a      	ldr	r2, [r3, #8]
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c5b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	6899      	ldr	r1, [r3, #8]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	430a      	orrs	r2, r1
 801c5c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	689a      	ldr	r2, [r3, #8]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c5d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	6899      	ldr	r1, [r3, #8]
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	430a      	orrs	r2, r1
 801c5e6:	609a      	str	r2, [r3, #8]
 801c5e8:	e00f      	b.n	801c60a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	689a      	ldr	r2, [r3, #8]
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c5f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	689a      	ldr	r2, [r3, #8]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c608:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	689a      	ldr	r2, [r3, #8]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	f022 0202 	bic.w	r2, r2, #2
 801c618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	6899      	ldr	r1, [r3, #8]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	7e1b      	ldrb	r3, [r3, #24]
 801c624:	005a      	lsls	r2, r3, #1
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	430a      	orrs	r2, r1
 801c62c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d01b      	beq.n	801c670 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	685a      	ldr	r2, [r3, #4]
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c646:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	685a      	ldr	r2, [r3, #4]
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801c656:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	6859      	ldr	r1, [r3, #4]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c662:	3b01      	subs	r3, #1
 801c664:	035a      	lsls	r2, r3, #13
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	430a      	orrs	r2, r1
 801c66c:	605a      	str	r2, [r3, #4]
 801c66e:	e007      	b.n	801c680 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	685a      	ldr	r2, [r3, #4]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c67e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801c68e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	69db      	ldr	r3, [r3, #28]
 801c69a:	3b01      	subs	r3, #1
 801c69c:	051a      	lsls	r2, r3, #20
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	430a      	orrs	r2, r1
 801c6a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	689a      	ldr	r2, [r3, #8]
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c6b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	6899      	ldr	r1, [r3, #8]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c6c2:	025a      	lsls	r2, r3, #9
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	430a      	orrs	r2, r1
 801c6ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	689a      	ldr	r2, [r3, #8]
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c6da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	6899      	ldr	r1, [r3, #8]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	695b      	ldr	r3, [r3, #20]
 801c6e6:	029a      	lsls	r2, r3, #10
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	430a      	orrs	r2, r1
 801c6ee:	609a      	str	r2, [r3, #8]
}
 801c6f0:	bf00      	nop
 801c6f2:	3714      	adds	r7, #20
 801c6f4:	46bd      	mov	sp, r7
 801c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fa:	4770      	bx	lr
 801c6fc:	40012300 	.word	0x40012300
 801c700:	0f000001 	.word	0x0f000001

0801c704 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b084      	sub	sp, #16
 801c708:	af00      	add	r7, sp, #0
 801c70a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c710:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c716:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d13c      	bne.n	801c798 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c722:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	689b      	ldr	r3, [r3, #8]
 801c730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c734:	2b00      	cmp	r3, #0
 801c736:	d12b      	bne.n	801c790 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d127      	bne.n	801c790 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c746:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d006      	beq.n	801c75c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	689b      	ldr	r3, [r3, #8]
 801c754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d119      	bne.n	801c790 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	685a      	ldr	r2, [r3, #4]
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	f022 0220 	bic.w	r2, r2, #32
 801c76a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c77c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c780:	2b00      	cmp	r3, #0
 801c782:	d105      	bne.n	801c790 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c788:	f043 0201 	orr.w	r2, r3, #1
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801c790:	68f8      	ldr	r0, [r7, #12]
 801c792:	f7ff fd6b 	bl	801c26c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801c796:	e00e      	b.n	801c7b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c79c:	f003 0310 	and.w	r3, r3, #16
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d003      	beq.n	801c7ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801c7a4:	68f8      	ldr	r0, [r7, #12]
 801c7a6:	f7ff fd75 	bl	801c294 <HAL_ADC_ErrorCallback>
}
 801c7aa:	e004      	b.n	801c7b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c7b2:	6878      	ldr	r0, [r7, #4]
 801c7b4:	4798      	blx	r3
}
 801c7b6:	bf00      	nop
 801c7b8:	3710      	adds	r7, #16
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	bd80      	pop	{r7, pc}

0801c7be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c7be:	b580      	push	{r7, lr}
 801c7c0:	b084      	sub	sp, #16
 801c7c2:	af00      	add	r7, sp, #0
 801c7c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801c7cc:	68f8      	ldr	r0, [r7, #12]
 801c7ce:	f7ff fd57 	bl	801c280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c7d2:	bf00      	nop
 801c7d4:	3710      	adds	r7, #16
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	bd80      	pop	{r7, pc}

0801c7da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801c7da:	b580      	push	{r7, lr}
 801c7dc:	b084      	sub	sp, #16
 801c7de:	af00      	add	r7, sp, #0
 801c7e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	2240      	movs	r2, #64	; 0x40
 801c7ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c7f2:	f043 0204 	orr.w	r2, r3, #4
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801c7fa:	68f8      	ldr	r0, [r7, #12]
 801c7fc:	f7ff fd4a 	bl	801c294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c800:	bf00      	nop
 801c802:	3710      	adds	r7, #16
 801c804:	46bd      	mov	sp, r7
 801c806:	bd80      	pop	{r7, pc}

0801c808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c808:	b480      	push	{r7}
 801c80a:	b085      	sub	sp, #20
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f003 0307 	and.w	r3, r3, #7
 801c816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c818:	4b0c      	ldr	r3, [pc, #48]	; (801c84c <__NVIC_SetPriorityGrouping+0x44>)
 801c81a:	68db      	ldr	r3, [r3, #12]
 801c81c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c81e:	68ba      	ldr	r2, [r7, #8]
 801c820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801c824:	4013      	ands	r3, r2
 801c826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801c834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c83a:	4a04      	ldr	r2, [pc, #16]	; (801c84c <__NVIC_SetPriorityGrouping+0x44>)
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	60d3      	str	r3, [r2, #12]
}
 801c840:	bf00      	nop
 801c842:	3714      	adds	r7, #20
 801c844:	46bd      	mov	sp, r7
 801c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c84a:	4770      	bx	lr
 801c84c:	e000ed00 	.word	0xe000ed00

0801c850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c850:	b480      	push	{r7}
 801c852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c854:	4b04      	ldr	r3, [pc, #16]	; (801c868 <__NVIC_GetPriorityGrouping+0x18>)
 801c856:	68db      	ldr	r3, [r3, #12]
 801c858:	0a1b      	lsrs	r3, r3, #8
 801c85a:	f003 0307 	and.w	r3, r3, #7
}
 801c85e:	4618      	mov	r0, r3
 801c860:	46bd      	mov	sp, r7
 801c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c866:	4770      	bx	lr
 801c868:	e000ed00 	.word	0xe000ed00

0801c86c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c86c:	b480      	push	{r7}
 801c86e:	b083      	sub	sp, #12
 801c870:	af00      	add	r7, sp, #0
 801c872:	4603      	mov	r3, r0
 801c874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	db0b      	blt.n	801c896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c87e:	79fb      	ldrb	r3, [r7, #7]
 801c880:	f003 021f 	and.w	r2, r3, #31
 801c884:	4907      	ldr	r1, [pc, #28]	; (801c8a4 <__NVIC_EnableIRQ+0x38>)
 801c886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c88a:	095b      	lsrs	r3, r3, #5
 801c88c:	2001      	movs	r0, #1
 801c88e:	fa00 f202 	lsl.w	r2, r0, r2
 801c892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801c896:	bf00      	nop
 801c898:	370c      	adds	r7, #12
 801c89a:	46bd      	mov	sp, r7
 801c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a0:	4770      	bx	lr
 801c8a2:	bf00      	nop
 801c8a4:	e000e100 	.word	0xe000e100

0801c8a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c8a8:	b480      	push	{r7}
 801c8aa:	b083      	sub	sp, #12
 801c8ac:	af00      	add	r7, sp, #0
 801c8ae:	4603      	mov	r3, r0
 801c8b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	db12      	blt.n	801c8e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c8ba:	79fb      	ldrb	r3, [r7, #7]
 801c8bc:	f003 021f 	and.w	r2, r3, #31
 801c8c0:	490a      	ldr	r1, [pc, #40]	; (801c8ec <__NVIC_DisableIRQ+0x44>)
 801c8c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8c6:	095b      	lsrs	r3, r3, #5
 801c8c8:	2001      	movs	r0, #1
 801c8ca:	fa00 f202 	lsl.w	r2, r0, r2
 801c8ce:	3320      	adds	r3, #32
 801c8d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801c8d4:	f3bf 8f4f 	dsb	sy
}
 801c8d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c8da:	f3bf 8f6f 	isb	sy
}
 801c8de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801c8e0:	bf00      	nop
 801c8e2:	370c      	adds	r7, #12
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ea:	4770      	bx	lr
 801c8ec:	e000e100 	.word	0xe000e100

0801c8f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c8f0:	b480      	push	{r7}
 801c8f2:	b083      	sub	sp, #12
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	6039      	str	r1, [r7, #0]
 801c8fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c8fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c900:	2b00      	cmp	r3, #0
 801c902:	db0a      	blt.n	801c91a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	b2da      	uxtb	r2, r3
 801c908:	490c      	ldr	r1, [pc, #48]	; (801c93c <__NVIC_SetPriority+0x4c>)
 801c90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c90e:	0112      	lsls	r2, r2, #4
 801c910:	b2d2      	uxtb	r2, r2
 801c912:	440b      	add	r3, r1
 801c914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c918:	e00a      	b.n	801c930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c91a:	683b      	ldr	r3, [r7, #0]
 801c91c:	b2da      	uxtb	r2, r3
 801c91e:	4908      	ldr	r1, [pc, #32]	; (801c940 <__NVIC_SetPriority+0x50>)
 801c920:	79fb      	ldrb	r3, [r7, #7]
 801c922:	f003 030f 	and.w	r3, r3, #15
 801c926:	3b04      	subs	r3, #4
 801c928:	0112      	lsls	r2, r2, #4
 801c92a:	b2d2      	uxtb	r2, r2
 801c92c:	440b      	add	r3, r1
 801c92e:	761a      	strb	r2, [r3, #24]
}
 801c930:	bf00      	nop
 801c932:	370c      	adds	r7, #12
 801c934:	46bd      	mov	sp, r7
 801c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c93a:	4770      	bx	lr
 801c93c:	e000e100 	.word	0xe000e100
 801c940:	e000ed00 	.word	0xe000ed00

0801c944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c944:	b480      	push	{r7}
 801c946:	b089      	sub	sp, #36	; 0x24
 801c948:	af00      	add	r7, sp, #0
 801c94a:	60f8      	str	r0, [r7, #12]
 801c94c:	60b9      	str	r1, [r7, #8]
 801c94e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	f003 0307 	and.w	r3, r3, #7
 801c956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c958:	69fb      	ldr	r3, [r7, #28]
 801c95a:	f1c3 0307 	rsb	r3, r3, #7
 801c95e:	2b04      	cmp	r3, #4
 801c960:	bf28      	it	cs
 801c962:	2304      	movcs	r3, #4
 801c964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c966:	69fb      	ldr	r3, [r7, #28]
 801c968:	3304      	adds	r3, #4
 801c96a:	2b06      	cmp	r3, #6
 801c96c:	d902      	bls.n	801c974 <NVIC_EncodePriority+0x30>
 801c96e:	69fb      	ldr	r3, [r7, #28]
 801c970:	3b03      	subs	r3, #3
 801c972:	e000      	b.n	801c976 <NVIC_EncodePriority+0x32>
 801c974:	2300      	movs	r3, #0
 801c976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c978:	f04f 32ff 	mov.w	r2, #4294967295
 801c97c:	69bb      	ldr	r3, [r7, #24]
 801c97e:	fa02 f303 	lsl.w	r3, r2, r3
 801c982:	43da      	mvns	r2, r3
 801c984:	68bb      	ldr	r3, [r7, #8]
 801c986:	401a      	ands	r2, r3
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c98c:	f04f 31ff 	mov.w	r1, #4294967295
 801c990:	697b      	ldr	r3, [r7, #20]
 801c992:	fa01 f303 	lsl.w	r3, r1, r3
 801c996:	43d9      	mvns	r1, r3
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c99c:	4313      	orrs	r3, r2
         );
}
 801c99e:	4618      	mov	r0, r3
 801c9a0:	3724      	adds	r7, #36	; 0x24
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a8:	4770      	bx	lr
	...

0801c9ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b082      	sub	sp, #8
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	3b01      	subs	r3, #1
 801c9b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c9bc:	d301      	bcc.n	801c9c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c9be:	2301      	movs	r3, #1
 801c9c0:	e00f      	b.n	801c9e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c9c2:	4a0a      	ldr	r2, [pc, #40]	; (801c9ec <SysTick_Config+0x40>)
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	3b01      	subs	r3, #1
 801c9c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c9ca:	210f      	movs	r1, #15
 801c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 801c9d0:	f7ff ff8e 	bl	801c8f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c9d4:	4b05      	ldr	r3, [pc, #20]	; (801c9ec <SysTick_Config+0x40>)
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c9da:	4b04      	ldr	r3, [pc, #16]	; (801c9ec <SysTick_Config+0x40>)
 801c9dc:	2207      	movs	r2, #7
 801c9de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c9e0:	2300      	movs	r3, #0
}
 801c9e2:	4618      	mov	r0, r3
 801c9e4:	3708      	adds	r7, #8
 801c9e6:	46bd      	mov	sp, r7
 801c9e8:	bd80      	pop	{r7, pc}
 801c9ea:	bf00      	nop
 801c9ec:	e000e010 	.word	0xe000e010

0801c9f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b082      	sub	sp, #8
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c9f8:	6878      	ldr	r0, [r7, #4]
 801c9fa:	f7ff ff05 	bl	801c808 <__NVIC_SetPriorityGrouping>
}
 801c9fe:	bf00      	nop
 801ca00:	3708      	adds	r7, #8
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bd80      	pop	{r7, pc}

0801ca06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801ca06:	b580      	push	{r7, lr}
 801ca08:	b086      	sub	sp, #24
 801ca0a:	af00      	add	r7, sp, #0
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	60b9      	str	r1, [r7, #8]
 801ca10:	607a      	str	r2, [r7, #4]
 801ca12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801ca14:	2300      	movs	r3, #0
 801ca16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801ca18:	f7ff ff1a 	bl	801c850 <__NVIC_GetPriorityGrouping>
 801ca1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801ca1e:	687a      	ldr	r2, [r7, #4]
 801ca20:	68b9      	ldr	r1, [r7, #8]
 801ca22:	6978      	ldr	r0, [r7, #20]
 801ca24:	f7ff ff8e 	bl	801c944 <NVIC_EncodePriority>
 801ca28:	4602      	mov	r2, r0
 801ca2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca2e:	4611      	mov	r1, r2
 801ca30:	4618      	mov	r0, r3
 801ca32:	f7ff ff5d 	bl	801c8f0 <__NVIC_SetPriority>
}
 801ca36:	bf00      	nop
 801ca38:	3718      	adds	r7, #24
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}

0801ca3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801ca3e:	b580      	push	{r7, lr}
 801ca40:	b082      	sub	sp, #8
 801ca42:	af00      	add	r7, sp, #0
 801ca44:	4603      	mov	r3, r0
 801ca46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801ca48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	f7ff ff0d 	bl	801c86c <__NVIC_EnableIRQ>
}
 801ca52:	bf00      	nop
 801ca54:	3708      	adds	r7, #8
 801ca56:	46bd      	mov	sp, r7
 801ca58:	bd80      	pop	{r7, pc}

0801ca5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801ca5a:	b580      	push	{r7, lr}
 801ca5c:	b082      	sub	sp, #8
 801ca5e:	af00      	add	r7, sp, #0
 801ca60:	4603      	mov	r3, r0
 801ca62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801ca64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ca68:	4618      	mov	r0, r3
 801ca6a:	f7ff ff1d 	bl	801c8a8 <__NVIC_DisableIRQ>
}
 801ca6e:	bf00      	nop
 801ca70:	3708      	adds	r7, #8
 801ca72:	46bd      	mov	sp, r7
 801ca74:	bd80      	pop	{r7, pc}

0801ca76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801ca76:	b580      	push	{r7, lr}
 801ca78:	b082      	sub	sp, #8
 801ca7a:	af00      	add	r7, sp, #0
 801ca7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801ca7e:	6878      	ldr	r0, [r7, #4]
 801ca80:	f7ff ff94 	bl	801c9ac <SysTick_Config>
 801ca84:	4603      	mov	r3, r0
}
 801ca86:	4618      	mov	r0, r3
 801ca88:	3708      	adds	r7, #8
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	bd80      	pop	{r7, pc}
	...

0801ca90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b086      	sub	sp, #24
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801ca98:	2300      	movs	r3, #0
 801ca9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801ca9c:	f7ff faa6 	bl	801bfec <HAL_GetTick>
 801caa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d101      	bne.n	801caac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801caa8:	2301      	movs	r3, #1
 801caaa:	e099      	b.n	801cbe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	2202      	movs	r2, #2
 801cab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	2200      	movs	r2, #0
 801cab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	681a      	ldr	r2, [r3, #0]
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	f022 0201 	bic.w	r2, r2, #1
 801caca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cacc:	e00f      	b.n	801caee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cace:	f7ff fa8d 	bl	801bfec <HAL_GetTick>
 801cad2:	4602      	mov	r2, r0
 801cad4:	693b      	ldr	r3, [r7, #16]
 801cad6:	1ad3      	subs	r3, r2, r3
 801cad8:	2b05      	cmp	r3, #5
 801cada:	d908      	bls.n	801caee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	2220      	movs	r2, #32
 801cae0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	2203      	movs	r2, #3
 801cae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801caea:	2303      	movs	r3, #3
 801caec:	e078      	b.n	801cbe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	f003 0301 	and.w	r3, r3, #1
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d1e8      	bne.n	801cace <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801cb04:	697a      	ldr	r2, [r7, #20]
 801cb06:	4b38      	ldr	r3, [pc, #224]	; (801cbe8 <HAL_DMA_Init+0x158>)
 801cb08:	4013      	ands	r3, r2
 801cb0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	685a      	ldr	r2, [r3, #4]
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	689b      	ldr	r3, [r3, #8]
 801cb14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801cb1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	691b      	ldr	r3, [r3, #16]
 801cb20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801cb26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	699b      	ldr	r3, [r3, #24]
 801cb2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801cb32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	6a1b      	ldr	r3, [r3, #32]
 801cb38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801cb3a:	697a      	ldr	r2, [r7, #20]
 801cb3c:	4313      	orrs	r3, r2
 801cb3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb44:	2b04      	cmp	r3, #4
 801cb46:	d107      	bne.n	801cb58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb50:	4313      	orrs	r3, r2
 801cb52:	697a      	ldr	r2, [r7, #20]
 801cb54:	4313      	orrs	r3, r2
 801cb56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	697a      	ldr	r2, [r7, #20]
 801cb5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	695b      	ldr	r3, [r3, #20]
 801cb66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	f023 0307 	bic.w	r3, r3, #7
 801cb6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb74:	697a      	ldr	r2, [r7, #20]
 801cb76:	4313      	orrs	r3, r2
 801cb78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb7e:	2b04      	cmp	r3, #4
 801cb80:	d117      	bne.n	801cbb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb86:	697a      	ldr	r2, [r7, #20]
 801cb88:	4313      	orrs	r3, r2
 801cb8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d00e      	beq.n	801cbb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	f000 fb1b 	bl	801d1d0 <DMA_CheckFifoParam>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d008      	beq.n	801cbb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	2240      	movs	r2, #64	; 0x40
 801cba4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	2201      	movs	r2, #1
 801cbaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801cbae:	2301      	movs	r3, #1
 801cbb0:	e016      	b.n	801cbe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	697a      	ldr	r2, [r7, #20]
 801cbb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801cbba:	6878      	ldr	r0, [r7, #4]
 801cbbc:	f000 fad2 	bl	801d164 <DMA_CalcBaseAndBitshift>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbc8:	223f      	movs	r2, #63	; 0x3f
 801cbca:	409a      	lsls	r2, r3
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	2201      	movs	r2, #1
 801cbda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801cbde:	2300      	movs	r3, #0
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3718      	adds	r7, #24
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}
 801cbe8:	f010803f 	.word	0xf010803f

0801cbec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b086      	sub	sp, #24
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	60f8      	str	r0, [r7, #12]
 801cbf4:	60b9      	str	r1, [r7, #8]
 801cbf6:	607a      	str	r2, [r7, #4]
 801cbf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801cc0a:	2b01      	cmp	r3, #1
 801cc0c:	d101      	bne.n	801cc12 <HAL_DMA_Start_IT+0x26>
 801cc0e:	2302      	movs	r3, #2
 801cc10:	e040      	b.n	801cc94 <HAL_DMA_Start_IT+0xa8>
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	2201      	movs	r2, #1
 801cc16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	2b01      	cmp	r3, #1
 801cc24:	d12f      	bne.n	801cc86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	2202      	movs	r2, #2
 801cc2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	2200      	movs	r2, #0
 801cc32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801cc34:	683b      	ldr	r3, [r7, #0]
 801cc36:	687a      	ldr	r2, [r7, #4]
 801cc38:	68b9      	ldr	r1, [r7, #8]
 801cc3a:	68f8      	ldr	r0, [r7, #12]
 801cc3c:	f000 fa64 	bl	801d108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc44:	223f      	movs	r2, #63	; 0x3f
 801cc46:	409a      	lsls	r2, r3
 801cc48:	693b      	ldr	r3, [r7, #16]
 801cc4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	681a      	ldr	r2, [r3, #0]
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	f042 0216 	orr.w	r2, r2, #22
 801cc5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d007      	beq.n	801cc74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	681a      	ldr	r2, [r3, #0]
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	f042 0208 	orr.w	r2, r2, #8
 801cc72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	681a      	ldr	r2, [r3, #0]
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	f042 0201 	orr.w	r2, r2, #1
 801cc82:	601a      	str	r2, [r3, #0]
 801cc84:	e005      	b.n	801cc92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	2200      	movs	r2, #0
 801cc8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801cc8e:	2302      	movs	r3, #2
 801cc90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801cc92:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3718      	adds	r7, #24
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b084      	sub	sp, #16
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cca8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801ccaa:	f7ff f99f 	bl	801bfec <HAL_GetTick>
 801ccae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ccb6:	b2db      	uxtb	r3, r3
 801ccb8:	2b02      	cmp	r3, #2
 801ccba:	d008      	beq.n	801ccce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2280      	movs	r2, #128	; 0x80
 801ccc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801ccca:	2301      	movs	r3, #1
 801cccc:	e052      	b.n	801cd74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	681a      	ldr	r2, [r3, #0]
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	f022 0216 	bic.w	r2, r2, #22
 801ccdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	695a      	ldr	r2, [r3, #20]
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ccec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d103      	bne.n	801ccfe <HAL_DMA_Abort+0x62>
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d007      	beq.n	801cd0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	681a      	ldr	r2, [r3, #0]
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	f022 0208 	bic.w	r2, r2, #8
 801cd0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	681a      	ldr	r2, [r3, #0]
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	f022 0201 	bic.w	r2, r2, #1
 801cd1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cd1e:	e013      	b.n	801cd48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cd20:	f7ff f964 	bl	801bfec <HAL_GetTick>
 801cd24:	4602      	mov	r2, r0
 801cd26:	68bb      	ldr	r3, [r7, #8]
 801cd28:	1ad3      	subs	r3, r2, r3
 801cd2a:	2b05      	cmp	r3, #5
 801cd2c:	d90c      	bls.n	801cd48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	2220      	movs	r2, #32
 801cd32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2203      	movs	r2, #3
 801cd38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801cd44:	2303      	movs	r3, #3
 801cd46:	e015      	b.n	801cd74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	f003 0301 	and.w	r3, r3, #1
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d1e4      	bne.n	801cd20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd5a:	223f      	movs	r2, #63	; 0x3f
 801cd5c:	409a      	lsls	r2, r3
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	2201      	movs	r2, #1
 801cd66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801cd72:	2300      	movs	r3, #0
}
 801cd74:	4618      	mov	r0, r3
 801cd76:	3710      	adds	r7, #16
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}

0801cd7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801cd7c:	b480      	push	{r7}
 801cd7e:	b083      	sub	sp, #12
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cd8a:	b2db      	uxtb	r3, r3
 801cd8c:	2b02      	cmp	r3, #2
 801cd8e:	d004      	beq.n	801cd9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	2280      	movs	r2, #128	; 0x80
 801cd94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801cd96:	2301      	movs	r3, #1
 801cd98:	e00c      	b.n	801cdb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	2205      	movs	r2, #5
 801cd9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	f022 0201 	bic.w	r2, r2, #1
 801cdb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801cdb2:	2300      	movs	r3, #0
}
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	370c      	adds	r7, #12
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdbe:	4770      	bx	lr

0801cdc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b086      	sub	sp, #24
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801cdc8:	2300      	movs	r3, #0
 801cdca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801cdcc:	4b8e      	ldr	r3, [pc, #568]	; (801d008 <HAL_DMA_IRQHandler+0x248>)
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	4a8e      	ldr	r2, [pc, #568]	; (801d00c <HAL_DMA_IRQHandler+0x24c>)
 801cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 801cdd6:	0a9b      	lsrs	r3, r3, #10
 801cdd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801cde0:	693b      	ldr	r3, [r7, #16]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdea:	2208      	movs	r2, #8
 801cdec:	409a      	lsls	r2, r3
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	4013      	ands	r3, r2
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d01a      	beq.n	801ce2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	f003 0304 	and.w	r3, r3, #4
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d013      	beq.n	801ce2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	681a      	ldr	r2, [r3, #0]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	f022 0204 	bic.w	r2, r2, #4
 801ce12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce18:	2208      	movs	r2, #8
 801ce1a:	409a      	lsls	r2, r3
 801ce1c:	693b      	ldr	r3, [r7, #16]
 801ce1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce24:	f043 0201 	orr.w	r2, r3, #1
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce30:	2201      	movs	r2, #1
 801ce32:	409a      	lsls	r2, r3
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	4013      	ands	r3, r2
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d012      	beq.n	801ce62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	695b      	ldr	r3, [r3, #20]
 801ce42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d00b      	beq.n	801ce62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce4e:	2201      	movs	r2, #1
 801ce50:	409a      	lsls	r2, r3
 801ce52:	693b      	ldr	r3, [r7, #16]
 801ce54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce5a:	f043 0202 	orr.w	r2, r3, #2
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce66:	2204      	movs	r2, #4
 801ce68:	409a      	lsls	r2, r3
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	4013      	ands	r3, r2
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d012      	beq.n	801ce98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	f003 0302 	and.w	r3, r3, #2
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d00b      	beq.n	801ce98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce84:	2204      	movs	r2, #4
 801ce86:	409a      	lsls	r2, r3
 801ce88:	693b      	ldr	r3, [r7, #16]
 801ce8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce90:	f043 0204 	orr.w	r2, r3, #4
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce9c:	2210      	movs	r2, #16
 801ce9e:	409a      	lsls	r2, r3
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	4013      	ands	r3, r2
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d043      	beq.n	801cf30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	f003 0308 	and.w	r3, r3, #8
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d03c      	beq.n	801cf30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ceba:	2210      	movs	r2, #16
 801cebc:	409a      	lsls	r2, r3
 801cebe:	693b      	ldr	r3, [r7, #16]
 801cec0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d018      	beq.n	801cf02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d108      	bne.n	801cef0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d024      	beq.n	801cf30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	4798      	blx	r3
 801ceee:	e01f      	b.n	801cf30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d01b      	beq.n	801cf30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	4798      	blx	r3
 801cf00:	e016      	b.n	801cf30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d107      	bne.n	801cf20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	681a      	ldr	r2, [r3, #0]
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	f022 0208 	bic.w	r2, r2, #8
 801cf1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d003      	beq.n	801cf30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf2c:	6878      	ldr	r0, [r7, #4]
 801cf2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cf34:	2220      	movs	r2, #32
 801cf36:	409a      	lsls	r2, r3
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	4013      	ands	r3, r2
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	f000 808f 	beq.w	801d060 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	f003 0310 	and.w	r3, r3, #16
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	f000 8087 	beq.w	801d060 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cf56:	2220      	movs	r2, #32
 801cf58:	409a      	lsls	r2, r3
 801cf5a:	693b      	ldr	r3, [r7, #16]
 801cf5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cf64:	b2db      	uxtb	r3, r3
 801cf66:	2b05      	cmp	r3, #5
 801cf68:	d136      	bne.n	801cfd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	681a      	ldr	r2, [r3, #0]
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	f022 0216 	bic.w	r2, r2, #22
 801cf78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	695a      	ldr	r2, [r3, #20]
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cf88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d103      	bne.n	801cf9a <HAL_DMA_IRQHandler+0x1da>
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d007      	beq.n	801cfaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	681a      	ldr	r2, [r3, #0]
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	f022 0208 	bic.w	r2, r2, #8
 801cfa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cfae:	223f      	movs	r2, #63	; 0x3f
 801cfb0:	409a      	lsls	r2, r3
 801cfb2:	693b      	ldr	r3, [r7, #16]
 801cfb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	2201      	movs	r2, #1
 801cfba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d07e      	beq.n	801d0cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfd2:	6878      	ldr	r0, [r7, #4]
 801cfd4:	4798      	blx	r3
        }
        return;
 801cfd6:	e079      	b.n	801d0cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d01d      	beq.n	801d022 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d10d      	bne.n	801d010 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d031      	beq.n	801d060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	4798      	blx	r3
 801d004:	e02c      	b.n	801d060 <HAL_DMA_IRQHandler+0x2a0>
 801d006:	bf00      	nop
 801d008:	20000020 	.word	0x20000020
 801d00c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d014:	2b00      	cmp	r3, #0
 801d016:	d023      	beq.n	801d060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d01c:	6878      	ldr	r0, [r7, #4]
 801d01e:	4798      	blx	r3
 801d020:	e01e      	b.n	801d060 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d10f      	bne.n	801d050 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	681a      	ldr	r2, [r3, #0]
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	f022 0210 	bic.w	r2, r2, #16
 801d03e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	2201      	movs	r2, #1
 801d044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2200      	movs	r2, #0
 801d04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d054:	2b00      	cmp	r3, #0
 801d056:	d003      	beq.n	801d060 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d064:	2b00      	cmp	r3, #0
 801d066:	d032      	beq.n	801d0ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d06c:	f003 0301 	and.w	r3, r3, #1
 801d070:	2b00      	cmp	r3, #0
 801d072:	d022      	beq.n	801d0ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2205      	movs	r2, #5
 801d078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	681a      	ldr	r2, [r3, #0]
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	f022 0201 	bic.w	r2, r2, #1
 801d08a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	3301      	adds	r3, #1
 801d090:	60bb      	str	r3, [r7, #8]
 801d092:	697a      	ldr	r2, [r7, #20]
 801d094:	429a      	cmp	r2, r3
 801d096:	d307      	bcc.n	801d0a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	f003 0301 	and.w	r3, r3, #1
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d1f2      	bne.n	801d08c <HAL_DMA_IRQHandler+0x2cc>
 801d0a6:	e000      	b.n	801d0aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 801d0a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	2201      	movs	r2, #1
 801d0ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d005      	beq.n	801d0ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d0c6:	6878      	ldr	r0, [r7, #4]
 801d0c8:	4798      	blx	r3
 801d0ca:	e000      	b.n	801d0ce <HAL_DMA_IRQHandler+0x30e>
        return;
 801d0cc:	bf00      	nop
    }
  }
}
 801d0ce:	3718      	adds	r7, #24
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}

0801d0d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801d0d4:	b480      	push	{r7}
 801d0d6:	b083      	sub	sp, #12
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801d0e2:	b2db      	uxtb	r3, r3
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	370c      	adds	r7, #12
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ee:	4770      	bx	lr

0801d0f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801d0f0:	b480      	push	{r7}
 801d0f2:	b083      	sub	sp, #12
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	370c      	adds	r7, #12
 801d100:	46bd      	mov	sp, r7
 801d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d106:	4770      	bx	lr

0801d108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d108:	b480      	push	{r7}
 801d10a:	b085      	sub	sp, #20
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	60f8      	str	r0, [r7, #12]
 801d110:	60b9      	str	r1, [r7, #8]
 801d112:	607a      	str	r2, [r7, #4]
 801d114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	681a      	ldr	r2, [r3, #0]
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801d124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801d126:	68fb      	ldr	r3, [r7, #12]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	683a      	ldr	r2, [r7, #0]
 801d12c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	689b      	ldr	r3, [r3, #8]
 801d132:	2b40      	cmp	r3, #64	; 0x40
 801d134:	d108      	bne.n	801d148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	687a      	ldr	r2, [r7, #4]
 801d13c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	68ba      	ldr	r2, [r7, #8]
 801d144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801d146:	e007      	b.n	801d158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	68ba      	ldr	r2, [r7, #8]
 801d14e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	687a      	ldr	r2, [r7, #4]
 801d156:	60da      	str	r2, [r3, #12]
}
 801d158:	bf00      	nop
 801d15a:	3714      	adds	r7, #20
 801d15c:	46bd      	mov	sp, r7
 801d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d162:	4770      	bx	lr

0801d164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801d164:	b480      	push	{r7}
 801d166:	b085      	sub	sp, #20
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	b2db      	uxtb	r3, r3
 801d172:	3b10      	subs	r3, #16
 801d174:	4a14      	ldr	r2, [pc, #80]	; (801d1c8 <DMA_CalcBaseAndBitshift+0x64>)
 801d176:	fba2 2303 	umull	r2, r3, r2, r3
 801d17a:	091b      	lsrs	r3, r3, #4
 801d17c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801d17e:	4a13      	ldr	r2, [pc, #76]	; (801d1cc <DMA_CalcBaseAndBitshift+0x68>)
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	4413      	add	r3, r2
 801d184:	781b      	ldrb	r3, [r3, #0]
 801d186:	461a      	mov	r2, r3
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	2b03      	cmp	r3, #3
 801d190:	d909      	bls.n	801d1a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801d19a:	f023 0303 	bic.w	r3, r3, #3
 801d19e:	1d1a      	adds	r2, r3, #4
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	659a      	str	r2, [r3, #88]	; 0x58
 801d1a4:	e007      	b.n	801d1b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801d1ae:	f023 0303 	bic.w	r3, r3, #3
 801d1b2:	687a      	ldr	r2, [r7, #4]
 801d1b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	3714      	adds	r7, #20
 801d1be:	46bd      	mov	sp, r7
 801d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1c4:	4770      	bx	lr
 801d1c6:	bf00      	nop
 801d1c8:	aaaaaaab 	.word	0xaaaaaaab
 801d1cc:	080295a4 	.word	0x080295a4

0801d1d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801d1d0:	b480      	push	{r7}
 801d1d2:	b085      	sub	sp, #20
 801d1d4:	af00      	add	r7, sp, #0
 801d1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d1d8:	2300      	movs	r3, #0
 801d1da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	699b      	ldr	r3, [r3, #24]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d11f      	bne.n	801d22a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801d1ea:	68bb      	ldr	r3, [r7, #8]
 801d1ec:	2b03      	cmp	r3, #3
 801d1ee:	d856      	bhi.n	801d29e <DMA_CheckFifoParam+0xce>
 801d1f0:	a201      	add	r2, pc, #4	; (adr r2, 801d1f8 <DMA_CheckFifoParam+0x28>)
 801d1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1f6:	bf00      	nop
 801d1f8:	0801d209 	.word	0x0801d209
 801d1fc:	0801d21b 	.word	0x0801d21b
 801d200:	0801d209 	.word	0x0801d209
 801d204:	0801d29f 	.word	0x0801d29f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d20c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d210:	2b00      	cmp	r3, #0
 801d212:	d046      	beq.n	801d2a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801d214:	2301      	movs	r3, #1
 801d216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d218:	e043      	b.n	801d2a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d21e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d222:	d140      	bne.n	801d2a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801d224:	2301      	movs	r3, #1
 801d226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d228:	e03d      	b.n	801d2a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	699b      	ldr	r3, [r3, #24]
 801d22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d232:	d121      	bne.n	801d278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801d234:	68bb      	ldr	r3, [r7, #8]
 801d236:	2b03      	cmp	r3, #3
 801d238:	d837      	bhi.n	801d2aa <DMA_CheckFifoParam+0xda>
 801d23a:	a201      	add	r2, pc, #4	; (adr r2, 801d240 <DMA_CheckFifoParam+0x70>)
 801d23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d240:	0801d251 	.word	0x0801d251
 801d244:	0801d257 	.word	0x0801d257
 801d248:	0801d251 	.word	0x0801d251
 801d24c:	0801d269 	.word	0x0801d269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801d250:	2301      	movs	r3, #1
 801d252:	73fb      	strb	r3, [r7, #15]
      break;
 801d254:	e030      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d25a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d025      	beq.n	801d2ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801d262:	2301      	movs	r3, #1
 801d264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d266:	e022      	b.n	801d2ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d26c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d270:	d11f      	bne.n	801d2b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801d272:	2301      	movs	r3, #1
 801d274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801d276:	e01c      	b.n	801d2b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801d278:	68bb      	ldr	r3, [r7, #8]
 801d27a:	2b02      	cmp	r3, #2
 801d27c:	d903      	bls.n	801d286 <DMA_CheckFifoParam+0xb6>
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	2b03      	cmp	r3, #3
 801d282:	d003      	beq.n	801d28c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801d284:	e018      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801d286:	2301      	movs	r3, #1
 801d288:	73fb      	strb	r3, [r7, #15]
      break;
 801d28a:	e015      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d294:	2b00      	cmp	r3, #0
 801d296:	d00e      	beq.n	801d2b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801d298:	2301      	movs	r3, #1
 801d29a:	73fb      	strb	r3, [r7, #15]
      break;
 801d29c:	e00b      	b.n	801d2b6 <DMA_CheckFifoParam+0xe6>
      break;
 801d29e:	bf00      	nop
 801d2a0:	e00a      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d2a2:	bf00      	nop
 801d2a4:	e008      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d2a6:	bf00      	nop
 801d2a8:	e006      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d2aa:	bf00      	nop
 801d2ac:	e004      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d2ae:	bf00      	nop
 801d2b0:	e002      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;   
 801d2b2:	bf00      	nop
 801d2b4:	e000      	b.n	801d2b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d2b6:	bf00      	nop
    }
  } 
  
  return status; 
 801d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2ba:	4618      	mov	r0, r3
 801d2bc:	3714      	adds	r7, #20
 801d2be:	46bd      	mov	sp, r7
 801d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c4:	4770      	bx	lr
 801d2c6:	bf00      	nop

0801d2c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801d2c8:	b480      	push	{r7}
 801d2ca:	b089      	sub	sp, #36	; 0x24
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	6078      	str	r0, [r7, #4]
 801d2d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801d2da:	2300      	movs	r3, #0
 801d2dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d2de:	2300      	movs	r3, #0
 801d2e0:	61fb      	str	r3, [r7, #28]
 801d2e2:	e159      	b.n	801d598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d2e4:	2201      	movs	r2, #1
 801d2e6:	69fb      	ldr	r3, [r7, #28]
 801d2e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d2ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	697a      	ldr	r2, [r7, #20]
 801d2f4:	4013      	ands	r3, r2
 801d2f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801d2f8:	693a      	ldr	r2, [r7, #16]
 801d2fa:	697b      	ldr	r3, [r7, #20]
 801d2fc:	429a      	cmp	r2, r3
 801d2fe:	f040 8148 	bne.w	801d592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	685b      	ldr	r3, [r3, #4]
 801d306:	f003 0303 	and.w	r3, r3, #3
 801d30a:	2b01      	cmp	r3, #1
 801d30c:	d005      	beq.n	801d31a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	685b      	ldr	r3, [r3, #4]
 801d312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d316:	2b02      	cmp	r3, #2
 801d318:	d130      	bne.n	801d37c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	689b      	ldr	r3, [r3, #8]
 801d31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d320:	69fb      	ldr	r3, [r7, #28]
 801d322:	005b      	lsls	r3, r3, #1
 801d324:	2203      	movs	r2, #3
 801d326:	fa02 f303 	lsl.w	r3, r2, r3
 801d32a:	43db      	mvns	r3, r3
 801d32c:	69ba      	ldr	r2, [r7, #24]
 801d32e:	4013      	ands	r3, r2
 801d330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801d332:	683b      	ldr	r3, [r7, #0]
 801d334:	68da      	ldr	r2, [r3, #12]
 801d336:	69fb      	ldr	r3, [r7, #28]
 801d338:	005b      	lsls	r3, r3, #1
 801d33a:	fa02 f303 	lsl.w	r3, r2, r3
 801d33e:	69ba      	ldr	r2, [r7, #24]
 801d340:	4313      	orrs	r3, r2
 801d342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	69ba      	ldr	r2, [r7, #24]
 801d348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	685b      	ldr	r3, [r3, #4]
 801d34e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d350:	2201      	movs	r2, #1
 801d352:	69fb      	ldr	r3, [r7, #28]
 801d354:	fa02 f303 	lsl.w	r3, r2, r3
 801d358:	43db      	mvns	r3, r3
 801d35a:	69ba      	ldr	r2, [r7, #24]
 801d35c:	4013      	ands	r3, r2
 801d35e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801d360:	683b      	ldr	r3, [r7, #0]
 801d362:	685b      	ldr	r3, [r3, #4]
 801d364:	091b      	lsrs	r3, r3, #4
 801d366:	f003 0201 	and.w	r2, r3, #1
 801d36a:	69fb      	ldr	r3, [r7, #28]
 801d36c:	fa02 f303 	lsl.w	r3, r2, r3
 801d370:	69ba      	ldr	r2, [r7, #24]
 801d372:	4313      	orrs	r3, r2
 801d374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	69ba      	ldr	r2, [r7, #24]
 801d37a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801d37c:	683b      	ldr	r3, [r7, #0]
 801d37e:	685b      	ldr	r3, [r3, #4]
 801d380:	f003 0303 	and.w	r3, r3, #3
 801d384:	2b03      	cmp	r3, #3
 801d386:	d017      	beq.n	801d3b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	68db      	ldr	r3, [r3, #12]
 801d38c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d38e:	69fb      	ldr	r3, [r7, #28]
 801d390:	005b      	lsls	r3, r3, #1
 801d392:	2203      	movs	r2, #3
 801d394:	fa02 f303 	lsl.w	r3, r2, r3
 801d398:	43db      	mvns	r3, r3
 801d39a:	69ba      	ldr	r2, [r7, #24]
 801d39c:	4013      	ands	r3, r2
 801d39e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801d3a0:	683b      	ldr	r3, [r7, #0]
 801d3a2:	689a      	ldr	r2, [r3, #8]
 801d3a4:	69fb      	ldr	r3, [r7, #28]
 801d3a6:	005b      	lsls	r3, r3, #1
 801d3a8:	fa02 f303 	lsl.w	r3, r2, r3
 801d3ac:	69ba      	ldr	r2, [r7, #24]
 801d3ae:	4313      	orrs	r3, r2
 801d3b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	69ba      	ldr	r2, [r7, #24]
 801d3b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d3b8:	683b      	ldr	r3, [r7, #0]
 801d3ba:	685b      	ldr	r3, [r3, #4]
 801d3bc:	f003 0303 	and.w	r3, r3, #3
 801d3c0:	2b02      	cmp	r3, #2
 801d3c2:	d123      	bne.n	801d40c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801d3c4:	69fb      	ldr	r3, [r7, #28]
 801d3c6:	08da      	lsrs	r2, r3, #3
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	3208      	adds	r2, #8
 801d3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d3d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d3d2:	69fb      	ldr	r3, [r7, #28]
 801d3d4:	f003 0307 	and.w	r3, r3, #7
 801d3d8:	009b      	lsls	r3, r3, #2
 801d3da:	220f      	movs	r2, #15
 801d3dc:	fa02 f303 	lsl.w	r3, r2, r3
 801d3e0:	43db      	mvns	r3, r3
 801d3e2:	69ba      	ldr	r2, [r7, #24]
 801d3e4:	4013      	ands	r3, r2
 801d3e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801d3e8:	683b      	ldr	r3, [r7, #0]
 801d3ea:	691a      	ldr	r2, [r3, #16]
 801d3ec:	69fb      	ldr	r3, [r7, #28]
 801d3ee:	f003 0307 	and.w	r3, r3, #7
 801d3f2:	009b      	lsls	r3, r3, #2
 801d3f4:	fa02 f303 	lsl.w	r3, r2, r3
 801d3f8:	69ba      	ldr	r2, [r7, #24]
 801d3fa:	4313      	orrs	r3, r2
 801d3fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801d3fe:	69fb      	ldr	r3, [r7, #28]
 801d400:	08da      	lsrs	r2, r3, #3
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	3208      	adds	r2, #8
 801d406:	69b9      	ldr	r1, [r7, #24]
 801d408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d412:	69fb      	ldr	r3, [r7, #28]
 801d414:	005b      	lsls	r3, r3, #1
 801d416:	2203      	movs	r2, #3
 801d418:	fa02 f303 	lsl.w	r3, r2, r3
 801d41c:	43db      	mvns	r3, r3
 801d41e:	69ba      	ldr	r2, [r7, #24]
 801d420:	4013      	ands	r3, r2
 801d422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801d424:	683b      	ldr	r3, [r7, #0]
 801d426:	685b      	ldr	r3, [r3, #4]
 801d428:	f003 0203 	and.w	r2, r3, #3
 801d42c:	69fb      	ldr	r3, [r7, #28]
 801d42e:	005b      	lsls	r3, r3, #1
 801d430:	fa02 f303 	lsl.w	r3, r2, r3
 801d434:	69ba      	ldr	r2, [r7, #24]
 801d436:	4313      	orrs	r3, r2
 801d438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	69ba      	ldr	r2, [r7, #24]
 801d43e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801d440:	683b      	ldr	r3, [r7, #0]
 801d442:	685b      	ldr	r3, [r3, #4]
 801d444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d448:	2b00      	cmp	r3, #0
 801d44a:	f000 80a2 	beq.w	801d592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d44e:	2300      	movs	r3, #0
 801d450:	60fb      	str	r3, [r7, #12]
 801d452:	4b57      	ldr	r3, [pc, #348]	; (801d5b0 <HAL_GPIO_Init+0x2e8>)
 801d454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d456:	4a56      	ldr	r2, [pc, #344]	; (801d5b0 <HAL_GPIO_Init+0x2e8>)
 801d458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d45c:	6453      	str	r3, [r2, #68]	; 0x44
 801d45e:	4b54      	ldr	r3, [pc, #336]	; (801d5b0 <HAL_GPIO_Init+0x2e8>)
 801d460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d466:	60fb      	str	r3, [r7, #12]
 801d468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801d46a:	4a52      	ldr	r2, [pc, #328]	; (801d5b4 <HAL_GPIO_Init+0x2ec>)
 801d46c:	69fb      	ldr	r3, [r7, #28]
 801d46e:	089b      	lsrs	r3, r3, #2
 801d470:	3302      	adds	r3, #2
 801d472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801d478:	69fb      	ldr	r3, [r7, #28]
 801d47a:	f003 0303 	and.w	r3, r3, #3
 801d47e:	009b      	lsls	r3, r3, #2
 801d480:	220f      	movs	r2, #15
 801d482:	fa02 f303 	lsl.w	r3, r2, r3
 801d486:	43db      	mvns	r3, r3
 801d488:	69ba      	ldr	r2, [r7, #24]
 801d48a:	4013      	ands	r3, r2
 801d48c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	4a49      	ldr	r2, [pc, #292]	; (801d5b8 <HAL_GPIO_Init+0x2f0>)
 801d492:	4293      	cmp	r3, r2
 801d494:	d019      	beq.n	801d4ca <HAL_GPIO_Init+0x202>
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	4a48      	ldr	r2, [pc, #288]	; (801d5bc <HAL_GPIO_Init+0x2f4>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d013      	beq.n	801d4c6 <HAL_GPIO_Init+0x1fe>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	4a47      	ldr	r2, [pc, #284]	; (801d5c0 <HAL_GPIO_Init+0x2f8>)
 801d4a2:	4293      	cmp	r3, r2
 801d4a4:	d00d      	beq.n	801d4c2 <HAL_GPIO_Init+0x1fa>
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	4a46      	ldr	r2, [pc, #280]	; (801d5c4 <HAL_GPIO_Init+0x2fc>)
 801d4aa:	4293      	cmp	r3, r2
 801d4ac:	d007      	beq.n	801d4be <HAL_GPIO_Init+0x1f6>
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	4a45      	ldr	r2, [pc, #276]	; (801d5c8 <HAL_GPIO_Init+0x300>)
 801d4b2:	4293      	cmp	r3, r2
 801d4b4:	d101      	bne.n	801d4ba <HAL_GPIO_Init+0x1f2>
 801d4b6:	2304      	movs	r3, #4
 801d4b8:	e008      	b.n	801d4cc <HAL_GPIO_Init+0x204>
 801d4ba:	2307      	movs	r3, #7
 801d4bc:	e006      	b.n	801d4cc <HAL_GPIO_Init+0x204>
 801d4be:	2303      	movs	r3, #3
 801d4c0:	e004      	b.n	801d4cc <HAL_GPIO_Init+0x204>
 801d4c2:	2302      	movs	r3, #2
 801d4c4:	e002      	b.n	801d4cc <HAL_GPIO_Init+0x204>
 801d4c6:	2301      	movs	r3, #1
 801d4c8:	e000      	b.n	801d4cc <HAL_GPIO_Init+0x204>
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	69fa      	ldr	r2, [r7, #28]
 801d4ce:	f002 0203 	and.w	r2, r2, #3
 801d4d2:	0092      	lsls	r2, r2, #2
 801d4d4:	4093      	lsls	r3, r2
 801d4d6:	69ba      	ldr	r2, [r7, #24]
 801d4d8:	4313      	orrs	r3, r2
 801d4da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801d4dc:	4935      	ldr	r1, [pc, #212]	; (801d5b4 <HAL_GPIO_Init+0x2ec>)
 801d4de:	69fb      	ldr	r3, [r7, #28]
 801d4e0:	089b      	lsrs	r3, r3, #2
 801d4e2:	3302      	adds	r3, #2
 801d4e4:	69ba      	ldr	r2, [r7, #24]
 801d4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801d4ea:	4b38      	ldr	r3, [pc, #224]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d4ec:	689b      	ldr	r3, [r3, #8]
 801d4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d4f0:	693b      	ldr	r3, [r7, #16]
 801d4f2:	43db      	mvns	r3, r3
 801d4f4:	69ba      	ldr	r2, [r7, #24]
 801d4f6:	4013      	ands	r3, r2
 801d4f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	685b      	ldr	r3, [r3, #4]
 801d4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d502:	2b00      	cmp	r3, #0
 801d504:	d003      	beq.n	801d50e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801d506:	69ba      	ldr	r2, [r7, #24]
 801d508:	693b      	ldr	r3, [r7, #16]
 801d50a:	4313      	orrs	r3, r2
 801d50c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801d50e:	4a2f      	ldr	r2, [pc, #188]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d510:	69bb      	ldr	r3, [r7, #24]
 801d512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801d514:	4b2d      	ldr	r3, [pc, #180]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d516:	68db      	ldr	r3, [r3, #12]
 801d518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d51a:	693b      	ldr	r3, [r7, #16]
 801d51c:	43db      	mvns	r3, r3
 801d51e:	69ba      	ldr	r2, [r7, #24]
 801d520:	4013      	ands	r3, r2
 801d522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801d524:	683b      	ldr	r3, [r7, #0]
 801d526:	685b      	ldr	r3, [r3, #4]
 801d528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d003      	beq.n	801d538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801d530:	69ba      	ldr	r2, [r7, #24]
 801d532:	693b      	ldr	r3, [r7, #16]
 801d534:	4313      	orrs	r3, r2
 801d536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801d538:	4a24      	ldr	r2, [pc, #144]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d53a:	69bb      	ldr	r3, [r7, #24]
 801d53c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801d53e:	4b23      	ldr	r3, [pc, #140]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d540:	685b      	ldr	r3, [r3, #4]
 801d542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d544:	693b      	ldr	r3, [r7, #16]
 801d546:	43db      	mvns	r3, r3
 801d548:	69ba      	ldr	r2, [r7, #24]
 801d54a:	4013      	ands	r3, r2
 801d54c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801d54e:	683b      	ldr	r3, [r7, #0]
 801d550:	685b      	ldr	r3, [r3, #4]
 801d552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d556:	2b00      	cmp	r3, #0
 801d558:	d003      	beq.n	801d562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801d55a:	69ba      	ldr	r2, [r7, #24]
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	4313      	orrs	r3, r2
 801d560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801d562:	4a1a      	ldr	r2, [pc, #104]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d564:	69bb      	ldr	r3, [r7, #24]
 801d566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801d568:	4b18      	ldr	r3, [pc, #96]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d56e:	693b      	ldr	r3, [r7, #16]
 801d570:	43db      	mvns	r3, r3
 801d572:	69ba      	ldr	r2, [r7, #24]
 801d574:	4013      	ands	r3, r2
 801d576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801d578:	683b      	ldr	r3, [r7, #0]
 801d57a:	685b      	ldr	r3, [r3, #4]
 801d57c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d580:	2b00      	cmp	r3, #0
 801d582:	d003      	beq.n	801d58c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801d584:	69ba      	ldr	r2, [r7, #24]
 801d586:	693b      	ldr	r3, [r7, #16]
 801d588:	4313      	orrs	r3, r2
 801d58a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801d58c:	4a0f      	ldr	r2, [pc, #60]	; (801d5cc <HAL_GPIO_Init+0x304>)
 801d58e:	69bb      	ldr	r3, [r7, #24]
 801d590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d592:	69fb      	ldr	r3, [r7, #28]
 801d594:	3301      	adds	r3, #1
 801d596:	61fb      	str	r3, [r7, #28]
 801d598:	69fb      	ldr	r3, [r7, #28]
 801d59a:	2b0f      	cmp	r3, #15
 801d59c:	f67f aea2 	bls.w	801d2e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801d5a0:	bf00      	nop
 801d5a2:	bf00      	nop
 801d5a4:	3724      	adds	r7, #36	; 0x24
 801d5a6:	46bd      	mov	sp, r7
 801d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ac:	4770      	bx	lr
 801d5ae:	bf00      	nop
 801d5b0:	40023800 	.word	0x40023800
 801d5b4:	40013800 	.word	0x40013800
 801d5b8:	40020000 	.word	0x40020000
 801d5bc:	40020400 	.word	0x40020400
 801d5c0:	40020800 	.word	0x40020800
 801d5c4:	40020c00 	.word	0x40020c00
 801d5c8:	40021000 	.word	0x40021000
 801d5cc:	40013c00 	.word	0x40013c00

0801d5d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	b087      	sub	sp, #28
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
 801d5d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d5da:	2300      	movs	r3, #0
 801d5dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	617b      	str	r3, [r7, #20]
 801d5ea:	e0bb      	b.n	801d764 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d5ec:	2201      	movs	r2, #1
 801d5ee:	697b      	ldr	r3, [r7, #20]
 801d5f0:	fa02 f303 	lsl.w	r3, r2, r3
 801d5f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801d5f6:	683a      	ldr	r2, [r7, #0]
 801d5f8:	693b      	ldr	r3, [r7, #16]
 801d5fa:	4013      	ands	r3, r2
 801d5fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801d5fe:	68fa      	ldr	r2, [r7, #12]
 801d600:	693b      	ldr	r3, [r7, #16]
 801d602:	429a      	cmp	r2, r3
 801d604:	f040 80ab 	bne.w	801d75e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801d608:	4a5c      	ldr	r2, [pc, #368]	; (801d77c <HAL_GPIO_DeInit+0x1ac>)
 801d60a:	697b      	ldr	r3, [r7, #20]
 801d60c:	089b      	lsrs	r3, r3, #2
 801d60e:	3302      	adds	r3, #2
 801d610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d614:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801d616:	697b      	ldr	r3, [r7, #20]
 801d618:	f003 0303 	and.w	r3, r3, #3
 801d61c:	009b      	lsls	r3, r3, #2
 801d61e:	220f      	movs	r2, #15
 801d620:	fa02 f303 	lsl.w	r3, r2, r3
 801d624:	68ba      	ldr	r2, [r7, #8]
 801d626:	4013      	ands	r3, r2
 801d628:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	4a54      	ldr	r2, [pc, #336]	; (801d780 <HAL_GPIO_DeInit+0x1b0>)
 801d62e:	4293      	cmp	r3, r2
 801d630:	d019      	beq.n	801d666 <HAL_GPIO_DeInit+0x96>
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	4a53      	ldr	r2, [pc, #332]	; (801d784 <HAL_GPIO_DeInit+0x1b4>)
 801d636:	4293      	cmp	r3, r2
 801d638:	d013      	beq.n	801d662 <HAL_GPIO_DeInit+0x92>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	4a52      	ldr	r2, [pc, #328]	; (801d788 <HAL_GPIO_DeInit+0x1b8>)
 801d63e:	4293      	cmp	r3, r2
 801d640:	d00d      	beq.n	801d65e <HAL_GPIO_DeInit+0x8e>
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	4a51      	ldr	r2, [pc, #324]	; (801d78c <HAL_GPIO_DeInit+0x1bc>)
 801d646:	4293      	cmp	r3, r2
 801d648:	d007      	beq.n	801d65a <HAL_GPIO_DeInit+0x8a>
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	4a50      	ldr	r2, [pc, #320]	; (801d790 <HAL_GPIO_DeInit+0x1c0>)
 801d64e:	4293      	cmp	r3, r2
 801d650:	d101      	bne.n	801d656 <HAL_GPIO_DeInit+0x86>
 801d652:	2304      	movs	r3, #4
 801d654:	e008      	b.n	801d668 <HAL_GPIO_DeInit+0x98>
 801d656:	2307      	movs	r3, #7
 801d658:	e006      	b.n	801d668 <HAL_GPIO_DeInit+0x98>
 801d65a:	2303      	movs	r3, #3
 801d65c:	e004      	b.n	801d668 <HAL_GPIO_DeInit+0x98>
 801d65e:	2302      	movs	r3, #2
 801d660:	e002      	b.n	801d668 <HAL_GPIO_DeInit+0x98>
 801d662:	2301      	movs	r3, #1
 801d664:	e000      	b.n	801d668 <HAL_GPIO_DeInit+0x98>
 801d666:	2300      	movs	r3, #0
 801d668:	697a      	ldr	r2, [r7, #20]
 801d66a:	f002 0203 	and.w	r2, r2, #3
 801d66e:	0092      	lsls	r2, r2, #2
 801d670:	4093      	lsls	r3, r2
 801d672:	68ba      	ldr	r2, [r7, #8]
 801d674:	429a      	cmp	r2, r3
 801d676:	d132      	bne.n	801d6de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801d678:	4b46      	ldr	r3, [pc, #280]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d67a:	681a      	ldr	r2, [r3, #0]
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	43db      	mvns	r3, r3
 801d680:	4944      	ldr	r1, [pc, #272]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d682:	4013      	ands	r3, r2
 801d684:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801d686:	4b43      	ldr	r3, [pc, #268]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d688:	685a      	ldr	r2, [r3, #4]
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	43db      	mvns	r3, r3
 801d68e:	4941      	ldr	r1, [pc, #260]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d690:	4013      	ands	r3, r2
 801d692:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801d694:	4b3f      	ldr	r3, [pc, #252]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d696:	68da      	ldr	r2, [r3, #12]
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	43db      	mvns	r3, r3
 801d69c:	493d      	ldr	r1, [pc, #244]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d69e:	4013      	ands	r3, r2
 801d6a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801d6a2:	4b3c      	ldr	r3, [pc, #240]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d6a4:	689a      	ldr	r2, [r3, #8]
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	43db      	mvns	r3, r3
 801d6aa:	493a      	ldr	r1, [pc, #232]	; (801d794 <HAL_GPIO_DeInit+0x1c4>)
 801d6ac:	4013      	ands	r3, r2
 801d6ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801d6b0:	697b      	ldr	r3, [r7, #20]
 801d6b2:	f003 0303 	and.w	r3, r3, #3
 801d6b6:	009b      	lsls	r3, r3, #2
 801d6b8:	220f      	movs	r2, #15
 801d6ba:	fa02 f303 	lsl.w	r3, r2, r3
 801d6be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801d6c0:	4a2e      	ldr	r2, [pc, #184]	; (801d77c <HAL_GPIO_DeInit+0x1ac>)
 801d6c2:	697b      	ldr	r3, [r7, #20]
 801d6c4:	089b      	lsrs	r3, r3, #2
 801d6c6:	3302      	adds	r3, #2
 801d6c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	43da      	mvns	r2, r3
 801d6d0:	482a      	ldr	r0, [pc, #168]	; (801d77c <HAL_GPIO_DeInit+0x1ac>)
 801d6d2:	697b      	ldr	r3, [r7, #20]
 801d6d4:	089b      	lsrs	r3, r3, #2
 801d6d6:	400a      	ands	r2, r1
 801d6d8:	3302      	adds	r3, #2
 801d6da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	681a      	ldr	r2, [r3, #0]
 801d6e2:	697b      	ldr	r3, [r7, #20]
 801d6e4:	005b      	lsls	r3, r3, #1
 801d6e6:	2103      	movs	r1, #3
 801d6e8:	fa01 f303 	lsl.w	r3, r1, r3
 801d6ec:	43db      	mvns	r3, r3
 801d6ee:	401a      	ands	r2, r3
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	08da      	lsrs	r2, r3, #3
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	3208      	adds	r2, #8
 801d6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d700:	697b      	ldr	r3, [r7, #20]
 801d702:	f003 0307 	and.w	r3, r3, #7
 801d706:	009b      	lsls	r3, r3, #2
 801d708:	220f      	movs	r2, #15
 801d70a:	fa02 f303 	lsl.w	r3, r2, r3
 801d70e:	43db      	mvns	r3, r3
 801d710:	697a      	ldr	r2, [r7, #20]
 801d712:	08d2      	lsrs	r2, r2, #3
 801d714:	4019      	ands	r1, r3
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	3208      	adds	r2, #8
 801d71a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	68da      	ldr	r2, [r3, #12]
 801d722:	697b      	ldr	r3, [r7, #20]
 801d724:	005b      	lsls	r3, r3, #1
 801d726:	2103      	movs	r1, #3
 801d728:	fa01 f303 	lsl.w	r3, r1, r3
 801d72c:	43db      	mvns	r3, r3
 801d72e:	401a      	ands	r2, r3
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	685a      	ldr	r2, [r3, #4]
 801d738:	2101      	movs	r1, #1
 801d73a:	697b      	ldr	r3, [r7, #20]
 801d73c:	fa01 f303 	lsl.w	r3, r1, r3
 801d740:	43db      	mvns	r3, r3
 801d742:	401a      	ands	r2, r3
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	689a      	ldr	r2, [r3, #8]
 801d74c:	697b      	ldr	r3, [r7, #20]
 801d74e:	005b      	lsls	r3, r3, #1
 801d750:	2103      	movs	r1, #3
 801d752:	fa01 f303 	lsl.w	r3, r1, r3
 801d756:	43db      	mvns	r3, r3
 801d758:	401a      	ands	r2, r3
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d75e:	697b      	ldr	r3, [r7, #20]
 801d760:	3301      	adds	r3, #1
 801d762:	617b      	str	r3, [r7, #20]
 801d764:	697b      	ldr	r3, [r7, #20]
 801d766:	2b0f      	cmp	r3, #15
 801d768:	f67f af40 	bls.w	801d5ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801d76c:	bf00      	nop
 801d76e:	bf00      	nop
 801d770:	371c      	adds	r7, #28
 801d772:	46bd      	mov	sp, r7
 801d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d778:	4770      	bx	lr
 801d77a:	bf00      	nop
 801d77c:	40013800 	.word	0x40013800
 801d780:	40020000 	.word	0x40020000
 801d784:	40020400 	.word	0x40020400
 801d788:	40020800 	.word	0x40020800
 801d78c:	40020c00 	.word	0x40020c00
 801d790:	40021000 	.word	0x40021000
 801d794:	40013c00 	.word	0x40013c00

0801d798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801d798:	b480      	push	{r7}
 801d79a:	b083      	sub	sp, #12
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	6078      	str	r0, [r7, #4]
 801d7a0:	460b      	mov	r3, r1
 801d7a2:	807b      	strh	r3, [r7, #2]
 801d7a4:	4613      	mov	r3, r2
 801d7a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801d7a8:	787b      	ldrb	r3, [r7, #1]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d003      	beq.n	801d7b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801d7ae:	887a      	ldrh	r2, [r7, #2]
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801d7b4:	e003      	b.n	801d7be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801d7b6:	887b      	ldrh	r3, [r7, #2]
 801d7b8:	041a      	lsls	r2, r3, #16
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	619a      	str	r2, [r3, #24]
}
 801d7be:	bf00      	nop
 801d7c0:	370c      	adds	r7, #12
 801d7c2:	46bd      	mov	sp, r7
 801d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7c8:	4770      	bx	lr
	...

0801d7cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b082      	sub	sp, #8
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801d7d6:	4b08      	ldr	r3, [pc, #32]	; (801d7f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d7d8:	695a      	ldr	r2, [r3, #20]
 801d7da:	88fb      	ldrh	r3, [r7, #6]
 801d7dc:	4013      	ands	r3, r2
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d006      	beq.n	801d7f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801d7e2:	4a05      	ldr	r2, [pc, #20]	; (801d7f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d7e4:	88fb      	ldrh	r3, [r7, #6]
 801d7e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801d7e8:	88fb      	ldrh	r3, [r7, #6]
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f7e4 fcbb 	bl	8002166 <HAL_GPIO_EXTI_Callback>
  }
}
 801d7f0:	bf00      	nop
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	40013c00 	.word	0x40013c00

0801d7fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b084      	sub	sp, #16
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d101      	bne.n	801d80e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801d80a:	2301      	movs	r3, #1
 801d80c:	e12b      	b.n	801da66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d814:	b2db      	uxtb	r3, r3
 801d816:	2b00      	cmp	r3, #0
 801d818:	d106      	bne.n	801d828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	2200      	movs	r2, #0
 801d81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801d822:	6878      	ldr	r0, [r7, #4]
 801d824:	f7e5 fea0 	bl	8003568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	2224      	movs	r2, #36	; 0x24
 801d82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	681a      	ldr	r2, [r3, #0]
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	f022 0201 	bic.w	r2, r2, #1
 801d83e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	681a      	ldr	r2, [r3, #0]
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d84e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	681a      	ldr	r2, [r3, #0]
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d85e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801d860:	f003 fb62 	bl	8020f28 <HAL_RCC_GetPCLK1Freq>
 801d864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	685b      	ldr	r3, [r3, #4]
 801d86a:	4a81      	ldr	r2, [pc, #516]	; (801da70 <HAL_I2C_Init+0x274>)
 801d86c:	4293      	cmp	r3, r2
 801d86e:	d807      	bhi.n	801d880 <HAL_I2C_Init+0x84>
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	4a80      	ldr	r2, [pc, #512]	; (801da74 <HAL_I2C_Init+0x278>)
 801d874:	4293      	cmp	r3, r2
 801d876:	bf94      	ite	ls
 801d878:	2301      	movls	r3, #1
 801d87a:	2300      	movhi	r3, #0
 801d87c:	b2db      	uxtb	r3, r3
 801d87e:	e006      	b.n	801d88e <HAL_I2C_Init+0x92>
 801d880:	68fb      	ldr	r3, [r7, #12]
 801d882:	4a7d      	ldr	r2, [pc, #500]	; (801da78 <HAL_I2C_Init+0x27c>)
 801d884:	4293      	cmp	r3, r2
 801d886:	bf94      	ite	ls
 801d888:	2301      	movls	r3, #1
 801d88a:	2300      	movhi	r3, #0
 801d88c:	b2db      	uxtb	r3, r3
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d001      	beq.n	801d896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801d892:	2301      	movs	r3, #1
 801d894:	e0e7      	b.n	801da66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	4a78      	ldr	r2, [pc, #480]	; (801da7c <HAL_I2C_Init+0x280>)
 801d89a:	fba2 2303 	umull	r2, r3, r2, r3
 801d89e:	0c9b      	lsrs	r3, r3, #18
 801d8a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	685b      	ldr	r3, [r3, #4]
 801d8a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	68ba      	ldr	r2, [r7, #8]
 801d8b2:	430a      	orrs	r2, r1
 801d8b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	6a1b      	ldr	r3, [r3, #32]
 801d8bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	685b      	ldr	r3, [r3, #4]
 801d8c4:	4a6a      	ldr	r2, [pc, #424]	; (801da70 <HAL_I2C_Init+0x274>)
 801d8c6:	4293      	cmp	r3, r2
 801d8c8:	d802      	bhi.n	801d8d0 <HAL_I2C_Init+0xd4>
 801d8ca:	68bb      	ldr	r3, [r7, #8]
 801d8cc:	3301      	adds	r3, #1
 801d8ce:	e009      	b.n	801d8e4 <HAL_I2C_Init+0xe8>
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801d8d6:	fb02 f303 	mul.w	r3, r2, r3
 801d8da:	4a69      	ldr	r2, [pc, #420]	; (801da80 <HAL_I2C_Init+0x284>)
 801d8dc:	fba2 2303 	umull	r2, r3, r2, r3
 801d8e0:	099b      	lsrs	r3, r3, #6
 801d8e2:	3301      	adds	r3, #1
 801d8e4:	687a      	ldr	r2, [r7, #4]
 801d8e6:	6812      	ldr	r2, [r2, #0]
 801d8e8:	430b      	orrs	r3, r1
 801d8ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	69db      	ldr	r3, [r3, #28]
 801d8f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801d8f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	685b      	ldr	r3, [r3, #4]
 801d8fe:	495c      	ldr	r1, [pc, #368]	; (801da70 <HAL_I2C_Init+0x274>)
 801d900:	428b      	cmp	r3, r1
 801d902:	d819      	bhi.n	801d938 <HAL_I2C_Init+0x13c>
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	1e59      	subs	r1, r3, #1
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	005b      	lsls	r3, r3, #1
 801d90e:	fbb1 f3f3 	udiv	r3, r1, r3
 801d912:	1c59      	adds	r1, r3, #1
 801d914:	f640 73fc 	movw	r3, #4092	; 0xffc
 801d918:	400b      	ands	r3, r1
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d00a      	beq.n	801d934 <HAL_I2C_Init+0x138>
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	1e59      	subs	r1, r3, #1
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	685b      	ldr	r3, [r3, #4]
 801d926:	005b      	lsls	r3, r3, #1
 801d928:	fbb1 f3f3 	udiv	r3, r1, r3
 801d92c:	3301      	adds	r3, #1
 801d92e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d932:	e051      	b.n	801d9d8 <HAL_I2C_Init+0x1dc>
 801d934:	2304      	movs	r3, #4
 801d936:	e04f      	b.n	801d9d8 <HAL_I2C_Init+0x1dc>
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	689b      	ldr	r3, [r3, #8]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d111      	bne.n	801d964 <HAL_I2C_Init+0x168>
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	1e58      	subs	r0, r3, #1
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	6859      	ldr	r1, [r3, #4]
 801d948:	460b      	mov	r3, r1
 801d94a:	005b      	lsls	r3, r3, #1
 801d94c:	440b      	add	r3, r1
 801d94e:	fbb0 f3f3 	udiv	r3, r0, r3
 801d952:	3301      	adds	r3, #1
 801d954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d958:	2b00      	cmp	r3, #0
 801d95a:	bf0c      	ite	eq
 801d95c:	2301      	moveq	r3, #1
 801d95e:	2300      	movne	r3, #0
 801d960:	b2db      	uxtb	r3, r3
 801d962:	e012      	b.n	801d98a <HAL_I2C_Init+0x18e>
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	1e58      	subs	r0, r3, #1
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	6859      	ldr	r1, [r3, #4]
 801d96c:	460b      	mov	r3, r1
 801d96e:	009b      	lsls	r3, r3, #2
 801d970:	440b      	add	r3, r1
 801d972:	0099      	lsls	r1, r3, #2
 801d974:	440b      	add	r3, r1
 801d976:	fbb0 f3f3 	udiv	r3, r0, r3
 801d97a:	3301      	adds	r3, #1
 801d97c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d980:	2b00      	cmp	r3, #0
 801d982:	bf0c      	ite	eq
 801d984:	2301      	moveq	r3, #1
 801d986:	2300      	movne	r3, #0
 801d988:	b2db      	uxtb	r3, r3
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d001      	beq.n	801d992 <HAL_I2C_Init+0x196>
 801d98e:	2301      	movs	r3, #1
 801d990:	e022      	b.n	801d9d8 <HAL_I2C_Init+0x1dc>
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	689b      	ldr	r3, [r3, #8]
 801d996:	2b00      	cmp	r3, #0
 801d998:	d10e      	bne.n	801d9b8 <HAL_I2C_Init+0x1bc>
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	1e58      	subs	r0, r3, #1
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	6859      	ldr	r1, [r3, #4]
 801d9a2:	460b      	mov	r3, r1
 801d9a4:	005b      	lsls	r3, r3, #1
 801d9a6:	440b      	add	r3, r1
 801d9a8:	fbb0 f3f3 	udiv	r3, r0, r3
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d9b6:	e00f      	b.n	801d9d8 <HAL_I2C_Init+0x1dc>
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	1e58      	subs	r0, r3, #1
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	6859      	ldr	r1, [r3, #4]
 801d9c0:	460b      	mov	r3, r1
 801d9c2:	009b      	lsls	r3, r3, #2
 801d9c4:	440b      	add	r3, r1
 801d9c6:	0099      	lsls	r1, r3, #2
 801d9c8:	440b      	add	r3, r1
 801d9ca:	fbb0 f3f3 	udiv	r3, r0, r3
 801d9ce:	3301      	adds	r3, #1
 801d9d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d9d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801d9d8:	6879      	ldr	r1, [r7, #4]
 801d9da:	6809      	ldr	r1, [r1, #0]
 801d9dc:	4313      	orrs	r3, r2
 801d9de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	69da      	ldr	r2, [r3, #28]
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	6a1b      	ldr	r3, [r3, #32]
 801d9f2:	431a      	orrs	r2, r3
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	430a      	orrs	r2, r1
 801d9fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	689b      	ldr	r3, [r3, #8]
 801da02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801da06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801da0a:	687a      	ldr	r2, [r7, #4]
 801da0c:	6911      	ldr	r1, [r2, #16]
 801da0e:	687a      	ldr	r2, [r7, #4]
 801da10:	68d2      	ldr	r2, [r2, #12]
 801da12:	4311      	orrs	r1, r2
 801da14:	687a      	ldr	r2, [r7, #4]
 801da16:	6812      	ldr	r2, [r2, #0]
 801da18:	430b      	orrs	r3, r1
 801da1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	68db      	ldr	r3, [r3, #12]
 801da22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	695a      	ldr	r2, [r3, #20]
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	699b      	ldr	r3, [r3, #24]
 801da2e:	431a      	orrs	r2, r3
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	430a      	orrs	r2, r1
 801da36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	681a      	ldr	r2, [r3, #0]
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	f042 0201 	orr.w	r2, r2, #1
 801da46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	2200      	movs	r2, #0
 801da4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	2220      	movs	r2, #32
 801da52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	2200      	movs	r2, #0
 801da5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	2200      	movs	r2, #0
 801da60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801da64:	2300      	movs	r3, #0
}
 801da66:	4618      	mov	r0, r3
 801da68:	3710      	adds	r7, #16
 801da6a:	46bd      	mov	sp, r7
 801da6c:	bd80      	pop	{r7, pc}
 801da6e:	bf00      	nop
 801da70:	000186a0 	.word	0x000186a0
 801da74:	001e847f 	.word	0x001e847f
 801da78:	003d08ff 	.word	0x003d08ff
 801da7c:	431bde83 	.word	0x431bde83
 801da80:	10624dd3 	.word	0x10624dd3

0801da84 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b086      	sub	sp, #24
 801da88:	af00      	add	r7, sp, #0
 801da8a:	60f8      	str	r0, [r7, #12]
 801da8c:	607a      	str	r2, [r7, #4]
 801da8e:	461a      	mov	r2, r3
 801da90:	460b      	mov	r3, r1
 801da92:	817b      	strh	r3, [r7, #10]
 801da94:	4613      	mov	r3, r2
 801da96:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801da98:	2300      	movs	r3, #0
 801da9a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801daa2:	b2db      	uxtb	r3, r3
 801daa4:	2b20      	cmp	r3, #32
 801daa6:	f040 810d 	bne.w	801dcc4 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801daaa:	4b89      	ldr	r3, [pc, #548]	; (801dcd0 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	08db      	lsrs	r3, r3, #3
 801dab0:	4a88      	ldr	r2, [pc, #544]	; (801dcd4 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801dab2:	fba2 2303 	umull	r2, r3, r2, r3
 801dab6:	0a1a      	lsrs	r2, r3, #8
 801dab8:	4613      	mov	r3, r2
 801daba:	009b      	lsls	r3, r3, #2
 801dabc:	4413      	add	r3, r2
 801dabe:	009a      	lsls	r2, r3, #2
 801dac0:	4413      	add	r3, r2
 801dac2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	3b01      	subs	r3, #1
 801dac8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801daca:	693b      	ldr	r3, [r7, #16]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d116      	bne.n	801dafe <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	2200      	movs	r2, #0
 801dad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	2220      	movs	r2, #32
 801dada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dade:	68fb      	ldr	r3, [r7, #12]
 801dae0:	2200      	movs	r2, #0
 801dae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801daea:	f043 0220 	orr.w	r2, r3, #32
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	2200      	movs	r2, #0
 801daf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dafa:	2301      	movs	r3, #1
 801dafc:	e0e3      	b.n	801dcc6 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	699b      	ldr	r3, [r3, #24]
 801db04:	f003 0302 	and.w	r3, r3, #2
 801db08:	2b02      	cmp	r3, #2
 801db0a:	d0db      	beq.n	801dac4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801db12:	2b01      	cmp	r3, #1
 801db14:	d101      	bne.n	801db1a <HAL_I2C_Master_Transmit_DMA+0x96>
 801db16:	2302      	movs	r3, #2
 801db18:	e0d5      	b.n	801dcc6 <HAL_I2C_Master_Transmit_DMA+0x242>
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	2201      	movs	r2, #1
 801db1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	681b      	ldr	r3, [r3, #0]
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	f003 0301 	and.w	r3, r3, #1
 801db2c:	2b01      	cmp	r3, #1
 801db2e:	d007      	beq.n	801db40 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	681a      	ldr	r2, [r3, #0]
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	f042 0201 	orr.w	r2, r2, #1
 801db3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	681a      	ldr	r2, [r3, #0]
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801db4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	2221      	movs	r2, #33	; 0x21
 801db54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	2210      	movs	r2, #16
 801db5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2200      	movs	r2, #0
 801db64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	687a      	ldr	r2, [r7, #4]
 801db6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	893a      	ldrh	r2, [r7, #8]
 801db70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801db76:	b29a      	uxth	r2, r3
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	4a56      	ldr	r2, [pc, #344]	; (801dcd8 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801db80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801db82:	897a      	ldrh	r2, [r7, #10]
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d07b      	beq.n	801dc88 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db94:	2b00      	cmp	r3, #0
 801db96:	d02a      	beq.n	801dbee <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db9c:	4a4f      	ldr	r2, [pc, #316]	; (801dcdc <HAL_I2C_Master_Transmit_DMA+0x258>)
 801db9e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dba4:	4a4e      	ldr	r2, [pc, #312]	; (801dce0 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801dba6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbac:	2200      	movs	r2, #0
 801dbae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbb4:	2200      	movs	r2, #0
 801dbb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbbc:	2200      	movs	r2, #0
 801dbbe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbc4:	2200      	movs	r2, #0
 801dbc6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbd0:	4619      	mov	r1, r3
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	3310      	adds	r3, #16
 801dbd8:	461a      	mov	r2, r3
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dbde:	f7ff f805 	bl	801cbec <HAL_DMA_Start_IT>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dbe6:	7dfb      	ldrb	r3, [r7, #23]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d139      	bne.n	801dc60 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801dbec:	e013      	b.n	801dc16 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	2220      	movs	r2, #32
 801dbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dc12:	2301      	movs	r3, #1
 801dc14:	e057      	b.n	801dcc6 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dc16:	68fb      	ldr	r3, [r7, #12]
 801dc18:	2200      	movs	r2, #0
 801dc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	685a      	ldr	r2, [r3, #4]
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801dc2c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	685a      	ldr	r2, [r3, #4]
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dc3c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	681a      	ldr	r2, [r3, #0]
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dc4c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	681a      	ldr	r2, [r3, #0]
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dc5c:	601a      	str	r2, [r3, #0]
 801dc5e:	e02f      	b.n	801dcc0 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	2220      	movs	r2, #32
 801dc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc74:	f043 0210 	orr.w	r2, r3, #16
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	2200      	movs	r2, #0
 801dc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dc84:	2301      	movs	r3, #1
 801dc86:	e01e      	b.n	801dcc6 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	681a      	ldr	r2, [r3, #0]
 801dc8e:	68fb      	ldr	r3, [r7, #12]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dc96:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	681a      	ldr	r2, [r3, #0]
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dca6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	2200      	movs	r2, #0
 801dcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	685a      	ldr	r2, [r3, #4]
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801dcbe:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	e000      	b.n	801dcc6 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801dcc4:	2302      	movs	r3, #2
  }
}
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	3718      	adds	r7, #24
 801dcca:	46bd      	mov	sp, r7
 801dccc:	bd80      	pop	{r7, pc}
 801dcce:	bf00      	nop
 801dcd0:	20000020 	.word	0x20000020
 801dcd4:	14f8b589 	.word	0x14f8b589
 801dcd8:	ffff0000 	.word	0xffff0000
 801dcdc:	0801ffad 	.word	0x0801ffad
 801dce0:	08020157 	.word	0x08020157

0801dce4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b086      	sub	sp, #24
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	60f8      	str	r0, [r7, #12]
 801dcec:	607a      	str	r2, [r7, #4]
 801dcee:	461a      	mov	r2, r3
 801dcf0:	460b      	mov	r3, r1
 801dcf2:	817b      	strh	r3, [r7, #10]
 801dcf4:	4613      	mov	r3, r2
 801dcf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dd02:	b2db      	uxtb	r3, r3
 801dd04:	2b20      	cmp	r3, #32
 801dd06:	f040 810d 	bne.w	801df24 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801dd0a:	4b89      	ldr	r3, [pc, #548]	; (801df30 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	08db      	lsrs	r3, r3, #3
 801dd10:	4a88      	ldr	r2, [pc, #544]	; (801df34 <HAL_I2C_Master_Receive_DMA+0x250>)
 801dd12:	fba2 2303 	umull	r2, r3, r2, r3
 801dd16:	0a1a      	lsrs	r2, r3, #8
 801dd18:	4613      	mov	r3, r2
 801dd1a:	009b      	lsls	r3, r3, #2
 801dd1c:	4413      	add	r3, r2
 801dd1e:	009a      	lsls	r2, r3, #2
 801dd20:	4413      	add	r3, r2
 801dd22:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801dd24:	693b      	ldr	r3, [r7, #16]
 801dd26:	3b01      	subs	r3, #1
 801dd28:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801dd2a:	693b      	ldr	r3, [r7, #16]
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d116      	bne.n	801dd5e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	2200      	movs	r2, #0
 801dd34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	2220      	movs	r2, #32
 801dd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	2200      	movs	r2, #0
 801dd42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd4a:	f043 0220 	orr.w	r2, r3, #32
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	2200      	movs	r2, #0
 801dd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	e0e3      	b.n	801df26 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	699b      	ldr	r3, [r3, #24]
 801dd64:	f003 0302 	and.w	r3, r3, #2
 801dd68:	2b02      	cmp	r3, #2
 801dd6a:	d0db      	beq.n	801dd24 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dd72:	2b01      	cmp	r3, #1
 801dd74:	d101      	bne.n	801dd7a <HAL_I2C_Master_Receive_DMA+0x96>
 801dd76:	2302      	movs	r3, #2
 801dd78:	e0d5      	b.n	801df26 <HAL_I2C_Master_Receive_DMA+0x242>
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	2201      	movs	r2, #1
 801dd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	f003 0301 	and.w	r3, r3, #1
 801dd8c:	2b01      	cmp	r3, #1
 801dd8e:	d007      	beq.n	801dda0 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	681a      	ldr	r2, [r3, #0]
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	f042 0201 	orr.w	r2, r2, #1
 801dd9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	681a      	ldr	r2, [r3, #0]
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ddae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	2222      	movs	r2, #34	; 0x22
 801ddb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	2210      	movs	r2, #16
 801ddbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	687a      	ldr	r2, [r7, #4]
 801ddca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	893a      	ldrh	r2, [r7, #8]
 801ddd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddd6:	b29a      	uxth	r2, r3
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	4a56      	ldr	r2, [pc, #344]	; (801df38 <HAL_I2C_Master_Receive_DMA+0x254>)
 801dde0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801dde2:	897a      	ldrh	r2, [r7, #10]
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d07b      	beq.n	801dee8 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d02a      	beq.n	801de4e <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddfc:	4a4f      	ldr	r2, [pc, #316]	; (801df3c <HAL_I2C_Master_Receive_DMA+0x258>)
 801ddfe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de04:	4a4e      	ldr	r2, [pc, #312]	; (801df40 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801de06:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de0c:	2200      	movs	r2, #0
 801de0e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de14:	2200      	movs	r2, #0
 801de16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de1c:	2200      	movs	r2, #0
 801de1e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de24:	2200      	movs	r2, #0
 801de26:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	3310      	adds	r3, #16
 801de32:	4619      	mov	r1, r3
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de38:	461a      	mov	r2, r3
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801de3e:	f7fe fed5 	bl	801cbec <HAL_DMA_Start_IT>
 801de42:	4603      	mov	r3, r0
 801de44:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801de46:	7dfb      	ldrb	r3, [r7, #23]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d139      	bne.n	801dec0 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801de4c:	e013      	b.n	801de76 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	2220      	movs	r2, #32
 801de52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	2200      	movs	r2, #0
 801de5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	2200      	movs	r2, #0
 801de6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801de72:	2301      	movs	r3, #1
 801de74:	e057      	b.n	801df26 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	681a      	ldr	r2, [r3, #0]
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801de84:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	681a      	ldr	r2, [r3, #0]
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801de94:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	2200      	movs	r2, #0
 801de9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	685a      	ldr	r2, [r3, #4]
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801deac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	685a      	ldr	r2, [r3, #4]
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801debc:	605a      	str	r2, [r3, #4]
 801debe:	e02f      	b.n	801df20 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	2220      	movs	r2, #32
 801dec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	2200      	movs	r2, #0
 801decc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ded4:	f043 0210 	orr.w	r2, r3, #16
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	2200      	movs	r2, #0
 801dee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dee4:	2301      	movs	r3, #1
 801dee6:	e01e      	b.n	801df26 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	2200      	movs	r2, #0
 801deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	685a      	ldr	r2, [r3, #4]
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801defe:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	681a      	ldr	r2, [r3, #0]
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801df0e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	681a      	ldr	r2, [r3, #0]
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801df1e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801df20:	2300      	movs	r3, #0
 801df22:	e000      	b.n	801df26 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801df24:	2302      	movs	r3, #2
  }
}
 801df26:	4618      	mov	r0, r3
 801df28:	3718      	adds	r7, #24
 801df2a:	46bd      	mov	sp, r7
 801df2c:	bd80      	pop	{r7, pc}
 801df2e:	bf00      	nop
 801df30:	20000020 	.word	0x20000020
 801df34:	14f8b589 	.word	0x14f8b589
 801df38:	ffff0000 	.word	0xffff0000
 801df3c:	0801ffad 	.word	0x0801ffad
 801df40:	08020157 	.word	0x08020157

0801df44 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801df44:	b580      	push	{r7, lr}
 801df46:	b08a      	sub	sp, #40	; 0x28
 801df48:	af02      	add	r7, sp, #8
 801df4a:	60f8      	str	r0, [r7, #12]
 801df4c:	4608      	mov	r0, r1
 801df4e:	4611      	mov	r1, r2
 801df50:	461a      	mov	r2, r3
 801df52:	4603      	mov	r3, r0
 801df54:	817b      	strh	r3, [r7, #10]
 801df56:	460b      	mov	r3, r1
 801df58:	813b      	strh	r3, [r7, #8]
 801df5a:	4613      	mov	r3, r2
 801df5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801df5e:	2300      	movs	r3, #0
 801df60:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801df62:	f7fe f843 	bl	801bfec <HAL_GetTick>
 801df66:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df6e:	b2db      	uxtb	r3, r3
 801df70:	2b20      	cmp	r3, #32
 801df72:	f040 8145 	bne.w	801e200 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801df76:	4b9d      	ldr	r3, [pc, #628]	; (801e1ec <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	08db      	lsrs	r3, r3, #3
 801df7c:	4a9c      	ldr	r2, [pc, #624]	; (801e1f0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801df7e:	fba2 2303 	umull	r2, r3, r2, r3
 801df82:	0a1a      	lsrs	r2, r3, #8
 801df84:	4613      	mov	r3, r2
 801df86:	009b      	lsls	r3, r3, #2
 801df88:	4413      	add	r3, r2
 801df8a:	009a      	lsls	r2, r3, #2
 801df8c:	4413      	add	r3, r2
 801df8e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801df90:	697b      	ldr	r3, [r7, #20]
 801df92:	3b01      	subs	r3, #1
 801df94:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801df96:	697b      	ldr	r3, [r7, #20]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d116      	bne.n	801dfca <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	2200      	movs	r2, #0
 801dfa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	2220      	movs	r2, #32
 801dfa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	2200      	movs	r2, #0
 801dfae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfb6:	f043 0220 	orr.w	r2, r3, #32
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	e11b      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	699b      	ldr	r3, [r3, #24]
 801dfd0:	f003 0302 	and.w	r3, r3, #2
 801dfd4:	2b02      	cmp	r3, #2
 801dfd6:	d0db      	beq.n	801df90 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dfde:	2b01      	cmp	r3, #1
 801dfe0:	d101      	bne.n	801dfe6 <HAL_I2C_Mem_Write_DMA+0xa2>
 801dfe2:	2302      	movs	r3, #2
 801dfe4:	e10d      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	2201      	movs	r2, #1
 801dfea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	f003 0301 	and.w	r3, r3, #1
 801dff8:	2b01      	cmp	r3, #1
 801dffa:	d007      	beq.n	801e00c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	681a      	ldr	r2, [r3, #0]
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	681b      	ldr	r3, [r3, #0]
 801e006:	f042 0201 	orr.w	r2, r2, #1
 801e00a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	681a      	ldr	r2, [r3, #0]
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e01a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	2221      	movs	r2, #33	; 0x21
 801e020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	2240      	movs	r2, #64	; 0x40
 801e028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	2200      	movs	r2, #0
 801e030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e03c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e042:	b29a      	uxth	r2, r3
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	4a6a      	ldr	r2, [pc, #424]	; (801e1f4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801e04c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e04e:	897a      	ldrh	r2, [r7, #10]
 801e050:	68fb      	ldr	r3, [r7, #12]
 801e052:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801e054:	893a      	ldrh	r2, [r7, #8]
 801e056:	68fb      	ldr	r3, [r7, #12]
 801e058:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801e05a:	88fa      	ldrh	r2, [r7, #6]
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	2200      	movs	r2, #0
 801e064:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	f000 80a9 	beq.w	801e1c2 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e074:	2b00      	cmp	r3, #0
 801e076:	d02a      	beq.n	801e0ce <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e07c:	4a5e      	ldr	r2, [pc, #376]	; (801e1f8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801e07e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801e080:	68fb      	ldr	r3, [r7, #12]
 801e082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e084:	4a5d      	ldr	r2, [pc, #372]	; (801e1fc <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801e086:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e08c:	2200      	movs	r2, #0
 801e08e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e094:	2200      	movs	r2, #0
 801e096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801e098:	68fb      	ldr	r3, [r7, #12]
 801e09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e09c:	2200      	movs	r2, #0
 801e09e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0b0:	4619      	mov	r1, r3
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	3310      	adds	r3, #16
 801e0b8:	461a      	mov	r2, r3
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e0be:	f7fe fd95 	bl	801cbec <HAL_DMA_Start_IT>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e0c6:	7efb      	ldrb	r3, [r7, #27]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d166      	bne.n	801e19a <HAL_I2C_Mem_Write_DMA+0x256>
 801e0cc:	e013      	b.n	801e0f6 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	2220      	movs	r2, #32
 801e0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	2200      	movs	r2, #0
 801e0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	e085      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e0f6:	88f8      	ldrh	r0, [r7, #6]
 801e0f8:	893a      	ldrh	r2, [r7, #8]
 801e0fa:	8979      	ldrh	r1, [r7, #10]
 801e0fc:	69fb      	ldr	r3, [r7, #28]
 801e0fe:	9301      	str	r3, [sp, #4]
 801e100:	2323      	movs	r3, #35	; 0x23
 801e102:	9300      	str	r3, [sp, #0]
 801e104:	4603      	mov	r3, r0
 801e106:	68f8      	ldr	r0, [r7, #12]
 801e108:	f001 fdd2 	bl	801fcb0 <I2C_RequestMemoryWrite>
 801e10c:	4603      	mov	r3, r0
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d022      	beq.n	801e158 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e116:	4618      	mov	r0, r3
 801e118:	f7fe fe30 	bl	801cd7c <HAL_DMA_Abort_IT>
 801e11c:	4603      	mov	r3, r0
 801e11e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801e120:	68fb      	ldr	r3, [r7, #12]
 801e122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e124:	2200      	movs	r2, #0
 801e126:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	681a      	ldr	r2, [r3, #0]
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e136:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	2200      	movs	r2, #0
 801e13c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	2200      	movs	r2, #0
 801e142:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	681a      	ldr	r2, [r3, #0]
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	f022 0201 	bic.w	r2, r2, #1
 801e152:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801e154:	2301      	movs	r3, #1
 801e156:	e054      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e158:	2300      	movs	r3, #0
 801e15a:	613b      	str	r3, [r7, #16]
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	695b      	ldr	r3, [r3, #20]
 801e162:	613b      	str	r3, [r7, #16]
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	699b      	ldr	r3, [r3, #24]
 801e16a:	613b      	str	r3, [r7, #16]
 801e16c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	2200      	movs	r2, #0
 801e172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	685a      	ldr	r2, [r3, #4]
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e184:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	685a      	ldr	r2, [r3, #4]
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e194:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801e196:	2300      	movs	r3, #0
 801e198:	e033      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	2220      	movs	r2, #32
 801e19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1ae:	f043 0210 	orr.w	r2, r3, #16
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e1be:	2301      	movs	r3, #1
 801e1c0:	e01f      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	2220      	movs	r2, #32
 801e1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e1da:	68fb      	ldr	r3, [r7, #12]
 801e1dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	2200      	movs	r2, #0
 801e1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801e1e6:	2301      	movs	r3, #1
 801e1e8:	e00b      	b.n	801e202 <HAL_I2C_Mem_Write_DMA+0x2be>
 801e1ea:	bf00      	nop
 801e1ec:	20000020 	.word	0x20000020
 801e1f0:	14f8b589 	.word	0x14f8b589
 801e1f4:	ffff0000 	.word	0xffff0000
 801e1f8:	0801ffad 	.word	0x0801ffad
 801e1fc:	08020157 	.word	0x08020157
    }
  }
  else
  {
    return HAL_BUSY;
 801e200:	2302      	movs	r3, #2
  }
}
 801e202:	4618      	mov	r0, r3
 801e204:	3720      	adds	r7, #32
 801e206:	46bd      	mov	sp, r7
 801e208:	bd80      	pop	{r7, pc}
 801e20a:	bf00      	nop

0801e20c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801e20c:	b580      	push	{r7, lr}
 801e20e:	b08c      	sub	sp, #48	; 0x30
 801e210:	af02      	add	r7, sp, #8
 801e212:	60f8      	str	r0, [r7, #12]
 801e214:	4608      	mov	r0, r1
 801e216:	4611      	mov	r1, r2
 801e218:	461a      	mov	r2, r3
 801e21a:	4603      	mov	r3, r0
 801e21c:	817b      	strh	r3, [r7, #10]
 801e21e:	460b      	mov	r3, r1
 801e220:	813b      	strh	r3, [r7, #8]
 801e222:	4613      	mov	r3, r2
 801e224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801e226:	f7fd fee1 	bl	801bfec <HAL_GetTick>
 801e22a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801e22c:	2300      	movs	r3, #0
 801e22e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e236:	b2db      	uxtb	r3, r3
 801e238:	2b20      	cmp	r3, #32
 801e23a:	f040 8176 	bne.w	801e52a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801e23e:	4b95      	ldr	r3, [pc, #596]	; (801e494 <HAL_I2C_Mem_Read_DMA+0x288>)
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	08db      	lsrs	r3, r3, #3
 801e244:	4a94      	ldr	r2, [pc, #592]	; (801e498 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801e246:	fba2 2303 	umull	r2, r3, r2, r3
 801e24a:	0a1a      	lsrs	r2, r3, #8
 801e24c:	4613      	mov	r3, r2
 801e24e:	009b      	lsls	r3, r3, #2
 801e250:	4413      	add	r3, r2
 801e252:	009a      	lsls	r2, r3, #2
 801e254:	4413      	add	r3, r2
 801e256:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801e258:	69fb      	ldr	r3, [r7, #28]
 801e25a:	3b01      	subs	r3, #1
 801e25c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801e25e:	69fb      	ldr	r3, [r7, #28]
 801e260:	2b00      	cmp	r3, #0
 801e262:	d116      	bne.n	801e292 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801e264:	68fb      	ldr	r3, [r7, #12]
 801e266:	2200      	movs	r2, #0
 801e268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	2220      	movs	r2, #32
 801e26e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	2200      	movs	r2, #0
 801e276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e27e:	f043 0220 	orr.w	r2, r3, #32
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	2200      	movs	r2, #0
 801e28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e28e:	2301      	movs	r3, #1
 801e290:	e14c      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	699b      	ldr	r3, [r3, #24]
 801e298:	f003 0302 	and.w	r3, r3, #2
 801e29c:	2b02      	cmp	r3, #2
 801e29e:	d0db      	beq.n	801e258 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e2a6:	2b01      	cmp	r3, #1
 801e2a8:	d101      	bne.n	801e2ae <HAL_I2C_Mem_Read_DMA+0xa2>
 801e2aa:	2302      	movs	r3, #2
 801e2ac:	e13e      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	2201      	movs	r2, #1
 801e2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	f003 0301 	and.w	r3, r3, #1
 801e2c0:	2b01      	cmp	r3, #1
 801e2c2:	d007      	beq.n	801e2d4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	681a      	ldr	r2, [r3, #0]
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f042 0201 	orr.w	r2, r2, #1
 801e2d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	681a      	ldr	r2, [r3, #0]
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e2e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	2222      	movs	r2, #34	; 0x22
 801e2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	2240      	movs	r2, #64	; 0x40
 801e2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e2fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e300:	68fb      	ldr	r3, [r7, #12]
 801e302:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e30a:	b29a      	uxth	r2, r3
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	4a62      	ldr	r2, [pc, #392]	; (801e49c <HAL_I2C_Mem_Read_DMA+0x290>)
 801e314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e316:	897a      	ldrh	r2, [r7, #10]
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801e31c:	893a      	ldrh	r2, [r7, #8]
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801e322:	88fa      	ldrh	r2, [r7, #6]
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	2200      	movs	r2, #0
 801e32c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e332:	2b00      	cmp	r3, #0
 801e334:	f000 80cc 	beq.w	801e4d0 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d02d      	beq.n	801e39c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e344:	4a56      	ldr	r2, [pc, #344]	; (801e4a0 <HAL_I2C_Mem_Read_DMA+0x294>)
 801e346:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e34c:	4a55      	ldr	r2, [pc, #340]	; (801e4a4 <HAL_I2C_Mem_Read_DMA+0x298>)
 801e34e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e354:	2200      	movs	r2, #0
 801e356:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e35c:	2200      	movs	r2, #0
 801e35e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e364:	2200      	movs	r2, #0
 801e366:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e36c:	2200      	movs	r2, #0
 801e36e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	3310      	adds	r3, #16
 801e37a:	4619      	mov	r1, r3
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e380:	461a      	mov	r2, r3
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e386:	f7fe fc31 	bl	801cbec <HAL_DMA_Start_IT>
 801e38a:	4603      	mov	r3, r0
 801e38c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e394:	2b00      	cmp	r3, #0
 801e396:	f040 8087 	bne.w	801e4a8 <HAL_I2C_Mem_Read_DMA+0x29c>
 801e39a:	e013      	b.n	801e3c4 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	2220      	movs	r2, #32
 801e3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e3ac:	68fb      	ldr	r3, [r7, #12]
 801e3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e3c0:	2301      	movs	r3, #1
 801e3c2:	e0b3      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e3c4:	88f8      	ldrh	r0, [r7, #6]
 801e3c6:	893a      	ldrh	r2, [r7, #8]
 801e3c8:	8979      	ldrh	r1, [r7, #10]
 801e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3cc:	9301      	str	r3, [sp, #4]
 801e3ce:	2323      	movs	r3, #35	; 0x23
 801e3d0:	9300      	str	r3, [sp, #0]
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	68f8      	ldr	r0, [r7, #12]
 801e3d6:	f001 fd01 	bl	801fddc <I2C_RequestMemoryRead>
 801e3da:	4603      	mov	r3, r0
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d023      	beq.n	801e428 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3e4:	4618      	mov	r0, r3
 801e3e6:	f7fe fcc9 	bl	801cd7c <HAL_DMA_Abort_IT>
 801e3ea:	4603      	mov	r3, r0
 801e3ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	681a      	ldr	r2, [r3, #0]
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e406:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	2200      	movs	r2, #0
 801e40c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	2200      	movs	r2, #0
 801e412:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	681a      	ldr	r2, [r3, #0]
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	f022 0201 	bic.w	r2, r2, #1
 801e422:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801e424:	2301      	movs	r3, #1
 801e426:	e081      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e42c:	2b01      	cmp	r3, #1
 801e42e:	d108      	bne.n	801e442 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	681a      	ldr	r2, [r3, #0]
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e43e:	601a      	str	r2, [r3, #0]
 801e440:	e007      	b.n	801e452 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	685a      	ldr	r2, [r3, #4]
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e452:	2300      	movs	r3, #0
 801e454:	61bb      	str	r3, [r7, #24]
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	695b      	ldr	r3, [r3, #20]
 801e45c:	61bb      	str	r3, [r7, #24]
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	699b      	ldr	r3, [r3, #24]
 801e464:	61bb      	str	r3, [r7, #24]
 801e466:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	2200      	movs	r2, #0
 801e46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	685a      	ldr	r2, [r3, #4]
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e47e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	685a      	ldr	r2, [r3, #4]
 801e486:	68fb      	ldr	r3, [r7, #12]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e48e:	605a      	str	r2, [r3, #4]
 801e490:	e049      	b.n	801e526 <HAL_I2C_Mem_Read_DMA+0x31a>
 801e492:	bf00      	nop
 801e494:	20000020 	.word	0x20000020
 801e498:	14f8b589 	.word	0x14f8b589
 801e49c:	ffff0000 	.word	0xffff0000
 801e4a0:	0801ffad 	.word	0x0801ffad
 801e4a4:	08020157 	.word	0x08020157
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	2220      	movs	r2, #32
 801e4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4bc:	f043 0210 	orr.w	r2, r3, #16
 801e4c0:	68fb      	ldr	r3, [r7, #12]
 801e4c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e4cc:	2301      	movs	r3, #1
 801e4ce:	e02d      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e4d0:	88f8      	ldrh	r0, [r7, #6]
 801e4d2:	893a      	ldrh	r2, [r7, #8]
 801e4d4:	8979      	ldrh	r1, [r7, #10]
 801e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d8:	9301      	str	r3, [sp, #4]
 801e4da:	2323      	movs	r3, #35	; 0x23
 801e4dc:	9300      	str	r3, [sp, #0]
 801e4de:	4603      	mov	r3, r0
 801e4e0:	68f8      	ldr	r0, [r7, #12]
 801e4e2:	f001 fc7b 	bl	801fddc <I2C_RequestMemoryRead>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d001      	beq.n	801e4f0 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801e4ec:	2301      	movs	r3, #1
 801e4ee:	e01d      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e4f0:	2300      	movs	r3, #0
 801e4f2:	617b      	str	r3, [r7, #20]
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	695b      	ldr	r3, [r3, #20]
 801e4fa:	617b      	str	r3, [r7, #20]
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	699b      	ldr	r3, [r3, #24]
 801e502:	617b      	str	r3, [r7, #20]
 801e504:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	681a      	ldr	r2, [r3, #0]
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e514:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	2220      	movs	r2, #32
 801e51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e51e:	68fb      	ldr	r3, [r7, #12]
 801e520:	2200      	movs	r2, #0
 801e522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801e526:	2300      	movs	r3, #0
 801e528:	e000      	b.n	801e52c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801e52a:	2302      	movs	r3, #2
  }
}
 801e52c:	4618      	mov	r0, r3
 801e52e:	3728      	adds	r7, #40	; 0x28
 801e530:	46bd      	mov	sp, r7
 801e532:	bd80      	pop	{r7, pc}

0801e534 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e534:	b580      	push	{r7, lr}
 801e536:	b088      	sub	sp, #32
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801e53c:	2300      	movs	r3, #0
 801e53e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	685b      	ldr	r3, [r3, #4]
 801e546:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e54c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e554:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e55c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e55e:	7bfb      	ldrb	r3, [r7, #15]
 801e560:	2b10      	cmp	r3, #16
 801e562:	d003      	beq.n	801e56c <HAL_I2C_EV_IRQHandler+0x38>
 801e564:	7bfb      	ldrb	r3, [r7, #15]
 801e566:	2b40      	cmp	r3, #64	; 0x40
 801e568:	f040 80c1 	bne.w	801e6ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	699b      	ldr	r3, [r3, #24]
 801e572:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	695b      	ldr	r3, [r3, #20]
 801e57a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801e57c:	69fb      	ldr	r3, [r7, #28]
 801e57e:	f003 0301 	and.w	r3, r3, #1
 801e582:	2b00      	cmp	r3, #0
 801e584:	d10d      	bne.n	801e5a2 <HAL_I2C_EV_IRQHandler+0x6e>
 801e586:	693b      	ldr	r3, [r7, #16]
 801e588:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801e58c:	d003      	beq.n	801e596 <HAL_I2C_EV_IRQHandler+0x62>
 801e58e:	693b      	ldr	r3, [r7, #16]
 801e590:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801e594:	d101      	bne.n	801e59a <HAL_I2C_EV_IRQHandler+0x66>
 801e596:	2301      	movs	r3, #1
 801e598:	e000      	b.n	801e59c <HAL_I2C_EV_IRQHandler+0x68>
 801e59a:	2300      	movs	r3, #0
 801e59c:	2b01      	cmp	r3, #1
 801e59e:	f000 8132 	beq.w	801e806 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5a2:	69fb      	ldr	r3, [r7, #28]
 801e5a4:	f003 0301 	and.w	r3, r3, #1
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d00c      	beq.n	801e5c6 <HAL_I2C_EV_IRQHandler+0x92>
 801e5ac:	697b      	ldr	r3, [r7, #20]
 801e5ae:	0a5b      	lsrs	r3, r3, #9
 801e5b0:	f003 0301 	and.w	r3, r3, #1
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d006      	beq.n	801e5c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801e5b8:	6878      	ldr	r0, [r7, #4]
 801e5ba:	f002 f82a 	bl	8020612 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f000 fd5b 	bl	801f07a <I2C_Master_SB>
 801e5c4:	e092      	b.n	801e6ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5c6:	69fb      	ldr	r3, [r7, #28]
 801e5c8:	08db      	lsrs	r3, r3, #3
 801e5ca:	f003 0301 	and.w	r3, r3, #1
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d009      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0xb2>
 801e5d2:	697b      	ldr	r3, [r7, #20]
 801e5d4:	0a5b      	lsrs	r3, r3, #9
 801e5d6:	f003 0301 	and.w	r3, r3, #1
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d003      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801e5de:	6878      	ldr	r0, [r7, #4]
 801e5e0:	f000 fdd1 	bl	801f186 <I2C_Master_ADD10>
 801e5e4:	e082      	b.n	801e6ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5e6:	69fb      	ldr	r3, [r7, #28]
 801e5e8:	085b      	lsrs	r3, r3, #1
 801e5ea:	f003 0301 	and.w	r3, r3, #1
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d009      	beq.n	801e606 <HAL_I2C_EV_IRQHandler+0xd2>
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	0a5b      	lsrs	r3, r3, #9
 801e5f6:	f003 0301 	and.w	r3, r3, #1
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d003      	beq.n	801e606 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f000 fdeb 	bl	801f1da <I2C_Master_ADDR>
 801e604:	e072      	b.n	801e6ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801e606:	69bb      	ldr	r3, [r7, #24]
 801e608:	089b      	lsrs	r3, r3, #2
 801e60a:	f003 0301 	and.w	r3, r3, #1
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d03b      	beq.n	801e68a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	685b      	ldr	r3, [r3, #4]
 801e618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e61c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e620:	f000 80f3 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e624:	69fb      	ldr	r3, [r7, #28]
 801e626:	09db      	lsrs	r3, r3, #7
 801e628:	f003 0301 	and.w	r3, r3, #1
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d00f      	beq.n	801e650 <HAL_I2C_EV_IRQHandler+0x11c>
 801e630:	697b      	ldr	r3, [r7, #20]
 801e632:	0a9b      	lsrs	r3, r3, #10
 801e634:	f003 0301 	and.w	r3, r3, #1
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d009      	beq.n	801e650 <HAL_I2C_EV_IRQHandler+0x11c>
 801e63c:	69fb      	ldr	r3, [r7, #28]
 801e63e:	089b      	lsrs	r3, r3, #2
 801e640:	f003 0301 	and.w	r3, r3, #1
 801e644:	2b00      	cmp	r3, #0
 801e646:	d103      	bne.n	801e650 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801e648:	6878      	ldr	r0, [r7, #4]
 801e64a:	f000 f9cb 	bl	801e9e4 <I2C_MasterTransmit_TXE>
 801e64e:	e04d      	b.n	801e6ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e650:	69fb      	ldr	r3, [r7, #28]
 801e652:	089b      	lsrs	r3, r3, #2
 801e654:	f003 0301 	and.w	r3, r3, #1
 801e658:	2b00      	cmp	r3, #0
 801e65a:	f000 80d6 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e65e:	697b      	ldr	r3, [r7, #20]
 801e660:	0a5b      	lsrs	r3, r3, #9
 801e662:	f003 0301 	and.w	r3, r3, #1
 801e666:	2b00      	cmp	r3, #0
 801e668:	f000 80cf 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e66c:	7bbb      	ldrb	r3, [r7, #14]
 801e66e:	2b21      	cmp	r3, #33	; 0x21
 801e670:	d103      	bne.n	801e67a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801e672:	6878      	ldr	r0, [r7, #4]
 801e674:	f000 fa52 	bl	801eb1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e678:	e0c7      	b.n	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801e67a:	7bfb      	ldrb	r3, [r7, #15]
 801e67c:	2b40      	cmp	r3, #64	; 0x40
 801e67e:	f040 80c4 	bne.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e682:	6878      	ldr	r0, [r7, #4]
 801e684:	f000 fac0 	bl	801ec08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e688:	e0bf      	b.n	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	685b      	ldr	r3, [r3, #4]
 801e690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e698:	f000 80b7 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e69c:	69fb      	ldr	r3, [r7, #28]
 801e69e:	099b      	lsrs	r3, r3, #6
 801e6a0:	f003 0301 	and.w	r3, r3, #1
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d00f      	beq.n	801e6c8 <HAL_I2C_EV_IRQHandler+0x194>
 801e6a8:	697b      	ldr	r3, [r7, #20]
 801e6aa:	0a9b      	lsrs	r3, r3, #10
 801e6ac:	f003 0301 	and.w	r3, r3, #1
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d009      	beq.n	801e6c8 <HAL_I2C_EV_IRQHandler+0x194>
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	089b      	lsrs	r3, r3, #2
 801e6b8:	f003 0301 	and.w	r3, r3, #1
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d103      	bne.n	801e6c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801e6c0:	6878      	ldr	r0, [r7, #4]
 801e6c2:	f000 fb35 	bl	801ed30 <I2C_MasterReceive_RXNE>
 801e6c6:	e011      	b.n	801e6ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e6c8:	69fb      	ldr	r3, [r7, #28]
 801e6ca:	089b      	lsrs	r3, r3, #2
 801e6cc:	f003 0301 	and.w	r3, r3, #1
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	f000 809a 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e6d6:	697b      	ldr	r3, [r7, #20]
 801e6d8:	0a5b      	lsrs	r3, r3, #9
 801e6da:	f003 0301 	and.w	r3, r3, #1
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	f000 8093 	beq.w	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801e6e4:	6878      	ldr	r0, [r7, #4]
 801e6e6:	f000 fbde 	bl	801eea6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e6ea:	e08e      	b.n	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e6ec:	e08d      	b.n	801e80a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d004      	beq.n	801e700 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	695b      	ldr	r3, [r3, #20]
 801e6fc:	61fb      	str	r3, [r7, #28]
 801e6fe:	e007      	b.n	801e710 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	699b      	ldr	r3, [r3, #24]
 801e706:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	695b      	ldr	r3, [r3, #20]
 801e70e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e710:	69fb      	ldr	r3, [r7, #28]
 801e712:	085b      	lsrs	r3, r3, #1
 801e714:	f003 0301 	and.w	r3, r3, #1
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d012      	beq.n	801e742 <HAL_I2C_EV_IRQHandler+0x20e>
 801e71c:	697b      	ldr	r3, [r7, #20]
 801e71e:	0a5b      	lsrs	r3, r3, #9
 801e720:	f003 0301 	and.w	r3, r3, #1
 801e724:	2b00      	cmp	r3, #0
 801e726:	d00c      	beq.n	801e742 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d003      	beq.n	801e738 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	699b      	ldr	r3, [r3, #24]
 801e736:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801e738:	69b9      	ldr	r1, [r7, #24]
 801e73a:	6878      	ldr	r0, [r7, #4]
 801e73c:	f000 ff9c 	bl	801f678 <I2C_Slave_ADDR>
 801e740:	e066      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e742:	69fb      	ldr	r3, [r7, #28]
 801e744:	091b      	lsrs	r3, r3, #4
 801e746:	f003 0301 	and.w	r3, r3, #1
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d009      	beq.n	801e762 <HAL_I2C_EV_IRQHandler+0x22e>
 801e74e:	697b      	ldr	r3, [r7, #20]
 801e750:	0a5b      	lsrs	r3, r3, #9
 801e752:	f003 0301 	and.w	r3, r3, #1
 801e756:	2b00      	cmp	r3, #0
 801e758:	d003      	beq.n	801e762 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801e75a:	6878      	ldr	r0, [r7, #4]
 801e75c:	f000 ffd6 	bl	801f70c <I2C_Slave_STOPF>
 801e760:	e056      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801e762:	7bbb      	ldrb	r3, [r7, #14]
 801e764:	2b21      	cmp	r3, #33	; 0x21
 801e766:	d002      	beq.n	801e76e <HAL_I2C_EV_IRQHandler+0x23a>
 801e768:	7bbb      	ldrb	r3, [r7, #14]
 801e76a:	2b29      	cmp	r3, #41	; 0x29
 801e76c:	d125      	bne.n	801e7ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e76e:	69fb      	ldr	r3, [r7, #28]
 801e770:	09db      	lsrs	r3, r3, #7
 801e772:	f003 0301 	and.w	r3, r3, #1
 801e776:	2b00      	cmp	r3, #0
 801e778:	d00f      	beq.n	801e79a <HAL_I2C_EV_IRQHandler+0x266>
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	0a9b      	lsrs	r3, r3, #10
 801e77e:	f003 0301 	and.w	r3, r3, #1
 801e782:	2b00      	cmp	r3, #0
 801e784:	d009      	beq.n	801e79a <HAL_I2C_EV_IRQHandler+0x266>
 801e786:	69fb      	ldr	r3, [r7, #28]
 801e788:	089b      	lsrs	r3, r3, #2
 801e78a:	f003 0301 	and.w	r3, r3, #1
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d103      	bne.n	801e79a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801e792:	6878      	ldr	r0, [r7, #4]
 801e794:	f000 feb2 	bl	801f4fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e798:	e039      	b.n	801e80e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e79a:	69fb      	ldr	r3, [r7, #28]
 801e79c:	089b      	lsrs	r3, r3, #2
 801e79e:	f003 0301 	and.w	r3, r3, #1
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d033      	beq.n	801e80e <HAL_I2C_EV_IRQHandler+0x2da>
 801e7a6:	697b      	ldr	r3, [r7, #20]
 801e7a8:	0a5b      	lsrs	r3, r3, #9
 801e7aa:	f003 0301 	and.w	r3, r3, #1
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d02d      	beq.n	801e80e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801e7b2:	6878      	ldr	r0, [r7, #4]
 801e7b4:	f000 fedf 	bl	801f576 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e7b8:	e029      	b.n	801e80e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e7ba:	69fb      	ldr	r3, [r7, #28]
 801e7bc:	099b      	lsrs	r3, r3, #6
 801e7be:	f003 0301 	and.w	r3, r3, #1
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d00f      	beq.n	801e7e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 801e7c6:	697b      	ldr	r3, [r7, #20]
 801e7c8:	0a9b      	lsrs	r3, r3, #10
 801e7ca:	f003 0301 	and.w	r3, r3, #1
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d009      	beq.n	801e7e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 801e7d2:	69fb      	ldr	r3, [r7, #28]
 801e7d4:	089b      	lsrs	r3, r3, #2
 801e7d6:	f003 0301 	and.w	r3, r3, #1
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d103      	bne.n	801e7e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801e7de:	6878      	ldr	r0, [r7, #4]
 801e7e0:	f000 feea 	bl	801f5b8 <I2C_SlaveReceive_RXNE>
 801e7e4:	e014      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e7e6:	69fb      	ldr	r3, [r7, #28]
 801e7e8:	089b      	lsrs	r3, r3, #2
 801e7ea:	f003 0301 	and.w	r3, r3, #1
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d00e      	beq.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
 801e7f2:	697b      	ldr	r3, [r7, #20]
 801e7f4:	0a5b      	lsrs	r3, r3, #9
 801e7f6:	f003 0301 	and.w	r3, r3, #1
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d008      	beq.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801e7fe:	6878      	ldr	r0, [r7, #4]
 801e800:	f000 ff18 	bl	801f634 <I2C_SlaveReceive_BTF>
 801e804:	e004      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801e806:	bf00      	nop
 801e808:	e002      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e80a:	bf00      	nop
 801e80c:	e000      	b.n	801e810 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e80e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801e810:	3720      	adds	r7, #32
 801e812:	46bd      	mov	sp, r7
 801e814:	bd80      	pop	{r7, pc}

0801e816 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e816:	b580      	push	{r7, lr}
 801e818:	b08a      	sub	sp, #40	; 0x28
 801e81a:	af00      	add	r7, sp, #0
 801e81c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	695b      	ldr	r3, [r3, #20]
 801e824:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	685b      	ldr	r3, [r3, #4]
 801e82c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801e82e:	2300      	movs	r3, #0
 801e830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e838:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e83a:	6a3b      	ldr	r3, [r7, #32]
 801e83c:	0a1b      	lsrs	r3, r3, #8
 801e83e:	f003 0301 	and.w	r3, r3, #1
 801e842:	2b00      	cmp	r3, #0
 801e844:	d00e      	beq.n	801e864 <HAL_I2C_ER_IRQHandler+0x4e>
 801e846:	69fb      	ldr	r3, [r7, #28]
 801e848:	0a1b      	lsrs	r3, r3, #8
 801e84a:	f003 0301 	and.w	r3, r3, #1
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d008      	beq.n	801e864 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e854:	f043 0301 	orr.w	r3, r3, #1
 801e858:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e862:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e864:	6a3b      	ldr	r3, [r7, #32]
 801e866:	0a5b      	lsrs	r3, r3, #9
 801e868:	f003 0301 	and.w	r3, r3, #1
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d00e      	beq.n	801e88e <HAL_I2C_ER_IRQHandler+0x78>
 801e870:	69fb      	ldr	r3, [r7, #28]
 801e872:	0a1b      	lsrs	r3, r3, #8
 801e874:	f003 0301 	and.w	r3, r3, #1
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d008      	beq.n	801e88e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801e87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e87e:	f043 0302 	orr.w	r3, r3, #2
 801e882:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801e88c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e88e:	6a3b      	ldr	r3, [r7, #32]
 801e890:	0a9b      	lsrs	r3, r3, #10
 801e892:	f003 0301 	and.w	r3, r3, #1
 801e896:	2b00      	cmp	r3, #0
 801e898:	d03f      	beq.n	801e91a <HAL_I2C_ER_IRQHandler+0x104>
 801e89a:	69fb      	ldr	r3, [r7, #28]
 801e89c:	0a1b      	lsrs	r3, r3, #8
 801e89e:	f003 0301 	and.w	r3, r3, #1
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d039      	beq.n	801e91a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801e8a6:	7efb      	ldrb	r3, [r7, #27]
 801e8a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e8ae:	b29b      	uxth	r3, r3
 801e8b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801e8c0:	7ebb      	ldrb	r3, [r7, #26]
 801e8c2:	2b20      	cmp	r3, #32
 801e8c4:	d112      	bne.n	801e8ec <HAL_I2C_ER_IRQHandler+0xd6>
 801e8c6:	697b      	ldr	r3, [r7, #20]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d10f      	bne.n	801e8ec <HAL_I2C_ER_IRQHandler+0xd6>
 801e8cc:	7cfb      	ldrb	r3, [r7, #19]
 801e8ce:	2b21      	cmp	r3, #33	; 0x21
 801e8d0:	d008      	beq.n	801e8e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801e8d2:	7cfb      	ldrb	r3, [r7, #19]
 801e8d4:	2b29      	cmp	r3, #41	; 0x29
 801e8d6:	d005      	beq.n	801e8e4 <HAL_I2C_ER_IRQHandler+0xce>
 801e8d8:	7cfb      	ldrb	r3, [r7, #19]
 801e8da:	2b28      	cmp	r3, #40	; 0x28
 801e8dc:	d106      	bne.n	801e8ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	2b21      	cmp	r3, #33	; 0x21
 801e8e2:	d103      	bne.n	801e8ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801e8e4:	6878      	ldr	r0, [r7, #4]
 801e8e6:	f001 f841 	bl	801f96c <I2C_Slave_AF>
 801e8ea:	e016      	b.n	801e91a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e8f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8f8:	f043 0304 	orr.w	r3, r3, #4
 801e8fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e8fe:	7efb      	ldrb	r3, [r7, #27]
 801e900:	2b10      	cmp	r3, #16
 801e902:	d002      	beq.n	801e90a <HAL_I2C_ER_IRQHandler+0xf4>
 801e904:	7efb      	ldrb	r3, [r7, #27]
 801e906:	2b40      	cmp	r3, #64	; 0x40
 801e908:	d107      	bne.n	801e91a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	681a      	ldr	r2, [r3, #0]
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e918:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e91a:	6a3b      	ldr	r3, [r7, #32]
 801e91c:	0adb      	lsrs	r3, r3, #11
 801e91e:	f003 0301 	and.w	r3, r3, #1
 801e922:	2b00      	cmp	r3, #0
 801e924:	d00e      	beq.n	801e944 <HAL_I2C_ER_IRQHandler+0x12e>
 801e926:	69fb      	ldr	r3, [r7, #28]
 801e928:	0a1b      	lsrs	r3, r3, #8
 801e92a:	f003 0301 	and.w	r3, r3, #1
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d008      	beq.n	801e944 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801e932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e934:	f043 0308 	orr.w	r3, r3, #8
 801e938:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801e942:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e946:	2b00      	cmp	r3, #0
 801e948:	d008      	beq.n	801e95c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e950:	431a      	orrs	r2, r3
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801e956:	6878      	ldr	r0, [r7, #4]
 801e958:	f001 f878 	bl	801fa4c <I2C_ITError>
  }
}
 801e95c:	bf00      	nop
 801e95e:	3728      	adds	r7, #40	; 0x28
 801e960:	46bd      	mov	sp, r7
 801e962:	bd80      	pop	{r7, pc}

0801e964 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e964:	b480      	push	{r7}
 801e966:	b083      	sub	sp, #12
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801e96c:	bf00      	nop
 801e96e:	370c      	adds	r7, #12
 801e970:	46bd      	mov	sp, r7
 801e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e976:	4770      	bx	lr

0801e978 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e978:	b480      	push	{r7}
 801e97a:	b083      	sub	sp, #12
 801e97c:	af00      	add	r7, sp, #0
 801e97e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801e980:	bf00      	nop
 801e982:	370c      	adds	r7, #12
 801e984:	46bd      	mov	sp, r7
 801e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e98a:	4770      	bx	lr

0801e98c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801e98c:	b480      	push	{r7}
 801e98e:	b083      	sub	sp, #12
 801e990:	af00      	add	r7, sp, #0
 801e992:	6078      	str	r0, [r7, #4]
 801e994:	460b      	mov	r3, r1
 801e996:	70fb      	strb	r3, [r7, #3]
 801e998:	4613      	mov	r3, r2
 801e99a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801e99c:	bf00      	nop
 801e99e:	370c      	adds	r7, #12
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9a6:	4770      	bx	lr

0801e9a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e9a8:	b480      	push	{r7}
 801e9aa:	b083      	sub	sp, #12
 801e9ac:	af00      	add	r7, sp, #0
 801e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801e9b0:	bf00      	nop
 801e9b2:	370c      	adds	r7, #12
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ba:	4770      	bx	lr

0801e9bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801e9bc:	b480      	push	{r7}
 801e9be:	b083      	sub	sp, #12
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801e9c4:	bf00      	nop
 801e9c6:	370c      	adds	r7, #12
 801e9c8:	46bd      	mov	sp, r7
 801e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ce:	4770      	bx	lr

0801e9d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e9d0:	b480      	push	{r7}
 801e9d2:	b083      	sub	sp, #12
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801e9d8:	bf00      	nop
 801e9da:	370c      	adds	r7, #12
 801e9dc:	46bd      	mov	sp, r7
 801e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e2:	4770      	bx	lr

0801e9e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e9e4:	b580      	push	{r7, lr}
 801e9e6:	b084      	sub	sp, #16
 801e9e8:	af00      	add	r7, sp, #0
 801e9ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e9f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e9fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d150      	bne.n	801eaac <I2C_MasterTransmit_TXE+0xc8>
 801ea0a:	7bfb      	ldrb	r3, [r7, #15]
 801ea0c:	2b21      	cmp	r3, #33	; 0x21
 801ea0e:	d14d      	bne.n	801eaac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ea10:	68bb      	ldr	r3, [r7, #8]
 801ea12:	2b08      	cmp	r3, #8
 801ea14:	d01d      	beq.n	801ea52 <I2C_MasterTransmit_TXE+0x6e>
 801ea16:	68bb      	ldr	r3, [r7, #8]
 801ea18:	2b20      	cmp	r3, #32
 801ea1a:	d01a      	beq.n	801ea52 <I2C_MasterTransmit_TXE+0x6e>
 801ea1c:	68bb      	ldr	r3, [r7, #8]
 801ea1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ea22:	d016      	beq.n	801ea52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	685a      	ldr	r2, [r3, #4]
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	681b      	ldr	r3, [r3, #0]
 801ea2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ea32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	2211      	movs	r2, #17
 801ea38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	2200      	movs	r2, #0
 801ea3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	2220      	movs	r2, #32
 801ea46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801ea4a:	6878      	ldr	r0, [r7, #4]
 801ea4c:	f7e3 f832 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ea50:	e060      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	685a      	ldr	r2, [r3, #4]
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ea60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	681a      	ldr	r2, [r3, #0]
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	2200      	movs	r2, #0
 801ea76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	2220      	movs	r2, #32
 801ea7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ea86:	b2db      	uxtb	r3, r3
 801ea88:	2b40      	cmp	r3, #64	; 0x40
 801ea8a:	d107      	bne.n	801ea9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2200      	movs	r2, #0
 801ea90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801ea94:	6878      	ldr	r0, [r7, #4]
 801ea96:	f7e2 fff7 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ea9a:	e03b      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801eaa4:	6878      	ldr	r0, [r7, #4]
 801eaa6:	f7e3 f805 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801eaaa:	e033      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801eaac:	7bfb      	ldrb	r3, [r7, #15]
 801eaae:	2b21      	cmp	r3, #33	; 0x21
 801eab0:	d005      	beq.n	801eabe <I2C_MasterTransmit_TXE+0xda>
 801eab2:	7bbb      	ldrb	r3, [r7, #14]
 801eab4:	2b40      	cmp	r3, #64	; 0x40
 801eab6:	d12d      	bne.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801eab8:	7bfb      	ldrb	r3, [r7, #15]
 801eaba:	2b22      	cmp	r3, #34	; 0x22
 801eabc:	d12a      	bne.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eac2:	b29b      	uxth	r3, r3
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d108      	bne.n	801eada <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	685a      	ldr	r2, [r3, #4]
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ead6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801ead8:	e01c      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eae0:	b2db      	uxtb	r3, r3
 801eae2:	2b40      	cmp	r3, #64	; 0x40
 801eae4:	d103      	bne.n	801eaee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801eae6:	6878      	ldr	r0, [r7, #4]
 801eae8:	f000 f88e 	bl	801ec08 <I2C_MemoryTransmit_TXE_BTF>
}
 801eaec:	e012      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaf2:	781a      	ldrb	r2, [r3, #0]
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eafe:	1c5a      	adds	r2, r3, #1
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb08:	b29b      	uxth	r3, r3
 801eb0a:	3b01      	subs	r3, #1
 801eb0c:	b29a      	uxth	r2, r3
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801eb12:	e7ff      	b.n	801eb14 <I2C_MasterTransmit_TXE+0x130>
 801eb14:	bf00      	nop
 801eb16:	3710      	adds	r7, #16
 801eb18:	46bd      	mov	sp, r7
 801eb1a:	bd80      	pop	{r7, pc}

0801eb1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801eb1c:	b580      	push	{r7, lr}
 801eb1e:	b084      	sub	sp, #16
 801eb20:	af00      	add	r7, sp, #0
 801eb22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb30:	b2db      	uxtb	r3, r3
 801eb32:	2b21      	cmp	r3, #33	; 0x21
 801eb34:	d164      	bne.n	801ec00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb3a:	b29b      	uxth	r3, r3
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d012      	beq.n	801eb66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb44:	781a      	ldrb	r2, [r3, #0]
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb50:	1c5a      	adds	r2, r3, #1
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb5a:	b29b      	uxth	r3, r3
 801eb5c:	3b01      	subs	r3, #1
 801eb5e:	b29a      	uxth	r2, r3
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801eb64:	e04c      	b.n	801ec00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	2b08      	cmp	r3, #8
 801eb6a:	d01d      	beq.n	801eba8 <I2C_MasterTransmit_BTF+0x8c>
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	2b20      	cmp	r3, #32
 801eb70:	d01a      	beq.n	801eba8 <I2C_MasterTransmit_BTF+0x8c>
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801eb78:	d016      	beq.n	801eba8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	685a      	ldr	r2, [r3, #4]
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801eb88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	2211      	movs	r2, #17
 801eb8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	2200      	movs	r2, #0
 801eb94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	2220      	movs	r2, #32
 801eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801eba0:	6878      	ldr	r0, [r7, #4]
 801eba2:	f7e2 ff87 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801eba6:	e02b      	b.n	801ec00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	685a      	ldr	r2, [r3, #4]
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ebb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	681b      	ldr	r3, [r3, #0]
 801ebbc:	681a      	ldr	r2, [r3, #0]
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ebc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	2200      	movs	r2, #0
 801ebcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	2220      	movs	r2, #32
 801ebd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ebdc:	b2db      	uxtb	r3, r3
 801ebde:	2b40      	cmp	r3, #64	; 0x40
 801ebe0:	d107      	bne.n	801ebf2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	2200      	movs	r2, #0
 801ebe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801ebea:	6878      	ldr	r0, [r7, #4]
 801ebec:	f7e2 ff4c 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801ebf0:	e006      	b.n	801ec00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	2200      	movs	r2, #0
 801ebf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801ebfa:	6878      	ldr	r0, [r7, #4]
 801ebfc:	f7e2 ff5a 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801ec00:	bf00      	nop
 801ec02:	3710      	adds	r7, #16
 801ec04:	46bd      	mov	sp, r7
 801ec06:	bd80      	pop	{r7, pc}

0801ec08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801ec08:	b580      	push	{r7, lr}
 801ec0a:	b084      	sub	sp, #16
 801ec0c:	af00      	add	r7, sp, #0
 801ec0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ec16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d11d      	bne.n	801ec5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ec24:	2b01      	cmp	r3, #1
 801ec26:	d10b      	bne.n	801ec40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ec2c:	b2da      	uxtb	r2, r3
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec38:	1c9a      	adds	r2, r3, #2
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801ec3e:	e073      	b.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ec44:	b29b      	uxth	r3, r3
 801ec46:	121b      	asrs	r3, r3, #8
 801ec48:	b2da      	uxtb	r2, r3
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec54:	1c5a      	adds	r2, r3, #1
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ec5a:	e065      	b.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec60:	2b01      	cmp	r3, #1
 801ec62:	d10b      	bne.n	801ec7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ec68:	b2da      	uxtb	r2, r3
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec74:	1c5a      	adds	r2, r3, #1
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ec7a:	e055      	b.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec80:	2b02      	cmp	r3, #2
 801ec82:	d151      	bne.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801ec84:	7bfb      	ldrb	r3, [r7, #15]
 801ec86:	2b22      	cmp	r3, #34	; 0x22
 801ec88:	d10d      	bne.n	801eca6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	681a      	ldr	r2, [r3, #0]
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ec98:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801ec9a:	687b      	ldr	r3, [r7, #4]
 801ec9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec9e:	1c5a      	adds	r2, r3, #1
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	651a      	str	r2, [r3, #80]	; 0x50
}
 801eca4:	e040      	b.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecaa:	b29b      	uxth	r3, r3
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d015      	beq.n	801ecdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801ecb0:	7bfb      	ldrb	r3, [r7, #15]
 801ecb2:	2b21      	cmp	r3, #33	; 0x21
 801ecb4:	d112      	bne.n	801ecdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecba:	781a      	ldrb	r2, [r3, #0]
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecc6:	1c5a      	adds	r2, r3, #1
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecd0:	b29b      	uxth	r3, r3
 801ecd2:	3b01      	subs	r3, #1
 801ecd4:	b29a      	uxth	r2, r3
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ecda:	e025      	b.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ece0:	b29b      	uxth	r3, r3
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d120      	bne.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801ece6:	7bfb      	ldrb	r3, [r7, #15]
 801ece8:	2b21      	cmp	r3, #33	; 0x21
 801ecea:	d11d      	bne.n	801ed28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	685a      	ldr	r2, [r3, #4]
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ecfa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	681a      	ldr	r2, [r3, #0]
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	2200      	movs	r2, #0
 801ed10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	2220      	movs	r2, #32
 801ed16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	2200      	movs	r2, #0
 801ed1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801ed22:	6878      	ldr	r0, [r7, #4]
 801ed24:	f7e2 feb0 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801ed28:	bf00      	nop
 801ed2a:	3710      	adds	r7, #16
 801ed2c:	46bd      	mov	sp, r7
 801ed2e:	bd80      	pop	{r7, pc}

0801ed30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801ed30:	b580      	push	{r7, lr}
 801ed32:	b084      	sub	sp, #16
 801ed34:	af00      	add	r7, sp, #0
 801ed36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed3e:	b2db      	uxtb	r3, r3
 801ed40:	2b22      	cmp	r3, #34	; 0x22
 801ed42:	f040 80ac 	bne.w	801ee9e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed4a:	b29b      	uxth	r3, r3
 801ed4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	2b03      	cmp	r3, #3
 801ed52:	d921      	bls.n	801ed98 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	691a      	ldr	r2, [r3, #16]
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed5e:	b2d2      	uxtb	r2, r2
 801ed60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed66:	1c5a      	adds	r2, r3, #1
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed70:	b29b      	uxth	r3, r3
 801ed72:	3b01      	subs	r3, #1
 801ed74:	b29a      	uxth	r2, r3
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed7e:	b29b      	uxth	r3, r3
 801ed80:	2b03      	cmp	r3, #3
 801ed82:	f040 808c 	bne.w	801ee9e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	685a      	ldr	r2, [r3, #4]
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed94:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801ed96:	e082      	b.n	801ee9e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed9c:	2b02      	cmp	r3, #2
 801ed9e:	d075      	beq.n	801ee8c <I2C_MasterReceive_RXNE+0x15c>
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	2b01      	cmp	r3, #1
 801eda4:	d002      	beq.n	801edac <I2C_MasterReceive_RXNE+0x7c>
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d16f      	bne.n	801ee8c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801edac:	6878      	ldr	r0, [r7, #4]
 801edae:	f001 fbcf 	bl	8020550 <I2C_WaitOnSTOPRequestThroughIT>
 801edb2:	4603      	mov	r3, r0
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d142      	bne.n	801ee3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	681a      	ldr	r2, [r3, #0]
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801edc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	685a      	ldr	r2, [r3, #4]
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801edd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	691a      	ldr	r2, [r3, #16]
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ede2:	b2d2      	uxtb	r2, r2
 801ede4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edea:	1c5a      	adds	r2, r3, #1
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edf4:	b29b      	uxth	r3, r3
 801edf6:	3b01      	subs	r3, #1
 801edf8:	b29a      	uxth	r2, r3
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2220      	movs	r2, #32
 801ee02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee0c:	b2db      	uxtb	r3, r3
 801ee0e:	2b40      	cmp	r3, #64	; 0x40
 801ee10:	d10a      	bne.n	801ee28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	2200      	movs	r2, #0
 801ee16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	2200      	movs	r2, #0
 801ee1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801ee20:	6878      	ldr	r0, [r7, #4]
 801ee22:	f7e2 fe05 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ee26:	e03a      	b.n	801ee9e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	2212      	movs	r2, #18
 801ee34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801ee36:	6878      	ldr	r0, [r7, #4]
 801ee38:	f7e2 fe10 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ee3c:	e02f      	b.n	801ee9e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	685a      	ldr	r2, [r3, #4]
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ee4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	691a      	ldr	r2, [r3, #16]
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee58:	b2d2      	uxtb	r2, r2
 801ee5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee60:	1c5a      	adds	r2, r3, #1
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee6a:	b29b      	uxth	r3, r3
 801ee6c:	3b01      	subs	r3, #1
 801ee6e:	b29a      	uxth	r2, r3
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	2220      	movs	r2, #32
 801ee78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2200      	movs	r2, #0
 801ee80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801ee84:	6878      	ldr	r0, [r7, #4]
 801ee86:	f7ff fd99 	bl	801e9bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ee8a:	e008      	b.n	801ee9e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	685a      	ldr	r2, [r3, #4]
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ee9a:	605a      	str	r2, [r3, #4]
}
 801ee9c:	e7ff      	b.n	801ee9e <I2C_MasterReceive_RXNE+0x16e>
 801ee9e:	bf00      	nop
 801eea0:	3710      	adds	r7, #16
 801eea2:	46bd      	mov	sp, r7
 801eea4:	bd80      	pop	{r7, pc}

0801eea6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801eea6:	b580      	push	{r7, lr}
 801eea8:	b084      	sub	sp, #16
 801eeaa:	af00      	add	r7, sp, #0
 801eeac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eeb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eeb8:	b29b      	uxth	r3, r3
 801eeba:	2b04      	cmp	r3, #4
 801eebc:	d11b      	bne.n	801eef6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	685a      	ldr	r2, [r3, #4]
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eecc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	691a      	ldr	r2, [r3, #16]
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eed8:	b2d2      	uxtb	r2, r2
 801eeda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eee0:	1c5a      	adds	r2, r3, #1
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eeea:	b29b      	uxth	r3, r3
 801eeec:	3b01      	subs	r3, #1
 801eeee:	b29a      	uxth	r2, r3
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801eef4:	e0bd      	b.n	801f072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eefa:	b29b      	uxth	r3, r3
 801eefc:	2b03      	cmp	r3, #3
 801eefe:	d129      	bne.n	801ef54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	685a      	ldr	r2, [r3, #4]
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	2b04      	cmp	r3, #4
 801ef14:	d00a      	beq.n	801ef2c <I2C_MasterReceive_BTF+0x86>
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	2b02      	cmp	r3, #2
 801ef1a:	d007      	beq.n	801ef2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	681a      	ldr	r2, [r3, #0]
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	691a      	ldr	r2, [r3, #16]
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef36:	b2d2      	uxtb	r2, r2
 801ef38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef3e:	1c5a      	adds	r2, r3, #1
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef48:	b29b      	uxth	r3, r3
 801ef4a:	3b01      	subs	r3, #1
 801ef4c:	b29a      	uxth	r2, r3
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ef52:	e08e      	b.n	801f072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef58:	b29b      	uxth	r3, r3
 801ef5a:	2b02      	cmp	r3, #2
 801ef5c:	d176      	bne.n	801f04c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	2b01      	cmp	r3, #1
 801ef62:	d002      	beq.n	801ef6a <I2C_MasterReceive_BTF+0xc4>
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	2b10      	cmp	r3, #16
 801ef68:	d108      	bne.n	801ef7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	681a      	ldr	r2, [r3, #0]
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef78:	601a      	str	r2, [r3, #0]
 801ef7a:	e019      	b.n	801efb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	2b04      	cmp	r3, #4
 801ef80:	d002      	beq.n	801ef88 <I2C_MasterReceive_BTF+0xe2>
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	2b02      	cmp	r3, #2
 801ef86:	d108      	bne.n	801ef9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	681a      	ldr	r2, [r3, #0]
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ef96:	601a      	str	r2, [r3, #0]
 801ef98:	e00a      	b.n	801efb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801ef9a:	68fb      	ldr	r3, [r7, #12]
 801ef9c:	2b10      	cmp	r3, #16
 801ef9e:	d007      	beq.n	801efb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	681a      	ldr	r2, [r3, #0]
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	691a      	ldr	r2, [r3, #16]
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efba:	b2d2      	uxtb	r2, r2
 801efbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efc2:	1c5a      	adds	r2, r3, #1
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801efcc:	b29b      	uxth	r3, r3
 801efce:	3b01      	subs	r3, #1
 801efd0:	b29a      	uxth	r2, r3
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	691a      	ldr	r2, [r3, #16]
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efe0:	b2d2      	uxtb	r2, r2
 801efe2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efe8:	1c5a      	adds	r2, r3, #1
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eff2:	b29b      	uxth	r3, r3
 801eff4:	3b01      	subs	r3, #1
 801eff6:	b29a      	uxth	r2, r3
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	685a      	ldr	r2, [r3, #4]
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801f00a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	2220      	movs	r2, #32
 801f010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f01a:	b2db      	uxtb	r3, r3
 801f01c:	2b40      	cmp	r3, #64	; 0x40
 801f01e:	d10a      	bne.n	801f036 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2200      	movs	r2, #0
 801f024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	2200      	movs	r2, #0
 801f02c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801f02e:	6878      	ldr	r0, [r7, #4]
 801f030:	f7e2 fcfe 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801f034:	e01d      	b.n	801f072 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	2200      	movs	r2, #0
 801f03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	2212      	movs	r2, #18
 801f042:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801f044:	6878      	ldr	r0, [r7, #4]
 801f046:	f7e2 fd09 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801f04a:	e012      	b.n	801f072 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	691a      	ldr	r2, [r3, #16]
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f056:	b2d2      	uxtb	r2, r2
 801f058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f05e:	1c5a      	adds	r2, r3, #1
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f068:	b29b      	uxth	r3, r3
 801f06a:	3b01      	subs	r3, #1
 801f06c:	b29a      	uxth	r2, r3
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801f072:	bf00      	nop
 801f074:	3710      	adds	r7, #16
 801f076:	46bd      	mov	sp, r7
 801f078:	bd80      	pop	{r7, pc}

0801f07a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801f07a:	b480      	push	{r7}
 801f07c:	b083      	sub	sp, #12
 801f07e:	af00      	add	r7, sp, #0
 801f080:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f088:	b2db      	uxtb	r3, r3
 801f08a:	2b40      	cmp	r3, #64	; 0x40
 801f08c:	d117      	bne.n	801f0be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f092:	2b00      	cmp	r3, #0
 801f094:	d109      	bne.n	801f0aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f09a:	b2db      	uxtb	r3, r3
 801f09c:	461a      	mov	r2, r3
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f0a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801f0a8:	e067      	b.n	801f17a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f0ae:	b2db      	uxtb	r3, r3
 801f0b0:	f043 0301 	orr.w	r3, r3, #1
 801f0b4:	b2da      	uxtb	r2, r3
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	611a      	str	r2, [r3, #16]
}
 801f0bc:	e05d      	b.n	801f17a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	691b      	ldr	r3, [r3, #16]
 801f0c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f0c6:	d133      	bne.n	801f130 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f0ce:	b2db      	uxtb	r3, r3
 801f0d0:	2b21      	cmp	r3, #33	; 0x21
 801f0d2:	d109      	bne.n	801f0e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f0d8:	b2db      	uxtb	r3, r3
 801f0da:	461a      	mov	r2, r3
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f0e4:	611a      	str	r2, [r3, #16]
 801f0e6:	e008      	b.n	801f0fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f0ec:	b2db      	uxtb	r3, r3
 801f0ee:	f043 0301 	orr.w	r3, r3, #1
 801f0f2:	b2da      	uxtb	r2, r3
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d004      	beq.n	801f10c <I2C_Master_SB+0x92>
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d108      	bne.n	801f11e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f110:	2b00      	cmp	r3, #0
 801f112:	d032      	beq.n	801f17a <I2C_Master_SB+0x100>
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d02d      	beq.n	801f17a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	685a      	ldr	r2, [r3, #4]
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f12c:	605a      	str	r2, [r3, #4]
}
 801f12e:	e024      	b.n	801f17a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f134:	2b00      	cmp	r3, #0
 801f136:	d10e      	bne.n	801f156 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f13c:	b29b      	uxth	r3, r3
 801f13e:	11db      	asrs	r3, r3, #7
 801f140:	b2db      	uxtb	r3, r3
 801f142:	f003 0306 	and.w	r3, r3, #6
 801f146:	b2db      	uxtb	r3, r3
 801f148:	f063 030f 	orn	r3, r3, #15
 801f14c:	b2da      	uxtb	r2, r3
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	611a      	str	r2, [r3, #16]
}
 801f154:	e011      	b.n	801f17a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f15a:	2b01      	cmp	r3, #1
 801f15c:	d10d      	bne.n	801f17a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f162:	b29b      	uxth	r3, r3
 801f164:	11db      	asrs	r3, r3, #7
 801f166:	b2db      	uxtb	r3, r3
 801f168:	f003 0306 	and.w	r3, r3, #6
 801f16c:	b2db      	uxtb	r3, r3
 801f16e:	f063 030e 	orn	r3, r3, #14
 801f172:	b2da      	uxtb	r2, r3
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	681b      	ldr	r3, [r3, #0]
 801f178:	611a      	str	r2, [r3, #16]
}
 801f17a:	bf00      	nop
 801f17c:	370c      	adds	r7, #12
 801f17e:	46bd      	mov	sp, r7
 801f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f184:	4770      	bx	lr

0801f186 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801f186:	b480      	push	{r7}
 801f188:	b083      	sub	sp, #12
 801f18a:	af00      	add	r7, sp, #0
 801f18c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f192:	b2da      	uxtb	r2, r3
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d004      	beq.n	801f1ac <I2C_Master_ADD10+0x26>
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d108      	bne.n	801f1be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d00c      	beq.n	801f1ce <I2C_Master_ADD10+0x48>
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d007      	beq.n	801f1ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	685a      	ldr	r2, [r3, #4]
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f1cc:	605a      	str	r2, [r3, #4]
  }
}
 801f1ce:	bf00      	nop
 801f1d0:	370c      	adds	r7, #12
 801f1d2:	46bd      	mov	sp, r7
 801f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1d8:	4770      	bx	lr

0801f1da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801f1da:	b480      	push	{r7}
 801f1dc:	b091      	sub	sp, #68	; 0x44
 801f1de:	af00      	add	r7, sp, #0
 801f1e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f1e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f1f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f1fe:	b2db      	uxtb	r3, r3
 801f200:	2b22      	cmp	r3, #34	; 0x22
 801f202:	f040 8169 	bne.w	801f4d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d10f      	bne.n	801f22e <I2C_Master_ADDR+0x54>
 801f20e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801f212:	2b40      	cmp	r3, #64	; 0x40
 801f214:	d10b      	bne.n	801f22e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f216:	2300      	movs	r3, #0
 801f218:	633b      	str	r3, [r7, #48]	; 0x30
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	695b      	ldr	r3, [r3, #20]
 801f220:	633b      	str	r3, [r7, #48]	; 0x30
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	699b      	ldr	r3, [r3, #24]
 801f228:	633b      	str	r3, [r7, #48]	; 0x30
 801f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f22c:	e160      	b.n	801f4f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f232:	2b00      	cmp	r3, #0
 801f234:	d11d      	bne.n	801f272 <I2C_Master_ADDR+0x98>
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	691b      	ldr	r3, [r3, #16]
 801f23a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f23e:	d118      	bne.n	801f272 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f240:	2300      	movs	r3, #0
 801f242:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	695b      	ldr	r3, [r3, #20]
 801f24a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	699b      	ldr	r3, [r3, #24]
 801f252:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	681a      	ldr	r2, [r3, #0]
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f264:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f26a:	1c5a      	adds	r2, r3, #1
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	651a      	str	r2, [r3, #80]	; 0x50
 801f270:	e13e      	b.n	801f4f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f276:	b29b      	uxth	r3, r3
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d113      	bne.n	801f2a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f27c:	2300      	movs	r3, #0
 801f27e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	695b      	ldr	r3, [r3, #20]
 801f286:	62bb      	str	r3, [r7, #40]	; 0x28
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	699b      	ldr	r3, [r3, #24]
 801f28e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f290:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	681a      	ldr	r2, [r3, #0]
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f2a0:	601a      	str	r2, [r3, #0]
 801f2a2:	e115      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f2a8:	b29b      	uxth	r3, r3
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	f040 808a 	bne.w	801f3c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f2b6:	d137      	bne.n	801f328 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	681a      	ldr	r2, [r3, #0]
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f2c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	681b      	ldr	r3, [r3, #0]
 801f2cc:	685b      	ldr	r3, [r3, #4]
 801f2ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f2d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f2d6:	d113      	bne.n	801f300 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	681a      	ldr	r2, [r3, #0]
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f2e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	627b      	str	r3, [r7, #36]	; 0x24
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	695b      	ldr	r3, [r3, #20]
 801f2f2:	627b      	str	r3, [r7, #36]	; 0x24
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	699b      	ldr	r3, [r3, #24]
 801f2fa:	627b      	str	r3, [r7, #36]	; 0x24
 801f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2fe:	e0e7      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f300:	2300      	movs	r3, #0
 801f302:	623b      	str	r3, [r7, #32]
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	695b      	ldr	r3, [r3, #20]
 801f30a:	623b      	str	r3, [r7, #32]
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	699b      	ldr	r3, [r3, #24]
 801f312:	623b      	str	r3, [r7, #32]
 801f314:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	681a      	ldr	r2, [r3, #0]
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f324:	601a      	str	r2, [r3, #0]
 801f326:	e0d3      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801f328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f32a:	2b08      	cmp	r3, #8
 801f32c:	d02e      	beq.n	801f38c <I2C_Master_ADDR+0x1b2>
 801f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f330:	2b20      	cmp	r3, #32
 801f332:	d02b      	beq.n	801f38c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801f334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f336:	2b12      	cmp	r3, #18
 801f338:	d102      	bne.n	801f340 <I2C_Master_ADDR+0x166>
 801f33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f33c:	2b01      	cmp	r3, #1
 801f33e:	d125      	bne.n	801f38c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f342:	2b04      	cmp	r3, #4
 801f344:	d00e      	beq.n	801f364 <I2C_Master_ADDR+0x18a>
 801f346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f348:	2b02      	cmp	r3, #2
 801f34a:	d00b      	beq.n	801f364 <I2C_Master_ADDR+0x18a>
 801f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f34e:	2b10      	cmp	r3, #16
 801f350:	d008      	beq.n	801f364 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	681a      	ldr	r2, [r3, #0]
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f360:	601a      	str	r2, [r3, #0]
 801f362:	e007      	b.n	801f374 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	681a      	ldr	r2, [r3, #0]
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f372:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f374:	2300      	movs	r3, #0
 801f376:	61fb      	str	r3, [r7, #28]
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	695b      	ldr	r3, [r3, #20]
 801f37e:	61fb      	str	r3, [r7, #28]
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	699b      	ldr	r3, [r3, #24]
 801f386:	61fb      	str	r3, [r7, #28]
 801f388:	69fb      	ldr	r3, [r7, #28]
 801f38a:	e0a1      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	681a      	ldr	r2, [r3, #0]
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f39a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f39c:	2300      	movs	r3, #0
 801f39e:	61bb      	str	r3, [r7, #24]
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	695b      	ldr	r3, [r3, #20]
 801f3a6:	61bb      	str	r3, [r7, #24]
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	699b      	ldr	r3, [r3, #24]
 801f3ae:	61bb      	str	r3, [r7, #24]
 801f3b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	681a      	ldr	r2, [r3, #0]
 801f3b8:	687b      	ldr	r3, [r7, #4]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f3c0:	601a      	str	r2, [r3, #0]
 801f3c2:	e085      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3c8:	b29b      	uxth	r3, r3
 801f3ca:	2b02      	cmp	r3, #2
 801f3cc:	d14d      	bne.n	801f46a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f3d0:	2b04      	cmp	r3, #4
 801f3d2:	d016      	beq.n	801f402 <I2C_Master_ADDR+0x228>
 801f3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f3d6:	2b02      	cmp	r3, #2
 801f3d8:	d013      	beq.n	801f402 <I2C_Master_ADDR+0x228>
 801f3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f3dc:	2b10      	cmp	r3, #16
 801f3de:	d010      	beq.n	801f402 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	681b      	ldr	r3, [r3, #0]
 801f3e4:	681a      	ldr	r2, [r3, #0]
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f3ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	681a      	ldr	r2, [r3, #0]
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f3fe:	601a      	str	r2, [r3, #0]
 801f400:	e007      	b.n	801f412 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	681b      	ldr	r3, [r3, #0]
 801f406:	681a      	ldr	r2, [r3, #0]
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f410:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	685b      	ldr	r3, [r3, #4]
 801f418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f41c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f420:	d117      	bne.n	801f452 <I2C_Master_ADDR+0x278>
 801f422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f428:	d00b      	beq.n	801f442 <I2C_Master_ADDR+0x268>
 801f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f42c:	2b01      	cmp	r3, #1
 801f42e:	d008      	beq.n	801f442 <I2C_Master_ADDR+0x268>
 801f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f432:	2b08      	cmp	r3, #8
 801f434:	d005      	beq.n	801f442 <I2C_Master_ADDR+0x268>
 801f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f438:	2b10      	cmp	r3, #16
 801f43a:	d002      	beq.n	801f442 <I2C_Master_ADDR+0x268>
 801f43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f43e:	2b20      	cmp	r3, #32
 801f440:	d107      	bne.n	801f452 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	685a      	ldr	r2, [r3, #4]
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f452:	2300      	movs	r3, #0
 801f454:	617b      	str	r3, [r7, #20]
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	695b      	ldr	r3, [r3, #20]
 801f45c:	617b      	str	r3, [r7, #20]
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	699b      	ldr	r3, [r3, #24]
 801f464:	617b      	str	r3, [r7, #20]
 801f466:	697b      	ldr	r3, [r7, #20]
 801f468:	e032      	b.n	801f4d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	681a      	ldr	r2, [r3, #0]
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f478:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	685b      	ldr	r3, [r3, #4]
 801f480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f488:	d117      	bne.n	801f4ba <I2C_Master_ADDR+0x2e0>
 801f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f48c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f490:	d00b      	beq.n	801f4aa <I2C_Master_ADDR+0x2d0>
 801f492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f494:	2b01      	cmp	r3, #1
 801f496:	d008      	beq.n	801f4aa <I2C_Master_ADDR+0x2d0>
 801f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f49a:	2b08      	cmp	r3, #8
 801f49c:	d005      	beq.n	801f4aa <I2C_Master_ADDR+0x2d0>
 801f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f4a0:	2b10      	cmp	r3, #16
 801f4a2:	d002      	beq.n	801f4aa <I2C_Master_ADDR+0x2d0>
 801f4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f4a6:	2b20      	cmp	r3, #32
 801f4a8:	d107      	bne.n	801f4ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	685a      	ldr	r2, [r3, #4]
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f4b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	613b      	str	r3, [r7, #16]
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	695b      	ldr	r3, [r3, #20]
 801f4c4:	613b      	str	r3, [r7, #16]
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	699b      	ldr	r3, [r3, #24]
 801f4cc:	613b      	str	r3, [r7, #16]
 801f4ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801f4d6:	e00b      	b.n	801f4f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f4d8:	2300      	movs	r3, #0
 801f4da:	60fb      	str	r3, [r7, #12]
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	695b      	ldr	r3, [r3, #20]
 801f4e2:	60fb      	str	r3, [r7, #12]
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	699b      	ldr	r3, [r3, #24]
 801f4ea:	60fb      	str	r3, [r7, #12]
 801f4ec:	68fb      	ldr	r3, [r7, #12]
}
 801f4ee:	e7ff      	b.n	801f4f0 <I2C_Master_ADDR+0x316>
 801f4f0:	bf00      	nop
 801f4f2:	3744      	adds	r7, #68	; 0x44
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4fa:	4770      	bx	lr

0801f4fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b084      	sub	sp, #16
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f50a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f510:	b29b      	uxth	r3, r3
 801f512:	2b00      	cmp	r3, #0
 801f514:	d02b      	beq.n	801f56e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f51a:	781a      	ldrb	r2, [r3, #0]
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f526:	1c5a      	adds	r2, r3, #1
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f530:	b29b      	uxth	r3, r3
 801f532:	3b01      	subs	r3, #1
 801f534:	b29a      	uxth	r2, r3
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f53e:	b29b      	uxth	r3, r3
 801f540:	2b00      	cmp	r3, #0
 801f542:	d114      	bne.n	801f56e <I2C_SlaveTransmit_TXE+0x72>
 801f544:	7bfb      	ldrb	r3, [r7, #15]
 801f546:	2b29      	cmp	r3, #41	; 0x29
 801f548:	d111      	bne.n	801f56e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	685a      	ldr	r2, [r3, #4]
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f558:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	2221      	movs	r2, #33	; 0x21
 801f55e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	2228      	movs	r2, #40	; 0x28
 801f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f568:	6878      	ldr	r0, [r7, #4]
 801f56a:	f7ff f9fb 	bl	801e964 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f56e:	bf00      	nop
 801f570:	3710      	adds	r7, #16
 801f572:	46bd      	mov	sp, r7
 801f574:	bd80      	pop	{r7, pc}

0801f576 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801f576:	b480      	push	{r7}
 801f578:	b083      	sub	sp, #12
 801f57a:	af00      	add	r7, sp, #0
 801f57c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f582:	b29b      	uxth	r3, r3
 801f584:	2b00      	cmp	r3, #0
 801f586:	d011      	beq.n	801f5ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f58c:	781a      	ldrb	r2, [r3, #0]
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f598:	1c5a      	adds	r2, r3, #1
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5a2:	b29b      	uxth	r3, r3
 801f5a4:	3b01      	subs	r3, #1
 801f5a6:	b29a      	uxth	r2, r3
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f5ac:	bf00      	nop
 801f5ae:	370c      	adds	r7, #12
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5b6:	4770      	bx	lr

0801f5b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801f5b8:	b580      	push	{r7, lr}
 801f5ba:	b084      	sub	sp, #16
 801f5bc:	af00      	add	r7, sp, #0
 801f5be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f5c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d02c      	beq.n	801f62c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	691a      	ldr	r2, [r3, #16]
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5dc:	b2d2      	uxtb	r2, r2
 801f5de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5e4:	1c5a      	adds	r2, r3, #1
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5ee:	b29b      	uxth	r3, r3
 801f5f0:	3b01      	subs	r3, #1
 801f5f2:	b29a      	uxth	r2, r3
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5fc:	b29b      	uxth	r3, r3
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d114      	bne.n	801f62c <I2C_SlaveReceive_RXNE+0x74>
 801f602:	7bfb      	ldrb	r3, [r7, #15]
 801f604:	2b2a      	cmp	r3, #42	; 0x2a
 801f606:	d111      	bne.n	801f62c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	685a      	ldr	r2, [r3, #4]
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f616:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	2222      	movs	r2, #34	; 0x22
 801f61c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2228      	movs	r2, #40	; 0x28
 801f622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f626:	6878      	ldr	r0, [r7, #4]
 801f628:	f7ff f9a6 	bl	801e978 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f62c:	bf00      	nop
 801f62e:	3710      	adds	r7, #16
 801f630:	46bd      	mov	sp, r7
 801f632:	bd80      	pop	{r7, pc}

0801f634 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801f634:	b480      	push	{r7}
 801f636:	b083      	sub	sp, #12
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f640:	b29b      	uxth	r3, r3
 801f642:	2b00      	cmp	r3, #0
 801f644:	d012      	beq.n	801f66c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	691a      	ldr	r2, [r3, #16]
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f650:	b2d2      	uxtb	r2, r2
 801f652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f658:	1c5a      	adds	r2, r3, #1
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f662:	b29b      	uxth	r3, r3
 801f664:	3b01      	subs	r3, #1
 801f666:	b29a      	uxth	r2, r3
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f66c:	bf00      	nop
 801f66e:	370c      	adds	r7, #12
 801f670:	46bd      	mov	sp, r7
 801f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f676:	4770      	bx	lr

0801f678 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b084      	sub	sp, #16
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
 801f680:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801f682:	2300      	movs	r3, #0
 801f684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f68c:	b2db      	uxtb	r3, r3
 801f68e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f692:	2b28      	cmp	r3, #40	; 0x28
 801f694:	d127      	bne.n	801f6e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	685a      	ldr	r2, [r3, #4]
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f6a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801f6a6:	683b      	ldr	r3, [r7, #0]
 801f6a8:	089b      	lsrs	r3, r3, #2
 801f6aa:	f003 0301 	and.w	r3, r3, #1
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d101      	bne.n	801f6b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801f6b2:	2301      	movs	r3, #1
 801f6b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801f6b6:	683b      	ldr	r3, [r7, #0]
 801f6b8:	09db      	lsrs	r3, r3, #7
 801f6ba:	f003 0301 	and.w	r3, r3, #1
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d103      	bne.n	801f6ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	68db      	ldr	r3, [r3, #12]
 801f6c6:	81bb      	strh	r3, [r7, #12]
 801f6c8:	e002      	b.n	801f6d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	699b      	ldr	r3, [r3, #24]
 801f6ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801f6d8:	89ba      	ldrh	r2, [r7, #12]
 801f6da:	7bfb      	ldrb	r3, [r7, #15]
 801f6dc:	4619      	mov	r1, r3
 801f6de:	6878      	ldr	r0, [r7, #4]
 801f6e0:	f7ff f954 	bl	801e98c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801f6e4:	e00e      	b.n	801f704 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	60bb      	str	r3, [r7, #8]
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	695b      	ldr	r3, [r3, #20]
 801f6f0:	60bb      	str	r3, [r7, #8]
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	699b      	ldr	r3, [r3, #24]
 801f6f8:	60bb      	str	r3, [r7, #8]
 801f6fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	2200      	movs	r2, #0
 801f700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801f704:	bf00      	nop
 801f706:	3710      	adds	r7, #16
 801f708:	46bd      	mov	sp, r7
 801f70a:	bd80      	pop	{r7, pc}

0801f70c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801f70c:	b580      	push	{r7, lr}
 801f70e:	b084      	sub	sp, #16
 801f710:	af00      	add	r7, sp, #0
 801f712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f71a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	685a      	ldr	r2, [r3, #4]
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	681b      	ldr	r3, [r3, #0]
 801f726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f72a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801f72c:	2300      	movs	r3, #0
 801f72e:	60bb      	str	r3, [r7, #8]
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	695b      	ldr	r3, [r3, #20]
 801f736:	60bb      	str	r3, [r7, #8]
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	681a      	ldr	r2, [r3, #0]
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	f042 0201 	orr.w	r2, r2, #1
 801f746:	601a      	str	r2, [r3, #0]
 801f748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	681a      	ldr	r2, [r3, #0]
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	681b      	ldr	r3, [r3, #0]
 801f75e:	685b      	ldr	r3, [r3, #4]
 801f760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f768:	d172      	bne.n	801f850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f76a:	7bfb      	ldrb	r3, [r7, #15]
 801f76c:	2b22      	cmp	r3, #34	; 0x22
 801f76e:	d002      	beq.n	801f776 <I2C_Slave_STOPF+0x6a>
 801f770:	7bfb      	ldrb	r3, [r7, #15]
 801f772:	2b2a      	cmp	r3, #42	; 0x2a
 801f774:	d135      	bne.n	801f7e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801f776:	687b      	ldr	r3, [r7, #4]
 801f778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	685b      	ldr	r3, [r3, #4]
 801f77e:	b29a      	uxth	r2, r3
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f788:	b29b      	uxth	r3, r3
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d005      	beq.n	801f79a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f792:	f043 0204 	orr.w	r2, r3, #4
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	685a      	ldr	r2, [r3, #4]
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f7a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	f7fd fc90 	bl	801d0d4 <HAL_DMA_GetState>
 801f7b4:	4603      	mov	r3, r0
 801f7b6:	2b01      	cmp	r3, #1
 801f7b8:	d049      	beq.n	801f84e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7be:	4a69      	ldr	r2, [pc, #420]	; (801f964 <I2C_Slave_STOPF+0x258>)
 801f7c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7fd fad8 	bl	801cd7c <HAL_DMA_Abort_IT>
 801f7cc:	4603      	mov	r3, r0
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d03d      	beq.n	801f84e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f7d8:	687a      	ldr	r2, [r7, #4]
 801f7da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f7dc:	4610      	mov	r0, r2
 801f7de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f7e0:	e035      	b.n	801f84e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	685b      	ldr	r3, [r3, #4]
 801f7ea:	b29a      	uxth	r2, r3
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f7f4:	b29b      	uxth	r3, r3
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d005      	beq.n	801f806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7fe:	f043 0204 	orr.w	r2, r3, #4
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	685a      	ldr	r2, [r3, #4]
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f81a:	4618      	mov	r0, r3
 801f81c:	f7fd fc5a 	bl	801d0d4 <HAL_DMA_GetState>
 801f820:	4603      	mov	r3, r0
 801f822:	2b01      	cmp	r3, #1
 801f824:	d014      	beq.n	801f850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f82a:	4a4e      	ldr	r2, [pc, #312]	; (801f964 <I2C_Slave_STOPF+0x258>)
 801f82c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f832:	4618      	mov	r0, r3
 801f834:	f7fd faa2 	bl	801cd7c <HAL_DMA_Abort_IT>
 801f838:	4603      	mov	r3, r0
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d008      	beq.n	801f850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f844:	687a      	ldr	r2, [r7, #4]
 801f846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f848:	4610      	mov	r0, r2
 801f84a:	4798      	blx	r3
 801f84c:	e000      	b.n	801f850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f84e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f854:	b29b      	uxth	r3, r3
 801f856:	2b00      	cmp	r3, #0
 801f858:	d03e      	beq.n	801f8d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	695b      	ldr	r3, [r3, #20]
 801f860:	f003 0304 	and.w	r3, r3, #4
 801f864:	2b04      	cmp	r3, #4
 801f866:	d112      	bne.n	801f88e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	681b      	ldr	r3, [r3, #0]
 801f86c:	691a      	ldr	r2, [r3, #16]
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f872:	b2d2      	uxtb	r2, r2
 801f874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f87a:	1c5a      	adds	r2, r3, #1
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f884:	b29b      	uxth	r3, r3
 801f886:	3b01      	subs	r3, #1
 801f888:	b29a      	uxth	r2, r3
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	695b      	ldr	r3, [r3, #20]
 801f894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f898:	2b40      	cmp	r3, #64	; 0x40
 801f89a:	d112      	bne.n	801f8c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	691a      	ldr	r2, [r3, #16]
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8a6:	b2d2      	uxtb	r2, r2
 801f8a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ae:	1c5a      	adds	r2, r3, #1
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f8b8:	b29b      	uxth	r3, r3
 801f8ba:	3b01      	subs	r3, #1
 801f8bc:	b29a      	uxth	r2, r3
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f8c6:	b29b      	uxth	r3, r3
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d005      	beq.n	801f8d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8d0:	f043 0204 	orr.w	r2, r3, #4
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d003      	beq.n	801f8e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801f8e0:	6878      	ldr	r0, [r7, #4]
 801f8e2:	f000 f8b3 	bl	801fa4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801f8e6:	e039      	b.n	801f95c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f8e8:	7bfb      	ldrb	r3, [r7, #15]
 801f8ea:	2b2a      	cmp	r3, #42	; 0x2a
 801f8ec:	d109      	bne.n	801f902 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	2200      	movs	r2, #0
 801f8f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	2228      	movs	r2, #40	; 0x28
 801f8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f8fc:	6878      	ldr	r0, [r7, #4]
 801f8fe:	f7ff f83b 	bl	801e978 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f908:	b2db      	uxtb	r3, r3
 801f90a:	2b28      	cmp	r3, #40	; 0x28
 801f90c:	d111      	bne.n	801f932 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	4a15      	ldr	r2, [pc, #84]	; (801f968 <I2C_Slave_STOPF+0x25c>)
 801f912:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	2200      	movs	r2, #0
 801f918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	2220      	movs	r2, #32
 801f91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2200      	movs	r2, #0
 801f926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f7ff f83c 	bl	801e9a8 <HAL_I2C_ListenCpltCallback>
}
 801f930:	e014      	b.n	801f95c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f936:	2b22      	cmp	r3, #34	; 0x22
 801f938:	d002      	beq.n	801f940 <I2C_Slave_STOPF+0x234>
 801f93a:	7bfb      	ldrb	r3, [r7, #15]
 801f93c:	2b22      	cmp	r3, #34	; 0x22
 801f93e:	d10d      	bne.n	801f95c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	2200      	movs	r2, #0
 801f944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	2220      	movs	r2, #32
 801f94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	2200      	movs	r2, #0
 801f952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f956:	6878      	ldr	r0, [r7, #4]
 801f958:	f7ff f80e 	bl	801e978 <HAL_I2C_SlaveRxCpltCallback>
}
 801f95c:	bf00      	nop
 801f95e:	3710      	adds	r7, #16
 801f960:	46bd      	mov	sp, r7
 801f962:	bd80      	pop	{r7, pc}
 801f964:	080201d1 	.word	0x080201d1
 801f968:	ffff0000 	.word	0xffff0000

0801f96c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801f96c:	b580      	push	{r7, lr}
 801f96e:	b084      	sub	sp, #16
 801f970:	af00      	add	r7, sp, #0
 801f972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f97a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f980:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801f982:	68bb      	ldr	r3, [r7, #8]
 801f984:	2b08      	cmp	r3, #8
 801f986:	d002      	beq.n	801f98e <I2C_Slave_AF+0x22>
 801f988:	68bb      	ldr	r3, [r7, #8]
 801f98a:	2b20      	cmp	r3, #32
 801f98c:	d129      	bne.n	801f9e2 <I2C_Slave_AF+0x76>
 801f98e:	7bfb      	ldrb	r3, [r7, #15]
 801f990:	2b28      	cmp	r3, #40	; 0x28
 801f992:	d126      	bne.n	801f9e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	4a2c      	ldr	r2, [pc, #176]	; (801fa48 <I2C_Slave_AF+0xdc>)
 801f998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	681b      	ldr	r3, [r3, #0]
 801f99e:	685a      	ldr	r2, [r3, #4]
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f9a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f9b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	681a      	ldr	r2, [r3, #0]
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f9c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	2200      	movs	r2, #0
 801f9c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	2220      	movs	r2, #32
 801f9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	2200      	movs	r2, #0
 801f9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f9da:	6878      	ldr	r0, [r7, #4]
 801f9dc:	f7fe ffe4 	bl	801e9a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801f9e0:	e02e      	b.n	801fa40 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f9e2:	7bfb      	ldrb	r3, [r7, #15]
 801f9e4:	2b21      	cmp	r3, #33	; 0x21
 801f9e6:	d126      	bne.n	801fa36 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	4a17      	ldr	r2, [pc, #92]	; (801fa48 <I2C_Slave_AF+0xdc>)
 801f9ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	2221      	movs	r2, #33	; 0x21
 801f9f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	2220      	movs	r2, #32
 801f9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	2200      	movs	r2, #0
 801fa00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	685a      	ldr	r2, [r3, #4]
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801fa12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801fa1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	681a      	ldr	r2, [r3, #0]
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fa2c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	f7fe ff98 	bl	801e964 <HAL_I2C_SlaveTxCpltCallback>
}
 801fa34:	e004      	b.n	801fa40 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801fa3e:	615a      	str	r2, [r3, #20]
}
 801fa40:	bf00      	nop
 801fa42:	3710      	adds	r7, #16
 801fa44:	46bd      	mov	sp, r7
 801fa46:	bd80      	pop	{r7, pc}
 801fa48:	ffff0000 	.word	0xffff0000

0801fa4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801fa4c:	b580      	push	{r7, lr}
 801fa4e:	b084      	sub	sp, #16
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fa5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fa62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801fa64:	7bbb      	ldrb	r3, [r7, #14]
 801fa66:	2b10      	cmp	r3, #16
 801fa68:	d002      	beq.n	801fa70 <I2C_ITError+0x24>
 801fa6a:	7bbb      	ldrb	r3, [r7, #14]
 801fa6c:	2b40      	cmp	r3, #64	; 0x40
 801fa6e:	d10a      	bne.n	801fa86 <I2C_ITError+0x3a>
 801fa70:	7bfb      	ldrb	r3, [r7, #15]
 801fa72:	2b22      	cmp	r3, #34	; 0x22
 801fa74:	d107      	bne.n	801fa86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	681a      	ldr	r2, [r3, #0]
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fa84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801fa86:	7bfb      	ldrb	r3, [r7, #15]
 801fa88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801fa8c:	2b28      	cmp	r3, #40	; 0x28
 801fa8e:	d107      	bne.n	801faa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	2200      	movs	r2, #0
 801fa94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	2228      	movs	r2, #40	; 0x28
 801fa9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801fa9e:	e015      	b.n	801facc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	685b      	ldr	r3, [r3, #4]
 801faa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801faaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801faae:	d00a      	beq.n	801fac6 <I2C_ITError+0x7a>
 801fab0:	7bfb      	ldrb	r3, [r7, #15]
 801fab2:	2b60      	cmp	r3, #96	; 0x60
 801fab4:	d007      	beq.n	801fac6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	2220      	movs	r2, #32
 801faba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	2200      	movs	r2, #0
 801fac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	2200      	movs	r2, #0
 801faca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	685b      	ldr	r3, [r3, #4]
 801fad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fada:	d162      	bne.n	801fba2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	681b      	ldr	r3, [r3, #0]
 801fae0:	685a      	ldr	r2, [r3, #4]
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	681b      	ldr	r3, [r3, #0]
 801fae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801faea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801faf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801faf4:	b2db      	uxtb	r3, r3
 801faf6:	2b01      	cmp	r3, #1
 801faf8:	d020      	beq.n	801fb3c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fafe:	4a6a      	ldr	r2, [pc, #424]	; (801fca8 <I2C_ITError+0x25c>)
 801fb00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb06:	4618      	mov	r0, r3
 801fb08:	f7fd f938 	bl	801cd7c <HAL_DMA_Abort_IT>
 801fb0c:	4603      	mov	r3, r0
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	f000 8089 	beq.w	801fc26 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801fb14:	687b      	ldr	r3, [r7, #4]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	681a      	ldr	r2, [r3, #0]
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	f022 0201 	bic.w	r2, r2, #1
 801fb22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	2220      	movs	r2, #32
 801fb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb32:	687a      	ldr	r2, [r7, #4]
 801fb34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801fb36:	4610      	mov	r0, r2
 801fb38:	4798      	blx	r3
 801fb3a:	e074      	b.n	801fc26 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb40:	4a59      	ldr	r2, [pc, #356]	; (801fca8 <I2C_ITError+0x25c>)
 801fb42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb48:	4618      	mov	r0, r3
 801fb4a:	f7fd f917 	bl	801cd7c <HAL_DMA_Abort_IT>
 801fb4e:	4603      	mov	r3, r0
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d068      	beq.n	801fc26 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	695b      	ldr	r3, [r3, #20]
 801fb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb5e:	2b40      	cmp	r3, #64	; 0x40
 801fb60:	d10b      	bne.n	801fb7a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	691a      	ldr	r2, [r3, #16]
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb6c:	b2d2      	uxtb	r2, r2
 801fb6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb74:	1c5a      	adds	r2, r3, #1
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	681a      	ldr	r2, [r3, #0]
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	f022 0201 	bic.w	r2, r2, #1
 801fb88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	2220      	movs	r2, #32
 801fb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb98:	687a      	ldr	r2, [r7, #4]
 801fb9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801fb9c:	4610      	mov	r0, r2
 801fb9e:	4798      	blx	r3
 801fba0:	e041      	b.n	801fc26 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fba8:	b2db      	uxtb	r3, r3
 801fbaa:	2b60      	cmp	r3, #96	; 0x60
 801fbac:	d125      	bne.n	801fbfa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	2220      	movs	r2, #32
 801fbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	2200      	movs	r2, #0
 801fbba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	695b      	ldr	r3, [r3, #20]
 801fbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fbc6:	2b40      	cmp	r3, #64	; 0x40
 801fbc8:	d10b      	bne.n	801fbe2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	691a      	ldr	r2, [r3, #16]
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbd4:	b2d2      	uxtb	r2, r2
 801fbd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbdc:	1c5a      	adds	r2, r3, #1
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	681a      	ldr	r2, [r3, #0]
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	f022 0201 	bic.w	r2, r2, #1
 801fbf0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801fbf2:	6878      	ldr	r0, [r7, #4]
 801fbf4:	f7fe feec 	bl	801e9d0 <HAL_I2C_AbortCpltCallback>
 801fbf8:	e015      	b.n	801fc26 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	695b      	ldr	r3, [r3, #20]
 801fc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc04:	2b40      	cmp	r3, #64	; 0x40
 801fc06:	d10b      	bne.n	801fc20 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	691a      	ldr	r2, [r3, #16]
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc12:	b2d2      	uxtb	r2, r2
 801fc14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc1a:	1c5a      	adds	r2, r3, #1
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801fc20:	6878      	ldr	r0, [r7, #4]
 801fc22:	f7fe fecb 	bl	801e9bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fc2c:	68bb      	ldr	r3, [r7, #8]
 801fc2e:	f003 0301 	and.w	r3, r3, #1
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d10e      	bne.n	801fc54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801fc36:	68bb      	ldr	r3, [r7, #8]
 801fc38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	d109      	bne.n	801fc54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801fc40:	68bb      	ldr	r3, [r7, #8]
 801fc42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d104      	bne.n	801fc54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801fc4a:	68bb      	ldr	r3, [r7, #8]
 801fc4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d007      	beq.n	801fc64 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	685a      	ldr	r2, [r3, #4]
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801fc62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fc6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc70:	f003 0304 	and.w	r3, r3, #4
 801fc74:	2b04      	cmp	r3, #4
 801fc76:	d113      	bne.n	801fca0 <I2C_ITError+0x254>
 801fc78:	7bfb      	ldrb	r3, [r7, #15]
 801fc7a:	2b28      	cmp	r3, #40	; 0x28
 801fc7c:	d110      	bne.n	801fca0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	4a0a      	ldr	r2, [pc, #40]	; (801fcac <I2C_ITError+0x260>)
 801fc82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	2200      	movs	r2, #0
 801fc88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	2220      	movs	r2, #32
 801fc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	2200      	movs	r2, #0
 801fc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801fc9a:	6878      	ldr	r0, [r7, #4]
 801fc9c:	f7fe fe84 	bl	801e9a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801fca0:	bf00      	nop
 801fca2:	3710      	adds	r7, #16
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	080201d1 	.word	0x080201d1
 801fcac:	ffff0000 	.word	0xffff0000

0801fcb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fcb0:	b580      	push	{r7, lr}
 801fcb2:	b088      	sub	sp, #32
 801fcb4:	af02      	add	r7, sp, #8
 801fcb6:	60f8      	str	r0, [r7, #12]
 801fcb8:	4608      	mov	r0, r1
 801fcba:	4611      	mov	r1, r2
 801fcbc:	461a      	mov	r2, r3
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	817b      	strh	r3, [r7, #10]
 801fcc2:	460b      	mov	r3, r1
 801fcc4:	813b      	strh	r3, [r7, #8]
 801fcc6:	4613      	mov	r3, r2
 801fcc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fcca:	68fb      	ldr	r3, [r7, #12]
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	681a      	ldr	r2, [r3, #0]
 801fcd0:	68fb      	ldr	r3, [r7, #12]
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fcd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcdc:	9300      	str	r3, [sp, #0]
 801fcde:	6a3b      	ldr	r3, [r7, #32]
 801fce0:	2200      	movs	r2, #0
 801fce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fce6:	68f8      	ldr	r0, [r7, #12]
 801fce8:	f000 fb1a 	bl	8020320 <I2C_WaitOnFlagUntilTimeout>
 801fcec:	4603      	mov	r3, r0
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d00d      	beq.n	801fd0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fcf2:	68fb      	ldr	r3, [r7, #12]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fcfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fd00:	d103      	bne.n	801fd0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fd08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fd0a:	2303      	movs	r3, #3
 801fd0c:	e05f      	b.n	801fdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fd0e:	897b      	ldrh	r3, [r7, #10]
 801fd10:	b2db      	uxtb	r3, r3
 801fd12:	461a      	mov	r2, r3
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fd1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd20:	6a3a      	ldr	r2, [r7, #32]
 801fd22:	492d      	ldr	r1, [pc, #180]	; (801fdd8 <I2C_RequestMemoryWrite+0x128>)
 801fd24:	68f8      	ldr	r0, [r7, #12]
 801fd26:	f000 fb52 	bl	80203ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fd2a:	4603      	mov	r3, r0
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	d001      	beq.n	801fd34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801fd30:	2301      	movs	r3, #1
 801fd32:	e04c      	b.n	801fdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fd34:	2300      	movs	r3, #0
 801fd36:	617b      	str	r3, [r7, #20]
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	695b      	ldr	r3, [r3, #20]
 801fd3e:	617b      	str	r3, [r7, #20]
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	699b      	ldr	r3, [r3, #24]
 801fd46:	617b      	str	r3, [r7, #20]
 801fd48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fd4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd4c:	6a39      	ldr	r1, [r7, #32]
 801fd4e:	68f8      	ldr	r0, [r7, #12]
 801fd50:	f000 fbbc 	bl	80204cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fd54:	4603      	mov	r3, r0
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d00d      	beq.n	801fd76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fd5a:	68fb      	ldr	r3, [r7, #12]
 801fd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd5e:	2b04      	cmp	r3, #4
 801fd60:	d107      	bne.n	801fd72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	681a      	ldr	r2, [r3, #0]
 801fd68:	68fb      	ldr	r3, [r7, #12]
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fd72:	2301      	movs	r3, #1
 801fd74:	e02b      	b.n	801fdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fd76:	88fb      	ldrh	r3, [r7, #6]
 801fd78:	2b01      	cmp	r3, #1
 801fd7a:	d105      	bne.n	801fd88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fd7c:	893b      	ldrh	r3, [r7, #8]
 801fd7e:	b2da      	uxtb	r2, r3
 801fd80:	68fb      	ldr	r3, [r7, #12]
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	611a      	str	r2, [r3, #16]
 801fd86:	e021      	b.n	801fdcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fd88:	893b      	ldrh	r3, [r7, #8]
 801fd8a:	0a1b      	lsrs	r3, r3, #8
 801fd8c:	b29b      	uxth	r3, r3
 801fd8e:	b2da      	uxtb	r2, r3
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fd96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd98:	6a39      	ldr	r1, [r7, #32]
 801fd9a:	68f8      	ldr	r0, [r7, #12]
 801fd9c:	f000 fb96 	bl	80204cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fda0:	4603      	mov	r3, r0
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d00d      	beq.n	801fdc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fdaa:	2b04      	cmp	r3, #4
 801fdac:	d107      	bne.n	801fdbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fdae:	68fb      	ldr	r3, [r7, #12]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	681a      	ldr	r2, [r3, #0]
 801fdb4:	68fb      	ldr	r3, [r7, #12]
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fdbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fdbe:	2301      	movs	r3, #1
 801fdc0:	e005      	b.n	801fdce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fdc2:	893b      	ldrh	r3, [r7, #8]
 801fdc4:	b2da      	uxtb	r2, r3
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801fdcc:	2300      	movs	r3, #0
}
 801fdce:	4618      	mov	r0, r3
 801fdd0:	3718      	adds	r7, #24
 801fdd2:	46bd      	mov	sp, r7
 801fdd4:	bd80      	pop	{r7, pc}
 801fdd6:	bf00      	nop
 801fdd8:	00010002 	.word	0x00010002

0801fddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	b088      	sub	sp, #32
 801fde0:	af02      	add	r7, sp, #8
 801fde2:	60f8      	str	r0, [r7, #12]
 801fde4:	4608      	mov	r0, r1
 801fde6:	4611      	mov	r1, r2
 801fde8:	461a      	mov	r2, r3
 801fdea:	4603      	mov	r3, r0
 801fdec:	817b      	strh	r3, [r7, #10]
 801fdee:	460b      	mov	r3, r1
 801fdf0:	813b      	strh	r3, [r7, #8]
 801fdf2:	4613      	mov	r3, r2
 801fdf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	681a      	ldr	r2, [r3, #0]
 801fdfc:	68fb      	ldr	r3, [r7, #12]
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fe04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	681a      	ldr	r2, [r3, #0]
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fe14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe18:	9300      	str	r3, [sp, #0]
 801fe1a:	6a3b      	ldr	r3, [r7, #32]
 801fe1c:	2200      	movs	r2, #0
 801fe1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fe22:	68f8      	ldr	r0, [r7, #12]
 801fe24:	f000 fa7c 	bl	8020320 <I2C_WaitOnFlagUntilTimeout>
 801fe28:	4603      	mov	r3, r0
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d00d      	beq.n	801fe4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fe2e:	68fb      	ldr	r3, [r7, #12]
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fe38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fe3c:	d103      	bne.n	801fe46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fe44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fe46:	2303      	movs	r3, #3
 801fe48:	e0aa      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fe4a:	897b      	ldrh	r3, [r7, #10]
 801fe4c:	b2db      	uxtb	r3, r3
 801fe4e:	461a      	mov	r2, r3
 801fe50:	68fb      	ldr	r3, [r7, #12]
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fe58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe5c:	6a3a      	ldr	r2, [r7, #32]
 801fe5e:	4952      	ldr	r1, [pc, #328]	; (801ffa8 <I2C_RequestMemoryRead+0x1cc>)
 801fe60:	68f8      	ldr	r0, [r7, #12]
 801fe62:	f000 fab4 	bl	80203ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fe66:	4603      	mov	r3, r0
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d001      	beq.n	801fe70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801fe6c:	2301      	movs	r3, #1
 801fe6e:	e097      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fe70:	2300      	movs	r3, #0
 801fe72:	617b      	str	r3, [r7, #20]
 801fe74:	68fb      	ldr	r3, [r7, #12]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	695b      	ldr	r3, [r3, #20]
 801fe7a:	617b      	str	r3, [r7, #20]
 801fe7c:	68fb      	ldr	r3, [r7, #12]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	699b      	ldr	r3, [r3, #24]
 801fe82:	617b      	str	r3, [r7, #20]
 801fe84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fe86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe88:	6a39      	ldr	r1, [r7, #32]
 801fe8a:	68f8      	ldr	r0, [r7, #12]
 801fe8c:	f000 fb1e 	bl	80204cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fe90:	4603      	mov	r3, r0
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d00d      	beq.n	801feb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe9a:	2b04      	cmp	r3, #4
 801fe9c:	d107      	bne.n	801feae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fe9e:	68fb      	ldr	r3, [r7, #12]
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	681a      	ldr	r2, [r3, #0]
 801fea4:	68fb      	ldr	r3, [r7, #12]
 801fea6:	681b      	ldr	r3, [r3, #0]
 801fea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801feac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801feae:	2301      	movs	r3, #1
 801feb0:	e076      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801feb2:	88fb      	ldrh	r3, [r7, #6]
 801feb4:	2b01      	cmp	r3, #1
 801feb6:	d105      	bne.n	801fec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801feb8:	893b      	ldrh	r3, [r7, #8]
 801feba:	b2da      	uxtb	r2, r3
 801febc:	68fb      	ldr	r3, [r7, #12]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	611a      	str	r2, [r3, #16]
 801fec2:	e021      	b.n	801ff08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fec4:	893b      	ldrh	r3, [r7, #8]
 801fec6:	0a1b      	lsrs	r3, r3, #8
 801fec8:	b29b      	uxth	r3, r3
 801feca:	b2da      	uxtb	r2, r3
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fed4:	6a39      	ldr	r1, [r7, #32]
 801fed6:	68f8      	ldr	r0, [r7, #12]
 801fed8:	f000 faf8 	bl	80204cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fedc:	4603      	mov	r3, r0
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d00d      	beq.n	801fefe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fee2:	68fb      	ldr	r3, [r7, #12]
 801fee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fee6:	2b04      	cmp	r3, #4
 801fee8:	d107      	bne.n	801fefa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	681a      	ldr	r2, [r3, #0]
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fefa:	2301      	movs	r3, #1
 801fefc:	e050      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fefe:	893b      	ldrh	r3, [r7, #8]
 801ff00:	b2da      	uxtb	r2, r3
 801ff02:	68fb      	ldr	r3, [r7, #12]
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ff08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff0a:	6a39      	ldr	r1, [r7, #32]
 801ff0c:	68f8      	ldr	r0, [r7, #12]
 801ff0e:	f000 fadd 	bl	80204cc <I2C_WaitOnTXEFlagUntilTimeout>
 801ff12:	4603      	mov	r3, r0
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d00d      	beq.n	801ff34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ff1c:	2b04      	cmp	r3, #4
 801ff1e:	d107      	bne.n	801ff30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ff20:	68fb      	ldr	r3, [r7, #12]
 801ff22:	681b      	ldr	r3, [r3, #0]
 801ff24:	681a      	ldr	r2, [r3, #0]
 801ff26:	68fb      	ldr	r3, [r7, #12]
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ff2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801ff30:	2301      	movs	r3, #1
 801ff32:	e035      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	681a      	ldr	r2, [r3, #0]
 801ff3a:	68fb      	ldr	r3, [r7, #12]
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ff42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff46:	9300      	str	r3, [sp, #0]
 801ff48:	6a3b      	ldr	r3, [r7, #32]
 801ff4a:	2200      	movs	r2, #0
 801ff4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ff50:	68f8      	ldr	r0, [r7, #12]
 801ff52:	f000 f9e5 	bl	8020320 <I2C_WaitOnFlagUntilTimeout>
 801ff56:	4603      	mov	r3, r0
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d00d      	beq.n	801ff78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ff5c:	68fb      	ldr	r3, [r7, #12]
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ff66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ff6a:	d103      	bne.n	801ff74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801ff6c:	68fb      	ldr	r3, [r7, #12]
 801ff6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ff72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801ff74:	2303      	movs	r3, #3
 801ff76:	e013      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801ff78:	897b      	ldrh	r3, [r7, #10]
 801ff7a:	b2db      	uxtb	r3, r3
 801ff7c:	f043 0301 	orr.w	r3, r3, #1
 801ff80:	b2da      	uxtb	r2, r3
 801ff82:	68fb      	ldr	r3, [r7, #12]
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff8a:	6a3a      	ldr	r2, [r7, #32]
 801ff8c:	4906      	ldr	r1, [pc, #24]	; (801ffa8 <I2C_RequestMemoryRead+0x1cc>)
 801ff8e:	68f8      	ldr	r0, [r7, #12]
 801ff90:	f000 fa1d 	bl	80203ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801ff94:	4603      	mov	r3, r0
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d001      	beq.n	801ff9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801ff9a:	2301      	movs	r3, #1
 801ff9c:	e000      	b.n	801ffa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801ff9e:	2300      	movs	r3, #0
}
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	3718      	adds	r7, #24
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	bd80      	pop	{r7, pc}
 801ffa8:	00010002 	.word	0x00010002

0801ffac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801ffac:	b580      	push	{r7, lr}
 801ffae:	b086      	sub	sp, #24
 801ffb0:	af00      	add	r7, sp, #0
 801ffb2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ffc0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801ffc2:	697b      	ldr	r3, [r7, #20]
 801ffc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ffc8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801ffca:	697b      	ldr	r3, [r7, #20]
 801ffcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	685a      	ldr	r2, [r3, #4]
 801ffd6:	697b      	ldr	r3, [r7, #20]
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801ffde:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ffe0:	697b      	ldr	r3, [r7, #20]
 801ffe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d003      	beq.n	801fff0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ffe8:	697b      	ldr	r3, [r7, #20]
 801ffea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ffec:	2200      	movs	r2, #0
 801ffee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fff0:	697b      	ldr	r3, [r7, #20]
 801fff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d003      	beq.n	8020000 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fffc:	2200      	movs	r2, #0
 801fffe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8020000:	7cfb      	ldrb	r3, [r7, #19]
 8020002:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8020006:	2b21      	cmp	r3, #33	; 0x21
 8020008:	d007      	beq.n	802001a <I2C_DMAXferCplt+0x6e>
 802000a:	7cfb      	ldrb	r3, [r7, #19]
 802000c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8020010:	2b22      	cmp	r3, #34	; 0x22
 8020012:	d131      	bne.n	8020078 <I2C_DMAXferCplt+0xcc>
 8020014:	7cbb      	ldrb	r3, [r7, #18]
 8020016:	2b20      	cmp	r3, #32
 8020018:	d12e      	bne.n	8020078 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802001a:	697b      	ldr	r3, [r7, #20]
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	685a      	ldr	r2, [r3, #4]
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020028:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 802002a:	697b      	ldr	r3, [r7, #20]
 802002c:	2200      	movs	r2, #0
 802002e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8020030:	7cfb      	ldrb	r3, [r7, #19]
 8020032:	2b29      	cmp	r3, #41	; 0x29
 8020034:	d10a      	bne.n	802004c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8020036:	697b      	ldr	r3, [r7, #20]
 8020038:	2221      	movs	r2, #33	; 0x21
 802003a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802003c:	697b      	ldr	r3, [r7, #20]
 802003e:	2228      	movs	r2, #40	; 0x28
 8020040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8020044:	6978      	ldr	r0, [r7, #20]
 8020046:	f7fe fc8d 	bl	801e964 <HAL_I2C_SlaveTxCpltCallback>
 802004a:	e00c      	b.n	8020066 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802004c:	7cfb      	ldrb	r3, [r7, #19]
 802004e:	2b2a      	cmp	r3, #42	; 0x2a
 8020050:	d109      	bne.n	8020066 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8020052:	697b      	ldr	r3, [r7, #20]
 8020054:	2222      	movs	r2, #34	; 0x22
 8020056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020058:	697b      	ldr	r3, [r7, #20]
 802005a:	2228      	movs	r2, #40	; 0x28
 802005c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8020060:	6978      	ldr	r0, [r7, #20]
 8020062:	f7fe fc89 	bl	801e978 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8020066:	697b      	ldr	r3, [r7, #20]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	685a      	ldr	r2, [r3, #4]
 802006c:	697b      	ldr	r3, [r7, #20]
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8020074:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8020076:	e06a      	b.n	802014e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8020078:	697b      	ldr	r3, [r7, #20]
 802007a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802007e:	b2db      	uxtb	r3, r3
 8020080:	2b00      	cmp	r3, #0
 8020082:	d064      	beq.n	802014e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8020084:	697b      	ldr	r3, [r7, #20]
 8020086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020088:	b29b      	uxth	r3, r3
 802008a:	2b01      	cmp	r3, #1
 802008c:	d107      	bne.n	802009e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802008e:	697b      	ldr	r3, [r7, #20]
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	681a      	ldr	r2, [r3, #0]
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802009c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 802009e:	697b      	ldr	r3, [r7, #20]
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	685a      	ldr	r2, [r3, #4]
 80200a4:	697b      	ldr	r3, [r7, #20]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80200ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80200b4:	d009      	beq.n	80200ca <I2C_DMAXferCplt+0x11e>
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	2b08      	cmp	r3, #8
 80200ba:	d006      	beq.n	80200ca <I2C_DMAXferCplt+0x11e>
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80200c2:	d002      	beq.n	80200ca <I2C_DMAXferCplt+0x11e>
 80200c4:	68fb      	ldr	r3, [r7, #12]
 80200c6:	2b20      	cmp	r3, #32
 80200c8:	d107      	bne.n	80200da <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80200ca:	697b      	ldr	r3, [r7, #20]
 80200cc:	681b      	ldr	r3, [r3, #0]
 80200ce:	681a      	ldr	r2, [r3, #0]
 80200d0:	697b      	ldr	r3, [r7, #20]
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80200d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80200da:	697b      	ldr	r3, [r7, #20]
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	685a      	ldr	r2, [r3, #4]
 80200e0:	697b      	ldr	r3, [r7, #20]
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80200e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80200ea:	697b      	ldr	r3, [r7, #20]
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	685a      	ldr	r2, [r3, #4]
 80200f0:	697b      	ldr	r3, [r7, #20]
 80200f2:	681b      	ldr	r3, [r3, #0]
 80200f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80200f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80200fa:	697b      	ldr	r3, [r7, #20]
 80200fc:	2200      	movs	r2, #0
 80200fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8020100:	697b      	ldr	r3, [r7, #20]
 8020102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020104:	2b00      	cmp	r3, #0
 8020106:	d003      	beq.n	8020110 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8020108:	6978      	ldr	r0, [r7, #20]
 802010a:	f7fe fc57 	bl	801e9bc <HAL_I2C_ErrorCallback>
}
 802010e:	e01e      	b.n	802014e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8020110:	697b      	ldr	r3, [r7, #20]
 8020112:	2220      	movs	r2, #32
 8020114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8020118:	697b      	ldr	r3, [r7, #20]
 802011a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802011e:	b2db      	uxtb	r3, r3
 8020120:	2b40      	cmp	r3, #64	; 0x40
 8020122:	d10a      	bne.n	802013a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8020124:	697b      	ldr	r3, [r7, #20]
 8020126:	2200      	movs	r2, #0
 8020128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 802012c:	697b      	ldr	r3, [r7, #20]
 802012e:	2200      	movs	r2, #0
 8020130:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8020132:	6978      	ldr	r0, [r7, #20]
 8020134:	f7e1 fc7c 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 8020138:	e009      	b.n	802014e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802013a:	697b      	ldr	r3, [r7, #20]
 802013c:	2200      	movs	r2, #0
 802013e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8020142:	697b      	ldr	r3, [r7, #20]
 8020144:	2212      	movs	r2, #18
 8020146:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8020148:	6978      	ldr	r0, [r7, #20]
 802014a:	f7e1 fc87 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 802014e:	bf00      	nop
 8020150:	3718      	adds	r7, #24
 8020152:	46bd      	mov	sp, r7
 8020154:	bd80      	pop	{r7, pc}

08020156 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8020156:	b580      	push	{r7, lr}
 8020158:	b084      	sub	sp, #16
 802015a:	af00      	add	r7, sp, #0
 802015c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020162:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020168:	2b00      	cmp	r3, #0
 802016a:	d003      	beq.n	8020174 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 802016c:	68fb      	ldr	r3, [r7, #12]
 802016e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020170:	2200      	movs	r2, #0
 8020172:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8020174:	68fb      	ldr	r3, [r7, #12]
 8020176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020178:	2b00      	cmp	r3, #0
 802017a:	d003      	beq.n	8020184 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020180:	2200      	movs	r2, #0
 8020182:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8020184:	6878      	ldr	r0, [r7, #4]
 8020186:	f7fc ffb3 	bl	801d0f0 <HAL_DMA_GetError>
 802018a:	4603      	mov	r3, r0
 802018c:	2b02      	cmp	r3, #2
 802018e:	d01b      	beq.n	80201c8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	681a      	ldr	r2, [r3, #0]
 8020196:	68fb      	ldr	r3, [r7, #12]
 8020198:	681b      	ldr	r3, [r3, #0]
 802019a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802019e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80201a0:	68fb      	ldr	r3, [r7, #12]
 80201a2:	2200      	movs	r2, #0
 80201a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	2220      	movs	r2, #32
 80201aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	2200      	movs	r2, #0
 80201b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80201b6:	68fb      	ldr	r3, [r7, #12]
 80201b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80201ba:	f043 0210 	orr.w	r2, r3, #16
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80201c2:	68f8      	ldr	r0, [r7, #12]
 80201c4:	f7fe fbfa 	bl	801e9bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80201c8:	bf00      	nop
 80201ca:	3710      	adds	r7, #16
 80201cc:	46bd      	mov	sp, r7
 80201ce:	bd80      	pop	{r7, pc}

080201d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b086      	sub	sp, #24
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80201d8:	2300      	movs	r3, #0
 80201da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80201e2:	697b      	ldr	r3, [r7, #20]
 80201e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80201e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80201ea:	4b4b      	ldr	r3, [pc, #300]	; (8020318 <I2C_DMAAbort+0x148>)
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	08db      	lsrs	r3, r3, #3
 80201f0:	4a4a      	ldr	r2, [pc, #296]	; (802031c <I2C_DMAAbort+0x14c>)
 80201f2:	fba2 2303 	umull	r2, r3, r2, r3
 80201f6:	0a1a      	lsrs	r2, r3, #8
 80201f8:	4613      	mov	r3, r2
 80201fa:	009b      	lsls	r3, r3, #2
 80201fc:	4413      	add	r3, r2
 80201fe:	00da      	lsls	r2, r3, #3
 8020200:	1ad3      	subs	r3, r2, r3
 8020202:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	2b00      	cmp	r3, #0
 8020208:	d106      	bne.n	8020218 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802020a:	697b      	ldr	r3, [r7, #20]
 802020c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802020e:	f043 0220 	orr.w	r2, r3, #32
 8020212:	697b      	ldr	r3, [r7, #20]
 8020214:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8020216:	e00a      	b.n	802022e <I2C_DMAAbort+0x5e>
    }
    count--;
 8020218:	68fb      	ldr	r3, [r7, #12]
 802021a:	3b01      	subs	r3, #1
 802021c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802021e:	697b      	ldr	r3, [r7, #20]
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802022c:	d0ea      	beq.n	8020204 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 802022e:	697b      	ldr	r3, [r7, #20]
 8020230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020232:	2b00      	cmp	r3, #0
 8020234:	d003      	beq.n	802023e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020236:	697b      	ldr	r3, [r7, #20]
 8020238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802023a:	2200      	movs	r2, #0
 802023c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 802023e:	697b      	ldr	r3, [r7, #20]
 8020240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020242:	2b00      	cmp	r3, #0
 8020244:	d003      	beq.n	802024e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020246:	697b      	ldr	r3, [r7, #20]
 8020248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802024a:	2200      	movs	r2, #0
 802024c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802024e:	697b      	ldr	r3, [r7, #20]
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	681a      	ldr	r2, [r3, #0]
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802025c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 802025e:	697b      	ldr	r3, [r7, #20]
 8020260:	2200      	movs	r2, #0
 8020262:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8020264:	697b      	ldr	r3, [r7, #20]
 8020266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020268:	2b00      	cmp	r3, #0
 802026a:	d003      	beq.n	8020274 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802026c:	697b      	ldr	r3, [r7, #20]
 802026e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020270:	2200      	movs	r2, #0
 8020272:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8020274:	697b      	ldr	r3, [r7, #20]
 8020276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020278:	2b00      	cmp	r3, #0
 802027a:	d003      	beq.n	8020284 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802027c:	697b      	ldr	r3, [r7, #20]
 802027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020280:	2200      	movs	r2, #0
 8020282:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8020284:	697b      	ldr	r3, [r7, #20]
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	681a      	ldr	r2, [r3, #0]
 802028a:	697b      	ldr	r3, [r7, #20]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	f022 0201 	bic.w	r2, r2, #1
 8020292:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8020294:	697b      	ldr	r3, [r7, #20]
 8020296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802029a:	b2db      	uxtb	r3, r3
 802029c:	2b60      	cmp	r3, #96	; 0x60
 802029e:	d10e      	bne.n	80202be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80202a0:	697b      	ldr	r3, [r7, #20]
 80202a2:	2220      	movs	r2, #32
 80202a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80202a8:	697b      	ldr	r3, [r7, #20]
 80202aa:	2200      	movs	r2, #0
 80202ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80202b0:	697b      	ldr	r3, [r7, #20]
 80202b2:	2200      	movs	r2, #0
 80202b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80202b6:	6978      	ldr	r0, [r7, #20]
 80202b8:	f7fe fb8a 	bl	801e9d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80202bc:	e027      	b.n	802030e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80202be:	7cfb      	ldrb	r3, [r7, #19]
 80202c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80202c4:	2b28      	cmp	r3, #40	; 0x28
 80202c6:	d117      	bne.n	80202f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80202c8:	697b      	ldr	r3, [r7, #20]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	681a      	ldr	r2, [r3, #0]
 80202ce:	697b      	ldr	r3, [r7, #20]
 80202d0:	681b      	ldr	r3, [r3, #0]
 80202d2:	f042 0201 	orr.w	r2, r2, #1
 80202d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80202d8:	697b      	ldr	r3, [r7, #20]
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	681a      	ldr	r2, [r3, #0]
 80202de:	697b      	ldr	r3, [r7, #20]
 80202e0:	681b      	ldr	r3, [r3, #0]
 80202e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80202e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80202e8:	697b      	ldr	r3, [r7, #20]
 80202ea:	2200      	movs	r2, #0
 80202ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80202ee:	697b      	ldr	r3, [r7, #20]
 80202f0:	2228      	movs	r2, #40	; 0x28
 80202f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80202f6:	e007      	b.n	8020308 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80202f8:	697b      	ldr	r3, [r7, #20]
 80202fa:	2220      	movs	r2, #32
 80202fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8020300:	697b      	ldr	r3, [r7, #20]
 8020302:	2200      	movs	r2, #0
 8020304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8020308:	6978      	ldr	r0, [r7, #20]
 802030a:	f7fe fb57 	bl	801e9bc <HAL_I2C_ErrorCallback>
}
 802030e:	bf00      	nop
 8020310:	3718      	adds	r7, #24
 8020312:	46bd      	mov	sp, r7
 8020314:	bd80      	pop	{r7, pc}
 8020316:	bf00      	nop
 8020318:	20000020 	.word	0x20000020
 802031c:	14f8b589 	.word	0x14f8b589

08020320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8020320:	b580      	push	{r7, lr}
 8020322:	b084      	sub	sp, #16
 8020324:	af00      	add	r7, sp, #0
 8020326:	60f8      	str	r0, [r7, #12]
 8020328:	60b9      	str	r1, [r7, #8]
 802032a:	603b      	str	r3, [r7, #0]
 802032c:	4613      	mov	r3, r2
 802032e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020330:	e025      	b.n	802037e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020332:	683b      	ldr	r3, [r7, #0]
 8020334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020338:	d021      	beq.n	802037e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802033a:	f7fb fe57 	bl	801bfec <HAL_GetTick>
 802033e:	4602      	mov	r2, r0
 8020340:	69bb      	ldr	r3, [r7, #24]
 8020342:	1ad3      	subs	r3, r2, r3
 8020344:	683a      	ldr	r2, [r7, #0]
 8020346:	429a      	cmp	r2, r3
 8020348:	d302      	bcc.n	8020350 <I2C_WaitOnFlagUntilTimeout+0x30>
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	2b00      	cmp	r3, #0
 802034e:	d116      	bne.n	802037e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	2200      	movs	r2, #0
 8020354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	2220      	movs	r2, #32
 802035a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802035e:	68fb      	ldr	r3, [r7, #12]
 8020360:	2200      	movs	r2, #0
 8020362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802036a:	f043 0220 	orr.w	r2, r3, #32
 802036e:	68fb      	ldr	r3, [r7, #12]
 8020370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	2200      	movs	r2, #0
 8020376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802037a:	2301      	movs	r3, #1
 802037c:	e023      	b.n	80203c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802037e:	68bb      	ldr	r3, [r7, #8]
 8020380:	0c1b      	lsrs	r3, r3, #16
 8020382:	b2db      	uxtb	r3, r3
 8020384:	2b01      	cmp	r3, #1
 8020386:	d10d      	bne.n	80203a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8020388:	68fb      	ldr	r3, [r7, #12]
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	695b      	ldr	r3, [r3, #20]
 802038e:	43da      	mvns	r2, r3
 8020390:	68bb      	ldr	r3, [r7, #8]
 8020392:	4013      	ands	r3, r2
 8020394:	b29b      	uxth	r3, r3
 8020396:	2b00      	cmp	r3, #0
 8020398:	bf0c      	ite	eq
 802039a:	2301      	moveq	r3, #1
 802039c:	2300      	movne	r3, #0
 802039e:	b2db      	uxtb	r3, r3
 80203a0:	461a      	mov	r2, r3
 80203a2:	e00c      	b.n	80203be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	699b      	ldr	r3, [r3, #24]
 80203aa:	43da      	mvns	r2, r3
 80203ac:	68bb      	ldr	r3, [r7, #8]
 80203ae:	4013      	ands	r3, r2
 80203b0:	b29b      	uxth	r3, r3
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	bf0c      	ite	eq
 80203b6:	2301      	moveq	r3, #1
 80203b8:	2300      	movne	r3, #0
 80203ba:	b2db      	uxtb	r3, r3
 80203bc:	461a      	mov	r2, r3
 80203be:	79fb      	ldrb	r3, [r7, #7]
 80203c0:	429a      	cmp	r2, r3
 80203c2:	d0b6      	beq.n	8020332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80203c4:	2300      	movs	r3, #0
}
 80203c6:	4618      	mov	r0, r3
 80203c8:	3710      	adds	r7, #16
 80203ca:	46bd      	mov	sp, r7
 80203cc:	bd80      	pop	{r7, pc}

080203ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80203ce:	b580      	push	{r7, lr}
 80203d0:	b084      	sub	sp, #16
 80203d2:	af00      	add	r7, sp, #0
 80203d4:	60f8      	str	r0, [r7, #12]
 80203d6:	60b9      	str	r1, [r7, #8]
 80203d8:	607a      	str	r2, [r7, #4]
 80203da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80203dc:	e051      	b.n	8020482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80203de:	68fb      	ldr	r3, [r7, #12]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	695b      	ldr	r3, [r3, #20]
 80203e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80203e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80203ec:	d123      	bne.n	8020436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80203ee:	68fb      	ldr	r3, [r7, #12]
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	681a      	ldr	r2, [r3, #0]
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80203fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	681b      	ldr	r3, [r3, #0]
 8020402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020406:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	2200      	movs	r2, #0
 802040c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802040e:	68fb      	ldr	r3, [r7, #12]
 8020410:	2220      	movs	r2, #32
 8020412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	2200      	movs	r2, #0
 802041a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802041e:	68fb      	ldr	r3, [r7, #12]
 8020420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020422:	f043 0204 	orr.w	r2, r3, #4
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	2200      	movs	r2, #0
 802042e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8020432:	2301      	movs	r3, #1
 8020434:	e046      	b.n	80204c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	f1b3 3fff 	cmp.w	r3, #4294967295
 802043c:	d021      	beq.n	8020482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802043e:	f7fb fdd5 	bl	801bfec <HAL_GetTick>
 8020442:	4602      	mov	r2, r0
 8020444:	683b      	ldr	r3, [r7, #0]
 8020446:	1ad3      	subs	r3, r2, r3
 8020448:	687a      	ldr	r2, [r7, #4]
 802044a:	429a      	cmp	r2, r3
 802044c:	d302      	bcc.n	8020454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d116      	bne.n	8020482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020454:	68fb      	ldr	r3, [r7, #12]
 8020456:	2200      	movs	r2, #0
 8020458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802045a:	68fb      	ldr	r3, [r7, #12]
 802045c:	2220      	movs	r2, #32
 802045e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020462:	68fb      	ldr	r3, [r7, #12]
 8020464:	2200      	movs	r2, #0
 8020466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802046e:	f043 0220 	orr.w	r2, r3, #32
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	2200      	movs	r2, #0
 802047a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802047e:	2301      	movs	r3, #1
 8020480:	e020      	b.n	80204c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020482:	68bb      	ldr	r3, [r7, #8]
 8020484:	0c1b      	lsrs	r3, r3, #16
 8020486:	b2db      	uxtb	r3, r3
 8020488:	2b01      	cmp	r3, #1
 802048a:	d10c      	bne.n	80204a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	695b      	ldr	r3, [r3, #20]
 8020492:	43da      	mvns	r2, r3
 8020494:	68bb      	ldr	r3, [r7, #8]
 8020496:	4013      	ands	r3, r2
 8020498:	b29b      	uxth	r3, r3
 802049a:	2b00      	cmp	r3, #0
 802049c:	bf14      	ite	ne
 802049e:	2301      	movne	r3, #1
 80204a0:	2300      	moveq	r3, #0
 80204a2:	b2db      	uxtb	r3, r3
 80204a4:	e00b      	b.n	80204be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80204a6:	68fb      	ldr	r3, [r7, #12]
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	699b      	ldr	r3, [r3, #24]
 80204ac:	43da      	mvns	r2, r3
 80204ae:	68bb      	ldr	r3, [r7, #8]
 80204b0:	4013      	ands	r3, r2
 80204b2:	b29b      	uxth	r3, r3
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	bf14      	ite	ne
 80204b8:	2301      	movne	r3, #1
 80204ba:	2300      	moveq	r3, #0
 80204bc:	b2db      	uxtb	r3, r3
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d18d      	bne.n	80203de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80204c2:	2300      	movs	r3, #0
}
 80204c4:	4618      	mov	r0, r3
 80204c6:	3710      	adds	r7, #16
 80204c8:	46bd      	mov	sp, r7
 80204ca:	bd80      	pop	{r7, pc}

080204cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80204cc:	b580      	push	{r7, lr}
 80204ce:	b084      	sub	sp, #16
 80204d0:	af00      	add	r7, sp, #0
 80204d2:	60f8      	str	r0, [r7, #12]
 80204d4:	60b9      	str	r1, [r7, #8]
 80204d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80204d8:	e02d      	b.n	8020536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80204da:	68f8      	ldr	r0, [r7, #12]
 80204dc:	f000 f86a 	bl	80205b4 <I2C_IsAcknowledgeFailed>
 80204e0:	4603      	mov	r3, r0
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d001      	beq.n	80204ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80204e6:	2301      	movs	r3, #1
 80204e8:	e02d      	b.n	8020546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80204ea:	68bb      	ldr	r3, [r7, #8]
 80204ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80204f0:	d021      	beq.n	8020536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80204f2:	f7fb fd7b 	bl	801bfec <HAL_GetTick>
 80204f6:	4602      	mov	r2, r0
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	1ad3      	subs	r3, r2, r3
 80204fc:	68ba      	ldr	r2, [r7, #8]
 80204fe:	429a      	cmp	r2, r3
 8020500:	d302      	bcc.n	8020508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8020502:	68bb      	ldr	r3, [r7, #8]
 8020504:	2b00      	cmp	r3, #0
 8020506:	d116      	bne.n	8020536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	2200      	movs	r2, #0
 802050c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802050e:	68fb      	ldr	r3, [r7, #12]
 8020510:	2220      	movs	r2, #32
 8020512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020516:	68fb      	ldr	r3, [r7, #12]
 8020518:	2200      	movs	r2, #0
 802051a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020522:	f043 0220 	orr.w	r2, r3, #32
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	2200      	movs	r2, #0
 802052e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020532:	2301      	movs	r3, #1
 8020534:	e007      	b.n	8020546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8020536:	68fb      	ldr	r3, [r7, #12]
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	695b      	ldr	r3, [r3, #20]
 802053c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020540:	2b80      	cmp	r3, #128	; 0x80
 8020542:	d1ca      	bne.n	80204da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8020544:	2300      	movs	r3, #0
}
 8020546:	4618      	mov	r0, r3
 8020548:	3710      	adds	r7, #16
 802054a:	46bd      	mov	sp, r7
 802054c:	bd80      	pop	{r7, pc}
	...

08020550 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8020550:	b480      	push	{r7}
 8020552:	b085      	sub	sp, #20
 8020554:	af00      	add	r7, sp, #0
 8020556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020558:	2300      	movs	r3, #0
 802055a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 802055c:	4b13      	ldr	r3, [pc, #76]	; (80205ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	08db      	lsrs	r3, r3, #3
 8020562:	4a13      	ldr	r2, [pc, #76]	; (80205b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8020564:	fba2 2303 	umull	r2, r3, r2, r3
 8020568:	0a1a      	lsrs	r2, r3, #8
 802056a:	4613      	mov	r3, r2
 802056c:	009b      	lsls	r3, r3, #2
 802056e:	4413      	add	r3, r2
 8020570:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8020572:	68fb      	ldr	r3, [r7, #12]
 8020574:	3b01      	subs	r3, #1
 8020576:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	2b00      	cmp	r3, #0
 802057c:	d107      	bne.n	802058e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020582:	f043 0220 	orr.w	r2, r3, #32
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802058a:	2301      	movs	r3, #1
 802058c:	e008      	b.n	80205a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802059c:	d0e9      	beq.n	8020572 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 802059e:	2300      	movs	r3, #0
}
 80205a0:	4618      	mov	r0, r3
 80205a2:	3714      	adds	r7, #20
 80205a4:	46bd      	mov	sp, r7
 80205a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205aa:	4770      	bx	lr
 80205ac:	20000020 	.word	0x20000020
 80205b0:	14f8b589 	.word	0x14f8b589

080205b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80205b4:	b480      	push	{r7}
 80205b6:	b083      	sub	sp, #12
 80205b8:	af00      	add	r7, sp, #0
 80205ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	695b      	ldr	r3, [r3, #20]
 80205c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80205c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80205ca:	d11b      	bne.n	8020604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80205d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	2200      	movs	r2, #0
 80205da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	2220      	movs	r2, #32
 80205e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	2200      	movs	r2, #0
 80205e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205f0:	f043 0204 	orr.w	r2, r3, #4
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	2200      	movs	r2, #0
 80205fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8020600:	2301      	movs	r3, #1
 8020602:	e000      	b.n	8020606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8020604:	2300      	movs	r3, #0
}
 8020606:	4618      	mov	r0, r3
 8020608:	370c      	adds	r7, #12
 802060a:	46bd      	mov	sp, r7
 802060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020610:	4770      	bx	lr

08020612 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8020612:	b480      	push	{r7}
 8020614:	b083      	sub	sp, #12
 8020616:	af00      	add	r7, sp, #0
 8020618:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802061e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8020622:	d103      	bne.n	802062c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	2201      	movs	r2, #1
 8020628:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 802062a:	e007      	b.n	802063c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020630:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8020634:	d102      	bne.n	802063c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8020636:	687b      	ldr	r3, [r7, #4]
 8020638:	2208      	movs	r2, #8
 802063a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 802063c:	bf00      	nop
 802063e:	370c      	adds	r7, #12
 8020640:	46bd      	mov	sp, r7
 8020642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020646:	4770      	bx	lr

08020648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020648:	b580      	push	{r7, lr}
 802064a:	b086      	sub	sp, #24
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	2b00      	cmp	r3, #0
 8020654:	d101      	bne.n	802065a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8020656:	2301      	movs	r3, #1
 8020658:	e267      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	f003 0301 	and.w	r3, r3, #1
 8020662:	2b00      	cmp	r3, #0
 8020664:	d075      	beq.n	8020752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8020666:	4b88      	ldr	r3, [pc, #544]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020668:	689b      	ldr	r3, [r3, #8]
 802066a:	f003 030c 	and.w	r3, r3, #12
 802066e:	2b04      	cmp	r3, #4
 8020670:	d00c      	beq.n	802068c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020672:	4b85      	ldr	r3, [pc, #532]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020674:	689b      	ldr	r3, [r3, #8]
 8020676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802067a:	2b08      	cmp	r3, #8
 802067c:	d112      	bne.n	80206a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802067e:	4b82      	ldr	r3, [pc, #520]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020680:	685b      	ldr	r3, [r3, #4]
 8020682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802068a:	d10b      	bne.n	80206a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802068c:	4b7e      	ldr	r3, [pc, #504]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020694:	2b00      	cmp	r3, #0
 8020696:	d05b      	beq.n	8020750 <HAL_RCC_OscConfig+0x108>
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	685b      	ldr	r3, [r3, #4]
 802069c:	2b00      	cmp	r3, #0
 802069e:	d157      	bne.n	8020750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80206a0:	2301      	movs	r3, #1
 80206a2:	e242      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	685b      	ldr	r3, [r3, #4]
 80206a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80206ac:	d106      	bne.n	80206bc <HAL_RCC_OscConfig+0x74>
 80206ae:	4b76      	ldr	r3, [pc, #472]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	4a75      	ldr	r2, [pc, #468]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80206b8:	6013      	str	r3, [r2, #0]
 80206ba:	e01d      	b.n	80206f8 <HAL_RCC_OscConfig+0xb0>
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	685b      	ldr	r3, [r3, #4]
 80206c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80206c4:	d10c      	bne.n	80206e0 <HAL_RCC_OscConfig+0x98>
 80206c6:	4b70      	ldr	r3, [pc, #448]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	4a6f      	ldr	r2, [pc, #444]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80206d0:	6013      	str	r3, [r2, #0]
 80206d2:	4b6d      	ldr	r3, [pc, #436]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	4a6c      	ldr	r2, [pc, #432]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80206dc:	6013      	str	r3, [r2, #0]
 80206de:	e00b      	b.n	80206f8 <HAL_RCC_OscConfig+0xb0>
 80206e0:	4b69      	ldr	r3, [pc, #420]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	4a68      	ldr	r2, [pc, #416]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80206ea:	6013      	str	r3, [r2, #0]
 80206ec:	4b66      	ldr	r3, [pc, #408]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	4a65      	ldr	r2, [pc, #404]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80206f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80206f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	685b      	ldr	r3, [r3, #4]
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	d013      	beq.n	8020728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020700:	f7fb fc74 	bl	801bfec <HAL_GetTick>
 8020704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020706:	e008      	b.n	802071a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020708:	f7fb fc70 	bl	801bfec <HAL_GetTick>
 802070c:	4602      	mov	r2, r0
 802070e:	693b      	ldr	r3, [r7, #16]
 8020710:	1ad3      	subs	r3, r2, r3
 8020712:	2b64      	cmp	r3, #100	; 0x64
 8020714:	d901      	bls.n	802071a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8020716:	2303      	movs	r3, #3
 8020718:	e207      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802071a:	4b5b      	ldr	r3, [pc, #364]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020722:	2b00      	cmp	r3, #0
 8020724:	d0f0      	beq.n	8020708 <HAL_RCC_OscConfig+0xc0>
 8020726:	e014      	b.n	8020752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020728:	f7fb fc60 	bl	801bfec <HAL_GetTick>
 802072c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802072e:	e008      	b.n	8020742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020730:	f7fb fc5c 	bl	801bfec <HAL_GetTick>
 8020734:	4602      	mov	r2, r0
 8020736:	693b      	ldr	r3, [r7, #16]
 8020738:	1ad3      	subs	r3, r2, r3
 802073a:	2b64      	cmp	r3, #100	; 0x64
 802073c:	d901      	bls.n	8020742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802073e:	2303      	movs	r3, #3
 8020740:	e1f3      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020742:	4b51      	ldr	r3, [pc, #324]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802074a:	2b00      	cmp	r3, #0
 802074c:	d1f0      	bne.n	8020730 <HAL_RCC_OscConfig+0xe8>
 802074e:	e000      	b.n	8020752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	f003 0302 	and.w	r3, r3, #2
 802075a:	2b00      	cmp	r3, #0
 802075c:	d063      	beq.n	8020826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802075e:	4b4a      	ldr	r3, [pc, #296]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020760:	689b      	ldr	r3, [r3, #8]
 8020762:	f003 030c 	and.w	r3, r3, #12
 8020766:	2b00      	cmp	r3, #0
 8020768:	d00b      	beq.n	8020782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802076a:	4b47      	ldr	r3, [pc, #284]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802076c:	689b      	ldr	r3, [r3, #8]
 802076e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8020772:	2b08      	cmp	r3, #8
 8020774:	d11c      	bne.n	80207b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8020776:	4b44      	ldr	r3, [pc, #272]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020778:	685b      	ldr	r3, [r3, #4]
 802077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802077e:	2b00      	cmp	r3, #0
 8020780:	d116      	bne.n	80207b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020782:	4b41      	ldr	r3, [pc, #260]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	f003 0302 	and.w	r3, r3, #2
 802078a:	2b00      	cmp	r3, #0
 802078c:	d005      	beq.n	802079a <HAL_RCC_OscConfig+0x152>
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	68db      	ldr	r3, [r3, #12]
 8020792:	2b01      	cmp	r3, #1
 8020794:	d001      	beq.n	802079a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8020796:	2301      	movs	r3, #1
 8020798:	e1c7      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802079a:	4b3b      	ldr	r3, [pc, #236]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802079c:	681b      	ldr	r3, [r3, #0]
 802079e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	691b      	ldr	r3, [r3, #16]
 80207a6:	00db      	lsls	r3, r3, #3
 80207a8:	4937      	ldr	r1, [pc, #220]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80207aa:	4313      	orrs	r3, r2
 80207ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80207ae:	e03a      	b.n	8020826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	68db      	ldr	r3, [r3, #12]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d020      	beq.n	80207fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80207b8:	4b34      	ldr	r3, [pc, #208]	; (802088c <HAL_RCC_OscConfig+0x244>)
 80207ba:	2201      	movs	r2, #1
 80207bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80207be:	f7fb fc15 	bl	801bfec <HAL_GetTick>
 80207c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80207c4:	e008      	b.n	80207d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80207c6:	f7fb fc11 	bl	801bfec <HAL_GetTick>
 80207ca:	4602      	mov	r2, r0
 80207cc:	693b      	ldr	r3, [r7, #16]
 80207ce:	1ad3      	subs	r3, r2, r3
 80207d0:	2b02      	cmp	r3, #2
 80207d2:	d901      	bls.n	80207d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80207d4:	2303      	movs	r3, #3
 80207d6:	e1a8      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80207d8:	4b2b      	ldr	r3, [pc, #172]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	f003 0302 	and.w	r3, r3, #2
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d0f0      	beq.n	80207c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80207e4:	4b28      	ldr	r3, [pc, #160]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	691b      	ldr	r3, [r3, #16]
 80207f0:	00db      	lsls	r3, r3, #3
 80207f2:	4925      	ldr	r1, [pc, #148]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 80207f4:	4313      	orrs	r3, r2
 80207f6:	600b      	str	r3, [r1, #0]
 80207f8:	e015      	b.n	8020826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80207fa:	4b24      	ldr	r3, [pc, #144]	; (802088c <HAL_RCC_OscConfig+0x244>)
 80207fc:	2200      	movs	r2, #0
 80207fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020800:	f7fb fbf4 	bl	801bfec <HAL_GetTick>
 8020804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8020806:	e008      	b.n	802081a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020808:	f7fb fbf0 	bl	801bfec <HAL_GetTick>
 802080c:	4602      	mov	r2, r0
 802080e:	693b      	ldr	r3, [r7, #16]
 8020810:	1ad3      	subs	r3, r2, r3
 8020812:	2b02      	cmp	r3, #2
 8020814:	d901      	bls.n	802081a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8020816:	2303      	movs	r3, #3
 8020818:	e187      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802081a:	4b1b      	ldr	r3, [pc, #108]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	f003 0302 	and.w	r3, r3, #2
 8020822:	2b00      	cmp	r3, #0
 8020824:	d1f0      	bne.n	8020808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	f003 0308 	and.w	r3, r3, #8
 802082e:	2b00      	cmp	r3, #0
 8020830:	d036      	beq.n	80208a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	695b      	ldr	r3, [r3, #20]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d016      	beq.n	8020868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802083a:	4b15      	ldr	r3, [pc, #84]	; (8020890 <HAL_RCC_OscConfig+0x248>)
 802083c:	2201      	movs	r2, #1
 802083e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020840:	f7fb fbd4 	bl	801bfec <HAL_GetTick>
 8020844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8020846:	e008      	b.n	802085a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020848:	f7fb fbd0 	bl	801bfec <HAL_GetTick>
 802084c:	4602      	mov	r2, r0
 802084e:	693b      	ldr	r3, [r7, #16]
 8020850:	1ad3      	subs	r3, r2, r3
 8020852:	2b02      	cmp	r3, #2
 8020854:	d901      	bls.n	802085a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8020856:	2303      	movs	r3, #3
 8020858:	e167      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802085a:	4b0b      	ldr	r3, [pc, #44]	; (8020888 <HAL_RCC_OscConfig+0x240>)
 802085c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802085e:	f003 0302 	and.w	r3, r3, #2
 8020862:	2b00      	cmp	r3, #0
 8020864:	d0f0      	beq.n	8020848 <HAL_RCC_OscConfig+0x200>
 8020866:	e01b      	b.n	80208a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8020868:	4b09      	ldr	r3, [pc, #36]	; (8020890 <HAL_RCC_OscConfig+0x248>)
 802086a:	2200      	movs	r2, #0
 802086c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802086e:	f7fb fbbd 	bl	801bfec <HAL_GetTick>
 8020872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020874:	e00e      	b.n	8020894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020876:	f7fb fbb9 	bl	801bfec <HAL_GetTick>
 802087a:	4602      	mov	r2, r0
 802087c:	693b      	ldr	r3, [r7, #16]
 802087e:	1ad3      	subs	r3, r2, r3
 8020880:	2b02      	cmp	r3, #2
 8020882:	d907      	bls.n	8020894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8020884:	2303      	movs	r3, #3
 8020886:	e150      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
 8020888:	40023800 	.word	0x40023800
 802088c:	42470000 	.word	0x42470000
 8020890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020894:	4b88      	ldr	r3, [pc, #544]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020898:	f003 0302 	and.w	r3, r3, #2
 802089c:	2b00      	cmp	r3, #0
 802089e:	d1ea      	bne.n	8020876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	f003 0304 	and.w	r3, r3, #4
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	f000 8097 	beq.w	80209dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80208ae:	2300      	movs	r3, #0
 80208b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80208b2:	4b81      	ldr	r3, [pc, #516]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80208b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80208b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d10f      	bne.n	80208de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80208be:	2300      	movs	r3, #0
 80208c0:	60bb      	str	r3, [r7, #8]
 80208c2:	4b7d      	ldr	r3, [pc, #500]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80208c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80208c6:	4a7c      	ldr	r2, [pc, #496]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80208c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80208cc:	6413      	str	r3, [r2, #64]	; 0x40
 80208ce:	4b7a      	ldr	r3, [pc, #488]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80208d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80208d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80208d6:	60bb      	str	r3, [r7, #8]
 80208d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80208da:	2301      	movs	r3, #1
 80208dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80208de:	4b77      	ldr	r3, [pc, #476]	; (8020abc <HAL_RCC_OscConfig+0x474>)
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d118      	bne.n	802091c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80208ea:	4b74      	ldr	r3, [pc, #464]	; (8020abc <HAL_RCC_OscConfig+0x474>)
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	4a73      	ldr	r2, [pc, #460]	; (8020abc <HAL_RCC_OscConfig+0x474>)
 80208f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80208f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80208f6:	f7fb fb79 	bl	801bfec <HAL_GetTick>
 80208fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80208fc:	e008      	b.n	8020910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80208fe:	f7fb fb75 	bl	801bfec <HAL_GetTick>
 8020902:	4602      	mov	r2, r0
 8020904:	693b      	ldr	r3, [r7, #16]
 8020906:	1ad3      	subs	r3, r2, r3
 8020908:	2b02      	cmp	r3, #2
 802090a:	d901      	bls.n	8020910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802090c:	2303      	movs	r3, #3
 802090e:	e10c      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020910:	4b6a      	ldr	r3, [pc, #424]	; (8020abc <HAL_RCC_OscConfig+0x474>)
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020918:	2b00      	cmp	r3, #0
 802091a:	d0f0      	beq.n	80208fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	689b      	ldr	r3, [r3, #8]
 8020920:	2b01      	cmp	r3, #1
 8020922:	d106      	bne.n	8020932 <HAL_RCC_OscConfig+0x2ea>
 8020924:	4b64      	ldr	r3, [pc, #400]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020928:	4a63      	ldr	r2, [pc, #396]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 802092a:	f043 0301 	orr.w	r3, r3, #1
 802092e:	6713      	str	r3, [r2, #112]	; 0x70
 8020930:	e01c      	b.n	802096c <HAL_RCC_OscConfig+0x324>
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	689b      	ldr	r3, [r3, #8]
 8020936:	2b05      	cmp	r3, #5
 8020938:	d10c      	bne.n	8020954 <HAL_RCC_OscConfig+0x30c>
 802093a:	4b5f      	ldr	r3, [pc, #380]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 802093c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802093e:	4a5e      	ldr	r2, [pc, #376]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020940:	f043 0304 	orr.w	r3, r3, #4
 8020944:	6713      	str	r3, [r2, #112]	; 0x70
 8020946:	4b5c      	ldr	r3, [pc, #368]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802094a:	4a5b      	ldr	r2, [pc, #364]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 802094c:	f043 0301 	orr.w	r3, r3, #1
 8020950:	6713      	str	r3, [r2, #112]	; 0x70
 8020952:	e00b      	b.n	802096c <HAL_RCC_OscConfig+0x324>
 8020954:	4b58      	ldr	r3, [pc, #352]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020958:	4a57      	ldr	r2, [pc, #348]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 802095a:	f023 0301 	bic.w	r3, r3, #1
 802095e:	6713      	str	r3, [r2, #112]	; 0x70
 8020960:	4b55      	ldr	r3, [pc, #340]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020964:	4a54      	ldr	r2, [pc, #336]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020966:	f023 0304 	bic.w	r3, r3, #4
 802096a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	689b      	ldr	r3, [r3, #8]
 8020970:	2b00      	cmp	r3, #0
 8020972:	d015      	beq.n	80209a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020974:	f7fb fb3a 	bl	801bfec <HAL_GetTick>
 8020978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802097a:	e00a      	b.n	8020992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802097c:	f7fb fb36 	bl	801bfec <HAL_GetTick>
 8020980:	4602      	mov	r2, r0
 8020982:	693b      	ldr	r3, [r7, #16]
 8020984:	1ad3      	subs	r3, r2, r3
 8020986:	f241 3288 	movw	r2, #5000	; 0x1388
 802098a:	4293      	cmp	r3, r2
 802098c:	d901      	bls.n	8020992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802098e:	2303      	movs	r3, #3
 8020990:	e0cb      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020992:	4b49      	ldr	r3, [pc, #292]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020996:	f003 0302 	and.w	r3, r3, #2
 802099a:	2b00      	cmp	r3, #0
 802099c:	d0ee      	beq.n	802097c <HAL_RCC_OscConfig+0x334>
 802099e:	e014      	b.n	80209ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80209a0:	f7fb fb24 	bl	801bfec <HAL_GetTick>
 80209a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80209a6:	e00a      	b.n	80209be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80209a8:	f7fb fb20 	bl	801bfec <HAL_GetTick>
 80209ac:	4602      	mov	r2, r0
 80209ae:	693b      	ldr	r3, [r7, #16]
 80209b0:	1ad3      	subs	r3, r2, r3
 80209b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80209b6:	4293      	cmp	r3, r2
 80209b8:	d901      	bls.n	80209be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80209ba:	2303      	movs	r3, #3
 80209bc:	e0b5      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80209be:	4b3e      	ldr	r3, [pc, #248]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80209c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80209c2:	f003 0302 	and.w	r3, r3, #2
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d1ee      	bne.n	80209a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80209ca:	7dfb      	ldrb	r3, [r7, #23]
 80209cc:	2b01      	cmp	r3, #1
 80209ce:	d105      	bne.n	80209dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80209d0:	4b39      	ldr	r3, [pc, #228]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80209d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209d4:	4a38      	ldr	r2, [pc, #224]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80209d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80209da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	699b      	ldr	r3, [r3, #24]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	f000 80a1 	beq.w	8020b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80209e6:	4b34      	ldr	r3, [pc, #208]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 80209e8:	689b      	ldr	r3, [r3, #8]
 80209ea:	f003 030c 	and.w	r3, r3, #12
 80209ee:	2b08      	cmp	r3, #8
 80209f0:	d05c      	beq.n	8020aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	699b      	ldr	r3, [r3, #24]
 80209f6:	2b02      	cmp	r3, #2
 80209f8:	d141      	bne.n	8020a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80209fa:	4b31      	ldr	r3, [pc, #196]	; (8020ac0 <HAL_RCC_OscConfig+0x478>)
 80209fc:	2200      	movs	r2, #0
 80209fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020a00:	f7fb faf4 	bl	801bfec <HAL_GetTick>
 8020a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020a06:	e008      	b.n	8020a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020a08:	f7fb faf0 	bl	801bfec <HAL_GetTick>
 8020a0c:	4602      	mov	r2, r0
 8020a0e:	693b      	ldr	r3, [r7, #16]
 8020a10:	1ad3      	subs	r3, r2, r3
 8020a12:	2b02      	cmp	r3, #2
 8020a14:	d901      	bls.n	8020a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8020a16:	2303      	movs	r3, #3
 8020a18:	e087      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020a1a:	4b27      	ldr	r3, [pc, #156]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d1f0      	bne.n	8020a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	69da      	ldr	r2, [r3, #28]
 8020a2a:	687b      	ldr	r3, [r7, #4]
 8020a2c:	6a1b      	ldr	r3, [r3, #32]
 8020a2e:	431a      	orrs	r2, r3
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a34:	019b      	lsls	r3, r3, #6
 8020a36:	431a      	orrs	r2, r3
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a3c:	085b      	lsrs	r3, r3, #1
 8020a3e:	3b01      	subs	r3, #1
 8020a40:	041b      	lsls	r3, r3, #16
 8020a42:	431a      	orrs	r2, r3
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a48:	061b      	lsls	r3, r3, #24
 8020a4a:	491b      	ldr	r1, [pc, #108]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020a4c:	4313      	orrs	r3, r2
 8020a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8020a50:	4b1b      	ldr	r3, [pc, #108]	; (8020ac0 <HAL_RCC_OscConfig+0x478>)
 8020a52:	2201      	movs	r2, #1
 8020a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020a56:	f7fb fac9 	bl	801bfec <HAL_GetTick>
 8020a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020a5c:	e008      	b.n	8020a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020a5e:	f7fb fac5 	bl	801bfec <HAL_GetTick>
 8020a62:	4602      	mov	r2, r0
 8020a64:	693b      	ldr	r3, [r7, #16]
 8020a66:	1ad3      	subs	r3, r2, r3
 8020a68:	2b02      	cmp	r3, #2
 8020a6a:	d901      	bls.n	8020a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8020a6c:	2303      	movs	r3, #3
 8020a6e:	e05c      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020a70:	4b11      	ldr	r3, [pc, #68]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d0f0      	beq.n	8020a5e <HAL_RCC_OscConfig+0x416>
 8020a7c:	e054      	b.n	8020b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8020a7e:	4b10      	ldr	r3, [pc, #64]	; (8020ac0 <HAL_RCC_OscConfig+0x478>)
 8020a80:	2200      	movs	r2, #0
 8020a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020a84:	f7fb fab2 	bl	801bfec <HAL_GetTick>
 8020a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020a8a:	e008      	b.n	8020a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020a8c:	f7fb faae 	bl	801bfec <HAL_GetTick>
 8020a90:	4602      	mov	r2, r0
 8020a92:	693b      	ldr	r3, [r7, #16]
 8020a94:	1ad3      	subs	r3, r2, r3
 8020a96:	2b02      	cmp	r3, #2
 8020a98:	d901      	bls.n	8020a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8020a9a:	2303      	movs	r3, #3
 8020a9c:	e045      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020a9e:	4b06      	ldr	r3, [pc, #24]	; (8020ab8 <HAL_RCC_OscConfig+0x470>)
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	d1f0      	bne.n	8020a8c <HAL_RCC_OscConfig+0x444>
 8020aaa:	e03d      	b.n	8020b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	699b      	ldr	r3, [r3, #24]
 8020ab0:	2b01      	cmp	r3, #1
 8020ab2:	d107      	bne.n	8020ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8020ab4:	2301      	movs	r3, #1
 8020ab6:	e038      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
 8020ab8:	40023800 	.word	0x40023800
 8020abc:	40007000 	.word	0x40007000
 8020ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8020ac4:	4b1b      	ldr	r3, [pc, #108]	; (8020b34 <HAL_RCC_OscConfig+0x4ec>)
 8020ac6:	685b      	ldr	r3, [r3, #4]
 8020ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	699b      	ldr	r3, [r3, #24]
 8020ace:	2b01      	cmp	r3, #1
 8020ad0:	d028      	beq.n	8020b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8020ad2:	68fb      	ldr	r3, [r7, #12]
 8020ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8020adc:	429a      	cmp	r2, r3
 8020ade:	d121      	bne.n	8020b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8020aea:	429a      	cmp	r2, r3
 8020aec:	d11a      	bne.n	8020b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020aee:	68fa      	ldr	r2, [r7, #12]
 8020af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8020af4:	4013      	ands	r3, r2
 8020af6:	687a      	ldr	r2, [r7, #4]
 8020af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020afc:	4293      	cmp	r3, r2
 8020afe:	d111      	bne.n	8020b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b0a:	085b      	lsrs	r3, r3, #1
 8020b0c:	3b01      	subs	r3, #1
 8020b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020b10:	429a      	cmp	r2, r3
 8020b12:	d107      	bne.n	8020b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8020b14:	68fb      	ldr	r3, [r7, #12]
 8020b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020b20:	429a      	cmp	r2, r3
 8020b22:	d001      	beq.n	8020b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8020b24:	2301      	movs	r3, #1
 8020b26:	e000      	b.n	8020b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8020b28:	2300      	movs	r3, #0
}
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	3718      	adds	r7, #24
 8020b2e:	46bd      	mov	sp, r7
 8020b30:	bd80      	pop	{r7, pc}
 8020b32:	bf00      	nop
 8020b34:	40023800 	.word	0x40023800

08020b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b084      	sub	sp, #16
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
 8020b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d101      	bne.n	8020b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8020b48:	2301      	movs	r3, #1
 8020b4a:	e0cc      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8020b4c:	4b68      	ldr	r3, [pc, #416]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020b4e:	681b      	ldr	r3, [r3, #0]
 8020b50:	f003 0307 	and.w	r3, r3, #7
 8020b54:	683a      	ldr	r2, [r7, #0]
 8020b56:	429a      	cmp	r2, r3
 8020b58:	d90c      	bls.n	8020b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020b5a:	4b65      	ldr	r3, [pc, #404]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020b5c:	683a      	ldr	r2, [r7, #0]
 8020b5e:	b2d2      	uxtb	r2, r2
 8020b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020b62:	4b63      	ldr	r3, [pc, #396]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	f003 0307 	and.w	r3, r3, #7
 8020b6a:	683a      	ldr	r2, [r7, #0]
 8020b6c:	429a      	cmp	r2, r3
 8020b6e:	d001      	beq.n	8020b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8020b70:	2301      	movs	r3, #1
 8020b72:	e0b8      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	f003 0302 	and.w	r3, r3, #2
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d020      	beq.n	8020bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	681b      	ldr	r3, [r3, #0]
 8020b84:	f003 0304 	and.w	r3, r3, #4
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d005      	beq.n	8020b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8020b8c:	4b59      	ldr	r3, [pc, #356]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020b8e:	689b      	ldr	r3, [r3, #8]
 8020b90:	4a58      	ldr	r2, [pc, #352]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8020b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	f003 0308 	and.w	r3, r3, #8
 8020ba0:	2b00      	cmp	r3, #0
 8020ba2:	d005      	beq.n	8020bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8020ba4:	4b53      	ldr	r3, [pc, #332]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020ba6:	689b      	ldr	r3, [r3, #8]
 8020ba8:	4a52      	ldr	r2, [pc, #328]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8020bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020bb0:	4b50      	ldr	r3, [pc, #320]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020bb2:	689b      	ldr	r3, [r3, #8]
 8020bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	689b      	ldr	r3, [r3, #8]
 8020bbc:	494d      	ldr	r1, [pc, #308]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020bbe:	4313      	orrs	r3, r2
 8020bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	f003 0301 	and.w	r3, r3, #1
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d044      	beq.n	8020c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	685b      	ldr	r3, [r3, #4]
 8020bd2:	2b01      	cmp	r3, #1
 8020bd4:	d107      	bne.n	8020be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020bd6:	4b47      	ldr	r3, [pc, #284]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	d119      	bne.n	8020c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020be2:	2301      	movs	r3, #1
 8020be4:	e07f      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	685b      	ldr	r3, [r3, #4]
 8020bea:	2b02      	cmp	r3, #2
 8020bec:	d003      	beq.n	8020bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020bf2:	2b03      	cmp	r3, #3
 8020bf4:	d107      	bne.n	8020c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020bf6:	4b3f      	ldr	r3, [pc, #252]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020bf8:	681b      	ldr	r3, [r3, #0]
 8020bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d109      	bne.n	8020c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020c02:	2301      	movs	r3, #1
 8020c04:	e06f      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020c06:	4b3b      	ldr	r3, [pc, #236]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	f003 0302 	and.w	r3, r3, #2
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d101      	bne.n	8020c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020c12:	2301      	movs	r3, #1
 8020c14:	e067      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8020c16:	4b37      	ldr	r3, [pc, #220]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c18:	689b      	ldr	r3, [r3, #8]
 8020c1a:	f023 0203 	bic.w	r2, r3, #3
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	685b      	ldr	r3, [r3, #4]
 8020c22:	4934      	ldr	r1, [pc, #208]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c24:	4313      	orrs	r3, r2
 8020c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8020c28:	f7fb f9e0 	bl	801bfec <HAL_GetTick>
 8020c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020c2e:	e00a      	b.n	8020c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020c30:	f7fb f9dc 	bl	801bfec <HAL_GetTick>
 8020c34:	4602      	mov	r2, r0
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	1ad3      	subs	r3, r2, r3
 8020c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8020c3e:	4293      	cmp	r3, r2
 8020c40:	d901      	bls.n	8020c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8020c42:	2303      	movs	r3, #3
 8020c44:	e04f      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020c46:	4b2b      	ldr	r3, [pc, #172]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c48:	689b      	ldr	r3, [r3, #8]
 8020c4a:	f003 020c 	and.w	r2, r3, #12
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	685b      	ldr	r3, [r3, #4]
 8020c52:	009b      	lsls	r3, r3, #2
 8020c54:	429a      	cmp	r2, r3
 8020c56:	d1eb      	bne.n	8020c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020c58:	4b25      	ldr	r3, [pc, #148]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	f003 0307 	and.w	r3, r3, #7
 8020c60:	683a      	ldr	r2, [r7, #0]
 8020c62:	429a      	cmp	r2, r3
 8020c64:	d20c      	bcs.n	8020c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020c66:	4b22      	ldr	r3, [pc, #136]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020c68:	683a      	ldr	r2, [r7, #0]
 8020c6a:	b2d2      	uxtb	r2, r2
 8020c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020c6e:	4b20      	ldr	r3, [pc, #128]	; (8020cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	f003 0307 	and.w	r3, r3, #7
 8020c76:	683a      	ldr	r2, [r7, #0]
 8020c78:	429a      	cmp	r2, r3
 8020c7a:	d001      	beq.n	8020c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8020c7c:	2301      	movs	r3, #1
 8020c7e:	e032      	b.n	8020ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	f003 0304 	and.w	r3, r3, #4
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d008      	beq.n	8020c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8020c8c:	4b19      	ldr	r3, [pc, #100]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c8e:	689b      	ldr	r3, [r3, #8]
 8020c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	68db      	ldr	r3, [r3, #12]
 8020c98:	4916      	ldr	r1, [pc, #88]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020c9a:	4313      	orrs	r3, r2
 8020c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	f003 0308 	and.w	r3, r3, #8
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d009      	beq.n	8020cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8020caa:	4b12      	ldr	r3, [pc, #72]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020cac:	689b      	ldr	r3, [r3, #8]
 8020cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	691b      	ldr	r3, [r3, #16]
 8020cb6:	00db      	lsls	r3, r3, #3
 8020cb8:	490e      	ldr	r1, [pc, #56]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020cba:	4313      	orrs	r3, r2
 8020cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8020cbe:	f000 f821 	bl	8020d04 <HAL_RCC_GetSysClockFreq>
 8020cc2:	4602      	mov	r2, r0
 8020cc4:	4b0b      	ldr	r3, [pc, #44]	; (8020cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8020cc6:	689b      	ldr	r3, [r3, #8]
 8020cc8:	091b      	lsrs	r3, r3, #4
 8020cca:	f003 030f 	and.w	r3, r3, #15
 8020cce:	490a      	ldr	r1, [pc, #40]	; (8020cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8020cd0:	5ccb      	ldrb	r3, [r1, r3]
 8020cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8020cd6:	4a09      	ldr	r2, [pc, #36]	; (8020cfc <HAL_RCC_ClockConfig+0x1c4>)
 8020cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8020cda:	4b09      	ldr	r3, [pc, #36]	; (8020d00 <HAL_RCC_ClockConfig+0x1c8>)
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f7fb f940 	bl	801bf64 <HAL_InitTick>

  return HAL_OK;
 8020ce4:	2300      	movs	r3, #0
}
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3710      	adds	r7, #16
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	40023c00 	.word	0x40023c00
 8020cf4:	40023800 	.word	0x40023800
 8020cf8:	08027e78 	.word	0x08027e78
 8020cfc:	20000020 	.word	0x20000020
 8020d00:	20000138 	.word	0x20000138

08020d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020d08:	b094      	sub	sp, #80	; 0x50
 8020d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8020d10:	2300      	movs	r3, #0
 8020d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020d14:	2300      	movs	r3, #0
 8020d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8020d18:	2300      	movs	r3, #0
 8020d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020d1c:	4b79      	ldr	r3, [pc, #484]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020d1e:	689b      	ldr	r3, [r3, #8]
 8020d20:	f003 030c 	and.w	r3, r3, #12
 8020d24:	2b08      	cmp	r3, #8
 8020d26:	d00d      	beq.n	8020d44 <HAL_RCC_GetSysClockFreq+0x40>
 8020d28:	2b08      	cmp	r3, #8
 8020d2a:	f200 80e1 	bhi.w	8020ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d002      	beq.n	8020d38 <HAL_RCC_GetSysClockFreq+0x34>
 8020d32:	2b04      	cmp	r3, #4
 8020d34:	d003      	beq.n	8020d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8020d36:	e0db      	b.n	8020ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8020d38:	4b73      	ldr	r3, [pc, #460]	; (8020f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8020d3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8020d3c:	e0db      	b.n	8020ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8020d3e:	4b73      	ldr	r3, [pc, #460]	; (8020f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8020d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020d42:	e0d8      	b.n	8020ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020d44:	4b6f      	ldr	r3, [pc, #444]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020d46:	685b      	ldr	r3, [r3, #4]
 8020d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020d4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020d4e:	4b6d      	ldr	r3, [pc, #436]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020d50:	685b      	ldr	r3, [r3, #4]
 8020d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	d063      	beq.n	8020e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020d5a:	4b6a      	ldr	r3, [pc, #424]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020d5c:	685b      	ldr	r3, [r3, #4]
 8020d5e:	099b      	lsrs	r3, r3, #6
 8020d60:	2200      	movs	r2, #0
 8020d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8020d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8020d6e:	2300      	movs	r3, #0
 8020d70:	637b      	str	r3, [r7, #52]	; 0x34
 8020d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8020d76:	4622      	mov	r2, r4
 8020d78:	462b      	mov	r3, r5
 8020d7a:	f04f 0000 	mov.w	r0, #0
 8020d7e:	f04f 0100 	mov.w	r1, #0
 8020d82:	0159      	lsls	r1, r3, #5
 8020d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020d88:	0150      	lsls	r0, r2, #5
 8020d8a:	4602      	mov	r2, r0
 8020d8c:	460b      	mov	r3, r1
 8020d8e:	4621      	mov	r1, r4
 8020d90:	1a51      	subs	r1, r2, r1
 8020d92:	6139      	str	r1, [r7, #16]
 8020d94:	4629      	mov	r1, r5
 8020d96:	eb63 0301 	sbc.w	r3, r3, r1
 8020d9a:	617b      	str	r3, [r7, #20]
 8020d9c:	f04f 0200 	mov.w	r2, #0
 8020da0:	f04f 0300 	mov.w	r3, #0
 8020da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8020da8:	4659      	mov	r1, fp
 8020daa:	018b      	lsls	r3, r1, #6
 8020dac:	4651      	mov	r1, sl
 8020dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8020db2:	4651      	mov	r1, sl
 8020db4:	018a      	lsls	r2, r1, #6
 8020db6:	4651      	mov	r1, sl
 8020db8:	ebb2 0801 	subs.w	r8, r2, r1
 8020dbc:	4659      	mov	r1, fp
 8020dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8020dc2:	f04f 0200 	mov.w	r2, #0
 8020dc6:	f04f 0300 	mov.w	r3, #0
 8020dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8020dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020dd6:	4690      	mov	r8, r2
 8020dd8:	4699      	mov	r9, r3
 8020dda:	4623      	mov	r3, r4
 8020ddc:	eb18 0303 	adds.w	r3, r8, r3
 8020de0:	60bb      	str	r3, [r7, #8]
 8020de2:	462b      	mov	r3, r5
 8020de4:	eb49 0303 	adc.w	r3, r9, r3
 8020de8:	60fb      	str	r3, [r7, #12]
 8020dea:	f04f 0200 	mov.w	r2, #0
 8020dee:	f04f 0300 	mov.w	r3, #0
 8020df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020df6:	4629      	mov	r1, r5
 8020df8:	024b      	lsls	r3, r1, #9
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8020e00:	4621      	mov	r1, r4
 8020e02:	024a      	lsls	r2, r1, #9
 8020e04:	4610      	mov	r0, r2
 8020e06:	4619      	mov	r1, r3
 8020e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020e0a:	2200      	movs	r2, #0
 8020e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8020e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020e14:	f7e0 f834 	bl	8000e80 <__aeabi_uldivmod>
 8020e18:	4602      	mov	r2, r0
 8020e1a:	460b      	mov	r3, r1
 8020e1c:	4613      	mov	r3, r2
 8020e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020e20:	e058      	b.n	8020ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020e22:	4b38      	ldr	r3, [pc, #224]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020e24:	685b      	ldr	r3, [r3, #4]
 8020e26:	099b      	lsrs	r3, r3, #6
 8020e28:	2200      	movs	r2, #0
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	4611      	mov	r1, r2
 8020e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8020e32:	623b      	str	r3, [r7, #32]
 8020e34:	2300      	movs	r3, #0
 8020e36:	627b      	str	r3, [r7, #36]	; 0x24
 8020e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8020e3c:	4642      	mov	r2, r8
 8020e3e:	464b      	mov	r3, r9
 8020e40:	f04f 0000 	mov.w	r0, #0
 8020e44:	f04f 0100 	mov.w	r1, #0
 8020e48:	0159      	lsls	r1, r3, #5
 8020e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020e4e:	0150      	lsls	r0, r2, #5
 8020e50:	4602      	mov	r2, r0
 8020e52:	460b      	mov	r3, r1
 8020e54:	4641      	mov	r1, r8
 8020e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8020e5a:	4649      	mov	r1, r9
 8020e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8020e60:	f04f 0200 	mov.w	r2, #0
 8020e64:	f04f 0300 	mov.w	r3, #0
 8020e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8020e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8020e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020e74:	ebb2 040a 	subs.w	r4, r2, sl
 8020e78:	eb63 050b 	sbc.w	r5, r3, fp
 8020e7c:	f04f 0200 	mov.w	r2, #0
 8020e80:	f04f 0300 	mov.w	r3, #0
 8020e84:	00eb      	lsls	r3, r5, #3
 8020e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020e8a:	00e2      	lsls	r2, r4, #3
 8020e8c:	4614      	mov	r4, r2
 8020e8e:	461d      	mov	r5, r3
 8020e90:	4643      	mov	r3, r8
 8020e92:	18e3      	adds	r3, r4, r3
 8020e94:	603b      	str	r3, [r7, #0]
 8020e96:	464b      	mov	r3, r9
 8020e98:	eb45 0303 	adc.w	r3, r5, r3
 8020e9c:	607b      	str	r3, [r7, #4]
 8020e9e:	f04f 0200 	mov.w	r2, #0
 8020ea2:	f04f 0300 	mov.w	r3, #0
 8020ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020eaa:	4629      	mov	r1, r5
 8020eac:	028b      	lsls	r3, r1, #10
 8020eae:	4621      	mov	r1, r4
 8020eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8020eb4:	4621      	mov	r1, r4
 8020eb6:	028a      	lsls	r2, r1, #10
 8020eb8:	4610      	mov	r0, r2
 8020eba:	4619      	mov	r1, r3
 8020ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020ebe:	2200      	movs	r2, #0
 8020ec0:	61bb      	str	r3, [r7, #24]
 8020ec2:	61fa      	str	r2, [r7, #28]
 8020ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020ec8:	f7df ffda 	bl	8000e80 <__aeabi_uldivmod>
 8020ecc:	4602      	mov	r2, r0
 8020ece:	460b      	mov	r3, r1
 8020ed0:	4613      	mov	r3, r2
 8020ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020ed4:	4b0b      	ldr	r3, [pc, #44]	; (8020f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020ed6:	685b      	ldr	r3, [r3, #4]
 8020ed8:	0c1b      	lsrs	r3, r3, #16
 8020eda:	f003 0303 	and.w	r3, r3, #3
 8020ede:	3301      	adds	r3, #1
 8020ee0:	005b      	lsls	r3, r3, #1
 8020ee2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8020ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8020eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020eee:	e002      	b.n	8020ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8020ef0:	4b05      	ldr	r3, [pc, #20]	; (8020f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8020ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8020ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8020ef8:	4618      	mov	r0, r3
 8020efa:	3750      	adds	r7, #80	; 0x50
 8020efc:	46bd      	mov	sp, r7
 8020efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020f02:	bf00      	nop
 8020f04:	40023800 	.word	0x40023800
 8020f08:	00f42400 	.word	0x00f42400
 8020f0c:	007a1200 	.word	0x007a1200

08020f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8020f10:	b480      	push	{r7}
 8020f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020f14:	4b03      	ldr	r3, [pc, #12]	; (8020f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8020f16:	681b      	ldr	r3, [r3, #0]
}
 8020f18:	4618      	mov	r0, r3
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr
 8020f22:	bf00      	nop
 8020f24:	20000020 	.word	0x20000020

08020f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020f2c:	f7ff fff0 	bl	8020f10 <HAL_RCC_GetHCLKFreq>
 8020f30:	4602      	mov	r2, r0
 8020f32:	4b05      	ldr	r3, [pc, #20]	; (8020f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8020f34:	689b      	ldr	r3, [r3, #8]
 8020f36:	0a9b      	lsrs	r3, r3, #10
 8020f38:	f003 0307 	and.w	r3, r3, #7
 8020f3c:	4903      	ldr	r1, [pc, #12]	; (8020f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8020f3e:	5ccb      	ldrb	r3, [r1, r3]
 8020f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020f44:	4618      	mov	r0, r3
 8020f46:	bd80      	pop	{r7, pc}
 8020f48:	40023800 	.word	0x40023800
 8020f4c:	08027e88 	.word	0x08027e88

08020f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020f50:	b580      	push	{r7, lr}
 8020f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020f54:	f7ff ffdc 	bl	8020f10 <HAL_RCC_GetHCLKFreq>
 8020f58:	4602      	mov	r2, r0
 8020f5a:	4b05      	ldr	r3, [pc, #20]	; (8020f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8020f5c:	689b      	ldr	r3, [r3, #8]
 8020f5e:	0b5b      	lsrs	r3, r3, #13
 8020f60:	f003 0307 	and.w	r3, r3, #7
 8020f64:	4903      	ldr	r1, [pc, #12]	; (8020f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020f66:	5ccb      	ldrb	r3, [r1, r3]
 8020f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	bd80      	pop	{r7, pc}
 8020f70:	40023800 	.word	0x40023800
 8020f74:	08027e88 	.word	0x08027e88

08020f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020f78:	b580      	push	{r7, lr}
 8020f7a:	b082      	sub	sp, #8
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d101      	bne.n	8020f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020f86:	2301      	movs	r3, #1
 8020f88:	e041      	b.n	802100e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020f90:	b2db      	uxtb	r3, r3
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d106      	bne.n	8020fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	2200      	movs	r2, #0
 8020f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020f9e:	6878      	ldr	r0, [r7, #4]
 8020fa0:	f7e2 fb9e 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	2202      	movs	r2, #2
 8020fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	681a      	ldr	r2, [r3, #0]
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	3304      	adds	r3, #4
 8020fb4:	4619      	mov	r1, r3
 8020fb6:	4610      	mov	r0, r2
 8020fb8:	f000 fd14 	bl	80219e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	2201      	movs	r2, #1
 8020fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	2201      	movs	r2, #1
 8020fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	2201      	movs	r2, #1
 8020fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	2201      	movs	r2, #1
 8020fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2201      	movs	r2, #1
 8020fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2201      	movs	r2, #1
 8020fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	2201      	movs	r2, #1
 8020ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	2201      	movs	r2, #1
 8020ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	2201      	movs	r2, #1
 8021000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	2201      	movs	r2, #1
 8021008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802100c:	2300      	movs	r3, #0
}
 802100e:	4618      	mov	r0, r3
 8021010:	3708      	adds	r7, #8
 8021012:	46bd      	mov	sp, r7
 8021014:	bd80      	pop	{r7, pc}

08021016 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8021016:	b580      	push	{r7, lr}
 8021018:	b082      	sub	sp, #8
 802101a:	af00      	add	r7, sp, #0
 802101c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	2b00      	cmp	r3, #0
 8021022:	d101      	bne.n	8021028 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8021024:	2301      	movs	r3, #1
 8021026:	e041      	b.n	80210ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802102e:	b2db      	uxtb	r3, r3
 8021030:	2b00      	cmp	r3, #0
 8021032:	d106      	bne.n	8021042 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	2200      	movs	r2, #0
 8021038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802103c:	6878      	ldr	r0, [r7, #4]
 802103e:	f000 f839 	bl	80210b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	2202      	movs	r2, #2
 8021046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	681a      	ldr	r2, [r3, #0]
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	3304      	adds	r3, #4
 8021052:	4619      	mov	r1, r3
 8021054:	4610      	mov	r0, r2
 8021056:	f000 fcc5 	bl	80219e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	2201      	movs	r2, #1
 802105e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	2201      	movs	r2, #1
 8021066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	2201      	movs	r2, #1
 802106e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	2201      	movs	r2, #1
 8021076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	2201      	movs	r2, #1
 802107e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021082:	687b      	ldr	r3, [r7, #4]
 8021084:	2201      	movs	r2, #1
 8021086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	2201      	movs	r2, #1
 802108e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	2201      	movs	r2, #1
 8021096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	2201      	movs	r2, #1
 802109e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	2201      	movs	r2, #1
 80210a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80210aa:	2300      	movs	r3, #0
}
 80210ac:	4618      	mov	r0, r3
 80210ae:	3708      	adds	r7, #8
 80210b0:	46bd      	mov	sp, r7
 80210b2:	bd80      	pop	{r7, pc}

080210b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80210b4:	b480      	push	{r7}
 80210b6:	b083      	sub	sp, #12
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80210bc:	bf00      	nop
 80210be:	370c      	adds	r7, #12
 80210c0:	46bd      	mov	sp, r7
 80210c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210c6:	4770      	bx	lr

080210c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80210c8:	b580      	push	{r7, lr}
 80210ca:	b084      	sub	sp, #16
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]
 80210d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80210d2:	683b      	ldr	r3, [r7, #0]
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d109      	bne.n	80210ec <HAL_TIM_PWM_Start+0x24>
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80210de:	b2db      	uxtb	r3, r3
 80210e0:	2b01      	cmp	r3, #1
 80210e2:	bf14      	ite	ne
 80210e4:	2301      	movne	r3, #1
 80210e6:	2300      	moveq	r3, #0
 80210e8:	b2db      	uxtb	r3, r3
 80210ea:	e022      	b.n	8021132 <HAL_TIM_PWM_Start+0x6a>
 80210ec:	683b      	ldr	r3, [r7, #0]
 80210ee:	2b04      	cmp	r3, #4
 80210f0:	d109      	bne.n	8021106 <HAL_TIM_PWM_Start+0x3e>
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80210f8:	b2db      	uxtb	r3, r3
 80210fa:	2b01      	cmp	r3, #1
 80210fc:	bf14      	ite	ne
 80210fe:	2301      	movne	r3, #1
 8021100:	2300      	moveq	r3, #0
 8021102:	b2db      	uxtb	r3, r3
 8021104:	e015      	b.n	8021132 <HAL_TIM_PWM_Start+0x6a>
 8021106:	683b      	ldr	r3, [r7, #0]
 8021108:	2b08      	cmp	r3, #8
 802110a:	d109      	bne.n	8021120 <HAL_TIM_PWM_Start+0x58>
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021112:	b2db      	uxtb	r3, r3
 8021114:	2b01      	cmp	r3, #1
 8021116:	bf14      	ite	ne
 8021118:	2301      	movne	r3, #1
 802111a:	2300      	moveq	r3, #0
 802111c:	b2db      	uxtb	r3, r3
 802111e:	e008      	b.n	8021132 <HAL_TIM_PWM_Start+0x6a>
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8021126:	b2db      	uxtb	r3, r3
 8021128:	2b01      	cmp	r3, #1
 802112a:	bf14      	ite	ne
 802112c:	2301      	movne	r3, #1
 802112e:	2300      	moveq	r3, #0
 8021130:	b2db      	uxtb	r3, r3
 8021132:	2b00      	cmp	r3, #0
 8021134:	d001      	beq.n	802113a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8021136:	2301      	movs	r3, #1
 8021138:	e068      	b.n	802120c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802113a:	683b      	ldr	r3, [r7, #0]
 802113c:	2b00      	cmp	r3, #0
 802113e:	d104      	bne.n	802114a <HAL_TIM_PWM_Start+0x82>
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	2202      	movs	r2, #2
 8021144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8021148:	e013      	b.n	8021172 <HAL_TIM_PWM_Start+0xaa>
 802114a:	683b      	ldr	r3, [r7, #0]
 802114c:	2b04      	cmp	r3, #4
 802114e:	d104      	bne.n	802115a <HAL_TIM_PWM_Start+0x92>
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	2202      	movs	r2, #2
 8021154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021158:	e00b      	b.n	8021172 <HAL_TIM_PWM_Start+0xaa>
 802115a:	683b      	ldr	r3, [r7, #0]
 802115c:	2b08      	cmp	r3, #8
 802115e:	d104      	bne.n	802116a <HAL_TIM_PWM_Start+0xa2>
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	2202      	movs	r2, #2
 8021164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8021168:	e003      	b.n	8021172 <HAL_TIM_PWM_Start+0xaa>
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	2202      	movs	r2, #2
 802116e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	2201      	movs	r2, #1
 8021178:	6839      	ldr	r1, [r7, #0]
 802117a:	4618      	mov	r0, r3
 802117c:	f000 fed8 	bl	8021f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	4a23      	ldr	r2, [pc, #140]	; (8021214 <HAL_TIM_PWM_Start+0x14c>)
 8021186:	4293      	cmp	r3, r2
 8021188:	d107      	bne.n	802119a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	681b      	ldr	r3, [r3, #0]
 802118e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	4a1d      	ldr	r2, [pc, #116]	; (8021214 <HAL_TIM_PWM_Start+0x14c>)
 80211a0:	4293      	cmp	r3, r2
 80211a2:	d018      	beq.n	80211d6 <HAL_TIM_PWM_Start+0x10e>
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80211ac:	d013      	beq.n	80211d6 <HAL_TIM_PWM_Start+0x10e>
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	4a19      	ldr	r2, [pc, #100]	; (8021218 <HAL_TIM_PWM_Start+0x150>)
 80211b4:	4293      	cmp	r3, r2
 80211b6:	d00e      	beq.n	80211d6 <HAL_TIM_PWM_Start+0x10e>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	681b      	ldr	r3, [r3, #0]
 80211bc:	4a17      	ldr	r2, [pc, #92]	; (802121c <HAL_TIM_PWM_Start+0x154>)
 80211be:	4293      	cmp	r3, r2
 80211c0:	d009      	beq.n	80211d6 <HAL_TIM_PWM_Start+0x10e>
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	4a16      	ldr	r2, [pc, #88]	; (8021220 <HAL_TIM_PWM_Start+0x158>)
 80211c8:	4293      	cmp	r3, r2
 80211ca:	d004      	beq.n	80211d6 <HAL_TIM_PWM_Start+0x10e>
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	4a14      	ldr	r2, [pc, #80]	; (8021224 <HAL_TIM_PWM_Start+0x15c>)
 80211d2:	4293      	cmp	r3, r2
 80211d4:	d111      	bne.n	80211fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	681b      	ldr	r3, [r3, #0]
 80211da:	689b      	ldr	r3, [r3, #8]
 80211dc:	f003 0307 	and.w	r3, r3, #7
 80211e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	2b06      	cmp	r3, #6
 80211e6:	d010      	beq.n	802120a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	681a      	ldr	r2, [r3, #0]
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	f042 0201 	orr.w	r2, r2, #1
 80211f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80211f8:	e007      	b.n	802120a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	681a      	ldr	r2, [r3, #0]
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	f042 0201 	orr.w	r2, r2, #1
 8021208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802120a:	2300      	movs	r3, #0
}
 802120c:	4618      	mov	r0, r3
 802120e:	3710      	adds	r7, #16
 8021210:	46bd      	mov	sp, r7
 8021212:	bd80      	pop	{r7, pc}
 8021214:	40010000 	.word	0x40010000
 8021218:	40000400 	.word	0x40000400
 802121c:	40000800 	.word	0x40000800
 8021220:	40000c00 	.word	0x40000c00
 8021224:	40014000 	.word	0x40014000

08021228 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8021228:	b580      	push	{r7, lr}
 802122a:	b084      	sub	sp, #16
 802122c:	af00      	add	r7, sp, #0
 802122e:	6078      	str	r0, [r7, #4]
 8021230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8021232:	2300      	movs	r3, #0
 8021234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8021236:	683b      	ldr	r3, [r7, #0]
 8021238:	2b00      	cmp	r3, #0
 802123a:	d104      	bne.n	8021246 <HAL_TIM_IC_Start_IT+0x1e>
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021242:	b2db      	uxtb	r3, r3
 8021244:	e013      	b.n	802126e <HAL_TIM_IC_Start_IT+0x46>
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	2b04      	cmp	r3, #4
 802124a:	d104      	bne.n	8021256 <HAL_TIM_IC_Start_IT+0x2e>
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8021252:	b2db      	uxtb	r3, r3
 8021254:	e00b      	b.n	802126e <HAL_TIM_IC_Start_IT+0x46>
 8021256:	683b      	ldr	r3, [r7, #0]
 8021258:	2b08      	cmp	r3, #8
 802125a:	d104      	bne.n	8021266 <HAL_TIM_IC_Start_IT+0x3e>
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021262:	b2db      	uxtb	r3, r3
 8021264:	e003      	b.n	802126e <HAL_TIM_IC_Start_IT+0x46>
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802126c:	b2db      	uxtb	r3, r3
 802126e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8021270:	683b      	ldr	r3, [r7, #0]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d104      	bne.n	8021280 <HAL_TIM_IC_Start_IT+0x58>
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802127c:	b2db      	uxtb	r3, r3
 802127e:	e013      	b.n	80212a8 <HAL_TIM_IC_Start_IT+0x80>
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	2b04      	cmp	r3, #4
 8021284:	d104      	bne.n	8021290 <HAL_TIM_IC_Start_IT+0x68>
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802128c:	b2db      	uxtb	r3, r3
 802128e:	e00b      	b.n	80212a8 <HAL_TIM_IC_Start_IT+0x80>
 8021290:	683b      	ldr	r3, [r7, #0]
 8021292:	2b08      	cmp	r3, #8
 8021294:	d104      	bne.n	80212a0 <HAL_TIM_IC_Start_IT+0x78>
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802129c:	b2db      	uxtb	r3, r3
 802129e:	e003      	b.n	80212a8 <HAL_TIM_IC_Start_IT+0x80>
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80212a6:	b2db      	uxtb	r3, r3
 80212a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80212aa:	7bbb      	ldrb	r3, [r7, #14]
 80212ac:	2b01      	cmp	r3, #1
 80212ae:	d102      	bne.n	80212b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80212b0:	7b7b      	ldrb	r3, [r7, #13]
 80212b2:	2b01      	cmp	r3, #1
 80212b4:	d001      	beq.n	80212ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80212b6:	2301      	movs	r3, #1
 80212b8:	e0c2      	b.n	8021440 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80212ba:	683b      	ldr	r3, [r7, #0]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d104      	bne.n	80212ca <HAL_TIM_IC_Start_IT+0xa2>
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	2202      	movs	r2, #2
 80212c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80212c8:	e013      	b.n	80212f2 <HAL_TIM_IC_Start_IT+0xca>
 80212ca:	683b      	ldr	r3, [r7, #0]
 80212cc:	2b04      	cmp	r3, #4
 80212ce:	d104      	bne.n	80212da <HAL_TIM_IC_Start_IT+0xb2>
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	2202      	movs	r2, #2
 80212d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80212d8:	e00b      	b.n	80212f2 <HAL_TIM_IC_Start_IT+0xca>
 80212da:	683b      	ldr	r3, [r7, #0]
 80212dc:	2b08      	cmp	r3, #8
 80212de:	d104      	bne.n	80212ea <HAL_TIM_IC_Start_IT+0xc2>
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	2202      	movs	r2, #2
 80212e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80212e8:	e003      	b.n	80212f2 <HAL_TIM_IC_Start_IT+0xca>
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	2202      	movs	r2, #2
 80212ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80212f2:	683b      	ldr	r3, [r7, #0]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d104      	bne.n	8021302 <HAL_TIM_IC_Start_IT+0xda>
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	2202      	movs	r2, #2
 80212fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8021300:	e013      	b.n	802132a <HAL_TIM_IC_Start_IT+0x102>
 8021302:	683b      	ldr	r3, [r7, #0]
 8021304:	2b04      	cmp	r3, #4
 8021306:	d104      	bne.n	8021312 <HAL_TIM_IC_Start_IT+0xea>
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	2202      	movs	r2, #2
 802130c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021310:	e00b      	b.n	802132a <HAL_TIM_IC_Start_IT+0x102>
 8021312:	683b      	ldr	r3, [r7, #0]
 8021314:	2b08      	cmp	r3, #8
 8021316:	d104      	bne.n	8021322 <HAL_TIM_IC_Start_IT+0xfa>
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	2202      	movs	r2, #2
 802131c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021320:	e003      	b.n	802132a <HAL_TIM_IC_Start_IT+0x102>
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	2202      	movs	r2, #2
 8021326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 802132a:	683b      	ldr	r3, [r7, #0]
 802132c:	2b0c      	cmp	r3, #12
 802132e:	d841      	bhi.n	80213b4 <HAL_TIM_IC_Start_IT+0x18c>
 8021330:	a201      	add	r2, pc, #4	; (adr r2, 8021338 <HAL_TIM_IC_Start_IT+0x110>)
 8021332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021336:	bf00      	nop
 8021338:	0802136d 	.word	0x0802136d
 802133c:	080213b5 	.word	0x080213b5
 8021340:	080213b5 	.word	0x080213b5
 8021344:	080213b5 	.word	0x080213b5
 8021348:	0802137f 	.word	0x0802137f
 802134c:	080213b5 	.word	0x080213b5
 8021350:	080213b5 	.word	0x080213b5
 8021354:	080213b5 	.word	0x080213b5
 8021358:	08021391 	.word	0x08021391
 802135c:	080213b5 	.word	0x080213b5
 8021360:	080213b5 	.word	0x080213b5
 8021364:	080213b5 	.word	0x080213b5
 8021368:	080213a3 	.word	0x080213a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	68da      	ldr	r2, [r3, #12]
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	f042 0202 	orr.w	r2, r2, #2
 802137a:	60da      	str	r2, [r3, #12]
      break;
 802137c:	e01d      	b.n	80213ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	68da      	ldr	r2, [r3, #12]
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	f042 0204 	orr.w	r2, r2, #4
 802138c:	60da      	str	r2, [r3, #12]
      break;
 802138e:	e014      	b.n	80213ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	681b      	ldr	r3, [r3, #0]
 8021394:	68da      	ldr	r2, [r3, #12]
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	f042 0208 	orr.w	r2, r2, #8
 802139e:	60da      	str	r2, [r3, #12]
      break;
 80213a0:	e00b      	b.n	80213ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	681b      	ldr	r3, [r3, #0]
 80213a6:	68da      	ldr	r2, [r3, #12]
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	f042 0210 	orr.w	r2, r2, #16
 80213b0:	60da      	str	r2, [r3, #12]
      break;
 80213b2:	e002      	b.n	80213ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80213b4:	2301      	movs	r3, #1
 80213b6:	73fb      	strb	r3, [r7, #15]
      break;
 80213b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80213ba:	7bfb      	ldrb	r3, [r7, #15]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d13e      	bne.n	802143e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	2201      	movs	r2, #1
 80213c6:	6839      	ldr	r1, [r7, #0]
 80213c8:	4618      	mov	r0, r3
 80213ca:	f000 fdb1 	bl	8021f30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	4a1d      	ldr	r2, [pc, #116]	; (8021448 <HAL_TIM_IC_Start_IT+0x220>)
 80213d4:	4293      	cmp	r3, r2
 80213d6:	d018      	beq.n	802140a <HAL_TIM_IC_Start_IT+0x1e2>
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80213e0:	d013      	beq.n	802140a <HAL_TIM_IC_Start_IT+0x1e2>
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	4a19      	ldr	r2, [pc, #100]	; (802144c <HAL_TIM_IC_Start_IT+0x224>)
 80213e8:	4293      	cmp	r3, r2
 80213ea:	d00e      	beq.n	802140a <HAL_TIM_IC_Start_IT+0x1e2>
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	4a17      	ldr	r2, [pc, #92]	; (8021450 <HAL_TIM_IC_Start_IT+0x228>)
 80213f2:	4293      	cmp	r3, r2
 80213f4:	d009      	beq.n	802140a <HAL_TIM_IC_Start_IT+0x1e2>
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	4a16      	ldr	r2, [pc, #88]	; (8021454 <HAL_TIM_IC_Start_IT+0x22c>)
 80213fc:	4293      	cmp	r3, r2
 80213fe:	d004      	beq.n	802140a <HAL_TIM_IC_Start_IT+0x1e2>
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	4a14      	ldr	r2, [pc, #80]	; (8021458 <HAL_TIM_IC_Start_IT+0x230>)
 8021406:	4293      	cmp	r3, r2
 8021408:	d111      	bne.n	802142e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	681b      	ldr	r3, [r3, #0]
 802140e:	689b      	ldr	r3, [r3, #8]
 8021410:	f003 0307 	and.w	r3, r3, #7
 8021414:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021416:	68bb      	ldr	r3, [r7, #8]
 8021418:	2b06      	cmp	r3, #6
 802141a:	d010      	beq.n	802143e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	681b      	ldr	r3, [r3, #0]
 8021420:	681a      	ldr	r2, [r3, #0]
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	f042 0201 	orr.w	r2, r2, #1
 802142a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802142c:	e007      	b.n	802143e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	681a      	ldr	r2, [r3, #0]
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	f042 0201 	orr.w	r2, r2, #1
 802143c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 802143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021440:	4618      	mov	r0, r3
 8021442:	3710      	adds	r7, #16
 8021444:	46bd      	mov	sp, r7
 8021446:	bd80      	pop	{r7, pc}
 8021448:	40010000 	.word	0x40010000
 802144c:	40000400 	.word	0x40000400
 8021450:	40000800 	.word	0x40000800
 8021454:	40000c00 	.word	0x40000c00
 8021458:	40014000 	.word	0x40014000

0802145c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802145c:	b580      	push	{r7, lr}
 802145e:	b082      	sub	sp, #8
 8021460:	af00      	add	r7, sp, #0
 8021462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	681b      	ldr	r3, [r3, #0]
 8021468:	691b      	ldr	r3, [r3, #16]
 802146a:	f003 0302 	and.w	r3, r3, #2
 802146e:	2b02      	cmp	r3, #2
 8021470:	d122      	bne.n	80214b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	68db      	ldr	r3, [r3, #12]
 8021478:	f003 0302 	and.w	r3, r3, #2
 802147c:	2b02      	cmp	r3, #2
 802147e:	d11b      	bne.n	80214b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	f06f 0202 	mvn.w	r2, #2
 8021488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	2201      	movs	r2, #1
 802148e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	699b      	ldr	r3, [r3, #24]
 8021496:	f003 0303 	and.w	r3, r3, #3
 802149a:	2b00      	cmp	r3, #0
 802149c:	d003      	beq.n	80214a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802149e:	6878      	ldr	r0, [r7, #4]
 80214a0:	f000 fa81 	bl	80219a6 <HAL_TIM_IC_CaptureCallback>
 80214a4:	e005      	b.n	80214b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f000 fa73 	bl	8021992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80214ac:	6878      	ldr	r0, [r7, #4]
 80214ae:	f000 fa84 	bl	80219ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	2200      	movs	r2, #0
 80214b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	691b      	ldr	r3, [r3, #16]
 80214be:	f003 0304 	and.w	r3, r3, #4
 80214c2:	2b04      	cmp	r3, #4
 80214c4:	d122      	bne.n	802150c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	681b      	ldr	r3, [r3, #0]
 80214ca:	68db      	ldr	r3, [r3, #12]
 80214cc:	f003 0304 	and.w	r3, r3, #4
 80214d0:	2b04      	cmp	r3, #4
 80214d2:	d11b      	bne.n	802150c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	f06f 0204 	mvn.w	r2, #4
 80214dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	2202      	movs	r2, #2
 80214e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	699b      	ldr	r3, [r3, #24]
 80214ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d003      	beq.n	80214fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80214f2:	6878      	ldr	r0, [r7, #4]
 80214f4:	f000 fa57 	bl	80219a6 <HAL_TIM_IC_CaptureCallback>
 80214f8:	e005      	b.n	8021506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80214fa:	6878      	ldr	r0, [r7, #4]
 80214fc:	f000 fa49 	bl	8021992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021500:	6878      	ldr	r0, [r7, #4]
 8021502:	f000 fa5a 	bl	80219ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	2200      	movs	r2, #0
 802150a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	691b      	ldr	r3, [r3, #16]
 8021512:	f003 0308 	and.w	r3, r3, #8
 8021516:	2b08      	cmp	r3, #8
 8021518:	d122      	bne.n	8021560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	68db      	ldr	r3, [r3, #12]
 8021520:	f003 0308 	and.w	r3, r3, #8
 8021524:	2b08      	cmp	r3, #8
 8021526:	d11b      	bne.n	8021560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	f06f 0208 	mvn.w	r2, #8
 8021530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	2204      	movs	r2, #4
 8021536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	69db      	ldr	r3, [r3, #28]
 802153e:	f003 0303 	and.w	r3, r3, #3
 8021542:	2b00      	cmp	r3, #0
 8021544:	d003      	beq.n	802154e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021546:	6878      	ldr	r0, [r7, #4]
 8021548:	f000 fa2d 	bl	80219a6 <HAL_TIM_IC_CaptureCallback>
 802154c:	e005      	b.n	802155a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802154e:	6878      	ldr	r0, [r7, #4]
 8021550:	f000 fa1f 	bl	8021992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021554:	6878      	ldr	r0, [r7, #4]
 8021556:	f000 fa30 	bl	80219ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	2200      	movs	r2, #0
 802155e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	691b      	ldr	r3, [r3, #16]
 8021566:	f003 0310 	and.w	r3, r3, #16
 802156a:	2b10      	cmp	r3, #16
 802156c:	d122      	bne.n	80215b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	68db      	ldr	r3, [r3, #12]
 8021574:	f003 0310 	and.w	r3, r3, #16
 8021578:	2b10      	cmp	r3, #16
 802157a:	d11b      	bne.n	80215b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	f06f 0210 	mvn.w	r2, #16
 8021584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	2208      	movs	r2, #8
 802158a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	69db      	ldr	r3, [r3, #28]
 8021592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021596:	2b00      	cmp	r3, #0
 8021598:	d003      	beq.n	80215a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802159a:	6878      	ldr	r0, [r7, #4]
 802159c:	f000 fa03 	bl	80219a6 <HAL_TIM_IC_CaptureCallback>
 80215a0:	e005      	b.n	80215ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80215a2:	6878      	ldr	r0, [r7, #4]
 80215a4:	f000 f9f5 	bl	8021992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80215a8:	6878      	ldr	r0, [r7, #4]
 80215aa:	f000 fa06 	bl	80219ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	2200      	movs	r2, #0
 80215b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	681b      	ldr	r3, [r3, #0]
 80215b8:	691b      	ldr	r3, [r3, #16]
 80215ba:	f003 0301 	and.w	r3, r3, #1
 80215be:	2b01      	cmp	r3, #1
 80215c0:	d10e      	bne.n	80215e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	68db      	ldr	r3, [r3, #12]
 80215c8:	f003 0301 	and.w	r3, r3, #1
 80215cc:	2b01      	cmp	r3, #1
 80215ce:	d107      	bne.n	80215e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	f06f 0201 	mvn.w	r2, #1
 80215d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80215da:	6878      	ldr	r0, [r7, #4]
 80215dc:	f000 f9cf 	bl	802197e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	691b      	ldr	r3, [r3, #16]
 80215e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80215ea:	2b80      	cmp	r3, #128	; 0x80
 80215ec:	d10e      	bne.n	802160c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	68db      	ldr	r3, [r3, #12]
 80215f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80215f8:	2b80      	cmp	r3, #128	; 0x80
 80215fa:	d107      	bne.n	802160c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8021604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8021606:	6878      	ldr	r0, [r7, #4]
 8021608:	f000 fd30 	bl	802206c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	691b      	ldr	r3, [r3, #16]
 8021612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021616:	2b40      	cmp	r3, #64	; 0x40
 8021618:	d10e      	bne.n	8021638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	68db      	ldr	r3, [r3, #12]
 8021620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021624:	2b40      	cmp	r3, #64	; 0x40
 8021626:	d107      	bne.n	8021638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8021630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8021632:	6878      	ldr	r0, [r7, #4]
 8021634:	f000 f9cb 	bl	80219ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	691b      	ldr	r3, [r3, #16]
 802163e:	f003 0320 	and.w	r3, r3, #32
 8021642:	2b20      	cmp	r3, #32
 8021644:	d10e      	bne.n	8021664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	68db      	ldr	r3, [r3, #12]
 802164c:	f003 0320 	and.w	r3, r3, #32
 8021650:	2b20      	cmp	r3, #32
 8021652:	d107      	bne.n	8021664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	f06f 0220 	mvn.w	r2, #32
 802165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802165e:	6878      	ldr	r0, [r7, #4]
 8021660:	f000 fcfa 	bl	8022058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8021664:	bf00      	nop
 8021666:	3708      	adds	r7, #8
 8021668:	46bd      	mov	sp, r7
 802166a:	bd80      	pop	{r7, pc}

0802166c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b086      	sub	sp, #24
 8021670:	af00      	add	r7, sp, #0
 8021672:	60f8      	str	r0, [r7, #12]
 8021674:	60b9      	str	r1, [r7, #8]
 8021676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021678:	2300      	movs	r3, #0
 802167a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802167c:	68fb      	ldr	r3, [r7, #12]
 802167e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021682:	2b01      	cmp	r3, #1
 8021684:	d101      	bne.n	802168a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8021686:	2302      	movs	r3, #2
 8021688:	e0ae      	b.n	80217e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	2201      	movs	r2, #1
 802168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	2b0c      	cmp	r3, #12
 8021696:	f200 809f 	bhi.w	80217d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 802169a:	a201      	add	r2, pc, #4	; (adr r2, 80216a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216a0:	080216d5 	.word	0x080216d5
 80216a4:	080217d9 	.word	0x080217d9
 80216a8:	080217d9 	.word	0x080217d9
 80216ac:	080217d9 	.word	0x080217d9
 80216b0:	08021715 	.word	0x08021715
 80216b4:	080217d9 	.word	0x080217d9
 80216b8:	080217d9 	.word	0x080217d9
 80216bc:	080217d9 	.word	0x080217d9
 80216c0:	08021757 	.word	0x08021757
 80216c4:	080217d9 	.word	0x080217d9
 80216c8:	080217d9 	.word	0x080217d9
 80216cc:	080217d9 	.word	0x080217d9
 80216d0:	08021797 	.word	0x08021797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	681b      	ldr	r3, [r3, #0]
 80216d8:	68b9      	ldr	r1, [r7, #8]
 80216da:	4618      	mov	r0, r3
 80216dc:	f000 fa02 	bl	8021ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	699a      	ldr	r2, [r3, #24]
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	681b      	ldr	r3, [r3, #0]
 80216ea:	f042 0208 	orr.w	r2, r2, #8
 80216ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	699a      	ldr	r2, [r3, #24]
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	681b      	ldr	r3, [r3, #0]
 80216fa:	f022 0204 	bic.w	r2, r2, #4
 80216fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8021700:	68fb      	ldr	r3, [r7, #12]
 8021702:	681b      	ldr	r3, [r3, #0]
 8021704:	6999      	ldr	r1, [r3, #24]
 8021706:	68bb      	ldr	r3, [r7, #8]
 8021708:	691a      	ldr	r2, [r3, #16]
 802170a:	68fb      	ldr	r3, [r7, #12]
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	430a      	orrs	r2, r1
 8021710:	619a      	str	r2, [r3, #24]
      break;
 8021712:	e064      	b.n	80217de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	681b      	ldr	r3, [r3, #0]
 8021718:	68b9      	ldr	r1, [r7, #8]
 802171a:	4618      	mov	r0, r3
 802171c:	f000 fa48 	bl	8021bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8021720:	68fb      	ldr	r3, [r7, #12]
 8021722:	681b      	ldr	r3, [r3, #0]
 8021724:	699a      	ldr	r2, [r3, #24]
 8021726:	68fb      	ldr	r3, [r7, #12]
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802172e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8021730:	68fb      	ldr	r3, [r7, #12]
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	699a      	ldr	r2, [r3, #24]
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802173e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	6999      	ldr	r1, [r3, #24]
 8021746:	68bb      	ldr	r3, [r7, #8]
 8021748:	691b      	ldr	r3, [r3, #16]
 802174a:	021a      	lsls	r2, r3, #8
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	681b      	ldr	r3, [r3, #0]
 8021750:	430a      	orrs	r2, r1
 8021752:	619a      	str	r2, [r3, #24]
      break;
 8021754:	e043      	b.n	80217de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8021756:	68fb      	ldr	r3, [r7, #12]
 8021758:	681b      	ldr	r3, [r3, #0]
 802175a:	68b9      	ldr	r1, [r7, #8]
 802175c:	4618      	mov	r0, r3
 802175e:	f000 fa93 	bl	8021c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8021762:	68fb      	ldr	r3, [r7, #12]
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	69da      	ldr	r2, [r3, #28]
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	681b      	ldr	r3, [r3, #0]
 802176c:	f042 0208 	orr.w	r2, r2, #8
 8021770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8021772:	68fb      	ldr	r3, [r7, #12]
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	69da      	ldr	r2, [r3, #28]
 8021778:	68fb      	ldr	r3, [r7, #12]
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	f022 0204 	bic.w	r2, r2, #4
 8021780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8021782:	68fb      	ldr	r3, [r7, #12]
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	69d9      	ldr	r1, [r3, #28]
 8021788:	68bb      	ldr	r3, [r7, #8]
 802178a:	691a      	ldr	r2, [r3, #16]
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	430a      	orrs	r2, r1
 8021792:	61da      	str	r2, [r3, #28]
      break;
 8021794:	e023      	b.n	80217de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8021796:	68fb      	ldr	r3, [r7, #12]
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	68b9      	ldr	r1, [r7, #8]
 802179c:	4618      	mov	r0, r3
 802179e:	f000 fadd 	bl	8021d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80217a2:	68fb      	ldr	r3, [r7, #12]
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	69da      	ldr	r2, [r3, #28]
 80217a8:	68fb      	ldr	r3, [r7, #12]
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80217b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80217b2:	68fb      	ldr	r3, [r7, #12]
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	69da      	ldr	r2, [r3, #28]
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80217c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80217c2:	68fb      	ldr	r3, [r7, #12]
 80217c4:	681b      	ldr	r3, [r3, #0]
 80217c6:	69d9      	ldr	r1, [r3, #28]
 80217c8:	68bb      	ldr	r3, [r7, #8]
 80217ca:	691b      	ldr	r3, [r3, #16]
 80217cc:	021a      	lsls	r2, r3, #8
 80217ce:	68fb      	ldr	r3, [r7, #12]
 80217d0:	681b      	ldr	r3, [r3, #0]
 80217d2:	430a      	orrs	r2, r1
 80217d4:	61da      	str	r2, [r3, #28]
      break;
 80217d6:	e002      	b.n	80217de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80217d8:	2301      	movs	r3, #1
 80217da:	75fb      	strb	r3, [r7, #23]
      break;
 80217dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80217de:	68fb      	ldr	r3, [r7, #12]
 80217e0:	2200      	movs	r2, #0
 80217e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80217e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80217e8:	4618      	mov	r0, r3
 80217ea:	3718      	adds	r7, #24
 80217ec:	46bd      	mov	sp, r7
 80217ee:	bd80      	pop	{r7, pc}

080217f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80217f0:	b580      	push	{r7, lr}
 80217f2:	b084      	sub	sp, #16
 80217f4:	af00      	add	r7, sp, #0
 80217f6:	6078      	str	r0, [r7, #4]
 80217f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80217fa:	2300      	movs	r3, #0
 80217fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021804:	2b01      	cmp	r3, #1
 8021806:	d101      	bne.n	802180c <HAL_TIM_ConfigClockSource+0x1c>
 8021808:	2302      	movs	r3, #2
 802180a:	e0b4      	b.n	8021976 <HAL_TIM_ConfigClockSource+0x186>
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2201      	movs	r2, #1
 8021810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	2202      	movs	r2, #2
 8021818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	681b      	ldr	r3, [r3, #0]
 8021820:	689b      	ldr	r3, [r3, #8]
 8021822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8021824:	68bb      	ldr	r3, [r7, #8]
 8021826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802182a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802182c:	68bb      	ldr	r3, [r7, #8]
 802182e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	681b      	ldr	r3, [r3, #0]
 8021838:	68ba      	ldr	r2, [r7, #8]
 802183a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802183c:	683b      	ldr	r3, [r7, #0]
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021844:	d03e      	beq.n	80218c4 <HAL_TIM_ConfigClockSource+0xd4>
 8021846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802184a:	f200 8087 	bhi.w	802195c <HAL_TIM_ConfigClockSource+0x16c>
 802184e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021852:	f000 8086 	beq.w	8021962 <HAL_TIM_ConfigClockSource+0x172>
 8021856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802185a:	d87f      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 802185c:	2b70      	cmp	r3, #112	; 0x70
 802185e:	d01a      	beq.n	8021896 <HAL_TIM_ConfigClockSource+0xa6>
 8021860:	2b70      	cmp	r3, #112	; 0x70
 8021862:	d87b      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 8021864:	2b60      	cmp	r3, #96	; 0x60
 8021866:	d050      	beq.n	802190a <HAL_TIM_ConfigClockSource+0x11a>
 8021868:	2b60      	cmp	r3, #96	; 0x60
 802186a:	d877      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 802186c:	2b50      	cmp	r3, #80	; 0x50
 802186e:	d03c      	beq.n	80218ea <HAL_TIM_ConfigClockSource+0xfa>
 8021870:	2b50      	cmp	r3, #80	; 0x50
 8021872:	d873      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 8021874:	2b40      	cmp	r3, #64	; 0x40
 8021876:	d058      	beq.n	802192a <HAL_TIM_ConfigClockSource+0x13a>
 8021878:	2b40      	cmp	r3, #64	; 0x40
 802187a:	d86f      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 802187c:	2b30      	cmp	r3, #48	; 0x30
 802187e:	d064      	beq.n	802194a <HAL_TIM_ConfigClockSource+0x15a>
 8021880:	2b30      	cmp	r3, #48	; 0x30
 8021882:	d86b      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 8021884:	2b20      	cmp	r3, #32
 8021886:	d060      	beq.n	802194a <HAL_TIM_ConfigClockSource+0x15a>
 8021888:	2b20      	cmp	r3, #32
 802188a:	d867      	bhi.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
 802188c:	2b00      	cmp	r3, #0
 802188e:	d05c      	beq.n	802194a <HAL_TIM_ConfigClockSource+0x15a>
 8021890:	2b10      	cmp	r3, #16
 8021892:	d05a      	beq.n	802194a <HAL_TIM_ConfigClockSource+0x15a>
 8021894:	e062      	b.n	802195c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	6818      	ldr	r0, [r3, #0]
 802189a:	683b      	ldr	r3, [r7, #0]
 802189c:	6899      	ldr	r1, [r3, #8]
 802189e:	683b      	ldr	r3, [r7, #0]
 80218a0:	685a      	ldr	r2, [r3, #4]
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	68db      	ldr	r3, [r3, #12]
 80218a6:	f000 fb23 	bl	8021ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	681b      	ldr	r3, [r3, #0]
 80218ae:	689b      	ldr	r3, [r3, #8]
 80218b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80218b2:	68bb      	ldr	r3, [r7, #8]
 80218b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80218b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	68ba      	ldr	r2, [r7, #8]
 80218c0:	609a      	str	r2, [r3, #8]
      break;
 80218c2:	e04f      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	6818      	ldr	r0, [r3, #0]
 80218c8:	683b      	ldr	r3, [r7, #0]
 80218ca:	6899      	ldr	r1, [r3, #8]
 80218cc:	683b      	ldr	r3, [r7, #0]
 80218ce:	685a      	ldr	r2, [r3, #4]
 80218d0:	683b      	ldr	r3, [r7, #0]
 80218d2:	68db      	ldr	r3, [r3, #12]
 80218d4:	f000 fb0c 	bl	8021ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	689a      	ldr	r2, [r3, #8]
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80218e6:	609a      	str	r2, [r3, #8]
      break;
 80218e8:	e03c      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80218ea:	687b      	ldr	r3, [r7, #4]
 80218ec:	6818      	ldr	r0, [r3, #0]
 80218ee:	683b      	ldr	r3, [r7, #0]
 80218f0:	6859      	ldr	r1, [r3, #4]
 80218f2:	683b      	ldr	r3, [r7, #0]
 80218f4:	68db      	ldr	r3, [r3, #12]
 80218f6:	461a      	mov	r2, r3
 80218f8:	f000 fa80 	bl	8021dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	2150      	movs	r1, #80	; 0x50
 8021902:	4618      	mov	r0, r3
 8021904:	f000 fad9 	bl	8021eba <TIM_ITRx_SetConfig>
      break;
 8021908:	e02c      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	6818      	ldr	r0, [r3, #0]
 802190e:	683b      	ldr	r3, [r7, #0]
 8021910:	6859      	ldr	r1, [r3, #4]
 8021912:	683b      	ldr	r3, [r7, #0]
 8021914:	68db      	ldr	r3, [r3, #12]
 8021916:	461a      	mov	r2, r3
 8021918:	f000 fa9f 	bl	8021e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	2160      	movs	r1, #96	; 0x60
 8021922:	4618      	mov	r0, r3
 8021924:	f000 fac9 	bl	8021eba <TIM_ITRx_SetConfig>
      break;
 8021928:	e01c      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	6818      	ldr	r0, [r3, #0]
 802192e:	683b      	ldr	r3, [r7, #0]
 8021930:	6859      	ldr	r1, [r3, #4]
 8021932:	683b      	ldr	r3, [r7, #0]
 8021934:	68db      	ldr	r3, [r3, #12]
 8021936:	461a      	mov	r2, r3
 8021938:	f000 fa60 	bl	8021dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	2140      	movs	r1, #64	; 0x40
 8021942:	4618      	mov	r0, r3
 8021944:	f000 fab9 	bl	8021eba <TIM_ITRx_SetConfig>
      break;
 8021948:	e00c      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	681a      	ldr	r2, [r3, #0]
 802194e:	683b      	ldr	r3, [r7, #0]
 8021950:	681b      	ldr	r3, [r3, #0]
 8021952:	4619      	mov	r1, r3
 8021954:	4610      	mov	r0, r2
 8021956:	f000 fab0 	bl	8021eba <TIM_ITRx_SetConfig>
      break;
 802195a:	e003      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802195c:	2301      	movs	r3, #1
 802195e:	73fb      	strb	r3, [r7, #15]
      break;
 8021960:	e000      	b.n	8021964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8021962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	2201      	movs	r2, #1
 8021968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	2200      	movs	r2, #0
 8021970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8021974:	7bfb      	ldrb	r3, [r7, #15]
}
 8021976:	4618      	mov	r0, r3
 8021978:	3710      	adds	r7, #16
 802197a:	46bd      	mov	sp, r7
 802197c:	bd80      	pop	{r7, pc}

0802197e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802197e:	b480      	push	{r7}
 8021980:	b083      	sub	sp, #12
 8021982:	af00      	add	r7, sp, #0
 8021984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8021986:	bf00      	nop
 8021988:	370c      	adds	r7, #12
 802198a:	46bd      	mov	sp, r7
 802198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021990:	4770      	bx	lr

08021992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021992:	b480      	push	{r7}
 8021994:	b083      	sub	sp, #12
 8021996:	af00      	add	r7, sp, #0
 8021998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802199a:	bf00      	nop
 802199c:	370c      	adds	r7, #12
 802199e:	46bd      	mov	sp, r7
 80219a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219a4:	4770      	bx	lr

080219a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80219a6:	b480      	push	{r7}
 80219a8:	b083      	sub	sp, #12
 80219aa:	af00      	add	r7, sp, #0
 80219ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80219ae:	bf00      	nop
 80219b0:	370c      	adds	r7, #12
 80219b2:	46bd      	mov	sp, r7
 80219b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b8:	4770      	bx	lr

080219ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80219ba:	b480      	push	{r7}
 80219bc:	b083      	sub	sp, #12
 80219be:	af00      	add	r7, sp, #0
 80219c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80219c2:	bf00      	nop
 80219c4:	370c      	adds	r7, #12
 80219c6:	46bd      	mov	sp, r7
 80219c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219cc:	4770      	bx	lr

080219ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80219ce:	b480      	push	{r7}
 80219d0:	b083      	sub	sp, #12
 80219d2:	af00      	add	r7, sp, #0
 80219d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80219d6:	bf00      	nop
 80219d8:	370c      	adds	r7, #12
 80219da:	46bd      	mov	sp, r7
 80219dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e0:	4770      	bx	lr
	...

080219e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80219e4:	b480      	push	{r7}
 80219e6:	b085      	sub	sp, #20
 80219e8:	af00      	add	r7, sp, #0
 80219ea:	6078      	str	r0, [r7, #4]
 80219ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	4a34      	ldr	r2, [pc, #208]	; (8021ac8 <TIM_Base_SetConfig+0xe4>)
 80219f8:	4293      	cmp	r3, r2
 80219fa:	d00f      	beq.n	8021a1c <TIM_Base_SetConfig+0x38>
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021a02:	d00b      	beq.n	8021a1c <TIM_Base_SetConfig+0x38>
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	4a31      	ldr	r2, [pc, #196]	; (8021acc <TIM_Base_SetConfig+0xe8>)
 8021a08:	4293      	cmp	r3, r2
 8021a0a:	d007      	beq.n	8021a1c <TIM_Base_SetConfig+0x38>
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	4a30      	ldr	r2, [pc, #192]	; (8021ad0 <TIM_Base_SetConfig+0xec>)
 8021a10:	4293      	cmp	r3, r2
 8021a12:	d003      	beq.n	8021a1c <TIM_Base_SetConfig+0x38>
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	4a2f      	ldr	r2, [pc, #188]	; (8021ad4 <TIM_Base_SetConfig+0xf0>)
 8021a18:	4293      	cmp	r3, r2
 8021a1a:	d108      	bne.n	8021a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8021a24:	683b      	ldr	r3, [r7, #0]
 8021a26:	685b      	ldr	r3, [r3, #4]
 8021a28:	68fa      	ldr	r2, [r7, #12]
 8021a2a:	4313      	orrs	r3, r2
 8021a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	4a25      	ldr	r2, [pc, #148]	; (8021ac8 <TIM_Base_SetConfig+0xe4>)
 8021a32:	4293      	cmp	r3, r2
 8021a34:	d01b      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021a3c:	d017      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	4a22      	ldr	r2, [pc, #136]	; (8021acc <TIM_Base_SetConfig+0xe8>)
 8021a42:	4293      	cmp	r3, r2
 8021a44:	d013      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	4a21      	ldr	r2, [pc, #132]	; (8021ad0 <TIM_Base_SetConfig+0xec>)
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	d00f      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	4a20      	ldr	r2, [pc, #128]	; (8021ad4 <TIM_Base_SetConfig+0xf0>)
 8021a52:	4293      	cmp	r3, r2
 8021a54:	d00b      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	4a1f      	ldr	r2, [pc, #124]	; (8021ad8 <TIM_Base_SetConfig+0xf4>)
 8021a5a:	4293      	cmp	r3, r2
 8021a5c:	d007      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	4a1e      	ldr	r2, [pc, #120]	; (8021adc <TIM_Base_SetConfig+0xf8>)
 8021a62:	4293      	cmp	r3, r2
 8021a64:	d003      	beq.n	8021a6e <TIM_Base_SetConfig+0x8a>
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	4a1d      	ldr	r2, [pc, #116]	; (8021ae0 <TIM_Base_SetConfig+0xfc>)
 8021a6a:	4293      	cmp	r3, r2
 8021a6c:	d108      	bne.n	8021a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8021a76:	683b      	ldr	r3, [r7, #0]
 8021a78:	68db      	ldr	r3, [r3, #12]
 8021a7a:	68fa      	ldr	r2, [r7, #12]
 8021a7c:	4313      	orrs	r3, r2
 8021a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8021a80:	68fb      	ldr	r3, [r7, #12]
 8021a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8021a86:	683b      	ldr	r3, [r7, #0]
 8021a88:	695b      	ldr	r3, [r3, #20]
 8021a8a:	4313      	orrs	r3, r2
 8021a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	68fa      	ldr	r2, [r7, #12]
 8021a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8021a94:	683b      	ldr	r3, [r7, #0]
 8021a96:	689a      	ldr	r2, [r3, #8]
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8021a9c:	683b      	ldr	r3, [r7, #0]
 8021a9e:	681a      	ldr	r2, [r3, #0]
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	4a08      	ldr	r2, [pc, #32]	; (8021ac8 <TIM_Base_SetConfig+0xe4>)
 8021aa8:	4293      	cmp	r3, r2
 8021aaa:	d103      	bne.n	8021ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	691a      	ldr	r2, [r3, #16]
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	2201      	movs	r2, #1
 8021ab8:	615a      	str	r2, [r3, #20]
}
 8021aba:	bf00      	nop
 8021abc:	3714      	adds	r7, #20
 8021abe:	46bd      	mov	sp, r7
 8021ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac4:	4770      	bx	lr
 8021ac6:	bf00      	nop
 8021ac8:	40010000 	.word	0x40010000
 8021acc:	40000400 	.word	0x40000400
 8021ad0:	40000800 	.word	0x40000800
 8021ad4:	40000c00 	.word	0x40000c00
 8021ad8:	40014000 	.word	0x40014000
 8021adc:	40014400 	.word	0x40014400
 8021ae0:	40014800 	.word	0x40014800

08021ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021ae4:	b480      	push	{r7}
 8021ae6:	b087      	sub	sp, #28
 8021ae8:	af00      	add	r7, sp, #0
 8021aea:	6078      	str	r0, [r7, #4]
 8021aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	6a1b      	ldr	r3, [r3, #32]
 8021af2:	f023 0201 	bic.w	r2, r3, #1
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	6a1b      	ldr	r3, [r3, #32]
 8021afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	685b      	ldr	r3, [r3, #4]
 8021b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	699b      	ldr	r3, [r3, #24]
 8021b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8021b0c:	68fb      	ldr	r3, [r7, #12]
 8021b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8021b14:	68fb      	ldr	r3, [r7, #12]
 8021b16:	f023 0303 	bic.w	r3, r3, #3
 8021b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021b1c:	683b      	ldr	r3, [r7, #0]
 8021b1e:	681b      	ldr	r3, [r3, #0]
 8021b20:	68fa      	ldr	r2, [r7, #12]
 8021b22:	4313      	orrs	r3, r2
 8021b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8021b26:	697b      	ldr	r3, [r7, #20]
 8021b28:	f023 0302 	bic.w	r3, r3, #2
 8021b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8021b2e:	683b      	ldr	r3, [r7, #0]
 8021b30:	689b      	ldr	r3, [r3, #8]
 8021b32:	697a      	ldr	r2, [r7, #20]
 8021b34:	4313      	orrs	r3, r2
 8021b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	4a1c      	ldr	r2, [pc, #112]	; (8021bac <TIM_OC1_SetConfig+0xc8>)
 8021b3c:	4293      	cmp	r3, r2
 8021b3e:	d10c      	bne.n	8021b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8021b40:	697b      	ldr	r3, [r7, #20]
 8021b42:	f023 0308 	bic.w	r3, r3, #8
 8021b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8021b48:	683b      	ldr	r3, [r7, #0]
 8021b4a:	68db      	ldr	r3, [r3, #12]
 8021b4c:	697a      	ldr	r2, [r7, #20]
 8021b4e:	4313      	orrs	r3, r2
 8021b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8021b52:	697b      	ldr	r3, [r7, #20]
 8021b54:	f023 0304 	bic.w	r3, r3, #4
 8021b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	4a13      	ldr	r2, [pc, #76]	; (8021bac <TIM_OC1_SetConfig+0xc8>)
 8021b5e:	4293      	cmp	r3, r2
 8021b60:	d111      	bne.n	8021b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8021b62:	693b      	ldr	r3, [r7, #16]
 8021b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8021b6a:	693b      	ldr	r3, [r7, #16]
 8021b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8021b72:	683b      	ldr	r3, [r7, #0]
 8021b74:	695b      	ldr	r3, [r3, #20]
 8021b76:	693a      	ldr	r2, [r7, #16]
 8021b78:	4313      	orrs	r3, r2
 8021b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8021b7c:	683b      	ldr	r3, [r7, #0]
 8021b7e:	699b      	ldr	r3, [r3, #24]
 8021b80:	693a      	ldr	r2, [r7, #16]
 8021b82:	4313      	orrs	r3, r2
 8021b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	693a      	ldr	r2, [r7, #16]
 8021b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	68fa      	ldr	r2, [r7, #12]
 8021b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8021b92:	683b      	ldr	r3, [r7, #0]
 8021b94:	685a      	ldr	r2, [r3, #4]
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	697a      	ldr	r2, [r7, #20]
 8021b9e:	621a      	str	r2, [r3, #32]
}
 8021ba0:	bf00      	nop
 8021ba2:	371c      	adds	r7, #28
 8021ba4:	46bd      	mov	sp, r7
 8021ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021baa:	4770      	bx	lr
 8021bac:	40010000 	.word	0x40010000

08021bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021bb0:	b480      	push	{r7}
 8021bb2:	b087      	sub	sp, #28
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	6078      	str	r0, [r7, #4]
 8021bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	6a1b      	ldr	r3, [r3, #32]
 8021bbe:	f023 0210 	bic.w	r2, r3, #16
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	6a1b      	ldr	r3, [r3, #32]
 8021bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	685b      	ldr	r3, [r3, #4]
 8021bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021bd2:	687b      	ldr	r3, [r7, #4]
 8021bd4:	699b      	ldr	r3, [r3, #24]
 8021bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8021bd8:	68fb      	ldr	r3, [r7, #12]
 8021bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021be8:	683b      	ldr	r3, [r7, #0]
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	021b      	lsls	r3, r3, #8
 8021bee:	68fa      	ldr	r2, [r7, #12]
 8021bf0:	4313      	orrs	r3, r2
 8021bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8021bf4:	697b      	ldr	r3, [r7, #20]
 8021bf6:	f023 0320 	bic.w	r3, r3, #32
 8021bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8021bfc:	683b      	ldr	r3, [r7, #0]
 8021bfe:	689b      	ldr	r3, [r3, #8]
 8021c00:	011b      	lsls	r3, r3, #4
 8021c02:	697a      	ldr	r2, [r7, #20]
 8021c04:	4313      	orrs	r3, r2
 8021c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	4a1e      	ldr	r2, [pc, #120]	; (8021c84 <TIM_OC2_SetConfig+0xd4>)
 8021c0c:	4293      	cmp	r3, r2
 8021c0e:	d10d      	bne.n	8021c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8021c10:	697b      	ldr	r3, [r7, #20]
 8021c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8021c18:	683b      	ldr	r3, [r7, #0]
 8021c1a:	68db      	ldr	r3, [r3, #12]
 8021c1c:	011b      	lsls	r3, r3, #4
 8021c1e:	697a      	ldr	r2, [r7, #20]
 8021c20:	4313      	orrs	r3, r2
 8021c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8021c24:	697b      	ldr	r3, [r7, #20]
 8021c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	4a15      	ldr	r2, [pc, #84]	; (8021c84 <TIM_OC2_SetConfig+0xd4>)
 8021c30:	4293      	cmp	r3, r2
 8021c32:	d113      	bne.n	8021c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8021c34:	693b      	ldr	r3, [r7, #16]
 8021c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8021c3c:	693b      	ldr	r3, [r7, #16]
 8021c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8021c44:	683b      	ldr	r3, [r7, #0]
 8021c46:	695b      	ldr	r3, [r3, #20]
 8021c48:	009b      	lsls	r3, r3, #2
 8021c4a:	693a      	ldr	r2, [r7, #16]
 8021c4c:	4313      	orrs	r3, r2
 8021c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8021c50:	683b      	ldr	r3, [r7, #0]
 8021c52:	699b      	ldr	r3, [r3, #24]
 8021c54:	009b      	lsls	r3, r3, #2
 8021c56:	693a      	ldr	r2, [r7, #16]
 8021c58:	4313      	orrs	r3, r2
 8021c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	693a      	ldr	r2, [r7, #16]
 8021c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	68fa      	ldr	r2, [r7, #12]
 8021c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021c68:	683b      	ldr	r3, [r7, #0]
 8021c6a:	685a      	ldr	r2, [r3, #4]
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	697a      	ldr	r2, [r7, #20]
 8021c74:	621a      	str	r2, [r3, #32]
}
 8021c76:	bf00      	nop
 8021c78:	371c      	adds	r7, #28
 8021c7a:	46bd      	mov	sp, r7
 8021c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c80:	4770      	bx	lr
 8021c82:	bf00      	nop
 8021c84:	40010000 	.word	0x40010000

08021c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021c88:	b480      	push	{r7}
 8021c8a:	b087      	sub	sp, #28
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
 8021c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	6a1b      	ldr	r3, [r3, #32]
 8021c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021c9a:	687b      	ldr	r3, [r7, #4]
 8021c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	6a1b      	ldr	r3, [r3, #32]
 8021ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	685b      	ldr	r3, [r3, #4]
 8021ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	69db      	ldr	r3, [r3, #28]
 8021cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	f023 0303 	bic.w	r3, r3, #3
 8021cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021cc0:	683b      	ldr	r3, [r7, #0]
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	68fa      	ldr	r2, [r7, #12]
 8021cc6:	4313      	orrs	r3, r2
 8021cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8021cca:	697b      	ldr	r3, [r7, #20]
 8021ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021cd2:	683b      	ldr	r3, [r7, #0]
 8021cd4:	689b      	ldr	r3, [r3, #8]
 8021cd6:	021b      	lsls	r3, r3, #8
 8021cd8:	697a      	ldr	r2, [r7, #20]
 8021cda:	4313      	orrs	r3, r2
 8021cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	4a1d      	ldr	r2, [pc, #116]	; (8021d58 <TIM_OC3_SetConfig+0xd0>)
 8021ce2:	4293      	cmp	r3, r2
 8021ce4:	d10d      	bne.n	8021d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8021ce6:	697b      	ldr	r3, [r7, #20]
 8021ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8021cee:	683b      	ldr	r3, [r7, #0]
 8021cf0:	68db      	ldr	r3, [r3, #12]
 8021cf2:	021b      	lsls	r3, r3, #8
 8021cf4:	697a      	ldr	r2, [r7, #20]
 8021cf6:	4313      	orrs	r3, r2
 8021cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8021cfa:	697b      	ldr	r3, [r7, #20]
 8021cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	4a14      	ldr	r2, [pc, #80]	; (8021d58 <TIM_OC3_SetConfig+0xd0>)
 8021d06:	4293      	cmp	r3, r2
 8021d08:	d113      	bne.n	8021d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8021d0a:	693b      	ldr	r3, [r7, #16]
 8021d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8021d12:	693b      	ldr	r3, [r7, #16]
 8021d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8021d1a:	683b      	ldr	r3, [r7, #0]
 8021d1c:	695b      	ldr	r3, [r3, #20]
 8021d1e:	011b      	lsls	r3, r3, #4
 8021d20:	693a      	ldr	r2, [r7, #16]
 8021d22:	4313      	orrs	r3, r2
 8021d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8021d26:	683b      	ldr	r3, [r7, #0]
 8021d28:	699b      	ldr	r3, [r3, #24]
 8021d2a:	011b      	lsls	r3, r3, #4
 8021d2c:	693a      	ldr	r2, [r7, #16]
 8021d2e:	4313      	orrs	r3, r2
 8021d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021d32:	687b      	ldr	r3, [r7, #4]
 8021d34:	693a      	ldr	r2, [r7, #16]
 8021d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	68fa      	ldr	r2, [r7, #12]
 8021d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8021d3e:	683b      	ldr	r3, [r7, #0]
 8021d40:	685a      	ldr	r2, [r3, #4]
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	697a      	ldr	r2, [r7, #20]
 8021d4a:	621a      	str	r2, [r3, #32]
}
 8021d4c:	bf00      	nop
 8021d4e:	371c      	adds	r7, #28
 8021d50:	46bd      	mov	sp, r7
 8021d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d56:	4770      	bx	lr
 8021d58:	40010000 	.word	0x40010000

08021d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021d5c:	b480      	push	{r7}
 8021d5e:	b087      	sub	sp, #28
 8021d60:	af00      	add	r7, sp, #0
 8021d62:	6078      	str	r0, [r7, #4]
 8021d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	6a1b      	ldr	r3, [r3, #32]
 8021d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	6a1b      	ldr	r3, [r3, #32]
 8021d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	685b      	ldr	r3, [r3, #4]
 8021d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	69db      	ldr	r3, [r3, #28]
 8021d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8021d8c:	68fb      	ldr	r3, [r7, #12]
 8021d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021d94:	683b      	ldr	r3, [r7, #0]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	021b      	lsls	r3, r3, #8
 8021d9a:	68fa      	ldr	r2, [r7, #12]
 8021d9c:	4313      	orrs	r3, r2
 8021d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8021da0:	693b      	ldr	r3, [r7, #16]
 8021da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8021da8:	683b      	ldr	r3, [r7, #0]
 8021daa:	689b      	ldr	r3, [r3, #8]
 8021dac:	031b      	lsls	r3, r3, #12
 8021dae:	693a      	ldr	r2, [r7, #16]
 8021db0:	4313      	orrs	r3, r2
 8021db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	4a10      	ldr	r2, [pc, #64]	; (8021df8 <TIM_OC4_SetConfig+0x9c>)
 8021db8:	4293      	cmp	r3, r2
 8021dba:	d109      	bne.n	8021dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8021dbc:	697b      	ldr	r3, [r7, #20]
 8021dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8021dc4:	683b      	ldr	r3, [r7, #0]
 8021dc6:	695b      	ldr	r3, [r3, #20]
 8021dc8:	019b      	lsls	r3, r3, #6
 8021dca:	697a      	ldr	r2, [r7, #20]
 8021dcc:	4313      	orrs	r3, r2
 8021dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	697a      	ldr	r2, [r7, #20]
 8021dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	68fa      	ldr	r2, [r7, #12]
 8021dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8021ddc:	683b      	ldr	r3, [r7, #0]
 8021dde:	685a      	ldr	r2, [r3, #4]
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	693a      	ldr	r2, [r7, #16]
 8021de8:	621a      	str	r2, [r3, #32]
}
 8021dea:	bf00      	nop
 8021dec:	371c      	adds	r7, #28
 8021dee:	46bd      	mov	sp, r7
 8021df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021df4:	4770      	bx	lr
 8021df6:	bf00      	nop
 8021df8:	40010000 	.word	0x40010000

08021dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021dfc:	b480      	push	{r7}
 8021dfe:	b087      	sub	sp, #28
 8021e00:	af00      	add	r7, sp, #0
 8021e02:	60f8      	str	r0, [r7, #12]
 8021e04:	60b9      	str	r1, [r7, #8]
 8021e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	6a1b      	ldr	r3, [r3, #32]
 8021e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021e0e:	68fb      	ldr	r3, [r7, #12]
 8021e10:	6a1b      	ldr	r3, [r3, #32]
 8021e12:	f023 0201 	bic.w	r2, r3, #1
 8021e16:	68fb      	ldr	r3, [r7, #12]
 8021e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021e1a:	68fb      	ldr	r3, [r7, #12]
 8021e1c:	699b      	ldr	r3, [r3, #24]
 8021e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021e20:	693b      	ldr	r3, [r7, #16]
 8021e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	011b      	lsls	r3, r3, #4
 8021e2c:	693a      	ldr	r2, [r7, #16]
 8021e2e:	4313      	orrs	r3, r2
 8021e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021e32:	697b      	ldr	r3, [r7, #20]
 8021e34:	f023 030a 	bic.w	r3, r3, #10
 8021e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8021e3a:	697a      	ldr	r2, [r7, #20]
 8021e3c:	68bb      	ldr	r3, [r7, #8]
 8021e3e:	4313      	orrs	r3, r2
 8021e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021e42:	68fb      	ldr	r3, [r7, #12]
 8021e44:	693a      	ldr	r2, [r7, #16]
 8021e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021e48:	68fb      	ldr	r3, [r7, #12]
 8021e4a:	697a      	ldr	r2, [r7, #20]
 8021e4c:	621a      	str	r2, [r3, #32]
}
 8021e4e:	bf00      	nop
 8021e50:	371c      	adds	r7, #28
 8021e52:	46bd      	mov	sp, r7
 8021e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e58:	4770      	bx	lr

08021e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021e5a:	b480      	push	{r7}
 8021e5c:	b087      	sub	sp, #28
 8021e5e:	af00      	add	r7, sp, #0
 8021e60:	60f8      	str	r0, [r7, #12]
 8021e62:	60b9      	str	r1, [r7, #8]
 8021e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021e66:	68fb      	ldr	r3, [r7, #12]
 8021e68:	6a1b      	ldr	r3, [r3, #32]
 8021e6a:	f023 0210 	bic.w	r2, r3, #16
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021e72:	68fb      	ldr	r3, [r7, #12]
 8021e74:	699b      	ldr	r3, [r3, #24]
 8021e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	6a1b      	ldr	r3, [r3, #32]
 8021e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021e7e:	697b      	ldr	r3, [r7, #20]
 8021e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	031b      	lsls	r3, r3, #12
 8021e8a:	697a      	ldr	r2, [r7, #20]
 8021e8c:	4313      	orrs	r3, r2
 8021e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021e90:	693b      	ldr	r3, [r7, #16]
 8021e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021e98:	68bb      	ldr	r3, [r7, #8]
 8021e9a:	011b      	lsls	r3, r3, #4
 8021e9c:	693a      	ldr	r2, [r7, #16]
 8021e9e:	4313      	orrs	r3, r2
 8021ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021ea2:	68fb      	ldr	r3, [r7, #12]
 8021ea4:	697a      	ldr	r2, [r7, #20]
 8021ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021ea8:	68fb      	ldr	r3, [r7, #12]
 8021eaa:	693a      	ldr	r2, [r7, #16]
 8021eac:	621a      	str	r2, [r3, #32]
}
 8021eae:	bf00      	nop
 8021eb0:	371c      	adds	r7, #28
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eb8:	4770      	bx	lr

08021eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8021eba:	b480      	push	{r7}
 8021ebc:	b085      	sub	sp, #20
 8021ebe:	af00      	add	r7, sp, #0
 8021ec0:	6078      	str	r0, [r7, #4]
 8021ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	689b      	ldr	r3, [r3, #8]
 8021ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8021eca:	68fb      	ldr	r3, [r7, #12]
 8021ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021ed2:	683a      	ldr	r2, [r7, #0]
 8021ed4:	68fb      	ldr	r3, [r7, #12]
 8021ed6:	4313      	orrs	r3, r2
 8021ed8:	f043 0307 	orr.w	r3, r3, #7
 8021edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	68fa      	ldr	r2, [r7, #12]
 8021ee2:	609a      	str	r2, [r3, #8]
}
 8021ee4:	bf00      	nop
 8021ee6:	3714      	adds	r7, #20
 8021ee8:	46bd      	mov	sp, r7
 8021eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eee:	4770      	bx	lr

08021ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021ef0:	b480      	push	{r7}
 8021ef2:	b087      	sub	sp, #28
 8021ef4:	af00      	add	r7, sp, #0
 8021ef6:	60f8      	str	r0, [r7, #12]
 8021ef8:	60b9      	str	r1, [r7, #8]
 8021efa:	607a      	str	r2, [r7, #4]
 8021efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021efe:	68fb      	ldr	r3, [r7, #12]
 8021f00:	689b      	ldr	r3, [r3, #8]
 8021f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021f04:	697b      	ldr	r3, [r7, #20]
 8021f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021f0c:	683b      	ldr	r3, [r7, #0]
 8021f0e:	021a      	lsls	r2, r3, #8
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	431a      	orrs	r2, r3
 8021f14:	68bb      	ldr	r3, [r7, #8]
 8021f16:	4313      	orrs	r3, r2
 8021f18:	697a      	ldr	r2, [r7, #20]
 8021f1a:	4313      	orrs	r3, r2
 8021f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021f1e:	68fb      	ldr	r3, [r7, #12]
 8021f20:	697a      	ldr	r2, [r7, #20]
 8021f22:	609a      	str	r2, [r3, #8]
}
 8021f24:	bf00      	nop
 8021f26:	371c      	adds	r7, #28
 8021f28:	46bd      	mov	sp, r7
 8021f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f2e:	4770      	bx	lr

08021f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8021f30:	b480      	push	{r7}
 8021f32:	b087      	sub	sp, #28
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	60f8      	str	r0, [r7, #12]
 8021f38:	60b9      	str	r1, [r7, #8]
 8021f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021f3c:	68bb      	ldr	r3, [r7, #8]
 8021f3e:	f003 031f 	and.w	r3, r3, #31
 8021f42:	2201      	movs	r2, #1
 8021f44:	fa02 f303 	lsl.w	r3, r2, r3
 8021f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	6a1a      	ldr	r2, [r3, #32]
 8021f4e:	697b      	ldr	r3, [r7, #20]
 8021f50:	43db      	mvns	r3, r3
 8021f52:	401a      	ands	r2, r3
 8021f54:	68fb      	ldr	r3, [r7, #12]
 8021f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021f58:	68fb      	ldr	r3, [r7, #12]
 8021f5a:	6a1a      	ldr	r2, [r3, #32]
 8021f5c:	68bb      	ldr	r3, [r7, #8]
 8021f5e:	f003 031f 	and.w	r3, r3, #31
 8021f62:	6879      	ldr	r1, [r7, #4]
 8021f64:	fa01 f303 	lsl.w	r3, r1, r3
 8021f68:	431a      	orrs	r2, r3
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	621a      	str	r2, [r3, #32]
}
 8021f6e:	bf00      	nop
 8021f70:	371c      	adds	r7, #28
 8021f72:	46bd      	mov	sp, r7
 8021f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f78:	4770      	bx	lr
	...

08021f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021f7c:	b480      	push	{r7}
 8021f7e:	b085      	sub	sp, #20
 8021f80:	af00      	add	r7, sp, #0
 8021f82:	6078      	str	r0, [r7, #4]
 8021f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021f8c:	2b01      	cmp	r3, #1
 8021f8e:	d101      	bne.n	8021f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021f90:	2302      	movs	r3, #2
 8021f92:	e050      	b.n	8022036 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	2201      	movs	r2, #1
 8021f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	2202      	movs	r2, #2
 8021fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	685b      	ldr	r3, [r3, #4]
 8021faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	689b      	ldr	r3, [r3, #8]
 8021fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021fb4:	68fb      	ldr	r3, [r7, #12]
 8021fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021fbc:	683b      	ldr	r3, [r7, #0]
 8021fbe:	681b      	ldr	r3, [r3, #0]
 8021fc0:	68fa      	ldr	r2, [r7, #12]
 8021fc2:	4313      	orrs	r3, r2
 8021fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	68fa      	ldr	r2, [r7, #12]
 8021fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	4a1c      	ldr	r2, [pc, #112]	; (8022044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021fd4:	4293      	cmp	r3, r2
 8021fd6:	d018      	beq.n	802200a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021fe0:	d013      	beq.n	802200a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	4a18      	ldr	r2, [pc, #96]	; (8022048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8021fe8:	4293      	cmp	r3, r2
 8021fea:	d00e      	beq.n	802200a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	681b      	ldr	r3, [r3, #0]
 8021ff0:	4a16      	ldr	r2, [pc, #88]	; (802204c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8021ff2:	4293      	cmp	r3, r2
 8021ff4:	d009      	beq.n	802200a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	4a15      	ldr	r2, [pc, #84]	; (8022050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	d004      	beq.n	802200a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	681b      	ldr	r3, [r3, #0]
 8022004:	4a13      	ldr	r2, [pc, #76]	; (8022054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8022006:	4293      	cmp	r3, r2
 8022008:	d10c      	bne.n	8022024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802200a:	68bb      	ldr	r3, [r7, #8]
 802200c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022012:	683b      	ldr	r3, [r7, #0]
 8022014:	685b      	ldr	r3, [r3, #4]
 8022016:	68ba      	ldr	r2, [r7, #8]
 8022018:	4313      	orrs	r3, r2
 802201a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	681b      	ldr	r3, [r3, #0]
 8022020:	68ba      	ldr	r2, [r7, #8]
 8022022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	2201      	movs	r2, #1
 8022028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	2200      	movs	r2, #0
 8022030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022034:	2300      	movs	r3, #0
}
 8022036:	4618      	mov	r0, r3
 8022038:	3714      	adds	r7, #20
 802203a:	46bd      	mov	sp, r7
 802203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022040:	4770      	bx	lr
 8022042:	bf00      	nop
 8022044:	40010000 	.word	0x40010000
 8022048:	40000400 	.word	0x40000400
 802204c:	40000800 	.word	0x40000800
 8022050:	40000c00 	.word	0x40000c00
 8022054:	40014000 	.word	0x40014000

08022058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8022058:	b480      	push	{r7}
 802205a:	b083      	sub	sp, #12
 802205c:	af00      	add	r7, sp, #0
 802205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8022060:	bf00      	nop
 8022062:	370c      	adds	r7, #12
 8022064:	46bd      	mov	sp, r7
 8022066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802206a:	4770      	bx	lr

0802206c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802206c:	b480      	push	{r7}
 802206e:	b083      	sub	sp, #12
 8022070:	af00      	add	r7, sp, #0
 8022072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8022074:	bf00      	nop
 8022076:	370c      	adds	r7, #12
 8022078:	46bd      	mov	sp, r7
 802207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802207e:	4770      	bx	lr

08022080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022080:	b580      	push	{r7, lr}
 8022082:	b082      	sub	sp, #8
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	2b00      	cmp	r3, #0
 802208c:	d101      	bne.n	8022092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802208e:	2301      	movs	r3, #1
 8022090:	e03f      	b.n	8022112 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022098:	b2db      	uxtb	r3, r3
 802209a:	2b00      	cmp	r3, #0
 802209c:	d106      	bne.n	80220ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	2200      	movs	r2, #0
 80220a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80220a6:	6878      	ldr	r0, [r7, #4]
 80220a8:	f7e1 fbb0 	bl	800380c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	2224      	movs	r2, #36	; 0x24
 80220b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	68da      	ldr	r2, [r3, #12]
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80220c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80220c4:	6878      	ldr	r0, [r7, #4]
 80220c6:	f000 fec7 	bl	8022e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80220ca:	687b      	ldr	r3, [r7, #4]
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	691a      	ldr	r2, [r3, #16]
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80220d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	681b      	ldr	r3, [r3, #0]
 80220de:	695a      	ldr	r2, [r3, #20]
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80220e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	68da      	ldr	r2, [r3, #12]
 80220f0:	687b      	ldr	r3, [r7, #4]
 80220f2:	681b      	ldr	r3, [r3, #0]
 80220f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80220f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	2200      	movs	r2, #0
 80220fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	2220      	movs	r2, #32
 8022104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	2220      	movs	r2, #32
 802210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8022110:	2300      	movs	r3, #0
}
 8022112:	4618      	mov	r0, r3
 8022114:	3708      	adds	r7, #8
 8022116:	46bd      	mov	sp, r7
 8022118:	bd80      	pop	{r7, pc}

0802211a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802211a:	b580      	push	{r7, lr}
 802211c:	b082      	sub	sp, #8
 802211e:	af00      	add	r7, sp, #0
 8022120:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d101      	bne.n	802212c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8022128:	2301      	movs	r3, #1
 802212a:	e021      	b.n	8022170 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	2224      	movs	r2, #36	; 0x24
 8022130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	681b      	ldr	r3, [r3, #0]
 8022138:	68da      	ldr	r2, [r3, #12]
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	681b      	ldr	r3, [r3, #0]
 802213e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022142:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8022144:	6878      	ldr	r0, [r7, #4]
 8022146:	f7e1 fc2b 	bl	80039a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	2200      	movs	r2, #0
 802214e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	2200      	movs	r2, #0
 8022154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	2200      	movs	r2, #0
 802215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	2200      	movs	r2, #0
 8022164:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	2200      	movs	r2, #0
 802216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802216e:	2300      	movs	r3, #0
}
 8022170:	4618      	mov	r0, r3
 8022172:	3708      	adds	r7, #8
 8022174:	46bd      	mov	sp, r7
 8022176:	bd80      	pop	{r7, pc}

08022178 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8022178:	b480      	push	{r7}
 802217a:	b085      	sub	sp, #20
 802217c:	af00      	add	r7, sp, #0
 802217e:	60f8      	str	r0, [r7, #12]
 8022180:	60b9      	str	r1, [r7, #8]
 8022182:	4613      	mov	r3, r2
 8022184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802218c:	b2db      	uxtb	r3, r3
 802218e:	2b20      	cmp	r3, #32
 8022190:	d130      	bne.n	80221f4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8022192:	68bb      	ldr	r3, [r7, #8]
 8022194:	2b00      	cmp	r3, #0
 8022196:	d002      	beq.n	802219e <HAL_UART_Transmit_IT+0x26>
 8022198:	88fb      	ldrh	r3, [r7, #6]
 802219a:	2b00      	cmp	r3, #0
 802219c:	d101      	bne.n	80221a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802219e:	2301      	movs	r3, #1
 80221a0:	e029      	b.n	80221f6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80221a2:	68fb      	ldr	r3, [r7, #12]
 80221a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80221a8:	2b01      	cmp	r3, #1
 80221aa:	d101      	bne.n	80221b0 <HAL_UART_Transmit_IT+0x38>
 80221ac:	2302      	movs	r3, #2
 80221ae:	e022      	b.n	80221f6 <HAL_UART_Transmit_IT+0x7e>
 80221b0:	68fb      	ldr	r3, [r7, #12]
 80221b2:	2201      	movs	r2, #1
 80221b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80221b8:	68fb      	ldr	r3, [r7, #12]
 80221ba:	68ba      	ldr	r2, [r7, #8]
 80221bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80221be:	68fb      	ldr	r3, [r7, #12]
 80221c0:	88fa      	ldrh	r2, [r7, #6]
 80221c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80221c4:	68fb      	ldr	r3, [r7, #12]
 80221c6:	88fa      	ldrh	r2, [r7, #6]
 80221c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	2200      	movs	r2, #0
 80221ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80221d0:	68fb      	ldr	r3, [r7, #12]
 80221d2:	2221      	movs	r2, #33	; 0x21
 80221d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80221d8:	68fb      	ldr	r3, [r7, #12]
 80221da:	2200      	movs	r2, #0
 80221dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80221e0:	68fb      	ldr	r3, [r7, #12]
 80221e2:	681b      	ldr	r3, [r3, #0]
 80221e4:	68da      	ldr	r2, [r3, #12]
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	681b      	ldr	r3, [r3, #0]
 80221ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80221ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80221f0:	2300      	movs	r3, #0
 80221f2:	e000      	b.n	80221f6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80221f4:	2302      	movs	r3, #2
  }
}
 80221f6:	4618      	mov	r0, r3
 80221f8:	3714      	adds	r7, #20
 80221fa:	46bd      	mov	sp, r7
 80221fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022200:	4770      	bx	lr

08022202 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022202:	b580      	push	{r7, lr}
 8022204:	b084      	sub	sp, #16
 8022206:	af00      	add	r7, sp, #0
 8022208:	60f8      	str	r0, [r7, #12]
 802220a:	60b9      	str	r1, [r7, #8]
 802220c:	4613      	mov	r3, r2
 802220e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022210:	68fb      	ldr	r3, [r7, #12]
 8022212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022216:	b2db      	uxtb	r3, r3
 8022218:	2b20      	cmp	r3, #32
 802221a:	d11d      	bne.n	8022258 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802221c:	68bb      	ldr	r3, [r7, #8]
 802221e:	2b00      	cmp	r3, #0
 8022220:	d002      	beq.n	8022228 <HAL_UART_Receive_IT+0x26>
 8022222:	88fb      	ldrh	r3, [r7, #6]
 8022224:	2b00      	cmp	r3, #0
 8022226:	d101      	bne.n	802222c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8022228:	2301      	movs	r3, #1
 802222a:	e016      	b.n	802225a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802222c:	68fb      	ldr	r3, [r7, #12]
 802222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022232:	2b01      	cmp	r3, #1
 8022234:	d101      	bne.n	802223a <HAL_UART_Receive_IT+0x38>
 8022236:	2302      	movs	r3, #2
 8022238:	e00f      	b.n	802225a <HAL_UART_Receive_IT+0x58>
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	2201      	movs	r2, #1
 802223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	2200      	movs	r2, #0
 8022246:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8022248:	88fb      	ldrh	r3, [r7, #6]
 802224a:	461a      	mov	r2, r3
 802224c:	68b9      	ldr	r1, [r7, #8]
 802224e:	68f8      	ldr	r0, [r7, #12]
 8022250:	f000 fbca 	bl	80229e8 <UART_Start_Receive_IT>
 8022254:	4603      	mov	r3, r0
 8022256:	e000      	b.n	802225a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8022258:	2302      	movs	r3, #2
  }
}
 802225a:	4618      	mov	r0, r3
 802225c:	3710      	adds	r7, #16
 802225e:	46bd      	mov	sp, r7
 8022260:	bd80      	pop	{r7, pc}
	...

08022264 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8022264:	b580      	push	{r7, lr}
 8022266:	b0a2      	sub	sp, #136	; 0x88
 8022268:	af00      	add	r7, sp, #0
 802226a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 802226c:	2301      	movs	r3, #1
 802226e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	681b      	ldr	r3, [r3, #0]
 8022276:	330c      	adds	r3, #12
 8022278:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802227a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802227c:	e853 3f00 	ldrex	r3, [r3]
 8022280:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022284:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8022288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	330c      	adds	r3, #12
 8022292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022298:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802229a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802229c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802229e:	e841 2300 	strex	r3, r2, [r1]
 80222a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80222a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d1e3      	bne.n	8022272 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	681b      	ldr	r3, [r3, #0]
 80222ae:	3314      	adds	r3, #20
 80222b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80222b4:	e853 3f00 	ldrex	r3, [r3]
 80222b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80222ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80222bc:	f023 0301 	bic.w	r3, r3, #1
 80222c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	681b      	ldr	r3, [r3, #0]
 80222c6:	3314      	adds	r3, #20
 80222c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80222ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80222cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80222d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80222d2:	e841 2300 	strex	r3, r2, [r1]
 80222d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80222d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d1e5      	bne.n	80222aa <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222e2:	2b01      	cmp	r3, #1
 80222e4:	d119      	bne.n	802231a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	681b      	ldr	r3, [r3, #0]
 80222ea:	330c      	adds	r3, #12
 80222ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222f0:	e853 3f00 	ldrex	r3, [r3]
 80222f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80222f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80222f8:	f023 0310 	bic.w	r3, r3, #16
 80222fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	681b      	ldr	r3, [r3, #0]
 8022302:	330c      	adds	r3, #12
 8022304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8022306:	647a      	str	r2, [r7, #68]	; 0x44
 8022308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802230a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802230c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802230e:	e841 2300 	strex	r3, r2, [r1]
 8022312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022316:	2b00      	cmp	r3, #0
 8022318:	d1e5      	bne.n	80222e6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802231e:	2b00      	cmp	r3, #0
 8022320:	d00f      	beq.n	8022342 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	695b      	ldr	r3, [r3, #20]
 8022328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802232c:	2b80      	cmp	r3, #128	; 0x80
 802232e:	d104      	bne.n	802233a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022334:	4a53      	ldr	r2, [pc, #332]	; (8022484 <HAL_UART_Abort_IT+0x220>)
 8022336:	651a      	str	r2, [r3, #80]	; 0x50
 8022338:	e003      	b.n	8022342 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802233e:	2200      	movs	r2, #0
 8022340:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022346:	2b00      	cmp	r3, #0
 8022348:	d00f      	beq.n	802236a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	695b      	ldr	r3, [r3, #20]
 8022350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022354:	2b40      	cmp	r3, #64	; 0x40
 8022356:	d104      	bne.n	8022362 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802235c:	4a4a      	ldr	r2, [pc, #296]	; (8022488 <HAL_UART_Abort_IT+0x224>)
 802235e:	651a      	str	r2, [r3, #80]	; 0x50
 8022360:	e003      	b.n	802236a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022366:	2200      	movs	r2, #0
 8022368:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	681b      	ldr	r3, [r3, #0]
 802236e:	695b      	ldr	r3, [r3, #20]
 8022370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022374:	2b80      	cmp	r3, #128	; 0x80
 8022376:	d12d      	bne.n	80223d4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	3314      	adds	r3, #20
 802237e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022382:	e853 3f00 	ldrex	r3, [r3]
 8022386:	623b      	str	r3, [r7, #32]
   return(result);
 8022388:	6a3b      	ldr	r3, [r7, #32]
 802238a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802238e:	677b      	str	r3, [r7, #116]	; 0x74
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	3314      	adds	r3, #20
 8022396:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022398:	633a      	str	r2, [r7, #48]	; 0x30
 802239a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802239c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802239e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223a0:	e841 2300 	strex	r3, r2, [r1]
 80223a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80223a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d1e5      	bne.n	8022378 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d00f      	beq.n	80223d4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80223b8:	4618      	mov	r0, r3
 80223ba:	f7fa fcdf 	bl	801cd7c <HAL_DMA_Abort_IT>
 80223be:	4603      	mov	r3, r0
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d004      	beq.n	80223ce <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80223c8:	2200      	movs	r2, #0
 80223ca:	651a      	str	r2, [r3, #80]	; 0x50
 80223cc:	e002      	b.n	80223d4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80223ce:	2300      	movs	r3, #0
 80223d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	681b      	ldr	r3, [r3, #0]
 80223d8:	695b      	ldr	r3, [r3, #20]
 80223da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80223de:	2b40      	cmp	r3, #64	; 0x40
 80223e0:	d130      	bne.n	8022444 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	3314      	adds	r3, #20
 80223e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223ea:	693b      	ldr	r3, [r7, #16]
 80223ec:	e853 3f00 	ldrex	r3, [r3]
 80223f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80223f2:	68fb      	ldr	r3, [r7, #12]
 80223f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80223f8:	673b      	str	r3, [r7, #112]	; 0x70
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	3314      	adds	r3, #20
 8022400:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022402:	61fa      	str	r2, [r7, #28]
 8022404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022406:	69b9      	ldr	r1, [r7, #24]
 8022408:	69fa      	ldr	r2, [r7, #28]
 802240a:	e841 2300 	strex	r3, r2, [r1]
 802240e:	617b      	str	r3, [r7, #20]
   return(result);
 8022410:	697b      	ldr	r3, [r7, #20]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d1e5      	bne.n	80223e2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802241a:	2b00      	cmp	r3, #0
 802241c:	d012      	beq.n	8022444 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022422:	4618      	mov	r0, r3
 8022424:	f7fa fcaa 	bl	801cd7c <HAL_DMA_Abort_IT>
 8022428:	4603      	mov	r3, r0
 802242a:	2b00      	cmp	r3, #0
 802242c:	d007      	beq.n	802243e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 802242e:	687b      	ldr	r3, [r7, #4]
 8022430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022432:	2200      	movs	r2, #0
 8022434:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8022436:	2301      	movs	r3, #1
 8022438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802243c:	e002      	b.n	8022444 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 802243e:	2300      	movs	r3, #0
 8022440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8022444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022448:	2b01      	cmp	r3, #1
 802244a:	d116      	bne.n	802247a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	2200      	movs	r2, #0
 8022450:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	2200      	movs	r2, #0
 8022456:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	2200      	movs	r2, #0
 802245c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	2220      	movs	r2, #32
 8022462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	2220      	movs	r2, #32
 802246a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	2200      	movs	r2, #0
 8022472:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8022474:	6878      	ldr	r0, [r7, #4]
 8022476:	f000 faa1 	bl	80229bc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 802247a:	2300      	movs	r3, #0
}
 802247c:	4618      	mov	r0, r3
 802247e:	3788      	adds	r7, #136	; 0x88
 8022480:	46bd      	mov	sp, r7
 8022482:	bd80      	pop	{r7, pc}
 8022484:	08022b53 	.word	0x08022b53
 8022488:	08022bb3 	.word	0x08022bb3

0802248c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802248c:	b580      	push	{r7, lr}
 802248e:	b0ba      	sub	sp, #232	; 0xe8
 8022490:	af00      	add	r7, sp, #0
 8022492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	68db      	ldr	r3, [r3, #12]
 80224a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	695b      	ldr	r3, [r3, #20]
 80224ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80224b2:	2300      	movs	r3, #0
 80224b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80224b8:	2300      	movs	r3, #0
 80224ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80224be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80224c2:	f003 030f 	and.w	r3, r3, #15
 80224c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80224ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d10f      	bne.n	80224f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80224d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80224d6:	f003 0320 	and.w	r3, r3, #32
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d009      	beq.n	80224f2 <HAL_UART_IRQHandler+0x66>
 80224de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80224e2:	f003 0320 	and.w	r3, r3, #32
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	d003      	beq.n	80224f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80224ea:	6878      	ldr	r0, [r7, #4]
 80224ec:	f000 fbf9 	bl	8022ce2 <UART_Receive_IT>
      return;
 80224f0:	e256      	b.n	80229a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80224f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	f000 80de 	beq.w	80226b8 <HAL_UART_IRQHandler+0x22c>
 80224fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022500:	f003 0301 	and.w	r3, r3, #1
 8022504:	2b00      	cmp	r3, #0
 8022506:	d106      	bne.n	8022516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8022508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802250c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8022510:	2b00      	cmp	r3, #0
 8022512:	f000 80d1 	beq.w	80226b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802251a:	f003 0301 	and.w	r3, r3, #1
 802251e:	2b00      	cmp	r3, #0
 8022520:	d00b      	beq.n	802253a <HAL_UART_IRQHandler+0xae>
 8022522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802252a:	2b00      	cmp	r3, #0
 802252c:	d005      	beq.n	802253a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022532:	f043 0201 	orr.w	r2, r3, #1
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802253e:	f003 0304 	and.w	r3, r3, #4
 8022542:	2b00      	cmp	r3, #0
 8022544:	d00b      	beq.n	802255e <HAL_UART_IRQHandler+0xd2>
 8022546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802254a:	f003 0301 	and.w	r3, r3, #1
 802254e:	2b00      	cmp	r3, #0
 8022550:	d005      	beq.n	802255e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022556:	f043 0202 	orr.w	r2, r3, #2
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022562:	f003 0302 	and.w	r3, r3, #2
 8022566:	2b00      	cmp	r3, #0
 8022568:	d00b      	beq.n	8022582 <HAL_UART_IRQHandler+0xf6>
 802256a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802256e:	f003 0301 	and.w	r3, r3, #1
 8022572:	2b00      	cmp	r3, #0
 8022574:	d005      	beq.n	8022582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802257a:	f043 0204 	orr.w	r2, r3, #4
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8022582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022586:	f003 0308 	and.w	r3, r3, #8
 802258a:	2b00      	cmp	r3, #0
 802258c:	d011      	beq.n	80225b2 <HAL_UART_IRQHandler+0x126>
 802258e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022592:	f003 0320 	and.w	r3, r3, #32
 8022596:	2b00      	cmp	r3, #0
 8022598:	d105      	bne.n	80225a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802259e:	f003 0301 	and.w	r3, r3, #1
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d005      	beq.n	80225b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225aa:	f043 0208 	orr.w	r2, r3, #8
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	f000 81ed 	beq.w	8022996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80225bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80225c0:	f003 0320 	and.w	r3, r3, #32
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d008      	beq.n	80225da <HAL_UART_IRQHandler+0x14e>
 80225c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80225cc:	f003 0320 	and.w	r3, r3, #32
 80225d0:	2b00      	cmp	r3, #0
 80225d2:	d002      	beq.n	80225da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80225d4:	6878      	ldr	r0, [r7, #4]
 80225d6:	f000 fb84 	bl	8022ce2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	681b      	ldr	r3, [r3, #0]
 80225de:	695b      	ldr	r3, [r3, #20]
 80225e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80225e4:	2b40      	cmp	r3, #64	; 0x40
 80225e6:	bf0c      	ite	eq
 80225e8:	2301      	moveq	r3, #1
 80225ea:	2300      	movne	r3, #0
 80225ec:	b2db      	uxtb	r3, r3
 80225ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225f6:	f003 0308 	and.w	r3, r3, #8
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d103      	bne.n	8022606 <HAL_UART_IRQHandler+0x17a>
 80225fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8022602:	2b00      	cmp	r3, #0
 8022604:	d04f      	beq.n	80226a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8022606:	6878      	ldr	r0, [r7, #4]
 8022608:	f000 fa2c 	bl	8022a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	695b      	ldr	r3, [r3, #20]
 8022612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022616:	2b40      	cmp	r3, #64	; 0x40
 8022618:	d141      	bne.n	802269e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	681b      	ldr	r3, [r3, #0]
 802261e:	3314      	adds	r3, #20
 8022620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8022628:	e853 3f00 	ldrex	r3, [r3]
 802262c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8022630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	3314      	adds	r3, #20
 8022642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8022646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802264a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802264e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8022652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8022656:	e841 2300 	strex	r3, r2, [r1]
 802265a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802265e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022662:	2b00      	cmp	r3, #0
 8022664:	d1d9      	bne.n	802261a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802266a:	2b00      	cmp	r3, #0
 802266c:	d013      	beq.n	8022696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022672:	4a7d      	ldr	r2, [pc, #500]	; (8022868 <HAL_UART_IRQHandler+0x3dc>)
 8022674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802267a:	4618      	mov	r0, r3
 802267c:	f7fa fb7e 	bl	801cd7c <HAL_DMA_Abort_IT>
 8022680:	4603      	mov	r3, r0
 8022682:	2b00      	cmp	r3, #0
 8022684:	d016      	beq.n	80226b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802268c:	687a      	ldr	r2, [r7, #4]
 802268e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8022690:	4610      	mov	r0, r2
 8022692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022694:	e00e      	b.n	80226b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8022696:	6878      	ldr	r0, [r7, #4]
 8022698:	f000 f986 	bl	80229a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802269c:	e00a      	b.n	80226b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802269e:	6878      	ldr	r0, [r7, #4]
 80226a0:	f000 f982 	bl	80229a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80226a4:	e006      	b.n	80226b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80226a6:	6878      	ldr	r0, [r7, #4]
 80226a8:	f000 f97e 	bl	80229a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	2200      	movs	r2, #0
 80226b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80226b2:	e170      	b.n	8022996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80226b4:	bf00      	nop
    return;
 80226b6:	e16e      	b.n	8022996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226bc:	2b01      	cmp	r3, #1
 80226be:	f040 814a 	bne.w	8022956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80226c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80226c6:	f003 0310 	and.w	r3, r3, #16
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	f000 8143 	beq.w	8022956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80226d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80226d4:	f003 0310 	and.w	r3, r3, #16
 80226d8:	2b00      	cmp	r3, #0
 80226da:	f000 813c 	beq.w	8022956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80226de:	2300      	movs	r3, #0
 80226e0:	60bb      	str	r3, [r7, #8]
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	60bb      	str	r3, [r7, #8]
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	685b      	ldr	r3, [r3, #4]
 80226f0:	60bb      	str	r3, [r7, #8]
 80226f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	695b      	ldr	r3, [r3, #20]
 80226fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80226fe:	2b40      	cmp	r3, #64	; 0x40
 8022700:	f040 80b4 	bne.w	802286c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	685b      	ldr	r3, [r3, #4]
 802270c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8022710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8022714:	2b00      	cmp	r3, #0
 8022716:	f000 8140 	beq.w	802299a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802271e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8022722:	429a      	cmp	r2, r3
 8022724:	f080 8139 	bcs.w	802299a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802272e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022734:	69db      	ldr	r3, [r3, #28]
 8022736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802273a:	f000 8088 	beq.w	802284e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	330c      	adds	r3, #12
 8022744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802274c:	e853 3f00 	ldrex	r3, [r3]
 8022750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8022754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802275c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022760:	687b      	ldr	r3, [r7, #4]
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	330c      	adds	r3, #12
 8022766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802276a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802276e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8022776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802277a:	e841 2300 	strex	r3, r2, [r1]
 802277e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8022782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022786:	2b00      	cmp	r3, #0
 8022788:	d1d9      	bne.n	802273e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	3314      	adds	r3, #20
 8022790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022794:	e853 3f00 	ldrex	r3, [r3]
 8022798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802279c:	f023 0301 	bic.w	r3, r3, #1
 80227a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	3314      	adds	r3, #20
 80227aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80227ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80227b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80227b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80227b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80227ba:	e841 2300 	strex	r3, r2, [r1]
 80227be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80227c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	d1e1      	bne.n	802278a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	3314      	adds	r3, #20
 80227cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80227ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80227d0:	e853 3f00 	ldrex	r3, [r3]
 80227d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80227d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80227d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80227dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	3314      	adds	r3, #20
 80227e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80227ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80227ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80227ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80227f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80227f2:	e841 2300 	strex	r3, r2, [r1]
 80227f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80227f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	d1e3      	bne.n	80227c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	2220      	movs	r2, #32
 8022802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	2200      	movs	r2, #0
 802280a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	330c      	adds	r3, #12
 8022812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022816:	e853 3f00 	ldrex	r3, [r3]
 802281a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802281c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802281e:	f023 0310 	bic.w	r3, r3, #16
 8022822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	330c      	adds	r3, #12
 802282c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8022830:	65ba      	str	r2, [r7, #88]	; 0x58
 8022832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022838:	e841 2300 	strex	r3, r2, [r1]
 802283c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022840:	2b00      	cmp	r3, #0
 8022842:	d1e3      	bne.n	802280c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022848:	4618      	mov	r0, r3
 802284a:	f7fa fa27 	bl	801cc9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022856:	b29b      	uxth	r3, r3
 8022858:	1ad3      	subs	r3, r2, r3
 802285a:	b29b      	uxth	r3, r3
 802285c:	4619      	mov	r1, r3
 802285e:	6878      	ldr	r0, [r7, #4]
 8022860:	f000 f8b6 	bl	80229d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022864:	e099      	b.n	802299a <HAL_UART_IRQHandler+0x50e>
 8022866:	bf00      	nop
 8022868:	08022b2b 	.word	0x08022b2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022874:	b29b      	uxth	r3, r3
 8022876:	1ad3      	subs	r3, r2, r3
 8022878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022880:	b29b      	uxth	r3, r3
 8022882:	2b00      	cmp	r3, #0
 8022884:	f000 808b 	beq.w	802299e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8022888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802288c:	2b00      	cmp	r3, #0
 802288e:	f000 8086 	beq.w	802299e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	330c      	adds	r3, #12
 8022898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802289c:	e853 3f00 	ldrex	r3, [r3]
 80228a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80228a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80228a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80228a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	330c      	adds	r3, #12
 80228b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80228b6:	647a      	str	r2, [r7, #68]	; 0x44
 80228b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80228ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80228bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80228be:	e841 2300 	strex	r3, r2, [r1]
 80228c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80228c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	d1e3      	bne.n	8022892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	3314      	adds	r3, #20
 80228d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80228d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228d4:	e853 3f00 	ldrex	r3, [r3]
 80228d8:	623b      	str	r3, [r7, #32]
   return(result);
 80228da:	6a3b      	ldr	r3, [r7, #32]
 80228dc:	f023 0301 	bic.w	r3, r3, #1
 80228e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	3314      	adds	r3, #20
 80228ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80228ee:	633a      	str	r2, [r7, #48]	; 0x30
 80228f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80228f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80228f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80228f6:	e841 2300 	strex	r3, r2, [r1]
 80228fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80228fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d1e3      	bne.n	80228ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8022902:	687b      	ldr	r3, [r7, #4]
 8022904:	2220      	movs	r2, #32
 8022906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	2200      	movs	r2, #0
 802290e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	330c      	adds	r3, #12
 8022916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022918:	693b      	ldr	r3, [r7, #16]
 802291a:	e853 3f00 	ldrex	r3, [r3]
 802291e:	60fb      	str	r3, [r7, #12]
   return(result);
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	f023 0310 	bic.w	r3, r3, #16
 8022926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	330c      	adds	r3, #12
 8022930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8022934:	61fa      	str	r2, [r7, #28]
 8022936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022938:	69b9      	ldr	r1, [r7, #24]
 802293a:	69fa      	ldr	r2, [r7, #28]
 802293c:	e841 2300 	strex	r3, r2, [r1]
 8022940:	617b      	str	r3, [r7, #20]
   return(result);
 8022942:	697b      	ldr	r3, [r7, #20]
 8022944:	2b00      	cmp	r3, #0
 8022946:	d1e3      	bne.n	8022910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8022948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802294c:	4619      	mov	r1, r3
 802294e:	6878      	ldr	r0, [r7, #4]
 8022950:	f000 f83e 	bl	80229d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022954:	e023      	b.n	802299e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802295e:	2b00      	cmp	r3, #0
 8022960:	d009      	beq.n	8022976 <HAL_UART_IRQHandler+0x4ea>
 8022962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802296a:	2b00      	cmp	r3, #0
 802296c:	d003      	beq.n	8022976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802296e:	6878      	ldr	r0, [r7, #4]
 8022970:	f000 f94f 	bl	8022c12 <UART_Transmit_IT>
    return;
 8022974:	e014      	b.n	80229a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8022976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802297e:	2b00      	cmp	r3, #0
 8022980:	d00e      	beq.n	80229a0 <HAL_UART_IRQHandler+0x514>
 8022982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802298a:	2b00      	cmp	r3, #0
 802298c:	d008      	beq.n	80229a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802298e:	6878      	ldr	r0, [r7, #4]
 8022990:	f000 f98f 	bl	8022cb2 <UART_EndTransmit_IT>
    return;
 8022994:	e004      	b.n	80229a0 <HAL_UART_IRQHandler+0x514>
    return;
 8022996:	bf00      	nop
 8022998:	e002      	b.n	80229a0 <HAL_UART_IRQHandler+0x514>
      return;
 802299a:	bf00      	nop
 802299c:	e000      	b.n	80229a0 <HAL_UART_IRQHandler+0x514>
      return;
 802299e:	bf00      	nop
  }
}
 80229a0:	37e8      	adds	r7, #232	; 0xe8
 80229a2:	46bd      	mov	sp, r7
 80229a4:	bd80      	pop	{r7, pc}
 80229a6:	bf00      	nop

080229a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80229a8:	b480      	push	{r7}
 80229aa:	b083      	sub	sp, #12
 80229ac:	af00      	add	r7, sp, #0
 80229ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80229b0:	bf00      	nop
 80229b2:	370c      	adds	r7, #12
 80229b4:	46bd      	mov	sp, r7
 80229b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ba:	4770      	bx	lr

080229bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80229bc:	b480      	push	{r7}
 80229be:	b083      	sub	sp, #12
 80229c0:	af00      	add	r7, sp, #0
 80229c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80229c4:	bf00      	nop
 80229c6:	370c      	adds	r7, #12
 80229c8:	46bd      	mov	sp, r7
 80229ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ce:	4770      	bx	lr

080229d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80229d0:	b480      	push	{r7}
 80229d2:	b083      	sub	sp, #12
 80229d4:	af00      	add	r7, sp, #0
 80229d6:	6078      	str	r0, [r7, #4]
 80229d8:	460b      	mov	r3, r1
 80229da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80229dc:	bf00      	nop
 80229de:	370c      	adds	r7, #12
 80229e0:	46bd      	mov	sp, r7
 80229e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229e6:	4770      	bx	lr

080229e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80229e8:	b480      	push	{r7}
 80229ea:	b085      	sub	sp, #20
 80229ec:	af00      	add	r7, sp, #0
 80229ee:	60f8      	str	r0, [r7, #12]
 80229f0:	60b9      	str	r1, [r7, #8]
 80229f2:	4613      	mov	r3, r2
 80229f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80229f6:	68fb      	ldr	r3, [r7, #12]
 80229f8:	68ba      	ldr	r2, [r7, #8]
 80229fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80229fc:	68fb      	ldr	r3, [r7, #12]
 80229fe:	88fa      	ldrh	r2, [r7, #6]
 8022a00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8022a02:	68fb      	ldr	r3, [r7, #12]
 8022a04:	88fa      	ldrh	r2, [r7, #6]
 8022a06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022a08:	68fb      	ldr	r3, [r7, #12]
 8022a0a:	2200      	movs	r2, #0
 8022a0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8022a0e:	68fb      	ldr	r3, [r7, #12]
 8022a10:	2222      	movs	r2, #34	; 0x22
 8022a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022a16:	68fb      	ldr	r3, [r7, #12]
 8022a18:	2200      	movs	r2, #0
 8022a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	691b      	ldr	r3, [r3, #16]
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	d007      	beq.n	8022a36 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8022a26:	68fb      	ldr	r3, [r7, #12]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	68da      	ldr	r2, [r3, #12]
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022a34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8022a36:	68fb      	ldr	r3, [r7, #12]
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	695a      	ldr	r2, [r3, #20]
 8022a3c:	68fb      	ldr	r3, [r7, #12]
 8022a3e:	681b      	ldr	r3, [r3, #0]
 8022a40:	f042 0201 	orr.w	r2, r2, #1
 8022a44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8022a46:	68fb      	ldr	r3, [r7, #12]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	68da      	ldr	r2, [r3, #12]
 8022a4c:	68fb      	ldr	r3, [r7, #12]
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	f042 0220 	orr.w	r2, r2, #32
 8022a54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022a56:	2300      	movs	r3, #0
}
 8022a58:	4618      	mov	r0, r3
 8022a5a:	3714      	adds	r7, #20
 8022a5c:	46bd      	mov	sp, r7
 8022a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a62:	4770      	bx	lr

08022a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022a64:	b480      	push	{r7}
 8022a66:	b095      	sub	sp, #84	; 0x54
 8022a68:	af00      	add	r7, sp, #0
 8022a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	330c      	adds	r3, #12
 8022a72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022a76:	e853 3f00 	ldrex	r3, [r3]
 8022a7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8022a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022a7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	681b      	ldr	r3, [r3, #0]
 8022a88:	330c      	adds	r3, #12
 8022a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8022a8c:	643a      	str	r2, [r7, #64]	; 0x40
 8022a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022a94:	e841 2300 	strex	r3, r2, [r1]
 8022a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8022a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	d1e5      	bne.n	8022a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	681b      	ldr	r3, [r3, #0]
 8022aa4:	3314      	adds	r3, #20
 8022aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022aa8:	6a3b      	ldr	r3, [r7, #32]
 8022aaa:	e853 3f00 	ldrex	r3, [r3]
 8022aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8022ab0:	69fb      	ldr	r3, [r7, #28]
 8022ab2:	f023 0301 	bic.w	r3, r3, #1
 8022ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	3314      	adds	r3, #20
 8022abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022ac8:	e841 2300 	strex	r3, r2, [r1]
 8022acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d1e5      	bne.n	8022aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ad8:	2b01      	cmp	r3, #1
 8022ada:	d119      	bne.n	8022b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	330c      	adds	r3, #12
 8022ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	e853 3f00 	ldrex	r3, [r3]
 8022aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8022aec:	68bb      	ldr	r3, [r7, #8]
 8022aee:	f023 0310 	bic.w	r3, r3, #16
 8022af2:	647b      	str	r3, [r7, #68]	; 0x44
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	330c      	adds	r3, #12
 8022afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022afc:	61ba      	str	r2, [r7, #24]
 8022afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022b00:	6979      	ldr	r1, [r7, #20]
 8022b02:	69ba      	ldr	r2, [r7, #24]
 8022b04:	e841 2300 	strex	r3, r2, [r1]
 8022b08:	613b      	str	r3, [r7, #16]
   return(result);
 8022b0a:	693b      	ldr	r3, [r7, #16]
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d1e5      	bne.n	8022adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	2220      	movs	r2, #32
 8022b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	2200      	movs	r2, #0
 8022b1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8022b1e:	bf00      	nop
 8022b20:	3754      	adds	r7, #84	; 0x54
 8022b22:	46bd      	mov	sp, r7
 8022b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b28:	4770      	bx	lr

08022b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022b2a:	b580      	push	{r7, lr}
 8022b2c:	b084      	sub	sp, #16
 8022b2e:	af00      	add	r7, sp, #0
 8022b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8022b38:	68fb      	ldr	r3, [r7, #12]
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8022b3e:	68fb      	ldr	r3, [r7, #12]
 8022b40:	2200      	movs	r2, #0
 8022b42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022b44:	68f8      	ldr	r0, [r7, #12]
 8022b46:	f7ff ff2f 	bl	80229a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022b4a:	bf00      	nop
 8022b4c:	3710      	adds	r7, #16
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	bd80      	pop	{r7, pc}

08022b52 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022b52:	b580      	push	{r7, lr}
 8022b54:	b084      	sub	sp, #16
 8022b56:	af00      	add	r7, sp, #0
 8022b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b64:	2200      	movs	r2, #0
 8022b66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8022b68:	68fb      	ldr	r3, [r7, #12]
 8022b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d004      	beq.n	8022b7a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8022b70:	68fb      	ldr	r3, [r7, #12]
 8022b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d117      	bne.n	8022baa <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8022b7a:	68fb      	ldr	r3, [r7, #12]
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022b80:	68fb      	ldr	r3, [r7, #12]
 8022b82:	2200      	movs	r2, #0
 8022b84:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022b86:	68fb      	ldr	r3, [r7, #12]
 8022b88:	2200      	movs	r2, #0
 8022b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	2220      	movs	r2, #32
 8022b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022b94:	68fb      	ldr	r3, [r7, #12]
 8022b96:	2220      	movs	r2, #32
 8022b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022b9c:	68fb      	ldr	r3, [r7, #12]
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022ba2:	68f8      	ldr	r0, [r7, #12]
 8022ba4:	f7ff ff0a 	bl	80229bc <HAL_UART_AbortCpltCallback>
 8022ba8:	e000      	b.n	8022bac <UART_DMATxAbortCallback+0x5a>
      return;
 8022baa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022bac:	3710      	adds	r7, #16
 8022bae:	46bd      	mov	sp, r7
 8022bb0:	bd80      	pop	{r7, pc}

08022bb2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022bb2:	b580      	push	{r7, lr}
 8022bb4:	b084      	sub	sp, #16
 8022bb6:	af00      	add	r7, sp, #0
 8022bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bbe:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bc4:	2200      	movs	r2, #0
 8022bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8022bc8:	68fb      	ldr	r3, [r7, #12]
 8022bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d004      	beq.n	8022bda <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8022bd0:	68fb      	ldr	r3, [r7, #12]
 8022bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022bd6:	2b00      	cmp	r3, #0
 8022bd8:	d117      	bne.n	8022c0a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	2200      	movs	r2, #0
 8022bde:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	2200      	movs	r2, #0
 8022be4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022be6:	68fb      	ldr	r3, [r7, #12]
 8022be8:	2200      	movs	r2, #0
 8022bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022bec:	68fb      	ldr	r3, [r7, #12]
 8022bee:	2220      	movs	r2, #32
 8022bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	2220      	movs	r2, #32
 8022bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022bfc:	68fb      	ldr	r3, [r7, #12]
 8022bfe:	2200      	movs	r2, #0
 8022c00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022c02:	68f8      	ldr	r0, [r7, #12]
 8022c04:	f7ff feda 	bl	80229bc <HAL_UART_AbortCpltCallback>
 8022c08:	e000      	b.n	8022c0c <UART_DMARxAbortCallback+0x5a>
      return;
 8022c0a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022c0c:	3710      	adds	r7, #16
 8022c0e:	46bd      	mov	sp, r7
 8022c10:	bd80      	pop	{r7, pc}

08022c12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022c12:	b480      	push	{r7}
 8022c14:	b085      	sub	sp, #20
 8022c16:	af00      	add	r7, sp, #0
 8022c18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022c20:	b2db      	uxtb	r3, r3
 8022c22:	2b21      	cmp	r3, #33	; 0x21
 8022c24:	d13e      	bne.n	8022ca4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	689b      	ldr	r3, [r3, #8]
 8022c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022c2e:	d114      	bne.n	8022c5a <UART_Transmit_IT+0x48>
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	691b      	ldr	r3, [r3, #16]
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d110      	bne.n	8022c5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	6a1b      	ldr	r3, [r3, #32]
 8022c3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	881b      	ldrh	r3, [r3, #0]
 8022c42:	461a      	mov	r2, r3
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022c4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	6a1b      	ldr	r3, [r3, #32]
 8022c52:	1c9a      	adds	r2, r3, #2
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	621a      	str	r2, [r3, #32]
 8022c58:	e008      	b.n	8022c6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	6a1b      	ldr	r3, [r3, #32]
 8022c5e:	1c59      	adds	r1, r3, #1
 8022c60:	687a      	ldr	r2, [r7, #4]
 8022c62:	6211      	str	r1, [r2, #32]
 8022c64:	781a      	ldrb	r2, [r3, #0]
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	681b      	ldr	r3, [r3, #0]
 8022c6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022c6c:	687b      	ldr	r3, [r7, #4]
 8022c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022c70:	b29b      	uxth	r3, r3
 8022c72:	3b01      	subs	r3, #1
 8022c74:	b29b      	uxth	r3, r3
 8022c76:	687a      	ldr	r2, [r7, #4]
 8022c78:	4619      	mov	r1, r3
 8022c7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d10f      	bne.n	8022ca0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	681b      	ldr	r3, [r3, #0]
 8022c84:	68da      	ldr	r2, [r3, #12]
 8022c86:	687b      	ldr	r3, [r7, #4]
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022c8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	681b      	ldr	r3, [r3, #0]
 8022c94:	68da      	ldr	r2, [r3, #12]
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022c9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022ca0:	2300      	movs	r3, #0
 8022ca2:	e000      	b.n	8022ca6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022ca4:	2302      	movs	r3, #2
  }
}
 8022ca6:	4618      	mov	r0, r3
 8022ca8:	3714      	adds	r7, #20
 8022caa:	46bd      	mov	sp, r7
 8022cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cb0:	4770      	bx	lr

08022cb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022cb2:	b580      	push	{r7, lr}
 8022cb4:	b082      	sub	sp, #8
 8022cb6:	af00      	add	r7, sp, #0
 8022cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	68da      	ldr	r2, [r3, #12]
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	681b      	ldr	r3, [r3, #0]
 8022cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022cc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	2220      	movs	r2, #32
 8022cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022cd2:	6878      	ldr	r0, [r7, #4]
 8022cd4:	f7df fbcc 	bl	8002470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022cd8:	2300      	movs	r3, #0
}
 8022cda:	4618      	mov	r0, r3
 8022cdc:	3708      	adds	r7, #8
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	bd80      	pop	{r7, pc}

08022ce2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022ce2:	b580      	push	{r7, lr}
 8022ce4:	b08c      	sub	sp, #48	; 0x30
 8022ce6:	af00      	add	r7, sp, #0
 8022ce8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022cea:	687b      	ldr	r3, [r7, #4]
 8022cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022cf0:	b2db      	uxtb	r3, r3
 8022cf2:	2b22      	cmp	r3, #34	; 0x22
 8022cf4:	f040 80ab 	bne.w	8022e4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	689b      	ldr	r3, [r3, #8]
 8022cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022d00:	d117      	bne.n	8022d32 <UART_Receive_IT+0x50>
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	691b      	ldr	r3, [r3, #16]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d113      	bne.n	8022d32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022d0a:	2300      	movs	r3, #0
 8022d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	685b      	ldr	r3, [r3, #4]
 8022d1a:	b29b      	uxth	r3, r3
 8022d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022d20:	b29a      	uxth	r2, r3
 8022d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022d26:	687b      	ldr	r3, [r7, #4]
 8022d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d2a:	1c9a      	adds	r2, r3, #2
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8022d30:	e026      	b.n	8022d80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8022d38:	2300      	movs	r3, #0
 8022d3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	689b      	ldr	r3, [r3, #8]
 8022d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022d44:	d007      	beq.n	8022d56 <UART_Receive_IT+0x74>
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	689b      	ldr	r3, [r3, #8]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d10a      	bne.n	8022d64 <UART_Receive_IT+0x82>
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	691b      	ldr	r3, [r3, #16]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d106      	bne.n	8022d64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	681b      	ldr	r3, [r3, #0]
 8022d5a:	685b      	ldr	r3, [r3, #4]
 8022d5c:	b2da      	uxtb	r2, r3
 8022d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d60:	701a      	strb	r2, [r3, #0]
 8022d62:	e008      	b.n	8022d76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	681b      	ldr	r3, [r3, #0]
 8022d68:	685b      	ldr	r3, [r3, #4]
 8022d6a:	b2db      	uxtb	r3, r3
 8022d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022d70:	b2da      	uxtb	r2, r3
 8022d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d7a:	1c5a      	adds	r2, r3, #1
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022d84:	b29b      	uxth	r3, r3
 8022d86:	3b01      	subs	r3, #1
 8022d88:	b29b      	uxth	r3, r3
 8022d8a:	687a      	ldr	r2, [r7, #4]
 8022d8c:	4619      	mov	r1, r3
 8022d8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	d15a      	bne.n	8022e4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	681b      	ldr	r3, [r3, #0]
 8022d98:	68da      	ldr	r2, [r3, #12]
 8022d9a:	687b      	ldr	r3, [r7, #4]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	f022 0220 	bic.w	r2, r2, #32
 8022da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	68da      	ldr	r2, [r3, #12]
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	681b      	ldr	r3, [r3, #0]
 8022db8:	695a      	ldr	r2, [r3, #20]
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	f022 0201 	bic.w	r2, r2, #1
 8022dc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	2220      	movs	r2, #32
 8022dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dd0:	2b01      	cmp	r3, #1
 8022dd2:	d135      	bne.n	8022e40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	2200      	movs	r2, #0
 8022dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	681b      	ldr	r3, [r3, #0]
 8022dde:	330c      	adds	r3, #12
 8022de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022de2:	697b      	ldr	r3, [r7, #20]
 8022de4:	e853 3f00 	ldrex	r3, [r3]
 8022de8:	613b      	str	r3, [r7, #16]
   return(result);
 8022dea:	693b      	ldr	r3, [r7, #16]
 8022dec:	f023 0310 	bic.w	r3, r3, #16
 8022df0:	627b      	str	r3, [r7, #36]	; 0x24
 8022df2:	687b      	ldr	r3, [r7, #4]
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	330c      	adds	r3, #12
 8022df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022dfa:	623a      	str	r2, [r7, #32]
 8022dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022dfe:	69f9      	ldr	r1, [r7, #28]
 8022e00:	6a3a      	ldr	r2, [r7, #32]
 8022e02:	e841 2300 	strex	r3, r2, [r1]
 8022e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8022e08:	69bb      	ldr	r3, [r7, #24]
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d1e5      	bne.n	8022dda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	681b      	ldr	r3, [r3, #0]
 8022e14:	f003 0310 	and.w	r3, r3, #16
 8022e18:	2b10      	cmp	r3, #16
 8022e1a:	d10a      	bne.n	8022e32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	60fb      	str	r3, [r7, #12]
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	681b      	ldr	r3, [r3, #0]
 8022e24:	681b      	ldr	r3, [r3, #0]
 8022e26:	60fb      	str	r3, [r7, #12]
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	685b      	ldr	r3, [r3, #4]
 8022e2e:	60fb      	str	r3, [r7, #12]
 8022e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022e32:	687b      	ldr	r3, [r7, #4]
 8022e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022e36:	4619      	mov	r1, r3
 8022e38:	6878      	ldr	r0, [r7, #4]
 8022e3a:	f7ff fdc9 	bl	80229d0 <HAL_UARTEx_RxEventCallback>
 8022e3e:	e002      	b.n	8022e46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8022e40:	6878      	ldr	r0, [r7, #4]
 8022e42:	f7df fb71 	bl	8002528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022e46:	2300      	movs	r3, #0
 8022e48:	e002      	b.n	8022e50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	e000      	b.n	8022e50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8022e4e:	2302      	movs	r3, #2
  }
}
 8022e50:	4618      	mov	r0, r3
 8022e52:	3730      	adds	r7, #48	; 0x30
 8022e54:	46bd      	mov	sp, r7
 8022e56:	bd80      	pop	{r7, pc}

08022e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022e5c:	b0c0      	sub	sp, #256	; 0x100
 8022e5e:	af00      	add	r7, sp, #0
 8022e60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e68:	681b      	ldr	r3, [r3, #0]
 8022e6a:	691b      	ldr	r3, [r3, #16]
 8022e6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e74:	68d9      	ldr	r1, [r3, #12]
 8022e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e7a:	681a      	ldr	r2, [r3, #0]
 8022e7c:	ea40 0301 	orr.w	r3, r0, r1
 8022e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e86:	689a      	ldr	r2, [r3, #8]
 8022e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e8c:	691b      	ldr	r3, [r3, #16]
 8022e8e:	431a      	orrs	r2, r3
 8022e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e94:	695b      	ldr	r3, [r3, #20]
 8022e96:	431a      	orrs	r2, r3
 8022e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e9c:	69db      	ldr	r3, [r3, #28]
 8022e9e:	4313      	orrs	r3, r2
 8022ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ea8:	681b      	ldr	r3, [r3, #0]
 8022eaa:	68db      	ldr	r3, [r3, #12]
 8022eac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022eb0:	f021 010c 	bic.w	r1, r1, #12
 8022eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022eb8:	681a      	ldr	r2, [r3, #0]
 8022eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8022ebe:	430b      	orrs	r3, r1
 8022ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	695b      	ldr	r3, [r3, #20]
 8022eca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ed2:	6999      	ldr	r1, [r3, #24]
 8022ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ed8:	681a      	ldr	r2, [r3, #0]
 8022eda:	ea40 0301 	orr.w	r3, r0, r1
 8022ede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ee4:	681a      	ldr	r2, [r3, #0]
 8022ee6:	4b8f      	ldr	r3, [pc, #572]	; (8023124 <UART_SetConfig+0x2cc>)
 8022ee8:	429a      	cmp	r2, r3
 8022eea:	d005      	beq.n	8022ef8 <UART_SetConfig+0xa0>
 8022eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ef0:	681a      	ldr	r2, [r3, #0]
 8022ef2:	4b8d      	ldr	r3, [pc, #564]	; (8023128 <UART_SetConfig+0x2d0>)
 8022ef4:	429a      	cmp	r2, r3
 8022ef6:	d104      	bne.n	8022f02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022ef8:	f7fe f82a 	bl	8020f50 <HAL_RCC_GetPCLK2Freq>
 8022efc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8022f00:	e003      	b.n	8022f0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022f02:	f7fe f811 	bl	8020f28 <HAL_RCC_GetPCLK1Freq>
 8022f06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f0e:	69db      	ldr	r3, [r3, #28]
 8022f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022f14:	f040 810c 	bne.w	8023130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022f1c:	2200      	movs	r2, #0
 8022f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8022f22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022f26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022f2a:	4622      	mov	r2, r4
 8022f2c:	462b      	mov	r3, r5
 8022f2e:	1891      	adds	r1, r2, r2
 8022f30:	65b9      	str	r1, [r7, #88]	; 0x58
 8022f32:	415b      	adcs	r3, r3
 8022f34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022f36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022f3a:	4621      	mov	r1, r4
 8022f3c:	eb12 0801 	adds.w	r8, r2, r1
 8022f40:	4629      	mov	r1, r5
 8022f42:	eb43 0901 	adc.w	r9, r3, r1
 8022f46:	f04f 0200 	mov.w	r2, #0
 8022f4a:	f04f 0300 	mov.w	r3, #0
 8022f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022f5a:	4690      	mov	r8, r2
 8022f5c:	4699      	mov	r9, r3
 8022f5e:	4623      	mov	r3, r4
 8022f60:	eb18 0303 	adds.w	r3, r8, r3
 8022f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022f68:	462b      	mov	r3, r5
 8022f6a:	eb49 0303 	adc.w	r3, r9, r3
 8022f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f76:	685b      	ldr	r3, [r3, #4]
 8022f78:	2200      	movs	r2, #0
 8022f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8022f7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022f86:	460b      	mov	r3, r1
 8022f88:	18db      	adds	r3, r3, r3
 8022f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8022f8c:	4613      	mov	r3, r2
 8022f8e:	eb42 0303 	adc.w	r3, r2, r3
 8022f92:	657b      	str	r3, [r7, #84]	; 0x54
 8022f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022f98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022f9c:	f7dd ff70 	bl	8000e80 <__aeabi_uldivmod>
 8022fa0:	4602      	mov	r2, r0
 8022fa2:	460b      	mov	r3, r1
 8022fa4:	4b61      	ldr	r3, [pc, #388]	; (802312c <UART_SetConfig+0x2d4>)
 8022fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8022faa:	095b      	lsrs	r3, r3, #5
 8022fac:	011c      	lsls	r4, r3, #4
 8022fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022fb2:	2200      	movs	r2, #0
 8022fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022fb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8022fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022fc0:	4642      	mov	r2, r8
 8022fc2:	464b      	mov	r3, r9
 8022fc4:	1891      	adds	r1, r2, r2
 8022fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8022fc8:	415b      	adcs	r3, r3
 8022fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022fd0:	4641      	mov	r1, r8
 8022fd2:	eb12 0a01 	adds.w	sl, r2, r1
 8022fd6:	4649      	mov	r1, r9
 8022fd8:	eb43 0b01 	adc.w	fp, r3, r1
 8022fdc:	f04f 0200 	mov.w	r2, #0
 8022fe0:	f04f 0300 	mov.w	r3, #0
 8022fe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022fe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022ff0:	4692      	mov	sl, r2
 8022ff2:	469b      	mov	fp, r3
 8022ff4:	4643      	mov	r3, r8
 8022ff6:	eb1a 0303 	adds.w	r3, sl, r3
 8022ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022ffe:	464b      	mov	r3, r9
 8023000:	eb4b 0303 	adc.w	r3, fp, r3
 8023004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802300c:	685b      	ldr	r3, [r3, #4]
 802300e:	2200      	movs	r2, #0
 8023010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8023014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8023018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802301c:	460b      	mov	r3, r1
 802301e:	18db      	adds	r3, r3, r3
 8023020:	643b      	str	r3, [r7, #64]	; 0x40
 8023022:	4613      	mov	r3, r2
 8023024:	eb42 0303 	adc.w	r3, r2, r3
 8023028:	647b      	str	r3, [r7, #68]	; 0x44
 802302a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802302e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8023032:	f7dd ff25 	bl	8000e80 <__aeabi_uldivmod>
 8023036:	4602      	mov	r2, r0
 8023038:	460b      	mov	r3, r1
 802303a:	4611      	mov	r1, r2
 802303c:	4b3b      	ldr	r3, [pc, #236]	; (802312c <UART_SetConfig+0x2d4>)
 802303e:	fba3 2301 	umull	r2, r3, r3, r1
 8023042:	095b      	lsrs	r3, r3, #5
 8023044:	2264      	movs	r2, #100	; 0x64
 8023046:	fb02 f303 	mul.w	r3, r2, r3
 802304a:	1acb      	subs	r3, r1, r3
 802304c:	00db      	lsls	r3, r3, #3
 802304e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023052:	4b36      	ldr	r3, [pc, #216]	; (802312c <UART_SetConfig+0x2d4>)
 8023054:	fba3 2302 	umull	r2, r3, r3, r2
 8023058:	095b      	lsrs	r3, r3, #5
 802305a:	005b      	lsls	r3, r3, #1
 802305c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023060:	441c      	add	r4, r3
 8023062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023066:	2200      	movs	r2, #0
 8023068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802306c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8023070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8023074:	4642      	mov	r2, r8
 8023076:	464b      	mov	r3, r9
 8023078:	1891      	adds	r1, r2, r2
 802307a:	63b9      	str	r1, [r7, #56]	; 0x38
 802307c:	415b      	adcs	r3, r3
 802307e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8023084:	4641      	mov	r1, r8
 8023086:	1851      	adds	r1, r2, r1
 8023088:	6339      	str	r1, [r7, #48]	; 0x30
 802308a:	4649      	mov	r1, r9
 802308c:	414b      	adcs	r3, r1
 802308e:	637b      	str	r3, [r7, #52]	; 0x34
 8023090:	f04f 0200 	mov.w	r2, #0
 8023094:	f04f 0300 	mov.w	r3, #0
 8023098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802309c:	4659      	mov	r1, fp
 802309e:	00cb      	lsls	r3, r1, #3
 80230a0:	4651      	mov	r1, sl
 80230a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80230a6:	4651      	mov	r1, sl
 80230a8:	00ca      	lsls	r2, r1, #3
 80230aa:	4610      	mov	r0, r2
 80230ac:	4619      	mov	r1, r3
 80230ae:	4603      	mov	r3, r0
 80230b0:	4642      	mov	r2, r8
 80230b2:	189b      	adds	r3, r3, r2
 80230b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80230b8:	464b      	mov	r3, r9
 80230ba:	460a      	mov	r2, r1
 80230bc:	eb42 0303 	adc.w	r3, r2, r3
 80230c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80230c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80230c8:	685b      	ldr	r3, [r3, #4]
 80230ca:	2200      	movs	r2, #0
 80230cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80230d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80230d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80230d8:	460b      	mov	r3, r1
 80230da:	18db      	adds	r3, r3, r3
 80230dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80230de:	4613      	mov	r3, r2
 80230e0:	eb42 0303 	adc.w	r3, r2, r3
 80230e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80230e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80230ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80230ee:	f7dd fec7 	bl	8000e80 <__aeabi_uldivmod>
 80230f2:	4602      	mov	r2, r0
 80230f4:	460b      	mov	r3, r1
 80230f6:	4b0d      	ldr	r3, [pc, #52]	; (802312c <UART_SetConfig+0x2d4>)
 80230f8:	fba3 1302 	umull	r1, r3, r3, r2
 80230fc:	095b      	lsrs	r3, r3, #5
 80230fe:	2164      	movs	r1, #100	; 0x64
 8023100:	fb01 f303 	mul.w	r3, r1, r3
 8023104:	1ad3      	subs	r3, r2, r3
 8023106:	00db      	lsls	r3, r3, #3
 8023108:	3332      	adds	r3, #50	; 0x32
 802310a:	4a08      	ldr	r2, [pc, #32]	; (802312c <UART_SetConfig+0x2d4>)
 802310c:	fba2 2303 	umull	r2, r3, r2, r3
 8023110:	095b      	lsrs	r3, r3, #5
 8023112:	f003 0207 	and.w	r2, r3, #7
 8023116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	4422      	add	r2, r4
 802311e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8023120:	e105      	b.n	802332e <UART_SetConfig+0x4d6>
 8023122:	bf00      	nop
 8023124:	40011000 	.word	0x40011000
 8023128:	40011400 	.word	0x40011400
 802312c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023134:	2200      	movs	r2, #0
 8023136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802313a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802313e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8023142:	4642      	mov	r2, r8
 8023144:	464b      	mov	r3, r9
 8023146:	1891      	adds	r1, r2, r2
 8023148:	6239      	str	r1, [r7, #32]
 802314a:	415b      	adcs	r3, r3
 802314c:	627b      	str	r3, [r7, #36]	; 0x24
 802314e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8023152:	4641      	mov	r1, r8
 8023154:	1854      	adds	r4, r2, r1
 8023156:	4649      	mov	r1, r9
 8023158:	eb43 0501 	adc.w	r5, r3, r1
 802315c:	f04f 0200 	mov.w	r2, #0
 8023160:	f04f 0300 	mov.w	r3, #0
 8023164:	00eb      	lsls	r3, r5, #3
 8023166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802316a:	00e2      	lsls	r2, r4, #3
 802316c:	4614      	mov	r4, r2
 802316e:	461d      	mov	r5, r3
 8023170:	4643      	mov	r3, r8
 8023172:	18e3      	adds	r3, r4, r3
 8023174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8023178:	464b      	mov	r3, r9
 802317a:	eb45 0303 	adc.w	r3, r5, r3
 802317e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023186:	685b      	ldr	r3, [r3, #4]
 8023188:	2200      	movs	r2, #0
 802318a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802318e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8023192:	f04f 0200 	mov.w	r2, #0
 8023196:	f04f 0300 	mov.w	r3, #0
 802319a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802319e:	4629      	mov	r1, r5
 80231a0:	008b      	lsls	r3, r1, #2
 80231a2:	4621      	mov	r1, r4
 80231a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80231a8:	4621      	mov	r1, r4
 80231aa:	008a      	lsls	r2, r1, #2
 80231ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80231b0:	f7dd fe66 	bl	8000e80 <__aeabi_uldivmod>
 80231b4:	4602      	mov	r2, r0
 80231b6:	460b      	mov	r3, r1
 80231b8:	4b60      	ldr	r3, [pc, #384]	; (802333c <UART_SetConfig+0x4e4>)
 80231ba:	fba3 2302 	umull	r2, r3, r3, r2
 80231be:	095b      	lsrs	r3, r3, #5
 80231c0:	011c      	lsls	r4, r3, #4
 80231c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80231c6:	2200      	movs	r2, #0
 80231c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80231cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80231d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80231d4:	4642      	mov	r2, r8
 80231d6:	464b      	mov	r3, r9
 80231d8:	1891      	adds	r1, r2, r2
 80231da:	61b9      	str	r1, [r7, #24]
 80231dc:	415b      	adcs	r3, r3
 80231de:	61fb      	str	r3, [r7, #28]
 80231e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80231e4:	4641      	mov	r1, r8
 80231e6:	1851      	adds	r1, r2, r1
 80231e8:	6139      	str	r1, [r7, #16]
 80231ea:	4649      	mov	r1, r9
 80231ec:	414b      	adcs	r3, r1
 80231ee:	617b      	str	r3, [r7, #20]
 80231f0:	f04f 0200 	mov.w	r2, #0
 80231f4:	f04f 0300 	mov.w	r3, #0
 80231f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80231fc:	4659      	mov	r1, fp
 80231fe:	00cb      	lsls	r3, r1, #3
 8023200:	4651      	mov	r1, sl
 8023202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023206:	4651      	mov	r1, sl
 8023208:	00ca      	lsls	r2, r1, #3
 802320a:	4610      	mov	r0, r2
 802320c:	4619      	mov	r1, r3
 802320e:	4603      	mov	r3, r0
 8023210:	4642      	mov	r2, r8
 8023212:	189b      	adds	r3, r3, r2
 8023214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023218:	464b      	mov	r3, r9
 802321a:	460a      	mov	r2, r1
 802321c:	eb42 0303 	adc.w	r3, r2, r3
 8023220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023228:	685b      	ldr	r3, [r3, #4]
 802322a:	2200      	movs	r2, #0
 802322c:	67bb      	str	r3, [r7, #120]	; 0x78
 802322e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8023230:	f04f 0200 	mov.w	r2, #0
 8023234:	f04f 0300 	mov.w	r3, #0
 8023238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802323c:	4649      	mov	r1, r9
 802323e:	008b      	lsls	r3, r1, #2
 8023240:	4641      	mov	r1, r8
 8023242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023246:	4641      	mov	r1, r8
 8023248:	008a      	lsls	r2, r1, #2
 802324a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802324e:	f7dd fe17 	bl	8000e80 <__aeabi_uldivmod>
 8023252:	4602      	mov	r2, r0
 8023254:	460b      	mov	r3, r1
 8023256:	4b39      	ldr	r3, [pc, #228]	; (802333c <UART_SetConfig+0x4e4>)
 8023258:	fba3 1302 	umull	r1, r3, r3, r2
 802325c:	095b      	lsrs	r3, r3, #5
 802325e:	2164      	movs	r1, #100	; 0x64
 8023260:	fb01 f303 	mul.w	r3, r1, r3
 8023264:	1ad3      	subs	r3, r2, r3
 8023266:	011b      	lsls	r3, r3, #4
 8023268:	3332      	adds	r3, #50	; 0x32
 802326a:	4a34      	ldr	r2, [pc, #208]	; (802333c <UART_SetConfig+0x4e4>)
 802326c:	fba2 2303 	umull	r2, r3, r2, r3
 8023270:	095b      	lsrs	r3, r3, #5
 8023272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023276:	441c      	add	r4, r3
 8023278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802327c:	2200      	movs	r2, #0
 802327e:	673b      	str	r3, [r7, #112]	; 0x70
 8023280:	677a      	str	r2, [r7, #116]	; 0x74
 8023282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8023286:	4642      	mov	r2, r8
 8023288:	464b      	mov	r3, r9
 802328a:	1891      	adds	r1, r2, r2
 802328c:	60b9      	str	r1, [r7, #8]
 802328e:	415b      	adcs	r3, r3
 8023290:	60fb      	str	r3, [r7, #12]
 8023292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023296:	4641      	mov	r1, r8
 8023298:	1851      	adds	r1, r2, r1
 802329a:	6039      	str	r1, [r7, #0]
 802329c:	4649      	mov	r1, r9
 802329e:	414b      	adcs	r3, r1
 80232a0:	607b      	str	r3, [r7, #4]
 80232a2:	f04f 0200 	mov.w	r2, #0
 80232a6:	f04f 0300 	mov.w	r3, #0
 80232aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80232ae:	4659      	mov	r1, fp
 80232b0:	00cb      	lsls	r3, r1, #3
 80232b2:	4651      	mov	r1, sl
 80232b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80232b8:	4651      	mov	r1, sl
 80232ba:	00ca      	lsls	r2, r1, #3
 80232bc:	4610      	mov	r0, r2
 80232be:	4619      	mov	r1, r3
 80232c0:	4603      	mov	r3, r0
 80232c2:	4642      	mov	r2, r8
 80232c4:	189b      	adds	r3, r3, r2
 80232c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80232c8:	464b      	mov	r3, r9
 80232ca:	460a      	mov	r2, r1
 80232cc:	eb42 0303 	adc.w	r3, r2, r3
 80232d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80232d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80232d6:	685b      	ldr	r3, [r3, #4]
 80232d8:	2200      	movs	r2, #0
 80232da:	663b      	str	r3, [r7, #96]	; 0x60
 80232dc:	667a      	str	r2, [r7, #100]	; 0x64
 80232de:	f04f 0200 	mov.w	r2, #0
 80232e2:	f04f 0300 	mov.w	r3, #0
 80232e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80232ea:	4649      	mov	r1, r9
 80232ec:	008b      	lsls	r3, r1, #2
 80232ee:	4641      	mov	r1, r8
 80232f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80232f4:	4641      	mov	r1, r8
 80232f6:	008a      	lsls	r2, r1, #2
 80232f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80232fc:	f7dd fdc0 	bl	8000e80 <__aeabi_uldivmod>
 8023300:	4602      	mov	r2, r0
 8023302:	460b      	mov	r3, r1
 8023304:	4b0d      	ldr	r3, [pc, #52]	; (802333c <UART_SetConfig+0x4e4>)
 8023306:	fba3 1302 	umull	r1, r3, r3, r2
 802330a:	095b      	lsrs	r3, r3, #5
 802330c:	2164      	movs	r1, #100	; 0x64
 802330e:	fb01 f303 	mul.w	r3, r1, r3
 8023312:	1ad3      	subs	r3, r2, r3
 8023314:	011b      	lsls	r3, r3, #4
 8023316:	3332      	adds	r3, #50	; 0x32
 8023318:	4a08      	ldr	r2, [pc, #32]	; (802333c <UART_SetConfig+0x4e4>)
 802331a:	fba2 2303 	umull	r2, r3, r2, r3
 802331e:	095b      	lsrs	r3, r3, #5
 8023320:	f003 020f 	and.w	r2, r3, #15
 8023324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	4422      	add	r2, r4
 802332c:	609a      	str	r2, [r3, #8]
}
 802332e:	bf00      	nop
 8023330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8023334:	46bd      	mov	sp, r7
 8023336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802333a:	bf00      	nop
 802333c:	51eb851f 	.word	0x51eb851f

08023340 <atoi>:
 8023340:	220a      	movs	r2, #10
 8023342:	2100      	movs	r1, #0
 8023344:	f000 ba6a 	b.w	802381c <strtol>

08023348 <calloc>:
 8023348:	4b02      	ldr	r3, [pc, #8]	; (8023354 <calloc+0xc>)
 802334a:	460a      	mov	r2, r1
 802334c:	4601      	mov	r1, r0
 802334e:	6818      	ldr	r0, [r3, #0]
 8023350:	f000 b852 	b.w	80233f8 <_calloc_r>
 8023354:	20000140 	.word	0x20000140

08023358 <__errno>:
 8023358:	4b01      	ldr	r3, [pc, #4]	; (8023360 <__errno+0x8>)
 802335a:	6818      	ldr	r0, [r3, #0]
 802335c:	4770      	bx	lr
 802335e:	bf00      	nop
 8023360:	20000140 	.word	0x20000140

08023364 <__libc_init_array>:
 8023364:	b570      	push	{r4, r5, r6, lr}
 8023366:	4d0d      	ldr	r5, [pc, #52]	; (802339c <__libc_init_array+0x38>)
 8023368:	4c0d      	ldr	r4, [pc, #52]	; (80233a0 <__libc_init_array+0x3c>)
 802336a:	1b64      	subs	r4, r4, r5
 802336c:	10a4      	asrs	r4, r4, #2
 802336e:	2600      	movs	r6, #0
 8023370:	42a6      	cmp	r6, r4
 8023372:	d109      	bne.n	8023388 <__libc_init_array+0x24>
 8023374:	4d0b      	ldr	r5, [pc, #44]	; (80233a4 <__libc_init_array+0x40>)
 8023376:	4c0c      	ldr	r4, [pc, #48]	; (80233a8 <__libc_init_array+0x44>)
 8023378:	f002 ff02 	bl	8026180 <_init>
 802337c:	1b64      	subs	r4, r4, r5
 802337e:	10a4      	asrs	r4, r4, #2
 8023380:	2600      	movs	r6, #0
 8023382:	42a6      	cmp	r6, r4
 8023384:	d105      	bne.n	8023392 <__libc_init_array+0x2e>
 8023386:	bd70      	pop	{r4, r5, r6, pc}
 8023388:	f855 3b04 	ldr.w	r3, [r5], #4
 802338c:	4798      	blx	r3
 802338e:	3601      	adds	r6, #1
 8023390:	e7ee      	b.n	8023370 <__libc_init_array+0xc>
 8023392:	f855 3b04 	ldr.w	r3, [r5], #4
 8023396:	4798      	blx	r3
 8023398:	3601      	adds	r6, #1
 802339a:	e7f2      	b.n	8023382 <__libc_init_array+0x1e>
 802339c:	08029cc0 	.word	0x08029cc0
 80233a0:	08029cc0 	.word	0x08029cc0
 80233a4:	08029cc0 	.word	0x08029cc0
 80233a8:	08029cc4 	.word	0x08029cc4

080233ac <malloc>:
 80233ac:	4b02      	ldr	r3, [pc, #8]	; (80233b8 <malloc+0xc>)
 80233ae:	4601      	mov	r1, r0
 80233b0:	6818      	ldr	r0, [r3, #0]
 80233b2:	f000 b8a3 	b.w	80234fc <_malloc_r>
 80233b6:	bf00      	nop
 80233b8:	20000140 	.word	0x20000140

080233bc <free>:
 80233bc:	4b02      	ldr	r3, [pc, #8]	; (80233c8 <free+0xc>)
 80233be:	4601      	mov	r1, r0
 80233c0:	6818      	ldr	r0, [r3, #0]
 80233c2:	f000 b82f 	b.w	8023424 <_free_r>
 80233c6:	bf00      	nop
 80233c8:	20000140 	.word	0x20000140

080233cc <memcpy>:
 80233cc:	440a      	add	r2, r1
 80233ce:	4291      	cmp	r1, r2
 80233d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80233d4:	d100      	bne.n	80233d8 <memcpy+0xc>
 80233d6:	4770      	bx	lr
 80233d8:	b510      	push	{r4, lr}
 80233da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80233de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80233e2:	4291      	cmp	r1, r2
 80233e4:	d1f9      	bne.n	80233da <memcpy+0xe>
 80233e6:	bd10      	pop	{r4, pc}

080233e8 <memset>:
 80233e8:	4402      	add	r2, r0
 80233ea:	4603      	mov	r3, r0
 80233ec:	4293      	cmp	r3, r2
 80233ee:	d100      	bne.n	80233f2 <memset+0xa>
 80233f0:	4770      	bx	lr
 80233f2:	f803 1b01 	strb.w	r1, [r3], #1
 80233f6:	e7f9      	b.n	80233ec <memset+0x4>

080233f8 <_calloc_r>:
 80233f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80233fa:	fba1 2402 	umull	r2, r4, r1, r2
 80233fe:	b94c      	cbnz	r4, 8023414 <_calloc_r+0x1c>
 8023400:	4611      	mov	r1, r2
 8023402:	9201      	str	r2, [sp, #4]
 8023404:	f000 f87a 	bl	80234fc <_malloc_r>
 8023408:	9a01      	ldr	r2, [sp, #4]
 802340a:	4605      	mov	r5, r0
 802340c:	b930      	cbnz	r0, 802341c <_calloc_r+0x24>
 802340e:	4628      	mov	r0, r5
 8023410:	b003      	add	sp, #12
 8023412:	bd30      	pop	{r4, r5, pc}
 8023414:	220c      	movs	r2, #12
 8023416:	6002      	str	r2, [r0, #0]
 8023418:	2500      	movs	r5, #0
 802341a:	e7f8      	b.n	802340e <_calloc_r+0x16>
 802341c:	4621      	mov	r1, r4
 802341e:	f7ff ffe3 	bl	80233e8 <memset>
 8023422:	e7f4      	b.n	802340e <_calloc_r+0x16>

08023424 <_free_r>:
 8023424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023426:	2900      	cmp	r1, #0
 8023428:	d044      	beq.n	80234b4 <_free_r+0x90>
 802342a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802342e:	9001      	str	r0, [sp, #4]
 8023430:	2b00      	cmp	r3, #0
 8023432:	f1a1 0404 	sub.w	r4, r1, #4
 8023436:	bfb8      	it	lt
 8023438:	18e4      	addlt	r4, r4, r3
 802343a:	f000 f9f9 	bl	8023830 <__malloc_lock>
 802343e:	4a1e      	ldr	r2, [pc, #120]	; (80234b8 <_free_r+0x94>)
 8023440:	9801      	ldr	r0, [sp, #4]
 8023442:	6813      	ldr	r3, [r2, #0]
 8023444:	b933      	cbnz	r3, 8023454 <_free_r+0x30>
 8023446:	6063      	str	r3, [r4, #4]
 8023448:	6014      	str	r4, [r2, #0]
 802344a:	b003      	add	sp, #12
 802344c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023450:	f000 b9f4 	b.w	802383c <__malloc_unlock>
 8023454:	42a3      	cmp	r3, r4
 8023456:	d908      	bls.n	802346a <_free_r+0x46>
 8023458:	6825      	ldr	r5, [r4, #0]
 802345a:	1961      	adds	r1, r4, r5
 802345c:	428b      	cmp	r3, r1
 802345e:	bf01      	itttt	eq
 8023460:	6819      	ldreq	r1, [r3, #0]
 8023462:	685b      	ldreq	r3, [r3, #4]
 8023464:	1949      	addeq	r1, r1, r5
 8023466:	6021      	streq	r1, [r4, #0]
 8023468:	e7ed      	b.n	8023446 <_free_r+0x22>
 802346a:	461a      	mov	r2, r3
 802346c:	685b      	ldr	r3, [r3, #4]
 802346e:	b10b      	cbz	r3, 8023474 <_free_r+0x50>
 8023470:	42a3      	cmp	r3, r4
 8023472:	d9fa      	bls.n	802346a <_free_r+0x46>
 8023474:	6811      	ldr	r1, [r2, #0]
 8023476:	1855      	adds	r5, r2, r1
 8023478:	42a5      	cmp	r5, r4
 802347a:	d10b      	bne.n	8023494 <_free_r+0x70>
 802347c:	6824      	ldr	r4, [r4, #0]
 802347e:	4421      	add	r1, r4
 8023480:	1854      	adds	r4, r2, r1
 8023482:	42a3      	cmp	r3, r4
 8023484:	6011      	str	r1, [r2, #0]
 8023486:	d1e0      	bne.n	802344a <_free_r+0x26>
 8023488:	681c      	ldr	r4, [r3, #0]
 802348a:	685b      	ldr	r3, [r3, #4]
 802348c:	6053      	str	r3, [r2, #4]
 802348e:	4421      	add	r1, r4
 8023490:	6011      	str	r1, [r2, #0]
 8023492:	e7da      	b.n	802344a <_free_r+0x26>
 8023494:	d902      	bls.n	802349c <_free_r+0x78>
 8023496:	230c      	movs	r3, #12
 8023498:	6003      	str	r3, [r0, #0]
 802349a:	e7d6      	b.n	802344a <_free_r+0x26>
 802349c:	6825      	ldr	r5, [r4, #0]
 802349e:	1961      	adds	r1, r4, r5
 80234a0:	428b      	cmp	r3, r1
 80234a2:	bf04      	itt	eq
 80234a4:	6819      	ldreq	r1, [r3, #0]
 80234a6:	685b      	ldreq	r3, [r3, #4]
 80234a8:	6063      	str	r3, [r4, #4]
 80234aa:	bf04      	itt	eq
 80234ac:	1949      	addeq	r1, r1, r5
 80234ae:	6021      	streq	r1, [r4, #0]
 80234b0:	6054      	str	r4, [r2, #4]
 80234b2:	e7ca      	b.n	802344a <_free_r+0x26>
 80234b4:	b003      	add	sp, #12
 80234b6:	bd30      	pop	{r4, r5, pc}
 80234b8:	20001f60 	.word	0x20001f60

080234bc <sbrk_aligned>:
 80234bc:	b570      	push	{r4, r5, r6, lr}
 80234be:	4e0e      	ldr	r6, [pc, #56]	; (80234f8 <sbrk_aligned+0x3c>)
 80234c0:	460c      	mov	r4, r1
 80234c2:	6831      	ldr	r1, [r6, #0]
 80234c4:	4605      	mov	r5, r0
 80234c6:	b911      	cbnz	r1, 80234ce <sbrk_aligned+0x12>
 80234c8:	f000 f88c 	bl	80235e4 <_sbrk_r>
 80234cc:	6030      	str	r0, [r6, #0]
 80234ce:	4621      	mov	r1, r4
 80234d0:	4628      	mov	r0, r5
 80234d2:	f000 f887 	bl	80235e4 <_sbrk_r>
 80234d6:	1c43      	adds	r3, r0, #1
 80234d8:	d00a      	beq.n	80234f0 <sbrk_aligned+0x34>
 80234da:	1cc4      	adds	r4, r0, #3
 80234dc:	f024 0403 	bic.w	r4, r4, #3
 80234e0:	42a0      	cmp	r0, r4
 80234e2:	d007      	beq.n	80234f4 <sbrk_aligned+0x38>
 80234e4:	1a21      	subs	r1, r4, r0
 80234e6:	4628      	mov	r0, r5
 80234e8:	f000 f87c 	bl	80235e4 <_sbrk_r>
 80234ec:	3001      	adds	r0, #1
 80234ee:	d101      	bne.n	80234f4 <sbrk_aligned+0x38>
 80234f0:	f04f 34ff 	mov.w	r4, #4294967295
 80234f4:	4620      	mov	r0, r4
 80234f6:	bd70      	pop	{r4, r5, r6, pc}
 80234f8:	20001f64 	.word	0x20001f64

080234fc <_malloc_r>:
 80234fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023500:	1ccd      	adds	r5, r1, #3
 8023502:	f025 0503 	bic.w	r5, r5, #3
 8023506:	3508      	adds	r5, #8
 8023508:	2d0c      	cmp	r5, #12
 802350a:	bf38      	it	cc
 802350c:	250c      	movcc	r5, #12
 802350e:	2d00      	cmp	r5, #0
 8023510:	4607      	mov	r7, r0
 8023512:	db01      	blt.n	8023518 <_malloc_r+0x1c>
 8023514:	42a9      	cmp	r1, r5
 8023516:	d905      	bls.n	8023524 <_malloc_r+0x28>
 8023518:	230c      	movs	r3, #12
 802351a:	603b      	str	r3, [r7, #0]
 802351c:	2600      	movs	r6, #0
 802351e:	4630      	mov	r0, r6
 8023520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023524:	4e2e      	ldr	r6, [pc, #184]	; (80235e0 <_malloc_r+0xe4>)
 8023526:	f000 f983 	bl	8023830 <__malloc_lock>
 802352a:	6833      	ldr	r3, [r6, #0]
 802352c:	461c      	mov	r4, r3
 802352e:	bb34      	cbnz	r4, 802357e <_malloc_r+0x82>
 8023530:	4629      	mov	r1, r5
 8023532:	4638      	mov	r0, r7
 8023534:	f7ff ffc2 	bl	80234bc <sbrk_aligned>
 8023538:	1c43      	adds	r3, r0, #1
 802353a:	4604      	mov	r4, r0
 802353c:	d14d      	bne.n	80235da <_malloc_r+0xde>
 802353e:	6834      	ldr	r4, [r6, #0]
 8023540:	4626      	mov	r6, r4
 8023542:	2e00      	cmp	r6, #0
 8023544:	d140      	bne.n	80235c8 <_malloc_r+0xcc>
 8023546:	6823      	ldr	r3, [r4, #0]
 8023548:	4631      	mov	r1, r6
 802354a:	4638      	mov	r0, r7
 802354c:	eb04 0803 	add.w	r8, r4, r3
 8023550:	f000 f848 	bl	80235e4 <_sbrk_r>
 8023554:	4580      	cmp	r8, r0
 8023556:	d13a      	bne.n	80235ce <_malloc_r+0xd2>
 8023558:	6821      	ldr	r1, [r4, #0]
 802355a:	3503      	adds	r5, #3
 802355c:	1a6d      	subs	r5, r5, r1
 802355e:	f025 0503 	bic.w	r5, r5, #3
 8023562:	3508      	adds	r5, #8
 8023564:	2d0c      	cmp	r5, #12
 8023566:	bf38      	it	cc
 8023568:	250c      	movcc	r5, #12
 802356a:	4629      	mov	r1, r5
 802356c:	4638      	mov	r0, r7
 802356e:	f7ff ffa5 	bl	80234bc <sbrk_aligned>
 8023572:	3001      	adds	r0, #1
 8023574:	d02b      	beq.n	80235ce <_malloc_r+0xd2>
 8023576:	6823      	ldr	r3, [r4, #0]
 8023578:	442b      	add	r3, r5
 802357a:	6023      	str	r3, [r4, #0]
 802357c:	e00e      	b.n	802359c <_malloc_r+0xa0>
 802357e:	6822      	ldr	r2, [r4, #0]
 8023580:	1b52      	subs	r2, r2, r5
 8023582:	d41e      	bmi.n	80235c2 <_malloc_r+0xc6>
 8023584:	2a0b      	cmp	r2, #11
 8023586:	d916      	bls.n	80235b6 <_malloc_r+0xba>
 8023588:	1961      	adds	r1, r4, r5
 802358a:	42a3      	cmp	r3, r4
 802358c:	6025      	str	r5, [r4, #0]
 802358e:	bf18      	it	ne
 8023590:	6059      	strne	r1, [r3, #4]
 8023592:	6863      	ldr	r3, [r4, #4]
 8023594:	bf08      	it	eq
 8023596:	6031      	streq	r1, [r6, #0]
 8023598:	5162      	str	r2, [r4, r5]
 802359a:	604b      	str	r3, [r1, #4]
 802359c:	4638      	mov	r0, r7
 802359e:	f104 060b 	add.w	r6, r4, #11
 80235a2:	f000 f94b 	bl	802383c <__malloc_unlock>
 80235a6:	f026 0607 	bic.w	r6, r6, #7
 80235aa:	1d23      	adds	r3, r4, #4
 80235ac:	1af2      	subs	r2, r6, r3
 80235ae:	d0b6      	beq.n	802351e <_malloc_r+0x22>
 80235b0:	1b9b      	subs	r3, r3, r6
 80235b2:	50a3      	str	r3, [r4, r2]
 80235b4:	e7b3      	b.n	802351e <_malloc_r+0x22>
 80235b6:	6862      	ldr	r2, [r4, #4]
 80235b8:	42a3      	cmp	r3, r4
 80235ba:	bf0c      	ite	eq
 80235bc:	6032      	streq	r2, [r6, #0]
 80235be:	605a      	strne	r2, [r3, #4]
 80235c0:	e7ec      	b.n	802359c <_malloc_r+0xa0>
 80235c2:	4623      	mov	r3, r4
 80235c4:	6864      	ldr	r4, [r4, #4]
 80235c6:	e7b2      	b.n	802352e <_malloc_r+0x32>
 80235c8:	4634      	mov	r4, r6
 80235ca:	6876      	ldr	r6, [r6, #4]
 80235cc:	e7b9      	b.n	8023542 <_malloc_r+0x46>
 80235ce:	230c      	movs	r3, #12
 80235d0:	603b      	str	r3, [r7, #0]
 80235d2:	4638      	mov	r0, r7
 80235d4:	f000 f932 	bl	802383c <__malloc_unlock>
 80235d8:	e7a1      	b.n	802351e <_malloc_r+0x22>
 80235da:	6025      	str	r5, [r4, #0]
 80235dc:	e7de      	b.n	802359c <_malloc_r+0xa0>
 80235de:	bf00      	nop
 80235e0:	20001f60 	.word	0x20001f60

080235e4 <_sbrk_r>:
 80235e4:	b538      	push	{r3, r4, r5, lr}
 80235e6:	4d06      	ldr	r5, [pc, #24]	; (8023600 <_sbrk_r+0x1c>)
 80235e8:	2300      	movs	r3, #0
 80235ea:	4604      	mov	r4, r0
 80235ec:	4608      	mov	r0, r1
 80235ee:	602b      	str	r3, [r5, #0]
 80235f0:	f7e0 fac2 	bl	8003b78 <_sbrk>
 80235f4:	1c43      	adds	r3, r0, #1
 80235f6:	d102      	bne.n	80235fe <_sbrk_r+0x1a>
 80235f8:	682b      	ldr	r3, [r5, #0]
 80235fa:	b103      	cbz	r3, 80235fe <_sbrk_r+0x1a>
 80235fc:	6023      	str	r3, [r4, #0]
 80235fe:	bd38      	pop	{r3, r4, r5, pc}
 8023600:	20001f68 	.word	0x20001f68

08023604 <strcasecmp>:
 8023604:	b530      	push	{r4, r5, lr}
 8023606:	4d0b      	ldr	r5, [pc, #44]	; (8023634 <strcasecmp+0x30>)
 8023608:	4604      	mov	r4, r0
 802360a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802360e:	5d5a      	ldrb	r2, [r3, r5]
 8023610:	f002 0203 	and.w	r2, r2, #3
 8023614:	2a01      	cmp	r2, #1
 8023616:	f811 2b01 	ldrb.w	r2, [r1], #1
 802361a:	5ca8      	ldrb	r0, [r5, r2]
 802361c:	f000 0003 	and.w	r0, r0, #3
 8023620:	bf08      	it	eq
 8023622:	3320      	addeq	r3, #32
 8023624:	2801      	cmp	r0, #1
 8023626:	bf08      	it	eq
 8023628:	3220      	addeq	r2, #32
 802362a:	1a98      	subs	r0, r3, r2
 802362c:	d101      	bne.n	8023632 <strcasecmp+0x2e>
 802362e:	2a00      	cmp	r2, #0
 8023630:	d1eb      	bne.n	802360a <strcasecmp+0x6>
 8023632:	bd30      	pop	{r4, r5, pc}
 8023634:	080295ad 	.word	0x080295ad

08023638 <strcat>:
 8023638:	b510      	push	{r4, lr}
 802363a:	4602      	mov	r2, r0
 802363c:	7814      	ldrb	r4, [r2, #0]
 802363e:	4613      	mov	r3, r2
 8023640:	3201      	adds	r2, #1
 8023642:	2c00      	cmp	r4, #0
 8023644:	d1fa      	bne.n	802363c <strcat+0x4>
 8023646:	3b01      	subs	r3, #1
 8023648:	f811 2b01 	ldrb.w	r2, [r1], #1
 802364c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023650:	2a00      	cmp	r2, #0
 8023652:	d1f9      	bne.n	8023648 <strcat+0x10>
 8023654:	bd10      	pop	{r4, pc}

08023656 <strchr>:
 8023656:	b2c9      	uxtb	r1, r1
 8023658:	4603      	mov	r3, r0
 802365a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802365e:	b11a      	cbz	r2, 8023668 <strchr+0x12>
 8023660:	428a      	cmp	r2, r1
 8023662:	d1f9      	bne.n	8023658 <strchr+0x2>
 8023664:	4618      	mov	r0, r3
 8023666:	4770      	bx	lr
 8023668:	2900      	cmp	r1, #0
 802366a:	bf18      	it	ne
 802366c:	2300      	movne	r3, #0
 802366e:	e7f9      	b.n	8023664 <strchr+0xe>

08023670 <strcpy>:
 8023670:	4603      	mov	r3, r0
 8023672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023676:	f803 2b01 	strb.w	r2, [r3], #1
 802367a:	2a00      	cmp	r2, #0
 802367c:	d1f9      	bne.n	8023672 <strcpy+0x2>
 802367e:	4770      	bx	lr

08023680 <strncasecmp>:
 8023680:	b570      	push	{r4, r5, r6, lr}
 8023682:	4e0f      	ldr	r6, [pc, #60]	; (80236c0 <strncasecmp+0x40>)
 8023684:	4604      	mov	r4, r0
 8023686:	440a      	add	r2, r1
 8023688:	428a      	cmp	r2, r1
 802368a:	d101      	bne.n	8023690 <strncasecmp+0x10>
 802368c:	2000      	movs	r0, #0
 802368e:	e013      	b.n	80236b8 <strncasecmp+0x38>
 8023690:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023694:	5d98      	ldrb	r0, [r3, r6]
 8023696:	f000 0003 	and.w	r0, r0, #3
 802369a:	2801      	cmp	r0, #1
 802369c:	f811 0b01 	ldrb.w	r0, [r1], #1
 80236a0:	5c35      	ldrb	r5, [r6, r0]
 80236a2:	f005 0503 	and.w	r5, r5, #3
 80236a6:	bf08      	it	eq
 80236a8:	3320      	addeq	r3, #32
 80236aa:	2d01      	cmp	r5, #1
 80236ac:	bf08      	it	eq
 80236ae:	3020      	addeq	r0, #32
 80236b0:	1a1b      	subs	r3, r3, r0
 80236b2:	d102      	bne.n	80236ba <strncasecmp+0x3a>
 80236b4:	2800      	cmp	r0, #0
 80236b6:	d1e7      	bne.n	8023688 <strncasecmp+0x8>
 80236b8:	bd70      	pop	{r4, r5, r6, pc}
 80236ba:	4618      	mov	r0, r3
 80236bc:	e7fc      	b.n	80236b8 <strncasecmp+0x38>
 80236be:	bf00      	nop
 80236c0:	080295ad 	.word	0x080295ad

080236c4 <strncpy>:
 80236c4:	b510      	push	{r4, lr}
 80236c6:	3901      	subs	r1, #1
 80236c8:	4603      	mov	r3, r0
 80236ca:	b132      	cbz	r2, 80236da <strncpy+0x16>
 80236cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80236d0:	f803 4b01 	strb.w	r4, [r3], #1
 80236d4:	3a01      	subs	r2, #1
 80236d6:	2c00      	cmp	r4, #0
 80236d8:	d1f7      	bne.n	80236ca <strncpy+0x6>
 80236da:	441a      	add	r2, r3
 80236dc:	2100      	movs	r1, #0
 80236de:	4293      	cmp	r3, r2
 80236e0:	d100      	bne.n	80236e4 <strncpy+0x20>
 80236e2:	bd10      	pop	{r4, pc}
 80236e4:	f803 1b01 	strb.w	r1, [r3], #1
 80236e8:	e7f9      	b.n	80236de <strncpy+0x1a>

080236ea <strstr>:
 80236ea:	780a      	ldrb	r2, [r1, #0]
 80236ec:	b570      	push	{r4, r5, r6, lr}
 80236ee:	b96a      	cbnz	r2, 802370c <strstr+0x22>
 80236f0:	bd70      	pop	{r4, r5, r6, pc}
 80236f2:	429a      	cmp	r2, r3
 80236f4:	d109      	bne.n	802370a <strstr+0x20>
 80236f6:	460c      	mov	r4, r1
 80236f8:	4605      	mov	r5, r0
 80236fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d0f6      	beq.n	80236f0 <strstr+0x6>
 8023702:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8023706:	429e      	cmp	r6, r3
 8023708:	d0f7      	beq.n	80236fa <strstr+0x10>
 802370a:	3001      	adds	r0, #1
 802370c:	7803      	ldrb	r3, [r0, #0]
 802370e:	2b00      	cmp	r3, #0
 8023710:	d1ef      	bne.n	80236f2 <strstr+0x8>
 8023712:	4618      	mov	r0, r3
 8023714:	e7ec      	b.n	80236f0 <strstr+0x6>
	...

08023718 <_strtol_l.constprop.0>:
 8023718:	2b01      	cmp	r3, #1
 802371a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802371e:	d001      	beq.n	8023724 <_strtol_l.constprop.0+0xc>
 8023720:	2b24      	cmp	r3, #36	; 0x24
 8023722:	d906      	bls.n	8023732 <_strtol_l.constprop.0+0x1a>
 8023724:	f7ff fe18 	bl	8023358 <__errno>
 8023728:	2316      	movs	r3, #22
 802372a:	6003      	str	r3, [r0, #0]
 802372c:	2000      	movs	r0, #0
 802372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023732:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023818 <_strtol_l.constprop.0+0x100>
 8023736:	460d      	mov	r5, r1
 8023738:	462e      	mov	r6, r5
 802373a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802373e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8023742:	f017 0708 	ands.w	r7, r7, #8
 8023746:	d1f7      	bne.n	8023738 <_strtol_l.constprop.0+0x20>
 8023748:	2c2d      	cmp	r4, #45	; 0x2d
 802374a:	d132      	bne.n	80237b2 <_strtol_l.constprop.0+0x9a>
 802374c:	782c      	ldrb	r4, [r5, #0]
 802374e:	2701      	movs	r7, #1
 8023750:	1cb5      	adds	r5, r6, #2
 8023752:	2b00      	cmp	r3, #0
 8023754:	d05b      	beq.n	802380e <_strtol_l.constprop.0+0xf6>
 8023756:	2b10      	cmp	r3, #16
 8023758:	d109      	bne.n	802376e <_strtol_l.constprop.0+0x56>
 802375a:	2c30      	cmp	r4, #48	; 0x30
 802375c:	d107      	bne.n	802376e <_strtol_l.constprop.0+0x56>
 802375e:	782c      	ldrb	r4, [r5, #0]
 8023760:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023764:	2c58      	cmp	r4, #88	; 0x58
 8023766:	d14d      	bne.n	8023804 <_strtol_l.constprop.0+0xec>
 8023768:	786c      	ldrb	r4, [r5, #1]
 802376a:	2310      	movs	r3, #16
 802376c:	3502      	adds	r5, #2
 802376e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023772:	f108 38ff 	add.w	r8, r8, #4294967295
 8023776:	f04f 0c00 	mov.w	ip, #0
 802377a:	fbb8 f9f3 	udiv	r9, r8, r3
 802377e:	4666      	mov	r6, ip
 8023780:	fb03 8a19 	mls	sl, r3, r9, r8
 8023784:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8023788:	f1be 0f09 	cmp.w	lr, #9
 802378c:	d816      	bhi.n	80237bc <_strtol_l.constprop.0+0xa4>
 802378e:	4674      	mov	r4, lr
 8023790:	42a3      	cmp	r3, r4
 8023792:	dd24      	ble.n	80237de <_strtol_l.constprop.0+0xc6>
 8023794:	f1bc 0f00 	cmp.w	ip, #0
 8023798:	db1e      	blt.n	80237d8 <_strtol_l.constprop.0+0xc0>
 802379a:	45b1      	cmp	r9, r6
 802379c:	d31c      	bcc.n	80237d8 <_strtol_l.constprop.0+0xc0>
 802379e:	d101      	bne.n	80237a4 <_strtol_l.constprop.0+0x8c>
 80237a0:	45a2      	cmp	sl, r4
 80237a2:	db19      	blt.n	80237d8 <_strtol_l.constprop.0+0xc0>
 80237a4:	fb06 4603 	mla	r6, r6, r3, r4
 80237a8:	f04f 0c01 	mov.w	ip, #1
 80237ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80237b0:	e7e8      	b.n	8023784 <_strtol_l.constprop.0+0x6c>
 80237b2:	2c2b      	cmp	r4, #43	; 0x2b
 80237b4:	bf04      	itt	eq
 80237b6:	782c      	ldrbeq	r4, [r5, #0]
 80237b8:	1cb5      	addeq	r5, r6, #2
 80237ba:	e7ca      	b.n	8023752 <_strtol_l.constprop.0+0x3a>
 80237bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80237c0:	f1be 0f19 	cmp.w	lr, #25
 80237c4:	d801      	bhi.n	80237ca <_strtol_l.constprop.0+0xb2>
 80237c6:	3c37      	subs	r4, #55	; 0x37
 80237c8:	e7e2      	b.n	8023790 <_strtol_l.constprop.0+0x78>
 80237ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80237ce:	f1be 0f19 	cmp.w	lr, #25
 80237d2:	d804      	bhi.n	80237de <_strtol_l.constprop.0+0xc6>
 80237d4:	3c57      	subs	r4, #87	; 0x57
 80237d6:	e7db      	b.n	8023790 <_strtol_l.constprop.0+0x78>
 80237d8:	f04f 3cff 	mov.w	ip, #4294967295
 80237dc:	e7e6      	b.n	80237ac <_strtol_l.constprop.0+0x94>
 80237de:	f1bc 0f00 	cmp.w	ip, #0
 80237e2:	da05      	bge.n	80237f0 <_strtol_l.constprop.0+0xd8>
 80237e4:	2322      	movs	r3, #34	; 0x22
 80237e6:	6003      	str	r3, [r0, #0]
 80237e8:	4646      	mov	r6, r8
 80237ea:	b942      	cbnz	r2, 80237fe <_strtol_l.constprop.0+0xe6>
 80237ec:	4630      	mov	r0, r6
 80237ee:	e79e      	b.n	802372e <_strtol_l.constprop.0+0x16>
 80237f0:	b107      	cbz	r7, 80237f4 <_strtol_l.constprop.0+0xdc>
 80237f2:	4276      	negs	r6, r6
 80237f4:	2a00      	cmp	r2, #0
 80237f6:	d0f9      	beq.n	80237ec <_strtol_l.constprop.0+0xd4>
 80237f8:	f1bc 0f00 	cmp.w	ip, #0
 80237fc:	d000      	beq.n	8023800 <_strtol_l.constprop.0+0xe8>
 80237fe:	1e69      	subs	r1, r5, #1
 8023800:	6011      	str	r1, [r2, #0]
 8023802:	e7f3      	b.n	80237ec <_strtol_l.constprop.0+0xd4>
 8023804:	2430      	movs	r4, #48	; 0x30
 8023806:	2b00      	cmp	r3, #0
 8023808:	d1b1      	bne.n	802376e <_strtol_l.constprop.0+0x56>
 802380a:	2308      	movs	r3, #8
 802380c:	e7af      	b.n	802376e <_strtol_l.constprop.0+0x56>
 802380e:	2c30      	cmp	r4, #48	; 0x30
 8023810:	d0a5      	beq.n	802375e <_strtol_l.constprop.0+0x46>
 8023812:	230a      	movs	r3, #10
 8023814:	e7ab      	b.n	802376e <_strtol_l.constprop.0+0x56>
 8023816:	bf00      	nop
 8023818:	080295ad 	.word	0x080295ad

0802381c <strtol>:
 802381c:	4613      	mov	r3, r2
 802381e:	460a      	mov	r2, r1
 8023820:	4601      	mov	r1, r0
 8023822:	4802      	ldr	r0, [pc, #8]	; (802382c <strtol+0x10>)
 8023824:	6800      	ldr	r0, [r0, #0]
 8023826:	f7ff bf77 	b.w	8023718 <_strtol_l.constprop.0>
 802382a:	bf00      	nop
 802382c:	20000140 	.word	0x20000140

08023830 <__malloc_lock>:
 8023830:	4801      	ldr	r0, [pc, #4]	; (8023838 <__malloc_lock+0x8>)
 8023832:	f000 b809 	b.w	8023848 <__retarget_lock_acquire_recursive>
 8023836:	bf00      	nop
 8023838:	20001f6c 	.word	0x20001f6c

0802383c <__malloc_unlock>:
 802383c:	4801      	ldr	r0, [pc, #4]	; (8023844 <__malloc_unlock+0x8>)
 802383e:	f000 b804 	b.w	802384a <__retarget_lock_release_recursive>
 8023842:	bf00      	nop
 8023844:	20001f6c 	.word	0x20001f6c

08023848 <__retarget_lock_acquire_recursive>:
 8023848:	4770      	bx	lr

0802384a <__retarget_lock_release_recursive>:
 802384a:	4770      	bx	lr
 802384c:	0000      	movs	r0, r0
	...

08023850 <cos>:
 8023850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023852:	ec53 2b10 	vmov	r2, r3, d0
 8023856:	4826      	ldr	r0, [pc, #152]	; (80238f0 <cos+0xa0>)
 8023858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802385c:	4281      	cmp	r1, r0
 802385e:	dc06      	bgt.n	802386e <cos+0x1e>
 8023860:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80238e8 <cos+0x98>
 8023864:	b005      	add	sp, #20
 8023866:	f85d eb04 	ldr.w	lr, [sp], #4
 802386a:	f001 b9c1 	b.w	8024bf0 <__kernel_cos>
 802386e:	4821      	ldr	r0, [pc, #132]	; (80238f4 <cos+0xa4>)
 8023870:	4281      	cmp	r1, r0
 8023872:	dd09      	ble.n	8023888 <cos+0x38>
 8023874:	ee10 0a10 	vmov	r0, s0
 8023878:	4619      	mov	r1, r3
 802387a:	f7dc fcb9 	bl	80001f0 <__aeabi_dsub>
 802387e:	ec41 0b10 	vmov	d0, r0, r1
 8023882:	b005      	add	sp, #20
 8023884:	f85d fb04 	ldr.w	pc, [sp], #4
 8023888:	4668      	mov	r0, sp
 802388a:	f000 f9fd 	bl	8023c88 <__ieee754_rem_pio2>
 802388e:	f000 0003 	and.w	r0, r0, #3
 8023892:	2801      	cmp	r0, #1
 8023894:	d00b      	beq.n	80238ae <cos+0x5e>
 8023896:	2802      	cmp	r0, #2
 8023898:	d016      	beq.n	80238c8 <cos+0x78>
 802389a:	b9e0      	cbnz	r0, 80238d6 <cos+0x86>
 802389c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80238a0:	ed9d 0b00 	vldr	d0, [sp]
 80238a4:	f001 f9a4 	bl	8024bf0 <__kernel_cos>
 80238a8:	ec51 0b10 	vmov	r0, r1, d0
 80238ac:	e7e7      	b.n	802387e <cos+0x2e>
 80238ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80238b2:	ed9d 0b00 	vldr	d0, [sp]
 80238b6:	f001 fdb3 	bl	8025420 <__kernel_sin>
 80238ba:	ec53 2b10 	vmov	r2, r3, d0
 80238be:	ee10 0a10 	vmov	r0, s0
 80238c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80238c6:	e7da      	b.n	802387e <cos+0x2e>
 80238c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80238cc:	ed9d 0b00 	vldr	d0, [sp]
 80238d0:	f001 f98e 	bl	8024bf0 <__kernel_cos>
 80238d4:	e7f1      	b.n	80238ba <cos+0x6a>
 80238d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80238da:	ed9d 0b00 	vldr	d0, [sp]
 80238de:	2001      	movs	r0, #1
 80238e0:	f001 fd9e 	bl	8025420 <__kernel_sin>
 80238e4:	e7e0      	b.n	80238a8 <cos+0x58>
 80238e6:	bf00      	nop
	...
 80238f0:	3fe921fb 	.word	0x3fe921fb
 80238f4:	7fefffff 	.word	0x7fefffff

080238f8 <sin>:
 80238f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80238fa:	ec53 2b10 	vmov	r2, r3, d0
 80238fe:	4828      	ldr	r0, [pc, #160]	; (80239a0 <sin+0xa8>)
 8023900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023904:	4281      	cmp	r1, r0
 8023906:	dc07      	bgt.n	8023918 <sin+0x20>
 8023908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023998 <sin+0xa0>
 802390c:	2000      	movs	r0, #0
 802390e:	b005      	add	sp, #20
 8023910:	f85d eb04 	ldr.w	lr, [sp], #4
 8023914:	f001 bd84 	b.w	8025420 <__kernel_sin>
 8023918:	4822      	ldr	r0, [pc, #136]	; (80239a4 <sin+0xac>)
 802391a:	4281      	cmp	r1, r0
 802391c:	dd09      	ble.n	8023932 <sin+0x3a>
 802391e:	ee10 0a10 	vmov	r0, s0
 8023922:	4619      	mov	r1, r3
 8023924:	f7dc fc64 	bl	80001f0 <__aeabi_dsub>
 8023928:	ec41 0b10 	vmov	d0, r0, r1
 802392c:	b005      	add	sp, #20
 802392e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023932:	4668      	mov	r0, sp
 8023934:	f000 f9a8 	bl	8023c88 <__ieee754_rem_pio2>
 8023938:	f000 0003 	and.w	r0, r0, #3
 802393c:	2801      	cmp	r0, #1
 802393e:	d00c      	beq.n	802395a <sin+0x62>
 8023940:	2802      	cmp	r0, #2
 8023942:	d011      	beq.n	8023968 <sin+0x70>
 8023944:	b9f0      	cbnz	r0, 8023984 <sin+0x8c>
 8023946:	ed9d 1b02 	vldr	d1, [sp, #8]
 802394a:	ed9d 0b00 	vldr	d0, [sp]
 802394e:	2001      	movs	r0, #1
 8023950:	f001 fd66 	bl	8025420 <__kernel_sin>
 8023954:	ec51 0b10 	vmov	r0, r1, d0
 8023958:	e7e6      	b.n	8023928 <sin+0x30>
 802395a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802395e:	ed9d 0b00 	vldr	d0, [sp]
 8023962:	f001 f945 	bl	8024bf0 <__kernel_cos>
 8023966:	e7f5      	b.n	8023954 <sin+0x5c>
 8023968:	ed9d 1b02 	vldr	d1, [sp, #8]
 802396c:	ed9d 0b00 	vldr	d0, [sp]
 8023970:	2001      	movs	r0, #1
 8023972:	f001 fd55 	bl	8025420 <__kernel_sin>
 8023976:	ec53 2b10 	vmov	r2, r3, d0
 802397a:	ee10 0a10 	vmov	r0, s0
 802397e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023982:	e7d1      	b.n	8023928 <sin+0x30>
 8023984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023988:	ed9d 0b00 	vldr	d0, [sp]
 802398c:	f001 f930 	bl	8024bf0 <__kernel_cos>
 8023990:	e7f1      	b.n	8023976 <sin+0x7e>
 8023992:	bf00      	nop
 8023994:	f3af 8000 	nop.w
	...
 80239a0:	3fe921fb 	.word	0x3fe921fb
 80239a4:	7fefffff 	.word	0x7fefffff

080239a8 <cosf>:
 80239a8:	ee10 3a10 	vmov	r3, s0
 80239ac:	b507      	push	{r0, r1, r2, lr}
 80239ae:	4a1e      	ldr	r2, [pc, #120]	; (8023a28 <cosf+0x80>)
 80239b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80239b4:	4293      	cmp	r3, r2
 80239b6:	dc06      	bgt.n	80239c6 <cosf+0x1e>
 80239b8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8023a2c <cosf+0x84>
 80239bc:	b003      	add	sp, #12
 80239be:	f85d eb04 	ldr.w	lr, [sp], #4
 80239c2:	f001 bdeb 	b.w	802559c <__kernel_cosf>
 80239c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80239ca:	db04      	blt.n	80239d6 <cosf+0x2e>
 80239cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80239d0:	b003      	add	sp, #12
 80239d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80239d6:	4668      	mov	r0, sp
 80239d8:	f000 ffc8 	bl	802496c <__ieee754_rem_pio2f>
 80239dc:	f000 0003 	and.w	r0, r0, #3
 80239e0:	2801      	cmp	r0, #1
 80239e2:	d009      	beq.n	80239f8 <cosf+0x50>
 80239e4:	2802      	cmp	r0, #2
 80239e6:	d010      	beq.n	8023a0a <cosf+0x62>
 80239e8:	b9b0      	cbnz	r0, 8023a18 <cosf+0x70>
 80239ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80239ee:	ed9d 0a00 	vldr	s0, [sp]
 80239f2:	f001 fdd3 	bl	802559c <__kernel_cosf>
 80239f6:	e7eb      	b.n	80239d0 <cosf+0x28>
 80239f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80239fc:	ed9d 0a00 	vldr	s0, [sp]
 8023a00:	f002 f8a2 	bl	8025b48 <__kernel_sinf>
 8023a04:	eeb1 0a40 	vneg.f32	s0, s0
 8023a08:	e7e2      	b.n	80239d0 <cosf+0x28>
 8023a0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a0e:	ed9d 0a00 	vldr	s0, [sp]
 8023a12:	f001 fdc3 	bl	802559c <__kernel_cosf>
 8023a16:	e7f5      	b.n	8023a04 <cosf+0x5c>
 8023a18:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a1c:	ed9d 0a00 	vldr	s0, [sp]
 8023a20:	2001      	movs	r0, #1
 8023a22:	f002 f891 	bl	8025b48 <__kernel_sinf>
 8023a26:	e7d3      	b.n	80239d0 <cosf+0x28>
 8023a28:	3f490fd8 	.word	0x3f490fd8
 8023a2c:	00000000 	.word	0x00000000

08023a30 <lrintf>:
 8023a30:	ee10 3a10 	vmov	r3, s0
 8023a34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023a38:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8023a3c:	281e      	cmp	r0, #30
 8023a3e:	b082      	sub	sp, #8
 8023a40:	dc2e      	bgt.n	8023aa0 <lrintf+0x70>
 8023a42:	1c41      	adds	r1, r0, #1
 8023a44:	da02      	bge.n	8023a4c <lrintf+0x1c>
 8023a46:	2000      	movs	r0, #0
 8023a48:	b002      	add	sp, #8
 8023a4a:	4770      	bx	lr
 8023a4c:	2816      	cmp	r0, #22
 8023a4e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8023a52:	dd09      	ble.n	8023a68 <lrintf+0x38>
 8023a54:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023a58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023a5c:	3a96      	subs	r2, #150	; 0x96
 8023a5e:	4090      	lsls	r0, r2
 8023a60:	2900      	cmp	r1, #0
 8023a62:	d0f1      	beq.n	8023a48 <lrintf+0x18>
 8023a64:	4240      	negs	r0, r0
 8023a66:	e7ef      	b.n	8023a48 <lrintf+0x18>
 8023a68:	4b10      	ldr	r3, [pc, #64]	; (8023aac <lrintf+0x7c>)
 8023a6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8023a6e:	ed93 7a00 	vldr	s14, [r3]
 8023a72:	ee37 0a00 	vadd.f32	s0, s14, s0
 8023a76:	ed8d 0a01 	vstr	s0, [sp, #4]
 8023a7a:	eddd 7a01 	vldr	s15, [sp, #4]
 8023a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023a82:	ee17 3a90 	vmov	r3, s15
 8023a86:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8023a8a:	d0dc      	beq.n	8023a46 <lrintf+0x16>
 8023a8c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023a90:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8023a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023a98:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8023a9c:	40d8      	lsrs	r0, r3
 8023a9e:	e7df      	b.n	8023a60 <lrintf+0x30>
 8023aa0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023aa4:	ee17 0a90 	vmov	r0, s15
 8023aa8:	e7ce      	b.n	8023a48 <lrintf+0x18>
 8023aaa:	bf00      	nop
 8023aac:	080296b0 	.word	0x080296b0

08023ab0 <sinf>:
 8023ab0:	ee10 3a10 	vmov	r3, s0
 8023ab4:	b507      	push	{r0, r1, r2, lr}
 8023ab6:	4a1f      	ldr	r2, [pc, #124]	; (8023b34 <sinf+0x84>)
 8023ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023abc:	4293      	cmp	r3, r2
 8023abe:	dc07      	bgt.n	8023ad0 <sinf+0x20>
 8023ac0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8023b38 <sinf+0x88>
 8023ac4:	2000      	movs	r0, #0
 8023ac6:	b003      	add	sp, #12
 8023ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8023acc:	f002 b83c 	b.w	8025b48 <__kernel_sinf>
 8023ad0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023ad4:	db04      	blt.n	8023ae0 <sinf+0x30>
 8023ad6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023ada:	b003      	add	sp, #12
 8023adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ae0:	4668      	mov	r0, sp
 8023ae2:	f000 ff43 	bl	802496c <__ieee754_rem_pio2f>
 8023ae6:	f000 0003 	and.w	r0, r0, #3
 8023aea:	2801      	cmp	r0, #1
 8023aec:	d00a      	beq.n	8023b04 <sinf+0x54>
 8023aee:	2802      	cmp	r0, #2
 8023af0:	d00f      	beq.n	8023b12 <sinf+0x62>
 8023af2:	b9c0      	cbnz	r0, 8023b26 <sinf+0x76>
 8023af4:	eddd 0a01 	vldr	s1, [sp, #4]
 8023af8:	ed9d 0a00 	vldr	s0, [sp]
 8023afc:	2001      	movs	r0, #1
 8023afe:	f002 f823 	bl	8025b48 <__kernel_sinf>
 8023b02:	e7ea      	b.n	8023ada <sinf+0x2a>
 8023b04:	eddd 0a01 	vldr	s1, [sp, #4]
 8023b08:	ed9d 0a00 	vldr	s0, [sp]
 8023b0c:	f001 fd46 	bl	802559c <__kernel_cosf>
 8023b10:	e7e3      	b.n	8023ada <sinf+0x2a>
 8023b12:	eddd 0a01 	vldr	s1, [sp, #4]
 8023b16:	ed9d 0a00 	vldr	s0, [sp]
 8023b1a:	2001      	movs	r0, #1
 8023b1c:	f002 f814 	bl	8025b48 <__kernel_sinf>
 8023b20:	eeb1 0a40 	vneg.f32	s0, s0
 8023b24:	e7d9      	b.n	8023ada <sinf+0x2a>
 8023b26:	eddd 0a01 	vldr	s1, [sp, #4]
 8023b2a:	ed9d 0a00 	vldr	s0, [sp]
 8023b2e:	f001 fd35 	bl	802559c <__kernel_cosf>
 8023b32:	e7f5      	b.n	8023b20 <sinf+0x70>
 8023b34:	3f490fd8 	.word	0x3f490fd8
 8023b38:	00000000 	.word	0x00000000

08023b3c <acosf>:
 8023b3c:	b508      	push	{r3, lr}
 8023b3e:	ed2d 8b02 	vpush	{d8}
 8023b42:	eeb0 8a40 	vmov.f32	s16, s0
 8023b46:	f000 faab 	bl	80240a0 <__ieee754_acosf>
 8023b4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8023b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b52:	eef0 8a40 	vmov.f32	s17, s0
 8023b56:	d615      	bvs.n	8023b84 <acosf+0x48>
 8023b58:	eeb0 0a48 	vmov.f32	s0, s16
 8023b5c:	f002 fa42 	bl	8025fe4 <fabsf>
 8023b60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023b64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b6c:	dd0a      	ble.n	8023b84 <acosf+0x48>
 8023b6e:	f7ff fbf3 	bl	8023358 <__errno>
 8023b72:	ecbd 8b02 	vpop	{d8}
 8023b76:	2321      	movs	r3, #33	; 0x21
 8023b78:	6003      	str	r3, [r0, #0]
 8023b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023b7e:	4804      	ldr	r0, [pc, #16]	; (8023b90 <acosf+0x54>)
 8023b80:	f002 ba86 	b.w	8026090 <nanf>
 8023b84:	eeb0 0a68 	vmov.f32	s0, s17
 8023b88:	ecbd 8b02 	vpop	{d8}
 8023b8c:	bd08      	pop	{r3, pc}
 8023b8e:	bf00      	nop
 8023b90:	080296b8 	.word	0x080296b8

08023b94 <atan2f>:
 8023b94:	f000 bb7c 	b.w	8024290 <__ieee754_atan2f>

08023b98 <powf>:
 8023b98:	b508      	push	{r3, lr}
 8023b9a:	ed2d 8b04 	vpush	{d8-d9}
 8023b9e:	eeb0 8a60 	vmov.f32	s16, s1
 8023ba2:	eeb0 9a40 	vmov.f32	s18, s0
 8023ba6:	f000 fc13 	bl	80243d0 <__ieee754_powf>
 8023baa:	eeb4 8a48 	vcmp.f32	s16, s16
 8023bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bb2:	eef0 8a40 	vmov.f32	s17, s0
 8023bb6:	d63e      	bvs.n	8023c36 <powf+0x9e>
 8023bb8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8023bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bc0:	d112      	bne.n	8023be8 <powf+0x50>
 8023bc2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bca:	d039      	beq.n	8023c40 <powf+0xa8>
 8023bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8023bd0:	f002 fa0f 	bl	8025ff2 <finitef>
 8023bd4:	b378      	cbz	r0, 8023c36 <powf+0x9e>
 8023bd6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bde:	d52a      	bpl.n	8023c36 <powf+0x9e>
 8023be0:	f7ff fbba 	bl	8023358 <__errno>
 8023be4:	2322      	movs	r3, #34	; 0x22
 8023be6:	e014      	b.n	8023c12 <powf+0x7a>
 8023be8:	f002 fa03 	bl	8025ff2 <finitef>
 8023bec:	b998      	cbnz	r0, 8023c16 <powf+0x7e>
 8023bee:	eeb0 0a49 	vmov.f32	s0, s18
 8023bf2:	f002 f9fe 	bl	8025ff2 <finitef>
 8023bf6:	b170      	cbz	r0, 8023c16 <powf+0x7e>
 8023bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8023bfc:	f002 f9f9 	bl	8025ff2 <finitef>
 8023c00:	b148      	cbz	r0, 8023c16 <powf+0x7e>
 8023c02:	eef4 8a68 	vcmp.f32	s17, s17
 8023c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c0a:	d7e9      	bvc.n	8023be0 <powf+0x48>
 8023c0c:	f7ff fba4 	bl	8023358 <__errno>
 8023c10:	2321      	movs	r3, #33	; 0x21
 8023c12:	6003      	str	r3, [r0, #0]
 8023c14:	e00f      	b.n	8023c36 <powf+0x9e>
 8023c16:	eef5 8a40 	vcmp.f32	s17, #0.0
 8023c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c1e:	d10a      	bne.n	8023c36 <powf+0x9e>
 8023c20:	eeb0 0a49 	vmov.f32	s0, s18
 8023c24:	f002 f9e5 	bl	8025ff2 <finitef>
 8023c28:	b128      	cbz	r0, 8023c36 <powf+0x9e>
 8023c2a:	eeb0 0a48 	vmov.f32	s0, s16
 8023c2e:	f002 f9e0 	bl	8025ff2 <finitef>
 8023c32:	2800      	cmp	r0, #0
 8023c34:	d1d4      	bne.n	8023be0 <powf+0x48>
 8023c36:	eeb0 0a68 	vmov.f32	s0, s17
 8023c3a:	ecbd 8b04 	vpop	{d8-d9}
 8023c3e:	bd08      	pop	{r3, pc}
 8023c40:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8023c44:	e7f7      	b.n	8023c36 <powf+0x9e>
	...

08023c48 <sqrtf>:
 8023c48:	b508      	push	{r3, lr}
 8023c4a:	ed2d 8b02 	vpush	{d8}
 8023c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8023c52:	f000 ffc7 	bl	8024be4 <__ieee754_sqrtf>
 8023c56:	eeb4 8a48 	vcmp.f32	s16, s16
 8023c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c5e:	d60c      	bvs.n	8023c7a <sqrtf+0x32>
 8023c60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023c80 <sqrtf+0x38>
 8023c64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c6c:	d505      	bpl.n	8023c7a <sqrtf+0x32>
 8023c6e:	f7ff fb73 	bl	8023358 <__errno>
 8023c72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023c76:	2321      	movs	r3, #33	; 0x21
 8023c78:	6003      	str	r3, [r0, #0]
 8023c7a:	ecbd 8b02 	vpop	{d8}
 8023c7e:	bd08      	pop	{r3, pc}
	...

08023c88 <__ieee754_rem_pio2>:
 8023c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c8c:	ed2d 8b02 	vpush	{d8}
 8023c90:	ec55 4b10 	vmov	r4, r5, d0
 8023c94:	4bca      	ldr	r3, [pc, #808]	; (8023fc0 <__ieee754_rem_pio2+0x338>)
 8023c96:	b08b      	sub	sp, #44	; 0x2c
 8023c98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023c9c:	4598      	cmp	r8, r3
 8023c9e:	4682      	mov	sl, r0
 8023ca0:	9502      	str	r5, [sp, #8]
 8023ca2:	dc08      	bgt.n	8023cb6 <__ieee754_rem_pio2+0x2e>
 8023ca4:	2200      	movs	r2, #0
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	ed80 0b00 	vstr	d0, [r0]
 8023cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023cb0:	f04f 0b00 	mov.w	fp, #0
 8023cb4:	e028      	b.n	8023d08 <__ieee754_rem_pio2+0x80>
 8023cb6:	4bc3      	ldr	r3, [pc, #780]	; (8023fc4 <__ieee754_rem_pio2+0x33c>)
 8023cb8:	4598      	cmp	r8, r3
 8023cba:	dc78      	bgt.n	8023dae <__ieee754_rem_pio2+0x126>
 8023cbc:	9b02      	ldr	r3, [sp, #8]
 8023cbe:	4ec2      	ldr	r6, [pc, #776]	; (8023fc8 <__ieee754_rem_pio2+0x340>)
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	ee10 0a10 	vmov	r0, s0
 8023cc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8023f88 <__ieee754_rem_pio2+0x300>)
 8023cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ccc:	4629      	mov	r1, r5
 8023cce:	dd39      	ble.n	8023d44 <__ieee754_rem_pio2+0xbc>
 8023cd0:	f7dc fa8e 	bl	80001f0 <__aeabi_dsub>
 8023cd4:	45b0      	cmp	r8, r6
 8023cd6:	4604      	mov	r4, r0
 8023cd8:	460d      	mov	r5, r1
 8023cda:	d01b      	beq.n	8023d14 <__ieee754_rem_pio2+0x8c>
 8023cdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8023f90 <__ieee754_rem_pio2+0x308>)
 8023cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ce2:	f7dc fa85 	bl	80001f0 <__aeabi_dsub>
 8023ce6:	4602      	mov	r2, r0
 8023ce8:	460b      	mov	r3, r1
 8023cea:	e9ca 2300 	strd	r2, r3, [sl]
 8023cee:	4620      	mov	r0, r4
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	f7dc fa7d 	bl	80001f0 <__aeabi_dsub>
 8023cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8023f90 <__ieee754_rem_pio2+0x308>)
 8023cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cfc:	f7dc fa78 	bl	80001f0 <__aeabi_dsub>
 8023d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023d04:	f04f 0b01 	mov.w	fp, #1
 8023d08:	4658      	mov	r0, fp
 8023d0a:	b00b      	add	sp, #44	; 0x2c
 8023d0c:	ecbd 8b02 	vpop	{d8}
 8023d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d14:	a3a0      	add	r3, pc, #640	; (adr r3, 8023f98 <__ieee754_rem_pio2+0x310>)
 8023d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d1a:	f7dc fa69 	bl	80001f0 <__aeabi_dsub>
 8023d1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8023fa0 <__ieee754_rem_pio2+0x318>)
 8023d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d24:	4604      	mov	r4, r0
 8023d26:	460d      	mov	r5, r1
 8023d28:	f7dc fa62 	bl	80001f0 <__aeabi_dsub>
 8023d2c:	4602      	mov	r2, r0
 8023d2e:	460b      	mov	r3, r1
 8023d30:	e9ca 2300 	strd	r2, r3, [sl]
 8023d34:	4620      	mov	r0, r4
 8023d36:	4629      	mov	r1, r5
 8023d38:	f7dc fa5a 	bl	80001f0 <__aeabi_dsub>
 8023d3c:	a398      	add	r3, pc, #608	; (adr r3, 8023fa0 <__ieee754_rem_pio2+0x318>)
 8023d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d42:	e7db      	b.n	8023cfc <__ieee754_rem_pio2+0x74>
 8023d44:	f7dc fa56 	bl	80001f4 <__adddf3>
 8023d48:	45b0      	cmp	r8, r6
 8023d4a:	4604      	mov	r4, r0
 8023d4c:	460d      	mov	r5, r1
 8023d4e:	d016      	beq.n	8023d7e <__ieee754_rem_pio2+0xf6>
 8023d50:	a38f      	add	r3, pc, #572	; (adr r3, 8023f90 <__ieee754_rem_pio2+0x308>)
 8023d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d56:	f7dc fa4d 	bl	80001f4 <__adddf3>
 8023d5a:	4602      	mov	r2, r0
 8023d5c:	460b      	mov	r3, r1
 8023d5e:	e9ca 2300 	strd	r2, r3, [sl]
 8023d62:	4620      	mov	r0, r4
 8023d64:	4629      	mov	r1, r5
 8023d66:	f7dc fa43 	bl	80001f0 <__aeabi_dsub>
 8023d6a:	a389      	add	r3, pc, #548	; (adr r3, 8023f90 <__ieee754_rem_pio2+0x308>)
 8023d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d70:	f7dc fa40 	bl	80001f4 <__adddf3>
 8023d74:	f04f 3bff 	mov.w	fp, #4294967295
 8023d78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023d7c:	e7c4      	b.n	8023d08 <__ieee754_rem_pio2+0x80>
 8023d7e:	a386      	add	r3, pc, #536	; (adr r3, 8023f98 <__ieee754_rem_pio2+0x310>)
 8023d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d84:	f7dc fa36 	bl	80001f4 <__adddf3>
 8023d88:	a385      	add	r3, pc, #532	; (adr r3, 8023fa0 <__ieee754_rem_pio2+0x318>)
 8023d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d8e:	4604      	mov	r4, r0
 8023d90:	460d      	mov	r5, r1
 8023d92:	f7dc fa2f 	bl	80001f4 <__adddf3>
 8023d96:	4602      	mov	r2, r0
 8023d98:	460b      	mov	r3, r1
 8023d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8023d9e:	4620      	mov	r0, r4
 8023da0:	4629      	mov	r1, r5
 8023da2:	f7dc fa25 	bl	80001f0 <__aeabi_dsub>
 8023da6:	a37e      	add	r3, pc, #504	; (adr r3, 8023fa0 <__ieee754_rem_pio2+0x318>)
 8023da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dac:	e7e0      	b.n	8023d70 <__ieee754_rem_pio2+0xe8>
 8023dae:	4b87      	ldr	r3, [pc, #540]	; (8023fcc <__ieee754_rem_pio2+0x344>)
 8023db0:	4598      	cmp	r8, r3
 8023db2:	f300 80d9 	bgt.w	8023f68 <__ieee754_rem_pio2+0x2e0>
 8023db6:	f001 ff31 	bl	8025c1c <fabs>
 8023dba:	ec55 4b10 	vmov	r4, r5, d0
 8023dbe:	ee10 0a10 	vmov	r0, s0
 8023dc2:	a379      	add	r3, pc, #484	; (adr r3, 8023fa8 <__ieee754_rem_pio2+0x320>)
 8023dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc8:	4629      	mov	r1, r5
 8023dca:	f7dc fbc9 	bl	8000560 <__aeabi_dmul>
 8023dce:	4b80      	ldr	r3, [pc, #512]	; (8023fd0 <__ieee754_rem_pio2+0x348>)
 8023dd0:	2200      	movs	r2, #0
 8023dd2:	f7dc fa0f 	bl	80001f4 <__adddf3>
 8023dd6:	f7dc fe5d 	bl	8000a94 <__aeabi_d2iz>
 8023dda:	4683      	mov	fp, r0
 8023ddc:	f7dc fb56 	bl	800048c <__aeabi_i2d>
 8023de0:	4602      	mov	r2, r0
 8023de2:	460b      	mov	r3, r1
 8023de4:	ec43 2b18 	vmov	d8, r2, r3
 8023de8:	a367      	add	r3, pc, #412	; (adr r3, 8023f88 <__ieee754_rem_pio2+0x300>)
 8023dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dee:	f7dc fbb7 	bl	8000560 <__aeabi_dmul>
 8023df2:	4602      	mov	r2, r0
 8023df4:	460b      	mov	r3, r1
 8023df6:	4620      	mov	r0, r4
 8023df8:	4629      	mov	r1, r5
 8023dfa:	f7dc f9f9 	bl	80001f0 <__aeabi_dsub>
 8023dfe:	a364      	add	r3, pc, #400	; (adr r3, 8023f90 <__ieee754_rem_pio2+0x308>)
 8023e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e04:	4606      	mov	r6, r0
 8023e06:	460f      	mov	r7, r1
 8023e08:	ec51 0b18 	vmov	r0, r1, d8
 8023e0c:	f7dc fba8 	bl	8000560 <__aeabi_dmul>
 8023e10:	f1bb 0f1f 	cmp.w	fp, #31
 8023e14:	4604      	mov	r4, r0
 8023e16:	460d      	mov	r5, r1
 8023e18:	dc0d      	bgt.n	8023e36 <__ieee754_rem_pio2+0x1ae>
 8023e1a:	4b6e      	ldr	r3, [pc, #440]	; (8023fd4 <__ieee754_rem_pio2+0x34c>)
 8023e1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023e24:	4543      	cmp	r3, r8
 8023e26:	d006      	beq.n	8023e36 <__ieee754_rem_pio2+0x1ae>
 8023e28:	4622      	mov	r2, r4
 8023e2a:	462b      	mov	r3, r5
 8023e2c:	4630      	mov	r0, r6
 8023e2e:	4639      	mov	r1, r7
 8023e30:	f7dc f9de 	bl	80001f0 <__aeabi_dsub>
 8023e34:	e00f      	b.n	8023e56 <__ieee754_rem_pio2+0x1ce>
 8023e36:	462b      	mov	r3, r5
 8023e38:	4622      	mov	r2, r4
 8023e3a:	4630      	mov	r0, r6
 8023e3c:	4639      	mov	r1, r7
 8023e3e:	f7dc f9d7 	bl	80001f0 <__aeabi_dsub>
 8023e42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023e46:	9303      	str	r3, [sp, #12]
 8023e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023e4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023e50:	f1b8 0f10 	cmp.w	r8, #16
 8023e54:	dc02      	bgt.n	8023e5c <__ieee754_rem_pio2+0x1d4>
 8023e56:	e9ca 0100 	strd	r0, r1, [sl]
 8023e5a:	e039      	b.n	8023ed0 <__ieee754_rem_pio2+0x248>
 8023e5c:	a34e      	add	r3, pc, #312	; (adr r3, 8023f98 <__ieee754_rem_pio2+0x310>)
 8023e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e62:	ec51 0b18 	vmov	r0, r1, d8
 8023e66:	f7dc fb7b 	bl	8000560 <__aeabi_dmul>
 8023e6a:	4604      	mov	r4, r0
 8023e6c:	460d      	mov	r5, r1
 8023e6e:	4602      	mov	r2, r0
 8023e70:	460b      	mov	r3, r1
 8023e72:	4630      	mov	r0, r6
 8023e74:	4639      	mov	r1, r7
 8023e76:	f7dc f9bb 	bl	80001f0 <__aeabi_dsub>
 8023e7a:	4602      	mov	r2, r0
 8023e7c:	460b      	mov	r3, r1
 8023e7e:	4680      	mov	r8, r0
 8023e80:	4689      	mov	r9, r1
 8023e82:	4630      	mov	r0, r6
 8023e84:	4639      	mov	r1, r7
 8023e86:	f7dc f9b3 	bl	80001f0 <__aeabi_dsub>
 8023e8a:	4622      	mov	r2, r4
 8023e8c:	462b      	mov	r3, r5
 8023e8e:	f7dc f9af 	bl	80001f0 <__aeabi_dsub>
 8023e92:	a343      	add	r3, pc, #268	; (adr r3, 8023fa0 <__ieee754_rem_pio2+0x318>)
 8023e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e98:	4604      	mov	r4, r0
 8023e9a:	460d      	mov	r5, r1
 8023e9c:	ec51 0b18 	vmov	r0, r1, d8
 8023ea0:	f7dc fb5e 	bl	8000560 <__aeabi_dmul>
 8023ea4:	4622      	mov	r2, r4
 8023ea6:	462b      	mov	r3, r5
 8023ea8:	f7dc f9a2 	bl	80001f0 <__aeabi_dsub>
 8023eac:	4602      	mov	r2, r0
 8023eae:	460b      	mov	r3, r1
 8023eb0:	4604      	mov	r4, r0
 8023eb2:	460d      	mov	r5, r1
 8023eb4:	4640      	mov	r0, r8
 8023eb6:	4649      	mov	r1, r9
 8023eb8:	f7dc f99a 	bl	80001f0 <__aeabi_dsub>
 8023ebc:	9a03      	ldr	r2, [sp, #12]
 8023ebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023ec2:	1ad3      	subs	r3, r2, r3
 8023ec4:	2b31      	cmp	r3, #49	; 0x31
 8023ec6:	dc24      	bgt.n	8023f12 <__ieee754_rem_pio2+0x28a>
 8023ec8:	e9ca 0100 	strd	r0, r1, [sl]
 8023ecc:	4646      	mov	r6, r8
 8023ece:	464f      	mov	r7, r9
 8023ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8023ed4:	4630      	mov	r0, r6
 8023ed6:	4642      	mov	r2, r8
 8023ed8:	464b      	mov	r3, r9
 8023eda:	4639      	mov	r1, r7
 8023edc:	f7dc f988 	bl	80001f0 <__aeabi_dsub>
 8023ee0:	462b      	mov	r3, r5
 8023ee2:	4622      	mov	r2, r4
 8023ee4:	f7dc f984 	bl	80001f0 <__aeabi_dsub>
 8023ee8:	9b02      	ldr	r3, [sp, #8]
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023ef0:	f6bf af0a 	bge.w	8023d08 <__ieee754_rem_pio2+0x80>
 8023ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023ef8:	f8ca 3004 	str.w	r3, [sl, #4]
 8023efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023f00:	f8ca 8000 	str.w	r8, [sl]
 8023f04:	f8ca 0008 	str.w	r0, [sl, #8]
 8023f08:	f8ca 300c 	str.w	r3, [sl, #12]
 8023f0c:	f1cb 0b00 	rsb	fp, fp, #0
 8023f10:	e6fa      	b.n	8023d08 <__ieee754_rem_pio2+0x80>
 8023f12:	a327      	add	r3, pc, #156	; (adr r3, 8023fb0 <__ieee754_rem_pio2+0x328>)
 8023f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f18:	ec51 0b18 	vmov	r0, r1, d8
 8023f1c:	f7dc fb20 	bl	8000560 <__aeabi_dmul>
 8023f20:	4604      	mov	r4, r0
 8023f22:	460d      	mov	r5, r1
 8023f24:	4602      	mov	r2, r0
 8023f26:	460b      	mov	r3, r1
 8023f28:	4640      	mov	r0, r8
 8023f2a:	4649      	mov	r1, r9
 8023f2c:	f7dc f960 	bl	80001f0 <__aeabi_dsub>
 8023f30:	4602      	mov	r2, r0
 8023f32:	460b      	mov	r3, r1
 8023f34:	4606      	mov	r6, r0
 8023f36:	460f      	mov	r7, r1
 8023f38:	4640      	mov	r0, r8
 8023f3a:	4649      	mov	r1, r9
 8023f3c:	f7dc f958 	bl	80001f0 <__aeabi_dsub>
 8023f40:	4622      	mov	r2, r4
 8023f42:	462b      	mov	r3, r5
 8023f44:	f7dc f954 	bl	80001f0 <__aeabi_dsub>
 8023f48:	a31b      	add	r3, pc, #108	; (adr r3, 8023fb8 <__ieee754_rem_pio2+0x330>)
 8023f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f4e:	4604      	mov	r4, r0
 8023f50:	460d      	mov	r5, r1
 8023f52:	ec51 0b18 	vmov	r0, r1, d8
 8023f56:	f7dc fb03 	bl	8000560 <__aeabi_dmul>
 8023f5a:	4622      	mov	r2, r4
 8023f5c:	462b      	mov	r3, r5
 8023f5e:	f7dc f947 	bl	80001f0 <__aeabi_dsub>
 8023f62:	4604      	mov	r4, r0
 8023f64:	460d      	mov	r5, r1
 8023f66:	e75f      	b.n	8023e28 <__ieee754_rem_pio2+0x1a0>
 8023f68:	4b1b      	ldr	r3, [pc, #108]	; (8023fd8 <__ieee754_rem_pio2+0x350>)
 8023f6a:	4598      	cmp	r8, r3
 8023f6c:	dd36      	ble.n	8023fdc <__ieee754_rem_pio2+0x354>
 8023f6e:	ee10 2a10 	vmov	r2, s0
 8023f72:	462b      	mov	r3, r5
 8023f74:	4620      	mov	r0, r4
 8023f76:	4629      	mov	r1, r5
 8023f78:	f7dc f93a 	bl	80001f0 <__aeabi_dsub>
 8023f7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023f80:	e9ca 0100 	strd	r0, r1, [sl]
 8023f84:	e694      	b.n	8023cb0 <__ieee754_rem_pio2+0x28>
 8023f86:	bf00      	nop
 8023f88:	54400000 	.word	0x54400000
 8023f8c:	3ff921fb 	.word	0x3ff921fb
 8023f90:	1a626331 	.word	0x1a626331
 8023f94:	3dd0b461 	.word	0x3dd0b461
 8023f98:	1a600000 	.word	0x1a600000
 8023f9c:	3dd0b461 	.word	0x3dd0b461
 8023fa0:	2e037073 	.word	0x2e037073
 8023fa4:	3ba3198a 	.word	0x3ba3198a
 8023fa8:	6dc9c883 	.word	0x6dc9c883
 8023fac:	3fe45f30 	.word	0x3fe45f30
 8023fb0:	2e000000 	.word	0x2e000000
 8023fb4:	3ba3198a 	.word	0x3ba3198a
 8023fb8:	252049c1 	.word	0x252049c1
 8023fbc:	397b839a 	.word	0x397b839a
 8023fc0:	3fe921fb 	.word	0x3fe921fb
 8023fc4:	4002d97b 	.word	0x4002d97b
 8023fc8:	3ff921fb 	.word	0x3ff921fb
 8023fcc:	413921fb 	.word	0x413921fb
 8023fd0:	3fe00000 	.word	0x3fe00000
 8023fd4:	080296bc 	.word	0x080296bc
 8023fd8:	7fefffff 	.word	0x7fefffff
 8023fdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023fe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8023fe4:	ee10 0a10 	vmov	r0, s0
 8023fe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8023fec:	ee10 6a10 	vmov	r6, s0
 8023ff0:	460f      	mov	r7, r1
 8023ff2:	f7dc fd4f 	bl	8000a94 <__aeabi_d2iz>
 8023ff6:	f7dc fa49 	bl	800048c <__aeabi_i2d>
 8023ffa:	4602      	mov	r2, r0
 8023ffc:	460b      	mov	r3, r1
 8023ffe:	4630      	mov	r0, r6
 8024000:	4639      	mov	r1, r7
 8024002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024006:	f7dc f8f3 	bl	80001f0 <__aeabi_dsub>
 802400a:	4b23      	ldr	r3, [pc, #140]	; (8024098 <__ieee754_rem_pio2+0x410>)
 802400c:	2200      	movs	r2, #0
 802400e:	f7dc faa7 	bl	8000560 <__aeabi_dmul>
 8024012:	460f      	mov	r7, r1
 8024014:	4606      	mov	r6, r0
 8024016:	f7dc fd3d 	bl	8000a94 <__aeabi_d2iz>
 802401a:	f7dc fa37 	bl	800048c <__aeabi_i2d>
 802401e:	4602      	mov	r2, r0
 8024020:	460b      	mov	r3, r1
 8024022:	4630      	mov	r0, r6
 8024024:	4639      	mov	r1, r7
 8024026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802402a:	f7dc f8e1 	bl	80001f0 <__aeabi_dsub>
 802402e:	4b1a      	ldr	r3, [pc, #104]	; (8024098 <__ieee754_rem_pio2+0x410>)
 8024030:	2200      	movs	r2, #0
 8024032:	f7dc fa95 	bl	8000560 <__aeabi_dmul>
 8024036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802403a:	ad04      	add	r5, sp, #16
 802403c:	f04f 0803 	mov.w	r8, #3
 8024040:	46a9      	mov	r9, r5
 8024042:	2600      	movs	r6, #0
 8024044:	2700      	movs	r7, #0
 8024046:	4632      	mov	r2, r6
 8024048:	463b      	mov	r3, r7
 802404a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802404e:	46c3      	mov	fp, r8
 8024050:	3d08      	subs	r5, #8
 8024052:	f108 38ff 	add.w	r8, r8, #4294967295
 8024056:	f7dc fceb 	bl	8000a30 <__aeabi_dcmpeq>
 802405a:	2800      	cmp	r0, #0
 802405c:	d1f3      	bne.n	8024046 <__ieee754_rem_pio2+0x3be>
 802405e:	4b0f      	ldr	r3, [pc, #60]	; (802409c <__ieee754_rem_pio2+0x414>)
 8024060:	9301      	str	r3, [sp, #4]
 8024062:	2302      	movs	r3, #2
 8024064:	9300      	str	r3, [sp, #0]
 8024066:	4622      	mov	r2, r4
 8024068:	465b      	mov	r3, fp
 802406a:	4651      	mov	r1, sl
 802406c:	4648      	mov	r0, r9
 802406e:	f000 fe87 	bl	8024d80 <__kernel_rem_pio2>
 8024072:	9b02      	ldr	r3, [sp, #8]
 8024074:	2b00      	cmp	r3, #0
 8024076:	4683      	mov	fp, r0
 8024078:	f6bf ae46 	bge.w	8023d08 <__ieee754_rem_pio2+0x80>
 802407c:	e9da 2100 	ldrd	r2, r1, [sl]
 8024080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024084:	e9ca 2300 	strd	r2, r3, [sl]
 8024088:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802408c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024090:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8024094:	e73a      	b.n	8023f0c <__ieee754_rem_pio2+0x284>
 8024096:	bf00      	nop
 8024098:	41700000 	.word	0x41700000
 802409c:	0802973c 	.word	0x0802973c

080240a0 <__ieee754_acosf>:
 80240a0:	b508      	push	{r3, lr}
 80240a2:	ee10 3a10 	vmov	r3, s0
 80240a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80240aa:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80240ae:	ed2d 8b0c 	vpush	{d8-d13}
 80240b2:	d10a      	bne.n	80240ca <__ieee754_acosf+0x2a>
 80240b4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 802424c <__ieee754_acosf+0x1ac>
 80240b8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8024250 <__ieee754_acosf+0x1b0>
 80240bc:	2b00      	cmp	r3, #0
 80240be:	bfd8      	it	le
 80240c0:	eeb0 0a48 	vmovle.f32	s0, s16
 80240c4:	ecbd 8b0c 	vpop	{d8-d13}
 80240c8:	bd08      	pop	{r3, pc}
 80240ca:	dd04      	ble.n	80240d6 <__ieee754_acosf+0x36>
 80240cc:	ee30 8a40 	vsub.f32	s16, s0, s0
 80240d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80240d4:	e7f6      	b.n	80240c4 <__ieee754_acosf+0x24>
 80240d6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80240da:	da3c      	bge.n	8024156 <__ieee754_acosf+0xb6>
 80240dc:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80240e0:	f340 80b1 	ble.w	8024246 <__ieee754_acosf+0x1a6>
 80240e4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80240e8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8024254 <__ieee754_acosf+0x1b4>
 80240ec:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8024258 <__ieee754_acosf+0x1b8>
 80240f0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 802425c <__ieee754_acosf+0x1bc>
 80240f4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8024260 <__ieee754_acosf+0x1c0>
 80240f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80240fc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8024264 <__ieee754_acosf+0x1c4>
 8024100:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024104:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8024268 <__ieee754_acosf+0x1c8>
 8024108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802410c:	eddf 6a57 	vldr	s13, [pc, #348]	; 802426c <__ieee754_acosf+0x1cc>
 8024110:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024114:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8024270 <__ieee754_acosf+0x1d0>
 8024118:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802411c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8024274 <__ieee754_acosf+0x1d4>
 8024120:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8024124:	eddf 6a54 	vldr	s13, [pc, #336]	; 8024278 <__ieee754_acosf+0x1d8>
 8024128:	eee6 6a27 	vfma.f32	s13, s12, s15
 802412c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 802427c <__ieee754_acosf+0x1dc>
 8024130:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8024134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024138:	eee6 6a27 	vfma.f32	s13, s12, s15
 802413c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024144:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024148:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024280 <__ieee754_acosf+0x1e0>
 802414c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024150:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8024154:	e7b6      	b.n	80240c4 <__ieee754_acosf+0x24>
 8024156:	2b00      	cmp	r3, #0
 8024158:	eddf da3e 	vldr	s27, [pc, #248]	; 8024254 <__ieee754_acosf+0x1b4>
 802415c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8024258 <__ieee754_acosf+0x1b8>
 8024160:	ed9f ca40 	vldr	s24, [pc, #256]	; 8024264 <__ieee754_acosf+0x1c4>
 8024164:	eddf ba40 	vldr	s23, [pc, #256]	; 8024268 <__ieee754_acosf+0x1c8>
 8024168:	ed9f ba40 	vldr	s22, [pc, #256]	; 802426c <__ieee754_acosf+0x1cc>
 802416c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8024270 <__ieee754_acosf+0x1d0>
 8024170:	ed9f da40 	vldr	s26, [pc, #256]	; 8024274 <__ieee754_acosf+0x1d4>
 8024174:	eddf aa39 	vldr	s21, [pc, #228]	; 802425c <__ieee754_acosf+0x1bc>
 8024178:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8024278 <__ieee754_acosf+0x1d8>
 802417c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 802427c <__ieee754_acosf+0x1dc>
 8024180:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8024184:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024188:	da28      	bge.n	80241dc <__ieee754_acosf+0x13c>
 802418a:	ee30 0a09 	vadd.f32	s0, s0, s18
 802418e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024192:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8024196:	eee0 aa0d 	vfma.f32	s21, s0, s26
 802419a:	eeac ca80 	vfma.f32	s24, s25, s0
 802419e:	eeaa aa80 	vfma.f32	s20, s21, s0
 80241a2:	eeec ba00 	vfma.f32	s23, s24, s0
 80241a6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80241aa:	eeab ba80 	vfma.f32	s22, s23, s0
 80241ae:	eea9 9a80 	vfma.f32	s18, s19, s0
 80241b2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80241b6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80241ba:	f000 fd13 	bl	8024be4 <__ieee754_sqrtf>
 80241be:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80241c2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8024284 <__ieee754_acosf+0x1e4>
 80241c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80241ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80241ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80241d2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8024288 <__ieee754_acosf+0x1e8>
 80241d6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80241da:	e773      	b.n	80240c4 <__ieee754_acosf+0x24>
 80241dc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80241e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80241e4:	eeb0 0a48 	vmov.f32	s0, s16
 80241e8:	f000 fcfc 	bl	8024be4 <__ieee754_sqrtf>
 80241ec:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80241f0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80241f4:	eeac ca88 	vfma.f32	s24, s25, s16
 80241f8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80241fc:	eeec ba08 	vfma.f32	s23, s24, s16
 8024200:	ee10 3a10 	vmov	r3, s0
 8024204:	eeab ba88 	vfma.f32	s22, s23, s16
 8024208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802420c:	f023 030f 	bic.w	r3, r3, #15
 8024210:	eeea 9a08 	vfma.f32	s19, s20, s16
 8024214:	ee07 3a90 	vmov	s15, r3
 8024218:	eeeb 8a08 	vfma.f32	s17, s22, s16
 802421c:	eeb0 6a48 	vmov.f32	s12, s16
 8024220:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8024224:	eea9 9a88 	vfma.f32	s18, s19, s16
 8024228:	ee70 6a27 	vadd.f32	s13, s0, s15
 802422c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8024230:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8024234:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8024238:	eea0 7a26 	vfma.f32	s14, s0, s13
 802423c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8024240:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024244:	e73e      	b.n	80240c4 <__ieee754_acosf+0x24>
 8024246:	ed9f 0a11 	vldr	s0, [pc, #68]	; 802428c <__ieee754_acosf+0x1ec>
 802424a:	e73b      	b.n	80240c4 <__ieee754_acosf+0x24>
 802424c:	00000000 	.word	0x00000000
 8024250:	40490fdb 	.word	0x40490fdb
 8024254:	3811ef08 	.word	0x3811ef08
 8024258:	3a4f7f04 	.word	0x3a4f7f04
 802425c:	bf303361 	.word	0xbf303361
 8024260:	33a22168 	.word	0x33a22168
 8024264:	bd241146 	.word	0xbd241146
 8024268:	3e4e0aa8 	.word	0x3e4e0aa8
 802426c:	bea6b090 	.word	0xbea6b090
 8024270:	3e2aaaab 	.word	0x3e2aaaab
 8024274:	3d9dc62e 	.word	0x3d9dc62e
 8024278:	4001572d 	.word	0x4001572d
 802427c:	c019d139 	.word	0xc019d139
 8024280:	3fc90fda 	.word	0x3fc90fda
 8024284:	b3a22168 	.word	0xb3a22168
 8024288:	40490fda 	.word	0x40490fda
 802428c:	3fc90fdb 	.word	0x3fc90fdb

08024290 <__ieee754_atan2f>:
 8024290:	ee10 2a90 	vmov	r2, s1
 8024294:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024298:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802429c:	b510      	push	{r4, lr}
 802429e:	eef0 7a40 	vmov.f32	s15, s0
 80242a2:	dc06      	bgt.n	80242b2 <__ieee754_atan2f+0x22>
 80242a4:	ee10 0a10 	vmov	r0, s0
 80242a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80242ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80242b0:	dd04      	ble.n	80242bc <__ieee754_atan2f+0x2c>
 80242b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80242b6:	eeb0 0a67 	vmov.f32	s0, s15
 80242ba:	bd10      	pop	{r4, pc}
 80242bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80242c0:	d103      	bne.n	80242ca <__ieee754_atan2f+0x3a>
 80242c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242c6:	f001 bdb9 	b.w	8025e3c <atanf>
 80242ca:	1794      	asrs	r4, r2, #30
 80242cc:	f004 0402 	and.w	r4, r4, #2
 80242d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80242d4:	b943      	cbnz	r3, 80242e8 <__ieee754_atan2f+0x58>
 80242d6:	2c02      	cmp	r4, #2
 80242d8:	d05e      	beq.n	8024398 <__ieee754_atan2f+0x108>
 80242da:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80243ac <__ieee754_atan2f+0x11c>
 80242de:	2c03      	cmp	r4, #3
 80242e0:	bf08      	it	eq
 80242e2:	eef0 7a47 	vmoveq.f32	s15, s14
 80242e6:	e7e6      	b.n	80242b6 <__ieee754_atan2f+0x26>
 80242e8:	b941      	cbnz	r1, 80242fc <__ieee754_atan2f+0x6c>
 80242ea:	eddf 7a31 	vldr	s15, [pc, #196]	; 80243b0 <__ieee754_atan2f+0x120>
 80242ee:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80243b4 <__ieee754_atan2f+0x124>
 80242f2:	2800      	cmp	r0, #0
 80242f4:	bfb8      	it	lt
 80242f6:	eef0 7a40 	vmovlt.f32	s15, s0
 80242fa:	e7dc      	b.n	80242b6 <__ieee754_atan2f+0x26>
 80242fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024300:	d110      	bne.n	8024324 <__ieee754_atan2f+0x94>
 8024302:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024306:	f104 34ff 	add.w	r4, r4, #4294967295
 802430a:	d107      	bne.n	802431c <__ieee754_atan2f+0x8c>
 802430c:	2c02      	cmp	r4, #2
 802430e:	d846      	bhi.n	802439e <__ieee754_atan2f+0x10e>
 8024310:	4b29      	ldr	r3, [pc, #164]	; (80243b8 <__ieee754_atan2f+0x128>)
 8024312:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024316:	edd4 7a00 	vldr	s15, [r4]
 802431a:	e7cc      	b.n	80242b6 <__ieee754_atan2f+0x26>
 802431c:	2c02      	cmp	r4, #2
 802431e:	d841      	bhi.n	80243a4 <__ieee754_atan2f+0x114>
 8024320:	4b26      	ldr	r3, [pc, #152]	; (80243bc <__ieee754_atan2f+0x12c>)
 8024322:	e7f6      	b.n	8024312 <__ieee754_atan2f+0x82>
 8024324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024328:	d0df      	beq.n	80242ea <__ieee754_atan2f+0x5a>
 802432a:	1a5b      	subs	r3, r3, r1
 802432c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8024330:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024334:	da1a      	bge.n	802436c <__ieee754_atan2f+0xdc>
 8024336:	2a00      	cmp	r2, #0
 8024338:	da01      	bge.n	802433e <__ieee754_atan2f+0xae>
 802433a:	313c      	adds	r1, #60	; 0x3c
 802433c:	db19      	blt.n	8024372 <__ieee754_atan2f+0xe2>
 802433e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024342:	f001 fe4f 	bl	8025fe4 <fabsf>
 8024346:	f001 fd79 	bl	8025e3c <atanf>
 802434a:	eef0 7a40 	vmov.f32	s15, s0
 802434e:	2c01      	cmp	r4, #1
 8024350:	d012      	beq.n	8024378 <__ieee754_atan2f+0xe8>
 8024352:	2c02      	cmp	r4, #2
 8024354:	d017      	beq.n	8024386 <__ieee754_atan2f+0xf6>
 8024356:	2c00      	cmp	r4, #0
 8024358:	d0ad      	beq.n	80242b6 <__ieee754_atan2f+0x26>
 802435a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80243c0 <__ieee754_atan2f+0x130>
 802435e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024362:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80243c4 <__ieee754_atan2f+0x134>
 8024366:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802436a:	e7a4      	b.n	80242b6 <__ieee754_atan2f+0x26>
 802436c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80243b0 <__ieee754_atan2f+0x120>
 8024370:	e7ed      	b.n	802434e <__ieee754_atan2f+0xbe>
 8024372:	eddf 7a15 	vldr	s15, [pc, #84]	; 80243c8 <__ieee754_atan2f+0x138>
 8024376:	e7ea      	b.n	802434e <__ieee754_atan2f+0xbe>
 8024378:	ee17 3a90 	vmov	r3, s15
 802437c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024380:	ee07 3a90 	vmov	s15, r3
 8024384:	e797      	b.n	80242b6 <__ieee754_atan2f+0x26>
 8024386:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80243c0 <__ieee754_atan2f+0x130>
 802438a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802438e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80243c4 <__ieee754_atan2f+0x134>
 8024392:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024396:	e78e      	b.n	80242b6 <__ieee754_atan2f+0x26>
 8024398:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80243c4 <__ieee754_atan2f+0x134>
 802439c:	e78b      	b.n	80242b6 <__ieee754_atan2f+0x26>
 802439e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80243cc <__ieee754_atan2f+0x13c>
 80243a2:	e788      	b.n	80242b6 <__ieee754_atan2f+0x26>
 80243a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80243c8 <__ieee754_atan2f+0x138>
 80243a8:	e785      	b.n	80242b6 <__ieee754_atan2f+0x26>
 80243aa:	bf00      	nop
 80243ac:	c0490fdb 	.word	0xc0490fdb
 80243b0:	3fc90fdb 	.word	0x3fc90fdb
 80243b4:	bfc90fdb 	.word	0xbfc90fdb
 80243b8:	08029844 	.word	0x08029844
 80243bc:	08029850 	.word	0x08029850
 80243c0:	33bbbd2e 	.word	0x33bbbd2e
 80243c4:	40490fdb 	.word	0x40490fdb
 80243c8:	00000000 	.word	0x00000000
 80243cc:	3f490fdb 	.word	0x3f490fdb

080243d0 <__ieee754_powf>:
 80243d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243d4:	ee10 4a90 	vmov	r4, s1
 80243d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80243dc:	ed2d 8b02 	vpush	{d8}
 80243e0:	ee10 6a10 	vmov	r6, s0
 80243e4:	eeb0 8a40 	vmov.f32	s16, s0
 80243e8:	eef0 8a60 	vmov.f32	s17, s1
 80243ec:	d10c      	bne.n	8024408 <__ieee754_powf+0x38>
 80243ee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80243f2:	0076      	lsls	r6, r6, #1
 80243f4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80243f8:	f240 8296 	bls.w	8024928 <__ieee754_powf+0x558>
 80243fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8024400:	ecbd 8b02 	vpop	{d8}
 8024404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024408:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802440c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024410:	dcf4      	bgt.n	80243fc <__ieee754_powf+0x2c>
 8024412:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024416:	dd08      	ble.n	802442a <__ieee754_powf+0x5a>
 8024418:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802441c:	d1ee      	bne.n	80243fc <__ieee754_powf+0x2c>
 802441e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8024422:	0064      	lsls	r4, r4, #1
 8024424:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8024428:	e7e6      	b.n	80243f8 <__ieee754_powf+0x28>
 802442a:	2e00      	cmp	r6, #0
 802442c:	da20      	bge.n	8024470 <__ieee754_powf+0xa0>
 802442e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8024432:	da2d      	bge.n	8024490 <__ieee754_powf+0xc0>
 8024434:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8024438:	f2c0 827f 	blt.w	802493a <__ieee754_powf+0x56a>
 802443c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8024440:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024444:	fa48 f703 	asr.w	r7, r8, r3
 8024448:	fa07 f303 	lsl.w	r3, r7, r3
 802444c:	4543      	cmp	r3, r8
 802444e:	f040 8274 	bne.w	802493a <__ieee754_powf+0x56a>
 8024452:	f007 0701 	and.w	r7, r7, #1
 8024456:	f1c7 0702 	rsb	r7, r7, #2
 802445a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802445e:	d11f      	bne.n	80244a0 <__ieee754_powf+0xd0>
 8024460:	2c00      	cmp	r4, #0
 8024462:	f280 8267 	bge.w	8024934 <__ieee754_powf+0x564>
 8024466:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802446a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802446e:	e7c7      	b.n	8024400 <__ieee754_powf+0x30>
 8024470:	2700      	movs	r7, #0
 8024472:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024476:	d1f0      	bne.n	802445a <__ieee754_powf+0x8a>
 8024478:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802447c:	f000 8254 	beq.w	8024928 <__ieee754_powf+0x558>
 8024480:	dd08      	ble.n	8024494 <__ieee754_powf+0xc4>
 8024482:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802478c <__ieee754_powf+0x3bc>
 8024486:	2c00      	cmp	r4, #0
 8024488:	bfa8      	it	ge
 802448a:	eeb0 0a68 	vmovge.f32	s0, s17
 802448e:	e7b7      	b.n	8024400 <__ieee754_powf+0x30>
 8024490:	2702      	movs	r7, #2
 8024492:	e7ee      	b.n	8024472 <__ieee754_powf+0xa2>
 8024494:	2c00      	cmp	r4, #0
 8024496:	f280 824a 	bge.w	802492e <__ieee754_powf+0x55e>
 802449a:	eeb1 0a68 	vneg.f32	s0, s17
 802449e:	e7af      	b.n	8024400 <__ieee754_powf+0x30>
 80244a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80244a4:	d102      	bne.n	80244ac <__ieee754_powf+0xdc>
 80244a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80244aa:	e7a9      	b.n	8024400 <__ieee754_powf+0x30>
 80244ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80244b0:	eeb0 0a48 	vmov.f32	s0, s16
 80244b4:	d107      	bne.n	80244c6 <__ieee754_powf+0xf6>
 80244b6:	2e00      	cmp	r6, #0
 80244b8:	db05      	blt.n	80244c6 <__ieee754_powf+0xf6>
 80244ba:	ecbd 8b02 	vpop	{d8}
 80244be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80244c2:	f000 bb8f 	b.w	8024be4 <__ieee754_sqrtf>
 80244c6:	f001 fd8d 	bl	8025fe4 <fabsf>
 80244ca:	b125      	cbz	r5, 80244d6 <__ieee754_powf+0x106>
 80244cc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80244d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80244d4:	d116      	bne.n	8024504 <__ieee754_powf+0x134>
 80244d6:	2c00      	cmp	r4, #0
 80244d8:	bfbc      	itt	lt
 80244da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80244de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80244e2:	2e00      	cmp	r6, #0
 80244e4:	da8c      	bge.n	8024400 <__ieee754_powf+0x30>
 80244e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80244ea:	ea55 0307 	orrs.w	r3, r5, r7
 80244ee:	d104      	bne.n	80244fa <__ieee754_powf+0x12a>
 80244f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80244f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80244f8:	e782      	b.n	8024400 <__ieee754_powf+0x30>
 80244fa:	2f01      	cmp	r7, #1
 80244fc:	d180      	bne.n	8024400 <__ieee754_powf+0x30>
 80244fe:	eeb1 0a40 	vneg.f32	s0, s0
 8024502:	e77d      	b.n	8024400 <__ieee754_powf+0x30>
 8024504:	0ff0      	lsrs	r0, r6, #31
 8024506:	3801      	subs	r0, #1
 8024508:	ea57 0300 	orrs.w	r3, r7, r0
 802450c:	d104      	bne.n	8024518 <__ieee754_powf+0x148>
 802450e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8024512:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024516:	e773      	b.n	8024400 <__ieee754_powf+0x30>
 8024518:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802451c:	dd74      	ble.n	8024608 <__ieee754_powf+0x238>
 802451e:	4b9c      	ldr	r3, [pc, #624]	; (8024790 <__ieee754_powf+0x3c0>)
 8024520:	429d      	cmp	r5, r3
 8024522:	dc08      	bgt.n	8024536 <__ieee754_powf+0x166>
 8024524:	2c00      	cmp	r4, #0
 8024526:	da0b      	bge.n	8024540 <__ieee754_powf+0x170>
 8024528:	2000      	movs	r0, #0
 802452a:	ecbd 8b02 	vpop	{d8}
 802452e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024532:	f001 bb6d 	b.w	8025c10 <__math_oflowf>
 8024536:	4b97      	ldr	r3, [pc, #604]	; (8024794 <__ieee754_powf+0x3c4>)
 8024538:	429d      	cmp	r5, r3
 802453a:	dd08      	ble.n	802454e <__ieee754_powf+0x17e>
 802453c:	2c00      	cmp	r4, #0
 802453e:	dcf3      	bgt.n	8024528 <__ieee754_powf+0x158>
 8024540:	2000      	movs	r0, #0
 8024542:	ecbd 8b02 	vpop	{d8}
 8024546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802454a:	f001 bb5b 	b.w	8025c04 <__math_uflowf>
 802454e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024552:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024556:	eddf 6a90 	vldr	s13, [pc, #576]	; 8024798 <__ieee754_powf+0x3c8>
 802455a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802455e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8024562:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024566:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802456a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024572:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 802479c <__ieee754_powf+0x3cc>
 8024576:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802457a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80247a0 <__ieee754_powf+0x3d0>
 802457e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024582:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80247a4 <__ieee754_powf+0x3d4>
 8024586:	eef0 6a67 	vmov.f32	s13, s15
 802458a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802458e:	ee16 3a90 	vmov	r3, s13
 8024592:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024596:	f023 030f 	bic.w	r3, r3, #15
 802459a:	ee00 3a90 	vmov	s1, r3
 802459e:	eee0 0a47 	vfms.f32	s1, s0, s14
 80245a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80245a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80245aa:	f024 040f 	bic.w	r4, r4, #15
 80245ae:	ee07 4a10 	vmov	s14, r4
 80245b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80245b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80245ba:	ee07 3a90 	vmov	s15, r3
 80245be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80245c2:	3f01      	subs	r7, #1
 80245c4:	ea57 0200 	orrs.w	r2, r7, r0
 80245c8:	ee07 4a10 	vmov	s14, r4
 80245cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80245d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80245d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80245d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80245dc:	ee17 4a10 	vmov	r4, s14
 80245e0:	bf08      	it	eq
 80245e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80245e6:	2c00      	cmp	r4, #0
 80245e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80245ec:	f340 817e 	ble.w	80248ec <__ieee754_powf+0x51c>
 80245f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80245f4:	f340 80f8 	ble.w	80247e8 <__ieee754_powf+0x418>
 80245f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80245fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024600:	bf4c      	ite	mi
 8024602:	2001      	movmi	r0, #1
 8024604:	2000      	movpl	r0, #0
 8024606:	e790      	b.n	802452a <__ieee754_powf+0x15a>
 8024608:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802460c:	bf01      	itttt	eq
 802460e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80247a8 <__ieee754_powf+0x3d8>
 8024612:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8024616:	f06f 0217 	mvneq.w	r2, #23
 802461a:	ee17 5a90 	vmoveq	r5, s15
 802461e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8024622:	bf18      	it	ne
 8024624:	2200      	movne	r2, #0
 8024626:	3b7f      	subs	r3, #127	; 0x7f
 8024628:	4413      	add	r3, r2
 802462a:	4a60      	ldr	r2, [pc, #384]	; (80247ac <__ieee754_powf+0x3dc>)
 802462c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8024630:	4295      	cmp	r5, r2
 8024632:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8024636:	dd06      	ble.n	8024646 <__ieee754_powf+0x276>
 8024638:	4a5d      	ldr	r2, [pc, #372]	; (80247b0 <__ieee754_powf+0x3e0>)
 802463a:	4295      	cmp	r5, r2
 802463c:	f340 80a4 	ble.w	8024788 <__ieee754_powf+0x3b8>
 8024640:	3301      	adds	r3, #1
 8024642:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8024646:	2500      	movs	r5, #0
 8024648:	4a5a      	ldr	r2, [pc, #360]	; (80247b4 <__ieee754_powf+0x3e4>)
 802464a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802464e:	ee07 1a90 	vmov	s15, r1
 8024652:	ed92 7a00 	vldr	s14, [r2]
 8024656:	4a58      	ldr	r2, [pc, #352]	; (80247b8 <__ieee754_powf+0x3e8>)
 8024658:	ee37 6a27 	vadd.f32	s12, s14, s15
 802465c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8024660:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8024664:	1049      	asrs	r1, r1, #1
 8024666:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802466a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802466e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8024672:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8024676:	ee06 1a10 	vmov	s12, r1
 802467a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802467e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8024682:	ee14 6a90 	vmov	r6, s9
 8024686:	4016      	ands	r6, r2
 8024688:	ee05 6a90 	vmov	s11, r6
 802468c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8024690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024694:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80247bc <__ieee754_powf+0x3ec>
 8024698:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802469c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80246a0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80246a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80247c0 <__ieee754_powf+0x3f0>
 80246a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80246ac:	eddf 6a45 	vldr	s13, [pc, #276]	; 80247c4 <__ieee754_powf+0x3f4>
 80246b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80246b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8024798 <__ieee754_powf+0x3c8>
 80246b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80246bc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80247c8 <__ieee754_powf+0x3f8>
 80246c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80246c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80247cc <__ieee754_powf+0x3fc>
 80246c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80246cc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80246d0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80246d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80246d8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80246dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80246e0:	eef0 7a45 	vmov.f32	s15, s10
 80246e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80246e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80246ec:	ee17 1a90 	vmov	r1, s15
 80246f0:	4011      	ands	r1, r2
 80246f2:	ee07 1a90 	vmov	s15, r1
 80246f6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80246fa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80246fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8024702:	ee27 7a24 	vmul.f32	s14, s14, s9
 8024706:	eea6 7a27 	vfma.f32	s14, s12, s15
 802470a:	eeb0 6a47 	vmov.f32	s12, s14
 802470e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8024712:	ee16 1a10 	vmov	r1, s12
 8024716:	4011      	ands	r1, r2
 8024718:	ee06 1a90 	vmov	s13, r1
 802471c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8024720:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80247d0 <__ieee754_powf+0x400>
 8024724:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80247d4 <__ieee754_powf+0x404>
 8024728:	ee37 7a66 	vsub.f32	s14, s14, s13
 802472c:	ee06 1a10 	vmov	s12, r1
 8024730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024734:	eddf 7a28 	vldr	s15, [pc, #160]	; 80247d8 <__ieee754_powf+0x408>
 8024738:	4928      	ldr	r1, [pc, #160]	; (80247dc <__ieee754_powf+0x40c>)
 802473a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802473e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8024742:	edd1 7a00 	vldr	s15, [r1]
 8024746:	ee37 7a27 	vadd.f32	s14, s14, s15
 802474a:	ee07 3a90 	vmov	s15, r3
 802474e:	4b24      	ldr	r3, [pc, #144]	; (80247e0 <__ieee754_powf+0x410>)
 8024750:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8024754:	eef0 7a47 	vmov.f32	s15, s14
 8024758:	eee6 7a25 	vfma.f32	s15, s12, s11
 802475c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8024760:	edd5 0a00 	vldr	s1, [r5]
 8024764:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802476c:	ee17 3a90 	vmov	r3, s15
 8024770:	4013      	ands	r3, r2
 8024772:	ee07 3a90 	vmov	s15, r3
 8024776:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802477a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802477e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8024782:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024786:	e70e      	b.n	80245a6 <__ieee754_powf+0x1d6>
 8024788:	2501      	movs	r5, #1
 802478a:	e75d      	b.n	8024648 <__ieee754_powf+0x278>
 802478c:	00000000 	.word	0x00000000
 8024790:	3f7ffff3 	.word	0x3f7ffff3
 8024794:	3f800007 	.word	0x3f800007
 8024798:	3eaaaaab 	.word	0x3eaaaaab
 802479c:	3fb8aa3b 	.word	0x3fb8aa3b
 80247a0:	36eca570 	.word	0x36eca570
 80247a4:	3fb8aa00 	.word	0x3fb8aa00
 80247a8:	4b800000 	.word	0x4b800000
 80247ac:	001cc471 	.word	0x001cc471
 80247b0:	005db3d6 	.word	0x005db3d6
 80247b4:	0802985c 	.word	0x0802985c
 80247b8:	fffff000 	.word	0xfffff000
 80247bc:	3e6c3255 	.word	0x3e6c3255
 80247c0:	3e53f142 	.word	0x3e53f142
 80247c4:	3e8ba305 	.word	0x3e8ba305
 80247c8:	3edb6db7 	.word	0x3edb6db7
 80247cc:	3f19999a 	.word	0x3f19999a
 80247d0:	3f76384f 	.word	0x3f76384f
 80247d4:	3f763800 	.word	0x3f763800
 80247d8:	369dc3a0 	.word	0x369dc3a0
 80247dc:	0802986c 	.word	0x0802986c
 80247e0:	08029864 	.word	0x08029864
 80247e4:	3338aa3c 	.word	0x3338aa3c
 80247e8:	f040 8095 	bne.w	8024916 <__ieee754_powf+0x546>
 80247ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80247e4 <__ieee754_powf+0x414>
 80247f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80247f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80247f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80247fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024800:	f73f aefa 	bgt.w	80245f8 <__ieee754_powf+0x228>
 8024804:	15db      	asrs	r3, r3, #23
 8024806:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 802480a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802480e:	4103      	asrs	r3, r0
 8024810:	4423      	add	r3, r4
 8024812:	494b      	ldr	r1, [pc, #300]	; (8024940 <__ieee754_powf+0x570>)
 8024814:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024818:	3a7f      	subs	r2, #127	; 0x7f
 802481a:	4111      	asrs	r1, r2
 802481c:	ea23 0101 	bic.w	r1, r3, r1
 8024820:	ee07 1a10 	vmov	s14, r1
 8024824:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024828:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802482c:	f1c2 0217 	rsb	r2, r2, #23
 8024830:	4110      	asrs	r0, r2
 8024832:	2c00      	cmp	r4, #0
 8024834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024838:	bfb8      	it	lt
 802483a:	4240      	neglt	r0, r0
 802483c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8024840:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8024944 <__ieee754_powf+0x574>
 8024844:	eddf 6a40 	vldr	s13, [pc, #256]	; 8024948 <__ieee754_powf+0x578>
 8024848:	ee17 3a10 	vmov	r3, s14
 802484c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024850:	f023 030f 	bic.w	r3, r3, #15
 8024854:	ee07 3a10 	vmov	s14, r3
 8024858:	ee77 7a67 	vsub.f32	s15, s14, s15
 802485c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8024860:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024864:	eddf 7a39 	vldr	s15, [pc, #228]	; 802494c <__ieee754_powf+0x57c>
 8024868:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802486c:	eef0 7a40 	vmov.f32	s15, s0
 8024870:	eee7 7a26 	vfma.f32	s15, s14, s13
 8024874:	eeb0 6a67 	vmov.f32	s12, s15
 8024878:	eea7 6a66 	vfms.f32	s12, s14, s13
 802487c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8024880:	ee30 0a46 	vsub.f32	s0, s0, s12
 8024884:	eddf 6a32 	vldr	s13, [pc, #200]	; 8024950 <__ieee754_powf+0x580>
 8024888:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8024954 <__ieee754_powf+0x584>
 802488c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8024890:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8024958 <__ieee754_powf+0x588>
 8024894:	eea6 6a87 	vfma.f32	s12, s13, s14
 8024898:	eddf 6a30 	vldr	s13, [pc, #192]	; 802495c <__ieee754_powf+0x58c>
 802489c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80248a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8024960 <__ieee754_powf+0x590>
 80248a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80248a8:	eef0 6a67 	vmov.f32	s13, s15
 80248ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 80248b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80248b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80248b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80248bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80248c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80248c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80248c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80248cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80248d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80248d4:	ee10 3a10 	vmov	r3, s0
 80248d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80248dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80248e0:	da1f      	bge.n	8024922 <__ieee754_powf+0x552>
 80248e2:	f001 fbdb 	bl	802609c <scalbnf>
 80248e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80248ea:	e589      	b.n	8024400 <__ieee754_powf+0x30>
 80248ec:	4a1d      	ldr	r2, [pc, #116]	; (8024964 <__ieee754_powf+0x594>)
 80248ee:	4293      	cmp	r3, r2
 80248f0:	dd07      	ble.n	8024902 <__ieee754_powf+0x532>
 80248f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80248f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248fa:	bf4c      	ite	mi
 80248fc:	2001      	movmi	r0, #1
 80248fe:	2000      	movpl	r0, #0
 8024900:	e61f      	b.n	8024542 <__ieee754_powf+0x172>
 8024902:	d108      	bne.n	8024916 <__ieee754_powf+0x546>
 8024904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024908:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024910:	f6ff af78 	blt.w	8024804 <__ieee754_powf+0x434>
 8024914:	e7ed      	b.n	80248f2 <__ieee754_powf+0x522>
 8024916:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802491a:	f73f af73 	bgt.w	8024804 <__ieee754_powf+0x434>
 802491e:	2000      	movs	r0, #0
 8024920:	e78c      	b.n	802483c <__ieee754_powf+0x46c>
 8024922:	ee00 3a10 	vmov	s0, r3
 8024926:	e7de      	b.n	80248e6 <__ieee754_powf+0x516>
 8024928:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802492c:	e568      	b.n	8024400 <__ieee754_powf+0x30>
 802492e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024968 <__ieee754_powf+0x598>
 8024932:	e565      	b.n	8024400 <__ieee754_powf+0x30>
 8024934:	eeb0 0a48 	vmov.f32	s0, s16
 8024938:	e562      	b.n	8024400 <__ieee754_powf+0x30>
 802493a:	2700      	movs	r7, #0
 802493c:	e58d      	b.n	802445a <__ieee754_powf+0x8a>
 802493e:	bf00      	nop
 8024940:	007fffff 	.word	0x007fffff
 8024944:	35bfbe8c 	.word	0x35bfbe8c
 8024948:	3f317200 	.word	0x3f317200
 802494c:	3f317218 	.word	0x3f317218
 8024950:	b5ddea0e 	.word	0xb5ddea0e
 8024954:	3331bb4c 	.word	0x3331bb4c
 8024958:	388ab355 	.word	0x388ab355
 802495c:	bb360b61 	.word	0xbb360b61
 8024960:	3e2aaaab 	.word	0x3e2aaaab
 8024964:	43160000 	.word	0x43160000
 8024968:	00000000 	.word	0x00000000

0802496c <__ieee754_rem_pio2f>:
 802496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802496e:	ee10 6a10 	vmov	r6, s0
 8024972:	4b8e      	ldr	r3, [pc, #568]	; (8024bac <__ieee754_rem_pio2f+0x240>)
 8024974:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8024978:	429d      	cmp	r5, r3
 802497a:	b087      	sub	sp, #28
 802497c:	eef0 7a40 	vmov.f32	s15, s0
 8024980:	4604      	mov	r4, r0
 8024982:	dc05      	bgt.n	8024990 <__ieee754_rem_pio2f+0x24>
 8024984:	2300      	movs	r3, #0
 8024986:	ed80 0a00 	vstr	s0, [r0]
 802498a:	6043      	str	r3, [r0, #4]
 802498c:	2000      	movs	r0, #0
 802498e:	e01a      	b.n	80249c6 <__ieee754_rem_pio2f+0x5a>
 8024990:	4b87      	ldr	r3, [pc, #540]	; (8024bb0 <__ieee754_rem_pio2f+0x244>)
 8024992:	429d      	cmp	r5, r3
 8024994:	dc46      	bgt.n	8024a24 <__ieee754_rem_pio2f+0xb8>
 8024996:	2e00      	cmp	r6, #0
 8024998:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8024bb4 <__ieee754_rem_pio2f+0x248>
 802499c:	4b86      	ldr	r3, [pc, #536]	; (8024bb8 <__ieee754_rem_pio2f+0x24c>)
 802499e:	f025 050f 	bic.w	r5, r5, #15
 80249a2:	dd1f      	ble.n	80249e4 <__ieee754_rem_pio2f+0x78>
 80249a4:	429d      	cmp	r5, r3
 80249a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80249aa:	d00e      	beq.n	80249ca <__ieee754_rem_pio2f+0x5e>
 80249ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8024bbc <__ieee754_rem_pio2f+0x250>
 80249b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80249b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80249b8:	ed80 0a00 	vstr	s0, [r0]
 80249bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80249c0:	2001      	movs	r0, #1
 80249c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80249c6:	b007      	add	sp, #28
 80249c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8024bc0 <__ieee754_rem_pio2f+0x254>
 80249ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8024bc4 <__ieee754_rem_pio2f+0x258>
 80249d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80249d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80249da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80249de:	edc0 6a00 	vstr	s13, [r0]
 80249e2:	e7eb      	b.n	80249bc <__ieee754_rem_pio2f+0x50>
 80249e4:	429d      	cmp	r5, r3
 80249e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80249ea:	d00e      	beq.n	8024a0a <__ieee754_rem_pio2f+0x9e>
 80249ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8024bbc <__ieee754_rem_pio2f+0x250>
 80249f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80249f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80249f8:	ed80 0a00 	vstr	s0, [r0]
 80249fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024a00:	f04f 30ff 	mov.w	r0, #4294967295
 8024a04:	edc4 7a01 	vstr	s15, [r4, #4]
 8024a08:	e7dd      	b.n	80249c6 <__ieee754_rem_pio2f+0x5a>
 8024a0a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8024bc0 <__ieee754_rem_pio2f+0x254>
 8024a0e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8024bc4 <__ieee754_rem_pio2f+0x258>
 8024a12:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024a16:	ee77 6a87 	vadd.f32	s13, s15, s14
 8024a1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024a1e:	edc0 6a00 	vstr	s13, [r0]
 8024a22:	e7eb      	b.n	80249fc <__ieee754_rem_pio2f+0x90>
 8024a24:	4b68      	ldr	r3, [pc, #416]	; (8024bc8 <__ieee754_rem_pio2f+0x25c>)
 8024a26:	429d      	cmp	r5, r3
 8024a28:	dc72      	bgt.n	8024b10 <__ieee754_rem_pio2f+0x1a4>
 8024a2a:	f001 fadb 	bl	8025fe4 <fabsf>
 8024a2e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8024bcc <__ieee754_rem_pio2f+0x260>
 8024a32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024a36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024a42:	ee17 0a90 	vmov	r0, s15
 8024a46:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8024bb4 <__ieee754_rem_pio2f+0x248>
 8024a4a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8024a4e:	281f      	cmp	r0, #31
 8024a50:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8024bbc <__ieee754_rem_pio2f+0x250>
 8024a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024a58:	eeb1 6a47 	vneg.f32	s12, s14
 8024a5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024a60:	ee16 2a90 	vmov	r2, s13
 8024a64:	dc1c      	bgt.n	8024aa0 <__ieee754_rem_pio2f+0x134>
 8024a66:	495a      	ldr	r1, [pc, #360]	; (8024bd0 <__ieee754_rem_pio2f+0x264>)
 8024a68:	1e47      	subs	r7, r0, #1
 8024a6a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8024a6e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024a72:	428b      	cmp	r3, r1
 8024a74:	d014      	beq.n	8024aa0 <__ieee754_rem_pio2f+0x134>
 8024a76:	6022      	str	r2, [r4, #0]
 8024a78:	ed94 7a00 	vldr	s14, [r4]
 8024a7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024a80:	2e00      	cmp	r6, #0
 8024a82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024a86:	ed84 0a01 	vstr	s0, [r4, #4]
 8024a8a:	da9c      	bge.n	80249c6 <__ieee754_rem_pio2f+0x5a>
 8024a8c:	eeb1 7a47 	vneg.f32	s14, s14
 8024a90:	eeb1 0a40 	vneg.f32	s0, s0
 8024a94:	ed84 7a00 	vstr	s14, [r4]
 8024a98:	ed84 0a01 	vstr	s0, [r4, #4]
 8024a9c:	4240      	negs	r0, r0
 8024a9e:	e792      	b.n	80249c6 <__ieee754_rem_pio2f+0x5a>
 8024aa0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024aa4:	15eb      	asrs	r3, r5, #23
 8024aa6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8024aaa:	2d08      	cmp	r5, #8
 8024aac:	dde3      	ble.n	8024a76 <__ieee754_rem_pio2f+0x10a>
 8024aae:	eddf 7a44 	vldr	s15, [pc, #272]	; 8024bc0 <__ieee754_rem_pio2f+0x254>
 8024ab2:	eddf 5a44 	vldr	s11, [pc, #272]	; 8024bc4 <__ieee754_rem_pio2f+0x258>
 8024ab6:	eef0 6a40 	vmov.f32	s13, s0
 8024aba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8024abe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024ac2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8024ac6:	eef0 7a40 	vmov.f32	s15, s0
 8024aca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8024ace:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8024ad2:	ee15 2a90 	vmov	r2, s11
 8024ad6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024ada:	1a5b      	subs	r3, r3, r1
 8024adc:	2b19      	cmp	r3, #25
 8024ade:	dc04      	bgt.n	8024aea <__ieee754_rem_pio2f+0x17e>
 8024ae0:	edc4 5a00 	vstr	s11, [r4]
 8024ae4:	eeb0 0a66 	vmov.f32	s0, s13
 8024ae8:	e7c6      	b.n	8024a78 <__ieee754_rem_pio2f+0x10c>
 8024aea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8024bd4 <__ieee754_rem_pio2f+0x268>
 8024aee:	eeb0 0a66 	vmov.f32	s0, s13
 8024af2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8024af6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8024afa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8024bd8 <__ieee754_rem_pio2f+0x26c>
 8024afe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8024b02:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8024b06:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024b0a:	ed84 7a00 	vstr	s14, [r4]
 8024b0e:	e7b3      	b.n	8024a78 <__ieee754_rem_pio2f+0x10c>
 8024b10:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024b14:	db06      	blt.n	8024b24 <__ieee754_rem_pio2f+0x1b8>
 8024b16:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024b1a:	edc0 7a01 	vstr	s15, [r0, #4]
 8024b1e:	edc0 7a00 	vstr	s15, [r0]
 8024b22:	e733      	b.n	802498c <__ieee754_rem_pio2f+0x20>
 8024b24:	15ea      	asrs	r2, r5, #23
 8024b26:	3a86      	subs	r2, #134	; 0x86
 8024b28:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8024b2c:	ee07 3a90 	vmov	s15, r3
 8024b30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024b34:	eddf 6a29 	vldr	s13, [pc, #164]	; 8024bdc <__ieee754_rem_pio2f+0x270>
 8024b38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024b40:	ed8d 7a03 	vstr	s14, [sp, #12]
 8024b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024b48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024b54:	ed8d 7a04 	vstr	s14, [sp, #16]
 8024b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024b5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b64:	edcd 7a05 	vstr	s15, [sp, #20]
 8024b68:	d11e      	bne.n	8024ba8 <__ieee754_rem_pio2f+0x23c>
 8024b6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8024b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b72:	bf14      	ite	ne
 8024b74:	2302      	movne	r3, #2
 8024b76:	2301      	moveq	r3, #1
 8024b78:	4919      	ldr	r1, [pc, #100]	; (8024be0 <__ieee754_rem_pio2f+0x274>)
 8024b7a:	9101      	str	r1, [sp, #4]
 8024b7c:	2102      	movs	r1, #2
 8024b7e:	9100      	str	r1, [sp, #0]
 8024b80:	a803      	add	r0, sp, #12
 8024b82:	4621      	mov	r1, r4
 8024b84:	f000 fd6a 	bl	802565c <__kernel_rem_pio2f>
 8024b88:	2e00      	cmp	r6, #0
 8024b8a:	f6bf af1c 	bge.w	80249c6 <__ieee754_rem_pio2f+0x5a>
 8024b8e:	edd4 7a00 	vldr	s15, [r4]
 8024b92:	eef1 7a67 	vneg.f32	s15, s15
 8024b96:	edc4 7a00 	vstr	s15, [r4]
 8024b9a:	edd4 7a01 	vldr	s15, [r4, #4]
 8024b9e:	eef1 7a67 	vneg.f32	s15, s15
 8024ba2:	edc4 7a01 	vstr	s15, [r4, #4]
 8024ba6:	e779      	b.n	8024a9c <__ieee754_rem_pio2f+0x130>
 8024ba8:	2303      	movs	r3, #3
 8024baa:	e7e5      	b.n	8024b78 <__ieee754_rem_pio2f+0x20c>
 8024bac:	3f490fd8 	.word	0x3f490fd8
 8024bb0:	4016cbe3 	.word	0x4016cbe3
 8024bb4:	3fc90f80 	.word	0x3fc90f80
 8024bb8:	3fc90fd0 	.word	0x3fc90fd0
 8024bbc:	37354443 	.word	0x37354443
 8024bc0:	37354400 	.word	0x37354400
 8024bc4:	2e85a308 	.word	0x2e85a308
 8024bc8:	43490f80 	.word	0x43490f80
 8024bcc:	3f22f984 	.word	0x3f22f984
 8024bd0:	08029874 	.word	0x08029874
 8024bd4:	2e85a300 	.word	0x2e85a300
 8024bd8:	248d3132 	.word	0x248d3132
 8024bdc:	43800000 	.word	0x43800000
 8024be0:	080298f4 	.word	0x080298f4

08024be4 <__ieee754_sqrtf>:
 8024be4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024be8:	4770      	bx	lr
 8024bea:	0000      	movs	r0, r0
 8024bec:	0000      	movs	r0, r0
	...

08024bf0 <__kernel_cos>:
 8024bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bf4:	ec57 6b10 	vmov	r6, r7, d0
 8024bf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024bfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024c00:	ed8d 1b00 	vstr	d1, [sp]
 8024c04:	da07      	bge.n	8024c16 <__kernel_cos+0x26>
 8024c06:	ee10 0a10 	vmov	r0, s0
 8024c0a:	4639      	mov	r1, r7
 8024c0c:	f7db ff42 	bl	8000a94 <__aeabi_d2iz>
 8024c10:	2800      	cmp	r0, #0
 8024c12:	f000 8088 	beq.w	8024d26 <__kernel_cos+0x136>
 8024c16:	4632      	mov	r2, r6
 8024c18:	463b      	mov	r3, r7
 8024c1a:	4630      	mov	r0, r6
 8024c1c:	4639      	mov	r1, r7
 8024c1e:	f7db fc9f 	bl	8000560 <__aeabi_dmul>
 8024c22:	4b51      	ldr	r3, [pc, #324]	; (8024d68 <__kernel_cos+0x178>)
 8024c24:	2200      	movs	r2, #0
 8024c26:	4604      	mov	r4, r0
 8024c28:	460d      	mov	r5, r1
 8024c2a:	f7db fc99 	bl	8000560 <__aeabi_dmul>
 8024c2e:	a340      	add	r3, pc, #256	; (adr r3, 8024d30 <__kernel_cos+0x140>)
 8024c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c34:	4682      	mov	sl, r0
 8024c36:	468b      	mov	fp, r1
 8024c38:	4620      	mov	r0, r4
 8024c3a:	4629      	mov	r1, r5
 8024c3c:	f7db fc90 	bl	8000560 <__aeabi_dmul>
 8024c40:	a33d      	add	r3, pc, #244	; (adr r3, 8024d38 <__kernel_cos+0x148>)
 8024c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c46:	f7db fad5 	bl	80001f4 <__adddf3>
 8024c4a:	4622      	mov	r2, r4
 8024c4c:	462b      	mov	r3, r5
 8024c4e:	f7db fc87 	bl	8000560 <__aeabi_dmul>
 8024c52:	a33b      	add	r3, pc, #236	; (adr r3, 8024d40 <__kernel_cos+0x150>)
 8024c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c58:	f7db faca 	bl	80001f0 <__aeabi_dsub>
 8024c5c:	4622      	mov	r2, r4
 8024c5e:	462b      	mov	r3, r5
 8024c60:	f7db fc7e 	bl	8000560 <__aeabi_dmul>
 8024c64:	a338      	add	r3, pc, #224	; (adr r3, 8024d48 <__kernel_cos+0x158>)
 8024c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c6a:	f7db fac3 	bl	80001f4 <__adddf3>
 8024c6e:	4622      	mov	r2, r4
 8024c70:	462b      	mov	r3, r5
 8024c72:	f7db fc75 	bl	8000560 <__aeabi_dmul>
 8024c76:	a336      	add	r3, pc, #216	; (adr r3, 8024d50 <__kernel_cos+0x160>)
 8024c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c7c:	f7db fab8 	bl	80001f0 <__aeabi_dsub>
 8024c80:	4622      	mov	r2, r4
 8024c82:	462b      	mov	r3, r5
 8024c84:	f7db fc6c 	bl	8000560 <__aeabi_dmul>
 8024c88:	a333      	add	r3, pc, #204	; (adr r3, 8024d58 <__kernel_cos+0x168>)
 8024c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c8e:	f7db fab1 	bl	80001f4 <__adddf3>
 8024c92:	4622      	mov	r2, r4
 8024c94:	462b      	mov	r3, r5
 8024c96:	f7db fc63 	bl	8000560 <__aeabi_dmul>
 8024c9a:	4622      	mov	r2, r4
 8024c9c:	462b      	mov	r3, r5
 8024c9e:	f7db fc5f 	bl	8000560 <__aeabi_dmul>
 8024ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024ca6:	4604      	mov	r4, r0
 8024ca8:	460d      	mov	r5, r1
 8024caa:	4630      	mov	r0, r6
 8024cac:	4639      	mov	r1, r7
 8024cae:	f7db fc57 	bl	8000560 <__aeabi_dmul>
 8024cb2:	460b      	mov	r3, r1
 8024cb4:	4602      	mov	r2, r0
 8024cb6:	4629      	mov	r1, r5
 8024cb8:	4620      	mov	r0, r4
 8024cba:	f7db fa99 	bl	80001f0 <__aeabi_dsub>
 8024cbe:	4b2b      	ldr	r3, [pc, #172]	; (8024d6c <__kernel_cos+0x17c>)
 8024cc0:	4598      	cmp	r8, r3
 8024cc2:	4606      	mov	r6, r0
 8024cc4:	460f      	mov	r7, r1
 8024cc6:	dc10      	bgt.n	8024cea <__kernel_cos+0xfa>
 8024cc8:	4602      	mov	r2, r0
 8024cca:	460b      	mov	r3, r1
 8024ccc:	4650      	mov	r0, sl
 8024cce:	4659      	mov	r1, fp
 8024cd0:	f7db fa8e 	bl	80001f0 <__aeabi_dsub>
 8024cd4:	460b      	mov	r3, r1
 8024cd6:	4926      	ldr	r1, [pc, #152]	; (8024d70 <__kernel_cos+0x180>)
 8024cd8:	4602      	mov	r2, r0
 8024cda:	2000      	movs	r0, #0
 8024cdc:	f7db fa88 	bl	80001f0 <__aeabi_dsub>
 8024ce0:	ec41 0b10 	vmov	d0, r0, r1
 8024ce4:	b003      	add	sp, #12
 8024ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cea:	4b22      	ldr	r3, [pc, #136]	; (8024d74 <__kernel_cos+0x184>)
 8024cec:	4920      	ldr	r1, [pc, #128]	; (8024d70 <__kernel_cos+0x180>)
 8024cee:	4598      	cmp	r8, r3
 8024cf0:	bfcc      	ite	gt
 8024cf2:	4d21      	ldrgt	r5, [pc, #132]	; (8024d78 <__kernel_cos+0x188>)
 8024cf4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024cf8:	2400      	movs	r4, #0
 8024cfa:	4622      	mov	r2, r4
 8024cfc:	462b      	mov	r3, r5
 8024cfe:	2000      	movs	r0, #0
 8024d00:	f7db fa76 	bl	80001f0 <__aeabi_dsub>
 8024d04:	4622      	mov	r2, r4
 8024d06:	4680      	mov	r8, r0
 8024d08:	4689      	mov	r9, r1
 8024d0a:	462b      	mov	r3, r5
 8024d0c:	4650      	mov	r0, sl
 8024d0e:	4659      	mov	r1, fp
 8024d10:	f7db fa6e 	bl	80001f0 <__aeabi_dsub>
 8024d14:	4632      	mov	r2, r6
 8024d16:	463b      	mov	r3, r7
 8024d18:	f7db fa6a 	bl	80001f0 <__aeabi_dsub>
 8024d1c:	4602      	mov	r2, r0
 8024d1e:	460b      	mov	r3, r1
 8024d20:	4640      	mov	r0, r8
 8024d22:	4649      	mov	r1, r9
 8024d24:	e7da      	b.n	8024cdc <__kernel_cos+0xec>
 8024d26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024d60 <__kernel_cos+0x170>
 8024d2a:	e7db      	b.n	8024ce4 <__kernel_cos+0xf4>
 8024d2c:	f3af 8000 	nop.w
 8024d30:	be8838d4 	.word	0xbe8838d4
 8024d34:	bda8fae9 	.word	0xbda8fae9
 8024d38:	bdb4b1c4 	.word	0xbdb4b1c4
 8024d3c:	3e21ee9e 	.word	0x3e21ee9e
 8024d40:	809c52ad 	.word	0x809c52ad
 8024d44:	3e927e4f 	.word	0x3e927e4f
 8024d48:	19cb1590 	.word	0x19cb1590
 8024d4c:	3efa01a0 	.word	0x3efa01a0
 8024d50:	16c15177 	.word	0x16c15177
 8024d54:	3f56c16c 	.word	0x3f56c16c
 8024d58:	5555554c 	.word	0x5555554c
 8024d5c:	3fa55555 	.word	0x3fa55555
 8024d60:	00000000 	.word	0x00000000
 8024d64:	3ff00000 	.word	0x3ff00000
 8024d68:	3fe00000 	.word	0x3fe00000
 8024d6c:	3fd33332 	.word	0x3fd33332
 8024d70:	3ff00000 	.word	0x3ff00000
 8024d74:	3fe90000 	.word	0x3fe90000
 8024d78:	3fd20000 	.word	0x3fd20000
 8024d7c:	00000000 	.word	0x00000000

08024d80 <__kernel_rem_pio2>:
 8024d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d84:	ed2d 8b02 	vpush	{d8}
 8024d88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024d8c:	f112 0f14 	cmn.w	r2, #20
 8024d90:	9308      	str	r3, [sp, #32]
 8024d92:	9101      	str	r1, [sp, #4]
 8024d94:	4bc4      	ldr	r3, [pc, #784]	; (80250a8 <__kernel_rem_pio2+0x328>)
 8024d96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024d98:	900b      	str	r0, [sp, #44]	; 0x2c
 8024d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024d9e:	9302      	str	r3, [sp, #8]
 8024da0:	9b08      	ldr	r3, [sp, #32]
 8024da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8024da6:	bfa8      	it	ge
 8024da8:	1ed4      	subge	r4, r2, #3
 8024daa:	9306      	str	r3, [sp, #24]
 8024dac:	bfb2      	itee	lt
 8024dae:	2400      	movlt	r4, #0
 8024db0:	2318      	movge	r3, #24
 8024db2:	fb94 f4f3 	sdivge	r4, r4, r3
 8024db6:	f06f 0317 	mvn.w	r3, #23
 8024dba:	fb04 3303 	mla	r3, r4, r3, r3
 8024dbe:	eb03 0a02 	add.w	sl, r3, r2
 8024dc2:	9b02      	ldr	r3, [sp, #8]
 8024dc4:	9a06      	ldr	r2, [sp, #24]
 8024dc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8025098 <__kernel_rem_pio2+0x318>
 8024dca:	eb03 0802 	add.w	r8, r3, r2
 8024dce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024dd0:	1aa7      	subs	r7, r4, r2
 8024dd2:	ae22      	add	r6, sp, #136	; 0x88
 8024dd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024dd8:	2500      	movs	r5, #0
 8024dda:	4545      	cmp	r5, r8
 8024ddc:	dd13      	ble.n	8024e06 <__kernel_rem_pio2+0x86>
 8024dde:	9b08      	ldr	r3, [sp, #32]
 8024de0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8025098 <__kernel_rem_pio2+0x318>
 8024de4:	aa22      	add	r2, sp, #136	; 0x88
 8024de6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024dea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024dee:	f04f 0800 	mov.w	r8, #0
 8024df2:	9b02      	ldr	r3, [sp, #8]
 8024df4:	4598      	cmp	r8, r3
 8024df6:	dc2f      	bgt.n	8024e58 <__kernel_rem_pio2+0xd8>
 8024df8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024dfc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024e00:	462f      	mov	r7, r5
 8024e02:	2600      	movs	r6, #0
 8024e04:	e01b      	b.n	8024e3e <__kernel_rem_pio2+0xbe>
 8024e06:	42ef      	cmn	r7, r5
 8024e08:	d407      	bmi.n	8024e1a <__kernel_rem_pio2+0x9a>
 8024e0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024e0e:	f7db fb3d 	bl	800048c <__aeabi_i2d>
 8024e12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024e16:	3501      	adds	r5, #1
 8024e18:	e7df      	b.n	8024dda <__kernel_rem_pio2+0x5a>
 8024e1a:	ec51 0b18 	vmov	r0, r1, d8
 8024e1e:	e7f8      	b.n	8024e12 <__kernel_rem_pio2+0x92>
 8024e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024e24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024e28:	f7db fb9a 	bl	8000560 <__aeabi_dmul>
 8024e2c:	4602      	mov	r2, r0
 8024e2e:	460b      	mov	r3, r1
 8024e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024e34:	f7db f9de 	bl	80001f4 <__adddf3>
 8024e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024e3c:	3601      	adds	r6, #1
 8024e3e:	9b06      	ldr	r3, [sp, #24]
 8024e40:	429e      	cmp	r6, r3
 8024e42:	f1a7 0708 	sub.w	r7, r7, #8
 8024e46:	ddeb      	ble.n	8024e20 <__kernel_rem_pio2+0xa0>
 8024e48:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024e4c:	f108 0801 	add.w	r8, r8, #1
 8024e50:	ecab 7b02 	vstmia	fp!, {d7}
 8024e54:	3508      	adds	r5, #8
 8024e56:	e7cc      	b.n	8024df2 <__kernel_rem_pio2+0x72>
 8024e58:	9b02      	ldr	r3, [sp, #8]
 8024e5a:	aa0e      	add	r2, sp, #56	; 0x38
 8024e5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024e60:	930d      	str	r3, [sp, #52]	; 0x34
 8024e62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024e64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024e68:	9c02      	ldr	r4, [sp, #8]
 8024e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8024e6c:	00e3      	lsls	r3, r4, #3
 8024e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8024e70:	ab9a      	add	r3, sp, #616	; 0x268
 8024e72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024e76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024e7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024e7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8024e80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024e84:	46c3      	mov	fp, r8
 8024e86:	46a1      	mov	r9, r4
 8024e88:	f1b9 0f00 	cmp.w	r9, #0
 8024e8c:	f1a5 0508 	sub.w	r5, r5, #8
 8024e90:	dc77      	bgt.n	8024f82 <__kernel_rem_pio2+0x202>
 8024e92:	ec47 6b10 	vmov	d0, r6, r7
 8024e96:	4650      	mov	r0, sl
 8024e98:	f000 ff4a 	bl	8025d30 <scalbn>
 8024e9c:	ec57 6b10 	vmov	r6, r7, d0
 8024ea0:	2200      	movs	r2, #0
 8024ea2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024ea6:	ee10 0a10 	vmov	r0, s0
 8024eaa:	4639      	mov	r1, r7
 8024eac:	f7db fb58 	bl	8000560 <__aeabi_dmul>
 8024eb0:	ec41 0b10 	vmov	d0, r0, r1
 8024eb4:	f000 febc 	bl	8025c30 <floor>
 8024eb8:	4b7c      	ldr	r3, [pc, #496]	; (80250ac <__kernel_rem_pio2+0x32c>)
 8024eba:	ec51 0b10 	vmov	r0, r1, d0
 8024ebe:	2200      	movs	r2, #0
 8024ec0:	f7db fb4e 	bl	8000560 <__aeabi_dmul>
 8024ec4:	4602      	mov	r2, r0
 8024ec6:	460b      	mov	r3, r1
 8024ec8:	4630      	mov	r0, r6
 8024eca:	4639      	mov	r1, r7
 8024ecc:	f7db f990 	bl	80001f0 <__aeabi_dsub>
 8024ed0:	460f      	mov	r7, r1
 8024ed2:	4606      	mov	r6, r0
 8024ed4:	f7db fdde 	bl	8000a94 <__aeabi_d2iz>
 8024ed8:	9004      	str	r0, [sp, #16]
 8024eda:	f7db fad7 	bl	800048c <__aeabi_i2d>
 8024ede:	4602      	mov	r2, r0
 8024ee0:	460b      	mov	r3, r1
 8024ee2:	4630      	mov	r0, r6
 8024ee4:	4639      	mov	r1, r7
 8024ee6:	f7db f983 	bl	80001f0 <__aeabi_dsub>
 8024eea:	f1ba 0f00 	cmp.w	sl, #0
 8024eee:	4606      	mov	r6, r0
 8024ef0:	460f      	mov	r7, r1
 8024ef2:	dd6d      	ble.n	8024fd0 <__kernel_rem_pio2+0x250>
 8024ef4:	1e62      	subs	r2, r4, #1
 8024ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8024ef8:	9d04      	ldr	r5, [sp, #16]
 8024efa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024efe:	f1ca 0118 	rsb	r1, sl, #24
 8024f02:	fa40 f301 	asr.w	r3, r0, r1
 8024f06:	441d      	add	r5, r3
 8024f08:	408b      	lsls	r3, r1
 8024f0a:	1ac0      	subs	r0, r0, r3
 8024f0c:	ab0e      	add	r3, sp, #56	; 0x38
 8024f0e:	9504      	str	r5, [sp, #16]
 8024f10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8024f14:	f1ca 0317 	rsb	r3, sl, #23
 8024f18:	fa40 fb03 	asr.w	fp, r0, r3
 8024f1c:	f1bb 0f00 	cmp.w	fp, #0
 8024f20:	dd65      	ble.n	8024fee <__kernel_rem_pio2+0x26e>
 8024f22:	9b04      	ldr	r3, [sp, #16]
 8024f24:	2200      	movs	r2, #0
 8024f26:	3301      	adds	r3, #1
 8024f28:	9304      	str	r3, [sp, #16]
 8024f2a:	4615      	mov	r5, r2
 8024f2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024f30:	4294      	cmp	r4, r2
 8024f32:	f300 809c 	bgt.w	802506e <__kernel_rem_pio2+0x2ee>
 8024f36:	f1ba 0f00 	cmp.w	sl, #0
 8024f3a:	dd07      	ble.n	8024f4c <__kernel_rem_pio2+0x1cc>
 8024f3c:	f1ba 0f01 	cmp.w	sl, #1
 8024f40:	f000 80c0 	beq.w	80250c4 <__kernel_rem_pio2+0x344>
 8024f44:	f1ba 0f02 	cmp.w	sl, #2
 8024f48:	f000 80c6 	beq.w	80250d8 <__kernel_rem_pio2+0x358>
 8024f4c:	f1bb 0f02 	cmp.w	fp, #2
 8024f50:	d14d      	bne.n	8024fee <__kernel_rem_pio2+0x26e>
 8024f52:	4632      	mov	r2, r6
 8024f54:	463b      	mov	r3, r7
 8024f56:	4956      	ldr	r1, [pc, #344]	; (80250b0 <__kernel_rem_pio2+0x330>)
 8024f58:	2000      	movs	r0, #0
 8024f5a:	f7db f949 	bl	80001f0 <__aeabi_dsub>
 8024f5e:	4606      	mov	r6, r0
 8024f60:	460f      	mov	r7, r1
 8024f62:	2d00      	cmp	r5, #0
 8024f64:	d043      	beq.n	8024fee <__kernel_rem_pio2+0x26e>
 8024f66:	4650      	mov	r0, sl
 8024f68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80250a0 <__kernel_rem_pio2+0x320>
 8024f6c:	f000 fee0 	bl	8025d30 <scalbn>
 8024f70:	4630      	mov	r0, r6
 8024f72:	4639      	mov	r1, r7
 8024f74:	ec53 2b10 	vmov	r2, r3, d0
 8024f78:	f7db f93a 	bl	80001f0 <__aeabi_dsub>
 8024f7c:	4606      	mov	r6, r0
 8024f7e:	460f      	mov	r7, r1
 8024f80:	e035      	b.n	8024fee <__kernel_rem_pio2+0x26e>
 8024f82:	4b4c      	ldr	r3, [pc, #304]	; (80250b4 <__kernel_rem_pio2+0x334>)
 8024f84:	2200      	movs	r2, #0
 8024f86:	4630      	mov	r0, r6
 8024f88:	4639      	mov	r1, r7
 8024f8a:	f7db fae9 	bl	8000560 <__aeabi_dmul>
 8024f8e:	f7db fd81 	bl	8000a94 <__aeabi_d2iz>
 8024f92:	f7db fa7b 	bl	800048c <__aeabi_i2d>
 8024f96:	4602      	mov	r2, r0
 8024f98:	460b      	mov	r3, r1
 8024f9a:	ec43 2b18 	vmov	d8, r2, r3
 8024f9e:	4b46      	ldr	r3, [pc, #280]	; (80250b8 <__kernel_rem_pio2+0x338>)
 8024fa0:	2200      	movs	r2, #0
 8024fa2:	f7db fadd 	bl	8000560 <__aeabi_dmul>
 8024fa6:	4602      	mov	r2, r0
 8024fa8:	460b      	mov	r3, r1
 8024faa:	4630      	mov	r0, r6
 8024fac:	4639      	mov	r1, r7
 8024fae:	f7db f91f 	bl	80001f0 <__aeabi_dsub>
 8024fb2:	f7db fd6f 	bl	8000a94 <__aeabi_d2iz>
 8024fb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024fba:	f84b 0b04 	str.w	r0, [fp], #4
 8024fbe:	ec51 0b18 	vmov	r0, r1, d8
 8024fc2:	f7db f917 	bl	80001f4 <__adddf3>
 8024fc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8024fca:	4606      	mov	r6, r0
 8024fcc:	460f      	mov	r7, r1
 8024fce:	e75b      	b.n	8024e88 <__kernel_rem_pio2+0x108>
 8024fd0:	d106      	bne.n	8024fe0 <__kernel_rem_pio2+0x260>
 8024fd2:	1e63      	subs	r3, r4, #1
 8024fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8024fd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024fda:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024fde:	e79d      	b.n	8024f1c <__kernel_rem_pio2+0x19c>
 8024fe0:	4b36      	ldr	r3, [pc, #216]	; (80250bc <__kernel_rem_pio2+0x33c>)
 8024fe2:	2200      	movs	r2, #0
 8024fe4:	f7db fd42 	bl	8000a6c <__aeabi_dcmpge>
 8024fe8:	2800      	cmp	r0, #0
 8024fea:	d13d      	bne.n	8025068 <__kernel_rem_pio2+0x2e8>
 8024fec:	4683      	mov	fp, r0
 8024fee:	2200      	movs	r2, #0
 8024ff0:	2300      	movs	r3, #0
 8024ff2:	4630      	mov	r0, r6
 8024ff4:	4639      	mov	r1, r7
 8024ff6:	f7db fd1b 	bl	8000a30 <__aeabi_dcmpeq>
 8024ffa:	2800      	cmp	r0, #0
 8024ffc:	f000 80c0 	beq.w	8025180 <__kernel_rem_pio2+0x400>
 8025000:	1e65      	subs	r5, r4, #1
 8025002:	462b      	mov	r3, r5
 8025004:	2200      	movs	r2, #0
 8025006:	9902      	ldr	r1, [sp, #8]
 8025008:	428b      	cmp	r3, r1
 802500a:	da6c      	bge.n	80250e6 <__kernel_rem_pio2+0x366>
 802500c:	2a00      	cmp	r2, #0
 802500e:	f000 8089 	beq.w	8025124 <__kernel_rem_pio2+0x3a4>
 8025012:	ab0e      	add	r3, sp, #56	; 0x38
 8025014:	f1aa 0a18 	sub.w	sl, sl, #24
 8025018:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802501c:	2b00      	cmp	r3, #0
 802501e:	f000 80ad 	beq.w	802517c <__kernel_rem_pio2+0x3fc>
 8025022:	4650      	mov	r0, sl
 8025024:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80250a0 <__kernel_rem_pio2+0x320>
 8025028:	f000 fe82 	bl	8025d30 <scalbn>
 802502c:	ab9a      	add	r3, sp, #616	; 0x268
 802502e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025032:	ec57 6b10 	vmov	r6, r7, d0
 8025036:	00ec      	lsls	r4, r5, #3
 8025038:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 802503c:	46aa      	mov	sl, r5
 802503e:	f1ba 0f00 	cmp.w	sl, #0
 8025042:	f280 80d6 	bge.w	80251f2 <__kernel_rem_pio2+0x472>
 8025046:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8025098 <__kernel_rem_pio2+0x318>
 802504a:	462e      	mov	r6, r5
 802504c:	2e00      	cmp	r6, #0
 802504e:	f2c0 8104 	blt.w	802525a <__kernel_rem_pio2+0x4da>
 8025052:	ab72      	add	r3, sp, #456	; 0x1c8
 8025054:	ed8d 8b06 	vstr	d8, [sp, #24]
 8025058:	f8df a064 	ldr.w	sl, [pc, #100]	; 80250c0 <__kernel_rem_pio2+0x340>
 802505c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8025060:	f04f 0800 	mov.w	r8, #0
 8025064:	1baf      	subs	r7, r5, r6
 8025066:	e0ea      	b.n	802523e <__kernel_rem_pio2+0x4be>
 8025068:	f04f 0b02 	mov.w	fp, #2
 802506c:	e759      	b.n	8024f22 <__kernel_rem_pio2+0x1a2>
 802506e:	f8d8 3000 	ldr.w	r3, [r8]
 8025072:	b955      	cbnz	r5, 802508a <__kernel_rem_pio2+0x30a>
 8025074:	b123      	cbz	r3, 8025080 <__kernel_rem_pio2+0x300>
 8025076:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802507a:	f8c8 3000 	str.w	r3, [r8]
 802507e:	2301      	movs	r3, #1
 8025080:	3201      	adds	r2, #1
 8025082:	f108 0804 	add.w	r8, r8, #4
 8025086:	461d      	mov	r5, r3
 8025088:	e752      	b.n	8024f30 <__kernel_rem_pio2+0x1b0>
 802508a:	1acb      	subs	r3, r1, r3
 802508c:	f8c8 3000 	str.w	r3, [r8]
 8025090:	462b      	mov	r3, r5
 8025092:	e7f5      	b.n	8025080 <__kernel_rem_pio2+0x300>
 8025094:	f3af 8000 	nop.w
	...
 80250a4:	3ff00000 	.word	0x3ff00000
 80250a8:	08029c50 	.word	0x08029c50
 80250ac:	40200000 	.word	0x40200000
 80250b0:	3ff00000 	.word	0x3ff00000
 80250b4:	3e700000 	.word	0x3e700000
 80250b8:	41700000 	.word	0x41700000
 80250bc:	3fe00000 	.word	0x3fe00000
 80250c0:	08029c10 	.word	0x08029c10
 80250c4:	1e62      	subs	r2, r4, #1
 80250c6:	ab0e      	add	r3, sp, #56	; 0x38
 80250c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80250cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80250d0:	a90e      	add	r1, sp, #56	; 0x38
 80250d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80250d6:	e739      	b.n	8024f4c <__kernel_rem_pio2+0x1cc>
 80250d8:	1e62      	subs	r2, r4, #1
 80250da:	ab0e      	add	r3, sp, #56	; 0x38
 80250dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80250e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80250e4:	e7f4      	b.n	80250d0 <__kernel_rem_pio2+0x350>
 80250e6:	a90e      	add	r1, sp, #56	; 0x38
 80250e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80250ec:	3b01      	subs	r3, #1
 80250ee:	430a      	orrs	r2, r1
 80250f0:	e789      	b.n	8025006 <__kernel_rem_pio2+0x286>
 80250f2:	3301      	adds	r3, #1
 80250f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80250f8:	2900      	cmp	r1, #0
 80250fa:	d0fa      	beq.n	80250f2 <__kernel_rem_pio2+0x372>
 80250fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80250fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8025102:	446a      	add	r2, sp
 8025104:	3a98      	subs	r2, #152	; 0x98
 8025106:	920a      	str	r2, [sp, #40]	; 0x28
 8025108:	9a08      	ldr	r2, [sp, #32]
 802510a:	18e3      	adds	r3, r4, r3
 802510c:	18a5      	adds	r5, r4, r2
 802510e:	aa22      	add	r2, sp, #136	; 0x88
 8025110:	f104 0801 	add.w	r8, r4, #1
 8025114:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8025118:	9304      	str	r3, [sp, #16]
 802511a:	9b04      	ldr	r3, [sp, #16]
 802511c:	4543      	cmp	r3, r8
 802511e:	da04      	bge.n	802512a <__kernel_rem_pio2+0x3aa>
 8025120:	461c      	mov	r4, r3
 8025122:	e6a3      	b.n	8024e6c <__kernel_rem_pio2+0xec>
 8025124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025126:	2301      	movs	r3, #1
 8025128:	e7e4      	b.n	80250f4 <__kernel_rem_pio2+0x374>
 802512a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802512c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8025130:	f7db f9ac 	bl	800048c <__aeabi_i2d>
 8025134:	e8e5 0102 	strd	r0, r1, [r5], #8
 8025138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802513a:	46ab      	mov	fp, r5
 802513c:	461c      	mov	r4, r3
 802513e:	f04f 0900 	mov.w	r9, #0
 8025142:	2600      	movs	r6, #0
 8025144:	2700      	movs	r7, #0
 8025146:	9b06      	ldr	r3, [sp, #24]
 8025148:	4599      	cmp	r9, r3
 802514a:	dd06      	ble.n	802515a <__kernel_rem_pio2+0x3da>
 802514c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802514e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8025152:	f108 0801 	add.w	r8, r8, #1
 8025156:	930a      	str	r3, [sp, #40]	; 0x28
 8025158:	e7df      	b.n	802511a <__kernel_rem_pio2+0x39a>
 802515a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802515e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8025162:	f7db f9fd 	bl	8000560 <__aeabi_dmul>
 8025166:	4602      	mov	r2, r0
 8025168:	460b      	mov	r3, r1
 802516a:	4630      	mov	r0, r6
 802516c:	4639      	mov	r1, r7
 802516e:	f7db f841 	bl	80001f4 <__adddf3>
 8025172:	f109 0901 	add.w	r9, r9, #1
 8025176:	4606      	mov	r6, r0
 8025178:	460f      	mov	r7, r1
 802517a:	e7e4      	b.n	8025146 <__kernel_rem_pio2+0x3c6>
 802517c:	3d01      	subs	r5, #1
 802517e:	e748      	b.n	8025012 <__kernel_rem_pio2+0x292>
 8025180:	ec47 6b10 	vmov	d0, r6, r7
 8025184:	f1ca 0000 	rsb	r0, sl, #0
 8025188:	f000 fdd2 	bl	8025d30 <scalbn>
 802518c:	ec57 6b10 	vmov	r6, r7, d0
 8025190:	4ba0      	ldr	r3, [pc, #640]	; (8025414 <__kernel_rem_pio2+0x694>)
 8025192:	ee10 0a10 	vmov	r0, s0
 8025196:	2200      	movs	r2, #0
 8025198:	4639      	mov	r1, r7
 802519a:	f7db fc67 	bl	8000a6c <__aeabi_dcmpge>
 802519e:	b1f8      	cbz	r0, 80251e0 <__kernel_rem_pio2+0x460>
 80251a0:	4b9d      	ldr	r3, [pc, #628]	; (8025418 <__kernel_rem_pio2+0x698>)
 80251a2:	2200      	movs	r2, #0
 80251a4:	4630      	mov	r0, r6
 80251a6:	4639      	mov	r1, r7
 80251a8:	f7db f9da 	bl	8000560 <__aeabi_dmul>
 80251ac:	f7db fc72 	bl	8000a94 <__aeabi_d2iz>
 80251b0:	4680      	mov	r8, r0
 80251b2:	f7db f96b 	bl	800048c <__aeabi_i2d>
 80251b6:	4b97      	ldr	r3, [pc, #604]	; (8025414 <__kernel_rem_pio2+0x694>)
 80251b8:	2200      	movs	r2, #0
 80251ba:	f7db f9d1 	bl	8000560 <__aeabi_dmul>
 80251be:	460b      	mov	r3, r1
 80251c0:	4602      	mov	r2, r0
 80251c2:	4639      	mov	r1, r7
 80251c4:	4630      	mov	r0, r6
 80251c6:	f7db f813 	bl	80001f0 <__aeabi_dsub>
 80251ca:	f7db fc63 	bl	8000a94 <__aeabi_d2iz>
 80251ce:	1c65      	adds	r5, r4, #1
 80251d0:	ab0e      	add	r3, sp, #56	; 0x38
 80251d2:	f10a 0a18 	add.w	sl, sl, #24
 80251d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80251da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80251de:	e720      	b.n	8025022 <__kernel_rem_pio2+0x2a2>
 80251e0:	4630      	mov	r0, r6
 80251e2:	4639      	mov	r1, r7
 80251e4:	f7db fc56 	bl	8000a94 <__aeabi_d2iz>
 80251e8:	ab0e      	add	r3, sp, #56	; 0x38
 80251ea:	4625      	mov	r5, r4
 80251ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80251f0:	e717      	b.n	8025022 <__kernel_rem_pio2+0x2a2>
 80251f2:	ab0e      	add	r3, sp, #56	; 0x38
 80251f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80251f8:	f7db f948 	bl	800048c <__aeabi_i2d>
 80251fc:	4632      	mov	r2, r6
 80251fe:	463b      	mov	r3, r7
 8025200:	f7db f9ae 	bl	8000560 <__aeabi_dmul>
 8025204:	4b84      	ldr	r3, [pc, #528]	; (8025418 <__kernel_rem_pio2+0x698>)
 8025206:	e968 0102 	strd	r0, r1, [r8, #-8]!
 802520a:	2200      	movs	r2, #0
 802520c:	4630      	mov	r0, r6
 802520e:	4639      	mov	r1, r7
 8025210:	f7db f9a6 	bl	8000560 <__aeabi_dmul>
 8025214:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025218:	4606      	mov	r6, r0
 802521a:	460f      	mov	r7, r1
 802521c:	e70f      	b.n	802503e <__kernel_rem_pio2+0x2be>
 802521e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8025222:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8025226:	f7db f99b 	bl	8000560 <__aeabi_dmul>
 802522a:	4602      	mov	r2, r0
 802522c:	460b      	mov	r3, r1
 802522e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025232:	f7da ffdf 	bl	80001f4 <__adddf3>
 8025236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802523a:	f108 0801 	add.w	r8, r8, #1
 802523e:	9b02      	ldr	r3, [sp, #8]
 8025240:	4598      	cmp	r8, r3
 8025242:	dc01      	bgt.n	8025248 <__kernel_rem_pio2+0x4c8>
 8025244:	45b8      	cmp	r8, r7
 8025246:	ddea      	ble.n	802521e <__kernel_rem_pio2+0x49e>
 8025248:	ed9d 7b06 	vldr	d7, [sp, #24]
 802524c:	ab4a      	add	r3, sp, #296	; 0x128
 802524e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8025252:	ed87 7b00 	vstr	d7, [r7]
 8025256:	3e01      	subs	r6, #1
 8025258:	e6f8      	b.n	802504c <__kernel_rem_pio2+0x2cc>
 802525a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802525c:	2b02      	cmp	r3, #2
 802525e:	dc0b      	bgt.n	8025278 <__kernel_rem_pio2+0x4f8>
 8025260:	2b00      	cmp	r3, #0
 8025262:	dc35      	bgt.n	80252d0 <__kernel_rem_pio2+0x550>
 8025264:	d059      	beq.n	802531a <__kernel_rem_pio2+0x59a>
 8025266:	9b04      	ldr	r3, [sp, #16]
 8025268:	f003 0007 	and.w	r0, r3, #7
 802526c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025270:	ecbd 8b02 	vpop	{d8}
 8025274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025278:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802527a:	2b03      	cmp	r3, #3
 802527c:	d1f3      	bne.n	8025266 <__kernel_rem_pio2+0x4e6>
 802527e:	ab4a      	add	r3, sp, #296	; 0x128
 8025280:	4423      	add	r3, r4
 8025282:	9306      	str	r3, [sp, #24]
 8025284:	461c      	mov	r4, r3
 8025286:	469a      	mov	sl, r3
 8025288:	9502      	str	r5, [sp, #8]
 802528a:	9b02      	ldr	r3, [sp, #8]
 802528c:	2b00      	cmp	r3, #0
 802528e:	f1aa 0a08 	sub.w	sl, sl, #8
 8025292:	dc6b      	bgt.n	802536c <__kernel_rem_pio2+0x5ec>
 8025294:	46aa      	mov	sl, r5
 8025296:	f1ba 0f01 	cmp.w	sl, #1
 802529a:	f1a4 0408 	sub.w	r4, r4, #8
 802529e:	f300 8085 	bgt.w	80253ac <__kernel_rem_pio2+0x62c>
 80252a2:	9c06      	ldr	r4, [sp, #24]
 80252a4:	2000      	movs	r0, #0
 80252a6:	3408      	adds	r4, #8
 80252a8:	2100      	movs	r1, #0
 80252aa:	2d01      	cmp	r5, #1
 80252ac:	f300 809d 	bgt.w	80253ea <__kernel_rem_pio2+0x66a>
 80252b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80252b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80252b8:	f1bb 0f00 	cmp.w	fp, #0
 80252bc:	f040 809b 	bne.w	80253f6 <__kernel_rem_pio2+0x676>
 80252c0:	9b01      	ldr	r3, [sp, #4]
 80252c2:	e9c3 5600 	strd	r5, r6, [r3]
 80252c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80252ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80252ce:	e7ca      	b.n	8025266 <__kernel_rem_pio2+0x4e6>
 80252d0:	3408      	adds	r4, #8
 80252d2:	ab4a      	add	r3, sp, #296	; 0x128
 80252d4:	441c      	add	r4, r3
 80252d6:	462e      	mov	r6, r5
 80252d8:	2000      	movs	r0, #0
 80252da:	2100      	movs	r1, #0
 80252dc:	2e00      	cmp	r6, #0
 80252de:	da36      	bge.n	802534e <__kernel_rem_pio2+0x5ce>
 80252e0:	f1bb 0f00 	cmp.w	fp, #0
 80252e4:	d039      	beq.n	802535a <__kernel_rem_pio2+0x5da>
 80252e6:	4602      	mov	r2, r0
 80252e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80252ec:	9c01      	ldr	r4, [sp, #4]
 80252ee:	e9c4 2300 	strd	r2, r3, [r4]
 80252f2:	4602      	mov	r2, r0
 80252f4:	460b      	mov	r3, r1
 80252f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80252fa:	f7da ff79 	bl	80001f0 <__aeabi_dsub>
 80252fe:	ae4c      	add	r6, sp, #304	; 0x130
 8025300:	2401      	movs	r4, #1
 8025302:	42a5      	cmp	r5, r4
 8025304:	da2c      	bge.n	8025360 <__kernel_rem_pio2+0x5e0>
 8025306:	f1bb 0f00 	cmp.w	fp, #0
 802530a:	d002      	beq.n	8025312 <__kernel_rem_pio2+0x592>
 802530c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025310:	4619      	mov	r1, r3
 8025312:	9b01      	ldr	r3, [sp, #4]
 8025314:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025318:	e7a5      	b.n	8025266 <__kernel_rem_pio2+0x4e6>
 802531a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 802531e:	eb0d 0403 	add.w	r4, sp, r3
 8025322:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8025326:	2000      	movs	r0, #0
 8025328:	2100      	movs	r1, #0
 802532a:	2d00      	cmp	r5, #0
 802532c:	da09      	bge.n	8025342 <__kernel_rem_pio2+0x5c2>
 802532e:	f1bb 0f00 	cmp.w	fp, #0
 8025332:	d002      	beq.n	802533a <__kernel_rem_pio2+0x5ba>
 8025334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025338:	4619      	mov	r1, r3
 802533a:	9b01      	ldr	r3, [sp, #4]
 802533c:	e9c3 0100 	strd	r0, r1, [r3]
 8025340:	e791      	b.n	8025266 <__kernel_rem_pio2+0x4e6>
 8025342:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025346:	f7da ff55 	bl	80001f4 <__adddf3>
 802534a:	3d01      	subs	r5, #1
 802534c:	e7ed      	b.n	802532a <__kernel_rem_pio2+0x5aa>
 802534e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025352:	f7da ff4f 	bl	80001f4 <__adddf3>
 8025356:	3e01      	subs	r6, #1
 8025358:	e7c0      	b.n	80252dc <__kernel_rem_pio2+0x55c>
 802535a:	4602      	mov	r2, r0
 802535c:	460b      	mov	r3, r1
 802535e:	e7c5      	b.n	80252ec <__kernel_rem_pio2+0x56c>
 8025360:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8025364:	f7da ff46 	bl	80001f4 <__adddf3>
 8025368:	3401      	adds	r4, #1
 802536a:	e7ca      	b.n	8025302 <__kernel_rem_pio2+0x582>
 802536c:	e9da 8900 	ldrd	r8, r9, [sl]
 8025370:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8025374:	9b02      	ldr	r3, [sp, #8]
 8025376:	3b01      	subs	r3, #1
 8025378:	9302      	str	r3, [sp, #8]
 802537a:	4632      	mov	r2, r6
 802537c:	463b      	mov	r3, r7
 802537e:	4640      	mov	r0, r8
 8025380:	4649      	mov	r1, r9
 8025382:	f7da ff37 	bl	80001f4 <__adddf3>
 8025386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802538a:	4602      	mov	r2, r0
 802538c:	460b      	mov	r3, r1
 802538e:	4640      	mov	r0, r8
 8025390:	4649      	mov	r1, r9
 8025392:	f7da ff2d 	bl	80001f0 <__aeabi_dsub>
 8025396:	4632      	mov	r2, r6
 8025398:	463b      	mov	r3, r7
 802539a:	f7da ff2b 	bl	80001f4 <__adddf3>
 802539e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80253a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80253a6:	ed8a 7b00 	vstr	d7, [sl]
 80253aa:	e76e      	b.n	802528a <__kernel_rem_pio2+0x50a>
 80253ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80253b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80253b4:	4640      	mov	r0, r8
 80253b6:	4632      	mov	r2, r6
 80253b8:	463b      	mov	r3, r7
 80253ba:	4649      	mov	r1, r9
 80253bc:	f7da ff1a 	bl	80001f4 <__adddf3>
 80253c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80253c4:	4602      	mov	r2, r0
 80253c6:	460b      	mov	r3, r1
 80253c8:	4640      	mov	r0, r8
 80253ca:	4649      	mov	r1, r9
 80253cc:	f7da ff10 	bl	80001f0 <__aeabi_dsub>
 80253d0:	4632      	mov	r2, r6
 80253d2:	463b      	mov	r3, r7
 80253d4:	f7da ff0e 	bl	80001f4 <__adddf3>
 80253d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80253dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80253e0:	ed84 7b00 	vstr	d7, [r4]
 80253e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80253e8:	e755      	b.n	8025296 <__kernel_rem_pio2+0x516>
 80253ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80253ee:	f7da ff01 	bl	80001f4 <__adddf3>
 80253f2:	3d01      	subs	r5, #1
 80253f4:	e759      	b.n	80252aa <__kernel_rem_pio2+0x52a>
 80253f6:	9b01      	ldr	r3, [sp, #4]
 80253f8:	9a01      	ldr	r2, [sp, #4]
 80253fa:	601d      	str	r5, [r3, #0]
 80253fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8025400:	605c      	str	r4, [r3, #4]
 8025402:	609f      	str	r7, [r3, #8]
 8025404:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8025408:	60d3      	str	r3, [r2, #12]
 802540a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802540e:	6110      	str	r0, [r2, #16]
 8025410:	6153      	str	r3, [r2, #20]
 8025412:	e728      	b.n	8025266 <__kernel_rem_pio2+0x4e6>
 8025414:	41700000 	.word	0x41700000
 8025418:	3e700000 	.word	0x3e700000
 802541c:	00000000 	.word	0x00000000

08025420 <__kernel_sin>:
 8025420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025424:	ed2d 8b04 	vpush	{d8-d9}
 8025428:	eeb0 8a41 	vmov.f32	s16, s2
 802542c:	eef0 8a61 	vmov.f32	s17, s3
 8025430:	ec55 4b10 	vmov	r4, r5, d0
 8025434:	b083      	sub	sp, #12
 8025436:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802543a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802543e:	9001      	str	r0, [sp, #4]
 8025440:	da06      	bge.n	8025450 <__kernel_sin+0x30>
 8025442:	ee10 0a10 	vmov	r0, s0
 8025446:	4629      	mov	r1, r5
 8025448:	f7db fb24 	bl	8000a94 <__aeabi_d2iz>
 802544c:	2800      	cmp	r0, #0
 802544e:	d051      	beq.n	80254f4 <__kernel_sin+0xd4>
 8025450:	4622      	mov	r2, r4
 8025452:	462b      	mov	r3, r5
 8025454:	4620      	mov	r0, r4
 8025456:	4629      	mov	r1, r5
 8025458:	f7db f882 	bl	8000560 <__aeabi_dmul>
 802545c:	4682      	mov	sl, r0
 802545e:	468b      	mov	fp, r1
 8025460:	4602      	mov	r2, r0
 8025462:	460b      	mov	r3, r1
 8025464:	4620      	mov	r0, r4
 8025466:	4629      	mov	r1, r5
 8025468:	f7db f87a 	bl	8000560 <__aeabi_dmul>
 802546c:	a341      	add	r3, pc, #260	; (adr r3, 8025574 <__kernel_sin+0x154>)
 802546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025472:	4680      	mov	r8, r0
 8025474:	4689      	mov	r9, r1
 8025476:	4650      	mov	r0, sl
 8025478:	4659      	mov	r1, fp
 802547a:	f7db f871 	bl	8000560 <__aeabi_dmul>
 802547e:	a33f      	add	r3, pc, #252	; (adr r3, 802557c <__kernel_sin+0x15c>)
 8025480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025484:	f7da feb4 	bl	80001f0 <__aeabi_dsub>
 8025488:	4652      	mov	r2, sl
 802548a:	465b      	mov	r3, fp
 802548c:	f7db f868 	bl	8000560 <__aeabi_dmul>
 8025490:	a33c      	add	r3, pc, #240	; (adr r3, 8025584 <__kernel_sin+0x164>)
 8025492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025496:	f7da fead 	bl	80001f4 <__adddf3>
 802549a:	4652      	mov	r2, sl
 802549c:	465b      	mov	r3, fp
 802549e:	f7db f85f 	bl	8000560 <__aeabi_dmul>
 80254a2:	a33a      	add	r3, pc, #232	; (adr r3, 802558c <__kernel_sin+0x16c>)
 80254a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254a8:	f7da fea2 	bl	80001f0 <__aeabi_dsub>
 80254ac:	4652      	mov	r2, sl
 80254ae:	465b      	mov	r3, fp
 80254b0:	f7db f856 	bl	8000560 <__aeabi_dmul>
 80254b4:	a337      	add	r3, pc, #220	; (adr r3, 8025594 <__kernel_sin+0x174>)
 80254b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254ba:	f7da fe9b 	bl	80001f4 <__adddf3>
 80254be:	9b01      	ldr	r3, [sp, #4]
 80254c0:	4606      	mov	r6, r0
 80254c2:	460f      	mov	r7, r1
 80254c4:	b9eb      	cbnz	r3, 8025502 <__kernel_sin+0xe2>
 80254c6:	4602      	mov	r2, r0
 80254c8:	460b      	mov	r3, r1
 80254ca:	4650      	mov	r0, sl
 80254cc:	4659      	mov	r1, fp
 80254ce:	f7db f847 	bl	8000560 <__aeabi_dmul>
 80254d2:	a325      	add	r3, pc, #148	; (adr r3, 8025568 <__kernel_sin+0x148>)
 80254d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254d8:	f7da fe8a 	bl	80001f0 <__aeabi_dsub>
 80254dc:	4642      	mov	r2, r8
 80254de:	464b      	mov	r3, r9
 80254e0:	f7db f83e 	bl	8000560 <__aeabi_dmul>
 80254e4:	4602      	mov	r2, r0
 80254e6:	460b      	mov	r3, r1
 80254e8:	4620      	mov	r0, r4
 80254ea:	4629      	mov	r1, r5
 80254ec:	f7da fe82 	bl	80001f4 <__adddf3>
 80254f0:	4604      	mov	r4, r0
 80254f2:	460d      	mov	r5, r1
 80254f4:	ec45 4b10 	vmov	d0, r4, r5
 80254f8:	b003      	add	sp, #12
 80254fa:	ecbd 8b04 	vpop	{d8-d9}
 80254fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025502:	4b1b      	ldr	r3, [pc, #108]	; (8025570 <__kernel_sin+0x150>)
 8025504:	ec51 0b18 	vmov	r0, r1, d8
 8025508:	2200      	movs	r2, #0
 802550a:	f7db f829 	bl	8000560 <__aeabi_dmul>
 802550e:	4632      	mov	r2, r6
 8025510:	ec41 0b19 	vmov	d9, r0, r1
 8025514:	463b      	mov	r3, r7
 8025516:	4640      	mov	r0, r8
 8025518:	4649      	mov	r1, r9
 802551a:	f7db f821 	bl	8000560 <__aeabi_dmul>
 802551e:	4602      	mov	r2, r0
 8025520:	460b      	mov	r3, r1
 8025522:	ec51 0b19 	vmov	r0, r1, d9
 8025526:	f7da fe63 	bl	80001f0 <__aeabi_dsub>
 802552a:	4652      	mov	r2, sl
 802552c:	465b      	mov	r3, fp
 802552e:	f7db f817 	bl	8000560 <__aeabi_dmul>
 8025532:	ec53 2b18 	vmov	r2, r3, d8
 8025536:	f7da fe5b 	bl	80001f0 <__aeabi_dsub>
 802553a:	a30b      	add	r3, pc, #44	; (adr r3, 8025568 <__kernel_sin+0x148>)
 802553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025540:	4606      	mov	r6, r0
 8025542:	460f      	mov	r7, r1
 8025544:	4640      	mov	r0, r8
 8025546:	4649      	mov	r1, r9
 8025548:	f7db f80a 	bl	8000560 <__aeabi_dmul>
 802554c:	4602      	mov	r2, r0
 802554e:	460b      	mov	r3, r1
 8025550:	4630      	mov	r0, r6
 8025552:	4639      	mov	r1, r7
 8025554:	f7da fe4e 	bl	80001f4 <__adddf3>
 8025558:	4602      	mov	r2, r0
 802555a:	460b      	mov	r3, r1
 802555c:	4620      	mov	r0, r4
 802555e:	4629      	mov	r1, r5
 8025560:	f7da fe46 	bl	80001f0 <__aeabi_dsub>
 8025564:	e7c4      	b.n	80254f0 <__kernel_sin+0xd0>
 8025566:	bf00      	nop
 8025568:	55555549 	.word	0x55555549
 802556c:	3fc55555 	.word	0x3fc55555
 8025570:	3fe00000 	.word	0x3fe00000
 8025574:	5acfd57c 	.word	0x5acfd57c
 8025578:	3de5d93a 	.word	0x3de5d93a
 802557c:	8a2b9ceb 	.word	0x8a2b9ceb
 8025580:	3e5ae5e6 	.word	0x3e5ae5e6
 8025584:	57b1fe7d 	.word	0x57b1fe7d
 8025588:	3ec71de3 	.word	0x3ec71de3
 802558c:	19c161d5 	.word	0x19c161d5
 8025590:	3f2a01a0 	.word	0x3f2a01a0
 8025594:	1110f8a6 	.word	0x1110f8a6
 8025598:	3f811111 	.word	0x3f811111

0802559c <__kernel_cosf>:
 802559c:	ee10 3a10 	vmov	r3, s0
 80255a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80255a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80255a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80255ac:	da05      	bge.n	80255ba <__kernel_cosf+0x1e>
 80255ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80255b2:	ee17 2a90 	vmov	r2, s15
 80255b6:	2a00      	cmp	r2, #0
 80255b8:	d03d      	beq.n	8025636 <__kernel_cosf+0x9a>
 80255ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80255be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802563c <__kernel_cosf+0xa0>
 80255c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8025640 <__kernel_cosf+0xa4>
 80255c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8025644 <__kernel_cosf+0xa8>
 80255ca:	4a1f      	ldr	r2, [pc, #124]	; (8025648 <__kernel_cosf+0xac>)
 80255cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80255d0:	4293      	cmp	r3, r2
 80255d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802564c <__kernel_cosf+0xb0>
 80255d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80255da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8025650 <__kernel_cosf+0xb4>
 80255de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80255e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8025654 <__kernel_cosf+0xb8>
 80255e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80255ea:	eeb0 7a66 	vmov.f32	s14, s13
 80255ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80255f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80255f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80255fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80255fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8025602:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025606:	dc04      	bgt.n	8025612 <__kernel_cosf+0x76>
 8025608:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802560c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8025610:	4770      	bx	lr
 8025612:	4a11      	ldr	r2, [pc, #68]	; (8025658 <__kernel_cosf+0xbc>)
 8025614:	4293      	cmp	r3, r2
 8025616:	bfda      	itte	le
 8025618:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802561c:	ee06 3a90 	vmovle	s13, r3
 8025620:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8025624:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025628:	ee36 0a66 	vsub.f32	s0, s12, s13
 802562c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025630:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025634:	4770      	bx	lr
 8025636:	eeb0 0a46 	vmov.f32	s0, s12
 802563a:	4770      	bx	lr
 802563c:	ad47d74e 	.word	0xad47d74e
 8025640:	310f74f6 	.word	0x310f74f6
 8025644:	3d2aaaab 	.word	0x3d2aaaab
 8025648:	3e999999 	.word	0x3e999999
 802564c:	b493f27c 	.word	0xb493f27c
 8025650:	37d00d01 	.word	0x37d00d01
 8025654:	bab60b61 	.word	0xbab60b61
 8025658:	3f480000 	.word	0x3f480000

0802565c <__kernel_rem_pio2f>:
 802565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025660:	ed2d 8b04 	vpush	{d8-d9}
 8025664:	b0d9      	sub	sp, #356	; 0x164
 8025666:	4688      	mov	r8, r1
 8025668:	9002      	str	r0, [sp, #8]
 802566a:	49bb      	ldr	r1, [pc, #748]	; (8025958 <__kernel_rem_pio2f+0x2fc>)
 802566c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802566e:	9301      	str	r3, [sp, #4]
 8025670:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8025674:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8025678:	1e59      	subs	r1, r3, #1
 802567a:	1d13      	adds	r3, r2, #4
 802567c:	db27      	blt.n	80256ce <__kernel_rem_pio2f+0x72>
 802567e:	f1b2 0b03 	subs.w	fp, r2, #3
 8025682:	bf48      	it	mi
 8025684:	f102 0b04 	addmi.w	fp, r2, #4
 8025688:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802568c:	1c45      	adds	r5, r0, #1
 802568e:	00ec      	lsls	r4, r5, #3
 8025690:	1a47      	subs	r7, r0, r1
 8025692:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8025968 <__kernel_rem_pio2f+0x30c>
 8025696:	9403      	str	r4, [sp, #12]
 8025698:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802569c:	eb0a 0c01 	add.w	ip, sl, r1
 80256a0:	ae1c      	add	r6, sp, #112	; 0x70
 80256a2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80256a6:	2400      	movs	r4, #0
 80256a8:	4564      	cmp	r4, ip
 80256aa:	dd12      	ble.n	80256d2 <__kernel_rem_pio2f+0x76>
 80256ac:	9b01      	ldr	r3, [sp, #4]
 80256ae:	ac1c      	add	r4, sp, #112	; 0x70
 80256b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80256b4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80256b8:	f04f 0c00 	mov.w	ip, #0
 80256bc:	45d4      	cmp	ip, sl
 80256be:	dc27      	bgt.n	8025710 <__kernel_rem_pio2f+0xb4>
 80256c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80256c4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8025968 <__kernel_rem_pio2f+0x30c>
 80256c8:	4627      	mov	r7, r4
 80256ca:	2600      	movs	r6, #0
 80256cc:	e016      	b.n	80256fc <__kernel_rem_pio2f+0xa0>
 80256ce:	2000      	movs	r0, #0
 80256d0:	e7dc      	b.n	802568c <__kernel_rem_pio2f+0x30>
 80256d2:	42e7      	cmn	r7, r4
 80256d4:	bf5d      	ittte	pl
 80256d6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80256da:	ee07 3a90 	vmovpl	s15, r3
 80256de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80256e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80256e6:	ece6 7a01 	vstmia	r6!, {s15}
 80256ea:	3401      	adds	r4, #1
 80256ec:	e7dc      	b.n	80256a8 <__kernel_rem_pio2f+0x4c>
 80256ee:	ecf9 6a01 	vldmia	r9!, {s13}
 80256f2:	ed97 7a00 	vldr	s14, [r7]
 80256f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80256fa:	3601      	adds	r6, #1
 80256fc:	428e      	cmp	r6, r1
 80256fe:	f1a7 0704 	sub.w	r7, r7, #4
 8025702:	ddf4      	ble.n	80256ee <__kernel_rem_pio2f+0x92>
 8025704:	eceb 7a01 	vstmia	fp!, {s15}
 8025708:	f10c 0c01 	add.w	ip, ip, #1
 802570c:	3404      	adds	r4, #4
 802570e:	e7d5      	b.n	80256bc <__kernel_rem_pio2f+0x60>
 8025710:	ab08      	add	r3, sp, #32
 8025712:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8025716:	eddf 8a93 	vldr	s17, [pc, #588]	; 8025964 <__kernel_rem_pio2f+0x308>
 802571a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8025960 <__kernel_rem_pio2f+0x304>
 802571e:	9304      	str	r3, [sp, #16]
 8025720:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8025724:	4656      	mov	r6, sl
 8025726:	00b3      	lsls	r3, r6, #2
 8025728:	9305      	str	r3, [sp, #20]
 802572a:	ab58      	add	r3, sp, #352	; 0x160
 802572c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8025730:	ac08      	add	r4, sp, #32
 8025732:	ab44      	add	r3, sp, #272	; 0x110
 8025734:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8025738:	46a4      	mov	ip, r4
 802573a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802573e:	4637      	mov	r7, r6
 8025740:	2f00      	cmp	r7, #0
 8025742:	f1a0 0004 	sub.w	r0, r0, #4
 8025746:	dc4f      	bgt.n	80257e8 <__kernel_rem_pio2f+0x18c>
 8025748:	4628      	mov	r0, r5
 802574a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802574e:	f000 fca5 	bl	802609c <scalbnf>
 8025752:	eeb0 8a40 	vmov.f32	s16, s0
 8025756:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802575a:	ee28 0a00 	vmul.f32	s0, s16, s0
 802575e:	f000 fc55 	bl	802600c <floorf>
 8025762:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8025766:	eea0 8a67 	vfms.f32	s16, s0, s15
 802576a:	2d00      	cmp	r5, #0
 802576c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025770:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8025774:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025778:	ee17 9a90 	vmov	r9, s15
 802577c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025780:	dd44      	ble.n	802580c <__kernel_rem_pio2f+0x1b0>
 8025782:	f106 3cff 	add.w	ip, r6, #4294967295
 8025786:	ab08      	add	r3, sp, #32
 8025788:	f1c5 0e08 	rsb	lr, r5, #8
 802578c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8025790:	fa47 f00e 	asr.w	r0, r7, lr
 8025794:	4481      	add	r9, r0
 8025796:	fa00 f00e 	lsl.w	r0, r0, lr
 802579a:	1a3f      	subs	r7, r7, r0
 802579c:	f1c5 0007 	rsb	r0, r5, #7
 80257a0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80257a4:	4107      	asrs	r7, r0
 80257a6:	2f00      	cmp	r7, #0
 80257a8:	dd3f      	ble.n	802582a <__kernel_rem_pio2f+0x1ce>
 80257aa:	f04f 0e00 	mov.w	lr, #0
 80257ae:	f109 0901 	add.w	r9, r9, #1
 80257b2:	4673      	mov	r3, lr
 80257b4:	4576      	cmp	r6, lr
 80257b6:	dc6b      	bgt.n	8025890 <__kernel_rem_pio2f+0x234>
 80257b8:	2d00      	cmp	r5, #0
 80257ba:	dd04      	ble.n	80257c6 <__kernel_rem_pio2f+0x16a>
 80257bc:	2d01      	cmp	r5, #1
 80257be:	d078      	beq.n	80258b2 <__kernel_rem_pio2f+0x256>
 80257c0:	2d02      	cmp	r5, #2
 80257c2:	f000 8081 	beq.w	80258c8 <__kernel_rem_pio2f+0x26c>
 80257c6:	2f02      	cmp	r7, #2
 80257c8:	d12f      	bne.n	802582a <__kernel_rem_pio2f+0x1ce>
 80257ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80257ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80257d2:	b353      	cbz	r3, 802582a <__kernel_rem_pio2f+0x1ce>
 80257d4:	4628      	mov	r0, r5
 80257d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80257da:	f000 fc5f 	bl	802609c <scalbnf>
 80257de:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80257e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80257e6:	e020      	b.n	802582a <__kernel_rem_pio2f+0x1ce>
 80257e8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80257ec:	3f01      	subs	r7, #1
 80257ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80257f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80257f6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80257fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80257fe:	ecac 0a01 	vstmia	ip!, {s0}
 8025802:	ed90 0a00 	vldr	s0, [r0]
 8025806:	ee37 0a80 	vadd.f32	s0, s15, s0
 802580a:	e799      	b.n	8025740 <__kernel_rem_pio2f+0xe4>
 802580c:	d105      	bne.n	802581a <__kernel_rem_pio2f+0x1be>
 802580e:	1e70      	subs	r0, r6, #1
 8025810:	ab08      	add	r3, sp, #32
 8025812:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8025816:	11ff      	asrs	r7, r7, #7
 8025818:	e7c5      	b.n	80257a6 <__kernel_rem_pio2f+0x14a>
 802581a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802581e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8025822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025826:	da31      	bge.n	802588c <__kernel_rem_pio2f+0x230>
 8025828:	2700      	movs	r7, #0
 802582a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025832:	f040 809b 	bne.w	802596c <__kernel_rem_pio2f+0x310>
 8025836:	1e74      	subs	r4, r6, #1
 8025838:	46a4      	mov	ip, r4
 802583a:	2000      	movs	r0, #0
 802583c:	45d4      	cmp	ip, sl
 802583e:	da4a      	bge.n	80258d6 <__kernel_rem_pio2f+0x27a>
 8025840:	2800      	cmp	r0, #0
 8025842:	d07a      	beq.n	802593a <__kernel_rem_pio2f+0x2de>
 8025844:	ab08      	add	r3, sp, #32
 8025846:	3d08      	subs	r5, #8
 8025848:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802584c:	2b00      	cmp	r3, #0
 802584e:	f000 8081 	beq.w	8025954 <__kernel_rem_pio2f+0x2f8>
 8025852:	4628      	mov	r0, r5
 8025854:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025858:	00a5      	lsls	r5, r4, #2
 802585a:	f000 fc1f 	bl	802609c <scalbnf>
 802585e:	aa44      	add	r2, sp, #272	; 0x110
 8025860:	1d2b      	adds	r3, r5, #4
 8025862:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8025964 <__kernel_rem_pio2f+0x308>
 8025866:	18d1      	adds	r1, r2, r3
 8025868:	4622      	mov	r2, r4
 802586a:	2a00      	cmp	r2, #0
 802586c:	f280 80ae 	bge.w	80259cc <__kernel_rem_pio2f+0x370>
 8025870:	4622      	mov	r2, r4
 8025872:	2a00      	cmp	r2, #0
 8025874:	f2c0 80cc 	blt.w	8025a10 <__kernel_rem_pio2f+0x3b4>
 8025878:	a944      	add	r1, sp, #272	; 0x110
 802587a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802587e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802595c <__kernel_rem_pio2f+0x300>
 8025882:	eddf 7a39 	vldr	s15, [pc, #228]	; 8025968 <__kernel_rem_pio2f+0x30c>
 8025886:	2000      	movs	r0, #0
 8025888:	1aa1      	subs	r1, r4, r2
 802588a:	e0b6      	b.n	80259fa <__kernel_rem_pio2f+0x39e>
 802588c:	2702      	movs	r7, #2
 802588e:	e78c      	b.n	80257aa <__kernel_rem_pio2f+0x14e>
 8025890:	6820      	ldr	r0, [r4, #0]
 8025892:	b94b      	cbnz	r3, 80258a8 <__kernel_rem_pio2f+0x24c>
 8025894:	b118      	cbz	r0, 802589e <__kernel_rem_pio2f+0x242>
 8025896:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802589a:	6020      	str	r0, [r4, #0]
 802589c:	2001      	movs	r0, #1
 802589e:	f10e 0e01 	add.w	lr, lr, #1
 80258a2:	3404      	adds	r4, #4
 80258a4:	4603      	mov	r3, r0
 80258a6:	e785      	b.n	80257b4 <__kernel_rem_pio2f+0x158>
 80258a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80258ac:	6020      	str	r0, [r4, #0]
 80258ae:	4618      	mov	r0, r3
 80258b0:	e7f5      	b.n	802589e <__kernel_rem_pio2f+0x242>
 80258b2:	1e74      	subs	r4, r6, #1
 80258b4:	a808      	add	r0, sp, #32
 80258b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80258ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80258be:	f10d 0c20 	add.w	ip, sp, #32
 80258c2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80258c6:	e77e      	b.n	80257c6 <__kernel_rem_pio2f+0x16a>
 80258c8:	1e74      	subs	r4, r6, #1
 80258ca:	a808      	add	r0, sp, #32
 80258cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80258d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80258d4:	e7f3      	b.n	80258be <__kernel_rem_pio2f+0x262>
 80258d6:	ab08      	add	r3, sp, #32
 80258d8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80258dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80258e0:	4318      	orrs	r0, r3
 80258e2:	e7ab      	b.n	802583c <__kernel_rem_pio2f+0x1e0>
 80258e4:	f10c 0c01 	add.w	ip, ip, #1
 80258e8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80258ec:	2c00      	cmp	r4, #0
 80258ee:	d0f9      	beq.n	80258e4 <__kernel_rem_pio2f+0x288>
 80258f0:	9b05      	ldr	r3, [sp, #20]
 80258f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80258f6:	eb0d 0003 	add.w	r0, sp, r3
 80258fa:	9b01      	ldr	r3, [sp, #4]
 80258fc:	18f4      	adds	r4, r6, r3
 80258fe:	ab1c      	add	r3, sp, #112	; 0x70
 8025900:	1c77      	adds	r7, r6, #1
 8025902:	384c      	subs	r0, #76	; 0x4c
 8025904:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025908:	4466      	add	r6, ip
 802590a:	42be      	cmp	r6, r7
 802590c:	f6ff af0b 	blt.w	8025726 <__kernel_rem_pio2f+0xca>
 8025910:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8025914:	f8dd e008 	ldr.w	lr, [sp, #8]
 8025918:	ee07 3a90 	vmov	s15, r3
 802591c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025920:	f04f 0c00 	mov.w	ip, #0
 8025924:	ece4 7a01 	vstmia	r4!, {s15}
 8025928:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8025968 <__kernel_rem_pio2f+0x30c>
 802592c:	46a1      	mov	r9, r4
 802592e:	458c      	cmp	ip, r1
 8025930:	dd07      	ble.n	8025942 <__kernel_rem_pio2f+0x2e6>
 8025932:	ece0 7a01 	vstmia	r0!, {s15}
 8025936:	3701      	adds	r7, #1
 8025938:	e7e7      	b.n	802590a <__kernel_rem_pio2f+0x2ae>
 802593a:	9804      	ldr	r0, [sp, #16]
 802593c:	f04f 0c01 	mov.w	ip, #1
 8025940:	e7d2      	b.n	80258e8 <__kernel_rem_pio2f+0x28c>
 8025942:	ecfe 6a01 	vldmia	lr!, {s13}
 8025946:	ed39 7a01 	vldmdb	r9!, {s14}
 802594a:	f10c 0c01 	add.w	ip, ip, #1
 802594e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025952:	e7ec      	b.n	802592e <__kernel_rem_pio2f+0x2d2>
 8025954:	3c01      	subs	r4, #1
 8025956:	e775      	b.n	8025844 <__kernel_rem_pio2f+0x1e8>
 8025958:	08029c8c 	.word	0x08029c8c
 802595c:	08029c60 	.word	0x08029c60
 8025960:	43800000 	.word	0x43800000
 8025964:	3b800000 	.word	0x3b800000
 8025968:	00000000 	.word	0x00000000
 802596c:	9b03      	ldr	r3, [sp, #12]
 802596e:	eeb0 0a48 	vmov.f32	s0, s16
 8025972:	1a98      	subs	r0, r3, r2
 8025974:	f000 fb92 	bl	802609c <scalbnf>
 8025978:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8025960 <__kernel_rem_pio2f+0x304>
 802597c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025984:	db19      	blt.n	80259ba <__kernel_rem_pio2f+0x35e>
 8025986:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8025964 <__kernel_rem_pio2f+0x308>
 802598a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802598e:	aa08      	add	r2, sp, #32
 8025990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025994:	1c74      	adds	r4, r6, #1
 8025996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802599a:	3508      	adds	r5, #8
 802599c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80259a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80259a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80259a8:	ee10 3a10 	vmov	r3, s0
 80259ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80259b0:	ee17 3a90 	vmov	r3, s15
 80259b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80259b8:	e74b      	b.n	8025852 <__kernel_rem_pio2f+0x1f6>
 80259ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80259be:	aa08      	add	r2, sp, #32
 80259c0:	ee10 3a10 	vmov	r3, s0
 80259c4:	4634      	mov	r4, r6
 80259c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80259ca:	e742      	b.n	8025852 <__kernel_rem_pio2f+0x1f6>
 80259cc:	a808      	add	r0, sp, #32
 80259ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80259d2:	9001      	str	r0, [sp, #4]
 80259d4:	ee07 0a90 	vmov	s15, r0
 80259d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80259dc:	3a01      	subs	r2, #1
 80259de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80259e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80259e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80259ea:	e73e      	b.n	802586a <__kernel_rem_pio2f+0x20e>
 80259ec:	ecfc 6a01 	vldmia	ip!, {s13}
 80259f0:	ecb6 7a01 	vldmia	r6!, {s14}
 80259f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80259f8:	3001      	adds	r0, #1
 80259fa:	4550      	cmp	r0, sl
 80259fc:	dc01      	bgt.n	8025a02 <__kernel_rem_pio2f+0x3a6>
 80259fe:	4288      	cmp	r0, r1
 8025a00:	ddf4      	ble.n	80259ec <__kernel_rem_pio2f+0x390>
 8025a02:	a858      	add	r0, sp, #352	; 0x160
 8025a04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025a08:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8025a0c:	3a01      	subs	r2, #1
 8025a0e:	e730      	b.n	8025872 <__kernel_rem_pio2f+0x216>
 8025a10:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8025a12:	2a02      	cmp	r2, #2
 8025a14:	dc09      	bgt.n	8025a2a <__kernel_rem_pio2f+0x3ce>
 8025a16:	2a00      	cmp	r2, #0
 8025a18:	dc2a      	bgt.n	8025a70 <__kernel_rem_pio2f+0x414>
 8025a1a:	d043      	beq.n	8025aa4 <__kernel_rem_pio2f+0x448>
 8025a1c:	f009 0007 	and.w	r0, r9, #7
 8025a20:	b059      	add	sp, #356	; 0x164
 8025a22:	ecbd 8b04 	vpop	{d8-d9}
 8025a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a2a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8025a2c:	2b03      	cmp	r3, #3
 8025a2e:	d1f5      	bne.n	8025a1c <__kernel_rem_pio2f+0x3c0>
 8025a30:	ab30      	add	r3, sp, #192	; 0xc0
 8025a32:	442b      	add	r3, r5
 8025a34:	461a      	mov	r2, r3
 8025a36:	4619      	mov	r1, r3
 8025a38:	4620      	mov	r0, r4
 8025a3a:	2800      	cmp	r0, #0
 8025a3c:	f1a1 0104 	sub.w	r1, r1, #4
 8025a40:	dc51      	bgt.n	8025ae6 <__kernel_rem_pio2f+0x48a>
 8025a42:	4621      	mov	r1, r4
 8025a44:	2901      	cmp	r1, #1
 8025a46:	f1a2 0204 	sub.w	r2, r2, #4
 8025a4a:	dc5c      	bgt.n	8025b06 <__kernel_rem_pio2f+0x4aa>
 8025a4c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8025968 <__kernel_rem_pio2f+0x30c>
 8025a50:	3304      	adds	r3, #4
 8025a52:	2c01      	cmp	r4, #1
 8025a54:	dc67      	bgt.n	8025b26 <__kernel_rem_pio2f+0x4ca>
 8025a56:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8025a5a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8025a5e:	2f00      	cmp	r7, #0
 8025a60:	d167      	bne.n	8025b32 <__kernel_rem_pio2f+0x4d6>
 8025a62:	edc8 6a00 	vstr	s13, [r8]
 8025a66:	ed88 7a01 	vstr	s14, [r8, #4]
 8025a6a:	edc8 7a02 	vstr	s15, [r8, #8]
 8025a6e:	e7d5      	b.n	8025a1c <__kernel_rem_pio2f+0x3c0>
 8025a70:	aa30      	add	r2, sp, #192	; 0xc0
 8025a72:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8025968 <__kernel_rem_pio2f+0x30c>
 8025a76:	4413      	add	r3, r2
 8025a78:	4622      	mov	r2, r4
 8025a7a:	2a00      	cmp	r2, #0
 8025a7c:	da24      	bge.n	8025ac8 <__kernel_rem_pio2f+0x46c>
 8025a7e:	b34f      	cbz	r7, 8025ad4 <__kernel_rem_pio2f+0x478>
 8025a80:	eef1 7a47 	vneg.f32	s15, s14
 8025a84:	edc8 7a00 	vstr	s15, [r8]
 8025a88:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8025a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025a90:	aa31      	add	r2, sp, #196	; 0xc4
 8025a92:	2301      	movs	r3, #1
 8025a94:	429c      	cmp	r4, r3
 8025a96:	da20      	bge.n	8025ada <__kernel_rem_pio2f+0x47e>
 8025a98:	b10f      	cbz	r7, 8025a9e <__kernel_rem_pio2f+0x442>
 8025a9a:	eef1 7a67 	vneg.f32	s15, s15
 8025a9e:	edc8 7a01 	vstr	s15, [r8, #4]
 8025aa2:	e7bb      	b.n	8025a1c <__kernel_rem_pio2f+0x3c0>
 8025aa4:	aa30      	add	r2, sp, #192	; 0xc0
 8025aa6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8025968 <__kernel_rem_pio2f+0x30c>
 8025aaa:	4413      	add	r3, r2
 8025aac:	2c00      	cmp	r4, #0
 8025aae:	da05      	bge.n	8025abc <__kernel_rem_pio2f+0x460>
 8025ab0:	b10f      	cbz	r7, 8025ab6 <__kernel_rem_pio2f+0x45a>
 8025ab2:	eef1 7a67 	vneg.f32	s15, s15
 8025ab6:	edc8 7a00 	vstr	s15, [r8]
 8025aba:	e7af      	b.n	8025a1c <__kernel_rem_pio2f+0x3c0>
 8025abc:	ed33 7a01 	vldmdb	r3!, {s14}
 8025ac0:	3c01      	subs	r4, #1
 8025ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025ac6:	e7f1      	b.n	8025aac <__kernel_rem_pio2f+0x450>
 8025ac8:	ed73 7a01 	vldmdb	r3!, {s15}
 8025acc:	3a01      	subs	r2, #1
 8025ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025ad2:	e7d2      	b.n	8025a7a <__kernel_rem_pio2f+0x41e>
 8025ad4:	eef0 7a47 	vmov.f32	s15, s14
 8025ad8:	e7d4      	b.n	8025a84 <__kernel_rem_pio2f+0x428>
 8025ada:	ecb2 7a01 	vldmia	r2!, {s14}
 8025ade:	3301      	adds	r3, #1
 8025ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025ae4:	e7d6      	b.n	8025a94 <__kernel_rem_pio2f+0x438>
 8025ae6:	edd1 7a00 	vldr	s15, [r1]
 8025aea:	edd1 6a01 	vldr	s13, [r1, #4]
 8025aee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025af2:	3801      	subs	r0, #1
 8025af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025af8:	ed81 7a00 	vstr	s14, [r1]
 8025afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025b00:	edc1 7a01 	vstr	s15, [r1, #4]
 8025b04:	e799      	b.n	8025a3a <__kernel_rem_pio2f+0x3de>
 8025b06:	edd2 7a00 	vldr	s15, [r2]
 8025b0a:	edd2 6a01 	vldr	s13, [r2, #4]
 8025b0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025b12:	3901      	subs	r1, #1
 8025b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025b18:	ed82 7a00 	vstr	s14, [r2]
 8025b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025b20:	edc2 7a01 	vstr	s15, [r2, #4]
 8025b24:	e78e      	b.n	8025a44 <__kernel_rem_pio2f+0x3e8>
 8025b26:	ed33 7a01 	vldmdb	r3!, {s14}
 8025b2a:	3c01      	subs	r4, #1
 8025b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025b30:	e78f      	b.n	8025a52 <__kernel_rem_pio2f+0x3f6>
 8025b32:	eef1 6a66 	vneg.f32	s13, s13
 8025b36:	eeb1 7a47 	vneg.f32	s14, s14
 8025b3a:	edc8 6a00 	vstr	s13, [r8]
 8025b3e:	ed88 7a01 	vstr	s14, [r8, #4]
 8025b42:	eef1 7a67 	vneg.f32	s15, s15
 8025b46:	e790      	b.n	8025a6a <__kernel_rem_pio2f+0x40e>

08025b48 <__kernel_sinf>:
 8025b48:	ee10 3a10 	vmov	r3, s0
 8025b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025b50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025b54:	da04      	bge.n	8025b60 <__kernel_sinf+0x18>
 8025b56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025b5a:	ee17 3a90 	vmov	r3, s15
 8025b5e:	b35b      	cbz	r3, 8025bb8 <__kernel_sinf+0x70>
 8025b60:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025b64:	eddf 7a15 	vldr	s15, [pc, #84]	; 8025bbc <__kernel_sinf+0x74>
 8025b68:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8025bc0 <__kernel_sinf+0x78>
 8025b6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025b70:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025bc4 <__kernel_sinf+0x7c>
 8025b74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025b78:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025bc8 <__kernel_sinf+0x80>
 8025b7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025b80:	eddf 7a12 	vldr	s15, [pc, #72]	; 8025bcc <__kernel_sinf+0x84>
 8025b84:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025b88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025b8c:	b930      	cbnz	r0, 8025b9c <__kernel_sinf+0x54>
 8025b8e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8025bd0 <__kernel_sinf+0x88>
 8025b92:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025b96:	eea6 0a26 	vfma.f32	s0, s12, s13
 8025b9a:	4770      	bx	lr
 8025b9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8025ba0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8025ba4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8025ba8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8025bac:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025bd4 <__kernel_sinf+0x8c>
 8025bb0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025bb4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025bb8:	4770      	bx	lr
 8025bba:	bf00      	nop
 8025bbc:	2f2ec9d3 	.word	0x2f2ec9d3
 8025bc0:	b2d72f34 	.word	0xb2d72f34
 8025bc4:	3638ef1b 	.word	0x3638ef1b
 8025bc8:	b9500d01 	.word	0xb9500d01
 8025bcc:	3c088889 	.word	0x3c088889
 8025bd0:	be2aaaab 	.word	0xbe2aaaab
 8025bd4:	3e2aaaab 	.word	0x3e2aaaab

08025bd8 <with_errnof>:
 8025bd8:	b513      	push	{r0, r1, r4, lr}
 8025bda:	4604      	mov	r4, r0
 8025bdc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025be0:	f7fd fbba 	bl	8023358 <__errno>
 8025be4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025be8:	6004      	str	r4, [r0, #0]
 8025bea:	b002      	add	sp, #8
 8025bec:	bd10      	pop	{r4, pc}

08025bee <xflowf>:
 8025bee:	b130      	cbz	r0, 8025bfe <xflowf+0x10>
 8025bf0:	eef1 7a40 	vneg.f32	s15, s0
 8025bf4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025bf8:	2022      	movs	r0, #34	; 0x22
 8025bfa:	f7ff bfed 	b.w	8025bd8 <with_errnof>
 8025bfe:	eef0 7a40 	vmov.f32	s15, s0
 8025c02:	e7f7      	b.n	8025bf4 <xflowf+0x6>

08025c04 <__math_uflowf>:
 8025c04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025c0c <__math_uflowf+0x8>
 8025c08:	f7ff bff1 	b.w	8025bee <xflowf>
 8025c0c:	10000000 	.word	0x10000000

08025c10 <__math_oflowf>:
 8025c10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025c18 <__math_oflowf+0x8>
 8025c14:	f7ff bfeb 	b.w	8025bee <xflowf>
 8025c18:	70000000 	.word	0x70000000

08025c1c <fabs>:
 8025c1c:	ec51 0b10 	vmov	r0, r1, d0
 8025c20:	ee10 2a10 	vmov	r2, s0
 8025c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025c28:	ec43 2b10 	vmov	d0, r2, r3
 8025c2c:	4770      	bx	lr
	...

08025c30 <floor>:
 8025c30:	ec51 0b10 	vmov	r0, r1, d0
 8025c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025c3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025c40:	2e13      	cmp	r6, #19
 8025c42:	ee10 5a10 	vmov	r5, s0
 8025c46:	ee10 8a10 	vmov	r8, s0
 8025c4a:	460c      	mov	r4, r1
 8025c4c:	dc32      	bgt.n	8025cb4 <floor+0x84>
 8025c4e:	2e00      	cmp	r6, #0
 8025c50:	da14      	bge.n	8025c7c <floor+0x4c>
 8025c52:	a333      	add	r3, pc, #204	; (adr r3, 8025d20 <floor+0xf0>)
 8025c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c58:	f7da facc 	bl	80001f4 <__adddf3>
 8025c5c:	2200      	movs	r2, #0
 8025c5e:	2300      	movs	r3, #0
 8025c60:	f7da ff0e 	bl	8000a80 <__aeabi_dcmpgt>
 8025c64:	b138      	cbz	r0, 8025c76 <floor+0x46>
 8025c66:	2c00      	cmp	r4, #0
 8025c68:	da57      	bge.n	8025d1a <floor+0xea>
 8025c6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025c6e:	431d      	orrs	r5, r3
 8025c70:	d001      	beq.n	8025c76 <floor+0x46>
 8025c72:	4c2d      	ldr	r4, [pc, #180]	; (8025d28 <floor+0xf8>)
 8025c74:	2500      	movs	r5, #0
 8025c76:	4621      	mov	r1, r4
 8025c78:	4628      	mov	r0, r5
 8025c7a:	e025      	b.n	8025cc8 <floor+0x98>
 8025c7c:	4f2b      	ldr	r7, [pc, #172]	; (8025d2c <floor+0xfc>)
 8025c7e:	4137      	asrs	r7, r6
 8025c80:	ea01 0307 	and.w	r3, r1, r7
 8025c84:	4303      	orrs	r3, r0
 8025c86:	d01f      	beq.n	8025cc8 <floor+0x98>
 8025c88:	a325      	add	r3, pc, #148	; (adr r3, 8025d20 <floor+0xf0>)
 8025c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c8e:	f7da fab1 	bl	80001f4 <__adddf3>
 8025c92:	2200      	movs	r2, #0
 8025c94:	2300      	movs	r3, #0
 8025c96:	f7da fef3 	bl	8000a80 <__aeabi_dcmpgt>
 8025c9a:	2800      	cmp	r0, #0
 8025c9c:	d0eb      	beq.n	8025c76 <floor+0x46>
 8025c9e:	2c00      	cmp	r4, #0
 8025ca0:	bfbe      	ittt	lt
 8025ca2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025ca6:	fa43 f606 	asrlt.w	r6, r3, r6
 8025caa:	19a4      	addlt	r4, r4, r6
 8025cac:	ea24 0407 	bic.w	r4, r4, r7
 8025cb0:	2500      	movs	r5, #0
 8025cb2:	e7e0      	b.n	8025c76 <floor+0x46>
 8025cb4:	2e33      	cmp	r6, #51	; 0x33
 8025cb6:	dd0b      	ble.n	8025cd0 <floor+0xa0>
 8025cb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025cbc:	d104      	bne.n	8025cc8 <floor+0x98>
 8025cbe:	ee10 2a10 	vmov	r2, s0
 8025cc2:	460b      	mov	r3, r1
 8025cc4:	f7da fa96 	bl	80001f4 <__adddf3>
 8025cc8:	ec41 0b10 	vmov	d0, r0, r1
 8025ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8025cd8:	fa23 f707 	lsr.w	r7, r3, r7
 8025cdc:	4207      	tst	r7, r0
 8025cde:	d0f3      	beq.n	8025cc8 <floor+0x98>
 8025ce0:	a30f      	add	r3, pc, #60	; (adr r3, 8025d20 <floor+0xf0>)
 8025ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ce6:	f7da fa85 	bl	80001f4 <__adddf3>
 8025cea:	2200      	movs	r2, #0
 8025cec:	2300      	movs	r3, #0
 8025cee:	f7da fec7 	bl	8000a80 <__aeabi_dcmpgt>
 8025cf2:	2800      	cmp	r0, #0
 8025cf4:	d0bf      	beq.n	8025c76 <floor+0x46>
 8025cf6:	2c00      	cmp	r4, #0
 8025cf8:	da02      	bge.n	8025d00 <floor+0xd0>
 8025cfa:	2e14      	cmp	r6, #20
 8025cfc:	d103      	bne.n	8025d06 <floor+0xd6>
 8025cfe:	3401      	adds	r4, #1
 8025d00:	ea25 0507 	bic.w	r5, r5, r7
 8025d04:	e7b7      	b.n	8025c76 <floor+0x46>
 8025d06:	2301      	movs	r3, #1
 8025d08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025d0c:	fa03 f606 	lsl.w	r6, r3, r6
 8025d10:	4435      	add	r5, r6
 8025d12:	4545      	cmp	r5, r8
 8025d14:	bf38      	it	cc
 8025d16:	18e4      	addcc	r4, r4, r3
 8025d18:	e7f2      	b.n	8025d00 <floor+0xd0>
 8025d1a:	2500      	movs	r5, #0
 8025d1c:	462c      	mov	r4, r5
 8025d1e:	e7aa      	b.n	8025c76 <floor+0x46>
 8025d20:	8800759c 	.word	0x8800759c
 8025d24:	7e37e43c 	.word	0x7e37e43c
 8025d28:	bff00000 	.word	0xbff00000
 8025d2c:	000fffff 	.word	0x000fffff

08025d30 <scalbn>:
 8025d30:	b570      	push	{r4, r5, r6, lr}
 8025d32:	ec55 4b10 	vmov	r4, r5, d0
 8025d36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8025d3a:	4606      	mov	r6, r0
 8025d3c:	462b      	mov	r3, r5
 8025d3e:	b99a      	cbnz	r2, 8025d68 <scalbn+0x38>
 8025d40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025d44:	4323      	orrs	r3, r4
 8025d46:	d036      	beq.n	8025db6 <scalbn+0x86>
 8025d48:	4b39      	ldr	r3, [pc, #228]	; (8025e30 <scalbn+0x100>)
 8025d4a:	4629      	mov	r1, r5
 8025d4c:	ee10 0a10 	vmov	r0, s0
 8025d50:	2200      	movs	r2, #0
 8025d52:	f7da fc05 	bl	8000560 <__aeabi_dmul>
 8025d56:	4b37      	ldr	r3, [pc, #220]	; (8025e34 <scalbn+0x104>)
 8025d58:	429e      	cmp	r6, r3
 8025d5a:	4604      	mov	r4, r0
 8025d5c:	460d      	mov	r5, r1
 8025d5e:	da10      	bge.n	8025d82 <scalbn+0x52>
 8025d60:	a32b      	add	r3, pc, #172	; (adr r3, 8025e10 <scalbn+0xe0>)
 8025d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d66:	e03a      	b.n	8025dde <scalbn+0xae>
 8025d68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025d6c:	428a      	cmp	r2, r1
 8025d6e:	d10c      	bne.n	8025d8a <scalbn+0x5a>
 8025d70:	ee10 2a10 	vmov	r2, s0
 8025d74:	4620      	mov	r0, r4
 8025d76:	4629      	mov	r1, r5
 8025d78:	f7da fa3c 	bl	80001f4 <__adddf3>
 8025d7c:	4604      	mov	r4, r0
 8025d7e:	460d      	mov	r5, r1
 8025d80:	e019      	b.n	8025db6 <scalbn+0x86>
 8025d82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025d86:	460b      	mov	r3, r1
 8025d88:	3a36      	subs	r2, #54	; 0x36
 8025d8a:	4432      	add	r2, r6
 8025d8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025d90:	428a      	cmp	r2, r1
 8025d92:	dd08      	ble.n	8025da6 <scalbn+0x76>
 8025d94:	2d00      	cmp	r5, #0
 8025d96:	a120      	add	r1, pc, #128	; (adr r1, 8025e18 <scalbn+0xe8>)
 8025d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025d9c:	da1c      	bge.n	8025dd8 <scalbn+0xa8>
 8025d9e:	a120      	add	r1, pc, #128	; (adr r1, 8025e20 <scalbn+0xf0>)
 8025da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025da4:	e018      	b.n	8025dd8 <scalbn+0xa8>
 8025da6:	2a00      	cmp	r2, #0
 8025da8:	dd08      	ble.n	8025dbc <scalbn+0x8c>
 8025daa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025dae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025db2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025db6:	ec45 4b10 	vmov	d0, r4, r5
 8025dba:	bd70      	pop	{r4, r5, r6, pc}
 8025dbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025dc0:	da19      	bge.n	8025df6 <scalbn+0xc6>
 8025dc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025dc6:	429e      	cmp	r6, r3
 8025dc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025dcc:	dd0a      	ble.n	8025de4 <scalbn+0xb4>
 8025dce:	a112      	add	r1, pc, #72	; (adr r1, 8025e18 <scalbn+0xe8>)
 8025dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d1e2      	bne.n	8025d9e <scalbn+0x6e>
 8025dd8:	a30f      	add	r3, pc, #60	; (adr r3, 8025e18 <scalbn+0xe8>)
 8025dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dde:	f7da fbbf 	bl	8000560 <__aeabi_dmul>
 8025de2:	e7cb      	b.n	8025d7c <scalbn+0x4c>
 8025de4:	a10a      	add	r1, pc, #40	; (adr r1, 8025e10 <scalbn+0xe0>)
 8025de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025dea:	2b00      	cmp	r3, #0
 8025dec:	d0b8      	beq.n	8025d60 <scalbn+0x30>
 8025dee:	a10e      	add	r1, pc, #56	; (adr r1, 8025e28 <scalbn+0xf8>)
 8025df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025df4:	e7b4      	b.n	8025d60 <scalbn+0x30>
 8025df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025dfa:	3236      	adds	r2, #54	; 0x36
 8025dfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025e00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025e04:	4620      	mov	r0, r4
 8025e06:	4b0c      	ldr	r3, [pc, #48]	; (8025e38 <scalbn+0x108>)
 8025e08:	2200      	movs	r2, #0
 8025e0a:	e7e8      	b.n	8025dde <scalbn+0xae>
 8025e0c:	f3af 8000 	nop.w
 8025e10:	c2f8f359 	.word	0xc2f8f359
 8025e14:	01a56e1f 	.word	0x01a56e1f
 8025e18:	8800759c 	.word	0x8800759c
 8025e1c:	7e37e43c 	.word	0x7e37e43c
 8025e20:	8800759c 	.word	0x8800759c
 8025e24:	fe37e43c 	.word	0xfe37e43c
 8025e28:	c2f8f359 	.word	0xc2f8f359
 8025e2c:	81a56e1f 	.word	0x81a56e1f
 8025e30:	43500000 	.word	0x43500000
 8025e34:	ffff3cb0 	.word	0xffff3cb0
 8025e38:	3c900000 	.word	0x3c900000

08025e3c <atanf>:
 8025e3c:	b538      	push	{r3, r4, r5, lr}
 8025e3e:	ee10 5a10 	vmov	r5, s0
 8025e42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8025e46:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8025e4a:	eef0 7a40 	vmov.f32	s15, s0
 8025e4e:	db10      	blt.n	8025e72 <atanf+0x36>
 8025e50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025e54:	dd04      	ble.n	8025e60 <atanf+0x24>
 8025e56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8025e5e:	bd38      	pop	{r3, r4, r5, pc}
 8025e60:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025f98 <atanf+0x15c>
 8025e64:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8025f9c <atanf+0x160>
 8025e68:	2d00      	cmp	r5, #0
 8025e6a:	bfd8      	it	le
 8025e6c:	eef0 7a40 	vmovle.f32	s15, s0
 8025e70:	e7f3      	b.n	8025e5a <atanf+0x1e>
 8025e72:	4b4b      	ldr	r3, [pc, #300]	; (8025fa0 <atanf+0x164>)
 8025e74:	429c      	cmp	r4, r3
 8025e76:	dc10      	bgt.n	8025e9a <atanf+0x5e>
 8025e78:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8025e7c:	da0a      	bge.n	8025e94 <atanf+0x58>
 8025e7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8025fa4 <atanf+0x168>
 8025e82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025e8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e92:	dce2      	bgt.n	8025e5a <atanf+0x1e>
 8025e94:	f04f 33ff 	mov.w	r3, #4294967295
 8025e98:	e013      	b.n	8025ec2 <atanf+0x86>
 8025e9a:	f000 f8a3 	bl	8025fe4 <fabsf>
 8025e9e:	4b42      	ldr	r3, [pc, #264]	; (8025fa8 <atanf+0x16c>)
 8025ea0:	429c      	cmp	r4, r3
 8025ea2:	dc4f      	bgt.n	8025f44 <atanf+0x108>
 8025ea4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8025ea8:	429c      	cmp	r4, r3
 8025eaa:	dc41      	bgt.n	8025f30 <atanf+0xf4>
 8025eac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8025eb0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025eb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025eb8:	2300      	movs	r3, #0
 8025eba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025ebe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ec2:	1c5a      	adds	r2, r3, #1
 8025ec4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025ec8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8025fac <atanf+0x170>
 8025ecc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8025fb0 <atanf+0x174>
 8025ed0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8025fb4 <atanf+0x178>
 8025ed4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025ed8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8025edc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8025fb8 <atanf+0x17c>
 8025ee0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025ee4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8025fbc <atanf+0x180>
 8025ee8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025eec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8025fc0 <atanf+0x184>
 8025ef0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025ef4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8025fc4 <atanf+0x188>
 8025ef8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025efc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8025fc8 <atanf+0x18c>
 8025f00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025f04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025fcc <atanf+0x190>
 8025f08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025f0c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8025fd0 <atanf+0x194>
 8025f10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025f14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8025fd4 <atanf+0x198>
 8025f18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025f1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025f20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025f28:	d121      	bne.n	8025f6e <atanf+0x132>
 8025f2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025f2e:	e794      	b.n	8025e5a <atanf+0x1e>
 8025f30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025f34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025f38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025f3c:	2301      	movs	r3, #1
 8025f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f42:	e7be      	b.n	8025ec2 <atanf+0x86>
 8025f44:	4b24      	ldr	r3, [pc, #144]	; (8025fd8 <atanf+0x19c>)
 8025f46:	429c      	cmp	r4, r3
 8025f48:	dc0b      	bgt.n	8025f62 <atanf+0x126>
 8025f4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8025f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025f56:	2302      	movs	r3, #2
 8025f58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025f60:	e7af      	b.n	8025ec2 <atanf+0x86>
 8025f62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025f66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f6a:	2303      	movs	r3, #3
 8025f6c:	e7a9      	b.n	8025ec2 <atanf+0x86>
 8025f6e:	4a1b      	ldr	r2, [pc, #108]	; (8025fdc <atanf+0x1a0>)
 8025f70:	491b      	ldr	r1, [pc, #108]	; (8025fe0 <atanf+0x1a4>)
 8025f72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025f76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025f7a:	ed93 0a00 	vldr	s0, [r3]
 8025f7e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8025f82:	ed92 0a00 	vldr	s0, [r2]
 8025f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025f8a:	2d00      	cmp	r5, #0
 8025f8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025f90:	bfb8      	it	lt
 8025f92:	eef1 7a67 	vneglt.f32	s15, s15
 8025f96:	e760      	b.n	8025e5a <atanf+0x1e>
 8025f98:	3fc90fdb 	.word	0x3fc90fdb
 8025f9c:	bfc90fdb 	.word	0xbfc90fdb
 8025fa0:	3edfffff 	.word	0x3edfffff
 8025fa4:	7149f2ca 	.word	0x7149f2ca
 8025fa8:	3f97ffff 	.word	0x3f97ffff
 8025fac:	3c8569d7 	.word	0x3c8569d7
 8025fb0:	3d4bda59 	.word	0x3d4bda59
 8025fb4:	bd6ef16b 	.word	0xbd6ef16b
 8025fb8:	3d886b35 	.word	0x3d886b35
 8025fbc:	3dba2e6e 	.word	0x3dba2e6e
 8025fc0:	3e124925 	.word	0x3e124925
 8025fc4:	3eaaaaab 	.word	0x3eaaaaab
 8025fc8:	bd15a221 	.word	0xbd15a221
 8025fcc:	bd9d8795 	.word	0xbd9d8795
 8025fd0:	bde38e38 	.word	0xbde38e38
 8025fd4:	be4ccccd 	.word	0xbe4ccccd
 8025fd8:	401bffff 	.word	0x401bffff
 8025fdc:	08029c98 	.word	0x08029c98
 8025fe0:	08029ca8 	.word	0x08029ca8

08025fe4 <fabsf>:
 8025fe4:	ee10 3a10 	vmov	r3, s0
 8025fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025fec:	ee00 3a10 	vmov	s0, r3
 8025ff0:	4770      	bx	lr

08025ff2 <finitef>:
 8025ff2:	b082      	sub	sp, #8
 8025ff4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025ff8:	9801      	ldr	r0, [sp, #4]
 8025ffa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025ffe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026002:	bfac      	ite	ge
 8026004:	2000      	movge	r0, #0
 8026006:	2001      	movlt	r0, #1
 8026008:	b002      	add	sp, #8
 802600a:	4770      	bx	lr

0802600c <floorf>:
 802600c:	ee10 3a10 	vmov	r3, s0
 8026010:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026014:	3a7f      	subs	r2, #127	; 0x7f
 8026016:	2a16      	cmp	r2, #22
 8026018:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802601c:	dc2a      	bgt.n	8026074 <floorf+0x68>
 802601e:	2a00      	cmp	r2, #0
 8026020:	da11      	bge.n	8026046 <floorf+0x3a>
 8026022:	eddf 7a18 	vldr	s15, [pc, #96]	; 8026084 <floorf+0x78>
 8026026:	ee30 0a27 	vadd.f32	s0, s0, s15
 802602a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026032:	dd05      	ble.n	8026040 <floorf+0x34>
 8026034:	2b00      	cmp	r3, #0
 8026036:	da23      	bge.n	8026080 <floorf+0x74>
 8026038:	4a13      	ldr	r2, [pc, #76]	; (8026088 <floorf+0x7c>)
 802603a:	2900      	cmp	r1, #0
 802603c:	bf18      	it	ne
 802603e:	4613      	movne	r3, r2
 8026040:	ee00 3a10 	vmov	s0, r3
 8026044:	4770      	bx	lr
 8026046:	4911      	ldr	r1, [pc, #68]	; (802608c <floorf+0x80>)
 8026048:	4111      	asrs	r1, r2
 802604a:	420b      	tst	r3, r1
 802604c:	d0fa      	beq.n	8026044 <floorf+0x38>
 802604e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8026084 <floorf+0x78>
 8026052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026056:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802605a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802605e:	ddef      	ble.n	8026040 <floorf+0x34>
 8026060:	2b00      	cmp	r3, #0
 8026062:	bfbe      	ittt	lt
 8026064:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8026068:	fa40 f202 	asrlt.w	r2, r0, r2
 802606c:	189b      	addlt	r3, r3, r2
 802606e:	ea23 0301 	bic.w	r3, r3, r1
 8026072:	e7e5      	b.n	8026040 <floorf+0x34>
 8026074:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026078:	d3e4      	bcc.n	8026044 <floorf+0x38>
 802607a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802607e:	4770      	bx	lr
 8026080:	2300      	movs	r3, #0
 8026082:	e7dd      	b.n	8026040 <floorf+0x34>
 8026084:	7149f2ca 	.word	0x7149f2ca
 8026088:	bf800000 	.word	0xbf800000
 802608c:	007fffff 	.word	0x007fffff

08026090 <nanf>:
 8026090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026098 <nanf+0x8>
 8026094:	4770      	bx	lr
 8026096:	bf00      	nop
 8026098:	7fc00000 	.word	0x7fc00000

0802609c <scalbnf>:
 802609c:	ee10 3a10 	vmov	r3, s0
 80260a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80260a4:	d025      	beq.n	80260f2 <scalbnf+0x56>
 80260a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80260aa:	d302      	bcc.n	80260b2 <scalbnf+0x16>
 80260ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80260b0:	4770      	bx	lr
 80260b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80260b6:	d122      	bne.n	80260fe <scalbnf+0x62>
 80260b8:	4b2a      	ldr	r3, [pc, #168]	; (8026164 <scalbnf+0xc8>)
 80260ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026168 <scalbnf+0xcc>
 80260be:	4298      	cmp	r0, r3
 80260c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80260c4:	db16      	blt.n	80260f4 <scalbnf+0x58>
 80260c6:	ee10 3a10 	vmov	r3, s0
 80260ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80260ce:	3a19      	subs	r2, #25
 80260d0:	4402      	add	r2, r0
 80260d2:	2afe      	cmp	r2, #254	; 0xfe
 80260d4:	dd15      	ble.n	8026102 <scalbnf+0x66>
 80260d6:	ee10 3a10 	vmov	r3, s0
 80260da:	eddf 7a24 	vldr	s15, [pc, #144]	; 802616c <scalbnf+0xd0>
 80260de:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026170 <scalbnf+0xd4>
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	eeb0 7a67 	vmov.f32	s14, s15
 80260e8:	bfb8      	it	lt
 80260ea:	eef0 7a66 	vmovlt.f32	s15, s13
 80260ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 80260f2:	4770      	bx	lr
 80260f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026174 <scalbnf+0xd8>
 80260f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80260fc:	4770      	bx	lr
 80260fe:	0dd2      	lsrs	r2, r2, #23
 8026100:	e7e6      	b.n	80260d0 <scalbnf+0x34>
 8026102:	2a00      	cmp	r2, #0
 8026104:	dd06      	ble.n	8026114 <scalbnf+0x78>
 8026106:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802610a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802610e:	ee00 3a10 	vmov	s0, r3
 8026112:	4770      	bx	lr
 8026114:	f112 0f16 	cmn.w	r2, #22
 8026118:	da1a      	bge.n	8026150 <scalbnf+0xb4>
 802611a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802611e:	4298      	cmp	r0, r3
 8026120:	ee10 3a10 	vmov	r3, s0
 8026124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026128:	dd0a      	ble.n	8026140 <scalbnf+0xa4>
 802612a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802616c <scalbnf+0xd0>
 802612e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026170 <scalbnf+0xd4>
 8026132:	eef0 7a40 	vmov.f32	s15, s0
 8026136:	2b00      	cmp	r3, #0
 8026138:	bf18      	it	ne
 802613a:	eeb0 0a47 	vmovne.f32	s0, s14
 802613e:	e7db      	b.n	80260f8 <scalbnf+0x5c>
 8026140:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026174 <scalbnf+0xd8>
 8026144:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026178 <scalbnf+0xdc>
 8026148:	eef0 7a40 	vmov.f32	s15, s0
 802614c:	2b00      	cmp	r3, #0
 802614e:	e7f3      	b.n	8026138 <scalbnf+0x9c>
 8026150:	3219      	adds	r2, #25
 8026152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026156:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802615a:	eddf 7a08 	vldr	s15, [pc, #32]	; 802617c <scalbnf+0xe0>
 802615e:	ee07 3a10 	vmov	s14, r3
 8026162:	e7c4      	b.n	80260ee <scalbnf+0x52>
 8026164:	ffff3cb0 	.word	0xffff3cb0
 8026168:	4c000000 	.word	0x4c000000
 802616c:	7149f2ca 	.word	0x7149f2ca
 8026170:	f149f2ca 	.word	0xf149f2ca
 8026174:	0da24260 	.word	0x0da24260
 8026178:	8da24260 	.word	0x8da24260
 802617c:	33000000 	.word	0x33000000

08026180 <_init>:
 8026180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026182:	bf00      	nop
 8026184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026186:	bc08      	pop	{r3}
 8026188:	469e      	mov	lr, r3
 802618a:	4770      	bx	lr

0802618c <_fini>:
 802618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802618e:	bf00      	nop
 8026190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026192:	bc08      	pop	{r3}
 8026194:	469e      	mov	lr, r3
 8026196:	4770      	bx	lr
